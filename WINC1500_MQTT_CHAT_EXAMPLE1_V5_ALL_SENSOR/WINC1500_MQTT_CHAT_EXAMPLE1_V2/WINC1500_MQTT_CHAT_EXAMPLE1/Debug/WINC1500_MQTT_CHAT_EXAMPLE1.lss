
WINC1500_MQTT_CHAT_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c1fc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000e4  20000000  0000c1fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000430  200000e4  0000c2e0  000200e4  2**2
                  ALLOC
  3 .stack        00002004  20000514  0000c710  000200e4  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
  5 .comment      000000ca  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0006f3b1  00000000  00000000  000201d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000096a9  00000000  00000000  0008f587  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00015333  00000000  00000000  00098c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001008  00000000  00000000  000adf63  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001670  00000000  00000000  000aef6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002616a  00000000  00000000  000b05db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00021828  00000000  00000000  000d6745  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009b320  00000000  00000000  000f7f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003694  00000000  00000000  00193290  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	18 25 00 20 d9 61 00 00 d5 61 00 00 d5 61 00 00     .%. .a...a...a..
	...
      2c:	d5 61 00 00 00 00 00 00 00 00 00 00 d5 61 00 00     .a...........a..
      3c:	51 01 00 00 d5 61 00 00 d5 61 00 00 d5 61 00 00     Q....a...a...a..
      4c:	d5 61 00 00 e5 43 00 00 d5 61 00 00 d5 61 00 00     .a...C...a...a..
      5c:	d5 61 00 00 d5 61 00 00 51 49 00 00 61 49 00 00     .a...a..QI..aI..
      6c:	71 49 00 00 81 49 00 00 91 49 00 00 a1 49 00 00     qI...I...I...I..
      7c:	a5 61 00 00 b5 61 00 00 c5 61 00 00 d5 61 00 00     .a...a...a...a..
      8c:	d5 61 00 00 d5 61 00 00 d5 61 00 00 d5 61 00 00     .a...a...a...a..
      9c:	d5 61 00 00 d5 61 00 00 d5 61 00 00 d5 61 00 00     .a...a...a...a..
      ac:	d5 61 00 00 00 00 00 00                             .a......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000e4 	.word	0x200000e4
      d4:	00000000 	.word	0x00000000
      d8:	0000c1fc 	.word	0x0000c1fc

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000e8 	.word	0x200000e8
     108:	0000c1fc 	.word	0x0000c1fc
     10c:	0000c1fc 	.word	0x0000c1fc
     110:	00000000 	.word	0x00000000

00000114 <tick_counter_check_timer>:

bool	tick_counter_check_timer()
{
	bool ret = false;
	
	if( system_tick_count > messages_send_interval)
     114:	4b03      	ldr	r3, [pc, #12]	; (124 <tick_counter_check_timer+0x10>)
     116:	681b      	ldr	r3, [r3, #0]
     118:	4a03      	ldr	r2, [pc, #12]	; (128 <tick_counter_check_timer+0x14>)
     11a:	6810      	ldr	r0, [r2, #0]
		ret = true;
		
	return ret;
     11c:	4298      	cmp	r0, r3
     11e:	4180      	sbcs	r0, r0
     120:	4240      	negs	r0, r0
}
     122:	4770      	bx	lr
     124:	20000104 	.word	0x20000104
     128:	20000100 	.word	0x20000100

0000012c <tick_counter_reset_timer>:

void	tick_counter_reset_timer(int interval)
{
     12c:	b510      	push	{r4, lr}
	messages_send_interval = system_tick_count + interval;
     12e:	4b04      	ldr	r3, [pc, #16]	; (140 <tick_counter_reset_timer+0x14>)
     130:	681b      	ldr	r3, [r3, #0]
     132:	1818      	adds	r0, r3, r0
     134:	4b03      	ldr	r3, [pc, #12]	; (144 <tick_counter_reset_timer+0x18>)
     136:	6018      	str	r0, [r3, #0]
	printf("Timer reset\r\n");
     138:	4803      	ldr	r0, [pc, #12]	; (148 <tick_counter_reset_timer+0x1c>)
     13a:	4b04      	ldr	r3, [pc, #16]	; (14c <tick_counter_reset_timer+0x20>)
     13c:	4798      	blx	r3
}
     13e:	bd10      	pop	{r4, pc}
     140:	20000104 	.word	0x20000104
     144:	20000100 	.word	0x20000100
     148:	0000ad34 	.word	0x0000ad34
     14c:	00009ab5 	.word	0x00009ab5

00000150 <SysTick_Handler>:
/** 
 * \Brief System Callback, run during SysTick interrupt.
*/
void SysTick_Handler(void)
{
	system_tick_count++;
     150:	4a02      	ldr	r2, [pc, #8]	; (15c <SysTick_Handler+0xc>)
     152:	6813      	ldr	r3, [r2, #0]
     154:	3301      	adds	r3, #1
     156:	6013      	str	r3, [r2, #0]
}
     158:	4770      	bx	lr
     15a:	46c0      	nop			; (mov r8, r8)
     15c:	20000104 	.word	0x20000104

00000160 <ams_sensor_read>:
#include "i2c_master.h"

const uint8_t AMS_ADDRESS_AND_READ  = 0x5a;

enum status_code ams_sensor_read(struct i2c_master_module *i2c_master_instance_ptr, int *voc, int *co2)
{
     160:	b570      	push	{r4, r5, r6, lr}
     162:	b086      	sub	sp, #24
     164:	0004      	movs	r4, r0
     166:	000d      	movs	r5, r1
     168:	0016      	movs	r6, r2
    uint8_t data[9];
    struct i2c_master_packet packet = {
     16a:	220c      	movs	r2, #12
     16c:	2100      	movs	r1, #0
     16e:	4668      	mov	r0, sp
     170:	4b12      	ldr	r3, [pc, #72]	; (1bc <ams_sensor_read+0x5c>)
     172:	4798      	blx	r3
     174:	235a      	movs	r3, #90	; 0x5a
     176:	466a      	mov	r2, sp
     178:	8013      	strh	r3, [r2, #0]
     17a:	3b51      	subs	r3, #81	; 0x51
     17c:	8053      	strh	r3, [r2, #2]
     17e:	ab03      	add	r3, sp, #12
     180:	9301      	str	r3, [sp, #4]
	    .data = data,
	    .ten_bit_address = false,
	    .high_speed = false,
    };
    // stop and nack enabled
	enum status_code ret = i2c_master_read_packet_wait(i2c_master_instance_ptr, &packet);
     182:	4669      	mov	r1, sp
     184:	0020      	movs	r0, r4
     186:	4b0e      	ldr	r3, [pc, #56]	; (1c0 <ams_sensor_read+0x60>)
     188:	4798      	blx	r3
    //print_to_terminal("ret in  shtc1_read_async_result = 0x%x\n", ret);
    
    if (ret)
     18a:	2800      	cmp	r0, #0
     18c:	d10e      	bne.n	1ac <ams_sensor_read+0x4c>
		return ret;
    if (data[2])
     18e:	ab03      	add	r3, sp, #12
     190:	7899      	ldrb	r1, [r3, #2]
     192:	2900      	cmp	r1, #0
     194:	d10c      	bne.n	1b0 <ams_sensor_read+0x50>
	{
		printf("data[2] status = 0x%x\n", data[2]);	
		return STATUS_ERR_BAD_DATA;
	}
    
	*co2 = (data[0] << 8) + data[1] ;
     196:	aa03      	add	r2, sp, #12
     198:	7813      	ldrb	r3, [r2, #0]
     19a:	021b      	lsls	r3, r3, #8
     19c:	7851      	ldrb	r1, [r2, #1]
     19e:	185b      	adds	r3, r3, r1
     1a0:	6033      	str	r3, [r6, #0]
	*voc = (data[7] << 8) + data[8] ;
     1a2:	79d3      	ldrb	r3, [r2, #7]
     1a4:	021b      	lsls	r3, r3, #8
     1a6:	7a12      	ldrb	r2, [r2, #8]
     1a8:	189b      	adds	r3, r3, r2
     1aa:	602b      	str	r3, [r5, #0]

    return STATUS_OK;	
	
};
     1ac:	b006      	add	sp, #24
     1ae:	bd70      	pop	{r4, r5, r6, pc}
		printf("data[2] status = 0x%x\n", data[2]);	
     1b0:	4804      	ldr	r0, [pc, #16]	; (1c4 <ams_sensor_read+0x64>)
     1b2:	4b05      	ldr	r3, [pc, #20]	; (1c8 <ams_sensor_read+0x68>)
     1b4:	4798      	blx	r3
		return STATUS_ERR_BAD_DATA;
     1b6:	2013      	movs	r0, #19
     1b8:	e7f8      	b.n	1ac <ams_sensor_read+0x4c>
     1ba:	46c0      	nop			; (mov r8, r8)
     1bc:	00009837 	.word	0x00009837
     1c0:	00000c19 	.word	0x00000c19
     1c4:	0000ad44 	.word	0x0000ad44
     1c8:	00009999 	.word	0x00009999

000001cc <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     1cc:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     1ce:	2200      	movs	r2, #0
     1d0:	2300      	movs	r3, #0
     1d2:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     1d4:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     1d6:	2100      	movs	r1, #0
     1d8:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     1da:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     1dc:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     1de:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     1e0:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     1e2:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     1e4:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     1e6:	24c0      	movs	r4, #192	; 0xc0
     1e8:	0164      	lsls	r4, r4, #5
     1ea:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     1ec:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     1ee:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     1f0:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     1f2:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     1f4:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     1f6:	242a      	movs	r4, #42	; 0x2a
     1f8:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     1fa:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     1fc:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     1fe:	3c06      	subs	r4, #6
     200:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     202:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     204:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     206:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     208:	232b      	movs	r3, #43	; 0x2b
     20a:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     20c:	3301      	adds	r3, #1
     20e:	54c1      	strb	r1, [r0, r3]
}
     210:	bd10      	pop	{r4, pc}
	...

00000214 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     214:	b5f0      	push	{r4, r5, r6, r7, lr}
     216:	46d6      	mov	lr, sl
     218:	464f      	mov	r7, r9
     21a:	4646      	mov	r6, r8
     21c:	b5c0      	push	{r6, r7, lr}
     21e:	b096      	sub	sp, #88	; 0x58
     220:	0007      	movs	r7, r0
     222:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     224:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     226:	4acb      	ldr	r2, [pc, #812]	; (554 <adc_init+0x340>)
     228:	6a10      	ldr	r0, [r2, #32]
     22a:	2380      	movs	r3, #128	; 0x80
     22c:	025b      	lsls	r3, r3, #9
     22e:	4303      	orrs	r3, r0
     230:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     232:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     234:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     236:	07db      	lsls	r3, r3, #31
     238:	d505      	bpl.n	246 <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     23a:	b016      	add	sp, #88	; 0x58
     23c:	bc1c      	pop	{r2, r3, r4}
     23e:	4690      	mov	r8, r2
     240:	4699      	mov	r9, r3
     242:	46a2      	mov	sl, r4
     244:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     246:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     248:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     24a:	079b      	lsls	r3, r3, #30
     24c:	d4f5      	bmi.n	23a <adc_init+0x26>
	module_inst->reference = config->reference;
     24e:	7873      	ldrb	r3, [r6, #1]
     250:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     252:	2b00      	cmp	r3, #0
     254:	d104      	bne.n	260 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     256:	4ac0      	ldr	r2, [pc, #768]	; (558 <adc_init+0x344>)
     258:	6c13      	ldr	r3, [r2, #64]	; 0x40
     25a:	2104      	movs	r1, #4
     25c:	430b      	orrs	r3, r1
     25e:	6413      	str	r3, [r2, #64]	; 0x40
	Adc *const adc_module = module_inst->hw;
     260:	683b      	ldr	r3, [r7, #0]
     262:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     264:	7833      	ldrb	r3, [r6, #0]
     266:	466a      	mov	r2, sp
     268:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     26a:	4669      	mov	r1, sp
     26c:	201e      	movs	r0, #30
     26e:	4bbb      	ldr	r3, [pc, #748]	; (55c <adc_init+0x348>)
     270:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     272:	201e      	movs	r0, #30
     274:	4bba      	ldr	r3, [pc, #744]	; (560 <adc_init+0x34c>)
     276:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     278:	232c      	movs	r3, #44	; 0x2c
     27a:	5cf2      	ldrb	r2, [r6, r3]
     27c:	2a00      	cmp	r2, #0
     27e:	d054      	beq.n	32a <adc_init+0x116>
		uint8_t offset = config->pin_scan.offset_start_scan;
     280:	3b01      	subs	r3, #1
     282:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     284:	7b33      	ldrb	r3, [r6, #12]
     286:	18eb      	adds	r3, r5, r3
     288:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     28a:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     28c:	b2c9      	uxtb	r1, r1
     28e:	428b      	cmp	r3, r1
     290:	d221      	bcs.n	2d6 <adc_init+0xc2>
     292:	1952      	adds	r2, r2, r5
     294:	b2d3      	uxtb	r3, r2
     296:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     298:	4bb2      	ldr	r3, [pc, #712]	; (564 <adc_init+0x350>)
     29a:	469a      	mov	sl, r3
     29c:	e003      	b.n	2a6 <adc_init+0x92>
			offset++;
     29e:	3501      	adds	r5, #1
     2a0:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     2a2:	45a9      	cmp	r9, r5
     2a4:	d017      	beq.n	2d6 <adc_init+0xc2>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     2a6:	240f      	movs	r4, #15
     2a8:	402c      	ands	r4, r5
     2aa:	7b33      	ldrb	r3, [r6, #12]
     2ac:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     2ae:	2250      	movs	r2, #80	; 0x50
     2b0:	49ad      	ldr	r1, [pc, #692]	; (568 <adc_init+0x354>)
     2b2:	a802      	add	r0, sp, #8
     2b4:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2b6:	2c13      	cmp	r4, #19
     2b8:	d8f1      	bhi.n	29e <adc_init+0x8a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2ba:	00a4      	lsls	r4, r4, #2
     2bc:	ab02      	add	r3, sp, #8
     2be:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2c0:	a901      	add	r1, sp, #4
     2c2:	2300      	movs	r3, #0
     2c4:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     2c6:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2c8:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2ca:	3301      	adds	r3, #1
     2cc:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     2ce:	b2c0      	uxtb	r0, r0
     2d0:	4ba6      	ldr	r3, [pc, #664]	; (56c <adc_init+0x358>)
     2d2:	4798      	blx	r3
     2d4:	e7e3      	b.n	29e <adc_init+0x8a>
		_adc_configure_ain_pin(config->negative_input);
     2d6:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     2d8:	2250      	movs	r2, #80	; 0x50
     2da:	49a3      	ldr	r1, [pc, #652]	; (568 <adc_init+0x354>)
     2dc:	a802      	add	r0, sp, #8
     2de:	4ba1      	ldr	r3, [pc, #644]	; (564 <adc_init+0x350>)
     2e0:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2e2:	2c13      	cmp	r4, #19
     2e4:	d913      	bls.n	30e <adc_init+0xfa>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     2e6:	7d73      	ldrb	r3, [r6, #21]
     2e8:	009b      	lsls	r3, r3, #2
     2ea:	b2db      	uxtb	r3, r3
     2ec:	4642      	mov	r2, r8
     2ee:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     2f0:	7db3      	ldrb	r3, [r6, #22]
     2f2:	01db      	lsls	r3, r3, #7
     2f4:	7872      	ldrb	r2, [r6, #1]
     2f6:	4313      	orrs	r3, r2
     2f8:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     2fa:	4642      	mov	r2, r8
     2fc:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     2fe:	7933      	ldrb	r3, [r6, #4]
     300:	2b34      	cmp	r3, #52	; 0x34
     302:	d900      	bls.n	306 <adc_init+0xf2>
     304:	e178      	b.n	5f8 <adc_init+0x3e4>
     306:	009b      	lsls	r3, r3, #2
     308:	4a99      	ldr	r2, [pc, #612]	; (570 <adc_init+0x35c>)
     30a:	58d3      	ldr	r3, [r2, r3]
     30c:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     30e:	00a4      	lsls	r4, r4, #2
     310:	ab02      	add	r3, sp, #8
     312:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     314:	a901      	add	r1, sp, #4
     316:	2300      	movs	r3, #0
     318:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     31a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     31c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     31e:	3301      	adds	r3, #1
     320:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     322:	b2c0      	uxtb	r0, r0
     324:	4b91      	ldr	r3, [pc, #580]	; (56c <adc_init+0x358>)
     326:	4798      	blx	r3
     328:	e7dd      	b.n	2e6 <adc_init+0xd2>
		_adc_configure_ain_pin(config->positive_input);
     32a:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     32c:	2250      	movs	r2, #80	; 0x50
     32e:	498e      	ldr	r1, [pc, #568]	; (568 <adc_init+0x354>)
     330:	a802      	add	r0, sp, #8
     332:	4b8c      	ldr	r3, [pc, #560]	; (564 <adc_init+0x350>)
     334:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     336:	2c13      	cmp	r4, #19
     338:	d915      	bls.n	366 <adc_init+0x152>
		_adc_configure_ain_pin(config->negative_input);
     33a:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     33c:	2250      	movs	r2, #80	; 0x50
     33e:	498a      	ldr	r1, [pc, #552]	; (568 <adc_init+0x354>)
     340:	a802      	add	r0, sp, #8
     342:	4b88      	ldr	r3, [pc, #544]	; (564 <adc_init+0x350>)
     344:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     346:	2c13      	cmp	r4, #19
     348:	d8cd      	bhi.n	2e6 <adc_init+0xd2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     34a:	00a4      	lsls	r4, r4, #2
     34c:	ab02      	add	r3, sp, #8
     34e:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     350:	a901      	add	r1, sp, #4
     352:	2300      	movs	r3, #0
     354:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     356:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     358:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     35a:	3301      	adds	r3, #1
     35c:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     35e:	b2c0      	uxtb	r0, r0
     360:	4b82      	ldr	r3, [pc, #520]	; (56c <adc_init+0x358>)
     362:	4798      	blx	r3
     364:	e7bf      	b.n	2e6 <adc_init+0xd2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     366:	00a4      	lsls	r4, r4, #2
     368:	ab02      	add	r3, sp, #8
     36a:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     36c:	a901      	add	r1, sp, #4
     36e:	2300      	movs	r3, #0
     370:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     372:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     374:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     376:	3301      	adds	r3, #1
     378:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     37a:	b2c0      	uxtb	r0, r0
     37c:	4b7b      	ldr	r3, [pc, #492]	; (56c <adc_init+0x358>)
     37e:	4798      	blx	r3
     380:	e7db      	b.n	33a <adc_init+0x126>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     382:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     384:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     386:	2102      	movs	r1, #2
     388:	e01a      	b.n	3c0 <adc_init+0x1ac>
		adjres = config->divide_result;
     38a:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     38c:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     38e:	2410      	movs	r4, #16
     390:	e016      	b.n	3c0 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     392:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     394:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     396:	2101      	movs	r1, #1
     398:	e012      	b.n	3c0 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     39a:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     39c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     39e:	2100      	movs	r1, #0
     3a0:	e00e      	b.n	3c0 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3a2:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     3a4:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     3a6:	2100      	movs	r1, #0
     3a8:	e00a      	b.n	3c0 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3aa:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     3ac:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     3ae:	2100      	movs	r1, #0
     3b0:	e006      	b.n	3c0 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3b2:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     3b4:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     3b6:	2100      	movs	r1, #0
     3b8:	e002      	b.n	3c0 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     3ba:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     3bc:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     3be:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     3c0:	0109      	lsls	r1, r1, #4
     3c2:	2270      	movs	r2, #112	; 0x70
     3c4:	400a      	ands	r2, r1
     3c6:	4313      	orrs	r3, r2
     3c8:	4642      	mov	r2, r8
     3ca:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     3cc:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     3ce:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     3d0:	2b3f      	cmp	r3, #63	; 0x3f
     3d2:	d900      	bls.n	3d6 <adc_init+0x1c2>
     3d4:	e731      	b.n	23a <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     3d6:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     3d8:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     3da:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     3dc:	b25b      	sxtb	r3, r3
     3de:	2b00      	cmp	r3, #0
     3e0:	dbfb      	blt.n	3da <adc_init+0x1c6>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     3e2:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     3e4:	8872      	ldrh	r2, [r6, #2]
     3e6:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     3e8:	2224      	movs	r2, #36	; 0x24
     3ea:	5cb2      	ldrb	r2, [r6, r2]
     3ec:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     3ee:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     3f0:	7d32      	ldrb	r2, [r6, #20]
     3f2:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     3f4:	4313      	orrs	r3, r2
     3f6:	7cb2      	ldrb	r2, [r6, #18]
     3f8:	0052      	lsls	r2, r2, #1
     3fa:	4313      	orrs	r3, r2
     3fc:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     3fe:	4642      	mov	r2, r8
     400:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     402:	7e33      	ldrb	r3, [r6, #24]
     404:	2b00      	cmp	r3, #0
     406:	d020      	beq.n	44a <adc_init+0x236>
		switch (resolution) {
     408:	2c10      	cmp	r4, #16
     40a:	d100      	bne.n	40e <adc_init+0x1fa>
     40c:	e0d6      	b.n	5bc <adc_init+0x3a8>
     40e:	d800      	bhi.n	412 <adc_init+0x1fe>
     410:	e080      	b.n	514 <adc_init+0x300>
     412:	2c20      	cmp	r4, #32
     414:	d100      	bne.n	418 <adc_init+0x204>
     416:	e0b3      	b.n	580 <adc_init+0x36c>
     418:	2c30      	cmp	r4, #48	; 0x30
     41a:	d116      	bne.n	44a <adc_init+0x236>
			if (config->differential_mode &&
     41c:	7cf2      	ldrb	r2, [r6, #19]
     41e:	2a00      	cmp	r2, #0
     420:	d00a      	beq.n	438 <adc_init+0x224>
					(config->window.window_lower_value > 127 ||
     422:	69f2      	ldr	r2, [r6, #28]
     424:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     426:	2017      	movs	r0, #23
			if (config->differential_mode &&
     428:	2aff      	cmp	r2, #255	; 0xff
     42a:	d900      	bls.n	42e <adc_init+0x21a>
     42c:	e705      	b.n	23a <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     42e:	6a32      	ldr	r2, [r6, #32]
     430:	3280      	adds	r2, #128	; 0x80
     432:	2aff      	cmp	r2, #255	; 0xff
     434:	d900      	bls.n	438 <adc_init+0x224>
     436:	e700      	b.n	23a <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     438:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     43a:	69f2      	ldr	r2, [r6, #28]
     43c:	2aff      	cmp	r2, #255	; 0xff
     43e:	dd00      	ble.n	442 <adc_init+0x22e>
     440:	e6fb      	b.n	23a <adc_init+0x26>
     442:	6a32      	ldr	r2, [r6, #32]
     444:	2aff      	cmp	r2, #255	; 0xff
     446:	dd00      	ble.n	44a <adc_init+0x236>
     448:	e6f7      	b.n	23a <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     44a:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     44c:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     44e:	b252      	sxtb	r2, r2
     450:	2a00      	cmp	r2, #0
     452:	dbfb      	blt.n	44c <adc_init+0x238>
	adc_module->WINCTRL.reg = config->window.window_mode;
     454:	4642      	mov	r2, r8
     456:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     458:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     45a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     45c:	b25b      	sxtb	r3, r3
     45e:	2b00      	cmp	r3, #0
     460:	dbfb      	blt.n	45a <adc_init+0x246>
	adc_module->WINLT.reg =
     462:	8bb3      	ldrh	r3, [r6, #28]
     464:	4642      	mov	r2, r8
     466:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     468:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     46a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     46c:	b25b      	sxtb	r3, r3
     46e:	2b00      	cmp	r3, #0
     470:	dbfb      	blt.n	46a <adc_init+0x256>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     472:	8c33      	ldrh	r3, [r6, #32]
     474:	4642      	mov	r2, r8
     476:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     478:	232c      	movs	r3, #44	; 0x2c
     47a:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     47c:	2b00      	cmp	r3, #0
     47e:	d005      	beq.n	48c <adc_init+0x278>
		inputs_to_scan--;
     480:	3b01      	subs	r3, #1
     482:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     484:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     486:	2b0f      	cmp	r3, #15
     488:	d900      	bls.n	48c <adc_init+0x278>
     48a:	e6d6      	b.n	23a <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     48c:	222b      	movs	r2, #43	; 0x2b
     48e:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     490:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     492:	290f      	cmp	r1, #15
     494:	d900      	bls.n	498 <adc_init+0x284>
     496:	e6d0      	b.n	23a <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     498:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     49a:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     49c:	b252      	sxtb	r2, r2
     49e:	2a00      	cmp	r2, #0
     4a0:	dbfb      	blt.n	49a <adc_init+0x286>
			config->negative_input |
     4a2:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     4a4:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     4a6:	4302      	orrs	r2, r0
     4a8:	68b0      	ldr	r0, [r6, #8]
     4aa:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     4ac:	0509      	lsls	r1, r1, #20
			config->negative_input |
     4ae:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     4b0:	041b      	lsls	r3, r3, #16
			config->negative_input |
     4b2:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     4b4:	4642      	mov	r2, r8
     4b6:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     4b8:	232a      	movs	r3, #42	; 0x2a
     4ba:	5cf3      	ldrb	r3, [r6, r3]
     4bc:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     4be:	230f      	movs	r3, #15
     4c0:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     4c2:	3315      	adds	r3, #21
     4c4:	5cf3      	ldrb	r3, [r6, r3]
     4c6:	2b00      	cmp	r3, #0
     4c8:	d012      	beq.n	4f0 <adc_init+0x2dc>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     4ca:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     4cc:	4a29      	ldr	r2, [pc, #164]	; (574 <adc_init+0x360>)
			return STATUS_ERR_INVALID_ARG;
     4ce:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     4d0:	4293      	cmp	r3, r2
     4d2:	d900      	bls.n	4d6 <adc_init+0x2c2>
     4d4:	e6b1      	b.n	23a <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     4d6:	4642      	mov	r2, r8
     4d8:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     4da:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     4dc:	2380      	movs	r3, #128	; 0x80
     4de:	011b      	lsls	r3, r3, #4
     4e0:	18d3      	adds	r3, r2, r3
     4e2:	4924      	ldr	r1, [pc, #144]	; (574 <adc_init+0x360>)
     4e4:	b29b      	uxth	r3, r3
     4e6:	428b      	cmp	r3, r1
     4e8:	d900      	bls.n	4ec <adc_init+0x2d8>
     4ea:	e6a6      	b.n	23a <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     4ec:	4643      	mov	r3, r8
     4ee:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     4f0:	4b21      	ldr	r3, [pc, #132]	; (578 <adc_init+0x364>)
     4f2:	681b      	ldr	r3, [r3, #0]
     4f4:	015b      	lsls	r3, r3, #5
     4f6:	22e0      	movs	r2, #224	; 0xe0
     4f8:	00d2      	lsls	r2, r2, #3
     4fa:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     4fc:	4a1f      	ldr	r2, [pc, #124]	; (57c <adc_init+0x368>)
     4fe:	6851      	ldr	r1, [r2, #4]
     500:	0149      	lsls	r1, r1, #5
     502:	6812      	ldr	r2, [r2, #0]
     504:	0ed2      	lsrs	r2, r2, #27
     506:	430a      	orrs	r2, r1
     508:	b2d2      	uxtb	r2, r2
			) |
     50a:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     50c:	4642      	mov	r2, r8
     50e:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     510:	2000      	movs	r0, #0
     512:	e692      	b.n	23a <adc_init+0x26>
		switch (resolution) {
     514:	2c00      	cmp	r4, #0
     516:	d198      	bne.n	44a <adc_init+0x236>
			if (config->differential_mode &&
     518:	7cf2      	ldrb	r2, [r6, #19]
     51a:	2a00      	cmp	r2, #0
     51c:	d00f      	beq.n	53e <adc_init+0x32a>
					(config->window.window_lower_value > 2047 ||
     51e:	69f2      	ldr	r2, [r6, #28]
     520:	2180      	movs	r1, #128	; 0x80
     522:	0109      	lsls	r1, r1, #4
     524:	468c      	mov	ip, r1
     526:	4462      	add	r2, ip
			if (config->differential_mode &&
     528:	4912      	ldr	r1, [pc, #72]	; (574 <adc_init+0x360>)
				return STATUS_ERR_INVALID_ARG;
     52a:	2017      	movs	r0, #23
			if (config->differential_mode &&
     52c:	428a      	cmp	r2, r1
     52e:	d900      	bls.n	532 <adc_init+0x31e>
     530:	e683      	b.n	23a <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     532:	6a32      	ldr	r2, [r6, #32]
     534:	4462      	add	r2, ip
     536:	490f      	ldr	r1, [pc, #60]	; (574 <adc_init+0x360>)
     538:	428a      	cmp	r2, r1
     53a:	d900      	bls.n	53e <adc_init+0x32a>
     53c:	e67d      	b.n	23a <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     53e:	4a0d      	ldr	r2, [pc, #52]	; (574 <adc_init+0x360>)
				return STATUS_ERR_INVALID_ARG;
     540:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     542:	69f1      	ldr	r1, [r6, #28]
     544:	4291      	cmp	r1, r2
     546:	dd00      	ble.n	54a <adc_init+0x336>
     548:	e677      	b.n	23a <adc_init+0x26>
     54a:	6a31      	ldr	r1, [r6, #32]
     54c:	4291      	cmp	r1, r2
     54e:	dd00      	ble.n	552 <adc_init+0x33e>
     550:	e673      	b.n	23a <adc_init+0x26>
     552:	e77a      	b.n	44a <adc_init+0x236>
     554:	40000400 	.word	0x40000400
     558:	40000800 	.word	0x40000800
     55c:	00005a1d 	.word	0x00005a1d
     560:	00005991 	.word	0x00005991
     564:	00009801 	.word	0x00009801
     568:	0000ae30 	.word	0x0000ae30
     56c:	00005b15 	.word	0x00005b15
     570:	0000ad5c 	.word	0x0000ad5c
     574:	00000fff 	.word	0x00000fff
     578:	00806024 	.word	0x00806024
     57c:	00806020 	.word	0x00806020
			if (config->differential_mode &&
     580:	7cf2      	ldrb	r2, [r6, #19]
     582:	2a00      	cmp	r2, #0
     584:	d00f      	beq.n	5a6 <adc_init+0x392>
					(config->window.window_lower_value > 511 ||
     586:	69f2      	ldr	r2, [r6, #28]
     588:	2180      	movs	r1, #128	; 0x80
     58a:	0089      	lsls	r1, r1, #2
     58c:	468c      	mov	ip, r1
     58e:	4462      	add	r2, ip
			if (config->differential_mode &&
     590:	491a      	ldr	r1, [pc, #104]	; (5fc <adc_init+0x3e8>)
				return STATUS_ERR_INVALID_ARG;
     592:	2017      	movs	r0, #23
			if (config->differential_mode &&
     594:	428a      	cmp	r2, r1
     596:	d900      	bls.n	59a <adc_init+0x386>
     598:	e64f      	b.n	23a <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     59a:	6a32      	ldr	r2, [r6, #32]
     59c:	4462      	add	r2, ip
     59e:	4917      	ldr	r1, [pc, #92]	; (5fc <adc_init+0x3e8>)
     5a0:	428a      	cmp	r2, r1
     5a2:	d900      	bls.n	5a6 <adc_init+0x392>
     5a4:	e649      	b.n	23a <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     5a6:	4a15      	ldr	r2, [pc, #84]	; (5fc <adc_init+0x3e8>)
				return STATUS_ERR_INVALID_ARG;
     5a8:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     5aa:	69f1      	ldr	r1, [r6, #28]
     5ac:	4291      	cmp	r1, r2
     5ae:	dd00      	ble.n	5b2 <adc_init+0x39e>
     5b0:	e643      	b.n	23a <adc_init+0x26>
     5b2:	6a31      	ldr	r1, [r6, #32]
     5b4:	4291      	cmp	r1, r2
     5b6:	dd00      	ble.n	5ba <adc_init+0x3a6>
     5b8:	e63f      	b.n	23a <adc_init+0x26>
     5ba:	e746      	b.n	44a <adc_init+0x236>
			if (config->differential_mode &&
     5bc:	7cf2      	ldrb	r2, [r6, #19]
     5be:	2a00      	cmp	r2, #0
     5c0:	d00f      	beq.n	5e2 <adc_init+0x3ce>
					(config->window.window_lower_value > 32767 ||
     5c2:	69f2      	ldr	r2, [r6, #28]
     5c4:	2180      	movs	r1, #128	; 0x80
     5c6:	0209      	lsls	r1, r1, #8
     5c8:	468c      	mov	ip, r1
     5ca:	4462      	add	r2, ip
			if (config->differential_mode &&
     5cc:	490c      	ldr	r1, [pc, #48]	; (600 <adc_init+0x3ec>)
				return STATUS_ERR_INVALID_ARG;
     5ce:	2017      	movs	r0, #23
			if (config->differential_mode &&
     5d0:	428a      	cmp	r2, r1
     5d2:	d900      	bls.n	5d6 <adc_init+0x3c2>
     5d4:	e631      	b.n	23a <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     5d6:	6a32      	ldr	r2, [r6, #32]
     5d8:	4462      	add	r2, ip
     5da:	4909      	ldr	r1, [pc, #36]	; (600 <adc_init+0x3ec>)
     5dc:	428a      	cmp	r2, r1
     5de:	d900      	bls.n	5e2 <adc_init+0x3ce>
     5e0:	e62b      	b.n	23a <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     5e2:	4a07      	ldr	r2, [pc, #28]	; (600 <adc_init+0x3ec>)
				return STATUS_ERR_INVALID_ARG;
     5e4:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     5e6:	69f1      	ldr	r1, [r6, #28]
     5e8:	4291      	cmp	r1, r2
     5ea:	dd00      	ble.n	5ee <adc_init+0x3da>
     5ec:	e625      	b.n	23a <adc_init+0x26>
     5ee:	6a31      	ldr	r1, [r6, #32]
     5f0:	4291      	cmp	r1, r2
     5f2:	dd00      	ble.n	5f6 <adc_init+0x3e2>
     5f4:	e621      	b.n	23a <adc_init+0x26>
     5f6:	e728      	b.n	44a <adc_init+0x236>
		return STATUS_ERR_INVALID_ARG;
     5f8:	2017      	movs	r0, #23
     5fa:	e61e      	b.n	23a <adc_init+0x26>
     5fc:	000003ff 	.word	0x000003ff
     600:	0000ffff 	.word	0x0000ffff

00000604 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     604:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     606:	2207      	movs	r2, #7
     608:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     60a:	421a      	tst	r2, r3
     60c:	d1fc      	bne.n	608 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     60e:	4770      	bx	lr

00000610 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     610:	b5f0      	push	{r4, r5, r6, r7, lr}
     612:	46d6      	mov	lr, sl
     614:	464f      	mov	r7, r9
     616:	4646      	mov	r6, r8
     618:	b5c0      	push	{r6, r7, lr}
     61a:	b08a      	sub	sp, #40	; 0x28
     61c:	0006      	movs	r6, r0
     61e:	000f      	movs	r7, r1
     620:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     622:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     624:	0008      	movs	r0, r1
     626:	4ba0      	ldr	r3, [pc, #640]	; (8a8 <i2c_master_init+0x298>)
     628:	4798      	blx	r3
     62a:	4aa0      	ldr	r2, [pc, #640]	; (8ac <i2c_master_init+0x29c>)
     62c:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     62e:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     630:	2301      	movs	r3, #1
     632:	40ab      	lsls	r3, r5
     634:	430b      	orrs	r3, r1
     636:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     638:	a909      	add	r1, sp, #36	; 0x24
     63a:	7b23      	ldrb	r3, [r4, #12]
     63c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     63e:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     640:	b2c5      	uxtb	r5, r0
     642:	0028      	movs	r0, r5
     644:	4b9a      	ldr	r3, [pc, #616]	; (8b0 <i2c_master_init+0x2a0>)
     646:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     648:	0028      	movs	r0, r5
     64a:	4b9a      	ldr	r3, [pc, #616]	; (8b4 <i2c_master_init+0x2a4>)
     64c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     64e:	7b20      	ldrb	r0, [r4, #12]
     650:	2100      	movs	r1, #0
     652:	4b99      	ldr	r3, [pc, #612]	; (8b8 <i2c_master_init+0x2a8>)
     654:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     656:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     658:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     65a:	079b      	lsls	r3, r3, #30
     65c:	d505      	bpl.n	66a <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     65e:	b00a      	add	sp, #40	; 0x28
     660:	bc1c      	pop	{r2, r3, r4}
     662:	4690      	mov	r8, r2
     664:	4699      	mov	r9, r3
     666:	46a2      	mov	sl, r4
     668:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     66a:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     66c:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     66e:	07db      	lsls	r3, r3, #31
     670:	d4f5      	bmi.n	65e <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     672:	6830      	ldr	r0, [r6, #0]
     674:	4b8c      	ldr	r3, [pc, #560]	; (8a8 <i2c_master_init+0x298>)
     676:	4699      	mov	r9, r3
     678:	4798      	blx	r3
     67a:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     67c:	498f      	ldr	r1, [pc, #572]	; (8bc <i2c_master_init+0x2ac>)
     67e:	4b90      	ldr	r3, [pc, #576]	; (8c0 <i2c_master_init+0x2b0>)
     680:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     682:	00ad      	lsls	r5, r5, #2
     684:	4b8f      	ldr	r3, [pc, #572]	; (8c4 <i2c_master_init+0x2b4>)
     686:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
     688:	2300      	movs	r3, #0
     68a:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
     68c:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
     68e:	2500      	movs	r5, #0
     690:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
     692:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
     694:	2225      	movs	r2, #37	; 0x25
     696:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
     698:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     69a:	3314      	adds	r3, #20
     69c:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     69e:	6833      	ldr	r3, [r6, #0]
     6a0:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     6a2:	0018      	movs	r0, r3
     6a4:	47c8      	blx	r9
     6a6:	4681      	mov	r9, r0
	config->mux_position = SYSTEM_PINMUX_GPIO;
     6a8:	2380      	movs	r3, #128	; 0x80
     6aa:	aa08      	add	r2, sp, #32
     6ac:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     6ae:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     6b0:	2301      	movs	r3, #1
     6b2:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     6b4:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     6b6:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     6b8:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     6ba:	2800      	cmp	r0, #0
     6bc:	d100      	bne.n	6c0 <i2c_master_init+0xb0>
     6be:	e0af      	b.n	820 <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
     6c0:	ab08      	add	r3, sp, #32
     6c2:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     6c4:	2302      	movs	r3, #2
     6c6:	aa08      	add	r2, sp, #32
     6c8:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     6ca:	0c00      	lsrs	r0, r0, #16
     6cc:	b2c0      	uxtb	r0, r0
     6ce:	0011      	movs	r1, r2
     6d0:	4b7d      	ldr	r3, [pc, #500]	; (8c8 <i2c_master_init+0x2b8>)
     6d2:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     6d4:	2f00      	cmp	r7, #0
     6d6:	d100      	bne.n	6da <i2c_master_init+0xca>
     6d8:	e0a7      	b.n	82a <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
     6da:	ab08      	add	r3, sp, #32
     6dc:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     6de:	2302      	movs	r3, #2
     6e0:	aa08      	add	r2, sp, #32
     6e2:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     6e4:	0c3f      	lsrs	r7, r7, #16
     6e6:	b2f8      	uxtb	r0, r7
     6e8:	0011      	movs	r1, r2
     6ea:	4b77      	ldr	r3, [pc, #476]	; (8c8 <i2c_master_init+0x2b8>)
     6ec:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     6ee:	8aa3      	ldrh	r3, [r4, #20]
     6f0:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     6f2:	8ae3      	ldrh	r3, [r4, #22]
     6f4:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     6f6:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     6f8:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     6fa:	2b00      	cmp	r3, #0
     6fc:	d104      	bne.n	708 <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     6fe:	4b73      	ldr	r3, [pc, #460]	; (8cc <i2c_master_init+0x2bc>)
     700:	789b      	ldrb	r3, [r3, #2]
     702:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     704:	0fdb      	lsrs	r3, r3, #31
     706:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     708:	68a1      	ldr	r1, [r4, #8]
     70a:	6923      	ldr	r3, [r4, #16]
     70c:	430b      	orrs	r3, r1
     70e:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     710:	2224      	movs	r2, #36	; 0x24
     712:	5ca2      	ldrb	r2, [r4, r2]
     714:	2a00      	cmp	r2, #0
     716:	d002      	beq.n	71e <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     718:	2280      	movs	r2, #128	; 0x80
     71a:	05d2      	lsls	r2, r2, #23
     71c:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     71e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     720:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     722:	222c      	movs	r2, #44	; 0x2c
     724:	5ca2      	ldrb	r2, [r4, r2]
     726:	2a00      	cmp	r2, #0
     728:	d103      	bne.n	732 <i2c_master_init+0x122>
     72a:	2280      	movs	r2, #128	; 0x80
     72c:	0492      	lsls	r2, r2, #18
     72e:	4291      	cmp	r1, r2
     730:	d102      	bne.n	738 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     732:	2280      	movs	r2, #128	; 0x80
     734:	0512      	lsls	r2, r2, #20
     736:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     738:	222d      	movs	r2, #45	; 0x2d
     73a:	5ca2      	ldrb	r2, [r4, r2]
     73c:	2a00      	cmp	r2, #0
     73e:	d002      	beq.n	746 <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     740:	2280      	movs	r2, #128	; 0x80
     742:	0412      	lsls	r2, r2, #16
     744:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     746:	222e      	movs	r2, #46	; 0x2e
     748:	5ca2      	ldrb	r2, [r4, r2]
     74a:	2a00      	cmp	r2, #0
     74c:	d002      	beq.n	754 <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     74e:	2280      	movs	r2, #128	; 0x80
     750:	03d2      	lsls	r2, r2, #15
     752:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     754:	4642      	mov	r2, r8
     756:	6812      	ldr	r2, [r2, #0]
     758:	4313      	orrs	r3, r2
     75a:	4642      	mov	r2, r8
     75c:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     75e:	2380      	movs	r3, #128	; 0x80
     760:	005b      	lsls	r3, r3, #1
     762:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     764:	4648      	mov	r0, r9
     766:	3014      	adds	r0, #20
     768:	b2c0      	uxtb	r0, r0
     76a:	4b59      	ldr	r3, [pc, #356]	; (8d0 <i2c_master_init+0x2c0>)
     76c:	4798      	blx	r3
     76e:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     770:	23fa      	movs	r3, #250	; 0xfa
     772:	009b      	lsls	r3, r3, #2
     774:	6822      	ldr	r2, [r4, #0]
     776:	435a      	muls	r2, r3
     778:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     77a:	6863      	ldr	r3, [r4, #4]
     77c:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     77e:	4d55      	ldr	r5, [pc, #340]	; (8d4 <i2c_master_init+0x2c4>)
     780:	47a8      	blx	r5
     782:	9000      	str	r0, [sp, #0]
     784:	9101      	str	r1, [sp, #4]
     786:	464b      	mov	r3, r9
     788:	0058      	lsls	r0, r3, #1
     78a:	47a8      	blx	r5
     78c:	9002      	str	r0, [sp, #8]
     78e:	9103      	str	r1, [sp, #12]
     790:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     792:	47a8      	blx	r5
     794:	9004      	str	r0, [sp, #16]
     796:	9105      	str	r1, [sp, #20]
     798:	4f4f      	ldr	r7, [pc, #316]	; (8d8 <i2c_master_init+0x2c8>)
     79a:	4a50      	ldr	r2, [pc, #320]	; (8dc <i2c_master_init+0x2cc>)
     79c:	4b50      	ldr	r3, [pc, #320]	; (8e0 <i2c_master_init+0x2d0>)
     79e:	9800      	ldr	r0, [sp, #0]
     7a0:	9901      	ldr	r1, [sp, #4]
     7a2:	47b8      	blx	r7
     7a4:	0002      	movs	r2, r0
     7a6:	000b      	movs	r3, r1
     7a8:	9804      	ldr	r0, [sp, #16]
     7aa:	9905      	ldr	r1, [sp, #20]
     7ac:	47b8      	blx	r7
     7ae:	4e4d      	ldr	r6, [pc, #308]	; (8e4 <i2c_master_init+0x2d4>)
     7b0:	2200      	movs	r2, #0
     7b2:	4b4d      	ldr	r3, [pc, #308]	; (8e8 <i2c_master_init+0x2d8>)
     7b4:	47b0      	blx	r6
     7b6:	9004      	str	r0, [sp, #16]
     7b8:	9105      	str	r1, [sp, #20]
     7ba:	4648      	mov	r0, r9
     7bc:	47a8      	blx	r5
     7be:	0002      	movs	r2, r0
     7c0:	000b      	movs	r3, r1
     7c2:	9804      	ldr	r0, [sp, #16]
     7c4:	9905      	ldr	r1, [sp, #20]
     7c6:	47b8      	blx	r7
     7c8:	0002      	movs	r2, r0
     7ca:	000b      	movs	r3, r1
     7cc:	4d47      	ldr	r5, [pc, #284]	; (8ec <i2c_master_init+0x2dc>)
     7ce:	9800      	ldr	r0, [sp, #0]
     7d0:	9901      	ldr	r1, [sp, #4]
     7d2:	47a8      	blx	r5
     7d4:	9a02      	ldr	r2, [sp, #8]
     7d6:	9b03      	ldr	r3, [sp, #12]
     7d8:	47b0      	blx	r6
     7da:	2200      	movs	r2, #0
     7dc:	4b44      	ldr	r3, [pc, #272]	; (8f0 <i2c_master_init+0x2e0>)
     7de:	47a8      	blx	r5
     7e0:	9a02      	ldr	r2, [sp, #8]
     7e2:	9b03      	ldr	r3, [sp, #12]
     7e4:	4d43      	ldr	r5, [pc, #268]	; (8f4 <i2c_master_init+0x2e4>)
     7e6:	47a8      	blx	r5
     7e8:	4b43      	ldr	r3, [pc, #268]	; (8f8 <i2c_master_init+0x2e8>)
     7ea:	4798      	blx	r3
     7ec:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     7ee:	2380      	movs	r3, #128	; 0x80
     7f0:	049b      	lsls	r3, r3, #18
     7f2:	68a2      	ldr	r2, [r4, #8]
     7f4:	429a      	cmp	r2, r3
     7f6:	d01e      	beq.n	836 <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     7f8:	0003      	movs	r3, r0
     7fa:	2040      	movs	r0, #64	; 0x40
     7fc:	2dff      	cmp	r5, #255	; 0xff
     7fe:	d900      	bls.n	802 <i2c_master_init+0x1f2>
     800:	e72d      	b.n	65e <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     802:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     804:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     806:	25ff      	movs	r5, #255	; 0xff
     808:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     80a:	0624      	lsls	r4, r4, #24
     80c:	4325      	orrs	r5, r4
     80e:	0400      	lsls	r0, r0, #16
     810:	23ff      	movs	r3, #255	; 0xff
     812:	041b      	lsls	r3, r3, #16
     814:	4018      	ands	r0, r3
     816:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     818:	4643      	mov	r3, r8
     81a:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     81c:	2000      	movs	r0, #0
     81e:	e71e      	b.n	65e <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     820:	2100      	movs	r1, #0
     822:	4640      	mov	r0, r8
     824:	4b35      	ldr	r3, [pc, #212]	; (8fc <i2c_master_init+0x2ec>)
     826:	4798      	blx	r3
     828:	e74a      	b.n	6c0 <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     82a:	2101      	movs	r1, #1
     82c:	4640      	mov	r0, r8
     82e:	4b33      	ldr	r3, [pc, #204]	; (8fc <i2c_master_init+0x2ec>)
     830:	4798      	blx	r3
     832:	0007      	movs	r7, r0
     834:	e751      	b.n	6da <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     836:	26fa      	movs	r6, #250	; 0xfa
     838:	00b6      	lsls	r6, r6, #2
     83a:	4653      	mov	r3, sl
     83c:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     83e:	9800      	ldr	r0, [sp, #0]
     840:	9901      	ldr	r1, [sp, #4]
     842:	0002      	movs	r2, r0
     844:	000b      	movs	r3, r1
     846:	4c27      	ldr	r4, [pc, #156]	; (8e4 <i2c_master_init+0x2d4>)
     848:	47a0      	blx	r4
     84a:	9000      	str	r0, [sp, #0]
     84c:	9101      	str	r1, [sp, #4]
     84e:	0030      	movs	r0, r6
     850:	4b20      	ldr	r3, [pc, #128]	; (8d4 <i2c_master_init+0x2c4>)
     852:	4798      	blx	r3
     854:	2200      	movs	r2, #0
     856:	4b2a      	ldr	r3, [pc, #168]	; (900 <i2c_master_init+0x2f0>)
     858:	47b8      	blx	r7
     85a:	0002      	movs	r2, r0
     85c:	000b      	movs	r3, r1
     85e:	9800      	ldr	r0, [sp, #0]
     860:	9901      	ldr	r1, [sp, #4]
     862:	4c24      	ldr	r4, [pc, #144]	; (8f4 <i2c_master_init+0x2e4>)
     864:	47a0      	blx	r4
     866:	2200      	movs	r2, #0
     868:	4b21      	ldr	r3, [pc, #132]	; (8f0 <i2c_master_init+0x2e0>)
     86a:	4c20      	ldr	r4, [pc, #128]	; (8ec <i2c_master_init+0x2dc>)
     86c:	47a0      	blx	r4
     86e:	4b22      	ldr	r3, [pc, #136]	; (8f8 <i2c_master_init+0x2e8>)
     870:	4798      	blx	r3
     872:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     874:	d00c      	beq.n	890 <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     876:	0031      	movs	r1, r6
     878:	9807      	ldr	r0, [sp, #28]
     87a:	4b22      	ldr	r3, [pc, #136]	; (904 <i2c_master_init+0x2f4>)
     87c:	4798      	blx	r3
     87e:	3802      	subs	r0, #2
     880:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     882:	002b      	movs	r3, r5
     884:	2dff      	cmp	r5, #255	; 0xff
     886:	d80c      	bhi.n	8a2 <i2c_master_init+0x292>
     888:	28ff      	cmp	r0, #255	; 0xff
     88a:	d9bc      	bls.n	806 <i2c_master_init+0x1f6>
     88c:	2040      	movs	r0, #64	; 0x40
     88e:	e6e6      	b.n	65e <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     890:	0071      	lsls	r1, r6, #1
     892:	1e48      	subs	r0, r1, #1
     894:	9b07      	ldr	r3, [sp, #28]
     896:	469c      	mov	ip, r3
     898:	4460      	add	r0, ip
     89a:	4b1a      	ldr	r3, [pc, #104]	; (904 <i2c_master_init+0x2f4>)
     89c:	4798      	blx	r3
     89e:	3801      	subs	r0, #1
     8a0:	e7ef      	b.n	882 <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     8a2:	2040      	movs	r0, #64	; 0x40
     8a4:	e6db      	b.n	65e <i2c_master_init+0x4e>
     8a6:	46c0      	nop			; (mov r8, r8)
     8a8:	000048a9 	.word	0x000048a9
     8ac:	40000400 	.word	0x40000400
     8b0:	00005a1d 	.word	0x00005a1d
     8b4:	00005991 	.word	0x00005991
     8b8:	000046e5 	.word	0x000046e5
     8bc:	00000d31 	.word	0x00000d31
     8c0:	000048e5 	.word	0x000048e5
     8c4:	20000420 	.word	0x20000420
     8c8:	00005b15 	.word	0x00005b15
     8cc:	41002000 	.word	0x41002000
     8d0:	00005a39 	.word	0x00005a39
     8d4:	000096f9 	.word	0x000096f9
     8d8:	00008b65 	.word	0x00008b65
     8dc:	e826d695 	.word	0xe826d695
     8e0:	3e112e0b 	.word	0x3e112e0b
     8e4:	00007edd 	.word	0x00007edd
     8e8:	40240000 	.word	0x40240000
     8ec:	00009065 	.word	0x00009065
     8f0:	3ff00000 	.word	0x3ff00000
     8f4:	000084fd 	.word	0x000084fd
     8f8:	00009691 	.word	0x00009691
     8fc:	00004731 	.word	0x00004731
     900:	40080000 	.word	0x40080000
     904:	00007b9d 	.word	0x00007b9d

00000908 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     908:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     90a:	7e1a      	ldrb	r2, [r3, #24]
     90c:	0792      	lsls	r2, r2, #30
     90e:	d507      	bpl.n	920 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     910:	2202      	movs	r2, #2
     912:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     914:	8b5b      	ldrh	r3, [r3, #26]
     916:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     918:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     91a:	17db      	asrs	r3, r3, #31
     91c:	4018      	ands	r0, r3
}
     91e:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     920:	8b5a      	ldrh	r2, [r3, #26]
     922:	0752      	lsls	r2, r2, #29
     924:	d506      	bpl.n	934 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     926:	6859      	ldr	r1, [r3, #4]
     928:	22c0      	movs	r2, #192	; 0xc0
     92a:	0292      	lsls	r2, r2, #10
     92c:	430a      	orrs	r2, r1
     92e:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     930:	2018      	movs	r0, #24
     932:	e7f4      	b.n	91e <_i2c_master_address_response+0x16>
	return STATUS_OK;
     934:	2000      	movs	r0, #0
     936:	e7f2      	b.n	91e <_i2c_master_address_response+0x16>

00000938 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     938:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     93a:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     93c:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     93e:	2401      	movs	r4, #1
     940:	2502      	movs	r5, #2
     942:	7e11      	ldrb	r1, [r2, #24]
     944:	4221      	tst	r1, r4
     946:	d10b      	bne.n	960 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     948:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     94a:	4229      	tst	r1, r5
     94c:	d106      	bne.n	95c <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     94e:	3301      	adds	r3, #1
     950:	b29b      	uxth	r3, r3
     952:	8901      	ldrh	r1, [r0, #8]
     954:	4299      	cmp	r1, r3
     956:	d8f4      	bhi.n	942 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     958:	2012      	movs	r0, #18
     95a:	e002      	b.n	962 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     95c:	2000      	movs	r0, #0
     95e:	e000      	b.n	962 <_i2c_master_wait_for_bus+0x2a>
     960:	2000      	movs	r0, #0
}
     962:	bd30      	pop	{r4, r5, pc}

00000964 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     964:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     966:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     968:	6862      	ldr	r2, [r4, #4]
     96a:	2380      	movs	r3, #128	; 0x80
     96c:	02db      	lsls	r3, r3, #11
     96e:	4313      	orrs	r3, r2
     970:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     972:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     974:	4b02      	ldr	r3, [pc, #8]	; (980 <_i2c_master_send_hs_master_code+0x1c>)
     976:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     978:	2301      	movs	r3, #1
     97a:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     97c:	bd10      	pop	{r4, pc}
     97e:	46c0      	nop			; (mov r8, r8)
     980:	00000939 	.word	0x00000939

00000984 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     984:	b5f0      	push	{r4, r5, r6, r7, lr}
     986:	46de      	mov	lr, fp
     988:	4657      	mov	r7, sl
     98a:	464e      	mov	r6, r9
     98c:	4645      	mov	r5, r8
     98e:	b5e0      	push	{r5, r6, r7, lr}
     990:	b083      	sub	sp, #12
     992:	0006      	movs	r6, r0
     994:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     996:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     998:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     99a:	682b      	ldr	r3, [r5, #0]
     99c:	011b      	lsls	r3, r3, #4
     99e:	0fdb      	lsrs	r3, r3, #31
     9a0:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     9a2:	7a4b      	ldrb	r3, [r1, #9]
     9a4:	2b00      	cmp	r3, #0
     9a6:	d12b      	bne.n	a00 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     9a8:	686b      	ldr	r3, [r5, #4]
     9aa:	4a58      	ldr	r2, [pc, #352]	; (b0c <_i2c_master_read_packet+0x188>)
     9ac:	4013      	ands	r3, r2
     9ae:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     9b0:	464b      	mov	r3, r9
     9b2:	7a1b      	ldrb	r3, [r3, #8]
     9b4:	2b00      	cmp	r3, #0
     9b6:	d127      	bne.n	a08 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     9b8:	464b      	mov	r3, r9
     9ba:	881b      	ldrh	r3, [r3, #0]
     9bc:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     9be:	464a      	mov	r2, r9
     9c0:	7a52      	ldrb	r2, [r2, #9]
     9c2:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     9c4:	4313      	orrs	r3, r2
     9c6:	2201      	movs	r2, #1
     9c8:	4313      	orrs	r3, r2
     9ca:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     9cc:	0030      	movs	r0, r6
     9ce:	4b50      	ldr	r3, [pc, #320]	; (b10 <_i2c_master_read_packet+0x18c>)
     9d0:	4798      	blx	r3
     9d2:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     9d4:	4653      	mov	r3, sl
     9d6:	2b00      	cmp	r3, #0
     9d8:	d003      	beq.n	9e2 <_i2c_master_read_packet+0x5e>
     9da:	464b      	mov	r3, r9
     9dc:	885b      	ldrh	r3, [r3, #2]
     9de:	2b01      	cmp	r3, #1
     9e0:	d03b      	beq.n	a5a <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
     9e2:	686b      	ldr	r3, [r5, #4]
     9e4:	4a49      	ldr	r2, [pc, #292]	; (b0c <_i2c_master_read_packet+0x188>)
     9e6:	4013      	ands	r3, r2
     9e8:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     9ea:	9b01      	ldr	r3, [sp, #4]
     9ec:	2b00      	cmp	r3, #0
     9ee:	d03a      	beq.n	a66 <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     9f0:	9801      	ldr	r0, [sp, #4]
     9f2:	b003      	add	sp, #12
     9f4:	bc3c      	pop	{r2, r3, r4, r5}
     9f6:	4690      	mov	r8, r2
     9f8:	4699      	mov	r9, r3
     9fa:	46a2      	mov	sl, r4
     9fc:	46ab      	mov	fp, r5
     9fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     a00:	7a89      	ldrb	r1, [r1, #10]
     a02:	4b44      	ldr	r3, [pc, #272]	; (b14 <_i2c_master_read_packet+0x190>)
     a04:	4798      	blx	r3
     a06:	e7cf      	b.n	9a8 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
     a08:	464b      	mov	r3, r9
     a0a:	881b      	ldrh	r3, [r3, #0]
     a0c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     a0e:	464a      	mov	r2, r9
     a10:	7a52      	ldrb	r2, [r2, #9]
     a12:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     a14:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     a16:	2280      	movs	r2, #128	; 0x80
     a18:	0212      	lsls	r2, r2, #8
     a1a:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     a1c:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     a1e:	0030      	movs	r0, r6
     a20:	4b3b      	ldr	r3, [pc, #236]	; (b10 <_i2c_master_read_packet+0x18c>)
     a22:	4798      	blx	r3
     a24:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     a26:	686b      	ldr	r3, [r5, #4]
     a28:	4a38      	ldr	r2, [pc, #224]	; (b0c <_i2c_master_read_packet+0x188>)
     a2a:	4013      	ands	r3, r2
     a2c:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
     a2e:	2800      	cmp	r0, #0
     a30:	d1de      	bne.n	9f0 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
     a32:	0030      	movs	r0, r6
     a34:	4b38      	ldr	r3, [pc, #224]	; (b18 <_i2c_master_read_packet+0x194>)
     a36:	4798      	blx	r3
     a38:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
     a3a:	2800      	cmp	r0, #0
     a3c:	d1d8      	bne.n	9f0 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     a3e:	464b      	mov	r3, r9
     a40:	881b      	ldrh	r3, [r3, #0]
     a42:	0a1b      	lsrs	r3, r3, #8
     a44:	2278      	movs	r2, #120	; 0x78
     a46:	4313      	orrs	r3, r2
     a48:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     a4a:	464a      	mov	r2, r9
     a4c:	7a52      	ldrb	r2, [r2, #9]
     a4e:	0392      	lsls	r2, r2, #14
     a50:	2101      	movs	r1, #1
     a52:	430a      	orrs	r2, r1
     a54:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     a56:	626b      	str	r3, [r5, #36]	; 0x24
     a58:	e7b8      	b.n	9cc <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     a5a:	686a      	ldr	r2, [r5, #4]
     a5c:	2380      	movs	r3, #128	; 0x80
     a5e:	02db      	lsls	r3, r3, #11
     a60:	4313      	orrs	r3, r2
     a62:	606b      	str	r3, [r5, #4]
     a64:	e7c1      	b.n	9ea <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
     a66:	0030      	movs	r0, r6
     a68:	4b2b      	ldr	r3, [pc, #172]	; (b18 <_i2c_master_read_packet+0x194>)
     a6a:	4798      	blx	r3
     a6c:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     a6e:	2800      	cmp	r0, #0
     a70:	d1be      	bne.n	9f0 <_i2c_master_read_packet+0x6c>
     a72:	3c01      	subs	r4, #1
     a74:	b2a4      	uxth	r4, r4
     a76:	4680      	mov	r8, r0
		while (tmp_data_length--) {
     a78:	4b28      	ldr	r3, [pc, #160]	; (b1c <_i2c_master_read_packet+0x198>)
     a7a:	469b      	mov	fp, r3
     a7c:	e015      	b.n	aaa <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     a7e:	2c01      	cmp	r4, #1
     a80:	d020      	beq.n	ac4 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
     a82:	0030      	movs	r0, r6
     a84:	4b26      	ldr	r3, [pc, #152]	; (b20 <_i2c_master_read_packet+0x19c>)
     a86:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     a88:	4643      	mov	r3, r8
     a8a:	1c5f      	adds	r7, r3, #1
     a8c:	b2bf      	uxth	r7, r7
     a8e:	2328      	movs	r3, #40	; 0x28
     a90:	5ceb      	ldrb	r3, [r5, r3]
     a92:	464a      	mov	r2, r9
     a94:	6852      	ldr	r2, [r2, #4]
     a96:	4641      	mov	r1, r8
     a98:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
     a9a:	0030      	movs	r0, r6
     a9c:	4b1c      	ldr	r3, [pc, #112]	; (b10 <_i2c_master_read_packet+0x18c>)
     a9e:	4798      	blx	r3
     aa0:	3c01      	subs	r4, #1
     aa2:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
     aa4:	2800      	cmp	r0, #0
     aa6:	d115      	bne.n	ad4 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
     aa8:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
     aaa:	455c      	cmp	r4, fp
     aac:	d014      	beq.n	ad8 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     aae:	8b6b      	ldrh	r3, [r5, #26]
     ab0:	069b      	lsls	r3, r3, #26
     ab2:	d527      	bpl.n	b04 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     ab4:	7af3      	ldrb	r3, [r6, #11]
     ab6:	2b00      	cmp	r3, #0
     ab8:	d0e3      	beq.n	a82 <_i2c_master_read_packet+0xfe>
     aba:	4653      	mov	r3, sl
     abc:	2b00      	cmp	r3, #0
     abe:	d1de      	bne.n	a7e <_i2c_master_read_packet+0xfa>
     ac0:	2c00      	cmp	r4, #0
     ac2:	d1de      	bne.n	a82 <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     ac4:	686a      	ldr	r2, [r5, #4]
     ac6:	2380      	movs	r3, #128	; 0x80
     ac8:	02db      	lsls	r3, r3, #11
     aca:	4313      	orrs	r3, r2
     acc:	606b      	str	r3, [r5, #4]
     ace:	3c01      	subs	r4, #1
     ad0:	b2a4      	uxth	r4, r4
     ad2:	e7ea      	b.n	aaa <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
     ad4:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
     ad6:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     ad8:	7ab3      	ldrb	r3, [r6, #10]
     ada:	2b00      	cmp	r3, #0
     adc:	d109      	bne.n	af2 <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
     ade:	0030      	movs	r0, r6
     ae0:	4b0f      	ldr	r3, [pc, #60]	; (b20 <_i2c_master_read_packet+0x19c>)
     ae2:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     ae4:	2328      	movs	r3, #40	; 0x28
     ae6:	5cea      	ldrb	r2, [r5, r3]
     ae8:	464b      	mov	r3, r9
     aea:	685b      	ldr	r3, [r3, #4]
     aec:	4641      	mov	r1, r8
     aee:	545a      	strb	r2, [r3, r1]
     af0:	e77e      	b.n	9f0 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
     af2:	0030      	movs	r0, r6
     af4:	4b0a      	ldr	r3, [pc, #40]	; (b20 <_i2c_master_read_packet+0x19c>)
     af6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     af8:	686a      	ldr	r2, [r5, #4]
     afa:	23c0      	movs	r3, #192	; 0xc0
     afc:	029b      	lsls	r3, r3, #10
     afe:	4313      	orrs	r3, r2
     b00:	606b      	str	r3, [r5, #4]
     b02:	e7ec      	b.n	ade <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
     b04:	2341      	movs	r3, #65	; 0x41
     b06:	9301      	str	r3, [sp, #4]
     b08:	e772      	b.n	9f0 <_i2c_master_read_packet+0x6c>
     b0a:	46c0      	nop			; (mov r8, r8)
     b0c:	fffbffff 	.word	0xfffbffff
     b10:	00000939 	.word	0x00000939
     b14:	00000965 	.word	0x00000965
     b18:	00000909 	.word	0x00000909
     b1c:	0000ffff 	.word	0x0000ffff
     b20:	00000605 	.word	0x00000605

00000b24 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     b24:	b5f0      	push	{r4, r5, r6, r7, lr}
     b26:	46de      	mov	lr, fp
     b28:	4657      	mov	r7, sl
     b2a:	464e      	mov	r6, r9
     b2c:	4645      	mov	r5, r8
     b2e:	b5e0      	push	{r5, r6, r7, lr}
     b30:	b083      	sub	sp, #12
     b32:	0006      	movs	r6, r0
     b34:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     b36:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     b38:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     b3a:	4b32      	ldr	r3, [pc, #200]	; (c04 <_i2c_master_write_packet+0xe0>)
     b3c:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     b3e:	7a7b      	ldrb	r3, [r7, #9]
     b40:	2b00      	cmp	r3, #0
     b42:	d11d      	bne.n	b80 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     b44:	686b      	ldr	r3, [r5, #4]
     b46:	4a30      	ldr	r2, [pc, #192]	; (c08 <_i2c_master_write_packet+0xe4>)
     b48:	4013      	ands	r3, r2
     b4a:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     b4c:	7a3b      	ldrb	r3, [r7, #8]
     b4e:	2b00      	cmp	r3, #0
     b50:	d01b      	beq.n	b8a <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b52:	883b      	ldrh	r3, [r7, #0]
     b54:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     b56:	7a7a      	ldrb	r2, [r7, #9]
     b58:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b5a:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     b5c:	2280      	movs	r2, #128	; 0x80
     b5e:	0212      	lsls	r2, r2, #8
     b60:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b62:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     b64:	0030      	movs	r0, r6
     b66:	4b29      	ldr	r3, [pc, #164]	; (c0c <_i2c_master_write_packet+0xe8>)
     b68:	4798      	blx	r3
     b6a:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     b6c:	2800      	cmp	r0, #0
     b6e:	d013      	beq.n	b98 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     b70:	9801      	ldr	r0, [sp, #4]
     b72:	b003      	add	sp, #12
     b74:	bc3c      	pop	{r2, r3, r4, r5}
     b76:	4690      	mov	r8, r2
     b78:	4699      	mov	r9, r3
     b7a:	46a2      	mov	sl, r4
     b7c:	46ab      	mov	fp, r5
     b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     b80:	7ab9      	ldrb	r1, [r7, #10]
     b82:	0030      	movs	r0, r6
     b84:	4b22      	ldr	r3, [pc, #136]	; (c10 <_i2c_master_write_packet+0xec>)
     b86:	4798      	blx	r3
     b88:	e7dc      	b.n	b44 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b8a:	883b      	ldrh	r3, [r7, #0]
     b8c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     b8e:	7a7a      	ldrb	r2, [r7, #9]
     b90:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b92:	4313      	orrs	r3, r2
     b94:	626b      	str	r3, [r5, #36]	; 0x24
     b96:	e7e5      	b.n	b64 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
     b98:	0030      	movs	r0, r6
     b9a:	4b1e      	ldr	r3, [pc, #120]	; (c14 <_i2c_master_write_packet+0xf0>)
     b9c:	4798      	blx	r3
     b9e:	1e03      	subs	r3, r0, #0
     ba0:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     ba2:	d1e5      	bne.n	b70 <_i2c_master_write_packet+0x4c>
     ba4:	46a0      	mov	r8, r4
     ba6:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     ba8:	3320      	adds	r3, #32
     baa:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
     bac:	4b15      	ldr	r3, [pc, #84]	; (c04 <_i2c_master_write_packet+0xe0>)
     bae:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
     bb0:	4b16      	ldr	r3, [pc, #88]	; (c0c <_i2c_master_write_packet+0xe8>)
     bb2:	469a      	mov	sl, r3
		while (tmp_data_length--) {
     bb4:	4544      	cmp	r4, r8
     bb6:	d015      	beq.n	be4 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     bb8:	8b6b      	ldrh	r3, [r5, #26]
     bba:	464a      	mov	r2, r9
     bbc:	4213      	tst	r3, r2
     bbe:	d01d      	beq.n	bfc <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
     bc0:	0030      	movs	r0, r6
     bc2:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     bc4:	687b      	ldr	r3, [r7, #4]
     bc6:	5d1a      	ldrb	r2, [r3, r4]
     bc8:	2328      	movs	r3, #40	; 0x28
     bca:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
     bcc:	0030      	movs	r0, r6
     bce:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
     bd0:	2800      	cmp	r0, #0
     bd2:	d106      	bne.n	be2 <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     bd4:	8b6b      	ldrh	r3, [r5, #26]
     bd6:	3401      	adds	r4, #1
     bd8:	075b      	lsls	r3, r3, #29
     bda:	d5eb      	bpl.n	bb4 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
     bdc:	231e      	movs	r3, #30
     bde:	9301      	str	r3, [sp, #4]
     be0:	e000      	b.n	be4 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
     be2:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     be4:	7ab3      	ldrb	r3, [r6, #10]
     be6:	2b00      	cmp	r3, #0
     be8:	d0c2      	beq.n	b70 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
     bea:	0030      	movs	r0, r6
     bec:	4b05      	ldr	r3, [pc, #20]	; (c04 <_i2c_master_write_packet+0xe0>)
     bee:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     bf0:	686a      	ldr	r2, [r5, #4]
     bf2:	23c0      	movs	r3, #192	; 0xc0
     bf4:	029b      	lsls	r3, r3, #10
     bf6:	4313      	orrs	r3, r2
     bf8:	606b      	str	r3, [r5, #4]
     bfa:	e7b9      	b.n	b70 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
     bfc:	2341      	movs	r3, #65	; 0x41
     bfe:	9301      	str	r3, [sp, #4]
     c00:	e7b6      	b.n	b70 <_i2c_master_write_packet+0x4c>
     c02:	46c0      	nop			; (mov r8, r8)
     c04:	00000605 	.word	0x00000605
     c08:	fffbffff 	.word	0xfffbffff
     c0c:	00000939 	.word	0x00000939
     c10:	00000965 	.word	0x00000965
     c14:	00000909 	.word	0x00000909

00000c18 <i2c_master_read_packet_wait>:
{
     c18:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
     c1a:	8b83      	ldrh	r3, [r0, #28]
     c1c:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     c1e:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     c20:	2b00      	cmp	r3, #0
     c22:	d001      	beq.n	c28 <i2c_master_read_packet_wait+0x10>
}
     c24:	0010      	movs	r0, r2
     c26:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     c28:	3301      	adds	r3, #1
     c2a:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     c2c:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     c2e:	4b02      	ldr	r3, [pc, #8]	; (c38 <i2c_master_read_packet_wait+0x20>)
     c30:	4798      	blx	r3
     c32:	0002      	movs	r2, r0
     c34:	e7f6      	b.n	c24 <i2c_master_read_packet_wait+0xc>
     c36:	46c0      	nop			; (mov r8, r8)
     c38:	00000985 	.word	0x00000985

00000c3c <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     c3c:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     c3e:	8b83      	ldrh	r3, [r0, #28]
     c40:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     c42:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     c44:	2b00      	cmp	r3, #0
     c46:	d001      	beq.n	c4c <i2c_master_write_packet_wait_no_stop+0x10>

	module->send_stop = false;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
     c48:	0010      	movs	r0, r2
     c4a:	bd10      	pop	{r4, pc}
	module->send_stop = false;
     c4c:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     c4e:	3301      	adds	r3, #1
     c50:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     c52:	4b02      	ldr	r3, [pc, #8]	; (c5c <i2c_master_write_packet_wait_no_stop+0x20>)
     c54:	4798      	blx	r3
     c56:	0002      	movs	r2, r0
     c58:	e7f6      	b.n	c48 <i2c_master_write_packet_wait_no_stop+0xc>
     c5a:	46c0      	nop			; (mov r8, r8)
     c5c:	00000b25 	.word	0x00000b25

00000c60 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     c60:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     c62:	2207      	movs	r2, #7
     c64:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
     c66:	421a      	tst	r2, r3
     c68:	d1fc      	bne.n	c64 <_i2c_master_wait_for_sync+0x4>
}
     c6a:	4770      	bx	lr

00000c6c <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     c6c:	b570      	push	{r4, r5, r6, lr}
     c6e:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     c70:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     c72:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     c74:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     c76:	8b83      	ldrh	r3, [r0, #28]
     c78:	1aed      	subs	r5, r5, r3
     c7a:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     c7c:	8b83      	ldrh	r3, [r0, #28]
     c7e:	3b01      	subs	r3, #1
     c80:	b29b      	uxth	r3, r3
     c82:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     c84:	0113      	lsls	r3, r2, #4
     c86:	d51d      	bpl.n	cc4 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     c88:	7ac3      	ldrb	r3, [r0, #11]
     c8a:	2b00      	cmp	r3, #0
     c8c:	d003      	beq.n	c96 <_i2c_master_read+0x2a>
     c8e:	8b83      	ldrh	r3, [r0, #28]
     c90:	b29b      	uxth	r3, r3
     c92:	2b01      	cmp	r3, #1
     c94:	d010      	beq.n	cb8 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     c96:	8ba3      	ldrh	r3, [r4, #28]
     c98:	b29b      	uxth	r3, r3
     c9a:	2b00      	cmp	r3, #0
     c9c:	d102      	bne.n	ca4 <_i2c_master_read+0x38>
		if (module->send_stop) {
     c9e:	7aa3      	ldrb	r3, [r4, #10]
     ca0:	2b00      	cmp	r3, #0
     ca2:	d11c      	bne.n	cde <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     ca4:	0020      	movs	r0, r4
     ca6:	4b12      	ldr	r3, [pc, #72]	; (cf0 <_i2c_master_read+0x84>)
     ca8:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     caa:	6a23      	ldr	r3, [r4, #32]
     cac:	195d      	adds	r5, r3, r5
     cae:	2328      	movs	r3, #40	; 0x28
     cb0:	5cf3      	ldrb	r3, [r6, r3]
     cb2:	b2db      	uxtb	r3, r3
     cb4:	702b      	strb	r3, [r5, #0]
}
     cb6:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     cb8:	6872      	ldr	r2, [r6, #4]
     cba:	2380      	movs	r3, #128	; 0x80
     cbc:	02db      	lsls	r3, r3, #11
     cbe:	4313      	orrs	r3, r2
     cc0:	6073      	str	r3, [r6, #4]
     cc2:	e7e8      	b.n	c96 <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     cc4:	7ac3      	ldrb	r3, [r0, #11]
     cc6:	2b00      	cmp	r3, #0
     cc8:	d0e5      	beq.n	c96 <_i2c_master_read+0x2a>
     cca:	8b83      	ldrh	r3, [r0, #28]
     ccc:	b29b      	uxth	r3, r3
     cce:	2b00      	cmp	r3, #0
     cd0:	d1e1      	bne.n	c96 <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     cd2:	6872      	ldr	r2, [r6, #4]
     cd4:	2380      	movs	r3, #128	; 0x80
     cd6:	02db      	lsls	r3, r3, #11
     cd8:	4313      	orrs	r3, r2
     cda:	6073      	str	r3, [r6, #4]
     cdc:	e7db      	b.n	c96 <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     cde:	0020      	movs	r0, r4
     ce0:	4b03      	ldr	r3, [pc, #12]	; (cf0 <_i2c_master_read+0x84>)
     ce2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     ce4:	6872      	ldr	r2, [r6, #4]
     ce6:	23c0      	movs	r3, #192	; 0xc0
     ce8:	029b      	lsls	r3, r3, #10
     cea:	4313      	orrs	r3, r2
     cec:	6073      	str	r3, [r6, #4]
     cee:	e7d9      	b.n	ca4 <_i2c_master_read+0x38>
     cf0:	00000c61 	.word	0x00000c61

00000cf4 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     cf4:	b570      	push	{r4, r5, r6, lr}
     cf6:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     cf8:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     cfa:	8b6b      	ldrh	r3, [r5, #26]
     cfc:	075b      	lsls	r3, r3, #29
     cfe:	d503      	bpl.n	d08 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     d00:	221e      	movs	r2, #30
     d02:	2325      	movs	r3, #37	; 0x25
     d04:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     d06:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     d08:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     d0a:	8b83      	ldrh	r3, [r0, #28]
     d0c:	1af6      	subs	r6, r6, r3
     d0e:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     d10:	8b83      	ldrh	r3, [r0, #28]
     d12:	3b01      	subs	r3, #1
     d14:	b29b      	uxth	r3, r3
     d16:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     d18:	4b04      	ldr	r3, [pc, #16]	; (d2c <_i2c_master_write+0x38>)
     d1a:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     d1c:	6a23      	ldr	r3, [r4, #32]
     d1e:	199e      	adds	r6, r3, r6
     d20:	7833      	ldrb	r3, [r6, #0]
     d22:	b2db      	uxtb	r3, r3
     d24:	2228      	movs	r2, #40	; 0x28
     d26:	54ab      	strb	r3, [r5, r2]
     d28:	e7ed      	b.n	d06 <_i2c_master_write+0x12>
     d2a:	46c0      	nop			; (mov r8, r8)
     d2c:	00000c61 	.word	0x00000c61

00000d30 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     d30:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     d32:	0080      	lsls	r0, r0, #2
     d34:	4b75      	ldr	r3, [pc, #468]	; (f0c <_i2c_master_interrupt_handler+0x1dc>)
     d36:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     d38:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     d3a:	682b      	ldr	r3, [r5, #0]
     d3c:	011b      	lsls	r3, r3, #4
     d3e:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     d40:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     d42:	7e26      	ldrb	r6, [r4, #24]
     d44:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     d46:	8b63      	ldrh	r3, [r4, #26]
     d48:	b29b      	uxth	r3, r3
     d4a:	2b00      	cmp	r3, #0
     d4c:	d103      	bne.n	d56 <_i2c_master_interrupt_handler+0x26>
     d4e:	8ba3      	ldrh	r3, [r4, #28]
     d50:	b29b      	uxth	r3, r3
     d52:	2b00      	cmp	r3, #0
     d54:	d123      	bne.n	d9e <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     d56:	8b63      	ldrh	r3, [r4, #26]
     d58:	b29b      	uxth	r3, r3
     d5a:	2b00      	cmp	r3, #0
     d5c:	d008      	beq.n	d70 <_i2c_master_interrupt_handler+0x40>
     d5e:	8ba3      	ldrh	r3, [r4, #28]
     d60:	b29b      	uxth	r3, r3
     d62:	2b00      	cmp	r3, #0
     d64:	d104      	bne.n	d70 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
     d66:	3325      	adds	r3, #37	; 0x25
     d68:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     d6a:	2b05      	cmp	r3, #5
     d6c:	d100      	bne.n	d70 <_i2c_master_interrupt_handler+0x40>
     d6e:	e06d      	b.n	e4c <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     d70:	8b63      	ldrh	r3, [r4, #26]
     d72:	b29b      	uxth	r3, r3
     d74:	2b00      	cmp	r3, #0
     d76:	d024      	beq.n	dc2 <_i2c_master_interrupt_handler+0x92>
     d78:	8ba3      	ldrh	r3, [r4, #28]
     d7a:	b29b      	uxth	r3, r3
     d7c:	2b00      	cmp	r3, #0
     d7e:	d020      	beq.n	dc2 <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     d80:	8b6b      	ldrh	r3, [r5, #26]
     d82:	069b      	lsls	r3, r3, #26
     d84:	d500      	bpl.n	d88 <_i2c_master_interrupt_handler+0x58>
     d86:	e081      	b.n	e8c <_i2c_master_interrupt_handler+0x15c>
     d88:	2a00      	cmp	r2, #0
     d8a:	d004      	beq.n	d96 <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     d8c:	8ba3      	ldrh	r3, [r4, #28]
     d8e:	b29b      	uxth	r3, r3
     d90:	2b01      	cmp	r3, #1
     d92:	d100      	bne.n	d96 <_i2c_master_interrupt_handler+0x66>
     d94:	e07a      	b.n	e8c <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     d96:	2241      	movs	r2, #65	; 0x41
     d98:	2325      	movs	r3, #37	; 0x25
     d9a:	54e2      	strb	r2, [r4, r3]
     d9c:	e011      	b.n	dc2 <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     d9e:	7e2b      	ldrb	r3, [r5, #24]
     da0:	07db      	lsls	r3, r3, #31
     da2:	d507      	bpl.n	db4 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     da4:	2301      	movs	r3, #1
     da6:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     da8:	8b6b      	ldrh	r3, [r5, #26]
     daa:	079b      	lsls	r3, r3, #30
     dac:	d52e      	bpl.n	e0c <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     dae:	2241      	movs	r2, #65	; 0x41
     db0:	2325      	movs	r3, #37	; 0x25
     db2:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     db4:	8ba3      	ldrh	r3, [r4, #28]
     db6:	b29b      	uxth	r3, r3
     db8:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     dba:	2325      	movs	r3, #37	; 0x25
     dbc:	5ce3      	ldrb	r3, [r4, r3]
     dbe:	2b05      	cmp	r3, #5
     dc0:	d038      	beq.n	e34 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     dc2:	8b63      	ldrh	r3, [r4, #26]
     dc4:	b29b      	uxth	r3, r3
     dc6:	2b00      	cmp	r3, #0
     dc8:	d007      	beq.n	dda <_i2c_master_interrupt_handler+0xaa>
     dca:	8ba3      	ldrh	r3, [r4, #28]
     dcc:	b29b      	uxth	r3, r3
     dce:	2b00      	cmp	r3, #0
     dd0:	d103      	bne.n	dda <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     dd2:	3325      	adds	r3, #37	; 0x25
     dd4:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     dd6:	2b05      	cmp	r3, #5
     dd8:	d064      	beq.n	ea4 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     dda:	2325      	movs	r3, #37	; 0x25
     ddc:	5ce3      	ldrb	r3, [r4, r3]
     dde:	2b05      	cmp	r3, #5
     de0:	d013      	beq.n	e0a <_i2c_master_interrupt_handler+0xda>
     de2:	2325      	movs	r3, #37	; 0x25
     de4:	5ce3      	ldrb	r3, [r4, r3]
     de6:	2b00      	cmp	r3, #0
     de8:	d00f      	beq.n	e0a <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     dea:	2303      	movs	r3, #3
     dec:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     dee:	2300      	movs	r3, #0
     df0:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     df2:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     df4:	3325      	adds	r3, #37	; 0x25
     df6:	5ce3      	ldrb	r3, [r4, r3]
     df8:	2b41      	cmp	r3, #65	; 0x41
     dfa:	d003      	beq.n	e04 <_i2c_master_interrupt_handler+0xd4>
     dfc:	7aa3      	ldrb	r3, [r4, #10]
     dfe:	2b00      	cmp	r3, #0
     e00:	d000      	beq.n	e04 <_i2c_master_interrupt_handler+0xd4>
     e02:	e075      	b.n	ef0 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     e04:	0773      	lsls	r3, r6, #29
     e06:	d500      	bpl.n	e0a <_i2c_master_interrupt_handler+0xda>
     e08:	e07b      	b.n	f02 <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     e0a:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     e0c:	8b6b      	ldrh	r3, [r5, #26]
     e0e:	075b      	lsls	r3, r3, #29
     e10:	d5d0      	bpl.n	db4 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     e12:	2218      	movs	r2, #24
     e14:	2325      	movs	r3, #37	; 0x25
     e16:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     e18:	2300      	movs	r3, #0
     e1a:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     e1c:	7aa3      	ldrb	r3, [r4, #10]
     e1e:	2b00      	cmp	r3, #0
     e20:	d0c8      	beq.n	db4 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     e22:	0020      	movs	r0, r4
     e24:	4b3a      	ldr	r3, [pc, #232]	; (f10 <_i2c_master_interrupt_handler+0x1e0>)
     e26:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     e28:	686a      	ldr	r2, [r5, #4]
     e2a:	23c0      	movs	r3, #192	; 0xc0
     e2c:	029b      	lsls	r3, r3, #10
     e2e:	4313      	orrs	r3, r2
     e30:	606b      	str	r3, [r5, #4]
     e32:	e7bf      	b.n	db4 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     e34:	331f      	adds	r3, #31
     e36:	5ce3      	ldrb	r3, [r4, r3]
     e38:	2b00      	cmp	r3, #0
     e3a:	d003      	beq.n	e44 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     e3c:	0020      	movs	r0, r4
     e3e:	4b35      	ldr	r3, [pc, #212]	; (f14 <_i2c_master_interrupt_handler+0x1e4>)
     e40:	4798      	blx	r3
     e42:	e7be      	b.n	dc2 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     e44:	0020      	movs	r0, r4
     e46:	4b34      	ldr	r3, [pc, #208]	; (f18 <_i2c_master_interrupt_handler+0x1e8>)
     e48:	4798      	blx	r3
     e4a:	e7ba      	b.n	dc2 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     e4c:	331f      	adds	r3, #31
     e4e:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     e50:	2b00      	cmp	r3, #0
     e52:	d000      	beq.n	e56 <_i2c_master_interrupt_handler+0x126>
     e54:	e78c      	b.n	d70 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
     e56:	3303      	adds	r3, #3
     e58:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     e5a:	2300      	movs	r3, #0
     e5c:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     e5e:	3325      	adds	r3, #37	; 0x25
     e60:	2200      	movs	r2, #0
     e62:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     e64:	7aa3      	ldrb	r3, [r4, #10]
     e66:	2b00      	cmp	r3, #0
     e68:	d107      	bne.n	e7a <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     e6a:	2301      	movs	r3, #1
     e6c:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     e6e:	07f3      	lsls	r3, r6, #31
     e70:	d5a7      	bpl.n	dc2 <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     e72:	68e3      	ldr	r3, [r4, #12]
     e74:	0020      	movs	r0, r4
     e76:	4798      	blx	r3
     e78:	e7a3      	b.n	dc2 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     e7a:	0020      	movs	r0, r4
     e7c:	4b24      	ldr	r3, [pc, #144]	; (f10 <_i2c_master_interrupt_handler+0x1e0>)
     e7e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     e80:	686a      	ldr	r2, [r5, #4]
     e82:	23c0      	movs	r3, #192	; 0xc0
     e84:	029b      	lsls	r3, r3, #10
     e86:	4313      	orrs	r3, r2
     e88:	606b      	str	r3, [r5, #4]
     e8a:	e7f0      	b.n	e6e <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     e8c:	2324      	movs	r3, #36	; 0x24
     e8e:	5ce3      	ldrb	r3, [r4, r3]
     e90:	2b00      	cmp	r3, #0
     e92:	d103      	bne.n	e9c <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     e94:	0020      	movs	r0, r4
     e96:	4b20      	ldr	r3, [pc, #128]	; (f18 <_i2c_master_interrupt_handler+0x1e8>)
     e98:	4798      	blx	r3
     e9a:	e792      	b.n	dc2 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     e9c:	0020      	movs	r0, r4
     e9e:	4b1d      	ldr	r3, [pc, #116]	; (f14 <_i2c_master_interrupt_handler+0x1e4>)
     ea0:	4798      	blx	r3
     ea2:	e78e      	b.n	dc2 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     ea4:	331f      	adds	r3, #31
     ea6:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     ea8:	2b01      	cmp	r3, #1
     eaa:	d196      	bne.n	dda <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     eac:	7e2b      	ldrb	r3, [r5, #24]
     eae:	079b      	lsls	r3, r3, #30
     eb0:	d501      	bpl.n	eb6 <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     eb2:	2302      	movs	r3, #2
     eb4:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     eb6:	2303      	movs	r3, #3
     eb8:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     eba:	2300      	movs	r3, #0
     ebc:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     ebe:	3325      	adds	r3, #37	; 0x25
     ec0:	2200      	movs	r2, #0
     ec2:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     ec4:	07b3      	lsls	r3, r6, #30
     ec6:	d503      	bpl.n	ed0 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     ec8:	2324      	movs	r3, #36	; 0x24
     eca:	5ce3      	ldrb	r3, [r4, r3]
     ecc:	2b01      	cmp	r3, #1
     ece:	d00b      	beq.n	ee8 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     ed0:	07f3      	lsls	r3, r6, #31
     ed2:	d400      	bmi.n	ed6 <_i2c_master_interrupt_handler+0x1a6>
     ed4:	e781      	b.n	dda <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     ed6:	2324      	movs	r3, #36	; 0x24
     ed8:	5ce3      	ldrb	r3, [r4, r3]
     eda:	2b00      	cmp	r3, #0
     edc:	d000      	beq.n	ee0 <_i2c_master_interrupt_handler+0x1b0>
     ede:	e77c      	b.n	dda <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     ee0:	68e3      	ldr	r3, [r4, #12]
     ee2:	0020      	movs	r0, r4
     ee4:	4798      	blx	r3
     ee6:	e778      	b.n	dda <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     ee8:	6923      	ldr	r3, [r4, #16]
     eea:	0020      	movs	r0, r4
     eec:	4798      	blx	r3
     eee:	e774      	b.n	dda <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     ef0:	0020      	movs	r0, r4
     ef2:	4b07      	ldr	r3, [pc, #28]	; (f10 <_i2c_master_interrupt_handler+0x1e0>)
     ef4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     ef6:	686a      	ldr	r2, [r5, #4]
     ef8:	23e0      	movs	r3, #224	; 0xe0
     efa:	02db      	lsls	r3, r3, #11
     efc:	4313      	orrs	r3, r2
     efe:	606b      	str	r3, [r5, #4]
     f00:	e780      	b.n	e04 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     f02:	6963      	ldr	r3, [r4, #20]
     f04:	0020      	movs	r0, r4
     f06:	4798      	blx	r3
}
     f08:	e77f      	b.n	e0a <_i2c_master_interrupt_handler+0xda>
     f0a:	46c0      	nop			; (mov r8, r8)
     f0c:	20000420 	.word	0x20000420
     f10:	00000c61 	.word	0x00000c61
     f14:	00000c6d 	.word	0x00000c6d
     f18:	00000cf5 	.word	0x00000cf5

00000f1c <shtc1_check_crc>:
static const uint8_t ID_REG_MASK       = 0x1f;
static const uint8_t CRC_POLYNOMIAL    = 0x31;
static const uint8_t CRC_INIT          = 0xff;

static bool shtc1_check_crc(uint8_t *data, uint8_t data_length, uint8_t checksum)
{
     f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t crc = CRC_INIT;
    uint8_t current_byte;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < data_length; ++current_byte)
     f1e:	2900      	cmp	r1, #0
     f20:	d01c      	beq.n	f5c <shtc1_check_crc+0x40>
     f22:	0006      	movs	r6, r0
     f24:	3901      	subs	r1, #1
     f26:	b2c9      	uxtb	r1, r1
     f28:	3101      	adds	r1, #1
     f2a:	1840      	adds	r0, r0, r1
     f2c:	23ff      	movs	r3, #255	; 0xff
    {
        crc ^= (data[current_byte]);
     f2e:	2508      	movs	r5, #8
        for (uint8_t bit = 8; bit > 0; --bit)
        {
            if (crc & 0x80)
                crc = (crc << 1) ^ CRC_POLYNOMIAL;
     f30:	2731      	movs	r7, #49	; 0x31
     f32:	e00f      	b.n	f54 <shtc1_check_crc+0x38>
     f34:	005b      	lsls	r3, r3, #1
     f36:	407b      	eors	r3, r7
     f38:	b2db      	uxtb	r3, r3
     f3a:	3901      	subs	r1, #1
     f3c:	b2c9      	uxtb	r1, r1
        for (uint8_t bit = 8; bit > 0; --bit)
     f3e:	2900      	cmp	r1, #0
     f40:	d005      	beq.n	f4e <shtc1_check_crc+0x32>
            if (crc & 0x80)
     f42:	b25c      	sxtb	r4, r3
     f44:	2c00      	cmp	r4, #0
     f46:	dbf5      	blt.n	f34 <shtc1_check_crc+0x18>
            else
                crc = (crc << 1);
     f48:	005b      	lsls	r3, r3, #1
     f4a:	b2db      	uxtb	r3, r3
     f4c:	e7f5      	b.n	f3a <shtc1_check_crc+0x1e>
     f4e:	3601      	adds	r6, #1
    for (current_byte = 0; current_byte < data_length; ++current_byte)
     f50:	4286      	cmp	r6, r0
     f52:	d004      	beq.n	f5e <shtc1_check_crc+0x42>
        crc ^= (data[current_byte]);
     f54:	7831      	ldrb	r1, [r6, #0]
     f56:	404b      	eors	r3, r1
     f58:	0029      	movs	r1, r5
     f5a:	e7f2      	b.n	f42 <shtc1_check_crc+0x26>
    uint8_t crc = CRC_INIT;
     f5c:	23ff      	movs	r3, #255	; 0xff
        }
    }
    return crc == checksum;
     f5e:	1ad2      	subs	r2, r2, r3
     f60:	4250      	negs	r0, r2
     f62:	4150      	adcs	r0, r2
     f64:	b2c0      	uxtb	r0, r0
}
     f66:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000f68 <shtc1_read_async_result>:

enum status_code shtc1_read_async_result(struct i2c_master_module *i2c_master_instance_ptr,
        int *temp, int *rh)
{
     f68:	b5f0      	push	{r4, r5, r6, r7, lr}
     f6a:	b087      	sub	sp, #28
     f6c:	0005      	movs	r5, r0
     f6e:	000f      	movs	r7, r1
     f70:	0016      	movs	r6, r2
    uint8_t data[6];
    struct i2c_master_packet packet = {
     f72:	ac01      	add	r4, sp, #4
     f74:	220c      	movs	r2, #12
     f76:	2100      	movs	r1, #0
     f78:	0020      	movs	r0, r4
     f7a:	4b1e      	ldr	r3, [pc, #120]	; (ff4 <shtc1_read_async_result+0x8c>)
     f7c:	4798      	blx	r3
     f7e:	2370      	movs	r3, #112	; 0x70
     f80:	8023      	strh	r3, [r4, #0]
     f82:	3b6a      	subs	r3, #106	; 0x6a
     f84:	8063      	strh	r3, [r4, #2]
     f86:	ab04      	add	r3, sp, #16
     f88:	6063      	str	r3, [r4, #4]
            .data_length = sizeof(data),
            .data = data,
			.ten_bit_address = false,
			.high_speed = false,
    };
    enum status_code ret = i2c_master_read_packet_wait(i2c_master_instance_ptr, &packet);
     f8a:	0021      	movs	r1, r4
     f8c:	0028      	movs	r0, r5
     f8e:	4b1a      	ldr	r3, [pc, #104]	; (ff8 <shtc1_read_async_result+0x90>)
     f90:	4798      	blx	r3
     f92:	1e04      	subs	r4, r0, #0
    if (ret)
     f94:	d107      	bne.n	fa6 <shtc1_read_async_result+0x3e>
        return ret;
    if (!shtc1_check_crc(data, 2, data[2]) || !shtc1_check_crc(data + 3, 2, data[5]))
     f96:	a804      	add	r0, sp, #16
     f98:	7882      	ldrb	r2, [r0, #2]
     f9a:	2102      	movs	r1, #2
     f9c:	4b17      	ldr	r3, [pc, #92]	; (ffc <shtc1_read_async_result+0x94>)
     f9e:	4798      	blx	r3
     fa0:	2800      	cmp	r0, #0
     fa2:	d103      	bne.n	fac <shtc1_read_async_result+0x44>
        return STATUS_ERR_BAD_DATA;
     fa4:	2413      	movs	r4, #19
    *rh = (data[4] & 0xff) | (data[3] << 8);
    *temp = ((21875 * *temp) >> 13) - 45000;
    *rh = ((12500 * *rh) >> 13);

    return STATUS_OK;
}
     fa6:	0020      	movs	r0, r4
     fa8:	b007      	add	sp, #28
     faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!shtc1_check_crc(data, 2, data[2]) || !shtc1_check_crc(data + 3, 2, data[5]))
     fac:	ab04      	add	r3, sp, #16
     fae:	795a      	ldrb	r2, [r3, #5]
     fb0:	2102      	movs	r1, #2
     fb2:	2013      	movs	r0, #19
     fb4:	4468      	add	r0, sp
     fb6:	4b11      	ldr	r3, [pc, #68]	; (ffc <shtc1_read_async_result+0x94>)
     fb8:	4798      	blx	r3
     fba:	2800      	cmp	r0, #0
     fbc:	d101      	bne.n	fc2 <shtc1_read_async_result+0x5a>
        return STATUS_ERR_BAD_DATA;
     fbe:	2413      	movs	r4, #19
     fc0:	e7f1      	b.n	fa6 <shtc1_read_async_result+0x3e>
    *temp = (data[1] & 0xff) | (data[0] << 8);
     fc2:	aa04      	add	r2, sp, #16
     fc4:	7813      	ldrb	r3, [r2, #0]
     fc6:	021b      	lsls	r3, r3, #8
     fc8:	7851      	ldrb	r1, [r2, #1]
     fca:	430b      	orrs	r3, r1
     fcc:	603b      	str	r3, [r7, #0]
    *rh = (data[4] & 0xff) | (data[3] << 8);
     fce:	78d3      	ldrb	r3, [r2, #3]
     fd0:	021b      	lsls	r3, r3, #8
     fd2:	7912      	ldrb	r2, [r2, #4]
     fd4:	4313      	orrs	r3, r2
     fd6:	6033      	str	r3, [r6, #0]
    *temp = ((21875 * *temp) >> 13) - 45000;
     fd8:	4b09      	ldr	r3, [pc, #36]	; (1000 <shtc1_read_async_result+0x98>)
     fda:	683a      	ldr	r2, [r7, #0]
     fdc:	4353      	muls	r3, r2
     fde:	135b      	asrs	r3, r3, #13
     fe0:	4a08      	ldr	r2, [pc, #32]	; (1004 <shtc1_read_async_result+0x9c>)
     fe2:	4694      	mov	ip, r2
     fe4:	4463      	add	r3, ip
     fe6:	603b      	str	r3, [r7, #0]
    *rh = ((12500 * *rh) >> 13);
     fe8:	4b07      	ldr	r3, [pc, #28]	; (1008 <shtc1_read_async_result+0xa0>)
     fea:	6832      	ldr	r2, [r6, #0]
     fec:	4353      	muls	r3, r2
     fee:	135b      	asrs	r3, r3, #13
     ff0:	6033      	str	r3, [r6, #0]
    return STATUS_OK;
     ff2:	e7d8      	b.n	fa6 <shtc1_read_async_result+0x3e>
     ff4:	00009837 	.word	0x00009837
     ff8:	00000c19 	.word	0x00000c19
     ffc:	00000f1d 	.word	0x00000f1d
    1000:	00005573 	.word	0x00005573
    1004:	ffff5038 	.word	0xffff5038
    1008:	000030d4 	.word	0x000030d4

0000100c <shtc1_read_sync>:

static enum status_code shtc1_read_sync(struct i2c_master_module *i2c_master_instance_ptr,
        const uint8_t command[], int *temp, int *rh)
{
    100c:	b5f0      	push	{r4, r5, r6, r7, lr}
    100e:	b087      	sub	sp, #28
    1010:	0004      	movs	r4, r0
    1012:	000d      	movs	r5, r1
    1014:	9201      	str	r2, [sp, #4]
    1016:	001e      	movs	r6, r3
    enum status_code ret;
    struct i2c_master_packet packet = {
    1018:	af03      	add	r7, sp, #12
    101a:	220c      	movs	r2, #12
    101c:	2100      	movs	r1, #0
    101e:	0038      	movs	r0, r7
    1020:	4b0a      	ldr	r3, [pc, #40]	; (104c <shtc1_read_sync+0x40>)
    1022:	4798      	blx	r3
    1024:	2370      	movs	r3, #112	; 0x70
    1026:	803b      	strh	r3, [r7, #0]
    1028:	3b6e      	subs	r3, #110	; 0x6e
    102a:	807b      	strh	r3, [r7, #2]
    102c:	607d      	str	r5, [r7, #4]
            .data_length = COMMAND_SIZE,
            .data = (uint8_t *)command,
			.ten_bit_address = false,
			.high_speed = false,
    };
    ret = i2c_master_write_packet_wait_no_stop(i2c_master_instance_ptr, &packet);
    102e:	0039      	movs	r1, r7
    1030:	0020      	movs	r0, r4
    1032:	4b07      	ldr	r3, [pc, #28]	; (1050 <shtc1_read_sync+0x44>)
    1034:	4798      	blx	r3
    if (ret)
    1036:	2800      	cmp	r0, #0
    1038:	d001      	beq.n	103e <shtc1_read_sync+0x32>
        return ret;
    return shtc1_read_async_result(i2c_master_instance_ptr, temp, rh);
}
    103a:	b007      	add	sp, #28
    103c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return shtc1_read_async_result(i2c_master_instance_ptr, temp, rh);
    103e:	0032      	movs	r2, r6
    1040:	9901      	ldr	r1, [sp, #4]
    1042:	0020      	movs	r0, r4
    1044:	4b03      	ldr	r3, [pc, #12]	; (1054 <shtc1_read_sync+0x48>)
    1046:	4798      	blx	r3
    1048:	e7f7      	b.n	103a <shtc1_read_sync+0x2e>
    104a:	46c0      	nop			; (mov r8, r8)
    104c:	00009837 	.word	0x00009837
    1050:	00000c3d 	.word	0x00000c3d
    1054:	00000f69 	.word	0x00000f69

00001058 <shtc1_read_lpm_sync>:

enum status_code shtc1_read_lpm_sync(struct i2c_master_module *i2c_master_instance_ptr,
        int *temp, int *rh)
{
    1058:	b510      	push	{r4, lr}
    105a:	0013      	movs	r3, r2
    return shtc1_read_sync(i2c_master_instance_ptr, CMD_MEASURE_LPM_CS, temp, rh);
    105c:	000a      	movs	r2, r1
    105e:	4902      	ldr	r1, [pc, #8]	; (1068 <shtc1_read_lpm_sync+0x10>)
    1060:	4c02      	ldr	r4, [pc, #8]	; (106c <shtc1_read_lpm_sync+0x14>)
    1062:	47a0      	blx	r4
}
    1064:	bd10      	pop	{r4, pc}
    1066:	46c0      	nop			; (mov r8, r8)
    1068:	0000ae80 	.word	0x0000ae80
    106c:	0000100d 	.word	0x0000100d

00001070 <shtc1_probe>:
    };
    return i2c_master_write_packet_wait(i2c_master_instance_ptr, &packet);
}

bool shtc1_probe(struct i2c_master_module *i2c_master_instance_ptr)
{
    1070:	b510      	push	{r4, lr}
    1072:	b084      	sub	sp, #16
    1074:	0004      	movs	r4, r0
    uint8_t data[3];
    struct i2c_master_packet packet = {
    1076:	220c      	movs	r2, #12
    1078:	2100      	movs	r1, #0
    107a:	4668      	mov	r0, sp
    107c:	4b15      	ldr	r3, [pc, #84]	; (10d4 <shtc1_probe+0x64>)
    107e:	4798      	blx	r3
    1080:	2370      	movs	r3, #112	; 0x70
    1082:	466a      	mov	r2, sp
    1084:	8013      	strh	r3, [r2, #0]
    1086:	3b6e      	subs	r3, #110	; 0x6e
    1088:	8053      	strh	r3, [r2, #2]
    108a:	4b13      	ldr	r3, [pc, #76]	; (10d8 <shtc1_probe+0x68>)
    108c:	9301      	str	r3, [sp, #4]
            .data_length = COMMAND_SIZE,
            .data = (uint8_t *)CMD_READ_ID_REG,
			.ten_bit_address = false,
			.high_speed = false,
    };
    i2c_master_write_packet_wait_no_stop(i2c_master_instance_ptr, &packet);
    108e:	4669      	mov	r1, sp
    1090:	0020      	movs	r0, r4
    1092:	4b12      	ldr	r3, [pc, #72]	; (10dc <shtc1_probe+0x6c>)
    1094:	4798      	blx	r3
    packet.data_length = sizeof(data);
    1096:	2303      	movs	r3, #3
    1098:	466a      	mov	r2, sp
    109a:	8053      	strh	r3, [r2, #2]
    packet.data = data;
    109c:	ab03      	add	r3, sp, #12
    109e:	9301      	str	r3, [sp, #4]
    enum status_code ret = i2c_master_read_packet_wait(i2c_master_instance_ptr, &packet);
    10a0:	4669      	mov	r1, sp
    10a2:	0020      	movs	r0, r4
    10a4:	4b0e      	ldr	r3, [pc, #56]	; (10e0 <shtc1_probe+0x70>)
    10a6:	4798      	blx	r3
    10a8:	0003      	movs	r3, r0

    if (ret)
        return false;
    10aa:	2000      	movs	r0, #0
    if (ret)
    10ac:	2b00      	cmp	r3, #0
    10ae:	d10e      	bne.n	10ce <shtc1_probe+0x5e>
    if (!shtc1_check_crc(data, 2, data[2]))
    10b0:	a803      	add	r0, sp, #12
    10b2:	7882      	ldrb	r2, [r0, #2]
    10b4:	2102      	movs	r1, #2
    10b6:	4b0b      	ldr	r3, [pc, #44]	; (10e4 <shtc1_probe+0x74>)
    10b8:	4798      	blx	r3
    10ba:	2800      	cmp	r0, #0
    10bc:	d007      	beq.n	10ce <shtc1_probe+0x5e>
        return false;
    return (data[1] & ID_REG_MASK) == ID_REG_CONTENT;
    10be:	ab03      	add	r3, sp, #12
    10c0:	785b      	ldrb	r3, [r3, #1]
    10c2:	201f      	movs	r0, #31
    10c4:	4018      	ands	r0, r3
    10c6:	3807      	subs	r0, #7
    10c8:	4243      	negs	r3, r0
    10ca:	4158      	adcs	r0, r3
    10cc:	b2c0      	uxtb	r0, r0
}
    10ce:	b004      	add	sp, #16
    10d0:	bd10      	pop	{r4, pc}
    10d2:	46c0      	nop			; (mov r8, r8)
    10d4:	00009837 	.word	0x00009837
    10d8:	0000ae84 	.word	0x0000ae84
    10dc:	00000c3d 	.word	0x00000c3d
    10e0:	00000c19 	.word	0x00000c19
    10e4:	00000f1d 	.word	0x00000f1d

000010e8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    10e8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    10ea:	2000      	movs	r0, #0
    10ec:	4b08      	ldr	r3, [pc, #32]	; (1110 <delay_init+0x28>)
    10ee:	4798      	blx	r3
    10f0:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    10f2:	4c08      	ldr	r4, [pc, #32]	; (1114 <delay_init+0x2c>)
    10f4:	21fa      	movs	r1, #250	; 0xfa
    10f6:	0089      	lsls	r1, r1, #2
    10f8:	47a0      	blx	r4
    10fa:	4b07      	ldr	r3, [pc, #28]	; (1118 <delay_init+0x30>)
    10fc:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    10fe:	4907      	ldr	r1, [pc, #28]	; (111c <delay_init+0x34>)
    1100:	0028      	movs	r0, r5
    1102:	47a0      	blx	r4
    1104:	4b06      	ldr	r3, [pc, #24]	; (1120 <delay_init+0x38>)
    1106:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1108:	2205      	movs	r2, #5
    110a:	4b06      	ldr	r3, [pc, #24]	; (1124 <delay_init+0x3c>)
    110c:	601a      	str	r2, [r3, #0]
}
    110e:	bd70      	pop	{r4, r5, r6, pc}
    1110:	00005905 	.word	0x00005905
    1114:	00007b9d 	.word	0x00007b9d
    1118:	20000000 	.word	0x20000000
    111c:	000f4240 	.word	0x000f4240
    1120:	20000004 	.word	0x20000004
    1124:	e000e010 	.word	0xe000e010

00001128 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    1128:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    112a:	4b08      	ldr	r3, [pc, #32]	; (114c <delay_cycles_ms+0x24>)
    112c:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    112e:	4a08      	ldr	r2, [pc, #32]	; (1150 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    1130:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1132:	2180      	movs	r1, #128	; 0x80
    1134:	0249      	lsls	r1, r1, #9
	while (n--) {
    1136:	3801      	subs	r0, #1
    1138:	d307      	bcc.n	114a <delay_cycles_ms+0x22>
	if (n > 0) {
    113a:	2c00      	cmp	r4, #0
    113c:	d0fb      	beq.n	1136 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    113e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1140:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1142:	6813      	ldr	r3, [r2, #0]
    1144:	420b      	tst	r3, r1
    1146:	d0fc      	beq.n	1142 <delay_cycles_ms+0x1a>
    1148:	e7f5      	b.n	1136 <delay_cycles_ms+0xe>
	}
}
    114a:	bd30      	pop	{r4, r5, pc}
    114c:	20000000 	.word	0x20000000
    1150:	e000e010 	.word	0xe000e010

00001154 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    1154:	b510      	push	{r4, lr}
	if (gpfIsr) {
    1156:	4b03      	ldr	r3, [pc, #12]	; (1164 <chip_isr+0x10>)
    1158:	681b      	ldr	r3, [r3, #0]
    115a:	2b00      	cmp	r3, #0
    115c:	d000      	beq.n	1160 <chip_isr+0xc>
		gpfIsr();
    115e:	4798      	blx	r3
	}
}
    1160:	bd10      	pop	{r4, pc}
    1162:	46c0      	nop			; (mov r8, r8)
    1164:	20000108 	.word	0x20000108

00001168 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    1168:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
    116a:	1e44      	subs	r4, r0, #1
    116c:	2800      	cmp	r0, #0
    116e:	d004      	beq.n	117a <nm_bsp_sleep+0x12>
		delay_ms(1);
    1170:	4d02      	ldr	r5, [pc, #8]	; (117c <nm_bsp_sleep+0x14>)
    1172:	2001      	movs	r0, #1
    1174:	47a8      	blx	r5
	while (u32TimeMsec--) {
    1176:	3c01      	subs	r4, #1
    1178:	d2fb      	bcs.n	1172 <nm_bsp_sleep+0xa>
	}
}
    117a:	bd70      	pop	{r4, r5, r6, pc}
    117c:	00001129 	.word	0x00001129

00001180 <nm_bsp_reset>:
{
    1180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1182:	4c07      	ldr	r4, [pc, #28]	; (11a0 <nm_bsp_reset+0x20>)
    1184:	2720      	movs	r7, #32
    1186:	6167      	str	r7, [r4, #20]
    1188:	2640      	movs	r6, #64	; 0x40
    118a:	6166      	str	r6, [r4, #20]
	nm_bsp_sleep(100);
    118c:	2064      	movs	r0, #100	; 0x64
    118e:	4d05      	ldr	r5, [pc, #20]	; (11a4 <nm_bsp_reset+0x24>)
    1190:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    1192:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(100);
    1194:	2064      	movs	r0, #100	; 0x64
    1196:	47a8      	blx	r5
    1198:	61a6      	str	r6, [r4, #24]
	nm_bsp_sleep(100);
    119a:	2064      	movs	r0, #100	; 0x64
    119c:	47a8      	blx	r5
}
    119e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    11a0:	41004480 	.word	0x41004480
    11a4:	00001169 	.word	0x00001169

000011a8 <nm_bsp_init>:
{
    11a8:	b570      	push	{r4, r5, r6, lr}
    11aa:	b082      	sub	sp, #8
	gpfIsr = NULL;
    11ac:	2300      	movs	r3, #0
    11ae:	4a15      	ldr	r2, [pc, #84]	; (1204 <nm_bsp_init+0x5c>)
    11b0:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    11b2:	ac01      	add	r4, sp, #4
    11b4:	2501      	movs	r5, #1
    11b6:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    11b8:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    11ba:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    11bc:	0021      	movs	r1, r4
    11be:	2026      	movs	r0, #38	; 0x26
    11c0:	4e11      	ldr	r6, [pc, #68]	; (1208 <nm_bsp_init+0x60>)
    11c2:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    11c4:	0021      	movs	r1, r4
    11c6:	2025      	movs	r0, #37	; 0x25
    11c8:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    11ca:	0021      	movs	r1, r4
    11cc:	2027      	movs	r0, #39	; 0x27
    11ce:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    11d0:	4b0e      	ldr	r3, [pc, #56]	; (120c <nm_bsp_init+0x64>)
    11d2:	2220      	movs	r2, #32
    11d4:	615a      	str	r2, [r3, #20]
    11d6:	3220      	adds	r2, #32
    11d8:	615a      	str	r2, [r3, #20]
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    11da:	4b0d      	ldr	r3, [pc, #52]	; (1210 <nm_bsp_init+0x68>)
    11dc:	681b      	ldr	r3, [r3, #0]
    11de:	421d      	tst	r5, r3
    11e0:	d003      	beq.n	11ea <nm_bsp_init+0x42>
    11e2:	4b0b      	ldr	r3, [pc, #44]	; (1210 <nm_bsp_init+0x68>)
    11e4:	681b      	ldr	r3, [r3, #0]
    11e6:	079b      	lsls	r3, r3, #30
    11e8:	d401      	bmi.n	11ee <nm_bsp_init+0x46>
	    delay_init();
    11ea:	4b0a      	ldr	r3, [pc, #40]	; (1214 <nm_bsp_init+0x6c>)
    11ec:	4798      	blx	r3
	nm_bsp_reset();
    11ee:	4b0a      	ldr	r3, [pc, #40]	; (1218 <nm_bsp_init+0x70>)
    11f0:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    11f2:	2201      	movs	r2, #1
    11f4:	4b09      	ldr	r3, [pc, #36]	; (121c <nm_bsp_init+0x74>)
    11f6:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    11f8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    11fc:	b662      	cpsie	i
}
    11fe:	2000      	movs	r0, #0
    1200:	b002      	add	sp, #8
    1202:	bd70      	pop	{r4, r5, r6, pc}
    1204:	20000108 	.word	0x20000108
    1208:	00004549 	.word	0x00004549
    120c:	41004480 	.word	0x41004480
    1210:	e000e010 	.word	0xe000e010
    1214:	000010e9 	.word	0x000010e9
    1218:	00001181 	.word	0x00001181
    121c:	2000000a 	.word	0x2000000a

00001220 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    1220:	b510      	push	{r4, lr}
    1222:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    1224:	4b0e      	ldr	r3, [pc, #56]	; (1260 <nm_bsp_register_isr+0x40>)
    1226:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    1228:	ac01      	add	r4, sp, #4
    122a:	0020      	movs	r0, r4
    122c:	4b0d      	ldr	r3, [pc, #52]	; (1264 <nm_bsp_register_isr+0x44>)
    122e:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    1230:	2324      	movs	r3, #36	; 0x24
    1232:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    1234:	2300      	movs	r3, #0
    1236:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    1238:	3301      	adds	r3, #1
    123a:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    123c:	3301      	adds	r3, #1
    123e:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    1240:	0021      	movs	r1, r4
    1242:	2004      	movs	r0, #4
    1244:	4b08      	ldr	r3, [pc, #32]	; (1268 <nm_bsp_register_isr+0x48>)
    1246:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    1248:	2200      	movs	r2, #0
    124a:	2104      	movs	r1, #4
    124c:	4807      	ldr	r0, [pc, #28]	; (126c <nm_bsp_register_isr+0x4c>)
    124e:	4b08      	ldr	r3, [pc, #32]	; (1270 <nm_bsp_register_isr+0x50>)
    1250:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    1252:	2100      	movs	r1, #0
    1254:	2004      	movs	r0, #4
    1256:	4b07      	ldr	r3, [pc, #28]	; (1274 <nm_bsp_register_isr+0x54>)
    1258:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    125a:	b004      	add	sp, #16
    125c:	bd10      	pop	{r4, pc}
    125e:	46c0      	nop			; (mov r8, r8)
    1260:	20000108 	.word	0x20000108
    1264:	000044bd 	.word	0x000044bd
    1268:	000044d1 	.word	0x000044d1
    126c:	00001155 	.word	0x00001155
    1270:	00004379 	.word	0x00004379
    1274:	000043a5 	.word	0x000043a5

00001278 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    1278:	b510      	push	{r4, lr}
	if (u8Enable) {
    127a:	2800      	cmp	r0, #0
    127c:	d104      	bne.n	1288 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    127e:	2100      	movs	r1, #0
    1280:	2004      	movs	r0, #4
    1282:	4b04      	ldr	r3, [pc, #16]	; (1294 <nm_bsp_interrupt_ctrl+0x1c>)
    1284:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    1286:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    1288:	2100      	movs	r1, #0
    128a:	2004      	movs	r0, #4
    128c:	4b02      	ldr	r3, [pc, #8]	; (1298 <nm_bsp_interrupt_ctrl+0x20>)
    128e:	4798      	blx	r3
    1290:	e7f9      	b.n	1286 <nm_bsp_interrupt_ctrl+0xe>
    1292:	46c0      	nop			; (mov r8, r8)
    1294:	000043c5 	.word	0x000043c5
    1298:	000043a5 	.word	0x000043a5

0000129c <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    129c:	b530      	push	{r4, r5, lr}
    129e:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    12a0:	4c30      	ldr	r4, [pc, #192]	; (1364 <nm_bus_init+0xc8>)
    12a2:	2305      	movs	r3, #5
    12a4:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    12a6:	2300      	movs	r3, #0
    12a8:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    12aa:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    12ac:	a901      	add	r1, sp, #4
    12ae:	2201      	movs	r2, #1
    12b0:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    12b2:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    12b4:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    12b6:	2005      	movs	r0, #5
    12b8:	4b2b      	ldr	r3, [pc, #172]	; (1368 <nm_bus_init+0xcc>)
    12ba:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    12bc:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    12be:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    12c0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    12c2:	2900      	cmp	r1, #0
    12c4:	d104      	bne.n	12d0 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
    12c6:	0953      	lsrs	r3, r2, #5
    12c8:	01db      	lsls	r3, r3, #7
    12ca:	4928      	ldr	r1, [pc, #160]	; (136c <nm_bus_init+0xd0>)
    12cc:	468c      	mov	ip, r1
    12ce:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    12d0:	211f      	movs	r1, #31
    12d2:	4011      	ands	r1, r2
    12d4:	2201      	movs	r2, #1
    12d6:	0010      	movs	r0, r2
    12d8:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    12da:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    12dc:	ac02      	add	r4, sp, #8
    12de:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    12e0:	2300      	movs	r3, #0
    12e2:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    12e4:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    12e6:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    12e8:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    12ea:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    12ec:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    12ee:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    12f0:	3223      	adds	r2, #35	; 0x23
    12f2:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    12f4:	3a18      	subs	r2, #24
    12f6:	2100      	movs	r1, #0
    12f8:	a808      	add	r0, sp, #32
    12fa:	4b1d      	ldr	r3, [pc, #116]	; (1370 <nm_bus_init+0xd4>)
    12fc:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
    12fe:	2380      	movs	r3, #128	; 0x80
    1300:	025b      	lsls	r3, r3, #9
    1302:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    1304:	4b1b      	ldr	r3, [pc, #108]	; (1374 <nm_bus_init+0xd8>)
    1306:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    1308:	2301      	movs	r3, #1
    130a:	425b      	negs	r3, r3
    130c:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    130e:	4b1a      	ldr	r3, [pc, #104]	; (1378 <nm_bus_init+0xdc>)
    1310:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    1312:	4b1a      	ldr	r3, [pc, #104]	; (137c <nm_bus_init+0xe0>)
    1314:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    1316:	4b1a      	ldr	r3, [pc, #104]	; (1380 <nm_bus_init+0xe4>)
    1318:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    131a:	0022      	movs	r2, r4
    131c:	4919      	ldr	r1, [pc, #100]	; (1384 <nm_bus_init+0xe8>)
    131e:	481a      	ldr	r0, [pc, #104]	; (1388 <nm_bus_init+0xec>)
    1320:	4b1a      	ldr	r3, [pc, #104]	; (138c <nm_bus_init+0xf0>)
    1322:	4798      	blx	r3
    1324:	2800      	cmp	r0, #0
    1326:	d11a      	bne.n	135e <nm_bus_init+0xc2>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1328:	4d17      	ldr	r5, [pc, #92]	; (1388 <nm_bus_init+0xec>)
    132a:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    132c:	0020      	movs	r0, r4
    132e:	4b18      	ldr	r3, [pc, #96]	; (1390 <nm_bus_init+0xf4>)
    1330:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1332:	231f      	movs	r3, #31
    1334:	4018      	ands	r0, r3
    1336:	3b1e      	subs	r3, #30
    1338:	4083      	lsls	r3, r0
    133a:	4a16      	ldr	r2, [pc, #88]	; (1394 <nm_bus_init+0xf8>)
    133c:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    133e:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1340:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    1342:	2b00      	cmp	r3, #0
    1344:	d1fc      	bne.n	1340 <nm_bus_init+0xa4>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1346:	6823      	ldr	r3, [r4, #0]
    1348:	2202      	movs	r2, #2
    134a:	4313      	orrs	r3, r2
    134c:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
    134e:	4b12      	ldr	r3, [pc, #72]	; (1398 <nm_bus_init+0xfc>)
    1350:	4798      	blx	r3
	nm_bsp_sleep(1);
    1352:	2001      	movs	r0, #1
    1354:	4b11      	ldr	r3, [pc, #68]	; (139c <nm_bus_init+0x100>)
    1356:	4798      	blx	r3
#endif
	return result;
    1358:	2000      	movs	r0, #0
}
    135a:	b011      	add	sp, #68	; 0x44
    135c:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
    135e:	2006      	movs	r0, #6
    1360:	4240      	negs	r0, r0
    1362:	e7fa      	b.n	135a <nm_bus_init+0xbe>
    1364:	200002b4 	.word	0x200002b4
    1368:	00004549 	.word	0x00004549
    136c:	41004400 	.word	0x41004400
    1370:	00009837 	.word	0x00009837
    1374:	00040003 	.word	0x00040003
    1378:	00060003 	.word	0x00060003
    137c:	00070003 	.word	0x00070003
    1380:	00b71b00 	.word	0x00b71b00
    1384:	42000800 	.word	0x42000800
    1388:	200002b8 	.word	0x200002b8
    138c:	000049b1 	.word	0x000049b1
    1390:	00004921 	.word	0x00004921
    1394:	e000e100 	.word	0xe000e100
    1398:	00001181 	.word	0x00001181
    139c:	00001169 	.word	0x00001169

000013a0 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    13a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    13a2:	46de      	mov	lr, fp
    13a4:	4657      	mov	r7, sl
    13a6:	464e      	mov	r6, r9
    13a8:	4645      	mov	r5, r8
    13aa:	b5e0      	push	{r5, r6, r7, lr}
    13ac:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
    13ae:	2803      	cmp	r0, #3
    13b0:	d000      	beq.n	13b4 <nm_bus_ioctl+0x14>
    13b2:	e075      	b.n	14a0 <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    13b4:	680e      	ldr	r6, [r1, #0]
    13b6:	684d      	ldr	r5, [r1, #4]
    13b8:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
    13ba:	2200      	movs	r2, #0
    13bc:	466b      	mov	r3, sp
    13be:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    13c0:	2d00      	cmp	r5, #0
    13c2:	d027      	beq.n	1414 <nm_bus_ioctl+0x74>
    13c4:	2c00      	cmp	r4, #0
    13c6:	d065      	beq.n	1494 <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
    13c8:	2e00      	cmp	r6, #0
    13ca:	d100      	bne.n	13ce <nm_bus_ioctl+0x2e>
    13cc:	e077      	b.n	14be <nm_bus_ioctl+0x11e>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    13ce:	2300      	movs	r3, #0
    13d0:	4698      	mov	r8, r3
    13d2:	2300      	movs	r3, #0
    13d4:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
    13d6:	2201      	movs	r2, #1
    13d8:	493b      	ldr	r1, [pc, #236]	; (14c8 <nm_bus_ioctl+0x128>)
    13da:	483c      	ldr	r0, [pc, #240]	; (14cc <nm_bus_ioctl+0x12c>)
    13dc:	4b3c      	ldr	r3, [pc, #240]	; (14d0 <nm_bus_ioctl+0x130>)
    13de:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    13e0:	4b3a      	ldr	r3, [pc, #232]	; (14cc <nm_bus_ioctl+0x12c>)
    13e2:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
    13e4:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
    13e6:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    13e8:	4699      	mov	r9, r3
			pu8Miso++;
    13ea:	4659      	mov	r1, fp
    13ec:	424b      	negs	r3, r1
    13ee:	4159      	adcs	r1, r3
    13f0:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
    13f2:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    13f4:	4653      	mov	r3, sl
    13f6:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    13f8:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
    13fa:	4239      	tst	r1, r7
    13fc:	d0fc      	beq.n	13f8 <nm_bus_ioctl+0x58>
    13fe:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    1400:	4239      	tst	r1, r7
    1402:	d0fc      	beq.n	13fe <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1404:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1406:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
    1408:	4211      	tst	r1, r2
    140a:	d0fc      	beq.n	1406 <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    140c:	4649      	mov	r1, r9
    140e:	7989      	ldrb	r1, [r1, #6]
    1410:	468c      	mov	ip, r1
    1412:	e011      	b.n	1438 <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    1414:	2e00      	cmp	r6, #0
    1416:	d03a      	beq.n	148e <nm_bus_ioctl+0xee>
    1418:	2c00      	cmp	r4, #0
    141a:	d03e      	beq.n	149a <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    141c:	2300      	movs	r3, #0
    141e:	4698      	mov	r8, r3
		u8SkipMiso = 1;
    1420:	3301      	adds	r3, #1
    1422:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
    1424:	466b      	mov	r3, sp
    1426:	1ddd      	adds	r5, r3, #7
    1428:	e7d5      	b.n	13d6 <nm_bus_ioctl+0x36>
    142a:	4660      	mov	r0, ip
    142c:	2801      	cmp	r0, #1
    142e:	d00d      	beq.n	144c <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1430:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1432:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    1434:	2900      	cmp	r1, #0
    1436:	d00d      	beq.n	1454 <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1438:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    143a:	4211      	tst	r1, r2
    143c:	d0fc      	beq.n	1438 <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    143e:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
    1440:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1442:	4210      	tst	r0, r2
    1444:	d0f1      	beq.n	142a <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1446:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    1448:	311e      	adds	r1, #30
    144a:	e7ee      	b.n	142a <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    144c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    144e:	05c0      	lsls	r0, r0, #23
    1450:	0dc0      	lsrs	r0, r0, #23
    1452:	e7ef      	b.n	1434 <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
    1454:	7028      	strb	r0, [r5, #0]
		u16Sz--;
    1456:	3c01      	subs	r4, #1
    1458:	b2a4      	uxth	r4, r4
			pu8Miso++;
    145a:	445d      	add	r5, fp
			pu8Mosi++;
    145c:	4643      	mov	r3, r8
    145e:	4259      	negs	r1, r3
    1460:	414b      	adcs	r3, r1
    1462:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
    1464:	2c00      	cmp	r4, #0
    1466:	d1c4      	bne.n	13f2 <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1468:	4b18      	ldr	r3, [pc, #96]	; (14cc <nm_bus_ioctl+0x12c>)
    146a:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
    146c:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    146e:	7e0b      	ldrb	r3, [r1, #24]
    1470:	4213      	tst	r3, r2
    1472:	d0fc      	beq.n	146e <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
    1474:	2200      	movs	r2, #0
    1476:	4914      	ldr	r1, [pc, #80]	; (14c8 <nm_bus_ioctl+0x128>)
    1478:	4814      	ldr	r0, [pc, #80]	; (14cc <nm_bus_ioctl+0x12c>)
    147a:	4b15      	ldr	r3, [pc, #84]	; (14d0 <nm_bus_ioctl+0x130>)
    147c:	4798      	blx	r3
	return M2M_SUCCESS;
    147e:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
    1480:	b003      	add	sp, #12
    1482:	bc3c      	pop	{r2, r3, r4, r5}
    1484:	4690      	mov	r8, r2
    1486:	4699      	mov	r9, r3
    1488:	46a2      	mov	sl, r4
    148a:	46ab      	mov	fp, r5
    148c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
    148e:	200f      	movs	r0, #15
    1490:	4240      	negs	r0, r0
    1492:	e7f5      	b.n	1480 <nm_bus_ioctl+0xe0>
    1494:	200f      	movs	r0, #15
    1496:	4240      	negs	r0, r0
    1498:	e7f2      	b.n	1480 <nm_bus_ioctl+0xe0>
    149a:	200f      	movs	r0, #15
    149c:	4240      	negs	r0, r0
		break;
    149e:	e7ef      	b.n	1480 <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
    14a0:	220e      	movs	r2, #14
    14a2:	32ff      	adds	r2, #255	; 0xff
    14a4:	490b      	ldr	r1, [pc, #44]	; (14d4 <nm_bus_ioctl+0x134>)
    14a6:	480c      	ldr	r0, [pc, #48]	; (14d8 <nm_bus_ioctl+0x138>)
    14a8:	4b0c      	ldr	r3, [pc, #48]	; (14dc <nm_bus_ioctl+0x13c>)
    14aa:	4798      	blx	r3
    14ac:	480c      	ldr	r0, [pc, #48]	; (14e0 <nm_bus_ioctl+0x140>)
    14ae:	4b0d      	ldr	r3, [pc, #52]	; (14e4 <nm_bus_ioctl+0x144>)
    14b0:	4798      	blx	r3
    14b2:	200d      	movs	r0, #13
    14b4:	4b0c      	ldr	r3, [pc, #48]	; (14e8 <nm_bus_ioctl+0x148>)
    14b6:	4798      	blx	r3
			s8Ret = -1;
    14b8:	2001      	movs	r0, #1
    14ba:	4240      	negs	r0, r0
	return s8Ret;
    14bc:	e7e0      	b.n	1480 <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
    14be:	2301      	movs	r3, #1
    14c0:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
    14c2:	466b      	mov	r3, sp
    14c4:	1dde      	adds	r6, r3, #7
    14c6:	e784      	b.n	13d2 <nm_bus_ioctl+0x32>
    14c8:	200002b4 	.word	0x200002b4
    14cc:	200002b8 	.word	0x200002b8
    14d0:	00004b89 	.word	0x00004b89
    14d4:	0000ae88 	.word	0x0000ae88
    14d8:	0000ae98 	.word	0x0000ae98
    14dc:	00009999 	.word	0x00009999
    14e0:	0000aeac 	.word	0x0000aeac
    14e4:	00009ab5 	.word	0x00009ab5
    14e8:	000099cd 	.word	0x000099cd

000014ec <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    14ec:	b530      	push	{r4, r5, lr}
    14ee:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    14f0:	ab01      	add	r3, sp, #4
    14f2:	2200      	movs	r2, #0
    14f4:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
    14f6:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    14f8:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
    14fa:	4d13      	ldr	r5, [pc, #76]	; (1548 <nm_bus_deinit+0x5c>)
    14fc:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    14fe:	0020      	movs	r0, r4
    1500:	4b12      	ldr	r3, [pc, #72]	; (154c <nm_bus_deinit+0x60>)
    1502:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1504:	231f      	movs	r3, #31
    1506:	4018      	ands	r0, r3
    1508:	3b1e      	subs	r3, #30
    150a:	4083      	lsls	r3, r0
    150c:	2280      	movs	r2, #128	; 0x80
    150e:	4910      	ldr	r1, [pc, #64]	; (1550 <nm_bus_deinit+0x64>)
    1510:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1512:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1514:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    1516:	2b00      	cmp	r3, #0
    1518:	d1fc      	bne.n	1514 <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    151a:	338f      	adds	r3, #143	; 0x8f
    151c:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    151e:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1520:	6823      	ldr	r3, [r4, #0]
    1522:	2202      	movs	r2, #2
    1524:	4393      	bics	r3, r2
    1526:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    1528:	a901      	add	r1, sp, #4
    152a:	2006      	movs	r0, #6
    152c:	4c09      	ldr	r4, [pc, #36]	; (1554 <nm_bus_deinit+0x68>)
    152e:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    1530:	a901      	add	r1, sp, #4
    1532:	2004      	movs	r0, #4
    1534:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    1536:	a901      	add	r1, sp, #4
    1538:	2007      	movs	r0, #7
    153a:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    153c:	a901      	add	r1, sp, #4
    153e:	2005      	movs	r0, #5
    1540:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    1542:	2000      	movs	r0, #0
    1544:	b003      	add	sp, #12
    1546:	bd30      	pop	{r4, r5, pc}
    1548:	200002b8 	.word	0x200002b8
    154c:	00004921 	.word	0x00004921
    1550:	e000e100 	.word	0xe000e100
    1554:	00004549 	.word	0x00004549

00001558 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    1558:	2a00      	cmp	r2, #0
    155a:	d006      	beq.n	156a <m2m_memcpy+0x12>
    155c:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
    155e:	780b      	ldrb	r3, [r1, #0]
    1560:	7003      	strb	r3, [r0, #0]
		pDst++;
    1562:	3001      	adds	r0, #1
		pSrc++;
    1564:	3101      	adds	r1, #1
	}while(--sz);
    1566:	4290      	cmp	r0, r2
    1568:	d1f9      	bne.n	155e <m2m_memcpy+0x6>
}
    156a:	4770      	bx	lr

0000156c <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    156c:	2a00      	cmp	r2, #0
    156e:	d004      	beq.n	157a <m2m_memset+0xe>
    1570:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
    1572:	7001      	strb	r1, [r0, #0]
		pBuf++;
    1574:	3001      	adds	r0, #1
	}while(--sz);
    1576:	4290      	cmp	r0, r2
    1578:	d1fb      	bne.n	1572 <m2m_memset+0x6>
}
    157a:	4770      	bx	lr

0000157c <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    157c:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
    157e:	7802      	ldrb	r2, [r0, #0]
    1580:	2a00      	cmp	r2, #0
    1582:	d007      	beq.n	1594 <m2m_strlen+0x18>
    1584:	2000      	movs	r0, #0
	{
		u16StrLen ++;
    1586:	3001      	adds	r0, #1
    1588:	b280      	uxth	r0, r0
		pcStr++;
    158a:	3301      	adds	r3, #1
	while(*pcStr)
    158c:	781a      	ldrb	r2, [r3, #0]
    158e:	2a00      	cmp	r2, #0
    1590:	d1f9      	bne.n	1586 <m2m_strlen+0xa>
	}
	return u16StrLen;
}
    1592:	4770      	bx	lr
	uint16	u16StrLen = 0;
    1594:	2000      	movs	r0, #0
    1596:	e7fc      	b.n	1592 <m2m_strlen+0x16>

00001598 <isr>:

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
    1598:	4a02      	ldr	r2, [pc, #8]	; (15a4 <isr+0xc>)
    159a:	78d3      	ldrb	r3, [r2, #3]
    159c:	3301      	adds	r3, #1
    159e:	b2db      	uxtb	r3, r3
    15a0:	70d3      	strb	r3, [r2, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
    15a2:	4770      	bx	lr
    15a4:	200002f4 	.word	0x200002f4

000015a8 <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    15a8:	4770      	bx	lr
	...

000015ac <hif_set_rx_done>:
{
    15ac:	b500      	push	{lr}
    15ae:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
    15b0:	2200      	movs	r2, #0
    15b2:	4b0a      	ldr	r3, [pc, #40]	; (15dc <hif_set_rx_done+0x30>)
    15b4:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
    15b6:	2001      	movs	r0, #1
    15b8:	4b09      	ldr	r3, [pc, #36]	; (15e0 <hif_set_rx_done+0x34>)
    15ba:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    15bc:	a901      	add	r1, sp, #4
    15be:	4809      	ldr	r0, [pc, #36]	; (15e4 <hif_set_rx_done+0x38>)
    15c0:	4b09      	ldr	r3, [pc, #36]	; (15e8 <hif_set_rx_done+0x3c>)
    15c2:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    15c4:	2800      	cmp	r0, #0
    15c6:	d001      	beq.n	15cc <hif_set_rx_done+0x20>
}
    15c8:	b003      	add	sp, #12
    15ca:	bd00      	pop	{pc}
	reg |= NBIT1;
    15cc:	2102      	movs	r1, #2
    15ce:	9b01      	ldr	r3, [sp, #4]
    15d0:	4319      	orrs	r1, r3
    15d2:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    15d4:	4803      	ldr	r0, [pc, #12]	; (15e4 <hif_set_rx_done+0x38>)
    15d6:	4b05      	ldr	r3, [pc, #20]	; (15ec <hif_set_rx_done+0x40>)
    15d8:	4798      	blx	r3
    15da:	e7f5      	b.n	15c8 <hif_set_rx_done+0x1c>
    15dc:	200002f4 	.word	0x200002f4
    15e0:	00001279 	.word	0x00001279
    15e4:	00001070 	.word	0x00001070
    15e8:	000029b5 	.word	0x000029b5
    15ec:	000029c1 	.word	0x000029c1

000015f0 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    15f0:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
    15f2:	4b0c      	ldr	r3, [pc, #48]	; (1624 <hif_chip_wake+0x34>)
    15f4:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    15f6:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
    15f8:	2b00      	cmp	r3, #0
    15fa:	d10d      	bne.n	1618 <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    15fc:	4b09      	ldr	r3, [pc, #36]	; (1624 <hif_chip_wake+0x34>)
    15fe:	785b      	ldrb	r3, [r3, #1]
    1600:	2b00      	cmp	r3, #0
    1602:	d103      	bne.n	160c <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    1604:	4b07      	ldr	r3, [pc, #28]	; (1624 <hif_chip_wake+0x34>)
    1606:	781b      	ldrb	r3, [r3, #0]
    1608:	2b00      	cmp	r3, #0
    160a:	d106      	bne.n	161a <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    160c:	4a05      	ldr	r2, [pc, #20]	; (1624 <hif_chip_wake+0x34>)
    160e:	7853      	ldrb	r3, [r2, #1]
    1610:	3301      	adds	r3, #1
    1612:	b2db      	uxtb	r3, r3
    1614:	7053      	strb	r3, [r2, #1]
    1616:	2000      	movs	r0, #0
ERR1:
	return ret;
}
    1618:	bd10      	pop	{r4, pc}
			ret = chip_wake();
    161a:	4b03      	ldr	r3, [pc, #12]	; (1628 <hif_chip_wake+0x38>)
    161c:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    161e:	2800      	cmp	r0, #0
    1620:	d0f4      	beq.n	160c <hif_chip_wake+0x1c>
    1622:	e7f9      	b.n	1618 <hif_chip_wake+0x28>
    1624:	200002f4 	.word	0x200002f4
    1628:	0000269d 	.word	0x0000269d

0000162c <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
    162c:	4b05      	ldr	r3, [pc, #20]	; (1644 <hif_chip_sleep_sc+0x18>)
    162e:	785b      	ldrb	r3, [r3, #1]
    1630:	2b00      	cmp	r3, #0
    1632:	d004      	beq.n	163e <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
    1634:	4a03      	ldr	r2, [pc, #12]	; (1644 <hif_chip_sleep_sc+0x18>)
    1636:	7853      	ldrb	r3, [r2, #1]
    1638:	3b01      	subs	r3, #1
    163a:	b2db      	uxtb	r3, r3
    163c:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
    163e:	2000      	movs	r0, #0
    1640:	4770      	bx	lr
    1642:	46c0      	nop			; (mov r8, r8)
    1644:	200002f4 	.word	0x200002f4

00001648 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    1648:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
    164a:	4b0b      	ldr	r3, [pc, #44]	; (1678 <hif_chip_sleep+0x30>)
    164c:	785b      	ldrb	r3, [r3, #1]
    164e:	2b00      	cmp	r3, #0
    1650:	d004      	beq.n	165c <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
    1652:	4a09      	ldr	r2, [pc, #36]	; (1678 <hif_chip_sleep+0x30>)
    1654:	7853      	ldrb	r3, [r2, #1]
    1656:	3b01      	subs	r3, #1
    1658:	b2db      	uxtb	r3, r3
    165a:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    165c:	4b06      	ldr	r3, [pc, #24]	; (1678 <hif_chip_sleep+0x30>)
    165e:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
    1660:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
    1662:	2b00      	cmp	r3, #0
    1664:	d103      	bne.n	166e <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    1666:	4b04      	ldr	r3, [pc, #16]	; (1678 <hif_chip_sleep+0x30>)
    1668:	781b      	ldrb	r3, [r3, #0]
    166a:	2b00      	cmp	r3, #0
    166c:	d100      	bne.n	1670 <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
    166e:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
    1670:	4b02      	ldr	r3, [pc, #8]	; (167c <hif_chip_sleep+0x34>)
    1672:	4798      	blx	r3
    1674:	e7fb      	b.n	166e <hif_chip_sleep+0x26>
    1676:	46c0      	nop			; (mov r8, r8)
    1678:	200002f4 	.word	0x200002f4
    167c:	00002635 	.word	0x00002635

00001680 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    1680:	b5f0      	push	{r4, r5, r6, r7, lr}
    1682:	46de      	mov	lr, fp
    1684:	4657      	mov	r7, sl
    1686:	b580      	push	{r7, lr}
    1688:	b089      	sub	sp, #36	; 0x24
    168a:	4683      	mov	fp, r0
    168c:	468a      	mov	sl, r1
    168e:	9201      	str	r2, [sp, #4]
    1690:	9300      	str	r3, [sp, #0]
    1692:	ab10      	add	r3, sp, #64	; 0x40
    1694:	cb80      	ldmia	r3!, {r7}
    1696:	881e      	ldrh	r6, [r3, #0]
    1698:	ab12      	add	r3, sp, #72	; 0x48
    169a:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    169c:	227f      	movs	r2, #127	; 0x7f
    169e:	400a      	ands	r2, r1
    16a0:	ab07      	add	r3, sp, #28
    16a2:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    16a4:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    16a6:	2208      	movs	r2, #8
    16a8:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    16aa:	2f00      	cmp	r7, #0
    16ac:	d03d      	beq.n	172a <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    16ae:	885a      	ldrh	r2, [r3, #2]
    16b0:	1992      	adds	r2, r2, r6
    16b2:	18aa      	adds	r2, r5, r2
    16b4:	b292      	uxth	r2, r2
    16b6:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
    16b8:	4b69      	ldr	r3, [pc, #420]	; (1860 <hif_send+0x1e0>)
    16ba:	4798      	blx	r3
    16bc:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    16be:	d000      	beq.n	16c2 <hif_send+0x42>
    16c0:	e0c1      	b.n	1846 <hif_send+0x1c6>
	{
		volatile uint32 reg, dma_addr = 0;
    16c2:	2300      	movs	r3, #0
    16c4:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
    16c6:	aa02      	add	r2, sp, #8
    16c8:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    16ca:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
    16cc:	9b04      	ldr	r3, [sp, #16]
    16ce:	465a      	mov	r2, fp
    16d0:	431a      	orrs	r2, r3
    16d2:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
    16d4:	9a04      	ldr	r2, [sp, #16]
    16d6:	4653      	mov	r3, sl
    16d8:	021b      	lsls	r3, r3, #8
    16da:	4313      	orrs	r3, r2
    16dc:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
    16de:	ab07      	add	r3, sp, #28
    16e0:	885b      	ldrh	r3, [r3, #2]
    16e2:	9a04      	ldr	r2, [sp, #16]
    16e4:	041b      	lsls	r3, r3, #16
    16e6:	4313      	orrs	r3, r2
    16e8:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    16ea:	9904      	ldr	r1, [sp, #16]
    16ec:	485d      	ldr	r0, [pc, #372]	; (1864 <hif_send+0x1e4>)
    16ee:	4b5e      	ldr	r3, [pc, #376]	; (1868 <hif_send+0x1e8>)
    16f0:	4798      	blx	r3
    16f2:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    16f4:	d157      	bne.n	17a6 <hif_send+0x126>

		reg = 0UL;
    16f6:	2300      	movs	r3, #0
    16f8:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
    16fa:	9b04      	ldr	r3, [sp, #16]
    16fc:	2202      	movs	r2, #2
    16fe:	4313      	orrs	r3, r2
    1700:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    1702:	9904      	ldr	r1, [sp, #16]
    1704:	4859      	ldr	r0, [pc, #356]	; (186c <hif_send+0x1ec>)
    1706:	4b58      	ldr	r3, [pc, #352]	; (1868 <hif_send+0x1e8>)
    1708:	4798      	blx	r3
    170a:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    170c:	d14b      	bne.n	17a6 <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    170e:	2200      	movs	r2, #0
    1710:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    1712:	ab02      	add	r3, sp, #8
    1714:	80da      	strh	r2, [r3, #6]
    1716:	3306      	adds	r3, #6
    1718:	881b      	ldrh	r3, [r3, #0]
    171a:	b29b      	uxth	r3, r3
    171c:	4a54      	ldr	r2, [pc, #336]	; (1870 <hif_send+0x1f0>)
    171e:	4293      	cmp	r3, r2
    1720:	d849      	bhi.n	17b6 <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    1722:	4c54      	ldr	r4, [pc, #336]	; (1874 <hif_send+0x1f4>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    1724:	4b54      	ldr	r3, [pc, #336]	; (1878 <hif_send+0x1f8>)
    1726:	469a      	mov	sl, r3
    1728:	e017      	b.n	175a <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
    172a:	ab07      	add	r3, sp, #28
    172c:	885a      	ldrh	r2, [r3, #2]
    172e:	9900      	ldr	r1, [sp, #0]
    1730:	468c      	mov	ip, r1
    1732:	4462      	add	r2, ip
    1734:	b292      	uxth	r2, r2
    1736:	805a      	strh	r2, [r3, #2]
    1738:	e7be      	b.n	16b8 <hif_send+0x38>
				nm_bsp_sleep(1);
    173a:	2001      	movs	r0, #1
    173c:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
    173e:	9b04      	ldr	r3, [sp, #16]
    1740:	079b      	lsls	r3, r3, #30
    1742:	d528      	bpl.n	1796 <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
    1744:	ab02      	add	r3, sp, #8
    1746:	88da      	ldrh	r2, [r3, #6]
    1748:	3201      	adds	r2, #1
    174a:	b292      	uxth	r2, r2
    174c:	80da      	strh	r2, [r3, #6]
    174e:	3306      	adds	r3, #6
    1750:	881b      	ldrh	r3, [r3, #0]
    1752:	b29b      	uxth	r3, r3
    1754:	4a46      	ldr	r2, [pc, #280]	; (1870 <hif_send+0x1f0>)
    1756:	4293      	cmp	r3, r2
    1758:	d82d      	bhi.n	17b6 <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    175a:	a904      	add	r1, sp, #16
    175c:	4843      	ldr	r0, [pc, #268]	; (186c <hif_send+0x1ec>)
    175e:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
    1760:	2800      	cmp	r0, #0
    1762:	d128      	bne.n	17b6 <hif_send+0x136>
			if(cnt >= 500) {
    1764:	ab02      	add	r3, sp, #8
    1766:	3306      	adds	r3, #6
    1768:	881b      	ldrh	r3, [r3, #0]
    176a:	b29b      	uxth	r3, r3
    176c:	22f4      	movs	r2, #244	; 0xf4
    176e:	32ff      	adds	r2, #255	; 0xff
    1770:	4293      	cmp	r3, r2
    1772:	d9e4      	bls.n	173e <hif_send+0xbe>
				if(cnt < 501) {
    1774:	ab02      	add	r3, sp, #8
    1776:	3306      	adds	r3, #6
    1778:	881b      	ldrh	r3, [r3, #0]
    177a:	b29b      	uxth	r3, r3
    177c:	3201      	adds	r2, #1
    177e:	4293      	cmp	r3, r2
    1780:	d8db      	bhi.n	173a <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
    1782:	483e      	ldr	r0, [pc, #248]	; (187c <hif_send+0x1fc>)
    1784:	4b3e      	ldr	r3, [pc, #248]	; (1880 <hif_send+0x200>)
    1786:	4798      	blx	r3
    1788:	483e      	ldr	r0, [pc, #248]	; (1884 <hif_send+0x204>)
    178a:	4b3f      	ldr	r3, [pc, #252]	; (1888 <hif_send+0x208>)
    178c:	4798      	blx	r3
    178e:	200d      	movs	r0, #13
    1790:	4b3e      	ldr	r3, [pc, #248]	; (188c <hif_send+0x20c>)
    1792:	4798      	blx	r3
    1794:	e7d1      	b.n	173a <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    1796:	a905      	add	r1, sp, #20
    1798:	483d      	ldr	r0, [pc, #244]	; (1890 <hif_send+0x210>)
    179a:	4b36      	ldr	r3, [pc, #216]	; (1874 <hif_send+0x1f4>)
    179c:	4798      	blx	r3
    179e:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
    17a0:	d009      	beq.n	17b6 <hif_send+0x136>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    17a2:	2300      	movs	r3, #0
    17a4:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    17a6:	4b3b      	ldr	r3, [pc, #236]	; (1894 <hif_send+0x214>)
    17a8:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
    17aa:	0020      	movs	r0, r4
    17ac:	b009      	add	sp, #36	; 0x24
    17ae:	bc0c      	pop	{r2, r3}
    17b0:	4692      	mov	sl, r2
    17b2:	469b      	mov	fp, r3
    17b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
    17b6:	9b05      	ldr	r3, [sp, #20]
    17b8:	2b00      	cmp	r3, #0
    17ba:	d03f      	beq.n	183c <hif_send+0x1bc>
			u32CurrAddr = dma_addr;
    17bc:	9b05      	ldr	r3, [sp, #20]
    17be:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    17c0:	a907      	add	r1, sp, #28
    17c2:	884b      	ldrh	r3, [r1, #2]
    17c4:	b29b      	uxth	r3, r3
    17c6:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    17c8:	9806      	ldr	r0, [sp, #24]
    17ca:	2208      	movs	r2, #8
    17cc:	4b32      	ldr	r3, [pc, #200]	; (1898 <hif_send+0x218>)
    17ce:	4798      	blx	r3
    17d0:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    17d2:	d1e8      	bne.n	17a6 <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    17d4:	9b06      	ldr	r3, [sp, #24]
    17d6:	3308      	adds	r3, #8
    17d8:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
    17da:	9b01      	ldr	r3, [sp, #4]
    17dc:	2b00      	cmp	r3, #0
    17de:	d00b      	beq.n	17f8 <hif_send+0x178>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    17e0:	9806      	ldr	r0, [sp, #24]
    17e2:	9a00      	ldr	r2, [sp, #0]
    17e4:	0019      	movs	r1, r3
    17e6:	4b2c      	ldr	r3, [pc, #176]	; (1898 <hif_send+0x218>)
    17e8:	4798      	blx	r3
    17ea:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    17ec:	d1db      	bne.n	17a6 <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
    17ee:	9b06      	ldr	r3, [sp, #24]
    17f0:	9a00      	ldr	r2, [sp, #0]
    17f2:	4694      	mov	ip, r2
    17f4:	4463      	add	r3, ip
    17f6:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
    17f8:	2f00      	cmp	r7, #0
    17fa:	d00e      	beq.n	181a <hif_send+0x19a>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    17fc:	9b06      	ldr	r3, [sp, #24]
    17fe:	9a00      	ldr	r2, [sp, #0]
    1800:	1aad      	subs	r5, r5, r2
    1802:	18ed      	adds	r5, r5, r3
    1804:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    1806:	9806      	ldr	r0, [sp, #24]
    1808:	0032      	movs	r2, r6
    180a:	0039      	movs	r1, r7
    180c:	4b22      	ldr	r3, [pc, #136]	; (1898 <hif_send+0x218>)
    180e:	4798      	blx	r3
    1810:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    1812:	d1c8      	bne.n	17a6 <hif_send+0x126>
				u32CurrAddr += u16DataSize;
    1814:	9b06      	ldr	r3, [sp, #24]
    1816:	18f3      	adds	r3, r6, r3
    1818:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
    181a:	9b05      	ldr	r3, [sp, #20]
    181c:	009b      	lsls	r3, r3, #2
    181e:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
    1820:	9b04      	ldr	r3, [sp, #16]
    1822:	2202      	movs	r2, #2
    1824:	4313      	orrs	r3, r2
    1826:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    1828:	9904      	ldr	r1, [sp, #16]
    182a:	481c      	ldr	r0, [pc, #112]	; (189c <hif_send+0x21c>)
    182c:	4b0e      	ldr	r3, [pc, #56]	; (1868 <hif_send+0x1e8>)
    182e:	4798      	blx	r3
    1830:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    1832:	d1b8      	bne.n	17a6 <hif_send+0x126>
 	ret = hif_chip_sleep();
    1834:	4b1a      	ldr	r3, [pc, #104]	; (18a0 <hif_send+0x220>)
    1836:	4798      	blx	r3
    1838:	0004      	movs	r4, r0
	return ret;
    183a:	e7b6      	b.n	17aa <hif_send+0x12a>
			ret = hif_chip_sleep();
    183c:	4b18      	ldr	r3, [pc, #96]	; (18a0 <hif_send+0x220>)
    183e:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
    1840:	2403      	movs	r4, #3
    1842:	4264      	negs	r4, r4
			goto ERR2;
    1844:	e7b1      	b.n	17aa <hif_send+0x12a>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    1846:	22cb      	movs	r2, #203	; 0xcb
    1848:	0052      	lsls	r2, r2, #1
    184a:	4916      	ldr	r1, [pc, #88]	; (18a4 <hif_send+0x224>)
    184c:	4816      	ldr	r0, [pc, #88]	; (18a8 <hif_send+0x228>)
    184e:	4b0c      	ldr	r3, [pc, #48]	; (1880 <hif_send+0x200>)
    1850:	4798      	blx	r3
    1852:	4816      	ldr	r0, [pc, #88]	; (18ac <hif_send+0x22c>)
    1854:	4b0c      	ldr	r3, [pc, #48]	; (1888 <hif_send+0x208>)
    1856:	4798      	blx	r3
    1858:	200d      	movs	r0, #13
    185a:	4b0c      	ldr	r3, [pc, #48]	; (188c <hif_send+0x20c>)
    185c:	4798      	blx	r3
		goto ERR2;
    185e:	e7a4      	b.n	17aa <hif_send+0x12a>
    1860:	000015f1 	.word	0x000015f1
    1864:	0000108c 	.word	0x0000108c
    1868:	000029c1 	.word	0x000029c1
    186c:	00001078 	.word	0x00001078
    1870:	000003e7 	.word	0x000003e7
    1874:	000029b5 	.word	0x000029b5
    1878:	00001169 	.word	0x00001169
    187c:	0000b1c8 	.word	0x0000b1c8
    1880:	00009999 	.word	0x00009999
    1884:	0000b1d4 	.word	0x0000b1d4
    1888:	00009ab5 	.word	0x00009ab5
    188c:	000099cd 	.word	0x000099cd
    1890:	00150400 	.word	0x00150400
    1894:	0000162d 	.word	0x0000162d
    1898:	00002a35 	.word	0x00002a35
    189c:	0000106c 	.word	0x0000106c
    18a0:	00001649 	.word	0x00001649
    18a4:	0000aee0 	.word	0x0000aee0
    18a8:	0000ae98 	.word	0x0000ae98
    18ac:	0000b1e4 	.word	0x0000b1e4

000018b0 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    18b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    18b2:	46ce      	mov	lr, r9
    18b4:	4647      	mov	r7, r8
    18b6:	b580      	push	{r7, lr}
    18b8:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	while (gstrHifCxt.u8Interrupt) {
    18ba:	4bcf      	ldr	r3, [pc, #828]	; (1bf8 <hif_handle_isr+0x348>)
    18bc:	4698      	mov	r8, r3
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    18be:	4699      	mov	r9, r3
	while (gstrHifCxt.u8Interrupt) {
    18c0:	e080      	b.n	19c4 <hif_handle_isr+0x114>
				gstrHifCxt.u32RxAddr = address;
    18c2:	4bcd      	ldr	r3, [pc, #820]	; (1bf8 <hif_handle_isr+0x348>)
    18c4:	9a05      	ldr	r2, [sp, #20]
    18c6:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
    18c8:	609d      	str	r5, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    18ca:	af04      	add	r7, sp, #16
    18cc:	2204      	movs	r2, #4
    18ce:	0039      	movs	r1, r7
    18d0:	9805      	ldr	r0, [sp, #20]
    18d2:	4bca      	ldr	r3, [pc, #808]	; (1bfc <hif_handle_isr+0x34c>)
    18d4:	4798      	blx	r3
    18d6:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    18d8:	887b      	ldrh	r3, [r7, #2]
    18da:	b29b      	uxth	r3, r3
    18dc:	807b      	strh	r3, [r7, #2]
				if(M2M_SUCCESS != ret)
    18de:	2800      	cmp	r0, #0
    18e0:	d133      	bne.n	194a <hif_handle_isr+0x9a>
				if(strHif.u16Length != size)
    18e2:	ab04      	add	r3, sp, #16
    18e4:	885b      	ldrh	r3, [r3, #2]
    18e6:	b29b      	uxth	r3, r3
    18e8:	429d      	cmp	r5, r3
    18ea:	d004      	beq.n	18f6 <hif_handle_isr+0x46>
					if((size - strHif.u16Length) > 4)
    18ec:	ab04      	add	r3, sp, #16
    18ee:	885b      	ldrh	r3, [r3, #2]
    18f0:	1aeb      	subs	r3, r5, r3
    18f2:	2b04      	cmp	r3, #4
    18f4:	dc39      	bgt.n	196a <hif_handle_isr+0xba>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    18f6:	ab04      	add	r3, sp, #16
    18f8:	781b      	ldrb	r3, [r3, #0]
    18fa:	2b01      	cmp	r3, #1
    18fc:	d04e      	beq.n	199c <hif_handle_isr+0xec>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    18fe:	ab04      	add	r3, sp, #16
    1900:	781b      	ldrb	r3, [r3, #0]
    1902:	2b02      	cmp	r3, #2
    1904:	d078      	beq.n	19f8 <hif_handle_isr+0x148>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    1906:	ab04      	add	r3, sp, #16
    1908:	781b      	ldrb	r3, [r3, #0]
    190a:	2b04      	cmp	r3, #4
    190c:	d100      	bne.n	1910 <hif_handle_isr+0x60>
    190e:	e090      	b.n	1a32 <hif_handle_isr+0x182>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    1910:	ab04      	add	r3, sp, #16
    1912:	781b      	ldrb	r3, [r3, #0]
    1914:	2b06      	cmp	r3, #6
    1916:	d100      	bne.n	191a <hif_handle_isr+0x6a>
    1918:	e0a8      	b.n	1a6c <hif_handle_isr+0x1bc>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    191a:	ab04      	add	r3, sp, #16
    191c:	781b      	ldrb	r3, [r3, #0]
    191e:	2b07      	cmp	r3, #7
    1920:	d100      	bne.n	1924 <hif_handle_isr+0x74>
    1922:	e0bf      	b.n	1aa4 <hif_handle_isr+0x1f4>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    1924:	ab04      	add	r3, sp, #16
    1926:	781b      	ldrb	r3, [r3, #0]
    1928:	2b05      	cmp	r3, #5
    192a:	d100      	bne.n	192e <hif_handle_isr+0x7e>
    192c:	e0d6      	b.n	1adc <hif_handle_isr+0x22c>
					M2M_ERR("(hif) invalid group ID\n");
    192e:	4ab4      	ldr	r2, [pc, #720]	; (1c00 <hif_handle_isr+0x350>)
    1930:	49b4      	ldr	r1, [pc, #720]	; (1c04 <hif_handle_isr+0x354>)
    1932:	48b5      	ldr	r0, [pc, #724]	; (1c08 <hif_handle_isr+0x358>)
    1934:	4bb5      	ldr	r3, [pc, #724]	; (1c0c <hif_handle_isr+0x35c>)
    1936:	4798      	blx	r3
    1938:	48b5      	ldr	r0, [pc, #724]	; (1c10 <hif_handle_isr+0x360>)
    193a:	4bb6      	ldr	r3, [pc, #728]	; (1c14 <hif_handle_isr+0x364>)
    193c:	4798      	blx	r3
    193e:	200d      	movs	r0, #13
    1940:	4bb5      	ldr	r3, [pc, #724]	; (1c18 <hif_handle_isr+0x368>)
    1942:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    1944:	2406      	movs	r4, #6
    1946:	4264      	negs	r4, r4
    1948:	e116      	b.n	1b78 <hif_handle_isr+0x2c8>
					M2M_ERR("(hif) address bus fail\n");
    194a:	22d2      	movs	r2, #210	; 0xd2
    194c:	32ff      	adds	r2, #255	; 0xff
    194e:	49ad      	ldr	r1, [pc, #692]	; (1c04 <hif_handle_isr+0x354>)
    1950:	48ad      	ldr	r0, [pc, #692]	; (1c08 <hif_handle_isr+0x358>)
    1952:	4bae      	ldr	r3, [pc, #696]	; (1c0c <hif_handle_isr+0x35c>)
    1954:	4798      	blx	r3
    1956:	48b1      	ldr	r0, [pc, #708]	; (1c1c <hif_handle_isr+0x36c>)
    1958:	4bae      	ldr	r3, [pc, #696]	; (1c14 <hif_handle_isr+0x364>)
    195a:	4798      	blx	r3
    195c:	200d      	movs	r0, #13
    195e:	4bae      	ldr	r3, [pc, #696]	; (1c18 <hif_handle_isr+0x368>)
    1960:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    1962:	2001      	movs	r0, #1
    1964:	4bae      	ldr	r3, [pc, #696]	; (1c20 <hif_handle_isr+0x370>)
    1966:	4798      	blx	r3
    1968:	e106      	b.n	1b78 <hif_handle_isr+0x2c8>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    196a:	22ed      	movs	r2, #237	; 0xed
    196c:	0052      	lsls	r2, r2, #1
    196e:	49a5      	ldr	r1, [pc, #660]	; (1c04 <hif_handle_isr+0x354>)
    1970:	48a5      	ldr	r0, [pc, #660]	; (1c08 <hif_handle_isr+0x358>)
    1972:	4ca6      	ldr	r4, [pc, #664]	; (1c0c <hif_handle_isr+0x35c>)
    1974:	47a0      	blx	r4
    1976:	a904      	add	r1, sp, #16
    1978:	884a      	ldrh	r2, [r1, #2]
    197a:	b292      	uxth	r2, r2
    197c:	780b      	ldrb	r3, [r1, #0]
    197e:	b2db      	uxtb	r3, r3
    1980:	7849      	ldrb	r1, [r1, #1]
    1982:	9100      	str	r1, [sp, #0]
    1984:	0029      	movs	r1, r5
    1986:	48a7      	ldr	r0, [pc, #668]	; (1c24 <hif_handle_isr+0x374>)
    1988:	47a0      	blx	r4
    198a:	200d      	movs	r0, #13
    198c:	4ba2      	ldr	r3, [pc, #648]	; (1c18 <hif_handle_isr+0x368>)
    198e:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    1990:	2001      	movs	r0, #1
    1992:	4ba3      	ldr	r3, [pc, #652]	; (1c20 <hif_handle_isr+0x370>)
    1994:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    1996:	2406      	movs	r4, #6
    1998:	4264      	negs	r4, r4
    199a:	e0ed      	b.n	1b78 <hif_handle_isr+0x2c8>
					if(gstrHifCxt.pfWifiCb)
    199c:	4b96      	ldr	r3, [pc, #600]	; (1bf8 <hif_handle_isr+0x348>)
    199e:	68db      	ldr	r3, [r3, #12]
    19a0:	2b00      	cmp	r3, #0
    19a2:	d01c      	beq.n	19de <hif_handle_isr+0x12e>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    19a4:	4b94      	ldr	r3, [pc, #592]	; (1bf8 <hif_handle_isr+0x348>)
    19a6:	68db      	ldr	r3, [r3, #12]
    19a8:	aa04      	add	r2, sp, #16
    19aa:	7850      	ldrb	r0, [r2, #1]
    19ac:	b2c0      	uxtb	r0, r0
    19ae:	8851      	ldrh	r1, [r2, #2]
    19b0:	9a05      	ldr	r2, [sp, #20]
    19b2:	3208      	adds	r2, #8
    19b4:	3908      	subs	r1, #8
    19b6:	b289      	uxth	r1, r1
    19b8:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
    19ba:	4b8f      	ldr	r3, [pc, #572]	; (1bf8 <hif_handle_isr+0x348>)
    19bc:	789b      	ldrb	r3, [r3, #2]
    19be:	2b00      	cmp	r3, #0
    19c0:	d000      	beq.n	19c4 <hif_handle_isr+0x114>
    19c2:	e09c      	b.n	1afe <hif_handle_isr+0x24e>
	while (gstrHifCxt.u8Interrupt) {
    19c4:	4643      	mov	r3, r8
    19c6:	78db      	ldrb	r3, [r3, #3]
    19c8:	2b00      	cmp	r3, #0
    19ca:	d100      	bne.n	19ce <hif_handle_isr+0x11e>
    19cc:	e158      	b.n	1c80 <hif_handle_isr+0x3d0>
		gstrHifCxt.u8Interrupt--;
    19ce:	464b      	mov	r3, r9
    19d0:	78db      	ldrb	r3, [r3, #3]
    19d2:	3b01      	subs	r3, #1
    19d4:	b2db      	uxtb	r3, r3
    19d6:	464a      	mov	r2, r9
    19d8:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    19da:	4e93      	ldr	r6, [pc, #588]	; (1c28 <hif_handle_isr+0x378>)
    19dc:	e0d7      	b.n	1b8e <hif_handle_isr+0x2de>
						M2M_ERR("WIFI callback is not registered\n");
    19de:	22f3      	movs	r2, #243	; 0xf3
    19e0:	0052      	lsls	r2, r2, #1
    19e2:	4988      	ldr	r1, [pc, #544]	; (1c04 <hif_handle_isr+0x354>)
    19e4:	4888      	ldr	r0, [pc, #544]	; (1c08 <hif_handle_isr+0x358>)
    19e6:	4b89      	ldr	r3, [pc, #548]	; (1c0c <hif_handle_isr+0x35c>)
    19e8:	4798      	blx	r3
    19ea:	4890      	ldr	r0, [pc, #576]	; (1c2c <hif_handle_isr+0x37c>)
    19ec:	4b89      	ldr	r3, [pc, #548]	; (1c14 <hif_handle_isr+0x364>)
    19ee:	4798      	blx	r3
    19f0:	200d      	movs	r0, #13
    19f2:	4b89      	ldr	r3, [pc, #548]	; (1c18 <hif_handle_isr+0x368>)
    19f4:	4798      	blx	r3
    19f6:	e7e0      	b.n	19ba <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfIpCb)
    19f8:	4b7f      	ldr	r3, [pc, #508]	; (1bf8 <hif_handle_isr+0x348>)
    19fa:	691b      	ldr	r3, [r3, #16]
    19fc:	2b00      	cmp	r3, #0
    19fe:	d00b      	beq.n	1a18 <hif_handle_isr+0x168>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1a00:	4b7d      	ldr	r3, [pc, #500]	; (1bf8 <hif_handle_isr+0x348>)
    1a02:	691b      	ldr	r3, [r3, #16]
    1a04:	aa04      	add	r2, sp, #16
    1a06:	7850      	ldrb	r0, [r2, #1]
    1a08:	b2c0      	uxtb	r0, r0
    1a0a:	8851      	ldrh	r1, [r2, #2]
    1a0c:	9a05      	ldr	r2, [sp, #20]
    1a0e:	3208      	adds	r2, #8
    1a10:	3908      	subs	r1, #8
    1a12:	b289      	uxth	r1, r1
    1a14:	4798      	blx	r3
    1a16:	e7d0      	b.n	19ba <hif_handle_isr+0x10a>
						M2M_ERR("Scoket callback is not registered\n");
    1a18:	22f7      	movs	r2, #247	; 0xf7
    1a1a:	0052      	lsls	r2, r2, #1
    1a1c:	4979      	ldr	r1, [pc, #484]	; (1c04 <hif_handle_isr+0x354>)
    1a1e:	487a      	ldr	r0, [pc, #488]	; (1c08 <hif_handle_isr+0x358>)
    1a20:	4b7a      	ldr	r3, [pc, #488]	; (1c0c <hif_handle_isr+0x35c>)
    1a22:	4798      	blx	r3
    1a24:	4882      	ldr	r0, [pc, #520]	; (1c30 <hif_handle_isr+0x380>)
    1a26:	4b7b      	ldr	r3, [pc, #492]	; (1c14 <hif_handle_isr+0x364>)
    1a28:	4798      	blx	r3
    1a2a:	200d      	movs	r0, #13
    1a2c:	4b7a      	ldr	r3, [pc, #488]	; (1c18 <hif_handle_isr+0x368>)
    1a2e:	4798      	blx	r3
    1a30:	e7c3      	b.n	19ba <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfOtaCb)
    1a32:	4b71      	ldr	r3, [pc, #452]	; (1bf8 <hif_handle_isr+0x348>)
    1a34:	695b      	ldr	r3, [r3, #20]
    1a36:	2b00      	cmp	r3, #0
    1a38:	d00b      	beq.n	1a52 <hif_handle_isr+0x1a2>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1a3a:	4b6f      	ldr	r3, [pc, #444]	; (1bf8 <hif_handle_isr+0x348>)
    1a3c:	695b      	ldr	r3, [r3, #20]
    1a3e:	aa04      	add	r2, sp, #16
    1a40:	7850      	ldrb	r0, [r2, #1]
    1a42:	b2c0      	uxtb	r0, r0
    1a44:	8851      	ldrh	r1, [r2, #2]
    1a46:	9a05      	ldr	r2, [sp, #20]
    1a48:	3208      	adds	r2, #8
    1a4a:	3908      	subs	r1, #8
    1a4c:	b289      	uxth	r1, r1
    1a4e:	4798      	blx	r3
    1a50:	e7b3      	b.n	19ba <hif_handle_isr+0x10a>
						M2M_ERR("Ota callback is not registered\n");
    1a52:	22fb      	movs	r2, #251	; 0xfb
    1a54:	0052      	lsls	r2, r2, #1
    1a56:	496b      	ldr	r1, [pc, #428]	; (1c04 <hif_handle_isr+0x354>)
    1a58:	486b      	ldr	r0, [pc, #428]	; (1c08 <hif_handle_isr+0x358>)
    1a5a:	4b6c      	ldr	r3, [pc, #432]	; (1c0c <hif_handle_isr+0x35c>)
    1a5c:	4798      	blx	r3
    1a5e:	4875      	ldr	r0, [pc, #468]	; (1c34 <hif_handle_isr+0x384>)
    1a60:	4b6c      	ldr	r3, [pc, #432]	; (1c14 <hif_handle_isr+0x364>)
    1a62:	4798      	blx	r3
    1a64:	200d      	movs	r0, #13
    1a66:	4b6c      	ldr	r3, [pc, #432]	; (1c18 <hif_handle_isr+0x368>)
    1a68:	4798      	blx	r3
    1a6a:	e7a6      	b.n	19ba <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfCryptoCb)
    1a6c:	4b62      	ldr	r3, [pc, #392]	; (1bf8 <hif_handle_isr+0x348>)
    1a6e:	6a1b      	ldr	r3, [r3, #32]
    1a70:	2b00      	cmp	r3, #0
    1a72:	d00b      	beq.n	1a8c <hif_handle_isr+0x1dc>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1a74:	4b60      	ldr	r3, [pc, #384]	; (1bf8 <hif_handle_isr+0x348>)
    1a76:	6a1b      	ldr	r3, [r3, #32]
    1a78:	aa04      	add	r2, sp, #16
    1a7a:	7850      	ldrb	r0, [r2, #1]
    1a7c:	b2c0      	uxtb	r0, r0
    1a7e:	8851      	ldrh	r1, [r2, #2]
    1a80:	9a05      	ldr	r2, [sp, #20]
    1a82:	3208      	adds	r2, #8
    1a84:	3908      	subs	r1, #8
    1a86:	b289      	uxth	r1, r1
    1a88:	4798      	blx	r3
    1a8a:	e796      	b.n	19ba <hif_handle_isr+0x10a>
						M2M_ERR("Crypto callback is not registered\n");
    1a8c:	4a6a      	ldr	r2, [pc, #424]	; (1c38 <hif_handle_isr+0x388>)
    1a8e:	495d      	ldr	r1, [pc, #372]	; (1c04 <hif_handle_isr+0x354>)
    1a90:	485d      	ldr	r0, [pc, #372]	; (1c08 <hif_handle_isr+0x358>)
    1a92:	4b5e      	ldr	r3, [pc, #376]	; (1c0c <hif_handle_isr+0x35c>)
    1a94:	4798      	blx	r3
    1a96:	4869      	ldr	r0, [pc, #420]	; (1c3c <hif_handle_isr+0x38c>)
    1a98:	4b5e      	ldr	r3, [pc, #376]	; (1c14 <hif_handle_isr+0x364>)
    1a9a:	4798      	blx	r3
    1a9c:	200d      	movs	r0, #13
    1a9e:	4b5e      	ldr	r3, [pc, #376]	; (1c18 <hif_handle_isr+0x368>)
    1aa0:	4798      	blx	r3
    1aa2:	e78a      	b.n	19ba <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfSigmaCb)
    1aa4:	4b54      	ldr	r3, [pc, #336]	; (1bf8 <hif_handle_isr+0x348>)
    1aa6:	699b      	ldr	r3, [r3, #24]
    1aa8:	2b00      	cmp	r3, #0
    1aaa:	d00b      	beq.n	1ac4 <hif_handle_isr+0x214>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1aac:	4b52      	ldr	r3, [pc, #328]	; (1bf8 <hif_handle_isr+0x348>)
    1aae:	699b      	ldr	r3, [r3, #24]
    1ab0:	aa04      	add	r2, sp, #16
    1ab2:	7850      	ldrb	r0, [r2, #1]
    1ab4:	b2c0      	uxtb	r0, r0
    1ab6:	8851      	ldrh	r1, [r2, #2]
    1ab8:	9a05      	ldr	r2, [sp, #20]
    1aba:	3208      	adds	r2, #8
    1abc:	3908      	subs	r1, #8
    1abe:	b289      	uxth	r1, r1
    1ac0:	4798      	blx	r3
    1ac2:	e77a      	b.n	19ba <hif_handle_isr+0x10a>
						M2M_ERR("Sigma callback is not registered\n");
    1ac4:	4a5e      	ldr	r2, [pc, #376]	; (1c40 <hif_handle_isr+0x390>)
    1ac6:	494f      	ldr	r1, [pc, #316]	; (1c04 <hif_handle_isr+0x354>)
    1ac8:	484f      	ldr	r0, [pc, #316]	; (1c08 <hif_handle_isr+0x358>)
    1aca:	4b50      	ldr	r3, [pc, #320]	; (1c0c <hif_handle_isr+0x35c>)
    1acc:	4798      	blx	r3
    1ace:	485d      	ldr	r0, [pc, #372]	; (1c44 <hif_handle_isr+0x394>)
    1ad0:	4b50      	ldr	r3, [pc, #320]	; (1c14 <hif_handle_isr+0x364>)
    1ad2:	4798      	blx	r3
    1ad4:	200d      	movs	r0, #13
    1ad6:	4b50      	ldr	r3, [pc, #320]	; (1c18 <hif_handle_isr+0x368>)
    1ad8:	4798      	blx	r3
    1ada:	e76e      	b.n	19ba <hif_handle_isr+0x10a>
				    if(gstrHifCxt.pfSslCb)
    1adc:	4b46      	ldr	r3, [pc, #280]	; (1bf8 <hif_handle_isr+0x348>)
    1ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1ae0:	2b00      	cmp	r3, #0
    1ae2:	d100      	bne.n	1ae6 <hif_handle_isr+0x236>
    1ae4:	e769      	b.n	19ba <hif_handle_isr+0x10a>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1ae6:	4b44      	ldr	r3, [pc, #272]	; (1bf8 <hif_handle_isr+0x348>)
    1ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1aea:	aa04      	add	r2, sp, #16
    1aec:	7850      	ldrb	r0, [r2, #1]
    1aee:	b2c0      	uxtb	r0, r0
    1af0:	8851      	ldrh	r1, [r2, #2]
    1af2:	9a05      	ldr	r2, [sp, #20]
    1af4:	3208      	adds	r2, #8
    1af6:	3908      	subs	r1, #8
    1af8:	b289      	uxth	r1, r1
    1afa:	4798      	blx	r3
    1afc:	e75d      	b.n	19ba <hif_handle_isr+0x10a>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    1afe:	4a52      	ldr	r2, [pc, #328]	; (1c48 <hif_handle_isr+0x398>)
    1b00:	4940      	ldr	r1, [pc, #256]	; (1c04 <hif_handle_isr+0x354>)
    1b02:	4841      	ldr	r0, [pc, #260]	; (1c08 <hif_handle_isr+0x358>)
    1b04:	4c41      	ldr	r4, [pc, #260]	; (1c0c <hif_handle_isr+0x35c>)
    1b06:	47a0      	blx	r4
    1b08:	ab04      	add	r3, sp, #16
    1b0a:	7819      	ldrb	r1, [r3, #0]
    1b0c:	b2c9      	uxtb	r1, r1
    1b0e:	785a      	ldrb	r2, [r3, #1]
    1b10:	b2d2      	uxtb	r2, r2
    1b12:	484e      	ldr	r0, [pc, #312]	; (1c4c <hif_handle_isr+0x39c>)
    1b14:	47a0      	blx	r4
    1b16:	200d      	movs	r0, #13
    1b18:	4b3f      	ldr	r3, [pc, #252]	; (1c18 <hif_handle_isr+0x368>)
    1b1a:	4798      	blx	r3
					ret = hif_set_rx_done();
    1b1c:	4b4c      	ldr	r3, [pc, #304]	; (1c50 <hif_handle_isr+0x3a0>)
    1b1e:	4798      	blx	r3
    1b20:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
    1b22:	d129      	bne.n	1b78 <hif_handle_isr+0x2c8>
    1b24:	e74e      	b.n	19c4 <hif_handle_isr+0x114>
				M2M_ERR("(hif) Wrong Size\n");
    1b26:	2287      	movs	r2, #135	; 0x87
    1b28:	0092      	lsls	r2, r2, #2
    1b2a:	4936      	ldr	r1, [pc, #216]	; (1c04 <hif_handle_isr+0x354>)
    1b2c:	4836      	ldr	r0, [pc, #216]	; (1c08 <hif_handle_isr+0x358>)
    1b2e:	4b37      	ldr	r3, [pc, #220]	; (1c0c <hif_handle_isr+0x35c>)
    1b30:	4798      	blx	r3
    1b32:	4848      	ldr	r0, [pc, #288]	; (1c54 <hif_handle_isr+0x3a4>)
    1b34:	4b37      	ldr	r3, [pc, #220]	; (1c14 <hif_handle_isr+0x364>)
    1b36:	4798      	blx	r3
    1b38:	200d      	movs	r0, #13
    1b3a:	4b37      	ldr	r3, [pc, #220]	; (1c18 <hif_handle_isr+0x368>)
    1b3c:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    1b3e:	2402      	movs	r4, #2
    1b40:	4264      	negs	r4, r4
    1b42:	e019      	b.n	1b78 <hif_handle_isr+0x2c8>
			M2M_ERR("(hif) False interrupt %lx",reg);
    1b44:	2289      	movs	r2, #137	; 0x89
    1b46:	0092      	lsls	r2, r2, #2
    1b48:	492e      	ldr	r1, [pc, #184]	; (1c04 <hif_handle_isr+0x354>)
    1b4a:	482f      	ldr	r0, [pc, #188]	; (1c08 <hif_handle_isr+0x358>)
    1b4c:	4c2f      	ldr	r4, [pc, #188]	; (1c0c <hif_handle_isr+0x35c>)
    1b4e:	47a0      	blx	r4
    1b50:	9903      	ldr	r1, [sp, #12]
    1b52:	4841      	ldr	r0, [pc, #260]	; (1c58 <hif_handle_isr+0x3a8>)
    1b54:	47a0      	blx	r4
    1b56:	200d      	movs	r0, #13
    1b58:	4b2f      	ldr	r3, [pc, #188]	; (1c18 <hif_handle_isr+0x368>)
    1b5a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1b5c:	240c      	movs	r4, #12
    1b5e:	4264      	negs	r4, r4
    1b60:	e00a      	b.n	1b78 <hif_handle_isr+0x2c8>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    1b62:	4a3e      	ldr	r2, [pc, #248]	; (1c5c <hif_handle_isr+0x3ac>)
    1b64:	4927      	ldr	r1, [pc, #156]	; (1c04 <hif_handle_isr+0x354>)
    1b66:	4828      	ldr	r0, [pc, #160]	; (1c08 <hif_handle_isr+0x358>)
    1b68:	4b28      	ldr	r3, [pc, #160]	; (1c0c <hif_handle_isr+0x35c>)
    1b6a:	4798      	blx	r3
    1b6c:	483c      	ldr	r0, [pc, #240]	; (1c60 <hif_handle_isr+0x3b0>)
    1b6e:	4b29      	ldr	r3, [pc, #164]	; (1c14 <hif_handle_isr+0x364>)
    1b70:	4798      	blx	r3
    1b72:	200d      	movs	r0, #13
    1b74:	4b28      	ldr	r3, [pc, #160]	; (1c18 <hif_handle_isr+0x368>)
    1b76:	4798      	blx	r3
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    1b78:	4a3a      	ldr	r2, [pc, #232]	; (1c64 <hif_handle_isr+0x3b4>)
    1b7a:	493b      	ldr	r1, [pc, #236]	; (1c68 <hif_handle_isr+0x3b8>)
    1b7c:	4822      	ldr	r0, [pc, #136]	; (1c08 <hif_handle_isr+0x358>)
    1b7e:	4f23      	ldr	r7, [pc, #140]	; (1c0c <hif_handle_isr+0x35c>)
    1b80:	47b8      	blx	r7
    1b82:	0021      	movs	r1, r4
    1b84:	4839      	ldr	r0, [pc, #228]	; (1c6c <hif_handle_isr+0x3bc>)
    1b86:	47b8      	blx	r7
    1b88:	200d      	movs	r0, #13
    1b8a:	4b23      	ldr	r3, [pc, #140]	; (1c18 <hif_handle_isr+0x368>)
    1b8c:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    1b8e:	a903      	add	r1, sp, #12
    1b90:	4837      	ldr	r0, [pc, #220]	; (1c70 <hif_handle_isr+0x3c0>)
    1b92:	47b0      	blx	r6
    1b94:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
    1b96:	d1e4      	bne.n	1b62 <hif_handle_isr+0x2b2>
		if(reg & 0x1)	/* New interrupt has been received */
    1b98:	9b03      	ldr	r3, [sp, #12]
    1b9a:	07db      	lsls	r3, r3, #31
    1b9c:	d5d2      	bpl.n	1b44 <hif_handle_isr+0x294>
			nm_bsp_interrupt_ctrl(0);
    1b9e:	2000      	movs	r0, #0
    1ba0:	4b1f      	ldr	r3, [pc, #124]	; (1c20 <hif_handle_isr+0x370>)
    1ba2:	4798      	blx	r3
			reg &= ~NBIT0;
    1ba4:	2301      	movs	r3, #1
    1ba6:	9903      	ldr	r1, [sp, #12]
    1ba8:	4399      	bics	r1, r3
    1baa:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    1bac:	4830      	ldr	r0, [pc, #192]	; (1c70 <hif_handle_isr+0x3c0>)
    1bae:	4b31      	ldr	r3, [pc, #196]	; (1c74 <hif_handle_isr+0x3c4>)
    1bb0:	4798      	blx	r3
    1bb2:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
    1bb4:	d1e0      	bne.n	1b78 <hif_handle_isr+0x2c8>
			gstrHifCxt.u8HifRXDone = 1;
    1bb6:	2201      	movs	r2, #1
    1bb8:	4b0f      	ldr	r3, [pc, #60]	; (1bf8 <hif_handle_isr+0x348>)
    1bba:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    1bbc:	9b03      	ldr	r3, [sp, #12]
    1bbe:	049d      	lsls	r5, r3, #18
    1bc0:	0d2d      	lsrs	r5, r5, #20
			if (size > 0) {
    1bc2:	d0b0      	beq.n	1b26 <hif_handle_isr+0x276>
				uint32 address = 0;
    1bc4:	2300      	movs	r3, #0
    1bc6:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    1bc8:	a905      	add	r1, sp, #20
    1bca:	482b      	ldr	r0, [pc, #172]	; (1c78 <hif_handle_isr+0x3c8>)
    1bcc:	4b16      	ldr	r3, [pc, #88]	; (1c28 <hif_handle_isr+0x378>)
    1bce:	4798      	blx	r3
    1bd0:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    1bd2:	d100      	bne.n	1bd6 <hif_handle_isr+0x326>
    1bd4:	e675      	b.n	18c2 <hif_handle_isr+0x12>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    1bd6:	22c8      	movs	r2, #200	; 0xc8
    1bd8:	32ff      	adds	r2, #255	; 0xff
    1bda:	490a      	ldr	r1, [pc, #40]	; (1c04 <hif_handle_isr+0x354>)
    1bdc:	480a      	ldr	r0, [pc, #40]	; (1c08 <hif_handle_isr+0x358>)
    1bde:	4b0b      	ldr	r3, [pc, #44]	; (1c0c <hif_handle_isr+0x35c>)
    1be0:	4798      	blx	r3
    1be2:	4826      	ldr	r0, [pc, #152]	; (1c7c <hif_handle_isr+0x3cc>)
    1be4:	4b0b      	ldr	r3, [pc, #44]	; (1c14 <hif_handle_isr+0x364>)
    1be6:	4798      	blx	r3
    1be8:	200d      	movs	r0, #13
    1bea:	4b0b      	ldr	r3, [pc, #44]	; (1c18 <hif_handle_isr+0x368>)
    1bec:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    1bee:	2001      	movs	r0, #1
    1bf0:	4b0b      	ldr	r3, [pc, #44]	; (1c20 <hif_handle_isr+0x370>)
    1bf2:	4798      	blx	r3
    1bf4:	e7c0      	b.n	1b78 <hif_handle_isr+0x2c8>
    1bf6:	46c0      	nop			; (mov r8, r8)
    1bf8:	200002f4 	.word	0x200002f4
    1bfc:	000029cd 	.word	0x000029cd
    1c00:	0000020f 	.word	0x0000020f
    1c04:	0000aeec 	.word	0x0000aeec
    1c08:	0000ae98 	.word	0x0000ae98
    1c0c:	00009999 	.word	0x00009999
    1c10:	0000b048 	.word	0x0000b048
    1c14:	00009ab5 	.word	0x00009ab5
    1c18:	000099cd 	.word	0x000099cd
    1c1c:	0000af44 	.word	0x0000af44
    1c20:	00001279 	.word	0x00001279
    1c24:	0000af5c 	.word	0x0000af5c
    1c28:	000029b5 	.word	0x000029b5
    1c2c:	0000af9c 	.word	0x0000af9c
    1c30:	0000afbc 	.word	0x0000afbc
    1c34:	0000afe0 	.word	0x0000afe0
    1c38:	000001ff 	.word	0x000001ff
    1c3c:	0000b000 	.word	0x0000b000
    1c40:	00000206 	.word	0x00000206
    1c44:	0000b024 	.word	0x0000b024
    1c48:	00000215 	.word	0x00000215
    1c4c:	0000b060 	.word	0x0000b060
    1c50:	000015ad 	.word	0x000015ad
    1c54:	0000b08c 	.word	0x0000b08c
    1c58:	0000b0a0 	.word	0x0000b0a0
    1c5c:	0000022d 	.word	0x0000022d
    1c60:	0000b0bc 	.word	0x0000b0bc
    1c64:	0000024a 	.word	0x0000024a
    1c68:	0000aef4 	.word	0x0000aef4
    1c6c:	0000b0e0 	.word	0x0000b0e0
    1c70:	00001070 	.word	0x00001070
    1c74:	000029c1 	.word	0x000029c1
    1c78:	00001084 	.word	0x00001084
    1c7c:	0000af20 	.word	0x0000af20
			}
		}
	}

	return ret;
}
    1c80:	2000      	movs	r0, #0
    1c82:	b007      	add	sp, #28
    1c84:	bc0c      	pop	{r2, r3}
    1c86:	4690      	mov	r8, r2
    1c88:	4699      	mov	r9, r3
    1c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001c8c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    1c8c:	b570      	push	{r4, r5, r6, lr}
    1c8e:	0014      	movs	r4, r2
    1c90:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    1c92:	2800      	cmp	r0, #0
    1c94:	d003      	beq.n	1c9e <hif_receive+0x12>
    1c96:	2900      	cmp	r1, #0
    1c98:	d001      	beq.n	1c9e <hif_receive+0x12>
    1c9a:	2a00      	cmp	r2, #0
    1c9c:	d112      	bne.n	1cc4 <hif_receive+0x38>
	{
		if(isDone)
    1c9e:	2d00      	cmp	r5, #0
    1ca0:	d002      	beq.n	1ca8 <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    1ca2:	4b27      	ldr	r3, [pc, #156]	; (1d40 <hif_receive+0xb4>)
    1ca4:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    1ca6:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
    1ca8:	4a26      	ldr	r2, [pc, #152]	; (1d44 <hif_receive+0xb8>)
    1caa:	4927      	ldr	r1, [pc, #156]	; (1d48 <hif_receive+0xbc>)
    1cac:	4827      	ldr	r0, [pc, #156]	; (1d4c <hif_receive+0xc0>)
    1cae:	4b28      	ldr	r3, [pc, #160]	; (1d50 <hif_receive+0xc4>)
    1cb0:	4798      	blx	r3
    1cb2:	4828      	ldr	r0, [pc, #160]	; (1d54 <hif_receive+0xc8>)
    1cb4:	4b28      	ldr	r3, [pc, #160]	; (1d58 <hif_receive+0xcc>)
    1cb6:	4798      	blx	r3
    1cb8:	200d      	movs	r0, #13
    1cba:	4b28      	ldr	r3, [pc, #160]	; (1d5c <hif_receive+0xd0>)
    1cbc:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1cbe:	200c      	movs	r0, #12
    1cc0:	4240      	negs	r0, r0
    1cc2:	e7f0      	b.n	1ca6 <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
    1cc4:	4b26      	ldr	r3, [pc, #152]	; (1d60 <hif_receive+0xd4>)
    1cc6:	689b      	ldr	r3, [r3, #8]
    1cc8:	429a      	cmp	r2, r3
    1cca:	d81a      	bhi.n	1d02 <hif_receive+0x76>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    1ccc:	4b24      	ldr	r3, [pc, #144]	; (1d60 <hif_receive+0xd4>)
    1cce:	685b      	ldr	r3, [r3, #4]
    1cd0:	4298      	cmp	r0, r3
    1cd2:	d326      	bcc.n	1d22 <hif_receive+0x96>
    1cd4:	1886      	adds	r6, r0, r2
    1cd6:	4a22      	ldr	r2, [pc, #136]	; (1d60 <hif_receive+0xd4>)
    1cd8:	6853      	ldr	r3, [r2, #4]
    1cda:	6892      	ldr	r2, [r2, #8]
    1cdc:	189b      	adds	r3, r3, r2
    1cde:	429e      	cmp	r6, r3
    1ce0:	d81f      	bhi.n	1d22 <hif_receive+0x96>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    1ce2:	0022      	movs	r2, r4
    1ce4:	4b1f      	ldr	r3, [pc, #124]	; (1d64 <hif_receive+0xd8>)
    1ce6:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    1ce8:	2800      	cmp	r0, #0
    1cea:	d1dc      	bne.n	1ca6 <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    1cec:	4a1c      	ldr	r2, [pc, #112]	; (1d60 <hif_receive+0xd4>)
    1cee:	6853      	ldr	r3, [r2, #4]
    1cf0:	6892      	ldr	r2, [r2, #8]
    1cf2:	189b      	adds	r3, r3, r2
    1cf4:	429e      	cmp	r6, r3
    1cf6:	d001      	beq.n	1cfc <hif_receive+0x70>
    1cf8:	2d00      	cmp	r5, #0
    1cfa:	d0d4      	beq.n	1ca6 <hif_receive+0x1a>
		ret = hif_set_rx_done();
    1cfc:	4b10      	ldr	r3, [pc, #64]	; (1d40 <hif_receive+0xb4>)
    1cfe:	4798      	blx	r3
    1d00:	e7d1      	b.n	1ca6 <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    1d02:	4a19      	ldr	r2, [pc, #100]	; (1d68 <hif_receive+0xdc>)
    1d04:	4910      	ldr	r1, [pc, #64]	; (1d48 <hif_receive+0xbc>)
    1d06:	4811      	ldr	r0, [pc, #68]	; (1d4c <hif_receive+0xc0>)
    1d08:	4d11      	ldr	r5, [pc, #68]	; (1d50 <hif_receive+0xc4>)
    1d0a:	47a8      	blx	r5
    1d0c:	4b14      	ldr	r3, [pc, #80]	; (1d60 <hif_receive+0xd4>)
    1d0e:	689a      	ldr	r2, [r3, #8]
    1d10:	0021      	movs	r1, r4
    1d12:	4816      	ldr	r0, [pc, #88]	; (1d6c <hif_receive+0xe0>)
    1d14:	47a8      	blx	r5
    1d16:	200d      	movs	r0, #13
    1d18:	4b10      	ldr	r3, [pc, #64]	; (1d5c <hif_receive+0xd0>)
    1d1a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1d1c:	200c      	movs	r0, #12
    1d1e:	4240      	negs	r0, r0
		goto ERR1;
    1d20:	e7c1      	b.n	1ca6 <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    1d22:	4a13      	ldr	r2, [pc, #76]	; (1d70 <hif_receive+0xe4>)
    1d24:	4908      	ldr	r1, [pc, #32]	; (1d48 <hif_receive+0xbc>)
    1d26:	4809      	ldr	r0, [pc, #36]	; (1d4c <hif_receive+0xc0>)
    1d28:	4b09      	ldr	r3, [pc, #36]	; (1d50 <hif_receive+0xc4>)
    1d2a:	4798      	blx	r3
    1d2c:	4811      	ldr	r0, [pc, #68]	; (1d74 <hif_receive+0xe8>)
    1d2e:	4b0a      	ldr	r3, [pc, #40]	; (1d58 <hif_receive+0xcc>)
    1d30:	4798      	blx	r3
    1d32:	200d      	movs	r0, #13
    1d34:	4b09      	ldr	r3, [pc, #36]	; (1d5c <hif_receive+0xd0>)
    1d36:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1d38:	200c      	movs	r0, #12
    1d3a:	4240      	negs	r0, r0
		goto ERR1;
    1d3c:	e7b3      	b.n	1ca6 <hif_receive+0x1a>
    1d3e:	46c0      	nop			; (mov r8, r8)
    1d40:	000015ad 	.word	0x000015ad
    1d44:	0000026b 	.word	0x0000026b
    1d48:	0000af04 	.word	0x0000af04
    1d4c:	0000ae98 	.word	0x0000ae98
    1d50:	00009999 	.word	0x00009999
    1d54:	0000b110 	.word	0x0000b110
    1d58:	00009ab5 	.word	0x00009ab5
    1d5c:	000099cd 	.word	0x000099cd
    1d60:	200002f4 	.word	0x200002f4
    1d64:	000029cd 	.word	0x000029cd
    1d68:	00000273 	.word	0x00000273
    1d6c:	0000b130 	.word	0x0000b130
    1d70:	00000279 	.word	0x00000279
    1d74:	0000b178 	.word	0x0000b178

00001d78 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    1d78:	b570      	push	{r4, r5, r6, lr}
    1d7a:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    1d7c:	2807      	cmp	r0, #7
    1d7e:	d81f      	bhi.n	1dc0 <hif_register_cb+0x48>
    1d80:	0083      	lsls	r3, r0, #2
    1d82:	4a16      	ldr	r2, [pc, #88]	; (1ddc <hif_register_cb+0x64>)
    1d84:	58d3      	ldr	r3, [r2, r3]
    1d86:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    1d88:	4b15      	ldr	r3, [pc, #84]	; (1de0 <hif_register_cb+0x68>)
    1d8a:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
    1d8c:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
    1d8e:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
    1d90:	4b13      	ldr	r3, [pc, #76]	; (1de0 <hif_register_cb+0x68>)
    1d92:	60d9      	str	r1, [r3, #12]
	sint8 ret = M2M_SUCCESS;
    1d94:	2000      	movs	r0, #0
			break;
    1d96:	e7fa      	b.n	1d8e <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
    1d98:	4b11      	ldr	r3, [pc, #68]	; (1de0 <hif_register_cb+0x68>)
    1d9a:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
    1d9c:	2000      	movs	r0, #0
			break;
    1d9e:	e7f6      	b.n	1d8e <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
    1da0:	4b0f      	ldr	r3, [pc, #60]	; (1de0 <hif_register_cb+0x68>)
    1da2:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
    1da4:	2000      	movs	r0, #0
			break;
    1da6:	e7f2      	b.n	1d8e <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
    1da8:	4b0d      	ldr	r3, [pc, #52]	; (1de0 <hif_register_cb+0x68>)
    1daa:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
    1dac:	2000      	movs	r0, #0
			break;
    1dae:	e7ee      	b.n	1d8e <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
    1db0:	4b0b      	ldr	r3, [pc, #44]	; (1de0 <hif_register_cb+0x68>)
    1db2:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
    1db4:	2000      	movs	r0, #0
			break;
    1db6:	e7ea      	b.n	1d8e <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
    1db8:	4b09      	ldr	r3, [pc, #36]	; (1de0 <hif_register_cb+0x68>)
    1dba:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
    1dbc:	2000      	movs	r0, #0
			break;
    1dbe:	e7e6      	b.n	1d8e <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
    1dc0:	4a08      	ldr	r2, [pc, #32]	; (1de4 <hif_register_cb+0x6c>)
    1dc2:	4909      	ldr	r1, [pc, #36]	; (1de8 <hif_register_cb+0x70>)
    1dc4:	4809      	ldr	r0, [pc, #36]	; (1dec <hif_register_cb+0x74>)
    1dc6:	4d0a      	ldr	r5, [pc, #40]	; (1df0 <hif_register_cb+0x78>)
    1dc8:	47a8      	blx	r5
    1dca:	0021      	movs	r1, r4
    1dcc:	4809      	ldr	r0, [pc, #36]	; (1df4 <hif_register_cb+0x7c>)
    1dce:	47a8      	blx	r5
    1dd0:	200d      	movs	r0, #13
    1dd2:	4b09      	ldr	r3, [pc, #36]	; (1df8 <hif_register_cb+0x80>)
    1dd4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1dd6:	200c      	movs	r0, #12
    1dd8:	4240      	negs	r0, r0
			break;
    1dda:	e7d8      	b.n	1d8e <hif_register_cb+0x16>
    1ddc:	0000aec0 	.word	0x0000aec0
    1de0:	200002f4 	.word	0x200002f4
    1de4:	000002b1 	.word	0x000002b1
    1de8:	0000af10 	.word	0x0000af10
    1dec:	0000ae98 	.word	0x0000ae98
    1df0:	00009999 	.word	0x00009999
    1df4:	0000b1bc 	.word	0x0000b1bc
    1df8:	000099cd 	.word	0x000099cd

00001dfc <hif_init>:
{
    1dfc:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    1dfe:	2228      	movs	r2, #40	; 0x28
    1e00:	2100      	movs	r1, #0
    1e02:	4806      	ldr	r0, [pc, #24]	; (1e1c <hif_init+0x20>)
    1e04:	4b06      	ldr	r3, [pc, #24]	; (1e20 <hif_init+0x24>)
    1e06:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    1e08:	4806      	ldr	r0, [pc, #24]	; (1e24 <hif_init+0x28>)
    1e0a:	4b07      	ldr	r3, [pc, #28]	; (1e28 <hif_init+0x2c>)
    1e0c:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    1e0e:	4907      	ldr	r1, [pc, #28]	; (1e2c <hif_init+0x30>)
    1e10:	2003      	movs	r0, #3
    1e12:	4b07      	ldr	r3, [pc, #28]	; (1e30 <hif_init+0x34>)
    1e14:	4798      	blx	r3
}
    1e16:	2000      	movs	r0, #0
    1e18:	bd10      	pop	{r4, pc}
    1e1a:	46c0      	nop			; (mov r8, r8)
    1e1c:	200002f4 	.word	0x200002f4
    1e20:	0000156d 	.word	0x0000156d
    1e24:	00001599 	.word	0x00001599
    1e28:	00001221 	.word	0x00001221
    1e2c:	000015a9 	.word	0x000015a9
    1e30:	00001d79 	.word	0x00001d79

00001e34 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    1e34:	b530      	push	{r4, r5, lr}
    1e36:	b09f      	sub	sp, #124	; 0x7c
    1e38:	0004      	movs	r4, r0
    1e3a:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    1e3c:	282c      	cmp	r0, #44	; 0x2c
    1e3e:	d02f      	beq.n	1ea0 <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    1e40:	281b      	cmp	r0, #27
    1e42:	d03d      	beq.n	1ec0 <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    1e44:	2806      	cmp	r0, #6
    1e46:	d04b      	beq.n	1ee0 <m2m_wifi_cb+0xac>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    1e48:	280e      	cmp	r0, #14
    1e4a:	d027      	beq.n	1e9c <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    1e4c:	2832      	cmp	r0, #50	; 0x32
    1e4e:	d057      	beq.n	1f00 <m2m_wifi_cb+0xcc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    1e50:	282f      	cmp	r0, #47	; 0x2f
    1e52:	d065      	beq.n	1f20 <m2m_wifi_cb+0xec>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    1e54:	2834      	cmp	r0, #52	; 0x34
    1e56:	d100      	bne.n	1e5a <m2m_wifi_cb+0x26>
    1e58:	e077      	b.n	1f4a <m2m_wifi_cb+0x116>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    1e5a:	2811      	cmp	r0, #17
    1e5c:	d100      	bne.n	1e60 <m2m_wifi_cb+0x2c>
    1e5e:	e096      	b.n	1f8e <m2m_wifi_cb+0x15a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    1e60:	2813      	cmp	r0, #19
    1e62:	d100      	bne.n	1e66 <m2m_wifi_cb+0x32>
    1e64:	e0ac      	b.n	1fc0 <m2m_wifi_cb+0x18c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    1e66:	2804      	cmp	r0, #4
    1e68:	d100      	bne.n	1e6c <m2m_wifi_cb+0x38>
    1e6a:	e0bb      	b.n	1fe4 <m2m_wifi_cb+0x1b0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    1e6c:	2865      	cmp	r0, #101	; 0x65
    1e6e:	d100      	bne.n	1e72 <m2m_wifi_cb+0x3e>
    1e70:	e0ca      	b.n	2008 <STACK_SIZE+0x8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    1e72:	2809      	cmp	r0, #9
    1e74:	d100      	bne.n	1e78 <m2m_wifi_cb+0x44>
    1e76:	e0d9      	b.n	202c <STACK_SIZE+0x2c>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    1e78:	282a      	cmp	r0, #42	; 0x2a
    1e7a:	d100      	bne.n	1e7e <m2m_wifi_cb+0x4a>
    1e7c:	e0e8      	b.n	2050 <STACK_SIZE+0x50>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    1e7e:	2820      	cmp	r0, #32
    1e80:	d100      	bne.n	1e84 <m2m_wifi_cb+0x50>
    1e82:	e0f7      	b.n	2074 <STACK_SIZE+0x74>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    1e84:	2292      	movs	r2, #146	; 0x92
    1e86:	0052      	lsls	r2, r2, #1
    1e88:	4989      	ldr	r1, [pc, #548]	; (20b0 <STACK_SIZE+0xb0>)
    1e8a:	488a      	ldr	r0, [pc, #552]	; (20b4 <STACK_SIZE+0xb4>)
    1e8c:	4d8a      	ldr	r5, [pc, #552]	; (20b8 <STACK_SIZE+0xb8>)
    1e8e:	47a8      	blx	r5
    1e90:	0021      	movs	r1, r4
    1e92:	488a      	ldr	r0, [pc, #552]	; (20bc <STACK_SIZE+0xbc>)
    1e94:	47a8      	blx	r5
    1e96:	200d      	movs	r0, #13
    1e98:	4b89      	ldr	r3, [pc, #548]	; (20c0 <STACK_SIZE+0xc0>)
    1e9a:	4798      	blx	r3
	}
}
    1e9c:	b01f      	add	sp, #124	; 0x7c
    1e9e:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    1ea0:	2300      	movs	r3, #0
    1ea2:	2204      	movs	r2, #4
    1ea4:	a903      	add	r1, sp, #12
    1ea6:	0028      	movs	r0, r5
    1ea8:	4c86      	ldr	r4, [pc, #536]	; (20c4 <STACK_SIZE+0xc4>)
    1eaa:	47a0      	blx	r4
    1eac:	2800      	cmp	r0, #0
    1eae:	d1f5      	bne.n	1e9c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1eb0:	4b85      	ldr	r3, [pc, #532]	; (20c8 <STACK_SIZE+0xc8>)
    1eb2:	681b      	ldr	r3, [r3, #0]
    1eb4:	2b00      	cmp	r3, #0
    1eb6:	d0f1      	beq.n	1e9c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    1eb8:	a903      	add	r1, sp, #12
    1eba:	302c      	adds	r0, #44	; 0x2c
    1ebc:	4798      	blx	r3
    1ebe:	e7ed      	b.n	1e9c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    1ec0:	2300      	movs	r3, #0
    1ec2:	2208      	movs	r2, #8
    1ec4:	a903      	add	r1, sp, #12
    1ec6:	0028      	movs	r0, r5
    1ec8:	4c7e      	ldr	r4, [pc, #504]	; (20c4 <STACK_SIZE+0xc4>)
    1eca:	47a0      	blx	r4
    1ecc:	2800      	cmp	r0, #0
    1ece:	d1e5      	bne.n	1e9c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1ed0:	4b7d      	ldr	r3, [pc, #500]	; (20c8 <STACK_SIZE+0xc8>)
    1ed2:	681b      	ldr	r3, [r3, #0]
    1ed4:	2b00      	cmp	r3, #0
    1ed6:	d0e1      	beq.n	1e9c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    1ed8:	a903      	add	r1, sp, #12
    1eda:	301b      	adds	r0, #27
    1edc:	4798      	blx	r3
    1ede:	e7dd      	b.n	1e9c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    1ee0:	2301      	movs	r3, #1
    1ee2:	2230      	movs	r2, #48	; 0x30
    1ee4:	a903      	add	r1, sp, #12
    1ee6:	0028      	movs	r0, r5
    1ee8:	4c76      	ldr	r4, [pc, #472]	; (20c4 <STACK_SIZE+0xc4>)
    1eea:	47a0      	blx	r4
    1eec:	2800      	cmp	r0, #0
    1eee:	d1d5      	bne.n	1e9c <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    1ef0:	4b75      	ldr	r3, [pc, #468]	; (20c8 <STACK_SIZE+0xc8>)
    1ef2:	681b      	ldr	r3, [r3, #0]
    1ef4:	2b00      	cmp	r3, #0
    1ef6:	d0d1      	beq.n	1e9c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    1ef8:	a903      	add	r1, sp, #12
    1efa:	3006      	adds	r0, #6
    1efc:	4798      	blx	r3
    1efe:	e7cd      	b.n	1e9c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    1f00:	2300      	movs	r3, #0
    1f02:	2214      	movs	r2, #20
    1f04:	a903      	add	r1, sp, #12
    1f06:	0028      	movs	r0, r5
    1f08:	4c6e      	ldr	r4, [pc, #440]	; (20c4 <STACK_SIZE+0xc4>)
    1f0a:	47a0      	blx	r4
    1f0c:	2800      	cmp	r0, #0
    1f0e:	d1c5      	bne.n	1e9c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1f10:	4b6d      	ldr	r3, [pc, #436]	; (20c8 <STACK_SIZE+0xc8>)
    1f12:	681b      	ldr	r3, [r3, #0]
    1f14:	2b00      	cmp	r3, #0
    1f16:	d0c1      	beq.n	1e9c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    1f18:	a903      	add	r1, sp, #12
    1f1a:	3032      	adds	r0, #50	; 0x32
    1f1c:	4798      	blx	r3
    1f1e:	e7bd      	b.n	1e9c <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    1f20:	2264      	movs	r2, #100	; 0x64
    1f22:	2100      	movs	r1, #0
    1f24:	a803      	add	r0, sp, #12
    1f26:	4b69      	ldr	r3, [pc, #420]	; (20cc <STACK_SIZE+0xcc>)
    1f28:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    1f2a:	2300      	movs	r3, #0
    1f2c:	2264      	movs	r2, #100	; 0x64
    1f2e:	a903      	add	r1, sp, #12
    1f30:	0028      	movs	r0, r5
    1f32:	4c64      	ldr	r4, [pc, #400]	; (20c4 <STACK_SIZE+0xc4>)
    1f34:	47a0      	blx	r4
    1f36:	2800      	cmp	r0, #0
    1f38:	d1b0      	bne.n	1e9c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1f3a:	4b63      	ldr	r3, [pc, #396]	; (20c8 <STACK_SIZE+0xc8>)
    1f3c:	681b      	ldr	r3, [r3, #0]
    1f3e:	2b00      	cmp	r3, #0
    1f40:	d0ac      	beq.n	1e9c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    1f42:	a903      	add	r1, sp, #12
    1f44:	302f      	adds	r0, #47	; 0x2f
    1f46:	4798      	blx	r3
    1f48:	e7a8      	b.n	1e9c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    1f4a:	2300      	movs	r3, #0
    1f4c:	2204      	movs	r2, #4
    1f4e:	a903      	add	r1, sp, #12
    1f50:	0028      	movs	r0, r5
    1f52:	4c5c      	ldr	r4, [pc, #368]	; (20c4 <STACK_SIZE+0xc4>)
    1f54:	47a0      	blx	r4
    1f56:	2800      	cmp	r0, #0
    1f58:	d1a0      	bne.n	1e9c <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    1f5a:	485d      	ldr	r0, [pc, #372]	; (20d0 <STACK_SIZE+0xd0>)
    1f5c:	4d56      	ldr	r5, [pc, #344]	; (20b8 <STACK_SIZE+0xb8>)
    1f5e:	47a8      	blx	r5
    1f60:	9c03      	ldr	r4, [sp, #12]
    1f62:	0a23      	lsrs	r3, r4, #8
    1f64:	20ff      	movs	r0, #255	; 0xff
    1f66:	4003      	ands	r3, r0
    1f68:	0c22      	lsrs	r2, r4, #16
    1f6a:	4002      	ands	r2, r0
    1f6c:	0e21      	lsrs	r1, r4, #24
    1f6e:	4020      	ands	r0, r4
    1f70:	9000      	str	r0, [sp, #0]
    1f72:	4858      	ldr	r0, [pc, #352]	; (20d4 <STACK_SIZE+0xd4>)
    1f74:	47a8      	blx	r5
    1f76:	200d      	movs	r0, #13
    1f78:	4b51      	ldr	r3, [pc, #324]	; (20c0 <STACK_SIZE+0xc0>)
    1f7a:	4798      	blx	r3
			if (gpfAppWifiCb)
    1f7c:	4b52      	ldr	r3, [pc, #328]	; (20c8 <STACK_SIZE+0xc8>)
    1f7e:	681b      	ldr	r3, [r3, #0]
    1f80:	2b00      	cmp	r3, #0
    1f82:	d100      	bne.n	1f86 <m2m_wifi_cb+0x152>
    1f84:	e78a      	b.n	1e9c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    1f86:	2100      	movs	r1, #0
    1f88:	2034      	movs	r0, #52	; 0x34
    1f8a:	4798      	blx	r3
    1f8c:	e786      	b.n	1e9c <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
    1f8e:	2200      	movs	r2, #0
    1f90:	4b51      	ldr	r3, [pc, #324]	; (20d8 <STACK_SIZE+0xd8>)
    1f92:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    1f94:	2300      	movs	r3, #0
    1f96:	3204      	adds	r2, #4
    1f98:	a903      	add	r1, sp, #12
    1f9a:	0028      	movs	r0, r5
    1f9c:	4c49      	ldr	r4, [pc, #292]	; (20c4 <STACK_SIZE+0xc4>)
    1f9e:	47a0      	blx	r4
    1fa0:	2800      	cmp	r0, #0
    1fa2:	d000      	beq.n	1fa6 <m2m_wifi_cb+0x172>
    1fa4:	e77a      	b.n	1e9c <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
    1fa6:	ab03      	add	r3, sp, #12
    1fa8:	781a      	ldrb	r2, [r3, #0]
    1faa:	4b4c      	ldr	r3, [pc, #304]	; (20dc <STACK_SIZE+0xdc>)
    1fac:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    1fae:	4b46      	ldr	r3, [pc, #280]	; (20c8 <STACK_SIZE+0xc8>)
    1fb0:	681b      	ldr	r3, [r3, #0]
    1fb2:	2b00      	cmp	r3, #0
    1fb4:	d100      	bne.n	1fb8 <m2m_wifi_cb+0x184>
    1fb6:	e771      	b.n	1e9c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    1fb8:	a903      	add	r1, sp, #12
    1fba:	3011      	adds	r0, #17
    1fbc:	4798      	blx	r3
    1fbe:	e76d      	b.n	1e9c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    1fc0:	2300      	movs	r3, #0
    1fc2:	222c      	movs	r2, #44	; 0x2c
    1fc4:	a903      	add	r1, sp, #12
    1fc6:	0028      	movs	r0, r5
    1fc8:	4c3e      	ldr	r4, [pc, #248]	; (20c4 <STACK_SIZE+0xc4>)
    1fca:	47a0      	blx	r4
    1fcc:	2800      	cmp	r0, #0
    1fce:	d000      	beq.n	1fd2 <m2m_wifi_cb+0x19e>
    1fd0:	e764      	b.n	1e9c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1fd2:	4b3d      	ldr	r3, [pc, #244]	; (20c8 <STACK_SIZE+0xc8>)
    1fd4:	681b      	ldr	r3, [r3, #0]
    1fd6:	2b00      	cmp	r3, #0
    1fd8:	d100      	bne.n	1fdc <m2m_wifi_cb+0x1a8>
    1fda:	e75f      	b.n	1e9c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    1fdc:	a903      	add	r1, sp, #12
    1fde:	3013      	adds	r0, #19
    1fe0:	4798      	blx	r3
    1fe2:	e75b      	b.n	1e9c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1fe4:	2300      	movs	r3, #0
    1fe6:	2204      	movs	r2, #4
    1fe8:	a91c      	add	r1, sp, #112	; 0x70
    1fea:	0028      	movs	r0, r5
    1fec:	4c35      	ldr	r4, [pc, #212]	; (20c4 <STACK_SIZE+0xc4>)
    1fee:	47a0      	blx	r4
    1ff0:	2800      	cmp	r0, #0
    1ff2:	d000      	beq.n	1ff6 <m2m_wifi_cb+0x1c2>
    1ff4:	e752      	b.n	1e9c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1ff6:	4b34      	ldr	r3, [pc, #208]	; (20c8 <STACK_SIZE+0xc8>)
    1ff8:	681b      	ldr	r3, [r3, #0]
    1ffa:	2b00      	cmp	r3, #0
    1ffc:	d100      	bne.n	2000 <STACK_SIZE>
    1ffe:	e74d      	b.n	1e9c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    2000:	a91c      	add	r1, sp, #112	; 0x70
    2002:	3004      	adds	r0, #4
    2004:	4798      	blx	r3
    2006:	e749      	b.n	1e9c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    2008:	2300      	movs	r3, #0
    200a:	2204      	movs	r2, #4
    200c:	a91c      	add	r1, sp, #112	; 0x70
    200e:	0028      	movs	r0, r5
    2010:	4c2c      	ldr	r4, [pc, #176]	; (20c4 <STACK_SIZE+0xc4>)
    2012:	47a0      	blx	r4
    2014:	2800      	cmp	r0, #0
    2016:	d000      	beq.n	201a <STACK_SIZE+0x1a>
    2018:	e740      	b.n	1e9c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    201a:	4b2b      	ldr	r3, [pc, #172]	; (20c8 <STACK_SIZE+0xc8>)
    201c:	681b      	ldr	r3, [r3, #0]
    201e:	2b00      	cmp	r3, #0
    2020:	d100      	bne.n	2024 <STACK_SIZE+0x24>
    2022:	e73b      	b.n	1e9c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    2024:	a91c      	add	r1, sp, #112	; 0x70
    2026:	3065      	adds	r0, #101	; 0x65
    2028:	4798      	blx	r3
    202a:	e737      	b.n	1e9c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    202c:	2301      	movs	r3, #1
    202e:	2264      	movs	r2, #100	; 0x64
    2030:	a903      	add	r1, sp, #12
    2032:	0028      	movs	r0, r5
    2034:	4c23      	ldr	r4, [pc, #140]	; (20c4 <STACK_SIZE+0xc4>)
    2036:	47a0      	blx	r4
    2038:	2800      	cmp	r0, #0
    203a:	d000      	beq.n	203e <STACK_SIZE+0x3e>
    203c:	e72e      	b.n	1e9c <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    203e:	4b22      	ldr	r3, [pc, #136]	; (20c8 <STACK_SIZE+0xc8>)
    2040:	681b      	ldr	r3, [r3, #0]
    2042:	2b00      	cmp	r3, #0
    2044:	d100      	bne.n	2048 <STACK_SIZE+0x48>
    2046:	e729      	b.n	1e9c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    2048:	a903      	add	r1, sp, #12
    204a:	3009      	adds	r0, #9
    204c:	4798      	blx	r3
    204e:	e725      	b.n	1e9c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    2050:	2301      	movs	r3, #1
    2052:	2204      	movs	r2, #4
    2054:	a903      	add	r1, sp, #12
    2056:	0028      	movs	r0, r5
    2058:	4c1a      	ldr	r4, [pc, #104]	; (20c4 <STACK_SIZE+0xc4>)
    205a:	47a0      	blx	r4
    205c:	2800      	cmp	r0, #0
    205e:	d000      	beq.n	2062 <STACK_SIZE+0x62>
    2060:	e71c      	b.n	1e9c <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    2062:	4b19      	ldr	r3, [pc, #100]	; (20c8 <STACK_SIZE+0xc8>)
    2064:	681b      	ldr	r3, [r3, #0]
    2066:	2b00      	cmp	r3, #0
    2068:	d100      	bne.n	206c <STACK_SIZE+0x6c>
    206a:	e717      	b.n	1e9c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    206c:	a903      	add	r1, sp, #12
    206e:	302a      	adds	r0, #42	; 0x2a
    2070:	4798      	blx	r3
    2072:	e713      	b.n	1e9c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    2074:	2300      	movs	r3, #0
    2076:	2208      	movs	r2, #8
    2078:	a903      	add	r1, sp, #12
    207a:	0028      	movs	r0, r5
    207c:	4c11      	ldr	r4, [pc, #68]	; (20c4 <STACK_SIZE+0xc4>)
    207e:	47a0      	blx	r4
    2080:	2800      	cmp	r0, #0
    2082:	d000      	beq.n	2086 <STACK_SIZE+0x86>
    2084:	e70a      	b.n	1e9c <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    2086:	ab03      	add	r3, sp, #12
    2088:	889a      	ldrh	r2, [r3, #4]
    208a:	0028      	movs	r0, r5
    208c:	3008      	adds	r0, #8
    208e:	2301      	movs	r3, #1
    2090:	9903      	ldr	r1, [sp, #12]
    2092:	4c0c      	ldr	r4, [pc, #48]	; (20c4 <STACK_SIZE+0xc4>)
    2094:	47a0      	blx	r4
    2096:	2800      	cmp	r0, #0
    2098:	d000      	beq.n	209c <STACK_SIZE+0x9c>
    209a:	e6ff      	b.n	1e9c <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    209c:	4b0a      	ldr	r3, [pc, #40]	; (20c8 <STACK_SIZE+0xc8>)
    209e:	681b      	ldr	r3, [r3, #0]
    20a0:	2b00      	cmp	r3, #0
    20a2:	d100      	bne.n	20a6 <STACK_SIZE+0xa6>
    20a4:	e6fa      	b.n	1e9c <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    20a6:	a903      	add	r1, sp, #12
    20a8:	3020      	adds	r0, #32
    20aa:	4798      	blx	r3
    20ac:	e6f6      	b.n	1e9c <m2m_wifi_cb+0x68>
    20ae:	46c0      	nop			; (mov r8, r8)
    20b0:	0000b200 	.word	0x0000b200
    20b4:	0000ae98 	.word	0x0000ae98
    20b8:	00009999 	.word	0x00009999
    20bc:	0000b250 	.word	0x0000b250
    20c0:	000099cd 	.word	0x000099cd
    20c4:	00001c8d 	.word	0x00001c8d
    20c8:	2000010c 	.word	0x2000010c
    20cc:	0000156d 	.word	0x0000156d
    20d0:	0000b1c8 	.word	0x0000b1c8
    20d4:	0000b230 	.word	0x0000b230
    20d8:	20000111 	.word	0x20000111
    20dc:	20000110 	.word	0x20000110

000020e0 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    20e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    20e2:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    20e4:	2201      	movs	r2, #1
    20e6:	230f      	movs	r3, #15
    20e8:	446b      	add	r3, sp
    20ea:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    20ec:	2800      	cmp	r0, #0
    20ee:	d061      	beq.n	21b4 <m2m_wifi_init+0xd4>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    20f0:	6802      	ldr	r2, [r0, #0]
    20f2:	4b32      	ldr	r3, [pc, #200]	; (21bc <m2m_wifi_init+0xdc>)
    20f4:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    20f6:	2200      	movs	r2, #0
    20f8:	4b31      	ldr	r3, [pc, #196]	; (21c0 <m2m_wifi_init+0xe0>)
    20fa:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    20fc:	200f      	movs	r0, #15
    20fe:	4468      	add	r0, sp
    2100:	4b30      	ldr	r3, [pc, #192]	; (21c4 <m2m_wifi_init+0xe4>)
    2102:	4798      	blx	r3
    2104:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    2106:	d002      	beq.n	210e <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    2108:	0020      	movs	r0, r4
    210a:	b00f      	add	sp, #60	; 0x3c
    210c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    210e:	2000      	movs	r0, #0
    2110:	4b2d      	ldr	r3, [pc, #180]	; (21c8 <m2m_wifi_init+0xe8>)
    2112:	4798      	blx	r3
    2114:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    2116:	d149      	bne.n	21ac <m2m_wifi_init+0xcc>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    2118:	492c      	ldr	r1, [pc, #176]	; (21cc <m2m_wifi_init+0xec>)
    211a:	2001      	movs	r0, #1
    211c:	4b2c      	ldr	r3, [pc, #176]	; (21d0 <m2m_wifi_init+0xf0>)
    211e:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    2120:	ae04      	add	r6, sp, #16
    2122:	0030      	movs	r0, r6
    2124:	4b2b      	ldr	r3, [pc, #172]	; (21d4 <m2m_wifi_init+0xf4>)
    2126:	4798      	blx	r3
    2128:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    212a:	482b      	ldr	r0, [pc, #172]	; (21d8 <m2m_wifi_init+0xf8>)
    212c:	4d2b      	ldr	r5, [pc, #172]	; (21dc <m2m_wifi_init+0xfc>)
    212e:	47a8      	blx	r5
    2130:	79b3      	ldrb	r3, [r6, #6]
    2132:	7972      	ldrb	r2, [r6, #5]
    2134:	7931      	ldrb	r1, [r6, #4]
    2136:	8c30      	ldrh	r0, [r6, #32]
    2138:	9000      	str	r0, [sp, #0]
    213a:	4829      	ldr	r0, [pc, #164]	; (21e0 <m2m_wifi_init+0x100>)
    213c:	47a8      	blx	r5
    213e:	200d      	movs	r0, #13
    2140:	4f28      	ldr	r7, [pc, #160]	; (21e4 <m2m_wifi_init+0x104>)
    2142:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    2144:	4824      	ldr	r0, [pc, #144]	; (21d8 <m2m_wifi_init+0xf8>)
    2146:	47a8      	blx	r5
    2148:	2226      	movs	r2, #38	; 0x26
    214a:	446a      	add	r2, sp
    214c:	211a      	movs	r1, #26
    214e:	4469      	add	r1, sp
    2150:	4825      	ldr	r0, [pc, #148]	; (21e8 <m2m_wifi_init+0x108>)
    2152:	47a8      	blx	r5
    2154:	200d      	movs	r0, #13
    2156:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    2158:	481f      	ldr	r0, [pc, #124]	; (21d8 <m2m_wifi_init+0xf8>)
    215a:	47a8      	blx	r5
    215c:	7a73      	ldrb	r3, [r6, #9]
    215e:	7a32      	ldrb	r2, [r6, #8]
    2160:	79f1      	ldrb	r1, [r6, #7]
    2162:	4822      	ldr	r0, [pc, #136]	; (21ec <m2m_wifi_init+0x10c>)
    2164:	47a8      	blx	r5
    2166:	200d      	movs	r0, #13
    2168:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    216a:	481b      	ldr	r0, [pc, #108]	; (21d8 <m2m_wifi_init+0xf8>)
    216c:	47a8      	blx	r5
    216e:	2302      	movs	r3, #2
    2170:	2205      	movs	r2, #5
    2172:	2113      	movs	r1, #19
    2174:	481e      	ldr	r0, [pc, #120]	; (21f0 <m2m_wifi_init+0x110>)
    2176:	47a8      	blx	r5
    2178:	200d      	movs	r0, #13
    217a:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    217c:	4816      	ldr	r0, [pc, #88]	; (21d8 <m2m_wifi_init+0xf8>)
    217e:	47a8      	blx	r5
    2180:	4a1c      	ldr	r2, [pc, #112]	; (21f4 <m2m_wifi_init+0x114>)
    2182:	491d      	ldr	r1, [pc, #116]	; (21f8 <m2m_wifi_init+0x118>)
    2184:	481d      	ldr	r0, [pc, #116]	; (21fc <m2m_wifi_init+0x11c>)
    2186:	47a8      	blx	r5
    2188:	200d      	movs	r0, #13
    218a:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    218c:	0023      	movs	r3, r4
    218e:	330d      	adds	r3, #13
    2190:	d1ba      	bne.n	2108 <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    2192:	22e8      	movs	r2, #232	; 0xe8
    2194:	32ff      	adds	r2, #255	; 0xff
    2196:	491a      	ldr	r1, [pc, #104]	; (2200 <m2m_wifi_init+0x120>)
    2198:	481a      	ldr	r0, [pc, #104]	; (2204 <m2m_wifi_init+0x124>)
    219a:	4b10      	ldr	r3, [pc, #64]	; (21dc <m2m_wifi_init+0xfc>)
    219c:	4798      	blx	r3
    219e:	481a      	ldr	r0, [pc, #104]	; (2208 <m2m_wifi_init+0x128>)
    21a0:	4b1a      	ldr	r3, [pc, #104]	; (220c <m2m_wifi_init+0x12c>)
    21a2:	4798      	blx	r3
    21a4:	200d      	movs	r0, #13
    21a6:	4b0f      	ldr	r3, [pc, #60]	; (21e4 <m2m_wifi_init+0x104>)
    21a8:	4798      	blx	r3
    21aa:	e7ad      	b.n	2108 <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    21ac:	2000      	movs	r0, #0
    21ae:	4b18      	ldr	r3, [pc, #96]	; (2210 <m2m_wifi_init+0x130>)
    21b0:	4798      	blx	r3
    21b2:	e7a9      	b.n	2108 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    21b4:	240c      	movs	r4, #12
    21b6:	4264      	negs	r4, r4
    21b8:	e7a6      	b.n	2108 <m2m_wifi_init+0x28>
    21ba:	46c0      	nop			; (mov r8, r8)
    21bc:	2000010c 	.word	0x2000010c
    21c0:	20000111 	.word	0x20000111
    21c4:	00002b81 	.word	0x00002b81
    21c8:	00001dfd 	.word	0x00001dfd
    21cc:	00001e35 	.word	0x00001e35
    21d0:	00001d79 	.word	0x00001d79
    21d4:	00002a9d 	.word	0x00002a9d
    21d8:	0000b1c8 	.word	0x0000b1c8
    21dc:	00009999 	.word	0x00009999
    21e0:	0000b30c 	.word	0x0000b30c
    21e4:	000099cd 	.word	0x000099cd
    21e8:	0000b334 	.word	0x0000b334
    21ec:	0000b350 	.word	0x0000b350
    21f0:	0000b374 	.word	0x0000b374
    21f4:	0000b38c 	.word	0x0000b38c
    21f8:	0000b398 	.word	0x0000b398
    21fc:	0000b3a4 	.word	0x0000b3a4
    2200:	0000b20c 	.word	0x0000b20c
    2204:	0000ae98 	.word	0x0000ae98
    2208:	0000b3bc 	.word	0x0000b3bc
    220c:	00009ab5 	.word	0x00009ab5
    2210:	00002c55 	.word	0x00002c55

00002214 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    2214:	b510      	push	{r4, lr}
	return hif_handle_isr();
    2216:	4b01      	ldr	r3, [pc, #4]	; (221c <m2m_wifi_handle_events+0x8>)
    2218:	4798      	blx	r3
}
    221a:	bd10      	pop	{r4, pc}
    221c:	000018b1 	.word	0x000018b1

00002220 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    2220:	b5f0      	push	{r4, r5, r6, r7, lr}
    2222:	46ce      	mov	lr, r9
    2224:	4647      	mov	r7, r8
    2226:	b580      	push	{r7, lr}
    2228:	b0a3      	sub	sp, #140	; 0x8c
    222a:	9005      	str	r0, [sp, #20]
    222c:	000c      	movs	r4, r1
    222e:	0015      	movs	r5, r2
    2230:	001f      	movs	r7, r3
    2232:	ab2a      	add	r3, sp, #168	; 0xa8
    2234:	881b      	ldrh	r3, [r3, #0]
    2236:	4699      	mov	r9, r3
    2238:	ab2b      	add	r3, sp, #172	; 0xac
    223a:	781b      	ldrb	r3, [r3, #0]
    223c:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    223e:	2a01      	cmp	r2, #1
    2240:	d003      	beq.n	224a <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    2242:	2f00      	cmp	r7, #0
    2244:	d040      	beq.n	22c8 <m2m_wifi_connect_sc+0xa8>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    2246:	2a02      	cmp	r2, #2
    2248:	d04c      	beq.n	22e4 <m2m_wifi_connect_sc+0xc4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    224a:	1e63      	subs	r3, r4, #1
    224c:	2b1f      	cmp	r3, #31
    224e:	d900      	bls.n	2252 <m2m_wifi_connect_sc+0x32>
    2250:	e078      	b.n	2344 <m2m_wifi_connect_sc+0x124>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    2252:	464b      	mov	r3, r9
    2254:	3b01      	subs	r3, #1
    2256:	b29b      	uxth	r3, r3
    2258:	2b0d      	cmp	r3, #13
    225a:	d903      	bls.n	2264 <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    225c:	464b      	mov	r3, r9
    225e:	2bff      	cmp	r3, #255	; 0xff
    2260:	d000      	beq.n	2264 <m2m_wifi_connect_sc+0x44>
    2262:	e07d      	b.n	2360 <m2m_wifi_connect_sc+0x140>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    2264:	ae07      	add	r6, sp, #28
    2266:	0022      	movs	r2, r4
    2268:	9905      	ldr	r1, [sp, #20]
    226a:	205a      	movs	r0, #90	; 0x5a
    226c:	ab02      	add	r3, sp, #8
    226e:	469c      	mov	ip, r3
    2270:	4460      	add	r0, ip
    2272:	4b78      	ldr	r3, [pc, #480]	; (2454 <m2m_wifi_connect_sc+0x234>)
    2274:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    2276:	1934      	adds	r4, r6, r4
    2278:	3446      	adds	r4, #70	; 0x46
    227a:	2300      	movs	r3, #0
    227c:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    227e:	3344      	adds	r3, #68	; 0x44
    2280:	464a      	mov	r2, r9
    2282:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    2284:	4643      	mov	r3, r8
    2286:	1e5a      	subs	r2, r3, #1
    2288:	4193      	sbcs	r3, r2
    228a:	2267      	movs	r2, #103	; 0x67
    228c:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    228e:	2341      	movs	r3, #65	; 0x41
    2290:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    2292:	2d03      	cmp	r5, #3
    2294:	d100      	bne.n	2298 <m2m_wifi_connect_sc+0x78>
    2296:	e072      	b.n	237e <m2m_wifi_connect_sc+0x15e>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    2298:	2d02      	cmp	r5, #2
    229a:	d100      	bne.n	229e <m2m_wifi_connect_sc+0x7e>
    229c:	e0ab      	b.n	23f6 <m2m_wifi_connect_sc+0x1d6>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    229e:	2d04      	cmp	r5, #4
    22a0:	d100      	bne.n	22a4 <m2m_wifi_connect_sc+0x84>
    22a2:	e0c3      	b.n	242c <m2m_wifi_connect_sc+0x20c>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    22a4:	2d01      	cmp	r5, #1
    22a6:	d000      	beq.n	22aa <m2m_wifi_connect_sc+0x8a>
    22a8:	e0c6      	b.n	2438 <m2m_wifi_connect_sc+0x218>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    22aa:	2300      	movs	r3, #0
    22ac:	9302      	str	r3, [sp, #8]
    22ae:	9301      	str	r3, [sp, #4]
    22b0:	9300      	str	r3, [sp, #0]
    22b2:	336c      	adds	r3, #108	; 0x6c
    22b4:	aa07      	add	r2, sp, #28
    22b6:	2128      	movs	r1, #40	; 0x28
    22b8:	2001      	movs	r0, #1
    22ba:	4c67      	ldr	r4, [pc, #412]	; (2458 <m2m_wifi_connect_sc+0x238>)
    22bc:	47a0      	blx	r4

ERR1:
	return ret;
}
    22be:	b023      	add	sp, #140	; 0x8c
    22c0:	bc0c      	pop	{r2, r3}
    22c2:	4690      	mov	r8, r2
    22c4:	4699      	mov	r9, r3
    22c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    22c8:	4a64      	ldr	r2, [pc, #400]	; (245c <m2m_wifi_connect_sc+0x23c>)
    22ca:	4965      	ldr	r1, [pc, #404]	; (2460 <m2m_wifi_connect_sc+0x240>)
    22cc:	4865      	ldr	r0, [pc, #404]	; (2464 <m2m_wifi_connect_sc+0x244>)
    22ce:	4b66      	ldr	r3, [pc, #408]	; (2468 <m2m_wifi_connect_sc+0x248>)
    22d0:	4798      	blx	r3
    22d2:	4866      	ldr	r0, [pc, #408]	; (246c <m2m_wifi_connect_sc+0x24c>)
    22d4:	4b66      	ldr	r3, [pc, #408]	; (2470 <m2m_wifi_connect_sc+0x250>)
    22d6:	4798      	blx	r3
    22d8:	200d      	movs	r0, #13
    22da:	4b66      	ldr	r3, [pc, #408]	; (2474 <m2m_wifi_connect_sc+0x254>)
    22dc:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    22de:	200c      	movs	r0, #12
    22e0:	4240      	negs	r0, r0
			goto ERR1;
    22e2:	e7ec      	b.n	22be <m2m_wifi_connect_sc+0x9e>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    22e4:	0038      	movs	r0, r7
    22e6:	4b64      	ldr	r3, [pc, #400]	; (2478 <m2m_wifi_connect_sc+0x258>)
    22e8:	4798      	blx	r3
    22ea:	2840      	cmp	r0, #64	; 0x40
    22ec:	d1ad      	bne.n	224a <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    22ee:	783b      	ldrb	r3, [r7, #0]
    22f0:	001a      	movs	r2, r3
    22f2:	3a30      	subs	r2, #48	; 0x30
    22f4:	2a36      	cmp	r2, #54	; 0x36
    22f6:	d817      	bhi.n	2328 <m2m_wifi_connect_sc+0x108>
    22f8:	3a0a      	subs	r2, #10
    22fa:	2a06      	cmp	r2, #6
    22fc:	d914      	bls.n	2328 <m2m_wifi_connect_sc+0x108>
    22fe:	3b47      	subs	r3, #71	; 0x47
    2300:	2b19      	cmp	r3, #25
    2302:	d911      	bls.n	2328 <m2m_wifi_connect_sc+0x108>
    2304:	1c7a      	adds	r2, r7, #1
    2306:	0038      	movs	r0, r7
    2308:	3040      	adds	r0, #64	; 0x40
    230a:	7813      	ldrb	r3, [r2, #0]
    230c:	0019      	movs	r1, r3
    230e:	3930      	subs	r1, #48	; 0x30
    2310:	2936      	cmp	r1, #54	; 0x36
    2312:	d809      	bhi.n	2328 <m2m_wifi_connect_sc+0x108>
    2314:	390a      	subs	r1, #10
    2316:	2906      	cmp	r1, #6
    2318:	d906      	bls.n	2328 <m2m_wifi_connect_sc+0x108>
    231a:	3b47      	subs	r3, #71	; 0x47
    231c:	2b19      	cmp	r3, #25
    231e:	d903      	bls.n	2328 <m2m_wifi_connect_sc+0x108>
    2320:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    2322:	4282      	cmp	r2, r0
    2324:	d1f1      	bne.n	230a <m2m_wifi_connect_sc+0xea>
    2326:	e790      	b.n	224a <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    2328:	4a54      	ldr	r2, [pc, #336]	; (247c <m2m_wifi_connect_sc+0x25c>)
    232a:	494d      	ldr	r1, [pc, #308]	; (2460 <m2m_wifi_connect_sc+0x240>)
    232c:	484d      	ldr	r0, [pc, #308]	; (2464 <m2m_wifi_connect_sc+0x244>)
    232e:	4b4e      	ldr	r3, [pc, #312]	; (2468 <m2m_wifi_connect_sc+0x248>)
    2330:	4798      	blx	r3
    2332:	4853      	ldr	r0, [pc, #332]	; (2480 <m2m_wifi_connect_sc+0x260>)
    2334:	4b4e      	ldr	r3, [pc, #312]	; (2470 <m2m_wifi_connect_sc+0x250>)
    2336:	4798      	blx	r3
    2338:	200d      	movs	r0, #13
    233a:	4b4e      	ldr	r3, [pc, #312]	; (2474 <m2m_wifi_connect_sc+0x254>)
    233c:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    233e:	200c      	movs	r0, #12
    2340:	4240      	negs	r0, r0
					goto ERR1;
    2342:	e7bc      	b.n	22be <m2m_wifi_connect_sc+0x9e>
		M2M_ERR("SSID LEN INVALID\n");
    2344:	4a4f      	ldr	r2, [pc, #316]	; (2484 <m2m_wifi_connect_sc+0x264>)
    2346:	4946      	ldr	r1, [pc, #280]	; (2460 <m2m_wifi_connect_sc+0x240>)
    2348:	4846      	ldr	r0, [pc, #280]	; (2464 <m2m_wifi_connect_sc+0x244>)
    234a:	4b47      	ldr	r3, [pc, #284]	; (2468 <m2m_wifi_connect_sc+0x248>)
    234c:	4798      	blx	r3
    234e:	484e      	ldr	r0, [pc, #312]	; (2488 <m2m_wifi_connect_sc+0x268>)
    2350:	4b47      	ldr	r3, [pc, #284]	; (2470 <m2m_wifi_connect_sc+0x250>)
    2352:	4798      	blx	r3
    2354:	200d      	movs	r0, #13
    2356:	4b47      	ldr	r3, [pc, #284]	; (2474 <m2m_wifi_connect_sc+0x254>)
    2358:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    235a:	200c      	movs	r0, #12
    235c:	4240      	negs	r0, r0
		goto ERR1;
    235e:	e7ae      	b.n	22be <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("CH INVALID\n");
    2360:	228d      	movs	r2, #141	; 0x8d
    2362:	0092      	lsls	r2, r2, #2
    2364:	493e      	ldr	r1, [pc, #248]	; (2460 <m2m_wifi_connect_sc+0x240>)
    2366:	483f      	ldr	r0, [pc, #252]	; (2464 <m2m_wifi_connect_sc+0x244>)
    2368:	4b3f      	ldr	r3, [pc, #252]	; (2468 <m2m_wifi_connect_sc+0x248>)
    236a:	4798      	blx	r3
    236c:	4847      	ldr	r0, [pc, #284]	; (248c <m2m_wifi_connect_sc+0x26c>)
    236e:	4b40      	ldr	r3, [pc, #256]	; (2470 <m2m_wifi_connect_sc+0x250>)
    2370:	4798      	blx	r3
    2372:	200d      	movs	r0, #13
    2374:	4b3f      	ldr	r3, [pc, #252]	; (2474 <m2m_wifi_connect_sc+0x254>)
    2376:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2378:	200c      	movs	r0, #12
    237a:	4240      	negs	r0, r0
			goto ERR1;
    237c:	e79f      	b.n	22be <m2m_wifi_connect_sc+0x9e>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    237e:	783b      	ldrb	r3, [r7, #0]
    2380:	3b01      	subs	r3, #1
    2382:	b2db      	uxtb	r3, r3
    2384:	aa07      	add	r2, sp, #28
    2386:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    2388:	2b03      	cmp	r3, #3
    238a:	d817      	bhi.n	23bc <m2m_wifi_connect_sc+0x19c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    238c:	787a      	ldrb	r2, [r7, #1]
    238e:	1e51      	subs	r1, r2, #1
    2390:	ab07      	add	r3, sp, #28
    2392:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    2394:	2310      	movs	r3, #16
    2396:	0011      	movs	r1, r2
    2398:	4399      	bics	r1, r3
    239a:	290b      	cmp	r1, #11
    239c:	d01d      	beq.n	23da <m2m_wifi_connect_sc+0x1ba>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    239e:	4a3c      	ldr	r2, [pc, #240]	; (2490 <m2m_wifi_connect_sc+0x270>)
    23a0:	492f      	ldr	r1, [pc, #188]	; (2460 <m2m_wifi_connect_sc+0x240>)
    23a2:	4830      	ldr	r0, [pc, #192]	; (2464 <m2m_wifi_connect_sc+0x244>)
    23a4:	4c30      	ldr	r4, [pc, #192]	; (2468 <m2m_wifi_connect_sc+0x248>)
    23a6:	47a0      	blx	r4
    23a8:	ab07      	add	r3, sp, #28
    23aa:	7859      	ldrb	r1, [r3, #1]
    23ac:	4839      	ldr	r0, [pc, #228]	; (2494 <m2m_wifi_connect_sc+0x274>)
    23ae:	47a0      	blx	r4
    23b0:	200d      	movs	r0, #13
    23b2:	4b30      	ldr	r3, [pc, #192]	; (2474 <m2m_wifi_connect_sc+0x254>)
    23b4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    23b6:	200c      	movs	r0, #12
    23b8:	4240      	negs	r0, r0
			goto ERR1;
    23ba:	e780      	b.n	22be <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    23bc:	4a36      	ldr	r2, [pc, #216]	; (2498 <m2m_wifi_connect_sc+0x278>)
    23be:	4928      	ldr	r1, [pc, #160]	; (2460 <m2m_wifi_connect_sc+0x240>)
    23c0:	4828      	ldr	r0, [pc, #160]	; (2464 <m2m_wifi_connect_sc+0x244>)
    23c2:	4c29      	ldr	r4, [pc, #164]	; (2468 <m2m_wifi_connect_sc+0x248>)
    23c4:	47a0      	blx	r4
    23c6:	ab07      	add	r3, sp, #28
    23c8:	7819      	ldrb	r1, [r3, #0]
    23ca:	4834      	ldr	r0, [pc, #208]	; (249c <m2m_wifi_connect_sc+0x27c>)
    23cc:	47a0      	blx	r4
    23ce:	200d      	movs	r0, #13
    23d0:	4b28      	ldr	r3, [pc, #160]	; (2474 <m2m_wifi_connect_sc+0x254>)
    23d2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    23d4:	200c      	movs	r0, #12
    23d6:	4240      	negs	r0, r0
			goto ERR1;
    23d8:	e771      	b.n	22be <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    23da:	1cb9      	adds	r1, r7, #2
    23dc:	2016      	movs	r0, #22
    23de:	ab02      	add	r3, sp, #8
    23e0:	469c      	mov	ip, r3
    23e2:	4460      	add	r0, ip
    23e4:	4b1b      	ldr	r3, [pc, #108]	; (2454 <m2m_wifi_connect_sc+0x234>)
    23e6:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    23e8:	787b      	ldrb	r3, [r7, #1]
    23ea:	aa07      	add	r2, sp, #28
    23ec:	4694      	mov	ip, r2
    23ee:	4463      	add	r3, ip
    23f0:	2200      	movs	r2, #0
    23f2:	709a      	strb	r2, [r3, #2]
    23f4:	e759      	b.n	22aa <m2m_wifi_connect_sc+0x8a>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    23f6:	0038      	movs	r0, r7
    23f8:	4b1f      	ldr	r3, [pc, #124]	; (2478 <m2m_wifi_connect_sc+0x258>)
    23fa:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    23fc:	1e43      	subs	r3, r0, #1
    23fe:	b29b      	uxth	r3, r3
    2400:	2b3f      	cmp	r3, #63	; 0x3f
    2402:	d805      	bhi.n	2410 <m2m_wifi_connect_sc+0x1f0>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    2404:	1c42      	adds	r2, r0, #1
    2406:	0039      	movs	r1, r7
    2408:	a807      	add	r0, sp, #28
    240a:	4b12      	ldr	r3, [pc, #72]	; (2454 <m2m_wifi_connect_sc+0x234>)
    240c:	4798      	blx	r3
    240e:	e74c      	b.n	22aa <m2m_wifi_connect_sc+0x8a>
			M2M_ERR("Incorrect PSK key length\n");
    2410:	4a23      	ldr	r2, [pc, #140]	; (24a0 <m2m_wifi_connect_sc+0x280>)
    2412:	4913      	ldr	r1, [pc, #76]	; (2460 <m2m_wifi_connect_sc+0x240>)
    2414:	4813      	ldr	r0, [pc, #76]	; (2464 <m2m_wifi_connect_sc+0x244>)
    2416:	4b14      	ldr	r3, [pc, #80]	; (2468 <m2m_wifi_connect_sc+0x248>)
    2418:	4798      	blx	r3
    241a:	4822      	ldr	r0, [pc, #136]	; (24a4 <m2m_wifi_connect_sc+0x284>)
    241c:	4b14      	ldr	r3, [pc, #80]	; (2470 <m2m_wifi_connect_sc+0x250>)
    241e:	4798      	blx	r3
    2420:	200d      	movs	r0, #13
    2422:	4b14      	ldr	r3, [pc, #80]	; (2474 <m2m_wifi_connect_sc+0x254>)
    2424:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2426:	200c      	movs	r0, #12
    2428:	4240      	negs	r0, r0
			goto ERR1;
    242a:	e748      	b.n	22be <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    242c:	223e      	movs	r2, #62	; 0x3e
    242e:	0039      	movs	r1, r7
    2430:	a807      	add	r0, sp, #28
    2432:	4b08      	ldr	r3, [pc, #32]	; (2454 <m2m_wifi_connect_sc+0x234>)
    2434:	4798      	blx	r3
    2436:	e738      	b.n	22aa <m2m_wifi_connect_sc+0x8a>
		M2M_ERR("undefined sec type\n");
    2438:	4a1b      	ldr	r2, [pc, #108]	; (24a8 <m2m_wifi_connect_sc+0x288>)
    243a:	4909      	ldr	r1, [pc, #36]	; (2460 <m2m_wifi_connect_sc+0x240>)
    243c:	4809      	ldr	r0, [pc, #36]	; (2464 <m2m_wifi_connect_sc+0x244>)
    243e:	4b0a      	ldr	r3, [pc, #40]	; (2468 <m2m_wifi_connect_sc+0x248>)
    2440:	4798      	blx	r3
    2442:	481a      	ldr	r0, [pc, #104]	; (24ac <m2m_wifi_connect_sc+0x28c>)
    2444:	4b0a      	ldr	r3, [pc, #40]	; (2470 <m2m_wifi_connect_sc+0x250>)
    2446:	4798      	blx	r3
    2448:	200d      	movs	r0, #13
    244a:	4b0a      	ldr	r3, [pc, #40]	; (2474 <m2m_wifi_connect_sc+0x254>)
    244c:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    244e:	200c      	movs	r0, #12
    2450:	4240      	negs	r0, r0
		goto ERR1;
    2452:	e734      	b.n	22be <m2m_wifi_connect_sc+0x9e>
    2454:	00001559 	.word	0x00001559
    2458:	00001681 	.word	0x00001681
    245c:	00000215 	.word	0x00000215
    2460:	0000b21c 	.word	0x0000b21c
    2464:	0000ae98 	.word	0x0000ae98
    2468:	00009999 	.word	0x00009999
    246c:	0000b264 	.word	0x0000b264
    2470:	00009ab5 	.word	0x00009ab5
    2474:	000099cd 	.word	0x000099cd
    2478:	0000157d 	.word	0x0000157d
    247c:	00000221 	.word	0x00000221
    2480:	0000b278 	.word	0x0000b278
    2484:	0000022b 	.word	0x0000022b
    2488:	0000b284 	.word	0x0000b284
    248c:	0000b298 	.word	0x0000b298
    2490:	00000252 	.word	0x00000252
    2494:	0000b2c0 	.word	0x0000b2c0
    2498:	0000024b 	.word	0x0000024b
    249c:	0000b2a4 	.word	0x0000b2a4
    24a0:	00000261 	.word	0x00000261
    24a4:	0000b2dc 	.word	0x0000b2dc
    24a8:	00000271 	.word	0x00000271
    24ac:	0000b2f8 	.word	0x0000b2f8

000024b0 <m2m_wifi_connect>:
{
    24b0:	b530      	push	{r4, r5, lr}
    24b2:	b083      	sub	sp, #12
    24b4:	ac06      	add	r4, sp, #24
    24b6:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    24b8:	2500      	movs	r5, #0
    24ba:	9501      	str	r5, [sp, #4]
    24bc:	9400      	str	r4, [sp, #0]
    24be:	4c02      	ldr	r4, [pc, #8]	; (24c8 <m2m_wifi_connect+0x18>)
    24c0:	47a0      	blx	r4
}
    24c2:	b003      	add	sp, #12
    24c4:	bd30      	pop	{r4, r5, pc}
    24c6:	46c0      	nop			; (mov r8, r8)
    24c8:	00002221 	.word	0x00002221

000024cc <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    24cc:	2000      	movs	r0, #0
    24ce:	4770      	bx	lr

000024d0 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    24d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    24d2:	b083      	sub	sp, #12
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    24d4:	2580      	movs	r5, #128	; 0x80
    24d6:	006d      	lsls	r5, r5, #1
    24d8:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    24da:	24a5      	movs	r4, #165	; 0xa5
    24dc:	0164      	lsls	r4, r4, #5
    24de:	4f08      	ldr	r7, [pc, #32]	; (2500 <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    24e0:	4e08      	ldr	r6, [pc, #32]	; (2504 <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    24e2:	0029      	movs	r1, r5
    24e4:	0020      	movs	r0, r4
    24e6:	47b8      	blx	r7
			uint32 reg = 0;
    24e8:	2300      	movs	r3, #0
    24ea:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    24ec:	a901      	add	r1, sp, #4
    24ee:	0020      	movs	r0, r4
    24f0:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    24f2:	2800      	cmp	r0, #0
    24f4:	d1f5      	bne.n	24e2 <chip_apply_conf+0x12>
				if(reg == val32)
    24f6:	9b01      	ldr	r3, [sp, #4]
    24f8:	429d      	cmp	r5, r3
    24fa:	d1f2      	bne.n	24e2 <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    24fc:	b003      	add	sp, #12
    24fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2500:	000029c1 	.word	0x000029c1
    2504:	000029b5 	.word	0x000029b5

00002508 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    2508:	b500      	push	{lr}
    250a:	b083      	sub	sp, #12
	uint32 reg = 0;
    250c:	2300      	movs	r3, #0
    250e:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    2510:	a901      	add	r1, sp, #4
    2512:	4811      	ldr	r0, [pc, #68]	; (2558 <enable_interrupts+0x50>)
    2514:	4b11      	ldr	r3, [pc, #68]	; (255c <enable_interrupts+0x54>)
    2516:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    2518:	2800      	cmp	r0, #0
    251a:	d001      	beq.n	2520 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    251c:	b003      	add	sp, #12
    251e:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    2520:	2180      	movs	r1, #128	; 0x80
    2522:	0049      	lsls	r1, r1, #1
    2524:	9b01      	ldr	r3, [sp, #4]
    2526:	4319      	orrs	r1, r3
    2528:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    252a:	480b      	ldr	r0, [pc, #44]	; (2558 <enable_interrupts+0x50>)
    252c:	4b0c      	ldr	r3, [pc, #48]	; (2560 <enable_interrupts+0x58>)
    252e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    2530:	2800      	cmp	r0, #0
    2532:	d1f3      	bne.n	251c <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    2534:	a901      	add	r1, sp, #4
    2536:	20d0      	movs	r0, #208	; 0xd0
    2538:	0140      	lsls	r0, r0, #5
    253a:	4b08      	ldr	r3, [pc, #32]	; (255c <enable_interrupts+0x54>)
    253c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    253e:	2800      	cmp	r0, #0
    2540:	d1ec      	bne.n	251c <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    2542:	2180      	movs	r1, #128	; 0x80
    2544:	0249      	lsls	r1, r1, #9
    2546:	9b01      	ldr	r3, [sp, #4]
    2548:	4319      	orrs	r1, r3
    254a:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    254c:	20d0      	movs	r0, #208	; 0xd0
    254e:	0140      	lsls	r0, r0, #5
    2550:	4b03      	ldr	r3, [pc, #12]	; (2560 <enable_interrupts+0x58>)
    2552:	4798      	blx	r3
    2554:	e7e2      	b.n	251c <enable_interrupts+0x14>
    2556:	46c0      	nop			; (mov r8, r8)
    2558:	00001408 	.word	0x00001408
    255c:	000029b5 	.word	0x000029b5
    2560:	000029c1 	.word	0x000029c1

00002564 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    2564:	b510      	push	{r4, lr}
    2566:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    2568:	4b28      	ldr	r3, [pc, #160]	; (260c <nmi_get_chipid+0xa8>)
    256a:	681c      	ldr	r4, [r3, #0]
    256c:	2c00      	cmp	r4, #0
    256e:	d004      	beq.n	257a <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    2570:	4b26      	ldr	r3, [pc, #152]	; (260c <nmi_get_chipid+0xa8>)
    2572:	681c      	ldr	r4, [r3, #0]
}
    2574:	0020      	movs	r0, r4
    2576:	b002      	add	sp, #8
    2578:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    257a:	0019      	movs	r1, r3
    257c:	2080      	movs	r0, #128	; 0x80
    257e:	0140      	lsls	r0, r0, #5
    2580:	4b23      	ldr	r3, [pc, #140]	; (2610 <nmi_get_chipid+0xac>)
    2582:	4798      	blx	r3
    2584:	2800      	cmp	r0, #0
    2586:	d003      	beq.n	2590 <nmi_get_chipid+0x2c>
			chipid = 0;
    2588:	2200      	movs	r2, #0
    258a:	4b20      	ldr	r3, [pc, #128]	; (260c <nmi_get_chipid+0xa8>)
    258c:	601a      	str	r2, [r3, #0]
			return 0;
    258e:	e7f1      	b.n	2574 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    2590:	a901      	add	r1, sp, #4
    2592:	4820      	ldr	r0, [pc, #128]	; (2614 <nmi_get_chipid+0xb0>)
    2594:	4b1e      	ldr	r3, [pc, #120]	; (2610 <nmi_get_chipid+0xac>)
    2596:	4798      	blx	r3
    2598:	2800      	cmp	r0, #0
    259a:	d003      	beq.n	25a4 <nmi_get_chipid+0x40>
			chipid = 0;
    259c:	2200      	movs	r2, #0
    259e:	4b1b      	ldr	r3, [pc, #108]	; (260c <nmi_get_chipid+0xa8>)
    25a0:	601a      	str	r2, [r3, #0]
			return 0;
    25a2:	e7e7      	b.n	2574 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    25a4:	4b19      	ldr	r3, [pc, #100]	; (260c <nmi_get_chipid+0xa8>)
    25a6:	681b      	ldr	r3, [r3, #0]
    25a8:	4a1b      	ldr	r2, [pc, #108]	; (2618 <nmi_get_chipid+0xb4>)
    25aa:	4293      	cmp	r3, r2
    25ac:	d00e      	beq.n	25cc <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    25ae:	4a1b      	ldr	r2, [pc, #108]	; (261c <nmi_get_chipid+0xb8>)
    25b0:	4293      	cmp	r3, r2
    25b2:	d012      	beq.n	25da <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    25b4:	4a1a      	ldr	r2, [pc, #104]	; (2620 <nmi_get_chipid+0xbc>)
    25b6:	4293      	cmp	r3, r2
    25b8:	d01c      	beq.n	25f4 <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    25ba:	4914      	ldr	r1, [pc, #80]	; (260c <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    25bc:	4a19      	ldr	r2, [pc, #100]	; (2624 <nmi_get_chipid+0xc0>)
    25be:	680b      	ldr	r3, [r1, #0]
    25c0:	401a      	ands	r2, r3
		chipid |= 0x050000;
    25c2:	23a0      	movs	r3, #160	; 0xa0
    25c4:	02db      	lsls	r3, r3, #11
    25c6:	4313      	orrs	r3, r2
    25c8:	600b      	str	r3, [r1, #0]
    25ca:	e7d1      	b.n	2570 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    25cc:	9b01      	ldr	r3, [sp, #4]
    25ce:	2b01      	cmp	r3, #1
    25d0:	d0f3      	beq.n	25ba <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    25d2:	4a15      	ldr	r2, [pc, #84]	; (2628 <nmi_get_chipid+0xc4>)
    25d4:	4b0d      	ldr	r3, [pc, #52]	; (260c <nmi_get_chipid+0xa8>)
    25d6:	601a      	str	r2, [r3, #0]
    25d8:	e7ef      	b.n	25ba <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    25da:	9b01      	ldr	r3, [sp, #4]
    25dc:	2b03      	cmp	r3, #3
    25de:	d0ec      	beq.n	25ba <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    25e0:	2b04      	cmp	r3, #4
    25e2:	d003      	beq.n	25ec <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    25e4:	4a11      	ldr	r2, [pc, #68]	; (262c <nmi_get_chipid+0xc8>)
    25e6:	4b09      	ldr	r3, [pc, #36]	; (260c <nmi_get_chipid+0xa8>)
    25e8:	601a      	str	r2, [r3, #0]
    25ea:	e7e6      	b.n	25ba <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    25ec:	4a10      	ldr	r2, [pc, #64]	; (2630 <nmi_get_chipid+0xcc>)
    25ee:	4b07      	ldr	r3, [pc, #28]	; (260c <nmi_get_chipid+0xa8>)
    25f0:	601a      	str	r2, [r3, #0]
    25f2:	e7e2      	b.n	25ba <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    25f4:	4905      	ldr	r1, [pc, #20]	; (260c <nmi_get_chipid+0xa8>)
    25f6:	20ec      	movs	r0, #236	; 0xec
    25f8:	0380      	lsls	r0, r0, #14
    25fa:	4b05      	ldr	r3, [pc, #20]	; (2610 <nmi_get_chipid+0xac>)
    25fc:	4798      	blx	r3
    25fe:	2800      	cmp	r0, #0
    2600:	d0db      	beq.n	25ba <nmi_get_chipid+0x56>
			chipid = 0;
    2602:	2200      	movs	r2, #0
    2604:	4b01      	ldr	r3, [pc, #4]	; (260c <nmi_get_chipid+0xa8>)
    2606:	601a      	str	r2, [r3, #0]
			return 0;
    2608:	e7b4      	b.n	2574 <nmi_get_chipid+0x10>
    260a:	46c0      	nop			; (mov r8, r8)
    260c:	20000114 	.word	0x20000114
    2610:	000029b5 	.word	0x000029b5
    2614:	000013f4 	.word	0x000013f4
    2618:	001002a0 	.word	0x001002a0
    261c:	001002b0 	.word	0x001002b0
    2620:	001000f0 	.word	0x001000f0
    2624:	fff0ffff 	.word	0xfff0ffff
    2628:	001002a1 	.word	0x001002a1
    262c:	001002b2 	.word	0x001002b2
    2630:	001002b1 	.word	0x001002b1

00002634 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    2634:	b530      	push	{r4, r5, lr}
    2636:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    2638:	4c16      	ldr	r4, [pc, #88]	; (2694 <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    263a:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    263c:	a901      	add	r1, sp, #4
    263e:	2010      	movs	r0, #16
    2640:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    2642:	2800      	cmp	r0, #0
    2644:	d11c      	bne.n	2680 <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    2646:	9b01      	ldr	r3, [sp, #4]
    2648:	422b      	tst	r3, r5
    264a:	d1f7      	bne.n	263c <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    264c:	a901      	add	r1, sp, #4
    264e:	3001      	adds	r0, #1
    2650:	4b10      	ldr	r3, [pc, #64]	; (2694 <chip_sleep+0x60>)
    2652:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    2654:	2800      	cmp	r0, #0
    2656:	d113      	bne.n	2680 <chip_sleep+0x4c>
	if(reg & NBIT1)
    2658:	9901      	ldr	r1, [sp, #4]
    265a:	078b      	lsls	r3, r1, #30
    265c:	d507      	bpl.n	266e <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    265e:	2302      	movs	r3, #2
    2660:	4399      	bics	r1, r3
    2662:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    2664:	3001      	adds	r0, #1
    2666:	4b0c      	ldr	r3, [pc, #48]	; (2698 <chip_sleep+0x64>)
    2668:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    266a:	2800      	cmp	r0, #0
    266c:	d108      	bne.n	2680 <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    266e:	a901      	add	r1, sp, #4
    2670:	200b      	movs	r0, #11
    2672:	4b08      	ldr	r3, [pc, #32]	; (2694 <chip_sleep+0x60>)
    2674:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    2676:	2800      	cmp	r0, #0
    2678:	d102      	bne.n	2680 <chip_sleep+0x4c>
	if(reg & NBIT0)
    267a:	9901      	ldr	r1, [sp, #4]
    267c:	07cb      	lsls	r3, r1, #31
    267e:	d401      	bmi.n	2684 <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    2680:	b003      	add	sp, #12
    2682:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    2684:	2301      	movs	r3, #1
    2686:	4399      	bics	r1, r3
    2688:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    268a:	300b      	adds	r0, #11
    268c:	4b02      	ldr	r3, [pc, #8]	; (2698 <chip_sleep+0x64>)
    268e:	4798      	blx	r3
    2690:	e7f6      	b.n	2680 <chip_sleep+0x4c>
    2692:	46c0      	nop			; (mov r8, r8)
    2694:	000029b5 	.word	0x000029b5
    2698:	000029c1 	.word	0x000029c1

0000269c <chip_wake>:
sint8 chip_wake(void)
{
    269c:	b5f0      	push	{r4, r5, r6, r7, lr}
    269e:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    26a0:	2300      	movs	r3, #0
    26a2:	9301      	str	r3, [sp, #4]
    26a4:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    26a6:	a901      	add	r1, sp, #4
    26a8:	200b      	movs	r0, #11
    26aa:	4b28      	ldr	r3, [pc, #160]	; (274c <chip_wake+0xb0>)
    26ac:	4798      	blx	r3
    26ae:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    26b0:	d130      	bne.n	2714 <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    26b2:	9901      	ldr	r1, [sp, #4]
    26b4:	07cb      	lsls	r3, r1, #31
    26b6:	d406      	bmi.n	26c6 <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    26b8:	2301      	movs	r3, #1
    26ba:	4319      	orrs	r1, r3
    26bc:	200b      	movs	r0, #11
    26be:	4b24      	ldr	r3, [pc, #144]	; (2750 <chip_wake+0xb4>)
    26c0:	4798      	blx	r3
    26c2:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    26c4:	d126      	bne.n	2714 <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    26c6:	a901      	add	r1, sp, #4
    26c8:	2001      	movs	r0, #1
    26ca:	4b20      	ldr	r3, [pc, #128]	; (274c <chip_wake+0xb0>)
    26cc:	4798      	blx	r3
    26ce:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    26d0:	d120      	bne.n	2714 <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    26d2:	9901      	ldr	r1, [sp, #4]
    26d4:	078b      	lsls	r3, r1, #30
    26d6:	d520      	bpl.n	271a <chip_wake+0x7e>
{
    26d8:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    26da:	4f1c      	ldr	r7, [pc, #112]	; (274c <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    26dc:	4e1d      	ldr	r6, [pc, #116]	; (2754 <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    26de:	4669      	mov	r1, sp
    26e0:	200f      	movs	r0, #15
    26e2:	47b8      	blx	r7
    26e4:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    26e6:	d120      	bne.n	272a <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    26e8:	9b00      	ldr	r3, [sp, #0]
    26ea:	075b      	lsls	r3, r3, #29
    26ec:	d42b      	bmi.n	2746 <chip_wake+0xaa>
		nm_bsp_sleep(2);
    26ee:	2002      	movs	r0, #2
    26f0:	47b0      	blx	r6
    26f2:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    26f4:	2d00      	cmp	r5, #0
    26f6:	d1f2      	bne.n	26de <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    26f8:	22af      	movs	r2, #175	; 0xaf
    26fa:	0052      	lsls	r2, r2, #1
    26fc:	4916      	ldr	r1, [pc, #88]	; (2758 <chip_wake+0xbc>)
    26fe:	4817      	ldr	r0, [pc, #92]	; (275c <chip_wake+0xc0>)
    2700:	4b17      	ldr	r3, [pc, #92]	; (2760 <chip_wake+0xc4>)
    2702:	4798      	blx	r3
    2704:	4817      	ldr	r0, [pc, #92]	; (2764 <chip_wake+0xc8>)
    2706:	4b18      	ldr	r3, [pc, #96]	; (2768 <chip_wake+0xcc>)
    2708:	4798      	blx	r3
    270a:	200d      	movs	r0, #13
    270c:	4b17      	ldr	r3, [pc, #92]	; (276c <chip_wake+0xd0>)
    270e:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    2710:	2404      	movs	r4, #4
    2712:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    2714:	0020      	movs	r0, r4
    2716:	b003      	add	sp, #12
    2718:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    271a:	2302      	movs	r3, #2
    271c:	4319      	orrs	r1, r3
    271e:	2001      	movs	r0, #1
    2720:	4b0b      	ldr	r3, [pc, #44]	; (2750 <chip_wake+0xb4>)
    2722:	4798      	blx	r3
    2724:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    2726:	d0d7      	beq.n	26d8 <chip_wake+0x3c>
    2728:	e7f4      	b.n	2714 <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    272a:	22aa      	movs	r2, #170	; 0xaa
    272c:	0052      	lsls	r2, r2, #1
    272e:	490a      	ldr	r1, [pc, #40]	; (2758 <chip_wake+0xbc>)
    2730:	480a      	ldr	r0, [pc, #40]	; (275c <chip_wake+0xc0>)
    2732:	4d0b      	ldr	r5, [pc, #44]	; (2760 <chip_wake+0xc4>)
    2734:	47a8      	blx	r5
    2736:	9a00      	ldr	r2, [sp, #0]
    2738:	0021      	movs	r1, r4
    273a:	480d      	ldr	r0, [pc, #52]	; (2770 <chip_wake+0xd4>)
    273c:	47a8      	blx	r5
    273e:	200d      	movs	r0, #13
    2740:	4b0a      	ldr	r3, [pc, #40]	; (276c <chip_wake+0xd0>)
    2742:	4798      	blx	r3
			goto _WAKE_EXIT;
    2744:	e7e6      	b.n	2714 <chip_wake+0x78>
	nm_bus_reset();
    2746:	4b0b      	ldr	r3, [pc, #44]	; (2774 <chip_wake+0xd8>)
    2748:	4798      	blx	r3
    274a:	e7e3      	b.n	2714 <chip_wake+0x78>
    274c:	000029b5 	.word	0x000029b5
    2750:	000029c1 	.word	0x000029c1
    2754:	00001169 	.word	0x00001169
    2758:	0000b3d8 	.word	0x0000b3d8
    275c:	0000ae98 	.word	0x0000ae98
    2760:	00009999 	.word	0x00009999
    2764:	0000b420 	.word	0x0000b420
    2768:	00009ab5 	.word	0x00009ab5
    276c:	000099cd 	.word	0x000099cd
    2770:	0000b408 	.word	0x0000b408
    2774:	0000299d 	.word	0x0000299d

00002778 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    2778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    277a:	0007      	movs	r7, r0
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    277c:	4d2d      	ldr	r5, [pc, #180]	; (2834 <wait_for_bootrom+0xbc>)
    277e:	4c2e      	ldr	r4, [pc, #184]	; (2838 <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    2780:	4e2e      	ldr	r6, [pc, #184]	; (283c <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    2782:	0028      	movs	r0, r5
    2784:	47a0      	blx	r4
		if (reg & 0x80000000) {
    2786:	2800      	cmp	r0, #0
    2788:	db02      	blt.n	2790 <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    278a:	2001      	movs	r0, #1
    278c:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    278e:	e7f8      	b.n	2782 <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    2790:	482b      	ldr	r0, [pc, #172]	; (2840 <wait_for_bootrom+0xc8>)
    2792:	4b29      	ldr	r3, [pc, #164]	; (2838 <wait_for_bootrom+0xc0>)
    2794:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    2796:	07c3      	lsls	r3, r0, #31
    2798:	d409      	bmi.n	27ae <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    279a:	4e28      	ldr	r6, [pc, #160]	; (283c <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
    279c:	4c29      	ldr	r4, [pc, #164]	; (2844 <wait_for_bootrom+0xcc>)
    279e:	4d26      	ldr	r5, [pc, #152]	; (2838 <wait_for_bootrom+0xc0>)
			nm_bsp_sleep(1);
    27a0:	2001      	movs	r0, #1
    27a2:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    27a4:	0020      	movs	r0, r4
    27a6:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    27a8:	4b27      	ldr	r3, [pc, #156]	; (2848 <wait_for_bootrom+0xd0>)
    27aa:	4298      	cmp	r0, r3
    27ac:	d1f8      	bne.n	27a0 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    27ae:	2f02      	cmp	r7, #2
    27b0:	d021      	beq.n	27f6 <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    27b2:	2f03      	cmp	r7, #3
    27b4:	d029      	beq.n	280a <wait_for_bootrom+0x92>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    27b6:	2f04      	cmp	r7, #4
    27b8:	d030      	beq.n	281c <wait_for_bootrom+0xa4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    27ba:	4924      	ldr	r1, [pc, #144]	; (284c <wait_for_bootrom+0xd4>)
    27bc:	4824      	ldr	r0, [pc, #144]	; (2850 <wait_for_bootrom+0xd8>)
    27be:	4b25      	ldr	r3, [pc, #148]	; (2854 <wait_for_bootrom+0xdc>)
    27c0:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    27c2:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    27c4:	4b24      	ldr	r3, [pc, #144]	; (2858 <wait_for_bootrom+0xe0>)
    27c6:	4798      	blx	r3
    27c8:	0500      	lsls	r0, r0, #20
    27ca:	0d00      	lsrs	r0, r0, #20
    27cc:	4b23      	ldr	r3, [pc, #140]	; (285c <wait_for_bootrom+0xe4>)
    27ce:	4298      	cmp	r0, r3
    27d0:	d82a      	bhi.n	2828 <wait_for_bootrom+0xb0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    27d2:	0020      	movs	r0, r4
    27d4:	4b22      	ldr	r3, [pc, #136]	; (2860 <wait_for_bootrom+0xe8>)
    27d6:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    27d8:	4822      	ldr	r0, [pc, #136]	; (2864 <wait_for_bootrom+0xec>)
    27da:	4c23      	ldr	r4, [pc, #140]	; (2868 <wait_for_bootrom+0xf0>)
    27dc:	47a0      	blx	r4
    27de:	491b      	ldr	r1, [pc, #108]	; (284c <wait_for_bootrom+0xd4>)
    27e0:	4822      	ldr	r0, [pc, #136]	; (286c <wait_for_bootrom+0xf4>)
    27e2:	47a0      	blx	r4
    27e4:	200d      	movs	r0, #13
    27e6:	4b22      	ldr	r3, [pc, #136]	; (2870 <wait_for_bootrom+0xf8>)
    27e8:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    27ea:	4922      	ldr	r1, [pc, #136]	; (2874 <wait_for_bootrom+0xfc>)
    27ec:	4815      	ldr	r0, [pc, #84]	; (2844 <wait_for_bootrom+0xcc>)
    27ee:	4b19      	ldr	r3, [pc, #100]	; (2854 <wait_for_bootrom+0xdc>)
    27f0:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    27f2:	2000      	movs	r0, #0
    27f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    27f6:	4920      	ldr	r1, [pc, #128]	; (2878 <wait_for_bootrom+0x100>)
    27f8:	4820      	ldr	r0, [pc, #128]	; (287c <wait_for_bootrom+0x104>)
    27fa:	4c16      	ldr	r4, [pc, #88]	; (2854 <wait_for_bootrom+0xdc>)
    27fc:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    27fe:	2180      	movs	r1, #128	; 0x80
    2800:	0349      	lsls	r1, r1, #13
    2802:	4813      	ldr	r0, [pc, #76]	; (2850 <wait_for_bootrom+0xd8>)
    2804:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    2806:	2400      	movs	r4, #0
    2808:	e7dc      	b.n	27c4 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    280a:	491b      	ldr	r1, [pc, #108]	; (2878 <wait_for_bootrom+0x100>)
    280c:	481b      	ldr	r0, [pc, #108]	; (287c <wait_for_bootrom+0x104>)
    280e:	4c11      	ldr	r4, [pc, #68]	; (2854 <wait_for_bootrom+0xdc>)
    2810:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    2812:	2100      	movs	r1, #0
    2814:	480e      	ldr	r0, [pc, #56]	; (2850 <wait_for_bootrom+0xd8>)
    2816:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    2818:	2400      	movs	r4, #0
    281a:	e7d3      	b.n	27c4 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    281c:	490b      	ldr	r1, [pc, #44]	; (284c <wait_for_bootrom+0xd4>)
    281e:	480c      	ldr	r0, [pc, #48]	; (2850 <wait_for_bootrom+0xd8>)
    2820:	4b0c      	ldr	r3, [pc, #48]	; (2854 <wait_for_bootrom+0xdc>)
    2822:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    2824:	2480      	movs	r4, #128	; 0x80
    2826:	e7cd      	b.n	27c4 <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    2828:	2002      	movs	r0, #2
    282a:	4320      	orrs	r0, r4
    282c:	4b0c      	ldr	r3, [pc, #48]	; (2860 <wait_for_bootrom+0xe8>)
    282e:	4798      	blx	r3
    2830:	e7d2      	b.n	27d8 <wait_for_bootrom+0x60>
    2832:	46c0      	nop			; (mov r8, r8)
    2834:	00001014 	.word	0x00001014
    2838:	000029a9 	.word	0x000029a9
    283c:	00001169 	.word	0x00001169
    2840:	000207bc 	.word	0x000207bc
    2844:	000c000c 	.word	0x000c000c
    2848:	10add09e 	.word	0x10add09e
    284c:	13521352 	.word	0x13521352
    2850:	0000108c 	.word	0x0000108c
    2854:	000029c1 	.word	0x000029c1
    2858:	00002565 	.word	0x00002565
    285c:	0000039f 	.word	0x0000039f
    2860:	000024d1 	.word	0x000024d1
    2864:	0000b1c8 	.word	0x0000b1c8
    2868:	00009999 	.word	0x00009999
    286c:	0000b43c 	.word	0x0000b43c
    2870:	000099cd 	.word	0x000099cd
    2874:	ef522f61 	.word	0xef522f61
    2878:	3c1cd57d 	.word	0x3c1cd57d
    287c:	000207ac 	.word	0x000207ac

00002880 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    2880:	b570      	push	{r4, r5, r6, lr}
    2882:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    2884:	4b15      	ldr	r3, [pc, #84]	; (28dc <wait_for_firmware_start+0x5c>)
    2886:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    2888:	4b15      	ldr	r3, [pc, #84]	; (28e0 <wait_for_firmware_start+0x60>)
    288a:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    288c:	3802      	subs	r0, #2
    288e:	2801      	cmp	r0, #1
    2890:	d911      	bls.n	28b6 <wait_for_firmware_start+0x36>
{
    2892:	2401      	movs	r4, #1
    2894:	4264      	negs	r4, r4
    2896:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    2898:	4e12      	ldr	r6, [pc, #72]	; (28e4 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    289a:	4d13      	ldr	r5, [pc, #76]	; (28e8 <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    289c:	9b00      	ldr	r3, [sp, #0]
    289e:	4298      	cmp	r0, r3
    28a0:	d00e      	beq.n	28c0 <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    28a2:	2002      	movs	r0, #2
    28a4:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    28a6:	9801      	ldr	r0, [sp, #4]
    28a8:	47a8      	blx	r5
    28aa:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    28ac:	2c00      	cmp	r4, #0
    28ae:	d1f5      	bne.n	289c <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    28b0:	2005      	movs	r0, #5
    28b2:	4240      	negs	r0, r0
    28b4:	e009      	b.n	28ca <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    28b6:	4b0d      	ldr	r3, [pc, #52]	; (28ec <wait_for_firmware_start+0x6c>)
    28b8:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    28ba:	4b0d      	ldr	r3, [pc, #52]	; (28f0 <wait_for_firmware_start+0x70>)
    28bc:	9300      	str	r3, [sp, #0]
    28be:	e7e8      	b.n	2892 <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    28c0:	9a00      	ldr	r2, [sp, #0]
    28c2:	4b07      	ldr	r3, [pc, #28]	; (28e0 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    28c4:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    28c6:	429a      	cmp	r2, r3
    28c8:	d001      	beq.n	28ce <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    28ca:	b002      	add	sp, #8
    28cc:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    28ce:	2100      	movs	r1, #0
    28d0:	4802      	ldr	r0, [pc, #8]	; (28dc <wait_for_firmware_start+0x5c>)
    28d2:	4b08      	ldr	r3, [pc, #32]	; (28f4 <wait_for_firmware_start+0x74>)
    28d4:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    28d6:	2000      	movs	r0, #0
    28d8:	e7f7      	b.n	28ca <wait_for_firmware_start+0x4a>
    28da:	46c0      	nop			; (mov r8, r8)
    28dc:	0000108c 	.word	0x0000108c
    28e0:	02532636 	.word	0x02532636
    28e4:	00001169 	.word	0x00001169
    28e8:	000029a9 	.word	0x000029a9
    28ec:	000207ac 	.word	0x000207ac
    28f0:	d75dc1c3 	.word	0xd75dc1c3
    28f4:	000029c1 	.word	0x000029c1

000028f8 <chip_deinit>:

sint8 chip_deinit(void)
{
    28f8:	b510      	push	{r4, lr}
    28fa:	b082      	sub	sp, #8
	uint32 reg = 0;
    28fc:	2300      	movs	r3, #0
    28fe:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    2900:	a901      	add	r1, sp, #4
    2902:	20a0      	movs	r0, #160	; 0xa0
    2904:	0140      	lsls	r0, r0, #5
    2906:	4b14      	ldr	r3, [pc, #80]	; (2958 <chip_deinit+0x60>)
    2908:	4798      	blx	r3
    290a:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    290c:	d115      	bne.n	293a <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    290e:	4913      	ldr	r1, [pc, #76]	; (295c <chip_deinit+0x64>)
    2910:	9b01      	ldr	r3, [sp, #4]
    2912:	4019      	ands	r1, r3
    2914:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    2916:	20a0      	movs	r0, #160	; 0xa0
    2918:	0140      	lsls	r0, r0, #5
    291a:	4b11      	ldr	r3, [pc, #68]	; (2960 <chip_deinit+0x68>)
    291c:	4798      	blx	r3
    291e:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    2920:	d016      	beq.n	2950 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    2922:	4a10      	ldr	r2, [pc, #64]	; (2964 <chip_deinit+0x6c>)
    2924:	4910      	ldr	r1, [pc, #64]	; (2968 <chip_deinit+0x70>)
    2926:	4811      	ldr	r0, [pc, #68]	; (296c <chip_deinit+0x74>)
    2928:	4b11      	ldr	r3, [pc, #68]	; (2970 <chip_deinit+0x78>)
    292a:	4798      	blx	r3
    292c:	4811      	ldr	r0, [pc, #68]	; (2974 <chip_deinit+0x7c>)
    292e:	4b12      	ldr	r3, [pc, #72]	; (2978 <chip_deinit+0x80>)
    2930:	4798      	blx	r3
    2932:	200d      	movs	r0, #13
    2934:	4b11      	ldr	r3, [pc, #68]	; (297c <chip_deinit+0x84>)
    2936:	4798      	blx	r3
		goto ERR1;
    2938:	e00a      	b.n	2950 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    293a:	4a11      	ldr	r2, [pc, #68]	; (2980 <chip_deinit+0x88>)
    293c:	490a      	ldr	r1, [pc, #40]	; (2968 <chip_deinit+0x70>)
    293e:	480b      	ldr	r0, [pc, #44]	; (296c <chip_deinit+0x74>)
    2940:	4b0b      	ldr	r3, [pc, #44]	; (2970 <chip_deinit+0x78>)
    2942:	4798      	blx	r3
    2944:	480b      	ldr	r0, [pc, #44]	; (2974 <chip_deinit+0x7c>)
    2946:	4b0c      	ldr	r3, [pc, #48]	; (2978 <chip_deinit+0x80>)
    2948:	4798      	blx	r3
    294a:	200d      	movs	r0, #13
    294c:	4b0b      	ldr	r3, [pc, #44]	; (297c <chip_deinit+0x84>)
    294e:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    2950:	0020      	movs	r0, r4
    2952:	b002      	add	sp, #8
    2954:	bd10      	pop	{r4, pc}
    2956:	46c0      	nop			; (mov r8, r8)
    2958:	000029b5 	.word	0x000029b5
    295c:	fffffbff 	.word	0xfffffbff
    2960:	000029c1 	.word	0x000029c1
    2964:	0000020b 	.word	0x0000020b
    2968:	0000b3e4 	.word	0x0000b3e4
    296c:	0000ae98 	.word	0x0000ae98
    2970:	00009999 	.word	0x00009999
    2974:	0000b3f0 	.word	0x0000b3f0
    2978:	00009ab5 	.word	0x00009ab5
    297c:	000099cd 	.word	0x000099cd
    2980:	00000205 	.word	0x00000205

00002984 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    2984:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    2986:	4b01      	ldr	r3, [pc, #4]	; (298c <nm_bus_iface_init+0x8>)
    2988:	4798      	blx	r3
	return ret;
}
    298a:	bd10      	pop	{r4, pc}
    298c:	0000129d 	.word	0x0000129d

00002990 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    2990:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    2992:	4b01      	ldr	r3, [pc, #4]	; (2998 <nm_bus_iface_deinit+0x8>)
    2994:	4798      	blx	r3

	return ret;
}
    2996:	bd10      	pop	{r4, pc}
    2998:	000014ed 	.word	0x000014ed

0000299c <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    299c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    299e:	4b01      	ldr	r3, [pc, #4]	; (29a4 <nm_bus_reset+0x8>)
    29a0:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    29a2:	bd10      	pop	{r4, pc}
    29a4:	0000334d 	.word	0x0000334d

000029a8 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    29a8:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    29aa:	4b01      	ldr	r3, [pc, #4]	; (29b0 <nm_read_reg+0x8>)
    29ac:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    29ae:	bd10      	pop	{r4, pc}
    29b0:	00003385 	.word	0x00003385

000029b4 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    29b4:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    29b6:	4b01      	ldr	r3, [pc, #4]	; (29bc <nm_read_reg_with_ret+0x8>)
    29b8:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    29ba:	bd10      	pop	{r4, pc}
    29bc:	00003399 	.word	0x00003399

000029c0 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    29c0:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    29c2:	4b01      	ldr	r3, [pc, #4]	; (29c8 <nm_write_reg+0x8>)
    29c4:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    29c6:	bd10      	pop	{r4, pc}
    29c8:	000033b1 	.word	0x000033b1

000029cc <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    29cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    29ce:	46d6      	mov	lr, sl
    29d0:	464f      	mov	r7, r9
    29d2:	4646      	mov	r6, r8
    29d4:	b5c0      	push	{r6, r7, lr}
    29d6:	b082      	sub	sp, #8
    29d8:	4680      	mov	r8, r0
    29da:	4689      	mov	r9, r1
    29dc:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    29de:	4b13      	ldr	r3, [pc, #76]	; (2a2c <nm_read_block+0x60>)
    29e0:	881f      	ldrh	r7, [r3, #0]
    29e2:	3f08      	subs	r7, #8
    29e4:	b2bb      	uxth	r3, r7
    29e6:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    29e8:	001e      	movs	r6, r3
    29ea:	0004      	movs	r4, r0
    29ec:	429a      	cmp	r2, r3
    29ee:	d91a      	bls.n	2a26 <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    29f0:	4b0f      	ldr	r3, [pc, #60]	; (2a30 <nm_read_block+0x64>)
    29f2:	469a      	mov	sl, r3
    29f4:	1a37      	subs	r7, r6, r0
    29f6:	4643      	mov	r3, r8
    29f8:	1ae1      	subs	r1, r4, r3
    29fa:	4449      	add	r1, r9
    29fc:	9a01      	ldr	r2, [sp, #4]
    29fe:	0020      	movs	r0, r4
    2a00:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    2a02:	2800      	cmp	r0, #0
    2a04:	d109      	bne.n	2a1a <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    2a06:	1bad      	subs	r5, r5, r6
    2a08:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    2a0a:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    2a0c:	42b5      	cmp	r5, r6
    2a0e:	d8f2      	bhi.n	29f6 <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2a10:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    2a12:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2a14:	0020      	movs	r0, r4
    2a16:	4b06      	ldr	r3, [pc, #24]	; (2a30 <nm_read_block+0x64>)
    2a18:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    2a1a:	b002      	add	sp, #8
    2a1c:	bc1c      	pop	{r2, r3, r4}
    2a1e:	4690      	mov	r8, r2
    2a20:	4699      	mov	r9, r3
    2a22:	46a2      	mov	sl, r4
    2a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    2a26:	2100      	movs	r1, #0
    2a28:	e7f2      	b.n	2a10 <nm_read_block+0x44>
    2a2a:	46c0      	nop			; (mov r8, r8)
    2a2c:	20000008 	.word	0x20000008
    2a30:	000034f5 	.word	0x000034f5

00002a34 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    2a34:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a36:	46d6      	mov	lr, sl
    2a38:	464f      	mov	r7, r9
    2a3a:	4646      	mov	r6, r8
    2a3c:	b5c0      	push	{r6, r7, lr}
    2a3e:	b082      	sub	sp, #8
    2a40:	4680      	mov	r8, r0
    2a42:	4689      	mov	r9, r1
    2a44:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    2a46:	4b13      	ldr	r3, [pc, #76]	; (2a94 <nm_write_block+0x60>)
    2a48:	881f      	ldrh	r7, [r3, #0]
    2a4a:	3f08      	subs	r7, #8
    2a4c:	b2bb      	uxth	r3, r7
    2a4e:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2a50:	001e      	movs	r6, r3
    2a52:	0004      	movs	r4, r0
    2a54:	429a      	cmp	r2, r3
    2a56:	d91a      	bls.n	2a8e <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2a58:	4b0f      	ldr	r3, [pc, #60]	; (2a98 <nm_write_block+0x64>)
    2a5a:	469a      	mov	sl, r3
    2a5c:	1a37      	subs	r7, r6, r0
    2a5e:	4643      	mov	r3, r8
    2a60:	1ae1      	subs	r1, r4, r3
    2a62:	4449      	add	r1, r9
    2a64:	9a01      	ldr	r2, [sp, #4]
    2a66:	0020      	movs	r0, r4
    2a68:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    2a6a:	2800      	cmp	r0, #0
    2a6c:	d109      	bne.n	2a82 <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    2a6e:	1bad      	subs	r5, r5, r6
    2a70:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    2a72:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    2a74:	42b5      	cmp	r5, r6
    2a76:	d8f2      	bhi.n	2a5e <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2a78:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    2a7a:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2a7c:	0020      	movs	r0, r4
    2a7e:	4b06      	ldr	r3, [pc, #24]	; (2a98 <nm_write_block+0x64>)
    2a80:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    2a82:	b002      	add	sp, #8
    2a84:	bc1c      	pop	{r2, r3, r4}
    2a86:	4690      	mov	r8, r2
    2a88:	4699      	mov	r9, r3
    2a8a:	46a2      	mov	sl, r4
    2a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    2a8e:	2100      	movs	r1, #0
    2a90:	e7f2      	b.n	2a78 <nm_write_block+0x44>
    2a92:	46c0      	nop			; (mov r8, r8)
    2a94:	20000008 	.word	0x20000008
    2a98:	00003651 	.word	0x00003651

00002a9c <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    2a9c:	b570      	push	{r4, r5, r6, lr}
    2a9e:	b084      	sub	sp, #16
    2aa0:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    2aa2:	2300      	movs	r3, #0
    2aa4:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    2aa6:	2208      	movs	r2, #8
    2aa8:	2100      	movs	r1, #0
    2aaa:	a801      	add	r0, sp, #4
    2aac:	4b2d      	ldr	r3, [pc, #180]	; (2b64 <nm_get_firmware_full_info+0xc8>)
    2aae:	4798      	blx	r3
	if (pstrRev != NULL)
    2ab0:	2c00      	cmp	r4, #0
    2ab2:	d044      	beq.n	2b3e <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    2ab4:	2228      	movs	r2, #40	; 0x28
    2ab6:	2100      	movs	r1, #0
    2ab8:	0020      	movs	r0, r4
    2aba:	4b2b      	ldr	r3, [pc, #172]	; (2b68 <nm_get_firmware_full_info+0xcc>)
    2abc:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    2abe:	a903      	add	r1, sp, #12
    2ac0:	482a      	ldr	r0, [pc, #168]	; (2b6c <nm_get_firmware_full_info+0xd0>)
    2ac2:	4b2b      	ldr	r3, [pc, #172]	; (2b70 <nm_get_firmware_full_info+0xd4>)
    2ac4:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    2ac6:	2800      	cmp	r0, #0
    2ac8:	d13a      	bne.n	2b40 <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    2aca:	9b03      	ldr	r3, [sp, #12]
    2acc:	2b00      	cmp	r3, #0
    2ace:	d039      	beq.n	2b44 <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    2ad0:	20c0      	movs	r0, #192	; 0xc0
    2ad2:	0280      	lsls	r0, r0, #10
    2ad4:	4318      	orrs	r0, r3
    2ad6:	2208      	movs	r2, #8
    2ad8:	a901      	add	r1, sp, #4
    2ada:	4b26      	ldr	r3, [pc, #152]	; (2b74 <nm_get_firmware_full_info+0xd8>)
    2adc:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    2ade:	2800      	cmp	r0, #0
    2ae0:	d12e      	bne.n	2b40 <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    2ae2:	9b02      	ldr	r3, [sp, #8]
    2ae4:	0418      	lsls	r0, r3, #16
    2ae6:	0c00      	lsrs	r0, r0, #16
    2ae8:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    2aea:	d02e      	beq.n	2b4a <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    2aec:	23c0      	movs	r3, #192	; 0xc0
    2aee:	029b      	lsls	r3, r3, #10
    2af0:	4318      	orrs	r0, r3
    2af2:	2228      	movs	r2, #40	; 0x28
    2af4:	0021      	movs	r1, r4
    2af6:	4b1f      	ldr	r3, [pc, #124]	; (2b74 <nm_get_firmware_full_info+0xd8>)
    2af8:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    2afa:	2800      	cmp	r0, #0
    2afc:	d120      	bne.n	2b40 <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    2afe:	7921      	ldrb	r1, [r4, #4]
    2b00:	0209      	lsls	r1, r1, #8
    2b02:	79a2      	ldrb	r2, [r4, #6]
    2b04:	230f      	movs	r3, #15
    2b06:	401a      	ands	r2, r3
    2b08:	430a      	orrs	r2, r1
    2b0a:	7961      	ldrb	r1, [r4, #5]
    2b0c:	0109      	lsls	r1, r1, #4
    2b0e:	25ff      	movs	r5, #255	; 0xff
    2b10:	4029      	ands	r1, r5
    2b12:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    2b14:	79e1      	ldrb	r1, [r4, #7]
    2b16:	0209      	lsls	r1, r1, #8
    2b18:	7a66      	ldrb	r6, [r4, #9]
    2b1a:	4033      	ands	r3, r6
    2b1c:	430b      	orrs	r3, r1
    2b1e:	7a21      	ldrb	r1, [r4, #8]
    2b20:	0109      	lsls	r1, r1, #4
    2b22:	400d      	ands	r5, r1
    2b24:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    2b26:	2a00      	cmp	r2, #0
    2b28:	d012      	beq.n	2b50 <nm_get_firmware_full_info+0xb4>
    2b2a:	2b00      	cmp	r3, #0
    2b2c:	d013      	beq.n	2b56 <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    2b2e:	4912      	ldr	r1, [pc, #72]	; (2b78 <nm_get_firmware_full_info+0xdc>)
    2b30:	428b      	cmp	r3, r1
    2b32:	d813      	bhi.n	2b5c <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    2b34:	4b11      	ldr	r3, [pc, #68]	; (2b7c <nm_get_firmware_full_info+0xe0>)
    2b36:	429a      	cmp	r2, r3
    2b38:	d802      	bhi.n	2b40 <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    2b3a:	380d      	subs	r0, #13
    2b3c:	e000      	b.n	2b40 <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    2b3e:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    2b40:	b004      	add	sp, #16
    2b42:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    2b44:	200c      	movs	r0, #12
    2b46:	4240      	negs	r0, r0
    2b48:	e7fa      	b.n	2b40 <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    2b4a:	200c      	movs	r0, #12
    2b4c:	4240      	negs	r0, r0
    2b4e:	e7f7      	b.n	2b40 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    2b50:	200c      	movs	r0, #12
    2b52:	4240      	negs	r0, r0
    2b54:	e7f4      	b.n	2b40 <nm_get_firmware_full_info+0xa4>
    2b56:	200c      	movs	r0, #12
    2b58:	4240      	negs	r0, r0
    2b5a:	e7f1      	b.n	2b40 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    2b5c:	200d      	movs	r0, #13
    2b5e:	4240      	negs	r0, r0
    2b60:	e7ee      	b.n	2b40 <nm_get_firmware_full_info+0xa4>
    2b62:	46c0      	nop			; (mov r8, r8)
    2b64:	00009837 	.word	0x00009837
    2b68:	0000156d 	.word	0x0000156d
    2b6c:	000c0008 	.word	0x000c0008
    2b70:	000029b5 	.word	0x000029b5
    2b74:	000029cd 	.word	0x000029cd
    2b78:	00001352 	.word	0x00001352
    2b7c:	00001351 	.word	0x00001351

00002b80 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    2b80:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    2b82:	2800      	cmp	r0, #0
    2b84:	d037      	beq.n	2bf6 <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
    2b86:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    2b88:	1e6b      	subs	r3, r5, #1
    2b8a:	2b03      	cmp	r3, #3
    2b8c:	d900      	bls.n	2b90 <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    2b8e:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    2b90:	2000      	movs	r0, #0
    2b92:	4b20      	ldr	r3, [pc, #128]	; (2c14 <nm_drv_init+0x94>)
    2b94:	4798      	blx	r3
    2b96:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2b98:	d12f      	bne.n	2bfa <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    2b9a:	481f      	ldr	r0, [pc, #124]	; (2c18 <nm_drv_init+0x98>)
    2b9c:	4c1f      	ldr	r4, [pc, #124]	; (2c1c <nm_drv_init+0x9c>)
    2b9e:	47a0      	blx	r4
    2ba0:	4b1f      	ldr	r3, [pc, #124]	; (2c20 <nm_drv_init+0xa0>)
    2ba2:	4798      	blx	r3
    2ba4:	0001      	movs	r1, r0
    2ba6:	481f      	ldr	r0, [pc, #124]	; (2c24 <nm_drv_init+0xa4>)
    2ba8:	47a0      	blx	r4
    2baa:	200d      	movs	r0, #13
    2bac:	4b1e      	ldr	r3, [pc, #120]	; (2c28 <nm_drv_init+0xa8>)
    2bae:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    2bb0:	4b1e      	ldr	r3, [pc, #120]	; (2c2c <nm_drv_init+0xac>)
    2bb2:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    2bb4:	0028      	movs	r0, r5
    2bb6:	4b1e      	ldr	r3, [pc, #120]	; (2c30 <nm_drv_init+0xb0>)
    2bb8:	4798      	blx	r3
    2bba:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2bbc:	d117      	bne.n	2bee <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    2bbe:	0028      	movs	r0, r5
    2bc0:	4b1c      	ldr	r3, [pc, #112]	; (2c34 <nm_drv_init+0xb4>)
    2bc2:	4798      	blx	r3
    2bc4:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2bc6:	d112      	bne.n	2bee <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    2bc8:	3d02      	subs	r5, #2
    2bca:	2d01      	cmp	r5, #1
    2bcc:	d911      	bls.n	2bf2 <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    2bce:	4b1a      	ldr	r3, [pc, #104]	; (2c38 <nm_drv_init+0xb8>)
    2bd0:	4798      	blx	r3
    2bd2:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2bd4:	d00d      	beq.n	2bf2 <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
    2bd6:	2256      	movs	r2, #86	; 0x56
    2bd8:	32ff      	adds	r2, #255	; 0xff
    2bda:	4918      	ldr	r1, [pc, #96]	; (2c3c <nm_drv_init+0xbc>)
    2bdc:	4818      	ldr	r0, [pc, #96]	; (2c40 <nm_drv_init+0xc0>)
    2bde:	4b0f      	ldr	r3, [pc, #60]	; (2c1c <nm_drv_init+0x9c>)
    2be0:	4798      	blx	r3
    2be2:	4818      	ldr	r0, [pc, #96]	; (2c44 <nm_drv_init+0xc4>)
    2be4:	4b18      	ldr	r3, [pc, #96]	; (2c48 <nm_drv_init+0xc8>)
    2be6:	4798      	blx	r3
    2be8:	200d      	movs	r0, #13
    2bea:	4b0f      	ldr	r3, [pc, #60]	; (2c28 <nm_drv_init+0xa8>)
    2bec:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    2bee:	4b17      	ldr	r3, [pc, #92]	; (2c4c <nm_drv_init+0xcc>)
    2bf0:	4798      	blx	r3
ERR1:
	return ret;
}
    2bf2:	0020      	movs	r0, r4
    2bf4:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    2bf6:	2501      	movs	r5, #1
    2bf8:	e7ca      	b.n	2b90 <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    2bfa:	2228      	movs	r2, #40	; 0x28
    2bfc:	32ff      	adds	r2, #255	; 0xff
    2bfe:	490f      	ldr	r1, [pc, #60]	; (2c3c <nm_drv_init+0xbc>)
    2c00:	480f      	ldr	r0, [pc, #60]	; (2c40 <nm_drv_init+0xc0>)
    2c02:	4b06      	ldr	r3, [pc, #24]	; (2c1c <nm_drv_init+0x9c>)
    2c04:	4798      	blx	r3
    2c06:	4812      	ldr	r0, [pc, #72]	; (2c50 <nm_drv_init+0xd0>)
    2c08:	4b0f      	ldr	r3, [pc, #60]	; (2c48 <nm_drv_init+0xc8>)
    2c0a:	4798      	blx	r3
    2c0c:	200d      	movs	r0, #13
    2c0e:	4b06      	ldr	r3, [pc, #24]	; (2c28 <nm_drv_init+0xa8>)
    2c10:	4798      	blx	r3
		goto ERR1;
    2c12:	e7ee      	b.n	2bf2 <nm_drv_init+0x72>
    2c14:	00002985 	.word	0x00002985
    2c18:	0000b1c8 	.word	0x0000b1c8
    2c1c:	00009999 	.word	0x00009999
    2c20:	00002565 	.word	0x00002565
    2c24:	0000b50c 	.word	0x0000b50c
    2c28:	000099cd 	.word	0x000099cd
    2c2c:	000033c9 	.word	0x000033c9
    2c30:	00002779 	.word	0x00002779
    2c34:	00002881 	.word	0x00002881
    2c38:	00002509 	.word	0x00002509
    2c3c:	0000b454 	.word	0x0000b454
    2c40:	0000ae98 	.word	0x0000ae98
    2c44:	0000b4d0 	.word	0x0000b4d0
    2c48:	00009ab5 	.word	0x00009ab5
    2c4c:	00002991 	.word	0x00002991
    2c50:	0000b4f0 	.word	0x0000b4f0

00002c54 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    2c54:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    2c56:	4b1c      	ldr	r3, [pc, #112]	; (2cc8 <nm_drv_deinit+0x74>)
    2c58:	4798      	blx	r3
    2c5a:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2c5c:	d10b      	bne.n	2c76 <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    2c5e:	2000      	movs	r0, #0
    2c60:	4b1a      	ldr	r3, [pc, #104]	; (2ccc <nm_drv_deinit+0x78>)
    2c62:	4798      	blx	r3
    2c64:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2c66:	d114      	bne.n	2c92 <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    2c68:	4b19      	ldr	r3, [pc, #100]	; (2cd0 <nm_drv_deinit+0x7c>)
    2c6a:	4798      	blx	r3
    2c6c:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2c6e:	d11d      	bne.n	2cac <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    2c70:	4b18      	ldr	r3, [pc, #96]	; (2cd4 <nm_drv_deinit+0x80>)
    2c72:	4798      	blx	r3
    2c74:	e00b      	b.n	2c8e <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    2c76:	22b6      	movs	r2, #182	; 0xb6
    2c78:	0052      	lsls	r2, r2, #1
    2c7a:	4917      	ldr	r1, [pc, #92]	; (2cd8 <nm_drv_deinit+0x84>)
    2c7c:	4817      	ldr	r0, [pc, #92]	; (2cdc <nm_drv_deinit+0x88>)
    2c7e:	4b18      	ldr	r3, [pc, #96]	; (2ce0 <nm_drv_deinit+0x8c>)
    2c80:	4798      	blx	r3
    2c82:	4818      	ldr	r0, [pc, #96]	; (2ce4 <nm_drv_deinit+0x90>)
    2c84:	4b18      	ldr	r3, [pc, #96]	; (2ce8 <nm_drv_deinit+0x94>)
    2c86:	4798      	blx	r3
    2c88:	200d      	movs	r0, #13
    2c8a:	4b18      	ldr	r3, [pc, #96]	; (2cec <nm_drv_deinit+0x98>)
    2c8c:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    2c8e:	0020      	movs	r0, r4
    2c90:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    2c92:	2274      	movs	r2, #116	; 0x74
    2c94:	32ff      	adds	r2, #255	; 0xff
    2c96:	4910      	ldr	r1, [pc, #64]	; (2cd8 <nm_drv_deinit+0x84>)
    2c98:	4810      	ldr	r0, [pc, #64]	; (2cdc <nm_drv_deinit+0x88>)
    2c9a:	4b11      	ldr	r3, [pc, #68]	; (2ce0 <nm_drv_deinit+0x8c>)
    2c9c:	4798      	blx	r3
    2c9e:	4814      	ldr	r0, [pc, #80]	; (2cf0 <nm_drv_deinit+0x9c>)
    2ca0:	4b11      	ldr	r3, [pc, #68]	; (2ce8 <nm_drv_deinit+0x94>)
    2ca2:	4798      	blx	r3
    2ca4:	200d      	movs	r0, #13
    2ca6:	4b11      	ldr	r3, [pc, #68]	; (2cec <nm_drv_deinit+0x98>)
    2ca8:	4798      	blx	r3
		goto ERR1;
    2caa:	e7f0      	b.n	2c8e <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    2cac:	227a      	movs	r2, #122	; 0x7a
    2cae:	32ff      	adds	r2, #255	; 0xff
    2cb0:	4909      	ldr	r1, [pc, #36]	; (2cd8 <nm_drv_deinit+0x84>)
    2cb2:	480a      	ldr	r0, [pc, #40]	; (2cdc <nm_drv_deinit+0x88>)
    2cb4:	4b0a      	ldr	r3, [pc, #40]	; (2ce0 <nm_drv_deinit+0x8c>)
    2cb6:	4798      	blx	r3
    2cb8:	480e      	ldr	r0, [pc, #56]	; (2cf4 <nm_drv_deinit+0xa0>)
    2cba:	4b0b      	ldr	r3, [pc, #44]	; (2ce8 <nm_drv_deinit+0x94>)
    2cbc:	4798      	blx	r3
    2cbe:	200d      	movs	r0, #13
    2cc0:	4b0a      	ldr	r3, [pc, #40]	; (2cec <nm_drv_deinit+0x98>)
    2cc2:	4798      	blx	r3
		goto ERR1;
    2cc4:	e7e3      	b.n	2c8e <nm_drv_deinit+0x3a>
    2cc6:	46c0      	nop			; (mov r8, r8)
    2cc8:	000028f9 	.word	0x000028f9
    2ccc:	000041e9 	.word	0x000041e9
    2cd0:	00002991 	.word	0x00002991
    2cd4:	00003375 	.word	0x00003375
    2cd8:	0000b460 	.word	0x0000b460
    2cdc:	0000ae98 	.word	0x0000ae98
    2ce0:	00009999 	.word	0x00009999
    2ce4:	0000b470 	.word	0x0000b470
    2ce8:	00009ab5 	.word	0x00009ab5
    2cec:	000099cd 	.word	0x000099cd
    2cf0:	0000b490 	.word	0x0000b490
    2cf4:	0000b4b4 	.word	0x0000b4b4

00002cf8 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    2cf8:	b500      	push	{lr}
    2cfa:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    2cfc:	ab01      	add	r3, sp, #4
    2cfe:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    2d00:	2200      	movs	r2, #0
    2d02:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    2d04:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    2d06:	0019      	movs	r1, r3
    2d08:	2003      	movs	r0, #3
    2d0a:	4b02      	ldr	r3, [pc, #8]	; (2d14 <nmi_spi_write+0x1c>)
    2d0c:	4798      	blx	r3
}
    2d0e:	b005      	add	sp, #20
    2d10:	bd00      	pop	{pc}
    2d12:	46c0      	nop			; (mov r8, r8)
    2d14:	000013a1 	.word	0x000013a1

00002d18 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    2d18:	b570      	push	{r4, r5, r6, lr}
    2d1a:	b084      	sub	sp, #16
    2d1c:	ac08      	add	r4, sp, #32
    2d1e:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    2d20:	ac01      	add	r4, sp, #4
    2d22:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    2d24:	303f      	adds	r0, #63	; 0x3f
    2d26:	b2c4      	uxtb	r4, r0
    2d28:	2c0e      	cmp	r4, #14
    2d2a:	d900      	bls.n	2d2e <spi_cmd+0x16>
    2d2c:	e084      	b.n	2e38 <spi_cmd+0x120>
    2d2e:	00a0      	lsls	r0, r4, #2
    2d30:	4c4f      	ldr	r4, [pc, #316]	; (2e70 <spi_cmd+0x158>)
    2d32:	5820      	ldr	r0, [r4, r0]
    2d34:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    2d36:	ab01      	add	r3, sp, #4
    2d38:	0c0a      	lsrs	r2, r1, #16
    2d3a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    2d3c:	0a0a      	lsrs	r2, r1, #8
    2d3e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    2d40:	70d9      	strb	r1, [r3, #3]
		len = 5;
    2d42:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    2d44:	4b4b      	ldr	r3, [pc, #300]	; (2e74 <spi_cmd+0x15c>)
    2d46:	781b      	ldrb	r3, [r3, #0]
    2d48:	2b00      	cmp	r3, #0
    2d4a:	d077      	beq.n	2e3c <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    2d4c:	3901      	subs	r1, #1
    2d4e:	b2c9      	uxtb	r1, r1
    2d50:	e083      	b.n	2e5a <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
    2d52:	0a0b      	lsrs	r3, r1, #8
    2d54:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    2d56:	2d00      	cmp	r5, #0
    2d58:	d107      	bne.n	2d6a <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    2d5a:	aa01      	add	r2, sp, #4
    2d5c:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    2d5e:	ab01      	add	r3, sp, #4
    2d60:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    2d62:	2200      	movs	r2, #0
    2d64:	70da      	strb	r2, [r3, #3]
		len = 5;
    2d66:	2105      	movs	r1, #5
		break;
    2d68:	e7ec      	b.n	2d44 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    2d6a:	2280      	movs	r2, #128	; 0x80
    2d6c:	4252      	negs	r2, r2
    2d6e:	4313      	orrs	r3, r2
    2d70:	aa01      	add	r2, sp, #4
    2d72:	7053      	strb	r3, [r2, #1]
    2d74:	e7f3      	b.n	2d5e <spi_cmd+0x46>
		bc[1] = 0x00;
    2d76:	ab01      	add	r3, sp, #4
    2d78:	2200      	movs	r2, #0
    2d7a:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    2d7c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    2d7e:	70da      	strb	r2, [r3, #3]
		len = 5;
    2d80:	2105      	movs	r1, #5
		break;
    2d82:	e7df      	b.n	2d44 <spi_cmd+0x2c>
		bc[1] = 0x00;
    2d84:	ab01      	add	r3, sp, #4
    2d86:	2200      	movs	r2, #0
    2d88:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    2d8a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    2d8c:	70da      	strb	r2, [r3, #3]
		len = 5;
    2d8e:	2105      	movs	r1, #5
		break;
    2d90:	e7d8      	b.n	2d44 <spi_cmd+0x2c>
		bc[1] = 0xff;
    2d92:	ab01      	add	r3, sp, #4
    2d94:	22ff      	movs	r2, #255	; 0xff
    2d96:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    2d98:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    2d9a:	70da      	strb	r2, [r3, #3]
		len = 5;
    2d9c:	2105      	movs	r1, #5
		break;
    2d9e:	e7d1      	b.n	2d44 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    2da0:	aa01      	add	r2, sp, #4
    2da2:	0c08      	lsrs	r0, r1, #16
    2da4:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    2da6:	0a08      	lsrs	r0, r1, #8
    2da8:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    2daa:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    2dac:	0a19      	lsrs	r1, r3, #8
    2dae:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    2db0:	7153      	strb	r3, [r2, #5]
		len = 7;
    2db2:	2107      	movs	r1, #7
		break;
    2db4:	e7c6      	b.n	2d44 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    2db6:	aa01      	add	r2, sp, #4
    2db8:	0c08      	lsrs	r0, r1, #16
    2dba:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    2dbc:	0a08      	lsrs	r0, r1, #8
    2dbe:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    2dc0:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    2dc2:	0c19      	lsrs	r1, r3, #16
    2dc4:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    2dc6:	0a19      	lsrs	r1, r3, #8
    2dc8:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    2dca:	7193      	strb	r3, [r2, #6]
		len = 8;
    2dcc:	2108      	movs	r1, #8
		break;
    2dce:	e7b9      	b.n	2d44 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    2dd0:	0a0b      	lsrs	r3, r1, #8
    2dd2:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    2dd4:	2d00      	cmp	r5, #0
    2dd6:	d10c      	bne.n	2df2 <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    2dd8:	a801      	add	r0, sp, #4
    2dda:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    2ddc:	ab01      	add	r3, sp, #4
    2dde:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    2de0:	0e11      	lsrs	r1, r2, #24
    2de2:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    2de4:	0c11      	lsrs	r1, r2, #16
    2de6:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    2de8:	0a11      	lsrs	r1, r2, #8
    2dea:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    2dec:	719a      	strb	r2, [r3, #6]
		len = 8;
    2dee:	2108      	movs	r1, #8
		break;
    2df0:	e7a8      	b.n	2d44 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    2df2:	2080      	movs	r0, #128	; 0x80
    2df4:	4240      	negs	r0, r0
    2df6:	4303      	orrs	r3, r0
    2df8:	a801      	add	r0, sp, #4
    2dfa:	7043      	strb	r3, [r0, #1]
    2dfc:	e7ee      	b.n	2ddc <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    2dfe:	ab01      	add	r3, sp, #4
    2e00:	0c08      	lsrs	r0, r1, #16
    2e02:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    2e04:	0a08      	lsrs	r0, r1, #8
    2e06:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    2e08:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    2e0a:	0e11      	lsrs	r1, r2, #24
    2e0c:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    2e0e:	0c11      	lsrs	r1, r2, #16
    2e10:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    2e12:	0a11      	lsrs	r1, r2, #8
    2e14:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    2e16:	71da      	strb	r2, [r3, #7]
		len = 9;
    2e18:	2109      	movs	r1, #9
		break;
    2e1a:	e793      	b.n	2d44 <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    2e1c:	2228      	movs	r2, #40	; 0x28
    2e1e:	32ff      	adds	r2, #255	; 0xff
    2e20:	4915      	ldr	r1, [pc, #84]	; (2e78 <spi_cmd+0x160>)
    2e22:	4816      	ldr	r0, [pc, #88]	; (2e7c <spi_cmd+0x164>)
    2e24:	4b16      	ldr	r3, [pc, #88]	; (2e80 <spi_cmd+0x168>)
    2e26:	4798      	blx	r3
    2e28:	4816      	ldr	r0, [pc, #88]	; (2e84 <spi_cmd+0x16c>)
    2e2a:	4b17      	ldr	r3, [pc, #92]	; (2e88 <spi_cmd+0x170>)
    2e2c:	4798      	blx	r3
    2e2e:	200d      	movs	r0, #13
    2e30:	4b16      	ldr	r3, [pc, #88]	; (2e8c <spi_cmd+0x174>)
    2e32:	4798      	blx	r3
			result = N_FAIL;
    2e34:	2300      	movs	r3, #0
    2e36:	e017      	b.n	2e68 <spi_cmd+0x150>
	switch (cmd) {
    2e38:	2300      	movs	r3, #0
    2e3a:	e015      	b.n	2e68 <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    2e3c:	1e4e      	subs	r6, r1, #1
    2e3e:	aa01      	add	r2, sp, #4
    2e40:	1995      	adds	r5, r2, r6
    2e42:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    2e44:	4c12      	ldr	r4, [pc, #72]	; (2e90 <spi_cmd+0x178>)
    2e46:	005b      	lsls	r3, r3, #1
    2e48:	7810      	ldrb	r0, [r2, #0]
    2e4a:	4043      	eors	r3, r0
    2e4c:	5ce3      	ldrb	r3, [r4, r3]
    2e4e:	3201      	adds	r2, #1
	while (len--)
    2e50:	42aa      	cmp	r2, r5
    2e52:	d1f8      	bne.n	2e46 <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    2e54:	005b      	lsls	r3, r3, #1
    2e56:	aa01      	add	r2, sp, #4
    2e58:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    2e5a:	b289      	uxth	r1, r1
    2e5c:	a801      	add	r0, sp, #4
    2e5e:	4b0d      	ldr	r3, [pc, #52]	; (2e94 <spi_cmd+0x17c>)
    2e60:	4798      	blx	r3
    2e62:	2301      	movs	r3, #1
    2e64:	2800      	cmp	r0, #0
    2e66:	d1d9      	bne.n	2e1c <spi_cmd+0x104>
		}
	}

	return result;
}
    2e68:	0018      	movs	r0, r3
    2e6a:	b004      	add	sp, #16
    2e6c:	bd70      	pop	{r4, r5, r6, pc}
    2e6e:	46c0      	nop			; (mov r8, r8)
    2e70:	0000b51c 	.word	0x0000b51c
    2e74:	20000118 	.word	0x20000118
    2e78:	0000b55c 	.word	0x0000b55c
    2e7c:	0000ae98 	.word	0x0000ae98
    2e80:	00009999 	.word	0x00009999
    2e84:	0000b9ec 	.word	0x0000b9ec
    2e88:	00009ab5 	.word	0x00009ab5
    2e8c:	000099cd 	.word	0x000099cd
    2e90:	0000b5e8 	.word	0x0000b5e8
    2e94:	00002cf9 	.word	0x00002cf9

00002e98 <nmi_spi_read>:
{
    2e98:	b500      	push	{lr}
    2e9a:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    2e9c:	ab01      	add	r3, sp, #4
    2e9e:	2200      	movs	r2, #0
    2ea0:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    2ea2:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    2ea4:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    2ea6:	0019      	movs	r1, r3
    2ea8:	2003      	movs	r0, #3
    2eaa:	4b02      	ldr	r3, [pc, #8]	; (2eb4 <nmi_spi_read+0x1c>)
    2eac:	4798      	blx	r3
}
    2eae:	b005      	add	sp, #20
    2eb0:	bd00      	pop	{pc}
    2eb2:	46c0      	nop			; (mov r8, r8)
    2eb4:	000013a1 	.word	0x000013a1

00002eb8 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    2eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2eba:	46c6      	mov	lr, r8
    2ebc:	b500      	push	{lr}
    2ebe:	b082      	sub	sp, #8
    2ec0:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    2ec2:	28cf      	cmp	r0, #207	; 0xcf
    2ec4:	d02b      	beq.n	2f1e <spi_cmd_rsp+0x66>
    2ec6:	0003      	movs	r3, r0
    2ec8:	333b      	adds	r3, #59	; 0x3b
    2eca:	b2db      	uxtb	r3, r3
    2ecc:	2b01      	cmp	r3, #1
    2ece:	d926      	bls.n	2f1e <spi_cmd_rsp+0x66>
{
    2ed0:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2ed2:	466b      	mov	r3, sp
    2ed4:	1dde      	adds	r6, r3, #7
    2ed6:	4b26      	ldr	r3, [pc, #152]	; (2f70 <spi_cmd_rsp+0xb8>)
    2ed8:	4698      	mov	r8, r3
    2eda:	2101      	movs	r1, #1
    2edc:	0030      	movs	r0, r6
    2ede:	47c0      	blx	r8
    2ee0:	1e05      	subs	r5, r0, #0
    2ee2:	d125      	bne.n	2f30 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    2ee4:	7833      	ldrb	r3, [r6, #0]
    2ee6:	42bb      	cmp	r3, r7
    2ee8:	d030      	beq.n	2f4c <spi_cmd_rsp+0x94>
    2eea:	3c01      	subs	r4, #1
    2eec:	b2e4      	uxtb	r4, r4
    2eee:	2c00      	cmp	r4, #0
    2ef0:	d1f3      	bne.n	2eda <spi_cmd_rsp+0x22>
    2ef2:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2ef4:	466b      	mov	r3, sp
    2ef6:	1dde      	adds	r6, r3, #7
    2ef8:	4f1d      	ldr	r7, [pc, #116]	; (2f70 <spi_cmd_rsp+0xb8>)
    2efa:	2101      	movs	r1, #1
    2efc:	0030      	movs	r0, r6
    2efe:	47b8      	blx	r7
    2f00:	2800      	cmp	r0, #0
    2f02:	d125      	bne.n	2f50 <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    2f04:	7833      	ldrb	r3, [r6, #0]
    2f06:	2b00      	cmp	r3, #0
    2f08:	d02f      	beq.n	2f6a <spi_cmd_rsp+0xb2>
    2f0a:	3c01      	subs	r4, #1
    2f0c:	b2e4      	uxtb	r4, r4
    2f0e:	2c00      	cmp	r4, #0
    2f10:	d1f3      	bne.n	2efa <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    2f12:	2501      	movs	r5, #1

_fail_:

	return result;
}
    2f14:	0028      	movs	r0, r5
    2f16:	b002      	add	sp, #8
    2f18:	bc04      	pop	{r2}
    2f1a:	4690      	mov	r8, r2
    2f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2f1e:	2101      	movs	r1, #1
    2f20:	466b      	mov	r3, sp
    2f22:	1dd8      	adds	r0, r3, #7
    2f24:	4b12      	ldr	r3, [pc, #72]	; (2f70 <spi_cmd_rsp+0xb8>)
    2f26:	4798      	blx	r3
			result = N_FAIL;
    2f28:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2f2a:	2800      	cmp	r0, #0
    2f2c:	d0d0      	beq.n	2ed0 <spi_cmd_rsp+0x18>
    2f2e:	e7f1      	b.n	2f14 <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    2f30:	22b1      	movs	r2, #177	; 0xb1
    2f32:	0052      	lsls	r2, r2, #1
    2f34:	490f      	ldr	r1, [pc, #60]	; (2f74 <spi_cmd_rsp+0xbc>)
    2f36:	4810      	ldr	r0, [pc, #64]	; (2f78 <spi_cmd_rsp+0xc0>)
    2f38:	4b10      	ldr	r3, [pc, #64]	; (2f7c <spi_cmd_rsp+0xc4>)
    2f3a:	4798      	blx	r3
    2f3c:	4810      	ldr	r0, [pc, #64]	; (2f80 <spi_cmd_rsp+0xc8>)
    2f3e:	4b11      	ldr	r3, [pc, #68]	; (2f84 <spi_cmd_rsp+0xcc>)
    2f40:	4798      	blx	r3
    2f42:	200d      	movs	r0, #13
    2f44:	4b10      	ldr	r3, [pc, #64]	; (2f88 <spi_cmd_rsp+0xd0>)
    2f46:	4798      	blx	r3
			result = N_FAIL;
    2f48:	2500      	movs	r5, #0
			goto _fail_;
    2f4a:	e7e3      	b.n	2f14 <spi_cmd_rsp+0x5c>
    2f4c:	240b      	movs	r4, #11
    2f4e:	e7d1      	b.n	2ef4 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    2f50:	22b8      	movs	r2, #184	; 0xb8
    2f52:	0052      	lsls	r2, r2, #1
    2f54:	4907      	ldr	r1, [pc, #28]	; (2f74 <spi_cmd_rsp+0xbc>)
    2f56:	4808      	ldr	r0, [pc, #32]	; (2f78 <spi_cmd_rsp+0xc0>)
    2f58:	4b08      	ldr	r3, [pc, #32]	; (2f7c <spi_cmd_rsp+0xc4>)
    2f5a:	4798      	blx	r3
    2f5c:	4808      	ldr	r0, [pc, #32]	; (2f80 <spi_cmd_rsp+0xc8>)
    2f5e:	4b09      	ldr	r3, [pc, #36]	; (2f84 <spi_cmd_rsp+0xcc>)
    2f60:	4798      	blx	r3
    2f62:	200d      	movs	r0, #13
    2f64:	4b08      	ldr	r3, [pc, #32]	; (2f88 <spi_cmd_rsp+0xd0>)
    2f66:	4798      	blx	r3
			goto _fail_;
    2f68:	e7d4      	b.n	2f14 <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    2f6a:	2501      	movs	r5, #1
    2f6c:	e7d2      	b.n	2f14 <spi_cmd_rsp+0x5c>
    2f6e:	46c0      	nop			; (mov r8, r8)
    2f70:	00002e99 	.word	0x00002e99
    2f74:	0000b574 	.word	0x0000b574
    2f78:	0000ae98 	.word	0x0000ae98
    2f7c:	00009999 	.word	0x00009999
    2f80:	0000ba18 	.word	0x0000ba18
    2f84:	00009ab5 	.word	0x00009ab5
    2f88:	000099cd 	.word	0x000099cd

00002f8c <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    2f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f8e:	46de      	mov	lr, fp
    2f90:	4657      	mov	r7, sl
    2f92:	464e      	mov	r6, r9
    2f94:	4645      	mov	r5, r8
    2f96:	b5e0      	push	{r5, r6, r7, lr}
    2f98:	b087      	sub	sp, #28
    2f9a:	9001      	str	r0, [sp, #4]
    2f9c:	4689      	mov	r9, r1
    2f9e:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    2fa0:	2300      	movs	r3, #0
    2fa2:	469a      	mov	sl, r3
    2fa4:	2380      	movs	r3, #128	; 0x80
    2fa6:	019b      	lsls	r3, r3, #6
    2fa8:	469b      	mov	fp, r3
    2faa:	466a      	mov	r2, sp
    2fac:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2fae:	4b3b      	ldr	r3, [pc, #236]	; (309c <spi_data_read+0x110>)
    2fb0:	4698      	mov	r8, r3
    2fb2:	e02e      	b.n	3012 <spi_data_read+0x86>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    2fb4:	4a3a      	ldr	r2, [pc, #232]	; (30a0 <spi_data_read+0x114>)
    2fb6:	493b      	ldr	r1, [pc, #236]	; (30a4 <spi_data_read+0x118>)
    2fb8:	483b      	ldr	r0, [pc, #236]	; (30a8 <spi_data_read+0x11c>)
    2fba:	4b3c      	ldr	r3, [pc, #240]	; (30ac <spi_data_read+0x120>)
    2fbc:	4798      	blx	r3
    2fbe:	483c      	ldr	r0, [pc, #240]	; (30b0 <spi_data_read+0x124>)
    2fc0:	4b3c      	ldr	r3, [pc, #240]	; (30b4 <spi_data_read+0x128>)
    2fc2:	4798      	blx	r3
    2fc4:	200d      	movs	r0, #13
    2fc6:	4b3c      	ldr	r3, [pc, #240]	; (30b8 <spi_data_read+0x12c>)
    2fc8:	4798      	blx	r3
    2fca:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    2fcc:	0028      	movs	r0, r5
    2fce:	b007      	add	sp, #28
    2fd0:	bc3c      	pop	{r2, r3, r4, r5}
    2fd2:	4690      	mov	r8, r2
    2fd4:	4699      	mov	r9, r3
    2fd6:	46a2      	mov	sl, r4
    2fd8:	46ab      	mov	fp, r5
    2fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    2fdc:	2c00      	cmp	r4, #0
    2fde:	dd2e      	ble.n	303e <spi_data_read+0xb2>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    2fe0:	9b01      	ldr	r3, [sp, #4]
    2fe2:	4453      	add	r3, sl
    2fe4:	0018      	movs	r0, r3
    2fe6:	0039      	movs	r1, r7
    2fe8:	4b2c      	ldr	r3, [pc, #176]	; (309c <spi_data_read+0x110>)
    2fea:	4798      	blx	r3
    2fec:	1e04      	subs	r4, r0, #0
    2fee:	d133      	bne.n	3058 <spi_data_read+0xcc>
		if(!clockless)
    2ff0:	9b02      	ldr	r3, [sp, #8]
    2ff2:	2b00      	cmp	r3, #0
    2ff4:	d103      	bne.n	2ffe <spi_data_read+0x72>
			if (!gu8Crc_off) {
    2ff6:	4b31      	ldr	r3, [pc, #196]	; (30bc <spi_data_read+0x130>)
    2ff8:	781b      	ldrb	r3, [r3, #0]
    2ffa:	2b00      	cmp	r3, #0
    2ffc:	d039      	beq.n	3072 <spi_data_read+0xe6>
		ix += nbytes;
    2ffe:	4653      	mov	r3, sl
    3000:	18fb      	adds	r3, r7, r3
    3002:	b21b      	sxth	r3, r3
    3004:	469a      	mov	sl, r3
		sz -= nbytes;
    3006:	464b      	mov	r3, r9
    3008:	1bdf      	subs	r7, r3, r7
    300a:	b2bb      	uxth	r3, r7
    300c:	4699      	mov	r9, r3
	} while (sz);
    300e:	2b00      	cmp	r3, #0
    3010:	d042      	beq.n	3098 <spi_data_read+0x10c>
    3012:	464f      	mov	r7, r9
    3014:	45d9      	cmp	r9, fp
    3016:	d901      	bls.n	301c <spi_data_read+0x90>
    3018:	466b      	mov	r3, sp
    301a:	89df      	ldrh	r7, [r3, #14]
    301c:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    301e:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3020:	ab04      	add	r3, sp, #16
    3022:	1cde      	adds	r6, r3, #3
    3024:	2101      	movs	r1, #1
    3026:	0030      	movs	r0, r6
    3028:	47c0      	blx	r8
    302a:	1e05      	subs	r5, r0, #0
    302c:	d1c2      	bne.n	2fb4 <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    302e:	7833      	ldrb	r3, [r6, #0]
    3030:	091b      	lsrs	r3, r3, #4
    3032:	2b0f      	cmp	r3, #15
    3034:	d0d2      	beq.n	2fdc <spi_data_read+0x50>
    3036:	3c01      	subs	r4, #1
    3038:	b224      	sxth	r4, r4
		} while (retry--);
    303a:	1c63      	adds	r3, r4, #1
    303c:	d1f2      	bne.n	3024 <spi_data_read+0x98>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    303e:	4a20      	ldr	r2, [pc, #128]	; (30c0 <spi_data_read+0x134>)
    3040:	4918      	ldr	r1, [pc, #96]	; (30a4 <spi_data_read+0x118>)
    3042:	4819      	ldr	r0, [pc, #100]	; (30a8 <spi_data_read+0x11c>)
    3044:	4c19      	ldr	r4, [pc, #100]	; (30ac <spi_data_read+0x120>)
    3046:	47a0      	blx	r4
    3048:	ab04      	add	r3, sp, #16
    304a:	78d9      	ldrb	r1, [r3, #3]
    304c:	481d      	ldr	r0, [pc, #116]	; (30c4 <spi_data_read+0x138>)
    304e:	47a0      	blx	r4
    3050:	200d      	movs	r0, #13
    3052:	4b19      	ldr	r3, [pc, #100]	; (30b8 <spi_data_read+0x12c>)
    3054:	4798      	blx	r3
			break;
    3056:	e7b9      	b.n	2fcc <spi_data_read+0x40>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    3058:	22c5      	movs	r2, #197	; 0xc5
    305a:	0092      	lsls	r2, r2, #2
    305c:	4911      	ldr	r1, [pc, #68]	; (30a4 <spi_data_read+0x118>)
    305e:	4812      	ldr	r0, [pc, #72]	; (30a8 <spi_data_read+0x11c>)
    3060:	4b12      	ldr	r3, [pc, #72]	; (30ac <spi_data_read+0x120>)
    3062:	4798      	blx	r3
    3064:	4818      	ldr	r0, [pc, #96]	; (30c8 <spi_data_read+0x13c>)
    3066:	4b13      	ldr	r3, [pc, #76]	; (30b4 <spi_data_read+0x128>)
    3068:	4798      	blx	r3
    306a:	200d      	movs	r0, #13
    306c:	4b12      	ldr	r3, [pc, #72]	; (30b8 <spi_data_read+0x12c>)
    306e:	4798      	blx	r3
			break;
    3070:	e7ac      	b.n	2fcc <spi_data_read+0x40>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    3072:	2102      	movs	r1, #2
    3074:	a805      	add	r0, sp, #20
    3076:	4b09      	ldr	r3, [pc, #36]	; (309c <spi_data_read+0x110>)
    3078:	4798      	blx	r3
    307a:	2800      	cmp	r0, #0
    307c:	d0bf      	beq.n	2ffe <spi_data_read+0x72>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    307e:	4a13      	ldr	r2, [pc, #76]	; (30cc <spi_data_read+0x140>)
    3080:	4908      	ldr	r1, [pc, #32]	; (30a4 <spi_data_read+0x118>)
    3082:	4809      	ldr	r0, [pc, #36]	; (30a8 <spi_data_read+0x11c>)
    3084:	4b09      	ldr	r3, [pc, #36]	; (30ac <spi_data_read+0x120>)
    3086:	4798      	blx	r3
    3088:	4811      	ldr	r0, [pc, #68]	; (30d0 <spi_data_read+0x144>)
    308a:	4b0a      	ldr	r3, [pc, #40]	; (30b4 <spi_data_read+0x128>)
    308c:	4798      	blx	r3
    308e:	200d      	movs	r0, #13
    3090:	4b09      	ldr	r3, [pc, #36]	; (30b8 <spi_data_read+0x12c>)
    3092:	4798      	blx	r3
					result = N_FAIL;
    3094:	0025      	movs	r5, r4
					break;
    3096:	e799      	b.n	2fcc <spi_data_read+0x40>
    3098:	2501      	movs	r5, #1
    309a:	e797      	b.n	2fcc <spi_data_read+0x40>
    309c:	00002e99 	.word	0x00002e99
    30a0:	000002ff 	.word	0x000002ff
    30a4:	0000b580 	.word	0x0000b580
    30a8:	0000ae98 	.word	0x0000ae98
    30ac:	00009999 	.word	0x00009999
    30b0:	0000ba4c 	.word	0x0000ba4c
    30b4:	00009ab5 	.word	0x00009ab5
    30b8:	000099cd 	.word	0x000099cd
    30bc:	20000118 	.word	0x20000118
    30c0:	0000030b 	.word	0x0000030b
    30c4:	0000ba80 	.word	0x0000ba80
    30c8:	0000bab0 	.word	0x0000bab0
    30cc:	0000031f 	.word	0x0000031f
    30d0:	0000bae0 	.word	0x0000bae0

000030d4 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    30d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    30d6:	46d6      	mov	lr, sl
    30d8:	464f      	mov	r7, r9
    30da:	4646      	mov	r6, r8
    30dc:	b5c0      	push	{r6, r7, lr}
    30de:	b086      	sub	sp, #24
    30e0:	9003      	str	r0, [sp, #12]
    30e2:	9104      	str	r1, [sp, #16]
    30e4:	2830      	cmp	r0, #48	; 0x30
    30e6:	d80f      	bhi.n	3108 <spi_write_reg+0x34>
    30e8:	4b30      	ldr	r3, [pc, #192]	; (31ac <spi_write_reg+0xd8>)
    30ea:	781f      	ldrb	r7, [r3, #0]
    30ec:	b2fb      	uxtb	r3, r7
    30ee:	9305      	str	r3, [sp, #20]
    30f0:	2300      	movs	r3, #0
    30f2:	2230      	movs	r2, #48	; 0x30
    30f4:	9903      	ldr	r1, [sp, #12]
    30f6:	428a      	cmp	r2, r1
    30f8:	415b      	adcs	r3, r3
    30fa:	b2db      	uxtb	r3, r3
    30fc:	469a      	mov	sl, r3
    30fe:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    3100:	4b2b      	ldr	r3, [pc, #172]	; (31b0 <spi_write_reg+0xdc>)
    3102:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    3104:	46d1      	mov	r9, sl
    3106:	e033      	b.n	3170 <spi_write_reg+0x9c>
    3108:	4b2a      	ldr	r3, [pc, #168]	; (31b4 <spi_write_reg+0xe0>)
    310a:	781f      	ldrb	r7, [r3, #0]
    310c:	e7ee      	b.n	30ec <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    310e:	9805      	ldr	r0, [sp, #20]
    3110:	4b29      	ldr	r3, [pc, #164]	; (31b8 <spi_write_reg+0xe4>)
    3112:	4798      	blx	r3
    3114:	0004      	movs	r4, r0
	if (result != N_OK) {
    3116:	2801      	cmp	r0, #1
    3118:	d041      	beq.n	319e <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    311a:	22e7      	movs	r2, #231	; 0xe7
    311c:	0092      	lsls	r2, r2, #2
    311e:	4927      	ldr	r1, [pc, #156]	; (31bc <spi_write_reg+0xe8>)
    3120:	4827      	ldr	r0, [pc, #156]	; (31c0 <spi_write_reg+0xec>)
    3122:	4e28      	ldr	r6, [pc, #160]	; (31c4 <spi_write_reg+0xf0>)
    3124:	47b0      	blx	r6
    3126:	9903      	ldr	r1, [sp, #12]
    3128:	4827      	ldr	r0, [pc, #156]	; (31c8 <spi_write_reg+0xf4>)
    312a:	47b0      	blx	r6
    312c:	200d      	movs	r0, #13
    312e:	4b27      	ldr	r3, [pc, #156]	; (31cc <spi_write_reg+0xf8>)
    3130:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    3132:	2001      	movs	r0, #1
    3134:	4e26      	ldr	r6, [pc, #152]	; (31d0 <spi_write_reg+0xfc>)
    3136:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3138:	2300      	movs	r3, #0
    313a:	9300      	str	r3, [sp, #0]
    313c:	2200      	movs	r2, #0
    313e:	2100      	movs	r1, #0
    3140:	20cf      	movs	r0, #207	; 0xcf
    3142:	4f1b      	ldr	r7, [pc, #108]	; (31b0 <spi_write_reg+0xdc>)
    3144:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    3146:	20cf      	movs	r0, #207	; 0xcf
    3148:	4b1b      	ldr	r3, [pc, #108]	; (31b8 <spi_write_reg+0xe4>)
    314a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    314c:	4a21      	ldr	r2, [pc, #132]	; (31d4 <spi_write_reg+0x100>)
    314e:	491b      	ldr	r1, [pc, #108]	; (31bc <spi_write_reg+0xe8>)
    3150:	481b      	ldr	r0, [pc, #108]	; (31c0 <spi_write_reg+0xec>)
    3152:	4f1c      	ldr	r7, [pc, #112]	; (31c4 <spi_write_reg+0xf0>)
    3154:	47b8      	blx	r7
    3156:	9b04      	ldr	r3, [sp, #16]
    3158:	9a03      	ldr	r2, [sp, #12]
    315a:	0029      	movs	r1, r5
    315c:	481e      	ldr	r0, [pc, #120]	; (31d8 <spi_write_reg+0x104>)
    315e:	47b8      	blx	r7
    3160:	200d      	movs	r0, #13
    3162:	4b1a      	ldr	r3, [pc, #104]	; (31cc <spi_write_reg+0xf8>)
    3164:	4798      	blx	r3
		nm_bsp_sleep(1);
    3166:	2001      	movs	r0, #1
    3168:	47b0      	blx	r6
    316a:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    316c:	2d00      	cmp	r5, #0
    316e:	d016      	beq.n	319e <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    3170:	464b      	mov	r3, r9
    3172:	9300      	str	r3, [sp, #0]
    3174:	2304      	movs	r3, #4
    3176:	9a04      	ldr	r2, [sp, #16]
    3178:	9f03      	ldr	r7, [sp, #12]
    317a:	0039      	movs	r1, r7
    317c:	9805      	ldr	r0, [sp, #20]
    317e:	47c0      	blx	r8
    3180:	0004      	movs	r4, r0
	if (result != N_OK) {
    3182:	2801      	cmp	r0, #1
    3184:	d0c3      	beq.n	310e <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    3186:	4a15      	ldr	r2, [pc, #84]	; (31dc <spi_write_reg+0x108>)
    3188:	490c      	ldr	r1, [pc, #48]	; (31bc <spi_write_reg+0xe8>)
    318a:	480d      	ldr	r0, [pc, #52]	; (31c0 <spi_write_reg+0xec>)
    318c:	4e0d      	ldr	r6, [pc, #52]	; (31c4 <spi_write_reg+0xf0>)
    318e:	47b0      	blx	r6
    3190:	0039      	movs	r1, r7
    3192:	4813      	ldr	r0, [pc, #76]	; (31e0 <spi_write_reg+0x10c>)
    3194:	47b0      	blx	r6
    3196:	200d      	movs	r0, #13
    3198:	4b0c      	ldr	r3, [pc, #48]	; (31cc <spi_write_reg+0xf8>)
    319a:	4798      	blx	r3
		goto _FAIL_;
    319c:	e7c9      	b.n	3132 <spi_write_reg+0x5e>
	}

	return result;
}
    319e:	0020      	movs	r0, r4
    31a0:	b006      	add	sp, #24
    31a2:	bc1c      	pop	{r2, r3, r4}
    31a4:	4690      	mov	r8, r2
    31a6:	4699      	mov	r9, r3
    31a8:	46a2      	mov	sl, r4
    31aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31ac:	0000b558 	.word	0x0000b558
    31b0:	00002d19 	.word	0x00002d19
    31b4:	0000b559 	.word	0x0000b559
    31b8:	00002eb9 	.word	0x00002eb9
    31bc:	0000b5a0 	.word	0x0000b5a0
    31c0:	0000ae98 	.word	0x0000ae98
    31c4:	00009999 	.word	0x00009999
    31c8:	0000bbd8 	.word	0x0000bbd8
    31cc:	000099cd 	.word	0x000099cd
    31d0:	00001169 	.word	0x00001169
    31d4:	000003af 	.word	0x000003af
    31d8:	0000bc10 	.word	0x0000bc10
    31dc:	00000396 	.word	0x00000396
    31e0:	0000bbac 	.word	0x0000bbac

000031e4 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    31e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    31e6:	46de      	mov	lr, fp
    31e8:	4657      	mov	r7, sl
    31ea:	464e      	mov	r6, r9
    31ec:	4645      	mov	r5, r8
    31ee:	b5e0      	push	{r5, r6, r7, lr}
    31f0:	b087      	sub	sp, #28
    31f2:	9002      	str	r0, [sp, #8]
    31f4:	468b      	mov	fp, r1
    31f6:	28ff      	cmp	r0, #255	; 0xff
    31f8:	d80f      	bhi.n	321a <spi_read_reg+0x36>
    31fa:	4b41      	ldr	r3, [pc, #260]	; (3300 <spi_read_reg+0x11c>)
    31fc:	781f      	ldrb	r7, [r3, #0]
    31fe:	b2fb      	uxtb	r3, r7
    3200:	9303      	str	r3, [sp, #12]
    3202:	2300      	movs	r3, #0
    3204:	22ff      	movs	r2, #255	; 0xff
    3206:	9902      	ldr	r1, [sp, #8]
    3208:	428a      	cmp	r2, r1
    320a:	415b      	adcs	r3, r3
    320c:	b2db      	uxtb	r3, r3
    320e:	469a      	mov	sl, r3
    3210:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    3212:	4b3c      	ldr	r3, [pc, #240]	; (3304 <spi_read_reg+0x120>)
    3214:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    3216:	46d1      	mov	r9, sl
    3218:	e031      	b.n	327e <spi_read_reg+0x9a>
    321a:	4b3b      	ldr	r3, [pc, #236]	; (3308 <spi_read_reg+0x124>)
    321c:	781f      	ldrb	r7, [r3, #0]
    321e:	e7ee      	b.n	31fe <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    3220:	9803      	ldr	r0, [sp, #12]
    3222:	4b3a      	ldr	r3, [pc, #232]	; (330c <spi_read_reg+0x128>)
    3224:	4798      	blx	r3
    3226:	0004      	movs	r4, r0
	if (result != N_OK) {
    3228:	2801      	cmp	r0, #1
    322a:	d03f      	beq.n	32ac <spi_read_reg+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    322c:	4a38      	ldr	r2, [pc, #224]	; (3310 <spi_read_reg+0x12c>)
    322e:	4939      	ldr	r1, [pc, #228]	; (3314 <spi_read_reg+0x130>)
    3230:	4839      	ldr	r0, [pc, #228]	; (3318 <spi_read_reg+0x134>)
    3232:	4e3a      	ldr	r6, [pc, #232]	; (331c <spi_read_reg+0x138>)
    3234:	47b0      	blx	r6
    3236:	9902      	ldr	r1, [sp, #8]
    3238:	4839      	ldr	r0, [pc, #228]	; (3320 <spi_read_reg+0x13c>)
    323a:	47b0      	blx	r6
    323c:	200d      	movs	r0, #13
    323e:	4b39      	ldr	r3, [pc, #228]	; (3324 <spi_read_reg+0x140>)
    3240:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    3242:	2001      	movs	r0, #1
    3244:	4e38      	ldr	r6, [pc, #224]	; (3328 <spi_read_reg+0x144>)
    3246:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3248:	2300      	movs	r3, #0
    324a:	9300      	str	r3, [sp, #0]
    324c:	2200      	movs	r2, #0
    324e:	2100      	movs	r1, #0
    3250:	20cf      	movs	r0, #207	; 0xcf
    3252:	4f2c      	ldr	r7, [pc, #176]	; (3304 <spi_read_reg+0x120>)
    3254:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    3256:	20cf      	movs	r0, #207	; 0xcf
    3258:	4b2c      	ldr	r3, [pc, #176]	; (330c <spi_read_reg+0x128>)
    325a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    325c:	4a33      	ldr	r2, [pc, #204]	; (332c <spi_read_reg+0x148>)
    325e:	492d      	ldr	r1, [pc, #180]	; (3314 <spi_read_reg+0x130>)
    3260:	482d      	ldr	r0, [pc, #180]	; (3318 <spi_read_reg+0x134>)
    3262:	4f2e      	ldr	r7, [pc, #184]	; (331c <spi_read_reg+0x138>)
    3264:	47b8      	blx	r7
    3266:	9a02      	ldr	r2, [sp, #8]
    3268:	0029      	movs	r1, r5
    326a:	4831      	ldr	r0, [pc, #196]	; (3330 <spi_read_reg+0x14c>)
    326c:	47b8      	blx	r7
    326e:	200d      	movs	r0, #13
    3270:	4b2c      	ldr	r3, [pc, #176]	; (3324 <spi_read_reg+0x140>)
    3272:	4798      	blx	r3
		nm_bsp_sleep(1);
    3274:	2001      	movs	r0, #1
    3276:	47b0      	blx	r6
    3278:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    327a:	2d00      	cmp	r5, #0
    327c:	d037      	beq.n	32ee <spi_read_reg+0x10a>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    327e:	464b      	mov	r3, r9
    3280:	9300      	str	r3, [sp, #0]
    3282:	2304      	movs	r3, #4
    3284:	2200      	movs	r2, #0
    3286:	9f02      	ldr	r7, [sp, #8]
    3288:	0039      	movs	r1, r7
    328a:	9803      	ldr	r0, [sp, #12]
    328c:	47c0      	blx	r8
    328e:	0004      	movs	r4, r0
	if (result != N_OK) {
    3290:	2801      	cmp	r0, #1
    3292:	d0c5      	beq.n	3220 <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    3294:	4a27      	ldr	r2, [pc, #156]	; (3334 <spi_read_reg+0x150>)
    3296:	491f      	ldr	r1, [pc, #124]	; (3314 <spi_read_reg+0x130>)
    3298:	481f      	ldr	r0, [pc, #124]	; (3318 <spi_read_reg+0x134>)
    329a:	4e20      	ldr	r6, [pc, #128]	; (331c <spi_read_reg+0x138>)
    329c:	47b0      	blx	r6
    329e:	0039      	movs	r1, r7
    32a0:	4825      	ldr	r0, [pc, #148]	; (3338 <spi_read_reg+0x154>)
    32a2:	47b0      	blx	r6
    32a4:	200d      	movs	r0, #13
    32a6:	4b1f      	ldr	r3, [pc, #124]	; (3324 <spi_read_reg+0x140>)
    32a8:	4798      	blx	r3
		goto _FAIL_;
    32aa:	e7ca      	b.n	3242 <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
    32ac:	464a      	mov	r2, r9
    32ae:	2104      	movs	r1, #4
    32b0:	a805      	add	r0, sp, #20
    32b2:	4b22      	ldr	r3, [pc, #136]	; (333c <spi_read_reg+0x158>)
    32b4:	4798      	blx	r3
    32b6:	0004      	movs	r4, r0
	if (result != N_OK) {
    32b8:	2801      	cmp	r0, #1
    32ba:	d00b      	beq.n	32d4 <spi_read_reg+0xf0>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    32bc:	4a20      	ldr	r2, [pc, #128]	; (3340 <spi_read_reg+0x15c>)
    32be:	4915      	ldr	r1, [pc, #84]	; (3314 <spi_read_reg+0x130>)
    32c0:	4815      	ldr	r0, [pc, #84]	; (3318 <spi_read_reg+0x134>)
    32c2:	4b16      	ldr	r3, [pc, #88]	; (331c <spi_read_reg+0x138>)
    32c4:	4798      	blx	r3
    32c6:	481f      	ldr	r0, [pc, #124]	; (3344 <spi_read_reg+0x160>)
    32c8:	4b1f      	ldr	r3, [pc, #124]	; (3348 <spi_read_reg+0x164>)
    32ca:	4798      	blx	r3
    32cc:	200d      	movs	r0, #13
    32ce:	4b15      	ldr	r3, [pc, #84]	; (3324 <spi_read_reg+0x140>)
    32d0:	4798      	blx	r3
		goto _FAIL_;
    32d2:	e7b6      	b.n	3242 <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
    32d4:	aa05      	add	r2, sp, #20
    32d6:	7853      	ldrb	r3, [r2, #1]
    32d8:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    32da:	7891      	ldrb	r1, [r2, #2]
    32dc:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    32de:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    32e0:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    32e2:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    32e4:	78d2      	ldrb	r2, [r2, #3]
    32e6:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    32e8:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    32ea:	465a      	mov	r2, fp
    32ec:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    32ee:	0020      	movs	r0, r4
    32f0:	b007      	add	sp, #28
    32f2:	bc3c      	pop	{r2, r3, r4, r5}
    32f4:	4690      	mov	r8, r2
    32f6:	4699      	mov	r9, r3
    32f8:	46a2      	mov	sl, r4
    32fa:	46ab      	mov	fp, r5
    32fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32fe:	46c0      	nop			; (mov r8, r8)
    3300:	0000b55a 	.word	0x0000b55a
    3304:	00002d19 	.word	0x00002d19
    3308:	0000b55b 	.word	0x0000b55b
    330c:	00002eb9 	.word	0x00002eb9
    3310:	0000041d 	.word	0x0000041d
    3314:	0000b5c0 	.word	0x0000b5c0
    3318:	0000ae98 	.word	0x0000ae98
    331c:	00009999 	.word	0x00009999
    3320:	0000bb40 	.word	0x0000bb40
    3324:	000099cd 	.word	0x000099cd
    3328:	00001169 	.word	0x00001169
    332c:	0000043c 	.word	0x0000043c
    3330:	0000bb94 	.word	0x0000bb94
    3334:	00000417 	.word	0x00000417
    3338:	0000bb14 	.word	0x0000bb14
    333c:	00002f8d 	.word	0x00002f8d
    3340:	00000424 	.word	0x00000424
    3344:	0000bb74 	.word	0x0000bb74
    3348:	00009ab5 	.word	0x00009ab5

0000334c <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    334c:	b510      	push	{r4, lr}
    334e:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3350:	2300      	movs	r3, #0
    3352:	9300      	str	r3, [sp, #0]
    3354:	2200      	movs	r2, #0
    3356:	2100      	movs	r1, #0
    3358:	20cf      	movs	r0, #207	; 0xcf
    335a:	4c04      	ldr	r4, [pc, #16]	; (336c <nm_spi_reset+0x20>)
    335c:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    335e:	20cf      	movs	r0, #207	; 0xcf
    3360:	4b03      	ldr	r3, [pc, #12]	; (3370 <nm_spi_reset+0x24>)
    3362:	4798      	blx	r3
	return M2M_SUCCESS;
}
    3364:	2000      	movs	r0, #0
    3366:	b002      	add	sp, #8
    3368:	bd10      	pop	{r4, pc}
    336a:	46c0      	nop			; (mov r8, r8)
    336c:	00002d19 	.word	0x00002d19
    3370:	00002eb9 	.word	0x00002eb9

00003374 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    3374:	2200      	movs	r2, #0
    3376:	4b02      	ldr	r3, [pc, #8]	; (3380 <nm_spi_deinit+0xc>)
    3378:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    337a:	2000      	movs	r0, #0
    337c:	4770      	bx	lr
    337e:	46c0      	nop			; (mov r8, r8)
    3380:	20000118 	.word	0x20000118

00003384 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    3384:	b500      	push	{lr}
    3386:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    3388:	a901      	add	r1, sp, #4
    338a:	4b02      	ldr	r3, [pc, #8]	; (3394 <nm_spi_read_reg+0x10>)
    338c:	4798      	blx	r3

	return u32Val;
}
    338e:	9801      	ldr	r0, [sp, #4]
    3390:	b003      	add	sp, #12
    3392:	bd00      	pop	{pc}
    3394:	000031e5 	.word	0x000031e5

00003398 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    3398:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    339a:	4b04      	ldr	r3, [pc, #16]	; (33ac <nm_spi_read_reg_with_ret+0x14>)
    339c:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    339e:	2300      	movs	r3, #0
    33a0:	2801      	cmp	r0, #1
    33a2:	d101      	bne.n	33a8 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    33a4:	0018      	movs	r0, r3
    33a6:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    33a8:	3b06      	subs	r3, #6
    33aa:	e7fb      	b.n	33a4 <nm_spi_read_reg_with_ret+0xc>
    33ac:	000031e5 	.word	0x000031e5

000033b0 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    33b0:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    33b2:	4b04      	ldr	r3, [pc, #16]	; (33c4 <nm_spi_write_reg+0x14>)
    33b4:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    33b6:	2300      	movs	r3, #0
    33b8:	2801      	cmp	r0, #1
    33ba:	d101      	bne.n	33c0 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    33bc:	0018      	movs	r0, r3
    33be:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    33c0:	3b06      	subs	r3, #6
    33c2:	e7fb      	b.n	33bc <nm_spi_write_reg+0xc>
    33c4:	000030d5 	.word	0x000030d5

000033c8 <nm_spi_init>:
{
    33c8:	b510      	push	{r4, lr}
    33ca:	b082      	sub	sp, #8
	uint32 reg = 0;
    33cc:	2300      	movs	r3, #0
    33ce:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    33d0:	4a35      	ldr	r2, [pc, #212]	; (34a8 <nm_spi_init+0xe0>)
    33d2:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    33d4:	4669      	mov	r1, sp
    33d6:	4835      	ldr	r0, [pc, #212]	; (34ac <nm_spi_init+0xe4>)
    33d8:	4b35      	ldr	r3, [pc, #212]	; (34b0 <nm_spi_init+0xe8>)
    33da:	4798      	blx	r3
    33dc:	2800      	cmp	r0, #0
    33de:	d028      	beq.n	3432 <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    33e0:	4b31      	ldr	r3, [pc, #196]	; (34a8 <nm_spi_init+0xe0>)
    33e2:	781b      	ldrb	r3, [r3, #0]
    33e4:	2b00      	cmp	r3, #0
    33e6:	d10d      	bne.n	3404 <nm_spi_init+0x3c>
		reg &= ~0x70;
    33e8:	337c      	adds	r3, #124	; 0x7c
    33ea:	9900      	ldr	r1, [sp, #0]
    33ec:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    33ee:	3b2c      	subs	r3, #44	; 0x2c
    33f0:	4319      	orrs	r1, r3
    33f2:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    33f4:	482d      	ldr	r0, [pc, #180]	; (34ac <nm_spi_init+0xe4>)
    33f6:	4b2f      	ldr	r3, [pc, #188]	; (34b4 <nm_spi_init+0xec>)
    33f8:	4798      	blx	r3
    33fa:	1e04      	subs	r4, r0, #0
    33fc:	d039      	beq.n	3472 <nm_spi_init+0xaa>
		gu8Crc_off = 1;
    33fe:	2201      	movs	r2, #1
    3400:	4b29      	ldr	r3, [pc, #164]	; (34a8 <nm_spi_init+0xe0>)
    3402:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    3404:	a901      	add	r1, sp, #4
    3406:	2080      	movs	r0, #128	; 0x80
    3408:	0140      	lsls	r0, r0, #5
    340a:	4b29      	ldr	r3, [pc, #164]	; (34b0 <nm_spi_init+0xe8>)
    340c:	4798      	blx	r3
    340e:	2800      	cmp	r0, #0
    3410:	d03b      	beq.n	348a <nm_spi_init+0xc2>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    3412:	4c26      	ldr	r4, [pc, #152]	; (34ac <nm_spi_init+0xe4>)
    3414:	0020      	movs	r0, r4
    3416:	4b28      	ldr	r3, [pc, #160]	; (34b8 <nm_spi_init+0xf0>)
    3418:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    341a:	2370      	movs	r3, #112	; 0x70
    341c:	0001      	movs	r1, r0
    341e:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    3420:	2050      	movs	r0, #80	; 0x50
    3422:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    3424:	0020      	movs	r0, r4
    3426:	4b25      	ldr	r3, [pc, #148]	; (34bc <nm_spi_init+0xf4>)
    3428:	4798      	blx	r3
	return M2M_SUCCESS;
    342a:	2400      	movs	r4, #0
}
    342c:	0020      	movs	r0, r4
    342e:	b002      	add	sp, #8
    3430:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    3432:	2201      	movs	r2, #1
    3434:	4b1c      	ldr	r3, [pc, #112]	; (34a8 <nm_spi_init+0xe0>)
    3436:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    3438:	4a21      	ldr	r2, [pc, #132]	; (34c0 <nm_spi_init+0xf8>)
    343a:	4922      	ldr	r1, [pc, #136]	; (34c4 <nm_spi_init+0xfc>)
    343c:	4822      	ldr	r0, [pc, #136]	; (34c8 <nm_spi_init+0x100>)
    343e:	4b23      	ldr	r3, [pc, #140]	; (34cc <nm_spi_init+0x104>)
    3440:	4798      	blx	r3
    3442:	4823      	ldr	r0, [pc, #140]	; (34d0 <nm_spi_init+0x108>)
    3444:	4b23      	ldr	r3, [pc, #140]	; (34d4 <nm_spi_init+0x10c>)
    3446:	4798      	blx	r3
    3448:	200d      	movs	r0, #13
    344a:	4b23      	ldr	r3, [pc, #140]	; (34d8 <nm_spi_init+0x110>)
    344c:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    344e:	4669      	mov	r1, sp
    3450:	4816      	ldr	r0, [pc, #88]	; (34ac <nm_spi_init+0xe4>)
    3452:	4b17      	ldr	r3, [pc, #92]	; (34b0 <nm_spi_init+0xe8>)
    3454:	4798      	blx	r3
    3456:	1e04      	subs	r4, r0, #0
    3458:	d1c2      	bne.n	33e0 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    345a:	4a20      	ldr	r2, [pc, #128]	; (34dc <nm_spi_init+0x114>)
    345c:	4919      	ldr	r1, [pc, #100]	; (34c4 <nm_spi_init+0xfc>)
    345e:	481a      	ldr	r0, [pc, #104]	; (34c8 <nm_spi_init+0x100>)
    3460:	4b1a      	ldr	r3, [pc, #104]	; (34cc <nm_spi_init+0x104>)
    3462:	4798      	blx	r3
    3464:	481e      	ldr	r0, [pc, #120]	; (34e0 <nm_spi_init+0x118>)
    3466:	4b1b      	ldr	r3, [pc, #108]	; (34d4 <nm_spi_init+0x10c>)
    3468:	4798      	blx	r3
    346a:	200d      	movs	r0, #13
    346c:	4b1a      	ldr	r3, [pc, #104]	; (34d8 <nm_spi_init+0x110>)
    346e:	4798      	blx	r3
			return 0;
    3470:	e7dc      	b.n	342c <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    3472:	4a1c      	ldr	r2, [pc, #112]	; (34e4 <nm_spi_init+0x11c>)
    3474:	4913      	ldr	r1, [pc, #76]	; (34c4 <nm_spi_init+0xfc>)
    3476:	4814      	ldr	r0, [pc, #80]	; (34c8 <nm_spi_init+0x100>)
    3478:	4b14      	ldr	r3, [pc, #80]	; (34cc <nm_spi_init+0x104>)
    347a:	4798      	blx	r3
    347c:	481a      	ldr	r0, [pc, #104]	; (34e8 <nm_spi_init+0x120>)
    347e:	4b15      	ldr	r3, [pc, #84]	; (34d4 <nm_spi_init+0x10c>)
    3480:	4798      	blx	r3
    3482:	200d      	movs	r0, #13
    3484:	4b14      	ldr	r3, [pc, #80]	; (34d8 <nm_spi_init+0x110>)
    3486:	4798      	blx	r3
			return 0;
    3488:	e7d0      	b.n	342c <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    348a:	4a18      	ldr	r2, [pc, #96]	; (34ec <nm_spi_init+0x124>)
    348c:	490d      	ldr	r1, [pc, #52]	; (34c4 <nm_spi_init+0xfc>)
    348e:	480e      	ldr	r0, [pc, #56]	; (34c8 <nm_spi_init+0x100>)
    3490:	4b0e      	ldr	r3, [pc, #56]	; (34cc <nm_spi_init+0x104>)
    3492:	4798      	blx	r3
    3494:	4816      	ldr	r0, [pc, #88]	; (34f0 <nm_spi_init+0x128>)
    3496:	4b0f      	ldr	r3, [pc, #60]	; (34d4 <nm_spi_init+0x10c>)
    3498:	4798      	blx	r3
    349a:	200d      	movs	r0, #13
    349c:	4b0e      	ldr	r3, [pc, #56]	; (34d8 <nm_spi_init+0x110>)
    349e:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    34a0:	2406      	movs	r4, #6
    34a2:	4264      	negs	r4, r4
    34a4:	e7c2      	b.n	342c <nm_spi_init+0x64>
    34a6:	46c0      	nop			; (mov r8, r8)
    34a8:	20000118 	.word	0x20000118
    34ac:	0000e824 	.word	0x0000e824
    34b0:	000031e5 	.word	0x000031e5
    34b4:	000030d5 	.word	0x000030d5
    34b8:	00003385 	.word	0x00003385
    34bc:	000033b1 	.word	0x000033b1
    34c0:	000004c7 	.word	0x000004c7
    34c4:	0000b5dc 	.word	0x0000b5dc
    34c8:	0000ae98 	.word	0x0000ae98
    34cc:	00009999 	.word	0x00009999
    34d0:	0000b6e8 	.word	0x0000b6e8
    34d4:	00009ab5 	.word	0x00009ab5
    34d8:	000099cd 	.word	0x000099cd
    34dc:	000004ca 	.word	0x000004ca
    34e0:	0000b738 	.word	0x0000b738
    34e4:	000004d4 	.word	0x000004d4
    34e8:	0000b764 	.word	0x0000b764
    34ec:	000004de 	.word	0x000004de
    34f0:	0000b798 	.word	0x0000b798

000034f4 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    34f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    34f6:	46de      	mov	lr, fp
    34f8:	4657      	mov	r7, sl
    34fa:	464e      	mov	r6, r9
    34fc:	4645      	mov	r5, r8
    34fe:	b5e0      	push	{r5, r6, r7, lr}
    3500:	b087      	sub	sp, #28
    3502:	9002      	str	r0, [sp, #8]
    3504:	9103      	str	r1, [sp, #12]
    3506:	0016      	movs	r6, r2
    3508:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    350a:	2300      	movs	r3, #0
    350c:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    350e:	2400      	movs	r4, #0
    3510:	4b3e      	ldr	r3, [pc, #248]	; (360c <nm_spi_read_block+0x118>)
    3512:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    3514:	46a9      	mov	r9, r5
    3516:	e037      	b.n	3588 <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    3518:	2301      	movs	r3, #1
    351a:	469b      	mov	fp, r3
		size = 2;
    351c:	3601      	adds	r6, #1
    351e:	e035      	b.n	358c <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    3520:	20c8      	movs	r0, #200	; 0xc8
    3522:	4b3b      	ldr	r3, [pc, #236]	; (3610 <nm_spi_read_block+0x11c>)
    3524:	4798      	blx	r3
	if (result != N_OK) {
    3526:	2801      	cmp	r0, #1
    3528:	d045      	beq.n	35b6 <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    352a:	4a3a      	ldr	r2, [pc, #232]	; (3614 <nm_spi_read_block+0x120>)
    352c:	493a      	ldr	r1, [pc, #232]	; (3618 <nm_spi_read_block+0x124>)
    352e:	483b      	ldr	r0, [pc, #236]	; (361c <nm_spi_read_block+0x128>)
    3530:	4f3b      	ldr	r7, [pc, #236]	; (3620 <nm_spi_read_block+0x12c>)
    3532:	47b8      	blx	r7
    3534:	9902      	ldr	r1, [sp, #8]
    3536:	483b      	ldr	r0, [pc, #236]	; (3624 <nm_spi_read_block+0x130>)
    3538:	47b8      	blx	r7
    353a:	200d      	movs	r0, #13
    353c:	4b3a      	ldr	r3, [pc, #232]	; (3628 <nm_spi_read_block+0x134>)
    353e:	4798      	blx	r3
		nm_bsp_sleep(1);
    3540:	2001      	movs	r0, #1
    3542:	4f3a      	ldr	r7, [pc, #232]	; (362c <nm_spi_read_block+0x138>)
    3544:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3546:	9400      	str	r4, [sp, #0]
    3548:	0023      	movs	r3, r4
    354a:	0022      	movs	r2, r4
    354c:	0021      	movs	r1, r4
    354e:	20cf      	movs	r0, #207	; 0xcf
    3550:	4d2e      	ldr	r5, [pc, #184]	; (360c <nm_spi_read_block+0x118>)
    3552:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    3554:	20cf      	movs	r0, #207	; 0xcf
    3556:	4b2e      	ldr	r3, [pc, #184]	; (3610 <nm_spi_read_block+0x11c>)
    3558:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    355a:	4a35      	ldr	r2, [pc, #212]	; (3630 <nm_spi_read_block+0x13c>)
    355c:	492e      	ldr	r1, [pc, #184]	; (3618 <nm_spi_read_block+0x124>)
    355e:	482f      	ldr	r0, [pc, #188]	; (361c <nm_spi_read_block+0x128>)
    3560:	4b2f      	ldr	r3, [pc, #188]	; (3620 <nm_spi_read_block+0x12c>)
    3562:	469a      	mov	sl, r3
    3564:	4798      	blx	r3
    3566:	0033      	movs	r3, r6
    3568:	9a02      	ldr	r2, [sp, #8]
    356a:	4649      	mov	r1, r9
    356c:	4831      	ldr	r0, [pc, #196]	; (3634 <nm_spi_read_block+0x140>)
    356e:	47d0      	blx	sl
    3570:	200d      	movs	r0, #13
    3572:	4b2d      	ldr	r3, [pc, #180]	; (3628 <nm_spi_read_block+0x134>)
    3574:	4798      	blx	r3
		nm_bsp_sleep(1);
    3576:	2001      	movs	r0, #1
    3578:	47b8      	blx	r7
    357a:	2301      	movs	r3, #1
    357c:	425b      	negs	r3, r3
    357e:	469c      	mov	ip, r3
    3580:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    3582:	464b      	mov	r3, r9
    3584:	2b00      	cmp	r3, #0
    3586:	d038      	beq.n	35fa <nm_spi_read_block+0x106>
	if (size == 1)
    3588:	2e01      	cmp	r6, #1
    358a:	d0c5      	beq.n	3518 <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    358c:	9400      	str	r4, [sp, #0]
    358e:	0033      	movs	r3, r6
    3590:	0022      	movs	r2, r4
    3592:	9d02      	ldr	r5, [sp, #8]
    3594:	0029      	movs	r1, r5
    3596:	20c8      	movs	r0, #200	; 0xc8
    3598:	47c0      	blx	r8
	if (result != N_OK) {
    359a:	2801      	cmp	r0, #1
    359c:	d0c0      	beq.n	3520 <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    359e:	4a26      	ldr	r2, [pc, #152]	; (3638 <nm_spi_read_block+0x144>)
    35a0:	491d      	ldr	r1, [pc, #116]	; (3618 <nm_spi_read_block+0x124>)
    35a2:	481e      	ldr	r0, [pc, #120]	; (361c <nm_spi_read_block+0x128>)
    35a4:	4f1e      	ldr	r7, [pc, #120]	; (3620 <nm_spi_read_block+0x12c>)
    35a6:	47b8      	blx	r7
    35a8:	0029      	movs	r1, r5
    35aa:	4824      	ldr	r0, [pc, #144]	; (363c <nm_spi_read_block+0x148>)
    35ac:	47b8      	blx	r7
    35ae:	200d      	movs	r0, #13
    35b0:	4b1d      	ldr	r3, [pc, #116]	; (3628 <nm_spi_read_block+0x134>)
    35b2:	4798      	blx	r3
    35b4:	e7c4      	b.n	3540 <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    35b6:	465b      	mov	r3, fp
    35b8:	2b00      	cmp	r3, #0
    35ba:	d016      	beq.n	35ea <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    35bc:	af05      	add	r7, sp, #20
    35be:	0022      	movs	r2, r4
    35c0:	0031      	movs	r1, r6
    35c2:	0038      	movs	r0, r7
    35c4:	4b1e      	ldr	r3, [pc, #120]	; (3640 <nm_spi_read_block+0x14c>)
    35c6:	4798      	blx	r3
		buf[0] = tmp[0];
    35c8:	783b      	ldrb	r3, [r7, #0]
    35ca:	9a03      	ldr	r2, [sp, #12]
    35cc:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    35ce:	2801      	cmp	r0, #1
    35d0:	d011      	beq.n	35f6 <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    35d2:	4a1c      	ldr	r2, [pc, #112]	; (3644 <nm_spi_read_block+0x150>)
    35d4:	4910      	ldr	r1, [pc, #64]	; (3618 <nm_spi_read_block+0x124>)
    35d6:	4811      	ldr	r0, [pc, #68]	; (361c <nm_spi_read_block+0x128>)
    35d8:	4b11      	ldr	r3, [pc, #68]	; (3620 <nm_spi_read_block+0x12c>)
    35da:	4798      	blx	r3
    35dc:	481a      	ldr	r0, [pc, #104]	; (3648 <nm_spi_read_block+0x154>)
    35de:	4b1b      	ldr	r3, [pc, #108]	; (364c <nm_spi_read_block+0x158>)
    35e0:	4798      	blx	r3
    35e2:	200d      	movs	r0, #13
    35e4:	4b10      	ldr	r3, [pc, #64]	; (3628 <nm_spi_read_block+0x134>)
    35e6:	4798      	blx	r3
    35e8:	e7aa      	b.n	3540 <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    35ea:	0022      	movs	r2, r4
    35ec:	0031      	movs	r1, r6
    35ee:	9803      	ldr	r0, [sp, #12]
    35f0:	4b13      	ldr	r3, [pc, #76]	; (3640 <nm_spi_read_block+0x14c>)
    35f2:	4798      	blx	r3
    35f4:	e7eb      	b.n	35ce <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    35f6:	2000      	movs	r0, #0
    35f8:	e001      	b.n	35fe <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    35fa:	2006      	movs	r0, #6
    35fc:	4240      	negs	r0, r0

	return s8Ret;
}
    35fe:	b007      	add	sp, #28
    3600:	bc3c      	pop	{r2, r3, r4, r5}
    3602:	4690      	mov	r8, r2
    3604:	4699      	mov	r9, r3
    3606:	46a2      	mov	sl, r4
    3608:	46ab      	mov	fp, r5
    360a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    360c:	00002d19 	.word	0x00002d19
    3610:	00002eb9 	.word	0x00002eb9
    3614:	00000463 	.word	0x00000463
    3618:	0000b5d0 	.word	0x0000b5d0
    361c:	0000ae98 	.word	0x0000ae98
    3620:	00009999 	.word	0x00009999
    3624:	0000b7ec 	.word	0x0000b7ec
    3628:	000099cd 	.word	0x000099cd
    362c:	00001169 	.word	0x00001169
    3630:	00000484 	.word	0x00000484
    3634:	0000b84c 	.word	0x0000b84c
    3638:	0000045d 	.word	0x0000045d
    363c:	0000b7bc 	.word	0x0000b7bc
    3640:	00002f8d 	.word	0x00002f8d
    3644:	00000473 	.word	0x00000473
    3648:	0000b824 	.word	0x0000b824
    364c:	00009ab5 	.word	0x00009ab5

00003650 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    3650:	b5f0      	push	{r4, r5, r6, r7, lr}
    3652:	46de      	mov	lr, fp
    3654:	4647      	mov	r7, r8
    3656:	b580      	push	{r7, lr}
    3658:	b089      	sub	sp, #36	; 0x24
    365a:	9004      	str	r0, [sp, #16]
    365c:	468b      	mov	fp, r1
    365e:	9203      	str	r2, [sp, #12]
    3660:	260a      	movs	r6, #10
    3662:	2780      	movs	r7, #128	; 0x80
    3664:	01bf      	lsls	r7, r7, #6
    3666:	466b      	mov	r3, sp
    3668:	82df      	strh	r7, [r3, #22]
    366a:	0035      	movs	r5, r6
    366c:	e02d      	b.n	36ca <nm_spi_write_block+0x7a>
		size = 2;
    366e:	3301      	adds	r3, #1
    3670:	9303      	str	r3, [sp, #12]
    3672:	e02d      	b.n	36d0 <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    3674:	4a83      	ldr	r2, [pc, #524]	; (3884 <nm_spi_write_block+0x234>)
    3676:	4984      	ldr	r1, [pc, #528]	; (3888 <nm_spi_write_block+0x238>)
    3678:	4884      	ldr	r0, [pc, #528]	; (388c <nm_spi_write_block+0x23c>)
    367a:	4c85      	ldr	r4, [pc, #532]	; (3890 <nm_spi_write_block+0x240>)
    367c:	47a0      	blx	r4
    367e:	0031      	movs	r1, r6
    3680:	4884      	ldr	r0, [pc, #528]	; (3894 <nm_spi_write_block+0x244>)
    3682:	47a0      	blx	r4
    3684:	200d      	movs	r0, #13
    3686:	4b84      	ldr	r3, [pc, #528]	; (3898 <nm_spi_write_block+0x248>)
    3688:	4798      	blx	r3
		nm_bsp_sleep(1);
    368a:	2001      	movs	r0, #1
    368c:	4c83      	ldr	r4, [pc, #524]	; (389c <nm_spi_write_block+0x24c>)
    368e:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3690:	2300      	movs	r3, #0
    3692:	9300      	str	r3, [sp, #0]
    3694:	2200      	movs	r2, #0
    3696:	2100      	movs	r1, #0
    3698:	20cf      	movs	r0, #207	; 0xcf
    369a:	4e81      	ldr	r6, [pc, #516]	; (38a0 <nm_spi_write_block+0x250>)
    369c:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    369e:	20cf      	movs	r0, #207	; 0xcf
    36a0:	4b80      	ldr	r3, [pc, #512]	; (38a4 <nm_spi_write_block+0x254>)
    36a2:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    36a4:	4a80      	ldr	r2, [pc, #512]	; (38a8 <nm_spi_write_block+0x258>)
    36a6:	4978      	ldr	r1, [pc, #480]	; (3888 <nm_spi_write_block+0x238>)
    36a8:	4878      	ldr	r0, [pc, #480]	; (388c <nm_spi_write_block+0x23c>)
    36aa:	4e79      	ldr	r6, [pc, #484]	; (3890 <nm_spi_write_block+0x240>)
    36ac:	47b0      	blx	r6
    36ae:	9b03      	ldr	r3, [sp, #12]
    36b0:	9a04      	ldr	r2, [sp, #16]
    36b2:	0029      	movs	r1, r5
    36b4:	487d      	ldr	r0, [pc, #500]	; (38ac <nm_spi_write_block+0x25c>)
    36b6:	47b0      	blx	r6
    36b8:	200d      	movs	r0, #13
    36ba:	4b77      	ldr	r3, [pc, #476]	; (3898 <nm_spi_write_block+0x248>)
    36bc:	4798      	blx	r3
		nm_bsp_sleep(1);
    36be:	2001      	movs	r0, #1
    36c0:	47a0      	blx	r4
    36c2:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    36c4:	2d00      	cmp	r5, #0
    36c6:	d100      	bne.n	36ca <nm_spi_write_block+0x7a>
    36c8:	e0d5      	b.n	3876 <nm_spi_write_block+0x226>
	if (size == 1)
    36ca:	9b03      	ldr	r3, [sp, #12]
    36cc:	2b01      	cmp	r3, #1
    36ce:	d0ce      	beq.n	366e <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    36d0:	2300      	movs	r3, #0
    36d2:	9300      	str	r3, [sp, #0]
    36d4:	9b03      	ldr	r3, [sp, #12]
    36d6:	2200      	movs	r2, #0
    36d8:	9e04      	ldr	r6, [sp, #16]
    36da:	0031      	movs	r1, r6
    36dc:	20c7      	movs	r0, #199	; 0xc7
    36de:	4c70      	ldr	r4, [pc, #448]	; (38a0 <nm_spi_write_block+0x250>)
    36e0:	47a0      	blx	r4
	if (result != N_OK) {
    36e2:	2801      	cmp	r0, #1
    36e4:	d1c6      	bne.n	3674 <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    36e6:	20c7      	movs	r0, #199	; 0xc7
    36e8:	4b6e      	ldr	r3, [pc, #440]	; (38a4 <nm_spi_write_block+0x254>)
    36ea:	4798      	blx	r3
	if (result != N_OK) {
    36ec:	2801      	cmp	r0, #1
    36ee:	d00c      	beq.n	370a <nm_spi_write_block+0xba>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    36f0:	22f4      	movs	r2, #244	; 0xf4
    36f2:	0092      	lsls	r2, r2, #2
    36f4:	4964      	ldr	r1, [pc, #400]	; (3888 <nm_spi_write_block+0x238>)
    36f6:	4865      	ldr	r0, [pc, #404]	; (388c <nm_spi_write_block+0x23c>)
    36f8:	4c65      	ldr	r4, [pc, #404]	; (3890 <nm_spi_write_block+0x240>)
    36fa:	47a0      	blx	r4
    36fc:	9904      	ldr	r1, [sp, #16]
    36fe:	486c      	ldr	r0, [pc, #432]	; (38b0 <nm_spi_write_block+0x260>)
    3700:	47a0      	blx	r4
    3702:	200d      	movs	r0, #13
    3704:	4b64      	ldr	r3, [pc, #400]	; (3898 <nm_spi_write_block+0x248>)
    3706:	4798      	blx	r3
    3708:	e7bf      	b.n	368a <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    370a:	2200      	movs	r2, #0
    370c:	ab07      	add	r3, sp, #28
    370e:	801a      	strh	r2, [r3, #0]
    3710:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    3712:	2600      	movs	r6, #0
				order = 0x1;
    3714:	46a8      	mov	r8, r5
    3716:	0035      	movs	r5, r6
    3718:	0026      	movs	r6, r4
    371a:	e021      	b.n	3760 <nm_spi_write_block+0x110>
				order = 0x2;
    371c:	2300      	movs	r3, #0
    371e:	42b7      	cmp	r7, r6
    3720:	415b      	adcs	r3, r3
    3722:	3302      	adds	r3, #2
		cmd |= order;
    3724:	200b      	movs	r0, #11
    3726:	aa04      	add	r2, sp, #16
    3728:	4694      	mov	ip, r2
    372a:	4460      	add	r0, ip
    372c:	2210      	movs	r2, #16
    372e:	4252      	negs	r2, r2
    3730:	4313      	orrs	r3, r2
    3732:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    3734:	2101      	movs	r1, #1
    3736:	4b5f      	ldr	r3, [pc, #380]	; (38b4 <nm_spi_write_block+0x264>)
    3738:	4798      	blx	r3
    373a:	2800      	cmp	r0, #0
    373c:	d11d      	bne.n	377a <nm_spi_write_block+0x12a>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    373e:	465b      	mov	r3, fp
    3740:	1958      	adds	r0, r3, r5
    3742:	0021      	movs	r1, r4
    3744:	4b5b      	ldr	r3, [pc, #364]	; (38b4 <nm_spi_write_block+0x264>)
    3746:	4798      	blx	r3
    3748:	2800      	cmp	r0, #0
    374a:	d130      	bne.n	37ae <nm_spi_write_block+0x15e>
		if (!gu8Crc_off) {
    374c:	4b5a      	ldr	r3, [pc, #360]	; (38b8 <nm_spi_write_block+0x268>)
    374e:	781b      	ldrb	r3, [r3, #0]
    3750:	2b00      	cmp	r3, #0
    3752:	d039      	beq.n	37c8 <nm_spi_write_block+0x178>
		ix += nbytes;
    3754:	1965      	adds	r5, r4, r5
    3756:	b22d      	sxth	r5, r5
		sz -= nbytes;
    3758:	1b36      	subs	r6, r6, r4
    375a:	b2b6      	uxth	r6, r6
	} while (sz);
    375c:	2e00      	cmp	r6, #0
    375e:	d053      	beq.n	3808 <nm_spi_write_block+0x1b8>
    3760:	1c34      	adds	r4, r6, #0
    3762:	42be      	cmp	r6, r7
    3764:	d901      	bls.n	376a <nm_spi_write_block+0x11a>
    3766:	466b      	mov	r3, sp
    3768:	8adc      	ldrh	r4, [r3, #22]
    376a:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    376c:	2d00      	cmp	r5, #0
    376e:	d1d5      	bne.n	371c <nm_spi_write_block+0xcc>
				order = 0x3;
    3770:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    3772:	42be      	cmp	r6, r7
    3774:	d9d6      	bls.n	3724 <nm_spi_write_block+0xd4>
				order = 0x1;
    3776:	3b02      	subs	r3, #2
    3778:	e7d4      	b.n	3724 <nm_spi_write_block+0xd4>
    377a:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    377c:	22d4      	movs	r2, #212	; 0xd4
    377e:	0092      	lsls	r2, r2, #2
    3780:	494e      	ldr	r1, [pc, #312]	; (38bc <nm_spi_write_block+0x26c>)
    3782:	4842      	ldr	r0, [pc, #264]	; (388c <nm_spi_write_block+0x23c>)
    3784:	4b42      	ldr	r3, [pc, #264]	; (3890 <nm_spi_write_block+0x240>)
    3786:	4798      	blx	r3
    3788:	484d      	ldr	r0, [pc, #308]	; (38c0 <nm_spi_write_block+0x270>)
    378a:	4b4e      	ldr	r3, [pc, #312]	; (38c4 <nm_spi_write_block+0x274>)
    378c:	4798      	blx	r3
    378e:	200d      	movs	r0, #13
    3790:	4b41      	ldr	r3, [pc, #260]	; (3898 <nm_spi_write_block+0x248>)
    3792:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    3794:	22f8      	movs	r2, #248	; 0xf8
    3796:	0092      	lsls	r2, r2, #2
    3798:	493b      	ldr	r1, [pc, #236]	; (3888 <nm_spi_write_block+0x238>)
    379a:	483c      	ldr	r0, [pc, #240]	; (388c <nm_spi_write_block+0x23c>)
    379c:	4b3c      	ldr	r3, [pc, #240]	; (3890 <nm_spi_write_block+0x240>)
    379e:	4798      	blx	r3
    37a0:	4849      	ldr	r0, [pc, #292]	; (38c8 <nm_spi_write_block+0x278>)
    37a2:	4b48      	ldr	r3, [pc, #288]	; (38c4 <nm_spi_write_block+0x274>)
    37a4:	4798      	blx	r3
    37a6:	200d      	movs	r0, #13
    37a8:	4b3b      	ldr	r3, [pc, #236]	; (3898 <nm_spi_write_block+0x248>)
    37aa:	4798      	blx	r3
    37ac:	e76d      	b.n	368a <nm_spi_write_block+0x3a>
    37ae:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    37b0:	4a46      	ldr	r2, [pc, #280]	; (38cc <nm_spi_write_block+0x27c>)
    37b2:	4942      	ldr	r1, [pc, #264]	; (38bc <nm_spi_write_block+0x26c>)
    37b4:	4835      	ldr	r0, [pc, #212]	; (388c <nm_spi_write_block+0x23c>)
    37b6:	4b36      	ldr	r3, [pc, #216]	; (3890 <nm_spi_write_block+0x240>)
    37b8:	4798      	blx	r3
    37ba:	4845      	ldr	r0, [pc, #276]	; (38d0 <nm_spi_write_block+0x280>)
    37bc:	4b41      	ldr	r3, [pc, #260]	; (38c4 <nm_spi_write_block+0x274>)
    37be:	4798      	blx	r3
    37c0:	200d      	movs	r0, #13
    37c2:	4b35      	ldr	r3, [pc, #212]	; (3898 <nm_spi_write_block+0x248>)
    37c4:	4798      	blx	r3
    37c6:	e7e5      	b.n	3794 <nm_spi_write_block+0x144>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    37c8:	2102      	movs	r1, #2
    37ca:	a807      	add	r0, sp, #28
    37cc:	4b39      	ldr	r3, [pc, #228]	; (38b4 <nm_spi_write_block+0x264>)
    37ce:	4798      	blx	r3
    37d0:	2800      	cmp	r0, #0
    37d2:	d0bf      	beq.n	3754 <nm_spi_write_block+0x104>
    37d4:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    37d6:	4a3f      	ldr	r2, [pc, #252]	; (38d4 <nm_spi_write_block+0x284>)
    37d8:	4938      	ldr	r1, [pc, #224]	; (38bc <nm_spi_write_block+0x26c>)
    37da:	482c      	ldr	r0, [pc, #176]	; (388c <nm_spi_write_block+0x23c>)
    37dc:	4b2c      	ldr	r3, [pc, #176]	; (3890 <nm_spi_write_block+0x240>)
    37de:	4798      	blx	r3
    37e0:	483d      	ldr	r0, [pc, #244]	; (38d8 <nm_spi_write_block+0x288>)
    37e2:	4b38      	ldr	r3, [pc, #224]	; (38c4 <nm_spi_write_block+0x274>)
    37e4:	4798      	blx	r3
    37e6:	200d      	movs	r0, #13
    37e8:	4b2b      	ldr	r3, [pc, #172]	; (3898 <nm_spi_write_block+0x248>)
    37ea:	4798      	blx	r3
    37ec:	e7d2      	b.n	3794 <nm_spi_write_block+0x144>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    37ee:	223c      	movs	r2, #60	; 0x3c
    37f0:	32ff      	adds	r2, #255	; 0xff
    37f2:	493a      	ldr	r1, [pc, #232]	; (38dc <nm_spi_write_block+0x28c>)
    37f4:	4825      	ldr	r0, [pc, #148]	; (388c <nm_spi_write_block+0x23c>)
    37f6:	4b26      	ldr	r3, [pc, #152]	; (3890 <nm_spi_write_block+0x240>)
    37f8:	4798      	blx	r3
    37fa:	4839      	ldr	r0, [pc, #228]	; (38e0 <nm_spi_write_block+0x290>)
    37fc:	4b31      	ldr	r3, [pc, #196]	; (38c4 <nm_spi_write_block+0x274>)
    37fe:	4798      	blx	r3
    3800:	200d      	movs	r0, #13
    3802:	4b25      	ldr	r3, [pc, #148]	; (3898 <nm_spi_write_block+0x248>)
    3804:	4798      	blx	r3
    3806:	e027      	b.n	3858 <nm_spi_write_block+0x208>
    3808:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    380a:	4b2b      	ldr	r3, [pc, #172]	; (38b8 <nm_spi_write_block+0x268>)
    380c:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    380e:	1e63      	subs	r3, r4, #1
    3810:	419c      	sbcs	r4, r3
    3812:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    3814:	b2a1      	uxth	r1, r4
    3816:	a807      	add	r0, sp, #28
    3818:	4b32      	ldr	r3, [pc, #200]	; (38e4 <nm_spi_write_block+0x294>)
    381a:	4798      	blx	r3
    381c:	2800      	cmp	r0, #0
    381e:	d1e6      	bne.n	37ee <nm_spi_write_block+0x19e>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    3820:	ab08      	add	r3, sp, #32
    3822:	191b      	adds	r3, r3, r4
    3824:	3b05      	subs	r3, #5
    3826:	781b      	ldrb	r3, [r3, #0]
    3828:	2b00      	cmp	r3, #0
    382a:	d106      	bne.n	383a <nm_spi_write_block+0x1ea>
    382c:	ab08      	add	r3, sp, #32
    382e:	469c      	mov	ip, r3
    3830:	4464      	add	r4, ip
    3832:	3c06      	subs	r4, #6
    3834:	7823      	ldrb	r3, [r4, #0]
    3836:	2bc3      	cmp	r3, #195	; 0xc3
    3838:	d01b      	beq.n	3872 <nm_spi_write_block+0x222>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    383a:	22a1      	movs	r2, #161	; 0xa1
    383c:	0052      	lsls	r2, r2, #1
    383e:	4927      	ldr	r1, [pc, #156]	; (38dc <nm_spi_write_block+0x28c>)
    3840:	4812      	ldr	r0, [pc, #72]	; (388c <nm_spi_write_block+0x23c>)
    3842:	4c13      	ldr	r4, [pc, #76]	; (3890 <nm_spi_write_block+0x240>)
    3844:	47a0      	blx	r4
    3846:	a907      	add	r1, sp, #28
    3848:	788b      	ldrb	r3, [r1, #2]
    384a:	784a      	ldrb	r2, [r1, #1]
    384c:	7809      	ldrb	r1, [r1, #0]
    384e:	4826      	ldr	r0, [pc, #152]	; (38e8 <nm_spi_write_block+0x298>)
    3850:	47a0      	blx	r4
    3852:	200d      	movs	r0, #13
    3854:	4b10      	ldr	r3, [pc, #64]	; (3898 <nm_spi_write_block+0x248>)
    3856:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    3858:	22fa      	movs	r2, #250	; 0xfa
    385a:	0092      	lsls	r2, r2, #2
    385c:	490a      	ldr	r1, [pc, #40]	; (3888 <nm_spi_write_block+0x238>)
    385e:	480b      	ldr	r0, [pc, #44]	; (388c <nm_spi_write_block+0x23c>)
    3860:	4b0b      	ldr	r3, [pc, #44]	; (3890 <nm_spi_write_block+0x240>)
    3862:	4798      	blx	r3
    3864:	4818      	ldr	r0, [pc, #96]	; (38c8 <nm_spi_write_block+0x278>)
    3866:	4b17      	ldr	r3, [pc, #92]	; (38c4 <nm_spi_write_block+0x274>)
    3868:	4798      	blx	r3
    386a:	200d      	movs	r0, #13
    386c:	4b0a      	ldr	r3, [pc, #40]	; (3898 <nm_spi_write_block+0x248>)
    386e:	4798      	blx	r3
    3870:	e70b      	b.n	368a <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    3872:	2000      	movs	r0, #0
    3874:	e001      	b.n	387a <nm_spi_write_block+0x22a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    3876:	2006      	movs	r0, #6
    3878:	4240      	negs	r0, r0

	return s8Ret;
}
    387a:	b009      	add	sp, #36	; 0x24
    387c:	bc0c      	pop	{r2, r3}
    387e:	4690      	mov	r8, r2
    3880:	469b      	mov	fp, r3
    3882:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3884:	000003ca 	.word	0x000003ca
    3888:	0000b5b0 	.word	0x0000b5b0
    388c:	0000ae98 	.word	0x0000ae98
    3890:	00009999 	.word	0x00009999
    3894:	0000b868 	.word	0x0000b868
    3898:	000099cd 	.word	0x000099cd
    389c:	00001169 	.word	0x00001169
    38a0:	00002d19 	.word	0x00002d19
    38a4:	00002eb9 	.word	0x00002eb9
    38a8:	000003f2 	.word	0x000003f2
    38ac:	0000b84c 	.word	0x0000b84c
    38b0:	0000b898 	.word	0x0000b898
    38b4:	00002cf9 	.word	0x00002cf9
    38b8:	20000118 	.word	0x20000118
    38bc:	0000b590 	.word	0x0000b590
    38c0:	0000b8d0 	.word	0x0000b8d0
    38c4:	00009ab5 	.word	0x00009ab5
    38c8:	0000b9c4 	.word	0x0000b9c4
    38cc:	00000359 	.word	0x00000359
    38d0:	0000b908 	.word	0x0000b908
    38d4:	00000363 	.word	0x00000363
    38d8:	0000b93c 	.word	0x0000b93c
    38dc:	0000b564 	.word	0x0000b564
    38e0:	0000b974 	.word	0x0000b974
    38e4:	00002e99 	.word	0x00002e99
    38e8:	0000b994 	.word	0x0000b994

000038ec <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    38ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    38ee:	46de      	mov	lr, fp
    38f0:	4657      	mov	r7, sl
    38f2:	464e      	mov	r6, r9
    38f4:	4645      	mov	r5, r8
    38f6:	b5e0      	push	{r5, r6, r7, lr}
    38f8:	b085      	sub	sp, #20
    38fa:	9001      	str	r0, [sp, #4]
    38fc:	000e      	movs	r6, r1
    38fe:	9202      	str	r2, [sp, #8]
    3900:	001d      	movs	r5, r3
    3902:	ab0e      	add	r3, sp, #56	; 0x38
    3904:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    3906:	2c00      	cmp	r4, #0
    3908:	d064      	beq.n	39d4 <Socket_ReadSocketData+0xe8>
    390a:	0103      	lsls	r3, r0, #4
    390c:	4935      	ldr	r1, [pc, #212]	; (39e4 <Socket_ReadSocketData+0xf8>)
    390e:	585b      	ldr	r3, [r3, r1]
    3910:	2b00      	cmp	r3, #0
    3912:	d05f      	beq.n	39d4 <Socket_ReadSocketData+0xe8>
    3914:	0101      	lsls	r1, r0, #4
    3916:	4b33      	ldr	r3, [pc, #204]	; (39e4 <Socket_ReadSocketData+0xf8>)
    3918:	185b      	adds	r3, r3, r1
    391a:	889b      	ldrh	r3, [r3, #4]
    391c:	b29b      	uxth	r3, r3
    391e:	2b00      	cmp	r3, #0
    3920:	d058      	beq.n	39d4 <Socket_ReadSocketData+0xe8>
    3922:	4b30      	ldr	r3, [pc, #192]	; (39e4 <Socket_ReadSocketData+0xf8>)
    3924:	185b      	adds	r3, r3, r1
    3926:	7a9b      	ldrb	r3, [r3, #10]
    3928:	2b01      	cmp	r3, #1
    392a:	d153      	bne.n	39d4 <Socket_ReadSocketData+0xe8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    392c:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    392e:	4b2d      	ldr	r3, [pc, #180]	; (39e4 <Socket_ReadSocketData+0xf8>)
    3930:	469b      	mov	fp, r3
    3932:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    3934:	465b      	mov	r3, fp
    3936:	220a      	movs	r2, #10
    3938:	4690      	mov	r8, r2
    393a:	44d8      	add	r8, fp
    393c:	468a      	mov	sl, r1
    393e:	9500      	str	r5, [sp, #0]
    3940:	9303      	str	r3, [sp, #12]
    3942:	e015      	b.n	3970 <Socket_ReadSocketData+0x84>
    3944:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    3946:	2301      	movs	r3, #1
    3948:	e01c      	b.n	3984 <Socket_ReadSocketData+0x98>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    394a:	3301      	adds	r3, #1
    394c:	2200      	movs	r2, #0
    394e:	2100      	movs	r1, #0
    3950:	2000      	movs	r0, #0
    3952:	4c25      	ldr	r4, [pc, #148]	; (39e8 <Socket_ReadSocketData+0xfc>)
    3954:	47a0      	blx	r4
    3956:	e03d      	b.n	39d4 <Socket_ReadSocketData+0xe8>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    3958:	4824      	ldr	r0, [pc, #144]	; (39ec <Socket_ReadSocketData+0x100>)
    395a:	4d25      	ldr	r5, [pc, #148]	; (39f0 <Socket_ReadSocketData+0x104>)
    395c:	47a8      	blx	r5
    395e:	0021      	movs	r1, r4
    3960:	4824      	ldr	r0, [pc, #144]	; (39f4 <Socket_ReadSocketData+0x108>)
    3962:	47a8      	blx	r5
    3964:	200d      	movs	r0, #13
    3966:	4b24      	ldr	r3, [pc, #144]	; (39f8 <Socket_ReadSocketData+0x10c>)
    3968:	4798      	blx	r3
				break;
    396a:	e033      	b.n	39d4 <Socket_ReadSocketData+0xe8>
			}
		}while(u16ReadCount != 0);
    396c:	2c00      	cmp	r4, #0
    396e:	d031      	beq.n	39d4 <Socket_ReadSocketData+0xe8>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    3970:	465b      	mov	r3, fp
    3972:	889b      	ldrh	r3, [r3, #4]
    3974:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    3976:	b21b      	sxth	r3, r3
    3978:	2b00      	cmp	r3, #0
    397a:	dde3      	ble.n	3944 <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    397c:	9b03      	ldr	r3, [sp, #12]
    397e:	889d      	ldrh	r5, [r3, #4]
    3980:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    3982:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    3984:	4a17      	ldr	r2, [pc, #92]	; (39e4 <Socket_ReadSocketData+0xf8>)
    3986:	4651      	mov	r1, sl
    3988:	5889      	ldr	r1, [r1, r2]
    398a:	002a      	movs	r2, r5
    398c:	9800      	ldr	r0, [sp, #0]
    398e:	4f16      	ldr	r7, [pc, #88]	; (39e8 <Socket_ReadSocketData+0xfc>)
    3990:	47b8      	blx	r7
    3992:	2800      	cmp	r0, #0
    3994:	d1e0      	bne.n	3958 <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    3996:	4b13      	ldr	r3, [pc, #76]	; (39e4 <Socket_ReadSocketData+0xf8>)
    3998:	4652      	mov	r2, sl
    399a:	58d3      	ldr	r3, [r2, r3]
    399c:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    399e:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    39a0:	88f3      	ldrh	r3, [r6, #6]
    39a2:	1b5b      	subs	r3, r3, r5
    39a4:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    39a6:	4b15      	ldr	r3, [pc, #84]	; (39fc <Socket_ReadSocketData+0x110>)
    39a8:	681b      	ldr	r3, [r3, #0]
    39aa:	2b00      	cmp	r3, #0
    39ac:	d005      	beq.n	39ba <Socket_ReadSocketData+0xce>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    39ae:	4b13      	ldr	r3, [pc, #76]	; (39fc <Socket_ReadSocketData+0x110>)
    39b0:	681b      	ldr	r3, [r3, #0]
    39b2:	0032      	movs	r2, r6
    39b4:	9902      	ldr	r1, [sp, #8]
    39b6:	9801      	ldr	r0, [sp, #4]
    39b8:	4798      	blx	r3
				u16ReadCount -= u16Read;
    39ba:	1b64      	subs	r4, r4, r5
    39bc:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    39be:	9b00      	ldr	r3, [sp, #0]
    39c0:	469c      	mov	ip, r3
    39c2:	44ac      	add	ip, r5
    39c4:	4663      	mov	r3, ip
    39c6:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    39c8:	4643      	mov	r3, r8
    39ca:	781b      	ldrb	r3, [r3, #0]
    39cc:	2b00      	cmp	r3, #0
    39ce:	d1cd      	bne.n	396c <Socket_ReadSocketData+0x80>
    39d0:	2c00      	cmp	r4, #0
    39d2:	d1ba      	bne.n	394a <Socket_ReadSocketData+0x5e>
	}
}
    39d4:	b005      	add	sp, #20
    39d6:	bc3c      	pop	{r2, r3, r4, r5}
    39d8:	4690      	mov	r8, r2
    39da:	4699      	mov	r9, r3
    39dc:	46a2      	mov	sl, r4
    39de:	46ab      	mov	fp, r5
    39e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39e2:	46c0      	nop			; (mov r8, r8)
    39e4:	20000320 	.word	0x20000320
    39e8:	00001c8d 	.word	0x00001c8d
    39ec:	0000b1c8 	.word	0x0000b1c8
    39f0:	00009999 	.word	0x00009999
    39f4:	0000bc2c 	.word	0x0000bc2c
    39f8:	000099cd 	.word	0x000099cd
    39fc:	200003d0 	.word	0x200003d0

00003a00 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    3a00:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a02:	46d6      	mov	lr, sl
    3a04:	464f      	mov	r7, r9
    3a06:	4646      	mov	r6, r8
    3a08:	b5c0      	push	{r6, r7, lr}
    3a0a:	b09a      	sub	sp, #104	; 0x68
    3a0c:	000d      	movs	r5, r1
    3a0e:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    3a10:	2841      	cmp	r0, #65	; 0x41
    3a12:	d039      	beq.n	3a88 <m2m_ip_cb+0x88>
    3a14:	2854      	cmp	r0, #84	; 0x54
    3a16:	d037      	beq.n	3a88 <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    3a18:	2842      	cmp	r0, #66	; 0x42
    3a1a:	d053      	beq.n	3ac4 <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    3a1c:	2843      	cmp	r0, #67	; 0x43
    3a1e:	d06a      	beq.n	3af6 <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    3a20:	2844      	cmp	r0, #68	; 0x44
    3a22:	d100      	bne.n	3a26 <m2m_ip_cb+0x26>
    3a24:	e0af      	b.n	3b86 <m2m_ip_cb+0x186>
    3a26:	284b      	cmp	r0, #75	; 0x4b
    3a28:	d100      	bne.n	3a2c <m2m_ip_cb+0x2c>
    3a2a:	e0ac      	b.n	3b86 <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    3a2c:	284a      	cmp	r0, #74	; 0x4a
    3a2e:	d100      	bne.n	3a32 <m2m_ip_cb+0x32>
    3a30:	e0cf      	b.n	3bd2 <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    3a32:	2846      	cmp	r0, #70	; 0x46
    3a34:	d100      	bne.n	3a38 <m2m_ip_cb+0x38>
    3a36:	e0e5      	b.n	3c04 <m2m_ip_cb+0x204>
    3a38:	2848      	cmp	r0, #72	; 0x48
    3a3a:	d100      	bne.n	3a3e <m2m_ip_cb+0x3e>
    3a3c:	e10e      	b.n	3c5c <m2m_ip_cb+0x25c>
    3a3e:	284d      	cmp	r0, #77	; 0x4d
    3a40:	d100      	bne.n	3a44 <m2m_ip_cb+0x44>
    3a42:	e0dc      	b.n	3bfe <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    3a44:	2845      	cmp	r0, #69	; 0x45
    3a46:	d100      	bne.n	3a4a <m2m_ip_cb+0x4a>
    3a48:	e12c      	b.n	3ca4 <m2m_ip_cb+0x2a4>
    3a4a:	2847      	cmp	r0, #71	; 0x47
    3a4c:	d100      	bne.n	3a50 <m2m_ip_cb+0x50>
    3a4e:	e14d      	b.n	3cec <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    3a50:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    3a52:	284c      	cmp	r0, #76	; 0x4c
    3a54:	d100      	bne.n	3a58 <m2m_ip_cb+0x58>
    3a56:	e126      	b.n	3ca6 <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    3a58:	2852      	cmp	r0, #82	; 0x52
    3a5a:	d12d      	bne.n	3ab8 <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    3a5c:	2301      	movs	r3, #1
    3a5e:	2214      	movs	r2, #20
    3a60:	a909      	add	r1, sp, #36	; 0x24
    3a62:	0020      	movs	r0, r4
    3a64:	4ca2      	ldr	r4, [pc, #648]	; (3cf0 <m2m_ip_cb+0x2f0>)
    3a66:	47a0      	blx	r4
    3a68:	2800      	cmp	r0, #0
    3a6a:	d125      	bne.n	3ab8 <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    3a6c:	4ba1      	ldr	r3, [pc, #644]	; (3cf4 <m2m_ip_cb+0x2f4>)
    3a6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3a70:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    3a72:	681b      	ldr	r3, [r3, #0]
    3a74:	2b00      	cmp	r3, #0
    3a76:	d01f      	beq.n	3ab8 <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    3a78:	4b9e      	ldr	r3, [pc, #632]	; (3cf4 <m2m_ip_cb+0x2f4>)
    3a7a:	681c      	ldr	r4, [r3, #0]
    3a7c:	ab09      	add	r3, sp, #36	; 0x24
    3a7e:	7c1a      	ldrb	r2, [r3, #16]
    3a80:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3a82:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a84:	47a0      	blx	r4
			}
		}
	}
}
    3a86:	e017      	b.n	3ab8 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    3a88:	2300      	movs	r3, #0
    3a8a:	2204      	movs	r2, #4
    3a8c:	a909      	add	r1, sp, #36	; 0x24
    3a8e:	0020      	movs	r0, r4
    3a90:	4c97      	ldr	r4, [pc, #604]	; (3cf0 <m2m_ip_cb+0x2f0>)
    3a92:	47a0      	blx	r4
    3a94:	2800      	cmp	r0, #0
    3a96:	d10f      	bne.n	3ab8 <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    3a98:	ab09      	add	r3, sp, #36	; 0x24
    3a9a:	785a      	ldrb	r2, [r3, #1]
    3a9c:	ab05      	add	r3, sp, #20
    3a9e:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    3aa0:	4b95      	ldr	r3, [pc, #596]	; (3cf8 <m2m_ip_cb+0x2f8>)
    3aa2:	681b      	ldr	r3, [r3, #0]
    3aa4:	2b00      	cmp	r3, #0
    3aa6:	d007      	beq.n	3ab8 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    3aa8:	4b93      	ldr	r3, [pc, #588]	; (3cf8 <m2m_ip_cb+0x2f8>)
    3aaa:	681b      	ldr	r3, [r3, #0]
    3aac:	aa09      	add	r2, sp, #36	; 0x24
    3aae:	2000      	movs	r0, #0
    3ab0:	5610      	ldrsb	r0, [r2, r0]
    3ab2:	aa05      	add	r2, sp, #20
    3ab4:	2101      	movs	r1, #1
    3ab6:	4798      	blx	r3
}
    3ab8:	b01a      	add	sp, #104	; 0x68
    3aba:	bc1c      	pop	{r2, r3, r4}
    3abc:	4690      	mov	r8, r2
    3abe:	4699      	mov	r9, r3
    3ac0:	46a2      	mov	sl, r4
    3ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    3ac4:	2300      	movs	r3, #0
    3ac6:	2204      	movs	r2, #4
    3ac8:	a909      	add	r1, sp, #36	; 0x24
    3aca:	0020      	movs	r0, r4
    3acc:	4c88      	ldr	r4, [pc, #544]	; (3cf0 <m2m_ip_cb+0x2f0>)
    3ace:	47a0      	blx	r4
    3ad0:	2800      	cmp	r0, #0
    3ad2:	d1f1      	bne.n	3ab8 <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    3ad4:	ab09      	add	r3, sp, #36	; 0x24
    3ad6:	785a      	ldrb	r2, [r3, #1]
    3ad8:	ab05      	add	r3, sp, #20
    3ada:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    3adc:	4b86      	ldr	r3, [pc, #536]	; (3cf8 <m2m_ip_cb+0x2f8>)
    3ade:	681b      	ldr	r3, [r3, #0]
    3ae0:	2b00      	cmp	r3, #0
    3ae2:	d0e9      	beq.n	3ab8 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    3ae4:	4b84      	ldr	r3, [pc, #528]	; (3cf8 <m2m_ip_cb+0x2f8>)
    3ae6:	681b      	ldr	r3, [r3, #0]
    3ae8:	aa09      	add	r2, sp, #36	; 0x24
    3aea:	2000      	movs	r0, #0
    3aec:	5610      	ldrsb	r0, [r2, r0]
    3aee:	aa05      	add	r2, sp, #20
    3af0:	2102      	movs	r1, #2
    3af2:	4798      	blx	r3
    3af4:	e7e0      	b.n	3ab8 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    3af6:	2300      	movs	r3, #0
    3af8:	220c      	movs	r2, #12
    3afa:	a905      	add	r1, sp, #20
    3afc:	0020      	movs	r0, r4
    3afe:	4c7c      	ldr	r4, [pc, #496]	; (3cf0 <m2m_ip_cb+0x2f0>)
    3b00:	47a0      	blx	r4
    3b02:	2800      	cmp	r0, #0
    3b04:	d1d8      	bne.n	3ab8 <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    3b06:	ab05      	add	r3, sp, #20
    3b08:	2209      	movs	r2, #9
    3b0a:	569a      	ldrsb	r2, [r3, r2]
    3b0c:	2a00      	cmp	r2, #0
    3b0e:	db24      	blt.n	3b5a <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    3b10:	0018      	movs	r0, r3
    3b12:	2108      	movs	r1, #8
    3b14:	5659      	ldrsb	r1, [r3, r1]
    3b16:	4b79      	ldr	r3, [pc, #484]	; (3cfc <m2m_ip_cb+0x2fc>)
    3b18:	0109      	lsls	r1, r1, #4
    3b1a:	1859      	adds	r1, r3, r1
    3b1c:	7ac9      	ldrb	r1, [r1, #11]
    3b1e:	b2c9      	uxtb	r1, r1
    3b20:	0114      	lsls	r4, r2, #4
    3b22:	191b      	adds	r3, r3, r4
    3b24:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    3b26:	2101      	movs	r1, #1
    3b28:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    3b2a:	8941      	ldrh	r1, [r0, #10]
    3b2c:	3908      	subs	r1, #8
    3b2e:	b289      	uxth	r1, r1
    3b30:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    3b32:	4973      	ldr	r1, [pc, #460]	; (3d00 <m2m_ip_cb+0x300>)
    3b34:	880b      	ldrh	r3, [r1, #0]
    3b36:	3301      	adds	r3, #1
    3b38:	b29b      	uxth	r3, r3
    3b3a:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    3b3c:	880b      	ldrh	r3, [r1, #0]
    3b3e:	b29b      	uxth	r3, r3
    3b40:	2b00      	cmp	r3, #0
    3b42:	d103      	bne.n	3b4c <m2m_ip_cb+0x14c>
					++gu16SessionID;
    3b44:	880b      	ldrh	r3, [r1, #0]
    3b46:	3301      	adds	r3, #1
    3b48:	b29b      	uxth	r3, r3
    3b4a:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    3b4c:	4b6c      	ldr	r3, [pc, #432]	; (3d00 <m2m_ip_cb+0x300>)
    3b4e:	8819      	ldrh	r1, [r3, #0]
    3b50:	b289      	uxth	r1, r1
    3b52:	0110      	lsls	r0, r2, #4
    3b54:	4b69      	ldr	r3, [pc, #420]	; (3cfc <m2m_ip_cb+0x2fc>)
    3b56:	181b      	adds	r3, r3, r0
    3b58:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    3b5a:	ab09      	add	r3, sp, #36	; 0x24
    3b5c:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    3b5e:	2202      	movs	r2, #2
    3b60:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    3b62:	aa05      	add	r2, sp, #20
    3b64:	8851      	ldrh	r1, [r2, #2]
    3b66:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    3b68:	9a06      	ldr	r2, [sp, #24]
    3b6a:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    3b6c:	4b62      	ldr	r3, [pc, #392]	; (3cf8 <m2m_ip_cb+0x2f8>)
    3b6e:	681b      	ldr	r3, [r3, #0]
    3b70:	2b00      	cmp	r3, #0
    3b72:	d0a1      	beq.n	3ab8 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    3b74:	4b60      	ldr	r3, [pc, #384]	; (3cf8 <m2m_ip_cb+0x2f8>)
    3b76:	681b      	ldr	r3, [r3, #0]
    3b78:	aa05      	add	r2, sp, #20
    3b7a:	2008      	movs	r0, #8
    3b7c:	5610      	ldrsb	r0, [r2, r0]
    3b7e:	aa09      	add	r2, sp, #36	; 0x24
    3b80:	2104      	movs	r1, #4
    3b82:	4798      	blx	r3
    3b84:	e798      	b.n	3ab8 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    3b86:	2300      	movs	r3, #0
    3b88:	2204      	movs	r2, #4
    3b8a:	a909      	add	r1, sp, #36	; 0x24
    3b8c:	0020      	movs	r0, r4
    3b8e:	4c58      	ldr	r4, [pc, #352]	; (3cf0 <m2m_ip_cb+0x2f0>)
    3b90:	47a0      	blx	r4
    3b92:	2800      	cmp	r0, #0
    3b94:	d000      	beq.n	3b98 <m2m_ip_cb+0x198>
    3b96:	e78f      	b.n	3ab8 <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    3b98:	ab09      	add	r3, sp, #36	; 0x24
    3b9a:	2000      	movs	r0, #0
    3b9c:	5618      	ldrsb	r0, [r3, r0]
    3b9e:	aa05      	add	r2, sp, #20
    3ba0:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    3ba2:	785b      	ldrb	r3, [r3, #1]
    3ba4:	b25b      	sxtb	r3, r3
    3ba6:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    3ba8:	2b00      	cmp	r3, #0
    3baa:	d107      	bne.n	3bbc <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    3bac:	ab09      	add	r3, sp, #36	; 0x24
    3bae:	885b      	ldrh	r3, [r3, #2]
    3bb0:	3b08      	subs	r3, #8
    3bb2:	b29b      	uxth	r3, r3
    3bb4:	0101      	lsls	r1, r0, #4
    3bb6:	4a51      	ldr	r2, [pc, #324]	; (3cfc <m2m_ip_cb+0x2fc>)
    3bb8:	1852      	adds	r2, r2, r1
    3bba:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    3bbc:	4b4e      	ldr	r3, [pc, #312]	; (3cf8 <m2m_ip_cb+0x2f8>)
    3bbe:	681b      	ldr	r3, [r3, #0]
    3bc0:	2b00      	cmp	r3, #0
    3bc2:	d100      	bne.n	3bc6 <m2m_ip_cb+0x1c6>
    3bc4:	e778      	b.n	3ab8 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    3bc6:	4b4c      	ldr	r3, [pc, #304]	; (3cf8 <m2m_ip_cb+0x2f8>)
    3bc8:	681b      	ldr	r3, [r3, #0]
    3bca:	aa05      	add	r2, sp, #20
    3bcc:	2105      	movs	r1, #5
    3bce:	4798      	blx	r3
	{
    3bd0:	e772      	b.n	3ab8 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    3bd2:	2300      	movs	r3, #0
    3bd4:	2244      	movs	r2, #68	; 0x44
    3bd6:	a909      	add	r1, sp, #36	; 0x24
    3bd8:	0020      	movs	r0, r4
    3bda:	4c45      	ldr	r4, [pc, #276]	; (3cf0 <m2m_ip_cb+0x2f0>)
    3bdc:	47a0      	blx	r4
    3bde:	2800      	cmp	r0, #0
    3be0:	d000      	beq.n	3be4 <m2m_ip_cb+0x1e4>
    3be2:	e769      	b.n	3ab8 <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    3be4:	4b47      	ldr	r3, [pc, #284]	; (3d04 <m2m_ip_cb+0x304>)
    3be6:	681b      	ldr	r3, [r3, #0]
    3be8:	2b00      	cmp	r3, #0
    3bea:	d100      	bne.n	3bee <m2m_ip_cb+0x1ee>
    3bec:	e764      	b.n	3ab8 <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    3bee:	4b45      	ldr	r3, [pc, #276]	; (3d04 <m2m_ip_cb+0x304>)
    3bf0:	681b      	ldr	r3, [r3, #0]
    3bf2:	9a19      	ldr	r2, [sp, #100]	; 0x64
    3bf4:	9203      	str	r2, [sp, #12]
    3bf6:	0011      	movs	r1, r2
    3bf8:	a809      	add	r0, sp, #36	; 0x24
    3bfa:	4798      	blx	r3
    3bfc:	e75c      	b.n	3ab8 <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    3bfe:	2306      	movs	r3, #6
    3c00:	469a      	mov	sl, r3
    3c02:	e001      	b.n	3c08 <m2m_ip_cb+0x208>
    3c04:	2306      	movs	r3, #6
    3c06:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    3c08:	2300      	movs	r3, #0
    3c0a:	2210      	movs	r2, #16
    3c0c:	a905      	add	r1, sp, #20
    3c0e:	0020      	movs	r0, r4
    3c10:	4f37      	ldr	r7, [pc, #220]	; (3cf0 <m2m_ip_cb+0x2f0>)
    3c12:	47b8      	blx	r7
    3c14:	2800      	cmp	r0, #0
    3c16:	d000      	beq.n	3c1a <m2m_ip_cb+0x21a>
    3c18:	e74e      	b.n	3ab8 <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    3c1a:	aa05      	add	r2, sp, #20
    3c1c:	200c      	movs	r0, #12
    3c1e:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    3c20:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    3c22:	0107      	lsls	r7, r0, #4
    3c24:	4935      	ldr	r1, [pc, #212]	; (3cfc <m2m_ip_cb+0x2fc>)
    3c26:	19c9      	adds	r1, r1, r7
    3c28:	2700      	movs	r7, #0
    3c2a:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    3c2c:	2608      	movs	r6, #8
    3c2e:	5f97      	ldrsh	r7, [r2, r6]
    3c30:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    3c32:	8957      	ldrh	r7, [r2, #10]
    3c34:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    3c36:	af09      	add	r7, sp, #36	; 0x24
    3c38:	8856      	ldrh	r6, [r2, #2]
    3c3a:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    3c3c:	9a06      	ldr	r2, [sp, #24]
    3c3e:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    3c40:	88ca      	ldrh	r2, [r1, #6]
    3c42:	b292      	uxth	r2, r2
    3c44:	4293      	cmp	r3, r2
    3c46:	d00c      	beq.n	3c62 <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    3c48:	2d10      	cmp	r5, #16
    3c4a:	d800      	bhi.n	3c4e <m2m_ip_cb+0x24e>
    3c4c:	e734      	b.n	3ab8 <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    3c4e:	2301      	movs	r3, #1
    3c50:	2200      	movs	r2, #0
    3c52:	2100      	movs	r1, #0
    3c54:	2000      	movs	r0, #0
    3c56:	4c26      	ldr	r4, [pc, #152]	; (3cf0 <m2m_ip_cb+0x2f0>)
    3c58:	47a0      	blx	r4
	{
    3c5a:	e72d      	b.n	3ab8 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    3c5c:	2309      	movs	r3, #9
    3c5e:	469a      	mov	sl, r3
    3c60:	e7d2      	b.n	3c08 <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    3c62:	4643      	mov	r3, r8
    3c64:	2b00      	cmp	r3, #0
    3c66:	dd01      	ble.n	3c6c <m2m_ip_cb+0x26c>
    3c68:	45a8      	cmp	r8, r5
    3c6a:	db0f      	blt.n	3c8c <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    3c6c:	ab09      	add	r3, sp, #36	; 0x24
    3c6e:	4642      	mov	r2, r8
    3c70:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    3c72:	2300      	movs	r3, #0
    3c74:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    3c76:	4b20      	ldr	r3, [pc, #128]	; (3cf8 <m2m_ip_cb+0x2f8>)
    3c78:	681b      	ldr	r3, [r3, #0]
    3c7a:	2b00      	cmp	r3, #0
    3c7c:	d100      	bne.n	3c80 <m2m_ip_cb+0x280>
    3c7e:	e71b      	b.n	3ab8 <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    3c80:	4b1d      	ldr	r3, [pc, #116]	; (3cf8 <m2m_ip_cb+0x2f8>)
    3c82:	681b      	ldr	r3, [r3, #0]
    3c84:	aa09      	add	r2, sp, #36	; 0x24
    3c86:	4651      	mov	r1, sl
    3c88:	4798      	blx	r3
    3c8a:	e715      	b.n	3ab8 <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    3c8c:	0023      	movs	r3, r4
    3c8e:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    3c90:	4642      	mov	r2, r8
    3c92:	4669      	mov	r1, sp
    3c94:	818a      	strh	r2, [r1, #12]
    3c96:	898a      	ldrh	r2, [r1, #12]
    3c98:	9200      	str	r2, [sp, #0]
    3c9a:	4652      	mov	r2, sl
    3c9c:	0039      	movs	r1, r7
    3c9e:	4c1a      	ldr	r4, [pc, #104]	; (3d08 <m2m_ip_cb+0x308>)
    3ca0:	47a0      	blx	r4
    3ca2:	e709      	b.n	3ab8 <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    3ca4:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    3ca6:	2300      	movs	r3, #0
    3ca8:	2208      	movs	r2, #8
    3caa:	a909      	add	r1, sp, #36	; 0x24
    3cac:	0020      	movs	r0, r4
    3cae:	4c10      	ldr	r4, [pc, #64]	; (3cf0 <m2m_ip_cb+0x2f0>)
    3cb0:	47a0      	blx	r4
    3cb2:	2800      	cmp	r0, #0
    3cb4:	d000      	beq.n	3cb8 <m2m_ip_cb+0x2b8>
    3cb6:	e6ff      	b.n	3ab8 <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    3cb8:	ab09      	add	r3, sp, #36	; 0x24
    3cba:	2000      	movs	r0, #0
    3cbc:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    3cbe:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    3cc0:	8859      	ldrh	r1, [r3, #2]
    3cc2:	ab05      	add	r3, sp, #20
    3cc4:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    3cc6:	0101      	lsls	r1, r0, #4
    3cc8:	4b0c      	ldr	r3, [pc, #48]	; (3cfc <m2m_ip_cb+0x2fc>)
    3cca:	185b      	adds	r3, r3, r1
    3ccc:	88db      	ldrh	r3, [r3, #6]
    3cce:	b29b      	uxth	r3, r3
    3cd0:	429a      	cmp	r2, r3
    3cd2:	d000      	beq.n	3cd6 <m2m_ip_cb+0x2d6>
    3cd4:	e6f0      	b.n	3ab8 <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    3cd6:	4b08      	ldr	r3, [pc, #32]	; (3cf8 <m2m_ip_cb+0x2f8>)
    3cd8:	681b      	ldr	r3, [r3, #0]
    3cda:	2b00      	cmp	r3, #0
    3cdc:	d100      	bne.n	3ce0 <m2m_ip_cb+0x2e0>
    3cde:	e6eb      	b.n	3ab8 <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    3ce0:	4b05      	ldr	r3, [pc, #20]	; (3cf8 <m2m_ip_cb+0x2f8>)
    3ce2:	681b      	ldr	r3, [r3, #0]
    3ce4:	aa05      	add	r2, sp, #20
    3ce6:	0029      	movs	r1, r5
    3ce8:	4798      	blx	r3
	{
    3cea:	e6e5      	b.n	3ab8 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    3cec:	2508      	movs	r5, #8
    3cee:	e7da      	b.n	3ca6 <m2m_ip_cb+0x2a6>
    3cf0:	00001c8d 	.word	0x00001c8d
    3cf4:	200003d4 	.word	0x200003d4
    3cf8:	200003d0 	.word	0x200003d0
    3cfc:	20000320 	.word	0x20000320
    3d00:	2000011a 	.word	0x2000011a
    3d04:	200003d8 	.word	0x200003d8
    3d08:	000038ed 	.word	0x000038ed

00003d0c <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    3d0c:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    3d0e:	4b0a      	ldr	r3, [pc, #40]	; (3d38 <socketInit+0x2c>)
    3d10:	781b      	ldrb	r3, [r3, #0]
    3d12:	2b00      	cmp	r3, #0
    3d14:	d000      	beq.n	3d18 <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    3d16:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    3d18:	22b0      	movs	r2, #176	; 0xb0
    3d1a:	2100      	movs	r1, #0
    3d1c:	4807      	ldr	r0, [pc, #28]	; (3d3c <socketInit+0x30>)
    3d1e:	4b08      	ldr	r3, [pc, #32]	; (3d40 <socketInit+0x34>)
    3d20:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    3d22:	4908      	ldr	r1, [pc, #32]	; (3d44 <socketInit+0x38>)
    3d24:	2002      	movs	r0, #2
    3d26:	4b08      	ldr	r3, [pc, #32]	; (3d48 <socketInit+0x3c>)
    3d28:	4798      	blx	r3
		gbSocketInit	= 1;
    3d2a:	2201      	movs	r2, #1
    3d2c:	4b02      	ldr	r3, [pc, #8]	; (3d38 <socketInit+0x2c>)
    3d2e:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    3d30:	2200      	movs	r2, #0
    3d32:	4b06      	ldr	r3, [pc, #24]	; (3d4c <socketInit+0x40>)
    3d34:	801a      	strh	r2, [r3, #0]
}
    3d36:	e7ee      	b.n	3d16 <socketInit+0xa>
    3d38:	20000119 	.word	0x20000119
    3d3c:	20000320 	.word	0x20000320
    3d40:	0000156d 	.word	0x0000156d
    3d44:	00003a01 	.word	0x00003a01
    3d48:	00001d79 	.word	0x00001d79
    3d4c:	2000011a 	.word	0x2000011a

00003d50 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    3d50:	4b02      	ldr	r3, [pc, #8]	; (3d5c <registerSocketCallback+0xc>)
    3d52:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    3d54:	4b02      	ldr	r3, [pc, #8]	; (3d60 <registerSocketCallback+0x10>)
    3d56:	6019      	str	r1, [r3, #0]
}
    3d58:	4770      	bx	lr
    3d5a:	46c0      	nop			; (mov r8, r8)
    3d5c:	200003d0 	.word	0x200003d0
    3d60:	200003d8 	.word	0x200003d8

00003d64 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    3d64:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d66:	46d6      	mov	lr, sl
    3d68:	4647      	mov	r7, r8
    3d6a:	b580      	push	{r7, lr}
    3d6c:	b089      	sub	sp, #36	; 0x24
    3d6e:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    3d70:	2802      	cmp	r0, #2
    3d72:	d000      	beq.n	3d76 <socket+0x12>
    3d74:	e09c      	b.n	3eb0 <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    3d76:	2901      	cmp	r1, #1
    3d78:	d00a      	beq.n	3d90 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    3d7a:	2902      	cmp	r1, #2
    3d7c:	d100      	bne.n	3d80 <socket+0x1c>
    3d7e:	e070      	b.n	3e62 <socket+0xfe>
	SOCKET					sock = -1;
    3d80:	2501      	movs	r5, #1
    3d82:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    3d84:	0028      	movs	r0, r5
    3d86:	b009      	add	sp, #36	; 0x24
    3d88:	bc0c      	pop	{r2, r3}
    3d8a:	4690      	mov	r8, r2
    3d8c:	469a      	mov	sl, r3
    3d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    3d90:	4c49      	ldr	r4, [pc, #292]	; (3eb8 <socket+0x154>)
    3d92:	7827      	ldrb	r7, [r4, #0]
    3d94:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    3d96:	7826      	ldrb	r6, [r4, #0]
    3d98:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    3d9a:	7820      	ldrb	r0, [r4, #0]
    3d9c:	3001      	adds	r0, #1
    3d9e:	3106      	adds	r1, #6
    3da0:	4b46      	ldr	r3, [pc, #280]	; (3ebc <socket+0x158>)
    3da2:	4798      	blx	r3
    3da4:	b2c9      	uxtb	r1, r1
    3da6:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    3da8:	0132      	lsls	r2, r6, #4
    3daa:	4b45      	ldr	r3, [pc, #276]	; (3ec0 <socket+0x15c>)
    3dac:	189b      	adds	r3, r3, r2
    3dae:	7a9b      	ldrb	r3, [r3, #10]
    3db0:	2506      	movs	r5, #6
    3db2:	2b00      	cmp	r3, #0
    3db4:	d018      	beq.n	3de8 <socket+0x84>
				u8SockID	= u8NextTcpSock;
    3db6:	4e40      	ldr	r6, [pc, #256]	; (3eb8 <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    3db8:	4b40      	ldr	r3, [pc, #256]	; (3ebc <socket+0x158>)
    3dba:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    3dbc:	4b40      	ldr	r3, [pc, #256]	; (3ec0 <socket+0x15c>)
    3dbe:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    3dc0:	7837      	ldrb	r7, [r6, #0]
    3dc2:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    3dc4:	7834      	ldrb	r4, [r6, #0]
    3dc6:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    3dc8:	7830      	ldrb	r0, [r6, #0]
    3dca:	3001      	adds	r0, #1
    3dcc:	2107      	movs	r1, #7
    3dce:	47d0      	blx	sl
    3dd0:	b2c9      	uxtb	r1, r1
    3dd2:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    3dd4:	0123      	lsls	r3, r4, #4
    3dd6:	4443      	add	r3, r8
    3dd8:	7a9b      	ldrb	r3, [r3, #10]
    3dda:	2b00      	cmp	r3, #0
    3ddc:	d007      	beq.n	3dee <socket+0x8a>
    3dde:	3d01      	subs	r5, #1
    3de0:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    3de2:	2d00      	cmp	r5, #0
    3de4:	d1ec      	bne.n	3dc0 <socket+0x5c>
    3de6:	e7cb      	b.n	3d80 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    3de8:	4b35      	ldr	r3, [pc, #212]	; (3ec0 <socket+0x15c>)
    3dea:	18d4      	adds	r4, r2, r3
    3dec:	e002      	b.n	3df4 <socket+0x90>
    3dee:	0124      	lsls	r4, r4, #4
    3df0:	4b33      	ldr	r3, [pc, #204]	; (3ec0 <socket+0x15c>)
    3df2:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    3df4:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    3df6:	2d00      	cmp	r5, #0
    3df8:	dbc4      	blt.n	3d84 <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    3dfa:	2210      	movs	r2, #16
    3dfc:	2100      	movs	r1, #0
    3dfe:	0020      	movs	r0, r4
    3e00:	4b30      	ldr	r3, [pc, #192]	; (3ec4 <socket+0x160>)
    3e02:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    3e04:	2301      	movs	r3, #1
    3e06:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    3e08:	4a2f      	ldr	r2, [pc, #188]	; (3ec8 <socket+0x164>)
    3e0a:	8813      	ldrh	r3, [r2, #0]
    3e0c:	3301      	adds	r3, #1
    3e0e:	b29b      	uxth	r3, r3
    3e10:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    3e12:	8813      	ldrh	r3, [r2, #0]
    3e14:	b29b      	uxth	r3, r3
    3e16:	2b00      	cmp	r3, #0
    3e18:	d103      	bne.n	3e22 <socket+0xbe>
				++gu16SessionID;
    3e1a:	8813      	ldrh	r3, [r2, #0]
    3e1c:	3301      	adds	r3, #1
    3e1e:	b29b      	uxth	r3, r3
    3e20:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    3e22:	4e29      	ldr	r6, [pc, #164]	; (3ec8 <socket+0x164>)
    3e24:	8833      	ldrh	r3, [r6, #0]
    3e26:	b29b      	uxth	r3, r3
    3e28:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    3e2a:	4828      	ldr	r0, [pc, #160]	; (3ecc <socket+0x168>)
    3e2c:	4f28      	ldr	r7, [pc, #160]	; (3ed0 <socket+0x16c>)
    3e2e:	47b8      	blx	r7
    3e30:	8832      	ldrh	r2, [r6, #0]
    3e32:	b292      	uxth	r2, r2
    3e34:	0029      	movs	r1, r5
    3e36:	4827      	ldr	r0, [pc, #156]	; (3ed4 <socket+0x170>)
    3e38:	47b8      	blx	r7
    3e3a:	200d      	movs	r0, #13
    3e3c:	4b26      	ldr	r3, [pc, #152]	; (3ed8 <socket+0x174>)
    3e3e:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    3e40:	9b05      	ldr	r3, [sp, #20]
    3e42:	07db      	lsls	r3, r3, #31
    3e44:	d59e      	bpl.n	3d84 <socket+0x20>
				strSSLCreate.sslSock = sock;
    3e46:	aa07      	add	r2, sp, #28
    3e48:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    3e4a:	2321      	movs	r3, #33	; 0x21
    3e4c:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    3e4e:	2300      	movs	r3, #0
    3e50:	9302      	str	r3, [sp, #8]
    3e52:	9301      	str	r3, [sp, #4]
    3e54:	9300      	str	r3, [sp, #0]
    3e56:	3304      	adds	r3, #4
    3e58:	2150      	movs	r1, #80	; 0x50
    3e5a:	2002      	movs	r0, #2
    3e5c:	4c1f      	ldr	r4, [pc, #124]	; (3edc <socket+0x178>)
    3e5e:	47a0      	blx	r4
    3e60:	e790      	b.n	3d84 <socket+0x20>
				u8SockID		= u8NextUdpSock;
    3e62:	4b1f      	ldr	r3, [pc, #124]	; (3ee0 <socket+0x17c>)
    3e64:	781d      	ldrb	r5, [r3, #0]
    3e66:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    3e68:	781c      	ldrb	r4, [r3, #0]
    3e6a:	0124      	lsls	r4, r4, #4
    3e6c:	4a1d      	ldr	r2, [pc, #116]	; (3ee4 <socket+0x180>)
    3e6e:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    3e70:	7819      	ldrb	r1, [r3, #0]
    3e72:	3101      	adds	r1, #1
    3e74:	2203      	movs	r2, #3
    3e76:	400a      	ands	r2, r1
    3e78:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    3e7a:	7aa3      	ldrb	r3, [r4, #10]
    3e7c:	2b00      	cmp	r3, #0
    3e7e:	d014      	beq.n	3eaa <socket+0x146>
    3e80:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    3e82:	4917      	ldr	r1, [pc, #92]	; (3ee0 <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    3e84:	4f17      	ldr	r7, [pc, #92]	; (3ee4 <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    3e86:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    3e88:	780d      	ldrb	r5, [r1, #0]
    3e8a:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    3e8c:	780c      	ldrb	r4, [r1, #0]
    3e8e:	0124      	lsls	r4, r4, #4
    3e90:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    3e92:	780b      	ldrb	r3, [r1, #0]
    3e94:	3301      	adds	r3, #1
    3e96:	4003      	ands	r3, r0
    3e98:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    3e9a:	7aa3      	ldrb	r3, [r4, #10]
    3e9c:	2b00      	cmp	r3, #0
    3e9e:	d004      	beq.n	3eaa <socket+0x146>
    3ea0:	3a01      	subs	r2, #1
    3ea2:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    3ea4:	2a00      	cmp	r2, #0
    3ea6:	d1ef      	bne.n	3e88 <socket+0x124>
    3ea8:	e76a      	b.n	3d80 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    3eaa:	3507      	adds	r5, #7
    3eac:	b26d      	sxtb	r5, r5
					break;
    3eae:	e7a2      	b.n	3df6 <socket+0x92>
	SOCKET					sock = -1;
    3eb0:	2501      	movs	r5, #1
    3eb2:	426d      	negs	r5, r5
    3eb4:	e766      	b.n	3d84 <socket+0x20>
    3eb6:	46c0      	nop			; (mov r8, r8)
    3eb8:	2000011c 	.word	0x2000011c
    3ebc:	00007e7d 	.word	0x00007e7d
    3ec0:	20000320 	.word	0x20000320
    3ec4:	0000156d 	.word	0x0000156d
    3ec8:	2000011a 	.word	0x2000011a
    3ecc:	0000b1c8 	.word	0x0000b1c8
    3ed0:	00009999 	.word	0x00009999
    3ed4:	0000bc58 	.word	0x0000bc58
    3ed8:	000099cd 	.word	0x000099cd
    3edc:	00001681 	.word	0x00001681
    3ee0:	2000011d 	.word	0x2000011d
    3ee4:	20000390 	.word	0x20000390

00003ee8 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    3ee8:	b570      	push	{r4, r5, r6, lr}
    3eea:	b088      	sub	sp, #32
    3eec:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    3eee:	db30      	blt.n	3f52 <connect+0x6a>
    3ef0:	2900      	cmp	r1, #0
    3ef2:	d031      	beq.n	3f58 <connect+0x70>
    3ef4:	0100      	lsls	r0, r0, #4
    3ef6:	4b1d      	ldr	r3, [pc, #116]	; (3f6c <connect+0x84>)
    3ef8:	181b      	adds	r3, r3, r0
    3efa:	7a9b      	ldrb	r3, [r3, #10]
    3efc:	2b01      	cmp	r3, #1
    3efe:	d12e      	bne.n	3f5e <connect+0x76>
    3f00:	2a00      	cmp	r2, #0
    3f02:	d02f      	beq.n	3f64 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    3f04:	4b19      	ldr	r3, [pc, #100]	; (3f6c <connect+0x84>)
    3f06:	181b      	adds	r3, r3, r0
    3f08:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    3f0a:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    3f0c:	07db      	lsls	r3, r3, #31
    3f0e:	d505      	bpl.n	3f1c <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    3f10:	4b16      	ldr	r3, [pc, #88]	; (3f6c <connect+0x84>)
    3f12:	181b      	adds	r3, r3, r0
    3f14:	7ada      	ldrb	r2, [r3, #11]
    3f16:	ab05      	add	r3, sp, #20
    3f18:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    3f1a:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
    3f1c:	ad05      	add	r5, sp, #20
    3f1e:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    3f20:	2208      	movs	r2, #8
    3f22:	0028      	movs	r0, r5
    3f24:	4b12      	ldr	r3, [pc, #72]	; (3f70 <connect+0x88>)
    3f26:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    3f28:	0124      	lsls	r4, r4, #4
    3f2a:	4b10      	ldr	r3, [pc, #64]	; (3f6c <connect+0x84>)
    3f2c:	191c      	adds	r4, r3, r4
    3f2e:	88e3      	ldrh	r3, [r4, #6]
    3f30:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    3f32:	2300      	movs	r3, #0
    3f34:	9302      	str	r3, [sp, #8]
    3f36:	9301      	str	r3, [sp, #4]
    3f38:	9300      	str	r3, [sp, #0]
    3f3a:	330c      	adds	r3, #12
    3f3c:	002a      	movs	r2, r5
    3f3e:	0031      	movs	r1, r6
    3f40:	2002      	movs	r0, #2
    3f42:	4c0c      	ldr	r4, [pc, #48]	; (3f74 <connect+0x8c>)
    3f44:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    3f46:	2800      	cmp	r0, #0
    3f48:	d001      	beq.n	3f4e <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    3f4a:	2009      	movs	r0, #9
    3f4c:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    3f4e:	b008      	add	sp, #32
    3f50:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    3f52:	2006      	movs	r0, #6
    3f54:	4240      	negs	r0, r0
    3f56:	e7fa      	b.n	3f4e <connect+0x66>
    3f58:	2006      	movs	r0, #6
    3f5a:	4240      	negs	r0, r0
    3f5c:	e7f7      	b.n	3f4e <connect+0x66>
    3f5e:	2006      	movs	r0, #6
    3f60:	4240      	negs	r0, r0
    3f62:	e7f4      	b.n	3f4e <connect+0x66>
    3f64:	2006      	movs	r0, #6
    3f66:	4240      	negs	r0, r0
    3f68:	e7f1      	b.n	3f4e <connect+0x66>
    3f6a:	46c0      	nop			; (mov r8, r8)
    3f6c:	20000320 	.word	0x20000320
    3f70:	00001559 	.word	0x00001559
    3f74:	00001681 	.word	0x00001681

00003f78 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    3f78:	b530      	push	{r4, r5, lr}
    3f7a:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    3f7c:	2800      	cmp	r0, #0
    3f7e:	db36      	blt.n	3fee <send+0x76>
    3f80:	2900      	cmp	r1, #0
    3f82:	d037      	beq.n	3ff4 <send+0x7c>
    3f84:	23af      	movs	r3, #175	; 0xaf
    3f86:	00db      	lsls	r3, r3, #3
    3f88:	429a      	cmp	r2, r3
    3f8a:	d836      	bhi.n	3ffa <send+0x82>
    3f8c:	0104      	lsls	r4, r0, #4
    3f8e:	4b1e      	ldr	r3, [pc, #120]	; (4008 <send+0x90>)
    3f90:	191b      	adds	r3, r3, r4
    3f92:	7a9b      	ldrb	r3, [r3, #10]
    3f94:	2b01      	cmp	r3, #1
    3f96:	d133      	bne.n	4000 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    3f98:	ab04      	add	r3, sp, #16
    3f9a:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    3f9c:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    3f9e:	0025      	movs	r5, r4
    3fa0:	4c19      	ldr	r4, [pc, #100]	; (4008 <send+0x90>)
    3fa2:	1964      	adds	r4, r4, r5
    3fa4:	88e4      	ldrh	r4, [r4, #6]
    3fa6:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    3fa8:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    3faa:	2806      	cmp	r0, #6
    3fac:	dd00      	ble.n	3fb0 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    3fae:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3fb0:	0104      	lsls	r4, r0, #4
    3fb2:	4b15      	ldr	r3, [pc, #84]	; (4008 <send+0x90>)
    3fb4:	191b      	adds	r3, r3, r4
    3fb6:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    3fb8:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3fba:	07e4      	lsls	r4, r4, #31
    3fbc:	d505      	bpl.n	3fca <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    3fbe:	0100      	lsls	r0, r0, #4
    3fc0:	4b11      	ldr	r3, [pc, #68]	; (4008 <send+0x90>)
    3fc2:	1818      	adds	r0, r3, r0
    3fc4:	8905      	ldrh	r5, [r0, #8]
    3fc6:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    3fc8:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    3fca:	2080      	movs	r0, #128	; 0x80
    3fcc:	4318      	orrs	r0, r3
    3fce:	9502      	str	r5, [sp, #8]
    3fd0:	9201      	str	r2, [sp, #4]
    3fd2:	9100      	str	r1, [sp, #0]
    3fd4:	2310      	movs	r3, #16
    3fd6:	aa04      	add	r2, sp, #16
    3fd8:	0001      	movs	r1, r0
    3fda:	2002      	movs	r0, #2
    3fdc:	4c0b      	ldr	r4, [pc, #44]	; (400c <send+0x94>)
    3fde:	47a0      	blx	r4
    3fe0:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    3fe2:	2800      	cmp	r0, #0
    3fe4:	d000      	beq.n	3fe8 <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    3fe6:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    3fe8:	0018      	movs	r0, r3
    3fea:	b009      	add	sp, #36	; 0x24
    3fec:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    3fee:	2306      	movs	r3, #6
    3ff0:	425b      	negs	r3, r3
    3ff2:	e7f9      	b.n	3fe8 <send+0x70>
    3ff4:	2306      	movs	r3, #6
    3ff6:	425b      	negs	r3, r3
    3ff8:	e7f6      	b.n	3fe8 <send+0x70>
    3ffa:	2306      	movs	r3, #6
    3ffc:	425b      	negs	r3, r3
    3ffe:	e7f3      	b.n	3fe8 <send+0x70>
    4000:	2306      	movs	r3, #6
    4002:	425b      	negs	r3, r3
    4004:	e7f0      	b.n	3fe8 <send+0x70>
    4006:	46c0      	nop			; (mov r8, r8)
    4008:	20000320 	.word	0x20000320
    400c:	00001681 	.word	0x00001681

00004010 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    4010:	b530      	push	{r4, r5, lr}
    4012:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    4014:	2800      	cmp	r0, #0
    4016:	db34      	blt.n	4082 <recv+0x72>
    4018:	2900      	cmp	r1, #0
    401a:	d035      	beq.n	4088 <recv+0x78>
    401c:	2a00      	cmp	r2, #0
    401e:	d036      	beq.n	408e <recv+0x7e>
    4020:	0105      	lsls	r5, r0, #4
    4022:	4c1e      	ldr	r4, [pc, #120]	; (409c <recv+0x8c>)
    4024:	1964      	adds	r4, r4, r5
    4026:	7aa4      	ldrb	r4, [r4, #10]
    4028:	2c01      	cmp	r4, #1
    402a:	d133      	bne.n	4094 <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    402c:	4c1b      	ldr	r4, [pc, #108]	; (409c <recv+0x8c>)
    402e:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    4030:	1964      	adds	r4, r4, r5
    4032:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    4034:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    4036:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    4038:	2900      	cmp	r1, #0
    403a:	d11d      	bne.n	4078 <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    403c:	2101      	movs	r1, #1
    403e:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    4040:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    4042:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    4044:	07d2      	lsls	r2, r2, #31
    4046:	d500      	bpl.n	404a <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    4048:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    404a:	2b00      	cmp	r3, #0
    404c:	d117      	bne.n	407e <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    404e:	3b01      	subs	r3, #1
    4050:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    4052:	aa04      	add	r2, sp, #16
    4054:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    4056:	0100      	lsls	r0, r0, #4
    4058:	4b10      	ldr	r3, [pc, #64]	; (409c <recv+0x8c>)
    405a:	1818      	adds	r0, r3, r0
    405c:	88c3      	ldrh	r3, [r0, #6]
    405e:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    4060:	2300      	movs	r3, #0
    4062:	9302      	str	r3, [sp, #8]
    4064:	9301      	str	r3, [sp, #4]
    4066:	9300      	str	r3, [sp, #0]
    4068:	3308      	adds	r3, #8
    406a:	2002      	movs	r0, #2
    406c:	4c0c      	ldr	r4, [pc, #48]	; (40a0 <recv+0x90>)
    406e:	47a0      	blx	r4
    4070:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    4072:	2800      	cmp	r0, #0
    4074:	d000      	beq.n	4078 <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    4076:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    4078:	0010      	movs	r0, r2
    407a:	b007      	add	sp, #28
    407c:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    407e:	9304      	str	r3, [sp, #16]
    4080:	e7e7      	b.n	4052 <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    4082:	2206      	movs	r2, #6
    4084:	4252      	negs	r2, r2
    4086:	e7f7      	b.n	4078 <recv+0x68>
    4088:	2206      	movs	r2, #6
    408a:	4252      	negs	r2, r2
    408c:	e7f4      	b.n	4078 <recv+0x68>
    408e:	2206      	movs	r2, #6
    4090:	4252      	negs	r2, r2
    4092:	e7f1      	b.n	4078 <recv+0x68>
    4094:	2206      	movs	r2, #6
    4096:	4252      	negs	r2, r2
    4098:	e7ee      	b.n	4078 <recv+0x68>
    409a:	46c0      	nop			; (mov r8, r8)
    409c:	20000320 	.word	0x20000320
    40a0:	00001681 	.word	0x00001681

000040a4 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    40a4:	b530      	push	{r4, r5, lr}
    40a6:	b087      	sub	sp, #28
    40a8:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    40aa:	481e      	ldr	r0, [pc, #120]	; (4124 <close+0x80>)
    40ac:	4d1e      	ldr	r5, [pc, #120]	; (4128 <close+0x84>)
    40ae:	47a8      	blx	r5
    40b0:	0021      	movs	r1, r4
    40b2:	481e      	ldr	r0, [pc, #120]	; (412c <close+0x88>)
    40b4:	47a8      	blx	r5
    40b6:	200d      	movs	r0, #13
    40b8:	4b1d      	ldr	r3, [pc, #116]	; (4130 <close+0x8c>)
    40ba:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    40bc:	2c00      	cmp	r4, #0
    40be:	db2a      	blt.n	4116 <close+0x72>
    40c0:	0122      	lsls	r2, r4, #4
    40c2:	4b1c      	ldr	r3, [pc, #112]	; (4134 <close+0x90>)
    40c4:	189b      	adds	r3, r3, r2
    40c6:	7a9b      	ldrb	r3, [r3, #10]
    40c8:	2b01      	cmp	r3, #1
    40ca:	d127      	bne.n	411c <close+0x78>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    40cc:	a905      	add	r1, sp, #20
    40ce:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    40d0:	4b18      	ldr	r3, [pc, #96]	; (4134 <close+0x90>)
    40d2:	189b      	adds	r3, r3, r2
    40d4:	88da      	ldrh	r2, [r3, #6]
    40d6:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    40d8:	2200      	movs	r2, #0
    40da:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    40dc:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    40de:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    40e0:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    40e2:	07db      	lsls	r3, r3, #31
    40e4:	d500      	bpl.n	40e8 <close+0x44>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    40e6:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    40e8:	2300      	movs	r3, #0
    40ea:	9302      	str	r3, [sp, #8]
    40ec:	9301      	str	r3, [sp, #4]
    40ee:	9300      	str	r3, [sp, #0]
    40f0:	3304      	adds	r3, #4
    40f2:	aa05      	add	r2, sp, #20
    40f4:	2002      	movs	r0, #2
    40f6:	4d10      	ldr	r5, [pc, #64]	; (4138 <close+0x94>)
    40f8:	47a8      	blx	r5
    40fa:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    40fc:	d001      	beq.n	4102 <close+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    40fe:	2509      	movs	r5, #9
    4100:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    4102:	0124      	lsls	r4, r4, #4
    4104:	480b      	ldr	r0, [pc, #44]	; (4134 <close+0x90>)
    4106:	1820      	adds	r0, r4, r0
    4108:	2210      	movs	r2, #16
    410a:	2100      	movs	r1, #0
    410c:	4b0b      	ldr	r3, [pc, #44]	; (413c <close+0x98>)
    410e:	4798      	blx	r3
	}
	return s8Ret;
}
    4110:	0028      	movs	r0, r5
    4112:	b007      	add	sp, #28
    4114:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    4116:	2506      	movs	r5, #6
    4118:	426d      	negs	r5, r5
    411a:	e7f9      	b.n	4110 <close+0x6c>
    411c:	2506      	movs	r5, #6
    411e:	426d      	negs	r5, r5
    4120:	e7f6      	b.n	4110 <close+0x6c>
    4122:	46c0      	nop			; (mov r8, r8)
    4124:	0000b1c8 	.word	0x0000b1c8
    4128:	00009999 	.word	0x00009999
    412c:	0000bc40 	.word	0x0000bc40
    4130:	000099cd 	.word	0x000099cd
    4134:	20000320 	.word	0x20000320
    4138:	00001681 	.word	0x00001681
    413c:	0000156d 	.word	0x0000156d

00004140 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    4140:	b570      	push	{r4, r5, r6, lr}
    4142:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
    4144:	2300      	movs	r3, #0
    4146:	9301      	str	r3, [sp, #4]
    4148:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
    414a:	2100      	movs	r1, #0
    414c:	7802      	ldrb	r2, [r0, #0]
    414e:	1c44      	adds	r4, r0, #1
    4150:	3005      	adds	r0, #5
    4152:	000b      	movs	r3, r1
    4154:	e009      	b.n	416a <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
    4156:	009d      	lsls	r5, r3, #2
    4158:	195b      	adds	r3, r3, r5
    415a:	005b      	lsls	r3, r3, #1
    415c:	189b      	adds	r3, r3, r2
    415e:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
    4160:	0022      	movs	r2, r4
    4162:	3401      	adds	r4, #1
			if(j > 4)
    4164:	42a0      	cmp	r0, r4
    4166:	d00a      	beq.n	417e <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
    4168:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
    416a:	2a2e      	cmp	r2, #46	; 0x2e
    416c:	d00a      	beq.n	4184 <nmi_inet_addr+0x44>
    416e:	2a00      	cmp	r2, #0
    4170:	d00c      	beq.n	418c <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
    4172:	3a30      	subs	r2, #48	; 0x30
    4174:	b2d2      	uxtb	r2, r2
    4176:	2a09      	cmp	r2, #9
    4178:	d9ed      	bls.n	4156 <nmi_inet_addr+0x16>
				return 0;
    417a:	2000      	movs	r0, #0
    417c:	e000      	b.n	4180 <nmi_inet_addr+0x40>
				return 0;
    417e:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
    4180:	b002      	add	sp, #8
    4182:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
    4184:	466a      	mov	r2, sp
    4186:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    4188:	0020      	movs	r0, r4
    418a:	e002      	b.n	4192 <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
    418c:	466a      	mov	r2, sp
    418e:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    4190:	0020      	movs	r0, r4
    4192:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
    4194:	2e04      	cmp	r6, #4
    4196:	d1d9      	bne.n	414c <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    4198:	2204      	movs	r2, #4
    419a:	4669      	mov	r1, sp
    419c:	a801      	add	r0, sp, #4
    419e:	4b02      	ldr	r3, [pc, #8]	; (41a8 <nmi_inet_addr+0x68>)
    41a0:	4798      	blx	r3
	return u32IP;
    41a2:	9801      	ldr	r0, [sp, #4]
    41a4:	e7ec      	b.n	4180 <nmi_inet_addr+0x40>
    41a6:	46c0      	nop			; (mov r8, r8)
    41a8:	00001559 	.word	0x00001559

000041ac <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    41ac:	b510      	push	{r4, lr}
    41ae:	b084      	sub	sp, #16
    41b0:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    41b2:	4b0b      	ldr	r3, [pc, #44]	; (41e0 <gethostbyname+0x34>)
    41b4:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    41b6:	b2c3      	uxtb	r3, r0
    41b8:	2b40      	cmp	r3, #64	; 0x40
    41ba:	d80d      	bhi.n	41d8 <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    41bc:	23ff      	movs	r3, #255	; 0xff
    41be:	4003      	ands	r3, r0
    41c0:	3301      	adds	r3, #1
    41c2:	2200      	movs	r2, #0
    41c4:	9202      	str	r2, [sp, #8]
    41c6:	9201      	str	r2, [sp, #4]
    41c8:	9200      	str	r2, [sp, #0]
    41ca:	0022      	movs	r2, r4
    41cc:	214a      	movs	r1, #74	; 0x4a
    41ce:	2002      	movs	r0, #2
    41d0:	4c04      	ldr	r4, [pc, #16]	; (41e4 <gethostbyname+0x38>)
    41d2:	47a0      	blx	r4
	}
	return s8Err;
}
    41d4:	b004      	add	sp, #16
    41d6:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    41d8:	2006      	movs	r0, #6
    41da:	4240      	negs	r0, r0
    41dc:	e7fa      	b.n	41d4 <gethostbyname+0x28>
    41de:	46c0      	nop			; (mov r8, r8)
    41e0:	0000157d 	.word	0x0000157d
    41e4:	00001681 	.word	0x00001681

000041e8 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    41e8:	b570      	push	{r4, r5, r6, lr}
    41ea:	b082      	sub	sp, #8
    41ec:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    41ee:	4b2a      	ldr	r3, [pc, #168]	; (4298 <spi_flash_enable+0xb0>)
    41f0:	4798      	blx	r3
    41f2:	0500      	lsls	r0, r0, #20
    41f4:	0d00      	lsrs	r0, r0, #20
    41f6:	4b29      	ldr	r3, [pc, #164]	; (429c <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    41f8:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    41fa:	4298      	cmp	r0, r3
    41fc:	d802      	bhi.n	4204 <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    41fe:	0028      	movs	r0, r5
    4200:	b002      	add	sp, #8
    4202:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    4204:	a901      	add	r1, sp, #4
    4206:	4826      	ldr	r0, [pc, #152]	; (42a0 <spi_flash_enable+0xb8>)
    4208:	4b26      	ldr	r3, [pc, #152]	; (42a4 <spi_flash_enable+0xbc>)
    420a:	4798      	blx	r3
    420c:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    420e:	d1f6      	bne.n	41fe <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    4210:	4b25      	ldr	r3, [pc, #148]	; (42a8 <spi_flash_enable+0xc0>)
    4212:	9a01      	ldr	r2, [sp, #4]
    4214:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    4216:	4925      	ldr	r1, [pc, #148]	; (42ac <spi_flash_enable+0xc4>)
    4218:	4319      	orrs	r1, r3
    421a:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    421c:	4820      	ldr	r0, [pc, #128]	; (42a0 <spi_flash_enable+0xb8>)
    421e:	4b24      	ldr	r3, [pc, #144]	; (42b0 <spi_flash_enable+0xc8>)
    4220:	4798      	blx	r3
		if(enable) {
    4222:	2c00      	cmp	r4, #0
    4224:	d020      	beq.n	4268 <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    4226:	2100      	movs	r1, #0
    4228:	4822      	ldr	r0, [pc, #136]	; (42b4 <spi_flash_enable+0xcc>)
    422a:	4c21      	ldr	r4, [pc, #132]	; (42b0 <spi_flash_enable+0xc8>)
    422c:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    422e:	21ab      	movs	r1, #171	; 0xab
    4230:	4821      	ldr	r0, [pc, #132]	; (42b8 <spi_flash_enable+0xd0>)
    4232:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    4234:	2101      	movs	r1, #1
    4236:	4821      	ldr	r0, [pc, #132]	; (42bc <spi_flash_enable+0xd4>)
    4238:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    423a:	2100      	movs	r1, #0
    423c:	4820      	ldr	r0, [pc, #128]	; (42c0 <spi_flash_enable+0xd8>)
    423e:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    4240:	2181      	movs	r1, #129	; 0x81
    4242:	4820      	ldr	r0, [pc, #128]	; (42c4 <spi_flash_enable+0xdc>)
    4244:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    4246:	4e20      	ldr	r6, [pc, #128]	; (42c8 <spi_flash_enable+0xe0>)
    4248:	4c20      	ldr	r4, [pc, #128]	; (42cc <spi_flash_enable+0xe4>)
    424a:	0030      	movs	r0, r6
    424c:	47a0      	blx	r4
    424e:	2801      	cmp	r0, #1
    4250:	d1fb      	bne.n	424a <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    4252:	4b15      	ldr	r3, [pc, #84]	; (42a8 <spi_flash_enable+0xc0>)
    4254:	9a01      	ldr	r2, [sp, #4]
    4256:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    4258:	2180      	movs	r1, #128	; 0x80
    425a:	0249      	lsls	r1, r1, #9
    425c:	4319      	orrs	r1, r3
    425e:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    4260:	480f      	ldr	r0, [pc, #60]	; (42a0 <spi_flash_enable+0xb8>)
    4262:	4b13      	ldr	r3, [pc, #76]	; (42b0 <spi_flash_enable+0xc8>)
    4264:	4798      	blx	r3
    4266:	e7ca      	b.n	41fe <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    4268:	2100      	movs	r1, #0
    426a:	4812      	ldr	r0, [pc, #72]	; (42b4 <spi_flash_enable+0xcc>)
    426c:	4c10      	ldr	r4, [pc, #64]	; (42b0 <spi_flash_enable+0xc8>)
    426e:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    4270:	21b9      	movs	r1, #185	; 0xb9
    4272:	4811      	ldr	r0, [pc, #68]	; (42b8 <spi_flash_enable+0xd0>)
    4274:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    4276:	2101      	movs	r1, #1
    4278:	4810      	ldr	r0, [pc, #64]	; (42bc <spi_flash_enable+0xd4>)
    427a:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    427c:	2100      	movs	r1, #0
    427e:	4810      	ldr	r0, [pc, #64]	; (42c0 <spi_flash_enable+0xd8>)
    4280:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    4282:	2181      	movs	r1, #129	; 0x81
    4284:	480f      	ldr	r0, [pc, #60]	; (42c4 <spi_flash_enable+0xdc>)
    4286:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    4288:	4e0f      	ldr	r6, [pc, #60]	; (42c8 <spi_flash_enable+0xe0>)
    428a:	4c10      	ldr	r4, [pc, #64]	; (42cc <spi_flash_enable+0xe4>)
    428c:	0030      	movs	r0, r6
    428e:	47a0      	blx	r4
    4290:	2801      	cmp	r0, #1
    4292:	d1fb      	bne.n	428c <spi_flash_enable+0xa4>
    4294:	e7dd      	b.n	4252 <spi_flash_enable+0x6a>
    4296:	46c0      	nop			; (mov r8, r8)
    4298:	00002565 	.word	0x00002565
    429c:	0000039f 	.word	0x0000039f
    42a0:	00001410 	.word	0x00001410
    42a4:	000029b5 	.word	0x000029b5
    42a8:	f8888fff 	.word	0xf8888fff
    42ac:	01111000 	.word	0x01111000
    42b0:	000029c1 	.word	0x000029c1
    42b4:	00010208 	.word	0x00010208
    42b8:	0001020c 	.word	0x0001020c
    42bc:	00010214 	.word	0x00010214
    42c0:	0001021c 	.word	0x0001021c
    42c4:	00010204 	.word	0x00010204
    42c8:	00010218 	.word	0x00010218
    42cc:	000029a9 	.word	0x000029a9

000042d0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    42d0:	4b0c      	ldr	r3, [pc, #48]	; (4304 <cpu_irq_enter_critical+0x34>)
    42d2:	681b      	ldr	r3, [r3, #0]
    42d4:	2b00      	cmp	r3, #0
    42d6:	d106      	bne.n	42e6 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    42d8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    42dc:	2b00      	cmp	r3, #0
    42de:	d007      	beq.n	42f0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    42e0:	2200      	movs	r2, #0
    42e2:	4b09      	ldr	r3, [pc, #36]	; (4308 <cpu_irq_enter_critical+0x38>)
    42e4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    42e6:	4a07      	ldr	r2, [pc, #28]	; (4304 <cpu_irq_enter_critical+0x34>)
    42e8:	6813      	ldr	r3, [r2, #0]
    42ea:	3301      	adds	r3, #1
    42ec:	6013      	str	r3, [r2, #0]
}
    42ee:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    42f0:	b672      	cpsid	i
    42f2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    42f6:	2200      	movs	r2, #0
    42f8:	4b04      	ldr	r3, [pc, #16]	; (430c <cpu_irq_enter_critical+0x3c>)
    42fa:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    42fc:	3201      	adds	r2, #1
    42fe:	4b02      	ldr	r3, [pc, #8]	; (4308 <cpu_irq_enter_critical+0x38>)
    4300:	701a      	strb	r2, [r3, #0]
    4302:	e7f0      	b.n	42e6 <cpu_irq_enter_critical+0x16>
    4304:	20000120 	.word	0x20000120
    4308:	20000124 	.word	0x20000124
    430c:	2000000a 	.word	0x2000000a

00004310 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4310:	4b08      	ldr	r3, [pc, #32]	; (4334 <cpu_irq_leave_critical+0x24>)
    4312:	681a      	ldr	r2, [r3, #0]
    4314:	3a01      	subs	r2, #1
    4316:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    4318:	681b      	ldr	r3, [r3, #0]
    431a:	2b00      	cmp	r3, #0
    431c:	d109      	bne.n	4332 <cpu_irq_leave_critical+0x22>
    431e:	4b06      	ldr	r3, [pc, #24]	; (4338 <cpu_irq_leave_critical+0x28>)
    4320:	781b      	ldrb	r3, [r3, #0]
    4322:	2b00      	cmp	r3, #0
    4324:	d005      	beq.n	4332 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    4326:	2201      	movs	r2, #1
    4328:	4b04      	ldr	r3, [pc, #16]	; (433c <cpu_irq_leave_critical+0x2c>)
    432a:	701a      	strb	r2, [r3, #0]
    432c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4330:	b662      	cpsie	i
	}
}
    4332:	4770      	bx	lr
    4334:	20000120 	.word	0x20000120
    4338:	20000124 	.word	0x20000124
    433c:	2000000a 	.word	0x2000000a

00004340 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    4340:	b5f0      	push	{r4, r5, r6, r7, lr}
    4342:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    4344:	ac01      	add	r4, sp, #4
    4346:	2501      	movs	r5, #1
    4348:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    434a:	2700      	movs	r7, #0
    434c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    434e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    4350:	0021      	movs	r1, r4
    4352:	203e      	movs	r0, #62	; 0x3e
    4354:	4e06      	ldr	r6, [pc, #24]	; (4370 <system_board_init+0x30>)
    4356:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    4358:	2280      	movs	r2, #128	; 0x80
    435a:	05d2      	lsls	r2, r2, #23
    435c:	4b05      	ldr	r3, [pc, #20]	; (4374 <system_board_init+0x34>)
    435e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    4360:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    4362:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    4364:	0021      	movs	r1, r4
    4366:	200f      	movs	r0, #15
    4368:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    436a:	b003      	add	sp, #12
    436c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    436e:	46c0      	nop			; (mov r8, r8)
    4370:	00004549 	.word	0x00004549
    4374:	41004480 	.word	0x41004480

00004378 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4378:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    437a:	2a00      	cmp	r2, #0
    437c:	d001      	beq.n	4382 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    437e:	0018      	movs	r0, r3
    4380:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    4382:	008b      	lsls	r3, r1, #2
    4384:	4a06      	ldr	r2, [pc, #24]	; (43a0 <extint_register_callback+0x28>)
    4386:	589b      	ldr	r3, [r3, r2]
    4388:	2b00      	cmp	r3, #0
    438a:	d003      	beq.n	4394 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    438c:	4283      	cmp	r3, r0
    438e:	d005      	beq.n	439c <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    4390:	231d      	movs	r3, #29
    4392:	e7f4      	b.n	437e <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    4394:	0089      	lsls	r1, r1, #2
    4396:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    4398:	2300      	movs	r3, #0
    439a:	e7f0      	b.n	437e <extint_register_callback+0x6>
		return STATUS_OK;
    439c:	2300      	movs	r3, #0
    439e:	e7ee      	b.n	437e <extint_register_callback+0x6>
    43a0:	200003e0 	.word	0x200003e0

000043a4 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    43a4:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    43a6:	2900      	cmp	r1, #0
    43a8:	d001      	beq.n	43ae <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    43aa:	0018      	movs	r0, r3
    43ac:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    43ae:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    43b0:	281f      	cmp	r0, #31
    43b2:	d800      	bhi.n	43b6 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    43b4:	4a02      	ldr	r2, [pc, #8]	; (43c0 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    43b6:	2301      	movs	r3, #1
    43b8:	4083      	lsls	r3, r0
    43ba:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    43bc:	2300      	movs	r3, #0
    43be:	e7f4      	b.n	43aa <extint_chan_enable_callback+0x6>
    43c0:	40001800 	.word	0x40001800

000043c4 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    43c4:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    43c6:	2900      	cmp	r1, #0
    43c8:	d001      	beq.n	43ce <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    43ca:	0018      	movs	r0, r3
    43cc:	4770      	bx	lr
		return NULL;
    43ce:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    43d0:	281f      	cmp	r0, #31
    43d2:	d800      	bhi.n	43d6 <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    43d4:	4a02      	ldr	r2, [pc, #8]	; (43e0 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    43d6:	2301      	movs	r3, #1
    43d8:	4083      	lsls	r3, r0
    43da:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    43dc:	2300      	movs	r3, #0
    43de:	e7f4      	b.n	43ca <extint_chan_disable_callback+0x6>
    43e0:	40001800 	.word	0x40001800

000043e4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    43e4:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    43e6:	2200      	movs	r2, #0
    43e8:	4b10      	ldr	r3, [pc, #64]	; (442c <EIC_Handler+0x48>)
    43ea:	701a      	strb	r2, [r3, #0]
    43ec:	2300      	movs	r3, #0
    43ee:	4910      	ldr	r1, [pc, #64]	; (4430 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    43f0:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    43f2:	4e10      	ldr	r6, [pc, #64]	; (4434 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    43f4:	4c0d      	ldr	r4, [pc, #52]	; (442c <EIC_Handler+0x48>)
    43f6:	e00a      	b.n	440e <EIC_Handler+0x2a>
		return eics[eic_index];
    43f8:	490d      	ldr	r1, [pc, #52]	; (4430 <EIC_Handler+0x4c>)
    43fa:	e008      	b.n	440e <EIC_Handler+0x2a>
    43fc:	7823      	ldrb	r3, [r4, #0]
    43fe:	3301      	adds	r3, #1
    4400:	b2db      	uxtb	r3, r3
    4402:	7023      	strb	r3, [r4, #0]
    4404:	2b0f      	cmp	r3, #15
    4406:	d810      	bhi.n	442a <EIC_Handler+0x46>
		return NULL;
    4408:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    440a:	2b1f      	cmp	r3, #31
    440c:	d9f4      	bls.n	43f8 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    440e:	0028      	movs	r0, r5
    4410:	4018      	ands	r0, r3
    4412:	2201      	movs	r2, #1
    4414:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    4416:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    4418:	4210      	tst	r0, r2
    441a:	d0ef      	beq.n	43fc <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    441c:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    441e:	009b      	lsls	r3, r3, #2
    4420:	599b      	ldr	r3, [r3, r6]
    4422:	2b00      	cmp	r3, #0
    4424:	d0ea      	beq.n	43fc <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    4426:	4798      	blx	r3
    4428:	e7e8      	b.n	43fc <EIC_Handler+0x18>
			}
		}
	}
}
    442a:	bd70      	pop	{r4, r5, r6, pc}
    442c:	200003dc 	.word	0x200003dc
    4430:	40001800 	.word	0x40001800
    4434:	200003e0 	.word	0x200003e0

00004438 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    4438:	4a04      	ldr	r2, [pc, #16]	; (444c <_extint_enable+0x14>)
    443a:	7813      	ldrb	r3, [r2, #0]
    443c:	2102      	movs	r1, #2
    443e:	430b      	orrs	r3, r1
    4440:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    4442:	7853      	ldrb	r3, [r2, #1]
    4444:	b25b      	sxtb	r3, r3
    4446:	2b00      	cmp	r3, #0
    4448:	dbfb      	blt.n	4442 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    444a:	4770      	bx	lr
    444c:	40001800 	.word	0x40001800

00004450 <_system_extint_init>:
{
    4450:	b500      	push	{lr}
    4452:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    4454:	4a12      	ldr	r2, [pc, #72]	; (44a0 <_system_extint_init+0x50>)
    4456:	6993      	ldr	r3, [r2, #24]
    4458:	2140      	movs	r1, #64	; 0x40
    445a:	430b      	orrs	r3, r1
    445c:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    445e:	a901      	add	r1, sp, #4
    4460:	2300      	movs	r3, #0
    4462:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    4464:	2005      	movs	r0, #5
    4466:	4b0f      	ldr	r3, [pc, #60]	; (44a4 <_system_extint_init+0x54>)
    4468:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    446a:	2005      	movs	r0, #5
    446c:	4b0e      	ldr	r3, [pc, #56]	; (44a8 <_system_extint_init+0x58>)
    446e:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    4470:	4a0e      	ldr	r2, [pc, #56]	; (44ac <_system_extint_init+0x5c>)
    4472:	7813      	ldrb	r3, [r2, #0]
    4474:	2101      	movs	r1, #1
    4476:	430b      	orrs	r3, r1
    4478:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    447a:	7853      	ldrb	r3, [r2, #1]
    447c:	b25b      	sxtb	r3, r3
    447e:	2b00      	cmp	r3, #0
    4480:	dbfb      	blt.n	447a <_system_extint_init+0x2a>
    4482:	4b0b      	ldr	r3, [pc, #44]	; (44b0 <_system_extint_init+0x60>)
    4484:	0019      	movs	r1, r3
    4486:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    4488:	2200      	movs	r2, #0
    448a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    448c:	4299      	cmp	r1, r3
    448e:	d1fc      	bne.n	448a <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4490:	2210      	movs	r2, #16
    4492:	4b08      	ldr	r3, [pc, #32]	; (44b4 <_system_extint_init+0x64>)
    4494:	601a      	str	r2, [r3, #0]
	_extint_enable();
    4496:	4b08      	ldr	r3, [pc, #32]	; (44b8 <_system_extint_init+0x68>)
    4498:	4798      	blx	r3
}
    449a:	b003      	add	sp, #12
    449c:	bd00      	pop	{pc}
    449e:	46c0      	nop			; (mov r8, r8)
    44a0:	40000400 	.word	0x40000400
    44a4:	00005a1d 	.word	0x00005a1d
    44a8:	00005991 	.word	0x00005991
    44ac:	40001800 	.word	0x40001800
    44b0:	200003e0 	.word	0x200003e0
    44b4:	e000e100 	.word	0xe000e100
    44b8:	00004439 	.word	0x00004439

000044bc <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    44bc:	2300      	movs	r3, #0
    44be:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    44c0:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    44c2:	2201      	movs	r2, #1
    44c4:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    44c6:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    44c8:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    44ca:	3302      	adds	r3, #2
    44cc:	72c3      	strb	r3, [r0, #11]
}
    44ce:	4770      	bx	lr

000044d0 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    44d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    44d2:	b083      	sub	sp, #12
    44d4:	0005      	movs	r5, r0
    44d6:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    44d8:	a901      	add	r1, sp, #4
    44da:	2300      	movs	r3, #0
    44dc:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    44de:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    44e0:	7923      	ldrb	r3, [r4, #4]
    44e2:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    44e4:	7a23      	ldrb	r3, [r4, #8]
    44e6:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    44e8:	7820      	ldrb	r0, [r4, #0]
    44ea:	4b15      	ldr	r3, [pc, #84]	; (4540 <extint_chan_set_config+0x70>)
    44ec:	4798      	blx	r3
		return NULL;
    44ee:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    44f0:	2d1f      	cmp	r5, #31
    44f2:	d800      	bhi.n	44f6 <extint_chan_set_config+0x26>
		return eics[eic_index];
    44f4:	4813      	ldr	r0, [pc, #76]	; (4544 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    44f6:	2207      	movs	r2, #7
    44f8:	402a      	ands	r2, r5
    44fa:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    44fc:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    44fe:	7aa3      	ldrb	r3, [r4, #10]
    4500:	2b00      	cmp	r3, #0
    4502:	d001      	beq.n	4508 <extint_chan_set_config+0x38>
    4504:	2308      	movs	r3, #8
    4506:	431f      	orrs	r7, r3
    4508:	08eb      	lsrs	r3, r5, #3
    450a:	009b      	lsls	r3, r3, #2
    450c:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    450e:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4510:	260f      	movs	r6, #15
    4512:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    4514:	43b1      	bics	r1, r6
			(new_config << config_pos);
    4516:	4097      	lsls	r7, r2
    4518:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    451a:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    451c:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    451e:	7a63      	ldrb	r3, [r4, #9]
    4520:	2b00      	cmp	r3, #0
    4522:	d106      	bne.n	4532 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    4524:	6943      	ldr	r3, [r0, #20]
    4526:	2201      	movs	r2, #1
    4528:	40aa      	lsls	r2, r5
    452a:	4393      	bics	r3, r2
    452c:	6143      	str	r3, [r0, #20]
	}
}
    452e:	b003      	add	sp, #12
    4530:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    4532:	6942      	ldr	r2, [r0, #20]
    4534:	2301      	movs	r3, #1
    4536:	40ab      	lsls	r3, r5
    4538:	4313      	orrs	r3, r2
    453a:	6143      	str	r3, [r0, #20]
    453c:	e7f7      	b.n	452e <extint_chan_set_config+0x5e>
    453e:	46c0      	nop			; (mov r8, r8)
    4540:	00005b15 	.word	0x00005b15
    4544:	40001800 	.word	0x40001800

00004548 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    4548:	b500      	push	{lr}
    454a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    454c:	ab01      	add	r3, sp, #4
    454e:	2280      	movs	r2, #128	; 0x80
    4550:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    4552:	780a      	ldrb	r2, [r1, #0]
    4554:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    4556:	784a      	ldrb	r2, [r1, #1]
    4558:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    455a:	788a      	ldrb	r2, [r1, #2]
    455c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    455e:	0019      	movs	r1, r3
    4560:	4b01      	ldr	r3, [pc, #4]	; (4568 <port_pin_set_config+0x20>)
    4562:	4798      	blx	r3
}
    4564:	b003      	add	sp, #12
    4566:	bd00      	pop	{pc}
    4568:	00005b15 	.word	0x00005b15

0000456c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    456c:	b5f0      	push	{r4, r5, r6, r7, lr}
    456e:	46de      	mov	lr, fp
    4570:	4657      	mov	r7, sl
    4572:	464e      	mov	r6, r9
    4574:	4645      	mov	r5, r8
    4576:	b5e0      	push	{r5, r6, r7, lr}
    4578:	b087      	sub	sp, #28
    457a:	4680      	mov	r8, r0
    457c:	9104      	str	r1, [sp, #16]
    457e:	0016      	movs	r6, r2
    4580:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    4582:	2200      	movs	r2, #0
    4584:	2300      	movs	r3, #0
    4586:	2100      	movs	r1, #0
    4588:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    458a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    458c:	2001      	movs	r0, #1
    458e:	0021      	movs	r1, r4
    4590:	9600      	str	r6, [sp, #0]
    4592:	9701      	str	r7, [sp, #4]
    4594:	465c      	mov	r4, fp
    4596:	9403      	str	r4, [sp, #12]
    4598:	4644      	mov	r4, r8
    459a:	9405      	str	r4, [sp, #20]
    459c:	e013      	b.n	45c6 <long_division+0x5a>
    459e:	2420      	movs	r4, #32
    45a0:	1a64      	subs	r4, r4, r1
    45a2:	0005      	movs	r5, r0
    45a4:	40e5      	lsrs	r5, r4
    45a6:	46a8      	mov	r8, r5
    45a8:	e014      	b.n	45d4 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    45aa:	9c00      	ldr	r4, [sp, #0]
    45ac:	9d01      	ldr	r5, [sp, #4]
    45ae:	1b12      	subs	r2, r2, r4
    45b0:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    45b2:	465c      	mov	r4, fp
    45b4:	464d      	mov	r5, r9
    45b6:	432c      	orrs	r4, r5
    45b8:	46a3      	mov	fp, r4
    45ba:	9c03      	ldr	r4, [sp, #12]
    45bc:	4645      	mov	r5, r8
    45be:	432c      	orrs	r4, r5
    45c0:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    45c2:	3901      	subs	r1, #1
    45c4:	d325      	bcc.n	4612 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    45c6:	2420      	movs	r4, #32
    45c8:	4264      	negs	r4, r4
    45ca:	190c      	adds	r4, r1, r4
    45cc:	d4e7      	bmi.n	459e <long_division+0x32>
    45ce:	0005      	movs	r5, r0
    45d0:	40a5      	lsls	r5, r4
    45d2:	46a8      	mov	r8, r5
    45d4:	0004      	movs	r4, r0
    45d6:	408c      	lsls	r4, r1
    45d8:	46a1      	mov	r9, r4
		r = r << 1;
    45da:	1892      	adds	r2, r2, r2
    45dc:	415b      	adcs	r3, r3
    45de:	0014      	movs	r4, r2
    45e0:	001d      	movs	r5, r3
		if (n & bit_shift) {
    45e2:	9e05      	ldr	r6, [sp, #20]
    45e4:	464f      	mov	r7, r9
    45e6:	403e      	ands	r6, r7
    45e8:	46b4      	mov	ip, r6
    45ea:	9e04      	ldr	r6, [sp, #16]
    45ec:	4647      	mov	r7, r8
    45ee:	403e      	ands	r6, r7
    45f0:	46b2      	mov	sl, r6
    45f2:	4666      	mov	r6, ip
    45f4:	4657      	mov	r7, sl
    45f6:	433e      	orrs	r6, r7
    45f8:	d003      	beq.n	4602 <long_division+0x96>
			r |= 0x01;
    45fa:	0006      	movs	r6, r0
    45fc:	4326      	orrs	r6, r4
    45fe:	0032      	movs	r2, r6
    4600:	002b      	movs	r3, r5
		if (r >= d) {
    4602:	9c00      	ldr	r4, [sp, #0]
    4604:	9d01      	ldr	r5, [sp, #4]
    4606:	429d      	cmp	r5, r3
    4608:	d8db      	bhi.n	45c2 <long_division+0x56>
    460a:	d1ce      	bne.n	45aa <long_division+0x3e>
    460c:	4294      	cmp	r4, r2
    460e:	d8d8      	bhi.n	45c2 <long_division+0x56>
    4610:	e7cb      	b.n	45aa <long_division+0x3e>
    4612:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    4614:	4658      	mov	r0, fp
    4616:	0019      	movs	r1, r3
    4618:	b007      	add	sp, #28
    461a:	bc3c      	pop	{r2, r3, r4, r5}
    461c:	4690      	mov	r8, r2
    461e:	4699      	mov	r9, r3
    4620:	46a2      	mov	sl, r4
    4622:	46ab      	mov	fp, r5
    4624:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004626 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    4626:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    4628:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    462a:	2340      	movs	r3, #64	; 0x40
    462c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    462e:	4281      	cmp	r1, r0
    4630:	d202      	bcs.n	4638 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    4632:	0018      	movs	r0, r3
    4634:	bd10      	pop	{r4, pc}
		baud_calculated++;
    4636:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    4638:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    463a:	1c63      	adds	r3, r4, #1
    463c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    463e:	4288      	cmp	r0, r1
    4640:	d9f9      	bls.n	4636 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4642:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    4644:	2cff      	cmp	r4, #255	; 0xff
    4646:	d8f4      	bhi.n	4632 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    4648:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    464a:	2300      	movs	r3, #0
    464c:	e7f1      	b.n	4632 <_sercom_get_sync_baud_val+0xc>
	...

00004650 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    4650:	b5f0      	push	{r4, r5, r6, r7, lr}
    4652:	b083      	sub	sp, #12
    4654:	000f      	movs	r7, r1
    4656:	0016      	movs	r6, r2
    4658:	aa08      	add	r2, sp, #32
    465a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    465c:	0004      	movs	r4, r0
    465e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4660:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    4662:	42bc      	cmp	r4, r7
    4664:	d902      	bls.n	466c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    4666:	0010      	movs	r0, r2
    4668:	b003      	add	sp, #12
    466a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    466c:	2b00      	cmp	r3, #0
    466e:	d114      	bne.n	469a <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    4670:	0002      	movs	r2, r0
    4672:	0008      	movs	r0, r1
    4674:	2100      	movs	r1, #0
    4676:	4c19      	ldr	r4, [pc, #100]	; (46dc <_sercom_get_async_baud_val+0x8c>)
    4678:	47a0      	blx	r4
    467a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    467c:	003a      	movs	r2, r7
    467e:	2300      	movs	r3, #0
    4680:	2000      	movs	r0, #0
    4682:	4c17      	ldr	r4, [pc, #92]	; (46e0 <_sercom_get_async_baud_val+0x90>)
    4684:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    4686:	2200      	movs	r2, #0
    4688:	2301      	movs	r3, #1
    468a:	1a12      	subs	r2, r2, r0
    468c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    468e:	0c12      	lsrs	r2, r2, #16
    4690:	041b      	lsls	r3, r3, #16
    4692:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    4694:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    4696:	2200      	movs	r2, #0
    4698:	e7e5      	b.n	4666 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    469a:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    469c:	2b01      	cmp	r3, #1
    469e:	d1f9      	bne.n	4694 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    46a0:	000a      	movs	r2, r1
    46a2:	2300      	movs	r3, #0
    46a4:	2100      	movs	r1, #0
    46a6:	4c0d      	ldr	r4, [pc, #52]	; (46dc <_sercom_get_async_baud_val+0x8c>)
    46a8:	47a0      	blx	r4
    46aa:	0002      	movs	r2, r0
    46ac:	000b      	movs	r3, r1
    46ae:	9200      	str	r2, [sp, #0]
    46b0:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    46b2:	0038      	movs	r0, r7
    46b4:	2100      	movs	r1, #0
    46b6:	4c0a      	ldr	r4, [pc, #40]	; (46e0 <_sercom_get_async_baud_val+0x90>)
    46b8:	47a0      	blx	r4
    46ba:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    46bc:	2380      	movs	r3, #128	; 0x80
    46be:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    46c0:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    46c2:	4298      	cmp	r0, r3
    46c4:	d8cf      	bhi.n	4666 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    46c6:	0f79      	lsrs	r1, r7, #29
    46c8:	00f8      	lsls	r0, r7, #3
    46ca:	9a00      	ldr	r2, [sp, #0]
    46cc:	9b01      	ldr	r3, [sp, #4]
    46ce:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    46d0:	00ea      	lsls	r2, r5, #3
    46d2:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    46d4:	b2d2      	uxtb	r2, r2
    46d6:	0352      	lsls	r2, r2, #13
    46d8:	432a      	orrs	r2, r5
    46da:	e7db      	b.n	4694 <_sercom_get_async_baud_val+0x44>
    46dc:	00007e89 	.word	0x00007e89
    46e0:	0000456d 	.word	0x0000456d

000046e4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    46e4:	b510      	push	{r4, lr}
    46e6:	b082      	sub	sp, #8
    46e8:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    46ea:	4b0e      	ldr	r3, [pc, #56]	; (4724 <sercom_set_gclk_generator+0x40>)
    46ec:	781b      	ldrb	r3, [r3, #0]
    46ee:	2b00      	cmp	r3, #0
    46f0:	d007      	beq.n	4702 <sercom_set_gclk_generator+0x1e>
    46f2:	2900      	cmp	r1, #0
    46f4:	d105      	bne.n	4702 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    46f6:	4b0b      	ldr	r3, [pc, #44]	; (4724 <sercom_set_gclk_generator+0x40>)
    46f8:	785b      	ldrb	r3, [r3, #1]
    46fa:	4283      	cmp	r3, r0
    46fc:	d010      	beq.n	4720 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    46fe:	201d      	movs	r0, #29
    4700:	e00c      	b.n	471c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    4702:	a901      	add	r1, sp, #4
    4704:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    4706:	2013      	movs	r0, #19
    4708:	4b07      	ldr	r3, [pc, #28]	; (4728 <sercom_set_gclk_generator+0x44>)
    470a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    470c:	2013      	movs	r0, #19
    470e:	4b07      	ldr	r3, [pc, #28]	; (472c <sercom_set_gclk_generator+0x48>)
    4710:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    4712:	4b04      	ldr	r3, [pc, #16]	; (4724 <sercom_set_gclk_generator+0x40>)
    4714:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    4716:	2201      	movs	r2, #1
    4718:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    471a:	2000      	movs	r0, #0
}
    471c:	b002      	add	sp, #8
    471e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    4720:	2000      	movs	r0, #0
    4722:	e7fb      	b.n	471c <sercom_set_gclk_generator+0x38>
    4724:	20000128 	.word	0x20000128
    4728:	00005a1d 	.word	0x00005a1d
    472c:	00005991 	.word	0x00005991

00004730 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    4730:	4b40      	ldr	r3, [pc, #256]	; (4834 <_sercom_get_default_pad+0x104>)
    4732:	4298      	cmp	r0, r3
    4734:	d031      	beq.n	479a <_sercom_get_default_pad+0x6a>
    4736:	d90a      	bls.n	474e <_sercom_get_default_pad+0x1e>
    4738:	4b3f      	ldr	r3, [pc, #252]	; (4838 <_sercom_get_default_pad+0x108>)
    473a:	4298      	cmp	r0, r3
    473c:	d04d      	beq.n	47da <_sercom_get_default_pad+0xaa>
    473e:	4b3f      	ldr	r3, [pc, #252]	; (483c <_sercom_get_default_pad+0x10c>)
    4740:	4298      	cmp	r0, r3
    4742:	d05a      	beq.n	47fa <_sercom_get_default_pad+0xca>
    4744:	4b3e      	ldr	r3, [pc, #248]	; (4840 <_sercom_get_default_pad+0x110>)
    4746:	4298      	cmp	r0, r3
    4748:	d037      	beq.n	47ba <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    474a:	2000      	movs	r0, #0
}
    474c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    474e:	4b3d      	ldr	r3, [pc, #244]	; (4844 <_sercom_get_default_pad+0x114>)
    4750:	4298      	cmp	r0, r3
    4752:	d00c      	beq.n	476e <_sercom_get_default_pad+0x3e>
    4754:	4b3c      	ldr	r3, [pc, #240]	; (4848 <_sercom_get_default_pad+0x118>)
    4756:	4298      	cmp	r0, r3
    4758:	d1f7      	bne.n	474a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    475a:	2901      	cmp	r1, #1
    475c:	d017      	beq.n	478e <_sercom_get_default_pad+0x5e>
    475e:	2900      	cmp	r1, #0
    4760:	d05d      	beq.n	481e <_sercom_get_default_pad+0xee>
    4762:	2902      	cmp	r1, #2
    4764:	d015      	beq.n	4792 <_sercom_get_default_pad+0x62>
    4766:	2903      	cmp	r1, #3
    4768:	d015      	beq.n	4796 <_sercom_get_default_pad+0x66>
	return 0;
    476a:	2000      	movs	r0, #0
    476c:	e7ee      	b.n	474c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    476e:	2901      	cmp	r1, #1
    4770:	d007      	beq.n	4782 <_sercom_get_default_pad+0x52>
    4772:	2900      	cmp	r1, #0
    4774:	d051      	beq.n	481a <_sercom_get_default_pad+0xea>
    4776:	2902      	cmp	r1, #2
    4778:	d005      	beq.n	4786 <_sercom_get_default_pad+0x56>
    477a:	2903      	cmp	r1, #3
    477c:	d005      	beq.n	478a <_sercom_get_default_pad+0x5a>
	return 0;
    477e:	2000      	movs	r0, #0
    4780:	e7e4      	b.n	474c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4782:	4832      	ldr	r0, [pc, #200]	; (484c <_sercom_get_default_pad+0x11c>)
    4784:	e7e2      	b.n	474c <_sercom_get_default_pad+0x1c>
    4786:	4832      	ldr	r0, [pc, #200]	; (4850 <_sercom_get_default_pad+0x120>)
    4788:	e7e0      	b.n	474c <_sercom_get_default_pad+0x1c>
    478a:	4832      	ldr	r0, [pc, #200]	; (4854 <_sercom_get_default_pad+0x124>)
    478c:	e7de      	b.n	474c <_sercom_get_default_pad+0x1c>
    478e:	4832      	ldr	r0, [pc, #200]	; (4858 <_sercom_get_default_pad+0x128>)
    4790:	e7dc      	b.n	474c <_sercom_get_default_pad+0x1c>
    4792:	4832      	ldr	r0, [pc, #200]	; (485c <_sercom_get_default_pad+0x12c>)
    4794:	e7da      	b.n	474c <_sercom_get_default_pad+0x1c>
    4796:	4832      	ldr	r0, [pc, #200]	; (4860 <_sercom_get_default_pad+0x130>)
    4798:	e7d8      	b.n	474c <_sercom_get_default_pad+0x1c>
    479a:	2901      	cmp	r1, #1
    479c:	d007      	beq.n	47ae <_sercom_get_default_pad+0x7e>
    479e:	2900      	cmp	r1, #0
    47a0:	d03f      	beq.n	4822 <_sercom_get_default_pad+0xf2>
    47a2:	2902      	cmp	r1, #2
    47a4:	d005      	beq.n	47b2 <_sercom_get_default_pad+0x82>
    47a6:	2903      	cmp	r1, #3
    47a8:	d005      	beq.n	47b6 <_sercom_get_default_pad+0x86>
	return 0;
    47aa:	2000      	movs	r0, #0
    47ac:	e7ce      	b.n	474c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    47ae:	482d      	ldr	r0, [pc, #180]	; (4864 <_sercom_get_default_pad+0x134>)
    47b0:	e7cc      	b.n	474c <_sercom_get_default_pad+0x1c>
    47b2:	482d      	ldr	r0, [pc, #180]	; (4868 <_sercom_get_default_pad+0x138>)
    47b4:	e7ca      	b.n	474c <_sercom_get_default_pad+0x1c>
    47b6:	482d      	ldr	r0, [pc, #180]	; (486c <_sercom_get_default_pad+0x13c>)
    47b8:	e7c8      	b.n	474c <_sercom_get_default_pad+0x1c>
    47ba:	2901      	cmp	r1, #1
    47bc:	d007      	beq.n	47ce <_sercom_get_default_pad+0x9e>
    47be:	2900      	cmp	r1, #0
    47c0:	d031      	beq.n	4826 <_sercom_get_default_pad+0xf6>
    47c2:	2902      	cmp	r1, #2
    47c4:	d005      	beq.n	47d2 <_sercom_get_default_pad+0xa2>
    47c6:	2903      	cmp	r1, #3
    47c8:	d005      	beq.n	47d6 <_sercom_get_default_pad+0xa6>
	return 0;
    47ca:	2000      	movs	r0, #0
    47cc:	e7be      	b.n	474c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    47ce:	4828      	ldr	r0, [pc, #160]	; (4870 <_sercom_get_default_pad+0x140>)
    47d0:	e7bc      	b.n	474c <_sercom_get_default_pad+0x1c>
    47d2:	4828      	ldr	r0, [pc, #160]	; (4874 <_sercom_get_default_pad+0x144>)
    47d4:	e7ba      	b.n	474c <_sercom_get_default_pad+0x1c>
    47d6:	4828      	ldr	r0, [pc, #160]	; (4878 <_sercom_get_default_pad+0x148>)
    47d8:	e7b8      	b.n	474c <_sercom_get_default_pad+0x1c>
    47da:	2901      	cmp	r1, #1
    47dc:	d007      	beq.n	47ee <_sercom_get_default_pad+0xbe>
    47de:	2900      	cmp	r1, #0
    47e0:	d023      	beq.n	482a <_sercom_get_default_pad+0xfa>
    47e2:	2902      	cmp	r1, #2
    47e4:	d005      	beq.n	47f2 <_sercom_get_default_pad+0xc2>
    47e6:	2903      	cmp	r1, #3
    47e8:	d005      	beq.n	47f6 <_sercom_get_default_pad+0xc6>
	return 0;
    47ea:	2000      	movs	r0, #0
    47ec:	e7ae      	b.n	474c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    47ee:	4823      	ldr	r0, [pc, #140]	; (487c <_sercom_get_default_pad+0x14c>)
    47f0:	e7ac      	b.n	474c <_sercom_get_default_pad+0x1c>
    47f2:	4823      	ldr	r0, [pc, #140]	; (4880 <_sercom_get_default_pad+0x150>)
    47f4:	e7aa      	b.n	474c <_sercom_get_default_pad+0x1c>
    47f6:	4823      	ldr	r0, [pc, #140]	; (4884 <_sercom_get_default_pad+0x154>)
    47f8:	e7a8      	b.n	474c <_sercom_get_default_pad+0x1c>
    47fa:	2901      	cmp	r1, #1
    47fc:	d007      	beq.n	480e <_sercom_get_default_pad+0xde>
    47fe:	2900      	cmp	r1, #0
    4800:	d015      	beq.n	482e <_sercom_get_default_pad+0xfe>
    4802:	2902      	cmp	r1, #2
    4804:	d005      	beq.n	4812 <_sercom_get_default_pad+0xe2>
    4806:	2903      	cmp	r1, #3
    4808:	d005      	beq.n	4816 <_sercom_get_default_pad+0xe6>
	return 0;
    480a:	2000      	movs	r0, #0
    480c:	e79e      	b.n	474c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    480e:	481e      	ldr	r0, [pc, #120]	; (4888 <_sercom_get_default_pad+0x158>)
    4810:	e79c      	b.n	474c <_sercom_get_default_pad+0x1c>
    4812:	481e      	ldr	r0, [pc, #120]	; (488c <_sercom_get_default_pad+0x15c>)
    4814:	e79a      	b.n	474c <_sercom_get_default_pad+0x1c>
    4816:	481e      	ldr	r0, [pc, #120]	; (4890 <_sercom_get_default_pad+0x160>)
    4818:	e798      	b.n	474c <_sercom_get_default_pad+0x1c>
    481a:	481e      	ldr	r0, [pc, #120]	; (4894 <_sercom_get_default_pad+0x164>)
    481c:	e796      	b.n	474c <_sercom_get_default_pad+0x1c>
    481e:	2003      	movs	r0, #3
    4820:	e794      	b.n	474c <_sercom_get_default_pad+0x1c>
    4822:	481d      	ldr	r0, [pc, #116]	; (4898 <_sercom_get_default_pad+0x168>)
    4824:	e792      	b.n	474c <_sercom_get_default_pad+0x1c>
    4826:	481d      	ldr	r0, [pc, #116]	; (489c <_sercom_get_default_pad+0x16c>)
    4828:	e790      	b.n	474c <_sercom_get_default_pad+0x1c>
    482a:	481d      	ldr	r0, [pc, #116]	; (48a0 <_sercom_get_default_pad+0x170>)
    482c:	e78e      	b.n	474c <_sercom_get_default_pad+0x1c>
    482e:	481d      	ldr	r0, [pc, #116]	; (48a4 <_sercom_get_default_pad+0x174>)
    4830:	e78c      	b.n	474c <_sercom_get_default_pad+0x1c>
    4832:	46c0      	nop			; (mov r8, r8)
    4834:	42001000 	.word	0x42001000
    4838:	42001800 	.word	0x42001800
    483c:	42001c00 	.word	0x42001c00
    4840:	42001400 	.word	0x42001400
    4844:	42000800 	.word	0x42000800
    4848:	42000c00 	.word	0x42000c00
    484c:	00050003 	.word	0x00050003
    4850:	00060003 	.word	0x00060003
    4854:	00070003 	.word	0x00070003
    4858:	00010003 	.word	0x00010003
    485c:	001e0003 	.word	0x001e0003
    4860:	001f0003 	.word	0x001f0003
    4864:	00090003 	.word	0x00090003
    4868:	000a0003 	.word	0x000a0003
    486c:	000b0003 	.word	0x000b0003
    4870:	00110003 	.word	0x00110003
    4874:	00120003 	.word	0x00120003
    4878:	00130003 	.word	0x00130003
    487c:	000d0003 	.word	0x000d0003
    4880:	000e0003 	.word	0x000e0003
    4884:	000f0003 	.word	0x000f0003
    4888:	00170003 	.word	0x00170003
    488c:	00180003 	.word	0x00180003
    4890:	00190003 	.word	0x00190003
    4894:	00040003 	.word	0x00040003
    4898:	00080003 	.word	0x00080003
    489c:	00100003 	.word	0x00100003
    48a0:	000c0003 	.word	0x000c0003
    48a4:	00160003 	.word	0x00160003

000048a8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    48a8:	b530      	push	{r4, r5, lr}
    48aa:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    48ac:	4b0b      	ldr	r3, [pc, #44]	; (48dc <_sercom_get_sercom_inst_index+0x34>)
    48ae:	466a      	mov	r2, sp
    48b0:	cb32      	ldmia	r3!, {r1, r4, r5}
    48b2:	c232      	stmia	r2!, {r1, r4, r5}
    48b4:	cb32      	ldmia	r3!, {r1, r4, r5}
    48b6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    48b8:	9b00      	ldr	r3, [sp, #0]
    48ba:	4283      	cmp	r3, r0
    48bc:	d00b      	beq.n	48d6 <_sercom_get_sercom_inst_index+0x2e>
    48be:	2301      	movs	r3, #1
    48c0:	009a      	lsls	r2, r3, #2
    48c2:	4669      	mov	r1, sp
    48c4:	5852      	ldr	r2, [r2, r1]
    48c6:	4282      	cmp	r2, r0
    48c8:	d006      	beq.n	48d8 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    48ca:	3301      	adds	r3, #1
    48cc:	2b06      	cmp	r3, #6
    48ce:	d1f7      	bne.n	48c0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    48d0:	2000      	movs	r0, #0
}
    48d2:	b007      	add	sp, #28
    48d4:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    48d6:	2300      	movs	r3, #0
			return i;
    48d8:	b2d8      	uxtb	r0, r3
    48da:	e7fa      	b.n	48d2 <_sercom_get_sercom_inst_index+0x2a>
    48dc:	0000bc74 	.word	0x0000bc74

000048e0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    48e0:	4770      	bx	lr
	...

000048e4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    48e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    48e6:	4b0a      	ldr	r3, [pc, #40]	; (4910 <_sercom_set_handler+0x2c>)
    48e8:	781b      	ldrb	r3, [r3, #0]
    48ea:	2b00      	cmp	r3, #0
    48ec:	d10c      	bne.n	4908 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    48ee:	4f09      	ldr	r7, [pc, #36]	; (4914 <_sercom_set_handler+0x30>)
    48f0:	4e09      	ldr	r6, [pc, #36]	; (4918 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    48f2:	4d0a      	ldr	r5, [pc, #40]	; (491c <_sercom_set_handler+0x38>)
    48f4:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    48f6:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    48f8:	195a      	adds	r2, r3, r5
    48fa:	6014      	str	r4, [r2, #0]
    48fc:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    48fe:	2b18      	cmp	r3, #24
    4900:	d1f9      	bne.n	48f6 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    4902:	2201      	movs	r2, #1
    4904:	4b02      	ldr	r3, [pc, #8]	; (4910 <_sercom_set_handler+0x2c>)
    4906:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    4908:	0080      	lsls	r0, r0, #2
    490a:	4b02      	ldr	r3, [pc, #8]	; (4914 <_sercom_set_handler+0x30>)
    490c:	50c1      	str	r1, [r0, r3]
}
    490e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4910:	2000012a 	.word	0x2000012a
    4914:	2000012c 	.word	0x2000012c
    4918:	000048e1 	.word	0x000048e1
    491c:	20000420 	.word	0x20000420

00004920 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    4920:	b500      	push	{lr}
    4922:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    4924:	2309      	movs	r3, #9
    4926:	466a      	mov	r2, sp
    4928:	7013      	strb	r3, [r2, #0]
    492a:	3301      	adds	r3, #1
    492c:	7053      	strb	r3, [r2, #1]
    492e:	3301      	adds	r3, #1
    4930:	7093      	strb	r3, [r2, #2]
    4932:	3301      	adds	r3, #1
    4934:	70d3      	strb	r3, [r2, #3]
    4936:	3301      	adds	r3, #1
    4938:	7113      	strb	r3, [r2, #4]
    493a:	3301      	adds	r3, #1
    493c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    493e:	4b03      	ldr	r3, [pc, #12]	; (494c <_sercom_get_interrupt_vector+0x2c>)
    4940:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    4942:	466b      	mov	r3, sp
    4944:	5618      	ldrsb	r0, [r3, r0]
}
    4946:	b003      	add	sp, #12
    4948:	bd00      	pop	{pc}
    494a:	46c0      	nop			; (mov r8, r8)
    494c:	000048a9 	.word	0x000048a9

00004950 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    4950:	b510      	push	{r4, lr}
    4952:	4b02      	ldr	r3, [pc, #8]	; (495c <SERCOM0_Handler+0xc>)
    4954:	681b      	ldr	r3, [r3, #0]
    4956:	2000      	movs	r0, #0
    4958:	4798      	blx	r3
    495a:	bd10      	pop	{r4, pc}
    495c:	2000012c 	.word	0x2000012c

00004960 <SERCOM1_Handler>:
    4960:	b510      	push	{r4, lr}
    4962:	4b02      	ldr	r3, [pc, #8]	; (496c <SERCOM1_Handler+0xc>)
    4964:	685b      	ldr	r3, [r3, #4]
    4966:	2001      	movs	r0, #1
    4968:	4798      	blx	r3
    496a:	bd10      	pop	{r4, pc}
    496c:	2000012c 	.word	0x2000012c

00004970 <SERCOM2_Handler>:
    4970:	b510      	push	{r4, lr}
    4972:	4b02      	ldr	r3, [pc, #8]	; (497c <SERCOM2_Handler+0xc>)
    4974:	689b      	ldr	r3, [r3, #8]
    4976:	2002      	movs	r0, #2
    4978:	4798      	blx	r3
    497a:	bd10      	pop	{r4, pc}
    497c:	2000012c 	.word	0x2000012c

00004980 <SERCOM3_Handler>:
    4980:	b510      	push	{r4, lr}
    4982:	4b02      	ldr	r3, [pc, #8]	; (498c <SERCOM3_Handler+0xc>)
    4984:	68db      	ldr	r3, [r3, #12]
    4986:	2003      	movs	r0, #3
    4988:	4798      	blx	r3
    498a:	bd10      	pop	{r4, pc}
    498c:	2000012c 	.word	0x2000012c

00004990 <SERCOM4_Handler>:
    4990:	b510      	push	{r4, lr}
    4992:	4b02      	ldr	r3, [pc, #8]	; (499c <SERCOM4_Handler+0xc>)
    4994:	691b      	ldr	r3, [r3, #16]
    4996:	2004      	movs	r0, #4
    4998:	4798      	blx	r3
    499a:	bd10      	pop	{r4, pc}
    499c:	2000012c 	.word	0x2000012c

000049a0 <SERCOM5_Handler>:
    49a0:	b510      	push	{r4, lr}
    49a2:	4b02      	ldr	r3, [pc, #8]	; (49ac <SERCOM5_Handler+0xc>)
    49a4:	695b      	ldr	r3, [r3, #20]
    49a6:	2005      	movs	r0, #5
    49a8:	4798      	blx	r3
    49aa:	bd10      	pop	{r4, pc}
    49ac:	2000012c 	.word	0x2000012c

000049b0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    49b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    49b2:	b08b      	sub	sp, #44	; 0x2c
    49b4:	0005      	movs	r5, r0
    49b6:	000c      	movs	r4, r1
    49b8:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    49ba:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    49bc:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    49be:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    49c0:	079b      	lsls	r3, r3, #30
    49c2:	d501      	bpl.n	49c8 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    49c4:	b00b      	add	sp, #44	; 0x2c
    49c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    49c8:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    49ca:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    49cc:	07db      	lsls	r3, r3, #31
    49ce:	d4f9      	bmi.n	49c4 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    49d0:	0008      	movs	r0, r1
    49d2:	4b60      	ldr	r3, [pc, #384]	; (4b54 <spi_init+0x1a4>)
    49d4:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    49d6:	4a60      	ldr	r2, [pc, #384]	; (4b58 <spi_init+0x1a8>)
    49d8:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    49da:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    49dc:	2301      	movs	r3, #1
    49de:	40bb      	lsls	r3, r7
    49e0:	430b      	orrs	r3, r1
    49e2:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    49e4:	a909      	add	r1, sp, #36	; 0x24
    49e6:	2724      	movs	r7, #36	; 0x24
    49e8:	5df3      	ldrb	r3, [r6, r7]
    49ea:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    49ec:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    49ee:	b2c3      	uxtb	r3, r0
    49f0:	9301      	str	r3, [sp, #4]
    49f2:	0018      	movs	r0, r3
    49f4:	4b59      	ldr	r3, [pc, #356]	; (4b5c <spi_init+0x1ac>)
    49f6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    49f8:	9801      	ldr	r0, [sp, #4]
    49fa:	4b59      	ldr	r3, [pc, #356]	; (4b60 <spi_init+0x1b0>)
    49fc:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    49fe:	5df0      	ldrb	r0, [r6, r7]
    4a00:	2100      	movs	r1, #0
    4a02:	4b58      	ldr	r3, [pc, #352]	; (4b64 <spi_init+0x1b4>)
    4a04:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    4a06:	7833      	ldrb	r3, [r6, #0]
    4a08:	2b01      	cmp	r3, #1
    4a0a:	d038      	beq.n	4a7e <spi_init+0xce>
    4a0c:	002b      	movs	r3, r5
    4a0e:	330c      	adds	r3, #12
    4a10:	0029      	movs	r1, r5
    4a12:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    4a14:	2200      	movs	r2, #0
    4a16:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    4a18:	428b      	cmp	r3, r1
    4a1a:	d1fc      	bne.n	4a16 <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    4a1c:	2300      	movs	r3, #0
    4a1e:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    4a20:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    4a22:	2400      	movs	r4, #0
    4a24:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    4a26:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    4a28:	3336      	adds	r3, #54	; 0x36
    4a2a:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    4a2c:	3301      	adds	r3, #1
    4a2e:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    4a30:	3301      	adds	r3, #1
    4a32:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    4a34:	3b35      	subs	r3, #53	; 0x35
    4a36:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    4a38:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    4a3a:	6828      	ldr	r0, [r5, #0]
    4a3c:	4b45      	ldr	r3, [pc, #276]	; (4b54 <spi_init+0x1a4>)
    4a3e:	4798      	blx	r3
    4a40:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    4a42:	4949      	ldr	r1, [pc, #292]	; (4b68 <spi_init+0x1b8>)
    4a44:	4b49      	ldr	r3, [pc, #292]	; (4b6c <spi_init+0x1bc>)
    4a46:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4a48:	00bf      	lsls	r7, r7, #2
    4a4a:	4b49      	ldr	r3, [pc, #292]	; (4b70 <spi_init+0x1c0>)
    4a4c:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4a4e:	682f      	ldr	r7, [r5, #0]
    4a50:	ab04      	add	r3, sp, #16
    4a52:	2280      	movs	r2, #128	; 0x80
    4a54:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4a56:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4a58:	3a7f      	subs	r2, #127	; 0x7f
    4a5a:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4a5c:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    4a5e:	7833      	ldrb	r3, [r6, #0]
    4a60:	2b00      	cmp	r3, #0
    4a62:	d102      	bne.n	4a6a <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4a64:	2200      	movs	r2, #0
    4a66:	ab04      	add	r3, sp, #16
    4a68:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    4a6a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    4a6c:	9305      	str	r3, [sp, #20]
    4a6e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    4a70:	9306      	str	r3, [sp, #24]
    4a72:	6b33      	ldr	r3, [r6, #48]	; 0x30
    4a74:	9307      	str	r3, [sp, #28]
    4a76:	6b73      	ldr	r3, [r6, #52]	; 0x34
    4a78:	9308      	str	r3, [sp, #32]
    4a7a:	2400      	movs	r4, #0
    4a7c:	e00b      	b.n	4a96 <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    4a7e:	6823      	ldr	r3, [r4, #0]
    4a80:	220c      	movs	r2, #12
    4a82:	4313      	orrs	r3, r2
    4a84:	6023      	str	r3, [r4, #0]
    4a86:	e7c1      	b.n	4a0c <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4a88:	0038      	movs	r0, r7
    4a8a:	4b3a      	ldr	r3, [pc, #232]	; (4b74 <spi_init+0x1c4>)
    4a8c:	4798      	blx	r3
    4a8e:	e00a      	b.n	4aa6 <spi_init+0xf6>
    4a90:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    4a92:	2c04      	cmp	r4, #4
    4a94:	d010      	beq.n	4ab8 <spi_init+0x108>
    4a96:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4a98:	00a3      	lsls	r3, r4, #2
    4a9a:	aa02      	add	r2, sp, #8
    4a9c:	200c      	movs	r0, #12
    4a9e:	1812      	adds	r2, r2, r0
    4aa0:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    4aa2:	2800      	cmp	r0, #0
    4aa4:	d0f0      	beq.n	4a88 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    4aa6:	1c43      	adds	r3, r0, #1
    4aa8:	d0f2      	beq.n	4a90 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4aaa:	a904      	add	r1, sp, #16
    4aac:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4aae:	0c00      	lsrs	r0, r0, #16
    4ab0:	b2c0      	uxtb	r0, r0
    4ab2:	4b31      	ldr	r3, [pc, #196]	; (4b78 <spi_init+0x1c8>)
    4ab4:	4798      	blx	r3
    4ab6:	e7eb      	b.n	4a90 <spi_init+0xe0>
	module->mode             = config->mode;
    4ab8:	7833      	ldrb	r3, [r6, #0]
    4aba:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    4abc:	7c33      	ldrb	r3, [r6, #16]
    4abe:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    4ac0:	7cb3      	ldrb	r3, [r6, #18]
    4ac2:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    4ac4:	7d33      	ldrb	r3, [r6, #20]
    4ac6:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    4ac8:	2200      	movs	r2, #0
    4aca:	ab02      	add	r3, sp, #8
    4acc:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    4ace:	7833      	ldrb	r3, [r6, #0]
    4ad0:	2b01      	cmp	r3, #1
    4ad2:	d028      	beq.n	4b26 <spi_init+0x176>
	ctrla |= config->transfer_mode;
    4ad4:	6873      	ldr	r3, [r6, #4]
    4ad6:	68b2      	ldr	r2, [r6, #8]
    4ad8:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    4ada:	68f2      	ldr	r2, [r6, #12]
    4adc:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    4ade:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    4ae0:	7c72      	ldrb	r2, [r6, #17]
    4ae2:	2a00      	cmp	r2, #0
    4ae4:	d103      	bne.n	4aee <spi_init+0x13e>
    4ae6:	4a25      	ldr	r2, [pc, #148]	; (4b7c <spi_init+0x1cc>)
    4ae8:	7892      	ldrb	r2, [r2, #2]
    4aea:	0792      	lsls	r2, r2, #30
    4aec:	d501      	bpl.n	4af2 <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    4aee:	2280      	movs	r2, #128	; 0x80
    4af0:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    4af2:	7cb2      	ldrb	r2, [r6, #18]
    4af4:	2a00      	cmp	r2, #0
    4af6:	d002      	beq.n	4afe <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    4af8:	2280      	movs	r2, #128	; 0x80
    4afa:	0292      	lsls	r2, r2, #10
    4afc:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    4afe:	7cf2      	ldrb	r2, [r6, #19]
    4b00:	2a00      	cmp	r2, #0
    4b02:	d002      	beq.n	4b0a <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    4b04:	2280      	movs	r2, #128	; 0x80
    4b06:	0092      	lsls	r2, r2, #2
    4b08:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    4b0a:	7d32      	ldrb	r2, [r6, #20]
    4b0c:	2a00      	cmp	r2, #0
    4b0e:	d002      	beq.n	4b16 <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    4b10:	2280      	movs	r2, #128	; 0x80
    4b12:	0192      	lsls	r2, r2, #6
    4b14:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    4b16:	683a      	ldr	r2, [r7, #0]
    4b18:	4313      	orrs	r3, r2
    4b1a:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    4b1c:	687b      	ldr	r3, [r7, #4]
    4b1e:	430b      	orrs	r3, r1
    4b20:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    4b22:	2000      	movs	r0, #0
    4b24:	e74e      	b.n	49c4 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4b26:	6828      	ldr	r0, [r5, #0]
    4b28:	4b0a      	ldr	r3, [pc, #40]	; (4b54 <spi_init+0x1a4>)
    4b2a:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4b2c:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    4b2e:	b2c0      	uxtb	r0, r0
    4b30:	4b13      	ldr	r3, [pc, #76]	; (4b80 <spi_init+0x1d0>)
    4b32:	4798      	blx	r3
    4b34:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    4b36:	ab02      	add	r3, sp, #8
    4b38:	1d9a      	adds	r2, r3, #6
    4b3a:	69b0      	ldr	r0, [r6, #24]
    4b3c:	4b11      	ldr	r3, [pc, #68]	; (4b84 <spi_init+0x1d4>)
    4b3e:	4798      	blx	r3
    4b40:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    4b42:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    4b44:	2b00      	cmp	r3, #0
    4b46:	d000      	beq.n	4b4a <spi_init+0x19a>
    4b48:	e73c      	b.n	49c4 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    4b4a:	ab02      	add	r3, sp, #8
    4b4c:	3306      	adds	r3, #6
    4b4e:	781b      	ldrb	r3, [r3, #0]
    4b50:	733b      	strb	r3, [r7, #12]
    4b52:	e7bf      	b.n	4ad4 <spi_init+0x124>
    4b54:	000048a9 	.word	0x000048a9
    4b58:	40000400 	.word	0x40000400
    4b5c:	00005a1d 	.word	0x00005a1d
    4b60:	00005991 	.word	0x00005991
    4b64:	000046e5 	.word	0x000046e5
    4b68:	00004c7d 	.word	0x00004c7d
    4b6c:	000048e5 	.word	0x000048e5
    4b70:	20000420 	.word	0x20000420
    4b74:	00004731 	.word	0x00004731
    4b78:	00005b15 	.word	0x00005b15
    4b7c:	41002000 	.word	0x41002000
    4b80:	00005a39 	.word	0x00005a39
    4b84:	00004627 	.word	0x00004627

00004b88 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    4b88:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    4b8a:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    4b8c:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    4b8e:	2c01      	cmp	r4, #1
    4b90:	d001      	beq.n	4b96 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    4b92:	0018      	movs	r0, r3
    4b94:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    4b96:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    4b98:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    4b9a:	2c00      	cmp	r4, #0
    4b9c:	d1f9      	bne.n	4b92 <spi_select_slave+0xa>
		if (select) {
    4b9e:	2a00      	cmp	r2, #0
    4ba0:	d058      	beq.n	4c54 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    4ba2:	784b      	ldrb	r3, [r1, #1]
    4ba4:	2b00      	cmp	r3, #0
    4ba6:	d044      	beq.n	4c32 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4ba8:	6803      	ldr	r3, [r0, #0]
    4baa:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    4bac:	07db      	lsls	r3, r3, #31
    4bae:	d410      	bmi.n	4bd2 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    4bb0:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    4bb2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    4bb4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4bb6:	2900      	cmp	r1, #0
    4bb8:	d104      	bne.n	4bc4 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    4bba:	0953      	lsrs	r3, r2, #5
    4bbc:	01db      	lsls	r3, r3, #7
    4bbe:	492e      	ldr	r1, [pc, #184]	; (4c78 <spi_select_slave+0xf0>)
    4bc0:	468c      	mov	ip, r1
    4bc2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4bc4:	211f      	movs	r1, #31
    4bc6:	4011      	ands	r1, r2
    4bc8:	2201      	movs	r2, #1
    4bca:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    4bcc:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    4bce:	2305      	movs	r3, #5
    4bd0:	e7df      	b.n	4b92 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    4bd2:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    4bd4:	09d4      	lsrs	r4, r2, #7
		return NULL;
    4bd6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4bd8:	2c00      	cmp	r4, #0
    4bda:	d104      	bne.n	4be6 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    4bdc:	0953      	lsrs	r3, r2, #5
    4bde:	01db      	lsls	r3, r3, #7
    4be0:	4c25      	ldr	r4, [pc, #148]	; (4c78 <spi_select_slave+0xf0>)
    4be2:	46a4      	mov	ip, r4
    4be4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4be6:	241f      	movs	r4, #31
    4be8:	4014      	ands	r4, r2
    4bea:	2201      	movs	r2, #1
    4bec:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    4bee:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4bf0:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4bf2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4bf4:	07d2      	lsls	r2, r2, #31
    4bf6:	d501      	bpl.n	4bfc <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4bf8:	788a      	ldrb	r2, [r1, #2]
    4bfa:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    4bfc:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    4bfe:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    4c00:	2a00      	cmp	r2, #0
    4c02:	d1c6      	bne.n	4b92 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    4c04:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    4c06:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4c08:	7e13      	ldrb	r3, [r2, #24]
    4c0a:	420b      	tst	r3, r1
    4c0c:	d0fc      	beq.n	4c08 <spi_select_slave+0x80>
    4c0e:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    4c10:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    4c12:	0749      	lsls	r1, r1, #29
    4c14:	d5bd      	bpl.n	4b92 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4c16:	8b53      	ldrh	r3, [r2, #26]
    4c18:	075b      	lsls	r3, r3, #29
    4c1a:	d501      	bpl.n	4c20 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4c1c:	2304      	movs	r3, #4
    4c1e:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4c20:	7983      	ldrb	r3, [r0, #6]
    4c22:	2b01      	cmp	r3, #1
    4c24:	d002      	beq.n	4c2c <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4c26:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4c28:	2300      	movs	r3, #0
    4c2a:	e7b2      	b.n	4b92 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4c2c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4c2e:	2300      	movs	r3, #0
    4c30:	e7af      	b.n	4b92 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    4c32:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    4c34:	09d1      	lsrs	r1, r2, #7
		return NULL;
    4c36:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4c38:	2900      	cmp	r1, #0
    4c3a:	d104      	bne.n	4c46 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    4c3c:	0953      	lsrs	r3, r2, #5
    4c3e:	01db      	lsls	r3, r3, #7
    4c40:	490d      	ldr	r1, [pc, #52]	; (4c78 <spi_select_slave+0xf0>)
    4c42:	468c      	mov	ip, r1
    4c44:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4c46:	211f      	movs	r1, #31
    4c48:	4011      	ands	r1, r2
    4c4a:	2201      	movs	r2, #1
    4c4c:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    4c4e:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    4c50:	2300      	movs	r3, #0
    4c52:	e79e      	b.n	4b92 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    4c54:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    4c56:	09d1      	lsrs	r1, r2, #7
		return NULL;
    4c58:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4c5a:	2900      	cmp	r1, #0
    4c5c:	d104      	bne.n	4c68 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    4c5e:	0953      	lsrs	r3, r2, #5
    4c60:	01db      	lsls	r3, r3, #7
    4c62:	4905      	ldr	r1, [pc, #20]	; (4c78 <spi_select_slave+0xf0>)
    4c64:	468c      	mov	ip, r1
    4c66:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4c68:	211f      	movs	r1, #31
    4c6a:	4011      	ands	r1, r2
    4c6c:	2201      	movs	r2, #1
    4c6e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    4c70:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    4c72:	2300      	movs	r3, #0
    4c74:	e78d      	b.n	4b92 <spi_select_slave+0xa>
    4c76:	46c0      	nop			; (mov r8, r8)
    4c78:	41004400 	.word	0x41004400

00004c7c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    4c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    4c7e:	0080      	lsls	r0, r0, #2
    4c80:	4b70      	ldr	r3, [pc, #448]	; (4e44 <_spi_interrupt_handler+0x1c8>)
    4c82:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4c84:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    4c86:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    4c88:	5ce7      	ldrb	r7, [r4, r3]
    4c8a:	2236      	movs	r2, #54	; 0x36
    4c8c:	5ca2      	ldrb	r2, [r4, r2]
    4c8e:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    4c90:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    4c92:	7db5      	ldrb	r5, [r6, #22]
    4c94:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    4c96:	07eb      	lsls	r3, r5, #31
    4c98:	d502      	bpl.n	4ca0 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4c9a:	7963      	ldrb	r3, [r4, #5]
    4c9c:	2b01      	cmp	r3, #1
    4c9e:	d01e      	beq.n	4cde <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    4ca0:	076b      	lsls	r3, r5, #29
    4ca2:	d511      	bpl.n	4cc8 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4ca4:	8b73      	ldrh	r3, [r6, #26]
    4ca6:	075b      	lsls	r3, r3, #29
    4ca8:	d55a      	bpl.n	4d60 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    4caa:	7a63      	ldrb	r3, [r4, #9]
    4cac:	2b01      	cmp	r3, #1
    4cae:	d008      	beq.n	4cc2 <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    4cb0:	221e      	movs	r2, #30
    4cb2:	2338      	movs	r3, #56	; 0x38
    4cb4:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    4cb6:	3b35      	subs	r3, #53	; 0x35
    4cb8:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    4cba:	3302      	adds	r3, #2
    4cbc:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    4cbe:	073b      	lsls	r3, r7, #28
    4cc0:	d44a      	bmi.n	4d58 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    4cc2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4cc4:	2304      	movs	r3, #4
    4cc6:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    4cc8:	07ab      	lsls	r3, r5, #30
    4cca:	d503      	bpl.n	4cd4 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4ccc:	7963      	ldrb	r3, [r4, #5]
    4cce:	2b01      	cmp	r3, #1
    4cd0:	d100      	bne.n	4cd4 <_spi_interrupt_handler+0x58>
    4cd2:	e097      	b.n	4e04 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    4cd4:	b26d      	sxtb	r5, r5
    4cd6:	2d00      	cmp	r5, #0
    4cd8:	da00      	bge.n	4cdc <_spi_interrupt_handler+0x60>
    4cda:	e0a9      	b.n	4e30 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    4cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    4cde:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    4ce0:	2b00      	cmp	r3, #0
    4ce2:	d022      	beq.n	4d2a <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    4ce4:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    4ce6:	2b00      	cmp	r3, #0
    4ce8:	d0da      	beq.n	4ca0 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4cea:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    4cec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4cee:	7813      	ldrb	r3, [r2, #0]
    4cf0:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    4cf2:	1c50      	adds	r0, r2, #1
    4cf4:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4cf6:	79a0      	ldrb	r0, [r4, #6]
    4cf8:	2801      	cmp	r0, #1
    4cfa:	d027      	beq.n	4d4c <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    4cfc:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    4cfe:	05db      	lsls	r3, r3, #23
    4d00:	0ddb      	lsrs	r3, r3, #23
    4d02:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    4d04:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    4d06:	3b01      	subs	r3, #1
    4d08:	b29b      	uxth	r3, r3
    4d0a:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    4d0c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    4d0e:	b29b      	uxth	r3, r3
    4d10:	2b00      	cmp	r3, #0
    4d12:	d1c5      	bne.n	4ca0 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4d14:	3301      	adds	r3, #1
    4d16:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    4d18:	7a63      	ldrb	r3, [r4, #9]
    4d1a:	2b01      	cmp	r3, #1
    4d1c:	d1c0      	bne.n	4ca0 <_spi_interrupt_handler+0x24>
    4d1e:	79e3      	ldrb	r3, [r4, #7]
    4d20:	2b00      	cmp	r3, #0
    4d22:	d1bd      	bne.n	4ca0 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4d24:	3302      	adds	r3, #2
    4d26:	75b3      	strb	r3, [r6, #22]
    4d28:	e7ba      	b.n	4ca0 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    4d2a:	4b47      	ldr	r3, [pc, #284]	; (4e48 <_spi_interrupt_handler+0x1cc>)
    4d2c:	881b      	ldrh	r3, [r3, #0]
    4d2e:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    4d30:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4d32:	3b01      	subs	r3, #1
    4d34:	b29b      	uxth	r3, r3
    4d36:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    4d38:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4d3a:	b29b      	uxth	r3, r3
    4d3c:	2b00      	cmp	r3, #0
    4d3e:	d101      	bne.n	4d44 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4d40:	3301      	adds	r3, #1
    4d42:	7533      	strb	r3, [r6, #20]
		if (0
    4d44:	7963      	ldrb	r3, [r4, #5]
    4d46:	2b01      	cmp	r3, #1
    4d48:	d0cc      	beq.n	4ce4 <_spi_interrupt_handler+0x68>
    4d4a:	e7a9      	b.n	4ca0 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    4d4c:	7850      	ldrb	r0, [r2, #1]
    4d4e:	0200      	lsls	r0, r0, #8
    4d50:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    4d52:	3202      	adds	r2, #2
    4d54:	62e2      	str	r2, [r4, #44]	; 0x2c
    4d56:	e7d2      	b.n	4cfe <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    4d58:	0020      	movs	r0, r4
    4d5a:	69a3      	ldr	r3, [r4, #24]
    4d5c:	4798      	blx	r3
    4d5e:	e7b0      	b.n	4cc2 <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    4d60:	7a63      	ldrb	r3, [r4, #9]
    4d62:	2b01      	cmp	r3, #1
    4d64:	d028      	beq.n	4db8 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4d66:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    4d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4d6a:	05db      	lsls	r3, r3, #23
    4d6c:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    4d6e:	b2da      	uxtb	r2, r3
    4d70:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    4d72:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    4d74:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4d76:	1c51      	adds	r1, r2, #1
    4d78:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4d7a:	79a1      	ldrb	r1, [r4, #6]
    4d7c:	2901      	cmp	r1, #1
    4d7e:	d034      	beq.n	4dea <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    4d80:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    4d82:	3b01      	subs	r3, #1
    4d84:	b29b      	uxth	r3, r3
    4d86:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    4d88:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    4d8a:	b29b      	uxth	r3, r3
    4d8c:	2b00      	cmp	r3, #0
    4d8e:	d000      	beq.n	4d92 <_spi_interrupt_handler+0x116>
    4d90:	e79a      	b.n	4cc8 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    4d92:	2200      	movs	r2, #0
    4d94:	3338      	adds	r3, #56	; 0x38
    4d96:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4d98:	3b34      	subs	r3, #52	; 0x34
    4d9a:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    4d9c:	7a63      	ldrb	r3, [r4, #9]
    4d9e:	2b02      	cmp	r3, #2
    4da0:	d029      	beq.n	4df6 <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    4da2:	7a63      	ldrb	r3, [r4, #9]
    4da4:	2b00      	cmp	r3, #0
    4da6:	d000      	beq.n	4daa <_spi_interrupt_handler+0x12e>
    4da8:	e78e      	b.n	4cc8 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    4daa:	07bb      	lsls	r3, r7, #30
    4dac:	d400      	bmi.n	4db0 <_spi_interrupt_handler+0x134>
    4dae:	e78b      	b.n	4cc8 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    4db0:	0020      	movs	r0, r4
    4db2:	6923      	ldr	r3, [r4, #16]
    4db4:	4798      	blx	r3
    4db6:	e787      	b.n	4cc8 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4db8:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    4dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    4dbc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4dbe:	3b01      	subs	r3, #1
    4dc0:	b29b      	uxth	r3, r3
    4dc2:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    4dc4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4dc6:	b29b      	uxth	r3, r3
    4dc8:	2b00      	cmp	r3, #0
    4dca:	d000      	beq.n	4dce <_spi_interrupt_handler+0x152>
    4dcc:	e77c      	b.n	4cc8 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4dce:	3304      	adds	r3, #4
    4dd0:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    4dd2:	2200      	movs	r2, #0
    4dd4:	3334      	adds	r3, #52	; 0x34
    4dd6:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    4dd8:	3b35      	subs	r3, #53	; 0x35
    4dda:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    4ddc:	07fb      	lsls	r3, r7, #31
    4dde:	d400      	bmi.n	4de2 <_spi_interrupt_handler+0x166>
    4de0:	e772      	b.n	4cc8 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    4de2:	0020      	movs	r0, r4
    4de4:	68e3      	ldr	r3, [r4, #12]
    4de6:	4798      	blx	r3
    4de8:	e76e      	b.n	4cc8 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    4dea:	0a1b      	lsrs	r3, r3, #8
    4dec:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    4dee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4df0:	3301      	adds	r3, #1
    4df2:	62a3      	str	r3, [r4, #40]	; 0x28
    4df4:	e7c4      	b.n	4d80 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    4df6:	077b      	lsls	r3, r7, #29
    4df8:	d400      	bmi.n	4dfc <_spi_interrupt_handler+0x180>
    4dfa:	e765      	b.n	4cc8 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    4dfc:	0020      	movs	r0, r4
    4dfe:	6963      	ldr	r3, [r4, #20]
    4e00:	4798      	blx	r3
    4e02:	e761      	b.n	4cc8 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4e04:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    4e06:	2b01      	cmp	r3, #1
    4e08:	d000      	beq.n	4e0c <_spi_interrupt_handler+0x190>
    4e0a:	e763      	b.n	4cd4 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4e0c:	79e3      	ldrb	r3, [r4, #7]
    4e0e:	2b00      	cmp	r3, #0
    4e10:	d000      	beq.n	4e14 <_spi_interrupt_handler+0x198>
    4e12:	e75f      	b.n	4cd4 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4e14:	3302      	adds	r3, #2
    4e16:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    4e18:	3301      	adds	r3, #1
    4e1a:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    4e1c:	2200      	movs	r2, #0
    4e1e:	3335      	adds	r3, #53	; 0x35
    4e20:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    4e22:	07fb      	lsls	r3, r7, #31
    4e24:	d400      	bmi.n	4e28 <_spi_interrupt_handler+0x1ac>
    4e26:	e755      	b.n	4cd4 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    4e28:	0020      	movs	r0, r4
    4e2a:	68e3      	ldr	r3, [r4, #12]
    4e2c:	4798      	blx	r3
    4e2e:	e751      	b.n	4cd4 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4e30:	2380      	movs	r3, #128	; 0x80
    4e32:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4e34:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    4e36:	067b      	lsls	r3, r7, #25
    4e38:	d400      	bmi.n	4e3c <_spi_interrupt_handler+0x1c0>
    4e3a:	e74f      	b.n	4cdc <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    4e3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4e3e:	0020      	movs	r0, r4
    4e40:	4798      	blx	r3
}
    4e42:	e74b      	b.n	4cdc <_spi_interrupt_handler+0x60>
    4e44:	20000420 	.word	0x20000420
    4e48:	20000438 	.word	0x20000438

00004e4c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    4e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e4e:	46de      	mov	lr, fp
    4e50:	4657      	mov	r7, sl
    4e52:	464e      	mov	r6, r9
    4e54:	4645      	mov	r5, r8
    4e56:	b5e0      	push	{r5, r6, r7, lr}
    4e58:	b091      	sub	sp, #68	; 0x44
    4e5a:	0005      	movs	r5, r0
    4e5c:	000c      	movs	r4, r1
    4e5e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    4e60:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4e62:	0008      	movs	r0, r1
    4e64:	4bbc      	ldr	r3, [pc, #752]	; (5158 <usart_init+0x30c>)
    4e66:	4798      	blx	r3
    4e68:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    4e6a:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    4e6c:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    4e6e:	07db      	lsls	r3, r3, #31
    4e70:	d506      	bpl.n	4e80 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    4e72:	b011      	add	sp, #68	; 0x44
    4e74:	bc3c      	pop	{r2, r3, r4, r5}
    4e76:	4690      	mov	r8, r2
    4e78:	4699      	mov	r9, r3
    4e7a:	46a2      	mov	sl, r4
    4e7c:	46ab      	mov	fp, r5
    4e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    4e80:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    4e82:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    4e84:	079b      	lsls	r3, r3, #30
    4e86:	d4f4      	bmi.n	4e72 <usart_init+0x26>
    4e88:	49b4      	ldr	r1, [pc, #720]	; (515c <usart_init+0x310>)
    4e8a:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    4e8c:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4e8e:	2301      	movs	r3, #1
    4e90:	40bb      	lsls	r3, r7
    4e92:	4303      	orrs	r3, r0
    4e94:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    4e96:	a90f      	add	r1, sp, #60	; 0x3c
    4e98:	272d      	movs	r7, #45	; 0x2d
    4e9a:	5df3      	ldrb	r3, [r6, r7]
    4e9c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4e9e:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4ea0:	b2d3      	uxtb	r3, r2
    4ea2:	9302      	str	r3, [sp, #8]
    4ea4:	0018      	movs	r0, r3
    4ea6:	4bae      	ldr	r3, [pc, #696]	; (5160 <usart_init+0x314>)
    4ea8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4eaa:	9802      	ldr	r0, [sp, #8]
    4eac:	4bad      	ldr	r3, [pc, #692]	; (5164 <usart_init+0x318>)
    4eae:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4eb0:	5df0      	ldrb	r0, [r6, r7]
    4eb2:	2100      	movs	r1, #0
    4eb4:	4bac      	ldr	r3, [pc, #688]	; (5168 <usart_init+0x31c>)
    4eb6:	4798      	blx	r3
	module->character_size = config->character_size;
    4eb8:	7af3      	ldrb	r3, [r6, #11]
    4eba:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    4ebc:	2324      	movs	r3, #36	; 0x24
    4ebe:	5cf3      	ldrb	r3, [r6, r3]
    4ec0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    4ec2:	2325      	movs	r3, #37	; 0x25
    4ec4:	5cf3      	ldrb	r3, [r6, r3]
    4ec6:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    4ec8:	7ef3      	ldrb	r3, [r6, #27]
    4eca:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    4ecc:	7f33      	ldrb	r3, [r6, #28]
    4ece:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4ed0:	682b      	ldr	r3, [r5, #0]
    4ed2:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4ed4:	0018      	movs	r0, r3
    4ed6:	4ba0      	ldr	r3, [pc, #640]	; (5158 <usart_init+0x30c>)
    4ed8:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4eda:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    4edc:	2200      	movs	r2, #0
    4ede:	230e      	movs	r3, #14
    4ee0:	a906      	add	r1, sp, #24
    4ee2:	468c      	mov	ip, r1
    4ee4:	4463      	add	r3, ip
    4ee6:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    4ee8:	8a32      	ldrh	r2, [r6, #16]
    4eea:	9202      	str	r2, [sp, #8]
    4eec:	2380      	movs	r3, #128	; 0x80
    4eee:	01db      	lsls	r3, r3, #7
    4ef0:	429a      	cmp	r2, r3
    4ef2:	d100      	bne.n	4ef6 <usart_init+0xaa>
    4ef4:	e09e      	b.n	5034 <usart_init+0x1e8>
    4ef6:	d90f      	bls.n	4f18 <usart_init+0xcc>
    4ef8:	23c0      	movs	r3, #192	; 0xc0
    4efa:	01db      	lsls	r3, r3, #7
    4efc:	9a02      	ldr	r2, [sp, #8]
    4efe:	429a      	cmp	r2, r3
    4f00:	d100      	bne.n	4f04 <usart_init+0xb8>
    4f02:	e092      	b.n	502a <usart_init+0x1de>
    4f04:	2380      	movs	r3, #128	; 0x80
    4f06:	021b      	lsls	r3, r3, #8
    4f08:	429a      	cmp	r2, r3
    4f0a:	d000      	beq.n	4f0e <usart_init+0xc2>
    4f0c:	e11f      	b.n	514e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    4f0e:	2303      	movs	r3, #3
    4f10:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4f12:	2300      	movs	r3, #0
    4f14:	9307      	str	r3, [sp, #28]
    4f16:	e008      	b.n	4f2a <usart_init+0xde>
	switch (config->sample_rate) {
    4f18:	2380      	movs	r3, #128	; 0x80
    4f1a:	019b      	lsls	r3, r3, #6
    4f1c:	429a      	cmp	r2, r3
    4f1e:	d000      	beq.n	4f22 <usart_init+0xd6>
    4f20:	e115      	b.n	514e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4f22:	2310      	movs	r3, #16
    4f24:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4f26:	3b0f      	subs	r3, #15
    4f28:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    4f2a:	6833      	ldr	r3, [r6, #0]
    4f2c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    4f2e:	68f3      	ldr	r3, [r6, #12]
    4f30:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    4f32:	6973      	ldr	r3, [r6, #20]
    4f34:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4f36:	7e33      	ldrb	r3, [r6, #24]
    4f38:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4f3a:	2326      	movs	r3, #38	; 0x26
    4f3c:	5cf3      	ldrb	r3, [r6, r3]
    4f3e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    4f40:	6873      	ldr	r3, [r6, #4]
    4f42:	4699      	mov	r9, r3
	switch (transfer_mode)
    4f44:	2b00      	cmp	r3, #0
    4f46:	d100      	bne.n	4f4a <usart_init+0xfe>
    4f48:	e0a0      	b.n	508c <usart_init+0x240>
    4f4a:	2380      	movs	r3, #128	; 0x80
    4f4c:	055b      	lsls	r3, r3, #21
    4f4e:	4599      	cmp	r9, r3
    4f50:	d100      	bne.n	4f54 <usart_init+0x108>
    4f52:	e084      	b.n	505e <usart_init+0x212>
	if(config->encoding_format_enable) {
    4f54:	7e73      	ldrb	r3, [r6, #25]
    4f56:	2b00      	cmp	r3, #0
    4f58:	d002      	beq.n	4f60 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    4f5a:	7eb3      	ldrb	r3, [r6, #26]
    4f5c:	4642      	mov	r2, r8
    4f5e:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4f60:	682a      	ldr	r2, [r5, #0]
    4f62:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4f64:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    4f66:	2b00      	cmp	r3, #0
    4f68:	d1fc      	bne.n	4f64 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    4f6a:	330e      	adds	r3, #14
    4f6c:	aa06      	add	r2, sp, #24
    4f6e:	4694      	mov	ip, r2
    4f70:	4463      	add	r3, ip
    4f72:	881b      	ldrh	r3, [r3, #0]
    4f74:	4642      	mov	r2, r8
    4f76:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    4f78:	9b05      	ldr	r3, [sp, #20]
    4f7a:	9a03      	ldr	r2, [sp, #12]
    4f7c:	4313      	orrs	r3, r2
    4f7e:	9a04      	ldr	r2, [sp, #16]
    4f80:	4313      	orrs	r3, r2
    4f82:	464a      	mov	r2, r9
    4f84:	4313      	orrs	r3, r2
    4f86:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4f88:	465b      	mov	r3, fp
    4f8a:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    4f8c:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4f8e:	4653      	mov	r3, sl
    4f90:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    4f92:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    4f94:	2327      	movs	r3, #39	; 0x27
    4f96:	5cf3      	ldrb	r3, [r6, r3]
    4f98:	2b00      	cmp	r3, #0
    4f9a:	d101      	bne.n	4fa0 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    4f9c:	3304      	adds	r3, #4
    4f9e:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4fa0:	7e73      	ldrb	r3, [r6, #25]
    4fa2:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4fa4:	7f32      	ldrb	r2, [r6, #28]
    4fa6:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4fa8:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    4faa:	7f72      	ldrb	r2, [r6, #29]
    4fac:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4fae:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4fb0:	2224      	movs	r2, #36	; 0x24
    4fb2:	5cb2      	ldrb	r2, [r6, r2]
    4fb4:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    4fb6:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    4fb8:	2225      	movs	r2, #37	; 0x25
    4fba:	5cb2      	ldrb	r2, [r6, r2]
    4fbc:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4fbe:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    4fc0:	7ab1      	ldrb	r1, [r6, #10]
    4fc2:	7af2      	ldrb	r2, [r6, #11]
    4fc4:	4311      	orrs	r1, r2
    4fc6:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    4fc8:	8933      	ldrh	r3, [r6, #8]
    4fca:	2bff      	cmp	r3, #255	; 0xff
    4fcc:	d100      	bne.n	4fd0 <usart_init+0x184>
    4fce:	e081      	b.n	50d4 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    4fd0:	2280      	movs	r2, #128	; 0x80
    4fd2:	0452      	lsls	r2, r2, #17
    4fd4:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    4fd6:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    4fd8:	232c      	movs	r3, #44	; 0x2c
    4fda:	5cf3      	ldrb	r3, [r6, r3]
    4fdc:	2b00      	cmp	r3, #0
    4fde:	d103      	bne.n	4fe8 <usart_init+0x19c>
    4fe0:	4b62      	ldr	r3, [pc, #392]	; (516c <usart_init+0x320>)
    4fe2:	789b      	ldrb	r3, [r3, #2]
    4fe4:	079b      	lsls	r3, r3, #30
    4fe6:	d501      	bpl.n	4fec <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    4fe8:	2380      	movs	r3, #128	; 0x80
    4fea:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    4fec:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    4fee:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4ff0:	2b00      	cmp	r3, #0
    4ff2:	d1fc      	bne.n	4fee <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    4ff4:	4643      	mov	r3, r8
    4ff6:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4ff8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    4ffa:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4ffc:	2b00      	cmp	r3, #0
    4ffe:	d1fc      	bne.n	4ffa <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    5000:	4643      	mov	r3, r8
    5002:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5004:	ab0e      	add	r3, sp, #56	; 0x38
    5006:	2280      	movs	r2, #128	; 0x80
    5008:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    500a:	2200      	movs	r2, #0
    500c:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    500e:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    5010:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    5012:	6b33      	ldr	r3, [r6, #48]	; 0x30
    5014:	930a      	str	r3, [sp, #40]	; 0x28
    5016:	6b73      	ldr	r3, [r6, #52]	; 0x34
    5018:	930b      	str	r3, [sp, #44]	; 0x2c
    501a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    501c:	930c      	str	r3, [sp, #48]	; 0x30
    501e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    5020:	9302      	str	r3, [sp, #8]
    5022:	930d      	str	r3, [sp, #52]	; 0x34
    5024:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5026:	ae0a      	add	r6, sp, #40	; 0x28
    5028:	e063      	b.n	50f2 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    502a:	2308      	movs	r3, #8
    502c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    502e:	3b07      	subs	r3, #7
    5030:	9307      	str	r3, [sp, #28]
    5032:	e77a      	b.n	4f2a <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    5034:	6833      	ldr	r3, [r6, #0]
    5036:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    5038:	68f3      	ldr	r3, [r6, #12]
    503a:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    503c:	6973      	ldr	r3, [r6, #20]
    503e:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5040:	7e33      	ldrb	r3, [r6, #24]
    5042:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5044:	2326      	movs	r3, #38	; 0x26
    5046:	5cf3      	ldrb	r3, [r6, r3]
    5048:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    504a:	6873      	ldr	r3, [r6, #4]
    504c:	4699      	mov	r9, r3
	switch (transfer_mode)
    504e:	2b00      	cmp	r3, #0
    5050:	d018      	beq.n	5084 <usart_init+0x238>
    5052:	2380      	movs	r3, #128	; 0x80
    5054:	055b      	lsls	r3, r3, #21
    5056:	4599      	cmp	r9, r3
    5058:	d001      	beq.n	505e <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    505a:	2000      	movs	r0, #0
    505c:	e025      	b.n	50aa <usart_init+0x25e>
			if (!config->use_external_clock) {
    505e:	2327      	movs	r3, #39	; 0x27
    5060:	5cf3      	ldrb	r3, [r6, r3]
    5062:	2b00      	cmp	r3, #0
    5064:	d000      	beq.n	5068 <usart_init+0x21c>
    5066:	e775      	b.n	4f54 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    5068:	6a33      	ldr	r3, [r6, #32]
    506a:	001f      	movs	r7, r3
    506c:	b2c0      	uxtb	r0, r0
    506e:	4b40      	ldr	r3, [pc, #256]	; (5170 <usart_init+0x324>)
    5070:	4798      	blx	r3
    5072:	0001      	movs	r1, r0
    5074:	220e      	movs	r2, #14
    5076:	ab06      	add	r3, sp, #24
    5078:	469c      	mov	ip, r3
    507a:	4462      	add	r2, ip
    507c:	0038      	movs	r0, r7
    507e:	4b3d      	ldr	r3, [pc, #244]	; (5174 <usart_init+0x328>)
    5080:	4798      	blx	r3
    5082:	e012      	b.n	50aa <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5084:	2308      	movs	r3, #8
    5086:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5088:	2300      	movs	r3, #0
    508a:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    508c:	2327      	movs	r3, #39	; 0x27
    508e:	5cf3      	ldrb	r3, [r6, r3]
    5090:	2b00      	cmp	r3, #0
    5092:	d00e      	beq.n	50b2 <usart_init+0x266>
				status_code =
    5094:	9b06      	ldr	r3, [sp, #24]
    5096:	9300      	str	r3, [sp, #0]
    5098:	9b07      	ldr	r3, [sp, #28]
    509a:	220e      	movs	r2, #14
    509c:	a906      	add	r1, sp, #24
    509e:	468c      	mov	ip, r1
    50a0:	4462      	add	r2, ip
    50a2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    50a4:	6a30      	ldr	r0, [r6, #32]
    50a6:	4f34      	ldr	r7, [pc, #208]	; (5178 <usart_init+0x32c>)
    50a8:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    50aa:	2800      	cmp	r0, #0
    50ac:	d000      	beq.n	50b0 <usart_init+0x264>
    50ae:	e6e0      	b.n	4e72 <usart_init+0x26>
    50b0:	e750      	b.n	4f54 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    50b2:	6a33      	ldr	r3, [r6, #32]
    50b4:	001f      	movs	r7, r3
    50b6:	b2c0      	uxtb	r0, r0
    50b8:	4b2d      	ldr	r3, [pc, #180]	; (5170 <usart_init+0x324>)
    50ba:	4798      	blx	r3
    50bc:	0001      	movs	r1, r0
				status_code =
    50be:	9b06      	ldr	r3, [sp, #24]
    50c0:	9300      	str	r3, [sp, #0]
    50c2:	9b07      	ldr	r3, [sp, #28]
    50c4:	220e      	movs	r2, #14
    50c6:	a806      	add	r0, sp, #24
    50c8:	4684      	mov	ip, r0
    50ca:	4462      	add	r2, ip
    50cc:	0038      	movs	r0, r7
    50ce:	4f2a      	ldr	r7, [pc, #168]	; (5178 <usart_init+0x32c>)
    50d0:	47b8      	blx	r7
    50d2:	e7ea      	b.n	50aa <usart_init+0x25e>
		if(config->lin_slave_enable) {
    50d4:	7ef3      	ldrb	r3, [r6, #27]
    50d6:	2b00      	cmp	r3, #0
    50d8:	d100      	bne.n	50dc <usart_init+0x290>
    50da:	e77d      	b.n	4fd8 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    50dc:	2380      	movs	r3, #128	; 0x80
    50de:	04db      	lsls	r3, r3, #19
    50e0:	431f      	orrs	r7, r3
    50e2:	e779      	b.n	4fd8 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    50e4:	0020      	movs	r0, r4
    50e6:	4b25      	ldr	r3, [pc, #148]	; (517c <usart_init+0x330>)
    50e8:	4798      	blx	r3
    50ea:	e007      	b.n	50fc <usart_init+0x2b0>
    50ec:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    50ee:	2f04      	cmp	r7, #4
    50f0:	d00d      	beq.n	510e <usart_init+0x2c2>
    50f2:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    50f4:	00bb      	lsls	r3, r7, #2
    50f6:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    50f8:	2800      	cmp	r0, #0
    50fa:	d0f3      	beq.n	50e4 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    50fc:	1c43      	adds	r3, r0, #1
    50fe:	d0f5      	beq.n	50ec <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    5100:	a90e      	add	r1, sp, #56	; 0x38
    5102:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    5104:	0c00      	lsrs	r0, r0, #16
    5106:	b2c0      	uxtb	r0, r0
    5108:	4b1d      	ldr	r3, [pc, #116]	; (5180 <usart_init+0x334>)
    510a:	4798      	blx	r3
    510c:	e7ee      	b.n	50ec <usart_init+0x2a0>
		module->callback[i]            = NULL;
    510e:	2300      	movs	r3, #0
    5110:	60eb      	str	r3, [r5, #12]
    5112:	612b      	str	r3, [r5, #16]
    5114:	616b      	str	r3, [r5, #20]
    5116:	61ab      	str	r3, [r5, #24]
    5118:	61eb      	str	r3, [r5, #28]
    511a:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    511c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    511e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    5120:	2200      	movs	r2, #0
    5122:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    5124:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    5126:	3330      	adds	r3, #48	; 0x30
    5128:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    512a:	3301      	adds	r3, #1
    512c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    512e:	3301      	adds	r3, #1
    5130:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    5132:	3301      	adds	r3, #1
    5134:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    5136:	6828      	ldr	r0, [r5, #0]
    5138:	4b07      	ldr	r3, [pc, #28]	; (5158 <usart_init+0x30c>)
    513a:	4798      	blx	r3
    513c:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    513e:	4911      	ldr	r1, [pc, #68]	; (5184 <usart_init+0x338>)
    5140:	4b11      	ldr	r3, [pc, #68]	; (5188 <usart_init+0x33c>)
    5142:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    5144:	00a4      	lsls	r4, r4, #2
    5146:	4b11      	ldr	r3, [pc, #68]	; (518c <usart_init+0x340>)
    5148:	50e5      	str	r5, [r4, r3]
	return status_code;
    514a:	2000      	movs	r0, #0
    514c:	e691      	b.n	4e72 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    514e:	2310      	movs	r3, #16
    5150:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5152:	2300      	movs	r3, #0
    5154:	9307      	str	r3, [sp, #28]
    5156:	e6e8      	b.n	4f2a <usart_init+0xde>
    5158:	000048a9 	.word	0x000048a9
    515c:	40000400 	.word	0x40000400
    5160:	00005a1d 	.word	0x00005a1d
    5164:	00005991 	.word	0x00005991
    5168:	000046e5 	.word	0x000046e5
    516c:	41002000 	.word	0x41002000
    5170:	00005a39 	.word	0x00005a39
    5174:	00004627 	.word	0x00004627
    5178:	00004651 	.word	0x00004651
    517c:	00004731 	.word	0x00004731
    5180:	00005b15 	.word	0x00005b15
    5184:	00005245 	.word	0x00005245
    5188:	000048e5 	.word	0x000048e5
    518c:	20000420 	.word	0x20000420

00005190 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    5190:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    5192:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    5194:	2a00      	cmp	r2, #0
    5196:	d101      	bne.n	519c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    5198:	0018      	movs	r0, r3
    519a:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    519c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    519e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    51a0:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    51a2:	2a00      	cmp	r2, #0
    51a4:	d1f8      	bne.n	5198 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    51a6:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    51a8:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    51aa:	2a00      	cmp	r2, #0
    51ac:	d1fc      	bne.n	51a8 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    51ae:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    51b0:	2102      	movs	r1, #2
    51b2:	7e1a      	ldrb	r2, [r3, #24]
    51b4:	420a      	tst	r2, r1
    51b6:	d0fc      	beq.n	51b2 <usart_write_wait+0x22>
	return STATUS_OK;
    51b8:	2300      	movs	r3, #0
    51ba:	e7ed      	b.n	5198 <usart_write_wait+0x8>

000051bc <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    51bc:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    51be:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    51c0:	2a00      	cmp	r2, #0
    51c2:	d101      	bne.n	51c8 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    51c4:	0018      	movs	r0, r3
    51c6:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    51c8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    51ca:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    51cc:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    51ce:	2a00      	cmp	r2, #0
    51d0:	d1f8      	bne.n	51c4 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    51d2:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    51d4:	7e10      	ldrb	r0, [r2, #24]
    51d6:	0740      	lsls	r0, r0, #29
    51d8:	d5f4      	bpl.n	51c4 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    51da:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    51dc:	2b00      	cmp	r3, #0
    51de:	d1fc      	bne.n	51da <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    51e0:	8b53      	ldrh	r3, [r2, #26]
    51e2:	b2db      	uxtb	r3, r3
	if (error_code) {
    51e4:	0698      	lsls	r0, r3, #26
    51e6:	d01d      	beq.n	5224 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    51e8:	0798      	lsls	r0, r3, #30
    51ea:	d503      	bpl.n	51f4 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    51ec:	2302      	movs	r3, #2
    51ee:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    51f0:	3318      	adds	r3, #24
    51f2:	e7e7      	b.n	51c4 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    51f4:	0758      	lsls	r0, r3, #29
    51f6:	d503      	bpl.n	5200 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    51f8:	2304      	movs	r3, #4
    51fa:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    51fc:	331a      	adds	r3, #26
    51fe:	e7e1      	b.n	51c4 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    5200:	07d8      	lsls	r0, r3, #31
    5202:	d503      	bpl.n	520c <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    5204:	2301      	movs	r3, #1
    5206:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    5208:	3312      	adds	r3, #18
    520a:	e7db      	b.n	51c4 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    520c:	06d8      	lsls	r0, r3, #27
    520e:	d503      	bpl.n	5218 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    5210:	2310      	movs	r3, #16
    5212:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    5214:	3332      	adds	r3, #50	; 0x32
    5216:	e7d5      	b.n	51c4 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    5218:	069b      	lsls	r3, r3, #26
    521a:	d503      	bpl.n	5224 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    521c:	2320      	movs	r3, #32
    521e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    5220:	3321      	adds	r3, #33	; 0x21
    5222:	e7cf      	b.n	51c4 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    5224:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    5226:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    5228:	2300      	movs	r3, #0
    522a:	e7cb      	b.n	51c4 <usart_read_wait+0x8>

0000522c <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    522c:	1c93      	adds	r3, r2, #2
    522e:	009b      	lsls	r3, r3, #2
    5230:	18c3      	adds	r3, r0, r3
    5232:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    5234:	2130      	movs	r1, #48	; 0x30
    5236:	2301      	movs	r3, #1
    5238:	4093      	lsls	r3, r2
    523a:	001a      	movs	r2, r3
    523c:	5c43      	ldrb	r3, [r0, r1]
    523e:	4313      	orrs	r3, r2
    5240:	5443      	strb	r3, [r0, r1]
}
    5242:	4770      	bx	lr

00005244 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    5244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    5246:	0080      	lsls	r0, r0, #2
    5248:	4b62      	ldr	r3, [pc, #392]	; (53d4 <_usart_interrupt_handler+0x190>)
    524a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    524c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    524e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    5250:	2b00      	cmp	r3, #0
    5252:	d1fc      	bne.n	524e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    5254:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    5256:	7da6      	ldrb	r6, [r4, #22]
    5258:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    525a:	2330      	movs	r3, #48	; 0x30
    525c:	5ceb      	ldrb	r3, [r5, r3]
    525e:	2231      	movs	r2, #49	; 0x31
    5260:	5caf      	ldrb	r7, [r5, r2]
    5262:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    5264:	07f3      	lsls	r3, r6, #31
    5266:	d522      	bpl.n	52ae <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    5268:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    526a:	b29b      	uxth	r3, r3
    526c:	2b00      	cmp	r3, #0
    526e:	d01c      	beq.n	52aa <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    5270:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5272:	7813      	ldrb	r3, [r2, #0]
    5274:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    5276:	1c51      	adds	r1, r2, #1
    5278:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    527a:	7969      	ldrb	r1, [r5, #5]
    527c:	2901      	cmp	r1, #1
    527e:	d00e      	beq.n	529e <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    5280:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    5282:	05db      	lsls	r3, r3, #23
    5284:	0ddb      	lsrs	r3, r3, #23
    5286:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    5288:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    528a:	3b01      	subs	r3, #1
    528c:	b29b      	uxth	r3, r3
    528e:	85eb      	strh	r3, [r5, #46]	; 0x2e
    5290:	2b00      	cmp	r3, #0
    5292:	d10c      	bne.n	52ae <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5294:	3301      	adds	r3, #1
    5296:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    5298:	3301      	adds	r3, #1
    529a:	75a3      	strb	r3, [r4, #22]
    529c:	e007      	b.n	52ae <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    529e:	7851      	ldrb	r1, [r2, #1]
    52a0:	0209      	lsls	r1, r1, #8
    52a2:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    52a4:	3202      	adds	r2, #2
    52a6:	62aa      	str	r2, [r5, #40]	; 0x28
    52a8:	e7eb      	b.n	5282 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    52aa:	2301      	movs	r3, #1
    52ac:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    52ae:	07b3      	lsls	r3, r6, #30
    52b0:	d506      	bpl.n	52c0 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    52b2:	2302      	movs	r3, #2
    52b4:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    52b6:	2200      	movs	r2, #0
    52b8:	3331      	adds	r3, #49	; 0x31
    52ba:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    52bc:	07fb      	lsls	r3, r7, #31
    52be:	d41a      	bmi.n	52f6 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    52c0:	0773      	lsls	r3, r6, #29
    52c2:	d565      	bpl.n	5390 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    52c4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    52c6:	b29b      	uxth	r3, r3
    52c8:	2b00      	cmp	r3, #0
    52ca:	d05f      	beq.n	538c <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    52cc:	8b63      	ldrh	r3, [r4, #26]
    52ce:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    52d0:	071a      	lsls	r2, r3, #28
    52d2:	d414      	bmi.n	52fe <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    52d4:	223f      	movs	r2, #63	; 0x3f
    52d6:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    52d8:	2b00      	cmp	r3, #0
    52da:	d034      	beq.n	5346 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    52dc:	079a      	lsls	r2, r3, #30
    52de:	d511      	bpl.n	5304 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    52e0:	221a      	movs	r2, #26
    52e2:	2332      	movs	r3, #50	; 0x32
    52e4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    52e6:	3b30      	subs	r3, #48	; 0x30
    52e8:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    52ea:	077b      	lsls	r3, r7, #29
    52ec:	d550      	bpl.n	5390 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    52ee:	0028      	movs	r0, r5
    52f0:	696b      	ldr	r3, [r5, #20]
    52f2:	4798      	blx	r3
    52f4:	e04c      	b.n	5390 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    52f6:	0028      	movs	r0, r5
    52f8:	68eb      	ldr	r3, [r5, #12]
    52fa:	4798      	blx	r3
    52fc:	e7e0      	b.n	52c0 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    52fe:	2237      	movs	r2, #55	; 0x37
    5300:	4013      	ands	r3, r2
    5302:	e7e9      	b.n	52d8 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    5304:	075a      	lsls	r2, r3, #29
    5306:	d505      	bpl.n	5314 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    5308:	221e      	movs	r2, #30
    530a:	2332      	movs	r3, #50	; 0x32
    530c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    530e:	3b2e      	subs	r3, #46	; 0x2e
    5310:	8363      	strh	r3, [r4, #26]
    5312:	e7ea      	b.n	52ea <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    5314:	07da      	lsls	r2, r3, #31
    5316:	d505      	bpl.n	5324 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    5318:	2213      	movs	r2, #19
    531a:	2332      	movs	r3, #50	; 0x32
    531c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    531e:	3b31      	subs	r3, #49	; 0x31
    5320:	8363      	strh	r3, [r4, #26]
    5322:	e7e2      	b.n	52ea <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    5324:	06da      	lsls	r2, r3, #27
    5326:	d505      	bpl.n	5334 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    5328:	2242      	movs	r2, #66	; 0x42
    532a:	2332      	movs	r3, #50	; 0x32
    532c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    532e:	3b22      	subs	r3, #34	; 0x22
    5330:	8363      	strh	r3, [r4, #26]
    5332:	e7da      	b.n	52ea <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    5334:	2220      	movs	r2, #32
    5336:	421a      	tst	r2, r3
    5338:	d0d7      	beq.n	52ea <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    533a:	3221      	adds	r2, #33	; 0x21
    533c:	2332      	movs	r3, #50	; 0x32
    533e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    5340:	3b12      	subs	r3, #18
    5342:	8363      	strh	r3, [r4, #26]
    5344:	e7d1      	b.n	52ea <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    5346:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    5348:	05db      	lsls	r3, r3, #23
    534a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    534c:	b2da      	uxtb	r2, r3
    534e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    5350:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    5352:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    5354:	1c51      	adds	r1, r2, #1
    5356:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5358:	7969      	ldrb	r1, [r5, #5]
    535a:	2901      	cmp	r1, #1
    535c:	d010      	beq.n	5380 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    535e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    5360:	3b01      	subs	r3, #1
    5362:	b29b      	uxth	r3, r3
    5364:	85ab      	strh	r3, [r5, #44]	; 0x2c
    5366:	2b00      	cmp	r3, #0
    5368:	d112      	bne.n	5390 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    536a:	3304      	adds	r3, #4
    536c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    536e:	2200      	movs	r2, #0
    5370:	332e      	adds	r3, #46	; 0x2e
    5372:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    5374:	07bb      	lsls	r3, r7, #30
    5376:	d50b      	bpl.n	5390 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    5378:	0028      	movs	r0, r5
    537a:	692b      	ldr	r3, [r5, #16]
    537c:	4798      	blx	r3
    537e:	e007      	b.n	5390 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    5380:	0a1b      	lsrs	r3, r3, #8
    5382:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    5384:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    5386:	3301      	adds	r3, #1
    5388:	626b      	str	r3, [r5, #36]	; 0x24
    538a:	e7e8      	b.n	535e <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    538c:	2304      	movs	r3, #4
    538e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    5390:	06f3      	lsls	r3, r6, #27
    5392:	d504      	bpl.n	539e <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    5394:	2310      	movs	r3, #16
    5396:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    5398:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    539a:	06fb      	lsls	r3, r7, #27
    539c:	d40e      	bmi.n	53bc <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    539e:	06b3      	lsls	r3, r6, #26
    53a0:	d504      	bpl.n	53ac <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    53a2:	2320      	movs	r3, #32
    53a4:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    53a6:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    53a8:	073b      	lsls	r3, r7, #28
    53aa:	d40b      	bmi.n	53c4 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    53ac:	0733      	lsls	r3, r6, #28
    53ae:	d504      	bpl.n	53ba <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    53b0:	2308      	movs	r3, #8
    53b2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    53b4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    53b6:	06bb      	lsls	r3, r7, #26
    53b8:	d408      	bmi.n	53cc <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    53ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    53bc:	0028      	movs	r0, r5
    53be:	69eb      	ldr	r3, [r5, #28]
    53c0:	4798      	blx	r3
    53c2:	e7ec      	b.n	539e <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    53c4:	0028      	movs	r0, r5
    53c6:	69ab      	ldr	r3, [r5, #24]
    53c8:	4798      	blx	r3
    53ca:	e7ef      	b.n	53ac <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    53cc:	6a2b      	ldr	r3, [r5, #32]
    53ce:	0028      	movs	r0, r5
    53d0:	4798      	blx	r3
}
    53d2:	e7f2      	b.n	53ba <_usart_interrupt_handler+0x176>
    53d4:	20000420 	.word	0x20000420

000053d8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    53d8:	b510      	push	{r4, lr}
	switch (clock_source) {
    53da:	2808      	cmp	r0, #8
    53dc:	d803      	bhi.n	53e6 <system_clock_source_get_hz+0xe>
    53de:	0080      	lsls	r0, r0, #2
    53e0:	4b1b      	ldr	r3, [pc, #108]	; (5450 <system_clock_source_get_hz+0x78>)
    53e2:	581b      	ldr	r3, [r3, r0]
    53e4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    53e6:	2000      	movs	r0, #0
    53e8:	e030      	b.n	544c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    53ea:	4b1a      	ldr	r3, [pc, #104]	; (5454 <system_clock_source_get_hz+0x7c>)
    53ec:	6918      	ldr	r0, [r3, #16]
    53ee:	e02d      	b.n	544c <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    53f0:	4b19      	ldr	r3, [pc, #100]	; (5458 <system_clock_source_get_hz+0x80>)
    53f2:	6a1b      	ldr	r3, [r3, #32]
    53f4:	059b      	lsls	r3, r3, #22
    53f6:	0f9b      	lsrs	r3, r3, #30
    53f8:	4818      	ldr	r0, [pc, #96]	; (545c <system_clock_source_get_hz+0x84>)
    53fa:	40d8      	lsrs	r0, r3
    53fc:	e026      	b.n	544c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    53fe:	4b15      	ldr	r3, [pc, #84]	; (5454 <system_clock_source_get_hz+0x7c>)
    5400:	6958      	ldr	r0, [r3, #20]
    5402:	e023      	b.n	544c <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    5404:	4b13      	ldr	r3, [pc, #76]	; (5454 <system_clock_source_get_hz+0x7c>)
    5406:	681b      	ldr	r3, [r3, #0]
			return 0;
    5408:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    540a:	079b      	lsls	r3, r3, #30
    540c:	d51e      	bpl.n	544c <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    540e:	4912      	ldr	r1, [pc, #72]	; (5458 <system_clock_source_get_hz+0x80>)
    5410:	2210      	movs	r2, #16
    5412:	68cb      	ldr	r3, [r1, #12]
    5414:	421a      	tst	r2, r3
    5416:	d0fc      	beq.n	5412 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    5418:	4b0e      	ldr	r3, [pc, #56]	; (5454 <system_clock_source_get_hz+0x7c>)
    541a:	681b      	ldr	r3, [r3, #0]
    541c:	075b      	lsls	r3, r3, #29
    541e:	d401      	bmi.n	5424 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    5420:	480f      	ldr	r0, [pc, #60]	; (5460 <system_clock_source_get_hz+0x88>)
    5422:	e013      	b.n	544c <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5424:	2000      	movs	r0, #0
    5426:	4b0f      	ldr	r3, [pc, #60]	; (5464 <system_clock_source_get_hz+0x8c>)
    5428:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    542a:	4b0a      	ldr	r3, [pc, #40]	; (5454 <system_clock_source_get_hz+0x7c>)
    542c:	689b      	ldr	r3, [r3, #8]
    542e:	041b      	lsls	r3, r3, #16
    5430:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5432:	4358      	muls	r0, r3
    5434:	e00a      	b.n	544c <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    5436:	2350      	movs	r3, #80	; 0x50
    5438:	4a07      	ldr	r2, [pc, #28]	; (5458 <system_clock_source_get_hz+0x80>)
    543a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    543c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    543e:	075b      	lsls	r3, r3, #29
    5440:	d504      	bpl.n	544c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    5442:	4b04      	ldr	r3, [pc, #16]	; (5454 <system_clock_source_get_hz+0x7c>)
    5444:	68d8      	ldr	r0, [r3, #12]
    5446:	e001      	b.n	544c <system_clock_source_get_hz+0x74>
		return 32768UL;
    5448:	2080      	movs	r0, #128	; 0x80
    544a:	0200      	lsls	r0, r0, #8
	}
}
    544c:	bd10      	pop	{r4, pc}
    544e:	46c0      	nop			; (mov r8, r8)
    5450:	0000bc8c 	.word	0x0000bc8c
    5454:	20000144 	.word	0x20000144
    5458:	40000800 	.word	0x40000800
    545c:	007a1200 	.word	0x007a1200
    5460:	02dc6c00 	.word	0x02dc6c00
    5464:	00005a39 	.word	0x00005a39

00005468 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    5468:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    546a:	490c      	ldr	r1, [pc, #48]	; (549c <system_clock_source_osc8m_set_config+0x34>)
    546c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    546e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    5470:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    5472:	7840      	ldrb	r0, [r0, #1]
    5474:	2201      	movs	r2, #1
    5476:	4010      	ands	r0, r2
    5478:	0180      	lsls	r0, r0, #6
    547a:	2640      	movs	r6, #64	; 0x40
    547c:	43b3      	bics	r3, r6
    547e:	4303      	orrs	r3, r0
    5480:	402a      	ands	r2, r5
    5482:	01d2      	lsls	r2, r2, #7
    5484:	2080      	movs	r0, #128	; 0x80
    5486:	4383      	bics	r3, r0
    5488:	4313      	orrs	r3, r2
    548a:	2203      	movs	r2, #3
    548c:	4022      	ands	r2, r4
    548e:	0212      	lsls	r2, r2, #8
    5490:	4803      	ldr	r0, [pc, #12]	; (54a0 <system_clock_source_osc8m_set_config+0x38>)
    5492:	4003      	ands	r3, r0
    5494:	4313      	orrs	r3, r2
    5496:	620b      	str	r3, [r1, #32]
}
    5498:	bd70      	pop	{r4, r5, r6, pc}
    549a:	46c0      	nop			; (mov r8, r8)
    549c:	40000800 	.word	0x40000800
    54a0:	fffffcff 	.word	0xfffffcff

000054a4 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    54a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    54a6:	46de      	mov	lr, fp
    54a8:	4657      	mov	r7, sl
    54aa:	464e      	mov	r6, r9
    54ac:	4645      	mov	r5, r8
    54ae:	b5e0      	push	{r5, r6, r7, lr}
    54b0:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    54b2:	4b26      	ldr	r3, [pc, #152]	; (554c <system_clock_source_xosc32k_set_config+0xa8>)
    54b4:	469b      	mov	fp, r3
    54b6:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    54b8:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    54ba:	7800      	ldrb	r0, [r0, #0]
    54bc:	4242      	negs	r2, r0
    54be:	4142      	adcs	r2, r0
    54c0:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    54c2:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    54c4:	78ca      	ldrb	r2, [r1, #3]
    54c6:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    54c8:	790a      	ldrb	r2, [r1, #4]
    54ca:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    54cc:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    54ce:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    54d0:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    54d2:	688a      	ldr	r2, [r1, #8]
    54d4:	491e      	ldr	r1, [pc, #120]	; (5550 <system_clock_source_xosc32k_set_config+0xac>)
    54d6:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    54d8:	2101      	movs	r1, #1
    54da:	464a      	mov	r2, r9
    54dc:	0092      	lsls	r2, r2, #2
    54de:	4691      	mov	r9, r2
    54e0:	2204      	movs	r2, #4
    54e2:	4393      	bics	r3, r2
    54e4:	464a      	mov	r2, r9
    54e6:	4313      	orrs	r3, r2
    54e8:	4642      	mov	r2, r8
    54ea:	400a      	ands	r2, r1
    54ec:	00d2      	lsls	r2, r2, #3
    54ee:	4690      	mov	r8, r2
    54f0:	2208      	movs	r2, #8
    54f2:	4393      	bics	r3, r2
    54f4:	4642      	mov	r2, r8
    54f6:	4313      	orrs	r3, r2
    54f8:	4662      	mov	r2, ip
    54fa:	400a      	ands	r2, r1
    54fc:	0112      	lsls	r2, r2, #4
    54fe:	4694      	mov	ip, r2
    5500:	2210      	movs	r2, #16
    5502:	4393      	bics	r3, r2
    5504:	4662      	mov	r2, ip
    5506:	4313      	orrs	r3, r2
    5508:	4008      	ands	r0, r1
    550a:	0140      	lsls	r0, r0, #5
    550c:	2220      	movs	r2, #32
    550e:	4393      	bics	r3, r2
    5510:	4303      	orrs	r3, r0
    5512:	400f      	ands	r7, r1
    5514:	01bf      	lsls	r7, r7, #6
    5516:	2040      	movs	r0, #64	; 0x40
    5518:	4383      	bics	r3, r0
    551a:	433b      	orrs	r3, r7
    551c:	400e      	ands	r6, r1
    551e:	01f6      	lsls	r6, r6, #7
    5520:	3040      	adds	r0, #64	; 0x40
    5522:	4383      	bics	r3, r0
    5524:	4333      	orrs	r3, r6
    5526:	3879      	subs	r0, #121	; 0x79
    5528:	4005      	ands	r5, r0
    552a:	022d      	lsls	r5, r5, #8
    552c:	4809      	ldr	r0, [pc, #36]	; (5554 <system_clock_source_xosc32k_set_config+0xb0>)
    552e:	4003      	ands	r3, r0
    5530:	432b      	orrs	r3, r5
    5532:	4021      	ands	r1, r4
    5534:	0309      	lsls	r1, r1, #12
    5536:	4808      	ldr	r0, [pc, #32]	; (5558 <system_clock_source_xosc32k_set_config+0xb4>)
    5538:	4003      	ands	r3, r0
    553a:	430b      	orrs	r3, r1
    553c:	465a      	mov	r2, fp
    553e:	8293      	strh	r3, [r2, #20]
}
    5540:	bc3c      	pop	{r2, r3, r4, r5}
    5542:	4690      	mov	r8, r2
    5544:	4699      	mov	r9, r3
    5546:	46a2      	mov	sl, r4
    5548:	46ab      	mov	fp, r5
    554a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    554c:	40000800 	.word	0x40000800
    5550:	20000144 	.word	0x20000144
    5554:	fffff8ff 	.word	0xfffff8ff
    5558:	ffffefff 	.word	0xffffefff

0000555c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    555c:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    555e:	7a03      	ldrb	r3, [r0, #8]
    5560:	069b      	lsls	r3, r3, #26
    5562:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    5564:	8942      	ldrh	r2, [r0, #10]
    5566:	0592      	lsls	r2, r2, #22
    5568:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    556a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    556c:	4918      	ldr	r1, [pc, #96]	; (55d0 <system_clock_source_dfll_set_config+0x74>)
    556e:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    5570:	7983      	ldrb	r3, [r0, #6]
    5572:	79c2      	ldrb	r2, [r0, #7]
    5574:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    5576:	8842      	ldrh	r2, [r0, #2]
    5578:	8884      	ldrh	r4, [r0, #4]
    557a:	4322      	orrs	r2, r4
    557c:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    557e:	7842      	ldrb	r2, [r0, #1]
    5580:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    5582:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    5584:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    5586:	7803      	ldrb	r3, [r0, #0]
    5588:	2b04      	cmp	r3, #4
    558a:	d011      	beq.n	55b0 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    558c:	2b20      	cmp	r3, #32
    558e:	d10e      	bne.n	55ae <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5590:	7b03      	ldrb	r3, [r0, #12]
    5592:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    5594:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5596:	4313      	orrs	r3, r2
    5598:	89c2      	ldrh	r2, [r0, #14]
    559a:	0412      	lsls	r2, r2, #16
    559c:	490d      	ldr	r1, [pc, #52]	; (55d4 <system_clock_source_dfll_set_config+0x78>)
    559e:	400a      	ands	r2, r1
    55a0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    55a2:	4a0b      	ldr	r2, [pc, #44]	; (55d0 <system_clock_source_dfll_set_config+0x74>)
    55a4:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    55a6:	6811      	ldr	r1, [r2, #0]
    55a8:	4b0b      	ldr	r3, [pc, #44]	; (55d8 <system_clock_source_dfll_set_config+0x7c>)
    55aa:	430b      	orrs	r3, r1
    55ac:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    55ae:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    55b0:	7b03      	ldrb	r3, [r0, #12]
    55b2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    55b4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    55b6:	4313      	orrs	r3, r2
    55b8:	89c2      	ldrh	r2, [r0, #14]
    55ba:	0412      	lsls	r2, r2, #16
    55bc:	4905      	ldr	r1, [pc, #20]	; (55d4 <system_clock_source_dfll_set_config+0x78>)
    55be:	400a      	ands	r2, r1
    55c0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    55c2:	4a03      	ldr	r2, [pc, #12]	; (55d0 <system_clock_source_dfll_set_config+0x74>)
    55c4:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    55c6:	6813      	ldr	r3, [r2, #0]
    55c8:	2104      	movs	r1, #4
    55ca:	430b      	orrs	r3, r1
    55cc:	6013      	str	r3, [r2, #0]
    55ce:	e7ee      	b.n	55ae <system_clock_source_dfll_set_config+0x52>
    55d0:	20000144 	.word	0x20000144
    55d4:	03ff0000 	.word	0x03ff0000
    55d8:	00000424 	.word	0x00000424

000055dc <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    55dc:	2808      	cmp	r0, #8
    55de:	d803      	bhi.n	55e8 <system_clock_source_enable+0xc>
    55e0:	0080      	lsls	r0, r0, #2
    55e2:	4b25      	ldr	r3, [pc, #148]	; (5678 <system_clock_source_enable+0x9c>)
    55e4:	581b      	ldr	r3, [r3, r0]
    55e6:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    55e8:	2017      	movs	r0, #23
    55ea:	e044      	b.n	5676 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    55ec:	4a23      	ldr	r2, [pc, #140]	; (567c <system_clock_source_enable+0xa0>)
    55ee:	6a13      	ldr	r3, [r2, #32]
    55f0:	2102      	movs	r1, #2
    55f2:	430b      	orrs	r3, r1
    55f4:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    55f6:	2000      	movs	r0, #0
    55f8:	e03d      	b.n	5676 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    55fa:	4a20      	ldr	r2, [pc, #128]	; (567c <system_clock_source_enable+0xa0>)
    55fc:	6993      	ldr	r3, [r2, #24]
    55fe:	2102      	movs	r1, #2
    5600:	430b      	orrs	r3, r1
    5602:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    5604:	2000      	movs	r0, #0
		break;
    5606:	e036      	b.n	5676 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    5608:	4a1c      	ldr	r2, [pc, #112]	; (567c <system_clock_source_enable+0xa0>)
    560a:	8a13      	ldrh	r3, [r2, #16]
    560c:	2102      	movs	r1, #2
    560e:	430b      	orrs	r3, r1
    5610:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    5612:	2000      	movs	r0, #0
		break;
    5614:	e02f      	b.n	5676 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    5616:	4a19      	ldr	r2, [pc, #100]	; (567c <system_clock_source_enable+0xa0>)
    5618:	8a93      	ldrh	r3, [r2, #20]
    561a:	2102      	movs	r1, #2
    561c:	430b      	orrs	r3, r1
    561e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    5620:	2000      	movs	r0, #0
		break;
    5622:	e028      	b.n	5676 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    5624:	4916      	ldr	r1, [pc, #88]	; (5680 <system_clock_source_enable+0xa4>)
    5626:	680b      	ldr	r3, [r1, #0]
    5628:	2202      	movs	r2, #2
    562a:	4313      	orrs	r3, r2
    562c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    562e:	4b13      	ldr	r3, [pc, #76]	; (567c <system_clock_source_enable+0xa0>)
    5630:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5632:	0019      	movs	r1, r3
    5634:	320e      	adds	r2, #14
    5636:	68cb      	ldr	r3, [r1, #12]
    5638:	421a      	tst	r2, r3
    563a:	d0fc      	beq.n	5636 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    563c:	4a10      	ldr	r2, [pc, #64]	; (5680 <system_clock_source_enable+0xa4>)
    563e:	6891      	ldr	r1, [r2, #8]
    5640:	4b0e      	ldr	r3, [pc, #56]	; (567c <system_clock_source_enable+0xa0>)
    5642:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    5644:	6852      	ldr	r2, [r2, #4]
    5646:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    5648:	2200      	movs	r2, #0
    564a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    564c:	0019      	movs	r1, r3
    564e:	3210      	adds	r2, #16
    5650:	68cb      	ldr	r3, [r1, #12]
    5652:	421a      	tst	r2, r3
    5654:	d0fc      	beq.n	5650 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    5656:	4b0a      	ldr	r3, [pc, #40]	; (5680 <system_clock_source_enable+0xa4>)
    5658:	681b      	ldr	r3, [r3, #0]
    565a:	b29b      	uxth	r3, r3
    565c:	4a07      	ldr	r2, [pc, #28]	; (567c <system_clock_source_enable+0xa0>)
    565e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    5660:	2000      	movs	r0, #0
    5662:	e008      	b.n	5676 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    5664:	4905      	ldr	r1, [pc, #20]	; (567c <system_clock_source_enable+0xa0>)
    5666:	2244      	movs	r2, #68	; 0x44
    5668:	5c8b      	ldrb	r3, [r1, r2]
    566a:	2002      	movs	r0, #2
    566c:	4303      	orrs	r3, r0
    566e:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    5670:	2000      	movs	r0, #0
		break;
    5672:	e000      	b.n	5676 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    5674:	2000      	movs	r0, #0
}
    5676:	4770      	bx	lr
    5678:	0000bcb0 	.word	0x0000bcb0
    567c:	40000800 	.word	0x40000800
    5680:	20000144 	.word	0x20000144

00005684 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    5684:	b5f0      	push	{r4, r5, r6, r7, lr}
    5686:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    5688:	22c2      	movs	r2, #194	; 0xc2
    568a:	00d2      	lsls	r2, r2, #3
    568c:	4b47      	ldr	r3, [pc, #284]	; (57ac <system_clock_init+0x128>)
    568e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    5690:	4a47      	ldr	r2, [pc, #284]	; (57b0 <system_clock_init+0x12c>)
    5692:	6853      	ldr	r3, [r2, #4]
    5694:	211e      	movs	r1, #30
    5696:	438b      	bics	r3, r1
    5698:	391a      	subs	r1, #26
    569a:	430b      	orrs	r3, r1
    569c:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    569e:	2202      	movs	r2, #2
    56a0:	ab01      	add	r3, sp, #4
    56a2:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    56a4:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    56a6:	4d43      	ldr	r5, [pc, #268]	; (57b4 <system_clock_init+0x130>)
    56a8:	b2e0      	uxtb	r0, r4
    56aa:	a901      	add	r1, sp, #4
    56ac:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    56ae:	3401      	adds	r4, #1
    56b0:	2c25      	cmp	r4, #37	; 0x25
    56b2:	d1f9      	bne.n	56a8 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    56b4:	a80a      	add	r0, sp, #40	; 0x28
    56b6:	2300      	movs	r3, #0
    56b8:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    56ba:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    56bc:	2280      	movs	r2, #128	; 0x80
    56be:	0212      	lsls	r2, r2, #8
    56c0:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    56c2:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    56c4:	2201      	movs	r2, #1
    56c6:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    56c8:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    56ca:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    56cc:	3202      	adds	r2, #2
    56ce:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    56d0:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    56d2:	4b39      	ldr	r3, [pc, #228]	; (57b8 <system_clock_init+0x134>)
    56d4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    56d6:	2005      	movs	r0, #5
    56d8:	4b38      	ldr	r3, [pc, #224]	; (57bc <system_clock_init+0x138>)
    56da:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    56dc:	4933      	ldr	r1, [pc, #204]	; (57ac <system_clock_init+0x128>)
    56de:	2202      	movs	r2, #2
    56e0:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    56e2:	421a      	tst	r2, r3
    56e4:	d0fc      	beq.n	56e0 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    56e6:	4a31      	ldr	r2, [pc, #196]	; (57ac <system_clock_init+0x128>)
    56e8:	8a93      	ldrh	r3, [r2, #20]
    56ea:	2180      	movs	r1, #128	; 0x80
    56ec:	430b      	orrs	r3, r1
    56ee:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    56f0:	ab05      	add	r3, sp, #20
    56f2:	2100      	movs	r1, #0
    56f4:	2200      	movs	r2, #0
    56f6:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    56f8:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    56fa:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    56fc:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    56fe:	313f      	adds	r1, #63	; 0x3f
    5700:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    5702:	393b      	subs	r1, #59	; 0x3b
    5704:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    5706:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    5708:	4b2d      	ldr	r3, [pc, #180]	; (57c0 <system_clock_init+0x13c>)
    570a:	681b      	ldr	r3, [r3, #0]
    570c:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    570e:	2b3f      	cmp	r3, #63	; 0x3f
    5710:	d04a      	beq.n	57a8 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    5712:	a805      	add	r0, sp, #20
    5714:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    5716:	4b2b      	ldr	r3, [pc, #172]	; (57c4 <system_clock_init+0x140>)
    5718:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    571a:	2307      	movs	r3, #7
    571c:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    571e:	3338      	adds	r3, #56	; 0x38
    5720:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    5722:	4b29      	ldr	r3, [pc, #164]	; (57c8 <system_clock_init+0x144>)
    5724:	4798      	blx	r3
	config->run_in_standby  = false;
    5726:	a804      	add	r0, sp, #16
    5728:	2500      	movs	r5, #0
    572a:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    572c:	2601      	movs	r6, #1
    572e:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    5730:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    5732:	4b26      	ldr	r3, [pc, #152]	; (57cc <system_clock_init+0x148>)
    5734:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    5736:	2006      	movs	r0, #6
    5738:	4f20      	ldr	r7, [pc, #128]	; (57bc <system_clock_init+0x138>)
    573a:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    573c:	4b24      	ldr	r3, [pc, #144]	; (57d0 <system_clock_init+0x14c>)
    573e:	4798      	blx	r3
	config->division_factor    = 1;
    5740:	ac01      	add	r4, sp, #4
    5742:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    5744:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    5746:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    5748:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    574a:	2305      	movs	r3, #5
    574c:	7023      	strb	r3, [r4, #0]
    574e:	0021      	movs	r1, r4
    5750:	2001      	movs	r0, #1
    5752:	4b20      	ldr	r3, [pc, #128]	; (57d4 <system_clock_init+0x150>)
    5754:	4798      	blx	r3
    5756:	2001      	movs	r0, #1
    5758:	4b1f      	ldr	r3, [pc, #124]	; (57d8 <system_clock_init+0x154>)
    575a:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    575c:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    575e:	0021      	movs	r1, r4
    5760:	2000      	movs	r0, #0
    5762:	4b14      	ldr	r3, [pc, #80]	; (57b4 <system_clock_init+0x130>)
    5764:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    5766:	2000      	movs	r0, #0
    5768:	4b1c      	ldr	r3, [pc, #112]	; (57dc <system_clock_init+0x158>)
    576a:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    576c:	2007      	movs	r0, #7
    576e:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    5770:	490e      	ldr	r1, [pc, #56]	; (57ac <system_clock_init+0x128>)
    5772:	22d0      	movs	r2, #208	; 0xd0
    5774:	68cb      	ldr	r3, [r1, #12]
    5776:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    5778:	2bd0      	cmp	r3, #208	; 0xd0
    577a:	d1fb      	bne.n	5774 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    577c:	4a18      	ldr	r2, [pc, #96]	; (57e0 <system_clock_init+0x15c>)
    577e:	2300      	movs	r3, #0
    5780:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    5782:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    5784:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    5786:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    5788:	a901      	add	r1, sp, #4
    578a:	2201      	movs	r2, #1
    578c:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    578e:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    5790:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    5792:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    5794:	3307      	adds	r3, #7
    5796:	700b      	strb	r3, [r1, #0]
    5798:	2000      	movs	r0, #0
    579a:	4b0e      	ldr	r3, [pc, #56]	; (57d4 <system_clock_init+0x150>)
    579c:	4798      	blx	r3
    579e:	2000      	movs	r0, #0
    57a0:	4b0d      	ldr	r3, [pc, #52]	; (57d8 <system_clock_init+0x154>)
    57a2:	4798      	blx	r3
#endif
}
    57a4:	b00f      	add	sp, #60	; 0x3c
    57a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    57a8:	3b20      	subs	r3, #32
    57aa:	e7b2      	b.n	5712 <system_clock_init+0x8e>
    57ac:	40000800 	.word	0x40000800
    57b0:	41004000 	.word	0x41004000
    57b4:	00005a1d 	.word	0x00005a1d
    57b8:	000054a5 	.word	0x000054a5
    57bc:	000055dd 	.word	0x000055dd
    57c0:	00806024 	.word	0x00806024
    57c4:	000005b9 	.word	0x000005b9
    57c8:	0000555d 	.word	0x0000555d
    57cc:	00005469 	.word	0x00005469
    57d0:	000057e5 	.word	0x000057e5
    57d4:	00005809 	.word	0x00005809
    57d8:	000058c1 	.word	0x000058c1
    57dc:	00005991 	.word	0x00005991
    57e0:	40000400 	.word	0x40000400

000057e4 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    57e4:	4a06      	ldr	r2, [pc, #24]	; (5800 <system_gclk_init+0x1c>)
    57e6:	6993      	ldr	r3, [r2, #24]
    57e8:	2108      	movs	r1, #8
    57ea:	430b      	orrs	r3, r1
    57ec:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    57ee:	2201      	movs	r2, #1
    57f0:	4b04      	ldr	r3, [pc, #16]	; (5804 <system_gclk_init+0x20>)
    57f2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    57f4:	0019      	movs	r1, r3
    57f6:	780b      	ldrb	r3, [r1, #0]
    57f8:	4213      	tst	r3, r2
    57fa:	d1fc      	bne.n	57f6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    57fc:	4770      	bx	lr
    57fe:	46c0      	nop			; (mov r8, r8)
    5800:	40000400 	.word	0x40000400
    5804:	40000c00 	.word	0x40000c00

00005808 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    5808:	b570      	push	{r4, r5, r6, lr}
    580a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    580c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    580e:	780d      	ldrb	r5, [r1, #0]
    5810:	022d      	lsls	r5, r5, #8
    5812:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    5814:	784b      	ldrb	r3, [r1, #1]
    5816:	2b00      	cmp	r3, #0
    5818:	d002      	beq.n	5820 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    581a:	2380      	movs	r3, #128	; 0x80
    581c:	02db      	lsls	r3, r3, #11
    581e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    5820:	7a4b      	ldrb	r3, [r1, #9]
    5822:	2b00      	cmp	r3, #0
    5824:	d002      	beq.n	582c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    5826:	2380      	movs	r3, #128	; 0x80
    5828:	031b      	lsls	r3, r3, #12
    582a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    582c:	6848      	ldr	r0, [r1, #4]
    582e:	2801      	cmp	r0, #1
    5830:	d910      	bls.n	5854 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    5832:	1e43      	subs	r3, r0, #1
    5834:	4218      	tst	r0, r3
    5836:	d134      	bne.n	58a2 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    5838:	2802      	cmp	r0, #2
    583a:	d930      	bls.n	589e <system_gclk_gen_set_config+0x96>
    583c:	2302      	movs	r3, #2
    583e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    5840:	3201      	adds	r2, #1
						mask <<= 1) {
    5842:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    5844:	4298      	cmp	r0, r3
    5846:	d8fb      	bhi.n	5840 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    5848:	0212      	lsls	r2, r2, #8
    584a:	4332      	orrs	r2, r6
    584c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    584e:	2380      	movs	r3, #128	; 0x80
    5850:	035b      	lsls	r3, r3, #13
    5852:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    5854:	7a0b      	ldrb	r3, [r1, #8]
    5856:	2b00      	cmp	r3, #0
    5858:	d002      	beq.n	5860 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    585a:	2380      	movs	r3, #128	; 0x80
    585c:	039b      	lsls	r3, r3, #14
    585e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5860:	4a13      	ldr	r2, [pc, #76]	; (58b0 <system_gclk_gen_set_config+0xa8>)
    5862:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    5864:	b25b      	sxtb	r3, r3
    5866:	2b00      	cmp	r3, #0
    5868:	dbfb      	blt.n	5862 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    586a:	4b12      	ldr	r3, [pc, #72]	; (58b4 <system_gclk_gen_set_config+0xac>)
    586c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    586e:	4b12      	ldr	r3, [pc, #72]	; (58b8 <system_gclk_gen_set_config+0xb0>)
    5870:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5872:	4a0f      	ldr	r2, [pc, #60]	; (58b0 <system_gclk_gen_set_config+0xa8>)
    5874:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    5876:	b25b      	sxtb	r3, r3
    5878:	2b00      	cmp	r3, #0
    587a:	dbfb      	blt.n	5874 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    587c:	4b0c      	ldr	r3, [pc, #48]	; (58b0 <system_gclk_gen_set_config+0xa8>)
    587e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5880:	001a      	movs	r2, r3
    5882:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    5884:	b25b      	sxtb	r3, r3
    5886:	2b00      	cmp	r3, #0
    5888:	dbfb      	blt.n	5882 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    588a:	4a09      	ldr	r2, [pc, #36]	; (58b0 <system_gclk_gen_set_config+0xa8>)
    588c:	6853      	ldr	r3, [r2, #4]
    588e:	2180      	movs	r1, #128	; 0x80
    5890:	0249      	lsls	r1, r1, #9
    5892:	400b      	ands	r3, r1
    5894:	431d      	orrs	r5, r3
    5896:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    5898:	4b08      	ldr	r3, [pc, #32]	; (58bc <system_gclk_gen_set_config+0xb4>)
    589a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    589c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    589e:	2200      	movs	r2, #0
    58a0:	e7d2      	b.n	5848 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    58a2:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    58a4:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    58a6:	2380      	movs	r3, #128	; 0x80
    58a8:	029b      	lsls	r3, r3, #10
    58aa:	431d      	orrs	r5, r3
    58ac:	e7d2      	b.n	5854 <system_gclk_gen_set_config+0x4c>
    58ae:	46c0      	nop			; (mov r8, r8)
    58b0:	40000c00 	.word	0x40000c00
    58b4:	000042d1 	.word	0x000042d1
    58b8:	40000c08 	.word	0x40000c08
    58bc:	00004311 	.word	0x00004311

000058c0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    58c0:	b510      	push	{r4, lr}
    58c2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    58c4:	4a0b      	ldr	r2, [pc, #44]	; (58f4 <system_gclk_gen_enable+0x34>)
    58c6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    58c8:	b25b      	sxtb	r3, r3
    58ca:	2b00      	cmp	r3, #0
    58cc:	dbfb      	blt.n	58c6 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    58ce:	4b0a      	ldr	r3, [pc, #40]	; (58f8 <system_gclk_gen_enable+0x38>)
    58d0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    58d2:	4b0a      	ldr	r3, [pc, #40]	; (58fc <system_gclk_gen_enable+0x3c>)
    58d4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    58d6:	4a07      	ldr	r2, [pc, #28]	; (58f4 <system_gclk_gen_enable+0x34>)
    58d8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    58da:	b25b      	sxtb	r3, r3
    58dc:	2b00      	cmp	r3, #0
    58de:	dbfb      	blt.n	58d8 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    58e0:	4a04      	ldr	r2, [pc, #16]	; (58f4 <system_gclk_gen_enable+0x34>)
    58e2:	6851      	ldr	r1, [r2, #4]
    58e4:	2380      	movs	r3, #128	; 0x80
    58e6:	025b      	lsls	r3, r3, #9
    58e8:	430b      	orrs	r3, r1
    58ea:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    58ec:	4b04      	ldr	r3, [pc, #16]	; (5900 <system_gclk_gen_enable+0x40>)
    58ee:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    58f0:	bd10      	pop	{r4, pc}
    58f2:	46c0      	nop			; (mov r8, r8)
    58f4:	40000c00 	.word	0x40000c00
    58f8:	000042d1 	.word	0x000042d1
    58fc:	40000c04 	.word	0x40000c04
    5900:	00004311 	.word	0x00004311

00005904 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    5904:	b570      	push	{r4, r5, r6, lr}
    5906:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5908:	4a1a      	ldr	r2, [pc, #104]	; (5974 <system_gclk_gen_get_hz+0x70>)
    590a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    590c:	b25b      	sxtb	r3, r3
    590e:	2b00      	cmp	r3, #0
    5910:	dbfb      	blt.n	590a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    5912:	4b19      	ldr	r3, [pc, #100]	; (5978 <system_gclk_gen_get_hz+0x74>)
    5914:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5916:	4b19      	ldr	r3, [pc, #100]	; (597c <system_gclk_gen_get_hz+0x78>)
    5918:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    591a:	4a16      	ldr	r2, [pc, #88]	; (5974 <system_gclk_gen_get_hz+0x70>)
    591c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    591e:	b25b      	sxtb	r3, r3
    5920:	2b00      	cmp	r3, #0
    5922:	dbfb      	blt.n	591c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    5924:	4e13      	ldr	r6, [pc, #76]	; (5974 <system_gclk_gen_get_hz+0x70>)
    5926:	6870      	ldr	r0, [r6, #4]
    5928:	04c0      	lsls	r0, r0, #19
    592a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    592c:	4b14      	ldr	r3, [pc, #80]	; (5980 <system_gclk_gen_get_hz+0x7c>)
    592e:	4798      	blx	r3
    5930:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5932:	4b12      	ldr	r3, [pc, #72]	; (597c <system_gclk_gen_get_hz+0x78>)
    5934:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    5936:	6876      	ldr	r6, [r6, #4]
    5938:	02f6      	lsls	r6, r6, #11
    593a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    593c:	4b11      	ldr	r3, [pc, #68]	; (5984 <system_gclk_gen_get_hz+0x80>)
    593e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5940:	4a0c      	ldr	r2, [pc, #48]	; (5974 <system_gclk_gen_get_hz+0x70>)
    5942:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5944:	b25b      	sxtb	r3, r3
    5946:	2b00      	cmp	r3, #0
    5948:	dbfb      	blt.n	5942 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    594a:	4b0a      	ldr	r3, [pc, #40]	; (5974 <system_gclk_gen_get_hz+0x70>)
    594c:	689c      	ldr	r4, [r3, #8]
    594e:	0224      	lsls	r4, r4, #8
    5950:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    5952:	4b0d      	ldr	r3, [pc, #52]	; (5988 <system_gclk_gen_get_hz+0x84>)
    5954:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    5956:	2e00      	cmp	r6, #0
    5958:	d107      	bne.n	596a <system_gclk_gen_get_hz+0x66>
    595a:	2c01      	cmp	r4, #1
    595c:	d907      	bls.n	596e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    595e:	0021      	movs	r1, r4
    5960:	0028      	movs	r0, r5
    5962:	4b0a      	ldr	r3, [pc, #40]	; (598c <system_gclk_gen_get_hz+0x88>)
    5964:	4798      	blx	r3
    5966:	0005      	movs	r5, r0
    5968:	e001      	b.n	596e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    596a:	3401      	adds	r4, #1
    596c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    596e:	0028      	movs	r0, r5
    5970:	bd70      	pop	{r4, r5, r6, pc}
    5972:	46c0      	nop			; (mov r8, r8)
    5974:	40000c00 	.word	0x40000c00
    5978:	000042d1 	.word	0x000042d1
    597c:	40000c04 	.word	0x40000c04
    5980:	000053d9 	.word	0x000053d9
    5984:	40000c08 	.word	0x40000c08
    5988:	00004311 	.word	0x00004311
    598c:	00007b9d 	.word	0x00007b9d

00005990 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    5990:	b510      	push	{r4, lr}
    5992:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    5994:	4b06      	ldr	r3, [pc, #24]	; (59b0 <system_gclk_chan_enable+0x20>)
    5996:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5998:	4b06      	ldr	r3, [pc, #24]	; (59b4 <system_gclk_chan_enable+0x24>)
    599a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    599c:	4a06      	ldr	r2, [pc, #24]	; (59b8 <system_gclk_chan_enable+0x28>)
    599e:	8853      	ldrh	r3, [r2, #2]
    59a0:	2180      	movs	r1, #128	; 0x80
    59a2:	01c9      	lsls	r1, r1, #7
    59a4:	430b      	orrs	r3, r1
    59a6:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    59a8:	4b04      	ldr	r3, [pc, #16]	; (59bc <system_gclk_chan_enable+0x2c>)
    59aa:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    59ac:	bd10      	pop	{r4, pc}
    59ae:	46c0      	nop			; (mov r8, r8)
    59b0:	000042d1 	.word	0x000042d1
    59b4:	40000c02 	.word	0x40000c02
    59b8:	40000c00 	.word	0x40000c00
    59bc:	00004311 	.word	0x00004311

000059c0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    59c0:	b510      	push	{r4, lr}
    59c2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    59c4:	4b0f      	ldr	r3, [pc, #60]	; (5a04 <system_gclk_chan_disable+0x44>)
    59c6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    59c8:	4b0f      	ldr	r3, [pc, #60]	; (5a08 <system_gclk_chan_disable+0x48>)
    59ca:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    59cc:	4a0f      	ldr	r2, [pc, #60]	; (5a0c <system_gclk_chan_disable+0x4c>)
    59ce:	8853      	ldrh	r3, [r2, #2]
    59d0:	051b      	lsls	r3, r3, #20
    59d2:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    59d4:	8853      	ldrh	r3, [r2, #2]
    59d6:	490e      	ldr	r1, [pc, #56]	; (5a10 <system_gclk_chan_disable+0x50>)
    59d8:	400b      	ands	r3, r1
    59da:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    59dc:	8853      	ldrh	r3, [r2, #2]
    59de:	490d      	ldr	r1, [pc, #52]	; (5a14 <system_gclk_chan_disable+0x54>)
    59e0:	400b      	ands	r3, r1
    59e2:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    59e4:	0011      	movs	r1, r2
    59e6:	2280      	movs	r2, #128	; 0x80
    59e8:	01d2      	lsls	r2, r2, #7
    59ea:	884b      	ldrh	r3, [r1, #2]
    59ec:	4213      	tst	r3, r2
    59ee:	d1fc      	bne.n	59ea <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    59f0:	4906      	ldr	r1, [pc, #24]	; (5a0c <system_gclk_chan_disable+0x4c>)
    59f2:	884a      	ldrh	r2, [r1, #2]
    59f4:	0203      	lsls	r3, r0, #8
    59f6:	4806      	ldr	r0, [pc, #24]	; (5a10 <system_gclk_chan_disable+0x50>)
    59f8:	4002      	ands	r2, r0
    59fa:	4313      	orrs	r3, r2
    59fc:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    59fe:	4b06      	ldr	r3, [pc, #24]	; (5a18 <system_gclk_chan_disable+0x58>)
    5a00:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5a02:	bd10      	pop	{r4, pc}
    5a04:	000042d1 	.word	0x000042d1
    5a08:	40000c02 	.word	0x40000c02
    5a0c:	40000c00 	.word	0x40000c00
    5a10:	fffff0ff 	.word	0xfffff0ff
    5a14:	ffffbfff 	.word	0xffffbfff
    5a18:	00004311 	.word	0x00004311

00005a1c <system_gclk_chan_set_config>:
{
    5a1c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    5a1e:	780c      	ldrb	r4, [r1, #0]
    5a20:	0224      	lsls	r4, r4, #8
    5a22:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    5a24:	4b02      	ldr	r3, [pc, #8]	; (5a30 <system_gclk_chan_set_config+0x14>)
    5a26:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    5a28:	b2a4      	uxth	r4, r4
    5a2a:	4b02      	ldr	r3, [pc, #8]	; (5a34 <system_gclk_chan_set_config+0x18>)
    5a2c:	805c      	strh	r4, [r3, #2]
}
    5a2e:	bd10      	pop	{r4, pc}
    5a30:	000059c1 	.word	0x000059c1
    5a34:	40000c00 	.word	0x40000c00

00005a38 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    5a38:	b510      	push	{r4, lr}
    5a3a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    5a3c:	4b06      	ldr	r3, [pc, #24]	; (5a58 <system_gclk_chan_get_hz+0x20>)
    5a3e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5a40:	4b06      	ldr	r3, [pc, #24]	; (5a5c <system_gclk_chan_get_hz+0x24>)
    5a42:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    5a44:	4b06      	ldr	r3, [pc, #24]	; (5a60 <system_gclk_chan_get_hz+0x28>)
    5a46:	885c      	ldrh	r4, [r3, #2]
    5a48:	0524      	lsls	r4, r4, #20
    5a4a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    5a4c:	4b05      	ldr	r3, [pc, #20]	; (5a64 <system_gclk_chan_get_hz+0x2c>)
    5a4e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    5a50:	0020      	movs	r0, r4
    5a52:	4b05      	ldr	r3, [pc, #20]	; (5a68 <system_gclk_chan_get_hz+0x30>)
    5a54:	4798      	blx	r3
}
    5a56:	bd10      	pop	{r4, pc}
    5a58:	000042d1 	.word	0x000042d1
    5a5c:	40000c02 	.word	0x40000c02
    5a60:	40000c00 	.word	0x40000c00
    5a64:	00004311 	.word	0x00004311
    5a68:	00005905 	.word	0x00005905

00005a6c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    5a6c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    5a6e:	78d3      	ldrb	r3, [r2, #3]
    5a70:	2b00      	cmp	r3, #0
    5a72:	d135      	bne.n	5ae0 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    5a74:	7813      	ldrb	r3, [r2, #0]
    5a76:	2b80      	cmp	r3, #128	; 0x80
    5a78:	d029      	beq.n	5ace <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    5a7a:	061b      	lsls	r3, r3, #24
    5a7c:	2480      	movs	r4, #128	; 0x80
    5a7e:	0264      	lsls	r4, r4, #9
    5a80:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    5a82:	7854      	ldrb	r4, [r2, #1]
    5a84:	2502      	movs	r5, #2
    5a86:	43ac      	bics	r4, r5
    5a88:	d106      	bne.n	5a98 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    5a8a:	7894      	ldrb	r4, [r2, #2]
    5a8c:	2c00      	cmp	r4, #0
    5a8e:	d120      	bne.n	5ad2 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    5a90:	2480      	movs	r4, #128	; 0x80
    5a92:	02a4      	lsls	r4, r4, #10
    5a94:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    5a96:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5a98:	7854      	ldrb	r4, [r2, #1]
    5a9a:	3c01      	subs	r4, #1
    5a9c:	2c01      	cmp	r4, #1
    5a9e:	d91c      	bls.n	5ada <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    5aa0:	040d      	lsls	r5, r1, #16
    5aa2:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    5aa4:	24a0      	movs	r4, #160	; 0xa0
    5aa6:	05e4      	lsls	r4, r4, #23
    5aa8:	432c      	orrs	r4, r5
    5aaa:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5aac:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    5aae:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    5ab0:	24d0      	movs	r4, #208	; 0xd0
    5ab2:	0624      	lsls	r4, r4, #24
    5ab4:	432c      	orrs	r4, r5
    5ab6:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5ab8:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    5aba:	78d4      	ldrb	r4, [r2, #3]
    5abc:	2c00      	cmp	r4, #0
    5abe:	d122      	bne.n	5b06 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    5ac0:	035b      	lsls	r3, r3, #13
    5ac2:	d51c      	bpl.n	5afe <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    5ac4:	7893      	ldrb	r3, [r2, #2]
    5ac6:	2b01      	cmp	r3, #1
    5ac8:	d01e      	beq.n	5b08 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    5aca:	6141      	str	r1, [r0, #20]
    5acc:	e017      	b.n	5afe <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    5ace:	2300      	movs	r3, #0
    5ad0:	e7d7      	b.n	5a82 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    5ad2:	24c0      	movs	r4, #192	; 0xc0
    5ad4:	02e4      	lsls	r4, r4, #11
    5ad6:	4323      	orrs	r3, r4
    5ad8:	e7dd      	b.n	5a96 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    5ada:	4c0d      	ldr	r4, [pc, #52]	; (5b10 <_system_pinmux_config+0xa4>)
    5adc:	4023      	ands	r3, r4
    5ade:	e7df      	b.n	5aa0 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    5ae0:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    5ae2:	040c      	lsls	r4, r1, #16
    5ae4:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    5ae6:	23a0      	movs	r3, #160	; 0xa0
    5ae8:	05db      	lsls	r3, r3, #23
    5aea:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5aec:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    5aee:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    5af0:	23d0      	movs	r3, #208	; 0xd0
    5af2:	061b      	lsls	r3, r3, #24
    5af4:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5af6:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    5af8:	78d3      	ldrb	r3, [r2, #3]
    5afa:	2b00      	cmp	r3, #0
    5afc:	d103      	bne.n	5b06 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5afe:	7853      	ldrb	r3, [r2, #1]
    5b00:	3b01      	subs	r3, #1
    5b02:	2b01      	cmp	r3, #1
    5b04:	d902      	bls.n	5b0c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    5b06:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    5b08:	6181      	str	r1, [r0, #24]
    5b0a:	e7f8      	b.n	5afe <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    5b0c:	6081      	str	r1, [r0, #8]
}
    5b0e:	e7fa      	b.n	5b06 <_system_pinmux_config+0x9a>
    5b10:	fffbffff 	.word	0xfffbffff

00005b14 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    5b14:	b510      	push	{r4, lr}
    5b16:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    5b18:	09c1      	lsrs	r1, r0, #7
		return NULL;
    5b1a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5b1c:	2900      	cmp	r1, #0
    5b1e:	d104      	bne.n	5b2a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    5b20:	0943      	lsrs	r3, r0, #5
    5b22:	01db      	lsls	r3, r3, #7
    5b24:	4905      	ldr	r1, [pc, #20]	; (5b3c <system_pinmux_pin_set_config+0x28>)
    5b26:	468c      	mov	ip, r1
    5b28:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    5b2a:	241f      	movs	r4, #31
    5b2c:	4020      	ands	r0, r4
    5b2e:	2101      	movs	r1, #1
    5b30:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    5b32:	0018      	movs	r0, r3
    5b34:	4b02      	ldr	r3, [pc, #8]	; (5b40 <system_pinmux_pin_set_config+0x2c>)
    5b36:	4798      	blx	r3
}
    5b38:	bd10      	pop	{r4, pc}
    5b3a:	46c0      	nop			; (mov r8, r8)
    5b3c:	41004400 	.word	0x41004400
    5b40:	00005a6d 	.word	0x00005a6d

00005b44 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    5b44:	4770      	bx	lr
	...

00005b48 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    5b48:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    5b4a:	4b05      	ldr	r3, [pc, #20]	; (5b60 <system_init+0x18>)
    5b4c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    5b4e:	4b05      	ldr	r3, [pc, #20]	; (5b64 <system_init+0x1c>)
    5b50:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    5b52:	4b05      	ldr	r3, [pc, #20]	; (5b68 <system_init+0x20>)
    5b54:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    5b56:	4b05      	ldr	r3, [pc, #20]	; (5b6c <system_init+0x24>)
    5b58:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    5b5a:	4b05      	ldr	r3, [pc, #20]	; (5b70 <system_init+0x28>)
    5b5c:	4798      	blx	r3
}
    5b5e:	bd10      	pop	{r4, pc}
    5b60:	00005685 	.word	0x00005685
    5b64:	00004341 	.word	0x00004341
    5b68:	00005b45 	.word	0x00005b45
    5b6c:	00004451 	.word	0x00004451
    5b70:	00005b45 	.word	0x00005b45

00005b74 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    5b74:	4b09      	ldr	r3, [pc, #36]	; (5b9c <_tcc_get_inst_index+0x28>)
    5b76:	4298      	cmp	r0, r3
    5b78:	d00c      	beq.n	5b94 <_tcc_get_inst_index+0x20>
    5b7a:	4b09      	ldr	r3, [pc, #36]	; (5ba0 <_tcc_get_inst_index+0x2c>)
    5b7c:	4298      	cmp	r0, r3
    5b7e:	d007      	beq.n	5b90 <_tcc_get_inst_index+0x1c>
    5b80:	4a08      	ldr	r2, [pc, #32]	; (5ba4 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    5b82:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
    5b84:	4290      	cmp	r0, r2
    5b86:	d001      	beq.n	5b8c <_tcc_get_inst_index+0x18>
}
    5b88:	0018      	movs	r0, r3
    5b8a:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    5b8c:	3302      	adds	r3, #2
    5b8e:	e002      	b.n	5b96 <_tcc_get_inst_index+0x22>
    5b90:	2301      	movs	r3, #1
    5b92:	e000      	b.n	5b96 <_tcc_get_inst_index+0x22>
    5b94:	2300      	movs	r3, #0
			return i;
    5b96:	b2db      	uxtb	r3, r3
    5b98:	e7f6      	b.n	5b88 <_tcc_get_inst_index+0x14>
    5b9a:	46c0      	nop			; (mov r8, r8)
    5b9c:	42002000 	.word	0x42002000
    5ba0:	42002400 	.word	0x42002400
    5ba4:	42002800 	.word	0x42002800

00005ba8 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    5ba8:	b510      	push	{r4, lr}
    5baa:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    5bac:	0008      	movs	r0, r1
    5bae:	4b4f      	ldr	r3, [pc, #316]	; (5cec <tcc_get_config_defaults+0x144>)
    5bb0:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
    5bb2:	2300      	movs	r3, #0
    5bb4:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    5bb6:	0080      	lsls	r0, r0, #2
    5bb8:	4a4d      	ldr	r2, [pc, #308]	; (5cf0 <tcc_get_config_defaults+0x148>)
    5bba:	5882      	ldr	r2, [r0, r2]
    5bbc:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    5bbe:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    5bc0:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    5bc2:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    5bc4:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    5bc6:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    5bc8:	61e3      	str	r3, [r4, #28]
    5bca:	6223      	str	r3, [r4, #32]
    5bcc:	6263      	str	r3, [r4, #36]	; 0x24
    5bce:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    5bd0:	7523      	strb	r3, [r4, #20]
    5bd2:	7563      	strb	r3, [r4, #21]
    5bd4:	75a3      	strb	r3, [r4, #22]
    5bd6:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    5bd8:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    5bda:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    5bdc:	7423      	strb	r3, [r4, #16]
    5bde:	7463      	strb	r3, [r4, #17]
    5be0:	74a3      	strb	r3, [r4, #18]
    5be2:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    5be4:	222c      	movs	r2, #44	; 0x2c
    5be6:	54a3      	strb	r3, [r4, r2]
    5be8:	3201      	adds	r2, #1
    5bea:	54a3      	strb	r3, [r4, r2]
    5bec:	3201      	adds	r2, #1
    5bee:	54a3      	strb	r3, [r4, r2]
    5bf0:	3201      	adds	r2, #1
    5bf2:	54a3      	strb	r3, [r4, r2]
    5bf4:	3201      	adds	r2, #1
    5bf6:	54a3      	strb	r3, [r4, r2]
    5bf8:	3201      	adds	r2, #1
    5bfa:	54a3      	strb	r3, [r4, r2]
    5bfc:	3201      	adds	r2, #1
    5bfe:	54a3      	strb	r3, [r4, r2]
    5c00:	3201      	adds	r2, #1
    5c02:	54a3      	strb	r3, [r4, r2]
    5c04:	3201      	adds	r2, #1
    5c06:	54a3      	strb	r3, [r4, r2]
    5c08:	3201      	adds	r2, #1
    5c0a:	54a3      	strb	r3, [r4, r2]
    5c0c:	3201      	adds	r2, #1
    5c0e:	54a3      	strb	r3, [r4, r2]
    5c10:	3201      	adds	r2, #1
    5c12:	54a3      	strb	r3, [r4, r2]
    5c14:	3201      	adds	r2, #1
    5c16:	54a3      	strb	r3, [r4, r2]
    5c18:	3201      	adds	r2, #1
    5c1a:	54a3      	strb	r3, [r4, r2]
    5c1c:	3201      	adds	r2, #1
    5c1e:	54a3      	strb	r3, [r4, r2]
    5c20:	3201      	adds	r2, #1
    5c22:	54a3      	strb	r3, [r4, r2]
    5c24:	3201      	adds	r2, #1
    5c26:	54a3      	strb	r3, [r4, r2]
    5c28:	3201      	adds	r2, #1
    5c2a:	54a3      	strb	r3, [r4, r2]
    5c2c:	3201      	adds	r2, #1
    5c2e:	54a3      	strb	r3, [r4, r2]
    5c30:	3201      	adds	r2, #1
    5c32:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    5c34:	3201      	adds	r2, #1
    5c36:	54a3      	strb	r3, [r4, r2]
    5c38:	3201      	adds	r2, #1
    5c3a:	54a3      	strb	r3, [r4, r2]
    5c3c:	3201      	adds	r2, #1
    5c3e:	54a3      	strb	r3, [r4, r2]
    5c40:	3201      	adds	r2, #1
    5c42:	54a3      	strb	r3, [r4, r2]
    5c44:	3201      	adds	r2, #1
    5c46:	54a3      	strb	r3, [r4, r2]
    5c48:	3201      	adds	r2, #1
    5c4a:	54a3      	strb	r3, [r4, r2]
    5c4c:	3201      	adds	r2, #1
    5c4e:	54a3      	strb	r3, [r4, r2]
    5c50:	3201      	adds	r2, #1
    5c52:	54a3      	strb	r3, [r4, r2]
    5c54:	3201      	adds	r2, #1
    5c56:	54a3      	strb	r3, [r4, r2]
    5c58:	3201      	adds	r2, #1
    5c5a:	54a3      	strb	r3, [r4, r2]
    5c5c:	3201      	adds	r2, #1
    5c5e:	54a3      	strb	r3, [r4, r2]
    5c60:	3201      	adds	r2, #1
    5c62:	54a3      	strb	r3, [r4, r2]
    5c64:	3201      	adds	r2, #1
    5c66:	54a3      	strb	r3, [r4, r2]
    5c68:	3201      	adds	r2, #1
    5c6a:	54a3      	strb	r3, [r4, r2]
    5c6c:	3201      	adds	r2, #1
    5c6e:	54a3      	strb	r3, [r4, r2]
    5c70:	3201      	adds	r2, #1
    5c72:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    5c74:	3201      	adds	r2, #1
    5c76:	54a3      	strb	r3, [r4, r2]
    5c78:	3201      	adds	r2, #1
    5c7a:	54a3      	strb	r3, [r4, r2]
    5c7c:	3201      	adds	r2, #1
    5c7e:	54a3      	strb	r3, [r4, r2]
    5c80:	3201      	adds	r2, #1
    5c82:	54a3      	strb	r3, [r4, r2]
    5c84:	3201      	adds	r2, #1
    5c86:	54a3      	strb	r3, [r4, r2]
    5c88:	3201      	adds	r2, #1
    5c8a:	54a3      	strb	r3, [r4, r2]
    5c8c:	3201      	adds	r2, #1
    5c8e:	54a3      	strb	r3, [r4, r2]
    5c90:	3201      	adds	r2, #1
    5c92:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    5c94:	3241      	adds	r2, #65	; 0x41
    5c96:	54a3      	strb	r3, [r4, r2]
    5c98:	65a3      	str	r3, [r4, #88]	; 0x58
    5c9a:	67a3      	str	r3, [r4, #120]	; 0x78
    5c9c:	3201      	adds	r2, #1
    5c9e:	54a3      	strb	r3, [r4, r2]
    5ca0:	65e3      	str	r3, [r4, #92]	; 0x5c
    5ca2:	67e3      	str	r3, [r4, #124]	; 0x7c
    5ca4:	3201      	adds	r2, #1
    5ca6:	54a3      	strb	r3, [r4, r2]
    5ca8:	6623      	str	r3, [r4, #96]	; 0x60
    5caa:	3a1a      	subs	r2, #26
    5cac:	50a3      	str	r3, [r4, r2]
    5cae:	321b      	adds	r2, #27
    5cb0:	54a3      	strb	r3, [r4, r2]
    5cb2:	6663      	str	r3, [r4, #100]	; 0x64
    5cb4:	3a17      	subs	r2, #23
    5cb6:	50a3      	str	r3, [r4, r2]
    5cb8:	3218      	adds	r2, #24
    5cba:	54a3      	strb	r3, [r4, r2]
    5cbc:	66a3      	str	r3, [r4, #104]	; 0x68
    5cbe:	3a14      	subs	r2, #20
    5cc0:	50a3      	str	r3, [r4, r2]
    5cc2:	3215      	adds	r2, #21
    5cc4:	54a3      	strb	r3, [r4, r2]
    5cc6:	66e3      	str	r3, [r4, #108]	; 0x6c
    5cc8:	3a11      	subs	r2, #17
    5cca:	50a3      	str	r3, [r4, r2]
    5ccc:	3212      	adds	r2, #18
    5cce:	54a3      	strb	r3, [r4, r2]
    5cd0:	6723      	str	r3, [r4, #112]	; 0x70
    5cd2:	3a0e      	subs	r2, #14
    5cd4:	50a3      	str	r3, [r4, r2]
    5cd6:	320f      	adds	r2, #15
    5cd8:	54a3      	strb	r3, [r4, r2]
    5cda:	6763      	str	r3, [r4, #116]	; 0x74
    5cdc:	3a0b      	subs	r2, #11
    5cde:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    5ce0:	2101      	movs	r1, #1
    5ce2:	320c      	adds	r2, #12
    5ce4:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    5ce6:	3201      	adds	r2, #1
    5ce8:	54a3      	strb	r3, [r4, r2]
}
    5cea:	bd10      	pop	{r4, pc}
    5cec:	00005b75 	.word	0x00005b75
    5cf0:	0000bce8 	.word	0x0000bce8

00005cf4 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    5cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5cf6:	46de      	mov	lr, fp
    5cf8:	4657      	mov	r7, sl
    5cfa:	464e      	mov	r6, r9
    5cfc:	4645      	mov	r5, r8
    5cfe:	b5e0      	push	{r5, r6, r7, lr}
    5d00:	b091      	sub	sp, #68	; 0x44
    5d02:	9001      	str	r0, [sp, #4]
    5d04:	000c      	movs	r4, r1
    5d06:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    5d08:	0008      	movs	r0, r1
    5d0a:	4bc3      	ldr	r3, [pc, #780]	; (6018 <tcc_init+0x324>)
    5d0c:	4798      	blx	r3
    5d0e:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    5d10:	0001      	movs	r1, r0
			PM->APBCMASK.reg |= mask;
    5d12:	48c2      	ldr	r0, [pc, #776]	; (601c <tcc_init+0x328>)
    5d14:	6a02      	ldr	r2, [r0, #32]
    5d16:	009e      	lsls	r6, r3, #2
    5d18:	4fc1      	ldr	r7, [pc, #772]	; (6020 <tcc_init+0x32c>)
    5d1a:	59f7      	ldr	r7, [r6, r7]
    5d1c:	433a      	orrs	r2, r7
    5d1e:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    5d20:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    5d22:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    5d24:	0792      	lsls	r2, r2, #30
    5d26:	d506      	bpl.n	5d36 <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    5d28:	b011      	add	sp, #68	; 0x44
    5d2a:	bc3c      	pop	{r2, r3, r4, r5}
    5d2c:	4690      	mov	r8, r2
    5d2e:	4699      	mov	r9, r3
    5d30:	46a2      	mov	sl, r4
    5d32:	46ab      	mov	fp, r5
    5d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    5d36:	6822      	ldr	r2, [r4, #0]
    5d38:	2701      	movs	r7, #1
    5d3a:	4017      	ands	r7, r2
    5d3c:	d1f4      	bne.n	5d28 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
    5d3e:	48b9      	ldr	r0, [pc, #740]	; (6024 <tcc_init+0x330>)
    5d40:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
    5d42:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
    5d44:	682e      	ldr	r6, [r5, #0]
    5d46:	42b2      	cmp	r2, r6
    5d48:	d3ee      	bcc.n	5d28 <tcc_init+0x34>
		|| (config->counter.period > count_max)
    5d4a:	686e      	ldr	r6, [r5, #4]
    5d4c:	42b2      	cmp	r2, r6
    5d4e:	d3eb      	bcc.n	5d28 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
    5d50:	69e8      	ldr	r0, [r5, #28]
    5d52:	4282      	cmp	r2, r0
    5d54:	d200      	bcs.n	5d58 <tcc_init+0x64>
    5d56:	e1b9      	b.n	60cc <tcc_init+0x3d8>
    5d58:	6a28      	ldr	r0, [r5, #32]
    5d5a:	4282      	cmp	r2, r0
    5d5c:	d200      	bcs.n	5d60 <tcc_init+0x6c>
    5d5e:	e1b7      	b.n	60d0 <tcc_init+0x3dc>
    5d60:	6a68      	ldr	r0, [r5, #36]	; 0x24
    5d62:	4282      	cmp	r2, r0
    5d64:	d200      	bcs.n	5d68 <tcc_init+0x74>
    5d66:	e1b5      	b.n	60d4 <tcc_init+0x3e0>
    5d68:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    5d6a:	4282      	cmp	r2, r0
    5d6c:	d200      	bcs.n	5d70 <tcc_init+0x7c>
    5d6e:	e1b3      	b.n	60d8 <tcc_init+0x3e4>
    5d70:	2298      	movs	r2, #152	; 0x98
    5d72:	4694      	mov	ip, r2
    5d74:	44ac      	add	ip, r5
    5d76:	4662      	mov	r2, ip
    5d78:	9208      	str	r2, [sp, #32]
    5d7a:	2000      	movs	r0, #0
    5d7c:	e003      	b.n	5d86 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    5d7e:	3001      	adds	r0, #1
    5d80:	3201      	adds	r2, #1
    5d82:	2808      	cmp	r0, #8
    5d84:	d008      	beq.n	5d98 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
    5d86:	7816      	ldrb	r6, [r2, #0]
    5d88:	2e00      	cmp	r6, #0
    5d8a:	d0f8      	beq.n	5d7e <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
    5d8c:	4ea6      	ldr	r6, [pc, #664]	; (6028 <tcc_init+0x334>)
    5d8e:	5c76      	ldrb	r6, [r6, r1]
    5d90:	4286      	cmp	r6, r0
    5d92:	dcf4      	bgt.n	5d7e <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
    5d94:	2017      	movs	r0, #23
    5d96:	e7c7      	b.n	5d28 <tcc_init+0x34>
    5d98:	2200      	movs	r2, #0
    5d9a:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    5d9c:	2080      	movs	r0, #128	; 0x80
    5d9e:	0440      	lsls	r0, r0, #17
    5da0:	4684      	mov	ip, r0
    5da2:	e002      	b.n	5daa <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    5da4:	3201      	adds	r2, #1
    5da6:	2a04      	cmp	r2, #4
    5da8:	d00e      	beq.n	5dc8 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
    5daa:	18a8      	adds	r0, r5, r2
    5dac:	7c00      	ldrb	r0, [r0, #16]
    5dae:	2801      	cmp	r0, #1
    5db0:	d1f8      	bne.n	5da4 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
    5db2:	489e      	ldr	r0, [pc, #632]	; (602c <tcc_init+0x338>)
    5db4:	5c40      	ldrb	r0, [r0, r1]
    5db6:	4290      	cmp	r0, r2
    5db8:	da00      	bge.n	5dbc <tcc_init+0xc8>
    5dba:	e18f      	b.n	60dc <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    5dbc:	4660      	mov	r0, ip
    5dbe:	4090      	lsls	r0, r2
    5dc0:	9e02      	ldr	r6, [sp, #8]
    5dc2:	4306      	orrs	r6, r0
    5dc4:	9602      	str	r6, [sp, #8]
    5dc6:	e7ed      	b.n	5da4 <tcc_init+0xb0>
	if (config->run_in_standby) {
    5dc8:	329d      	adds	r2, #157	; 0x9d
    5dca:	5caa      	ldrb	r2, [r5, r2]
    5dcc:	2a00      	cmp	r2, #0
    5dce:	d004      	beq.n	5dda <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    5dd0:	2280      	movs	r2, #128	; 0x80
    5dd2:	0112      	lsls	r2, r2, #4
    5dd4:	9902      	ldr	r1, [sp, #8]
    5dd6:	4311      	orrs	r1, r2
    5dd8:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    5dda:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    5ddc:	1e51      	subs	r1, r2, #1
    5dde:	418a      	sbcs	r2, r1
    5de0:	0092      	lsls	r2, r2, #2
    5de2:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    5de4:	7a6a      	ldrb	r2, [r5, #9]
    5de6:	2a01      	cmp	r2, #1
    5de8:	d022      	beq.n	5e30 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
    5dea:	4a90      	ldr	r2, [pc, #576]	; (602c <tcc_init+0x338>)
    5dec:	5cd2      	ldrb	r2, [r2, r3]
    5dee:	0011      	movs	r1, r2
    5df0:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
    5df2:	2235      	movs	r2, #53	; 0x35
    5df4:	5caa      	ldrb	r2, [r5, r2]
    5df6:	428a      	cmp	r2, r1
    5df8:	d300      	bcc.n	5dfc <tcc_init+0x108>
    5dfa:	e179      	b.n	60f0 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    5dfc:	212c      	movs	r1, #44	; 0x2c
    5dfe:	5c69      	ldrb	r1, [r5, r1]
    5e00:	290f      	cmp	r1, #15
    5e02:	d900      	bls.n	5e06 <tcc_init+0x112>
    5e04:	e174      	b.n	60f0 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    5e06:	7b28      	ldrb	r0, [r5, #12]
    5e08:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    5e0a:	7ae8      	ldrb	r0, [r5, #11]
    5e0c:	900b      	str	r0, [sp, #44]	; 0x2c
    5e0e:	202d      	movs	r0, #45	; 0x2d
    5e10:	4682      	mov	sl, r0
    5e12:	44aa      	add	sl, r5
    5e14:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    5e16:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
    5e18:	ae0e      	add	r6, sp, #56	; 0x38
    5e1a:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    5e1c:	26c0      	movs	r6, #192	; 0xc0
    5e1e:	0136      	lsls	r6, r6, #4
    5e20:	46b1      	mov	r9, r6
    5e22:	4684      	mov	ip, r0
    5e24:	46a0      	mov	r8, r4
    5e26:	0028      	movs	r0, r5
    5e28:	4655      	mov	r5, sl
    5e2a:	9309      	str	r3, [sp, #36]	; 0x24
    5e2c:	4682      	mov	sl, r0
    5e2e:	e035      	b.n	5e9c <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
    5e30:	9906      	ldr	r1, [sp, #24]
    5e32:	4311      	orrs	r1, r2
    5e34:	9106      	str	r1, [sp, #24]
    5e36:	e7d8      	b.n	5dea <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    5e38:	0292      	lsls	r2, r2, #10
    5e3a:	464f      	mov	r7, r9
    5e3c:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    5e3e:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
    5e40:	7919      	ldrb	r1, [r3, #4]
    5e42:	468b      	mov	fp, r1
    5e44:	2103      	movs	r1, #3
    5e46:	465f      	mov	r7, fp
    5e48:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    5e4a:	430a      	orrs	r2, r1
    5e4c:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
    5e4e:	795a      	ldrb	r2, [r3, #5]
    5e50:	0152      	lsls	r2, r2, #5
    5e52:	2160      	movs	r1, #96	; 0x60
    5e54:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    5e56:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
    5e58:	7999      	ldrb	r1, [r3, #6]
    5e5a:	0209      	lsls	r1, r1, #8
    5e5c:	26c0      	movs	r6, #192	; 0xc0
    5e5e:	00b6      	lsls	r6, r6, #2
    5e60:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    5e62:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    5e64:	79da      	ldrb	r2, [r3, #7]
    5e66:	0312      	lsls	r2, r2, #12
    5e68:	21e0      	movs	r1, #224	; 0xe0
    5e6a:	01c9      	lsls	r1, r1, #7
    5e6c:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    5e6e:	4316      	orrs	r6, r2
    5e70:	4334      	orrs	r4, r6
    5e72:	9a03      	ldr	r2, [sp, #12]
    5e74:	4314      	orrs	r4, r2
    5e76:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
    5e78:	4662      	mov	r2, ip
    5e7a:	9907      	ldr	r1, [sp, #28]
    5e7c:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    5e7e:	2a04      	cmp	r2, #4
    5e80:	d02a      	beq.n	5ed8 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
    5e82:	7c9a      	ldrb	r2, [r3, #18]
    5e84:	9905      	ldr	r1, [sp, #20]
    5e86:	4291      	cmp	r1, r2
    5e88:	d800      	bhi.n	5e8c <tcc_init+0x198>
    5e8a:	e131      	b.n	60f0 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    5e8c:	7a59      	ldrb	r1, [r3, #9]
    5e8e:	350a      	adds	r5, #10
    5e90:	2304      	movs	r3, #4
    5e92:	469b      	mov	fp, r3
    5e94:	44dc      	add	ip, fp
    5e96:	290f      	cmp	r1, #15
    5e98:	d900      	bls.n	5e9c <tcc_init+0x1a8>
    5e9a:	e129      	b.n	60f0 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    5e9c:	0609      	lsls	r1, r1, #24
    5e9e:	23f0      	movs	r3, #240	; 0xf0
    5ea0:	051b      	lsls	r3, r3, #20
    5ea2:	4019      	ands	r1, r3
    5ea4:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    5ea6:	782e      	ldrb	r6, [r5, #0]
    5ea8:	0436      	lsls	r6, r6, #16
    5eaa:	20ff      	movs	r0, #255	; 0xff
    5eac:	0400      	lsls	r0, r0, #16
    5eae:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    5eb0:	7868      	ldrb	r0, [r5, #1]
    5eb2:	2480      	movs	r4, #128	; 0x80
    5eb4:	2800      	cmp	r0, #0
    5eb6:	d100      	bne.n	5eba <tcc_init+0x1c6>
    5eb8:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    5eba:	7898      	ldrb	r0, [r3, #2]
    5ebc:	2708      	movs	r7, #8
    5ebe:	9703      	str	r7, [sp, #12]
    5ec0:	2800      	cmp	r0, #0
    5ec2:	d101      	bne.n	5ec8 <tcc_init+0x1d4>
    5ec4:	9804      	ldr	r0, [sp, #16]
    5ec6:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    5ec8:	78d8      	ldrb	r0, [r3, #3]
    5eca:	4683      	mov	fp, r0
    5ecc:	2010      	movs	r0, #16
    5ece:	465f      	mov	r7, fp
    5ed0:	2f00      	cmp	r7, #0
    5ed2:	d1b1      	bne.n	5e38 <tcc_init+0x144>
    5ed4:	9804      	ldr	r0, [sp, #16]
    5ed6:	e7af      	b.n	5e38 <tcc_init+0x144>
    5ed8:	4644      	mov	r4, r8
    5eda:	4655      	mov	r5, sl
    5edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
    5ede:	4a52      	ldr	r2, [pc, #328]	; (6028 <tcc_init+0x334>)
    5ee0:	5cd2      	ldrb	r2, [r2, r3]
    5ee2:	4691      	mov	r9, r2
    5ee4:	4651      	mov	r1, sl
    5ee6:	3150      	adds	r1, #80	; 0x50
    5ee8:	4650      	mov	r0, sl
    5eea:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
    5eec:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    5eee:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    5ef0:	2601      	movs	r6, #1
    5ef2:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    5ef4:	2602      	movs	r6, #2
    5ef6:	36ff      	adds	r6, #255	; 0xff
    5ef8:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    5efa:	2680      	movs	r6, #128	; 0x80
    5efc:	0276      	lsls	r6, r6, #9
    5efe:	46b0      	mov	r8, r6
    5f00:	46a4      	mov	ip, r4
    5f02:	001c      	movs	r4, r3
    5f04:	464b      	mov	r3, r9
    5f06:	e00f      	b.n	5f28 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
    5f08:	7806      	ldrb	r6, [r0, #0]
    5f0a:	2e00      	cmp	r6, #0
    5f0c:	d007      	beq.n	5f1e <tcc_init+0x22a>
			if (i >= ow_num) {
    5f0e:	4293      	cmp	r3, r2
    5f10:	d800      	bhi.n	5f14 <tcc_init+0x220>
    5f12:	e0e7      	b.n	60e4 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    5f14:	2e02      	cmp	r6, #2
    5f16:	d014      	beq.n	5f42 <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    5f18:	4656      	mov	r6, sl
    5f1a:	4096      	lsls	r6, r2
    5f1c:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    5f1e:	3201      	adds	r2, #1
    5f20:	3101      	adds	r1, #1
    5f22:	3002      	adds	r0, #2
    5f24:	2a08      	cmp	r2, #8
    5f26:	d010      	beq.n	5f4a <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
    5f28:	780e      	ldrb	r6, [r1, #0]
    5f2a:	2e00      	cmp	r6, #0
    5f2c:	d0ec      	beq.n	5f08 <tcc_init+0x214>
			if (i >= ow_num) {
    5f2e:	4293      	cmp	r3, r2
    5f30:	d800      	bhi.n	5f34 <tcc_init+0x240>
    5f32:	e0d5      	b.n	60e0 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    5f34:	4646      	mov	r6, r8
    5f36:	4096      	lsls	r6, r2
    5f38:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
    5f3a:	7806      	ldrb	r6, [r0, #0]
    5f3c:	2e00      	cmp	r6, #0
    5f3e:	d1e9      	bne.n	5f14 <tcc_init+0x220>
    5f40:	e7ed      	b.n	5f1e <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    5f42:	465e      	mov	r6, fp
    5f44:	4096      	lsls	r6, r2
    5f46:	4337      	orrs	r7, r6
    5f48:	e7e9      	b.n	5f1e <tcc_init+0x22a>
    5f4a:	4699      	mov	r9, r3
    5f4c:	0023      	movs	r3, r4
    5f4e:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    5f50:	7e6a      	ldrb	r2, [r5, #25]
    5f52:	0112      	lsls	r2, r2, #4
    5f54:	2130      	movs	r1, #48	; 0x30
    5f56:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    5f58:	7e28      	ldrb	r0, [r5, #24]
    5f5a:	2207      	movs	r2, #7
    5f5c:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    5f5e:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    5f60:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    5f62:	2080      	movs	r0, #128	; 0x80
    5f64:	0240      	lsls	r0, r0, #9
    5f66:	000e      	movs	r6, r1
    5f68:	e002      	b.n	5f70 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    5f6a:	3201      	adds	r2, #1
    5f6c:	2a04      	cmp	r2, #4
    5f6e:	d00b      	beq.n	5f88 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
    5f70:	18a9      	adds	r1, r5, r2
    5f72:	7d09      	ldrb	r1, [r1, #20]
    5f74:	2900      	cmp	r1, #0
    5f76:	d0f8      	beq.n	5f6a <tcc_init+0x276>
			if (n >= cc_num) {
    5f78:	9905      	ldr	r1, [sp, #20]
    5f7a:	4291      	cmp	r1, r2
    5f7c:	dc00      	bgt.n	5f80 <tcc_init+0x28c>
    5f7e:	e0b3      	b.n	60e8 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
    5f80:	0001      	movs	r1, r0
    5f82:	4091      	lsls	r1, r2
    5f84:	430e      	orrs	r6, r1
    5f86:	e7f0      	b.n	5f6a <tcc_init+0x276>
    5f88:	46b2      	mov	sl, r6
    5f8a:	9801      	ldr	r0, [sp, #4]
    5f8c:	0002      	movs	r2, r0
    5f8e:	3204      	adds	r2, #4
    5f90:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    5f92:	2100      	movs	r1, #0
    5f94:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    5f96:	4282      	cmp	r2, r0
    5f98:	d1fc      	bne.n	5f94 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
    5f9a:	2200      	movs	r2, #0
    5f9c:	9801      	ldr	r0, [sp, #4]
    5f9e:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    5fa0:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    5fa2:	0099      	lsls	r1, r3, #2
    5fa4:	4a22      	ldr	r2, [pc, #136]	; (6030 <tcc_init+0x33c>)
    5fa6:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
    5fa8:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    5faa:	22a0      	movs	r2, #160	; 0xa0
    5fac:	5ca9      	ldrb	r1, [r5, r2]
    5fae:	3a64      	subs	r2, #100	; 0x64
    5fb0:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
    5fb2:	a90d      	add	r1, sp, #52	; 0x34
    5fb4:	7aaa      	ldrb	r2, [r5, #10]
    5fb6:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    5fb8:	4a1e      	ldr	r2, [pc, #120]	; (6034 <tcc_init+0x340>)
    5fba:	5cd6      	ldrb	r6, [r2, r3]
    5fbc:	0030      	movs	r0, r6
    5fbe:	4b1e      	ldr	r3, [pc, #120]	; (6038 <tcc_init+0x344>)
    5fc0:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    5fc2:	0030      	movs	r0, r6
    5fc4:	4b1d      	ldr	r3, [pc, #116]	; (603c <tcc_init+0x348>)
    5fc6:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    5fc8:	464b      	mov	r3, r9
    5fca:	2b00      	cmp	r3, #0
    5fcc:	dd3c      	ble.n	6048 <tcc_init+0x354>
    5fce:	002e      	movs	r6, r5
    5fd0:	3658      	adds	r6, #88	; 0x58
    5fd2:	3398      	adds	r3, #152	; 0x98
    5fd4:	4698      	mov	r8, r3
    5fd6:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5fd8:	2301      	movs	r3, #1
    5fda:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
    5fdc:	46ab      	mov	fp, r5
    5fde:	4645      	mov	r5, r8
    5fe0:	46a0      	mov	r8, r4
    5fe2:	9c08      	ldr	r4, [sp, #32]
    5fe4:	e003      	b.n	5fee <tcc_init+0x2fa>
    5fe6:	3401      	adds	r4, #1
    5fe8:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    5fea:	42ac      	cmp	r4, r5
    5fec:	d02a      	beq.n	6044 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
    5fee:	7823      	ldrb	r3, [r4, #0]
    5ff0:	2b00      	cmp	r3, #0
    5ff2:	d0f8      	beq.n	5fe6 <tcc_init+0x2f2>
    5ff4:	ab0c      	add	r3, sp, #48	; 0x30
    5ff6:	464a      	mov	r2, r9
    5ff8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    5ffa:	2300      	movs	r3, #0
    5ffc:	aa0c      	add	r2, sp, #48	; 0x30
    5ffe:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    6000:	0013      	movs	r3, r2
    6002:	2220      	movs	r2, #32
    6004:	18b2      	adds	r2, r6, r2
    6006:	7812      	ldrb	r2, [r2, #0]
    6008:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    600a:	464a      	mov	r2, r9
    600c:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    600e:	7830      	ldrb	r0, [r6, #0]
    6010:	0019      	movs	r1, r3
    6012:	4b0b      	ldr	r3, [pc, #44]	; (6040 <tcc_init+0x34c>)
    6014:	4798      	blx	r3
    6016:	e7e6      	b.n	5fe6 <tcc_init+0x2f2>
    6018:	00005b75 	.word	0x00005b75
    601c:	40000400 	.word	0x40000400
    6020:	0000bcd4 	.word	0x0000bcd4
    6024:	0000bce8 	.word	0x0000bce8
    6028:	0000bcf4 	.word	0x0000bcf4
    602c:	0000bce0 	.word	0x0000bce0
    6030:	2000043c 	.word	0x2000043c
    6034:	0000bce4 	.word	0x0000bce4
    6038:	00005a1d 	.word	0x00005a1d
    603c:	00005991 	.word	0x00005991
    6040:	00005b15 	.word	0x00005b15
    6044:	4644      	mov	r4, r8
    6046:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    6048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    604a:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    604c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    604e:	0212      	lsls	r2, r2, #8
    6050:	4313      	orrs	r3, r2
    6052:	9a02      	ldr	r2, [sp, #8]
    6054:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    6056:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    6058:	2204      	movs	r2, #4
    605a:	68a3      	ldr	r3, [r4, #8]
    605c:	421a      	tst	r2, r3
    605e:	d1fc      	bne.n	605a <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
    6060:	23ff      	movs	r3, #255	; 0xff
    6062:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    6064:	2204      	movs	r2, #4
    6066:	68a3      	ldr	r3, [r4, #8]
    6068:	421a      	tst	r2, r3
    606a:	d1fc      	bne.n	6066 <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
    606c:	466b      	mov	r3, sp
    606e:	7e1b      	ldrb	r3, [r3, #24]
    6070:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    6072:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6074:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    6076:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6078:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    607a:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    607c:	4a1d      	ldr	r2, [pc, #116]	; (60f4 <tcc_init+0x400>)
    607e:	68a3      	ldr	r3, [r4, #8]
    6080:	4213      	tst	r3, r2
    6082:	d1fc      	bne.n	607e <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
    6084:	4653      	mov	r3, sl
    6086:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    6088:	2210      	movs	r2, #16
    608a:	68a3      	ldr	r3, [r4, #8]
    608c:	421a      	tst	r2, r3
    608e:	d1fc      	bne.n	608a <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
    6090:	682b      	ldr	r3, [r5, #0]
    6092:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    6094:	4a18      	ldr	r2, [pc, #96]	; (60f8 <tcc_init+0x404>)
    6096:	68a3      	ldr	r3, [r4, #8]
    6098:	4213      	tst	r3, r2
    609a:	d1fc      	bne.n	6096 <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
    609c:	686b      	ldr	r3, [r5, #4]
    609e:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    60a0:	9805      	ldr	r0, [sp, #20]
    60a2:	2800      	cmp	r0, #0
    60a4:	dd22      	ble.n	60ec <tcc_init+0x3f8>
    60a6:	351c      	adds	r5, #28
    60a8:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    60aa:	4e14      	ldr	r6, [pc, #80]	; (60fc <tcc_init+0x408>)
    60ac:	0032      	movs	r2, r6
    60ae:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    60b0:	68a3      	ldr	r3, [r4, #8]
    60b2:	421a      	tst	r2, r3
    60b4:	d1fc      	bne.n	60b0 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
    60b6:	cd04      	ldmia	r5!, {r2}
    60b8:	000b      	movs	r3, r1
    60ba:	3310      	adds	r3, #16
    60bc:	009b      	lsls	r3, r3, #2
    60be:	18e3      	adds	r3, r4, r3
    60c0:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    60c2:	3101      	adds	r1, #1
    60c4:	4288      	cmp	r0, r1
    60c6:	dcf1      	bgt.n	60ac <tcc_init+0x3b8>
	return STATUS_OK;
    60c8:	2000      	movs	r0, #0
    60ca:	e62d      	b.n	5d28 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
    60cc:	2017      	movs	r0, #23
    60ce:	e62b      	b.n	5d28 <tcc_init+0x34>
    60d0:	2017      	movs	r0, #23
    60d2:	e629      	b.n	5d28 <tcc_init+0x34>
    60d4:	2017      	movs	r0, #23
    60d6:	e627      	b.n	5d28 <tcc_init+0x34>
    60d8:	2017      	movs	r0, #23
    60da:	e625      	b.n	5d28 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    60dc:	2017      	movs	r0, #23
    60de:	e623      	b.n	5d28 <tcc_init+0x34>
			if (i >= ow_num) {
    60e0:	2017      	movs	r0, #23
    60e2:	e621      	b.n	5d28 <tcc_init+0x34>
			if (i >= ow_num) {
    60e4:	2017      	movs	r0, #23
    60e6:	e61f      	b.n	5d28 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    60e8:	2017      	movs	r0, #23
    60ea:	e61d      	b.n	5d28 <tcc_init+0x34>
	return STATUS_OK;
    60ec:	2000      	movs	r0, #0
    60ee:	e61b      	b.n	5d28 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    60f0:	2017      	movs	r0, #23
    60f2:	e619      	b.n	5d28 <tcc_init+0x34>
    60f4:	00020040 	.word	0x00020040
    60f8:	00040080 	.word	0x00040080
    60fc:	00080100 	.word	0x00080100

00006100 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    6100:	0092      	lsls	r2, r2, #2
    6102:	1883      	adds	r3, r0, r2
    6104:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    6106:	4b03      	ldr	r3, [pc, #12]	; (6114 <tcc_register_callback+0x14>)
    6108:	58d3      	ldr	r3, [r2, r3]
    610a:	6b42      	ldr	r2, [r0, #52]	; 0x34
    610c:	4313      	orrs	r3, r2
    610e:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
    6110:	2000      	movs	r0, #0
    6112:	4770      	bx	lr
    6114:	0000bcf8 	.word	0x0000bcf8

00006118 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    6118:	b570      	push	{r4, r5, r6, lr}
    611a:	0004      	movs	r4, r0
    611c:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    611e:	6800      	ldr	r0, [r0, #0]
    6120:	4b09      	ldr	r3, [pc, #36]	; (6148 <tcc_enable_callback+0x30>)
    6122:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    6124:	4b09      	ldr	r3, [pc, #36]	; (614c <tcc_enable_callback+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6126:	5c1b      	ldrb	r3, [r3, r0]
    6128:	221f      	movs	r2, #31
    612a:	401a      	ands	r2, r3
    612c:	2301      	movs	r3, #1
    612e:	4093      	lsls	r3, r2
    6130:	4a07      	ldr	r2, [pc, #28]	; (6150 <tcc_enable_callback+0x38>)
    6132:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    6134:	00ad      	lsls	r5, r5, #2
    6136:	4b07      	ldr	r3, [pc, #28]	; (6154 <tcc_enable_callback+0x3c>)
    6138:	58ea      	ldr	r2, [r5, r3]
    613a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    613c:	4313      	orrs	r3, r2
    613e:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    6140:	6823      	ldr	r3, [r4, #0]
    6142:	629a      	str	r2, [r3, #40]	; 0x28
}
    6144:	bd70      	pop	{r4, r5, r6, pc}
    6146:	46c0      	nop			; (mov r8, r8)
    6148:	00005b75 	.word	0x00005b75
    614c:	0000bd28 	.word	0x0000bd28
    6150:	e000e100 	.word	0xe000e100
    6154:	0000bcf8 	.word	0x0000bcf8

00006158 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    6158:	b5f0      	push	{r4, r5, r6, r7, lr}
    615a:	46c6      	mov	lr, r8
    615c:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    615e:	0080      	lsls	r0, r0, #2
    6160:	4b0e      	ldr	r3, [pc, #56]	; (619c <_tcc_interrupt_handler+0x44>)
    6162:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    6164:	683b      	ldr	r3, [r7, #0]
    6166:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    6168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    616a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    616c:	4013      	ands	r3, r2
    616e:	401e      	ands	r6, r3
    6170:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    6172:	4b0b      	ldr	r3, [pc, #44]	; (61a0 <_tcc_interrupt_handler+0x48>)
    6174:	4698      	mov	r8, r3
    6176:	e002      	b.n	617e <_tcc_interrupt_handler+0x26>
    6178:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    617a:	2c30      	cmp	r4, #48	; 0x30
    617c:	d00a      	beq.n	6194 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    617e:	4643      	mov	r3, r8
    6180:	58e5      	ldr	r5, [r4, r3]
    6182:	4235      	tst	r5, r6
    6184:	d0f8      	beq.n	6178 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    6186:	193b      	adds	r3, r7, r4
    6188:	685b      	ldr	r3, [r3, #4]
    618a:	0038      	movs	r0, r7
    618c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    618e:	683b      	ldr	r3, [r7, #0]
    6190:	62dd      	str	r5, [r3, #44]	; 0x2c
    6192:	e7f1      	b.n	6178 <_tcc_interrupt_handler+0x20>
		}
	}
}
    6194:	bc04      	pop	{r2}
    6196:	4690      	mov	r8, r2
    6198:	bdf0      	pop	{r4, r5, r6, r7, pc}
    619a:	46c0      	nop			; (mov r8, r8)
    619c:	2000043c 	.word	0x2000043c
    61a0:	0000bcf8 	.word	0x0000bcf8

000061a4 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    61a4:	b510      	push	{r4, lr}
    61a6:	2000      	movs	r0, #0
    61a8:	4b01      	ldr	r3, [pc, #4]	; (61b0 <TCC0_Handler+0xc>)
    61aa:	4798      	blx	r3
    61ac:	bd10      	pop	{r4, pc}
    61ae:	46c0      	nop			; (mov r8, r8)
    61b0:	00006159 	.word	0x00006159

000061b4 <TCC1_Handler>:
    61b4:	b510      	push	{r4, lr}
    61b6:	2001      	movs	r0, #1
    61b8:	4b01      	ldr	r3, [pc, #4]	; (61c0 <TCC1_Handler+0xc>)
    61ba:	4798      	blx	r3
    61bc:	bd10      	pop	{r4, pc}
    61be:	46c0      	nop			; (mov r8, r8)
    61c0:	00006159 	.word	0x00006159

000061c4 <TCC2_Handler>:
    61c4:	b510      	push	{r4, lr}
    61c6:	2002      	movs	r0, #2
    61c8:	4b01      	ldr	r3, [pc, #4]	; (61d0 <TCC2_Handler+0xc>)
    61ca:	4798      	blx	r3
    61cc:	bd10      	pop	{r4, pc}
    61ce:	46c0      	nop			; (mov r8, r8)
    61d0:	00006159 	.word	0x00006159

000061d4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    61d4:	e7fe      	b.n	61d4 <Dummy_Handler>
	...

000061d8 <Reset_Handler>:
{
    61d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    61da:	4a2a      	ldr	r2, [pc, #168]	; (6284 <Reset_Handler+0xac>)
    61dc:	4b2a      	ldr	r3, [pc, #168]	; (6288 <Reset_Handler+0xb0>)
    61de:	429a      	cmp	r2, r3
    61e0:	d011      	beq.n	6206 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    61e2:	001a      	movs	r2, r3
    61e4:	4b29      	ldr	r3, [pc, #164]	; (628c <Reset_Handler+0xb4>)
    61e6:	429a      	cmp	r2, r3
    61e8:	d20d      	bcs.n	6206 <Reset_Handler+0x2e>
    61ea:	4a29      	ldr	r2, [pc, #164]	; (6290 <Reset_Handler+0xb8>)
    61ec:	3303      	adds	r3, #3
    61ee:	1a9b      	subs	r3, r3, r2
    61f0:	089b      	lsrs	r3, r3, #2
    61f2:	3301      	adds	r3, #1
    61f4:	009b      	lsls	r3, r3, #2
    61f6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    61f8:	4823      	ldr	r0, [pc, #140]	; (6288 <Reset_Handler+0xb0>)
    61fa:	4922      	ldr	r1, [pc, #136]	; (6284 <Reset_Handler+0xac>)
    61fc:	588c      	ldr	r4, [r1, r2]
    61fe:	5084      	str	r4, [r0, r2]
    6200:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    6202:	429a      	cmp	r2, r3
    6204:	d1fa      	bne.n	61fc <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    6206:	4a23      	ldr	r2, [pc, #140]	; (6294 <Reset_Handler+0xbc>)
    6208:	4b23      	ldr	r3, [pc, #140]	; (6298 <Reset_Handler+0xc0>)
    620a:	429a      	cmp	r2, r3
    620c:	d20a      	bcs.n	6224 <Reset_Handler+0x4c>
    620e:	43d3      	mvns	r3, r2
    6210:	4921      	ldr	r1, [pc, #132]	; (6298 <Reset_Handler+0xc0>)
    6212:	185b      	adds	r3, r3, r1
    6214:	2103      	movs	r1, #3
    6216:	438b      	bics	r3, r1
    6218:	3304      	adds	r3, #4
    621a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    621c:	2100      	movs	r1, #0
    621e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    6220:	4293      	cmp	r3, r2
    6222:	d1fc      	bne.n	621e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6224:	4a1d      	ldr	r2, [pc, #116]	; (629c <Reset_Handler+0xc4>)
    6226:	21ff      	movs	r1, #255	; 0xff
    6228:	4b1d      	ldr	r3, [pc, #116]	; (62a0 <Reset_Handler+0xc8>)
    622a:	438b      	bics	r3, r1
    622c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    622e:	39fd      	subs	r1, #253	; 0xfd
    6230:	2390      	movs	r3, #144	; 0x90
    6232:	005b      	lsls	r3, r3, #1
    6234:	4a1b      	ldr	r2, [pc, #108]	; (62a4 <Reset_Handler+0xcc>)
    6236:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    6238:	4a1b      	ldr	r2, [pc, #108]	; (62a8 <Reset_Handler+0xd0>)
    623a:	78d3      	ldrb	r3, [r2, #3]
    623c:	2503      	movs	r5, #3
    623e:	43ab      	bics	r3, r5
    6240:	2402      	movs	r4, #2
    6242:	4323      	orrs	r3, r4
    6244:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    6246:	78d3      	ldrb	r3, [r2, #3]
    6248:	270c      	movs	r7, #12
    624a:	43bb      	bics	r3, r7
    624c:	2608      	movs	r6, #8
    624e:	4333      	orrs	r3, r6
    6250:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    6252:	4b16      	ldr	r3, [pc, #88]	; (62ac <Reset_Handler+0xd4>)
    6254:	7b98      	ldrb	r0, [r3, #14]
    6256:	2230      	movs	r2, #48	; 0x30
    6258:	4390      	bics	r0, r2
    625a:	2220      	movs	r2, #32
    625c:	4310      	orrs	r0, r2
    625e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    6260:	7b99      	ldrb	r1, [r3, #14]
    6262:	43b9      	bics	r1, r7
    6264:	4331      	orrs	r1, r6
    6266:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    6268:	7b9a      	ldrb	r2, [r3, #14]
    626a:	43aa      	bics	r2, r5
    626c:	4322      	orrs	r2, r4
    626e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    6270:	4a0f      	ldr	r2, [pc, #60]	; (62b0 <Reset_Handler+0xd8>)
    6272:	6853      	ldr	r3, [r2, #4]
    6274:	2180      	movs	r1, #128	; 0x80
    6276:	430b      	orrs	r3, r1
    6278:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    627a:	4b0e      	ldr	r3, [pc, #56]	; (62b4 <Reset_Handler+0xdc>)
    627c:	4798      	blx	r3
        main();
    627e:	4b0e      	ldr	r3, [pc, #56]	; (62b8 <Reset_Handler+0xe0>)
    6280:	4798      	blx	r3
    6282:	e7fe      	b.n	6282 <Reset_Handler+0xaa>
    6284:	0000c1fc 	.word	0x0000c1fc
    6288:	20000000 	.word	0x20000000
    628c:	200000e4 	.word	0x200000e4
    6290:	20000004 	.word	0x20000004
    6294:	200000e4 	.word	0x200000e4
    6298:	20000514 	.word	0x20000514
    629c:	e000ed00 	.word	0xe000ed00
    62a0:	00000000 	.word	0x00000000
    62a4:	41007000 	.word	0x41007000
    62a8:	41005000 	.word	0x41005000
    62ac:	41004800 	.word	0x41004800
    62b0:	41004000 	.word	0x41004000
    62b4:	000097a5 	.word	0x000097a5
    62b8:	0000692d 	.word	0x0000692d

000062bc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    62bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    62be:	46c6      	mov	lr, r8
    62c0:	b500      	push	{lr}
    62c2:	000c      	movs	r4, r1
    62c4:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    62c6:	2800      	cmp	r0, #0
    62c8:	d10f      	bne.n	62ea <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    62ca:	2a00      	cmp	r2, #0
    62cc:	dd11      	ble.n	62f2 <_read+0x36>
    62ce:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    62d0:	4e09      	ldr	r6, [pc, #36]	; (62f8 <_read+0x3c>)
    62d2:	4d0a      	ldr	r5, [pc, #40]	; (62fc <_read+0x40>)
    62d4:	6830      	ldr	r0, [r6, #0]
    62d6:	0021      	movs	r1, r4
    62d8:	682b      	ldr	r3, [r5, #0]
    62da:	4798      	blx	r3
		ptr++;
    62dc:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    62de:	42bc      	cmp	r4, r7
    62e0:	d1f8      	bne.n	62d4 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    62e2:	4640      	mov	r0, r8
    62e4:	bc04      	pop	{r2}
    62e6:	4690      	mov	r8, r2
    62e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    62ea:	2301      	movs	r3, #1
    62ec:	425b      	negs	r3, r3
    62ee:	4698      	mov	r8, r3
    62f0:	e7f7      	b.n	62e2 <_read+0x26>
	for (; len > 0; --len) {
    62f2:	4680      	mov	r8, r0
    62f4:	e7f5      	b.n	62e2 <_read+0x26>
    62f6:	46c0      	nop			; (mov r8, r8)
    62f8:	20000450 	.word	0x20000450
    62fc:	20000448 	.word	0x20000448

00006300 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    6300:	b5f0      	push	{r4, r5, r6, r7, lr}
    6302:	46c6      	mov	lr, r8
    6304:	b500      	push	{lr}
    6306:	000e      	movs	r6, r1
    6308:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    630a:	3801      	subs	r0, #1
    630c:	2802      	cmp	r0, #2
    630e:	d810      	bhi.n	6332 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    6310:	2a00      	cmp	r2, #0
    6312:	d011      	beq.n	6338 <_write+0x38>
    6314:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    6316:	4b0c      	ldr	r3, [pc, #48]	; (6348 <_write+0x48>)
    6318:	4698      	mov	r8, r3
    631a:	4f0c      	ldr	r7, [pc, #48]	; (634c <_write+0x4c>)
    631c:	4643      	mov	r3, r8
    631e:	6818      	ldr	r0, [r3, #0]
    6320:	5d31      	ldrb	r1, [r6, r4]
    6322:	683b      	ldr	r3, [r7, #0]
    6324:	4798      	blx	r3
    6326:	2800      	cmp	r0, #0
    6328:	db08      	blt.n	633c <_write+0x3c>
			return -1;
		}
		++nChars;
    632a:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    632c:	42a5      	cmp	r5, r4
    632e:	d1f5      	bne.n	631c <_write+0x1c>
    6330:	e006      	b.n	6340 <_write+0x40>
		return -1;
    6332:	2401      	movs	r4, #1
    6334:	4264      	negs	r4, r4
    6336:	e003      	b.n	6340 <_write+0x40>
	for (; len != 0; --len) {
    6338:	0014      	movs	r4, r2
    633a:	e001      	b.n	6340 <_write+0x40>
			return -1;
    633c:	2401      	movs	r4, #1
    633e:	4264      	negs	r4, r4
	}
	return nChars;
}
    6340:	0020      	movs	r0, r4
    6342:	bc04      	pop	{r2}
    6344:	4690      	mov	r8, r2
    6346:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6348:	20000450 	.word	0x20000450
    634c:	2000044c 	.word	0x2000044c

00006350 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    6350:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    6352:	4a06      	ldr	r2, [pc, #24]	; (636c <_sbrk+0x1c>)
    6354:	6812      	ldr	r2, [r2, #0]
    6356:	2a00      	cmp	r2, #0
    6358:	d004      	beq.n	6364 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    635a:	4a04      	ldr	r2, [pc, #16]	; (636c <_sbrk+0x1c>)
    635c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    635e:	18c3      	adds	r3, r0, r3
    6360:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    6362:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    6364:	4902      	ldr	r1, [pc, #8]	; (6370 <_sbrk+0x20>)
    6366:	4a01      	ldr	r2, [pc, #4]	; (636c <_sbrk+0x1c>)
    6368:	6011      	str	r1, [r2, #0]
    636a:	e7f6      	b.n	635a <_sbrk+0xa>
    636c:	2000015c 	.word	0x2000015c
    6370:	20002518 	.word	0x20002518

00006374 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    6374:	2001      	movs	r0, #1
    6376:	4240      	negs	r0, r0
    6378:	4770      	bx	lr

0000637a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    637a:	2380      	movs	r3, #128	; 0x80
    637c:	019b      	lsls	r3, r3, #6
    637e:	604b      	str	r3, [r1, #4]

	return 0;
}
    6380:	2000      	movs	r0, #0
    6382:	4770      	bx	lr

00006384 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    6384:	2001      	movs	r0, #1
    6386:	4770      	bx	lr

00006388 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    6388:	2000      	movs	r0, #0
    638a:	4770      	bx	lr

0000638c <configure_i2c_master>:

/* used to init I2C software module. */
struct i2c_master_module i2c_master_instance;

void configure_i2c_master(void)
{
    638c:	b530      	push	{r4, r5, lr}
    638e:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    6390:	aa01      	add	r2, sp, #4
    6392:	2364      	movs	r3, #100	; 0x64
    6394:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    6396:	4b20      	ldr	r3, [pc, #128]	; (6418 <configure_i2c_master+0x8c>)
    6398:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    639a:	2300      	movs	r3, #0
    639c:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    639e:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    63a0:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    63a2:	2180      	movs	r1, #128	; 0x80
    63a4:	0389      	lsls	r1, r1, #14
    63a6:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    63a8:	2101      	movs	r1, #1
    63aa:	4249      	negs	r1, r1
    63ac:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    63ae:	61d3      	str	r3, [r2, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    63b0:	6213      	str	r3, [r2, #32]
	config->scl_low_timeout  = false;
    63b2:	3125      	adds	r1, #37	; 0x25
    63b4:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    63b6:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    63b8:	3108      	adds	r1, #8
    63ba:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    63bc:	3101      	adds	r1, #1
    63be:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    63c0:	3101      	adds	r1, #1
    63c2:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    63c4:	33d7      	adds	r3, #215	; 0xd7
    63c6:	8613      	strh	r3, [r2, #48]	; 0x30
    /* initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);

    /* change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 10000;
    63c8:	4b14      	ldr	r3, [pc, #80]	; (641c <configure_i2c_master+0x90>)
    63ca:	82d3      	strh	r3, [r2, #22]

    /* initialize and enable device with config. */
    i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master);
    63cc:	4c14      	ldr	r4, [pc, #80]	; (6420 <configure_i2c_master+0x94>)
    63ce:	4915      	ldr	r1, [pc, #84]	; (6424 <configure_i2c_master+0x98>)
    63d0:	0020      	movs	r0, r4
    63d2:	4b15      	ldr	r3, [pc, #84]	; (6428 <configure_i2c_master+0x9c>)
    63d4:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    63d6:	6824      	ldr	r4, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    63d8:	2207      	movs	r2, #7
    63da:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    63dc:	421a      	tst	r2, r3
    63de:	d1fc      	bne.n	63da <configure_i2c_master+0x4e>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    63e0:	6823      	ldr	r3, [r4, #0]
    63e2:	2202      	movs	r2, #2
    63e4:	4313      	orrs	r3, r2
    63e6:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    63e8:	4d0d      	ldr	r5, [pc, #52]	; (6420 <configure_i2c_master+0x94>)
    63ea:	6828      	ldr	r0, [r5, #0]
    63ec:	4b0f      	ldr	r3, [pc, #60]	; (642c <configure_i2c_master+0xa0>)
    63ee:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    63f0:	231f      	movs	r3, #31
    63f2:	4018      	ands	r0, r3
    63f4:	3b1e      	subs	r3, #30
    63f6:	4083      	lsls	r3, r0
    63f8:	4a0d      	ldr	r2, [pc, #52]	; (6430 <configure_i2c_master+0xa4>)
    63fa:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    63fc:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    63fe:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    6400:	2110      	movs	r1, #16
    6402:	8b62      	ldrh	r2, [r4, #26]
    6404:	420a      	tst	r2, r1
    6406:	d104      	bne.n	6412 <configure_i2c_master+0x86>
		timeout_counter++;
    6408:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    640a:	4283      	cmp	r3, r0
    640c:	d3f9      	bcc.n	6402 <configure_i2c_master+0x76>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    640e:	2310      	movs	r3, #16
    6410:	8363      	strh	r3, [r4, #26]
    i2c_master_enable(&i2c_master_instance);
}
    6412:	b00f      	add	sp, #60	; 0x3c
    6414:	bd30      	pop	{r4, r5, pc}
    6416:	46c0      	nop			; (mov r8, r8)
    6418:	00000d48 	.word	0x00000d48
    641c:	00002710 	.word	0x00002710
    6420:	20000488 	.word	0x20000488
    6424:	42001000 	.word	0x42001000
    6428:	00000611 	.word	0x00000611
    642c:	00004921 	.word	0x00004921
    6430:	e000e100 	.word	0xe000e100

00006434 <shtc1_i2c_init>:




void shtc1_i2c_init()
{
    6434:	b510      	push	{r4, lr}
    //delay_init();
    //configure_port_pins();
    //configure_usart();
    configure_i2c_master();
    6436:	4b01      	ldr	r3, [pc, #4]	; (643c <shtc1_i2c_init+0x8>)
    6438:	4798      	blx	r3
}
    643a:	bd10      	pop	{r4, pc}
    643c:	0000638d 	.word	0x0000638d

00006440 <stream_writer_init>:
#include <string.h>
#include <asf.h>

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
    6440:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
    6442:	6101      	str	r1, [r0, #16]
	writer->written = 0;
    6444:	2200      	movs	r2, #0
    6446:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
    6448:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
    644a:	9b00      	ldr	r3, [sp, #0]
    644c:	60c3      	str	r3, [r0, #12]
}
    644e:	4770      	bx	lr

00006450 <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
    6450:	b510      	push	{r4, lr}
    6452:	0004      	movs	r4, r0
	if(writer->written > 0) {
    6454:	6842      	ldr	r2, [r0, #4]
    6456:	2a00      	cmp	r2, #0
    6458:	d100      	bne.n	645c <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
    645a:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    645c:	6901      	ldr	r1, [r0, #16]
    645e:	68c0      	ldr	r0, [r0, #12]
    6460:	68a3      	ldr	r3, [r4, #8]
    6462:	4798      	blx	r3
		writer->written = 0;
    6464:	2300      	movs	r3, #0
    6466:	6063      	str	r3, [r4, #4]
}
    6468:	e7f7      	b.n	645a <stream_writer_send_remain+0xa>
	...

0000646c <stream_writer_send_8>:
{
    646c:	b570      	push	{r4, r5, r6, lr}
    646e:	0004      	movs	r4, r0
    6470:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
    6472:	6803      	ldr	r3, [r0, #0]
    6474:	6842      	ldr	r2, [r0, #4]
    6476:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
    6478:	2b00      	cmp	r3, #0
    647a:	dd05      	ble.n	6488 <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
    647c:	6922      	ldr	r2, [r4, #16]
    647e:	6863      	ldr	r3, [r4, #4]
    6480:	1c59      	adds	r1, r3, #1
    6482:	6061      	str	r1, [r4, #4]
    6484:	54d5      	strb	r5, [r2, r3]
}
    6486:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
    6488:	4b01      	ldr	r3, [pc, #4]	; (6490 <stream_writer_send_8+0x24>)
    648a:	4798      	blx	r3
    648c:	e7f6      	b.n	647c <stream_writer_send_8+0x10>
    648e:	46c0      	nop			; (mov r8, r8)
    6490:	00006451 	.word	0x00006451

00006494 <stream_writer_send_16BE>:
{
    6494:	b570      	push	{r4, r5, r6, lr}
    6496:	0006      	movs	r6, r0
    6498:	000c      	movs	r4, r1
	stream_writer_send_8(writer, (value >> 8) & 0xFF);
    649a:	1209      	asrs	r1, r1, #8
    649c:	4d02      	ldr	r5, [pc, #8]	; (64a8 <stream_writer_send_16BE+0x14>)
    649e:	47a8      	blx	r5
	stream_writer_send_8(writer, value & 0xFF);
    64a0:	b261      	sxtb	r1, r4
    64a2:	0030      	movs	r0, r6
    64a4:	47a8      	blx	r5
}
    64a6:	bd70      	pop	{r4, r5, r6, pc}
    64a8:	0000646d 	.word	0x0000646d

000064ac <stream_writer_send_buffer>:
{
    64ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    64ae:	0006      	movs	r6, r0
    64b0:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
    64b2:	2a00      	cmp	r2, #0
    64b4:	d008      	beq.n	64c8 <stream_writer_send_buffer+0x1c>
    64b6:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
    64b8:	4f04      	ldr	r7, [pc, #16]	; (64cc <stream_writer_send_buffer+0x20>)
    64ba:	2100      	movs	r1, #0
    64bc:	5661      	ldrsb	r1, [r4, r1]
    64be:	0030      	movs	r0, r6
    64c0:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
    64c2:	3401      	adds	r4, #1
    64c4:	42a5      	cmp	r5, r4
    64c6:	d1f8      	bne.n	64ba <stream_writer_send_buffer+0xe>
}
    64c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    64ca:	46c0      	nop			; (mov r8, r8)
    64cc:	0000646d 	.word	0x0000646d

000064d0 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
    64d0:	4a02      	ldr	r2, [pc, #8]	; (64dc <sw_timer_tcc_callback+0xc>)
    64d2:	6813      	ldr	r3, [r2, #0]
    64d4:	3301      	adds	r3, #1
    64d6:	6013      	str	r3, [r2, #0]
}
    64d8:	4770      	bx	lr
    64da:	46c0      	nop			; (mov r8, r8)
    64dc:	20000160 	.word	0x20000160

000064e0 <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
    64e0:	2364      	movs	r3, #100	; 0x64
    64e2:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
    64e4:	2300      	movs	r3, #0
    64e6:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
    64e8:	7043      	strb	r3, [r0, #1]
}
    64ea:	4770      	bx	lr

000064ec <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    64ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    64ee:	46c6      	mov	lr, r8
    64f0:	b500      	push	{lr}
    64f2:	b0ac      	sub	sp, #176	; 0xb0
    64f4:	000d      	movs	r5, r1
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    64f6:	466e      	mov	r6, sp
    64f8:	4b1d      	ldr	r3, [pc, #116]	; (6570 <sw_timer_init+0x84>)
    64fa:	466a      	mov	r2, sp
    64fc:	cb92      	ldmia	r3!, {r1, r4, r7}
    64fe:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    6500:	886b      	ldrh	r3, [r5, #2]
    6502:	6543      	str	r3, [r0, #84]	; 0x54

	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    6504:	3014      	adds	r0, #20
    6506:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    6508:	782b      	ldrb	r3, [r5, #0]
    650a:	009b      	lsls	r3, r3, #2
    650c:	5999      	ldr	r1, [r3, r6]
    650e:	0017      	movs	r7, r2
    6510:	0010      	movs	r0, r2
    6512:	4b18      	ldr	r3, [pc, #96]	; (6574 <sw_timer_init+0x88>)
    6514:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    6516:	2000      	movs	r0, #0
    6518:	4b17      	ldr	r3, [pc, #92]	; (6578 <sw_timer_init+0x8c>)
    651a:	4798      	blx	r3
    651c:	4b17      	ldr	r3, [pc, #92]	; (657c <sw_timer_init+0x90>)
    651e:	7a1b      	ldrb	r3, [r3, #8]
    6520:	b2db      	uxtb	r3, r3
    6522:	40d8      	lsrs	r0, r3
    6524:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    6526:	8869      	ldrh	r1, [r5, #2]
    6528:	20fa      	movs	r0, #250	; 0xfa
    652a:	0200      	lsls	r0, r0, #8
    652c:	4b14      	ldr	r3, [pc, #80]	; (6580 <sw_timer_init+0x94>)
    652e:	4798      	blx	r3
    6530:	0001      	movs	r1, r0
    6532:	4640      	mov	r0, r8
    6534:	4b13      	ldr	r3, [pc, #76]	; (6584 <sw_timer_init+0x98>)
    6536:	4798      	blx	r3
    6538:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    653a:	2305      	movs	r3, #5
    653c:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    653e:	782b      	ldrb	r3, [r5, #0]
    6540:	009b      	lsls	r3, r3, #2
    6542:	5999      	ldr	r1, [r3, r6]
    6544:	003a      	movs	r2, r7
    6546:	0020      	movs	r0, r4
    6548:	4b0f      	ldr	r3, [pc, #60]	; (6588 <sw_timer_init+0x9c>)
    654a:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    654c:	786a      	ldrb	r2, [r5, #1]
    654e:	3208      	adds	r2, #8
    6550:	b2d2      	uxtb	r2, r2
    6552:	490e      	ldr	r1, [pc, #56]	; (658c <sw_timer_init+0xa0>)
    6554:	0020      	movs	r0, r4
    6556:	4b0e      	ldr	r3, [pc, #56]	; (6590 <sw_timer_init+0xa4>)
    6558:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    655a:	7869      	ldrb	r1, [r5, #1]
    655c:	3108      	adds	r1, #8
    655e:	b2c9      	uxtb	r1, r1
    6560:	0020      	movs	r0, r4
    6562:	4b0c      	ldr	r3, [pc, #48]	; (6594 <sw_timer_init+0xa8>)
    6564:	4798      	blx	r3
}
    6566:	b02c      	add	sp, #176	; 0xb0
    6568:	bc04      	pop	{r2}
    656a:	4690      	mov	r8, r2
    656c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    656e:	46c0      	nop			; (mov r8, r8)
    6570:	0000bd2c 	.word	0x0000bd2c
    6574:	00005ba9 	.word	0x00005ba9
    6578:	00005905 	.word	0x00005905
    657c:	40000400 	.word	0x40000400
    6580:	00007cb1 	.word	0x00007cb1
    6584:	00007b9d 	.word	0x00007b9d
    6588:	00005cf5 	.word	0x00005cf5
    658c:	000064d1 	.word	0x000064d1
    6590:	00006101 	.word	0x00006101
    6594:	00006119 	.word	0x00006119

00006598 <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    6598:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    659a:	2102      	movs	r1, #2
    659c:	6893      	ldr	r3, [r2, #8]
    659e:	4219      	tst	r1, r3
    65a0:	d1fc      	bne.n	659c <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    65a2:	6813      	ldr	r3, [r2, #0]
    65a4:	2102      	movs	r1, #2
    65a6:	430b      	orrs	r3, r1
    65a8:	6013      	str	r3, [r2, #0]
	Assert(module_inst);

	tcc_module = &module_inst->tcc_inst;

	tcc_enable(tcc_module);
}
    65aa:	4770      	bx	lr

000065ac <sw_timer_register_callback>:
	tcc_disable(tcc_module);
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
	sw_timer_callback_t callback, void *context, uint32_t period)
{
    65ac:	b570      	push	{r4, r5, r6, lr}
    65ae:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
    65b0:	7805      	ldrb	r5, [r0, #0]
    65b2:	07e8      	lsls	r0, r5, #31
    65b4:	d502      	bpl.n	65bc <sw_timer_register_callback+0x10>
			handler->used = 1;
			return index;
		}
	}

	return -1;
    65b6:	2001      	movs	r0, #1
    65b8:	4240      	negs	r0, r0
}
    65ba:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
    65bc:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
    65be:	0029      	movs	r1, r5
    65c0:	2002      	movs	r0, #2
    65c2:	4381      	bics	r1, r0
    65c4:	7021      	strb	r1, [r4, #0]
			handler->context = context;
    65c6:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
    65c8:	6d61      	ldr	r1, [r4, #84]	; 0x54
    65ca:	0018      	movs	r0, r3
    65cc:	4b04      	ldr	r3, [pc, #16]	; (65e0 <sw_timer_register_callback+0x34>)
    65ce:	4798      	blx	r3
    65d0:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
    65d2:	7823      	ldrb	r3, [r4, #0]
    65d4:	2201      	movs	r2, #1
    65d6:	4313      	orrs	r3, r2
    65d8:	7023      	strb	r3, [r4, #0]
			return index;
    65da:	2000      	movs	r0, #0
    65dc:	e7ed      	b.n	65ba <sw_timer_register_callback+0xe>
    65de:	46c0      	nop			; (mov r8, r8)
    65e0:	00007b9d 	.word	0x00007b9d

000065e4 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    65e4:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
    65e6:	008b      	lsls	r3, r1, #2
    65e8:	185d      	adds	r5, r3, r1
    65ea:	00ad      	lsls	r5, r5, #2
    65ec:	5c29      	ldrb	r1, [r5, r0]
    65ee:	2602      	movs	r6, #2
    65f0:	4331      	orrs	r1, r6
    65f2:	5429      	strb	r1, [r5, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    65f4:	1944      	adds	r4, r0, r5
    65f6:	6d41      	ldr	r1, [r0, #84]	; 0x54
    65f8:	0010      	movs	r0, r2
    65fa:	4b03      	ldr	r3, [pc, #12]	; (6608 <sw_timer_enable_callback+0x24>)
    65fc:	4798      	blx	r3
    65fe:	4b03      	ldr	r3, [pc, #12]	; (660c <sw_timer_enable_callback+0x28>)
    6600:	681b      	ldr	r3, [r3, #0]
    6602:	18c0      	adds	r0, r0, r3
    6604:	6120      	str	r0, [r4, #16]
}
    6606:	bd70      	pop	{r4, r5, r6, pc}
    6608:	00007b9d 	.word	0x00007b9d
    660c:	20000160 	.word	0x20000160

00006610 <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
    6610:	008b      	lsls	r3, r1, #2
    6612:	1859      	adds	r1, r3, r1
    6614:	0089      	lsls	r1, r1, #2
    6616:	5c0b      	ldrb	r3, [r1, r0]
    6618:	2202      	movs	r2, #2
    661a:	4393      	bics	r3, r2
    661c:	540b      	strb	r3, [r1, r0]
}
    661e:	4770      	bx	lr

00006620 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    6620:	b570      	push	{r4, r5, r6, lr}
    6622:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    6624:	7803      	ldrb	r3, [r0, #0]
    6626:	07db      	lsls	r3, r3, #31
    6628:	d507      	bpl.n	663a <sw_timer_task+0x1a>
    662a:	7803      	ldrb	r3, [r0, #0]
    662c:	079b      	lsls	r3, r3, #30
    662e:	d504      	bpl.n	663a <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    6630:	4b11      	ldr	r3, [pc, #68]	; (6678 <sw_timer_task+0x58>)
    6632:	681b      	ldr	r3, [r3, #0]
    6634:	6902      	ldr	r2, [r0, #16]
    6636:	1ad3      	subs	r3, r2, r3
    6638:	d400      	bmi.n	663c <sw_timer_task+0x1c>
				handler->busy = 0;
			}
		}
	}

}
    663a:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    663c:	7803      	ldrb	r3, [r0, #0]
    663e:	075b      	lsls	r3, r3, #29
    6640:	d4fb      	bmi.n	663a <sw_timer_task+0x1a>
				handler->busy = 1;
    6642:	7803      	ldrb	r3, [r0, #0]
    6644:	2204      	movs	r2, #4
    6646:	4313      	orrs	r3, r2
    6648:	7003      	strb	r3, [r0, #0]
				handler->callback(module_inst, index, handler->context, handler->period);
    664a:	68c3      	ldr	r3, [r0, #12]
    664c:	6882      	ldr	r2, [r0, #8]
    664e:	2100      	movs	r1, #0
    6650:	6845      	ldr	r5, [r0, #4]
    6652:	47a8      	blx	r5
				if (handler->period > 0) {
    6654:	68e3      	ldr	r3, [r4, #12]
    6656:	2b00      	cmp	r3, #0
    6658:	d008      	beq.n	666c <sw_timer_task+0x4c>
					handler->expire_time = sw_timer_tick + handler->period;
    665a:	4a07      	ldr	r2, [pc, #28]	; (6678 <sw_timer_task+0x58>)
    665c:	6812      	ldr	r2, [r2, #0]
    665e:	18d3      	adds	r3, r2, r3
    6660:	6123      	str	r3, [r4, #16]
				handler->busy = 0;
    6662:	7823      	ldrb	r3, [r4, #0]
    6664:	2204      	movs	r2, #4
    6666:	4393      	bics	r3, r2
    6668:	7023      	strb	r3, [r4, #0]
}
    666a:	e7e6      	b.n	663a <sw_timer_task+0x1a>
					handler->callback_enable = 0;
    666c:	7823      	ldrb	r3, [r4, #0]
    666e:	2202      	movs	r2, #2
    6670:	4393      	bics	r3, r2
    6672:	7023      	strb	r3, [r4, #0]
    6674:	e7f5      	b.n	6662 <sw_timer_task+0x42>
    6676:	46c0      	nop			; (mov r8, r8)
    6678:	20000160 	.word	0x20000160

0000667c <uart_callback>:
 * \param[in] module USART module structure.
 */
static void uart_callback(const struct usart_module *const module)
{
	/* If input string is bigger than buffer size limit, ignore the excess part. */
	if (uart_buffer_written < MAIN_CHAT_BUFFER_SIZE) {
    667c:	4b03      	ldr	r3, [pc, #12]	; (668c <uart_callback+0x10>)
    667e:	681b      	ldr	r3, [r3, #0]
    6680:	2b3f      	cmp	r3, #63	; 0x3f
    6682:	dc02      	bgt.n	668a <uart_callback+0xe>
		uart_buffer[uart_buffer_written++] = uart_ch_buffer & 0xFF;
    6684:	3301      	adds	r3, #1
    6686:	4a01      	ldr	r2, [pc, #4]	; (668c <uart_callback+0x10>)
    6688:	6013      	str	r3, [r2, #0]
	}
}
    668a:	4770      	bx	lr
    668c:	2000028c 	.word	0x2000028c

00006690 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
    6690:	b510      	push	{r4, lr}
	mqtt_socket_resolve_handler(doamin_name, server_ip);
    6692:	4b01      	ldr	r3, [pc, #4]	; (6698 <socket_resolve_handler+0x8>)
    6694:	4798      	blx	r3
}
    6696:	bd10      	pop	{r4, pc}
    6698:	00006ee9 	.word	0x00006ee9

0000669c <socket_event_handler>:
{
    669c:	b510      	push	{r4, lr}
	mqtt_socket_event_handler(sock, msg_type, msg_data);
    669e:	4b01      	ldr	r3, [pc, #4]	; (66a4 <socket_event_handler+0x8>)
    66a0:	4798      	blx	r3
}
    66a2:	bd10      	pop	{r4, pc}
    66a4:	00007a89 	.word	0x00007a89

000066a8 <wifi_callback>:
{
    66a8:	b510      	push	{r4, lr}
    66aa:	b082      	sub	sp, #8
	switch (msg_type) {
    66ac:	282c      	cmp	r0, #44	; 0x2c
    66ae:	d003      	beq.n	66b8 <wifi_callback+0x10>
    66b0:	2832      	cmp	r0, #50	; 0x32
    66b2:	d01c      	beq.n	66ee <wifi_callback+0x46>
}
    66b4:	b002      	add	sp, #8
    66b6:	bd10      	pop	{r4, pc}
		if (msg_wifi_state->u8CurrState == M2M_WIFI_CONNECTED) {
    66b8:	780b      	ldrb	r3, [r1, #0]
    66ba:	2b01      	cmp	r3, #1
    66bc:	d011      	beq.n	66e2 <wifi_callback+0x3a>
		} else if (msg_wifi_state->u8CurrState == M2M_WIFI_DISCONNECTED) {
    66be:	2b00      	cmp	r3, #0
    66c0:	d1f8      	bne.n	66b4 <wifi_callback+0xc>
			printf("Wi-Fi disconnected\r\n");
    66c2:	4812      	ldr	r0, [pc, #72]	; (670c <wifi_callback+0x64>)
    66c4:	4b12      	ldr	r3, [pc, #72]	; (6710 <wifi_callback+0x68>)
    66c6:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    66c8:	23ff      	movs	r3, #255	; 0xff
    66ca:	9300      	str	r3, [sp, #0]
    66cc:	4b11      	ldr	r3, [pc, #68]	; (6714 <wifi_callback+0x6c>)
    66ce:	2202      	movs	r2, #2
    66d0:	210e      	movs	r1, #14
    66d2:	4811      	ldr	r0, [pc, #68]	; (6718 <wifi_callback+0x70>)
    66d4:	4c11      	ldr	r4, [pc, #68]	; (671c <wifi_callback+0x74>)
    66d6:	47a0      	blx	r4
			mqtt_disconnect(&mqtt_inst, 1);
    66d8:	2101      	movs	r1, #1
    66da:	4811      	ldr	r0, [pc, #68]	; (6720 <wifi_callback+0x78>)
    66dc:	4b11      	ldr	r3, [pc, #68]	; (6724 <wifi_callback+0x7c>)
    66de:	4798      	blx	r3
    66e0:	e7e8      	b.n	66b4 <wifi_callback+0xc>
			printf("Wi-Fi connected\r\n");
    66e2:	4811      	ldr	r0, [pc, #68]	; (6728 <wifi_callback+0x80>)
    66e4:	4b0a      	ldr	r3, [pc, #40]	; (6710 <wifi_callback+0x68>)
    66e6:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    66e8:	4b10      	ldr	r3, [pc, #64]	; (672c <wifi_callback+0x84>)
    66ea:	4798      	blx	r3
    66ec:	e7e2      	b.n	66b4 <wifi_callback+0xc>
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    66ee:	788b      	ldrb	r3, [r1, #2]
    66f0:	784a      	ldrb	r2, [r1, #1]
    66f2:	7808      	ldrb	r0, [r1, #0]
    66f4:	78c9      	ldrb	r1, [r1, #3]
    66f6:	9100      	str	r1, [sp, #0]
    66f8:	0001      	movs	r1, r0
    66fa:	480d      	ldr	r0, [pc, #52]	; (6730 <wifi_callback+0x88>)
    66fc:	4c0d      	ldr	r4, [pc, #52]	; (6734 <wifi_callback+0x8c>)
    66fe:	47a0      	blx	r4
		mqtt_connect(&mqtt_inst, main_mqtt_broker);
    6700:	490d      	ldr	r1, [pc, #52]	; (6738 <wifi_callback+0x90>)
    6702:	4807      	ldr	r0, [pc, #28]	; (6720 <wifi_callback+0x78>)
    6704:	4b0d      	ldr	r3, [pc, #52]	; (673c <wifi_callback+0x94>)
    6706:	4798      	blx	r3
}
    6708:	e7d4      	b.n	66b4 <wifi_callback+0xc>
    670a:	46c0      	nop			; (mov r8, r8)
    670c:	0000c070 	.word	0x0000c070
    6710:	00009ab5 	.word	0x00009ab5
    6714:	0000c084 	.word	0x0000c084
    6718:	0000c090 	.word	0x0000c090
    671c:	000024b1 	.word	0x000024b1
    6720:	20000218 	.word	0x20000218
    6724:	00007749 	.word	0x00007749
    6728:	0000c05c 	.word	0x0000c05c
    672c:	000024cd 	.word	0x000024cd
    6730:	0000c0a0 	.word	0x0000c0a0
    6734:	00009999 	.word	0x00009999
    6738:	0000bf58 	.word	0x0000bf58
    673c:	00006f3d 	.word	0x00006f3d

00006740 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    6740:	b570      	push	{r4, r5, r6, lr}
    6742:	b082      	sub	sp, #8
    6744:	0005      	movs	r5, r0
    6746:	000e      	movs	r6, r1
	uint16_t temp = 0;
    6748:	2200      	movs	r2, #0
    674a:	466b      	mov	r3, sp
    674c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    674e:	4c06      	ldr	r4, [pc, #24]	; (6768 <usart_serial_getchar+0x28>)
    6750:	466b      	mov	r3, sp
    6752:	1d99      	adds	r1, r3, #6
    6754:	0028      	movs	r0, r5
    6756:	47a0      	blx	r4
    6758:	2800      	cmp	r0, #0
    675a:	d1f9      	bne.n	6750 <usart_serial_getchar+0x10>

	*c = temp;
    675c:	466b      	mov	r3, sp
    675e:	3306      	adds	r3, #6
    6760:	881b      	ldrh	r3, [r3, #0]
    6762:	7033      	strb	r3, [r6, #0]
}
    6764:	b002      	add	sp, #8
    6766:	bd70      	pop	{r4, r5, r6, pc}
    6768:	000051bd 	.word	0x000051bd

0000676c <usart_serial_putchar>:
{
    676c:	b570      	push	{r4, r5, r6, lr}
    676e:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    6770:	b28c      	uxth	r4, r1
    6772:	4e03      	ldr	r6, [pc, #12]	; (6780 <usart_serial_putchar+0x14>)
    6774:	0021      	movs	r1, r4
    6776:	0028      	movs	r0, r5
    6778:	47b0      	blx	r6
    677a:	2800      	cmp	r0, #0
    677c:	d1fa      	bne.n	6774 <usart_serial_putchar+0x8>
}
    677e:	bd70      	pop	{r4, r5, r6, pc}
    6780:	00005191 	.word	0x00005191

00006784 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
    6784:	b5f0      	push	{r4, r5, r6, r7, lr}
    6786:	b087      	sub	sp, #28
    6788:	0005      	movs	r5, r0
    678a:	0014      	movs	r4, r2
	switch (type) {
    678c:	2901      	cmp	r1, #1
    678e:	d04b      	beq.n	6828 <mqtt_callback+0xa4>
    6790:	dd2d      	ble.n	67ee <mqtt_callback+0x6a>
    6792:	2905      	cmp	r1, #5
    6794:	d061      	beq.n	685a <mqtt_callback+0xd6>
    6796:	2906      	cmp	r1, #6
    6798:	d168      	bne.n	686c <mqtt_callback+0xe8>

		break;

	case MQTT_CALLBACK_RECV_PUBLISH:
		/* You received publish message which you had subscribed. */
		if (data->recv_publish.topic != NULL && data->recv_publish.msg != NULL) {
    679a:	6810      	ldr	r0, [r2, #0]
    679c:	2800      	cmp	r0, #0
    679e:	d065      	beq.n	686c <mqtt_callback+0xe8>
    67a0:	6893      	ldr	r3, [r2, #8]
    67a2:	2b00      	cmp	r3, #0
    67a4:	d062      	beq.n	686c <mqtt_callback+0xe8>
			if (!strncmp(data->recv_publish.topic, MAIN_CHAT_TOPIC, strlen(MAIN_CHAT_TOPIC))) {
    67a6:	220a      	movs	r2, #10
    67a8:	4931      	ldr	r1, [pc, #196]	; (6870 <mqtt_callback+0xec>)
    67aa:	4b32      	ldr	r3, [pc, #200]	; (6874 <mqtt_callback+0xf0>)
    67ac:	4798      	blx	r3
    67ae:	1e05      	subs	r5, r0, #0
    67b0:	d15c      	bne.n	686c <mqtt_callback+0xe8>
				/* Print user name and message */
				for (int i = strlen(MAIN_CHAT_TOPIC); i < data->recv_publish.topic_size; i++) {
    67b2:	6863      	ldr	r3, [r4, #4]
    67b4:	2b0a      	cmp	r3, #10
    67b6:	dd08      	ble.n	67ca <mqtt_callback+0x46>
    67b8:	260a      	movs	r6, #10
				//for (int i = 0; i < data->recv_publish.topic_size; i++) {
					printf("%c", data->recv_publish.topic[i]);
    67ba:	4f2f      	ldr	r7, [pc, #188]	; (6878 <mqtt_callback+0xf4>)
    67bc:	6823      	ldr	r3, [r4, #0]
    67be:	5d98      	ldrb	r0, [r3, r6]
    67c0:	47b8      	blx	r7
				for (int i = strlen(MAIN_CHAT_TOPIC); i < data->recv_publish.topic_size; i++) {
    67c2:	3601      	adds	r6, #1
    67c4:	6863      	ldr	r3, [r4, #4]
    67c6:	42b3      	cmp	r3, r6
    67c8:	dcf8      	bgt.n	67bc <mqtt_callback+0x38>
				}
				printf(" >> ");
    67ca:	482c      	ldr	r0, [pc, #176]	; (687c <mqtt_callback+0xf8>)
    67cc:	4b2c      	ldr	r3, [pc, #176]	; (6880 <mqtt_callback+0xfc>)
    67ce:	4798      	blx	r3
				for (int i = 0; i < data->recv_publish.msg_size; i++) {
    67d0:	68e3      	ldr	r3, [r4, #12]
    67d2:	2b00      	cmp	r3, #0
    67d4:	dd07      	ble.n	67e6 <mqtt_callback+0x62>
					printf("%c", data->recv_publish.msg[i]);
    67d6:	4e28      	ldr	r6, [pc, #160]	; (6878 <mqtt_callback+0xf4>)
    67d8:	68a3      	ldr	r3, [r4, #8]
    67da:	5d58      	ldrb	r0, [r3, r5]
    67dc:	47b0      	blx	r6
				for (int i = 0; i < data->recv_publish.msg_size; i++) {
    67de:	3501      	adds	r5, #1
    67e0:	68e3      	ldr	r3, [r4, #12]
    67e2:	42ab      	cmp	r3, r5
    67e4:	dcf8      	bgt.n	67d8 <mqtt_callback+0x54>
				}
				printf("\r\n");
    67e6:	4827      	ldr	r0, [pc, #156]	; (6884 <mqtt_callback+0x100>)
    67e8:	4b27      	ldr	r3, [pc, #156]	; (6888 <mqtt_callback+0x104>)
    67ea:	4798      	blx	r3
    67ec:	e03e      	b.n	686c <mqtt_callback+0xe8>
	switch (type) {
    67ee:	2900      	cmp	r1, #0
    67f0:	d13c      	bne.n	686c <mqtt_callback+0xe8>
		if (data->sock_connected.result >= 0) {
    67f2:	6813      	ldr	r3, [r2, #0]
    67f4:	2b00      	cmp	r3, #0
    67f6:	db0d      	blt.n	6814 <mqtt_callback+0x90>
			mqtt_connect_broker(module_inst, 1, NULL, NULL, mqtt_user, NULL, NULL, 0, 0, 0);
    67f8:	2300      	movs	r3, #0
    67fa:	9305      	str	r3, [sp, #20]
    67fc:	9304      	str	r3, [sp, #16]
    67fe:	9303      	str	r3, [sp, #12]
    6800:	9302      	str	r3, [sp, #8]
    6802:	9301      	str	r3, [sp, #4]
    6804:	4b21      	ldr	r3, [pc, #132]	; (688c <mqtt_callback+0x108>)
    6806:	9300      	str	r3, [sp, #0]
    6808:	2300      	movs	r3, #0
    680a:	2200      	movs	r2, #0
    680c:	2101      	movs	r1, #1
    680e:	4c20      	ldr	r4, [pc, #128]	; (6890 <mqtt_callback+0x10c>)
    6810:	47a0      	blx	r4
    6812:	e02b      	b.n	686c <mqtt_callback+0xe8>
			printf("Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
    6814:	4c1f      	ldr	r4, [pc, #124]	; (6894 <mqtt_callback+0x110>)
    6816:	0021      	movs	r1, r4
    6818:	481f      	ldr	r0, [pc, #124]	; (6898 <mqtt_callback+0x114>)
    681a:	4b19      	ldr	r3, [pc, #100]	; (6880 <mqtt_callback+0xfc>)
    681c:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
    681e:	0021      	movs	r1, r4
    6820:	0028      	movs	r0, r5
    6822:	4b1e      	ldr	r3, [pc, #120]	; (689c <mqtt_callback+0x118>)
    6824:	4798      	blx	r3
    6826:	e021      	b.n	686c <mqtt_callback+0xe8>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
    6828:	7811      	ldrb	r1, [r2, #0]
    682a:	2900      	cmp	r1, #0
    682c:	d111      	bne.n	6852 <mqtt_callback+0xce>
			mqtt_subscribe(module_inst, MAIN_CHAT_TOPIC "#", 0);
    682e:	2200      	movs	r2, #0
    6830:	491b      	ldr	r1, [pc, #108]	; (68a0 <mqtt_callback+0x11c>)
    6832:	4b1c      	ldr	r3, [pc, #112]	; (68a4 <mqtt_callback+0x120>)
    6834:	4798      	blx	r3
			printf("Subscribed to the topic: %s\r\n", MAIN_CHAT_TOPIC);
    6836:	490e      	ldr	r1, [pc, #56]	; (6870 <mqtt_callback+0xec>)
    6838:	481b      	ldr	r0, [pc, #108]	; (68a8 <mqtt_callback+0x124>)
    683a:	4b11      	ldr	r3, [pc, #68]	; (6880 <mqtt_callback+0xfc>)
    683c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    683e:	491b      	ldr	r1, [pc, #108]	; (68ac <mqtt_callback+0x128>)
    6840:	2231      	movs	r2, #49	; 0x31
    6842:	5c8b      	ldrb	r3, [r1, r2]
    6844:	2002      	movs	r0, #2
    6846:	4303      	orrs	r3, r0
    6848:	548b      	strb	r3, [r1, r2]
			printf("Preparation of the chat has been completed.\r\n");
    684a:	4819      	ldr	r0, [pc, #100]	; (68b0 <mqtt_callback+0x12c>)
    684c:	4b0e      	ldr	r3, [pc, #56]	; (6888 <mqtt_callback+0x104>)
    684e:	4798      	blx	r3
    6850:	e00c      	b.n	686c <mqtt_callback+0xe8>
			printf("MQTT broker decline your access! error code %d\r\n", data->connected.result);
    6852:	4818      	ldr	r0, [pc, #96]	; (68b4 <mqtt_callback+0x130>)
    6854:	4b0a      	ldr	r3, [pc, #40]	; (6880 <mqtt_callback+0xfc>)
    6856:	4798      	blx	r3
    6858:	e008      	b.n	686c <mqtt_callback+0xe8>

		break;

	case MQTT_CALLBACK_DISCONNECTED:
		/* Stop timer and USART callback. */
		printf("MQTT disconnected\r\n");
    685a:	4817      	ldr	r0, [pc, #92]	; (68b8 <mqtt_callback+0x134>)
    685c:	4b0a      	ldr	r3, [pc, #40]	; (6888 <mqtt_callback+0x104>)
    685e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
    6860:	4912      	ldr	r1, [pc, #72]	; (68ac <mqtt_callback+0x128>)
    6862:	2231      	movs	r2, #49	; 0x31
    6864:	5c8b      	ldrb	r3, [r1, r2]
    6866:	2002      	movs	r0, #2
    6868:	4383      	bics	r3, r0
    686a:	548b      	strb	r3, [r1, r2]
		usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
		break;
	}
}
    686c:	b007      	add	sp, #28
    686e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6870:	0000bfac 	.word	0x0000bfac
    6874:	00009ccf 	.word	0x00009ccf
    6878:	000099cd 	.word	0x000099cd
    687c:	0000c03c 	.word	0x0000c03c
    6880:	00009999 	.word	0x00009999
    6884:	0000c044 	.word	0x0000c044
    6888:	00009ab5 	.word	0x00009ab5
    688c:	20000040 	.word	0x20000040
    6890:	00007051 	.word	0x00007051
    6894:	0000bf58 	.word	0x0000bf58
    6898:	0000bf68 	.word	0x0000bf68
    689c:	00006f3d 	.word	0x00006f3d
    68a0:	0000bfa0 	.word	0x0000bfa0
    68a4:	000074a9 	.word	0x000074a9
    68a8:	0000bfb8 	.word	0x0000bfb8
    68ac:	20000164 	.word	0x20000164
    68b0:	0000bfd8 	.word	0x0000bfd8
    68b4:	0000c008 	.word	0x0000c008
    68b8:	0000c048 	.word	0x0000c048

000068bc <configure_adc>:
{
    68bc:	b510      	push	{r4, lr}
    68be:	b08c      	sub	sp, #48	; 0x30
	adc_get_config_defaults(&config_adc);
    68c0:	4668      	mov	r0, sp
    68c2:	4b16      	ldr	r3, [pc, #88]	; (691c <configure_adc+0x60>)
    68c4:	4798      	blx	r3
	config_adc.gain_factor		= ADC_GAIN_FACTOR_DIV2;
    68c6:	23f0      	movs	r3, #240	; 0xf0
    68c8:	051b      	lsls	r3, r3, #20
    68ca:	9302      	str	r3, [sp, #8]
	config_adc.clock_prescaler	= ADC_CLOCK_PRESCALER_DIV32;
    68cc:	23c0      	movs	r3, #192	; 0xc0
    68ce:	009b      	lsls	r3, r3, #2
    68d0:	466a      	mov	r2, sp
    68d2:	8053      	strh	r3, [r2, #2]
	config_adc.reference		= ADC_REFERENCE_INTVCC1;
    68d4:	2302      	movs	r3, #2
    68d6:	7053      	strb	r3, [r2, #1]
	config_adc.positive_input	= ADC_POSITIVE_INPUT_PIN0; //AIN0 which is PA02 in Xplained pro board
    68d8:	2300      	movs	r3, #0
    68da:	7313      	strb	r3, [r2, #12]
	config_adc.resolution		= ADC_RESOLUTION_12BIT;
    68dc:	7113      	strb	r3, [r2, #4]
	config_adc.freerunning		= true;
    68de:	2201      	movs	r2, #1
    68e0:	4669      	mov	r1, sp
    68e2:	750a      	strb	r2, [r1, #20]
	config_adc.left_adjust		= false;
    68e4:	466a      	mov	r2, sp
    68e6:	748b      	strb	r3, [r1, #18]
	adc_init(&adc_instance, ADC, &config_adc);
    68e8:	4c0d      	ldr	r4, [pc, #52]	; (6920 <configure_adc+0x64>)
    68ea:	490e      	ldr	r1, [pc, #56]	; (6924 <configure_adc+0x68>)
    68ec:	0020      	movs	r0, r4
    68ee:	4b0e      	ldr	r3, [pc, #56]	; (6928 <configure_adc+0x6c>)
    68f0:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    68f2:	6822      	ldr	r2, [r4, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    68f4:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    68f6:	b25b      	sxtb	r3, r3
    68f8:	2b00      	cmp	r3, #0
    68fa:	dbfb      	blt.n	68f4 <configure_adc+0x38>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    68fc:	230f      	movs	r3, #15
    68fe:	7593      	strb	r3, [r2, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    6900:	7613      	strb	r3, [r2, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    6902:	7813      	ldrb	r3, [r2, #0]
    6904:	2102      	movs	r1, #2
    6906:	430b      	orrs	r3, r1
    6908:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    690a:	4b05      	ldr	r3, [pc, #20]	; (6920 <configure_adc+0x64>)
    690c:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    690e:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    6910:	b25b      	sxtb	r3, r3
    6912:	2b00      	cmp	r3, #0
    6914:	dbfb      	blt.n	690e <configure_adc+0x52>
}
    6916:	b00c      	add	sp, #48	; 0x30
    6918:	bd10      	pop	{r4, pc}
    691a:	46c0      	nop			; (mov r8, r8)
    691c:	000001cd 	.word	0x000001cd
    6920:	20000508 	.word	0x20000508
    6924:	42004000 	.word	0x42004000
    6928:	00000215 	.word	0x00000215

0000692c <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
    692c:	b5f0      	push	{r4, r5, r6, r7, lr}
    692e:	46d6      	mov	lr, sl
    6930:	464f      	mov	r7, r9
    6932:	4646      	mov	r6, r8
    6934:	b5c0      	push	{r6, r7, lr}
    6936:	b0b2      	sub	sp, #200	; 0xc8
	int8_t ret;
	char topic[strlen(MAIN_CHAT_TOPIC) + MAIN_CHAT_USER_NAME_SIZE + 1];
	//char msgBuff[32];
	
	/* Initialize the board. */
	system_init();
    6938:	4bbf      	ldr	r3, [pc, #764]	; (6c38 <main+0x30c>)
    693a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    693c:	aa15      	add	r2, sp, #84	; 0x54
    693e:	2380      	movs	r3, #128	; 0x80
    6940:	05db      	lsls	r3, r3, #23
    6942:	9315      	str	r3, [sp, #84]	; 0x54
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    6944:	2300      	movs	r3, #0
    6946:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    6948:	21ff      	movs	r1, #255	; 0xff
    694a:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    694c:	2100      	movs	r1, #0
    694e:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    6950:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    6952:	2501      	movs	r5, #1
    6954:	2024      	movs	r0, #36	; 0x24
    6956:	5415      	strb	r5, [r2, r0]
	config->transmitter_enable = true;
    6958:	3001      	adds	r0, #1
    695a:	5415      	strb	r5, [r2, r0]
	config->clock_polarity_inverted = false;
    695c:	3001      	adds	r0, #1
    695e:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
    6960:	3001      	adds	r0, #1
    6962:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
    6964:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    6966:	3005      	adds	r0, #5
    6968:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
    696a:	3001      	adds	r0, #1
    696c:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    696e:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    6970:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    6972:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    6974:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    6976:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    6978:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
    697a:	2313      	movs	r3, #19
    697c:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    697e:	7751      	strb	r1, [r2, #29]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    6980:	2380      	movs	r3, #128	; 0x80
    6982:	035b      	lsls	r3, r3, #13
    6984:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    6986:	4bad      	ldr	r3, [pc, #692]	; (6c3c <main+0x310>)
    6988:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    698a:	4bad      	ldr	r3, [pc, #692]	; (6c40 <main+0x314>)
    698c:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    698e:	2301      	movs	r3, #1
    6990:	425b      	negs	r3, r3
    6992:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    6994:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    6996:	23e1      	movs	r3, #225	; 0xe1
    6998:	025b      	lsls	r3, r3, #9
    699a:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    699c:	4ca9      	ldr	r4, [pc, #676]	; (6c44 <main+0x318>)
    699e:	4baa      	ldr	r3, [pc, #680]	; (6c48 <main+0x31c>)
    69a0:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    69a2:	49aa      	ldr	r1, [pc, #680]	; (6c4c <main+0x320>)
    69a4:	4baa      	ldr	r3, [pc, #680]	; (6c50 <main+0x324>)
    69a6:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    69a8:	49aa      	ldr	r1, [pc, #680]	; (6c54 <main+0x328>)
    69aa:	4bab      	ldr	r3, [pc, #684]	; (6c58 <main+0x32c>)
    69ac:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    69ae:	49ab      	ldr	r1, [pc, #684]	; (6c5c <main+0x330>)
    69b0:	0020      	movs	r0, r4
    69b2:	4bab      	ldr	r3, [pc, #684]	; (6c60 <main+0x334>)
    69b4:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    69b6:	4fab      	ldr	r7, [pc, #684]	; (6c64 <main+0x338>)
    69b8:	683b      	ldr	r3, [r7, #0]
    69ba:	6898      	ldr	r0, [r3, #8]
    69bc:	2100      	movs	r1, #0
    69be:	4eaa      	ldr	r6, [pc, #680]	; (6c68 <main+0x33c>)
    69c0:	47b0      	blx	r6
	setbuf(stdin, NULL);
    69c2:	683b      	ldr	r3, [r7, #0]
    69c4:	6858      	ldr	r0, [r3, #4]
    69c6:	2100      	movs	r1, #0
    69c8:	47b0      	blx	r6
	usart_register_callback(&cdc_uart_module, (usart_callback_t)uart_callback, USART_CALLBACK_BUFFER_RECEIVED);
    69ca:	2201      	movs	r2, #1
    69cc:	49a7      	ldr	r1, [pc, #668]	; (6c6c <main+0x340>)
    69ce:	0020      	movs	r0, r4
    69d0:	4ba7      	ldr	r3, [pc, #668]	; (6c70 <main+0x344>)
    69d2:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    69d4:	6826      	ldr	r6, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    69d6:	0030      	movs	r0, r6
    69d8:	4ba6      	ldr	r3, [pc, #664]	; (6c74 <main+0x348>)
    69da:	4798      	blx	r3
    69dc:	231f      	movs	r3, #31
    69de:	4018      	ands	r0, r3
    69e0:	4085      	lsls	r5, r0
    69e2:	4ba5      	ldr	r3, [pc, #660]	; (6c78 <main+0x34c>)
    69e4:	601d      	str	r5, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    69e6:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    69e8:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    69ea:	2a00      	cmp	r2, #0
    69ec:	d1fc      	bne.n	69e8 <main+0xbc>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    69ee:	6833      	ldr	r3, [r6, #0]
    69f0:	3202      	adds	r2, #2
    69f2:	4313      	orrs	r3, r2
    69f4:	6033      	str	r3, [r6, #0]
	/* Initialize the UART console. */
	configure_console();
	
	
	/* Output example information */
	printf(STRING_HEADER);
    69f6:	48a1      	ldr	r0, [pc, #644]	; (6c7c <main+0x350>)
    69f8:	4ba1      	ldr	r3, [pc, #644]	; (6c80 <main+0x354>)
    69fa:	4798      	blx	r3
	sw_timer_get_config_defaults(&swt_conf);
    69fc:	a815      	add	r0, sp, #84	; 0x54
    69fe:	4ba1      	ldr	r3, [pc, #644]	; (6c84 <main+0x358>)
    6a00:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
    6a02:	4ca1      	ldr	r4, [pc, #644]	; (6c88 <main+0x35c>)
    6a04:	a915      	add	r1, sp, #84	; 0x54
    6a06:	0020      	movs	r0, r4
    6a08:	4ba0      	ldr	r3, [pc, #640]	; (6c8c <main+0x360>)
    6a0a:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    6a0c:	0020      	movs	r0, r4
    6a0e:	4ba0      	ldr	r3, [pc, #640]	; (6c90 <main+0x364>)
    6a10:	4798      	blx	r3
	/* Initialize the Timer. */
	configure_timer();

	
	/* Initialize the BSP. */
	nm_bsp_init();
    6a12:	4ba0      	ldr	r3, [pc, #640]	; (6c94 <main+0x368>)
    6a14:	4798      	blx	r3
	
	
	/* Initialize the ADC on a specific channel */
	configure_adc();
    6a16:	4ba0      	ldr	r3, [pc, #640]	; (6c98 <main+0x36c>)
    6a18:	4798      	blx	r3
	
	
	/* Setup user name first */
	//printf("Enter the user name (Max %d characters)\r\n", MAIN_CHAT_USER_NAME_SIZE);
	//scanf("%64s", mqtt_user);
	printf("User : %s\r\n", mqtt_user); // Add new line after printing mqtt_user
    6a1a:	4ca0      	ldr	r4, [pc, #640]	; (6c9c <main+0x370>)
    6a1c:	0021      	movs	r1, r4
    6a1e:	48a0      	ldr	r0, [pc, #640]	; (6ca0 <main+0x374>)
    6a20:	4ba0      	ldr	r3, [pc, #640]	; (6ca4 <main+0x378>)
    6a22:	4798      	blx	r3
	sprintf(topic, "%s%s", MAIN_CHAT_TOPIC, mqtt_user); //save 'MAIN_CHAT_TOPIC' data to the 'topic' char array
    6a24:	0023      	movs	r3, r4
    6a26:	4aa0      	ldr	r2, [pc, #640]	; (6ca8 <main+0x37c>)
    6a28:	49a0      	ldr	r1, [pc, #640]	; (6cac <main+0x380>)
    6a2a:	a815      	add	r0, sp, #84	; 0x54
    6a2c:	4ca0      	ldr	r4, [pc, #640]	; (6cb0 <main+0x384>)
    6a2e:	47a0      	blx	r4
	

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    6a30:	2218      	movs	r2, #24
    6a32:	2100      	movs	r1, #0
    6a34:	a82c      	add	r0, sp, #176	; 0xb0
    6a36:	4b9f      	ldr	r3, [pc, #636]	; (6cb4 <main+0x388>)
    6a38:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_callback; /* Set Wi-Fi event callback. */
    6a3a:	4b9f      	ldr	r3, [pc, #636]	; (6cb8 <main+0x38c>)
    6a3c:	932c      	str	r3, [sp, #176]	; 0xb0
	ret = m2m_wifi_init(&param);
    6a3e:	a82c      	add	r0, sp, #176	; 0xb0
    6a40:	4b9e      	ldr	r3, [pc, #632]	; (6cbc <main+0x390>)
    6a42:	4798      	blx	r3
    6a44:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) {
    6a46:	d003      	beq.n	6a50 <main+0x124>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
    6a48:	489d      	ldr	r0, [pc, #628]	; (6cc0 <main+0x394>)
    6a4a:	4b96      	ldr	r3, [pc, #600]	; (6ca4 <main+0x378>)
    6a4c:	4798      	blx	r3
    6a4e:	e7fe      	b.n	6a4e <main+0x122>
		while (1) { /* Loop forever. */
		}
	}

	/* Initialize socket interface. */
	socketInit();
    6a50:	4b9c      	ldr	r3, [pc, #624]	; (6cc4 <main+0x398>)
    6a52:	4798      	blx	r3
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
    6a54:	499c      	ldr	r1, [pc, #624]	; (6cc8 <main+0x39c>)
    6a56:	489d      	ldr	r0, [pc, #628]	; (6ccc <main+0x3a0>)
    6a58:	4b9d      	ldr	r3, [pc, #628]	; (6cd0 <main+0x3a4>)
    6a5a:	4798      	blx	r3

	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    6a5c:	23ff      	movs	r3, #255	; 0xff
    6a5e:	9300      	str	r3, [sp, #0]
    6a60:	4b9c      	ldr	r3, [pc, #624]	; (6cd4 <main+0x3a8>)
    6a62:	2202      	movs	r2, #2
    6a64:	210e      	movs	r1, #14
    6a66:	489c      	ldr	r0, [pc, #624]	; (6cd8 <main+0x3ac>)
    6a68:	4c9c      	ldr	r4, [pc, #624]	; (6cdc <main+0x3b0>)
    6a6a:	47a0      	blx	r4
	mqtt_get_config_defaults(&mqtt_conf);
    6a6c:	a805      	add	r0, sp, #20
    6a6e:	4b9c      	ldr	r3, [pc, #624]	; (6ce0 <main+0x3b4>)
    6a70:	4798      	blx	r3
	mqtt_conf.timer_inst = &swt_module_inst;
    6a72:	4b85      	ldr	r3, [pc, #532]	; (6c88 <main+0x35c>)
    6a74:	9306      	str	r3, [sp, #24]
	mqtt_conf.recv_buffer = mqtt_buffer;
    6a76:	4b9b      	ldr	r3, [pc, #620]	; (6ce4 <main+0x3b8>)
    6a78:	9308      	str	r3, [sp, #32]
	mqtt_conf.recv_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    6a7a:	2380      	movs	r3, #128	; 0x80
    6a7c:	9309      	str	r3, [sp, #36]	; 0x24
	result = mqtt_init(&mqtt_inst, &mqtt_conf);
    6a7e:	a905      	add	r1, sp, #20
    6a80:	4899      	ldr	r0, [pc, #612]	; (6ce8 <main+0x3bc>)
    6a82:	4b9a      	ldr	r3, [pc, #616]	; (6cec <main+0x3c0>)
    6a84:	4798      	blx	r3
    6a86:	1e01      	subs	r1, r0, #0
	if (result < 0) {
    6a88:	da03      	bge.n	6a92 <main+0x166>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
    6a8a:	4899      	ldr	r0, [pc, #612]	; (6cf0 <main+0x3c4>)
    6a8c:	4b85      	ldr	r3, [pc, #532]	; (6ca4 <main+0x378>)
    6a8e:	4798      	blx	r3
    6a90:	e7fe      	b.n	6a90 <main+0x164>
	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
    6a92:	4998      	ldr	r1, [pc, #608]	; (6cf4 <main+0x3c8>)
    6a94:	4894      	ldr	r0, [pc, #592]	; (6ce8 <main+0x3bc>)
    6a96:	4b98      	ldr	r3, [pc, #608]	; (6cf8 <main+0x3cc>)
    6a98:	4798      	blx	r3
    6a9a:	1e01      	subs	r1, r0, #0
	if (result < 0) {
    6a9c:	da03      	bge.n	6aa6 <main+0x17a>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
    6a9e:	4897      	ldr	r0, [pc, #604]	; (6cfc <main+0x3d0>)
    6aa0:	4b80      	ldr	r3, [pc, #512]	; (6ca4 <main+0x378>)
    6aa2:	4798      	blx	r3
    6aa4:	e7fe      	b.n	6aa4 <main+0x178>
    enum status_code shtc1_connected;
    enum status_code shtc1_read_status;
	enum status_code ams_read_status;
	
	/* Initialize the I2C console. */
	shtc1_i2c_init();
    6aa6:	4b96      	ldr	r3, [pc, #600]	; (6d00 <main+0x3d4>)
    6aa8:	4798      	blx	r3

    delay_s(2);
    6aaa:	20fa      	movs	r0, #250	; 0xfa
    6aac:	00c0      	lsls	r0, r0, #3
    6aae:	4b95      	ldr	r3, [pc, #596]	; (6d04 <main+0x3d8>)
    6ab0:	4798      	blx	r3

    printf("\r\nstarting...\r\n");
    6ab2:	4895      	ldr	r0, [pc, #596]	; (6d08 <main+0x3dc>)
    6ab4:	4b72      	ldr	r3, [pc, #456]	; (6c80 <main+0x354>)
    6ab6:	4798      	blx	r3

    /* test if sensor is connected */
    shtc1_connected = shtc1_probe(&i2c_master_instance);
    6ab8:	4894      	ldr	r0, [pc, #592]	; (6d0c <main+0x3e0>)
    6aba:	4b95      	ldr	r3, [pc, #596]	; (6d10 <main+0x3e4>)
    6abc:	4798      	blx	r3
    printf("sensor is %s\r\n",
    6abe:	2800      	cmp	r0, #0
    6ac0:	d123      	bne.n	6b0a <main+0x1de>
    6ac2:	4994      	ldr	r1, [pc, #592]	; (6d14 <main+0x3e8>)
    6ac4:	4894      	ldr	r0, [pc, #592]	; (6d18 <main+0x3ec>)
    6ac6:	4b77      	ldr	r3, [pc, #476]	; (6ca4 <main+0x378>)
    6ac8:	4798      	blx	r3
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    6aca:	2000      	movs	r0, #0
    6acc:	4b93      	ldr	r3, [pc, #588]	; (6d1c <main+0x3f0>)
    6ace:	4798      	blx	r3
    6ad0:	4b93      	ldr	r3, [pc, #588]	; (6d20 <main+0x3f4>)
    6ad2:	7a1b      	ldrb	r3, [r3, #8]
    6ad4:	b2db      	uxtb	r3, r3
    6ad6:	40d8      	lsrs	r0, r3




	/* Enable SysTick interrupt for non busy wait delay. */
	if (SysTick_Config(system_cpu_clock_get_hz() / 1000))
    6ad8:	21fa      	movs	r1, #250	; 0xfa
    6ada:	0089      	lsls	r1, r1, #2
    6adc:	4b91      	ldr	r3, [pc, #580]	; (6d24 <main+0x3f8>)
    6ade:	4798      	blx	r3
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
    6ae0:	3801      	subs	r0, #1
    6ae2:	4b91      	ldr	r3, [pc, #580]	; (6d28 <main+0x3fc>)
    6ae4:	4298      	cmp	r0, r3
    6ae6:	d900      	bls.n	6aea <main+0x1be>
    6ae8:	e0a1      	b.n	6c2e <main+0x302>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
    6aea:	4a90      	ldr	r2, [pc, #576]	; (6d2c <main+0x400>)
    6aec:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    6aee:	4890      	ldr	r0, [pc, #576]	; (6d30 <main+0x404>)
    6af0:	6a03      	ldr	r3, [r0, #32]
    6af2:	021b      	lsls	r3, r3, #8
    6af4:	0a1b      	lsrs	r3, r3, #8
    6af6:	21c0      	movs	r1, #192	; 0xc0
    6af8:	0609      	lsls	r1, r1, #24
    6afa:	430b      	orrs	r3, r1
    6afc:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    6afe:	2300      	movs	r3, #0
    6b00:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    6b02:	3307      	adds	r3, #7
    6b04:	6013      	str	r3, [r2, #0]
		status_flags |= ADC_STATUS_WINDOW;
    6b06:	2602      	movs	r6, #2
    6b08:	e08c      	b.n	6c24 <main+0x2f8>
    printf("sensor is %s\r\n",
    6b0a:	498a      	ldr	r1, [pc, #552]	; (6d34 <main+0x408>)
    6b0c:	e7da      	b.n	6ac4 <main+0x198>
			//mqtt_publish(&mqtt_inst, topic2, dt, MAIN_MQTT_BUFFER_SIZE, 0, 0); //This time mqtt buffer size is being used, not uart buffer size

        }
        else
        {
            printf("Bro I can't measure the Temp & Humidity. Are you sure you plugged the sensor in?\n");
    6b0e:	488a      	ldr	r0, [pc, #552]	; (6d38 <main+0x40c>)
    6b10:	4b5b      	ldr	r3, [pc, #364]	; (6c80 <main+0x354>)
    6b12:	4798      	blx	r3
    6b14:	e03d      	b.n	6b92 <main+0x266>
			//printf("CO2 = (%d) ppm\r\n",co2);
					
		}
		else
		{
			printf("Bro I can't measure the VOC & CO2. Are you sure you plugged the iAQ-Core in?\n");
    6b16:	4889      	ldr	r0, [pc, #548]	; (6d3c <main+0x410>)
    6b18:	4b59      	ldr	r3, [pc, #356]	; (6c80 <main+0x354>)
    6b1a:	4798      	blx	r3
    6b1c:	e048      	b.n	6bb0 <main+0x284>
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    6b1e:	4214      	tst	r4, r2
    6b20:	d10a      	bne.n	6b38 <main+0x20c>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    6b22:	7e0b      	ldrb	r3, [r1, #24]
    6b24:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    6b26:	0022      	movs	r2, r4
    6b28:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    6b2a:	421d      	tst	r5, r3
    6b2c:	d000      	beq.n	6b30 <main+0x204>
		status_flags |= ADC_STATUS_WINDOW;
    6b2e:	4332      	orrs	r2, r6
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    6b30:	421e      	tst	r6, r3
    6b32:	d0f4      	beq.n	6b1e <main+0x1f2>
		status_flags |= ADC_STATUS_OVERRUN;
    6b34:	432a      	orrs	r2, r5
    6b36:	e7f2      	b.n	6b1e <main+0x1f2>
    6b38:	7e4b      	ldrb	r3, [r1, #25]
	}

	Adc *const adc_module = module_inst->hw;

#if (SAMD) || (SAMHA1) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    6b3a:	b25b      	sxtb	r3, r3
    6b3c:	2b00      	cmp	r3, #0
    6b3e:	dbfb      	blt.n	6b38 <main+0x20c>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    6b40:	8b4b      	ldrh	r3, [r1, #26]
    6b42:	b29b      	uxth	r3, r3
    6b44:	4698      	mov	r8, r3
	adc_module->INTFLAG.reg = int_flags;
    6b46:	760c      	strb	r4, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    6b48:	7e0b      	ldrb	r3, [r1, #24]
    6b4a:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    6b4c:	0022      	movs	r2, r4
    6b4e:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    6b50:	421d      	tst	r5, r3
    6b52:	d000      	beq.n	6b56 <main+0x22a>
		status_flags |= ADC_STATUS_WINDOW;
    6b54:	4332      	orrs	r2, r6
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    6b56:	421e      	tst	r6, r3
    6b58:	d000      	beq.n	6b5c <main+0x230>
		status_flags |= ADC_STATUS_OVERRUN;
    6b5a:	432a      	orrs	r2, r5

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    6b5c:	4215      	tst	r5, r2
    6b5e:	d000      	beq.n	6b62 <main+0x236>
	adc_module->INTFLAG.reg = int_flags;
    6b60:	760e      	strb	r6, [r1, #24]
	
	
	
	
		//Write your timing dependent function to be called after time-out
		if( tick_counter_check_timer())
    6b62:	4b77      	ldr	r3, [pc, #476]	; (6d40 <main+0x414>)
    6b64:	4798      	blx	r3
    6b66:	2800      	cmp	r0, #0
    6b68:	d135      	bne.n	6bd6 <main+0x2aa>
		m2m_wifi_handle_events(NULL);
    6b6a:	2000      	movs	r0, #0
    6b6c:	47d0      	blx	sl
		sw_timer_task(&swt_module_inst);
    6b6e:	4846      	ldr	r0, [pc, #280]	; (6c88 <main+0x35c>)
    6b70:	4b74      	ldr	r3, [pc, #464]	; (6d44 <main+0x418>)
    6b72:	4798      	blx	r3
		delay_s(1);
    6b74:	20fa      	movs	r0, #250	; 0xfa
    6b76:	0080      	lsls	r0, r0, #2
    6b78:	4f62      	ldr	r7, [pc, #392]	; (6d04 <main+0x3d8>)
    6b7a:	47b8      	blx	r7
        shtc1_read_status = shtc1_read_lpm_sync(&i2c_master_instance, &temp, &rh); //read into the temp and rh variables
    6b7c:	aa2a      	add	r2, sp, #168	; 0xa8
    6b7e:	a92b      	add	r1, sp, #172	; 0xac
    6b80:	4862      	ldr	r0, [pc, #392]	; (6d0c <main+0x3e0>)
    6b82:	4b71      	ldr	r3, [pc, #452]	; (6d48 <main+0x41c>)
    6b84:	4798      	blx	r3
    6b86:	4680      	mov	r8, r0
		delay_ms(100);
    6b88:	2064      	movs	r0, #100	; 0x64
    6b8a:	47b8      	blx	r7
        if (shtc1_read_status == STATUS_OK)
    6b8c:	4643      	mov	r3, r8
    6b8e:	2b00      	cmp	r3, #0
    6b90:	d1bd      	bne.n	6b0e <main+0x1e2>
		delay_s(1);
    6b92:	20fa      	movs	r0, #250	; 0xfa
    6b94:	0080      	lsls	r0, r0, #2
    6b96:	4f5b      	ldr	r7, [pc, #364]	; (6d04 <main+0x3d8>)
    6b98:	47b8      	blx	r7
		ams_read_status = ams_sensor_read(&i2c_master_instance, &voc, &co2); //read into the address of the variable voc and co2
    6b9a:	aa28      	add	r2, sp, #160	; 0xa0
    6b9c:	a929      	add	r1, sp, #164	; 0xa4
    6b9e:	485b      	ldr	r0, [pc, #364]	; (6d0c <main+0x3e0>)
    6ba0:	4b6a      	ldr	r3, [pc, #424]	; (6d4c <main+0x420>)
    6ba2:	4798      	blx	r3
    6ba4:	4681      	mov	r9, r0
		delay_ms(100);
    6ba6:	2064      	movs	r0, #100	; 0x64
    6ba8:	47b8      	blx	r7
		if (ams_read_status==STATUS_OK)
    6baa:	464b      	mov	r3, r9
    6bac:	2b00      	cmp	r3, #0
    6bae:	d1b2      	bne.n	6b16 <main+0x1ea>
		delay_ms(500);
    6bb0:	20fa      	movs	r0, #250	; 0xfa
    6bb2:	0040      	lsls	r0, r0, #1
    6bb4:	4b53      	ldr	r3, [pc, #332]	; (6d04 <main+0x3d8>)
    6bb6:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    6bb8:	4b65      	ldr	r3, [pc, #404]	; (6d50 <main+0x424>)
    6bba:	6819      	ldr	r1, [r3, #0]
    6bbc:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    6bbe:	b25b      	sxtb	r3, r3
    6bc0:	2b00      	cmp	r3, #0
    6bc2:	dbfb      	blt.n	6bbc <main+0x290>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    6bc4:	7b0b      	ldrb	r3, [r1, #12]
    6bc6:	2202      	movs	r2, #2
    6bc8:	4313      	orrs	r3, r2
    6bca:	730b      	strb	r3, [r1, #12]
    6bcc:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    6bce:	b25b      	sxtb	r3, r3
    6bd0:	2b00      	cmp	r3, #0
    6bd2:	dbfb      	blt.n	6bcc <main+0x2a0>
    6bd4:	e7a5      	b.n	6b22 <main+0x1f6>
	sprintf(telemetry_buffer, json_data_template, temp/1000, hum/1000, voc, co2, gas);
    6bd6:	4c5f      	ldr	r4, [pc, #380]	; (6d54 <main+0x428>)
    6bd8:	21fa      	movs	r1, #250	; 0xfa
    6bda:	0089      	lsls	r1, r1, #2
    6bdc:	982a      	ldr	r0, [sp, #168]	; 0xa8
    6bde:	47a0      	blx	r4
    6be0:	0005      	movs	r5, r0
    6be2:	21fa      	movs	r1, #250	; 0xfa
    6be4:	0089      	lsls	r1, r1, #2
    6be6:	982b      	ldr	r0, [sp, #172]	; 0xac
    6be8:	47a0      	blx	r4
    6bea:	0002      	movs	r2, r0
		{
			sendData(topic, temp, rh, voc, co2, gas);
    6bec:	4643      	mov	r3, r8
    6bee:	b21b      	sxth	r3, r3
    6bf0:	9302      	str	r3, [sp, #8]
	sprintf(telemetry_buffer, json_data_template, temp/1000, hum/1000, voc, co2, gas);
    6bf2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    6bf4:	9301      	str	r3, [sp, #4]
    6bf6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    6bf8:	9300      	str	r3, [sp, #0]
    6bfa:	002b      	movs	r3, r5
    6bfc:	4956      	ldr	r1, [pc, #344]	; (6d58 <main+0x42c>)
    6bfe:	a805      	add	r0, sp, #20
    6c00:	4c2b      	ldr	r4, [pc, #172]	; (6cb0 <main+0x384>)
    6c02:	47a0      	blx	r4
	mqtt_publish(&mqtt_inst, topic, telemetry_buffer, sizeof(telemetry_buffer), 0, 0); //Maximum message length should be shorter than 128 bytes
    6c04:	2300      	movs	r3, #0
    6c06:	9301      	str	r3, [sp, #4]
    6c08:	9300      	str	r3, [sp, #0]
    6c0a:	3340      	adds	r3, #64	; 0x40
    6c0c:	aa05      	add	r2, sp, #20
    6c0e:	a915      	add	r1, sp, #84	; 0x54
    6c10:	4835      	ldr	r0, [pc, #212]	; (6ce8 <main+0x3bc>)
    6c12:	4c52      	ldr	r4, [pc, #328]	; (6d5c <main+0x430>)
    6c14:	47a0      	blx	r4
	printf("Data sent of bytes %d \r\n",sizeof(telemetry_buffer));
    6c16:	2140      	movs	r1, #64	; 0x40
    6c18:	4851      	ldr	r0, [pc, #324]	; (6d60 <main+0x434>)
    6c1a:	4b22      	ldr	r3, [pc, #136]	; (6ca4 <main+0x378>)
    6c1c:	4798      	blx	r3
			//printSystemTime();
			tick_counter_reset_timer(TICK_COUNTER_INTERVAL);
    6c1e:	4851      	ldr	r0, [pc, #324]	; (6d64 <main+0x438>)
    6c20:	4b51      	ldr	r3, [pc, #324]	; (6d68 <main+0x43c>)
    6c22:	4798      	blx	r3
		m2m_wifi_handle_events(NULL);
    6c24:	4b51      	ldr	r3, [pc, #324]	; (6d6c <main+0x440>)
    6c26:	469a      	mov	sl, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    6c28:	2401      	movs	r4, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    6c2a:	2504      	movs	r5, #4
    6c2c:	e79d      	b.n	6b6a <main+0x23e>
		printf("%s\r\n","SysTick configuration error");
    6c2e:	4950      	ldr	r1, [pc, #320]	; (6d70 <main+0x444>)
    6c30:	4850      	ldr	r0, [pc, #320]	; (6d74 <main+0x448>)
    6c32:	4b1c      	ldr	r3, [pc, #112]	; (6ca4 <main+0x378>)
    6c34:	4798      	blx	r3
    6c36:	e7fe      	b.n	6c36 <main+0x30a>
    6c38:	00005b49 	.word	0x00005b49
    6c3c:	00160002 	.word	0x00160002
    6c40:	00170002 	.word	0x00170002
    6c44:	20000164 	.word	0x20000164
    6c48:	20000450 	.word	0x20000450
    6c4c:	0000676d 	.word	0x0000676d
    6c50:	2000044c 	.word	0x2000044c
    6c54:	00006741 	.word	0x00006741
    6c58:	20000448 	.word	0x20000448
    6c5c:	42001400 	.word	0x42001400
    6c60:	00004e4d 	.word	0x00004e4d
    6c64:	20000080 	.word	0x20000080
    6c68:	00009aed 	.word	0x00009aed
    6c6c:	0000667d 	.word	0x0000667d
    6c70:	0000522d 	.word	0x0000522d
    6c74:	00004921 	.word	0x00004921
    6c78:	e000e100 	.word	0xe000e100
    6c7c:	0000bd44 	.word	0x0000bd44
    6c80:	00009ab5 	.word	0x00009ab5
    6c84:	000064e1 	.word	0x000064e1
    6c88:	200004b0 	.word	0x200004b0
    6c8c:	000064ed 	.word	0x000064ed
    6c90:	00006599 	.word	0x00006599
    6c94:	000011a9 	.word	0x000011a9
    6c98:	000068bd 	.word	0x000068bd
    6c9c:	20000040 	.word	0x20000040
    6ca0:	0000bdb0 	.word	0x0000bdb0
    6ca4:	00009999 	.word	0x00009999
    6ca8:	0000bfac 	.word	0x0000bfac
    6cac:	0000bdbc 	.word	0x0000bdbc
    6cb0:	00009c59 	.word	0x00009c59
    6cb4:	00009837 	.word	0x00009837
    6cb8:	000066a9 	.word	0x000066a9
    6cbc:	000020e1 	.word	0x000020e1
    6cc0:	0000bdc4 	.word	0x0000bdc4
    6cc4:	00003d0d 	.word	0x00003d0d
    6cc8:	00006691 	.word	0x00006691
    6ccc:	0000669d 	.word	0x0000669d
    6cd0:	00003d51 	.word	0x00003d51
    6cd4:	0000c084 	.word	0x0000c084
    6cd8:	0000c090 	.word	0x0000c090
    6cdc:	000024b1 	.word	0x000024b1
    6ce0:	00006e29 	.word	0x00006e29
    6ce4:	20000198 	.word	0x20000198
    6ce8:	20000218 	.word	0x20000218
    6cec:	00006e4d 	.word	0x00006e4d
    6cf0:	0000bdec 	.word	0x0000bdec
    6cf4:	00006785 	.word	0x00006785
    6cf8:	00006ed9 	.word	0x00006ed9
    6cfc:	0000be20 	.word	0x0000be20
    6d00:	00006435 	.word	0x00006435
    6d04:	00001129 	.word	0x00001129
    6d08:	0000be54 	.word	0x0000be54
    6d0c:	20000488 	.word	0x20000488
    6d10:	00001071 	.word	0x00001071
    6d14:	0000bd38 	.word	0x0000bd38
    6d18:	0000be64 	.word	0x0000be64
    6d1c:	00005905 	.word	0x00005905
    6d20:	40000400 	.word	0x40000400
    6d24:	00007b9d 	.word	0x00007b9d
    6d28:	00ffffff 	.word	0x00ffffff
    6d2c:	e000e010 	.word	0xe000e010
    6d30:	e000ed00 	.word	0xe000ed00
    6d34:	0000bd3c 	.word	0x0000bd3c
    6d38:	0000be74 	.word	0x0000be74
    6d3c:	0000bec8 	.word	0x0000bec8
    6d40:	00000115 	.word	0x00000115
    6d44:	00006621 	.word	0x00006621
    6d48:	00001059 	.word	0x00001059
    6d4c:	00000161 	.word	0x00000161
    6d50:	20000508 	.word	0x20000508
    6d54:	00007cb1 	.word	0x00007cb1
    6d58:	2000000c 	.word	0x2000000c
    6d5c:	00007301 	.word	0x00007301
    6d60:	0000bf18 	.word	0x0000bf18
    6d64:	00002710 	.word	0x00002710
    6d68:	0000012d 	.word	0x0000012d
    6d6c:	00002215 	.word	0x00002215
    6d70:	0000bf34 	.word	0x0000bf34
    6d74:	0000bf50 	.word	0x0000bf50

00006d78 <_hwerr_to_stderr>:
    6d78:	1c03      	adds	r3, r0, #0
    6d7a:	300e      	adds	r0, #14
    6d7c:	b500      	push	{lr}
    6d7e:	280e      	cmp	r0, #14
    6d80:	d819      	bhi.n	6db6 <_hwerr_to_stderr+0x3e>
    6d82:	f000 ff01 	bl	7b88 <__gnu_thumb1_case_uqi>
    6d86:	1416      	.short	0x1416
    6d88:	1b181012 	.word	0x1b181012
    6d8c:	180c0e18 	.word	0x180c0e18
    6d90:	1d0a0e0e 	.word	0x1d0a0e0e
    6d94:	08          	.byte	0x08
    6d95:	00          	.byte	0x00
    6d96:	2000      	movs	r0, #0
    6d98:	e014      	b.n	6dc4 <_hwerr_to_stderr+0x4c>
    6d9a:	2070      	movs	r0, #112	; 0x70
    6d9c:	e011      	b.n	6dc2 <_hwerr_to_stderr+0x4a>
    6d9e:	2016      	movs	r0, #22
    6da0:	e00f      	b.n	6dc2 <_hwerr_to_stderr+0x4a>
    6da2:	200c      	movs	r0, #12
    6da4:	e00d      	b.n	6dc2 <_hwerr_to_stderr+0x4a>
    6da6:	2079      	movs	r0, #121	; 0x79
    6da8:	e00b      	b.n	6dc2 <_hwerr_to_stderr+0x4a>
    6daa:	2068      	movs	r0, #104	; 0x68
    6dac:	e009      	b.n	6dc2 <_hwerr_to_stderr+0x4a>
    6dae:	200b      	movs	r0, #11
    6db0:	e007      	b.n	6dc2 <_hwerr_to_stderr+0x4a>
    6db2:	2010      	movs	r0, #16
    6db4:	e005      	b.n	6dc2 <_hwerr_to_stderr+0x4a>
    6db6:	2000      	movs	r0, #0
    6db8:	4283      	cmp	r3, r0
    6dba:	da03      	bge.n	6dc4 <_hwerr_to_stderr+0x4c>
    6dbc:	2005      	movs	r0, #5
    6dbe:	e000      	b.n	6dc2 <_hwerr_to_stderr+0x4a>
    6dc0:	2002      	movs	r0, #2
    6dc2:	4240      	negs	r0, r0
    6dc4:	bd00      	pop	{pc}
	...

00006dc8 <_mqtt_send_wait>:
    6dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6dca:	1c04      	adds	r4, r0, #0
    6dcc:	3443      	adds	r4, #67	; 0x43
    6dce:	7823      	ldrb	r3, [r4, #0]
    6dd0:	1c05      	adds	r5, r0, #0
    6dd2:	07d8      	lsls	r0, r3, #31
    6dd4:	d51c      	bpl.n	6e10 <_mqtt_send_wait+0x48>
    6dd6:	2604      	movs	r6, #4
    6dd8:	4333      	orrs	r3, r6
    6dda:	7023      	strb	r3, [r4, #0]
    6ddc:	2002      	movs	r0, #2
    6dde:	5628      	ldrsb	r0, [r5, r0]
    6de0:	b292      	uxth	r2, r2
    6de2:	2300      	movs	r3, #0
    6de4:	4f0c      	ldr	r7, [pc, #48]	; (6e18 <_mqtt_send_wait+0x50>)
    6de6:	47b8      	blx	r7
    6de8:	2800      	cmp	r0, #0
    6dea:	da05      	bge.n	6df8 <_mqtt_send_wait+0x30>
    6dec:	7823      	ldrb	r3, [r4, #0]
    6dee:	43b3      	bics	r3, r6
    6df0:	7023      	strb	r3, [r4, #0]
    6df2:	4b0a      	ldr	r3, [pc, #40]	; (6e1c <_mqtt_send_wait+0x54>)
    6df4:	4798      	blx	r3
    6df6:	e00d      	b.n	6e14 <_mqtt_send_wait+0x4c>
    6df8:	7822      	ldrb	r2, [r4, #0]
    6dfa:	2314      	movs	r3, #20
    6dfc:	4013      	ands	r3, r2
    6dfe:	2000      	movs	r0, #0
    6e00:	2b04      	cmp	r3, #4
    6e02:	d107      	bne.n	6e14 <_mqtt_send_wait+0x4c>
    6e04:	4b06      	ldr	r3, [pc, #24]	; (6e20 <_mqtt_send_wait+0x58>)
    6e06:	4798      	blx	r3
    6e08:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    6e0a:	4b06      	ldr	r3, [pc, #24]	; (6e24 <_mqtt_send_wait+0x5c>)
    6e0c:	4798      	blx	r3
    6e0e:	e7f3      	b.n	6df8 <_mqtt_send_wait+0x30>
    6e10:	2001      	movs	r0, #1
    6e12:	4240      	negs	r0, r0
    6e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e16:	46c0      	nop			; (mov r8, r8)
    6e18:	00003f79 	.word	0x00003f79
    6e1c:	00006d79 	.word	0x00006d79
    6e20:	00002215 	.word	0x00002215
    6e24:	00006621 	.word	0x00006621

00006e28 <mqtt_get_config_defaults>:
    6e28:	4b07      	ldr	r3, [pc, #28]	; (6e48 <mqtt_get_config_defaults+0x20>)
    6e2a:	2240      	movs	r2, #64	; 0x40
    6e2c:	8003      	strh	r3, [r0, #0]
    6e2e:	2396      	movs	r3, #150	; 0x96
    6e30:	009b      	lsls	r3, r3, #2
    6e32:	8103      	strh	r3, [r0, #8]
    6e34:	6102      	str	r2, [r0, #16]
    6e36:	2300      	movs	r3, #0
    6e38:	2220      	movs	r2, #32
    6e3a:	7083      	strb	r3, [r0, #2]
    6e3c:	6043      	str	r3, [r0, #4]
    6e3e:	60c3      	str	r3, [r0, #12]
    6e40:	6142      	str	r2, [r0, #20]
    6e42:	7603      	strb	r3, [r0, #24]
    6e44:	4770      	bx	lr
    6e46:	46c0      	nop			; (mov r8, r8)
    6e48:	0000075b 	.word	0x0000075b

00006e4c <mqtt_init>:
    6e4c:	b538      	push	{r3, r4, r5, lr}
    6e4e:	1c04      	adds	r4, r0, #0
    6e50:	1c0d      	adds	r5, r1, #0
    6e52:	2800      	cmp	r0, #0
    6e54:	d030      	beq.n	6eb8 <mqtt_init+0x6c>
    6e56:	2900      	cmp	r1, #0
    6e58:	d02e      	beq.n	6eb8 <mqtt_init+0x6c>
    6e5a:	690b      	ldr	r3, [r1, #16]
    6e5c:	2b00      	cmp	r3, #0
    6e5e:	d02b      	beq.n	6eb8 <mqtt_init+0x6c>
    6e60:	684b      	ldr	r3, [r1, #4]
    6e62:	2b00      	cmp	r3, #0
    6e64:	d028      	beq.n	6eb8 <mqtt_init+0x6c>
    6e66:	2100      	movs	r1, #0
    6e68:	2274      	movs	r2, #116	; 0x74
    6e6a:	4b16      	ldr	r3, [pc, #88]	; (6ec4 <mqtt_init+0x78>)
    6e6c:	4798      	blx	r3
    6e6e:	1c20      	adds	r0, r4, #0
    6e70:	4b15      	ldr	r3, [pc, #84]	; (6ec8 <mqtt_init+0x7c>)
    6e72:	3058      	adds	r0, #88	; 0x58
    6e74:	1c29      	adds	r1, r5, #0
    6e76:	221c      	movs	r2, #28
    6e78:	4798      	blx	r3
    6e7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    6e7c:	2b00      	cmp	r3, #0
    6e7e:	d10b      	bne.n	6e98 <mqtt_init+0x4c>
    6e80:	6928      	ldr	r0, [r5, #16]
    6e82:	4b12      	ldr	r3, [pc, #72]	; (6ecc <mqtt_init+0x80>)
    6e84:	4798      	blx	r3
    6e86:	6660      	str	r0, [r4, #100]	; 0x64
    6e88:	2800      	cmp	r0, #0
    6e8a:	d017      	beq.n	6ebc <mqtt_init+0x70>
    6e8c:	1c23      	adds	r3, r4, #0
    6e8e:	3343      	adds	r3, #67	; 0x43
    6e90:	781a      	ldrb	r2, [r3, #0]
    6e92:	2120      	movs	r1, #32
    6e94:	430a      	orrs	r2, r1
    6e96:	701a      	strb	r2, [r3, #0]
    6e98:	892a      	ldrh	r2, [r5, #8]
    6e9a:	23fa      	movs	r3, #250	; 0xfa
    6e9c:	005b      	lsls	r3, r3, #1
    6e9e:	4353      	muls	r3, r2
    6ea0:	6868      	ldr	r0, [r5, #4]
    6ea2:	490b      	ldr	r1, [pc, #44]	; (6ed0 <mqtt_init+0x84>)
    6ea4:	1c22      	adds	r2, r4, #0
    6ea6:	4d0b      	ldr	r5, [pc, #44]	; (6ed4 <mqtt_init+0x88>)
    6ea8:	47a8      	blx	r5
    6eaa:	1c03      	adds	r3, r0, #0
    6eac:	6520      	str	r0, [r4, #80]	; 0x50
    6eae:	2000      	movs	r0, #0
    6eb0:	4283      	cmp	r3, r0
    6eb2:	da05      	bge.n	6ec0 <mqtt_init+0x74>
    6eb4:	201c      	movs	r0, #28
    6eb6:	e002      	b.n	6ebe <mqtt_init+0x72>
    6eb8:	2016      	movs	r0, #22
    6eba:	e000      	b.n	6ebe <mqtt_init+0x72>
    6ebc:	200c      	movs	r0, #12
    6ebe:	4240      	negs	r0, r0
    6ec0:	bd38      	pop	{r3, r4, r5, pc}
    6ec2:	46c0      	nop			; (mov r8, r8)
    6ec4:	00009837 	.word	0x00009837
    6ec8:	00009801 	.word	0x00009801
    6ecc:	000097ed 	.word	0x000097ed
    6ed0:	00007655 	.word	0x00007655
    6ed4:	000065ad 	.word	0x000065ad

00006ed8 <mqtt_register_callback>:
    6ed8:	2800      	cmp	r0, #0
    6eda:	d002      	beq.n	6ee2 <mqtt_register_callback+0xa>
    6edc:	6541      	str	r1, [r0, #84]	; 0x54
    6ede:	2000      	movs	r0, #0
    6ee0:	e001      	b.n	6ee6 <mqtt_register_callback+0xe>
    6ee2:	2016      	movs	r0, #22
    6ee4:	4240      	negs	r0, r0
    6ee6:	4770      	bx	lr

00006ee8 <mqtt_socket_resolve_handler>:
    6ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
    6eea:	1c06      	adds	r6, r0, #0
    6eec:	b085      	sub	sp, #20
    6eee:	1c0f      	adds	r7, r1, #0
    6ef0:	2400      	movs	r4, #0
    6ef2:	4b0f      	ldr	r3, [pc, #60]	; (6f30 <mqtt_socket_resolve_handler+0x48>)
    6ef4:	58e5      	ldr	r5, [r4, r3]
    6ef6:	2d00      	cmp	r5, #0
    6ef8:	d015      	beq.n	6f26 <mqtt_socket_resolve_handler+0x3e>
    6efa:	1ce9      	adds	r1, r5, #3
    6efc:	1c30      	adds	r0, r6, #0
    6efe:	4b0d      	ldr	r3, [pc, #52]	; (6f34 <mqtt_socket_resolve_handler+0x4c>)
    6f00:	4798      	blx	r3
    6f02:	2800      	cmp	r0, #0
    6f04:	d10f      	bne.n	6f26 <mqtt_socket_resolve_handler+0x3e>
    6f06:	466a      	mov	r2, sp
    6f08:	2302      	movs	r3, #2
    6f0a:	8013      	strh	r3, [r2, #0]
    6f0c:	1c2b      	adds	r3, r5, #0
    6f0e:	3358      	adds	r3, #88	; 0x58
    6f10:	881b      	ldrh	r3, [r3, #0]
    6f12:	9701      	str	r7, [sp, #4]
    6f14:	ba5b      	rev16	r3, r3
    6f16:	8053      	strh	r3, [r2, #2]
    6f18:	2002      	movs	r0, #2
    6f1a:	5628      	ldrsb	r0, [r5, r0]
    6f1c:	4669      	mov	r1, sp
    6f1e:	2210      	movs	r2, #16
    6f20:	4b05      	ldr	r3, [pc, #20]	; (6f38 <mqtt_socket_resolve_handler+0x50>)
    6f22:	4798      	blx	r3
    6f24:	e002      	b.n	6f2c <mqtt_socket_resolve_handler+0x44>
    6f26:	3404      	adds	r4, #4
    6f28:	2c1c      	cmp	r4, #28
    6f2a:	d1e2      	bne.n	6ef2 <mqtt_socket_resolve_handler+0xa>
    6f2c:	b005      	add	sp, #20
    6f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6f30:	20000290 	.word	0x20000290
    6f34:	00009c9d 	.word	0x00009c9d
    6f38:	00003ee9 	.word	0x00003ee9

00006f3c <mqtt_connect>:
    6f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6f3e:	1c04      	adds	r4, r0, #0
    6f40:	b089      	sub	sp, #36	; 0x24
    6f42:	1c0d      	adds	r5, r1, #0
    6f44:	2800      	cmp	r0, #0
    6f46:	d051      	beq.n	6fec <mqtt_connect+0xb0>
    6f48:	2900      	cmp	r1, #0
    6f4a:	d04f      	beq.n	6fec <mqtt_connect+0xb0>
    6f4c:	1c08      	adds	r0, r1, #0
    6f4e:	4b39      	ldr	r3, [pc, #228]	; (7034 <mqtt_connect+0xf8>)
    6f50:	4798      	blx	r3
    6f52:	2840      	cmp	r0, #64	; 0x40
    6f54:	d84c      	bhi.n	6ff0 <mqtt_connect+0xb4>
    6f56:	1c21      	adds	r1, r4, #0
    6f58:	3143      	adds	r1, #67	; 0x43
    6f5a:	780b      	ldrb	r3, [r1, #0]
    6f5c:	9101      	str	r1, [sp, #4]
    6f5e:	07db      	lsls	r3, r3, #31
    6f60:	0fd9      	lsrs	r1, r3, #31
    6f62:	466a      	mov	r2, sp
    6f64:	b2ce      	uxtb	r6, r1
    6f66:	1ce0      	adds	r0, r4, #3
    6f68:	7211      	strb	r1, [r2, #8]
    6f6a:	2e00      	cmp	r6, #0
    6f6c:	d142      	bne.n	6ff4 <mqtt_connect+0xb8>
    6f6e:	2701      	movs	r7, #1
    6f70:	1c29      	adds	r1, r5, #0
    6f72:	4b31      	ldr	r3, [pc, #196]	; (7038 <mqtt_connect+0xfc>)
    6f74:	8027      	strh	r7, [r4, #0]
    6f76:	4798      	blx	r3
    6f78:	9a01      	ldr	r2, [sp, #4]
    6f7a:	2002      	movs	r0, #2
    6f7c:	7813      	ldrb	r3, [r2, #0]
    6f7e:	9901      	ldr	r1, [sp, #4]
    6f80:	43bb      	bics	r3, r7
    6f82:	4383      	bics	r3, r0
    6f84:	22e3      	movs	r2, #227	; 0xe3
    6f86:	4013      	ands	r3, r2
    6f88:	466a      	mov	r2, sp
    6f8a:	700b      	strb	r3, [r1, #0]
    6f8c:	7a12      	ldrb	r2, [r2, #8]
    6f8e:	1c23      	adds	r3, r4, #0
    6f90:	3348      	adds	r3, #72	; 0x48
    6f92:	6466      	str	r6, [r4, #68]	; 0x44
    6f94:	701a      	strb	r2, [r3, #0]
    6f96:	7c9a      	ldrb	r2, [r3, #18]
    6f98:	805e      	strh	r6, [r3, #2]
    6f9a:	1e53      	subs	r3, r2, #1
    6f9c:	419a      	sbcs	r2, r3
    6f9e:	b2d2      	uxtb	r2, r2
    6fa0:	1c39      	adds	r1, r7, #0
    6fa2:	4b26      	ldr	r3, [pc, #152]	; (703c <mqtt_connect+0x100>)
    6fa4:	4798      	blx	r3
    6fa6:	70a0      	strb	r0, [r4, #2]
    6fa8:	2800      	cmp	r0, #0
    6faa:	db25      	blt.n	6ff8 <mqtt_connect+0xbc>
    6fac:	4b24      	ldr	r3, [pc, #144]	; (7040 <mqtt_connect+0x104>)
    6fae:	0080      	lsls	r0, r0, #2
    6fb0:	50c4      	str	r4, [r0, r3]
    6fb2:	1c2b      	adds	r3, r5, #0
    6fb4:	781f      	ldrb	r7, [r3, #0]
    6fb6:	2f00      	cmp	r7, #0
    6fb8:	d026      	beq.n	7008 <mqtt_connect+0xcc>
    6fba:	2220      	movs	r2, #32
    6fbc:	1c39      	adds	r1, r7, #0
    6fbe:	4391      	bics	r1, r2
    6fc0:	1c0a      	adds	r2, r1, #0
    6fc2:	3a41      	subs	r2, #65	; 0x41
    6fc4:	b2d2      	uxtb	r2, r2
    6fc6:	3301      	adds	r3, #1
    6fc8:	2a05      	cmp	r2, #5
    6fca:	d90d      	bls.n	6fe8 <mqtt_connect+0xac>
    6fcc:	2f3a      	cmp	r7, #58	; 0x3a
    6fce:	d00b      	beq.n	6fe8 <mqtt_connect+0xac>
    6fd0:	2f2f      	cmp	r7, #47	; 0x2f
    6fd2:	d009      	beq.n	6fe8 <mqtt_connect+0xac>
    6fd4:	2f2e      	cmp	r7, #46	; 0x2e
    6fd6:	d102      	bne.n	6fde <mqtt_connect+0xa2>
    6fd8:	2e00      	cmp	r6, #0
    6fda:	d0eb      	beq.n	6fb4 <mqtt_connect+0x78>
    6fdc:	e00f      	b.n	6ffe <mqtt_connect+0xc2>
    6fde:	2230      	movs	r2, #48	; 0x30
    6fe0:	4017      	ands	r7, r2
    6fe2:	4297      	cmp	r7, r2
    6fe4:	d0e6      	beq.n	6fb4 <mqtt_connect+0x78>
    6fe6:	e00a      	b.n	6ffe <mqtt_connect+0xc2>
    6fe8:	2601      	movs	r6, #1
    6fea:	e7e3      	b.n	6fb4 <mqtt_connect+0x78>
    6fec:	2016      	movs	r0, #22
    6fee:	e004      	b.n	6ffa <mqtt_connect+0xbe>
    6ff0:	205b      	movs	r0, #91	; 0x5b
    6ff2:	e002      	b.n	6ffa <mqtt_connect+0xbe>
    6ff4:	2078      	movs	r0, #120	; 0x78
    6ff6:	e000      	b.n	6ffa <mqtt_connect+0xbe>
    6ff8:	201c      	movs	r0, #28
    6ffa:	4240      	negs	r0, r0
    6ffc:	e017      	b.n	702e <mqtt_connect+0xf2>
    6ffe:	1c28      	adds	r0, r5, #0
    7000:	4b10      	ldr	r3, [pc, #64]	; (7044 <mqtt_connect+0x108>)
    7002:	4798      	blx	r3
    7004:	2000      	movs	r0, #0
    7006:	e012      	b.n	702e <mqtt_connect+0xf2>
    7008:	466a      	mov	r2, sp
    700a:	2302      	movs	r3, #2
    700c:	8213      	strh	r3, [r2, #16]
    700e:	1c23      	adds	r3, r4, #0
    7010:	3358      	adds	r3, #88	; 0x58
    7012:	881b      	ldrh	r3, [r3, #0]
    7014:	1c28      	adds	r0, r5, #0
    7016:	ba5b      	rev16	r3, r3
    7018:	8253      	strh	r3, [r2, #18]
    701a:	4b0b      	ldr	r3, [pc, #44]	; (7048 <mqtt_connect+0x10c>)
    701c:	4798      	blx	r3
    701e:	9005      	str	r0, [sp, #20]
    7020:	2002      	movs	r0, #2
    7022:	5620      	ldrsb	r0, [r4, r0]
    7024:	a904      	add	r1, sp, #16
    7026:	2210      	movs	r2, #16
    7028:	4b08      	ldr	r3, [pc, #32]	; (704c <mqtt_connect+0x110>)
    702a:	4798      	blx	r3
    702c:	1c38      	adds	r0, r7, #0
    702e:	b009      	add	sp, #36	; 0x24
    7030:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7032:	46c0      	nop			; (mov r8, r8)
    7034:	00009cc1 	.word	0x00009cc1
    7038:	00009cb1 	.word	0x00009cb1
    703c:	00003d65 	.word	0x00003d65
    7040:	20000290 	.word	0x20000290
    7044:	000041ad 	.word	0x000041ad
    7048:	00004141 	.word	0x00004141
    704c:	00003ee9 	.word	0x00003ee9

00007050 <mqtt_connect_broker>:
    7050:	b5f0      	push	{r4, r5, r6, r7, lr}
    7052:	b095      	sub	sp, #84	; 0x54
    7054:	af02      	add	r7, sp, #8
    7056:	617b      	str	r3, [r7, #20]
    7058:	1c3b      	adds	r3, r7, #0
    705a:	3370      	adds	r3, #112	; 0x70
    705c:	781b      	ldrb	r3, [r3, #0]
    705e:	1c05      	adds	r5, r0, #0
    7060:	60fb      	str	r3, [r7, #12]
    7062:	1c3b      	adds	r3, r7, #0
    7064:	3374      	adds	r3, #116	; 0x74
    7066:	781b      	ldrb	r3, [r3, #0]
    7068:	6139      	str	r1, [r7, #16]
    706a:	61fa      	str	r2, [r7, #28]
    706c:	60bb      	str	r3, [r7, #8]
    706e:	2800      	cmp	r0, #0
    7070:	d101      	bne.n	7076 <mqtt_connect_broker+0x26>
    7072:	2016      	movs	r0, #22
    7074:	e129      	b.n	72ca <mqtt_connect_broker+0x27a>
    7076:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    7078:	4668      	mov	r0, sp
    707a:	3307      	adds	r3, #7
    707c:	08db      	lsrs	r3, r3, #3
    707e:	00db      	lsls	r3, r3, #3
    7080:	1ac0      	subs	r0, r0, r3
    7082:	4685      	mov	sp, r0
    7084:	ac02      	add	r4, sp, #8
    7086:	607c      	str	r4, [r7, #4]
    7088:	6e3c      	ldr	r4, [r7, #96]	; 0x60
    708a:	2c00      	cmp	r4, #0
    708c:	d0f1      	beq.n	7072 <mqtt_connect_broker+0x22>
    708e:	1c2b      	adds	r3, r5, #0
    7090:	3343      	adds	r3, #67	; 0x43
    7092:	781b      	ldrb	r3, [r3, #0]
    7094:	07d8      	lsls	r0, r3, #31
    7096:	d400      	bmi.n	709a <mqtt_connect_broker+0x4a>
    7098:	e112      	b.n	72c0 <mqtt_connect_broker+0x270>
    709a:	079a      	lsls	r2, r3, #30
    709c:	d500      	bpl.n	70a0 <mqtt_connect_broker+0x50>
    709e:	e111      	b.n	72c4 <mqtt_connect_broker+0x274>
    70a0:	071c      	lsls	r4, r3, #28
    70a2:	d40b      	bmi.n	70bc <mqtt_connect_broker+0x6c>
    70a4:	4e8b      	ldr	r6, [pc, #556]	; (72d4 <mqtt_connect_broker+0x284>)
    70a6:	6e38      	ldr	r0, [r7, #96]	; 0x60
    70a8:	47b0      	blx	r6
    70aa:	1c03      	adds	r3, r0, #0
    70ac:	61b8      	str	r0, [r7, #24]
    70ae:	69f8      	ldr	r0, [r7, #28]
    70b0:	330e      	adds	r3, #14
    70b2:	1c34      	adds	r4, r6, #0
    70b4:	2800      	cmp	r0, #0
    70b6:	d113      	bne.n	70e0 <mqtt_connect_broker+0x90>
    70b8:	1c1e      	adds	r6, r3, #0
    70ba:	e01d      	b.n	70f8 <mqtt_connect_broker+0xa8>
    70bc:	1c2b      	adds	r3, r5, #0
    70be:	3370      	adds	r3, #112	; 0x70
    70c0:	781b      	ldrb	r3, [r3, #0]
    70c2:	2b00      	cmp	r3, #0
    70c4:	d000      	beq.n	70c8 <mqtt_connect_broker+0x78>
    70c6:	e0ff      	b.n	72c8 <mqtt_connect_broker+0x278>
    70c8:	1c2b      	adds	r3, r5, #0
    70ca:	3343      	adds	r3, #67	; 0x43
    70cc:	781b      	ldrb	r3, [r3, #0]
    70ce:	071a      	lsls	r2, r3, #28
    70d0:	d5e8      	bpl.n	70a4 <mqtt_connect_broker+0x54>
    70d2:	4b81      	ldr	r3, [pc, #516]	; (72d8 <mqtt_connect_broker+0x288>)
    70d4:	2000      	movs	r0, #0
    70d6:	4798      	blx	r3
    70d8:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    70da:	4b80      	ldr	r3, [pc, #512]	; (72dc <mqtt_connect_broker+0x28c>)
    70dc:	4798      	blx	r3
    70de:	e7f3      	b.n	70c8 <mqtt_connect_broker+0x78>
    70e0:	69f8      	ldr	r0, [r7, #28]
    70e2:	47b0      	blx	r6
    70e4:	69be      	ldr	r6, [r7, #24]
    70e6:	697b      	ldr	r3, [r7, #20]
    70e8:	3610      	adds	r6, #16
    70ea:	1836      	adds	r6, r6, r0
    70ec:	2b00      	cmp	r3, #0
    70ee:	d003      	beq.n	70f8 <mqtt_connect_broker+0xa8>
    70f0:	1c18      	adds	r0, r3, #0
    70f2:	47a0      	blx	r4
    70f4:	3602      	adds	r6, #2
    70f6:	1836      	adds	r6, r6, r0
    70f8:	6e78      	ldr	r0, [r7, #100]	; 0x64
    70fa:	2800      	cmp	r0, #0
    70fc:	d007      	beq.n	710e <mqtt_connect_broker+0xbe>
    70fe:	47a0      	blx	r4
    7100:	3602      	adds	r6, #2
    7102:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    7104:	1830      	adds	r0, r6, r0
    7106:	1906      	adds	r6, r0, r4
    7108:	2c00      	cmp	r4, #0
    710a:	d100      	bne.n	710e <mqtt_connect_broker+0xbe>
    710c:	1c06      	adds	r6, r0, #0
    710e:	69fc      	ldr	r4, [r7, #28]
    7110:	2c00      	cmp	r4, #0
    7112:	d006      	beq.n	7122 <mqtt_connect_broker+0xd2>
    7114:	24c0      	movs	r4, #192	; 0xc0
    7116:	61bc      	str	r4, [r7, #24]
    7118:	697c      	ldr	r4, [r7, #20]
    711a:	2c00      	cmp	r4, #0
    711c:	d103      	bne.n	7126 <mqtt_connect_broker+0xd6>
    711e:	2480      	movs	r4, #128	; 0x80
    7120:	e000      	b.n	7124 <mqtt_connect_broker+0xd4>
    7122:	69fc      	ldr	r4, [r7, #28]
    7124:	61bc      	str	r4, [r7, #24]
    7126:	6e7c      	ldr	r4, [r7, #100]	; 0x64
    7128:	2c00      	cmp	r4, #0
    712a:	d00f      	beq.n	714c <mqtt_connect_broker+0xfc>
    712c:	68bc      	ldr	r4, [r7, #8]
    712e:	2c00      	cmp	r4, #0
    7130:	d003      	beq.n	713a <mqtt_connect_broker+0xea>
    7132:	69bc      	ldr	r4, [r7, #24]
    7134:	2320      	movs	r3, #32
    7136:	431c      	orrs	r4, r3
    7138:	61bc      	str	r4, [r7, #24]
    713a:	68fc      	ldr	r4, [r7, #12]
    713c:	2303      	movs	r3, #3
    713e:	4023      	ands	r3, r4
    7140:	00db      	lsls	r3, r3, #3
    7142:	69bc      	ldr	r4, [r7, #24]
    7144:	2204      	movs	r2, #4
    7146:	4313      	orrs	r3, r2
    7148:	431c      	orrs	r4, r3
    714a:	61bc      	str	r4, [r7, #24]
    714c:	693c      	ldr	r4, [r7, #16]
    714e:	2c00      	cmp	r4, #0
    7150:	d003      	beq.n	715a <mqtt_connect_broker+0x10a>
    7152:	69bc      	ldr	r4, [r7, #24]
    7154:	2302      	movs	r3, #2
    7156:	431c      	orrs	r4, r3
    7158:	61bc      	str	r4, [r7, #24]
    715a:	1c2b      	adds	r3, r5, #0
    715c:	3343      	adds	r3, #67	; 0x43
    715e:	781a      	ldrb	r2, [r3, #0]
    7160:	2108      	movs	r1, #8
    7162:	430a      	orrs	r2, r1
    7164:	701a      	strb	r2, [r3, #0]
    7166:	1c38      	adds	r0, r7, #0
    7168:	9500      	str	r5, [sp, #0]
    716a:	3020      	adds	r0, #32
    716c:	6879      	ldr	r1, [r7, #4]
    716e:	4b5c      	ldr	r3, [pc, #368]	; (72e0 <mqtt_connect_broker+0x290>)
    7170:	6eea      	ldr	r2, [r5, #108]	; 0x6c
    7172:	4c5c      	ldr	r4, [pc, #368]	; (72e4 <mqtt_connect_broker+0x294>)
    7174:	47a0      	blx	r4
    7176:	1c38      	adds	r0, r7, #0
    7178:	3020      	adds	r0, #32
    717a:	2110      	movs	r1, #16
    717c:	4b5a      	ldr	r3, [pc, #360]	; (72e8 <mqtt_connect_broker+0x298>)
    717e:	4798      	blx	r3
    7180:	2e80      	cmp	r6, #128	; 0x80
    7182:	dd09      	ble.n	7198 <mqtt_connect_broker+0x148>
    7184:	2180      	movs	r1, #128	; 0x80
    7186:	4249      	negs	r1, r1
    7188:	4331      	orrs	r1, r6
    718a:	1c38      	adds	r0, r7, #0
    718c:	b249      	sxtb	r1, r1
    718e:	3020      	adds	r0, #32
    7190:	4c55      	ldr	r4, [pc, #340]	; (72e8 <mqtt_connect_broker+0x298>)
    7192:	47a0      	blx	r4
    7194:	11f6      	asrs	r6, r6, #7
    7196:	e7f3      	b.n	7180 <mqtt_connect_broker+0x130>
    7198:	4b54      	ldr	r3, [pc, #336]	; (72ec <mqtt_connect_broker+0x29c>)
    719a:	401e      	ands	r6, r3
    719c:	d504      	bpl.n	71a8 <mqtt_connect_broker+0x158>
    719e:	2380      	movs	r3, #128	; 0x80
    71a0:	3e01      	subs	r6, #1
    71a2:	425b      	negs	r3, r3
    71a4:	431e      	orrs	r6, r3
    71a6:	3601      	adds	r6, #1
    71a8:	1c38      	adds	r0, r7, #0
    71aa:	b271      	sxtb	r1, r6
    71ac:	3020      	adds	r0, #32
    71ae:	4c4e      	ldr	r4, [pc, #312]	; (72e8 <mqtt_connect_broker+0x298>)
    71b0:	47a0      	blx	r4
    71b2:	1c38      	adds	r0, r7, #0
    71b4:	4c4e      	ldr	r4, [pc, #312]	; (72f0 <mqtt_connect_broker+0x2a0>)
    71b6:	3020      	adds	r0, #32
    71b8:	2106      	movs	r1, #6
    71ba:	47a0      	blx	r4
    71bc:	1c38      	adds	r0, r7, #0
    71be:	4b4d      	ldr	r3, [pc, #308]	; (72f4 <mqtt_connect_broker+0x2a4>)
    71c0:	3020      	adds	r0, #32
    71c2:	494d      	ldr	r1, [pc, #308]	; (72f8 <mqtt_connect_broker+0x2a8>)
    71c4:	2206      	movs	r2, #6
    71c6:	4798      	blx	r3
    71c8:	1c38      	adds	r0, r7, #0
    71ca:	3020      	adds	r0, #32
    71cc:	2103      	movs	r1, #3
    71ce:	4a46      	ldr	r2, [pc, #280]	; (72e8 <mqtt_connect_broker+0x298>)
    71d0:	4790      	blx	r2
    71d2:	69bb      	ldr	r3, [r7, #24]
    71d4:	1c38      	adds	r0, r7, #0
    71d6:	4a44      	ldr	r2, [pc, #272]	; (72e8 <mqtt_connect_broker+0x298>)
    71d8:	b259      	sxtb	r1, r3
    71da:	3020      	adds	r0, #32
    71dc:	4790      	blx	r2
    71de:	1c2b      	adds	r3, r5, #0
    71e0:	3360      	adds	r3, #96	; 0x60
    71e2:	2000      	movs	r0, #0
    71e4:	5e19      	ldrsh	r1, [r3, r0]
    71e6:	1c38      	adds	r0, r7, #0
    71e8:	3020      	adds	r0, #32
    71ea:	47a0      	blx	r4
    71ec:	4e39      	ldr	r6, [pc, #228]	; (72d4 <mqtt_connect_broker+0x284>)
    71ee:	6e38      	ldr	r0, [r7, #96]	; 0x60
    71f0:	47b0      	blx	r6
    71f2:	b201      	sxth	r1, r0
    71f4:	1c38      	adds	r0, r7, #0
    71f6:	3020      	adds	r0, #32
    71f8:	47a0      	blx	r4
    71fa:	6e38      	ldr	r0, [r7, #96]	; 0x60
    71fc:	47b0      	blx	r6
    71fe:	1c02      	adds	r2, r0, #0
    7200:	1c38      	adds	r0, r7, #0
    7202:	3020      	adds	r0, #32
    7204:	6e39      	ldr	r1, [r7, #96]	; 0x60
    7206:	4b3b      	ldr	r3, [pc, #236]	; (72f4 <mqtt_connect_broker+0x2a4>)
    7208:	4798      	blx	r3
    720a:	6e78      	ldr	r0, [r7, #100]	; 0x64
    720c:	2800      	cmp	r0, #0
    720e:	d015      	beq.n	723c <mqtt_connect_broker+0x1ec>
    7210:	47b0      	blx	r6
    7212:	b201      	sxth	r1, r0
    7214:	1c38      	adds	r0, r7, #0
    7216:	3020      	adds	r0, #32
    7218:	47a0      	blx	r4
    721a:	6e78      	ldr	r0, [r7, #100]	; 0x64
    721c:	47b0      	blx	r6
    721e:	1c02      	adds	r2, r0, #0
    7220:	1c38      	adds	r0, r7, #0
    7222:	4c34      	ldr	r4, [pc, #208]	; (72f4 <mqtt_connect_broker+0x2a4>)
    7224:	3020      	adds	r0, #32
    7226:	6e79      	ldr	r1, [r7, #100]	; 0x64
    7228:	47a0      	blx	r4
    722a:	6ebc      	ldr	r4, [r7, #104]	; 0x68
    722c:	2c00      	cmp	r4, #0
    722e:	d005      	beq.n	723c <mqtt_connect_broker+0x1ec>
    7230:	1c38      	adds	r0, r7, #0
    7232:	1c21      	adds	r1, r4, #0
    7234:	3020      	adds	r0, #32
    7236:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    7238:	4c2e      	ldr	r4, [pc, #184]	; (72f4 <mqtt_connect_broker+0x2a4>)
    723a:	47a0      	blx	r4
    723c:	69fc      	ldr	r4, [r7, #28]
    723e:	2c00      	cmp	r4, #0
    7240:	d01f      	beq.n	7282 <mqtt_connect_broker+0x232>
    7242:	4e24      	ldr	r6, [pc, #144]	; (72d4 <mqtt_connect_broker+0x284>)
    7244:	1c20      	adds	r0, r4, #0
    7246:	47b0      	blx	r6
    7248:	b201      	sxth	r1, r0
    724a:	1c38      	adds	r0, r7, #0
    724c:	3020      	adds	r0, #32
    724e:	4c28      	ldr	r4, [pc, #160]	; (72f0 <mqtt_connect_broker+0x2a0>)
    7250:	47a0      	blx	r4
    7252:	69f8      	ldr	r0, [r7, #28]
    7254:	47b0      	blx	r6
    7256:	1c02      	adds	r2, r0, #0
    7258:	1c38      	adds	r0, r7, #0
    725a:	3020      	adds	r0, #32
    725c:	69f9      	ldr	r1, [r7, #28]
    725e:	4c25      	ldr	r4, [pc, #148]	; (72f4 <mqtt_connect_broker+0x2a4>)
    7260:	47a0      	blx	r4
    7262:	6978      	ldr	r0, [r7, #20]
    7264:	2800      	cmp	r0, #0
    7266:	d00c      	beq.n	7282 <mqtt_connect_broker+0x232>
    7268:	47b0      	blx	r6
    726a:	b201      	sxth	r1, r0
    726c:	1c38      	adds	r0, r7, #0
    726e:	4a20      	ldr	r2, [pc, #128]	; (72f0 <mqtt_connect_broker+0x2a0>)
    7270:	3020      	adds	r0, #32
    7272:	4790      	blx	r2
    7274:	6978      	ldr	r0, [r7, #20]
    7276:	47b0      	blx	r6
    7278:	1c02      	adds	r2, r0, #0
    727a:	1c38      	adds	r0, r7, #0
    727c:	3020      	adds	r0, #32
    727e:	6979      	ldr	r1, [r7, #20]
    7280:	47a0      	blx	r4
    7282:	1c38      	adds	r0, r7, #0
    7284:	1c2c      	adds	r4, r5, #0
    7286:	3020      	adds	r0, #32
    7288:	4b1c      	ldr	r3, [pc, #112]	; (72fc <mqtt_connect_broker+0x2ac>)
    728a:	3443      	adds	r4, #67	; 0x43
    728c:	4798      	blx	r3
    728e:	7821      	ldrb	r1, [r4, #0]
    7290:	0789      	lsls	r1, r1, #30
    7292:	0fc9      	lsrs	r1, r1, #31
    7294:	2901      	cmp	r1, #1
    7296:	d10b      	bne.n	72b0 <mqtt_connect_broker+0x260>
    7298:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    729a:	2a00      	cmp	r2, #0
    729c:	d108      	bne.n	72b0 <mqtt_connect_broker+0x260>
    729e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    72a0:	2b00      	cmp	r3, #0
    72a2:	d005      	beq.n	72b0 <mqtt_connect_broker+0x260>
    72a4:	2034      	movs	r0, #52	; 0x34
    72a6:	55c2      	strb	r2, [r0, r7]
    72a8:	1c3a      	adds	r2, r7, #0
    72aa:	1c28      	adds	r0, r5, #0
    72ac:	3234      	adds	r2, #52	; 0x34
    72ae:	4798      	blx	r3
    72b0:	7823      	ldrb	r3, [r4, #0]
    72b2:	2202      	movs	r2, #2
    72b4:	4313      	orrs	r3, r2
    72b6:	2208      	movs	r2, #8
    72b8:	4393      	bics	r3, r2
    72ba:	7023      	strb	r3, [r4, #0]
    72bc:	2000      	movs	r0, #0
    72be:	e005      	b.n	72cc <mqtt_connect_broker+0x27c>
    72c0:	2080      	movs	r0, #128	; 0x80
    72c2:	e002      	b.n	72ca <mqtt_connect_broker+0x27a>
    72c4:	2078      	movs	r0, #120	; 0x78
    72c6:	e000      	b.n	72ca <mqtt_connect_broker+0x27a>
    72c8:	200b      	movs	r0, #11
    72ca:	4240      	negs	r0, r0
    72cc:	46bd      	mov	sp, r7
    72ce:	b013      	add	sp, #76	; 0x4c
    72d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    72d2:	46c0      	nop			; (mov r8, r8)
    72d4:	00009cc1 	.word	0x00009cc1
    72d8:	00002215 	.word	0x00002215
    72dc:	00006621 	.word	0x00006621
    72e0:	00006dc9 	.word	0x00006dc9
    72e4:	00006441 	.word	0x00006441
    72e8:	0000646d 	.word	0x0000646d
    72ec:	8000007f 	.word	0x8000007f
    72f0:	00006495 	.word	0x00006495
    72f4:	000064ad 	.word	0x000064ad
    72f8:	0000c0bc 	.word	0x0000c0bc
    72fc:	00006451 	.word	0x00006451

00007300 <mqtt_publish>:
    7300:	b5f0      	push	{r4, r5, r6, r7, lr}
    7302:	b093      	sub	sp, #76	; 0x4c
    7304:	af02      	add	r7, sp, #8
    7306:	60fb      	str	r3, [r7, #12]
    7308:	1c3b      	adds	r3, r7, #0
    730a:	3358      	adds	r3, #88	; 0x58
    730c:	781b      	ldrb	r3, [r3, #0]
    730e:	1c04      	adds	r4, r0, #0
    7310:	613b      	str	r3, [r7, #16]
    7312:	1c3b      	adds	r3, r7, #0
    7314:	335c      	adds	r3, #92	; 0x5c
    7316:	781b      	ldrb	r3, [r3, #0]
    7318:	6179      	str	r1, [r7, #20]
    731a:	60ba      	str	r2, [r7, #8]
    731c:	607b      	str	r3, [r7, #4]
    731e:	2800      	cmp	r0, #0
    7320:	d101      	bne.n	7326 <mqtt_publish+0x26>
    7322:	2516      	movs	r5, #22
    7324:	e0a7      	b.n	7476 <mqtt_publish+0x176>
    7326:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    7328:	466a      	mov	r2, sp
    732a:	3307      	adds	r3, #7
    732c:	08db      	lsrs	r3, r3, #3
    732e:	00db      	lsls	r3, r3, #3
    7330:	1ad2      	subs	r2, r2, r3
    7332:	697b      	ldr	r3, [r7, #20]
    7334:	4695      	mov	sp, r2
    7336:	ae02      	add	r6, sp, #8
    7338:	2b00      	cmp	r3, #0
    733a:	d0f2      	beq.n	7322 <mqtt_publish+0x22>
    733c:	693a      	ldr	r2, [r7, #16]
    733e:	2a02      	cmp	r2, #2
    7340:	d8ef      	bhi.n	7322 <mqtt_publish+0x22>
    7342:	1c05      	adds	r5, r0, #0
    7344:	3543      	adds	r5, #67	; 0x43
    7346:	782b      	ldrb	r3, [r5, #0]
    7348:	079a      	lsls	r2, r3, #30
    734a:	d400      	bmi.n	734e <mqtt_publish+0x4e>
    734c:	e090      	b.n	7470 <mqtt_publish+0x170>
    734e:	071a      	lsls	r2, r3, #28
    7350:	d40a      	bmi.n	7368 <mqtt_publish+0x68>
    7352:	4b4b      	ldr	r3, [pc, #300]	; (7480 <mqtt_publish+0x180>)
    7354:	6978      	ldr	r0, [r7, #20]
    7356:	4798      	blx	r3
    7358:	68fd      	ldr	r5, [r7, #12]
    735a:	693b      	ldr	r3, [r7, #16]
    735c:	3502      	adds	r5, #2
    735e:	182d      	adds	r5, r5, r0
    7360:	2b00      	cmp	r3, #0
    7362:	d011      	beq.n	7388 <mqtt_publish+0x88>
    7364:	3502      	adds	r5, #2
    7366:	e00f      	b.n	7388 <mqtt_publish+0x88>
    7368:	1c03      	adds	r3, r0, #0
    736a:	3370      	adds	r3, #112	; 0x70
    736c:	781b      	ldrb	r3, [r3, #0]
    736e:	2b00      	cmp	r3, #0
    7370:	d000      	beq.n	7374 <mqtt_publish+0x74>
    7372:	e07f      	b.n	7474 <mqtt_publish+0x174>
    7374:	782b      	ldrb	r3, [r5, #0]
    7376:	071a      	lsls	r2, r3, #28
    7378:	d5eb      	bpl.n	7352 <mqtt_publish+0x52>
    737a:	4b42      	ldr	r3, [pc, #264]	; (7484 <mqtt_publish+0x184>)
    737c:	2000      	movs	r0, #0
    737e:	4798      	blx	r3
    7380:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    7382:	4b41      	ldr	r3, [pc, #260]	; (7488 <mqtt_publish+0x188>)
    7384:	4798      	blx	r3
    7386:	e7f5      	b.n	7374 <mqtt_publish+0x74>
    7388:	1c23      	adds	r3, r4, #0
    738a:	3343      	adds	r3, #67	; 0x43
    738c:	781a      	ldrb	r2, [r3, #0]
    738e:	2108      	movs	r1, #8
    7390:	430a      	orrs	r2, r1
    7392:	701a      	strb	r2, [r3, #0]
    7394:	1c38      	adds	r0, r7, #0
    7396:	9400      	str	r4, [sp, #0]
    7398:	1c31      	adds	r1, r6, #0
    739a:	302c      	adds	r0, #44	; 0x2c
    739c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    739e:	4b3b      	ldr	r3, [pc, #236]	; (748c <mqtt_publish+0x18c>)
    73a0:	4e3b      	ldr	r6, [pc, #236]	; (7490 <mqtt_publish+0x190>)
    73a2:	47b0      	blx	r6
    73a4:	687b      	ldr	r3, [r7, #4]
    73a6:	2101      	movs	r1, #1
    73a8:	4019      	ands	r1, r3
    73aa:	2330      	movs	r3, #48	; 0x30
    73ac:	4319      	orrs	r1, r3
    73ae:	693b      	ldr	r3, [r7, #16]
    73b0:	1c38      	adds	r0, r7, #0
    73b2:	005a      	lsls	r2, r3, #1
    73b4:	2306      	movs	r3, #6
    73b6:	4013      	ands	r3, r2
    73b8:	4319      	orrs	r1, r3
    73ba:	302c      	adds	r0, #44	; 0x2c
    73bc:	4b35      	ldr	r3, [pc, #212]	; (7494 <mqtt_publish+0x194>)
    73be:	4798      	blx	r3
    73c0:	4b34      	ldr	r3, [pc, #208]	; (7494 <mqtt_publish+0x194>)
    73c2:	2d80      	cmp	r5, #128	; 0x80
    73c4:	dd08      	ble.n	73d8 <mqtt_publish+0xd8>
    73c6:	2180      	movs	r1, #128	; 0x80
    73c8:	4249      	negs	r1, r1
    73ca:	4329      	orrs	r1, r5
    73cc:	1c38      	adds	r0, r7, #0
    73ce:	b249      	sxtb	r1, r1
    73d0:	302c      	adds	r0, #44	; 0x2c
    73d2:	4798      	blx	r3
    73d4:	11ed      	asrs	r5, r5, #7
    73d6:	e7f3      	b.n	73c0 <mqtt_publish+0xc0>
    73d8:	4a2f      	ldr	r2, [pc, #188]	; (7498 <mqtt_publish+0x198>)
    73da:	4015      	ands	r5, r2
    73dc:	d504      	bpl.n	73e8 <mqtt_publish+0xe8>
    73de:	2280      	movs	r2, #128	; 0x80
    73e0:	3d01      	subs	r5, #1
    73e2:	4252      	negs	r2, r2
    73e4:	4315      	orrs	r5, r2
    73e6:	3501      	adds	r5, #1
    73e8:	1c38      	adds	r0, r7, #0
    73ea:	b269      	sxtb	r1, r5
    73ec:	302c      	adds	r0, #44	; 0x2c
    73ee:	4798      	blx	r3
    73f0:	4e23      	ldr	r6, [pc, #140]	; (7480 <mqtt_publish+0x180>)
    73f2:	6978      	ldr	r0, [r7, #20]
    73f4:	47b0      	blx	r6
    73f6:	b201      	sxth	r1, r0
    73f8:	1c38      	adds	r0, r7, #0
    73fa:	302c      	adds	r0, #44	; 0x2c
    73fc:	4d27      	ldr	r5, [pc, #156]	; (749c <mqtt_publish+0x19c>)
    73fe:	47a8      	blx	r5
    7400:	6978      	ldr	r0, [r7, #20]
    7402:	47b0      	blx	r6
    7404:	1c02      	adds	r2, r0, #0
    7406:	1c38      	adds	r0, r7, #0
    7408:	302c      	adds	r0, #44	; 0x2c
    740a:	6979      	ldr	r1, [r7, #20]
    740c:	4e24      	ldr	r6, [pc, #144]	; (74a0 <mqtt_publish+0x1a0>)
    740e:	47b0      	blx	r6
    7410:	693a      	ldr	r2, [r7, #16]
    7412:	2a00      	cmp	r2, #0
    7414:	d006      	beq.n	7424 <mqtt_publish+0x124>
    7416:	8821      	ldrh	r1, [r4, #0]
    7418:	1c38      	adds	r0, r7, #0
    741a:	1c4b      	adds	r3, r1, #1
    741c:	8023      	strh	r3, [r4, #0]
    741e:	b209      	sxth	r1, r1
    7420:	302c      	adds	r0, #44	; 0x2c
    7422:	47a8      	blx	r5
    7424:	8823      	ldrh	r3, [r4, #0]
    7426:	2b00      	cmp	r3, #0
    7428:	d101      	bne.n	742e <mqtt_publish+0x12e>
    742a:	2301      	movs	r3, #1
    742c:	8023      	strh	r3, [r4, #0]
    742e:	68bb      	ldr	r3, [r7, #8]
    7430:	2b00      	cmp	r3, #0
    7432:	d006      	beq.n	7442 <mqtt_publish+0x142>
    7434:	68fa      	ldr	r2, [r7, #12]
    7436:	2a00      	cmp	r2, #0
    7438:	d003      	beq.n	7442 <mqtt_publish+0x142>
    743a:	1c38      	adds	r0, r7, #0
    743c:	302c      	adds	r0, #44	; 0x2c
    743e:	1c19      	adds	r1, r3, #0
    7440:	47b0      	blx	r6
    7442:	1c38      	adds	r0, r7, #0
    7444:	4b17      	ldr	r3, [pc, #92]	; (74a4 <mqtt_publish+0x1a4>)
    7446:	302c      	adds	r0, #44	; 0x2c
    7448:	4798      	blx	r3
    744a:	1c23      	adds	r3, r4, #0
    744c:	3343      	adds	r3, #67	; 0x43
    744e:	781a      	ldrb	r2, [r3, #0]
    7450:	2108      	movs	r1, #8
    7452:	438a      	bics	r2, r1
    7454:	701a      	strb	r2, [r3, #0]
    7456:	693b      	ldr	r3, [r7, #16]
    7458:	2500      	movs	r5, #0
    745a:	42ab      	cmp	r3, r5
    745c:	d10c      	bne.n	7478 <mqtt_publish+0x178>
    745e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7460:	42ab      	cmp	r3, r5
    7462:	d009      	beq.n	7478 <mqtt_publish+0x178>
    7464:	1c3a      	adds	r2, r7, #0
    7466:	1c20      	adds	r0, r4, #0
    7468:	2102      	movs	r1, #2
    746a:	3218      	adds	r2, #24
    746c:	4798      	blx	r3
    746e:	e003      	b.n	7478 <mqtt_publish+0x178>
    7470:	2580      	movs	r5, #128	; 0x80
    7472:	e000      	b.n	7476 <mqtt_publish+0x176>
    7474:	250b      	movs	r5, #11
    7476:	426d      	negs	r5, r5
    7478:	1c28      	adds	r0, r5, #0
    747a:	46bd      	mov	sp, r7
    747c:	b011      	add	sp, #68	; 0x44
    747e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7480:	00009cc1 	.word	0x00009cc1
    7484:	00002215 	.word	0x00002215
    7488:	00006621 	.word	0x00006621
    748c:	00006dc9 	.word	0x00006dc9
    7490:	00006441 	.word	0x00006441
    7494:	0000646d 	.word	0x0000646d
    7498:	8000007f 	.word	0x8000007f
    749c:	00006495 	.word	0x00006495
    74a0:	000064ad 	.word	0x000064ad
    74a4:	00006451 	.word	0x00006451

000074a8 <mqtt_subscribe>:
    74a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    74aa:	b08d      	sub	sp, #52	; 0x34
    74ac:	af02      	add	r7, sp, #8
    74ae:	1c04      	adds	r4, r0, #0
    74b0:	60b9      	str	r1, [r7, #8]
    74b2:	607a      	str	r2, [r7, #4]
    74b4:	d101      	bne.n	74ba <mqtt_subscribe+0x12>
    74b6:	2016      	movs	r0, #22
    74b8:	e086      	b.n	75c8 <mqtt_subscribe+0x120>
    74ba:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    74bc:	466a      	mov	r2, sp
    74be:	3307      	adds	r3, #7
    74c0:	08db      	lsrs	r3, r3, #3
    74c2:	00db      	lsls	r3, r3, #3
    74c4:	1ad2      	subs	r2, r2, r3
    74c6:	4695      	mov	sp, r2
    74c8:	ad02      	add	r5, sp, #8
    74ca:	603d      	str	r5, [r7, #0]
    74cc:	68bd      	ldr	r5, [r7, #8]
    74ce:	2d00      	cmp	r5, #0
    74d0:	d0f1      	beq.n	74b6 <mqtt_subscribe+0xe>
    74d2:	687d      	ldr	r5, [r7, #4]
    74d4:	2d02      	cmp	r5, #2
    74d6:	d8ee      	bhi.n	74b6 <mqtt_subscribe+0xe>
    74d8:	1c05      	adds	r5, r0, #0
    74da:	3543      	adds	r5, #67	; 0x43
    74dc:	782b      	ldrb	r3, [r5, #0]
    74de:	079a      	lsls	r2, r3, #30
    74e0:	d56f      	bpl.n	75c2 <mqtt_subscribe+0x11a>
    74e2:	071a      	lsls	r2, r3, #28
    74e4:	d41a      	bmi.n	751c <mqtt_subscribe+0x74>
    74e6:	68b8      	ldr	r0, [r7, #8]
    74e8:	4d39      	ldr	r5, [pc, #228]	; (75d0 <mqtt_subscribe+0x128>)
    74ea:	47a8      	blx	r5
    74ec:	1c25      	adds	r5, r4, #0
    74ee:	3543      	adds	r5, #67	; 0x43
    74f0:	782b      	ldrb	r3, [r5, #0]
    74f2:	2208      	movs	r2, #8
    74f4:	4313      	orrs	r3, r2
    74f6:	702b      	strb	r3, [r5, #0]
    74f8:	60fd      	str	r5, [r7, #12]
    74fa:	1d46      	adds	r6, r0, #5
    74fc:	9400      	str	r4, [sp, #0]
    74fe:	1c38      	adds	r0, r7, #0
    7500:	3014      	adds	r0, #20
    7502:	6839      	ldr	r1, [r7, #0]
    7504:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    7506:	4b33      	ldr	r3, [pc, #204]	; (75d4 <mqtt_subscribe+0x12c>)
    7508:	4d33      	ldr	r5, [pc, #204]	; (75d8 <mqtt_subscribe+0x130>)
    750a:	47a8      	blx	r5
    750c:	1c38      	adds	r0, r7, #0
    750e:	217e      	movs	r1, #126	; 0x7e
    7510:	3014      	adds	r0, #20
    7512:	4249      	negs	r1, r1
    7514:	4b31      	ldr	r3, [pc, #196]	; (75dc <mqtt_subscribe+0x134>)
    7516:	4798      	blx	r3
    7518:	4d2d      	ldr	r5, [pc, #180]	; (75d0 <mqtt_subscribe+0x128>)
    751a:	e00e      	b.n	753a <mqtt_subscribe+0x92>
    751c:	1c03      	adds	r3, r0, #0
    751e:	3370      	adds	r3, #112	; 0x70
    7520:	781b      	ldrb	r3, [r3, #0]
    7522:	2b00      	cmp	r3, #0
    7524:	d14f      	bne.n	75c6 <mqtt_subscribe+0x11e>
    7526:	782b      	ldrb	r3, [r5, #0]
    7528:	071a      	lsls	r2, r3, #28
    752a:	d5dc      	bpl.n	74e6 <mqtt_subscribe+0x3e>
    752c:	4b2c      	ldr	r3, [pc, #176]	; (75e0 <mqtt_subscribe+0x138>)
    752e:	2000      	movs	r0, #0
    7530:	4798      	blx	r3
    7532:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    7534:	4b2b      	ldr	r3, [pc, #172]	; (75e4 <mqtt_subscribe+0x13c>)
    7536:	4798      	blx	r3
    7538:	e7f5      	b.n	7526 <mqtt_subscribe+0x7e>
    753a:	4b28      	ldr	r3, [pc, #160]	; (75dc <mqtt_subscribe+0x134>)
    753c:	2e80      	cmp	r6, #128	; 0x80
    753e:	dd08      	ble.n	7552 <mqtt_subscribe+0xaa>
    7540:	2180      	movs	r1, #128	; 0x80
    7542:	4249      	negs	r1, r1
    7544:	4331      	orrs	r1, r6
    7546:	1c38      	adds	r0, r7, #0
    7548:	b249      	sxtb	r1, r1
    754a:	3014      	adds	r0, #20
    754c:	4798      	blx	r3
    754e:	11f6      	asrs	r6, r6, #7
    7550:	e7f3      	b.n	753a <mqtt_subscribe+0x92>
    7552:	4925      	ldr	r1, [pc, #148]	; (75e8 <mqtt_subscribe+0x140>)
    7554:	4031      	ands	r1, r6
    7556:	d504      	bpl.n	7562 <mqtt_subscribe+0xba>
    7558:	2280      	movs	r2, #128	; 0x80
    755a:	3901      	subs	r1, #1
    755c:	4252      	negs	r2, r2
    755e:	4311      	orrs	r1, r2
    7560:	3101      	adds	r1, #1
    7562:	1c38      	adds	r0, r7, #0
    7564:	b249      	sxtb	r1, r1
    7566:	3014      	adds	r0, #20
    7568:	4798      	blx	r3
    756a:	8821      	ldrh	r1, [r4, #0]
    756c:	1c38      	adds	r0, r7, #0
    756e:	1c4b      	adds	r3, r1, #1
    7570:	8023      	strh	r3, [r4, #0]
    7572:	b209      	sxth	r1, r1
    7574:	3014      	adds	r0, #20
    7576:	4e1d      	ldr	r6, [pc, #116]	; (75ec <mqtt_subscribe+0x144>)
    7578:	47b0      	blx	r6
    757a:	8823      	ldrh	r3, [r4, #0]
    757c:	2b00      	cmp	r3, #0
    757e:	d101      	bne.n	7584 <mqtt_subscribe+0xdc>
    7580:	2301      	movs	r3, #1
    7582:	8023      	strh	r3, [r4, #0]
    7584:	68b8      	ldr	r0, [r7, #8]
    7586:	47a8      	blx	r5
    7588:	b201      	sxth	r1, r0
    758a:	1c38      	adds	r0, r7, #0
    758c:	3014      	adds	r0, #20
    758e:	47b0      	blx	r6
    7590:	68b8      	ldr	r0, [r7, #8]
    7592:	47a8      	blx	r5
    7594:	1c02      	adds	r2, r0, #0
    7596:	1c38      	adds	r0, r7, #0
    7598:	3014      	adds	r0, #20
    759a:	68b9      	ldr	r1, [r7, #8]
    759c:	4b14      	ldr	r3, [pc, #80]	; (75f0 <mqtt_subscribe+0x148>)
    759e:	4798      	blx	r3
    75a0:	687d      	ldr	r5, [r7, #4]
    75a2:	1c38      	adds	r0, r7, #0
    75a4:	b269      	sxtb	r1, r5
    75a6:	3014      	adds	r0, #20
    75a8:	4b0c      	ldr	r3, [pc, #48]	; (75dc <mqtt_subscribe+0x134>)
    75aa:	4798      	blx	r3
    75ac:	1c38      	adds	r0, r7, #0
    75ae:	3014      	adds	r0, #20
    75b0:	4b10      	ldr	r3, [pc, #64]	; (75f4 <mqtt_subscribe+0x14c>)
    75b2:	4798      	blx	r3
    75b4:	68fd      	ldr	r5, [r7, #12]
    75b6:	2208      	movs	r2, #8
    75b8:	782b      	ldrb	r3, [r5, #0]
    75ba:	2000      	movs	r0, #0
    75bc:	4393      	bics	r3, r2
    75be:	702b      	strb	r3, [r5, #0]
    75c0:	e003      	b.n	75ca <mqtt_subscribe+0x122>
    75c2:	2080      	movs	r0, #128	; 0x80
    75c4:	e000      	b.n	75c8 <mqtt_subscribe+0x120>
    75c6:	200b      	movs	r0, #11
    75c8:	4240      	negs	r0, r0
    75ca:	46bd      	mov	sp, r7
    75cc:	b00b      	add	sp, #44	; 0x2c
    75ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    75d0:	00009cc1 	.word	0x00009cc1
    75d4:	00006dc9 	.word	0x00006dc9
    75d8:	00006441 	.word	0x00006441
    75dc:	0000646d 	.word	0x0000646d
    75e0:	00002215 	.word	0x00002215
    75e4:	00006621 	.word	0x00006621
    75e8:	8000007f 	.word	0x8000007f
    75ec:	00006495 	.word	0x00006495
    75f0:	000064ad 	.word	0x000064ad
    75f4:	00006451 	.word	0x00006451

000075f8 <_mqtt_ping>:
    75f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    75fa:	23c0      	movs	r3, #192	; 0xc0
    75fc:	a901      	add	r1, sp, #4
    75fe:	2500      	movs	r5, #0
    7600:	700b      	strb	r3, [r1, #0]
    7602:	704d      	strb	r5, [r1, #1]
    7604:	42a8      	cmp	r0, r5
    7606:	d019      	beq.n	763c <_mqtt_ping+0x44>
    7608:	1c04      	adds	r4, r0, #0
    760a:	3443      	adds	r4, #67	; 0x43
    760c:	7823      	ldrb	r3, [r4, #0]
    760e:	079a      	lsls	r2, r3, #30
    7610:	d516      	bpl.n	7640 <_mqtt_ping+0x48>
    7612:	071a      	lsls	r2, r3, #28
    7614:	d416      	bmi.n	7644 <_mqtt_ping+0x4c>
    7616:	2608      	movs	r6, #8
    7618:	4333      	orrs	r3, r6
    761a:	7023      	strb	r3, [r4, #0]
    761c:	7880      	ldrb	r0, [r0, #2]
    761e:	1c2b      	adds	r3, r5, #0
    7620:	b240      	sxtb	r0, r0
    7622:	2202      	movs	r2, #2
    7624:	4f09      	ldr	r7, [pc, #36]	; (764c <_mqtt_ping+0x54>)
    7626:	47b8      	blx	r7
    7628:	1c2b      	adds	r3, r5, #0
    762a:	42a8      	cmp	r0, r5
    762c:	da0c      	bge.n	7648 <_mqtt_ping+0x50>
    762e:	7823      	ldrb	r3, [r4, #0]
    7630:	43b3      	bics	r3, r6
    7632:	7023      	strb	r3, [r4, #0]
    7634:	4b06      	ldr	r3, [pc, #24]	; (7650 <_mqtt_ping+0x58>)
    7636:	4798      	blx	r3
    7638:	1c03      	adds	r3, r0, #0
    763a:	e005      	b.n	7648 <_mqtt_ping+0x50>
    763c:	2316      	movs	r3, #22
    763e:	e002      	b.n	7646 <_mqtt_ping+0x4e>
    7640:	2380      	movs	r3, #128	; 0x80
    7642:	e000      	b.n	7646 <_mqtt_ping+0x4e>
    7644:	230b      	movs	r3, #11
    7646:	425b      	negs	r3, r3
    7648:	1c18      	adds	r0, r3, #0
    764a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    764c:	00003f79 	.word	0x00003f79
    7650:	00006d79 	.word	0x00006d79

00007654 <mqtt_timer_callback>:
    7654:	b570      	push	{r4, r5, r6, lr}
    7656:	1c05      	adds	r5, r0, #0
    7658:	b086      	sub	sp, #24
    765a:	1c0e      	adds	r6, r1, #0
    765c:	1c14      	adds	r4, r2, #0
    765e:	2800      	cmp	r0, #0
    7660:	d012      	beq.n	7688 <mqtt_timer_callback+0x34>
    7662:	2a00      	cmp	r2, #0
    7664:	d010      	beq.n	7688 <mqtt_timer_callback+0x34>
    7666:	1c10      	adds	r0, r2, #0
    7668:	4b08      	ldr	r3, [pc, #32]	; (768c <mqtt_timer_callback+0x38>)
    766a:	4798      	blx	r3
    766c:	2800      	cmp	r0, #0
    766e:	da04      	bge.n	767a <mqtt_timer_callback+0x26>
    7670:	1c28      	adds	r0, r5, #0
    7672:	1c31      	adds	r1, r6, #0
    7674:	2200      	movs	r2, #0
    7676:	4b06      	ldr	r3, [pc, #24]	; (7690 <mqtt_timer_callback+0x3c>)
    7678:	e005      	b.n	7686 <mqtt_timer_callback+0x32>
    767a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    767c:	2b00      	cmp	r3, #0
    767e:	d003      	beq.n	7688 <mqtt_timer_callback+0x34>
    7680:	1c20      	adds	r0, r4, #0
    7682:	2107      	movs	r1, #7
    7684:	aa01      	add	r2, sp, #4
    7686:	4798      	blx	r3
    7688:	b006      	add	sp, #24
    768a:	bd70      	pop	{r4, r5, r6, pc}
    768c:	000075f9 	.word	0x000075f9
    7690:	000065e5 	.word	0x000065e5

00007694 <_mqtt_puback>:
    7694:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7696:	2302      	movs	r3, #2
    7698:	ac01      	add	r4, sp, #4
    769a:	2700      	movs	r7, #0
    769c:	7063      	strb	r3, [r4, #1]
    769e:	42b8      	cmp	r0, r7
    76a0:	d01e      	beq.n	76e0 <_mqtt_puback+0x4c>
    76a2:	1c05      	adds	r5, r0, #0
    76a4:	3543      	adds	r5, #67	; 0x43
    76a6:	782b      	ldrb	r3, [r5, #0]
    76a8:	079e      	lsls	r6, r3, #30
    76aa:	d51b      	bpl.n	76e4 <_mqtt_puback+0x50>
    76ac:	071e      	lsls	r6, r3, #28
    76ae:	d41b      	bmi.n	76e8 <_mqtt_puback+0x54>
    76b0:	2608      	movs	r6, #8
    76b2:	4333      	orrs	r3, r6
    76b4:	702b      	strb	r3, [r5, #0]
    76b6:	7880      	ldrb	r0, [r0, #2]
    76b8:	7021      	strb	r1, [r4, #0]
    76ba:	0a11      	lsrs	r1, r2, #8
    76bc:	70a1      	strb	r1, [r4, #2]
    76be:	70e2      	strb	r2, [r4, #3]
    76c0:	1c21      	adds	r1, r4, #0
    76c2:	1c3b      	adds	r3, r7, #0
    76c4:	b240      	sxtb	r0, r0
    76c6:	2204      	movs	r2, #4
    76c8:	4c09      	ldr	r4, [pc, #36]	; (76f0 <_mqtt_puback+0x5c>)
    76ca:	47a0      	blx	r4
    76cc:	1c3b      	adds	r3, r7, #0
    76ce:	42b8      	cmp	r0, r7
    76d0:	da0c      	bge.n	76ec <_mqtt_puback+0x58>
    76d2:	782b      	ldrb	r3, [r5, #0]
    76d4:	43b3      	bics	r3, r6
    76d6:	702b      	strb	r3, [r5, #0]
    76d8:	4b06      	ldr	r3, [pc, #24]	; (76f4 <_mqtt_puback+0x60>)
    76da:	4798      	blx	r3
    76dc:	1c03      	adds	r3, r0, #0
    76de:	e005      	b.n	76ec <_mqtt_puback+0x58>
    76e0:	2316      	movs	r3, #22
    76e2:	e002      	b.n	76ea <_mqtt_puback+0x56>
    76e4:	2380      	movs	r3, #128	; 0x80
    76e6:	e000      	b.n	76ea <_mqtt_puback+0x56>
    76e8:	230b      	movs	r3, #11
    76ea:	425b      	negs	r3, r3
    76ec:	1c18      	adds	r0, r3, #0
    76ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    76f0:	00003f79 	.word	0x00003f79
    76f4:	00006d79 	.word	0x00006d79

000076f8 <mqtt_clear_conn>:
    76f8:	b530      	push	{r4, r5, lr}
    76fa:	1c04      	adds	r4, r0, #0
    76fc:	b087      	sub	sp, #28
    76fe:	2800      	cmp	r0, #0
    7700:	d01c      	beq.n	773c <mqtt_clear_conn+0x44>
    7702:	2002      	movs	r0, #2
    7704:	4b0e      	ldr	r3, [pc, #56]	; (7740 <mqtt_clear_conn+0x48>)
    7706:	5620      	ldrsb	r0, [r4, r0]
    7708:	4798      	blx	r3
    770a:	1c23      	adds	r3, r4, #0
    770c:	3343      	adds	r3, #67	; 0x43
    770e:	781a      	ldrb	r2, [r3, #0]
    7710:	21fc      	movs	r1, #252	; 0xfc
    7712:	0795      	lsls	r5, r2, #30
    7714:	400a      	ands	r2, r1
    7716:	701a      	strb	r2, [r3, #0]
    7718:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    771a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    771c:	9301      	str	r3, [sp, #4]
    771e:	2300      	movs	r3, #0
    7720:	64e3      	str	r3, [r4, #76]	; 0x4c
    7722:	6d21      	ldr	r1, [r4, #80]	; 0x50
    7724:	4b07      	ldr	r3, [pc, #28]	; (7744 <mqtt_clear_conn+0x4c>)
    7726:	4798      	blx	r3
    7728:	6d63      	ldr	r3, [r4, #84]	; 0x54
    772a:	0fed      	lsrs	r5, r5, #31
    772c:	2b00      	cmp	r3, #0
    772e:	d005      	beq.n	773c <mqtt_clear_conn+0x44>
    7730:	2d00      	cmp	r5, #0
    7732:	d003      	beq.n	773c <mqtt_clear_conn+0x44>
    7734:	1c20      	adds	r0, r4, #0
    7736:	2105      	movs	r1, #5
    7738:	aa01      	add	r2, sp, #4
    773a:	4798      	blx	r3
    773c:	b007      	add	sp, #28
    773e:	bd30      	pop	{r4, r5, pc}
    7740:	000040a5 	.word	0x000040a5
    7744:	00006611 	.word	0x00006611

00007748 <mqtt_disconnect>:
    7748:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    774a:	23e0      	movs	r3, #224	; 0xe0
    774c:	ae01      	add	r6, sp, #4
    774e:	2700      	movs	r7, #0
    7750:	1c05      	adds	r5, r0, #0
    7752:	7033      	strb	r3, [r6, #0]
    7754:	7077      	strb	r7, [r6, #1]
    7756:	42b8      	cmp	r0, r7
    7758:	d036      	beq.n	77c8 <mqtt_disconnect+0x80>
    775a:	1c04      	adds	r4, r0, #0
    775c:	3443      	adds	r4, #67	; 0x43
    775e:	7823      	ldrb	r3, [r4, #0]
    7760:	079a      	lsls	r2, r3, #30
    7762:	d533      	bpl.n	77cc <mqtt_disconnect+0x84>
    7764:	42b9      	cmp	r1, r7
    7766:	d12b      	bne.n	77c0 <mqtt_disconnect+0x78>
    7768:	071a      	lsls	r2, r3, #28
    776a:	d414      	bmi.n	7796 <mqtt_disconnect+0x4e>
    776c:	7823      	ldrb	r3, [r4, #0]
    776e:	2210      	movs	r2, #16
    7770:	4313      	orrs	r3, r2
    7772:	2708      	movs	r7, #8
    7774:	433b      	orrs	r3, r7
    7776:	7023      	strb	r3, [r4, #0]
    7778:	2002      	movs	r0, #2
    777a:	5628      	ldrsb	r0, [r5, r0]
    777c:	1c31      	adds	r1, r6, #0
    777e:	2202      	movs	r2, #2
    7780:	2300      	movs	r3, #0
    7782:	4d15      	ldr	r5, [pc, #84]	; (77d8 <mqtt_disconnect+0x90>)
    7784:	47a8      	blx	r5
    7786:	2800      	cmp	r0, #0
    7788:	da14      	bge.n	77b4 <mqtt_disconnect+0x6c>
    778a:	7823      	ldrb	r3, [r4, #0]
    778c:	43bb      	bics	r3, r7
    778e:	7023      	strb	r3, [r4, #0]
    7790:	4b12      	ldr	r3, [pc, #72]	; (77dc <mqtt_disconnect+0x94>)
    7792:	4798      	blx	r3
    7794:	e01e      	b.n	77d4 <mqtt_disconnect+0x8c>
    7796:	1c03      	adds	r3, r0, #0
    7798:	3370      	adds	r3, #112	; 0x70
    779a:	781b      	ldrb	r3, [r3, #0]
    779c:	2b00      	cmp	r3, #0
    779e:	d117      	bne.n	77d0 <mqtt_disconnect+0x88>
    77a0:	7823      	ldrb	r3, [r4, #0]
    77a2:	071a      	lsls	r2, r3, #28
    77a4:	d5e2      	bpl.n	776c <mqtt_disconnect+0x24>
    77a6:	4b0e      	ldr	r3, [pc, #56]	; (77e0 <mqtt_disconnect+0x98>)
    77a8:	2000      	movs	r0, #0
    77aa:	4798      	blx	r3
    77ac:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    77ae:	4b0d      	ldr	r3, [pc, #52]	; (77e4 <mqtt_disconnect+0x9c>)
    77b0:	4798      	blx	r3
    77b2:	e7f5      	b.n	77a0 <mqtt_disconnect+0x58>
    77b4:	7823      	ldrb	r3, [r4, #0]
    77b6:	2202      	movs	r2, #2
    77b8:	4393      	bics	r3, r2
    77ba:	7023      	strb	r3, [r4, #0]
    77bc:	2000      	movs	r0, #0
    77be:	e009      	b.n	77d4 <mqtt_disconnect+0x8c>
    77c0:	4b09      	ldr	r3, [pc, #36]	; (77e8 <mqtt_disconnect+0xa0>)
    77c2:	4798      	blx	r3
    77c4:	1c38      	adds	r0, r7, #0
    77c6:	e005      	b.n	77d4 <mqtt_disconnect+0x8c>
    77c8:	2016      	movs	r0, #22
    77ca:	e002      	b.n	77d2 <mqtt_disconnect+0x8a>
    77cc:	2080      	movs	r0, #128	; 0x80
    77ce:	e000      	b.n	77d2 <mqtt_disconnect+0x8a>
    77d0:	200b      	movs	r0, #11
    77d2:	4240      	negs	r0, r0
    77d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    77d6:	46c0      	nop			; (mov r8, r8)
    77d8:	00003f79 	.word	0x00003f79
    77dc:	00006d79 	.word	0x00006d79
    77e0:	00002215 	.word	0x00002215
    77e4:	00006621 	.word	0x00006621
    77e8:	000076f9 	.word	0x000076f9

000077ec <_mqtt_recv_handler>:
    77ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    77ee:	1c04      	adds	r4, r0, #0
    77f0:	6e40      	ldr	r0, [r0, #100]	; 0x64
    77f2:	230f      	movs	r3, #15
    77f4:	7802      	ldrb	r2, [r0, #0]
    77f6:	b087      	sub	sp, #28
    77f8:	1c15      	adds	r5, r2, #0
    77fa:	439d      	bics	r5, r3
    77fc:	2d50      	cmp	r5, #80	; 0x50
    77fe:	d100      	bne.n	7802 <_mqtt_recv_handler+0x16>
    7800:	e098      	b.n	7934 <_mqtt_recv_handler+0x148>
    7802:	d808      	bhi.n	7816 <_mqtt_recv_handler+0x2a>
    7804:	2d30      	cmp	r5, #48	; 0x30
    7806:	d03f      	beq.n	7888 <_mqtt_recv_handler+0x9c>
    7808:	2d40      	cmp	r5, #64	; 0x40
    780a:	d100      	bne.n	780e <_mqtt_recv_handler+0x22>
    780c:	e0b3      	b.n	7976 <_mqtt_recv_handler+0x18a>
    780e:	2d20      	cmp	r5, #32
    7810:	d000      	beq.n	7814 <_mqtt_recv_handler+0x28>
    7812:	e0c3      	b.n	799c <_mqtt_recv_handler+0x1b0>
    7814:	e00e      	b.n	7834 <_mqtt_recv_handler+0x48>
    7816:	2d70      	cmp	r5, #112	; 0x70
    7818:	d100      	bne.n	781c <_mqtt_recv_handler+0x30>
    781a:	e0ac      	b.n	7976 <_mqtt_recv_handler+0x18a>
    781c:	d803      	bhi.n	7826 <_mqtt_recv_handler+0x3a>
    781e:	2d60      	cmp	r5, #96	; 0x60
    7820:	d100      	bne.n	7824 <_mqtt_recv_handler+0x38>
    7822:	e096      	b.n	7952 <_mqtt_recv_handler+0x166>
    7824:	e0ba      	b.n	799c <_mqtt_recv_handler+0x1b0>
    7826:	2d90      	cmp	r5, #144	; 0x90
    7828:	d100      	bne.n	782c <_mqtt_recv_handler+0x40>
    782a:	e0aa      	b.n	7982 <_mqtt_recv_handler+0x196>
    782c:	2db0      	cmp	r5, #176	; 0xb0
    782e:	d100      	bne.n	7832 <_mqtt_recv_handler+0x46>
    7830:	e0ad      	b.n	798e <_mqtt_recv_handler+0x1a2>
    7832:	e0b3      	b.n	799c <_mqtt_recv_handler+0x1b0>
    7834:	aa01      	add	r2, sp, #4
    7836:	2303      	movs	r3, #3
    7838:	2901      	cmp	r1, #1
    783a:	d900      	bls.n	783e <_mqtt_recv_handler+0x52>
    783c:	78c3      	ldrb	r3, [r0, #3]
    783e:	7013      	strb	r3, [r2, #0]
    7840:	7813      	ldrb	r3, [r2, #0]
    7842:	2b00      	cmp	r3, #0
    7844:	d00d      	beq.n	7862 <_mqtt_recv_handler+0x76>
    7846:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7848:	2b00      	cmp	r3, #0
    784a:	d002      	beq.n	7852 <_mqtt_recv_handler+0x66>
    784c:	1c20      	adds	r0, r4, #0
    784e:	2101      	movs	r1, #1
    7850:	4798      	blx	r3
    7852:	236f      	movs	r3, #111	; 0x6f
    7854:	425b      	negs	r3, r3
    7856:	64e3      	str	r3, [r4, #76]	; 0x4c
    7858:	1c20      	adds	r0, r4, #0
    785a:	2100      	movs	r1, #0
    785c:	4b50      	ldr	r3, [pc, #320]	; (79a0 <_mqtt_recv_handler+0x1b4>)
    785e:	4798      	blx	r3
    7860:	e09c      	b.n	799c <_mqtt_recv_handler+0x1b0>
    7862:	1c23      	adds	r3, r4, #0
    7864:	3343      	adds	r3, #67	; 0x43
    7866:	7819      	ldrb	r1, [r3, #0]
    7868:	0789      	lsls	r1, r1, #30
    786a:	0fc9      	lsrs	r1, r1, #31
    786c:	d105      	bne.n	787a <_mqtt_recv_handler+0x8e>
    786e:	781a      	ldrb	r2, [r3, #0]
    7870:	64e1      	str	r1, [r4, #76]	; 0x4c
    7872:	2102      	movs	r1, #2
    7874:	430a      	orrs	r2, r1
    7876:	701a      	strb	r2, [r3, #0]
    7878:	e090      	b.n	799c <_mqtt_recv_handler+0x1b0>
    787a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    787c:	2b00      	cmp	r3, #0
    787e:	d100      	bne.n	7882 <_mqtt_recv_handler+0x96>
    7880:	e08c      	b.n	799c <_mqtt_recv_handler+0x1b0>
    7882:	1c20      	adds	r0, r4, #0
    7884:	2101      	movs	r1, #1
    7886:	e088      	b.n	799a <_mqtt_recv_handler+0x1ae>
    7888:	ad01      	add	r5, sp, #4
    788a:	0713      	lsls	r3, r2, #28
    788c:	7c2a      	ldrb	r2, [r5, #16]
    788e:	0fdb      	lsrs	r3, r3, #31
    7890:	2604      	movs	r6, #4
    7892:	009b      	lsls	r3, r3, #2
    7894:	43b2      	bics	r2, r6
    7896:	431a      	orrs	r2, r3
    7898:	742a      	strb	r2, [r5, #16]
    789a:	7807      	ldrb	r7, [r0, #0]
    789c:	2303      	movs	r3, #3
    789e:	b2d2      	uxtb	r2, r2
    78a0:	087f      	lsrs	r7, r7, #1
    78a2:	439a      	bics	r2, r3
    78a4:	401f      	ands	r7, r3
    78a6:	1c13      	adds	r3, r2, #0
    78a8:	433b      	orrs	r3, r7
    78aa:	742b      	strb	r3, [r5, #16]
    78ac:	1c43      	adds	r3, r0, #1
    78ae:	7818      	ldrb	r0, [r3, #0]
    78b0:	1c5a      	adds	r2, r3, #1
    78b2:	287f      	cmp	r0, #127	; 0x7f
    78b4:	d901      	bls.n	78ba <_mqtt_recv_handler+0xce>
    78b6:	1c13      	adds	r3, r2, #0
    78b8:	e7f9      	b.n	78ae <_mqtt_recv_handler+0xc2>
    78ba:	7858      	ldrb	r0, [r3, #1]
    78bc:	789e      	ldrb	r6, [r3, #2]
    78be:	0200      	lsls	r0, r0, #8
    78c0:	4330      	orrs	r0, r6
    78c2:	3303      	adds	r3, #3
    78c4:	2600      	movs	r6, #0
    78c6:	6068      	str	r0, [r5, #4]
    78c8:	9301      	str	r3, [sp, #4]
    78ca:	1818      	adds	r0, r3, r0
    78cc:	42b7      	cmp	r7, r6
    78ce:	d004      	beq.n	78da <_mqtt_recv_handler+0xee>
    78d0:	7806      	ldrb	r6, [r0, #0]
    78d2:	7843      	ldrb	r3, [r0, #1]
    78d4:	0236      	lsls	r6, r6, #8
    78d6:	431e      	orrs	r6, r3
    78d8:	3002      	adds	r0, #2
    78da:	1851      	adds	r1, r2, r1
    78dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
    78de:	60a8      	str	r0, [r5, #8]
    78e0:	1a08      	subs	r0, r1, r0
    78e2:	60e8      	str	r0, [r5, #12]
    78e4:	2b00      	cmp	r3, #0
    78e6:	d003      	beq.n	78f0 <_mqtt_recv_handler+0x104>
    78e8:	1c20      	adds	r0, r4, #0
    78ea:	2106      	movs	r1, #6
    78ec:	1c2a      	adds	r2, r5, #0
    78ee:	4798      	blx	r3
    78f0:	7c2b      	ldrb	r3, [r5, #16]
    78f2:	079b      	lsls	r3, r3, #30
    78f4:	0f9b      	lsrs	r3, r3, #30
    78f6:	2b01      	cmp	r3, #1
    78f8:	d10b      	bne.n	7912 <_mqtt_recv_handler+0x126>
    78fa:	b2b6      	uxth	r6, r6
    78fc:	1c20      	adds	r0, r4, #0
    78fe:	2140      	movs	r1, #64	; 0x40
    7900:	1c32      	adds	r2, r6, #0
    7902:	4b28      	ldr	r3, [pc, #160]	; (79a4 <_mqtt_recv_handler+0x1b8>)
    7904:	4798      	blx	r3
    7906:	2800      	cmp	r0, #0
    7908:	d048      	beq.n	799c <_mqtt_recv_handler+0x1b0>
    790a:	1c23      	adds	r3, r4, #0
    790c:	3348      	adds	r3, #72	; 0x48
    790e:	2240      	movs	r2, #64	; 0x40
    7910:	e00c      	b.n	792c <_mqtt_recv_handler+0x140>
    7912:	2b02      	cmp	r3, #2
    7914:	d142      	bne.n	799c <_mqtt_recv_handler+0x1b0>
    7916:	b2b6      	uxth	r6, r6
    7918:	1c20      	adds	r0, r4, #0
    791a:	2150      	movs	r1, #80	; 0x50
    791c:	1c32      	adds	r2, r6, #0
    791e:	4b21      	ldr	r3, [pc, #132]	; (79a4 <_mqtt_recv_handler+0x1b8>)
    7920:	4798      	blx	r3
    7922:	2800      	cmp	r0, #0
    7924:	d03a      	beq.n	799c <_mqtt_recv_handler+0x1b0>
    7926:	1c23      	adds	r3, r4, #0
    7928:	3348      	adds	r3, #72	; 0x48
    792a:	2250      	movs	r2, #80	; 0x50
    792c:	344a      	adds	r4, #74	; 0x4a
    792e:	701a      	strb	r2, [r3, #0]
    7930:	8026      	strh	r6, [r4, #0]
    7932:	e033      	b.n	799c <_mqtt_recv_handler+0x1b0>
    7934:	7885      	ldrb	r5, [r0, #2]
    7936:	78c3      	ldrb	r3, [r0, #3]
    7938:	022d      	lsls	r5, r5, #8
    793a:	431d      	orrs	r5, r3
    793c:	1c20      	adds	r0, r4, #0
    793e:	2162      	movs	r1, #98	; 0x62
    7940:	1c2a      	adds	r2, r5, #0
    7942:	4b18      	ldr	r3, [pc, #96]	; (79a4 <_mqtt_recv_handler+0x1b8>)
    7944:	4798      	blx	r3
    7946:	2800      	cmp	r0, #0
    7948:	d028      	beq.n	799c <_mqtt_recv_handler+0x1b0>
    794a:	1c23      	adds	r3, r4, #0
    794c:	3348      	adds	r3, #72	; 0x48
    794e:	2260      	movs	r2, #96	; 0x60
    7950:	e00d      	b.n	796e <_mqtt_recv_handler+0x182>
    7952:	7885      	ldrb	r5, [r0, #2]
    7954:	78c3      	ldrb	r3, [r0, #3]
    7956:	022d      	lsls	r5, r5, #8
    7958:	431d      	orrs	r5, r3
    795a:	1c20      	adds	r0, r4, #0
    795c:	2170      	movs	r1, #112	; 0x70
    795e:	1c2a      	adds	r2, r5, #0
    7960:	4b10      	ldr	r3, [pc, #64]	; (79a4 <_mqtt_recv_handler+0x1b8>)
    7962:	4798      	blx	r3
    7964:	2800      	cmp	r0, #0
    7966:	d019      	beq.n	799c <_mqtt_recv_handler+0x1b0>
    7968:	1c23      	adds	r3, r4, #0
    796a:	3348      	adds	r3, #72	; 0x48
    796c:	2270      	movs	r2, #112	; 0x70
    796e:	344a      	adds	r4, #74	; 0x4a
    7970:	701a      	strb	r2, [r3, #0]
    7972:	8025      	strh	r5, [r4, #0]
    7974:	e012      	b.n	799c <_mqtt_recv_handler+0x1b0>
    7976:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7978:	2b00      	cmp	r3, #0
    797a:	d00f      	beq.n	799c <_mqtt_recv_handler+0x1b0>
    797c:	1c20      	adds	r0, r4, #0
    797e:	2102      	movs	r1, #2
    7980:	e00a      	b.n	7998 <_mqtt_recv_handler+0x1ac>
    7982:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7984:	2b00      	cmp	r3, #0
    7986:	d009      	beq.n	799c <_mqtt_recv_handler+0x1b0>
    7988:	1c20      	adds	r0, r4, #0
    798a:	2103      	movs	r1, #3
    798c:	e004      	b.n	7998 <_mqtt_recv_handler+0x1ac>
    798e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7990:	2b00      	cmp	r3, #0
    7992:	d003      	beq.n	799c <_mqtt_recv_handler+0x1b0>
    7994:	1c20      	adds	r0, r4, #0
    7996:	2104      	movs	r1, #4
    7998:	aa01      	add	r2, sp, #4
    799a:	4798      	blx	r3
    799c:	b007      	add	sp, #28
    799e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    79a0:	00007749 	.word	0x00007749
    79a4:	00007695 	.word	0x00007695

000079a8 <mqtt_recv_packet>:
    79a8:	b538      	push	{r3, r4, r5, lr}
    79aa:	1e04      	subs	r4, r0, #0
    79ac:	d017      	beq.n	79de <mqtt_recv_packet+0x36>
    79ae:	6c42      	ldr	r2, [r0, #68]	; 0x44
    79b0:	6e83      	ldr	r3, [r0, #104]	; 0x68
    79b2:	429a      	cmp	r2, r3
    79b4:	d906      	bls.n	79c4 <mqtt_recv_packet+0x1c>
    79b6:	238b      	movs	r3, #139	; 0x8b
    79b8:	425b      	negs	r3, r3
    79ba:	64c3      	str	r3, [r0, #76]	; 0x4c
    79bc:	2100      	movs	r1, #0
    79be:	4b08      	ldr	r3, [pc, #32]	; (79e0 <mqtt_recv_packet+0x38>)
    79c0:	4798      	blx	r3
    79c2:	e00c      	b.n	79de <mqtt_recv_packet+0x36>
    79c4:	6c62      	ldr	r2, [r4, #68]	; 0x44
    79c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
    79c8:	2002      	movs	r0, #2
    79ca:	1899      	adds	r1, r3, r2
    79cc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    79ce:	5620      	ldrsb	r0, [r4, r0]
    79d0:	1a9a      	subs	r2, r3, r2
    79d2:	b292      	uxth	r2, r2
    79d4:	2300      	movs	r3, #0
    79d6:	4d03      	ldr	r5, [pc, #12]	; (79e4 <mqtt_recv_packet+0x3c>)
    79d8:	47a8      	blx	r5
    79da:	2800      	cmp	r0, #0
    79dc:	d1f2      	bne.n	79c4 <mqtt_recv_packet+0x1c>
    79de:	bd38      	pop	{r3, r4, r5, pc}
    79e0:	00007749 	.word	0x00007749
    79e4:	00004011 	.word	0x00004011

000079e8 <mqtt_recved_packet>:
    79e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    79ea:	1e04      	subs	r4, r0, #0
    79ec:	d042      	beq.n	7a74 <mqtt_recved_packet+0x8c>
    79ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
    79f0:	6e67      	ldr	r7, [r4, #100]	; 0x64
    79f2:	18ca      	adds	r2, r1, r3
    79f4:	2301      	movs	r3, #1
    79f6:	9701      	str	r7, [sp, #4]
    79f8:	6462      	str	r2, [r4, #68]	; 0x44
    79fa:	2600      	movs	r6, #0
    79fc:	1c1d      	adds	r5, r3, #0
    79fe:	42a9      	cmp	r1, r5
    7a00:	dc03      	bgt.n	7a0a <mqtt_recved_packet+0x22>
    7a02:	1c20      	adds	r0, r4, #0
    7a04:	4b1c      	ldr	r3, [pc, #112]	; (7a78 <mqtt_recved_packet+0x90>)
    7a06:	4798      	blx	r3
    7a08:	e034      	b.n	7a74 <mqtt_recved_packet+0x8c>
    7a0a:	9f01      	ldr	r7, [sp, #4]
    7a0c:	5d78      	ldrb	r0, [r7, r5]
    7a0e:	01df      	lsls	r7, r3, #7
    7a10:	46bc      	mov	ip, r7
    7a12:	2d03      	cmp	r5, #3
    7a14:	d101      	bne.n	7a1a <mqtt_recved_packet+0x32>
    7a16:	234d      	movs	r3, #77	; 0x4d
    7a18:	e00e      	b.n	7a38 <mqtt_recved_packet+0x50>
    7a1a:	277f      	movs	r7, #127	; 0x7f
    7a1c:	4007      	ands	r7, r0
    7a1e:	437b      	muls	r3, r7
    7a20:	b240      	sxtb	r0, r0
    7a22:	3501      	adds	r5, #1
    7a24:	18f6      	adds	r6, r6, r3
    7a26:	2800      	cmp	r0, #0
    7a28:	da01      	bge.n	7a2e <mqtt_recved_packet+0x46>
    7a2a:	4663      	mov	r3, ip
    7a2c:	e7e7      	b.n	79fe <mqtt_recved_packet+0x16>
    7a2e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    7a30:	19af      	adds	r7, r5, r6
    7a32:	429f      	cmp	r7, r3
    7a34:	d907      	bls.n	7a46 <mqtt_recved_packet+0x5e>
    7a36:	238b      	movs	r3, #139	; 0x8b
    7a38:	425b      	negs	r3, r3
    7a3a:	64e3      	str	r3, [r4, #76]	; 0x4c
    7a3c:	1c20      	adds	r0, r4, #0
    7a3e:	2100      	movs	r1, #0
    7a40:	4b0e      	ldr	r3, [pc, #56]	; (7a7c <mqtt_recved_packet+0x94>)
    7a42:	4798      	blx	r3
    7a44:	e016      	b.n	7a74 <mqtt_recved_packet+0x8c>
    7a46:	42ba      	cmp	r2, r7
    7a48:	d314      	bcc.n	7a74 <mqtt_recved_packet+0x8c>
    7a4a:	4b0d      	ldr	r3, [pc, #52]	; (7a80 <mqtt_recved_packet+0x98>)
    7a4c:	1c20      	adds	r0, r4, #0
    7a4e:	1c31      	adds	r1, r6, #0
    7a50:	4798      	blx	r3
    7a52:	6c63      	ldr	r3, [r4, #68]	; 0x44
    7a54:	42bb      	cmp	r3, r7
    7a56:	d102      	bne.n	7a5e <mqtt_recved_packet+0x76>
    7a58:	2300      	movs	r3, #0
    7a5a:	6463      	str	r3, [r4, #68]	; 0x44
    7a5c:	e00a      	b.n	7a74 <mqtt_recved_packet+0x8c>
    7a5e:	1b9e      	subs	r6, r3, r6
    7a60:	9b01      	ldr	r3, [sp, #4]
    7a62:	1b75      	subs	r5, r6, r5
    7a64:	19d9      	adds	r1, r3, r7
    7a66:	1c18      	adds	r0, r3, #0
    7a68:	1c2a      	adds	r2, r5, #0
    7a6a:	4b06      	ldr	r3, [pc, #24]	; (7a84 <mqtt_recved_packet+0x9c>)
    7a6c:	4798      	blx	r3
    7a6e:	6465      	str	r5, [r4, #68]	; 0x44
    7a70:	2100      	movs	r1, #0
    7a72:	e7bc      	b.n	79ee <mqtt_recved_packet+0x6>
    7a74:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    7a76:	46c0      	nop			; (mov r8, r8)
    7a78:	000079a9 	.word	0x000079a9
    7a7c:	00007749 	.word	0x00007749
    7a80:	000077ed 	.word	0x000077ed
    7a84:	00009813 	.word	0x00009813

00007a88 <mqtt_socket_event_handler>:
    7a88:	b570      	push	{r4, r5, r6, lr}
    7a8a:	4d37      	ldr	r5, [pc, #220]	; (7b68 <mqtt_socket_event_handler+0xe0>)
    7a8c:	0086      	lsls	r6, r0, #2
    7a8e:	5974      	ldr	r4, [r6, r5]
    7a90:	b086      	sub	sp, #24
    7a92:	2c00      	cmp	r4, #0
    7a94:	d066      	beq.n	7b64 <mqtt_socket_event_handler+0xdc>
    7a96:	2906      	cmp	r1, #6
    7a98:	d02b      	beq.n	7af2 <mqtt_socket_event_handler+0x6a>
    7a9a:	2907      	cmp	r1, #7
    7a9c:	d039      	beq.n	7b12 <mqtt_socket_event_handler+0x8a>
    7a9e:	2905      	cmp	r1, #5
    7aa0:	d160      	bne.n	7b64 <mqtt_socket_event_handler+0xdc>
    7aa2:	2001      	movs	r0, #1
    7aa4:	5610      	ldrsb	r0, [r2, r0]
    7aa6:	4b31      	ldr	r3, [pc, #196]	; (7b6c <mqtt_socket_event_handler+0xe4>)
    7aa8:	4798      	blx	r3
    7aaa:	9001      	str	r0, [sp, #4]
    7aac:	2800      	cmp	r0, #0
    7aae:	da06      	bge.n	7abe <mqtt_socket_event_handler+0x36>
    7ab0:	2002      	movs	r0, #2
    7ab2:	4b2f      	ldr	r3, [pc, #188]	; (7b70 <mqtt_socket_event_handler+0xe8>)
    7ab4:	5620      	ldrsb	r0, [r4, r0]
    7ab6:	4798      	blx	r3
    7ab8:	2300      	movs	r3, #0
    7aba:	5173      	str	r3, [r6, r5]
    7abc:	e011      	b.n	7ae2 <mqtt_socket_event_handler+0x5a>
    7abe:	1c23      	adds	r3, r4, #0
    7ac0:	3343      	adds	r3, #67	; 0x43
    7ac2:	781a      	ldrb	r2, [r3, #0]
    7ac4:	2101      	movs	r1, #1
    7ac6:	430a      	orrs	r2, r1
    7ac8:	701a      	strb	r2, [r3, #0]
    7aca:	331d      	adds	r3, #29
    7acc:	881b      	ldrh	r3, [r3, #0]
    7ace:	2b00      	cmp	r3, #0
    7ad0:	d004      	beq.n	7adc <mqtt_socket_event_handler+0x54>
    7ad2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    7ad4:	6d21      	ldr	r1, [r4, #80]	; 0x50
    7ad6:	2200      	movs	r2, #0
    7ad8:	4b26      	ldr	r3, [pc, #152]	; (7b74 <mqtt_socket_event_handler+0xec>)
    7ada:	4798      	blx	r3
    7adc:	1c20      	adds	r0, r4, #0
    7ade:	4b26      	ldr	r3, [pc, #152]	; (7b78 <mqtt_socket_event_handler+0xf0>)
    7ae0:	4798      	blx	r3
    7ae2:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7ae4:	2b00      	cmp	r3, #0
    7ae6:	d03d      	beq.n	7b64 <mqtt_socket_event_handler+0xdc>
    7ae8:	1c20      	adds	r0, r4, #0
    7aea:	2100      	movs	r1, #0
    7aec:	aa01      	add	r2, sp, #4
    7aee:	4798      	blx	r3
    7af0:	e038      	b.n	7b64 <mqtt_socket_event_handler+0xdc>
    7af2:	2304      	movs	r3, #4
    7af4:	5ed1      	ldrsh	r1, [r2, r3]
    7af6:	2900      	cmp	r1, #0
    7af8:	dd03      	ble.n	7b02 <mqtt_socket_event_handler+0x7a>
    7afa:	1c20      	adds	r0, r4, #0
    7afc:	4b1f      	ldr	r3, [pc, #124]	; (7b7c <mqtt_socket_event_handler+0xf4>)
    7afe:	4798      	blx	r3
    7b00:	e003      	b.n	7b0a <mqtt_socket_event_handler+0x82>
    7b02:	1c0b      	adds	r3, r1, #0
    7b04:	1c08      	adds	r0, r1, #0
    7b06:	330d      	adds	r3, #13
    7b08:	d11a      	bne.n	7b40 <mqtt_socket_event_handler+0xb8>
    7b0a:	4b1b      	ldr	r3, [pc, #108]	; (7b78 <mqtt_socket_event_handler+0xf0>)
    7b0c:	1c20      	adds	r0, r4, #0
    7b0e:	4798      	blx	r3
    7b10:	e028      	b.n	7b64 <mqtt_socket_event_handler+0xdc>
    7b12:	1c23      	adds	r3, r4, #0
    7b14:	3343      	adds	r3, #67	; 0x43
    7b16:	8810      	ldrh	r0, [r2, #0]
    7b18:	781a      	ldrb	r2, [r3, #0]
    7b1a:	0751      	lsls	r1, r2, #29
    7b1c:	d402      	bmi.n	7b24 <mqtt_socket_event_handler+0x9c>
    7b1e:	2108      	movs	r1, #8
    7b20:	438a      	bics	r2, r1
    7b22:	701a      	strb	r2, [r3, #0]
    7b24:	781a      	ldrb	r2, [r3, #0]
    7b26:	2104      	movs	r1, #4
    7b28:	438a      	bics	r2, r1
    7b2a:	701a      	strb	r2, [r3, #0]
    7b2c:	06d3      	lsls	r3, r2, #27
    7b2e:	0fde      	lsrs	r6, r3, #31
    7b30:	b200      	sxth	r0, r0
    7b32:	2b00      	cmp	r3, #0
    7b34:	db02      	blt.n	7b3c <mqtt_socket_event_handler+0xb4>
    7b36:	2800      	cmp	r0, #0
    7b38:	da08      	bge.n	7b4c <mqtt_socket_event_handler+0xc4>
    7b3a:	e001      	b.n	7b40 <mqtt_socket_event_handler+0xb8>
    7b3c:	2800      	cmp	r0, #0
    7b3e:	da02      	bge.n	7b46 <mqtt_socket_event_handler+0xbe>
    7b40:	4b0a      	ldr	r3, [pc, #40]	; (7b6c <mqtt_socket_event_handler+0xe4>)
    7b42:	4798      	blx	r3
    7b44:	64e0      	str	r0, [r4, #76]	; 0x4c
    7b46:	1c20      	adds	r0, r4, #0
    7b48:	4b0d      	ldr	r3, [pc, #52]	; (7b80 <mqtt_socket_event_handler+0xf8>)
    7b4a:	e7e0      	b.n	7b0e <mqtt_socket_event_handler+0x86>
    7b4c:	1c25      	adds	r5, r4, #0
    7b4e:	3548      	adds	r5, #72	; 0x48
    7b50:	7829      	ldrb	r1, [r5, #0]
    7b52:	2900      	cmp	r1, #0
    7b54:	d006      	beq.n	7b64 <mqtt_socket_event_handler+0xdc>
    7b56:	1c23      	adds	r3, r4, #0
    7b58:	334a      	adds	r3, #74	; 0x4a
    7b5a:	881a      	ldrh	r2, [r3, #0]
    7b5c:	1c20      	adds	r0, r4, #0
    7b5e:	4b09      	ldr	r3, [pc, #36]	; (7b84 <mqtt_socket_event_handler+0xfc>)
    7b60:	4798      	blx	r3
    7b62:	702e      	strb	r6, [r5, #0]
    7b64:	b006      	add	sp, #24
    7b66:	bd70      	pop	{r4, r5, r6, pc}
    7b68:	20000290 	.word	0x20000290
    7b6c:	00006d79 	.word	0x00006d79
    7b70:	000040a5 	.word	0x000040a5
    7b74:	000065e5 	.word	0x000065e5
    7b78:	000079a9 	.word	0x000079a9
    7b7c:	000079e9 	.word	0x000079e9
    7b80:	000076f9 	.word	0x000076f9
    7b84:	00007695 	.word	0x00007695

00007b88 <__gnu_thumb1_case_uqi>:
    7b88:	b402      	push	{r1}
    7b8a:	4671      	mov	r1, lr
    7b8c:	0849      	lsrs	r1, r1, #1
    7b8e:	0049      	lsls	r1, r1, #1
    7b90:	5c09      	ldrb	r1, [r1, r0]
    7b92:	0049      	lsls	r1, r1, #1
    7b94:	448e      	add	lr, r1
    7b96:	bc02      	pop	{r1}
    7b98:	4770      	bx	lr
    7b9a:	46c0      	nop			; (mov r8, r8)

00007b9c <__udivsi3>:
    7b9c:	2200      	movs	r2, #0
    7b9e:	0843      	lsrs	r3, r0, #1
    7ba0:	428b      	cmp	r3, r1
    7ba2:	d374      	bcc.n	7c8e <__udivsi3+0xf2>
    7ba4:	0903      	lsrs	r3, r0, #4
    7ba6:	428b      	cmp	r3, r1
    7ba8:	d35f      	bcc.n	7c6a <__udivsi3+0xce>
    7baa:	0a03      	lsrs	r3, r0, #8
    7bac:	428b      	cmp	r3, r1
    7bae:	d344      	bcc.n	7c3a <__udivsi3+0x9e>
    7bb0:	0b03      	lsrs	r3, r0, #12
    7bb2:	428b      	cmp	r3, r1
    7bb4:	d328      	bcc.n	7c08 <__udivsi3+0x6c>
    7bb6:	0c03      	lsrs	r3, r0, #16
    7bb8:	428b      	cmp	r3, r1
    7bba:	d30d      	bcc.n	7bd8 <__udivsi3+0x3c>
    7bbc:	22ff      	movs	r2, #255	; 0xff
    7bbe:	0209      	lsls	r1, r1, #8
    7bc0:	ba12      	rev	r2, r2
    7bc2:	0c03      	lsrs	r3, r0, #16
    7bc4:	428b      	cmp	r3, r1
    7bc6:	d302      	bcc.n	7bce <__udivsi3+0x32>
    7bc8:	1212      	asrs	r2, r2, #8
    7bca:	0209      	lsls	r1, r1, #8
    7bcc:	d065      	beq.n	7c9a <__udivsi3+0xfe>
    7bce:	0b03      	lsrs	r3, r0, #12
    7bd0:	428b      	cmp	r3, r1
    7bd2:	d319      	bcc.n	7c08 <__udivsi3+0x6c>
    7bd4:	e000      	b.n	7bd8 <__udivsi3+0x3c>
    7bd6:	0a09      	lsrs	r1, r1, #8
    7bd8:	0bc3      	lsrs	r3, r0, #15
    7bda:	428b      	cmp	r3, r1
    7bdc:	d301      	bcc.n	7be2 <__udivsi3+0x46>
    7bde:	03cb      	lsls	r3, r1, #15
    7be0:	1ac0      	subs	r0, r0, r3
    7be2:	4152      	adcs	r2, r2
    7be4:	0b83      	lsrs	r3, r0, #14
    7be6:	428b      	cmp	r3, r1
    7be8:	d301      	bcc.n	7bee <__udivsi3+0x52>
    7bea:	038b      	lsls	r3, r1, #14
    7bec:	1ac0      	subs	r0, r0, r3
    7bee:	4152      	adcs	r2, r2
    7bf0:	0b43      	lsrs	r3, r0, #13
    7bf2:	428b      	cmp	r3, r1
    7bf4:	d301      	bcc.n	7bfa <__udivsi3+0x5e>
    7bf6:	034b      	lsls	r3, r1, #13
    7bf8:	1ac0      	subs	r0, r0, r3
    7bfa:	4152      	adcs	r2, r2
    7bfc:	0b03      	lsrs	r3, r0, #12
    7bfe:	428b      	cmp	r3, r1
    7c00:	d301      	bcc.n	7c06 <__udivsi3+0x6a>
    7c02:	030b      	lsls	r3, r1, #12
    7c04:	1ac0      	subs	r0, r0, r3
    7c06:	4152      	adcs	r2, r2
    7c08:	0ac3      	lsrs	r3, r0, #11
    7c0a:	428b      	cmp	r3, r1
    7c0c:	d301      	bcc.n	7c12 <__udivsi3+0x76>
    7c0e:	02cb      	lsls	r3, r1, #11
    7c10:	1ac0      	subs	r0, r0, r3
    7c12:	4152      	adcs	r2, r2
    7c14:	0a83      	lsrs	r3, r0, #10
    7c16:	428b      	cmp	r3, r1
    7c18:	d301      	bcc.n	7c1e <__udivsi3+0x82>
    7c1a:	028b      	lsls	r3, r1, #10
    7c1c:	1ac0      	subs	r0, r0, r3
    7c1e:	4152      	adcs	r2, r2
    7c20:	0a43      	lsrs	r3, r0, #9
    7c22:	428b      	cmp	r3, r1
    7c24:	d301      	bcc.n	7c2a <__udivsi3+0x8e>
    7c26:	024b      	lsls	r3, r1, #9
    7c28:	1ac0      	subs	r0, r0, r3
    7c2a:	4152      	adcs	r2, r2
    7c2c:	0a03      	lsrs	r3, r0, #8
    7c2e:	428b      	cmp	r3, r1
    7c30:	d301      	bcc.n	7c36 <__udivsi3+0x9a>
    7c32:	020b      	lsls	r3, r1, #8
    7c34:	1ac0      	subs	r0, r0, r3
    7c36:	4152      	adcs	r2, r2
    7c38:	d2cd      	bcs.n	7bd6 <__udivsi3+0x3a>
    7c3a:	09c3      	lsrs	r3, r0, #7
    7c3c:	428b      	cmp	r3, r1
    7c3e:	d301      	bcc.n	7c44 <__udivsi3+0xa8>
    7c40:	01cb      	lsls	r3, r1, #7
    7c42:	1ac0      	subs	r0, r0, r3
    7c44:	4152      	adcs	r2, r2
    7c46:	0983      	lsrs	r3, r0, #6
    7c48:	428b      	cmp	r3, r1
    7c4a:	d301      	bcc.n	7c50 <__udivsi3+0xb4>
    7c4c:	018b      	lsls	r3, r1, #6
    7c4e:	1ac0      	subs	r0, r0, r3
    7c50:	4152      	adcs	r2, r2
    7c52:	0943      	lsrs	r3, r0, #5
    7c54:	428b      	cmp	r3, r1
    7c56:	d301      	bcc.n	7c5c <__udivsi3+0xc0>
    7c58:	014b      	lsls	r3, r1, #5
    7c5a:	1ac0      	subs	r0, r0, r3
    7c5c:	4152      	adcs	r2, r2
    7c5e:	0903      	lsrs	r3, r0, #4
    7c60:	428b      	cmp	r3, r1
    7c62:	d301      	bcc.n	7c68 <__udivsi3+0xcc>
    7c64:	010b      	lsls	r3, r1, #4
    7c66:	1ac0      	subs	r0, r0, r3
    7c68:	4152      	adcs	r2, r2
    7c6a:	08c3      	lsrs	r3, r0, #3
    7c6c:	428b      	cmp	r3, r1
    7c6e:	d301      	bcc.n	7c74 <__udivsi3+0xd8>
    7c70:	00cb      	lsls	r3, r1, #3
    7c72:	1ac0      	subs	r0, r0, r3
    7c74:	4152      	adcs	r2, r2
    7c76:	0883      	lsrs	r3, r0, #2
    7c78:	428b      	cmp	r3, r1
    7c7a:	d301      	bcc.n	7c80 <__udivsi3+0xe4>
    7c7c:	008b      	lsls	r3, r1, #2
    7c7e:	1ac0      	subs	r0, r0, r3
    7c80:	4152      	adcs	r2, r2
    7c82:	0843      	lsrs	r3, r0, #1
    7c84:	428b      	cmp	r3, r1
    7c86:	d301      	bcc.n	7c8c <__udivsi3+0xf0>
    7c88:	004b      	lsls	r3, r1, #1
    7c8a:	1ac0      	subs	r0, r0, r3
    7c8c:	4152      	adcs	r2, r2
    7c8e:	1a41      	subs	r1, r0, r1
    7c90:	d200      	bcs.n	7c94 <__udivsi3+0xf8>
    7c92:	4601      	mov	r1, r0
    7c94:	4152      	adcs	r2, r2
    7c96:	4610      	mov	r0, r2
    7c98:	4770      	bx	lr
    7c9a:	e7ff      	b.n	7c9c <__udivsi3+0x100>
    7c9c:	b501      	push	{r0, lr}
    7c9e:	2000      	movs	r0, #0
    7ca0:	f000 f8f0 	bl	7e84 <__aeabi_idiv0>
    7ca4:	bd02      	pop	{r1, pc}
    7ca6:	46c0      	nop			; (mov r8, r8)

00007ca8 <__aeabi_uidivmod>:
    7ca8:	2900      	cmp	r1, #0
    7caa:	d0f7      	beq.n	7c9c <__udivsi3+0x100>
    7cac:	e776      	b.n	7b9c <__udivsi3>
    7cae:	4770      	bx	lr

00007cb0 <__divsi3>:
    7cb0:	4603      	mov	r3, r0
    7cb2:	430b      	orrs	r3, r1
    7cb4:	d47f      	bmi.n	7db6 <__divsi3+0x106>
    7cb6:	2200      	movs	r2, #0
    7cb8:	0843      	lsrs	r3, r0, #1
    7cba:	428b      	cmp	r3, r1
    7cbc:	d374      	bcc.n	7da8 <__divsi3+0xf8>
    7cbe:	0903      	lsrs	r3, r0, #4
    7cc0:	428b      	cmp	r3, r1
    7cc2:	d35f      	bcc.n	7d84 <__divsi3+0xd4>
    7cc4:	0a03      	lsrs	r3, r0, #8
    7cc6:	428b      	cmp	r3, r1
    7cc8:	d344      	bcc.n	7d54 <__divsi3+0xa4>
    7cca:	0b03      	lsrs	r3, r0, #12
    7ccc:	428b      	cmp	r3, r1
    7cce:	d328      	bcc.n	7d22 <__divsi3+0x72>
    7cd0:	0c03      	lsrs	r3, r0, #16
    7cd2:	428b      	cmp	r3, r1
    7cd4:	d30d      	bcc.n	7cf2 <__divsi3+0x42>
    7cd6:	22ff      	movs	r2, #255	; 0xff
    7cd8:	0209      	lsls	r1, r1, #8
    7cda:	ba12      	rev	r2, r2
    7cdc:	0c03      	lsrs	r3, r0, #16
    7cde:	428b      	cmp	r3, r1
    7ce0:	d302      	bcc.n	7ce8 <__divsi3+0x38>
    7ce2:	1212      	asrs	r2, r2, #8
    7ce4:	0209      	lsls	r1, r1, #8
    7ce6:	d065      	beq.n	7db4 <__divsi3+0x104>
    7ce8:	0b03      	lsrs	r3, r0, #12
    7cea:	428b      	cmp	r3, r1
    7cec:	d319      	bcc.n	7d22 <__divsi3+0x72>
    7cee:	e000      	b.n	7cf2 <__divsi3+0x42>
    7cf0:	0a09      	lsrs	r1, r1, #8
    7cf2:	0bc3      	lsrs	r3, r0, #15
    7cf4:	428b      	cmp	r3, r1
    7cf6:	d301      	bcc.n	7cfc <__divsi3+0x4c>
    7cf8:	03cb      	lsls	r3, r1, #15
    7cfa:	1ac0      	subs	r0, r0, r3
    7cfc:	4152      	adcs	r2, r2
    7cfe:	0b83      	lsrs	r3, r0, #14
    7d00:	428b      	cmp	r3, r1
    7d02:	d301      	bcc.n	7d08 <__divsi3+0x58>
    7d04:	038b      	lsls	r3, r1, #14
    7d06:	1ac0      	subs	r0, r0, r3
    7d08:	4152      	adcs	r2, r2
    7d0a:	0b43      	lsrs	r3, r0, #13
    7d0c:	428b      	cmp	r3, r1
    7d0e:	d301      	bcc.n	7d14 <__divsi3+0x64>
    7d10:	034b      	lsls	r3, r1, #13
    7d12:	1ac0      	subs	r0, r0, r3
    7d14:	4152      	adcs	r2, r2
    7d16:	0b03      	lsrs	r3, r0, #12
    7d18:	428b      	cmp	r3, r1
    7d1a:	d301      	bcc.n	7d20 <__divsi3+0x70>
    7d1c:	030b      	lsls	r3, r1, #12
    7d1e:	1ac0      	subs	r0, r0, r3
    7d20:	4152      	adcs	r2, r2
    7d22:	0ac3      	lsrs	r3, r0, #11
    7d24:	428b      	cmp	r3, r1
    7d26:	d301      	bcc.n	7d2c <__divsi3+0x7c>
    7d28:	02cb      	lsls	r3, r1, #11
    7d2a:	1ac0      	subs	r0, r0, r3
    7d2c:	4152      	adcs	r2, r2
    7d2e:	0a83      	lsrs	r3, r0, #10
    7d30:	428b      	cmp	r3, r1
    7d32:	d301      	bcc.n	7d38 <__divsi3+0x88>
    7d34:	028b      	lsls	r3, r1, #10
    7d36:	1ac0      	subs	r0, r0, r3
    7d38:	4152      	adcs	r2, r2
    7d3a:	0a43      	lsrs	r3, r0, #9
    7d3c:	428b      	cmp	r3, r1
    7d3e:	d301      	bcc.n	7d44 <__divsi3+0x94>
    7d40:	024b      	lsls	r3, r1, #9
    7d42:	1ac0      	subs	r0, r0, r3
    7d44:	4152      	adcs	r2, r2
    7d46:	0a03      	lsrs	r3, r0, #8
    7d48:	428b      	cmp	r3, r1
    7d4a:	d301      	bcc.n	7d50 <__divsi3+0xa0>
    7d4c:	020b      	lsls	r3, r1, #8
    7d4e:	1ac0      	subs	r0, r0, r3
    7d50:	4152      	adcs	r2, r2
    7d52:	d2cd      	bcs.n	7cf0 <__divsi3+0x40>
    7d54:	09c3      	lsrs	r3, r0, #7
    7d56:	428b      	cmp	r3, r1
    7d58:	d301      	bcc.n	7d5e <__divsi3+0xae>
    7d5a:	01cb      	lsls	r3, r1, #7
    7d5c:	1ac0      	subs	r0, r0, r3
    7d5e:	4152      	adcs	r2, r2
    7d60:	0983      	lsrs	r3, r0, #6
    7d62:	428b      	cmp	r3, r1
    7d64:	d301      	bcc.n	7d6a <__divsi3+0xba>
    7d66:	018b      	lsls	r3, r1, #6
    7d68:	1ac0      	subs	r0, r0, r3
    7d6a:	4152      	adcs	r2, r2
    7d6c:	0943      	lsrs	r3, r0, #5
    7d6e:	428b      	cmp	r3, r1
    7d70:	d301      	bcc.n	7d76 <__divsi3+0xc6>
    7d72:	014b      	lsls	r3, r1, #5
    7d74:	1ac0      	subs	r0, r0, r3
    7d76:	4152      	adcs	r2, r2
    7d78:	0903      	lsrs	r3, r0, #4
    7d7a:	428b      	cmp	r3, r1
    7d7c:	d301      	bcc.n	7d82 <__divsi3+0xd2>
    7d7e:	010b      	lsls	r3, r1, #4
    7d80:	1ac0      	subs	r0, r0, r3
    7d82:	4152      	adcs	r2, r2
    7d84:	08c3      	lsrs	r3, r0, #3
    7d86:	428b      	cmp	r3, r1
    7d88:	d301      	bcc.n	7d8e <__divsi3+0xde>
    7d8a:	00cb      	lsls	r3, r1, #3
    7d8c:	1ac0      	subs	r0, r0, r3
    7d8e:	4152      	adcs	r2, r2
    7d90:	0883      	lsrs	r3, r0, #2
    7d92:	428b      	cmp	r3, r1
    7d94:	d301      	bcc.n	7d9a <__divsi3+0xea>
    7d96:	008b      	lsls	r3, r1, #2
    7d98:	1ac0      	subs	r0, r0, r3
    7d9a:	4152      	adcs	r2, r2
    7d9c:	0843      	lsrs	r3, r0, #1
    7d9e:	428b      	cmp	r3, r1
    7da0:	d301      	bcc.n	7da6 <__divsi3+0xf6>
    7da2:	004b      	lsls	r3, r1, #1
    7da4:	1ac0      	subs	r0, r0, r3
    7da6:	4152      	adcs	r2, r2
    7da8:	1a41      	subs	r1, r0, r1
    7daa:	d200      	bcs.n	7dae <__divsi3+0xfe>
    7dac:	4601      	mov	r1, r0
    7dae:	4152      	adcs	r2, r2
    7db0:	4610      	mov	r0, r2
    7db2:	4770      	bx	lr
    7db4:	e05d      	b.n	7e72 <__divsi3+0x1c2>
    7db6:	0fca      	lsrs	r2, r1, #31
    7db8:	d000      	beq.n	7dbc <__divsi3+0x10c>
    7dba:	4249      	negs	r1, r1
    7dbc:	1003      	asrs	r3, r0, #32
    7dbe:	d300      	bcc.n	7dc2 <__divsi3+0x112>
    7dc0:	4240      	negs	r0, r0
    7dc2:	4053      	eors	r3, r2
    7dc4:	2200      	movs	r2, #0
    7dc6:	469c      	mov	ip, r3
    7dc8:	0903      	lsrs	r3, r0, #4
    7dca:	428b      	cmp	r3, r1
    7dcc:	d32d      	bcc.n	7e2a <__divsi3+0x17a>
    7dce:	0a03      	lsrs	r3, r0, #8
    7dd0:	428b      	cmp	r3, r1
    7dd2:	d312      	bcc.n	7dfa <__divsi3+0x14a>
    7dd4:	22fc      	movs	r2, #252	; 0xfc
    7dd6:	0189      	lsls	r1, r1, #6
    7dd8:	ba12      	rev	r2, r2
    7dda:	0a03      	lsrs	r3, r0, #8
    7ddc:	428b      	cmp	r3, r1
    7dde:	d30c      	bcc.n	7dfa <__divsi3+0x14a>
    7de0:	0189      	lsls	r1, r1, #6
    7de2:	1192      	asrs	r2, r2, #6
    7de4:	428b      	cmp	r3, r1
    7de6:	d308      	bcc.n	7dfa <__divsi3+0x14a>
    7de8:	0189      	lsls	r1, r1, #6
    7dea:	1192      	asrs	r2, r2, #6
    7dec:	428b      	cmp	r3, r1
    7dee:	d304      	bcc.n	7dfa <__divsi3+0x14a>
    7df0:	0189      	lsls	r1, r1, #6
    7df2:	d03a      	beq.n	7e6a <__divsi3+0x1ba>
    7df4:	1192      	asrs	r2, r2, #6
    7df6:	e000      	b.n	7dfa <__divsi3+0x14a>
    7df8:	0989      	lsrs	r1, r1, #6
    7dfa:	09c3      	lsrs	r3, r0, #7
    7dfc:	428b      	cmp	r3, r1
    7dfe:	d301      	bcc.n	7e04 <__divsi3+0x154>
    7e00:	01cb      	lsls	r3, r1, #7
    7e02:	1ac0      	subs	r0, r0, r3
    7e04:	4152      	adcs	r2, r2
    7e06:	0983      	lsrs	r3, r0, #6
    7e08:	428b      	cmp	r3, r1
    7e0a:	d301      	bcc.n	7e10 <__divsi3+0x160>
    7e0c:	018b      	lsls	r3, r1, #6
    7e0e:	1ac0      	subs	r0, r0, r3
    7e10:	4152      	adcs	r2, r2
    7e12:	0943      	lsrs	r3, r0, #5
    7e14:	428b      	cmp	r3, r1
    7e16:	d301      	bcc.n	7e1c <__divsi3+0x16c>
    7e18:	014b      	lsls	r3, r1, #5
    7e1a:	1ac0      	subs	r0, r0, r3
    7e1c:	4152      	adcs	r2, r2
    7e1e:	0903      	lsrs	r3, r0, #4
    7e20:	428b      	cmp	r3, r1
    7e22:	d301      	bcc.n	7e28 <__divsi3+0x178>
    7e24:	010b      	lsls	r3, r1, #4
    7e26:	1ac0      	subs	r0, r0, r3
    7e28:	4152      	adcs	r2, r2
    7e2a:	08c3      	lsrs	r3, r0, #3
    7e2c:	428b      	cmp	r3, r1
    7e2e:	d301      	bcc.n	7e34 <__divsi3+0x184>
    7e30:	00cb      	lsls	r3, r1, #3
    7e32:	1ac0      	subs	r0, r0, r3
    7e34:	4152      	adcs	r2, r2
    7e36:	0883      	lsrs	r3, r0, #2
    7e38:	428b      	cmp	r3, r1
    7e3a:	d301      	bcc.n	7e40 <__divsi3+0x190>
    7e3c:	008b      	lsls	r3, r1, #2
    7e3e:	1ac0      	subs	r0, r0, r3
    7e40:	4152      	adcs	r2, r2
    7e42:	d2d9      	bcs.n	7df8 <__divsi3+0x148>
    7e44:	0843      	lsrs	r3, r0, #1
    7e46:	428b      	cmp	r3, r1
    7e48:	d301      	bcc.n	7e4e <__divsi3+0x19e>
    7e4a:	004b      	lsls	r3, r1, #1
    7e4c:	1ac0      	subs	r0, r0, r3
    7e4e:	4152      	adcs	r2, r2
    7e50:	1a41      	subs	r1, r0, r1
    7e52:	d200      	bcs.n	7e56 <__divsi3+0x1a6>
    7e54:	4601      	mov	r1, r0
    7e56:	4663      	mov	r3, ip
    7e58:	4152      	adcs	r2, r2
    7e5a:	105b      	asrs	r3, r3, #1
    7e5c:	4610      	mov	r0, r2
    7e5e:	d301      	bcc.n	7e64 <__divsi3+0x1b4>
    7e60:	4240      	negs	r0, r0
    7e62:	2b00      	cmp	r3, #0
    7e64:	d500      	bpl.n	7e68 <__divsi3+0x1b8>
    7e66:	4249      	negs	r1, r1
    7e68:	4770      	bx	lr
    7e6a:	4663      	mov	r3, ip
    7e6c:	105b      	asrs	r3, r3, #1
    7e6e:	d300      	bcc.n	7e72 <__divsi3+0x1c2>
    7e70:	4240      	negs	r0, r0
    7e72:	b501      	push	{r0, lr}
    7e74:	2000      	movs	r0, #0
    7e76:	f000 f805 	bl	7e84 <__aeabi_idiv0>
    7e7a:	bd02      	pop	{r1, pc}

00007e7c <__aeabi_idivmod>:
    7e7c:	2900      	cmp	r1, #0
    7e7e:	d0f8      	beq.n	7e72 <__divsi3+0x1c2>
    7e80:	e716      	b.n	7cb0 <__divsi3>
    7e82:	4770      	bx	lr

00007e84 <__aeabi_idiv0>:
    7e84:	4770      	bx	lr
    7e86:	46c0      	nop			; (mov r8, r8)

00007e88 <__aeabi_lmul>:
    7e88:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e8a:	46ce      	mov	lr, r9
    7e8c:	4647      	mov	r7, r8
    7e8e:	0415      	lsls	r5, r2, #16
    7e90:	0c2d      	lsrs	r5, r5, #16
    7e92:	002e      	movs	r6, r5
    7e94:	b580      	push	{r7, lr}
    7e96:	0407      	lsls	r7, r0, #16
    7e98:	0c14      	lsrs	r4, r2, #16
    7e9a:	0c3f      	lsrs	r7, r7, #16
    7e9c:	4699      	mov	r9, r3
    7e9e:	0c03      	lsrs	r3, r0, #16
    7ea0:	437e      	muls	r6, r7
    7ea2:	435d      	muls	r5, r3
    7ea4:	4367      	muls	r7, r4
    7ea6:	4363      	muls	r3, r4
    7ea8:	197f      	adds	r7, r7, r5
    7eaa:	0c34      	lsrs	r4, r6, #16
    7eac:	19e4      	adds	r4, r4, r7
    7eae:	469c      	mov	ip, r3
    7eb0:	42a5      	cmp	r5, r4
    7eb2:	d903      	bls.n	7ebc <__aeabi_lmul+0x34>
    7eb4:	2380      	movs	r3, #128	; 0x80
    7eb6:	025b      	lsls	r3, r3, #9
    7eb8:	4698      	mov	r8, r3
    7eba:	44c4      	add	ip, r8
    7ebc:	464b      	mov	r3, r9
    7ebe:	4351      	muls	r1, r2
    7ec0:	4343      	muls	r3, r0
    7ec2:	0436      	lsls	r6, r6, #16
    7ec4:	0c36      	lsrs	r6, r6, #16
    7ec6:	0c25      	lsrs	r5, r4, #16
    7ec8:	0424      	lsls	r4, r4, #16
    7eca:	4465      	add	r5, ip
    7ecc:	19a4      	adds	r4, r4, r6
    7ece:	1859      	adds	r1, r3, r1
    7ed0:	1949      	adds	r1, r1, r5
    7ed2:	0020      	movs	r0, r4
    7ed4:	bc0c      	pop	{r2, r3}
    7ed6:	4690      	mov	r8, r2
    7ed8:	4699      	mov	r9, r3
    7eda:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007edc <__aeabi_dadd>:
    7edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7ede:	4645      	mov	r5, r8
    7ee0:	46de      	mov	lr, fp
    7ee2:	4657      	mov	r7, sl
    7ee4:	464e      	mov	r6, r9
    7ee6:	030c      	lsls	r4, r1, #12
    7ee8:	b5e0      	push	{r5, r6, r7, lr}
    7eea:	004e      	lsls	r6, r1, #1
    7eec:	0fc9      	lsrs	r1, r1, #31
    7eee:	4688      	mov	r8, r1
    7ef0:	000d      	movs	r5, r1
    7ef2:	0a61      	lsrs	r1, r4, #9
    7ef4:	0f44      	lsrs	r4, r0, #29
    7ef6:	430c      	orrs	r4, r1
    7ef8:	00c7      	lsls	r7, r0, #3
    7efa:	0319      	lsls	r1, r3, #12
    7efc:	0058      	lsls	r0, r3, #1
    7efe:	0fdb      	lsrs	r3, r3, #31
    7f00:	469b      	mov	fp, r3
    7f02:	0a4b      	lsrs	r3, r1, #9
    7f04:	0f51      	lsrs	r1, r2, #29
    7f06:	430b      	orrs	r3, r1
    7f08:	0d76      	lsrs	r6, r6, #21
    7f0a:	0d40      	lsrs	r0, r0, #21
    7f0c:	0019      	movs	r1, r3
    7f0e:	00d2      	lsls	r2, r2, #3
    7f10:	45d8      	cmp	r8, fp
    7f12:	d100      	bne.n	7f16 <__aeabi_dadd+0x3a>
    7f14:	e0ae      	b.n	8074 <__aeabi_dadd+0x198>
    7f16:	1a35      	subs	r5, r6, r0
    7f18:	2d00      	cmp	r5, #0
    7f1a:	dc00      	bgt.n	7f1e <__aeabi_dadd+0x42>
    7f1c:	e0f6      	b.n	810c <__aeabi_dadd+0x230>
    7f1e:	2800      	cmp	r0, #0
    7f20:	d10f      	bne.n	7f42 <__aeabi_dadd+0x66>
    7f22:	4313      	orrs	r3, r2
    7f24:	d100      	bne.n	7f28 <__aeabi_dadd+0x4c>
    7f26:	e0db      	b.n	80e0 <__aeabi_dadd+0x204>
    7f28:	1e6b      	subs	r3, r5, #1
    7f2a:	2b00      	cmp	r3, #0
    7f2c:	d000      	beq.n	7f30 <__aeabi_dadd+0x54>
    7f2e:	e137      	b.n	81a0 <__aeabi_dadd+0x2c4>
    7f30:	1aba      	subs	r2, r7, r2
    7f32:	4297      	cmp	r7, r2
    7f34:	41bf      	sbcs	r7, r7
    7f36:	1a64      	subs	r4, r4, r1
    7f38:	427f      	negs	r7, r7
    7f3a:	1be4      	subs	r4, r4, r7
    7f3c:	2601      	movs	r6, #1
    7f3e:	0017      	movs	r7, r2
    7f40:	e024      	b.n	7f8c <__aeabi_dadd+0xb0>
    7f42:	4bc6      	ldr	r3, [pc, #792]	; (825c <__aeabi_dadd+0x380>)
    7f44:	429e      	cmp	r6, r3
    7f46:	d04d      	beq.n	7fe4 <__aeabi_dadd+0x108>
    7f48:	2380      	movs	r3, #128	; 0x80
    7f4a:	041b      	lsls	r3, r3, #16
    7f4c:	4319      	orrs	r1, r3
    7f4e:	2d38      	cmp	r5, #56	; 0x38
    7f50:	dd00      	ble.n	7f54 <__aeabi_dadd+0x78>
    7f52:	e107      	b.n	8164 <__aeabi_dadd+0x288>
    7f54:	2d1f      	cmp	r5, #31
    7f56:	dd00      	ble.n	7f5a <__aeabi_dadd+0x7e>
    7f58:	e138      	b.n	81cc <__aeabi_dadd+0x2f0>
    7f5a:	2020      	movs	r0, #32
    7f5c:	1b43      	subs	r3, r0, r5
    7f5e:	469a      	mov	sl, r3
    7f60:	000b      	movs	r3, r1
    7f62:	4650      	mov	r0, sl
    7f64:	4083      	lsls	r3, r0
    7f66:	4699      	mov	r9, r3
    7f68:	0013      	movs	r3, r2
    7f6a:	4648      	mov	r0, r9
    7f6c:	40eb      	lsrs	r3, r5
    7f6e:	4318      	orrs	r0, r3
    7f70:	0003      	movs	r3, r0
    7f72:	4650      	mov	r0, sl
    7f74:	4082      	lsls	r2, r0
    7f76:	1e50      	subs	r0, r2, #1
    7f78:	4182      	sbcs	r2, r0
    7f7a:	40e9      	lsrs	r1, r5
    7f7c:	431a      	orrs	r2, r3
    7f7e:	1aba      	subs	r2, r7, r2
    7f80:	1a61      	subs	r1, r4, r1
    7f82:	4297      	cmp	r7, r2
    7f84:	41a4      	sbcs	r4, r4
    7f86:	0017      	movs	r7, r2
    7f88:	4264      	negs	r4, r4
    7f8a:	1b0c      	subs	r4, r1, r4
    7f8c:	0223      	lsls	r3, r4, #8
    7f8e:	d562      	bpl.n	8056 <__aeabi_dadd+0x17a>
    7f90:	0264      	lsls	r4, r4, #9
    7f92:	0a65      	lsrs	r5, r4, #9
    7f94:	2d00      	cmp	r5, #0
    7f96:	d100      	bne.n	7f9a <__aeabi_dadd+0xbe>
    7f98:	e0df      	b.n	815a <__aeabi_dadd+0x27e>
    7f9a:	0028      	movs	r0, r5
    7f9c:	f001 fbe4 	bl	9768 <__clzsi2>
    7fa0:	0003      	movs	r3, r0
    7fa2:	3b08      	subs	r3, #8
    7fa4:	2b1f      	cmp	r3, #31
    7fa6:	dd00      	ble.n	7faa <__aeabi_dadd+0xce>
    7fa8:	e0d2      	b.n	8150 <__aeabi_dadd+0x274>
    7faa:	2220      	movs	r2, #32
    7fac:	003c      	movs	r4, r7
    7fae:	1ad2      	subs	r2, r2, r3
    7fb0:	409d      	lsls	r5, r3
    7fb2:	40d4      	lsrs	r4, r2
    7fb4:	409f      	lsls	r7, r3
    7fb6:	4325      	orrs	r5, r4
    7fb8:	429e      	cmp	r6, r3
    7fba:	dd00      	ble.n	7fbe <__aeabi_dadd+0xe2>
    7fbc:	e0c4      	b.n	8148 <__aeabi_dadd+0x26c>
    7fbe:	1b9e      	subs	r6, r3, r6
    7fc0:	1c73      	adds	r3, r6, #1
    7fc2:	2b1f      	cmp	r3, #31
    7fc4:	dd00      	ble.n	7fc8 <__aeabi_dadd+0xec>
    7fc6:	e0f1      	b.n	81ac <__aeabi_dadd+0x2d0>
    7fc8:	2220      	movs	r2, #32
    7fca:	0038      	movs	r0, r7
    7fcc:	0029      	movs	r1, r5
    7fce:	1ad2      	subs	r2, r2, r3
    7fd0:	40d8      	lsrs	r0, r3
    7fd2:	4091      	lsls	r1, r2
    7fd4:	4097      	lsls	r7, r2
    7fd6:	002c      	movs	r4, r5
    7fd8:	4301      	orrs	r1, r0
    7fda:	1e78      	subs	r0, r7, #1
    7fdc:	4187      	sbcs	r7, r0
    7fde:	40dc      	lsrs	r4, r3
    7fe0:	2600      	movs	r6, #0
    7fe2:	430f      	orrs	r7, r1
    7fe4:	077b      	lsls	r3, r7, #29
    7fe6:	d009      	beq.n	7ffc <__aeabi_dadd+0x120>
    7fe8:	230f      	movs	r3, #15
    7fea:	403b      	ands	r3, r7
    7fec:	2b04      	cmp	r3, #4
    7fee:	d005      	beq.n	7ffc <__aeabi_dadd+0x120>
    7ff0:	1d3b      	adds	r3, r7, #4
    7ff2:	42bb      	cmp	r3, r7
    7ff4:	41bf      	sbcs	r7, r7
    7ff6:	427f      	negs	r7, r7
    7ff8:	19e4      	adds	r4, r4, r7
    7ffa:	001f      	movs	r7, r3
    7ffc:	0223      	lsls	r3, r4, #8
    7ffe:	d52c      	bpl.n	805a <__aeabi_dadd+0x17e>
    8000:	4b96      	ldr	r3, [pc, #600]	; (825c <__aeabi_dadd+0x380>)
    8002:	3601      	adds	r6, #1
    8004:	429e      	cmp	r6, r3
    8006:	d100      	bne.n	800a <__aeabi_dadd+0x12e>
    8008:	e09a      	b.n	8140 <__aeabi_dadd+0x264>
    800a:	4645      	mov	r5, r8
    800c:	4b94      	ldr	r3, [pc, #592]	; (8260 <__aeabi_dadd+0x384>)
    800e:	08ff      	lsrs	r7, r7, #3
    8010:	401c      	ands	r4, r3
    8012:	0760      	lsls	r0, r4, #29
    8014:	0576      	lsls	r6, r6, #21
    8016:	0264      	lsls	r4, r4, #9
    8018:	4307      	orrs	r7, r0
    801a:	0b24      	lsrs	r4, r4, #12
    801c:	0d76      	lsrs	r6, r6, #21
    801e:	2100      	movs	r1, #0
    8020:	0324      	lsls	r4, r4, #12
    8022:	0b23      	lsrs	r3, r4, #12
    8024:	0d0c      	lsrs	r4, r1, #20
    8026:	4a8f      	ldr	r2, [pc, #572]	; (8264 <__aeabi_dadd+0x388>)
    8028:	0524      	lsls	r4, r4, #20
    802a:	431c      	orrs	r4, r3
    802c:	4014      	ands	r4, r2
    802e:	0533      	lsls	r3, r6, #20
    8030:	4323      	orrs	r3, r4
    8032:	005b      	lsls	r3, r3, #1
    8034:	07ed      	lsls	r5, r5, #31
    8036:	085b      	lsrs	r3, r3, #1
    8038:	432b      	orrs	r3, r5
    803a:	0038      	movs	r0, r7
    803c:	0019      	movs	r1, r3
    803e:	bc3c      	pop	{r2, r3, r4, r5}
    8040:	4690      	mov	r8, r2
    8042:	4699      	mov	r9, r3
    8044:	46a2      	mov	sl, r4
    8046:	46ab      	mov	fp, r5
    8048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    804a:	4664      	mov	r4, ip
    804c:	4304      	orrs	r4, r0
    804e:	d100      	bne.n	8052 <__aeabi_dadd+0x176>
    8050:	e211      	b.n	8476 <__aeabi_dadd+0x59a>
    8052:	0004      	movs	r4, r0
    8054:	4667      	mov	r7, ip
    8056:	077b      	lsls	r3, r7, #29
    8058:	d1c6      	bne.n	7fe8 <__aeabi_dadd+0x10c>
    805a:	4645      	mov	r5, r8
    805c:	0760      	lsls	r0, r4, #29
    805e:	08ff      	lsrs	r7, r7, #3
    8060:	4307      	orrs	r7, r0
    8062:	08e4      	lsrs	r4, r4, #3
    8064:	4b7d      	ldr	r3, [pc, #500]	; (825c <__aeabi_dadd+0x380>)
    8066:	429e      	cmp	r6, r3
    8068:	d030      	beq.n	80cc <__aeabi_dadd+0x1f0>
    806a:	0324      	lsls	r4, r4, #12
    806c:	0576      	lsls	r6, r6, #21
    806e:	0b24      	lsrs	r4, r4, #12
    8070:	0d76      	lsrs	r6, r6, #21
    8072:	e7d4      	b.n	801e <__aeabi_dadd+0x142>
    8074:	1a33      	subs	r3, r6, r0
    8076:	469a      	mov	sl, r3
    8078:	2b00      	cmp	r3, #0
    807a:	dd78      	ble.n	816e <__aeabi_dadd+0x292>
    807c:	2800      	cmp	r0, #0
    807e:	d031      	beq.n	80e4 <__aeabi_dadd+0x208>
    8080:	4876      	ldr	r0, [pc, #472]	; (825c <__aeabi_dadd+0x380>)
    8082:	4286      	cmp	r6, r0
    8084:	d0ae      	beq.n	7fe4 <__aeabi_dadd+0x108>
    8086:	2080      	movs	r0, #128	; 0x80
    8088:	0400      	lsls	r0, r0, #16
    808a:	4301      	orrs	r1, r0
    808c:	4653      	mov	r3, sl
    808e:	2b38      	cmp	r3, #56	; 0x38
    8090:	dc00      	bgt.n	8094 <__aeabi_dadd+0x1b8>
    8092:	e0e9      	b.n	8268 <__aeabi_dadd+0x38c>
    8094:	430a      	orrs	r2, r1
    8096:	1e51      	subs	r1, r2, #1
    8098:	418a      	sbcs	r2, r1
    809a:	2100      	movs	r1, #0
    809c:	19d2      	adds	r2, r2, r7
    809e:	42ba      	cmp	r2, r7
    80a0:	41bf      	sbcs	r7, r7
    80a2:	1909      	adds	r1, r1, r4
    80a4:	427c      	negs	r4, r7
    80a6:	0017      	movs	r7, r2
    80a8:	190c      	adds	r4, r1, r4
    80aa:	0223      	lsls	r3, r4, #8
    80ac:	d5d3      	bpl.n	8056 <__aeabi_dadd+0x17a>
    80ae:	4b6b      	ldr	r3, [pc, #428]	; (825c <__aeabi_dadd+0x380>)
    80b0:	3601      	adds	r6, #1
    80b2:	429e      	cmp	r6, r3
    80b4:	d100      	bne.n	80b8 <__aeabi_dadd+0x1dc>
    80b6:	e13a      	b.n	832e <__aeabi_dadd+0x452>
    80b8:	2001      	movs	r0, #1
    80ba:	4b69      	ldr	r3, [pc, #420]	; (8260 <__aeabi_dadd+0x384>)
    80bc:	401c      	ands	r4, r3
    80be:	087b      	lsrs	r3, r7, #1
    80c0:	4007      	ands	r7, r0
    80c2:	431f      	orrs	r7, r3
    80c4:	07e0      	lsls	r0, r4, #31
    80c6:	4307      	orrs	r7, r0
    80c8:	0864      	lsrs	r4, r4, #1
    80ca:	e78b      	b.n	7fe4 <__aeabi_dadd+0x108>
    80cc:	0023      	movs	r3, r4
    80ce:	433b      	orrs	r3, r7
    80d0:	d100      	bne.n	80d4 <__aeabi_dadd+0x1f8>
    80d2:	e1cb      	b.n	846c <__aeabi_dadd+0x590>
    80d4:	2280      	movs	r2, #128	; 0x80
    80d6:	0312      	lsls	r2, r2, #12
    80d8:	4314      	orrs	r4, r2
    80da:	0324      	lsls	r4, r4, #12
    80dc:	0b24      	lsrs	r4, r4, #12
    80de:	e79e      	b.n	801e <__aeabi_dadd+0x142>
    80e0:	002e      	movs	r6, r5
    80e2:	e77f      	b.n	7fe4 <__aeabi_dadd+0x108>
    80e4:	0008      	movs	r0, r1
    80e6:	4310      	orrs	r0, r2
    80e8:	d100      	bne.n	80ec <__aeabi_dadd+0x210>
    80ea:	e0b4      	b.n	8256 <__aeabi_dadd+0x37a>
    80ec:	1e58      	subs	r0, r3, #1
    80ee:	2800      	cmp	r0, #0
    80f0:	d000      	beq.n	80f4 <__aeabi_dadd+0x218>
    80f2:	e0de      	b.n	82b2 <__aeabi_dadd+0x3d6>
    80f4:	18ba      	adds	r2, r7, r2
    80f6:	42ba      	cmp	r2, r7
    80f8:	419b      	sbcs	r3, r3
    80fa:	1864      	adds	r4, r4, r1
    80fc:	425b      	negs	r3, r3
    80fe:	18e4      	adds	r4, r4, r3
    8100:	0017      	movs	r7, r2
    8102:	2601      	movs	r6, #1
    8104:	0223      	lsls	r3, r4, #8
    8106:	d5a6      	bpl.n	8056 <__aeabi_dadd+0x17a>
    8108:	2602      	movs	r6, #2
    810a:	e7d5      	b.n	80b8 <__aeabi_dadd+0x1dc>
    810c:	2d00      	cmp	r5, #0
    810e:	d16e      	bne.n	81ee <__aeabi_dadd+0x312>
    8110:	1c70      	adds	r0, r6, #1
    8112:	0540      	lsls	r0, r0, #21
    8114:	0d40      	lsrs	r0, r0, #21
    8116:	2801      	cmp	r0, #1
    8118:	dc00      	bgt.n	811c <__aeabi_dadd+0x240>
    811a:	e0f9      	b.n	8310 <__aeabi_dadd+0x434>
    811c:	1ab8      	subs	r0, r7, r2
    811e:	4684      	mov	ip, r0
    8120:	4287      	cmp	r7, r0
    8122:	4180      	sbcs	r0, r0
    8124:	1ae5      	subs	r5, r4, r3
    8126:	4240      	negs	r0, r0
    8128:	1a2d      	subs	r5, r5, r0
    812a:	0228      	lsls	r0, r5, #8
    812c:	d400      	bmi.n	8130 <__aeabi_dadd+0x254>
    812e:	e089      	b.n	8244 <__aeabi_dadd+0x368>
    8130:	1bd7      	subs	r7, r2, r7
    8132:	42ba      	cmp	r2, r7
    8134:	4192      	sbcs	r2, r2
    8136:	1b1c      	subs	r4, r3, r4
    8138:	4252      	negs	r2, r2
    813a:	1aa5      	subs	r5, r4, r2
    813c:	46d8      	mov	r8, fp
    813e:	e729      	b.n	7f94 <__aeabi_dadd+0xb8>
    8140:	4645      	mov	r5, r8
    8142:	2400      	movs	r4, #0
    8144:	2700      	movs	r7, #0
    8146:	e76a      	b.n	801e <__aeabi_dadd+0x142>
    8148:	4c45      	ldr	r4, [pc, #276]	; (8260 <__aeabi_dadd+0x384>)
    814a:	1af6      	subs	r6, r6, r3
    814c:	402c      	ands	r4, r5
    814e:	e749      	b.n	7fe4 <__aeabi_dadd+0x108>
    8150:	003d      	movs	r5, r7
    8152:	3828      	subs	r0, #40	; 0x28
    8154:	4085      	lsls	r5, r0
    8156:	2700      	movs	r7, #0
    8158:	e72e      	b.n	7fb8 <__aeabi_dadd+0xdc>
    815a:	0038      	movs	r0, r7
    815c:	f001 fb04 	bl	9768 <__clzsi2>
    8160:	3020      	adds	r0, #32
    8162:	e71d      	b.n	7fa0 <__aeabi_dadd+0xc4>
    8164:	430a      	orrs	r2, r1
    8166:	1e51      	subs	r1, r2, #1
    8168:	418a      	sbcs	r2, r1
    816a:	2100      	movs	r1, #0
    816c:	e707      	b.n	7f7e <__aeabi_dadd+0xa2>
    816e:	2b00      	cmp	r3, #0
    8170:	d000      	beq.n	8174 <__aeabi_dadd+0x298>
    8172:	e0f3      	b.n	835c <__aeabi_dadd+0x480>
    8174:	1c70      	adds	r0, r6, #1
    8176:	0543      	lsls	r3, r0, #21
    8178:	0d5b      	lsrs	r3, r3, #21
    817a:	2b01      	cmp	r3, #1
    817c:	dc00      	bgt.n	8180 <__aeabi_dadd+0x2a4>
    817e:	e0ad      	b.n	82dc <__aeabi_dadd+0x400>
    8180:	4b36      	ldr	r3, [pc, #216]	; (825c <__aeabi_dadd+0x380>)
    8182:	4298      	cmp	r0, r3
    8184:	d100      	bne.n	8188 <__aeabi_dadd+0x2ac>
    8186:	e0d1      	b.n	832c <__aeabi_dadd+0x450>
    8188:	18ba      	adds	r2, r7, r2
    818a:	42ba      	cmp	r2, r7
    818c:	41bf      	sbcs	r7, r7
    818e:	1864      	adds	r4, r4, r1
    8190:	427f      	negs	r7, r7
    8192:	19e4      	adds	r4, r4, r7
    8194:	07e7      	lsls	r7, r4, #31
    8196:	0852      	lsrs	r2, r2, #1
    8198:	4317      	orrs	r7, r2
    819a:	0864      	lsrs	r4, r4, #1
    819c:	0006      	movs	r6, r0
    819e:	e721      	b.n	7fe4 <__aeabi_dadd+0x108>
    81a0:	482e      	ldr	r0, [pc, #184]	; (825c <__aeabi_dadd+0x380>)
    81a2:	4285      	cmp	r5, r0
    81a4:	d100      	bne.n	81a8 <__aeabi_dadd+0x2cc>
    81a6:	e093      	b.n	82d0 <__aeabi_dadd+0x3f4>
    81a8:	001d      	movs	r5, r3
    81aa:	e6d0      	b.n	7f4e <__aeabi_dadd+0x72>
    81ac:	0029      	movs	r1, r5
    81ae:	3e1f      	subs	r6, #31
    81b0:	40f1      	lsrs	r1, r6
    81b2:	2b20      	cmp	r3, #32
    81b4:	d100      	bne.n	81b8 <__aeabi_dadd+0x2dc>
    81b6:	e08d      	b.n	82d4 <__aeabi_dadd+0x3f8>
    81b8:	2240      	movs	r2, #64	; 0x40
    81ba:	1ad3      	subs	r3, r2, r3
    81bc:	409d      	lsls	r5, r3
    81be:	432f      	orrs	r7, r5
    81c0:	1e7d      	subs	r5, r7, #1
    81c2:	41af      	sbcs	r7, r5
    81c4:	2400      	movs	r4, #0
    81c6:	430f      	orrs	r7, r1
    81c8:	2600      	movs	r6, #0
    81ca:	e744      	b.n	8056 <__aeabi_dadd+0x17a>
    81cc:	002b      	movs	r3, r5
    81ce:	0008      	movs	r0, r1
    81d0:	3b20      	subs	r3, #32
    81d2:	40d8      	lsrs	r0, r3
    81d4:	0003      	movs	r3, r0
    81d6:	2d20      	cmp	r5, #32
    81d8:	d100      	bne.n	81dc <__aeabi_dadd+0x300>
    81da:	e07d      	b.n	82d8 <__aeabi_dadd+0x3fc>
    81dc:	2040      	movs	r0, #64	; 0x40
    81de:	1b45      	subs	r5, r0, r5
    81e0:	40a9      	lsls	r1, r5
    81e2:	430a      	orrs	r2, r1
    81e4:	1e51      	subs	r1, r2, #1
    81e6:	418a      	sbcs	r2, r1
    81e8:	2100      	movs	r1, #0
    81ea:	431a      	orrs	r2, r3
    81ec:	e6c7      	b.n	7f7e <__aeabi_dadd+0xa2>
    81ee:	2e00      	cmp	r6, #0
    81f0:	d050      	beq.n	8294 <__aeabi_dadd+0x3b8>
    81f2:	4e1a      	ldr	r6, [pc, #104]	; (825c <__aeabi_dadd+0x380>)
    81f4:	42b0      	cmp	r0, r6
    81f6:	d057      	beq.n	82a8 <__aeabi_dadd+0x3cc>
    81f8:	2680      	movs	r6, #128	; 0x80
    81fa:	426b      	negs	r3, r5
    81fc:	4699      	mov	r9, r3
    81fe:	0436      	lsls	r6, r6, #16
    8200:	4334      	orrs	r4, r6
    8202:	464b      	mov	r3, r9
    8204:	2b38      	cmp	r3, #56	; 0x38
    8206:	dd00      	ble.n	820a <__aeabi_dadd+0x32e>
    8208:	e0d6      	b.n	83b8 <__aeabi_dadd+0x4dc>
    820a:	2b1f      	cmp	r3, #31
    820c:	dd00      	ble.n	8210 <__aeabi_dadd+0x334>
    820e:	e135      	b.n	847c <__aeabi_dadd+0x5a0>
    8210:	2620      	movs	r6, #32
    8212:	1af5      	subs	r5, r6, r3
    8214:	0026      	movs	r6, r4
    8216:	40ae      	lsls	r6, r5
    8218:	46b2      	mov	sl, r6
    821a:	003e      	movs	r6, r7
    821c:	40de      	lsrs	r6, r3
    821e:	46ac      	mov	ip, r5
    8220:	0035      	movs	r5, r6
    8222:	4656      	mov	r6, sl
    8224:	432e      	orrs	r6, r5
    8226:	4665      	mov	r5, ip
    8228:	40af      	lsls	r7, r5
    822a:	1e7d      	subs	r5, r7, #1
    822c:	41af      	sbcs	r7, r5
    822e:	40dc      	lsrs	r4, r3
    8230:	4337      	orrs	r7, r6
    8232:	1bd7      	subs	r7, r2, r7
    8234:	42ba      	cmp	r2, r7
    8236:	4192      	sbcs	r2, r2
    8238:	1b0c      	subs	r4, r1, r4
    823a:	4252      	negs	r2, r2
    823c:	1aa4      	subs	r4, r4, r2
    823e:	0006      	movs	r6, r0
    8240:	46d8      	mov	r8, fp
    8242:	e6a3      	b.n	7f8c <__aeabi_dadd+0xb0>
    8244:	4664      	mov	r4, ip
    8246:	4667      	mov	r7, ip
    8248:	432c      	orrs	r4, r5
    824a:	d000      	beq.n	824e <__aeabi_dadd+0x372>
    824c:	e6a2      	b.n	7f94 <__aeabi_dadd+0xb8>
    824e:	2500      	movs	r5, #0
    8250:	2600      	movs	r6, #0
    8252:	2700      	movs	r7, #0
    8254:	e706      	b.n	8064 <__aeabi_dadd+0x188>
    8256:	001e      	movs	r6, r3
    8258:	e6c4      	b.n	7fe4 <__aeabi_dadd+0x108>
    825a:	46c0      	nop			; (mov r8, r8)
    825c:	000007ff 	.word	0x000007ff
    8260:	ff7fffff 	.word	0xff7fffff
    8264:	800fffff 	.word	0x800fffff
    8268:	2b1f      	cmp	r3, #31
    826a:	dc63      	bgt.n	8334 <__aeabi_dadd+0x458>
    826c:	2020      	movs	r0, #32
    826e:	1ac3      	subs	r3, r0, r3
    8270:	0008      	movs	r0, r1
    8272:	4098      	lsls	r0, r3
    8274:	469c      	mov	ip, r3
    8276:	4683      	mov	fp, r0
    8278:	4653      	mov	r3, sl
    827a:	0010      	movs	r0, r2
    827c:	40d8      	lsrs	r0, r3
    827e:	0003      	movs	r3, r0
    8280:	4658      	mov	r0, fp
    8282:	4318      	orrs	r0, r3
    8284:	4663      	mov	r3, ip
    8286:	409a      	lsls	r2, r3
    8288:	1e53      	subs	r3, r2, #1
    828a:	419a      	sbcs	r2, r3
    828c:	4653      	mov	r3, sl
    828e:	4302      	orrs	r2, r0
    8290:	40d9      	lsrs	r1, r3
    8292:	e703      	b.n	809c <__aeabi_dadd+0x1c0>
    8294:	0026      	movs	r6, r4
    8296:	433e      	orrs	r6, r7
    8298:	d006      	beq.n	82a8 <__aeabi_dadd+0x3cc>
    829a:	43eb      	mvns	r3, r5
    829c:	4699      	mov	r9, r3
    829e:	2b00      	cmp	r3, #0
    82a0:	d0c7      	beq.n	8232 <__aeabi_dadd+0x356>
    82a2:	4e94      	ldr	r6, [pc, #592]	; (84f4 <__aeabi_dadd+0x618>)
    82a4:	42b0      	cmp	r0, r6
    82a6:	d1ac      	bne.n	8202 <__aeabi_dadd+0x326>
    82a8:	000c      	movs	r4, r1
    82aa:	0017      	movs	r7, r2
    82ac:	0006      	movs	r6, r0
    82ae:	46d8      	mov	r8, fp
    82b0:	e698      	b.n	7fe4 <__aeabi_dadd+0x108>
    82b2:	4b90      	ldr	r3, [pc, #576]	; (84f4 <__aeabi_dadd+0x618>)
    82b4:	459a      	cmp	sl, r3
    82b6:	d00b      	beq.n	82d0 <__aeabi_dadd+0x3f4>
    82b8:	4682      	mov	sl, r0
    82ba:	e6e7      	b.n	808c <__aeabi_dadd+0x1b0>
    82bc:	2800      	cmp	r0, #0
    82be:	d000      	beq.n	82c2 <__aeabi_dadd+0x3e6>
    82c0:	e09e      	b.n	8400 <__aeabi_dadd+0x524>
    82c2:	0018      	movs	r0, r3
    82c4:	4310      	orrs	r0, r2
    82c6:	d100      	bne.n	82ca <__aeabi_dadd+0x3ee>
    82c8:	e0e9      	b.n	849e <__aeabi_dadd+0x5c2>
    82ca:	001c      	movs	r4, r3
    82cc:	0017      	movs	r7, r2
    82ce:	46d8      	mov	r8, fp
    82d0:	4e88      	ldr	r6, [pc, #544]	; (84f4 <__aeabi_dadd+0x618>)
    82d2:	e687      	b.n	7fe4 <__aeabi_dadd+0x108>
    82d4:	2500      	movs	r5, #0
    82d6:	e772      	b.n	81be <__aeabi_dadd+0x2e2>
    82d8:	2100      	movs	r1, #0
    82da:	e782      	b.n	81e2 <__aeabi_dadd+0x306>
    82dc:	0023      	movs	r3, r4
    82de:	433b      	orrs	r3, r7
    82e0:	2e00      	cmp	r6, #0
    82e2:	d000      	beq.n	82e6 <__aeabi_dadd+0x40a>
    82e4:	e0ab      	b.n	843e <__aeabi_dadd+0x562>
    82e6:	2b00      	cmp	r3, #0
    82e8:	d100      	bne.n	82ec <__aeabi_dadd+0x410>
    82ea:	e0e7      	b.n	84bc <__aeabi_dadd+0x5e0>
    82ec:	000b      	movs	r3, r1
    82ee:	4313      	orrs	r3, r2
    82f0:	d100      	bne.n	82f4 <__aeabi_dadd+0x418>
    82f2:	e677      	b.n	7fe4 <__aeabi_dadd+0x108>
    82f4:	18ba      	adds	r2, r7, r2
    82f6:	42ba      	cmp	r2, r7
    82f8:	41bf      	sbcs	r7, r7
    82fa:	1864      	adds	r4, r4, r1
    82fc:	427f      	negs	r7, r7
    82fe:	19e4      	adds	r4, r4, r7
    8300:	0223      	lsls	r3, r4, #8
    8302:	d400      	bmi.n	8306 <__aeabi_dadd+0x42a>
    8304:	e0f2      	b.n	84ec <__aeabi_dadd+0x610>
    8306:	4b7c      	ldr	r3, [pc, #496]	; (84f8 <__aeabi_dadd+0x61c>)
    8308:	0017      	movs	r7, r2
    830a:	401c      	ands	r4, r3
    830c:	0006      	movs	r6, r0
    830e:	e669      	b.n	7fe4 <__aeabi_dadd+0x108>
    8310:	0020      	movs	r0, r4
    8312:	4338      	orrs	r0, r7
    8314:	2e00      	cmp	r6, #0
    8316:	d1d1      	bne.n	82bc <__aeabi_dadd+0x3e0>
    8318:	2800      	cmp	r0, #0
    831a:	d15b      	bne.n	83d4 <__aeabi_dadd+0x4f8>
    831c:	001c      	movs	r4, r3
    831e:	4314      	orrs	r4, r2
    8320:	d100      	bne.n	8324 <__aeabi_dadd+0x448>
    8322:	e0a8      	b.n	8476 <__aeabi_dadd+0x59a>
    8324:	001c      	movs	r4, r3
    8326:	0017      	movs	r7, r2
    8328:	46d8      	mov	r8, fp
    832a:	e65b      	b.n	7fe4 <__aeabi_dadd+0x108>
    832c:	0006      	movs	r6, r0
    832e:	2400      	movs	r4, #0
    8330:	2700      	movs	r7, #0
    8332:	e697      	b.n	8064 <__aeabi_dadd+0x188>
    8334:	4650      	mov	r0, sl
    8336:	000b      	movs	r3, r1
    8338:	3820      	subs	r0, #32
    833a:	40c3      	lsrs	r3, r0
    833c:	4699      	mov	r9, r3
    833e:	4653      	mov	r3, sl
    8340:	2b20      	cmp	r3, #32
    8342:	d100      	bne.n	8346 <__aeabi_dadd+0x46a>
    8344:	e095      	b.n	8472 <__aeabi_dadd+0x596>
    8346:	2340      	movs	r3, #64	; 0x40
    8348:	4650      	mov	r0, sl
    834a:	1a1b      	subs	r3, r3, r0
    834c:	4099      	lsls	r1, r3
    834e:	430a      	orrs	r2, r1
    8350:	1e51      	subs	r1, r2, #1
    8352:	418a      	sbcs	r2, r1
    8354:	464b      	mov	r3, r9
    8356:	2100      	movs	r1, #0
    8358:	431a      	orrs	r2, r3
    835a:	e69f      	b.n	809c <__aeabi_dadd+0x1c0>
    835c:	2e00      	cmp	r6, #0
    835e:	d130      	bne.n	83c2 <__aeabi_dadd+0x4e6>
    8360:	0026      	movs	r6, r4
    8362:	433e      	orrs	r6, r7
    8364:	d067      	beq.n	8436 <__aeabi_dadd+0x55a>
    8366:	43db      	mvns	r3, r3
    8368:	469a      	mov	sl, r3
    836a:	2b00      	cmp	r3, #0
    836c:	d01c      	beq.n	83a8 <__aeabi_dadd+0x4cc>
    836e:	4e61      	ldr	r6, [pc, #388]	; (84f4 <__aeabi_dadd+0x618>)
    8370:	42b0      	cmp	r0, r6
    8372:	d060      	beq.n	8436 <__aeabi_dadd+0x55a>
    8374:	4653      	mov	r3, sl
    8376:	2b38      	cmp	r3, #56	; 0x38
    8378:	dd00      	ble.n	837c <__aeabi_dadd+0x4a0>
    837a:	e096      	b.n	84aa <__aeabi_dadd+0x5ce>
    837c:	2b1f      	cmp	r3, #31
    837e:	dd00      	ble.n	8382 <__aeabi_dadd+0x4a6>
    8380:	e09f      	b.n	84c2 <__aeabi_dadd+0x5e6>
    8382:	2620      	movs	r6, #32
    8384:	1af3      	subs	r3, r6, r3
    8386:	0026      	movs	r6, r4
    8388:	409e      	lsls	r6, r3
    838a:	469c      	mov	ip, r3
    838c:	46b3      	mov	fp, r6
    838e:	4653      	mov	r3, sl
    8390:	003e      	movs	r6, r7
    8392:	40de      	lsrs	r6, r3
    8394:	0033      	movs	r3, r6
    8396:	465e      	mov	r6, fp
    8398:	431e      	orrs	r6, r3
    839a:	4663      	mov	r3, ip
    839c:	409f      	lsls	r7, r3
    839e:	1e7b      	subs	r3, r7, #1
    83a0:	419f      	sbcs	r7, r3
    83a2:	4653      	mov	r3, sl
    83a4:	40dc      	lsrs	r4, r3
    83a6:	4337      	orrs	r7, r6
    83a8:	18bf      	adds	r7, r7, r2
    83aa:	4297      	cmp	r7, r2
    83ac:	4192      	sbcs	r2, r2
    83ae:	1864      	adds	r4, r4, r1
    83b0:	4252      	negs	r2, r2
    83b2:	18a4      	adds	r4, r4, r2
    83b4:	0006      	movs	r6, r0
    83b6:	e678      	b.n	80aa <__aeabi_dadd+0x1ce>
    83b8:	4327      	orrs	r7, r4
    83ba:	1e7c      	subs	r4, r7, #1
    83bc:	41a7      	sbcs	r7, r4
    83be:	2400      	movs	r4, #0
    83c0:	e737      	b.n	8232 <__aeabi_dadd+0x356>
    83c2:	4e4c      	ldr	r6, [pc, #304]	; (84f4 <__aeabi_dadd+0x618>)
    83c4:	42b0      	cmp	r0, r6
    83c6:	d036      	beq.n	8436 <__aeabi_dadd+0x55a>
    83c8:	2680      	movs	r6, #128	; 0x80
    83ca:	425b      	negs	r3, r3
    83cc:	0436      	lsls	r6, r6, #16
    83ce:	469a      	mov	sl, r3
    83d0:	4334      	orrs	r4, r6
    83d2:	e7cf      	b.n	8374 <__aeabi_dadd+0x498>
    83d4:	0018      	movs	r0, r3
    83d6:	4310      	orrs	r0, r2
    83d8:	d100      	bne.n	83dc <__aeabi_dadd+0x500>
    83da:	e603      	b.n	7fe4 <__aeabi_dadd+0x108>
    83dc:	1ab8      	subs	r0, r7, r2
    83de:	4684      	mov	ip, r0
    83e0:	4567      	cmp	r7, ip
    83e2:	41ad      	sbcs	r5, r5
    83e4:	1ae0      	subs	r0, r4, r3
    83e6:	426d      	negs	r5, r5
    83e8:	1b40      	subs	r0, r0, r5
    83ea:	0205      	lsls	r5, r0, #8
    83ec:	d400      	bmi.n	83f0 <__aeabi_dadd+0x514>
    83ee:	e62c      	b.n	804a <__aeabi_dadd+0x16e>
    83f0:	1bd7      	subs	r7, r2, r7
    83f2:	42ba      	cmp	r2, r7
    83f4:	4192      	sbcs	r2, r2
    83f6:	1b1c      	subs	r4, r3, r4
    83f8:	4252      	negs	r2, r2
    83fa:	1aa4      	subs	r4, r4, r2
    83fc:	46d8      	mov	r8, fp
    83fe:	e5f1      	b.n	7fe4 <__aeabi_dadd+0x108>
    8400:	0018      	movs	r0, r3
    8402:	4310      	orrs	r0, r2
    8404:	d100      	bne.n	8408 <__aeabi_dadd+0x52c>
    8406:	e763      	b.n	82d0 <__aeabi_dadd+0x3f4>
    8408:	08f8      	lsrs	r0, r7, #3
    840a:	0767      	lsls	r7, r4, #29
    840c:	4307      	orrs	r7, r0
    840e:	2080      	movs	r0, #128	; 0x80
    8410:	08e4      	lsrs	r4, r4, #3
    8412:	0300      	lsls	r0, r0, #12
    8414:	4204      	tst	r4, r0
    8416:	d008      	beq.n	842a <__aeabi_dadd+0x54e>
    8418:	08dd      	lsrs	r5, r3, #3
    841a:	4205      	tst	r5, r0
    841c:	d105      	bne.n	842a <__aeabi_dadd+0x54e>
    841e:	08d2      	lsrs	r2, r2, #3
    8420:	0759      	lsls	r1, r3, #29
    8422:	4311      	orrs	r1, r2
    8424:	000f      	movs	r7, r1
    8426:	002c      	movs	r4, r5
    8428:	46d8      	mov	r8, fp
    842a:	0f7b      	lsrs	r3, r7, #29
    842c:	00e4      	lsls	r4, r4, #3
    842e:	431c      	orrs	r4, r3
    8430:	00ff      	lsls	r7, r7, #3
    8432:	4e30      	ldr	r6, [pc, #192]	; (84f4 <__aeabi_dadd+0x618>)
    8434:	e5d6      	b.n	7fe4 <__aeabi_dadd+0x108>
    8436:	000c      	movs	r4, r1
    8438:	0017      	movs	r7, r2
    843a:	0006      	movs	r6, r0
    843c:	e5d2      	b.n	7fe4 <__aeabi_dadd+0x108>
    843e:	2b00      	cmp	r3, #0
    8440:	d038      	beq.n	84b4 <__aeabi_dadd+0x5d8>
    8442:	000b      	movs	r3, r1
    8444:	4313      	orrs	r3, r2
    8446:	d100      	bne.n	844a <__aeabi_dadd+0x56e>
    8448:	e742      	b.n	82d0 <__aeabi_dadd+0x3f4>
    844a:	08f8      	lsrs	r0, r7, #3
    844c:	0767      	lsls	r7, r4, #29
    844e:	4307      	orrs	r7, r0
    8450:	2080      	movs	r0, #128	; 0x80
    8452:	08e4      	lsrs	r4, r4, #3
    8454:	0300      	lsls	r0, r0, #12
    8456:	4204      	tst	r4, r0
    8458:	d0e7      	beq.n	842a <__aeabi_dadd+0x54e>
    845a:	08cb      	lsrs	r3, r1, #3
    845c:	4203      	tst	r3, r0
    845e:	d1e4      	bne.n	842a <__aeabi_dadd+0x54e>
    8460:	08d2      	lsrs	r2, r2, #3
    8462:	0749      	lsls	r1, r1, #29
    8464:	4311      	orrs	r1, r2
    8466:	000f      	movs	r7, r1
    8468:	001c      	movs	r4, r3
    846a:	e7de      	b.n	842a <__aeabi_dadd+0x54e>
    846c:	2700      	movs	r7, #0
    846e:	2400      	movs	r4, #0
    8470:	e5d5      	b.n	801e <__aeabi_dadd+0x142>
    8472:	2100      	movs	r1, #0
    8474:	e76b      	b.n	834e <__aeabi_dadd+0x472>
    8476:	2500      	movs	r5, #0
    8478:	2700      	movs	r7, #0
    847a:	e5f3      	b.n	8064 <__aeabi_dadd+0x188>
    847c:	464e      	mov	r6, r9
    847e:	0025      	movs	r5, r4
    8480:	3e20      	subs	r6, #32
    8482:	40f5      	lsrs	r5, r6
    8484:	464b      	mov	r3, r9
    8486:	002e      	movs	r6, r5
    8488:	2b20      	cmp	r3, #32
    848a:	d02d      	beq.n	84e8 <__aeabi_dadd+0x60c>
    848c:	2540      	movs	r5, #64	; 0x40
    848e:	1aed      	subs	r5, r5, r3
    8490:	40ac      	lsls	r4, r5
    8492:	4327      	orrs	r7, r4
    8494:	1e7c      	subs	r4, r7, #1
    8496:	41a7      	sbcs	r7, r4
    8498:	2400      	movs	r4, #0
    849a:	4337      	orrs	r7, r6
    849c:	e6c9      	b.n	8232 <__aeabi_dadd+0x356>
    849e:	2480      	movs	r4, #128	; 0x80
    84a0:	2500      	movs	r5, #0
    84a2:	0324      	lsls	r4, r4, #12
    84a4:	4e13      	ldr	r6, [pc, #76]	; (84f4 <__aeabi_dadd+0x618>)
    84a6:	2700      	movs	r7, #0
    84a8:	e5dc      	b.n	8064 <__aeabi_dadd+0x188>
    84aa:	4327      	orrs	r7, r4
    84ac:	1e7c      	subs	r4, r7, #1
    84ae:	41a7      	sbcs	r7, r4
    84b0:	2400      	movs	r4, #0
    84b2:	e779      	b.n	83a8 <__aeabi_dadd+0x4cc>
    84b4:	000c      	movs	r4, r1
    84b6:	0017      	movs	r7, r2
    84b8:	4e0e      	ldr	r6, [pc, #56]	; (84f4 <__aeabi_dadd+0x618>)
    84ba:	e593      	b.n	7fe4 <__aeabi_dadd+0x108>
    84bc:	000c      	movs	r4, r1
    84be:	0017      	movs	r7, r2
    84c0:	e590      	b.n	7fe4 <__aeabi_dadd+0x108>
    84c2:	4656      	mov	r6, sl
    84c4:	0023      	movs	r3, r4
    84c6:	3e20      	subs	r6, #32
    84c8:	40f3      	lsrs	r3, r6
    84ca:	4699      	mov	r9, r3
    84cc:	4653      	mov	r3, sl
    84ce:	2b20      	cmp	r3, #32
    84d0:	d00e      	beq.n	84f0 <__aeabi_dadd+0x614>
    84d2:	2340      	movs	r3, #64	; 0x40
    84d4:	4656      	mov	r6, sl
    84d6:	1b9b      	subs	r3, r3, r6
    84d8:	409c      	lsls	r4, r3
    84da:	4327      	orrs	r7, r4
    84dc:	1e7c      	subs	r4, r7, #1
    84de:	41a7      	sbcs	r7, r4
    84e0:	464b      	mov	r3, r9
    84e2:	2400      	movs	r4, #0
    84e4:	431f      	orrs	r7, r3
    84e6:	e75f      	b.n	83a8 <__aeabi_dadd+0x4cc>
    84e8:	2400      	movs	r4, #0
    84ea:	e7d2      	b.n	8492 <__aeabi_dadd+0x5b6>
    84ec:	0017      	movs	r7, r2
    84ee:	e5b2      	b.n	8056 <__aeabi_dadd+0x17a>
    84f0:	2400      	movs	r4, #0
    84f2:	e7f2      	b.n	84da <__aeabi_dadd+0x5fe>
    84f4:	000007ff 	.word	0x000007ff
    84f8:	ff7fffff 	.word	0xff7fffff

000084fc <__aeabi_ddiv>:
    84fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    84fe:	4657      	mov	r7, sl
    8500:	4645      	mov	r5, r8
    8502:	46de      	mov	lr, fp
    8504:	464e      	mov	r6, r9
    8506:	b5e0      	push	{r5, r6, r7, lr}
    8508:	004c      	lsls	r4, r1, #1
    850a:	030e      	lsls	r6, r1, #12
    850c:	b087      	sub	sp, #28
    850e:	4683      	mov	fp, r0
    8510:	4692      	mov	sl, r2
    8512:	001d      	movs	r5, r3
    8514:	4680      	mov	r8, r0
    8516:	0b36      	lsrs	r6, r6, #12
    8518:	0d64      	lsrs	r4, r4, #21
    851a:	0fcf      	lsrs	r7, r1, #31
    851c:	2c00      	cmp	r4, #0
    851e:	d04f      	beq.n	85c0 <__aeabi_ddiv+0xc4>
    8520:	4b6f      	ldr	r3, [pc, #444]	; (86e0 <__aeabi_ddiv+0x1e4>)
    8522:	429c      	cmp	r4, r3
    8524:	d035      	beq.n	8592 <__aeabi_ddiv+0x96>
    8526:	2380      	movs	r3, #128	; 0x80
    8528:	0f42      	lsrs	r2, r0, #29
    852a:	041b      	lsls	r3, r3, #16
    852c:	00f6      	lsls	r6, r6, #3
    852e:	4313      	orrs	r3, r2
    8530:	4333      	orrs	r3, r6
    8532:	4699      	mov	r9, r3
    8534:	00c3      	lsls	r3, r0, #3
    8536:	4698      	mov	r8, r3
    8538:	4b6a      	ldr	r3, [pc, #424]	; (86e4 <__aeabi_ddiv+0x1e8>)
    853a:	2600      	movs	r6, #0
    853c:	469c      	mov	ip, r3
    853e:	2300      	movs	r3, #0
    8540:	4464      	add	r4, ip
    8542:	9303      	str	r3, [sp, #12]
    8544:	032b      	lsls	r3, r5, #12
    8546:	0b1b      	lsrs	r3, r3, #12
    8548:	469b      	mov	fp, r3
    854a:	006b      	lsls	r3, r5, #1
    854c:	0fed      	lsrs	r5, r5, #31
    854e:	4650      	mov	r0, sl
    8550:	0d5b      	lsrs	r3, r3, #21
    8552:	9501      	str	r5, [sp, #4]
    8554:	d05e      	beq.n	8614 <__aeabi_ddiv+0x118>
    8556:	4a62      	ldr	r2, [pc, #392]	; (86e0 <__aeabi_ddiv+0x1e4>)
    8558:	4293      	cmp	r3, r2
    855a:	d053      	beq.n	8604 <__aeabi_ddiv+0x108>
    855c:	465a      	mov	r2, fp
    855e:	00d1      	lsls	r1, r2, #3
    8560:	2280      	movs	r2, #128	; 0x80
    8562:	0f40      	lsrs	r0, r0, #29
    8564:	0412      	lsls	r2, r2, #16
    8566:	4302      	orrs	r2, r0
    8568:	430a      	orrs	r2, r1
    856a:	4693      	mov	fp, r2
    856c:	4652      	mov	r2, sl
    856e:	00d1      	lsls	r1, r2, #3
    8570:	4a5c      	ldr	r2, [pc, #368]	; (86e4 <__aeabi_ddiv+0x1e8>)
    8572:	4694      	mov	ip, r2
    8574:	2200      	movs	r2, #0
    8576:	4463      	add	r3, ip
    8578:	0038      	movs	r0, r7
    857a:	4068      	eors	r0, r5
    857c:	4684      	mov	ip, r0
    857e:	9002      	str	r0, [sp, #8]
    8580:	1ae4      	subs	r4, r4, r3
    8582:	4316      	orrs	r6, r2
    8584:	2e0f      	cmp	r6, #15
    8586:	d900      	bls.n	858a <__aeabi_ddiv+0x8e>
    8588:	e0b4      	b.n	86f4 <__aeabi_ddiv+0x1f8>
    858a:	4b57      	ldr	r3, [pc, #348]	; (86e8 <__aeabi_ddiv+0x1ec>)
    858c:	00b6      	lsls	r6, r6, #2
    858e:	599b      	ldr	r3, [r3, r6]
    8590:	469f      	mov	pc, r3
    8592:	0003      	movs	r3, r0
    8594:	4333      	orrs	r3, r6
    8596:	4699      	mov	r9, r3
    8598:	d16c      	bne.n	8674 <__aeabi_ddiv+0x178>
    859a:	2300      	movs	r3, #0
    859c:	4698      	mov	r8, r3
    859e:	3302      	adds	r3, #2
    85a0:	2608      	movs	r6, #8
    85a2:	9303      	str	r3, [sp, #12]
    85a4:	e7ce      	b.n	8544 <__aeabi_ddiv+0x48>
    85a6:	46cb      	mov	fp, r9
    85a8:	4641      	mov	r1, r8
    85aa:	9a03      	ldr	r2, [sp, #12]
    85ac:	9701      	str	r7, [sp, #4]
    85ae:	2a02      	cmp	r2, #2
    85b0:	d165      	bne.n	867e <__aeabi_ddiv+0x182>
    85b2:	9b01      	ldr	r3, [sp, #4]
    85b4:	4c4a      	ldr	r4, [pc, #296]	; (86e0 <__aeabi_ddiv+0x1e4>)
    85b6:	469c      	mov	ip, r3
    85b8:	2300      	movs	r3, #0
    85ba:	2200      	movs	r2, #0
    85bc:	4698      	mov	r8, r3
    85be:	e06b      	b.n	8698 <__aeabi_ddiv+0x19c>
    85c0:	0003      	movs	r3, r0
    85c2:	4333      	orrs	r3, r6
    85c4:	4699      	mov	r9, r3
    85c6:	d04e      	beq.n	8666 <__aeabi_ddiv+0x16a>
    85c8:	2e00      	cmp	r6, #0
    85ca:	d100      	bne.n	85ce <__aeabi_ddiv+0xd2>
    85cc:	e1bc      	b.n	8948 <__aeabi_ddiv+0x44c>
    85ce:	0030      	movs	r0, r6
    85d0:	f001 f8ca 	bl	9768 <__clzsi2>
    85d4:	0003      	movs	r3, r0
    85d6:	3b0b      	subs	r3, #11
    85d8:	2b1c      	cmp	r3, #28
    85da:	dd00      	ble.n	85de <__aeabi_ddiv+0xe2>
    85dc:	e1ac      	b.n	8938 <__aeabi_ddiv+0x43c>
    85de:	221d      	movs	r2, #29
    85e0:	1ad3      	subs	r3, r2, r3
    85e2:	465a      	mov	r2, fp
    85e4:	0001      	movs	r1, r0
    85e6:	40da      	lsrs	r2, r3
    85e8:	3908      	subs	r1, #8
    85ea:	408e      	lsls	r6, r1
    85ec:	0013      	movs	r3, r2
    85ee:	4333      	orrs	r3, r6
    85f0:	4699      	mov	r9, r3
    85f2:	465b      	mov	r3, fp
    85f4:	408b      	lsls	r3, r1
    85f6:	4698      	mov	r8, r3
    85f8:	2300      	movs	r3, #0
    85fa:	4c3c      	ldr	r4, [pc, #240]	; (86ec <__aeabi_ddiv+0x1f0>)
    85fc:	2600      	movs	r6, #0
    85fe:	1a24      	subs	r4, r4, r0
    8600:	9303      	str	r3, [sp, #12]
    8602:	e79f      	b.n	8544 <__aeabi_ddiv+0x48>
    8604:	4651      	mov	r1, sl
    8606:	465a      	mov	r2, fp
    8608:	4311      	orrs	r1, r2
    860a:	d129      	bne.n	8660 <__aeabi_ddiv+0x164>
    860c:	2200      	movs	r2, #0
    860e:	4693      	mov	fp, r2
    8610:	3202      	adds	r2, #2
    8612:	e7b1      	b.n	8578 <__aeabi_ddiv+0x7c>
    8614:	4659      	mov	r1, fp
    8616:	4301      	orrs	r1, r0
    8618:	d01e      	beq.n	8658 <__aeabi_ddiv+0x15c>
    861a:	465b      	mov	r3, fp
    861c:	2b00      	cmp	r3, #0
    861e:	d100      	bne.n	8622 <__aeabi_ddiv+0x126>
    8620:	e19e      	b.n	8960 <__aeabi_ddiv+0x464>
    8622:	4658      	mov	r0, fp
    8624:	f001 f8a0 	bl	9768 <__clzsi2>
    8628:	0003      	movs	r3, r0
    862a:	3b0b      	subs	r3, #11
    862c:	2b1c      	cmp	r3, #28
    862e:	dd00      	ble.n	8632 <__aeabi_ddiv+0x136>
    8630:	e18f      	b.n	8952 <__aeabi_ddiv+0x456>
    8632:	0002      	movs	r2, r0
    8634:	4659      	mov	r1, fp
    8636:	3a08      	subs	r2, #8
    8638:	4091      	lsls	r1, r2
    863a:	468b      	mov	fp, r1
    863c:	211d      	movs	r1, #29
    863e:	1acb      	subs	r3, r1, r3
    8640:	4651      	mov	r1, sl
    8642:	40d9      	lsrs	r1, r3
    8644:	000b      	movs	r3, r1
    8646:	4659      	mov	r1, fp
    8648:	430b      	orrs	r3, r1
    864a:	4651      	mov	r1, sl
    864c:	469b      	mov	fp, r3
    864e:	4091      	lsls	r1, r2
    8650:	4b26      	ldr	r3, [pc, #152]	; (86ec <__aeabi_ddiv+0x1f0>)
    8652:	2200      	movs	r2, #0
    8654:	1a1b      	subs	r3, r3, r0
    8656:	e78f      	b.n	8578 <__aeabi_ddiv+0x7c>
    8658:	2300      	movs	r3, #0
    865a:	2201      	movs	r2, #1
    865c:	469b      	mov	fp, r3
    865e:	e78b      	b.n	8578 <__aeabi_ddiv+0x7c>
    8660:	4651      	mov	r1, sl
    8662:	2203      	movs	r2, #3
    8664:	e788      	b.n	8578 <__aeabi_ddiv+0x7c>
    8666:	2300      	movs	r3, #0
    8668:	4698      	mov	r8, r3
    866a:	3301      	adds	r3, #1
    866c:	2604      	movs	r6, #4
    866e:	2400      	movs	r4, #0
    8670:	9303      	str	r3, [sp, #12]
    8672:	e767      	b.n	8544 <__aeabi_ddiv+0x48>
    8674:	2303      	movs	r3, #3
    8676:	46b1      	mov	r9, r6
    8678:	9303      	str	r3, [sp, #12]
    867a:	260c      	movs	r6, #12
    867c:	e762      	b.n	8544 <__aeabi_ddiv+0x48>
    867e:	2a03      	cmp	r2, #3
    8680:	d100      	bne.n	8684 <__aeabi_ddiv+0x188>
    8682:	e25c      	b.n	8b3e <__aeabi_ddiv+0x642>
    8684:	9b01      	ldr	r3, [sp, #4]
    8686:	2a01      	cmp	r2, #1
    8688:	d000      	beq.n	868c <__aeabi_ddiv+0x190>
    868a:	e1e4      	b.n	8a56 <__aeabi_ddiv+0x55a>
    868c:	4013      	ands	r3, r2
    868e:	469c      	mov	ip, r3
    8690:	2300      	movs	r3, #0
    8692:	2400      	movs	r4, #0
    8694:	2200      	movs	r2, #0
    8696:	4698      	mov	r8, r3
    8698:	2100      	movs	r1, #0
    869a:	0312      	lsls	r2, r2, #12
    869c:	0b13      	lsrs	r3, r2, #12
    869e:	0d0a      	lsrs	r2, r1, #20
    86a0:	0512      	lsls	r2, r2, #20
    86a2:	431a      	orrs	r2, r3
    86a4:	0523      	lsls	r3, r4, #20
    86a6:	4c12      	ldr	r4, [pc, #72]	; (86f0 <__aeabi_ddiv+0x1f4>)
    86a8:	4640      	mov	r0, r8
    86aa:	4022      	ands	r2, r4
    86ac:	4313      	orrs	r3, r2
    86ae:	4662      	mov	r2, ip
    86b0:	005b      	lsls	r3, r3, #1
    86b2:	07d2      	lsls	r2, r2, #31
    86b4:	085b      	lsrs	r3, r3, #1
    86b6:	4313      	orrs	r3, r2
    86b8:	0019      	movs	r1, r3
    86ba:	b007      	add	sp, #28
    86bc:	bc3c      	pop	{r2, r3, r4, r5}
    86be:	4690      	mov	r8, r2
    86c0:	4699      	mov	r9, r3
    86c2:	46a2      	mov	sl, r4
    86c4:	46ab      	mov	fp, r5
    86c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    86c8:	2300      	movs	r3, #0
    86ca:	2280      	movs	r2, #128	; 0x80
    86cc:	469c      	mov	ip, r3
    86ce:	0312      	lsls	r2, r2, #12
    86d0:	4698      	mov	r8, r3
    86d2:	4c03      	ldr	r4, [pc, #12]	; (86e0 <__aeabi_ddiv+0x1e4>)
    86d4:	e7e0      	b.n	8698 <__aeabi_ddiv+0x19c>
    86d6:	2300      	movs	r3, #0
    86d8:	4c01      	ldr	r4, [pc, #4]	; (86e0 <__aeabi_ddiv+0x1e4>)
    86da:	2200      	movs	r2, #0
    86dc:	4698      	mov	r8, r3
    86de:	e7db      	b.n	8698 <__aeabi_ddiv+0x19c>
    86e0:	000007ff 	.word	0x000007ff
    86e4:	fffffc01 	.word	0xfffffc01
    86e8:	0000c0c4 	.word	0x0000c0c4
    86ec:	fffffc0d 	.word	0xfffffc0d
    86f0:	800fffff 	.word	0x800fffff
    86f4:	45d9      	cmp	r9, fp
    86f6:	d900      	bls.n	86fa <__aeabi_ddiv+0x1fe>
    86f8:	e139      	b.n	896e <__aeabi_ddiv+0x472>
    86fa:	d100      	bne.n	86fe <__aeabi_ddiv+0x202>
    86fc:	e134      	b.n	8968 <__aeabi_ddiv+0x46c>
    86fe:	2300      	movs	r3, #0
    8700:	4646      	mov	r6, r8
    8702:	464d      	mov	r5, r9
    8704:	469a      	mov	sl, r3
    8706:	3c01      	subs	r4, #1
    8708:	465b      	mov	r3, fp
    870a:	0e0a      	lsrs	r2, r1, #24
    870c:	021b      	lsls	r3, r3, #8
    870e:	431a      	orrs	r2, r3
    8710:	020b      	lsls	r3, r1, #8
    8712:	0c17      	lsrs	r7, r2, #16
    8714:	9303      	str	r3, [sp, #12]
    8716:	0413      	lsls	r3, r2, #16
    8718:	0c1b      	lsrs	r3, r3, #16
    871a:	0039      	movs	r1, r7
    871c:	0028      	movs	r0, r5
    871e:	4690      	mov	r8, r2
    8720:	9301      	str	r3, [sp, #4]
    8722:	f7ff fa3b 	bl	7b9c <__udivsi3>
    8726:	0002      	movs	r2, r0
    8728:	9b01      	ldr	r3, [sp, #4]
    872a:	4683      	mov	fp, r0
    872c:	435a      	muls	r2, r3
    872e:	0028      	movs	r0, r5
    8730:	0039      	movs	r1, r7
    8732:	4691      	mov	r9, r2
    8734:	f7ff fab8 	bl	7ca8 <__aeabi_uidivmod>
    8738:	0c35      	lsrs	r5, r6, #16
    873a:	0409      	lsls	r1, r1, #16
    873c:	430d      	orrs	r5, r1
    873e:	45a9      	cmp	r9, r5
    8740:	d90d      	bls.n	875e <__aeabi_ddiv+0x262>
    8742:	465b      	mov	r3, fp
    8744:	4445      	add	r5, r8
    8746:	3b01      	subs	r3, #1
    8748:	45a8      	cmp	r8, r5
    874a:	d900      	bls.n	874e <__aeabi_ddiv+0x252>
    874c:	e13a      	b.n	89c4 <__aeabi_ddiv+0x4c8>
    874e:	45a9      	cmp	r9, r5
    8750:	d800      	bhi.n	8754 <__aeabi_ddiv+0x258>
    8752:	e137      	b.n	89c4 <__aeabi_ddiv+0x4c8>
    8754:	2302      	movs	r3, #2
    8756:	425b      	negs	r3, r3
    8758:	469c      	mov	ip, r3
    875a:	4445      	add	r5, r8
    875c:	44e3      	add	fp, ip
    875e:	464b      	mov	r3, r9
    8760:	1aeb      	subs	r3, r5, r3
    8762:	0039      	movs	r1, r7
    8764:	0018      	movs	r0, r3
    8766:	9304      	str	r3, [sp, #16]
    8768:	f7ff fa18 	bl	7b9c <__udivsi3>
    876c:	9b01      	ldr	r3, [sp, #4]
    876e:	0005      	movs	r5, r0
    8770:	4343      	muls	r3, r0
    8772:	0039      	movs	r1, r7
    8774:	9804      	ldr	r0, [sp, #16]
    8776:	4699      	mov	r9, r3
    8778:	f7ff fa96 	bl	7ca8 <__aeabi_uidivmod>
    877c:	0433      	lsls	r3, r6, #16
    877e:	0409      	lsls	r1, r1, #16
    8780:	0c1b      	lsrs	r3, r3, #16
    8782:	430b      	orrs	r3, r1
    8784:	4599      	cmp	r9, r3
    8786:	d909      	bls.n	879c <__aeabi_ddiv+0x2a0>
    8788:	4443      	add	r3, r8
    878a:	1e6a      	subs	r2, r5, #1
    878c:	4598      	cmp	r8, r3
    878e:	d900      	bls.n	8792 <__aeabi_ddiv+0x296>
    8790:	e11a      	b.n	89c8 <__aeabi_ddiv+0x4cc>
    8792:	4599      	cmp	r9, r3
    8794:	d800      	bhi.n	8798 <__aeabi_ddiv+0x29c>
    8796:	e117      	b.n	89c8 <__aeabi_ddiv+0x4cc>
    8798:	3d02      	subs	r5, #2
    879a:	4443      	add	r3, r8
    879c:	464a      	mov	r2, r9
    879e:	1a9b      	subs	r3, r3, r2
    87a0:	465a      	mov	r2, fp
    87a2:	0412      	lsls	r2, r2, #16
    87a4:	432a      	orrs	r2, r5
    87a6:	9903      	ldr	r1, [sp, #12]
    87a8:	4693      	mov	fp, r2
    87aa:	0c10      	lsrs	r0, r2, #16
    87ac:	0c0a      	lsrs	r2, r1, #16
    87ae:	4691      	mov	r9, r2
    87b0:	0409      	lsls	r1, r1, #16
    87b2:	465a      	mov	r2, fp
    87b4:	0c09      	lsrs	r1, r1, #16
    87b6:	464e      	mov	r6, r9
    87b8:	000d      	movs	r5, r1
    87ba:	0412      	lsls	r2, r2, #16
    87bc:	0c12      	lsrs	r2, r2, #16
    87be:	4345      	muls	r5, r0
    87c0:	9105      	str	r1, [sp, #20]
    87c2:	4351      	muls	r1, r2
    87c4:	4372      	muls	r2, r6
    87c6:	4370      	muls	r0, r6
    87c8:	1952      	adds	r2, r2, r5
    87ca:	0c0e      	lsrs	r6, r1, #16
    87cc:	18b2      	adds	r2, r6, r2
    87ce:	4295      	cmp	r5, r2
    87d0:	d903      	bls.n	87da <__aeabi_ddiv+0x2de>
    87d2:	2580      	movs	r5, #128	; 0x80
    87d4:	026d      	lsls	r5, r5, #9
    87d6:	46ac      	mov	ip, r5
    87d8:	4460      	add	r0, ip
    87da:	0c15      	lsrs	r5, r2, #16
    87dc:	0409      	lsls	r1, r1, #16
    87de:	0412      	lsls	r2, r2, #16
    87e0:	0c09      	lsrs	r1, r1, #16
    87e2:	1828      	adds	r0, r5, r0
    87e4:	1852      	adds	r2, r2, r1
    87e6:	4283      	cmp	r3, r0
    87e8:	d200      	bcs.n	87ec <__aeabi_ddiv+0x2f0>
    87ea:	e0ce      	b.n	898a <__aeabi_ddiv+0x48e>
    87ec:	d100      	bne.n	87f0 <__aeabi_ddiv+0x2f4>
    87ee:	e0c8      	b.n	8982 <__aeabi_ddiv+0x486>
    87f0:	1a1d      	subs	r5, r3, r0
    87f2:	4653      	mov	r3, sl
    87f4:	1a9e      	subs	r6, r3, r2
    87f6:	45b2      	cmp	sl, r6
    87f8:	4192      	sbcs	r2, r2
    87fa:	4252      	negs	r2, r2
    87fc:	1aab      	subs	r3, r5, r2
    87fe:	469a      	mov	sl, r3
    8800:	4598      	cmp	r8, r3
    8802:	d100      	bne.n	8806 <__aeabi_ddiv+0x30a>
    8804:	e117      	b.n	8a36 <__aeabi_ddiv+0x53a>
    8806:	0039      	movs	r1, r7
    8808:	0018      	movs	r0, r3
    880a:	f7ff f9c7 	bl	7b9c <__udivsi3>
    880e:	9b01      	ldr	r3, [sp, #4]
    8810:	0005      	movs	r5, r0
    8812:	4343      	muls	r3, r0
    8814:	0039      	movs	r1, r7
    8816:	4650      	mov	r0, sl
    8818:	9304      	str	r3, [sp, #16]
    881a:	f7ff fa45 	bl	7ca8 <__aeabi_uidivmod>
    881e:	9804      	ldr	r0, [sp, #16]
    8820:	040b      	lsls	r3, r1, #16
    8822:	0c31      	lsrs	r1, r6, #16
    8824:	4319      	orrs	r1, r3
    8826:	4288      	cmp	r0, r1
    8828:	d909      	bls.n	883e <__aeabi_ddiv+0x342>
    882a:	4441      	add	r1, r8
    882c:	1e6b      	subs	r3, r5, #1
    882e:	4588      	cmp	r8, r1
    8830:	d900      	bls.n	8834 <__aeabi_ddiv+0x338>
    8832:	e107      	b.n	8a44 <__aeabi_ddiv+0x548>
    8834:	4288      	cmp	r0, r1
    8836:	d800      	bhi.n	883a <__aeabi_ddiv+0x33e>
    8838:	e104      	b.n	8a44 <__aeabi_ddiv+0x548>
    883a:	3d02      	subs	r5, #2
    883c:	4441      	add	r1, r8
    883e:	9b04      	ldr	r3, [sp, #16]
    8840:	1acb      	subs	r3, r1, r3
    8842:	0018      	movs	r0, r3
    8844:	0039      	movs	r1, r7
    8846:	9304      	str	r3, [sp, #16]
    8848:	f7ff f9a8 	bl	7b9c <__udivsi3>
    884c:	9b01      	ldr	r3, [sp, #4]
    884e:	4682      	mov	sl, r0
    8850:	4343      	muls	r3, r0
    8852:	0039      	movs	r1, r7
    8854:	9804      	ldr	r0, [sp, #16]
    8856:	9301      	str	r3, [sp, #4]
    8858:	f7ff fa26 	bl	7ca8 <__aeabi_uidivmod>
    885c:	9801      	ldr	r0, [sp, #4]
    885e:	040b      	lsls	r3, r1, #16
    8860:	0431      	lsls	r1, r6, #16
    8862:	0c09      	lsrs	r1, r1, #16
    8864:	4319      	orrs	r1, r3
    8866:	4288      	cmp	r0, r1
    8868:	d90d      	bls.n	8886 <__aeabi_ddiv+0x38a>
    886a:	4653      	mov	r3, sl
    886c:	4441      	add	r1, r8
    886e:	3b01      	subs	r3, #1
    8870:	4588      	cmp	r8, r1
    8872:	d900      	bls.n	8876 <__aeabi_ddiv+0x37a>
    8874:	e0e8      	b.n	8a48 <__aeabi_ddiv+0x54c>
    8876:	4288      	cmp	r0, r1
    8878:	d800      	bhi.n	887c <__aeabi_ddiv+0x380>
    887a:	e0e5      	b.n	8a48 <__aeabi_ddiv+0x54c>
    887c:	2302      	movs	r3, #2
    887e:	425b      	negs	r3, r3
    8880:	469c      	mov	ip, r3
    8882:	4441      	add	r1, r8
    8884:	44e2      	add	sl, ip
    8886:	9b01      	ldr	r3, [sp, #4]
    8888:	042d      	lsls	r5, r5, #16
    888a:	1ace      	subs	r6, r1, r3
    888c:	4651      	mov	r1, sl
    888e:	4329      	orrs	r1, r5
    8890:	9d05      	ldr	r5, [sp, #20]
    8892:	464f      	mov	r7, r9
    8894:	002a      	movs	r2, r5
    8896:	040b      	lsls	r3, r1, #16
    8898:	0c08      	lsrs	r0, r1, #16
    889a:	0c1b      	lsrs	r3, r3, #16
    889c:	435a      	muls	r2, r3
    889e:	4345      	muls	r5, r0
    88a0:	437b      	muls	r3, r7
    88a2:	4378      	muls	r0, r7
    88a4:	195b      	adds	r3, r3, r5
    88a6:	0c17      	lsrs	r7, r2, #16
    88a8:	18fb      	adds	r3, r7, r3
    88aa:	429d      	cmp	r5, r3
    88ac:	d903      	bls.n	88b6 <__aeabi_ddiv+0x3ba>
    88ae:	2580      	movs	r5, #128	; 0x80
    88b0:	026d      	lsls	r5, r5, #9
    88b2:	46ac      	mov	ip, r5
    88b4:	4460      	add	r0, ip
    88b6:	0c1d      	lsrs	r5, r3, #16
    88b8:	0412      	lsls	r2, r2, #16
    88ba:	041b      	lsls	r3, r3, #16
    88bc:	0c12      	lsrs	r2, r2, #16
    88be:	1828      	adds	r0, r5, r0
    88c0:	189b      	adds	r3, r3, r2
    88c2:	4286      	cmp	r6, r0
    88c4:	d200      	bcs.n	88c8 <__aeabi_ddiv+0x3cc>
    88c6:	e093      	b.n	89f0 <__aeabi_ddiv+0x4f4>
    88c8:	d100      	bne.n	88cc <__aeabi_ddiv+0x3d0>
    88ca:	e08e      	b.n	89ea <__aeabi_ddiv+0x4ee>
    88cc:	2301      	movs	r3, #1
    88ce:	4319      	orrs	r1, r3
    88d0:	4ba0      	ldr	r3, [pc, #640]	; (8b54 <__aeabi_ddiv+0x658>)
    88d2:	18e3      	adds	r3, r4, r3
    88d4:	2b00      	cmp	r3, #0
    88d6:	dc00      	bgt.n	88da <__aeabi_ddiv+0x3de>
    88d8:	e099      	b.n	8a0e <__aeabi_ddiv+0x512>
    88da:	074a      	lsls	r2, r1, #29
    88dc:	d000      	beq.n	88e0 <__aeabi_ddiv+0x3e4>
    88de:	e09e      	b.n	8a1e <__aeabi_ddiv+0x522>
    88e0:	465a      	mov	r2, fp
    88e2:	01d2      	lsls	r2, r2, #7
    88e4:	d506      	bpl.n	88f4 <__aeabi_ddiv+0x3f8>
    88e6:	465a      	mov	r2, fp
    88e8:	4b9b      	ldr	r3, [pc, #620]	; (8b58 <__aeabi_ddiv+0x65c>)
    88ea:	401a      	ands	r2, r3
    88ec:	2380      	movs	r3, #128	; 0x80
    88ee:	4693      	mov	fp, r2
    88f0:	00db      	lsls	r3, r3, #3
    88f2:	18e3      	adds	r3, r4, r3
    88f4:	4a99      	ldr	r2, [pc, #612]	; (8b5c <__aeabi_ddiv+0x660>)
    88f6:	4293      	cmp	r3, r2
    88f8:	dd68      	ble.n	89cc <__aeabi_ddiv+0x4d0>
    88fa:	2301      	movs	r3, #1
    88fc:	9a02      	ldr	r2, [sp, #8]
    88fe:	4c98      	ldr	r4, [pc, #608]	; (8b60 <__aeabi_ddiv+0x664>)
    8900:	401a      	ands	r2, r3
    8902:	2300      	movs	r3, #0
    8904:	4694      	mov	ip, r2
    8906:	4698      	mov	r8, r3
    8908:	2200      	movs	r2, #0
    890a:	e6c5      	b.n	8698 <__aeabi_ddiv+0x19c>
    890c:	2280      	movs	r2, #128	; 0x80
    890e:	464b      	mov	r3, r9
    8910:	0312      	lsls	r2, r2, #12
    8912:	4213      	tst	r3, r2
    8914:	d00a      	beq.n	892c <__aeabi_ddiv+0x430>
    8916:	465b      	mov	r3, fp
    8918:	4213      	tst	r3, r2
    891a:	d106      	bne.n	892a <__aeabi_ddiv+0x42e>
    891c:	431a      	orrs	r2, r3
    891e:	0312      	lsls	r2, r2, #12
    8920:	0b12      	lsrs	r2, r2, #12
    8922:	46ac      	mov	ip, r5
    8924:	4688      	mov	r8, r1
    8926:	4c8e      	ldr	r4, [pc, #568]	; (8b60 <__aeabi_ddiv+0x664>)
    8928:	e6b6      	b.n	8698 <__aeabi_ddiv+0x19c>
    892a:	464b      	mov	r3, r9
    892c:	431a      	orrs	r2, r3
    892e:	0312      	lsls	r2, r2, #12
    8930:	0b12      	lsrs	r2, r2, #12
    8932:	46bc      	mov	ip, r7
    8934:	4c8a      	ldr	r4, [pc, #552]	; (8b60 <__aeabi_ddiv+0x664>)
    8936:	e6af      	b.n	8698 <__aeabi_ddiv+0x19c>
    8938:	0003      	movs	r3, r0
    893a:	465a      	mov	r2, fp
    893c:	3b28      	subs	r3, #40	; 0x28
    893e:	409a      	lsls	r2, r3
    8940:	2300      	movs	r3, #0
    8942:	4691      	mov	r9, r2
    8944:	4698      	mov	r8, r3
    8946:	e657      	b.n	85f8 <__aeabi_ddiv+0xfc>
    8948:	4658      	mov	r0, fp
    894a:	f000 ff0d 	bl	9768 <__clzsi2>
    894e:	3020      	adds	r0, #32
    8950:	e640      	b.n	85d4 <__aeabi_ddiv+0xd8>
    8952:	0003      	movs	r3, r0
    8954:	4652      	mov	r2, sl
    8956:	3b28      	subs	r3, #40	; 0x28
    8958:	409a      	lsls	r2, r3
    895a:	2100      	movs	r1, #0
    895c:	4693      	mov	fp, r2
    895e:	e677      	b.n	8650 <__aeabi_ddiv+0x154>
    8960:	f000 ff02 	bl	9768 <__clzsi2>
    8964:	3020      	adds	r0, #32
    8966:	e65f      	b.n	8628 <__aeabi_ddiv+0x12c>
    8968:	4588      	cmp	r8, r1
    896a:	d200      	bcs.n	896e <__aeabi_ddiv+0x472>
    896c:	e6c7      	b.n	86fe <__aeabi_ddiv+0x202>
    896e:	464b      	mov	r3, r9
    8970:	07de      	lsls	r6, r3, #31
    8972:	085d      	lsrs	r5, r3, #1
    8974:	4643      	mov	r3, r8
    8976:	085b      	lsrs	r3, r3, #1
    8978:	431e      	orrs	r6, r3
    897a:	4643      	mov	r3, r8
    897c:	07db      	lsls	r3, r3, #31
    897e:	469a      	mov	sl, r3
    8980:	e6c2      	b.n	8708 <__aeabi_ddiv+0x20c>
    8982:	2500      	movs	r5, #0
    8984:	4592      	cmp	sl, r2
    8986:	d300      	bcc.n	898a <__aeabi_ddiv+0x48e>
    8988:	e733      	b.n	87f2 <__aeabi_ddiv+0x2f6>
    898a:	9e03      	ldr	r6, [sp, #12]
    898c:	4659      	mov	r1, fp
    898e:	46b4      	mov	ip, r6
    8990:	44e2      	add	sl, ip
    8992:	45b2      	cmp	sl, r6
    8994:	41ad      	sbcs	r5, r5
    8996:	426d      	negs	r5, r5
    8998:	4445      	add	r5, r8
    899a:	18eb      	adds	r3, r5, r3
    899c:	3901      	subs	r1, #1
    899e:	4598      	cmp	r8, r3
    89a0:	d207      	bcs.n	89b2 <__aeabi_ddiv+0x4b6>
    89a2:	4298      	cmp	r0, r3
    89a4:	d900      	bls.n	89a8 <__aeabi_ddiv+0x4ac>
    89a6:	e07f      	b.n	8aa8 <__aeabi_ddiv+0x5ac>
    89a8:	d100      	bne.n	89ac <__aeabi_ddiv+0x4b0>
    89aa:	e0bc      	b.n	8b26 <__aeabi_ddiv+0x62a>
    89ac:	1a1d      	subs	r5, r3, r0
    89ae:	468b      	mov	fp, r1
    89b0:	e71f      	b.n	87f2 <__aeabi_ddiv+0x2f6>
    89b2:	4598      	cmp	r8, r3
    89b4:	d1fa      	bne.n	89ac <__aeabi_ddiv+0x4b0>
    89b6:	9d03      	ldr	r5, [sp, #12]
    89b8:	4555      	cmp	r5, sl
    89ba:	d9f2      	bls.n	89a2 <__aeabi_ddiv+0x4a6>
    89bc:	4643      	mov	r3, r8
    89be:	468b      	mov	fp, r1
    89c0:	1a1d      	subs	r5, r3, r0
    89c2:	e716      	b.n	87f2 <__aeabi_ddiv+0x2f6>
    89c4:	469b      	mov	fp, r3
    89c6:	e6ca      	b.n	875e <__aeabi_ddiv+0x262>
    89c8:	0015      	movs	r5, r2
    89ca:	e6e7      	b.n	879c <__aeabi_ddiv+0x2a0>
    89cc:	465a      	mov	r2, fp
    89ce:	08c9      	lsrs	r1, r1, #3
    89d0:	0752      	lsls	r2, r2, #29
    89d2:	430a      	orrs	r2, r1
    89d4:	055b      	lsls	r3, r3, #21
    89d6:	4690      	mov	r8, r2
    89d8:	0d5c      	lsrs	r4, r3, #21
    89da:	465a      	mov	r2, fp
    89dc:	2301      	movs	r3, #1
    89de:	9902      	ldr	r1, [sp, #8]
    89e0:	0252      	lsls	r2, r2, #9
    89e2:	4019      	ands	r1, r3
    89e4:	0b12      	lsrs	r2, r2, #12
    89e6:	468c      	mov	ip, r1
    89e8:	e656      	b.n	8698 <__aeabi_ddiv+0x19c>
    89ea:	2b00      	cmp	r3, #0
    89ec:	d100      	bne.n	89f0 <__aeabi_ddiv+0x4f4>
    89ee:	e76f      	b.n	88d0 <__aeabi_ddiv+0x3d4>
    89f0:	4446      	add	r6, r8
    89f2:	1e4a      	subs	r2, r1, #1
    89f4:	45b0      	cmp	r8, r6
    89f6:	d929      	bls.n	8a4c <__aeabi_ddiv+0x550>
    89f8:	0011      	movs	r1, r2
    89fa:	4286      	cmp	r6, r0
    89fc:	d000      	beq.n	8a00 <__aeabi_ddiv+0x504>
    89fe:	e765      	b.n	88cc <__aeabi_ddiv+0x3d0>
    8a00:	9a03      	ldr	r2, [sp, #12]
    8a02:	4293      	cmp	r3, r2
    8a04:	d000      	beq.n	8a08 <__aeabi_ddiv+0x50c>
    8a06:	e761      	b.n	88cc <__aeabi_ddiv+0x3d0>
    8a08:	e762      	b.n	88d0 <__aeabi_ddiv+0x3d4>
    8a0a:	2101      	movs	r1, #1
    8a0c:	4249      	negs	r1, r1
    8a0e:	2001      	movs	r0, #1
    8a10:	1ac2      	subs	r2, r0, r3
    8a12:	2a38      	cmp	r2, #56	; 0x38
    8a14:	dd21      	ble.n	8a5a <__aeabi_ddiv+0x55e>
    8a16:	9b02      	ldr	r3, [sp, #8]
    8a18:	4003      	ands	r3, r0
    8a1a:	469c      	mov	ip, r3
    8a1c:	e638      	b.n	8690 <__aeabi_ddiv+0x194>
    8a1e:	220f      	movs	r2, #15
    8a20:	400a      	ands	r2, r1
    8a22:	2a04      	cmp	r2, #4
    8a24:	d100      	bne.n	8a28 <__aeabi_ddiv+0x52c>
    8a26:	e75b      	b.n	88e0 <__aeabi_ddiv+0x3e4>
    8a28:	000a      	movs	r2, r1
    8a2a:	1d11      	adds	r1, r2, #4
    8a2c:	4291      	cmp	r1, r2
    8a2e:	4192      	sbcs	r2, r2
    8a30:	4252      	negs	r2, r2
    8a32:	4493      	add	fp, r2
    8a34:	e754      	b.n	88e0 <__aeabi_ddiv+0x3e4>
    8a36:	4b47      	ldr	r3, [pc, #284]	; (8b54 <__aeabi_ddiv+0x658>)
    8a38:	18e3      	adds	r3, r4, r3
    8a3a:	2b00      	cmp	r3, #0
    8a3c:	dde5      	ble.n	8a0a <__aeabi_ddiv+0x50e>
    8a3e:	2201      	movs	r2, #1
    8a40:	4252      	negs	r2, r2
    8a42:	e7f2      	b.n	8a2a <__aeabi_ddiv+0x52e>
    8a44:	001d      	movs	r5, r3
    8a46:	e6fa      	b.n	883e <__aeabi_ddiv+0x342>
    8a48:	469a      	mov	sl, r3
    8a4a:	e71c      	b.n	8886 <__aeabi_ddiv+0x38a>
    8a4c:	42b0      	cmp	r0, r6
    8a4e:	d839      	bhi.n	8ac4 <__aeabi_ddiv+0x5c8>
    8a50:	d06e      	beq.n	8b30 <__aeabi_ddiv+0x634>
    8a52:	0011      	movs	r1, r2
    8a54:	e73a      	b.n	88cc <__aeabi_ddiv+0x3d0>
    8a56:	9302      	str	r3, [sp, #8]
    8a58:	e73a      	b.n	88d0 <__aeabi_ddiv+0x3d4>
    8a5a:	2a1f      	cmp	r2, #31
    8a5c:	dc3c      	bgt.n	8ad8 <__aeabi_ddiv+0x5dc>
    8a5e:	2320      	movs	r3, #32
    8a60:	1a9b      	subs	r3, r3, r2
    8a62:	000c      	movs	r4, r1
    8a64:	4658      	mov	r0, fp
    8a66:	4099      	lsls	r1, r3
    8a68:	4098      	lsls	r0, r3
    8a6a:	1e4b      	subs	r3, r1, #1
    8a6c:	4199      	sbcs	r1, r3
    8a6e:	465b      	mov	r3, fp
    8a70:	40d4      	lsrs	r4, r2
    8a72:	40d3      	lsrs	r3, r2
    8a74:	4320      	orrs	r0, r4
    8a76:	4308      	orrs	r0, r1
    8a78:	001a      	movs	r2, r3
    8a7a:	0743      	lsls	r3, r0, #29
    8a7c:	d009      	beq.n	8a92 <__aeabi_ddiv+0x596>
    8a7e:	230f      	movs	r3, #15
    8a80:	4003      	ands	r3, r0
    8a82:	2b04      	cmp	r3, #4
    8a84:	d005      	beq.n	8a92 <__aeabi_ddiv+0x596>
    8a86:	0001      	movs	r1, r0
    8a88:	1d08      	adds	r0, r1, #4
    8a8a:	4288      	cmp	r0, r1
    8a8c:	419b      	sbcs	r3, r3
    8a8e:	425b      	negs	r3, r3
    8a90:	18d2      	adds	r2, r2, r3
    8a92:	0213      	lsls	r3, r2, #8
    8a94:	d53a      	bpl.n	8b0c <__aeabi_ddiv+0x610>
    8a96:	2301      	movs	r3, #1
    8a98:	9a02      	ldr	r2, [sp, #8]
    8a9a:	2401      	movs	r4, #1
    8a9c:	401a      	ands	r2, r3
    8a9e:	2300      	movs	r3, #0
    8aa0:	4694      	mov	ip, r2
    8aa2:	4698      	mov	r8, r3
    8aa4:	2200      	movs	r2, #0
    8aa6:	e5f7      	b.n	8698 <__aeabi_ddiv+0x19c>
    8aa8:	2102      	movs	r1, #2
    8aaa:	4249      	negs	r1, r1
    8aac:	468c      	mov	ip, r1
    8aae:	9d03      	ldr	r5, [sp, #12]
    8ab0:	44e3      	add	fp, ip
    8ab2:	46ac      	mov	ip, r5
    8ab4:	44e2      	add	sl, ip
    8ab6:	45aa      	cmp	sl, r5
    8ab8:	41ad      	sbcs	r5, r5
    8aba:	426d      	negs	r5, r5
    8abc:	4445      	add	r5, r8
    8abe:	18ed      	adds	r5, r5, r3
    8ac0:	1a2d      	subs	r5, r5, r0
    8ac2:	e696      	b.n	87f2 <__aeabi_ddiv+0x2f6>
    8ac4:	1e8a      	subs	r2, r1, #2
    8ac6:	9903      	ldr	r1, [sp, #12]
    8ac8:	004d      	lsls	r5, r1, #1
    8aca:	428d      	cmp	r5, r1
    8acc:	4189      	sbcs	r1, r1
    8ace:	4249      	negs	r1, r1
    8ad0:	4441      	add	r1, r8
    8ad2:	1876      	adds	r6, r6, r1
    8ad4:	9503      	str	r5, [sp, #12]
    8ad6:	e78f      	b.n	89f8 <__aeabi_ddiv+0x4fc>
    8ad8:	201f      	movs	r0, #31
    8ada:	4240      	negs	r0, r0
    8adc:	1ac3      	subs	r3, r0, r3
    8ade:	4658      	mov	r0, fp
    8ae0:	40d8      	lsrs	r0, r3
    8ae2:	0003      	movs	r3, r0
    8ae4:	2a20      	cmp	r2, #32
    8ae6:	d028      	beq.n	8b3a <__aeabi_ddiv+0x63e>
    8ae8:	2040      	movs	r0, #64	; 0x40
    8aea:	465d      	mov	r5, fp
    8aec:	1a82      	subs	r2, r0, r2
    8aee:	4095      	lsls	r5, r2
    8af0:	4329      	orrs	r1, r5
    8af2:	1e4a      	subs	r2, r1, #1
    8af4:	4191      	sbcs	r1, r2
    8af6:	4319      	orrs	r1, r3
    8af8:	2307      	movs	r3, #7
    8afa:	2200      	movs	r2, #0
    8afc:	400b      	ands	r3, r1
    8afe:	d009      	beq.n	8b14 <__aeabi_ddiv+0x618>
    8b00:	230f      	movs	r3, #15
    8b02:	2200      	movs	r2, #0
    8b04:	400b      	ands	r3, r1
    8b06:	0008      	movs	r0, r1
    8b08:	2b04      	cmp	r3, #4
    8b0a:	d1bd      	bne.n	8a88 <__aeabi_ddiv+0x58c>
    8b0c:	0001      	movs	r1, r0
    8b0e:	0753      	lsls	r3, r2, #29
    8b10:	0252      	lsls	r2, r2, #9
    8b12:	0b12      	lsrs	r2, r2, #12
    8b14:	08c9      	lsrs	r1, r1, #3
    8b16:	4319      	orrs	r1, r3
    8b18:	2301      	movs	r3, #1
    8b1a:	4688      	mov	r8, r1
    8b1c:	9902      	ldr	r1, [sp, #8]
    8b1e:	2400      	movs	r4, #0
    8b20:	4019      	ands	r1, r3
    8b22:	468c      	mov	ip, r1
    8b24:	e5b8      	b.n	8698 <__aeabi_ddiv+0x19c>
    8b26:	4552      	cmp	r2, sl
    8b28:	d8be      	bhi.n	8aa8 <__aeabi_ddiv+0x5ac>
    8b2a:	468b      	mov	fp, r1
    8b2c:	2500      	movs	r5, #0
    8b2e:	e660      	b.n	87f2 <__aeabi_ddiv+0x2f6>
    8b30:	9d03      	ldr	r5, [sp, #12]
    8b32:	429d      	cmp	r5, r3
    8b34:	d3c6      	bcc.n	8ac4 <__aeabi_ddiv+0x5c8>
    8b36:	0011      	movs	r1, r2
    8b38:	e762      	b.n	8a00 <__aeabi_ddiv+0x504>
    8b3a:	2500      	movs	r5, #0
    8b3c:	e7d8      	b.n	8af0 <__aeabi_ddiv+0x5f4>
    8b3e:	2280      	movs	r2, #128	; 0x80
    8b40:	465b      	mov	r3, fp
    8b42:	0312      	lsls	r2, r2, #12
    8b44:	431a      	orrs	r2, r3
    8b46:	9b01      	ldr	r3, [sp, #4]
    8b48:	0312      	lsls	r2, r2, #12
    8b4a:	0b12      	lsrs	r2, r2, #12
    8b4c:	469c      	mov	ip, r3
    8b4e:	4688      	mov	r8, r1
    8b50:	4c03      	ldr	r4, [pc, #12]	; (8b60 <__aeabi_ddiv+0x664>)
    8b52:	e5a1      	b.n	8698 <__aeabi_ddiv+0x19c>
    8b54:	000003ff 	.word	0x000003ff
    8b58:	feffffff 	.word	0xfeffffff
    8b5c:	000007fe 	.word	0x000007fe
    8b60:	000007ff 	.word	0x000007ff

00008b64 <__aeabi_dmul>:
    8b64:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b66:	4657      	mov	r7, sl
    8b68:	4645      	mov	r5, r8
    8b6a:	46de      	mov	lr, fp
    8b6c:	464e      	mov	r6, r9
    8b6e:	b5e0      	push	{r5, r6, r7, lr}
    8b70:	030c      	lsls	r4, r1, #12
    8b72:	4698      	mov	r8, r3
    8b74:	004e      	lsls	r6, r1, #1
    8b76:	0b23      	lsrs	r3, r4, #12
    8b78:	b087      	sub	sp, #28
    8b7a:	0007      	movs	r7, r0
    8b7c:	4692      	mov	sl, r2
    8b7e:	469b      	mov	fp, r3
    8b80:	0d76      	lsrs	r6, r6, #21
    8b82:	0fcd      	lsrs	r5, r1, #31
    8b84:	2e00      	cmp	r6, #0
    8b86:	d06b      	beq.n	8c60 <__aeabi_dmul+0xfc>
    8b88:	4b6d      	ldr	r3, [pc, #436]	; (8d40 <__aeabi_dmul+0x1dc>)
    8b8a:	429e      	cmp	r6, r3
    8b8c:	d035      	beq.n	8bfa <__aeabi_dmul+0x96>
    8b8e:	2480      	movs	r4, #128	; 0x80
    8b90:	465b      	mov	r3, fp
    8b92:	0f42      	lsrs	r2, r0, #29
    8b94:	0424      	lsls	r4, r4, #16
    8b96:	00db      	lsls	r3, r3, #3
    8b98:	4314      	orrs	r4, r2
    8b9a:	431c      	orrs	r4, r3
    8b9c:	00c3      	lsls	r3, r0, #3
    8b9e:	4699      	mov	r9, r3
    8ba0:	4b68      	ldr	r3, [pc, #416]	; (8d44 <__aeabi_dmul+0x1e0>)
    8ba2:	46a3      	mov	fp, r4
    8ba4:	469c      	mov	ip, r3
    8ba6:	2300      	movs	r3, #0
    8ba8:	2700      	movs	r7, #0
    8baa:	4466      	add	r6, ip
    8bac:	9302      	str	r3, [sp, #8]
    8bae:	4643      	mov	r3, r8
    8bb0:	031c      	lsls	r4, r3, #12
    8bb2:	005a      	lsls	r2, r3, #1
    8bb4:	0fdb      	lsrs	r3, r3, #31
    8bb6:	4650      	mov	r0, sl
    8bb8:	0b24      	lsrs	r4, r4, #12
    8bba:	0d52      	lsrs	r2, r2, #21
    8bbc:	4698      	mov	r8, r3
    8bbe:	d100      	bne.n	8bc2 <__aeabi_dmul+0x5e>
    8bc0:	e076      	b.n	8cb0 <__aeabi_dmul+0x14c>
    8bc2:	4b5f      	ldr	r3, [pc, #380]	; (8d40 <__aeabi_dmul+0x1dc>)
    8bc4:	429a      	cmp	r2, r3
    8bc6:	d06d      	beq.n	8ca4 <__aeabi_dmul+0x140>
    8bc8:	2380      	movs	r3, #128	; 0x80
    8bca:	0f41      	lsrs	r1, r0, #29
    8bcc:	041b      	lsls	r3, r3, #16
    8bce:	430b      	orrs	r3, r1
    8bd0:	495c      	ldr	r1, [pc, #368]	; (8d44 <__aeabi_dmul+0x1e0>)
    8bd2:	00e4      	lsls	r4, r4, #3
    8bd4:	468c      	mov	ip, r1
    8bd6:	431c      	orrs	r4, r3
    8bd8:	00c3      	lsls	r3, r0, #3
    8bda:	2000      	movs	r0, #0
    8bdc:	4462      	add	r2, ip
    8bde:	4641      	mov	r1, r8
    8be0:	18b6      	adds	r6, r6, r2
    8be2:	4069      	eors	r1, r5
    8be4:	1c72      	adds	r2, r6, #1
    8be6:	9101      	str	r1, [sp, #4]
    8be8:	4694      	mov	ip, r2
    8bea:	4307      	orrs	r7, r0
    8bec:	2f0f      	cmp	r7, #15
    8bee:	d900      	bls.n	8bf2 <__aeabi_dmul+0x8e>
    8bf0:	e0b0      	b.n	8d54 <__aeabi_dmul+0x1f0>
    8bf2:	4a55      	ldr	r2, [pc, #340]	; (8d48 <__aeabi_dmul+0x1e4>)
    8bf4:	00bf      	lsls	r7, r7, #2
    8bf6:	59d2      	ldr	r2, [r2, r7]
    8bf8:	4697      	mov	pc, r2
    8bfa:	465b      	mov	r3, fp
    8bfc:	4303      	orrs	r3, r0
    8bfe:	4699      	mov	r9, r3
    8c00:	d000      	beq.n	8c04 <__aeabi_dmul+0xa0>
    8c02:	e087      	b.n	8d14 <__aeabi_dmul+0x1b0>
    8c04:	2300      	movs	r3, #0
    8c06:	469b      	mov	fp, r3
    8c08:	3302      	adds	r3, #2
    8c0a:	2708      	movs	r7, #8
    8c0c:	9302      	str	r3, [sp, #8]
    8c0e:	e7ce      	b.n	8bae <__aeabi_dmul+0x4a>
    8c10:	4642      	mov	r2, r8
    8c12:	9201      	str	r2, [sp, #4]
    8c14:	2802      	cmp	r0, #2
    8c16:	d067      	beq.n	8ce8 <__aeabi_dmul+0x184>
    8c18:	2803      	cmp	r0, #3
    8c1a:	d100      	bne.n	8c1e <__aeabi_dmul+0xba>
    8c1c:	e20e      	b.n	903c <__aeabi_dmul+0x4d8>
    8c1e:	2801      	cmp	r0, #1
    8c20:	d000      	beq.n	8c24 <__aeabi_dmul+0xc0>
    8c22:	e162      	b.n	8eea <__aeabi_dmul+0x386>
    8c24:	2300      	movs	r3, #0
    8c26:	2400      	movs	r4, #0
    8c28:	2200      	movs	r2, #0
    8c2a:	4699      	mov	r9, r3
    8c2c:	9901      	ldr	r1, [sp, #4]
    8c2e:	4001      	ands	r1, r0
    8c30:	b2cd      	uxtb	r5, r1
    8c32:	2100      	movs	r1, #0
    8c34:	0312      	lsls	r2, r2, #12
    8c36:	0d0b      	lsrs	r3, r1, #20
    8c38:	0b12      	lsrs	r2, r2, #12
    8c3a:	051b      	lsls	r3, r3, #20
    8c3c:	4313      	orrs	r3, r2
    8c3e:	4a43      	ldr	r2, [pc, #268]	; (8d4c <__aeabi_dmul+0x1e8>)
    8c40:	0524      	lsls	r4, r4, #20
    8c42:	4013      	ands	r3, r2
    8c44:	431c      	orrs	r4, r3
    8c46:	0064      	lsls	r4, r4, #1
    8c48:	07ed      	lsls	r5, r5, #31
    8c4a:	0864      	lsrs	r4, r4, #1
    8c4c:	432c      	orrs	r4, r5
    8c4e:	4648      	mov	r0, r9
    8c50:	0021      	movs	r1, r4
    8c52:	b007      	add	sp, #28
    8c54:	bc3c      	pop	{r2, r3, r4, r5}
    8c56:	4690      	mov	r8, r2
    8c58:	4699      	mov	r9, r3
    8c5a:	46a2      	mov	sl, r4
    8c5c:	46ab      	mov	fp, r5
    8c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8c60:	4303      	orrs	r3, r0
    8c62:	4699      	mov	r9, r3
    8c64:	d04f      	beq.n	8d06 <__aeabi_dmul+0x1a2>
    8c66:	465b      	mov	r3, fp
    8c68:	2b00      	cmp	r3, #0
    8c6a:	d100      	bne.n	8c6e <__aeabi_dmul+0x10a>
    8c6c:	e189      	b.n	8f82 <__aeabi_dmul+0x41e>
    8c6e:	4658      	mov	r0, fp
    8c70:	f000 fd7a 	bl	9768 <__clzsi2>
    8c74:	0003      	movs	r3, r0
    8c76:	3b0b      	subs	r3, #11
    8c78:	2b1c      	cmp	r3, #28
    8c7a:	dd00      	ble.n	8c7e <__aeabi_dmul+0x11a>
    8c7c:	e17a      	b.n	8f74 <__aeabi_dmul+0x410>
    8c7e:	221d      	movs	r2, #29
    8c80:	1ad3      	subs	r3, r2, r3
    8c82:	003a      	movs	r2, r7
    8c84:	0001      	movs	r1, r0
    8c86:	465c      	mov	r4, fp
    8c88:	40da      	lsrs	r2, r3
    8c8a:	3908      	subs	r1, #8
    8c8c:	408c      	lsls	r4, r1
    8c8e:	0013      	movs	r3, r2
    8c90:	408f      	lsls	r7, r1
    8c92:	4323      	orrs	r3, r4
    8c94:	469b      	mov	fp, r3
    8c96:	46b9      	mov	r9, r7
    8c98:	2300      	movs	r3, #0
    8c9a:	4e2d      	ldr	r6, [pc, #180]	; (8d50 <__aeabi_dmul+0x1ec>)
    8c9c:	2700      	movs	r7, #0
    8c9e:	1a36      	subs	r6, r6, r0
    8ca0:	9302      	str	r3, [sp, #8]
    8ca2:	e784      	b.n	8bae <__aeabi_dmul+0x4a>
    8ca4:	4653      	mov	r3, sl
    8ca6:	4323      	orrs	r3, r4
    8ca8:	d12a      	bne.n	8d00 <__aeabi_dmul+0x19c>
    8caa:	2400      	movs	r4, #0
    8cac:	2002      	movs	r0, #2
    8cae:	e796      	b.n	8bde <__aeabi_dmul+0x7a>
    8cb0:	4653      	mov	r3, sl
    8cb2:	4323      	orrs	r3, r4
    8cb4:	d020      	beq.n	8cf8 <__aeabi_dmul+0x194>
    8cb6:	2c00      	cmp	r4, #0
    8cb8:	d100      	bne.n	8cbc <__aeabi_dmul+0x158>
    8cba:	e157      	b.n	8f6c <__aeabi_dmul+0x408>
    8cbc:	0020      	movs	r0, r4
    8cbe:	f000 fd53 	bl	9768 <__clzsi2>
    8cc2:	0003      	movs	r3, r0
    8cc4:	3b0b      	subs	r3, #11
    8cc6:	2b1c      	cmp	r3, #28
    8cc8:	dd00      	ble.n	8ccc <__aeabi_dmul+0x168>
    8cca:	e149      	b.n	8f60 <__aeabi_dmul+0x3fc>
    8ccc:	211d      	movs	r1, #29
    8cce:	1acb      	subs	r3, r1, r3
    8cd0:	4651      	mov	r1, sl
    8cd2:	0002      	movs	r2, r0
    8cd4:	40d9      	lsrs	r1, r3
    8cd6:	4653      	mov	r3, sl
    8cd8:	3a08      	subs	r2, #8
    8cda:	4094      	lsls	r4, r2
    8cdc:	4093      	lsls	r3, r2
    8cde:	430c      	orrs	r4, r1
    8ce0:	4a1b      	ldr	r2, [pc, #108]	; (8d50 <__aeabi_dmul+0x1ec>)
    8ce2:	1a12      	subs	r2, r2, r0
    8ce4:	2000      	movs	r0, #0
    8ce6:	e77a      	b.n	8bde <__aeabi_dmul+0x7a>
    8ce8:	2501      	movs	r5, #1
    8cea:	9b01      	ldr	r3, [sp, #4]
    8cec:	4c14      	ldr	r4, [pc, #80]	; (8d40 <__aeabi_dmul+0x1dc>)
    8cee:	401d      	ands	r5, r3
    8cf0:	2300      	movs	r3, #0
    8cf2:	2200      	movs	r2, #0
    8cf4:	4699      	mov	r9, r3
    8cf6:	e79c      	b.n	8c32 <__aeabi_dmul+0xce>
    8cf8:	2400      	movs	r4, #0
    8cfa:	2200      	movs	r2, #0
    8cfc:	2001      	movs	r0, #1
    8cfe:	e76e      	b.n	8bde <__aeabi_dmul+0x7a>
    8d00:	4653      	mov	r3, sl
    8d02:	2003      	movs	r0, #3
    8d04:	e76b      	b.n	8bde <__aeabi_dmul+0x7a>
    8d06:	2300      	movs	r3, #0
    8d08:	469b      	mov	fp, r3
    8d0a:	3301      	adds	r3, #1
    8d0c:	2704      	movs	r7, #4
    8d0e:	2600      	movs	r6, #0
    8d10:	9302      	str	r3, [sp, #8]
    8d12:	e74c      	b.n	8bae <__aeabi_dmul+0x4a>
    8d14:	2303      	movs	r3, #3
    8d16:	4681      	mov	r9, r0
    8d18:	270c      	movs	r7, #12
    8d1a:	9302      	str	r3, [sp, #8]
    8d1c:	e747      	b.n	8bae <__aeabi_dmul+0x4a>
    8d1e:	2280      	movs	r2, #128	; 0x80
    8d20:	2300      	movs	r3, #0
    8d22:	2500      	movs	r5, #0
    8d24:	0312      	lsls	r2, r2, #12
    8d26:	4699      	mov	r9, r3
    8d28:	4c05      	ldr	r4, [pc, #20]	; (8d40 <__aeabi_dmul+0x1dc>)
    8d2a:	e782      	b.n	8c32 <__aeabi_dmul+0xce>
    8d2c:	465c      	mov	r4, fp
    8d2e:	464b      	mov	r3, r9
    8d30:	9802      	ldr	r0, [sp, #8]
    8d32:	e76f      	b.n	8c14 <__aeabi_dmul+0xb0>
    8d34:	465c      	mov	r4, fp
    8d36:	464b      	mov	r3, r9
    8d38:	9501      	str	r5, [sp, #4]
    8d3a:	9802      	ldr	r0, [sp, #8]
    8d3c:	e76a      	b.n	8c14 <__aeabi_dmul+0xb0>
    8d3e:	46c0      	nop			; (mov r8, r8)
    8d40:	000007ff 	.word	0x000007ff
    8d44:	fffffc01 	.word	0xfffffc01
    8d48:	0000c104 	.word	0x0000c104
    8d4c:	800fffff 	.word	0x800fffff
    8d50:	fffffc0d 	.word	0xfffffc0d
    8d54:	464a      	mov	r2, r9
    8d56:	4649      	mov	r1, r9
    8d58:	0c17      	lsrs	r7, r2, #16
    8d5a:	0c1a      	lsrs	r2, r3, #16
    8d5c:	041b      	lsls	r3, r3, #16
    8d5e:	0c1b      	lsrs	r3, r3, #16
    8d60:	0408      	lsls	r0, r1, #16
    8d62:	0019      	movs	r1, r3
    8d64:	0c00      	lsrs	r0, r0, #16
    8d66:	4341      	muls	r1, r0
    8d68:	0015      	movs	r5, r2
    8d6a:	4688      	mov	r8, r1
    8d6c:	0019      	movs	r1, r3
    8d6e:	437d      	muls	r5, r7
    8d70:	4379      	muls	r1, r7
    8d72:	9503      	str	r5, [sp, #12]
    8d74:	4689      	mov	r9, r1
    8d76:	0029      	movs	r1, r5
    8d78:	0015      	movs	r5, r2
    8d7a:	4345      	muls	r5, r0
    8d7c:	444d      	add	r5, r9
    8d7e:	9502      	str	r5, [sp, #8]
    8d80:	4645      	mov	r5, r8
    8d82:	0c2d      	lsrs	r5, r5, #16
    8d84:	46aa      	mov	sl, r5
    8d86:	9d02      	ldr	r5, [sp, #8]
    8d88:	4455      	add	r5, sl
    8d8a:	45a9      	cmp	r9, r5
    8d8c:	d906      	bls.n	8d9c <__aeabi_dmul+0x238>
    8d8e:	468a      	mov	sl, r1
    8d90:	2180      	movs	r1, #128	; 0x80
    8d92:	0249      	lsls	r1, r1, #9
    8d94:	4689      	mov	r9, r1
    8d96:	44ca      	add	sl, r9
    8d98:	4651      	mov	r1, sl
    8d9a:	9103      	str	r1, [sp, #12]
    8d9c:	0c29      	lsrs	r1, r5, #16
    8d9e:	9104      	str	r1, [sp, #16]
    8da0:	4641      	mov	r1, r8
    8da2:	0409      	lsls	r1, r1, #16
    8da4:	042d      	lsls	r5, r5, #16
    8da6:	0c09      	lsrs	r1, r1, #16
    8da8:	4688      	mov	r8, r1
    8daa:	0029      	movs	r1, r5
    8dac:	0c25      	lsrs	r5, r4, #16
    8dae:	0424      	lsls	r4, r4, #16
    8db0:	4441      	add	r1, r8
    8db2:	0c24      	lsrs	r4, r4, #16
    8db4:	9105      	str	r1, [sp, #20]
    8db6:	0021      	movs	r1, r4
    8db8:	4341      	muls	r1, r0
    8dba:	4688      	mov	r8, r1
    8dbc:	0021      	movs	r1, r4
    8dbe:	4379      	muls	r1, r7
    8dc0:	468a      	mov	sl, r1
    8dc2:	4368      	muls	r0, r5
    8dc4:	4641      	mov	r1, r8
    8dc6:	4450      	add	r0, sl
    8dc8:	4681      	mov	r9, r0
    8dca:	0c08      	lsrs	r0, r1, #16
    8dcc:	4448      	add	r0, r9
    8dce:	436f      	muls	r7, r5
    8dd0:	4582      	cmp	sl, r0
    8dd2:	d903      	bls.n	8ddc <__aeabi_dmul+0x278>
    8dd4:	2180      	movs	r1, #128	; 0x80
    8dd6:	0249      	lsls	r1, r1, #9
    8dd8:	4689      	mov	r9, r1
    8dda:	444f      	add	r7, r9
    8ddc:	0c01      	lsrs	r1, r0, #16
    8dde:	4689      	mov	r9, r1
    8de0:	0039      	movs	r1, r7
    8de2:	4449      	add	r1, r9
    8de4:	9102      	str	r1, [sp, #8]
    8de6:	4641      	mov	r1, r8
    8de8:	040f      	lsls	r7, r1, #16
    8dea:	9904      	ldr	r1, [sp, #16]
    8dec:	0c3f      	lsrs	r7, r7, #16
    8dee:	4688      	mov	r8, r1
    8df0:	0400      	lsls	r0, r0, #16
    8df2:	19c0      	adds	r0, r0, r7
    8df4:	4480      	add	r8, r0
    8df6:	4641      	mov	r1, r8
    8df8:	9104      	str	r1, [sp, #16]
    8dfa:	4659      	mov	r1, fp
    8dfc:	0c0f      	lsrs	r7, r1, #16
    8dfe:	0409      	lsls	r1, r1, #16
    8e00:	0c09      	lsrs	r1, r1, #16
    8e02:	4688      	mov	r8, r1
    8e04:	4359      	muls	r1, r3
    8e06:	468a      	mov	sl, r1
    8e08:	0039      	movs	r1, r7
    8e0a:	4351      	muls	r1, r2
    8e0c:	4689      	mov	r9, r1
    8e0e:	4641      	mov	r1, r8
    8e10:	434a      	muls	r2, r1
    8e12:	4651      	mov	r1, sl
    8e14:	0c09      	lsrs	r1, r1, #16
    8e16:	468b      	mov	fp, r1
    8e18:	437b      	muls	r3, r7
    8e1a:	18d2      	adds	r2, r2, r3
    8e1c:	445a      	add	r2, fp
    8e1e:	4293      	cmp	r3, r2
    8e20:	d903      	bls.n	8e2a <__aeabi_dmul+0x2c6>
    8e22:	2380      	movs	r3, #128	; 0x80
    8e24:	025b      	lsls	r3, r3, #9
    8e26:	469b      	mov	fp, r3
    8e28:	44d9      	add	r9, fp
    8e2a:	4651      	mov	r1, sl
    8e2c:	0409      	lsls	r1, r1, #16
    8e2e:	0c09      	lsrs	r1, r1, #16
    8e30:	468a      	mov	sl, r1
    8e32:	4641      	mov	r1, r8
    8e34:	4361      	muls	r1, r4
    8e36:	437c      	muls	r4, r7
    8e38:	0c13      	lsrs	r3, r2, #16
    8e3a:	0412      	lsls	r2, r2, #16
    8e3c:	444b      	add	r3, r9
    8e3e:	4452      	add	r2, sl
    8e40:	46a1      	mov	r9, r4
    8e42:	468a      	mov	sl, r1
    8e44:	003c      	movs	r4, r7
    8e46:	4641      	mov	r1, r8
    8e48:	436c      	muls	r4, r5
    8e4a:	434d      	muls	r5, r1
    8e4c:	4651      	mov	r1, sl
    8e4e:	444d      	add	r5, r9
    8e50:	0c0f      	lsrs	r7, r1, #16
    8e52:	197d      	adds	r5, r7, r5
    8e54:	45a9      	cmp	r9, r5
    8e56:	d903      	bls.n	8e60 <__aeabi_dmul+0x2fc>
    8e58:	2180      	movs	r1, #128	; 0x80
    8e5a:	0249      	lsls	r1, r1, #9
    8e5c:	4688      	mov	r8, r1
    8e5e:	4444      	add	r4, r8
    8e60:	9f04      	ldr	r7, [sp, #16]
    8e62:	9903      	ldr	r1, [sp, #12]
    8e64:	46b8      	mov	r8, r7
    8e66:	4441      	add	r1, r8
    8e68:	468b      	mov	fp, r1
    8e6a:	4583      	cmp	fp, r0
    8e6c:	4180      	sbcs	r0, r0
    8e6e:	4241      	negs	r1, r0
    8e70:	4688      	mov	r8, r1
    8e72:	4651      	mov	r1, sl
    8e74:	0408      	lsls	r0, r1, #16
    8e76:	042f      	lsls	r7, r5, #16
    8e78:	0c00      	lsrs	r0, r0, #16
    8e7a:	183f      	adds	r7, r7, r0
    8e7c:	4658      	mov	r0, fp
    8e7e:	9902      	ldr	r1, [sp, #8]
    8e80:	1810      	adds	r0, r2, r0
    8e82:	4689      	mov	r9, r1
    8e84:	4290      	cmp	r0, r2
    8e86:	4192      	sbcs	r2, r2
    8e88:	444f      	add	r7, r9
    8e8a:	46ba      	mov	sl, r7
    8e8c:	4252      	negs	r2, r2
    8e8e:	4699      	mov	r9, r3
    8e90:	4693      	mov	fp, r2
    8e92:	44c2      	add	sl, r8
    8e94:	44d1      	add	r9, sl
    8e96:	44cb      	add	fp, r9
    8e98:	428f      	cmp	r7, r1
    8e9a:	41bf      	sbcs	r7, r7
    8e9c:	45c2      	cmp	sl, r8
    8e9e:	4189      	sbcs	r1, r1
    8ea0:	4599      	cmp	r9, r3
    8ea2:	419b      	sbcs	r3, r3
    8ea4:	4593      	cmp	fp, r2
    8ea6:	4192      	sbcs	r2, r2
    8ea8:	427f      	negs	r7, r7
    8eaa:	4249      	negs	r1, r1
    8eac:	0c2d      	lsrs	r5, r5, #16
    8eae:	4252      	negs	r2, r2
    8eb0:	430f      	orrs	r7, r1
    8eb2:	425b      	negs	r3, r3
    8eb4:	4313      	orrs	r3, r2
    8eb6:	197f      	adds	r7, r7, r5
    8eb8:	18ff      	adds	r7, r7, r3
    8eba:	465b      	mov	r3, fp
    8ebc:	193c      	adds	r4, r7, r4
    8ebe:	0ddb      	lsrs	r3, r3, #23
    8ec0:	9a05      	ldr	r2, [sp, #20]
    8ec2:	0264      	lsls	r4, r4, #9
    8ec4:	431c      	orrs	r4, r3
    8ec6:	0243      	lsls	r3, r0, #9
    8ec8:	4313      	orrs	r3, r2
    8eca:	1e5d      	subs	r5, r3, #1
    8ecc:	41ab      	sbcs	r3, r5
    8ece:	465a      	mov	r2, fp
    8ed0:	0dc0      	lsrs	r0, r0, #23
    8ed2:	4303      	orrs	r3, r0
    8ed4:	0252      	lsls	r2, r2, #9
    8ed6:	4313      	orrs	r3, r2
    8ed8:	01e2      	lsls	r2, r4, #7
    8eda:	d556      	bpl.n	8f8a <__aeabi_dmul+0x426>
    8edc:	2001      	movs	r0, #1
    8ede:	085a      	lsrs	r2, r3, #1
    8ee0:	4003      	ands	r3, r0
    8ee2:	4313      	orrs	r3, r2
    8ee4:	07e2      	lsls	r2, r4, #31
    8ee6:	4313      	orrs	r3, r2
    8ee8:	0864      	lsrs	r4, r4, #1
    8eea:	485a      	ldr	r0, [pc, #360]	; (9054 <__aeabi_dmul+0x4f0>)
    8eec:	4460      	add	r0, ip
    8eee:	2800      	cmp	r0, #0
    8ef0:	dd4d      	ble.n	8f8e <__aeabi_dmul+0x42a>
    8ef2:	075a      	lsls	r2, r3, #29
    8ef4:	d009      	beq.n	8f0a <__aeabi_dmul+0x3a6>
    8ef6:	220f      	movs	r2, #15
    8ef8:	401a      	ands	r2, r3
    8efa:	2a04      	cmp	r2, #4
    8efc:	d005      	beq.n	8f0a <__aeabi_dmul+0x3a6>
    8efe:	1d1a      	adds	r2, r3, #4
    8f00:	429a      	cmp	r2, r3
    8f02:	419b      	sbcs	r3, r3
    8f04:	425b      	negs	r3, r3
    8f06:	18e4      	adds	r4, r4, r3
    8f08:	0013      	movs	r3, r2
    8f0a:	01e2      	lsls	r2, r4, #7
    8f0c:	d504      	bpl.n	8f18 <__aeabi_dmul+0x3b4>
    8f0e:	2080      	movs	r0, #128	; 0x80
    8f10:	4a51      	ldr	r2, [pc, #324]	; (9058 <__aeabi_dmul+0x4f4>)
    8f12:	00c0      	lsls	r0, r0, #3
    8f14:	4014      	ands	r4, r2
    8f16:	4460      	add	r0, ip
    8f18:	4a50      	ldr	r2, [pc, #320]	; (905c <__aeabi_dmul+0x4f8>)
    8f1a:	4290      	cmp	r0, r2
    8f1c:	dd00      	ble.n	8f20 <__aeabi_dmul+0x3bc>
    8f1e:	e6e3      	b.n	8ce8 <__aeabi_dmul+0x184>
    8f20:	2501      	movs	r5, #1
    8f22:	08db      	lsrs	r3, r3, #3
    8f24:	0762      	lsls	r2, r4, #29
    8f26:	431a      	orrs	r2, r3
    8f28:	0264      	lsls	r4, r4, #9
    8f2a:	9b01      	ldr	r3, [sp, #4]
    8f2c:	4691      	mov	r9, r2
    8f2e:	0b22      	lsrs	r2, r4, #12
    8f30:	0544      	lsls	r4, r0, #21
    8f32:	0d64      	lsrs	r4, r4, #21
    8f34:	401d      	ands	r5, r3
    8f36:	e67c      	b.n	8c32 <__aeabi_dmul+0xce>
    8f38:	2280      	movs	r2, #128	; 0x80
    8f3a:	4659      	mov	r1, fp
    8f3c:	0312      	lsls	r2, r2, #12
    8f3e:	4211      	tst	r1, r2
    8f40:	d008      	beq.n	8f54 <__aeabi_dmul+0x3f0>
    8f42:	4214      	tst	r4, r2
    8f44:	d106      	bne.n	8f54 <__aeabi_dmul+0x3f0>
    8f46:	4322      	orrs	r2, r4
    8f48:	0312      	lsls	r2, r2, #12
    8f4a:	0b12      	lsrs	r2, r2, #12
    8f4c:	4645      	mov	r5, r8
    8f4e:	4699      	mov	r9, r3
    8f50:	4c43      	ldr	r4, [pc, #268]	; (9060 <__aeabi_dmul+0x4fc>)
    8f52:	e66e      	b.n	8c32 <__aeabi_dmul+0xce>
    8f54:	465b      	mov	r3, fp
    8f56:	431a      	orrs	r2, r3
    8f58:	0312      	lsls	r2, r2, #12
    8f5a:	0b12      	lsrs	r2, r2, #12
    8f5c:	4c40      	ldr	r4, [pc, #256]	; (9060 <__aeabi_dmul+0x4fc>)
    8f5e:	e668      	b.n	8c32 <__aeabi_dmul+0xce>
    8f60:	0003      	movs	r3, r0
    8f62:	4654      	mov	r4, sl
    8f64:	3b28      	subs	r3, #40	; 0x28
    8f66:	409c      	lsls	r4, r3
    8f68:	2300      	movs	r3, #0
    8f6a:	e6b9      	b.n	8ce0 <__aeabi_dmul+0x17c>
    8f6c:	f000 fbfc 	bl	9768 <__clzsi2>
    8f70:	3020      	adds	r0, #32
    8f72:	e6a6      	b.n	8cc2 <__aeabi_dmul+0x15e>
    8f74:	0003      	movs	r3, r0
    8f76:	3b28      	subs	r3, #40	; 0x28
    8f78:	409f      	lsls	r7, r3
    8f7a:	2300      	movs	r3, #0
    8f7c:	46bb      	mov	fp, r7
    8f7e:	4699      	mov	r9, r3
    8f80:	e68a      	b.n	8c98 <__aeabi_dmul+0x134>
    8f82:	f000 fbf1 	bl	9768 <__clzsi2>
    8f86:	3020      	adds	r0, #32
    8f88:	e674      	b.n	8c74 <__aeabi_dmul+0x110>
    8f8a:	46b4      	mov	ip, r6
    8f8c:	e7ad      	b.n	8eea <__aeabi_dmul+0x386>
    8f8e:	2501      	movs	r5, #1
    8f90:	1a2a      	subs	r2, r5, r0
    8f92:	2a38      	cmp	r2, #56	; 0x38
    8f94:	dd06      	ble.n	8fa4 <__aeabi_dmul+0x440>
    8f96:	9b01      	ldr	r3, [sp, #4]
    8f98:	2400      	movs	r4, #0
    8f9a:	401d      	ands	r5, r3
    8f9c:	2300      	movs	r3, #0
    8f9e:	2200      	movs	r2, #0
    8fa0:	4699      	mov	r9, r3
    8fa2:	e646      	b.n	8c32 <__aeabi_dmul+0xce>
    8fa4:	2a1f      	cmp	r2, #31
    8fa6:	dc21      	bgt.n	8fec <__aeabi_dmul+0x488>
    8fa8:	2520      	movs	r5, #32
    8faa:	0020      	movs	r0, r4
    8fac:	1aad      	subs	r5, r5, r2
    8fae:	001e      	movs	r6, r3
    8fb0:	40ab      	lsls	r3, r5
    8fb2:	40a8      	lsls	r0, r5
    8fb4:	40d6      	lsrs	r6, r2
    8fb6:	1e5d      	subs	r5, r3, #1
    8fb8:	41ab      	sbcs	r3, r5
    8fba:	4330      	orrs	r0, r6
    8fbc:	4318      	orrs	r0, r3
    8fbe:	40d4      	lsrs	r4, r2
    8fc0:	0743      	lsls	r3, r0, #29
    8fc2:	d009      	beq.n	8fd8 <__aeabi_dmul+0x474>
    8fc4:	230f      	movs	r3, #15
    8fc6:	4003      	ands	r3, r0
    8fc8:	2b04      	cmp	r3, #4
    8fca:	d005      	beq.n	8fd8 <__aeabi_dmul+0x474>
    8fcc:	0003      	movs	r3, r0
    8fce:	1d18      	adds	r0, r3, #4
    8fd0:	4298      	cmp	r0, r3
    8fd2:	419b      	sbcs	r3, r3
    8fd4:	425b      	negs	r3, r3
    8fd6:	18e4      	adds	r4, r4, r3
    8fd8:	0223      	lsls	r3, r4, #8
    8fda:	d521      	bpl.n	9020 <__aeabi_dmul+0x4bc>
    8fdc:	2501      	movs	r5, #1
    8fde:	9b01      	ldr	r3, [sp, #4]
    8fe0:	2401      	movs	r4, #1
    8fe2:	401d      	ands	r5, r3
    8fe4:	2300      	movs	r3, #0
    8fe6:	2200      	movs	r2, #0
    8fe8:	4699      	mov	r9, r3
    8fea:	e622      	b.n	8c32 <__aeabi_dmul+0xce>
    8fec:	251f      	movs	r5, #31
    8fee:	0021      	movs	r1, r4
    8ff0:	426d      	negs	r5, r5
    8ff2:	1a28      	subs	r0, r5, r0
    8ff4:	40c1      	lsrs	r1, r0
    8ff6:	0008      	movs	r0, r1
    8ff8:	2a20      	cmp	r2, #32
    8ffa:	d01d      	beq.n	9038 <__aeabi_dmul+0x4d4>
    8ffc:	355f      	adds	r5, #95	; 0x5f
    8ffe:	1aaa      	subs	r2, r5, r2
    9000:	4094      	lsls	r4, r2
    9002:	4323      	orrs	r3, r4
    9004:	1e5c      	subs	r4, r3, #1
    9006:	41a3      	sbcs	r3, r4
    9008:	2507      	movs	r5, #7
    900a:	4303      	orrs	r3, r0
    900c:	401d      	ands	r5, r3
    900e:	2200      	movs	r2, #0
    9010:	2d00      	cmp	r5, #0
    9012:	d009      	beq.n	9028 <__aeabi_dmul+0x4c4>
    9014:	220f      	movs	r2, #15
    9016:	2400      	movs	r4, #0
    9018:	401a      	ands	r2, r3
    901a:	0018      	movs	r0, r3
    901c:	2a04      	cmp	r2, #4
    901e:	d1d6      	bne.n	8fce <__aeabi_dmul+0x46a>
    9020:	0003      	movs	r3, r0
    9022:	0765      	lsls	r5, r4, #29
    9024:	0264      	lsls	r4, r4, #9
    9026:	0b22      	lsrs	r2, r4, #12
    9028:	08db      	lsrs	r3, r3, #3
    902a:	432b      	orrs	r3, r5
    902c:	2501      	movs	r5, #1
    902e:	4699      	mov	r9, r3
    9030:	9b01      	ldr	r3, [sp, #4]
    9032:	2400      	movs	r4, #0
    9034:	401d      	ands	r5, r3
    9036:	e5fc      	b.n	8c32 <__aeabi_dmul+0xce>
    9038:	2400      	movs	r4, #0
    903a:	e7e2      	b.n	9002 <__aeabi_dmul+0x49e>
    903c:	2280      	movs	r2, #128	; 0x80
    903e:	2501      	movs	r5, #1
    9040:	0312      	lsls	r2, r2, #12
    9042:	4322      	orrs	r2, r4
    9044:	9901      	ldr	r1, [sp, #4]
    9046:	0312      	lsls	r2, r2, #12
    9048:	0b12      	lsrs	r2, r2, #12
    904a:	400d      	ands	r5, r1
    904c:	4699      	mov	r9, r3
    904e:	4c04      	ldr	r4, [pc, #16]	; (9060 <__aeabi_dmul+0x4fc>)
    9050:	e5ef      	b.n	8c32 <__aeabi_dmul+0xce>
    9052:	46c0      	nop			; (mov r8, r8)
    9054:	000003ff 	.word	0x000003ff
    9058:	feffffff 	.word	0xfeffffff
    905c:	000007fe 	.word	0x000007fe
    9060:	000007ff 	.word	0x000007ff

00009064 <__aeabi_dsub>:
    9064:	b5f0      	push	{r4, r5, r6, r7, lr}
    9066:	4646      	mov	r6, r8
    9068:	46d6      	mov	lr, sl
    906a:	464f      	mov	r7, r9
    906c:	030c      	lsls	r4, r1, #12
    906e:	b5c0      	push	{r6, r7, lr}
    9070:	0fcd      	lsrs	r5, r1, #31
    9072:	004e      	lsls	r6, r1, #1
    9074:	0a61      	lsrs	r1, r4, #9
    9076:	0f44      	lsrs	r4, r0, #29
    9078:	430c      	orrs	r4, r1
    907a:	00c1      	lsls	r1, r0, #3
    907c:	0058      	lsls	r0, r3, #1
    907e:	0d40      	lsrs	r0, r0, #21
    9080:	4684      	mov	ip, r0
    9082:	468a      	mov	sl, r1
    9084:	000f      	movs	r7, r1
    9086:	0319      	lsls	r1, r3, #12
    9088:	0f50      	lsrs	r0, r2, #29
    908a:	0a49      	lsrs	r1, r1, #9
    908c:	4301      	orrs	r1, r0
    908e:	48c6      	ldr	r0, [pc, #792]	; (93a8 <__aeabi_dsub+0x344>)
    9090:	0d76      	lsrs	r6, r6, #21
    9092:	46a8      	mov	r8, r5
    9094:	0fdb      	lsrs	r3, r3, #31
    9096:	00d2      	lsls	r2, r2, #3
    9098:	4584      	cmp	ip, r0
    909a:	d100      	bne.n	909e <__aeabi_dsub+0x3a>
    909c:	e0d8      	b.n	9250 <__aeabi_dsub+0x1ec>
    909e:	2001      	movs	r0, #1
    90a0:	4043      	eors	r3, r0
    90a2:	42ab      	cmp	r3, r5
    90a4:	d100      	bne.n	90a8 <__aeabi_dsub+0x44>
    90a6:	e0a6      	b.n	91f6 <__aeabi_dsub+0x192>
    90a8:	4660      	mov	r0, ip
    90aa:	1a35      	subs	r5, r6, r0
    90ac:	2d00      	cmp	r5, #0
    90ae:	dc00      	bgt.n	90b2 <__aeabi_dsub+0x4e>
    90b0:	e105      	b.n	92be <__aeabi_dsub+0x25a>
    90b2:	2800      	cmp	r0, #0
    90b4:	d110      	bne.n	90d8 <__aeabi_dsub+0x74>
    90b6:	000b      	movs	r3, r1
    90b8:	4313      	orrs	r3, r2
    90ba:	d100      	bne.n	90be <__aeabi_dsub+0x5a>
    90bc:	e0d7      	b.n	926e <__aeabi_dsub+0x20a>
    90be:	1e6b      	subs	r3, r5, #1
    90c0:	2b00      	cmp	r3, #0
    90c2:	d000      	beq.n	90c6 <__aeabi_dsub+0x62>
    90c4:	e14b      	b.n	935e <__aeabi_dsub+0x2fa>
    90c6:	4653      	mov	r3, sl
    90c8:	1a9f      	subs	r7, r3, r2
    90ca:	45ba      	cmp	sl, r7
    90cc:	4180      	sbcs	r0, r0
    90ce:	1a64      	subs	r4, r4, r1
    90d0:	4240      	negs	r0, r0
    90d2:	1a24      	subs	r4, r4, r0
    90d4:	2601      	movs	r6, #1
    90d6:	e01e      	b.n	9116 <__aeabi_dsub+0xb2>
    90d8:	4bb3      	ldr	r3, [pc, #716]	; (93a8 <__aeabi_dsub+0x344>)
    90da:	429e      	cmp	r6, r3
    90dc:	d048      	beq.n	9170 <__aeabi_dsub+0x10c>
    90de:	2380      	movs	r3, #128	; 0x80
    90e0:	041b      	lsls	r3, r3, #16
    90e2:	4319      	orrs	r1, r3
    90e4:	2d38      	cmp	r5, #56	; 0x38
    90e6:	dd00      	ble.n	90ea <__aeabi_dsub+0x86>
    90e8:	e119      	b.n	931e <__aeabi_dsub+0x2ba>
    90ea:	2d1f      	cmp	r5, #31
    90ec:	dd00      	ble.n	90f0 <__aeabi_dsub+0x8c>
    90ee:	e14c      	b.n	938a <__aeabi_dsub+0x326>
    90f0:	2320      	movs	r3, #32
    90f2:	000f      	movs	r7, r1
    90f4:	1b5b      	subs	r3, r3, r5
    90f6:	0010      	movs	r0, r2
    90f8:	409a      	lsls	r2, r3
    90fa:	409f      	lsls	r7, r3
    90fc:	40e8      	lsrs	r0, r5
    90fe:	1e53      	subs	r3, r2, #1
    9100:	419a      	sbcs	r2, r3
    9102:	40e9      	lsrs	r1, r5
    9104:	4307      	orrs	r7, r0
    9106:	4317      	orrs	r7, r2
    9108:	4653      	mov	r3, sl
    910a:	1bdf      	subs	r7, r3, r7
    910c:	1a61      	subs	r1, r4, r1
    910e:	45ba      	cmp	sl, r7
    9110:	41a4      	sbcs	r4, r4
    9112:	4264      	negs	r4, r4
    9114:	1b0c      	subs	r4, r1, r4
    9116:	0223      	lsls	r3, r4, #8
    9118:	d400      	bmi.n	911c <__aeabi_dsub+0xb8>
    911a:	e0c5      	b.n	92a8 <__aeabi_dsub+0x244>
    911c:	0264      	lsls	r4, r4, #9
    911e:	0a65      	lsrs	r5, r4, #9
    9120:	2d00      	cmp	r5, #0
    9122:	d100      	bne.n	9126 <__aeabi_dsub+0xc2>
    9124:	e0f6      	b.n	9314 <__aeabi_dsub+0x2b0>
    9126:	0028      	movs	r0, r5
    9128:	f000 fb1e 	bl	9768 <__clzsi2>
    912c:	0003      	movs	r3, r0
    912e:	3b08      	subs	r3, #8
    9130:	2b1f      	cmp	r3, #31
    9132:	dd00      	ble.n	9136 <__aeabi_dsub+0xd2>
    9134:	e0e9      	b.n	930a <__aeabi_dsub+0x2a6>
    9136:	2220      	movs	r2, #32
    9138:	003c      	movs	r4, r7
    913a:	1ad2      	subs	r2, r2, r3
    913c:	409d      	lsls	r5, r3
    913e:	40d4      	lsrs	r4, r2
    9140:	409f      	lsls	r7, r3
    9142:	4325      	orrs	r5, r4
    9144:	429e      	cmp	r6, r3
    9146:	dd00      	ble.n	914a <__aeabi_dsub+0xe6>
    9148:	e0db      	b.n	9302 <__aeabi_dsub+0x29e>
    914a:	1b9e      	subs	r6, r3, r6
    914c:	1c73      	adds	r3, r6, #1
    914e:	2b1f      	cmp	r3, #31
    9150:	dd00      	ble.n	9154 <__aeabi_dsub+0xf0>
    9152:	e10a      	b.n	936a <__aeabi_dsub+0x306>
    9154:	2220      	movs	r2, #32
    9156:	0038      	movs	r0, r7
    9158:	1ad2      	subs	r2, r2, r3
    915a:	0029      	movs	r1, r5
    915c:	4097      	lsls	r7, r2
    915e:	002c      	movs	r4, r5
    9160:	4091      	lsls	r1, r2
    9162:	40d8      	lsrs	r0, r3
    9164:	1e7a      	subs	r2, r7, #1
    9166:	4197      	sbcs	r7, r2
    9168:	40dc      	lsrs	r4, r3
    916a:	2600      	movs	r6, #0
    916c:	4301      	orrs	r1, r0
    916e:	430f      	orrs	r7, r1
    9170:	077b      	lsls	r3, r7, #29
    9172:	d009      	beq.n	9188 <__aeabi_dsub+0x124>
    9174:	230f      	movs	r3, #15
    9176:	403b      	ands	r3, r7
    9178:	2b04      	cmp	r3, #4
    917a:	d005      	beq.n	9188 <__aeabi_dsub+0x124>
    917c:	1d3b      	adds	r3, r7, #4
    917e:	42bb      	cmp	r3, r7
    9180:	41bf      	sbcs	r7, r7
    9182:	427f      	negs	r7, r7
    9184:	19e4      	adds	r4, r4, r7
    9186:	001f      	movs	r7, r3
    9188:	0223      	lsls	r3, r4, #8
    918a:	d525      	bpl.n	91d8 <__aeabi_dsub+0x174>
    918c:	4b86      	ldr	r3, [pc, #536]	; (93a8 <__aeabi_dsub+0x344>)
    918e:	3601      	adds	r6, #1
    9190:	429e      	cmp	r6, r3
    9192:	d100      	bne.n	9196 <__aeabi_dsub+0x132>
    9194:	e0af      	b.n	92f6 <__aeabi_dsub+0x292>
    9196:	4b85      	ldr	r3, [pc, #532]	; (93ac <__aeabi_dsub+0x348>)
    9198:	2501      	movs	r5, #1
    919a:	401c      	ands	r4, r3
    919c:	4643      	mov	r3, r8
    919e:	0762      	lsls	r2, r4, #29
    91a0:	08ff      	lsrs	r7, r7, #3
    91a2:	0264      	lsls	r4, r4, #9
    91a4:	0576      	lsls	r6, r6, #21
    91a6:	4317      	orrs	r7, r2
    91a8:	0b24      	lsrs	r4, r4, #12
    91aa:	0d76      	lsrs	r6, r6, #21
    91ac:	401d      	ands	r5, r3
    91ae:	2100      	movs	r1, #0
    91b0:	0324      	lsls	r4, r4, #12
    91b2:	0b23      	lsrs	r3, r4, #12
    91b4:	0d0c      	lsrs	r4, r1, #20
    91b6:	4a7e      	ldr	r2, [pc, #504]	; (93b0 <__aeabi_dsub+0x34c>)
    91b8:	0524      	lsls	r4, r4, #20
    91ba:	431c      	orrs	r4, r3
    91bc:	4014      	ands	r4, r2
    91be:	0533      	lsls	r3, r6, #20
    91c0:	4323      	orrs	r3, r4
    91c2:	005b      	lsls	r3, r3, #1
    91c4:	07ed      	lsls	r5, r5, #31
    91c6:	085b      	lsrs	r3, r3, #1
    91c8:	432b      	orrs	r3, r5
    91ca:	0038      	movs	r0, r7
    91cc:	0019      	movs	r1, r3
    91ce:	bc1c      	pop	{r2, r3, r4}
    91d0:	4690      	mov	r8, r2
    91d2:	4699      	mov	r9, r3
    91d4:	46a2      	mov	sl, r4
    91d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    91d8:	2501      	movs	r5, #1
    91da:	4643      	mov	r3, r8
    91dc:	0762      	lsls	r2, r4, #29
    91de:	08ff      	lsrs	r7, r7, #3
    91e0:	4317      	orrs	r7, r2
    91e2:	08e4      	lsrs	r4, r4, #3
    91e4:	401d      	ands	r5, r3
    91e6:	4b70      	ldr	r3, [pc, #448]	; (93a8 <__aeabi_dsub+0x344>)
    91e8:	429e      	cmp	r6, r3
    91ea:	d036      	beq.n	925a <__aeabi_dsub+0x1f6>
    91ec:	0324      	lsls	r4, r4, #12
    91ee:	0576      	lsls	r6, r6, #21
    91f0:	0b24      	lsrs	r4, r4, #12
    91f2:	0d76      	lsrs	r6, r6, #21
    91f4:	e7db      	b.n	91ae <__aeabi_dsub+0x14a>
    91f6:	4663      	mov	r3, ip
    91f8:	1af3      	subs	r3, r6, r3
    91fa:	2b00      	cmp	r3, #0
    91fc:	dc00      	bgt.n	9200 <__aeabi_dsub+0x19c>
    91fe:	e094      	b.n	932a <__aeabi_dsub+0x2c6>
    9200:	4660      	mov	r0, ip
    9202:	2800      	cmp	r0, #0
    9204:	d035      	beq.n	9272 <__aeabi_dsub+0x20e>
    9206:	4868      	ldr	r0, [pc, #416]	; (93a8 <__aeabi_dsub+0x344>)
    9208:	4286      	cmp	r6, r0
    920a:	d0b1      	beq.n	9170 <__aeabi_dsub+0x10c>
    920c:	2780      	movs	r7, #128	; 0x80
    920e:	043f      	lsls	r7, r7, #16
    9210:	4339      	orrs	r1, r7
    9212:	2b38      	cmp	r3, #56	; 0x38
    9214:	dc00      	bgt.n	9218 <__aeabi_dsub+0x1b4>
    9216:	e0fd      	b.n	9414 <__aeabi_dsub+0x3b0>
    9218:	430a      	orrs	r2, r1
    921a:	0017      	movs	r7, r2
    921c:	2100      	movs	r1, #0
    921e:	1e7a      	subs	r2, r7, #1
    9220:	4197      	sbcs	r7, r2
    9222:	4457      	add	r7, sl
    9224:	4557      	cmp	r7, sl
    9226:	4180      	sbcs	r0, r0
    9228:	1909      	adds	r1, r1, r4
    922a:	4244      	negs	r4, r0
    922c:	190c      	adds	r4, r1, r4
    922e:	0223      	lsls	r3, r4, #8
    9230:	d53a      	bpl.n	92a8 <__aeabi_dsub+0x244>
    9232:	4b5d      	ldr	r3, [pc, #372]	; (93a8 <__aeabi_dsub+0x344>)
    9234:	3601      	adds	r6, #1
    9236:	429e      	cmp	r6, r3
    9238:	d100      	bne.n	923c <__aeabi_dsub+0x1d8>
    923a:	e14b      	b.n	94d4 <__aeabi_dsub+0x470>
    923c:	2201      	movs	r2, #1
    923e:	4b5b      	ldr	r3, [pc, #364]	; (93ac <__aeabi_dsub+0x348>)
    9240:	401c      	ands	r4, r3
    9242:	087b      	lsrs	r3, r7, #1
    9244:	4017      	ands	r7, r2
    9246:	431f      	orrs	r7, r3
    9248:	07e2      	lsls	r2, r4, #31
    924a:	4317      	orrs	r7, r2
    924c:	0864      	lsrs	r4, r4, #1
    924e:	e78f      	b.n	9170 <__aeabi_dsub+0x10c>
    9250:	0008      	movs	r0, r1
    9252:	4310      	orrs	r0, r2
    9254:	d000      	beq.n	9258 <__aeabi_dsub+0x1f4>
    9256:	e724      	b.n	90a2 <__aeabi_dsub+0x3e>
    9258:	e721      	b.n	909e <__aeabi_dsub+0x3a>
    925a:	0023      	movs	r3, r4
    925c:	433b      	orrs	r3, r7
    925e:	d100      	bne.n	9262 <__aeabi_dsub+0x1fe>
    9260:	e1b9      	b.n	95d6 <__aeabi_dsub+0x572>
    9262:	2280      	movs	r2, #128	; 0x80
    9264:	0312      	lsls	r2, r2, #12
    9266:	4314      	orrs	r4, r2
    9268:	0324      	lsls	r4, r4, #12
    926a:	0b24      	lsrs	r4, r4, #12
    926c:	e79f      	b.n	91ae <__aeabi_dsub+0x14a>
    926e:	002e      	movs	r6, r5
    9270:	e77e      	b.n	9170 <__aeabi_dsub+0x10c>
    9272:	0008      	movs	r0, r1
    9274:	4310      	orrs	r0, r2
    9276:	d100      	bne.n	927a <__aeabi_dsub+0x216>
    9278:	e0ca      	b.n	9410 <__aeabi_dsub+0x3ac>
    927a:	1e58      	subs	r0, r3, #1
    927c:	4684      	mov	ip, r0
    927e:	2800      	cmp	r0, #0
    9280:	d000      	beq.n	9284 <__aeabi_dsub+0x220>
    9282:	e0e7      	b.n	9454 <__aeabi_dsub+0x3f0>
    9284:	4452      	add	r2, sl
    9286:	4552      	cmp	r2, sl
    9288:	4180      	sbcs	r0, r0
    928a:	1864      	adds	r4, r4, r1
    928c:	4240      	negs	r0, r0
    928e:	1824      	adds	r4, r4, r0
    9290:	0017      	movs	r7, r2
    9292:	2601      	movs	r6, #1
    9294:	0223      	lsls	r3, r4, #8
    9296:	d507      	bpl.n	92a8 <__aeabi_dsub+0x244>
    9298:	2602      	movs	r6, #2
    929a:	e7cf      	b.n	923c <__aeabi_dsub+0x1d8>
    929c:	4664      	mov	r4, ip
    929e:	432c      	orrs	r4, r5
    92a0:	d100      	bne.n	92a4 <__aeabi_dsub+0x240>
    92a2:	e1b3      	b.n	960c <__aeabi_dsub+0x5a8>
    92a4:	002c      	movs	r4, r5
    92a6:	4667      	mov	r7, ip
    92a8:	077b      	lsls	r3, r7, #29
    92aa:	d000      	beq.n	92ae <__aeabi_dsub+0x24a>
    92ac:	e762      	b.n	9174 <__aeabi_dsub+0x110>
    92ae:	0763      	lsls	r3, r4, #29
    92b0:	08ff      	lsrs	r7, r7, #3
    92b2:	431f      	orrs	r7, r3
    92b4:	2501      	movs	r5, #1
    92b6:	4643      	mov	r3, r8
    92b8:	08e4      	lsrs	r4, r4, #3
    92ba:	401d      	ands	r5, r3
    92bc:	e793      	b.n	91e6 <__aeabi_dsub+0x182>
    92be:	2d00      	cmp	r5, #0
    92c0:	d178      	bne.n	93b4 <__aeabi_dsub+0x350>
    92c2:	1c75      	adds	r5, r6, #1
    92c4:	056d      	lsls	r5, r5, #21
    92c6:	0d6d      	lsrs	r5, r5, #21
    92c8:	2d01      	cmp	r5, #1
    92ca:	dc00      	bgt.n	92ce <__aeabi_dsub+0x26a>
    92cc:	e0f2      	b.n	94b4 <__aeabi_dsub+0x450>
    92ce:	4650      	mov	r0, sl
    92d0:	1a80      	subs	r0, r0, r2
    92d2:	4582      	cmp	sl, r0
    92d4:	41bf      	sbcs	r7, r7
    92d6:	1a65      	subs	r5, r4, r1
    92d8:	427f      	negs	r7, r7
    92da:	1bed      	subs	r5, r5, r7
    92dc:	4684      	mov	ip, r0
    92de:	0228      	lsls	r0, r5, #8
    92e0:	d400      	bmi.n	92e4 <__aeabi_dsub+0x280>
    92e2:	e08c      	b.n	93fe <__aeabi_dsub+0x39a>
    92e4:	4650      	mov	r0, sl
    92e6:	1a17      	subs	r7, r2, r0
    92e8:	42ba      	cmp	r2, r7
    92ea:	4192      	sbcs	r2, r2
    92ec:	1b0c      	subs	r4, r1, r4
    92ee:	4255      	negs	r5, r2
    92f0:	1b65      	subs	r5, r4, r5
    92f2:	4698      	mov	r8, r3
    92f4:	e714      	b.n	9120 <__aeabi_dsub+0xbc>
    92f6:	2501      	movs	r5, #1
    92f8:	4643      	mov	r3, r8
    92fa:	2400      	movs	r4, #0
    92fc:	401d      	ands	r5, r3
    92fe:	2700      	movs	r7, #0
    9300:	e755      	b.n	91ae <__aeabi_dsub+0x14a>
    9302:	4c2a      	ldr	r4, [pc, #168]	; (93ac <__aeabi_dsub+0x348>)
    9304:	1af6      	subs	r6, r6, r3
    9306:	402c      	ands	r4, r5
    9308:	e732      	b.n	9170 <__aeabi_dsub+0x10c>
    930a:	003d      	movs	r5, r7
    930c:	3828      	subs	r0, #40	; 0x28
    930e:	4085      	lsls	r5, r0
    9310:	2700      	movs	r7, #0
    9312:	e717      	b.n	9144 <__aeabi_dsub+0xe0>
    9314:	0038      	movs	r0, r7
    9316:	f000 fa27 	bl	9768 <__clzsi2>
    931a:	3020      	adds	r0, #32
    931c:	e706      	b.n	912c <__aeabi_dsub+0xc8>
    931e:	430a      	orrs	r2, r1
    9320:	0017      	movs	r7, r2
    9322:	2100      	movs	r1, #0
    9324:	1e7a      	subs	r2, r7, #1
    9326:	4197      	sbcs	r7, r2
    9328:	e6ee      	b.n	9108 <__aeabi_dsub+0xa4>
    932a:	2b00      	cmp	r3, #0
    932c:	d000      	beq.n	9330 <__aeabi_dsub+0x2cc>
    932e:	e0e5      	b.n	94fc <__aeabi_dsub+0x498>
    9330:	1c73      	adds	r3, r6, #1
    9332:	469c      	mov	ip, r3
    9334:	055b      	lsls	r3, r3, #21
    9336:	0d5b      	lsrs	r3, r3, #21
    9338:	2b01      	cmp	r3, #1
    933a:	dc00      	bgt.n	933e <__aeabi_dsub+0x2da>
    933c:	e09f      	b.n	947e <__aeabi_dsub+0x41a>
    933e:	4b1a      	ldr	r3, [pc, #104]	; (93a8 <__aeabi_dsub+0x344>)
    9340:	459c      	cmp	ip, r3
    9342:	d100      	bne.n	9346 <__aeabi_dsub+0x2e2>
    9344:	e0c5      	b.n	94d2 <__aeabi_dsub+0x46e>
    9346:	4452      	add	r2, sl
    9348:	4552      	cmp	r2, sl
    934a:	4180      	sbcs	r0, r0
    934c:	1864      	adds	r4, r4, r1
    934e:	4240      	negs	r0, r0
    9350:	1824      	adds	r4, r4, r0
    9352:	07e7      	lsls	r7, r4, #31
    9354:	0852      	lsrs	r2, r2, #1
    9356:	4317      	orrs	r7, r2
    9358:	0864      	lsrs	r4, r4, #1
    935a:	4666      	mov	r6, ip
    935c:	e708      	b.n	9170 <__aeabi_dsub+0x10c>
    935e:	4812      	ldr	r0, [pc, #72]	; (93a8 <__aeabi_dsub+0x344>)
    9360:	4285      	cmp	r5, r0
    9362:	d100      	bne.n	9366 <__aeabi_dsub+0x302>
    9364:	e085      	b.n	9472 <__aeabi_dsub+0x40e>
    9366:	001d      	movs	r5, r3
    9368:	e6bc      	b.n	90e4 <__aeabi_dsub+0x80>
    936a:	0029      	movs	r1, r5
    936c:	3e1f      	subs	r6, #31
    936e:	40f1      	lsrs	r1, r6
    9370:	2b20      	cmp	r3, #32
    9372:	d100      	bne.n	9376 <__aeabi_dsub+0x312>
    9374:	e07f      	b.n	9476 <__aeabi_dsub+0x412>
    9376:	2240      	movs	r2, #64	; 0x40
    9378:	1ad3      	subs	r3, r2, r3
    937a:	409d      	lsls	r5, r3
    937c:	432f      	orrs	r7, r5
    937e:	1e7d      	subs	r5, r7, #1
    9380:	41af      	sbcs	r7, r5
    9382:	2400      	movs	r4, #0
    9384:	430f      	orrs	r7, r1
    9386:	2600      	movs	r6, #0
    9388:	e78e      	b.n	92a8 <__aeabi_dsub+0x244>
    938a:	002b      	movs	r3, r5
    938c:	000f      	movs	r7, r1
    938e:	3b20      	subs	r3, #32
    9390:	40df      	lsrs	r7, r3
    9392:	2d20      	cmp	r5, #32
    9394:	d071      	beq.n	947a <__aeabi_dsub+0x416>
    9396:	2340      	movs	r3, #64	; 0x40
    9398:	1b5d      	subs	r5, r3, r5
    939a:	40a9      	lsls	r1, r5
    939c:	430a      	orrs	r2, r1
    939e:	1e51      	subs	r1, r2, #1
    93a0:	418a      	sbcs	r2, r1
    93a2:	2100      	movs	r1, #0
    93a4:	4317      	orrs	r7, r2
    93a6:	e6af      	b.n	9108 <__aeabi_dsub+0xa4>
    93a8:	000007ff 	.word	0x000007ff
    93ac:	ff7fffff 	.word	0xff7fffff
    93b0:	800fffff 	.word	0x800fffff
    93b4:	2e00      	cmp	r6, #0
    93b6:	d03e      	beq.n	9436 <__aeabi_dsub+0x3d2>
    93b8:	4eb3      	ldr	r6, [pc, #716]	; (9688 <__aeabi_dsub+0x624>)
    93ba:	45b4      	cmp	ip, r6
    93bc:	d045      	beq.n	944a <__aeabi_dsub+0x3e6>
    93be:	2680      	movs	r6, #128	; 0x80
    93c0:	0436      	lsls	r6, r6, #16
    93c2:	426d      	negs	r5, r5
    93c4:	4334      	orrs	r4, r6
    93c6:	2d38      	cmp	r5, #56	; 0x38
    93c8:	dd00      	ble.n	93cc <__aeabi_dsub+0x368>
    93ca:	e0a8      	b.n	951e <__aeabi_dsub+0x4ba>
    93cc:	2d1f      	cmp	r5, #31
    93ce:	dd00      	ble.n	93d2 <__aeabi_dsub+0x36e>
    93d0:	e11f      	b.n	9612 <__aeabi_dsub+0x5ae>
    93d2:	2620      	movs	r6, #32
    93d4:	0027      	movs	r7, r4
    93d6:	4650      	mov	r0, sl
    93d8:	1b76      	subs	r6, r6, r5
    93da:	40b7      	lsls	r7, r6
    93dc:	40e8      	lsrs	r0, r5
    93de:	4307      	orrs	r7, r0
    93e0:	4650      	mov	r0, sl
    93e2:	40b0      	lsls	r0, r6
    93e4:	1e46      	subs	r6, r0, #1
    93e6:	41b0      	sbcs	r0, r6
    93e8:	40ec      	lsrs	r4, r5
    93ea:	4338      	orrs	r0, r7
    93ec:	1a17      	subs	r7, r2, r0
    93ee:	42ba      	cmp	r2, r7
    93f0:	4192      	sbcs	r2, r2
    93f2:	1b0c      	subs	r4, r1, r4
    93f4:	4252      	negs	r2, r2
    93f6:	1aa4      	subs	r4, r4, r2
    93f8:	4666      	mov	r6, ip
    93fa:	4698      	mov	r8, r3
    93fc:	e68b      	b.n	9116 <__aeabi_dsub+0xb2>
    93fe:	4664      	mov	r4, ip
    9400:	4667      	mov	r7, ip
    9402:	432c      	orrs	r4, r5
    9404:	d000      	beq.n	9408 <__aeabi_dsub+0x3a4>
    9406:	e68b      	b.n	9120 <__aeabi_dsub+0xbc>
    9408:	2500      	movs	r5, #0
    940a:	2600      	movs	r6, #0
    940c:	2700      	movs	r7, #0
    940e:	e6ea      	b.n	91e6 <__aeabi_dsub+0x182>
    9410:	001e      	movs	r6, r3
    9412:	e6ad      	b.n	9170 <__aeabi_dsub+0x10c>
    9414:	2b1f      	cmp	r3, #31
    9416:	dc60      	bgt.n	94da <__aeabi_dsub+0x476>
    9418:	2720      	movs	r7, #32
    941a:	1af8      	subs	r0, r7, r3
    941c:	000f      	movs	r7, r1
    941e:	4684      	mov	ip, r0
    9420:	4087      	lsls	r7, r0
    9422:	0010      	movs	r0, r2
    9424:	40d8      	lsrs	r0, r3
    9426:	4307      	orrs	r7, r0
    9428:	4660      	mov	r0, ip
    942a:	4082      	lsls	r2, r0
    942c:	1e50      	subs	r0, r2, #1
    942e:	4182      	sbcs	r2, r0
    9430:	40d9      	lsrs	r1, r3
    9432:	4317      	orrs	r7, r2
    9434:	e6f5      	b.n	9222 <__aeabi_dsub+0x1be>
    9436:	0026      	movs	r6, r4
    9438:	4650      	mov	r0, sl
    943a:	4306      	orrs	r6, r0
    943c:	d005      	beq.n	944a <__aeabi_dsub+0x3e6>
    943e:	43ed      	mvns	r5, r5
    9440:	2d00      	cmp	r5, #0
    9442:	d0d3      	beq.n	93ec <__aeabi_dsub+0x388>
    9444:	4e90      	ldr	r6, [pc, #576]	; (9688 <__aeabi_dsub+0x624>)
    9446:	45b4      	cmp	ip, r6
    9448:	d1bd      	bne.n	93c6 <__aeabi_dsub+0x362>
    944a:	000c      	movs	r4, r1
    944c:	0017      	movs	r7, r2
    944e:	4666      	mov	r6, ip
    9450:	4698      	mov	r8, r3
    9452:	e68d      	b.n	9170 <__aeabi_dsub+0x10c>
    9454:	488c      	ldr	r0, [pc, #560]	; (9688 <__aeabi_dsub+0x624>)
    9456:	4283      	cmp	r3, r0
    9458:	d00b      	beq.n	9472 <__aeabi_dsub+0x40e>
    945a:	4663      	mov	r3, ip
    945c:	e6d9      	b.n	9212 <__aeabi_dsub+0x1ae>
    945e:	2d00      	cmp	r5, #0
    9460:	d000      	beq.n	9464 <__aeabi_dsub+0x400>
    9462:	e096      	b.n	9592 <__aeabi_dsub+0x52e>
    9464:	0008      	movs	r0, r1
    9466:	4310      	orrs	r0, r2
    9468:	d100      	bne.n	946c <__aeabi_dsub+0x408>
    946a:	e0e2      	b.n	9632 <__aeabi_dsub+0x5ce>
    946c:	000c      	movs	r4, r1
    946e:	0017      	movs	r7, r2
    9470:	4698      	mov	r8, r3
    9472:	4e85      	ldr	r6, [pc, #532]	; (9688 <__aeabi_dsub+0x624>)
    9474:	e67c      	b.n	9170 <__aeabi_dsub+0x10c>
    9476:	2500      	movs	r5, #0
    9478:	e780      	b.n	937c <__aeabi_dsub+0x318>
    947a:	2100      	movs	r1, #0
    947c:	e78e      	b.n	939c <__aeabi_dsub+0x338>
    947e:	0023      	movs	r3, r4
    9480:	4650      	mov	r0, sl
    9482:	4303      	orrs	r3, r0
    9484:	2e00      	cmp	r6, #0
    9486:	d000      	beq.n	948a <__aeabi_dsub+0x426>
    9488:	e0a8      	b.n	95dc <__aeabi_dsub+0x578>
    948a:	2b00      	cmp	r3, #0
    948c:	d100      	bne.n	9490 <__aeabi_dsub+0x42c>
    948e:	e0de      	b.n	964e <__aeabi_dsub+0x5ea>
    9490:	000b      	movs	r3, r1
    9492:	4313      	orrs	r3, r2
    9494:	d100      	bne.n	9498 <__aeabi_dsub+0x434>
    9496:	e66b      	b.n	9170 <__aeabi_dsub+0x10c>
    9498:	4452      	add	r2, sl
    949a:	4552      	cmp	r2, sl
    949c:	4180      	sbcs	r0, r0
    949e:	1864      	adds	r4, r4, r1
    94a0:	4240      	negs	r0, r0
    94a2:	1824      	adds	r4, r4, r0
    94a4:	0017      	movs	r7, r2
    94a6:	0223      	lsls	r3, r4, #8
    94a8:	d400      	bmi.n	94ac <__aeabi_dsub+0x448>
    94aa:	e6fd      	b.n	92a8 <__aeabi_dsub+0x244>
    94ac:	4b77      	ldr	r3, [pc, #476]	; (968c <__aeabi_dsub+0x628>)
    94ae:	4666      	mov	r6, ip
    94b0:	401c      	ands	r4, r3
    94b2:	e65d      	b.n	9170 <__aeabi_dsub+0x10c>
    94b4:	0025      	movs	r5, r4
    94b6:	4650      	mov	r0, sl
    94b8:	4305      	orrs	r5, r0
    94ba:	2e00      	cmp	r6, #0
    94bc:	d1cf      	bne.n	945e <__aeabi_dsub+0x3fa>
    94be:	2d00      	cmp	r5, #0
    94c0:	d14f      	bne.n	9562 <__aeabi_dsub+0x4fe>
    94c2:	000c      	movs	r4, r1
    94c4:	4314      	orrs	r4, r2
    94c6:	d100      	bne.n	94ca <__aeabi_dsub+0x466>
    94c8:	e0a0      	b.n	960c <__aeabi_dsub+0x5a8>
    94ca:	000c      	movs	r4, r1
    94cc:	0017      	movs	r7, r2
    94ce:	4698      	mov	r8, r3
    94d0:	e64e      	b.n	9170 <__aeabi_dsub+0x10c>
    94d2:	4666      	mov	r6, ip
    94d4:	2400      	movs	r4, #0
    94d6:	2700      	movs	r7, #0
    94d8:	e685      	b.n	91e6 <__aeabi_dsub+0x182>
    94da:	001f      	movs	r7, r3
    94dc:	0008      	movs	r0, r1
    94de:	3f20      	subs	r7, #32
    94e0:	40f8      	lsrs	r0, r7
    94e2:	0007      	movs	r7, r0
    94e4:	2b20      	cmp	r3, #32
    94e6:	d100      	bne.n	94ea <__aeabi_dsub+0x486>
    94e8:	e08e      	b.n	9608 <__aeabi_dsub+0x5a4>
    94ea:	2040      	movs	r0, #64	; 0x40
    94ec:	1ac3      	subs	r3, r0, r3
    94ee:	4099      	lsls	r1, r3
    94f0:	430a      	orrs	r2, r1
    94f2:	1e51      	subs	r1, r2, #1
    94f4:	418a      	sbcs	r2, r1
    94f6:	2100      	movs	r1, #0
    94f8:	4317      	orrs	r7, r2
    94fa:	e692      	b.n	9222 <__aeabi_dsub+0x1be>
    94fc:	2e00      	cmp	r6, #0
    94fe:	d114      	bne.n	952a <__aeabi_dsub+0x4c6>
    9500:	0026      	movs	r6, r4
    9502:	4650      	mov	r0, sl
    9504:	4306      	orrs	r6, r0
    9506:	d062      	beq.n	95ce <__aeabi_dsub+0x56a>
    9508:	43db      	mvns	r3, r3
    950a:	2b00      	cmp	r3, #0
    950c:	d15c      	bne.n	95c8 <__aeabi_dsub+0x564>
    950e:	1887      	adds	r7, r0, r2
    9510:	4297      	cmp	r7, r2
    9512:	4192      	sbcs	r2, r2
    9514:	1864      	adds	r4, r4, r1
    9516:	4252      	negs	r2, r2
    9518:	18a4      	adds	r4, r4, r2
    951a:	4666      	mov	r6, ip
    951c:	e687      	b.n	922e <__aeabi_dsub+0x1ca>
    951e:	4650      	mov	r0, sl
    9520:	4320      	orrs	r0, r4
    9522:	1e44      	subs	r4, r0, #1
    9524:	41a0      	sbcs	r0, r4
    9526:	2400      	movs	r4, #0
    9528:	e760      	b.n	93ec <__aeabi_dsub+0x388>
    952a:	4e57      	ldr	r6, [pc, #348]	; (9688 <__aeabi_dsub+0x624>)
    952c:	45b4      	cmp	ip, r6
    952e:	d04e      	beq.n	95ce <__aeabi_dsub+0x56a>
    9530:	2680      	movs	r6, #128	; 0x80
    9532:	0436      	lsls	r6, r6, #16
    9534:	425b      	negs	r3, r3
    9536:	4334      	orrs	r4, r6
    9538:	2b38      	cmp	r3, #56	; 0x38
    953a:	dd00      	ble.n	953e <__aeabi_dsub+0x4da>
    953c:	e07f      	b.n	963e <__aeabi_dsub+0x5da>
    953e:	2b1f      	cmp	r3, #31
    9540:	dd00      	ble.n	9544 <__aeabi_dsub+0x4e0>
    9542:	e08b      	b.n	965c <__aeabi_dsub+0x5f8>
    9544:	2620      	movs	r6, #32
    9546:	0027      	movs	r7, r4
    9548:	4650      	mov	r0, sl
    954a:	1af6      	subs	r6, r6, r3
    954c:	40b7      	lsls	r7, r6
    954e:	40d8      	lsrs	r0, r3
    9550:	4307      	orrs	r7, r0
    9552:	4650      	mov	r0, sl
    9554:	40b0      	lsls	r0, r6
    9556:	1e46      	subs	r6, r0, #1
    9558:	41b0      	sbcs	r0, r6
    955a:	4307      	orrs	r7, r0
    955c:	40dc      	lsrs	r4, r3
    955e:	18bf      	adds	r7, r7, r2
    9560:	e7d6      	b.n	9510 <__aeabi_dsub+0x4ac>
    9562:	000d      	movs	r5, r1
    9564:	4315      	orrs	r5, r2
    9566:	d100      	bne.n	956a <__aeabi_dsub+0x506>
    9568:	e602      	b.n	9170 <__aeabi_dsub+0x10c>
    956a:	4650      	mov	r0, sl
    956c:	1a80      	subs	r0, r0, r2
    956e:	4582      	cmp	sl, r0
    9570:	41bf      	sbcs	r7, r7
    9572:	1a65      	subs	r5, r4, r1
    9574:	427f      	negs	r7, r7
    9576:	1bed      	subs	r5, r5, r7
    9578:	4684      	mov	ip, r0
    957a:	0228      	lsls	r0, r5, #8
    957c:	d400      	bmi.n	9580 <__aeabi_dsub+0x51c>
    957e:	e68d      	b.n	929c <__aeabi_dsub+0x238>
    9580:	4650      	mov	r0, sl
    9582:	1a17      	subs	r7, r2, r0
    9584:	42ba      	cmp	r2, r7
    9586:	4192      	sbcs	r2, r2
    9588:	1b0c      	subs	r4, r1, r4
    958a:	4252      	negs	r2, r2
    958c:	1aa4      	subs	r4, r4, r2
    958e:	4698      	mov	r8, r3
    9590:	e5ee      	b.n	9170 <__aeabi_dsub+0x10c>
    9592:	000d      	movs	r5, r1
    9594:	4315      	orrs	r5, r2
    9596:	d100      	bne.n	959a <__aeabi_dsub+0x536>
    9598:	e76b      	b.n	9472 <__aeabi_dsub+0x40e>
    959a:	4650      	mov	r0, sl
    959c:	0767      	lsls	r7, r4, #29
    959e:	08c0      	lsrs	r0, r0, #3
    95a0:	4307      	orrs	r7, r0
    95a2:	2080      	movs	r0, #128	; 0x80
    95a4:	08e4      	lsrs	r4, r4, #3
    95a6:	0300      	lsls	r0, r0, #12
    95a8:	4204      	tst	r4, r0
    95aa:	d007      	beq.n	95bc <__aeabi_dsub+0x558>
    95ac:	08cd      	lsrs	r5, r1, #3
    95ae:	4205      	tst	r5, r0
    95b0:	d104      	bne.n	95bc <__aeabi_dsub+0x558>
    95b2:	002c      	movs	r4, r5
    95b4:	4698      	mov	r8, r3
    95b6:	08d7      	lsrs	r7, r2, #3
    95b8:	0749      	lsls	r1, r1, #29
    95ba:	430f      	orrs	r7, r1
    95bc:	0f7b      	lsrs	r3, r7, #29
    95be:	00e4      	lsls	r4, r4, #3
    95c0:	431c      	orrs	r4, r3
    95c2:	00ff      	lsls	r7, r7, #3
    95c4:	4e30      	ldr	r6, [pc, #192]	; (9688 <__aeabi_dsub+0x624>)
    95c6:	e5d3      	b.n	9170 <__aeabi_dsub+0x10c>
    95c8:	4e2f      	ldr	r6, [pc, #188]	; (9688 <__aeabi_dsub+0x624>)
    95ca:	45b4      	cmp	ip, r6
    95cc:	d1b4      	bne.n	9538 <__aeabi_dsub+0x4d4>
    95ce:	000c      	movs	r4, r1
    95d0:	0017      	movs	r7, r2
    95d2:	4666      	mov	r6, ip
    95d4:	e5cc      	b.n	9170 <__aeabi_dsub+0x10c>
    95d6:	2700      	movs	r7, #0
    95d8:	2400      	movs	r4, #0
    95da:	e5e8      	b.n	91ae <__aeabi_dsub+0x14a>
    95dc:	2b00      	cmp	r3, #0
    95de:	d039      	beq.n	9654 <__aeabi_dsub+0x5f0>
    95e0:	000b      	movs	r3, r1
    95e2:	4313      	orrs	r3, r2
    95e4:	d100      	bne.n	95e8 <__aeabi_dsub+0x584>
    95e6:	e744      	b.n	9472 <__aeabi_dsub+0x40e>
    95e8:	08c0      	lsrs	r0, r0, #3
    95ea:	0767      	lsls	r7, r4, #29
    95ec:	4307      	orrs	r7, r0
    95ee:	2080      	movs	r0, #128	; 0x80
    95f0:	08e4      	lsrs	r4, r4, #3
    95f2:	0300      	lsls	r0, r0, #12
    95f4:	4204      	tst	r4, r0
    95f6:	d0e1      	beq.n	95bc <__aeabi_dsub+0x558>
    95f8:	08cb      	lsrs	r3, r1, #3
    95fa:	4203      	tst	r3, r0
    95fc:	d1de      	bne.n	95bc <__aeabi_dsub+0x558>
    95fe:	08d7      	lsrs	r7, r2, #3
    9600:	0749      	lsls	r1, r1, #29
    9602:	430f      	orrs	r7, r1
    9604:	001c      	movs	r4, r3
    9606:	e7d9      	b.n	95bc <__aeabi_dsub+0x558>
    9608:	2100      	movs	r1, #0
    960a:	e771      	b.n	94f0 <__aeabi_dsub+0x48c>
    960c:	2500      	movs	r5, #0
    960e:	2700      	movs	r7, #0
    9610:	e5e9      	b.n	91e6 <__aeabi_dsub+0x182>
    9612:	002e      	movs	r6, r5
    9614:	0027      	movs	r7, r4
    9616:	3e20      	subs	r6, #32
    9618:	40f7      	lsrs	r7, r6
    961a:	2d20      	cmp	r5, #32
    961c:	d02f      	beq.n	967e <__aeabi_dsub+0x61a>
    961e:	2640      	movs	r6, #64	; 0x40
    9620:	1b75      	subs	r5, r6, r5
    9622:	40ac      	lsls	r4, r5
    9624:	4650      	mov	r0, sl
    9626:	4320      	orrs	r0, r4
    9628:	1e44      	subs	r4, r0, #1
    962a:	41a0      	sbcs	r0, r4
    962c:	2400      	movs	r4, #0
    962e:	4338      	orrs	r0, r7
    9630:	e6dc      	b.n	93ec <__aeabi_dsub+0x388>
    9632:	2480      	movs	r4, #128	; 0x80
    9634:	2500      	movs	r5, #0
    9636:	0324      	lsls	r4, r4, #12
    9638:	4e13      	ldr	r6, [pc, #76]	; (9688 <__aeabi_dsub+0x624>)
    963a:	2700      	movs	r7, #0
    963c:	e5d3      	b.n	91e6 <__aeabi_dsub+0x182>
    963e:	4650      	mov	r0, sl
    9640:	4320      	orrs	r0, r4
    9642:	0007      	movs	r7, r0
    9644:	1e78      	subs	r0, r7, #1
    9646:	4187      	sbcs	r7, r0
    9648:	2400      	movs	r4, #0
    964a:	18bf      	adds	r7, r7, r2
    964c:	e760      	b.n	9510 <__aeabi_dsub+0x4ac>
    964e:	000c      	movs	r4, r1
    9650:	0017      	movs	r7, r2
    9652:	e58d      	b.n	9170 <__aeabi_dsub+0x10c>
    9654:	000c      	movs	r4, r1
    9656:	0017      	movs	r7, r2
    9658:	4e0b      	ldr	r6, [pc, #44]	; (9688 <__aeabi_dsub+0x624>)
    965a:	e589      	b.n	9170 <__aeabi_dsub+0x10c>
    965c:	001e      	movs	r6, r3
    965e:	0027      	movs	r7, r4
    9660:	3e20      	subs	r6, #32
    9662:	40f7      	lsrs	r7, r6
    9664:	2b20      	cmp	r3, #32
    9666:	d00c      	beq.n	9682 <__aeabi_dsub+0x61e>
    9668:	2640      	movs	r6, #64	; 0x40
    966a:	1af3      	subs	r3, r6, r3
    966c:	409c      	lsls	r4, r3
    966e:	4650      	mov	r0, sl
    9670:	4320      	orrs	r0, r4
    9672:	1e44      	subs	r4, r0, #1
    9674:	41a0      	sbcs	r0, r4
    9676:	4307      	orrs	r7, r0
    9678:	2400      	movs	r4, #0
    967a:	18bf      	adds	r7, r7, r2
    967c:	e748      	b.n	9510 <__aeabi_dsub+0x4ac>
    967e:	2400      	movs	r4, #0
    9680:	e7d0      	b.n	9624 <__aeabi_dsub+0x5c0>
    9682:	2400      	movs	r4, #0
    9684:	e7f3      	b.n	966e <__aeabi_dsub+0x60a>
    9686:	46c0      	nop			; (mov r8, r8)
    9688:	000007ff 	.word	0x000007ff
    968c:	ff7fffff 	.word	0xff7fffff

00009690 <__aeabi_d2iz>:
    9690:	b530      	push	{r4, r5, lr}
    9692:	4d13      	ldr	r5, [pc, #76]	; (96e0 <__aeabi_d2iz+0x50>)
    9694:	030a      	lsls	r2, r1, #12
    9696:	004b      	lsls	r3, r1, #1
    9698:	0b12      	lsrs	r2, r2, #12
    969a:	0d5b      	lsrs	r3, r3, #21
    969c:	0fc9      	lsrs	r1, r1, #31
    969e:	2400      	movs	r4, #0
    96a0:	42ab      	cmp	r3, r5
    96a2:	dd10      	ble.n	96c6 <__aeabi_d2iz+0x36>
    96a4:	4c0f      	ldr	r4, [pc, #60]	; (96e4 <__aeabi_d2iz+0x54>)
    96a6:	42a3      	cmp	r3, r4
    96a8:	dc0f      	bgt.n	96ca <__aeabi_d2iz+0x3a>
    96aa:	2480      	movs	r4, #128	; 0x80
    96ac:	4d0e      	ldr	r5, [pc, #56]	; (96e8 <__aeabi_d2iz+0x58>)
    96ae:	0364      	lsls	r4, r4, #13
    96b0:	4322      	orrs	r2, r4
    96b2:	1aed      	subs	r5, r5, r3
    96b4:	2d1f      	cmp	r5, #31
    96b6:	dd0b      	ble.n	96d0 <__aeabi_d2iz+0x40>
    96b8:	480c      	ldr	r0, [pc, #48]	; (96ec <__aeabi_d2iz+0x5c>)
    96ba:	1ac3      	subs	r3, r0, r3
    96bc:	40da      	lsrs	r2, r3
    96be:	4254      	negs	r4, r2
    96c0:	2900      	cmp	r1, #0
    96c2:	d100      	bne.n	96c6 <__aeabi_d2iz+0x36>
    96c4:	0014      	movs	r4, r2
    96c6:	0020      	movs	r0, r4
    96c8:	bd30      	pop	{r4, r5, pc}
    96ca:	4b09      	ldr	r3, [pc, #36]	; (96f0 <__aeabi_d2iz+0x60>)
    96cc:	18cc      	adds	r4, r1, r3
    96ce:	e7fa      	b.n	96c6 <__aeabi_d2iz+0x36>
    96d0:	4c08      	ldr	r4, [pc, #32]	; (96f4 <__aeabi_d2iz+0x64>)
    96d2:	40e8      	lsrs	r0, r5
    96d4:	46a4      	mov	ip, r4
    96d6:	4463      	add	r3, ip
    96d8:	409a      	lsls	r2, r3
    96da:	4302      	orrs	r2, r0
    96dc:	e7ef      	b.n	96be <__aeabi_d2iz+0x2e>
    96de:	46c0      	nop			; (mov r8, r8)
    96e0:	000003fe 	.word	0x000003fe
    96e4:	0000041d 	.word	0x0000041d
    96e8:	00000433 	.word	0x00000433
    96ec:	00000413 	.word	0x00000413
    96f0:	7fffffff 	.word	0x7fffffff
    96f4:	fffffbed 	.word	0xfffffbed

000096f8 <__aeabi_ui2d>:
    96f8:	b510      	push	{r4, lr}
    96fa:	1e04      	subs	r4, r0, #0
    96fc:	d028      	beq.n	9750 <__aeabi_ui2d+0x58>
    96fe:	f000 f833 	bl	9768 <__clzsi2>
    9702:	4b15      	ldr	r3, [pc, #84]	; (9758 <__aeabi_ui2d+0x60>)
    9704:	4a15      	ldr	r2, [pc, #84]	; (975c <__aeabi_ui2d+0x64>)
    9706:	1a1b      	subs	r3, r3, r0
    9708:	1ad2      	subs	r2, r2, r3
    970a:	2a1f      	cmp	r2, #31
    970c:	dd15      	ble.n	973a <__aeabi_ui2d+0x42>
    970e:	4a14      	ldr	r2, [pc, #80]	; (9760 <__aeabi_ui2d+0x68>)
    9710:	1ad2      	subs	r2, r2, r3
    9712:	4094      	lsls	r4, r2
    9714:	2200      	movs	r2, #0
    9716:	0324      	lsls	r4, r4, #12
    9718:	055b      	lsls	r3, r3, #21
    971a:	0b24      	lsrs	r4, r4, #12
    971c:	0d5b      	lsrs	r3, r3, #21
    971e:	2100      	movs	r1, #0
    9720:	0010      	movs	r0, r2
    9722:	0324      	lsls	r4, r4, #12
    9724:	0d0a      	lsrs	r2, r1, #20
    9726:	0b24      	lsrs	r4, r4, #12
    9728:	0512      	lsls	r2, r2, #20
    972a:	4322      	orrs	r2, r4
    972c:	4c0d      	ldr	r4, [pc, #52]	; (9764 <__aeabi_ui2d+0x6c>)
    972e:	051b      	lsls	r3, r3, #20
    9730:	4022      	ands	r2, r4
    9732:	4313      	orrs	r3, r2
    9734:	005b      	lsls	r3, r3, #1
    9736:	0859      	lsrs	r1, r3, #1
    9738:	bd10      	pop	{r4, pc}
    973a:	0021      	movs	r1, r4
    973c:	4091      	lsls	r1, r2
    973e:	000a      	movs	r2, r1
    9740:	210b      	movs	r1, #11
    9742:	1a08      	subs	r0, r1, r0
    9744:	40c4      	lsrs	r4, r0
    9746:	055b      	lsls	r3, r3, #21
    9748:	0324      	lsls	r4, r4, #12
    974a:	0b24      	lsrs	r4, r4, #12
    974c:	0d5b      	lsrs	r3, r3, #21
    974e:	e7e6      	b.n	971e <__aeabi_ui2d+0x26>
    9750:	2300      	movs	r3, #0
    9752:	2400      	movs	r4, #0
    9754:	2200      	movs	r2, #0
    9756:	e7e2      	b.n	971e <__aeabi_ui2d+0x26>
    9758:	0000041e 	.word	0x0000041e
    975c:	00000433 	.word	0x00000433
    9760:	00000413 	.word	0x00000413
    9764:	800fffff 	.word	0x800fffff

00009768 <__clzsi2>:
    9768:	211c      	movs	r1, #28
    976a:	2301      	movs	r3, #1
    976c:	041b      	lsls	r3, r3, #16
    976e:	4298      	cmp	r0, r3
    9770:	d301      	bcc.n	9776 <__clzsi2+0xe>
    9772:	0c00      	lsrs	r0, r0, #16
    9774:	3910      	subs	r1, #16
    9776:	0a1b      	lsrs	r3, r3, #8
    9778:	4298      	cmp	r0, r3
    977a:	d301      	bcc.n	9780 <__clzsi2+0x18>
    977c:	0a00      	lsrs	r0, r0, #8
    977e:	3908      	subs	r1, #8
    9780:	091b      	lsrs	r3, r3, #4
    9782:	4298      	cmp	r0, r3
    9784:	d301      	bcc.n	978a <__clzsi2+0x22>
    9786:	0900      	lsrs	r0, r0, #4
    9788:	3904      	subs	r1, #4
    978a:	a202      	add	r2, pc, #8	; (adr r2, 9794 <__clzsi2+0x2c>)
    978c:	5c10      	ldrb	r0, [r2, r0]
    978e:	1840      	adds	r0, r0, r1
    9790:	4770      	bx	lr
    9792:	46c0      	nop			; (mov r8, r8)
    9794:	02020304 	.word	0x02020304
    9798:	01010101 	.word	0x01010101
	...

000097a4 <__libc_init_array>:
    97a4:	b570      	push	{r4, r5, r6, lr}
    97a6:	2600      	movs	r6, #0
    97a8:	4d0c      	ldr	r5, [pc, #48]	; (97dc <__libc_init_array+0x38>)
    97aa:	4c0d      	ldr	r4, [pc, #52]	; (97e0 <__libc_init_array+0x3c>)
    97ac:	1b64      	subs	r4, r4, r5
    97ae:	10a4      	asrs	r4, r4, #2
    97b0:	42a6      	cmp	r6, r4
    97b2:	d109      	bne.n	97c8 <__libc_init_array+0x24>
    97b4:	2600      	movs	r6, #0
    97b6:	f002 fd11 	bl	c1dc <_init>
    97ba:	4d0a      	ldr	r5, [pc, #40]	; (97e4 <__libc_init_array+0x40>)
    97bc:	4c0a      	ldr	r4, [pc, #40]	; (97e8 <__libc_init_array+0x44>)
    97be:	1b64      	subs	r4, r4, r5
    97c0:	10a4      	asrs	r4, r4, #2
    97c2:	42a6      	cmp	r6, r4
    97c4:	d105      	bne.n	97d2 <__libc_init_array+0x2e>
    97c6:	bd70      	pop	{r4, r5, r6, pc}
    97c8:	00b3      	lsls	r3, r6, #2
    97ca:	58eb      	ldr	r3, [r5, r3]
    97cc:	4798      	blx	r3
    97ce:	3601      	adds	r6, #1
    97d0:	e7ee      	b.n	97b0 <__libc_init_array+0xc>
    97d2:	00b3      	lsls	r3, r6, #2
    97d4:	58eb      	ldr	r3, [r5, r3]
    97d6:	4798      	blx	r3
    97d8:	3601      	adds	r6, #1
    97da:	e7f2      	b.n	97c2 <__libc_init_array+0x1e>
    97dc:	0000c1e8 	.word	0x0000c1e8
    97e0:	0000c1e8 	.word	0x0000c1e8
    97e4:	0000c1e8 	.word	0x0000c1e8
    97e8:	0000c1ec 	.word	0x0000c1ec

000097ec <malloc>:
    97ec:	b510      	push	{r4, lr}
    97ee:	4b03      	ldr	r3, [pc, #12]	; (97fc <malloc+0x10>)
    97f0:	0001      	movs	r1, r0
    97f2:	6818      	ldr	r0, [r3, #0]
    97f4:	f000 f872 	bl	98dc <_malloc_r>
    97f8:	bd10      	pop	{r4, pc}
    97fa:	46c0      	nop			; (mov r8, r8)
    97fc:	20000080 	.word	0x20000080

00009800 <memcpy>:
    9800:	2300      	movs	r3, #0
    9802:	b510      	push	{r4, lr}
    9804:	429a      	cmp	r2, r3
    9806:	d100      	bne.n	980a <memcpy+0xa>
    9808:	bd10      	pop	{r4, pc}
    980a:	5ccc      	ldrb	r4, [r1, r3]
    980c:	54c4      	strb	r4, [r0, r3]
    980e:	3301      	adds	r3, #1
    9810:	e7f8      	b.n	9804 <memcpy+0x4>

00009812 <memmove>:
    9812:	b510      	push	{r4, lr}
    9814:	4288      	cmp	r0, r1
    9816:	d902      	bls.n	981e <memmove+0xc>
    9818:	188b      	adds	r3, r1, r2
    981a:	4298      	cmp	r0, r3
    981c:	d308      	bcc.n	9830 <memmove+0x1e>
    981e:	2300      	movs	r3, #0
    9820:	429a      	cmp	r2, r3
    9822:	d007      	beq.n	9834 <memmove+0x22>
    9824:	5ccc      	ldrb	r4, [r1, r3]
    9826:	54c4      	strb	r4, [r0, r3]
    9828:	3301      	adds	r3, #1
    982a:	e7f9      	b.n	9820 <memmove+0xe>
    982c:	5c8b      	ldrb	r3, [r1, r2]
    982e:	5483      	strb	r3, [r0, r2]
    9830:	3a01      	subs	r2, #1
    9832:	d2fb      	bcs.n	982c <memmove+0x1a>
    9834:	bd10      	pop	{r4, pc}

00009836 <memset>:
    9836:	0003      	movs	r3, r0
    9838:	1882      	adds	r2, r0, r2
    983a:	4293      	cmp	r3, r2
    983c:	d100      	bne.n	9840 <memset+0xa>
    983e:	4770      	bx	lr
    9840:	7019      	strb	r1, [r3, #0]
    9842:	3301      	adds	r3, #1
    9844:	e7f9      	b.n	983a <memset+0x4>
	...

00009848 <_free_r>:
    9848:	b570      	push	{r4, r5, r6, lr}
    984a:	0005      	movs	r5, r0
    984c:	2900      	cmp	r1, #0
    984e:	d010      	beq.n	9872 <_free_r+0x2a>
    9850:	1f0c      	subs	r4, r1, #4
    9852:	6823      	ldr	r3, [r4, #0]
    9854:	2b00      	cmp	r3, #0
    9856:	da00      	bge.n	985a <_free_r+0x12>
    9858:	18e4      	adds	r4, r4, r3
    985a:	0028      	movs	r0, r5
    985c:	f000 fd08 	bl	a270 <__malloc_lock>
    9860:	4a1d      	ldr	r2, [pc, #116]	; (98d8 <_free_r+0x90>)
    9862:	6813      	ldr	r3, [r2, #0]
    9864:	2b00      	cmp	r3, #0
    9866:	d105      	bne.n	9874 <_free_r+0x2c>
    9868:	6063      	str	r3, [r4, #4]
    986a:	6014      	str	r4, [r2, #0]
    986c:	0028      	movs	r0, r5
    986e:	f000 fd00 	bl	a272 <__malloc_unlock>
    9872:	bd70      	pop	{r4, r5, r6, pc}
    9874:	42a3      	cmp	r3, r4
    9876:	d909      	bls.n	988c <_free_r+0x44>
    9878:	6821      	ldr	r1, [r4, #0]
    987a:	1860      	adds	r0, r4, r1
    987c:	4283      	cmp	r3, r0
    987e:	d1f3      	bne.n	9868 <_free_r+0x20>
    9880:	6818      	ldr	r0, [r3, #0]
    9882:	685b      	ldr	r3, [r3, #4]
    9884:	1841      	adds	r1, r0, r1
    9886:	6021      	str	r1, [r4, #0]
    9888:	e7ee      	b.n	9868 <_free_r+0x20>
    988a:	0013      	movs	r3, r2
    988c:	685a      	ldr	r2, [r3, #4]
    988e:	2a00      	cmp	r2, #0
    9890:	d001      	beq.n	9896 <_free_r+0x4e>
    9892:	42a2      	cmp	r2, r4
    9894:	d9f9      	bls.n	988a <_free_r+0x42>
    9896:	6819      	ldr	r1, [r3, #0]
    9898:	1858      	adds	r0, r3, r1
    989a:	42a0      	cmp	r0, r4
    989c:	d10b      	bne.n	98b6 <_free_r+0x6e>
    989e:	6820      	ldr	r0, [r4, #0]
    98a0:	1809      	adds	r1, r1, r0
    98a2:	1858      	adds	r0, r3, r1
    98a4:	6019      	str	r1, [r3, #0]
    98a6:	4282      	cmp	r2, r0
    98a8:	d1e0      	bne.n	986c <_free_r+0x24>
    98aa:	6810      	ldr	r0, [r2, #0]
    98ac:	6852      	ldr	r2, [r2, #4]
    98ae:	1841      	adds	r1, r0, r1
    98b0:	6019      	str	r1, [r3, #0]
    98b2:	605a      	str	r2, [r3, #4]
    98b4:	e7da      	b.n	986c <_free_r+0x24>
    98b6:	42a0      	cmp	r0, r4
    98b8:	d902      	bls.n	98c0 <_free_r+0x78>
    98ba:	230c      	movs	r3, #12
    98bc:	602b      	str	r3, [r5, #0]
    98be:	e7d5      	b.n	986c <_free_r+0x24>
    98c0:	6821      	ldr	r1, [r4, #0]
    98c2:	1860      	adds	r0, r4, r1
    98c4:	4282      	cmp	r2, r0
    98c6:	d103      	bne.n	98d0 <_free_r+0x88>
    98c8:	6810      	ldr	r0, [r2, #0]
    98ca:	6852      	ldr	r2, [r2, #4]
    98cc:	1841      	adds	r1, r0, r1
    98ce:	6021      	str	r1, [r4, #0]
    98d0:	6062      	str	r2, [r4, #4]
    98d2:	605c      	str	r4, [r3, #4]
    98d4:	e7ca      	b.n	986c <_free_r+0x24>
    98d6:	46c0      	nop			; (mov r8, r8)
    98d8:	200002ac 	.word	0x200002ac

000098dc <_malloc_r>:
    98dc:	2303      	movs	r3, #3
    98de:	b570      	push	{r4, r5, r6, lr}
    98e0:	1ccd      	adds	r5, r1, #3
    98e2:	439d      	bics	r5, r3
    98e4:	3508      	adds	r5, #8
    98e6:	0006      	movs	r6, r0
    98e8:	2d0c      	cmp	r5, #12
    98ea:	d21e      	bcs.n	992a <_malloc_r+0x4e>
    98ec:	250c      	movs	r5, #12
    98ee:	42a9      	cmp	r1, r5
    98f0:	d81d      	bhi.n	992e <_malloc_r+0x52>
    98f2:	0030      	movs	r0, r6
    98f4:	f000 fcbc 	bl	a270 <__malloc_lock>
    98f8:	4a25      	ldr	r2, [pc, #148]	; (9990 <_malloc_r+0xb4>)
    98fa:	6814      	ldr	r4, [r2, #0]
    98fc:	0021      	movs	r1, r4
    98fe:	2900      	cmp	r1, #0
    9900:	d119      	bne.n	9936 <_malloc_r+0x5a>
    9902:	4c24      	ldr	r4, [pc, #144]	; (9994 <_malloc_r+0xb8>)
    9904:	6823      	ldr	r3, [r4, #0]
    9906:	2b00      	cmp	r3, #0
    9908:	d103      	bne.n	9912 <_malloc_r+0x36>
    990a:	0030      	movs	r0, r6
    990c:	f000 f8dc 	bl	9ac8 <_sbrk_r>
    9910:	6020      	str	r0, [r4, #0]
    9912:	0029      	movs	r1, r5
    9914:	0030      	movs	r0, r6
    9916:	f000 f8d7 	bl	9ac8 <_sbrk_r>
    991a:	1c43      	adds	r3, r0, #1
    991c:	d12c      	bne.n	9978 <_malloc_r+0x9c>
    991e:	230c      	movs	r3, #12
    9920:	0030      	movs	r0, r6
    9922:	6033      	str	r3, [r6, #0]
    9924:	f000 fca5 	bl	a272 <__malloc_unlock>
    9928:	e003      	b.n	9932 <_malloc_r+0x56>
    992a:	2d00      	cmp	r5, #0
    992c:	dadf      	bge.n	98ee <_malloc_r+0x12>
    992e:	230c      	movs	r3, #12
    9930:	6033      	str	r3, [r6, #0]
    9932:	2000      	movs	r0, #0
    9934:	bd70      	pop	{r4, r5, r6, pc}
    9936:	680b      	ldr	r3, [r1, #0]
    9938:	1b5b      	subs	r3, r3, r5
    993a:	d41a      	bmi.n	9972 <_malloc_r+0x96>
    993c:	2b0b      	cmp	r3, #11
    993e:	d903      	bls.n	9948 <_malloc_r+0x6c>
    9940:	600b      	str	r3, [r1, #0]
    9942:	18cc      	adds	r4, r1, r3
    9944:	6025      	str	r5, [r4, #0]
    9946:	e003      	b.n	9950 <_malloc_r+0x74>
    9948:	428c      	cmp	r4, r1
    994a:	d10e      	bne.n	996a <_malloc_r+0x8e>
    994c:	6863      	ldr	r3, [r4, #4]
    994e:	6013      	str	r3, [r2, #0]
    9950:	0030      	movs	r0, r6
    9952:	f000 fc8e 	bl	a272 <__malloc_unlock>
    9956:	0020      	movs	r0, r4
    9958:	2207      	movs	r2, #7
    995a:	300b      	adds	r0, #11
    995c:	1d23      	adds	r3, r4, #4
    995e:	4390      	bics	r0, r2
    9960:	1ac3      	subs	r3, r0, r3
    9962:	d0e7      	beq.n	9934 <_malloc_r+0x58>
    9964:	425a      	negs	r2, r3
    9966:	50e2      	str	r2, [r4, r3]
    9968:	e7e4      	b.n	9934 <_malloc_r+0x58>
    996a:	684b      	ldr	r3, [r1, #4]
    996c:	6063      	str	r3, [r4, #4]
    996e:	000c      	movs	r4, r1
    9970:	e7ee      	b.n	9950 <_malloc_r+0x74>
    9972:	000c      	movs	r4, r1
    9974:	6849      	ldr	r1, [r1, #4]
    9976:	e7c2      	b.n	98fe <_malloc_r+0x22>
    9978:	2303      	movs	r3, #3
    997a:	1cc4      	adds	r4, r0, #3
    997c:	439c      	bics	r4, r3
    997e:	42a0      	cmp	r0, r4
    9980:	d0e0      	beq.n	9944 <_malloc_r+0x68>
    9982:	1a21      	subs	r1, r4, r0
    9984:	0030      	movs	r0, r6
    9986:	f000 f89f 	bl	9ac8 <_sbrk_r>
    998a:	1c43      	adds	r3, r0, #1
    998c:	d1da      	bne.n	9944 <_malloc_r+0x68>
    998e:	e7c6      	b.n	991e <_malloc_r+0x42>
    9990:	200002ac 	.word	0x200002ac
    9994:	200002b0 	.word	0x200002b0

00009998 <iprintf>:
    9998:	b40f      	push	{r0, r1, r2, r3}
    999a:	4b0b      	ldr	r3, [pc, #44]	; (99c8 <iprintf+0x30>)
    999c:	b513      	push	{r0, r1, r4, lr}
    999e:	681c      	ldr	r4, [r3, #0]
    99a0:	2c00      	cmp	r4, #0
    99a2:	d005      	beq.n	99b0 <iprintf+0x18>
    99a4:	69a3      	ldr	r3, [r4, #24]
    99a6:	2b00      	cmp	r3, #0
    99a8:	d102      	bne.n	99b0 <iprintf+0x18>
    99aa:	0020      	movs	r0, r4
    99ac:	f000 fb64 	bl	a078 <__sinit>
    99b0:	ab05      	add	r3, sp, #20
    99b2:	9a04      	ldr	r2, [sp, #16]
    99b4:	68a1      	ldr	r1, [r4, #8]
    99b6:	0020      	movs	r0, r4
    99b8:	9301      	str	r3, [sp, #4]
    99ba:	f000 fde9 	bl	a590 <_vfiprintf_r>
    99be:	bc16      	pop	{r1, r2, r4}
    99c0:	bc08      	pop	{r3}
    99c2:	b004      	add	sp, #16
    99c4:	4718      	bx	r3
    99c6:	46c0      	nop			; (mov r8, r8)
    99c8:	20000080 	.word	0x20000080

000099cc <putchar>:
    99cc:	4b08      	ldr	r3, [pc, #32]	; (99f0 <putchar+0x24>)
    99ce:	b570      	push	{r4, r5, r6, lr}
    99d0:	681c      	ldr	r4, [r3, #0]
    99d2:	0005      	movs	r5, r0
    99d4:	2c00      	cmp	r4, #0
    99d6:	d005      	beq.n	99e4 <putchar+0x18>
    99d8:	69a3      	ldr	r3, [r4, #24]
    99da:	2b00      	cmp	r3, #0
    99dc:	d102      	bne.n	99e4 <putchar+0x18>
    99de:	0020      	movs	r0, r4
    99e0:	f000 fb4a 	bl	a078 <__sinit>
    99e4:	0029      	movs	r1, r5
    99e6:	68a2      	ldr	r2, [r4, #8]
    99e8:	0020      	movs	r0, r4
    99ea:	f001 f875 	bl	aad8 <_putc_r>
    99ee:	bd70      	pop	{r4, r5, r6, pc}
    99f0:	20000080 	.word	0x20000080

000099f4 <_puts_r>:
    99f4:	b570      	push	{r4, r5, r6, lr}
    99f6:	0005      	movs	r5, r0
    99f8:	000e      	movs	r6, r1
    99fa:	2800      	cmp	r0, #0
    99fc:	d004      	beq.n	9a08 <_puts_r+0x14>
    99fe:	6983      	ldr	r3, [r0, #24]
    9a00:	2b00      	cmp	r3, #0
    9a02:	d101      	bne.n	9a08 <_puts_r+0x14>
    9a04:	f000 fb38 	bl	a078 <__sinit>
    9a08:	69ab      	ldr	r3, [r5, #24]
    9a0a:	68ac      	ldr	r4, [r5, #8]
    9a0c:	2b00      	cmp	r3, #0
    9a0e:	d102      	bne.n	9a16 <_puts_r+0x22>
    9a10:	0028      	movs	r0, r5
    9a12:	f000 fb31 	bl	a078 <__sinit>
    9a16:	4b24      	ldr	r3, [pc, #144]	; (9aa8 <_puts_r+0xb4>)
    9a18:	429c      	cmp	r4, r3
    9a1a:	d10f      	bne.n	9a3c <_puts_r+0x48>
    9a1c:	686c      	ldr	r4, [r5, #4]
    9a1e:	89a3      	ldrh	r3, [r4, #12]
    9a20:	071b      	lsls	r3, r3, #28
    9a22:	d502      	bpl.n	9a2a <_puts_r+0x36>
    9a24:	6923      	ldr	r3, [r4, #16]
    9a26:	2b00      	cmp	r3, #0
    9a28:	d120      	bne.n	9a6c <_puts_r+0x78>
    9a2a:	0021      	movs	r1, r4
    9a2c:	0028      	movs	r0, r5
    9a2e:	f000 f9b5 	bl	9d9c <__swsetup_r>
    9a32:	2800      	cmp	r0, #0
    9a34:	d01a      	beq.n	9a6c <_puts_r+0x78>
    9a36:	2001      	movs	r0, #1
    9a38:	4240      	negs	r0, r0
    9a3a:	bd70      	pop	{r4, r5, r6, pc}
    9a3c:	4b1b      	ldr	r3, [pc, #108]	; (9aac <_puts_r+0xb8>)
    9a3e:	429c      	cmp	r4, r3
    9a40:	d101      	bne.n	9a46 <_puts_r+0x52>
    9a42:	68ac      	ldr	r4, [r5, #8]
    9a44:	e7eb      	b.n	9a1e <_puts_r+0x2a>
    9a46:	4b1a      	ldr	r3, [pc, #104]	; (9ab0 <_puts_r+0xbc>)
    9a48:	429c      	cmp	r4, r3
    9a4a:	d1e8      	bne.n	9a1e <_puts_r+0x2a>
    9a4c:	68ec      	ldr	r4, [r5, #12]
    9a4e:	e7e6      	b.n	9a1e <_puts_r+0x2a>
    9a50:	3b01      	subs	r3, #1
    9a52:	3601      	adds	r6, #1
    9a54:	60a3      	str	r3, [r4, #8]
    9a56:	2b00      	cmp	r3, #0
    9a58:	da04      	bge.n	9a64 <_puts_r+0x70>
    9a5a:	69a2      	ldr	r2, [r4, #24]
    9a5c:	4293      	cmp	r3, r2
    9a5e:	db16      	blt.n	9a8e <_puts_r+0x9a>
    9a60:	290a      	cmp	r1, #10
    9a62:	d014      	beq.n	9a8e <_puts_r+0x9a>
    9a64:	6823      	ldr	r3, [r4, #0]
    9a66:	1c5a      	adds	r2, r3, #1
    9a68:	6022      	str	r2, [r4, #0]
    9a6a:	7019      	strb	r1, [r3, #0]
    9a6c:	7831      	ldrb	r1, [r6, #0]
    9a6e:	68a3      	ldr	r3, [r4, #8]
    9a70:	2900      	cmp	r1, #0
    9a72:	d1ed      	bne.n	9a50 <_puts_r+0x5c>
    9a74:	3b01      	subs	r3, #1
    9a76:	60a3      	str	r3, [r4, #8]
    9a78:	2b00      	cmp	r3, #0
    9a7a:	da0f      	bge.n	9a9c <_puts_r+0xa8>
    9a7c:	0022      	movs	r2, r4
    9a7e:	310a      	adds	r1, #10
    9a80:	0028      	movs	r0, r5
    9a82:	f000 f935 	bl	9cf0 <__swbuf_r>
    9a86:	1c43      	adds	r3, r0, #1
    9a88:	d0d5      	beq.n	9a36 <_puts_r+0x42>
    9a8a:	200a      	movs	r0, #10
    9a8c:	e7d5      	b.n	9a3a <_puts_r+0x46>
    9a8e:	0022      	movs	r2, r4
    9a90:	0028      	movs	r0, r5
    9a92:	f000 f92d 	bl	9cf0 <__swbuf_r>
    9a96:	1c43      	adds	r3, r0, #1
    9a98:	d1e8      	bne.n	9a6c <_puts_r+0x78>
    9a9a:	e7cc      	b.n	9a36 <_puts_r+0x42>
    9a9c:	200a      	movs	r0, #10
    9a9e:	6823      	ldr	r3, [r4, #0]
    9aa0:	1c5a      	adds	r2, r3, #1
    9aa2:	6022      	str	r2, [r4, #0]
    9aa4:	7018      	strb	r0, [r3, #0]
    9aa6:	e7c8      	b.n	9a3a <_puts_r+0x46>
    9aa8:	0000c168 	.word	0x0000c168
    9aac:	0000c188 	.word	0x0000c188
    9ab0:	0000c148 	.word	0x0000c148

00009ab4 <puts>:
    9ab4:	b510      	push	{r4, lr}
    9ab6:	4b03      	ldr	r3, [pc, #12]	; (9ac4 <puts+0x10>)
    9ab8:	0001      	movs	r1, r0
    9aba:	6818      	ldr	r0, [r3, #0]
    9abc:	f7ff ff9a 	bl	99f4 <_puts_r>
    9ac0:	bd10      	pop	{r4, pc}
    9ac2:	46c0      	nop			; (mov r8, r8)
    9ac4:	20000080 	.word	0x20000080

00009ac8 <_sbrk_r>:
    9ac8:	2300      	movs	r3, #0
    9aca:	b570      	push	{r4, r5, r6, lr}
    9acc:	4c06      	ldr	r4, [pc, #24]	; (9ae8 <_sbrk_r+0x20>)
    9ace:	0005      	movs	r5, r0
    9ad0:	0008      	movs	r0, r1
    9ad2:	6023      	str	r3, [r4, #0]
    9ad4:	f7fc fc3c 	bl	6350 <_sbrk>
    9ad8:	1c43      	adds	r3, r0, #1
    9ada:	d103      	bne.n	9ae4 <_sbrk_r+0x1c>
    9adc:	6823      	ldr	r3, [r4, #0]
    9ade:	2b00      	cmp	r3, #0
    9ae0:	d000      	beq.n	9ae4 <_sbrk_r+0x1c>
    9ae2:	602b      	str	r3, [r5, #0]
    9ae4:	bd70      	pop	{r4, r5, r6, pc}
    9ae6:	46c0      	nop			; (mov r8, r8)
    9ae8:	20000510 	.word	0x20000510

00009aec <setbuf>:
    9aec:	424a      	negs	r2, r1
    9aee:	414a      	adcs	r2, r1
    9af0:	2380      	movs	r3, #128	; 0x80
    9af2:	b510      	push	{r4, lr}
    9af4:	0052      	lsls	r2, r2, #1
    9af6:	00db      	lsls	r3, r3, #3
    9af8:	f000 f802 	bl	9b00 <setvbuf>
    9afc:	bd10      	pop	{r4, pc}
	...

00009b00 <setvbuf>:
    9b00:	b5f0      	push	{r4, r5, r6, r7, lr}
    9b02:	001d      	movs	r5, r3
    9b04:	4b4f      	ldr	r3, [pc, #316]	; (9c44 <setvbuf+0x144>)
    9b06:	b085      	sub	sp, #20
    9b08:	681e      	ldr	r6, [r3, #0]
    9b0a:	0004      	movs	r4, r0
    9b0c:	000f      	movs	r7, r1
    9b0e:	9200      	str	r2, [sp, #0]
    9b10:	2e00      	cmp	r6, #0
    9b12:	d005      	beq.n	9b20 <setvbuf+0x20>
    9b14:	69b3      	ldr	r3, [r6, #24]
    9b16:	2b00      	cmp	r3, #0
    9b18:	d102      	bne.n	9b20 <setvbuf+0x20>
    9b1a:	0030      	movs	r0, r6
    9b1c:	f000 faac 	bl	a078 <__sinit>
    9b20:	4b49      	ldr	r3, [pc, #292]	; (9c48 <setvbuf+0x148>)
    9b22:	429c      	cmp	r4, r3
    9b24:	d150      	bne.n	9bc8 <setvbuf+0xc8>
    9b26:	6874      	ldr	r4, [r6, #4]
    9b28:	9b00      	ldr	r3, [sp, #0]
    9b2a:	2b02      	cmp	r3, #2
    9b2c:	d005      	beq.n	9b3a <setvbuf+0x3a>
    9b2e:	2b01      	cmp	r3, #1
    9b30:	d900      	bls.n	9b34 <setvbuf+0x34>
    9b32:	e084      	b.n	9c3e <setvbuf+0x13e>
    9b34:	2d00      	cmp	r5, #0
    9b36:	da00      	bge.n	9b3a <setvbuf+0x3a>
    9b38:	e081      	b.n	9c3e <setvbuf+0x13e>
    9b3a:	0021      	movs	r1, r4
    9b3c:	0030      	movs	r0, r6
    9b3e:	f000 fa2d 	bl	9f9c <_fflush_r>
    9b42:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9b44:	2900      	cmp	r1, #0
    9b46:	d008      	beq.n	9b5a <setvbuf+0x5a>
    9b48:	0023      	movs	r3, r4
    9b4a:	3344      	adds	r3, #68	; 0x44
    9b4c:	4299      	cmp	r1, r3
    9b4e:	d002      	beq.n	9b56 <setvbuf+0x56>
    9b50:	0030      	movs	r0, r6
    9b52:	f7ff fe79 	bl	9848 <_free_r>
    9b56:	2300      	movs	r3, #0
    9b58:	6363      	str	r3, [r4, #52]	; 0x34
    9b5a:	2300      	movs	r3, #0
    9b5c:	61a3      	str	r3, [r4, #24]
    9b5e:	6063      	str	r3, [r4, #4]
    9b60:	89a3      	ldrh	r3, [r4, #12]
    9b62:	061b      	lsls	r3, r3, #24
    9b64:	d503      	bpl.n	9b6e <setvbuf+0x6e>
    9b66:	6921      	ldr	r1, [r4, #16]
    9b68:	0030      	movs	r0, r6
    9b6a:	f7ff fe6d 	bl	9848 <_free_r>
    9b6e:	89a3      	ldrh	r3, [r4, #12]
    9b70:	4a36      	ldr	r2, [pc, #216]	; (9c4c <setvbuf+0x14c>)
    9b72:	4013      	ands	r3, r2
    9b74:	81a3      	strh	r3, [r4, #12]
    9b76:	9b00      	ldr	r3, [sp, #0]
    9b78:	2b02      	cmp	r3, #2
    9b7a:	d05a      	beq.n	9c32 <setvbuf+0x132>
    9b7c:	ab03      	add	r3, sp, #12
    9b7e:	aa02      	add	r2, sp, #8
    9b80:	0021      	movs	r1, r4
    9b82:	0030      	movs	r0, r6
    9b84:	f000 fb0e 	bl	a1a4 <__swhatbuf_r>
    9b88:	89a3      	ldrh	r3, [r4, #12]
    9b8a:	4318      	orrs	r0, r3
    9b8c:	81a0      	strh	r0, [r4, #12]
    9b8e:	2d00      	cmp	r5, #0
    9b90:	d124      	bne.n	9bdc <setvbuf+0xdc>
    9b92:	9d02      	ldr	r5, [sp, #8]
    9b94:	0028      	movs	r0, r5
    9b96:	f7ff fe29 	bl	97ec <malloc>
    9b9a:	9501      	str	r5, [sp, #4]
    9b9c:	1e07      	subs	r7, r0, #0
    9b9e:	d142      	bne.n	9c26 <setvbuf+0x126>
    9ba0:	9b02      	ldr	r3, [sp, #8]
    9ba2:	9301      	str	r3, [sp, #4]
    9ba4:	42ab      	cmp	r3, r5
    9ba6:	d139      	bne.n	9c1c <setvbuf+0x11c>
    9ba8:	2001      	movs	r0, #1
    9baa:	4240      	negs	r0, r0
    9bac:	2302      	movs	r3, #2
    9bae:	89a2      	ldrh	r2, [r4, #12]
    9bb0:	4313      	orrs	r3, r2
    9bb2:	81a3      	strh	r3, [r4, #12]
    9bb4:	2300      	movs	r3, #0
    9bb6:	60a3      	str	r3, [r4, #8]
    9bb8:	0023      	movs	r3, r4
    9bba:	3347      	adds	r3, #71	; 0x47
    9bbc:	6023      	str	r3, [r4, #0]
    9bbe:	6123      	str	r3, [r4, #16]
    9bc0:	2301      	movs	r3, #1
    9bc2:	6163      	str	r3, [r4, #20]
    9bc4:	b005      	add	sp, #20
    9bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9bc8:	4b21      	ldr	r3, [pc, #132]	; (9c50 <setvbuf+0x150>)
    9bca:	429c      	cmp	r4, r3
    9bcc:	d101      	bne.n	9bd2 <setvbuf+0xd2>
    9bce:	68b4      	ldr	r4, [r6, #8]
    9bd0:	e7aa      	b.n	9b28 <setvbuf+0x28>
    9bd2:	4b20      	ldr	r3, [pc, #128]	; (9c54 <setvbuf+0x154>)
    9bd4:	429c      	cmp	r4, r3
    9bd6:	d1a7      	bne.n	9b28 <setvbuf+0x28>
    9bd8:	68f4      	ldr	r4, [r6, #12]
    9bda:	e7a5      	b.n	9b28 <setvbuf+0x28>
    9bdc:	2f00      	cmp	r7, #0
    9bde:	d0d9      	beq.n	9b94 <setvbuf+0x94>
    9be0:	69b3      	ldr	r3, [r6, #24]
    9be2:	2b00      	cmp	r3, #0
    9be4:	d102      	bne.n	9bec <setvbuf+0xec>
    9be6:	0030      	movs	r0, r6
    9be8:	f000 fa46 	bl	a078 <__sinit>
    9bec:	9b00      	ldr	r3, [sp, #0]
    9bee:	2b01      	cmp	r3, #1
    9bf0:	d103      	bne.n	9bfa <setvbuf+0xfa>
    9bf2:	89a3      	ldrh	r3, [r4, #12]
    9bf4:	9a00      	ldr	r2, [sp, #0]
    9bf6:	431a      	orrs	r2, r3
    9bf8:	81a2      	strh	r2, [r4, #12]
    9bfa:	2008      	movs	r0, #8
    9bfc:	89a3      	ldrh	r3, [r4, #12]
    9bfe:	6027      	str	r7, [r4, #0]
    9c00:	6127      	str	r7, [r4, #16]
    9c02:	6165      	str	r5, [r4, #20]
    9c04:	4018      	ands	r0, r3
    9c06:	d018      	beq.n	9c3a <setvbuf+0x13a>
    9c08:	2001      	movs	r0, #1
    9c0a:	4018      	ands	r0, r3
    9c0c:	2300      	movs	r3, #0
    9c0e:	4298      	cmp	r0, r3
    9c10:	d011      	beq.n	9c36 <setvbuf+0x136>
    9c12:	426d      	negs	r5, r5
    9c14:	60a3      	str	r3, [r4, #8]
    9c16:	61a5      	str	r5, [r4, #24]
    9c18:	0018      	movs	r0, r3
    9c1a:	e7d3      	b.n	9bc4 <setvbuf+0xc4>
    9c1c:	9801      	ldr	r0, [sp, #4]
    9c1e:	f7ff fde5 	bl	97ec <malloc>
    9c22:	1e07      	subs	r7, r0, #0
    9c24:	d0c0      	beq.n	9ba8 <setvbuf+0xa8>
    9c26:	2380      	movs	r3, #128	; 0x80
    9c28:	89a2      	ldrh	r2, [r4, #12]
    9c2a:	9d01      	ldr	r5, [sp, #4]
    9c2c:	4313      	orrs	r3, r2
    9c2e:	81a3      	strh	r3, [r4, #12]
    9c30:	e7d6      	b.n	9be0 <setvbuf+0xe0>
    9c32:	2000      	movs	r0, #0
    9c34:	e7ba      	b.n	9bac <setvbuf+0xac>
    9c36:	60a5      	str	r5, [r4, #8]
    9c38:	e7c4      	b.n	9bc4 <setvbuf+0xc4>
    9c3a:	60a0      	str	r0, [r4, #8]
    9c3c:	e7c2      	b.n	9bc4 <setvbuf+0xc4>
    9c3e:	2001      	movs	r0, #1
    9c40:	4240      	negs	r0, r0
    9c42:	e7bf      	b.n	9bc4 <setvbuf+0xc4>
    9c44:	20000080 	.word	0x20000080
    9c48:	0000c168 	.word	0x0000c168
    9c4c:	fffff35c 	.word	0xfffff35c
    9c50:	0000c188 	.word	0x0000c188
    9c54:	0000c148 	.word	0x0000c148

00009c58 <siprintf>:
    9c58:	b40e      	push	{r1, r2, r3}
    9c5a:	b510      	push	{r4, lr}
    9c5c:	b09d      	sub	sp, #116	; 0x74
    9c5e:	a902      	add	r1, sp, #8
    9c60:	9002      	str	r0, [sp, #8]
    9c62:	6108      	str	r0, [r1, #16]
    9c64:	480b      	ldr	r0, [pc, #44]	; (9c94 <siprintf+0x3c>)
    9c66:	2482      	movs	r4, #130	; 0x82
    9c68:	6088      	str	r0, [r1, #8]
    9c6a:	6148      	str	r0, [r1, #20]
    9c6c:	2001      	movs	r0, #1
    9c6e:	4240      	negs	r0, r0
    9c70:	ab1f      	add	r3, sp, #124	; 0x7c
    9c72:	81c8      	strh	r0, [r1, #14]
    9c74:	4808      	ldr	r0, [pc, #32]	; (9c98 <siprintf+0x40>)
    9c76:	cb04      	ldmia	r3!, {r2}
    9c78:	00a4      	lsls	r4, r4, #2
    9c7a:	6800      	ldr	r0, [r0, #0]
    9c7c:	9301      	str	r3, [sp, #4]
    9c7e:	818c      	strh	r4, [r1, #12]
    9c80:	f000 fb5a 	bl	a338 <_svfiprintf_r>
    9c84:	2300      	movs	r3, #0
    9c86:	9a02      	ldr	r2, [sp, #8]
    9c88:	7013      	strb	r3, [r2, #0]
    9c8a:	b01d      	add	sp, #116	; 0x74
    9c8c:	bc10      	pop	{r4}
    9c8e:	bc08      	pop	{r3}
    9c90:	b003      	add	sp, #12
    9c92:	4718      	bx	r3
    9c94:	7fffffff 	.word	0x7fffffff
    9c98:	20000080 	.word	0x20000080

00009c9c <strcmp>:
    9c9c:	7802      	ldrb	r2, [r0, #0]
    9c9e:	780b      	ldrb	r3, [r1, #0]
    9ca0:	2a00      	cmp	r2, #0
    9ca2:	d003      	beq.n	9cac <strcmp+0x10>
    9ca4:	3001      	adds	r0, #1
    9ca6:	3101      	adds	r1, #1
    9ca8:	429a      	cmp	r2, r3
    9caa:	d0f7      	beq.n	9c9c <strcmp>
    9cac:	1ad0      	subs	r0, r2, r3
    9cae:	4770      	bx	lr

00009cb0 <strcpy>:
    9cb0:	1c03      	adds	r3, r0, #0
    9cb2:	780a      	ldrb	r2, [r1, #0]
    9cb4:	3101      	adds	r1, #1
    9cb6:	701a      	strb	r2, [r3, #0]
    9cb8:	3301      	adds	r3, #1
    9cba:	2a00      	cmp	r2, #0
    9cbc:	d1f9      	bne.n	9cb2 <strcpy+0x2>
    9cbe:	4770      	bx	lr

00009cc0 <strlen>:
    9cc0:	2300      	movs	r3, #0
    9cc2:	5cc2      	ldrb	r2, [r0, r3]
    9cc4:	3301      	adds	r3, #1
    9cc6:	2a00      	cmp	r2, #0
    9cc8:	d1fb      	bne.n	9cc2 <strlen+0x2>
    9cca:	1e58      	subs	r0, r3, #1
    9ccc:	4770      	bx	lr

00009cce <strncmp>:
    9cce:	2300      	movs	r3, #0
    9cd0:	b530      	push	{r4, r5, lr}
    9cd2:	429a      	cmp	r2, r3
    9cd4:	d00a      	beq.n	9cec <strncmp+0x1e>
    9cd6:	3a01      	subs	r2, #1
    9cd8:	5cc4      	ldrb	r4, [r0, r3]
    9cda:	5ccd      	ldrb	r5, [r1, r3]
    9cdc:	42ac      	cmp	r4, r5
    9cde:	d104      	bne.n	9cea <strncmp+0x1c>
    9ce0:	429a      	cmp	r2, r3
    9ce2:	d002      	beq.n	9cea <strncmp+0x1c>
    9ce4:	3301      	adds	r3, #1
    9ce6:	2c00      	cmp	r4, #0
    9ce8:	d1f6      	bne.n	9cd8 <strncmp+0xa>
    9cea:	1b63      	subs	r3, r4, r5
    9cec:	0018      	movs	r0, r3
    9cee:	bd30      	pop	{r4, r5, pc}

00009cf0 <__swbuf_r>:
    9cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9cf2:	0005      	movs	r5, r0
    9cf4:	000e      	movs	r6, r1
    9cf6:	0014      	movs	r4, r2
    9cf8:	2800      	cmp	r0, #0
    9cfa:	d004      	beq.n	9d06 <__swbuf_r+0x16>
    9cfc:	6983      	ldr	r3, [r0, #24]
    9cfe:	2b00      	cmp	r3, #0
    9d00:	d101      	bne.n	9d06 <__swbuf_r+0x16>
    9d02:	f000 f9b9 	bl	a078 <__sinit>
    9d06:	4b22      	ldr	r3, [pc, #136]	; (9d90 <__swbuf_r+0xa0>)
    9d08:	429c      	cmp	r4, r3
    9d0a:	d12d      	bne.n	9d68 <__swbuf_r+0x78>
    9d0c:	686c      	ldr	r4, [r5, #4]
    9d0e:	69a3      	ldr	r3, [r4, #24]
    9d10:	60a3      	str	r3, [r4, #8]
    9d12:	89a3      	ldrh	r3, [r4, #12]
    9d14:	071b      	lsls	r3, r3, #28
    9d16:	d531      	bpl.n	9d7c <__swbuf_r+0x8c>
    9d18:	6923      	ldr	r3, [r4, #16]
    9d1a:	2b00      	cmp	r3, #0
    9d1c:	d02e      	beq.n	9d7c <__swbuf_r+0x8c>
    9d1e:	6823      	ldr	r3, [r4, #0]
    9d20:	6922      	ldr	r2, [r4, #16]
    9d22:	b2f7      	uxtb	r7, r6
    9d24:	1a98      	subs	r0, r3, r2
    9d26:	6963      	ldr	r3, [r4, #20]
    9d28:	b2f6      	uxtb	r6, r6
    9d2a:	4298      	cmp	r0, r3
    9d2c:	db05      	blt.n	9d3a <__swbuf_r+0x4a>
    9d2e:	0021      	movs	r1, r4
    9d30:	0028      	movs	r0, r5
    9d32:	f000 f933 	bl	9f9c <_fflush_r>
    9d36:	2800      	cmp	r0, #0
    9d38:	d126      	bne.n	9d88 <__swbuf_r+0x98>
    9d3a:	68a3      	ldr	r3, [r4, #8]
    9d3c:	3001      	adds	r0, #1
    9d3e:	3b01      	subs	r3, #1
    9d40:	60a3      	str	r3, [r4, #8]
    9d42:	6823      	ldr	r3, [r4, #0]
    9d44:	1c5a      	adds	r2, r3, #1
    9d46:	6022      	str	r2, [r4, #0]
    9d48:	701f      	strb	r7, [r3, #0]
    9d4a:	6963      	ldr	r3, [r4, #20]
    9d4c:	4298      	cmp	r0, r3
    9d4e:	d004      	beq.n	9d5a <__swbuf_r+0x6a>
    9d50:	89a3      	ldrh	r3, [r4, #12]
    9d52:	07db      	lsls	r3, r3, #31
    9d54:	d51a      	bpl.n	9d8c <__swbuf_r+0x9c>
    9d56:	2e0a      	cmp	r6, #10
    9d58:	d118      	bne.n	9d8c <__swbuf_r+0x9c>
    9d5a:	0021      	movs	r1, r4
    9d5c:	0028      	movs	r0, r5
    9d5e:	f000 f91d 	bl	9f9c <_fflush_r>
    9d62:	2800      	cmp	r0, #0
    9d64:	d012      	beq.n	9d8c <__swbuf_r+0x9c>
    9d66:	e00f      	b.n	9d88 <__swbuf_r+0x98>
    9d68:	4b0a      	ldr	r3, [pc, #40]	; (9d94 <__swbuf_r+0xa4>)
    9d6a:	429c      	cmp	r4, r3
    9d6c:	d101      	bne.n	9d72 <__swbuf_r+0x82>
    9d6e:	68ac      	ldr	r4, [r5, #8]
    9d70:	e7cd      	b.n	9d0e <__swbuf_r+0x1e>
    9d72:	4b09      	ldr	r3, [pc, #36]	; (9d98 <__swbuf_r+0xa8>)
    9d74:	429c      	cmp	r4, r3
    9d76:	d1ca      	bne.n	9d0e <__swbuf_r+0x1e>
    9d78:	68ec      	ldr	r4, [r5, #12]
    9d7a:	e7c8      	b.n	9d0e <__swbuf_r+0x1e>
    9d7c:	0021      	movs	r1, r4
    9d7e:	0028      	movs	r0, r5
    9d80:	f000 f80c 	bl	9d9c <__swsetup_r>
    9d84:	2800      	cmp	r0, #0
    9d86:	d0ca      	beq.n	9d1e <__swbuf_r+0x2e>
    9d88:	2601      	movs	r6, #1
    9d8a:	4276      	negs	r6, r6
    9d8c:	0030      	movs	r0, r6
    9d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9d90:	0000c168 	.word	0x0000c168
    9d94:	0000c188 	.word	0x0000c188
    9d98:	0000c148 	.word	0x0000c148

00009d9c <__swsetup_r>:
    9d9c:	4b36      	ldr	r3, [pc, #216]	; (9e78 <__swsetup_r+0xdc>)
    9d9e:	b570      	push	{r4, r5, r6, lr}
    9da0:	681d      	ldr	r5, [r3, #0]
    9da2:	0006      	movs	r6, r0
    9da4:	000c      	movs	r4, r1
    9da6:	2d00      	cmp	r5, #0
    9da8:	d005      	beq.n	9db6 <__swsetup_r+0x1a>
    9daa:	69ab      	ldr	r3, [r5, #24]
    9dac:	2b00      	cmp	r3, #0
    9dae:	d102      	bne.n	9db6 <__swsetup_r+0x1a>
    9db0:	0028      	movs	r0, r5
    9db2:	f000 f961 	bl	a078 <__sinit>
    9db6:	4b31      	ldr	r3, [pc, #196]	; (9e7c <__swsetup_r+0xe0>)
    9db8:	429c      	cmp	r4, r3
    9dba:	d10f      	bne.n	9ddc <__swsetup_r+0x40>
    9dbc:	686c      	ldr	r4, [r5, #4]
    9dbe:	230c      	movs	r3, #12
    9dc0:	5ee2      	ldrsh	r2, [r4, r3]
    9dc2:	b293      	uxth	r3, r2
    9dc4:	0719      	lsls	r1, r3, #28
    9dc6:	d42d      	bmi.n	9e24 <__swsetup_r+0x88>
    9dc8:	06d9      	lsls	r1, r3, #27
    9dca:	d411      	bmi.n	9df0 <__swsetup_r+0x54>
    9dcc:	2309      	movs	r3, #9
    9dce:	2001      	movs	r0, #1
    9dd0:	6033      	str	r3, [r6, #0]
    9dd2:	3337      	adds	r3, #55	; 0x37
    9dd4:	4313      	orrs	r3, r2
    9dd6:	81a3      	strh	r3, [r4, #12]
    9dd8:	4240      	negs	r0, r0
    9dda:	bd70      	pop	{r4, r5, r6, pc}
    9ddc:	4b28      	ldr	r3, [pc, #160]	; (9e80 <__swsetup_r+0xe4>)
    9dde:	429c      	cmp	r4, r3
    9de0:	d101      	bne.n	9de6 <__swsetup_r+0x4a>
    9de2:	68ac      	ldr	r4, [r5, #8]
    9de4:	e7eb      	b.n	9dbe <__swsetup_r+0x22>
    9de6:	4b27      	ldr	r3, [pc, #156]	; (9e84 <__swsetup_r+0xe8>)
    9de8:	429c      	cmp	r4, r3
    9dea:	d1e8      	bne.n	9dbe <__swsetup_r+0x22>
    9dec:	68ec      	ldr	r4, [r5, #12]
    9dee:	e7e6      	b.n	9dbe <__swsetup_r+0x22>
    9df0:	075b      	lsls	r3, r3, #29
    9df2:	d513      	bpl.n	9e1c <__swsetup_r+0x80>
    9df4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9df6:	2900      	cmp	r1, #0
    9df8:	d008      	beq.n	9e0c <__swsetup_r+0x70>
    9dfa:	0023      	movs	r3, r4
    9dfc:	3344      	adds	r3, #68	; 0x44
    9dfe:	4299      	cmp	r1, r3
    9e00:	d002      	beq.n	9e08 <__swsetup_r+0x6c>
    9e02:	0030      	movs	r0, r6
    9e04:	f7ff fd20 	bl	9848 <_free_r>
    9e08:	2300      	movs	r3, #0
    9e0a:	6363      	str	r3, [r4, #52]	; 0x34
    9e0c:	2224      	movs	r2, #36	; 0x24
    9e0e:	89a3      	ldrh	r3, [r4, #12]
    9e10:	4393      	bics	r3, r2
    9e12:	81a3      	strh	r3, [r4, #12]
    9e14:	2300      	movs	r3, #0
    9e16:	6063      	str	r3, [r4, #4]
    9e18:	6923      	ldr	r3, [r4, #16]
    9e1a:	6023      	str	r3, [r4, #0]
    9e1c:	2308      	movs	r3, #8
    9e1e:	89a2      	ldrh	r2, [r4, #12]
    9e20:	4313      	orrs	r3, r2
    9e22:	81a3      	strh	r3, [r4, #12]
    9e24:	6923      	ldr	r3, [r4, #16]
    9e26:	2b00      	cmp	r3, #0
    9e28:	d10b      	bne.n	9e42 <__swsetup_r+0xa6>
    9e2a:	21a0      	movs	r1, #160	; 0xa0
    9e2c:	2280      	movs	r2, #128	; 0x80
    9e2e:	89a3      	ldrh	r3, [r4, #12]
    9e30:	0089      	lsls	r1, r1, #2
    9e32:	0092      	lsls	r2, r2, #2
    9e34:	400b      	ands	r3, r1
    9e36:	4293      	cmp	r3, r2
    9e38:	d003      	beq.n	9e42 <__swsetup_r+0xa6>
    9e3a:	0021      	movs	r1, r4
    9e3c:	0030      	movs	r0, r6
    9e3e:	f000 f9d9 	bl	a1f4 <__smakebuf_r>
    9e42:	2301      	movs	r3, #1
    9e44:	89a2      	ldrh	r2, [r4, #12]
    9e46:	4013      	ands	r3, r2
    9e48:	d011      	beq.n	9e6e <__swsetup_r+0xd2>
    9e4a:	2300      	movs	r3, #0
    9e4c:	60a3      	str	r3, [r4, #8]
    9e4e:	6963      	ldr	r3, [r4, #20]
    9e50:	425b      	negs	r3, r3
    9e52:	61a3      	str	r3, [r4, #24]
    9e54:	2000      	movs	r0, #0
    9e56:	6923      	ldr	r3, [r4, #16]
    9e58:	4283      	cmp	r3, r0
    9e5a:	d1be      	bne.n	9dda <__swsetup_r+0x3e>
    9e5c:	230c      	movs	r3, #12
    9e5e:	5ee2      	ldrsh	r2, [r4, r3]
    9e60:	0613      	lsls	r3, r2, #24
    9e62:	d5ba      	bpl.n	9dda <__swsetup_r+0x3e>
    9e64:	2340      	movs	r3, #64	; 0x40
    9e66:	4313      	orrs	r3, r2
    9e68:	81a3      	strh	r3, [r4, #12]
    9e6a:	3801      	subs	r0, #1
    9e6c:	e7b5      	b.n	9dda <__swsetup_r+0x3e>
    9e6e:	0792      	lsls	r2, r2, #30
    9e70:	d400      	bmi.n	9e74 <__swsetup_r+0xd8>
    9e72:	6963      	ldr	r3, [r4, #20]
    9e74:	60a3      	str	r3, [r4, #8]
    9e76:	e7ed      	b.n	9e54 <__swsetup_r+0xb8>
    9e78:	20000080 	.word	0x20000080
    9e7c:	0000c168 	.word	0x0000c168
    9e80:	0000c188 	.word	0x0000c188
    9e84:	0000c148 	.word	0x0000c148

00009e88 <__sflush_r>:
    9e88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9e8a:	898a      	ldrh	r2, [r1, #12]
    9e8c:	0005      	movs	r5, r0
    9e8e:	000c      	movs	r4, r1
    9e90:	0713      	lsls	r3, r2, #28
    9e92:	d460      	bmi.n	9f56 <__sflush_r+0xce>
    9e94:	684b      	ldr	r3, [r1, #4]
    9e96:	2b00      	cmp	r3, #0
    9e98:	dc04      	bgt.n	9ea4 <__sflush_r+0x1c>
    9e9a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    9e9c:	2b00      	cmp	r3, #0
    9e9e:	dc01      	bgt.n	9ea4 <__sflush_r+0x1c>
    9ea0:	2000      	movs	r0, #0
    9ea2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9ea4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    9ea6:	2f00      	cmp	r7, #0
    9ea8:	d0fa      	beq.n	9ea0 <__sflush_r+0x18>
    9eaa:	2300      	movs	r3, #0
    9eac:	682e      	ldr	r6, [r5, #0]
    9eae:	602b      	str	r3, [r5, #0]
    9eb0:	2380      	movs	r3, #128	; 0x80
    9eb2:	015b      	lsls	r3, r3, #5
    9eb4:	401a      	ands	r2, r3
    9eb6:	d034      	beq.n	9f22 <__sflush_r+0x9a>
    9eb8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    9eba:	89a3      	ldrh	r3, [r4, #12]
    9ebc:	075b      	lsls	r3, r3, #29
    9ebe:	d506      	bpl.n	9ece <__sflush_r+0x46>
    9ec0:	6863      	ldr	r3, [r4, #4]
    9ec2:	1ac0      	subs	r0, r0, r3
    9ec4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9ec6:	2b00      	cmp	r3, #0
    9ec8:	d001      	beq.n	9ece <__sflush_r+0x46>
    9eca:	6c23      	ldr	r3, [r4, #64]	; 0x40
    9ecc:	1ac0      	subs	r0, r0, r3
    9ece:	0002      	movs	r2, r0
    9ed0:	6a21      	ldr	r1, [r4, #32]
    9ed2:	2300      	movs	r3, #0
    9ed4:	0028      	movs	r0, r5
    9ed6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    9ed8:	47b8      	blx	r7
    9eda:	89a1      	ldrh	r1, [r4, #12]
    9edc:	1c43      	adds	r3, r0, #1
    9ede:	d106      	bne.n	9eee <__sflush_r+0x66>
    9ee0:	682b      	ldr	r3, [r5, #0]
    9ee2:	2b1d      	cmp	r3, #29
    9ee4:	d831      	bhi.n	9f4a <__sflush_r+0xc2>
    9ee6:	4a2c      	ldr	r2, [pc, #176]	; (9f98 <__sflush_r+0x110>)
    9ee8:	40da      	lsrs	r2, r3
    9eea:	07d3      	lsls	r3, r2, #31
    9eec:	d52d      	bpl.n	9f4a <__sflush_r+0xc2>
    9eee:	2300      	movs	r3, #0
    9ef0:	6063      	str	r3, [r4, #4]
    9ef2:	6923      	ldr	r3, [r4, #16]
    9ef4:	6023      	str	r3, [r4, #0]
    9ef6:	04cb      	lsls	r3, r1, #19
    9ef8:	d505      	bpl.n	9f06 <__sflush_r+0x7e>
    9efa:	1c43      	adds	r3, r0, #1
    9efc:	d102      	bne.n	9f04 <__sflush_r+0x7c>
    9efe:	682b      	ldr	r3, [r5, #0]
    9f00:	2b00      	cmp	r3, #0
    9f02:	d100      	bne.n	9f06 <__sflush_r+0x7e>
    9f04:	6560      	str	r0, [r4, #84]	; 0x54
    9f06:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9f08:	602e      	str	r6, [r5, #0]
    9f0a:	2900      	cmp	r1, #0
    9f0c:	d0c8      	beq.n	9ea0 <__sflush_r+0x18>
    9f0e:	0023      	movs	r3, r4
    9f10:	3344      	adds	r3, #68	; 0x44
    9f12:	4299      	cmp	r1, r3
    9f14:	d002      	beq.n	9f1c <__sflush_r+0x94>
    9f16:	0028      	movs	r0, r5
    9f18:	f7ff fc96 	bl	9848 <_free_r>
    9f1c:	2000      	movs	r0, #0
    9f1e:	6360      	str	r0, [r4, #52]	; 0x34
    9f20:	e7bf      	b.n	9ea2 <__sflush_r+0x1a>
    9f22:	2301      	movs	r3, #1
    9f24:	6a21      	ldr	r1, [r4, #32]
    9f26:	0028      	movs	r0, r5
    9f28:	47b8      	blx	r7
    9f2a:	1c43      	adds	r3, r0, #1
    9f2c:	d1c5      	bne.n	9eba <__sflush_r+0x32>
    9f2e:	682b      	ldr	r3, [r5, #0]
    9f30:	2b00      	cmp	r3, #0
    9f32:	d0c2      	beq.n	9eba <__sflush_r+0x32>
    9f34:	2b1d      	cmp	r3, #29
    9f36:	d001      	beq.n	9f3c <__sflush_r+0xb4>
    9f38:	2b16      	cmp	r3, #22
    9f3a:	d101      	bne.n	9f40 <__sflush_r+0xb8>
    9f3c:	602e      	str	r6, [r5, #0]
    9f3e:	e7af      	b.n	9ea0 <__sflush_r+0x18>
    9f40:	2340      	movs	r3, #64	; 0x40
    9f42:	89a2      	ldrh	r2, [r4, #12]
    9f44:	4313      	orrs	r3, r2
    9f46:	81a3      	strh	r3, [r4, #12]
    9f48:	e7ab      	b.n	9ea2 <__sflush_r+0x1a>
    9f4a:	2340      	movs	r3, #64	; 0x40
    9f4c:	430b      	orrs	r3, r1
    9f4e:	2001      	movs	r0, #1
    9f50:	81a3      	strh	r3, [r4, #12]
    9f52:	4240      	negs	r0, r0
    9f54:	e7a5      	b.n	9ea2 <__sflush_r+0x1a>
    9f56:	690f      	ldr	r7, [r1, #16]
    9f58:	2f00      	cmp	r7, #0
    9f5a:	d0a1      	beq.n	9ea0 <__sflush_r+0x18>
    9f5c:	680b      	ldr	r3, [r1, #0]
    9f5e:	600f      	str	r7, [r1, #0]
    9f60:	1bdb      	subs	r3, r3, r7
    9f62:	9301      	str	r3, [sp, #4]
    9f64:	2300      	movs	r3, #0
    9f66:	0792      	lsls	r2, r2, #30
    9f68:	d100      	bne.n	9f6c <__sflush_r+0xe4>
    9f6a:	694b      	ldr	r3, [r1, #20]
    9f6c:	60a3      	str	r3, [r4, #8]
    9f6e:	9b01      	ldr	r3, [sp, #4]
    9f70:	2b00      	cmp	r3, #0
    9f72:	dc00      	bgt.n	9f76 <__sflush_r+0xee>
    9f74:	e794      	b.n	9ea0 <__sflush_r+0x18>
    9f76:	9b01      	ldr	r3, [sp, #4]
    9f78:	003a      	movs	r2, r7
    9f7a:	6a21      	ldr	r1, [r4, #32]
    9f7c:	0028      	movs	r0, r5
    9f7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    9f80:	47b0      	blx	r6
    9f82:	2800      	cmp	r0, #0
    9f84:	dc03      	bgt.n	9f8e <__sflush_r+0x106>
    9f86:	2340      	movs	r3, #64	; 0x40
    9f88:	89a2      	ldrh	r2, [r4, #12]
    9f8a:	4313      	orrs	r3, r2
    9f8c:	e7df      	b.n	9f4e <__sflush_r+0xc6>
    9f8e:	9b01      	ldr	r3, [sp, #4]
    9f90:	183f      	adds	r7, r7, r0
    9f92:	1a1b      	subs	r3, r3, r0
    9f94:	9301      	str	r3, [sp, #4]
    9f96:	e7ea      	b.n	9f6e <__sflush_r+0xe6>
    9f98:	20400001 	.word	0x20400001

00009f9c <_fflush_r>:
    9f9c:	690b      	ldr	r3, [r1, #16]
    9f9e:	b570      	push	{r4, r5, r6, lr}
    9fa0:	0005      	movs	r5, r0
    9fa2:	000c      	movs	r4, r1
    9fa4:	2b00      	cmp	r3, #0
    9fa6:	d101      	bne.n	9fac <_fflush_r+0x10>
    9fa8:	2000      	movs	r0, #0
    9faa:	bd70      	pop	{r4, r5, r6, pc}
    9fac:	2800      	cmp	r0, #0
    9fae:	d004      	beq.n	9fba <_fflush_r+0x1e>
    9fb0:	6983      	ldr	r3, [r0, #24]
    9fb2:	2b00      	cmp	r3, #0
    9fb4:	d101      	bne.n	9fba <_fflush_r+0x1e>
    9fb6:	f000 f85f 	bl	a078 <__sinit>
    9fba:	4b0b      	ldr	r3, [pc, #44]	; (9fe8 <_fflush_r+0x4c>)
    9fbc:	429c      	cmp	r4, r3
    9fbe:	d109      	bne.n	9fd4 <_fflush_r+0x38>
    9fc0:	686c      	ldr	r4, [r5, #4]
    9fc2:	220c      	movs	r2, #12
    9fc4:	5ea3      	ldrsh	r3, [r4, r2]
    9fc6:	2b00      	cmp	r3, #0
    9fc8:	d0ee      	beq.n	9fa8 <_fflush_r+0xc>
    9fca:	0021      	movs	r1, r4
    9fcc:	0028      	movs	r0, r5
    9fce:	f7ff ff5b 	bl	9e88 <__sflush_r>
    9fd2:	e7ea      	b.n	9faa <_fflush_r+0xe>
    9fd4:	4b05      	ldr	r3, [pc, #20]	; (9fec <_fflush_r+0x50>)
    9fd6:	429c      	cmp	r4, r3
    9fd8:	d101      	bne.n	9fde <_fflush_r+0x42>
    9fda:	68ac      	ldr	r4, [r5, #8]
    9fdc:	e7f1      	b.n	9fc2 <_fflush_r+0x26>
    9fde:	4b04      	ldr	r3, [pc, #16]	; (9ff0 <_fflush_r+0x54>)
    9fe0:	429c      	cmp	r4, r3
    9fe2:	d1ee      	bne.n	9fc2 <_fflush_r+0x26>
    9fe4:	68ec      	ldr	r4, [r5, #12]
    9fe6:	e7ec      	b.n	9fc2 <_fflush_r+0x26>
    9fe8:	0000c168 	.word	0x0000c168
    9fec:	0000c188 	.word	0x0000c188
    9ff0:	0000c148 	.word	0x0000c148

00009ff4 <_cleanup_r>:
    9ff4:	b510      	push	{r4, lr}
    9ff6:	4902      	ldr	r1, [pc, #8]	; (a000 <_cleanup_r+0xc>)
    9ff8:	f000 f8b2 	bl	a160 <_fwalk_reent>
    9ffc:	bd10      	pop	{r4, pc}
    9ffe:	46c0      	nop			; (mov r8, r8)
    a000:	00009f9d 	.word	0x00009f9d

0000a004 <std.isra.0>:
    a004:	2300      	movs	r3, #0
    a006:	b510      	push	{r4, lr}
    a008:	0004      	movs	r4, r0
    a00a:	6003      	str	r3, [r0, #0]
    a00c:	6043      	str	r3, [r0, #4]
    a00e:	6083      	str	r3, [r0, #8]
    a010:	8181      	strh	r1, [r0, #12]
    a012:	6643      	str	r3, [r0, #100]	; 0x64
    a014:	81c2      	strh	r2, [r0, #14]
    a016:	6103      	str	r3, [r0, #16]
    a018:	6143      	str	r3, [r0, #20]
    a01a:	6183      	str	r3, [r0, #24]
    a01c:	0019      	movs	r1, r3
    a01e:	2208      	movs	r2, #8
    a020:	305c      	adds	r0, #92	; 0x5c
    a022:	f7ff fc08 	bl	9836 <memset>
    a026:	4b05      	ldr	r3, [pc, #20]	; (a03c <std.isra.0+0x38>)
    a028:	6224      	str	r4, [r4, #32]
    a02a:	6263      	str	r3, [r4, #36]	; 0x24
    a02c:	4b04      	ldr	r3, [pc, #16]	; (a040 <std.isra.0+0x3c>)
    a02e:	62a3      	str	r3, [r4, #40]	; 0x28
    a030:	4b04      	ldr	r3, [pc, #16]	; (a044 <std.isra.0+0x40>)
    a032:	62e3      	str	r3, [r4, #44]	; 0x2c
    a034:	4b04      	ldr	r3, [pc, #16]	; (a048 <std.isra.0+0x44>)
    a036:	6323      	str	r3, [r4, #48]	; 0x30
    a038:	bd10      	pop	{r4, pc}
    a03a:	46c0      	nop			; (mov r8, r8)
    a03c:	0000ab45 	.word	0x0000ab45
    a040:	0000ab6d 	.word	0x0000ab6d
    a044:	0000aba5 	.word	0x0000aba5
    a048:	0000abd1 	.word	0x0000abd1

0000a04c <__sfmoreglue>:
    a04c:	b570      	push	{r4, r5, r6, lr}
    a04e:	2568      	movs	r5, #104	; 0x68
    a050:	1e4a      	subs	r2, r1, #1
    a052:	4355      	muls	r5, r2
    a054:	000e      	movs	r6, r1
    a056:	0029      	movs	r1, r5
    a058:	3174      	adds	r1, #116	; 0x74
    a05a:	f7ff fc3f 	bl	98dc <_malloc_r>
    a05e:	1e04      	subs	r4, r0, #0
    a060:	d008      	beq.n	a074 <__sfmoreglue+0x28>
    a062:	2100      	movs	r1, #0
    a064:	002a      	movs	r2, r5
    a066:	6001      	str	r1, [r0, #0]
    a068:	6046      	str	r6, [r0, #4]
    a06a:	300c      	adds	r0, #12
    a06c:	60a0      	str	r0, [r4, #8]
    a06e:	3268      	adds	r2, #104	; 0x68
    a070:	f7ff fbe1 	bl	9836 <memset>
    a074:	0020      	movs	r0, r4
    a076:	bd70      	pop	{r4, r5, r6, pc}

0000a078 <__sinit>:
    a078:	6983      	ldr	r3, [r0, #24]
    a07a:	b513      	push	{r0, r1, r4, lr}
    a07c:	0004      	movs	r4, r0
    a07e:	2b00      	cmp	r3, #0
    a080:	d128      	bne.n	a0d4 <__sinit+0x5c>
    a082:	6483      	str	r3, [r0, #72]	; 0x48
    a084:	64c3      	str	r3, [r0, #76]	; 0x4c
    a086:	6503      	str	r3, [r0, #80]	; 0x50
    a088:	4b13      	ldr	r3, [pc, #76]	; (a0d8 <__sinit+0x60>)
    a08a:	4a14      	ldr	r2, [pc, #80]	; (a0dc <__sinit+0x64>)
    a08c:	681b      	ldr	r3, [r3, #0]
    a08e:	6282      	str	r2, [r0, #40]	; 0x28
    a090:	9301      	str	r3, [sp, #4]
    a092:	4298      	cmp	r0, r3
    a094:	d101      	bne.n	a09a <__sinit+0x22>
    a096:	2301      	movs	r3, #1
    a098:	6183      	str	r3, [r0, #24]
    a09a:	0020      	movs	r0, r4
    a09c:	f000 f820 	bl	a0e0 <__sfp>
    a0a0:	6060      	str	r0, [r4, #4]
    a0a2:	0020      	movs	r0, r4
    a0a4:	f000 f81c 	bl	a0e0 <__sfp>
    a0a8:	60a0      	str	r0, [r4, #8]
    a0aa:	0020      	movs	r0, r4
    a0ac:	f000 f818 	bl	a0e0 <__sfp>
    a0b0:	2200      	movs	r2, #0
    a0b2:	60e0      	str	r0, [r4, #12]
    a0b4:	2104      	movs	r1, #4
    a0b6:	6860      	ldr	r0, [r4, #4]
    a0b8:	f7ff ffa4 	bl	a004 <std.isra.0>
    a0bc:	2201      	movs	r2, #1
    a0be:	2109      	movs	r1, #9
    a0c0:	68a0      	ldr	r0, [r4, #8]
    a0c2:	f7ff ff9f 	bl	a004 <std.isra.0>
    a0c6:	2202      	movs	r2, #2
    a0c8:	2112      	movs	r1, #18
    a0ca:	68e0      	ldr	r0, [r4, #12]
    a0cc:	f7ff ff9a 	bl	a004 <std.isra.0>
    a0d0:	2301      	movs	r3, #1
    a0d2:	61a3      	str	r3, [r4, #24]
    a0d4:	bd13      	pop	{r0, r1, r4, pc}
    a0d6:	46c0      	nop			; (mov r8, r8)
    a0d8:	0000c144 	.word	0x0000c144
    a0dc:	00009ff5 	.word	0x00009ff5

0000a0e0 <__sfp>:
    a0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a0e2:	4b1e      	ldr	r3, [pc, #120]	; (a15c <__sfp+0x7c>)
    a0e4:	0007      	movs	r7, r0
    a0e6:	681e      	ldr	r6, [r3, #0]
    a0e8:	69b3      	ldr	r3, [r6, #24]
    a0ea:	2b00      	cmp	r3, #0
    a0ec:	d102      	bne.n	a0f4 <__sfp+0x14>
    a0ee:	0030      	movs	r0, r6
    a0f0:	f7ff ffc2 	bl	a078 <__sinit>
    a0f4:	3648      	adds	r6, #72	; 0x48
    a0f6:	68b4      	ldr	r4, [r6, #8]
    a0f8:	6873      	ldr	r3, [r6, #4]
    a0fa:	3b01      	subs	r3, #1
    a0fc:	d504      	bpl.n	a108 <__sfp+0x28>
    a0fe:	6833      	ldr	r3, [r6, #0]
    a100:	2b00      	cmp	r3, #0
    a102:	d007      	beq.n	a114 <__sfp+0x34>
    a104:	6836      	ldr	r6, [r6, #0]
    a106:	e7f6      	b.n	a0f6 <__sfp+0x16>
    a108:	220c      	movs	r2, #12
    a10a:	5ea5      	ldrsh	r5, [r4, r2]
    a10c:	2d00      	cmp	r5, #0
    a10e:	d00d      	beq.n	a12c <__sfp+0x4c>
    a110:	3468      	adds	r4, #104	; 0x68
    a112:	e7f2      	b.n	a0fa <__sfp+0x1a>
    a114:	2104      	movs	r1, #4
    a116:	0038      	movs	r0, r7
    a118:	f7ff ff98 	bl	a04c <__sfmoreglue>
    a11c:	6030      	str	r0, [r6, #0]
    a11e:	2800      	cmp	r0, #0
    a120:	d1f0      	bne.n	a104 <__sfp+0x24>
    a122:	230c      	movs	r3, #12
    a124:	0004      	movs	r4, r0
    a126:	603b      	str	r3, [r7, #0]
    a128:	0020      	movs	r0, r4
    a12a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a12c:	2301      	movs	r3, #1
    a12e:	0020      	movs	r0, r4
    a130:	425b      	negs	r3, r3
    a132:	81e3      	strh	r3, [r4, #14]
    a134:	3302      	adds	r3, #2
    a136:	81a3      	strh	r3, [r4, #12]
    a138:	6665      	str	r5, [r4, #100]	; 0x64
    a13a:	6025      	str	r5, [r4, #0]
    a13c:	60a5      	str	r5, [r4, #8]
    a13e:	6065      	str	r5, [r4, #4]
    a140:	6125      	str	r5, [r4, #16]
    a142:	6165      	str	r5, [r4, #20]
    a144:	61a5      	str	r5, [r4, #24]
    a146:	2208      	movs	r2, #8
    a148:	0029      	movs	r1, r5
    a14a:	305c      	adds	r0, #92	; 0x5c
    a14c:	f7ff fb73 	bl	9836 <memset>
    a150:	6365      	str	r5, [r4, #52]	; 0x34
    a152:	63a5      	str	r5, [r4, #56]	; 0x38
    a154:	64a5      	str	r5, [r4, #72]	; 0x48
    a156:	64e5      	str	r5, [r4, #76]	; 0x4c
    a158:	e7e6      	b.n	a128 <__sfp+0x48>
    a15a:	46c0      	nop			; (mov r8, r8)
    a15c:	0000c144 	.word	0x0000c144

0000a160 <_fwalk_reent>:
    a160:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a162:	0004      	movs	r4, r0
    a164:	0007      	movs	r7, r0
    a166:	2600      	movs	r6, #0
    a168:	9101      	str	r1, [sp, #4]
    a16a:	3448      	adds	r4, #72	; 0x48
    a16c:	2c00      	cmp	r4, #0
    a16e:	d101      	bne.n	a174 <_fwalk_reent+0x14>
    a170:	0030      	movs	r0, r6
    a172:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    a174:	6863      	ldr	r3, [r4, #4]
    a176:	68a5      	ldr	r5, [r4, #8]
    a178:	9300      	str	r3, [sp, #0]
    a17a:	9b00      	ldr	r3, [sp, #0]
    a17c:	3b01      	subs	r3, #1
    a17e:	9300      	str	r3, [sp, #0]
    a180:	d501      	bpl.n	a186 <_fwalk_reent+0x26>
    a182:	6824      	ldr	r4, [r4, #0]
    a184:	e7f2      	b.n	a16c <_fwalk_reent+0xc>
    a186:	89ab      	ldrh	r3, [r5, #12]
    a188:	2b01      	cmp	r3, #1
    a18a:	d908      	bls.n	a19e <_fwalk_reent+0x3e>
    a18c:	220e      	movs	r2, #14
    a18e:	5eab      	ldrsh	r3, [r5, r2]
    a190:	3301      	adds	r3, #1
    a192:	d004      	beq.n	a19e <_fwalk_reent+0x3e>
    a194:	0029      	movs	r1, r5
    a196:	0038      	movs	r0, r7
    a198:	9b01      	ldr	r3, [sp, #4]
    a19a:	4798      	blx	r3
    a19c:	4306      	orrs	r6, r0
    a19e:	3568      	adds	r5, #104	; 0x68
    a1a0:	e7eb      	b.n	a17a <_fwalk_reent+0x1a>
	...

0000a1a4 <__swhatbuf_r>:
    a1a4:	b570      	push	{r4, r5, r6, lr}
    a1a6:	000e      	movs	r6, r1
    a1a8:	001d      	movs	r5, r3
    a1aa:	230e      	movs	r3, #14
    a1ac:	5ec9      	ldrsh	r1, [r1, r3]
    a1ae:	b090      	sub	sp, #64	; 0x40
    a1b0:	0014      	movs	r4, r2
    a1b2:	2900      	cmp	r1, #0
    a1b4:	da07      	bge.n	a1c6 <__swhatbuf_r+0x22>
    a1b6:	2300      	movs	r3, #0
    a1b8:	602b      	str	r3, [r5, #0]
    a1ba:	89b3      	ldrh	r3, [r6, #12]
    a1bc:	061b      	lsls	r3, r3, #24
    a1be:	d411      	bmi.n	a1e4 <__swhatbuf_r+0x40>
    a1c0:	2380      	movs	r3, #128	; 0x80
    a1c2:	00db      	lsls	r3, r3, #3
    a1c4:	e00f      	b.n	a1e6 <__swhatbuf_r+0x42>
    a1c6:	aa01      	add	r2, sp, #4
    a1c8:	f000 fd2e 	bl	ac28 <_fstat_r>
    a1cc:	2800      	cmp	r0, #0
    a1ce:	dbf2      	blt.n	a1b6 <__swhatbuf_r+0x12>
    a1d0:	22f0      	movs	r2, #240	; 0xf0
    a1d2:	9b02      	ldr	r3, [sp, #8]
    a1d4:	0212      	lsls	r2, r2, #8
    a1d6:	4013      	ands	r3, r2
    a1d8:	4a05      	ldr	r2, [pc, #20]	; (a1f0 <__swhatbuf_r+0x4c>)
    a1da:	189b      	adds	r3, r3, r2
    a1dc:	425a      	negs	r2, r3
    a1de:	4153      	adcs	r3, r2
    a1e0:	602b      	str	r3, [r5, #0]
    a1e2:	e7ed      	b.n	a1c0 <__swhatbuf_r+0x1c>
    a1e4:	2340      	movs	r3, #64	; 0x40
    a1e6:	2000      	movs	r0, #0
    a1e8:	6023      	str	r3, [r4, #0]
    a1ea:	b010      	add	sp, #64	; 0x40
    a1ec:	bd70      	pop	{r4, r5, r6, pc}
    a1ee:	46c0      	nop			; (mov r8, r8)
    a1f0:	ffffe000 	.word	0xffffe000

0000a1f4 <__smakebuf_r>:
    a1f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a1f6:	2602      	movs	r6, #2
    a1f8:	898b      	ldrh	r3, [r1, #12]
    a1fa:	0005      	movs	r5, r0
    a1fc:	000c      	movs	r4, r1
    a1fe:	4233      	tst	r3, r6
    a200:	d006      	beq.n	a210 <__smakebuf_r+0x1c>
    a202:	0023      	movs	r3, r4
    a204:	3347      	adds	r3, #71	; 0x47
    a206:	6023      	str	r3, [r4, #0]
    a208:	6123      	str	r3, [r4, #16]
    a20a:	2301      	movs	r3, #1
    a20c:	6163      	str	r3, [r4, #20]
    a20e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    a210:	ab01      	add	r3, sp, #4
    a212:	466a      	mov	r2, sp
    a214:	f7ff ffc6 	bl	a1a4 <__swhatbuf_r>
    a218:	9900      	ldr	r1, [sp, #0]
    a21a:	0007      	movs	r7, r0
    a21c:	0028      	movs	r0, r5
    a21e:	f7ff fb5d 	bl	98dc <_malloc_r>
    a222:	2800      	cmp	r0, #0
    a224:	d106      	bne.n	a234 <__smakebuf_r+0x40>
    a226:	220c      	movs	r2, #12
    a228:	5ea3      	ldrsh	r3, [r4, r2]
    a22a:	059a      	lsls	r2, r3, #22
    a22c:	d4ef      	bmi.n	a20e <__smakebuf_r+0x1a>
    a22e:	431e      	orrs	r6, r3
    a230:	81a6      	strh	r6, [r4, #12]
    a232:	e7e6      	b.n	a202 <__smakebuf_r+0xe>
    a234:	4b0d      	ldr	r3, [pc, #52]	; (a26c <__smakebuf_r+0x78>)
    a236:	62ab      	str	r3, [r5, #40]	; 0x28
    a238:	2380      	movs	r3, #128	; 0x80
    a23a:	89a2      	ldrh	r2, [r4, #12]
    a23c:	6020      	str	r0, [r4, #0]
    a23e:	4313      	orrs	r3, r2
    a240:	81a3      	strh	r3, [r4, #12]
    a242:	9b00      	ldr	r3, [sp, #0]
    a244:	6120      	str	r0, [r4, #16]
    a246:	6163      	str	r3, [r4, #20]
    a248:	9b01      	ldr	r3, [sp, #4]
    a24a:	2b00      	cmp	r3, #0
    a24c:	d00a      	beq.n	a264 <__smakebuf_r+0x70>
    a24e:	230e      	movs	r3, #14
    a250:	5ee1      	ldrsh	r1, [r4, r3]
    a252:	0028      	movs	r0, r5
    a254:	f000 fcfa 	bl	ac4c <_isatty_r>
    a258:	2800      	cmp	r0, #0
    a25a:	d003      	beq.n	a264 <__smakebuf_r+0x70>
    a25c:	2301      	movs	r3, #1
    a25e:	89a2      	ldrh	r2, [r4, #12]
    a260:	4313      	orrs	r3, r2
    a262:	81a3      	strh	r3, [r4, #12]
    a264:	89a0      	ldrh	r0, [r4, #12]
    a266:	4338      	orrs	r0, r7
    a268:	81a0      	strh	r0, [r4, #12]
    a26a:	e7d0      	b.n	a20e <__smakebuf_r+0x1a>
    a26c:	00009ff5 	.word	0x00009ff5

0000a270 <__malloc_lock>:
    a270:	4770      	bx	lr

0000a272 <__malloc_unlock>:
    a272:	4770      	bx	lr

0000a274 <__ssputs_r>:
    a274:	b5f0      	push	{r4, r5, r6, r7, lr}
    a276:	688e      	ldr	r6, [r1, #8]
    a278:	b085      	sub	sp, #20
    a27a:	0007      	movs	r7, r0
    a27c:	000c      	movs	r4, r1
    a27e:	9203      	str	r2, [sp, #12]
    a280:	9301      	str	r3, [sp, #4]
    a282:	429e      	cmp	r6, r3
    a284:	d839      	bhi.n	a2fa <__ssputs_r+0x86>
    a286:	2390      	movs	r3, #144	; 0x90
    a288:	898a      	ldrh	r2, [r1, #12]
    a28a:	00db      	lsls	r3, r3, #3
    a28c:	421a      	tst	r2, r3
    a28e:	d034      	beq.n	a2fa <__ssputs_r+0x86>
    a290:	2503      	movs	r5, #3
    a292:	6909      	ldr	r1, [r1, #16]
    a294:	6823      	ldr	r3, [r4, #0]
    a296:	1a5b      	subs	r3, r3, r1
    a298:	9302      	str	r3, [sp, #8]
    a29a:	6963      	ldr	r3, [r4, #20]
    a29c:	9802      	ldr	r0, [sp, #8]
    a29e:	435d      	muls	r5, r3
    a2a0:	0feb      	lsrs	r3, r5, #31
    a2a2:	195d      	adds	r5, r3, r5
    a2a4:	9b01      	ldr	r3, [sp, #4]
    a2a6:	106d      	asrs	r5, r5, #1
    a2a8:	3301      	adds	r3, #1
    a2aa:	181b      	adds	r3, r3, r0
    a2ac:	42ab      	cmp	r3, r5
    a2ae:	d900      	bls.n	a2b2 <__ssputs_r+0x3e>
    a2b0:	001d      	movs	r5, r3
    a2b2:	0553      	lsls	r3, r2, #21
    a2b4:	d532      	bpl.n	a31c <__ssputs_r+0xa8>
    a2b6:	0029      	movs	r1, r5
    a2b8:	0038      	movs	r0, r7
    a2ba:	f7ff fb0f 	bl	98dc <_malloc_r>
    a2be:	1e06      	subs	r6, r0, #0
    a2c0:	d109      	bne.n	a2d6 <__ssputs_r+0x62>
    a2c2:	230c      	movs	r3, #12
    a2c4:	603b      	str	r3, [r7, #0]
    a2c6:	2340      	movs	r3, #64	; 0x40
    a2c8:	2001      	movs	r0, #1
    a2ca:	89a2      	ldrh	r2, [r4, #12]
    a2cc:	4240      	negs	r0, r0
    a2ce:	4313      	orrs	r3, r2
    a2d0:	81a3      	strh	r3, [r4, #12]
    a2d2:	b005      	add	sp, #20
    a2d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a2d6:	9a02      	ldr	r2, [sp, #8]
    a2d8:	6921      	ldr	r1, [r4, #16]
    a2da:	f7ff fa91 	bl	9800 <memcpy>
    a2de:	89a3      	ldrh	r3, [r4, #12]
    a2e0:	4a14      	ldr	r2, [pc, #80]	; (a334 <__ssputs_r+0xc0>)
    a2e2:	401a      	ands	r2, r3
    a2e4:	2380      	movs	r3, #128	; 0x80
    a2e6:	4313      	orrs	r3, r2
    a2e8:	81a3      	strh	r3, [r4, #12]
    a2ea:	9b02      	ldr	r3, [sp, #8]
    a2ec:	6126      	str	r6, [r4, #16]
    a2ee:	18f6      	adds	r6, r6, r3
    a2f0:	6026      	str	r6, [r4, #0]
    a2f2:	6165      	str	r5, [r4, #20]
    a2f4:	9e01      	ldr	r6, [sp, #4]
    a2f6:	1aed      	subs	r5, r5, r3
    a2f8:	60a5      	str	r5, [r4, #8]
    a2fa:	9b01      	ldr	r3, [sp, #4]
    a2fc:	42b3      	cmp	r3, r6
    a2fe:	d200      	bcs.n	a302 <__ssputs_r+0x8e>
    a300:	001e      	movs	r6, r3
    a302:	0032      	movs	r2, r6
    a304:	9903      	ldr	r1, [sp, #12]
    a306:	6820      	ldr	r0, [r4, #0]
    a308:	f7ff fa83 	bl	9812 <memmove>
    a30c:	68a3      	ldr	r3, [r4, #8]
    a30e:	2000      	movs	r0, #0
    a310:	1b9b      	subs	r3, r3, r6
    a312:	60a3      	str	r3, [r4, #8]
    a314:	6823      	ldr	r3, [r4, #0]
    a316:	199e      	adds	r6, r3, r6
    a318:	6026      	str	r6, [r4, #0]
    a31a:	e7da      	b.n	a2d2 <__ssputs_r+0x5e>
    a31c:	002a      	movs	r2, r5
    a31e:	0038      	movs	r0, r7
    a320:	f000 fcc5 	bl	acae <_realloc_r>
    a324:	1e06      	subs	r6, r0, #0
    a326:	d1e0      	bne.n	a2ea <__ssputs_r+0x76>
    a328:	6921      	ldr	r1, [r4, #16]
    a32a:	0038      	movs	r0, r7
    a32c:	f7ff fa8c 	bl	9848 <_free_r>
    a330:	e7c7      	b.n	a2c2 <__ssputs_r+0x4e>
    a332:	46c0      	nop			; (mov r8, r8)
    a334:	fffffb7f 	.word	0xfffffb7f

0000a338 <_svfiprintf_r>:
    a338:	b5f0      	push	{r4, r5, r6, r7, lr}
    a33a:	b09f      	sub	sp, #124	; 0x7c
    a33c:	9002      	str	r0, [sp, #8]
    a33e:	9305      	str	r3, [sp, #20]
    a340:	898b      	ldrh	r3, [r1, #12]
    a342:	000f      	movs	r7, r1
    a344:	0016      	movs	r6, r2
    a346:	061b      	lsls	r3, r3, #24
    a348:	d511      	bpl.n	a36e <_svfiprintf_r+0x36>
    a34a:	690b      	ldr	r3, [r1, #16]
    a34c:	2b00      	cmp	r3, #0
    a34e:	d10e      	bne.n	a36e <_svfiprintf_r+0x36>
    a350:	2140      	movs	r1, #64	; 0x40
    a352:	f7ff fac3 	bl	98dc <_malloc_r>
    a356:	6038      	str	r0, [r7, #0]
    a358:	6138      	str	r0, [r7, #16]
    a35a:	2800      	cmp	r0, #0
    a35c:	d105      	bne.n	a36a <_svfiprintf_r+0x32>
    a35e:	230c      	movs	r3, #12
    a360:	9a02      	ldr	r2, [sp, #8]
    a362:	3801      	subs	r0, #1
    a364:	6013      	str	r3, [r2, #0]
    a366:	b01f      	add	sp, #124	; 0x7c
    a368:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a36a:	2340      	movs	r3, #64	; 0x40
    a36c:	617b      	str	r3, [r7, #20]
    a36e:	2300      	movs	r3, #0
    a370:	ad06      	add	r5, sp, #24
    a372:	616b      	str	r3, [r5, #20]
    a374:	3320      	adds	r3, #32
    a376:	766b      	strb	r3, [r5, #25]
    a378:	3310      	adds	r3, #16
    a37a:	76ab      	strb	r3, [r5, #26]
    a37c:	0034      	movs	r4, r6
    a37e:	7823      	ldrb	r3, [r4, #0]
    a380:	2b00      	cmp	r3, #0
    a382:	d147      	bne.n	a414 <_svfiprintf_r+0xdc>
    a384:	1ba3      	subs	r3, r4, r6
    a386:	9304      	str	r3, [sp, #16]
    a388:	d00d      	beq.n	a3a6 <_svfiprintf_r+0x6e>
    a38a:	1ba3      	subs	r3, r4, r6
    a38c:	0032      	movs	r2, r6
    a38e:	0039      	movs	r1, r7
    a390:	9802      	ldr	r0, [sp, #8]
    a392:	f7ff ff6f 	bl	a274 <__ssputs_r>
    a396:	1c43      	adds	r3, r0, #1
    a398:	d100      	bne.n	a39c <_svfiprintf_r+0x64>
    a39a:	e0b5      	b.n	a508 <_svfiprintf_r+0x1d0>
    a39c:	696a      	ldr	r2, [r5, #20]
    a39e:	9b04      	ldr	r3, [sp, #16]
    a3a0:	4694      	mov	ip, r2
    a3a2:	4463      	add	r3, ip
    a3a4:	616b      	str	r3, [r5, #20]
    a3a6:	7823      	ldrb	r3, [r4, #0]
    a3a8:	2b00      	cmp	r3, #0
    a3aa:	d100      	bne.n	a3ae <_svfiprintf_r+0x76>
    a3ac:	e0ac      	b.n	a508 <_svfiprintf_r+0x1d0>
    a3ae:	2201      	movs	r2, #1
    a3b0:	2300      	movs	r3, #0
    a3b2:	4252      	negs	r2, r2
    a3b4:	606a      	str	r2, [r5, #4]
    a3b6:	a902      	add	r1, sp, #8
    a3b8:	3254      	adds	r2, #84	; 0x54
    a3ba:	1852      	adds	r2, r2, r1
    a3bc:	3401      	adds	r4, #1
    a3be:	602b      	str	r3, [r5, #0]
    a3c0:	60eb      	str	r3, [r5, #12]
    a3c2:	60ab      	str	r3, [r5, #8]
    a3c4:	7013      	strb	r3, [r2, #0]
    a3c6:	65ab      	str	r3, [r5, #88]	; 0x58
    a3c8:	4e58      	ldr	r6, [pc, #352]	; (a52c <_svfiprintf_r+0x1f4>)
    a3ca:	2205      	movs	r2, #5
    a3cc:	7821      	ldrb	r1, [r4, #0]
    a3ce:	0030      	movs	r0, r6
    a3d0:	f000 fc62 	bl	ac98 <memchr>
    a3d4:	1c62      	adds	r2, r4, #1
    a3d6:	2800      	cmp	r0, #0
    a3d8:	d120      	bne.n	a41c <_svfiprintf_r+0xe4>
    a3da:	6829      	ldr	r1, [r5, #0]
    a3dc:	06cb      	lsls	r3, r1, #27
    a3de:	d504      	bpl.n	a3ea <_svfiprintf_r+0xb2>
    a3e0:	2353      	movs	r3, #83	; 0x53
    a3e2:	ae02      	add	r6, sp, #8
    a3e4:	3020      	adds	r0, #32
    a3e6:	199b      	adds	r3, r3, r6
    a3e8:	7018      	strb	r0, [r3, #0]
    a3ea:	070b      	lsls	r3, r1, #28
    a3ec:	d504      	bpl.n	a3f8 <_svfiprintf_r+0xc0>
    a3ee:	2353      	movs	r3, #83	; 0x53
    a3f0:	202b      	movs	r0, #43	; 0x2b
    a3f2:	ae02      	add	r6, sp, #8
    a3f4:	199b      	adds	r3, r3, r6
    a3f6:	7018      	strb	r0, [r3, #0]
    a3f8:	7823      	ldrb	r3, [r4, #0]
    a3fa:	2b2a      	cmp	r3, #42	; 0x2a
    a3fc:	d016      	beq.n	a42c <_svfiprintf_r+0xf4>
    a3fe:	2000      	movs	r0, #0
    a400:	210a      	movs	r1, #10
    a402:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a404:	7822      	ldrb	r2, [r4, #0]
    a406:	3a30      	subs	r2, #48	; 0x30
    a408:	2a09      	cmp	r2, #9
    a40a:	d955      	bls.n	a4b8 <_svfiprintf_r+0x180>
    a40c:	2800      	cmp	r0, #0
    a40e:	d015      	beq.n	a43c <_svfiprintf_r+0x104>
    a410:	9309      	str	r3, [sp, #36]	; 0x24
    a412:	e013      	b.n	a43c <_svfiprintf_r+0x104>
    a414:	2b25      	cmp	r3, #37	; 0x25
    a416:	d0b5      	beq.n	a384 <_svfiprintf_r+0x4c>
    a418:	3401      	adds	r4, #1
    a41a:	e7b0      	b.n	a37e <_svfiprintf_r+0x46>
    a41c:	2301      	movs	r3, #1
    a41e:	1b80      	subs	r0, r0, r6
    a420:	4083      	lsls	r3, r0
    a422:	6829      	ldr	r1, [r5, #0]
    a424:	0014      	movs	r4, r2
    a426:	430b      	orrs	r3, r1
    a428:	602b      	str	r3, [r5, #0]
    a42a:	e7cd      	b.n	a3c8 <_svfiprintf_r+0x90>
    a42c:	9b05      	ldr	r3, [sp, #20]
    a42e:	1d18      	adds	r0, r3, #4
    a430:	681b      	ldr	r3, [r3, #0]
    a432:	9005      	str	r0, [sp, #20]
    a434:	2b00      	cmp	r3, #0
    a436:	db39      	blt.n	a4ac <_svfiprintf_r+0x174>
    a438:	9309      	str	r3, [sp, #36]	; 0x24
    a43a:	0014      	movs	r4, r2
    a43c:	7823      	ldrb	r3, [r4, #0]
    a43e:	2b2e      	cmp	r3, #46	; 0x2e
    a440:	d10b      	bne.n	a45a <_svfiprintf_r+0x122>
    a442:	7863      	ldrb	r3, [r4, #1]
    a444:	1c62      	adds	r2, r4, #1
    a446:	2b2a      	cmp	r3, #42	; 0x2a
    a448:	d13e      	bne.n	a4c8 <_svfiprintf_r+0x190>
    a44a:	9b05      	ldr	r3, [sp, #20]
    a44c:	3402      	adds	r4, #2
    a44e:	1d1a      	adds	r2, r3, #4
    a450:	681b      	ldr	r3, [r3, #0]
    a452:	9205      	str	r2, [sp, #20]
    a454:	2b00      	cmp	r3, #0
    a456:	db34      	blt.n	a4c2 <_svfiprintf_r+0x18a>
    a458:	9307      	str	r3, [sp, #28]
    a45a:	4e35      	ldr	r6, [pc, #212]	; (a530 <_svfiprintf_r+0x1f8>)
    a45c:	7821      	ldrb	r1, [r4, #0]
    a45e:	2203      	movs	r2, #3
    a460:	0030      	movs	r0, r6
    a462:	f000 fc19 	bl	ac98 <memchr>
    a466:	2800      	cmp	r0, #0
    a468:	d006      	beq.n	a478 <_svfiprintf_r+0x140>
    a46a:	2340      	movs	r3, #64	; 0x40
    a46c:	1b80      	subs	r0, r0, r6
    a46e:	4083      	lsls	r3, r0
    a470:	682a      	ldr	r2, [r5, #0]
    a472:	3401      	adds	r4, #1
    a474:	4313      	orrs	r3, r2
    a476:	602b      	str	r3, [r5, #0]
    a478:	7821      	ldrb	r1, [r4, #0]
    a47a:	2206      	movs	r2, #6
    a47c:	482d      	ldr	r0, [pc, #180]	; (a534 <_svfiprintf_r+0x1fc>)
    a47e:	1c66      	adds	r6, r4, #1
    a480:	7629      	strb	r1, [r5, #24]
    a482:	f000 fc09 	bl	ac98 <memchr>
    a486:	2800      	cmp	r0, #0
    a488:	d046      	beq.n	a518 <_svfiprintf_r+0x1e0>
    a48a:	4b2b      	ldr	r3, [pc, #172]	; (a538 <_svfiprintf_r+0x200>)
    a48c:	2b00      	cmp	r3, #0
    a48e:	d12f      	bne.n	a4f0 <_svfiprintf_r+0x1b8>
    a490:	6829      	ldr	r1, [r5, #0]
    a492:	9b05      	ldr	r3, [sp, #20]
    a494:	2207      	movs	r2, #7
    a496:	05c9      	lsls	r1, r1, #23
    a498:	d528      	bpl.n	a4ec <_svfiprintf_r+0x1b4>
    a49a:	189b      	adds	r3, r3, r2
    a49c:	4393      	bics	r3, r2
    a49e:	3308      	adds	r3, #8
    a4a0:	9305      	str	r3, [sp, #20]
    a4a2:	696b      	ldr	r3, [r5, #20]
    a4a4:	9a03      	ldr	r2, [sp, #12]
    a4a6:	189b      	adds	r3, r3, r2
    a4a8:	616b      	str	r3, [r5, #20]
    a4aa:	e767      	b.n	a37c <_svfiprintf_r+0x44>
    a4ac:	425b      	negs	r3, r3
    a4ae:	60eb      	str	r3, [r5, #12]
    a4b0:	2302      	movs	r3, #2
    a4b2:	430b      	orrs	r3, r1
    a4b4:	602b      	str	r3, [r5, #0]
    a4b6:	e7c0      	b.n	a43a <_svfiprintf_r+0x102>
    a4b8:	434b      	muls	r3, r1
    a4ba:	3401      	adds	r4, #1
    a4bc:	189b      	adds	r3, r3, r2
    a4be:	2001      	movs	r0, #1
    a4c0:	e7a0      	b.n	a404 <_svfiprintf_r+0xcc>
    a4c2:	2301      	movs	r3, #1
    a4c4:	425b      	negs	r3, r3
    a4c6:	e7c7      	b.n	a458 <_svfiprintf_r+0x120>
    a4c8:	2300      	movs	r3, #0
    a4ca:	0014      	movs	r4, r2
    a4cc:	200a      	movs	r0, #10
    a4ce:	001a      	movs	r2, r3
    a4d0:	606b      	str	r3, [r5, #4]
    a4d2:	7821      	ldrb	r1, [r4, #0]
    a4d4:	3930      	subs	r1, #48	; 0x30
    a4d6:	2909      	cmp	r1, #9
    a4d8:	d903      	bls.n	a4e2 <_svfiprintf_r+0x1aa>
    a4da:	2b00      	cmp	r3, #0
    a4dc:	d0bd      	beq.n	a45a <_svfiprintf_r+0x122>
    a4de:	9207      	str	r2, [sp, #28]
    a4e0:	e7bb      	b.n	a45a <_svfiprintf_r+0x122>
    a4e2:	4342      	muls	r2, r0
    a4e4:	3401      	adds	r4, #1
    a4e6:	1852      	adds	r2, r2, r1
    a4e8:	2301      	movs	r3, #1
    a4ea:	e7f2      	b.n	a4d2 <_svfiprintf_r+0x19a>
    a4ec:	3307      	adds	r3, #7
    a4ee:	e7d5      	b.n	a49c <_svfiprintf_r+0x164>
    a4f0:	ab05      	add	r3, sp, #20
    a4f2:	9300      	str	r3, [sp, #0]
    a4f4:	003a      	movs	r2, r7
    a4f6:	4b11      	ldr	r3, [pc, #68]	; (a53c <_svfiprintf_r+0x204>)
    a4f8:	0029      	movs	r1, r5
    a4fa:	9802      	ldr	r0, [sp, #8]
    a4fc:	e000      	b.n	a500 <_svfiprintf_r+0x1c8>
    a4fe:	bf00      	nop
    a500:	9003      	str	r0, [sp, #12]
    a502:	9b03      	ldr	r3, [sp, #12]
    a504:	3301      	adds	r3, #1
    a506:	d1cc      	bne.n	a4a2 <_svfiprintf_r+0x16a>
    a508:	89bb      	ldrh	r3, [r7, #12]
    a50a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a50c:	065b      	lsls	r3, r3, #25
    a50e:	d400      	bmi.n	a512 <_svfiprintf_r+0x1da>
    a510:	e729      	b.n	a366 <_svfiprintf_r+0x2e>
    a512:	2001      	movs	r0, #1
    a514:	4240      	negs	r0, r0
    a516:	e726      	b.n	a366 <_svfiprintf_r+0x2e>
    a518:	ab05      	add	r3, sp, #20
    a51a:	9300      	str	r3, [sp, #0]
    a51c:	003a      	movs	r2, r7
    a51e:	4b07      	ldr	r3, [pc, #28]	; (a53c <_svfiprintf_r+0x204>)
    a520:	0029      	movs	r1, r5
    a522:	9802      	ldr	r0, [sp, #8]
    a524:	f000 f9be 	bl	a8a4 <_printf_i>
    a528:	e7ea      	b.n	a500 <_svfiprintf_r+0x1c8>
    a52a:	46c0      	nop			; (mov r8, r8)
    a52c:	0000c1a8 	.word	0x0000c1a8
    a530:	0000c1ae 	.word	0x0000c1ae
    a534:	0000c1b2 	.word	0x0000c1b2
    a538:	00000000 	.word	0x00000000
    a53c:	0000a275 	.word	0x0000a275

0000a540 <__sfputc_r>:
    a540:	6893      	ldr	r3, [r2, #8]
    a542:	b510      	push	{r4, lr}
    a544:	3b01      	subs	r3, #1
    a546:	6093      	str	r3, [r2, #8]
    a548:	2b00      	cmp	r3, #0
    a54a:	da05      	bge.n	a558 <__sfputc_r+0x18>
    a54c:	6994      	ldr	r4, [r2, #24]
    a54e:	42a3      	cmp	r3, r4
    a550:	db08      	blt.n	a564 <__sfputc_r+0x24>
    a552:	b2cb      	uxtb	r3, r1
    a554:	2b0a      	cmp	r3, #10
    a556:	d005      	beq.n	a564 <__sfputc_r+0x24>
    a558:	6813      	ldr	r3, [r2, #0]
    a55a:	1c58      	adds	r0, r3, #1
    a55c:	6010      	str	r0, [r2, #0]
    a55e:	7019      	strb	r1, [r3, #0]
    a560:	b2c8      	uxtb	r0, r1
    a562:	bd10      	pop	{r4, pc}
    a564:	f7ff fbc4 	bl	9cf0 <__swbuf_r>
    a568:	e7fb      	b.n	a562 <__sfputc_r+0x22>

0000a56a <__sfputs_r>:
    a56a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a56c:	0006      	movs	r6, r0
    a56e:	000f      	movs	r7, r1
    a570:	0014      	movs	r4, r2
    a572:	18d5      	adds	r5, r2, r3
    a574:	42ac      	cmp	r4, r5
    a576:	d101      	bne.n	a57c <__sfputs_r+0x12>
    a578:	2000      	movs	r0, #0
    a57a:	e007      	b.n	a58c <__sfputs_r+0x22>
    a57c:	7821      	ldrb	r1, [r4, #0]
    a57e:	003a      	movs	r2, r7
    a580:	0030      	movs	r0, r6
    a582:	f7ff ffdd 	bl	a540 <__sfputc_r>
    a586:	3401      	adds	r4, #1
    a588:	1c43      	adds	r3, r0, #1
    a58a:	d1f3      	bne.n	a574 <__sfputs_r+0xa>
    a58c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000a590 <_vfiprintf_r>:
    a590:	b5f0      	push	{r4, r5, r6, r7, lr}
    a592:	b09f      	sub	sp, #124	; 0x7c
    a594:	0006      	movs	r6, r0
    a596:	000f      	movs	r7, r1
    a598:	0014      	movs	r4, r2
    a59a:	9305      	str	r3, [sp, #20]
    a59c:	2800      	cmp	r0, #0
    a59e:	d004      	beq.n	a5aa <_vfiprintf_r+0x1a>
    a5a0:	6983      	ldr	r3, [r0, #24]
    a5a2:	2b00      	cmp	r3, #0
    a5a4:	d101      	bne.n	a5aa <_vfiprintf_r+0x1a>
    a5a6:	f7ff fd67 	bl	a078 <__sinit>
    a5aa:	4b7f      	ldr	r3, [pc, #508]	; (a7a8 <_vfiprintf_r+0x218>)
    a5ac:	429f      	cmp	r7, r3
    a5ae:	d15c      	bne.n	a66a <_vfiprintf_r+0xda>
    a5b0:	6877      	ldr	r7, [r6, #4]
    a5b2:	89bb      	ldrh	r3, [r7, #12]
    a5b4:	071b      	lsls	r3, r3, #28
    a5b6:	d562      	bpl.n	a67e <_vfiprintf_r+0xee>
    a5b8:	693b      	ldr	r3, [r7, #16]
    a5ba:	2b00      	cmp	r3, #0
    a5bc:	d05f      	beq.n	a67e <_vfiprintf_r+0xee>
    a5be:	2300      	movs	r3, #0
    a5c0:	ad06      	add	r5, sp, #24
    a5c2:	616b      	str	r3, [r5, #20]
    a5c4:	3320      	adds	r3, #32
    a5c6:	766b      	strb	r3, [r5, #25]
    a5c8:	3310      	adds	r3, #16
    a5ca:	76ab      	strb	r3, [r5, #26]
    a5cc:	9402      	str	r4, [sp, #8]
    a5ce:	9c02      	ldr	r4, [sp, #8]
    a5d0:	7823      	ldrb	r3, [r4, #0]
    a5d2:	2b00      	cmp	r3, #0
    a5d4:	d15d      	bne.n	a692 <_vfiprintf_r+0x102>
    a5d6:	9b02      	ldr	r3, [sp, #8]
    a5d8:	1ae3      	subs	r3, r4, r3
    a5da:	9304      	str	r3, [sp, #16]
    a5dc:	d00d      	beq.n	a5fa <_vfiprintf_r+0x6a>
    a5de:	9b04      	ldr	r3, [sp, #16]
    a5e0:	9a02      	ldr	r2, [sp, #8]
    a5e2:	0039      	movs	r1, r7
    a5e4:	0030      	movs	r0, r6
    a5e6:	f7ff ffc0 	bl	a56a <__sfputs_r>
    a5ea:	1c43      	adds	r3, r0, #1
    a5ec:	d100      	bne.n	a5f0 <_vfiprintf_r+0x60>
    a5ee:	e0cc      	b.n	a78a <_vfiprintf_r+0x1fa>
    a5f0:	696a      	ldr	r2, [r5, #20]
    a5f2:	9b04      	ldr	r3, [sp, #16]
    a5f4:	4694      	mov	ip, r2
    a5f6:	4463      	add	r3, ip
    a5f8:	616b      	str	r3, [r5, #20]
    a5fa:	7823      	ldrb	r3, [r4, #0]
    a5fc:	2b00      	cmp	r3, #0
    a5fe:	d100      	bne.n	a602 <_vfiprintf_r+0x72>
    a600:	e0c3      	b.n	a78a <_vfiprintf_r+0x1fa>
    a602:	2201      	movs	r2, #1
    a604:	2300      	movs	r3, #0
    a606:	4252      	negs	r2, r2
    a608:	606a      	str	r2, [r5, #4]
    a60a:	a902      	add	r1, sp, #8
    a60c:	3254      	adds	r2, #84	; 0x54
    a60e:	1852      	adds	r2, r2, r1
    a610:	3401      	adds	r4, #1
    a612:	602b      	str	r3, [r5, #0]
    a614:	60eb      	str	r3, [r5, #12]
    a616:	60ab      	str	r3, [r5, #8]
    a618:	7013      	strb	r3, [r2, #0]
    a61a:	65ab      	str	r3, [r5, #88]	; 0x58
    a61c:	7821      	ldrb	r1, [r4, #0]
    a61e:	2205      	movs	r2, #5
    a620:	4862      	ldr	r0, [pc, #392]	; (a7ac <_vfiprintf_r+0x21c>)
    a622:	f000 fb39 	bl	ac98 <memchr>
    a626:	1c63      	adds	r3, r4, #1
    a628:	469c      	mov	ip, r3
    a62a:	2800      	cmp	r0, #0
    a62c:	d135      	bne.n	a69a <_vfiprintf_r+0x10a>
    a62e:	6829      	ldr	r1, [r5, #0]
    a630:	06cb      	lsls	r3, r1, #27
    a632:	d504      	bpl.n	a63e <_vfiprintf_r+0xae>
    a634:	2353      	movs	r3, #83	; 0x53
    a636:	aa02      	add	r2, sp, #8
    a638:	3020      	adds	r0, #32
    a63a:	189b      	adds	r3, r3, r2
    a63c:	7018      	strb	r0, [r3, #0]
    a63e:	070b      	lsls	r3, r1, #28
    a640:	d504      	bpl.n	a64c <_vfiprintf_r+0xbc>
    a642:	2353      	movs	r3, #83	; 0x53
    a644:	202b      	movs	r0, #43	; 0x2b
    a646:	aa02      	add	r2, sp, #8
    a648:	189b      	adds	r3, r3, r2
    a64a:	7018      	strb	r0, [r3, #0]
    a64c:	7823      	ldrb	r3, [r4, #0]
    a64e:	2b2a      	cmp	r3, #42	; 0x2a
    a650:	d02c      	beq.n	a6ac <_vfiprintf_r+0x11c>
    a652:	2000      	movs	r0, #0
    a654:	210a      	movs	r1, #10
    a656:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a658:	7822      	ldrb	r2, [r4, #0]
    a65a:	3a30      	subs	r2, #48	; 0x30
    a65c:	2a09      	cmp	r2, #9
    a65e:	d800      	bhi.n	a662 <_vfiprintf_r+0xd2>
    a660:	e06b      	b.n	a73a <_vfiprintf_r+0x1aa>
    a662:	2800      	cmp	r0, #0
    a664:	d02a      	beq.n	a6bc <_vfiprintf_r+0x12c>
    a666:	9309      	str	r3, [sp, #36]	; 0x24
    a668:	e028      	b.n	a6bc <_vfiprintf_r+0x12c>
    a66a:	4b51      	ldr	r3, [pc, #324]	; (a7b0 <_vfiprintf_r+0x220>)
    a66c:	429f      	cmp	r7, r3
    a66e:	d101      	bne.n	a674 <_vfiprintf_r+0xe4>
    a670:	68b7      	ldr	r7, [r6, #8]
    a672:	e79e      	b.n	a5b2 <_vfiprintf_r+0x22>
    a674:	4b4f      	ldr	r3, [pc, #316]	; (a7b4 <_vfiprintf_r+0x224>)
    a676:	429f      	cmp	r7, r3
    a678:	d19b      	bne.n	a5b2 <_vfiprintf_r+0x22>
    a67a:	68f7      	ldr	r7, [r6, #12]
    a67c:	e799      	b.n	a5b2 <_vfiprintf_r+0x22>
    a67e:	0039      	movs	r1, r7
    a680:	0030      	movs	r0, r6
    a682:	f7ff fb8b 	bl	9d9c <__swsetup_r>
    a686:	2800      	cmp	r0, #0
    a688:	d099      	beq.n	a5be <_vfiprintf_r+0x2e>
    a68a:	2001      	movs	r0, #1
    a68c:	4240      	negs	r0, r0
    a68e:	b01f      	add	sp, #124	; 0x7c
    a690:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a692:	2b25      	cmp	r3, #37	; 0x25
    a694:	d09f      	beq.n	a5d6 <_vfiprintf_r+0x46>
    a696:	3401      	adds	r4, #1
    a698:	e79a      	b.n	a5d0 <_vfiprintf_r+0x40>
    a69a:	4b44      	ldr	r3, [pc, #272]	; (a7ac <_vfiprintf_r+0x21c>)
    a69c:	6829      	ldr	r1, [r5, #0]
    a69e:	1ac0      	subs	r0, r0, r3
    a6a0:	2301      	movs	r3, #1
    a6a2:	4083      	lsls	r3, r0
    a6a4:	430b      	orrs	r3, r1
    a6a6:	602b      	str	r3, [r5, #0]
    a6a8:	4664      	mov	r4, ip
    a6aa:	e7b7      	b.n	a61c <_vfiprintf_r+0x8c>
    a6ac:	9b05      	ldr	r3, [sp, #20]
    a6ae:	1d18      	adds	r0, r3, #4
    a6b0:	681b      	ldr	r3, [r3, #0]
    a6b2:	9005      	str	r0, [sp, #20]
    a6b4:	2b00      	cmp	r3, #0
    a6b6:	db3a      	blt.n	a72e <_vfiprintf_r+0x19e>
    a6b8:	9309      	str	r3, [sp, #36]	; 0x24
    a6ba:	4664      	mov	r4, ip
    a6bc:	7823      	ldrb	r3, [r4, #0]
    a6be:	2b2e      	cmp	r3, #46	; 0x2e
    a6c0:	d10b      	bne.n	a6da <_vfiprintf_r+0x14a>
    a6c2:	7863      	ldrb	r3, [r4, #1]
    a6c4:	1c62      	adds	r2, r4, #1
    a6c6:	2b2a      	cmp	r3, #42	; 0x2a
    a6c8:	d13f      	bne.n	a74a <_vfiprintf_r+0x1ba>
    a6ca:	9b05      	ldr	r3, [sp, #20]
    a6cc:	3402      	adds	r4, #2
    a6ce:	1d1a      	adds	r2, r3, #4
    a6d0:	681b      	ldr	r3, [r3, #0]
    a6d2:	9205      	str	r2, [sp, #20]
    a6d4:	2b00      	cmp	r3, #0
    a6d6:	db35      	blt.n	a744 <_vfiprintf_r+0x1b4>
    a6d8:	9307      	str	r3, [sp, #28]
    a6da:	7821      	ldrb	r1, [r4, #0]
    a6dc:	2203      	movs	r2, #3
    a6de:	4836      	ldr	r0, [pc, #216]	; (a7b8 <_vfiprintf_r+0x228>)
    a6e0:	f000 fada 	bl	ac98 <memchr>
    a6e4:	2800      	cmp	r0, #0
    a6e6:	d007      	beq.n	a6f8 <_vfiprintf_r+0x168>
    a6e8:	4b33      	ldr	r3, [pc, #204]	; (a7b8 <_vfiprintf_r+0x228>)
    a6ea:	682a      	ldr	r2, [r5, #0]
    a6ec:	1ac0      	subs	r0, r0, r3
    a6ee:	2340      	movs	r3, #64	; 0x40
    a6f0:	4083      	lsls	r3, r0
    a6f2:	4313      	orrs	r3, r2
    a6f4:	602b      	str	r3, [r5, #0]
    a6f6:	3401      	adds	r4, #1
    a6f8:	7821      	ldrb	r1, [r4, #0]
    a6fa:	1c63      	adds	r3, r4, #1
    a6fc:	2206      	movs	r2, #6
    a6fe:	482f      	ldr	r0, [pc, #188]	; (a7bc <_vfiprintf_r+0x22c>)
    a700:	9302      	str	r3, [sp, #8]
    a702:	7629      	strb	r1, [r5, #24]
    a704:	f000 fac8 	bl	ac98 <memchr>
    a708:	2800      	cmp	r0, #0
    a70a:	d044      	beq.n	a796 <_vfiprintf_r+0x206>
    a70c:	4b2c      	ldr	r3, [pc, #176]	; (a7c0 <_vfiprintf_r+0x230>)
    a70e:	2b00      	cmp	r3, #0
    a710:	d12f      	bne.n	a772 <_vfiprintf_r+0x1e2>
    a712:	6829      	ldr	r1, [r5, #0]
    a714:	9b05      	ldr	r3, [sp, #20]
    a716:	2207      	movs	r2, #7
    a718:	05c9      	lsls	r1, r1, #23
    a71a:	d528      	bpl.n	a76e <_vfiprintf_r+0x1de>
    a71c:	189b      	adds	r3, r3, r2
    a71e:	4393      	bics	r3, r2
    a720:	3308      	adds	r3, #8
    a722:	9305      	str	r3, [sp, #20]
    a724:	696b      	ldr	r3, [r5, #20]
    a726:	9a03      	ldr	r2, [sp, #12]
    a728:	189b      	adds	r3, r3, r2
    a72a:	616b      	str	r3, [r5, #20]
    a72c:	e74f      	b.n	a5ce <_vfiprintf_r+0x3e>
    a72e:	425b      	negs	r3, r3
    a730:	60eb      	str	r3, [r5, #12]
    a732:	2302      	movs	r3, #2
    a734:	430b      	orrs	r3, r1
    a736:	602b      	str	r3, [r5, #0]
    a738:	e7bf      	b.n	a6ba <_vfiprintf_r+0x12a>
    a73a:	434b      	muls	r3, r1
    a73c:	3401      	adds	r4, #1
    a73e:	189b      	adds	r3, r3, r2
    a740:	2001      	movs	r0, #1
    a742:	e789      	b.n	a658 <_vfiprintf_r+0xc8>
    a744:	2301      	movs	r3, #1
    a746:	425b      	negs	r3, r3
    a748:	e7c6      	b.n	a6d8 <_vfiprintf_r+0x148>
    a74a:	2300      	movs	r3, #0
    a74c:	0014      	movs	r4, r2
    a74e:	200a      	movs	r0, #10
    a750:	001a      	movs	r2, r3
    a752:	606b      	str	r3, [r5, #4]
    a754:	7821      	ldrb	r1, [r4, #0]
    a756:	3930      	subs	r1, #48	; 0x30
    a758:	2909      	cmp	r1, #9
    a75a:	d903      	bls.n	a764 <_vfiprintf_r+0x1d4>
    a75c:	2b00      	cmp	r3, #0
    a75e:	d0bc      	beq.n	a6da <_vfiprintf_r+0x14a>
    a760:	9207      	str	r2, [sp, #28]
    a762:	e7ba      	b.n	a6da <_vfiprintf_r+0x14a>
    a764:	4342      	muls	r2, r0
    a766:	3401      	adds	r4, #1
    a768:	1852      	adds	r2, r2, r1
    a76a:	2301      	movs	r3, #1
    a76c:	e7f2      	b.n	a754 <_vfiprintf_r+0x1c4>
    a76e:	3307      	adds	r3, #7
    a770:	e7d5      	b.n	a71e <_vfiprintf_r+0x18e>
    a772:	ab05      	add	r3, sp, #20
    a774:	9300      	str	r3, [sp, #0]
    a776:	003a      	movs	r2, r7
    a778:	4b12      	ldr	r3, [pc, #72]	; (a7c4 <_vfiprintf_r+0x234>)
    a77a:	0029      	movs	r1, r5
    a77c:	0030      	movs	r0, r6
    a77e:	e000      	b.n	a782 <_vfiprintf_r+0x1f2>
    a780:	bf00      	nop
    a782:	9003      	str	r0, [sp, #12]
    a784:	9b03      	ldr	r3, [sp, #12]
    a786:	3301      	adds	r3, #1
    a788:	d1cc      	bne.n	a724 <_vfiprintf_r+0x194>
    a78a:	89bb      	ldrh	r3, [r7, #12]
    a78c:	065b      	lsls	r3, r3, #25
    a78e:	d500      	bpl.n	a792 <_vfiprintf_r+0x202>
    a790:	e77b      	b.n	a68a <_vfiprintf_r+0xfa>
    a792:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a794:	e77b      	b.n	a68e <_vfiprintf_r+0xfe>
    a796:	ab05      	add	r3, sp, #20
    a798:	9300      	str	r3, [sp, #0]
    a79a:	003a      	movs	r2, r7
    a79c:	4b09      	ldr	r3, [pc, #36]	; (a7c4 <_vfiprintf_r+0x234>)
    a79e:	0029      	movs	r1, r5
    a7a0:	0030      	movs	r0, r6
    a7a2:	f000 f87f 	bl	a8a4 <_printf_i>
    a7a6:	e7ec      	b.n	a782 <_vfiprintf_r+0x1f2>
    a7a8:	0000c168 	.word	0x0000c168
    a7ac:	0000c1a8 	.word	0x0000c1a8
    a7b0:	0000c188 	.word	0x0000c188
    a7b4:	0000c148 	.word	0x0000c148
    a7b8:	0000c1ae 	.word	0x0000c1ae
    a7bc:	0000c1b2 	.word	0x0000c1b2
    a7c0:	00000000 	.word	0x00000000
    a7c4:	0000a56b 	.word	0x0000a56b

0000a7c8 <_printf_common>:
    a7c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a7ca:	0015      	movs	r5, r2
    a7cc:	9301      	str	r3, [sp, #4]
    a7ce:	688a      	ldr	r2, [r1, #8]
    a7d0:	690b      	ldr	r3, [r1, #16]
    a7d2:	9000      	str	r0, [sp, #0]
    a7d4:	000c      	movs	r4, r1
    a7d6:	4293      	cmp	r3, r2
    a7d8:	da00      	bge.n	a7dc <_printf_common+0x14>
    a7da:	0013      	movs	r3, r2
    a7dc:	0022      	movs	r2, r4
    a7de:	602b      	str	r3, [r5, #0]
    a7e0:	3243      	adds	r2, #67	; 0x43
    a7e2:	7812      	ldrb	r2, [r2, #0]
    a7e4:	2a00      	cmp	r2, #0
    a7e6:	d001      	beq.n	a7ec <_printf_common+0x24>
    a7e8:	3301      	adds	r3, #1
    a7ea:	602b      	str	r3, [r5, #0]
    a7ec:	6823      	ldr	r3, [r4, #0]
    a7ee:	069b      	lsls	r3, r3, #26
    a7f0:	d502      	bpl.n	a7f8 <_printf_common+0x30>
    a7f2:	682b      	ldr	r3, [r5, #0]
    a7f4:	3302      	adds	r3, #2
    a7f6:	602b      	str	r3, [r5, #0]
    a7f8:	2706      	movs	r7, #6
    a7fa:	6823      	ldr	r3, [r4, #0]
    a7fc:	401f      	ands	r7, r3
    a7fe:	d027      	beq.n	a850 <_printf_common+0x88>
    a800:	0023      	movs	r3, r4
    a802:	3343      	adds	r3, #67	; 0x43
    a804:	781b      	ldrb	r3, [r3, #0]
    a806:	1e5a      	subs	r2, r3, #1
    a808:	4193      	sbcs	r3, r2
    a80a:	6822      	ldr	r2, [r4, #0]
    a80c:	0692      	lsls	r2, r2, #26
    a80e:	d430      	bmi.n	a872 <_printf_common+0xaa>
    a810:	0022      	movs	r2, r4
    a812:	9901      	ldr	r1, [sp, #4]
    a814:	3243      	adds	r2, #67	; 0x43
    a816:	9800      	ldr	r0, [sp, #0]
    a818:	9e08      	ldr	r6, [sp, #32]
    a81a:	47b0      	blx	r6
    a81c:	1c43      	adds	r3, r0, #1
    a81e:	d025      	beq.n	a86c <_printf_common+0xa4>
    a820:	2306      	movs	r3, #6
    a822:	6820      	ldr	r0, [r4, #0]
    a824:	682a      	ldr	r2, [r5, #0]
    a826:	68e1      	ldr	r1, [r4, #12]
    a828:	4003      	ands	r3, r0
    a82a:	2500      	movs	r5, #0
    a82c:	2b04      	cmp	r3, #4
    a82e:	d103      	bne.n	a838 <_printf_common+0x70>
    a830:	1a8d      	subs	r5, r1, r2
    a832:	43eb      	mvns	r3, r5
    a834:	17db      	asrs	r3, r3, #31
    a836:	401d      	ands	r5, r3
    a838:	68a3      	ldr	r3, [r4, #8]
    a83a:	6922      	ldr	r2, [r4, #16]
    a83c:	4293      	cmp	r3, r2
    a83e:	dd01      	ble.n	a844 <_printf_common+0x7c>
    a840:	1a9b      	subs	r3, r3, r2
    a842:	18ed      	adds	r5, r5, r3
    a844:	2700      	movs	r7, #0
    a846:	42bd      	cmp	r5, r7
    a848:	d120      	bne.n	a88c <_printf_common+0xc4>
    a84a:	2000      	movs	r0, #0
    a84c:	e010      	b.n	a870 <_printf_common+0xa8>
    a84e:	3701      	adds	r7, #1
    a850:	68e3      	ldr	r3, [r4, #12]
    a852:	682a      	ldr	r2, [r5, #0]
    a854:	1a9b      	subs	r3, r3, r2
    a856:	429f      	cmp	r7, r3
    a858:	dad2      	bge.n	a800 <_printf_common+0x38>
    a85a:	0022      	movs	r2, r4
    a85c:	2301      	movs	r3, #1
    a85e:	3219      	adds	r2, #25
    a860:	9901      	ldr	r1, [sp, #4]
    a862:	9800      	ldr	r0, [sp, #0]
    a864:	9e08      	ldr	r6, [sp, #32]
    a866:	47b0      	blx	r6
    a868:	1c43      	adds	r3, r0, #1
    a86a:	d1f0      	bne.n	a84e <_printf_common+0x86>
    a86c:	2001      	movs	r0, #1
    a86e:	4240      	negs	r0, r0
    a870:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    a872:	2030      	movs	r0, #48	; 0x30
    a874:	18e1      	adds	r1, r4, r3
    a876:	3143      	adds	r1, #67	; 0x43
    a878:	7008      	strb	r0, [r1, #0]
    a87a:	0021      	movs	r1, r4
    a87c:	1c5a      	adds	r2, r3, #1
    a87e:	3145      	adds	r1, #69	; 0x45
    a880:	7809      	ldrb	r1, [r1, #0]
    a882:	18a2      	adds	r2, r4, r2
    a884:	3243      	adds	r2, #67	; 0x43
    a886:	3302      	adds	r3, #2
    a888:	7011      	strb	r1, [r2, #0]
    a88a:	e7c1      	b.n	a810 <_printf_common+0x48>
    a88c:	0022      	movs	r2, r4
    a88e:	2301      	movs	r3, #1
    a890:	321a      	adds	r2, #26
    a892:	9901      	ldr	r1, [sp, #4]
    a894:	9800      	ldr	r0, [sp, #0]
    a896:	9e08      	ldr	r6, [sp, #32]
    a898:	47b0      	blx	r6
    a89a:	1c43      	adds	r3, r0, #1
    a89c:	d0e6      	beq.n	a86c <_printf_common+0xa4>
    a89e:	3701      	adds	r7, #1
    a8a0:	e7d1      	b.n	a846 <_printf_common+0x7e>
	...

0000a8a4 <_printf_i>:
    a8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a8a6:	b08b      	sub	sp, #44	; 0x2c
    a8a8:	9206      	str	r2, [sp, #24]
    a8aa:	000a      	movs	r2, r1
    a8ac:	3243      	adds	r2, #67	; 0x43
    a8ae:	9307      	str	r3, [sp, #28]
    a8b0:	9005      	str	r0, [sp, #20]
    a8b2:	9204      	str	r2, [sp, #16]
    a8b4:	7e0a      	ldrb	r2, [r1, #24]
    a8b6:	000c      	movs	r4, r1
    a8b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a8ba:	2a6e      	cmp	r2, #110	; 0x6e
    a8bc:	d100      	bne.n	a8c0 <_printf_i+0x1c>
    a8be:	e08f      	b.n	a9e0 <_printf_i+0x13c>
    a8c0:	d817      	bhi.n	a8f2 <_printf_i+0x4e>
    a8c2:	2a63      	cmp	r2, #99	; 0x63
    a8c4:	d02c      	beq.n	a920 <_printf_i+0x7c>
    a8c6:	d808      	bhi.n	a8da <_printf_i+0x36>
    a8c8:	2a00      	cmp	r2, #0
    a8ca:	d100      	bne.n	a8ce <_printf_i+0x2a>
    a8cc:	e099      	b.n	aa02 <_printf_i+0x15e>
    a8ce:	2a58      	cmp	r2, #88	; 0x58
    a8d0:	d054      	beq.n	a97c <_printf_i+0xd8>
    a8d2:	0026      	movs	r6, r4
    a8d4:	3642      	adds	r6, #66	; 0x42
    a8d6:	7032      	strb	r2, [r6, #0]
    a8d8:	e029      	b.n	a92e <_printf_i+0x8a>
    a8da:	2a64      	cmp	r2, #100	; 0x64
    a8dc:	d001      	beq.n	a8e2 <_printf_i+0x3e>
    a8de:	2a69      	cmp	r2, #105	; 0x69
    a8e0:	d1f7      	bne.n	a8d2 <_printf_i+0x2e>
    a8e2:	6821      	ldr	r1, [r4, #0]
    a8e4:	681a      	ldr	r2, [r3, #0]
    a8e6:	0608      	lsls	r0, r1, #24
    a8e8:	d523      	bpl.n	a932 <_printf_i+0x8e>
    a8ea:	1d11      	adds	r1, r2, #4
    a8ec:	6019      	str	r1, [r3, #0]
    a8ee:	6815      	ldr	r5, [r2, #0]
    a8f0:	e025      	b.n	a93e <_printf_i+0x9a>
    a8f2:	2a73      	cmp	r2, #115	; 0x73
    a8f4:	d100      	bne.n	a8f8 <_printf_i+0x54>
    a8f6:	e088      	b.n	aa0a <_printf_i+0x166>
    a8f8:	d808      	bhi.n	a90c <_printf_i+0x68>
    a8fa:	2a6f      	cmp	r2, #111	; 0x6f
    a8fc:	d029      	beq.n	a952 <_printf_i+0xae>
    a8fe:	2a70      	cmp	r2, #112	; 0x70
    a900:	d1e7      	bne.n	a8d2 <_printf_i+0x2e>
    a902:	2220      	movs	r2, #32
    a904:	6809      	ldr	r1, [r1, #0]
    a906:	430a      	orrs	r2, r1
    a908:	6022      	str	r2, [r4, #0]
    a90a:	e003      	b.n	a914 <_printf_i+0x70>
    a90c:	2a75      	cmp	r2, #117	; 0x75
    a90e:	d020      	beq.n	a952 <_printf_i+0xae>
    a910:	2a78      	cmp	r2, #120	; 0x78
    a912:	d1de      	bne.n	a8d2 <_printf_i+0x2e>
    a914:	0022      	movs	r2, r4
    a916:	2178      	movs	r1, #120	; 0x78
    a918:	3245      	adds	r2, #69	; 0x45
    a91a:	7011      	strb	r1, [r2, #0]
    a91c:	4a6c      	ldr	r2, [pc, #432]	; (aad0 <_printf_i+0x22c>)
    a91e:	e030      	b.n	a982 <_printf_i+0xde>
    a920:	000e      	movs	r6, r1
    a922:	681a      	ldr	r2, [r3, #0]
    a924:	3642      	adds	r6, #66	; 0x42
    a926:	1d11      	adds	r1, r2, #4
    a928:	6019      	str	r1, [r3, #0]
    a92a:	6813      	ldr	r3, [r2, #0]
    a92c:	7033      	strb	r3, [r6, #0]
    a92e:	2301      	movs	r3, #1
    a930:	e079      	b.n	aa26 <_printf_i+0x182>
    a932:	0649      	lsls	r1, r1, #25
    a934:	d5d9      	bpl.n	a8ea <_printf_i+0x46>
    a936:	1d11      	adds	r1, r2, #4
    a938:	6019      	str	r1, [r3, #0]
    a93a:	2300      	movs	r3, #0
    a93c:	5ed5      	ldrsh	r5, [r2, r3]
    a93e:	2d00      	cmp	r5, #0
    a940:	da03      	bge.n	a94a <_printf_i+0xa6>
    a942:	232d      	movs	r3, #45	; 0x2d
    a944:	9a04      	ldr	r2, [sp, #16]
    a946:	426d      	negs	r5, r5
    a948:	7013      	strb	r3, [r2, #0]
    a94a:	4b62      	ldr	r3, [pc, #392]	; (aad4 <_printf_i+0x230>)
    a94c:	270a      	movs	r7, #10
    a94e:	9303      	str	r3, [sp, #12]
    a950:	e02f      	b.n	a9b2 <_printf_i+0x10e>
    a952:	6820      	ldr	r0, [r4, #0]
    a954:	6819      	ldr	r1, [r3, #0]
    a956:	0605      	lsls	r5, r0, #24
    a958:	d503      	bpl.n	a962 <_printf_i+0xbe>
    a95a:	1d08      	adds	r0, r1, #4
    a95c:	6018      	str	r0, [r3, #0]
    a95e:	680d      	ldr	r5, [r1, #0]
    a960:	e005      	b.n	a96e <_printf_i+0xca>
    a962:	0640      	lsls	r0, r0, #25
    a964:	d5f9      	bpl.n	a95a <_printf_i+0xb6>
    a966:	680d      	ldr	r5, [r1, #0]
    a968:	1d08      	adds	r0, r1, #4
    a96a:	6018      	str	r0, [r3, #0]
    a96c:	b2ad      	uxth	r5, r5
    a96e:	4b59      	ldr	r3, [pc, #356]	; (aad4 <_printf_i+0x230>)
    a970:	2708      	movs	r7, #8
    a972:	9303      	str	r3, [sp, #12]
    a974:	2a6f      	cmp	r2, #111	; 0x6f
    a976:	d018      	beq.n	a9aa <_printf_i+0x106>
    a978:	270a      	movs	r7, #10
    a97a:	e016      	b.n	a9aa <_printf_i+0x106>
    a97c:	3145      	adds	r1, #69	; 0x45
    a97e:	700a      	strb	r2, [r1, #0]
    a980:	4a54      	ldr	r2, [pc, #336]	; (aad4 <_printf_i+0x230>)
    a982:	9203      	str	r2, [sp, #12]
    a984:	681a      	ldr	r2, [r3, #0]
    a986:	6821      	ldr	r1, [r4, #0]
    a988:	1d10      	adds	r0, r2, #4
    a98a:	6018      	str	r0, [r3, #0]
    a98c:	6815      	ldr	r5, [r2, #0]
    a98e:	0608      	lsls	r0, r1, #24
    a990:	d522      	bpl.n	a9d8 <_printf_i+0x134>
    a992:	07cb      	lsls	r3, r1, #31
    a994:	d502      	bpl.n	a99c <_printf_i+0xf8>
    a996:	2320      	movs	r3, #32
    a998:	4319      	orrs	r1, r3
    a99a:	6021      	str	r1, [r4, #0]
    a99c:	2710      	movs	r7, #16
    a99e:	2d00      	cmp	r5, #0
    a9a0:	d103      	bne.n	a9aa <_printf_i+0x106>
    a9a2:	2320      	movs	r3, #32
    a9a4:	6822      	ldr	r2, [r4, #0]
    a9a6:	439a      	bics	r2, r3
    a9a8:	6022      	str	r2, [r4, #0]
    a9aa:	0023      	movs	r3, r4
    a9ac:	2200      	movs	r2, #0
    a9ae:	3343      	adds	r3, #67	; 0x43
    a9b0:	701a      	strb	r2, [r3, #0]
    a9b2:	6863      	ldr	r3, [r4, #4]
    a9b4:	60a3      	str	r3, [r4, #8]
    a9b6:	2b00      	cmp	r3, #0
    a9b8:	db5c      	blt.n	aa74 <_printf_i+0x1d0>
    a9ba:	2204      	movs	r2, #4
    a9bc:	6821      	ldr	r1, [r4, #0]
    a9be:	4391      	bics	r1, r2
    a9c0:	6021      	str	r1, [r4, #0]
    a9c2:	2d00      	cmp	r5, #0
    a9c4:	d158      	bne.n	aa78 <_printf_i+0x1d4>
    a9c6:	9e04      	ldr	r6, [sp, #16]
    a9c8:	2b00      	cmp	r3, #0
    a9ca:	d064      	beq.n	aa96 <_printf_i+0x1f2>
    a9cc:	0026      	movs	r6, r4
    a9ce:	9b03      	ldr	r3, [sp, #12]
    a9d0:	3642      	adds	r6, #66	; 0x42
    a9d2:	781b      	ldrb	r3, [r3, #0]
    a9d4:	7033      	strb	r3, [r6, #0]
    a9d6:	e05e      	b.n	aa96 <_printf_i+0x1f2>
    a9d8:	0648      	lsls	r0, r1, #25
    a9da:	d5da      	bpl.n	a992 <_printf_i+0xee>
    a9dc:	b2ad      	uxth	r5, r5
    a9de:	e7d8      	b.n	a992 <_printf_i+0xee>
    a9e0:	6809      	ldr	r1, [r1, #0]
    a9e2:	681a      	ldr	r2, [r3, #0]
    a9e4:	0608      	lsls	r0, r1, #24
    a9e6:	d505      	bpl.n	a9f4 <_printf_i+0x150>
    a9e8:	1d11      	adds	r1, r2, #4
    a9ea:	6019      	str	r1, [r3, #0]
    a9ec:	6813      	ldr	r3, [r2, #0]
    a9ee:	6962      	ldr	r2, [r4, #20]
    a9f0:	601a      	str	r2, [r3, #0]
    a9f2:	e006      	b.n	aa02 <_printf_i+0x15e>
    a9f4:	0649      	lsls	r1, r1, #25
    a9f6:	d5f7      	bpl.n	a9e8 <_printf_i+0x144>
    a9f8:	1d11      	adds	r1, r2, #4
    a9fa:	6019      	str	r1, [r3, #0]
    a9fc:	6813      	ldr	r3, [r2, #0]
    a9fe:	8aa2      	ldrh	r2, [r4, #20]
    aa00:	801a      	strh	r2, [r3, #0]
    aa02:	2300      	movs	r3, #0
    aa04:	9e04      	ldr	r6, [sp, #16]
    aa06:	6123      	str	r3, [r4, #16]
    aa08:	e054      	b.n	aab4 <_printf_i+0x210>
    aa0a:	681a      	ldr	r2, [r3, #0]
    aa0c:	1d11      	adds	r1, r2, #4
    aa0e:	6019      	str	r1, [r3, #0]
    aa10:	6816      	ldr	r6, [r2, #0]
    aa12:	2100      	movs	r1, #0
    aa14:	6862      	ldr	r2, [r4, #4]
    aa16:	0030      	movs	r0, r6
    aa18:	f000 f93e 	bl	ac98 <memchr>
    aa1c:	2800      	cmp	r0, #0
    aa1e:	d001      	beq.n	aa24 <_printf_i+0x180>
    aa20:	1b80      	subs	r0, r0, r6
    aa22:	6060      	str	r0, [r4, #4]
    aa24:	6863      	ldr	r3, [r4, #4]
    aa26:	6123      	str	r3, [r4, #16]
    aa28:	2300      	movs	r3, #0
    aa2a:	9a04      	ldr	r2, [sp, #16]
    aa2c:	7013      	strb	r3, [r2, #0]
    aa2e:	e041      	b.n	aab4 <_printf_i+0x210>
    aa30:	6923      	ldr	r3, [r4, #16]
    aa32:	0032      	movs	r2, r6
    aa34:	9906      	ldr	r1, [sp, #24]
    aa36:	9805      	ldr	r0, [sp, #20]
    aa38:	9d07      	ldr	r5, [sp, #28]
    aa3a:	47a8      	blx	r5
    aa3c:	1c43      	adds	r3, r0, #1
    aa3e:	d043      	beq.n	aac8 <_printf_i+0x224>
    aa40:	6823      	ldr	r3, [r4, #0]
    aa42:	2500      	movs	r5, #0
    aa44:	079b      	lsls	r3, r3, #30
    aa46:	d40f      	bmi.n	aa68 <_printf_i+0x1c4>
    aa48:	9b09      	ldr	r3, [sp, #36]	; 0x24
    aa4a:	68e0      	ldr	r0, [r4, #12]
    aa4c:	4298      	cmp	r0, r3
    aa4e:	da3d      	bge.n	aacc <_printf_i+0x228>
    aa50:	0018      	movs	r0, r3
    aa52:	e03b      	b.n	aacc <_printf_i+0x228>
    aa54:	0022      	movs	r2, r4
    aa56:	2301      	movs	r3, #1
    aa58:	3219      	adds	r2, #25
    aa5a:	9906      	ldr	r1, [sp, #24]
    aa5c:	9805      	ldr	r0, [sp, #20]
    aa5e:	9e07      	ldr	r6, [sp, #28]
    aa60:	47b0      	blx	r6
    aa62:	1c43      	adds	r3, r0, #1
    aa64:	d030      	beq.n	aac8 <_printf_i+0x224>
    aa66:	3501      	adds	r5, #1
    aa68:	68e3      	ldr	r3, [r4, #12]
    aa6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    aa6c:	1a9b      	subs	r3, r3, r2
    aa6e:	429d      	cmp	r5, r3
    aa70:	dbf0      	blt.n	aa54 <_printf_i+0x1b0>
    aa72:	e7e9      	b.n	aa48 <_printf_i+0x1a4>
    aa74:	2d00      	cmp	r5, #0
    aa76:	d0a9      	beq.n	a9cc <_printf_i+0x128>
    aa78:	9e04      	ldr	r6, [sp, #16]
    aa7a:	0028      	movs	r0, r5
    aa7c:	0039      	movs	r1, r7
    aa7e:	f7fd f913 	bl	7ca8 <__aeabi_uidivmod>
    aa82:	9b03      	ldr	r3, [sp, #12]
    aa84:	3e01      	subs	r6, #1
    aa86:	5c5b      	ldrb	r3, [r3, r1]
    aa88:	0028      	movs	r0, r5
    aa8a:	7033      	strb	r3, [r6, #0]
    aa8c:	0039      	movs	r1, r7
    aa8e:	f7fd f885 	bl	7b9c <__udivsi3>
    aa92:	1e05      	subs	r5, r0, #0
    aa94:	d1f1      	bne.n	aa7a <_printf_i+0x1d6>
    aa96:	2f08      	cmp	r7, #8
    aa98:	d109      	bne.n	aaae <_printf_i+0x20a>
    aa9a:	6823      	ldr	r3, [r4, #0]
    aa9c:	07db      	lsls	r3, r3, #31
    aa9e:	d506      	bpl.n	aaae <_printf_i+0x20a>
    aaa0:	6863      	ldr	r3, [r4, #4]
    aaa2:	6922      	ldr	r2, [r4, #16]
    aaa4:	4293      	cmp	r3, r2
    aaa6:	dc02      	bgt.n	aaae <_printf_i+0x20a>
    aaa8:	2330      	movs	r3, #48	; 0x30
    aaaa:	3e01      	subs	r6, #1
    aaac:	7033      	strb	r3, [r6, #0]
    aaae:	9b04      	ldr	r3, [sp, #16]
    aab0:	1b9b      	subs	r3, r3, r6
    aab2:	6123      	str	r3, [r4, #16]
    aab4:	9b07      	ldr	r3, [sp, #28]
    aab6:	aa09      	add	r2, sp, #36	; 0x24
    aab8:	9300      	str	r3, [sp, #0]
    aaba:	0021      	movs	r1, r4
    aabc:	9b06      	ldr	r3, [sp, #24]
    aabe:	9805      	ldr	r0, [sp, #20]
    aac0:	f7ff fe82 	bl	a7c8 <_printf_common>
    aac4:	1c43      	adds	r3, r0, #1
    aac6:	d1b3      	bne.n	aa30 <_printf_i+0x18c>
    aac8:	2001      	movs	r0, #1
    aaca:	4240      	negs	r0, r0
    aacc:	b00b      	add	sp, #44	; 0x2c
    aace:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aad0:	0000c1ca 	.word	0x0000c1ca
    aad4:	0000c1b9 	.word	0x0000c1b9

0000aad8 <_putc_r>:
    aad8:	b570      	push	{r4, r5, r6, lr}
    aada:	0006      	movs	r6, r0
    aadc:	000d      	movs	r5, r1
    aade:	0014      	movs	r4, r2
    aae0:	2800      	cmp	r0, #0
    aae2:	d004      	beq.n	aaee <_putc_r+0x16>
    aae4:	6983      	ldr	r3, [r0, #24]
    aae6:	2b00      	cmp	r3, #0
    aae8:	d101      	bne.n	aaee <_putc_r+0x16>
    aaea:	f7ff fac5 	bl	a078 <__sinit>
    aaee:	4b12      	ldr	r3, [pc, #72]	; (ab38 <_putc_r+0x60>)
    aaf0:	429c      	cmp	r4, r3
    aaf2:	d111      	bne.n	ab18 <_putc_r+0x40>
    aaf4:	6874      	ldr	r4, [r6, #4]
    aaf6:	68a3      	ldr	r3, [r4, #8]
    aaf8:	3b01      	subs	r3, #1
    aafa:	60a3      	str	r3, [r4, #8]
    aafc:	2b00      	cmp	r3, #0
    aafe:	da05      	bge.n	ab0c <_putc_r+0x34>
    ab00:	69a2      	ldr	r2, [r4, #24]
    ab02:	4293      	cmp	r3, r2
    ab04:	db12      	blt.n	ab2c <_putc_r+0x54>
    ab06:	b2eb      	uxtb	r3, r5
    ab08:	2b0a      	cmp	r3, #10
    ab0a:	d00f      	beq.n	ab2c <_putc_r+0x54>
    ab0c:	6823      	ldr	r3, [r4, #0]
    ab0e:	b2e8      	uxtb	r0, r5
    ab10:	1c5a      	adds	r2, r3, #1
    ab12:	6022      	str	r2, [r4, #0]
    ab14:	701d      	strb	r5, [r3, #0]
    ab16:	bd70      	pop	{r4, r5, r6, pc}
    ab18:	4b08      	ldr	r3, [pc, #32]	; (ab3c <_putc_r+0x64>)
    ab1a:	429c      	cmp	r4, r3
    ab1c:	d101      	bne.n	ab22 <_putc_r+0x4a>
    ab1e:	68b4      	ldr	r4, [r6, #8]
    ab20:	e7e9      	b.n	aaf6 <_putc_r+0x1e>
    ab22:	4b07      	ldr	r3, [pc, #28]	; (ab40 <_putc_r+0x68>)
    ab24:	429c      	cmp	r4, r3
    ab26:	d1e6      	bne.n	aaf6 <_putc_r+0x1e>
    ab28:	68f4      	ldr	r4, [r6, #12]
    ab2a:	e7e4      	b.n	aaf6 <_putc_r+0x1e>
    ab2c:	0022      	movs	r2, r4
    ab2e:	0029      	movs	r1, r5
    ab30:	0030      	movs	r0, r6
    ab32:	f7ff f8dd 	bl	9cf0 <__swbuf_r>
    ab36:	e7ee      	b.n	ab16 <_putc_r+0x3e>
    ab38:	0000c168 	.word	0x0000c168
    ab3c:	0000c188 	.word	0x0000c188
    ab40:	0000c148 	.word	0x0000c148

0000ab44 <__sread>:
    ab44:	b570      	push	{r4, r5, r6, lr}
    ab46:	000c      	movs	r4, r1
    ab48:	250e      	movs	r5, #14
    ab4a:	5f49      	ldrsh	r1, [r1, r5]
    ab4c:	f000 f8d6 	bl	acfc <_read_r>
    ab50:	2800      	cmp	r0, #0
    ab52:	db03      	blt.n	ab5c <__sread+0x18>
    ab54:	6d63      	ldr	r3, [r4, #84]	; 0x54
    ab56:	181b      	adds	r3, r3, r0
    ab58:	6563      	str	r3, [r4, #84]	; 0x54
    ab5a:	bd70      	pop	{r4, r5, r6, pc}
    ab5c:	89a3      	ldrh	r3, [r4, #12]
    ab5e:	4a02      	ldr	r2, [pc, #8]	; (ab68 <__sread+0x24>)
    ab60:	4013      	ands	r3, r2
    ab62:	81a3      	strh	r3, [r4, #12]
    ab64:	e7f9      	b.n	ab5a <__sread+0x16>
    ab66:	46c0      	nop			; (mov r8, r8)
    ab68:	ffffefff 	.word	0xffffefff

0000ab6c <__swrite>:
    ab6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ab6e:	001f      	movs	r7, r3
    ab70:	898b      	ldrh	r3, [r1, #12]
    ab72:	0005      	movs	r5, r0
    ab74:	000c      	movs	r4, r1
    ab76:	0016      	movs	r6, r2
    ab78:	05db      	lsls	r3, r3, #23
    ab7a:	d505      	bpl.n	ab88 <__swrite+0x1c>
    ab7c:	230e      	movs	r3, #14
    ab7e:	5ec9      	ldrsh	r1, [r1, r3]
    ab80:	2200      	movs	r2, #0
    ab82:	2302      	movs	r3, #2
    ab84:	f000 f874 	bl	ac70 <_lseek_r>
    ab88:	89a3      	ldrh	r3, [r4, #12]
    ab8a:	4a05      	ldr	r2, [pc, #20]	; (aba0 <__swrite+0x34>)
    ab8c:	0028      	movs	r0, r5
    ab8e:	4013      	ands	r3, r2
    ab90:	81a3      	strh	r3, [r4, #12]
    ab92:	0032      	movs	r2, r6
    ab94:	230e      	movs	r3, #14
    ab96:	5ee1      	ldrsh	r1, [r4, r3]
    ab98:	003b      	movs	r3, r7
    ab9a:	f000 f81f 	bl	abdc <_write_r>
    ab9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aba0:	ffffefff 	.word	0xffffefff

0000aba4 <__sseek>:
    aba4:	b570      	push	{r4, r5, r6, lr}
    aba6:	000c      	movs	r4, r1
    aba8:	250e      	movs	r5, #14
    abaa:	5f49      	ldrsh	r1, [r1, r5]
    abac:	f000 f860 	bl	ac70 <_lseek_r>
    abb0:	89a3      	ldrh	r3, [r4, #12]
    abb2:	1c42      	adds	r2, r0, #1
    abb4:	d103      	bne.n	abbe <__sseek+0x1a>
    abb6:	4a05      	ldr	r2, [pc, #20]	; (abcc <__sseek+0x28>)
    abb8:	4013      	ands	r3, r2
    abba:	81a3      	strh	r3, [r4, #12]
    abbc:	bd70      	pop	{r4, r5, r6, pc}
    abbe:	2280      	movs	r2, #128	; 0x80
    abc0:	0152      	lsls	r2, r2, #5
    abc2:	4313      	orrs	r3, r2
    abc4:	81a3      	strh	r3, [r4, #12]
    abc6:	6560      	str	r0, [r4, #84]	; 0x54
    abc8:	e7f8      	b.n	abbc <__sseek+0x18>
    abca:	46c0      	nop			; (mov r8, r8)
    abcc:	ffffefff 	.word	0xffffefff

0000abd0 <__sclose>:
    abd0:	b510      	push	{r4, lr}
    abd2:	230e      	movs	r3, #14
    abd4:	5ec9      	ldrsh	r1, [r1, r3]
    abd6:	f000 f815 	bl	ac04 <_close_r>
    abda:	bd10      	pop	{r4, pc}

0000abdc <_write_r>:
    abdc:	b570      	push	{r4, r5, r6, lr}
    abde:	0005      	movs	r5, r0
    abe0:	0008      	movs	r0, r1
    abe2:	0011      	movs	r1, r2
    abe4:	2200      	movs	r2, #0
    abe6:	4c06      	ldr	r4, [pc, #24]	; (ac00 <_write_r+0x24>)
    abe8:	6022      	str	r2, [r4, #0]
    abea:	001a      	movs	r2, r3
    abec:	f7fb fb88 	bl	6300 <_write>
    abf0:	1c43      	adds	r3, r0, #1
    abf2:	d103      	bne.n	abfc <_write_r+0x20>
    abf4:	6823      	ldr	r3, [r4, #0]
    abf6:	2b00      	cmp	r3, #0
    abf8:	d000      	beq.n	abfc <_write_r+0x20>
    abfa:	602b      	str	r3, [r5, #0]
    abfc:	bd70      	pop	{r4, r5, r6, pc}
    abfe:	46c0      	nop			; (mov r8, r8)
    ac00:	20000510 	.word	0x20000510

0000ac04 <_close_r>:
    ac04:	2300      	movs	r3, #0
    ac06:	b570      	push	{r4, r5, r6, lr}
    ac08:	4c06      	ldr	r4, [pc, #24]	; (ac24 <_close_r+0x20>)
    ac0a:	0005      	movs	r5, r0
    ac0c:	0008      	movs	r0, r1
    ac0e:	6023      	str	r3, [r4, #0]
    ac10:	f7fb fbb0 	bl	6374 <_close>
    ac14:	1c43      	adds	r3, r0, #1
    ac16:	d103      	bne.n	ac20 <_close_r+0x1c>
    ac18:	6823      	ldr	r3, [r4, #0]
    ac1a:	2b00      	cmp	r3, #0
    ac1c:	d000      	beq.n	ac20 <_close_r+0x1c>
    ac1e:	602b      	str	r3, [r5, #0]
    ac20:	bd70      	pop	{r4, r5, r6, pc}
    ac22:	46c0      	nop			; (mov r8, r8)
    ac24:	20000510 	.word	0x20000510

0000ac28 <_fstat_r>:
    ac28:	2300      	movs	r3, #0
    ac2a:	b570      	push	{r4, r5, r6, lr}
    ac2c:	4c06      	ldr	r4, [pc, #24]	; (ac48 <_fstat_r+0x20>)
    ac2e:	0005      	movs	r5, r0
    ac30:	0008      	movs	r0, r1
    ac32:	0011      	movs	r1, r2
    ac34:	6023      	str	r3, [r4, #0]
    ac36:	f7fb fba0 	bl	637a <_fstat>
    ac3a:	1c43      	adds	r3, r0, #1
    ac3c:	d103      	bne.n	ac46 <_fstat_r+0x1e>
    ac3e:	6823      	ldr	r3, [r4, #0]
    ac40:	2b00      	cmp	r3, #0
    ac42:	d000      	beq.n	ac46 <_fstat_r+0x1e>
    ac44:	602b      	str	r3, [r5, #0]
    ac46:	bd70      	pop	{r4, r5, r6, pc}
    ac48:	20000510 	.word	0x20000510

0000ac4c <_isatty_r>:
    ac4c:	2300      	movs	r3, #0
    ac4e:	b570      	push	{r4, r5, r6, lr}
    ac50:	4c06      	ldr	r4, [pc, #24]	; (ac6c <_isatty_r+0x20>)
    ac52:	0005      	movs	r5, r0
    ac54:	0008      	movs	r0, r1
    ac56:	6023      	str	r3, [r4, #0]
    ac58:	f7fb fb94 	bl	6384 <_isatty>
    ac5c:	1c43      	adds	r3, r0, #1
    ac5e:	d103      	bne.n	ac68 <_isatty_r+0x1c>
    ac60:	6823      	ldr	r3, [r4, #0]
    ac62:	2b00      	cmp	r3, #0
    ac64:	d000      	beq.n	ac68 <_isatty_r+0x1c>
    ac66:	602b      	str	r3, [r5, #0]
    ac68:	bd70      	pop	{r4, r5, r6, pc}
    ac6a:	46c0      	nop			; (mov r8, r8)
    ac6c:	20000510 	.word	0x20000510

0000ac70 <_lseek_r>:
    ac70:	b570      	push	{r4, r5, r6, lr}
    ac72:	0005      	movs	r5, r0
    ac74:	0008      	movs	r0, r1
    ac76:	0011      	movs	r1, r2
    ac78:	2200      	movs	r2, #0
    ac7a:	4c06      	ldr	r4, [pc, #24]	; (ac94 <_lseek_r+0x24>)
    ac7c:	6022      	str	r2, [r4, #0]
    ac7e:	001a      	movs	r2, r3
    ac80:	f7fb fb82 	bl	6388 <_lseek>
    ac84:	1c43      	adds	r3, r0, #1
    ac86:	d103      	bne.n	ac90 <_lseek_r+0x20>
    ac88:	6823      	ldr	r3, [r4, #0]
    ac8a:	2b00      	cmp	r3, #0
    ac8c:	d000      	beq.n	ac90 <_lseek_r+0x20>
    ac8e:	602b      	str	r3, [r5, #0]
    ac90:	bd70      	pop	{r4, r5, r6, pc}
    ac92:	46c0      	nop			; (mov r8, r8)
    ac94:	20000510 	.word	0x20000510

0000ac98 <memchr>:
    ac98:	b2c9      	uxtb	r1, r1
    ac9a:	1882      	adds	r2, r0, r2
    ac9c:	4290      	cmp	r0, r2
    ac9e:	d101      	bne.n	aca4 <memchr+0xc>
    aca0:	2000      	movs	r0, #0
    aca2:	4770      	bx	lr
    aca4:	7803      	ldrb	r3, [r0, #0]
    aca6:	428b      	cmp	r3, r1
    aca8:	d0fb      	beq.n	aca2 <memchr+0xa>
    acaa:	3001      	adds	r0, #1
    acac:	e7f6      	b.n	ac9c <memchr+0x4>

0000acae <_realloc_r>:
    acae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    acb0:	0007      	movs	r7, r0
    acb2:	000d      	movs	r5, r1
    acb4:	0016      	movs	r6, r2
    acb6:	2900      	cmp	r1, #0
    acb8:	d105      	bne.n	acc6 <_realloc_r+0x18>
    acba:	0011      	movs	r1, r2
    acbc:	f7fe fe0e 	bl	98dc <_malloc_r>
    acc0:	0004      	movs	r4, r0
    acc2:	0020      	movs	r0, r4
    acc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    acc6:	2a00      	cmp	r2, #0
    acc8:	d103      	bne.n	acd2 <_realloc_r+0x24>
    acca:	f7fe fdbd 	bl	9848 <_free_r>
    acce:	0034      	movs	r4, r6
    acd0:	e7f7      	b.n	acc2 <_realloc_r+0x14>
    acd2:	f000 f827 	bl	ad24 <_malloc_usable_size_r>
    acd6:	002c      	movs	r4, r5
    acd8:	4286      	cmp	r6, r0
    acda:	d9f2      	bls.n	acc2 <_realloc_r+0x14>
    acdc:	0031      	movs	r1, r6
    acde:	0038      	movs	r0, r7
    ace0:	f7fe fdfc 	bl	98dc <_malloc_r>
    ace4:	1e04      	subs	r4, r0, #0
    ace6:	d0ec      	beq.n	acc2 <_realloc_r+0x14>
    ace8:	0029      	movs	r1, r5
    acea:	0032      	movs	r2, r6
    acec:	f7fe fd88 	bl	9800 <memcpy>
    acf0:	0029      	movs	r1, r5
    acf2:	0038      	movs	r0, r7
    acf4:	f7fe fda8 	bl	9848 <_free_r>
    acf8:	e7e3      	b.n	acc2 <_realloc_r+0x14>
	...

0000acfc <_read_r>:
    acfc:	b570      	push	{r4, r5, r6, lr}
    acfe:	0005      	movs	r5, r0
    ad00:	0008      	movs	r0, r1
    ad02:	0011      	movs	r1, r2
    ad04:	2200      	movs	r2, #0
    ad06:	4c06      	ldr	r4, [pc, #24]	; (ad20 <_read_r+0x24>)
    ad08:	6022      	str	r2, [r4, #0]
    ad0a:	001a      	movs	r2, r3
    ad0c:	f7fb fad6 	bl	62bc <_read>
    ad10:	1c43      	adds	r3, r0, #1
    ad12:	d103      	bne.n	ad1c <_read_r+0x20>
    ad14:	6823      	ldr	r3, [r4, #0]
    ad16:	2b00      	cmp	r3, #0
    ad18:	d000      	beq.n	ad1c <_read_r+0x20>
    ad1a:	602b      	str	r3, [r5, #0]
    ad1c:	bd70      	pop	{r4, r5, r6, pc}
    ad1e:	46c0      	nop			; (mov r8, r8)
    ad20:	20000510 	.word	0x20000510

0000ad24 <_malloc_usable_size_r>:
    ad24:	1f0b      	subs	r3, r1, #4
    ad26:	681b      	ldr	r3, [r3, #0]
    ad28:	1f18      	subs	r0, r3, #4
    ad2a:	2b00      	cmp	r3, #0
    ad2c:	da01      	bge.n	ad32 <_malloc_usable_size_r+0xe>
    ad2e:	580b      	ldr	r3, [r1, r0]
    ad30:	18c0      	adds	r0, r0, r3
    ad32:	4770      	bx	lr
    ad34:	656d6954 	.word	0x656d6954
    ad38:	65722072 	.word	0x65722072
    ad3c:	0d746573 	.word	0x0d746573
    ad40:	00000000 	.word	0x00000000
    ad44:	61746164 	.word	0x61746164
    ad48:	205d325b 	.word	0x205d325b
    ad4c:	74617473 	.word	0x74617473
    ad50:	3d207375 	.word	0x3d207375
    ad54:	25783020 	.word	0x25783020
    ad58:	00000a78 	.word	0x00000a78
    ad5c:	000003b2 	.word	0x000003b2
    ad60:	000005f8 	.word	0x000005f8
    ad64:	000005f8 	.word	0x000005f8
    ad68:	000005f8 	.word	0x000005f8
    ad6c:	000005f8 	.word	0x000005f8
    ad70:	000005f8 	.word	0x000005f8
    ad74:	000005f8 	.word	0x000005f8
    ad78:	000005f8 	.word	0x000005f8
    ad7c:	000005f8 	.word	0x000005f8
    ad80:	000005f8 	.word	0x000005f8
    ad84:	000005f8 	.word	0x000005f8
    ad88:	000005f8 	.word	0x000005f8
    ad8c:	000005f8 	.word	0x000005f8
    ad90:	000005f8 	.word	0x000005f8
    ad94:	000005f8 	.word	0x000005f8
    ad98:	000005f8 	.word	0x000005f8
    ad9c:	0000039a 	.word	0x0000039a
    ada0:	000005f8 	.word	0x000005f8
    ada4:	000005f8 	.word	0x000005f8
    ada8:	000005f8 	.word	0x000005f8
    adac:	000005f8 	.word	0x000005f8
    adb0:	000005f8 	.word	0x000005f8
    adb4:	000005f8 	.word	0x000005f8
    adb8:	000005f8 	.word	0x000005f8
    adbc:	000005f8 	.word	0x000005f8
    adc0:	000005f8 	.word	0x000005f8
    adc4:	000005f8 	.word	0x000005f8
    adc8:	000005f8 	.word	0x000005f8
    adcc:	000005f8 	.word	0x000005f8
    add0:	000005f8 	.word	0x000005f8
    add4:	000005f8 	.word	0x000005f8
    add8:	000005f8 	.word	0x000005f8
    addc:	000003aa 	.word	0x000003aa
    ade0:	000005f8 	.word	0x000005f8
    ade4:	000005f8 	.word	0x000005f8
    ade8:	000005f8 	.word	0x000005f8
    adec:	000005f8 	.word	0x000005f8
    adf0:	000005f8 	.word	0x000005f8
    adf4:	000005f8 	.word	0x000005f8
    adf8:	000005f8 	.word	0x000005f8
    adfc:	000005f8 	.word	0x000005f8
    ae00:	000005f8 	.word	0x000005f8
    ae04:	000005f8 	.word	0x000005f8
    ae08:	000005f8 	.word	0x000005f8
    ae0c:	000005f8 	.word	0x000005f8
    ae10:	000005f8 	.word	0x000005f8
    ae14:	000005f8 	.word	0x000005f8
    ae18:	000005f8 	.word	0x000005f8
    ae1c:	000003a2 	.word	0x000003a2
    ae20:	000003ba 	.word	0x000003ba
    ae24:	00000382 	.word	0x00000382
    ae28:	00000392 	.word	0x00000392
    ae2c:	0000038a 	.word	0x0000038a
    ae30:	00000002 	.word	0x00000002
    ae34:	00000003 	.word	0x00000003
    ae38:	00000028 	.word	0x00000028
    ae3c:	00000029 	.word	0x00000029
    ae40:	00000004 	.word	0x00000004
    ae44:	00000005 	.word	0x00000005
    ae48:	00000006 	.word	0x00000006
    ae4c:	00000007 	.word	0x00000007
    ae50:	00000020 	.word	0x00000020
    ae54:	00000021 	.word	0x00000021
    ae58:	00000022 	.word	0x00000022
    ae5c:	00000023 	.word	0x00000023
    ae60:	00000024 	.word	0x00000024
    ae64:	00000025 	.word	0x00000025
    ae68:	00000026 	.word	0x00000026
    ae6c:	00000027 	.word	0x00000027
    ae70:	00000008 	.word	0x00000008
    ae74:	00000009 	.word	0x00000009
    ae78:	0000000a 	.word	0x0000000a
    ae7c:	0000000b 	.word	0x0000000b

0000ae80 <CMD_MEASURE_LPM_CS>:
    ae80:	00005864                                dX..

0000ae84 <CMD_READ_ID_REG>:
    ae84:	0000c8ef                                ....

0000ae88 <__FUNCTION__.14481>:
    ae88:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
    ae98:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    aea8:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
    aeb8:	6320746c 0000646d 00001dc0 00001d90     lt cmd..........
    aec8:	00001d88 00001da0 00001d98 00001db8     ................
    aed8:	00001da8 00001db0                       ........

0000aee0 <__FUNCTION__.13064>:
    aee0:	5f666968 646e6573 00000000              hif_send....

0000aeec <__FUNCTION__.13074>:
    aeec:	5f666968 00727369                       hif_isr.

0000aef4 <__FUNCTION__.13080>:
    aef4:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0000af04 <__FUNCTION__.13092>:
    af04:	5f666968 65636572 00657669              hif_receive.

0000af10 <__FUNCTION__.13108>:
    af10:	5f666968 69676572 72657473 0062635f     hif_register_cb.
    af20:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
    af30:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
    af40:	006c6961 66696828 64612029 73657264     ail.(hif) addres
    af50:	75622073 61662073 00006c69 66696828     s bus fail..(hif
    af60:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
    af70:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
    af80:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
    af90:	25203d20 3e583230 0000000a 49464957      = %02X>....WIFI
    afa0:	6c616320 6361626c 7369206b 746f6e20      callback is not
    afb0:	67657220 65747369 00646572 6b6f6353      registered.Scok
    afc0:	63207465 626c6c61 206b6361 6e207369     et callback is n
    afd0:	7220746f 73696765 65726574 00000064     ot registered...
    afe0:	2061744f 6c6c6163 6b636162 20736920     Ota callback is 
    aff0:	20746f6e 69676572 72657473 00006465     not registered..
    b000:	70797243 63206f74 626c6c61 206b6361     Crypto callback 
    b010:	6e207369 7220746f 73696765 65726574     is not registere
    b020:	00000064 6d676953 61632061 61626c6c     d...Sigma callba
    b030:	69206b63 6f6e2073 65722074 74736967     ck is not regist
    b040:	64657265 00000000 66696828 6e692029     ered....(hif) in
    b050:	696c6176 72672064 2070756f 00004449     valid group ID..
    b060:	66696828 6f682029 61207473 64207070     (hif) host app d
    b070:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
    b080:	253c2065 253c3e75 000a3e58 66696828     e <%u><%X>..(hif
    b090:	72572029 20676e6f 657a6953 00000000     ) Wrong Size....
    b0a0:	66696828 61462029 2065736c 65746e69     (hif) False inte
    b0b0:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
    b0c0:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
    b0d0:	7265746e 74707572 67657220 00000000     nterrupt reg....
    b0e0:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
    b0f0:	656c646e 746e6920 75727265 25207470     ndle interrupt %
    b100:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
    b110:	66696820 6365725f 65766965 6e49203a      hif_receive: In
    b120:	696c6176 72612064 656d7567 0000746e     valid argument..
    b130:	20505041 75716552 65747365 69532064     APP Requested Si
    b140:	6920657a 616c2073 72656772 61687420     ze is larger tha
    b150:	6874206e 65722065 65766963 75622064     n the recived bu
    b160:	72656666 7a697320 253c2065 253c3e75     ffer size <%u><%
    b170:	0a3e756c 00000000 20505041 75716552     lu>.....APP Requ
    b180:	65747365 64412064 73657264 65622073     ested Address be
    b190:	646e6f79 65687420 63657220 64657669     yond the recived
    b1a0:	66756220 20726566 72646461 20737365      buffer address 
    b1b0:	20646e61 676e656c 00006874 20705247     and length..GRp 
    b1c0:	6425203f 0000000a 50504128 4e492829     ? %d....(APP)(IN
    b1d0:	00294f46 776f6c53 20676e69 6e776f64     FO).Slowing down
    b1e0:	002e2e2e 46494828 69614629 6f74206c     ....(HIF)Fail to
    b1f0:	6b617720 74207075 63206568 00706968      wakup the chip.

0000b200 <__FUNCTION__.13043>:
    b200:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0000b20c <__FUNCTION__.13072>:
    b20c:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0000b21c <__FUNCTION__.13100>:
    b21c:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
    b22c:	0063735f 666e6f43 7463696c 49206465     _sc.Conflicted I
    b23c:	20222050 252e7525 75252e75 2075252e     P " %u.%u.%u.%u 
    b24c:	000a2022 20514552 20746f4e 69666564     " ..REQ Not defi
    b25c:	2064656e 000a6425 2079654b 6e207369     ned %d..Key is n
    b26c:	7620746f 64696c61 00000000 61766e49     ot valid....Inva
    b27c:	2064696c 0079654b 44495353 4e454c20     lid Key.SSID LEN
    b28c:	564e4920 44494c41 00000000 49204843      INVALID....CH I
    b29c:	4c41564e 00004449 61766e49 2064696c     NVALID..Invalid 
    b2ac:	20706557 2079656b 65646e69 64252078     Wep key index %d
    b2bc:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
    b2cc:	2079656b 676e656c 25206874 00000a64     key length %d...
    b2dc:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
    b2ec:	656c2079 6874676e 00000000 65646e75     y length....unde
    b2fc:	656e6966 65732064 79742063 00006570     fined sec type..
    b30c:	6d726946 65726177 72657620 3a202020     Firmware ver   :
    b31c:	2e752520 252e7525 76532075 7665726e      %u.%u.%u Svnrev
    b32c:	0a752520 00000000 6d726946 65726177      %u.....Firmware
    b33c:	69754220 2520646c 69542073 2520656d      Build %s Time %
    b34c:	00000a73 6d726946 65726177 6e694d20     s...Firmware Min
    b35c:	69726420 20726576 20726576 7525203a      driver ver : %u
    b36c:	2e75252e 000a7525 76697244 76207265     .%u.%u..Driver v
    b37c:	203a7265 252e7525 75252e75 0000000a     er: %u.%u.%u....
    b38c:	303a3431 32353a34 00000000 20626546     14:04:52....Feb 
    b39c:	32203032 00383130 76697244 62207265     20 2018.Driver b
    b3ac:	746c6975 20746120 25097325 00000a73     uilt at %s.%s...
    b3bc:	6d73694d 68637461 72694620 7277616d     Mismatch Firmawr
    b3cc:	65562065 6f697372 0000006e              e Version...

0000b3d8 <__FUNCTION__.12906>:
    b3d8:	70696863 6b61775f 00000065              chip_wake...

0000b3e4 <__FUNCTION__.12955>:
    b3e4:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
    b3f4:	74206465 6564206f 696e692d 6c616974     ed to de-initial
    b404:	00657a69 20737542 6f727265 35282072     ize.Bus error (5
    b414:	64252e29 786c2520 0000000a 6c696146     ).%d %lx....Fail
    b424:	74206465 6177206f 2070756b 20656874     ed to wakup the 
    b434:	70696863 00000000 76697244 65567265     chip....DriverVe
    b444:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..

0000b454 <__FUNCTION__.12953>:
    b454:	645f6d6e 695f7672 0074696e              nm_drv_init.

0000b460 <__FUNCTION__.12960>:
    b460:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
    b470:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
    b480:	6965645f 2074696e 6c696166 00000000     _deinit fail....
    b490:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
    b4a0:	73616c66 69642068 6c626173 61662065     flash disable fa
    b4b0:	00006c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
    b4c0:	6c696166 696e6920 75622074 00000073     fail init bus...
    b4d0:	6c696166 74206465 6e65206f 656c6261     failed to enable
    b4e0:	746e6920 75727265 2e737470 0000002e      interrupts.....
    b4f0:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
    b500:	6e69206c 62207469 00007375 70696843     l init bus..Chip
    b510:	20444920 0a786c25 00000000 00002da0      ID %lx......-..
    b520:	00002da0 00002dd0 00002d52 00002d76     .-...-..R-..v-..
    b530:	00002d84 00002db6 00002db6 00002dfe     .-...-...-...-..
    b540:	00002d36 00002e38 00002e38 00002e38     6-..8...8...8...
    b550:	00002e38 00002d92 cac4c9c3              8....-......

0000b55c <__FUNCTION__.12259>:
    b55c:	5f697073 00646d63                       spi_cmd.

0000b564 <__FUNCTION__.12266>:
    b564:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

0000b574 <__FUNCTION__.12275>:
    b574:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0000b580 <__FUNCTION__.12291>:
    b580:	5f697073 61746164 6165725f 00000064     spi_data_read...

0000b590 <__FUNCTION__.12306>:
    b590:	5f697073 61746164 6972775f 00006574     spi_data_write..

0000b5a0 <__FUNCTION__.12318>:
    b5a0:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0000b5b0 <__FUNCTION__.12329>:
    b5b0:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0000b5c0 <__FUNCTION__.12341>:
    b5c0:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0000b5d0 <__FUNCTION__.12354>:
    b5d0:	735f6d6e 725f6970 00646165              nm_spi_read.

0000b5dc <__FUNCTION__.12375>:
    b5dc:	735f6d6e 695f6970 0074696e              nm_spi_init.

0000b5e8 <crc7_syndrome_table>:
    b5e8:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
    b5f8:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
    b608:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
    b618:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
    b628:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
    b638:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
    b648:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
    b658:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
    b668:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
    b678:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
    b688:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
    b698:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
    b6a8:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
    b6b8:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
    b6c8:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
    b6d8:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
    b6e8:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    b6f8:	6e692064 6e726574 72206c61 20646165     d internal read 
    b708:	746f7270 6c6f636f 74697720 52432068     protocol with CR
    b718:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
    b728:	20687469 20435243 2e66666f 00002e2e     ith CRC off.....
    b738:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    b748:	6e692064 6e726574 72206c61 20646165     d internal read 
    b758:	746f7270 6c6f636f 002e2e2e 696d6e5b     protocol....[nmi
    b768:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
    b778:	6e726574 77206c61 65746972 6f727020     ternal write pro
    b788:	6f636f74 6572206c 2e2e2e67 00000000     tocol reg.......
    b798:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
    b7a8:	20646d63 64616572 69686320 64692070     cmd read chip id
    b7b8:	002e2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    b7c8:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
    b7d8:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
    b7e8:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    b7f8:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
    b808:	202c6573 64616572 6f6c6220 28206b63     se, read block (
    b818:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
    b828:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    b838:	206b636f 61746164 61657220 2e2e2e64     ock data read...
    b848:	00000000 65736552 6e612074 65722064     ....Reset and re
    b858:	20797274 25206425 2520786c 00000a64     try %d %lx %d...
    b868:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    b878:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
    b888:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
    b898:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
    b8a8:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
    b8b8:	69727720 62206574 6b636f6c 30252820      write block (%0
    b8c8:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
    b8d8:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    b8e8:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
    b8f8:	20737562 6f727265 2e2e2e72 00000000     bus error.......
    b908:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    b918:	61642064 62206174 6b636f6c 69727720     d data block wri
    b928:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
    b938:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    b948:	656c6961 61642064 62206174 6b636f6c     ailed data block
    b958:	63726320 69727720 202c6574 20737562      crc write, bus 
    b968:	6f727265 2e2e2e72 00000000 696d6e5b     error.......[nmi
    b978:	69707320 46203a5d 656c6961 75622064      spi]: Failed bu
    b988:	72652073 2e726f72 00002e2e 696d6e5b     s error.....[nmi
    b998:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    b9a8:	72206174 6f707365 2065736e 64616572     ta response read
    b9b8:	7825202c 20782520 000a7825 696d6e5b     , %x %x %x..[nmi
    b9c8:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    b9d8:	206b636f 61746164 69727720 2e2e6574     ock data write..
    b9e8:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    b9f8:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
    ba08:	73756220 72726520 2e2e726f 0000002e      bus error......
    ba18:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    ba28:	6d632064 65722064 6e6f7073 72206573     d cmd response r
    ba38:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
    ba48:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    ba58:	656c6961 61642064 72206174 6f707365     ailed data respo
    ba68:	2065736e 64616572 7562202c 72652073     nse read, bus er
    ba78:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
    ba88:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
    ba98:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
    baa8:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
    bab8:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    bac8:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
    bad8:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
    bae8:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    baf8:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
    bb08:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
    bb18:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    bb28:	72202c64 20646165 20676572 38302528     d, read reg (%08
    bb38:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
    bb48:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
    bb58:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
    bb68:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    bb78:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    bb88:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
    bb98:	6e612074 65722064 20797274 25206425     t and retry %d %
    bba8:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
    bbb8:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
    bbc8:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
    bbd8:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    bbe8:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
    bbf8:	74697277 65722065 25282067 29783830     write reg (%08x)
    bc08:	0a2e2e2e 00000000 65736552 6e612074     ........Reset an
    bc18:	65722064 20797274 25206425 2520786c     d retry %d %lx %
    bc28:	000a786c 52524528 75432952 6e657272     lx..(ERRR)Curren
    bc38:	253c2074 000a3e64 6b636f53 206f7420     t <%d>..Sock to 
    bc48:	656c6564 3c206574 0a3e6425 00000000     delete <%d>.....
    bc58:	6b636f53 25207465 65732064 6f697373     Socket %d sessio
    bc68:	4449206e 25203d20 000a0d64 42000800     n ID = %d......B
    bc78:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    bc88:	42001c00 000053ea 000053e6 000053e6     ...B.S...S...S..
    bc98:	00005448 00005448 000053fe 000053f0     HT..HT...S...S..
    bca8:	00005404 00005436 00005608 000055e8     .T..6T...V...U..
    bcb8:	000055e8 00005674 000055fa 00005616     .U..tV...U...V..
    bcc8:	000055ec 00005624 00005664              .U..$V..dV..

0000bcd4 <_tcc_apbcmasks>:
    bcd4:	00000100 00000200 00000400              ............

0000bce0 <_tcc_cc_nums>:
    bce0:	00020204                                ....

0000bce4 <_tcc_gclk_ids>:
    bce4:	001b1a1a                                ....

0000bce8 <_tcc_maxs>:
    bce8:	00ffffff 00ffffff 0000ffff              ............

0000bcf4 <_tcc_ow_nums>:
    bcf4:	00020408                                ....

0000bcf8 <_tcc_intflag>:
    bcf8:	00000001 00000002 00000004 00000008     ................
    bd08:	00001000 00002000 00004000 00008000     ..... ...@......
    bd18:	00010000 00020000 00040000 00080000     ................

0000bd28 <tcc_interrupt_vectors.12442>:
    bd28:	0011100f 42002000 42002400 42002800     ..... .B.$.B.(.B
    bd38:	20746f6e 73657270 00746e65 57202d2d     not present.-- W
    bd48:	31434e49 20303035 462d6957 514d2069     INC1500 Wi-Fi MQ
    bd58:	63205454 20746168 6d617865 20656c70     TT chat example 
    bd68:	0a0d2d2d 53202d2d 32444d41 50585f31     --..-- SAMD21_XP
    bd78:	4e49414c 505f4445 2d204f52 2d0a0d2d     LAINED_PRO --..-
    bd88:	6f43202d 6c69706d 203a6465 2072614d     - Compiled: Mar 
    bd98:	32203732 20383130 303a3831 32323a37     27 2018 18:07:22
    bda8:	0d2d2d20 00000000 72657355 25203a20      --.....User : %
    bdb8:	000a0d73 73257325 00000000 6e69616d     s...%s%s....main
    bdc8:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
    bdd8:	6c6c6163 72726520 2821726f 0d296425     call error!(%d).
    bde8:	0000000a 5454514d 696e6920 6c616974     ....MQTT initial
    bdf8:	74617a69 206e6f69 6c696166 202e6465     ization failed. 
    be08:	6f727245 6f632072 69206564 25282073     Error code is (%
    be18:	0a0d2964 00000000 5454514d 67657220     d)......MQTT reg
    be28:	65747369 61632072 61626c6c 66206b63     ister callback f
    be38:	656c6961 45202e64 726f7272 646f6320     ailed. Error cod
    be48:	73692065 64252820 000a0d29 74730a0d     e is (%d).....st
    be58:	69747261 2e2e676e 00000d2e 736e6573     arting......sens
    be68:	6920726f 73252073 00000a0d 206f7242     or is %s....Bro 
    be78:	61632049 2074276e 7361656d 20657275     I can't measure 
    be88:	20656874 706d6554 48202620 64696d75     the Temp & Humid
    be98:	2e797469 65724120 756f7920 72757320     ity. Are you sur
    bea8:	6f792065 6c702075 65676775 68742064     e you plugged th
    beb8:	65732065 726f736e 3f6e6920 00000000     e sensor in?....
    bec8:	206f7242 61632049 2074276e 7361656d     Bro I can't meas
    bed8:	20657275 20656874 20434f56 4f432026     ure the VOC & CO
    bee8:	41202e32 79206572 7320756f 20657275     2. Are you sure 
    bef8:	20756f79 67756c70 20646567 20656874     you plugged the 
    bf08:	2d514169 65726f43 3f6e6920 00000000     iAQ-Core in?....
    bf18:	61746144 6e657320 666f2074 74796220     Data sent of byt
    bf28:	25207365 0a0d2064 00000000 54737953     es %d ......SysT
    bf38:	206b6369 666e6f63 72756769 6f697461     ick configuratio
    bf48:	7265206e 00726f72 0a0d7325 00000000     n error.%s......

0000bf58 <main_mqtt_broker>:
    bf58:	2e323831 2e333631 2e323131 00373032     182.163.112.207.
    bf68:	6e6e6f43 20746365 6c696166 206f7420     Connect fail to 
    bf78:	76726573 25287265 20212973 72746572     server(%s)! retr
    bf88:	74692079 74756120 74616d6f 6c616369     y it automatical
    bf98:	0d2e796c 0000000a 786f6264 7461642f     ly......dbox/dat
    bfa8:	00232f61 786f6264 7461642f 00002f61     a/#.dbox/data/..
    bfb8:	73627553 62697263 74206465 6874206f     Subscribed to th
    bfc8:	6f742065 3a636970 0d732520 0000000a     e topic: %s.....
    bfd8:	70657250 74617261 206e6f69 7420666f     Preparation of t
    bfe8:	63206568 20746168 20736168 6e656562     he chat has been
    bff8:	6d6f6320 74656c70 0d2e6465 00000000      completed......
    c008:	5454514d 6f726220 2072656b 6c636564     MQTT broker decl
    c018:	20656e69 72756f79 63636120 21737365     ine your access!
    c028:	72726520 6320726f 2065646f 0a0d6425      error code %d..
    c038:	00000000 203e3e20 00000000 0000000d     .... >> ........
    c048:	5454514d 73696420 6e6e6f63 65746365     MQTT disconnecte
    c058:	00000d64 462d6957 6f632069 63656e6e     d...Wi-Fi connec
    c068:	0d646574 00000000 462d6957 69642069     ted.....Wi-Fi di
    c078:	6e6f6373 7463656e 000d6465 70707573     sconnected..supp
    c088:	3174726f 00003332 61746144 74666f53     ort123..DataSoft
    c098:	4669575f 00000069 462d6957 50492069     _WiFi...Wi-Fi IP
    c0a8:	20736920 252e7525 75252e75 0d75252e      is %u.%u.%u.%u.
    c0b8:	0000000a 7349514d 00007064 000086f4     ....MQIsdp......
    c0c8:	000086d6 00008690 000085ae 00008690     ................
    c0d8:	000086c8 00008690 000085ae 000086d6     ................
    c0e8:	000086d6 000086c8 000085ae 000085a6     ................
    c0f8:	000085a6 000085a6 0000890c 00008d54     ............T...
    c108:	00008c14 00008c14 00008c10 00008d2c     ............,...
    c118:	00008d2c 00008d1e 00008c10 00008d2c     ,...........,...
    c128:	00008d1e 00008d2c 00008c10 00008d34     ....,.......4...
    c138:	00008d34 00008d34 00008f38              4...4...8...

0000c144 <_global_impure_ptr>:
    c144:	20000084                                ... 

0000c148 <__sf_fake_stderr>:
	...

0000c168 <__sf_fake_stdin>:
	...

0000c188 <__sf_fake_stdout>:
	...
    c1a8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    c1b8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    c1c8:	31300046 35343332 39383736 64636261     F.0123456789abcd
    c1d8:	00006665                                ef..

0000c1dc <_init>:
    c1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c1de:	46c0      	nop			; (mov r8, r8)
    c1e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c1e2:	bc08      	pop	{r3}
    c1e4:	469e      	mov	lr, r3
    c1e6:	4770      	bx	lr

0000c1e8 <__init_array_start>:
    c1e8:	000000dd 	.word	0x000000dd

0000c1ec <_fini>:
    c1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c1ee:	46c0      	nop			; (mov r8, r8)
    c1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c1f2:	bc08      	pop	{r3}
    c1f4:	469e      	mov	lr, r3
    c1f6:	4770      	bx	lr

0000c1f8 <__fini_array_start>:
    c1f8:	000000b5 	.word	0x000000b5
