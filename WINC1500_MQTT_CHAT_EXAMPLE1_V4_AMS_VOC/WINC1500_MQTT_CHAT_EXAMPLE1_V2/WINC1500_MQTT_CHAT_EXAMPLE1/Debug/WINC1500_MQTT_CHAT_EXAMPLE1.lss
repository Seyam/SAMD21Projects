
WINC1500_MQTT_CHAT_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c448  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  0000c448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000468  20000070  0000c4b8  00020070  2**2
                  ALLOC
  3 .stack        00002000  200004d8  0000c920  00020070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  5 .comment      000000ca  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  6 .debug_info   0006dcf1  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00009438  00000000  00000000  0008de53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000151d0  00000000  00000000  0009728b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000fc8  00000000  00000000  000ac45b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001620  00000000  00000000  000ad423  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00025716  00000000  00000000  000aea43  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00020d22  00000000  00000000  000d4159  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009a950  00000000  00000000  000f4e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000036b4  00000000  00000000  0018f7cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d8 24 00 20 8d 61 00 00 89 61 00 00 89 61 00 00     .$. .a...a...a..
	...
      2c:	89 61 00 00 00 00 00 00 00 00 00 00 89 61 00 00     .a...........a..
      3c:	89 61 00 00 89 61 00 00 89 61 00 00 89 61 00 00     .a...a...a...a..
      4c:	89 61 00 00 99 43 00 00 89 61 00 00 89 61 00 00     .a...C...a...a..
      5c:	89 61 00 00 89 61 00 00 05 49 00 00 15 49 00 00     .a...a...I...I..
      6c:	25 49 00 00 35 49 00 00 45 49 00 00 55 49 00 00     %I..5I..EI..UI..
      7c:	59 61 00 00 69 61 00 00 79 61 00 00 89 61 00 00     Ya..ia..ya...a..
      8c:	89 61 00 00 89 61 00 00 89 61 00 00 89 61 00 00     .a...a...a...a..
      9c:	89 61 00 00 89 61 00 00 89 61 00 00 89 61 00 00     .a...a...a...a..
      ac:	89 61 00 00 00 00 00 00                             .a......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	0000c448 	.word	0x0000c448

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000074 	.word	0x20000074
     108:	0000c448 	.word	0x0000c448
     10c:	0000c448 	.word	0x0000c448
     110:	00000000 	.word	0x00000000

00000114 <ams_sensor_read>:
#include "i2c_master.h"

const uint8_t AMS_ADDRESS_AND_READ  = 0x5a;

enum status_code ams_sensor_read(struct i2c_master_module *i2c_master_instance_ptr, int *voc, int *co2)
{
     114:	b570      	push	{r4, r5, r6, lr}
     116:	b086      	sub	sp, #24
     118:	0004      	movs	r4, r0
     11a:	000d      	movs	r5, r1
     11c:	0016      	movs	r6, r2
    uint8_t data[9];
    struct i2c_master_packet packet = {
     11e:	220c      	movs	r2, #12
     120:	2100      	movs	r1, #0
     122:	4668      	mov	r0, sp
     124:	4b12      	ldr	r3, [pc, #72]	; (170 <ams_sensor_read+0x5c>)
     126:	4798      	blx	r3
     128:	235a      	movs	r3, #90	; 0x5a
     12a:	466a      	mov	r2, sp
     12c:	8013      	strh	r3, [r2, #0]
     12e:	3b51      	subs	r3, #81	; 0x51
     130:	8053      	strh	r3, [r2, #2]
     132:	ab03      	add	r3, sp, #12
     134:	9301      	str	r3, [sp, #4]
	    .data = data,
	    .ten_bit_address = false,
	    .high_speed = false,
    };
    // stop and nack enabled
	enum status_code ret = i2c_master_read_packet_wait(i2c_master_instance_ptr, &packet);
     136:	4669      	mov	r1, sp
     138:	0020      	movs	r0, r4
     13a:	4b0e      	ldr	r3, [pc, #56]	; (174 <ams_sensor_read+0x60>)
     13c:	4798      	blx	r3
    //print_to_terminal("ret in  shtc1_read_async_result = 0x%x\n", ret);
    
    if (ret)
     13e:	2800      	cmp	r0, #0
     140:	d10e      	bne.n	160 <ams_sensor_read+0x4c>
		return ret;
    if (data[2])
     142:	ab03      	add	r3, sp, #12
     144:	7899      	ldrb	r1, [r3, #2]
     146:	2900      	cmp	r1, #0
     148:	d10c      	bne.n	164 <ams_sensor_read+0x50>
	{
		printf("data[2] status = 0x%x\n", data[2]);	
		return STATUS_ERR_BAD_DATA;
	}
    
	*co2 = (data[0] << 8) + data[1] ;
     14a:	aa03      	add	r2, sp, #12
     14c:	7813      	ldrb	r3, [r2, #0]
     14e:	021b      	lsls	r3, r3, #8
     150:	7851      	ldrb	r1, [r2, #1]
     152:	185b      	adds	r3, r3, r1
     154:	6033      	str	r3, [r6, #0]
	*voc = (data[7] << 8) + data[8] ;
     156:	79d3      	ldrb	r3, [r2, #7]
     158:	021b      	lsls	r3, r3, #8
     15a:	7a12      	ldrb	r2, [r2, #8]
     15c:	189b      	adds	r3, r3, r2
     15e:	602b      	str	r3, [r5, #0]

    return STATUS_OK;	
	
};
     160:	b006      	add	sp, #24
     162:	bd70      	pop	{r4, r5, r6, pc}
		printf("data[2] status = 0x%x\n", data[2]);	
     164:	4804      	ldr	r0, [pc, #16]	; (178 <ams_sensor_read+0x64>)
     166:	4b05      	ldr	r3, [pc, #20]	; (17c <ams_sensor_read+0x68>)
     168:	4798      	blx	r3
		return STATUS_ERR_BAD_DATA;
     16a:	2013      	movs	r0, #19
     16c:	e7f8      	b.n	160 <ams_sensor_read+0x4c>
     16e:	46c0      	nop			; (mov r8, r8)
     170:	000099cf 	.word	0x000099cf
     174:	00000bcd 	.word	0x00000bcd
     178:	0000aecc 	.word	0x0000aecc
     17c:	00009b31 	.word	0x00009b31

00000180 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     180:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     182:	2200      	movs	r2, #0
     184:	2300      	movs	r3, #0
     186:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     188:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     18a:	2100      	movs	r1, #0
     18c:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     18e:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     190:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     192:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     194:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     196:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     198:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     19a:	24c0      	movs	r4, #192	; 0xc0
     19c:	0164      	lsls	r4, r4, #5
     19e:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     1a0:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     1a2:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     1a4:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     1a6:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     1a8:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     1aa:	242a      	movs	r4, #42	; 0x2a
     1ac:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     1ae:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     1b0:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     1b2:	3c06      	subs	r4, #6
     1b4:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     1b6:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     1b8:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     1ba:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     1bc:	232b      	movs	r3, #43	; 0x2b
     1be:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     1c0:	3301      	adds	r3, #1
     1c2:	54c1      	strb	r1, [r0, r3]
}
     1c4:	bd10      	pop	{r4, pc}
	...

000001c8 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1ca:	46d6      	mov	lr, sl
     1cc:	464f      	mov	r7, r9
     1ce:	4646      	mov	r6, r8
     1d0:	b5c0      	push	{r6, r7, lr}
     1d2:	b096      	sub	sp, #88	; 0x58
     1d4:	0007      	movs	r7, r0
     1d6:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     1d8:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     1da:	4acb      	ldr	r2, [pc, #812]	; (508 <adc_init+0x340>)
     1dc:	6a10      	ldr	r0, [r2, #32]
     1de:	2380      	movs	r3, #128	; 0x80
     1e0:	025b      	lsls	r3, r3, #9
     1e2:	4303      	orrs	r3, r0
     1e4:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     1e6:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     1e8:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     1ea:	07db      	lsls	r3, r3, #31
     1ec:	d505      	bpl.n	1fa <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     1ee:	b016      	add	sp, #88	; 0x58
     1f0:	bc1c      	pop	{r2, r3, r4}
     1f2:	4690      	mov	r8, r2
     1f4:	4699      	mov	r9, r3
     1f6:	46a2      	mov	sl, r4
     1f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     1fa:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     1fc:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     1fe:	079b      	lsls	r3, r3, #30
     200:	d4f5      	bmi.n	1ee <adc_init+0x26>
	module_inst->reference = config->reference;
     202:	7873      	ldrb	r3, [r6, #1]
     204:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     206:	2b00      	cmp	r3, #0
     208:	d104      	bne.n	214 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     20a:	4ac0      	ldr	r2, [pc, #768]	; (50c <adc_init+0x344>)
     20c:	6c13      	ldr	r3, [r2, #64]	; 0x40
     20e:	2104      	movs	r1, #4
     210:	430b      	orrs	r3, r1
     212:	6413      	str	r3, [r2, #64]	; 0x40
	Adc *const adc_module = module_inst->hw;
     214:	683b      	ldr	r3, [r7, #0]
     216:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     218:	7833      	ldrb	r3, [r6, #0]
     21a:	466a      	mov	r2, sp
     21c:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     21e:	4669      	mov	r1, sp
     220:	201e      	movs	r0, #30
     222:	4bbb      	ldr	r3, [pc, #748]	; (510 <adc_init+0x348>)
     224:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     226:	201e      	movs	r0, #30
     228:	4bba      	ldr	r3, [pc, #744]	; (514 <adc_init+0x34c>)
     22a:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     22c:	232c      	movs	r3, #44	; 0x2c
     22e:	5cf2      	ldrb	r2, [r6, r3]
     230:	2a00      	cmp	r2, #0
     232:	d054      	beq.n	2de <adc_init+0x116>
		uint8_t offset = config->pin_scan.offset_start_scan;
     234:	3b01      	subs	r3, #1
     236:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     238:	7b33      	ldrb	r3, [r6, #12]
     23a:	18eb      	adds	r3, r5, r3
     23c:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     23e:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     240:	b2c9      	uxtb	r1, r1
     242:	428b      	cmp	r3, r1
     244:	d221      	bcs.n	28a <adc_init+0xc2>
     246:	1952      	adds	r2, r2, r5
     248:	b2d3      	uxtb	r3, r2
     24a:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     24c:	4bb2      	ldr	r3, [pc, #712]	; (518 <adc_init+0x350>)
     24e:	469a      	mov	sl, r3
     250:	e003      	b.n	25a <adc_init+0x92>
			offset++;
     252:	3501      	adds	r5, #1
     254:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     256:	45a9      	cmp	r9, r5
     258:	d017      	beq.n	28a <adc_init+0xc2>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     25a:	240f      	movs	r4, #15
     25c:	402c      	ands	r4, r5
     25e:	7b33      	ldrb	r3, [r6, #12]
     260:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     262:	2250      	movs	r2, #80	; 0x50
     264:	49ad      	ldr	r1, [pc, #692]	; (51c <adc_init+0x354>)
     266:	a802      	add	r0, sp, #8
     268:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     26a:	2c13      	cmp	r4, #19
     26c:	d8f1      	bhi.n	252 <adc_init+0x8a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     26e:	00a4      	lsls	r4, r4, #2
     270:	ab02      	add	r3, sp, #8
     272:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     274:	a901      	add	r1, sp, #4
     276:	2300      	movs	r3, #0
     278:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     27a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     27c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     27e:	3301      	adds	r3, #1
     280:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     282:	b2c0      	uxtb	r0, r0
     284:	4ba6      	ldr	r3, [pc, #664]	; (520 <adc_init+0x358>)
     286:	4798      	blx	r3
     288:	e7e3      	b.n	252 <adc_init+0x8a>
		_adc_configure_ain_pin(config->negative_input);
     28a:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     28c:	2250      	movs	r2, #80	; 0x50
     28e:	49a3      	ldr	r1, [pc, #652]	; (51c <adc_init+0x354>)
     290:	a802      	add	r0, sp, #8
     292:	4ba1      	ldr	r3, [pc, #644]	; (518 <adc_init+0x350>)
     294:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     296:	2c13      	cmp	r4, #19
     298:	d913      	bls.n	2c2 <adc_init+0xfa>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     29a:	7d73      	ldrb	r3, [r6, #21]
     29c:	009b      	lsls	r3, r3, #2
     29e:	b2db      	uxtb	r3, r3
     2a0:	4642      	mov	r2, r8
     2a2:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     2a4:	7db3      	ldrb	r3, [r6, #22]
     2a6:	01db      	lsls	r3, r3, #7
     2a8:	7872      	ldrb	r2, [r6, #1]
     2aa:	4313      	orrs	r3, r2
     2ac:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     2ae:	4642      	mov	r2, r8
     2b0:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     2b2:	7933      	ldrb	r3, [r6, #4]
     2b4:	2b34      	cmp	r3, #52	; 0x34
     2b6:	d900      	bls.n	2ba <adc_init+0xf2>
     2b8:	e178      	b.n	5ac <adc_init+0x3e4>
     2ba:	009b      	lsls	r3, r3, #2
     2bc:	4a99      	ldr	r2, [pc, #612]	; (524 <adc_init+0x35c>)
     2be:	58d3      	ldr	r3, [r2, r3]
     2c0:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2c2:	00a4      	lsls	r4, r4, #2
     2c4:	ab02      	add	r3, sp, #8
     2c6:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2c8:	a901      	add	r1, sp, #4
     2ca:	2300      	movs	r3, #0
     2cc:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     2ce:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2d0:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2d2:	3301      	adds	r3, #1
     2d4:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     2d6:	b2c0      	uxtb	r0, r0
     2d8:	4b91      	ldr	r3, [pc, #580]	; (520 <adc_init+0x358>)
     2da:	4798      	blx	r3
     2dc:	e7dd      	b.n	29a <adc_init+0xd2>
		_adc_configure_ain_pin(config->positive_input);
     2de:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     2e0:	2250      	movs	r2, #80	; 0x50
     2e2:	498e      	ldr	r1, [pc, #568]	; (51c <adc_init+0x354>)
     2e4:	a802      	add	r0, sp, #8
     2e6:	4b8c      	ldr	r3, [pc, #560]	; (518 <adc_init+0x350>)
     2e8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2ea:	2c13      	cmp	r4, #19
     2ec:	d915      	bls.n	31a <adc_init+0x152>
		_adc_configure_ain_pin(config->negative_input);
     2ee:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     2f0:	2250      	movs	r2, #80	; 0x50
     2f2:	498a      	ldr	r1, [pc, #552]	; (51c <adc_init+0x354>)
     2f4:	a802      	add	r0, sp, #8
     2f6:	4b88      	ldr	r3, [pc, #544]	; (518 <adc_init+0x350>)
     2f8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2fa:	2c13      	cmp	r4, #19
     2fc:	d8cd      	bhi.n	29a <adc_init+0xd2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2fe:	00a4      	lsls	r4, r4, #2
     300:	ab02      	add	r3, sp, #8
     302:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     304:	a901      	add	r1, sp, #4
     306:	2300      	movs	r3, #0
     308:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     30a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     30c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     30e:	3301      	adds	r3, #1
     310:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     312:	b2c0      	uxtb	r0, r0
     314:	4b82      	ldr	r3, [pc, #520]	; (520 <adc_init+0x358>)
     316:	4798      	blx	r3
     318:	e7bf      	b.n	29a <adc_init+0xd2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     31a:	00a4      	lsls	r4, r4, #2
     31c:	ab02      	add	r3, sp, #8
     31e:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     320:	a901      	add	r1, sp, #4
     322:	2300      	movs	r3, #0
     324:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     326:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     328:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     32a:	3301      	adds	r3, #1
     32c:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     32e:	b2c0      	uxtb	r0, r0
     330:	4b7b      	ldr	r3, [pc, #492]	; (520 <adc_init+0x358>)
     332:	4798      	blx	r3
     334:	e7db      	b.n	2ee <adc_init+0x126>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     336:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     338:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     33a:	2102      	movs	r1, #2
     33c:	e01a      	b.n	374 <adc_init+0x1ac>
		adjres = config->divide_result;
     33e:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     340:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     342:	2410      	movs	r4, #16
     344:	e016      	b.n	374 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     346:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     348:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     34a:	2101      	movs	r1, #1
     34c:	e012      	b.n	374 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     34e:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     350:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     352:	2100      	movs	r1, #0
     354:	e00e      	b.n	374 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     356:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     358:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     35a:	2100      	movs	r1, #0
     35c:	e00a      	b.n	374 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     35e:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     360:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     362:	2100      	movs	r1, #0
     364:	e006      	b.n	374 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     366:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     368:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     36a:	2100      	movs	r1, #0
     36c:	e002      	b.n	374 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     36e:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     370:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     372:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     374:	0109      	lsls	r1, r1, #4
     376:	2270      	movs	r2, #112	; 0x70
     378:	400a      	ands	r2, r1
     37a:	4313      	orrs	r3, r2
     37c:	4642      	mov	r2, r8
     37e:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     380:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     382:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     384:	2b3f      	cmp	r3, #63	; 0x3f
     386:	d900      	bls.n	38a <adc_init+0x1c2>
     388:	e731      	b.n	1ee <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     38a:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     38c:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     38e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     390:	b25b      	sxtb	r3, r3
     392:	2b00      	cmp	r3, #0
     394:	dbfb      	blt.n	38e <adc_init+0x1c6>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     396:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     398:	8872      	ldrh	r2, [r6, #2]
     39a:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     39c:	2224      	movs	r2, #36	; 0x24
     39e:	5cb2      	ldrb	r2, [r6, r2]
     3a0:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     3a2:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     3a4:	7d32      	ldrb	r2, [r6, #20]
     3a6:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     3a8:	4313      	orrs	r3, r2
     3aa:	7cb2      	ldrb	r2, [r6, #18]
     3ac:	0052      	lsls	r2, r2, #1
     3ae:	4313      	orrs	r3, r2
     3b0:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     3b2:	4642      	mov	r2, r8
     3b4:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     3b6:	7e33      	ldrb	r3, [r6, #24]
     3b8:	2b00      	cmp	r3, #0
     3ba:	d020      	beq.n	3fe <adc_init+0x236>
		switch (resolution) {
     3bc:	2c10      	cmp	r4, #16
     3be:	d100      	bne.n	3c2 <adc_init+0x1fa>
     3c0:	e0d6      	b.n	570 <adc_init+0x3a8>
     3c2:	d800      	bhi.n	3c6 <adc_init+0x1fe>
     3c4:	e080      	b.n	4c8 <adc_init+0x300>
     3c6:	2c20      	cmp	r4, #32
     3c8:	d100      	bne.n	3cc <adc_init+0x204>
     3ca:	e0b3      	b.n	534 <adc_init+0x36c>
     3cc:	2c30      	cmp	r4, #48	; 0x30
     3ce:	d116      	bne.n	3fe <adc_init+0x236>
			if (config->differential_mode &&
     3d0:	7cf2      	ldrb	r2, [r6, #19]
     3d2:	2a00      	cmp	r2, #0
     3d4:	d00a      	beq.n	3ec <adc_init+0x224>
					(config->window.window_lower_value > 127 ||
     3d6:	69f2      	ldr	r2, [r6, #28]
     3d8:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     3da:	2017      	movs	r0, #23
			if (config->differential_mode &&
     3dc:	2aff      	cmp	r2, #255	; 0xff
     3de:	d900      	bls.n	3e2 <adc_init+0x21a>
     3e0:	e705      	b.n	1ee <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     3e2:	6a32      	ldr	r2, [r6, #32]
     3e4:	3280      	adds	r2, #128	; 0x80
     3e6:	2aff      	cmp	r2, #255	; 0xff
     3e8:	d900      	bls.n	3ec <adc_init+0x224>
     3ea:	e700      	b.n	1ee <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     3ec:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     3ee:	69f2      	ldr	r2, [r6, #28]
     3f0:	2aff      	cmp	r2, #255	; 0xff
     3f2:	dd00      	ble.n	3f6 <adc_init+0x22e>
     3f4:	e6fb      	b.n	1ee <adc_init+0x26>
     3f6:	6a32      	ldr	r2, [r6, #32]
     3f8:	2aff      	cmp	r2, #255	; 0xff
     3fa:	dd00      	ble.n	3fe <adc_init+0x236>
     3fc:	e6f7      	b.n	1ee <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     3fe:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     400:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     402:	b252      	sxtb	r2, r2
     404:	2a00      	cmp	r2, #0
     406:	dbfb      	blt.n	400 <adc_init+0x238>
	adc_module->WINCTRL.reg = config->window.window_mode;
     408:	4642      	mov	r2, r8
     40a:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     40c:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     40e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     410:	b25b      	sxtb	r3, r3
     412:	2b00      	cmp	r3, #0
     414:	dbfb      	blt.n	40e <adc_init+0x246>
	adc_module->WINLT.reg =
     416:	8bb3      	ldrh	r3, [r6, #28]
     418:	4642      	mov	r2, r8
     41a:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     41c:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     41e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     420:	b25b      	sxtb	r3, r3
     422:	2b00      	cmp	r3, #0
     424:	dbfb      	blt.n	41e <adc_init+0x256>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     426:	8c33      	ldrh	r3, [r6, #32]
     428:	4642      	mov	r2, r8
     42a:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     42c:	232c      	movs	r3, #44	; 0x2c
     42e:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     430:	2b00      	cmp	r3, #0
     432:	d005      	beq.n	440 <adc_init+0x278>
		inputs_to_scan--;
     434:	3b01      	subs	r3, #1
     436:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     438:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     43a:	2b0f      	cmp	r3, #15
     43c:	d900      	bls.n	440 <adc_init+0x278>
     43e:	e6d6      	b.n	1ee <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     440:	222b      	movs	r2, #43	; 0x2b
     442:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     444:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     446:	290f      	cmp	r1, #15
     448:	d900      	bls.n	44c <adc_init+0x284>
     44a:	e6d0      	b.n	1ee <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     44c:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     44e:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     450:	b252      	sxtb	r2, r2
     452:	2a00      	cmp	r2, #0
     454:	dbfb      	blt.n	44e <adc_init+0x286>
			config->negative_input |
     456:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     458:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     45a:	4302      	orrs	r2, r0
     45c:	68b0      	ldr	r0, [r6, #8]
     45e:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     460:	0509      	lsls	r1, r1, #20
			config->negative_input |
     462:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     464:	041b      	lsls	r3, r3, #16
			config->negative_input |
     466:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     468:	4642      	mov	r2, r8
     46a:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     46c:	232a      	movs	r3, #42	; 0x2a
     46e:	5cf3      	ldrb	r3, [r6, r3]
     470:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     472:	230f      	movs	r3, #15
     474:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     476:	3315      	adds	r3, #21
     478:	5cf3      	ldrb	r3, [r6, r3]
     47a:	2b00      	cmp	r3, #0
     47c:	d012      	beq.n	4a4 <adc_init+0x2dc>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     47e:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     480:	4a29      	ldr	r2, [pc, #164]	; (528 <adc_init+0x360>)
			return STATUS_ERR_INVALID_ARG;
     482:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     484:	4293      	cmp	r3, r2
     486:	d900      	bls.n	48a <adc_init+0x2c2>
     488:	e6b1      	b.n	1ee <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     48a:	4642      	mov	r2, r8
     48c:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     48e:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     490:	2380      	movs	r3, #128	; 0x80
     492:	011b      	lsls	r3, r3, #4
     494:	18d3      	adds	r3, r2, r3
     496:	4924      	ldr	r1, [pc, #144]	; (528 <adc_init+0x360>)
     498:	b29b      	uxth	r3, r3
     49a:	428b      	cmp	r3, r1
     49c:	d900      	bls.n	4a0 <adc_init+0x2d8>
     49e:	e6a6      	b.n	1ee <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     4a0:	4643      	mov	r3, r8
     4a2:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     4a4:	4b21      	ldr	r3, [pc, #132]	; (52c <adc_init+0x364>)
     4a6:	681b      	ldr	r3, [r3, #0]
     4a8:	015b      	lsls	r3, r3, #5
     4aa:	22e0      	movs	r2, #224	; 0xe0
     4ac:	00d2      	lsls	r2, r2, #3
     4ae:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     4b0:	4a1f      	ldr	r2, [pc, #124]	; (530 <adc_init+0x368>)
     4b2:	6851      	ldr	r1, [r2, #4]
     4b4:	0149      	lsls	r1, r1, #5
     4b6:	6812      	ldr	r2, [r2, #0]
     4b8:	0ed2      	lsrs	r2, r2, #27
     4ba:	430a      	orrs	r2, r1
     4bc:	b2d2      	uxtb	r2, r2
			) |
     4be:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     4c0:	4642      	mov	r2, r8
     4c2:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     4c4:	2000      	movs	r0, #0
     4c6:	e692      	b.n	1ee <adc_init+0x26>
		switch (resolution) {
     4c8:	2c00      	cmp	r4, #0
     4ca:	d198      	bne.n	3fe <adc_init+0x236>
			if (config->differential_mode &&
     4cc:	7cf2      	ldrb	r2, [r6, #19]
     4ce:	2a00      	cmp	r2, #0
     4d0:	d00f      	beq.n	4f2 <adc_init+0x32a>
					(config->window.window_lower_value > 2047 ||
     4d2:	69f2      	ldr	r2, [r6, #28]
     4d4:	2180      	movs	r1, #128	; 0x80
     4d6:	0109      	lsls	r1, r1, #4
     4d8:	468c      	mov	ip, r1
     4da:	4462      	add	r2, ip
			if (config->differential_mode &&
     4dc:	4912      	ldr	r1, [pc, #72]	; (528 <adc_init+0x360>)
				return STATUS_ERR_INVALID_ARG;
     4de:	2017      	movs	r0, #23
			if (config->differential_mode &&
     4e0:	428a      	cmp	r2, r1
     4e2:	d900      	bls.n	4e6 <adc_init+0x31e>
     4e4:	e683      	b.n	1ee <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     4e6:	6a32      	ldr	r2, [r6, #32]
     4e8:	4462      	add	r2, ip
     4ea:	490f      	ldr	r1, [pc, #60]	; (528 <adc_init+0x360>)
     4ec:	428a      	cmp	r2, r1
     4ee:	d900      	bls.n	4f2 <adc_init+0x32a>
     4f0:	e67d      	b.n	1ee <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     4f2:	4a0d      	ldr	r2, [pc, #52]	; (528 <adc_init+0x360>)
				return STATUS_ERR_INVALID_ARG;
     4f4:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     4f6:	69f1      	ldr	r1, [r6, #28]
     4f8:	4291      	cmp	r1, r2
     4fa:	dd00      	ble.n	4fe <adc_init+0x336>
     4fc:	e677      	b.n	1ee <adc_init+0x26>
     4fe:	6a31      	ldr	r1, [r6, #32]
     500:	4291      	cmp	r1, r2
     502:	dd00      	ble.n	506 <adc_init+0x33e>
     504:	e673      	b.n	1ee <adc_init+0x26>
     506:	e77a      	b.n	3fe <adc_init+0x236>
     508:	40000400 	.word	0x40000400
     50c:	40000800 	.word	0x40000800
     510:	000059d1 	.word	0x000059d1
     514:	00005945 	.word	0x00005945
     518:	00009999 	.word	0x00009999
     51c:	0000afb8 	.word	0x0000afb8
     520:	00005ac9 	.word	0x00005ac9
     524:	0000aee4 	.word	0x0000aee4
     528:	00000fff 	.word	0x00000fff
     52c:	00806024 	.word	0x00806024
     530:	00806020 	.word	0x00806020
			if (config->differential_mode &&
     534:	7cf2      	ldrb	r2, [r6, #19]
     536:	2a00      	cmp	r2, #0
     538:	d00f      	beq.n	55a <adc_init+0x392>
					(config->window.window_lower_value > 511 ||
     53a:	69f2      	ldr	r2, [r6, #28]
     53c:	2180      	movs	r1, #128	; 0x80
     53e:	0089      	lsls	r1, r1, #2
     540:	468c      	mov	ip, r1
     542:	4462      	add	r2, ip
			if (config->differential_mode &&
     544:	491a      	ldr	r1, [pc, #104]	; (5b0 <adc_init+0x3e8>)
				return STATUS_ERR_INVALID_ARG;
     546:	2017      	movs	r0, #23
			if (config->differential_mode &&
     548:	428a      	cmp	r2, r1
     54a:	d900      	bls.n	54e <adc_init+0x386>
     54c:	e64f      	b.n	1ee <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     54e:	6a32      	ldr	r2, [r6, #32]
     550:	4462      	add	r2, ip
     552:	4917      	ldr	r1, [pc, #92]	; (5b0 <adc_init+0x3e8>)
     554:	428a      	cmp	r2, r1
     556:	d900      	bls.n	55a <adc_init+0x392>
     558:	e649      	b.n	1ee <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     55a:	4a15      	ldr	r2, [pc, #84]	; (5b0 <adc_init+0x3e8>)
				return STATUS_ERR_INVALID_ARG;
     55c:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     55e:	69f1      	ldr	r1, [r6, #28]
     560:	4291      	cmp	r1, r2
     562:	dd00      	ble.n	566 <adc_init+0x39e>
     564:	e643      	b.n	1ee <adc_init+0x26>
     566:	6a31      	ldr	r1, [r6, #32]
     568:	4291      	cmp	r1, r2
     56a:	dd00      	ble.n	56e <adc_init+0x3a6>
     56c:	e63f      	b.n	1ee <adc_init+0x26>
     56e:	e746      	b.n	3fe <adc_init+0x236>
			if (config->differential_mode &&
     570:	7cf2      	ldrb	r2, [r6, #19]
     572:	2a00      	cmp	r2, #0
     574:	d00f      	beq.n	596 <adc_init+0x3ce>
					(config->window.window_lower_value > 32767 ||
     576:	69f2      	ldr	r2, [r6, #28]
     578:	2180      	movs	r1, #128	; 0x80
     57a:	0209      	lsls	r1, r1, #8
     57c:	468c      	mov	ip, r1
     57e:	4462      	add	r2, ip
			if (config->differential_mode &&
     580:	490c      	ldr	r1, [pc, #48]	; (5b4 <adc_init+0x3ec>)
				return STATUS_ERR_INVALID_ARG;
     582:	2017      	movs	r0, #23
			if (config->differential_mode &&
     584:	428a      	cmp	r2, r1
     586:	d900      	bls.n	58a <adc_init+0x3c2>
     588:	e631      	b.n	1ee <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     58a:	6a32      	ldr	r2, [r6, #32]
     58c:	4462      	add	r2, ip
     58e:	4909      	ldr	r1, [pc, #36]	; (5b4 <adc_init+0x3ec>)
     590:	428a      	cmp	r2, r1
     592:	d900      	bls.n	596 <adc_init+0x3ce>
     594:	e62b      	b.n	1ee <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     596:	4a07      	ldr	r2, [pc, #28]	; (5b4 <adc_init+0x3ec>)
				return STATUS_ERR_INVALID_ARG;
     598:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     59a:	69f1      	ldr	r1, [r6, #28]
     59c:	4291      	cmp	r1, r2
     59e:	dd00      	ble.n	5a2 <adc_init+0x3da>
     5a0:	e625      	b.n	1ee <adc_init+0x26>
     5a2:	6a31      	ldr	r1, [r6, #32]
     5a4:	4291      	cmp	r1, r2
     5a6:	dd00      	ble.n	5aa <adc_init+0x3e2>
     5a8:	e621      	b.n	1ee <adc_init+0x26>
     5aa:	e728      	b.n	3fe <adc_init+0x236>
		return STATUS_ERR_INVALID_ARG;
     5ac:	2017      	movs	r0, #23
     5ae:	e61e      	b.n	1ee <adc_init+0x26>
     5b0:	000003ff 	.word	0x000003ff
     5b4:	0000ffff 	.word	0x0000ffff

000005b8 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     5b8:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     5ba:	2207      	movs	r2, #7
     5bc:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     5be:	421a      	tst	r2, r3
     5c0:	d1fc      	bne.n	5bc <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     5c2:	4770      	bx	lr

000005c4 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     5c4:	b5f0      	push	{r4, r5, r6, r7, lr}
     5c6:	46d6      	mov	lr, sl
     5c8:	464f      	mov	r7, r9
     5ca:	4646      	mov	r6, r8
     5cc:	b5c0      	push	{r6, r7, lr}
     5ce:	b08a      	sub	sp, #40	; 0x28
     5d0:	0006      	movs	r6, r0
     5d2:	000f      	movs	r7, r1
     5d4:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     5d6:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     5d8:	0008      	movs	r0, r1
     5da:	4ba0      	ldr	r3, [pc, #640]	; (85c <i2c_master_init+0x298>)
     5dc:	4798      	blx	r3
     5de:	4aa0      	ldr	r2, [pc, #640]	; (860 <i2c_master_init+0x29c>)
     5e0:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     5e2:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     5e4:	2301      	movs	r3, #1
     5e6:	40ab      	lsls	r3, r5
     5e8:	430b      	orrs	r3, r1
     5ea:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     5ec:	a909      	add	r1, sp, #36	; 0x24
     5ee:	7b23      	ldrb	r3, [r4, #12]
     5f0:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     5f2:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     5f4:	b2c5      	uxtb	r5, r0
     5f6:	0028      	movs	r0, r5
     5f8:	4b9a      	ldr	r3, [pc, #616]	; (864 <i2c_master_init+0x2a0>)
     5fa:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     5fc:	0028      	movs	r0, r5
     5fe:	4b9a      	ldr	r3, [pc, #616]	; (868 <i2c_master_init+0x2a4>)
     600:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     602:	7b20      	ldrb	r0, [r4, #12]
     604:	2100      	movs	r1, #0
     606:	4b99      	ldr	r3, [pc, #612]	; (86c <i2c_master_init+0x2a8>)
     608:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     60a:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     60c:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     60e:	079b      	lsls	r3, r3, #30
     610:	d505      	bpl.n	61e <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     612:	b00a      	add	sp, #40	; 0x28
     614:	bc1c      	pop	{r2, r3, r4}
     616:	4690      	mov	r8, r2
     618:	4699      	mov	r9, r3
     61a:	46a2      	mov	sl, r4
     61c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     61e:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     620:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     622:	07db      	lsls	r3, r3, #31
     624:	d4f5      	bmi.n	612 <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     626:	6830      	ldr	r0, [r6, #0]
     628:	4b8c      	ldr	r3, [pc, #560]	; (85c <i2c_master_init+0x298>)
     62a:	4699      	mov	r9, r3
     62c:	4798      	blx	r3
     62e:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     630:	498f      	ldr	r1, [pc, #572]	; (870 <i2c_master_init+0x2ac>)
     632:	4b90      	ldr	r3, [pc, #576]	; (874 <i2c_master_init+0x2b0>)
     634:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     636:	00ad      	lsls	r5, r5, #2
     638:	4b8f      	ldr	r3, [pc, #572]	; (878 <i2c_master_init+0x2b4>)
     63a:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
     63c:	2300      	movs	r3, #0
     63e:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
     640:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
     642:	2500      	movs	r5, #0
     644:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
     646:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
     648:	2225      	movs	r2, #37	; 0x25
     64a:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
     64c:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     64e:	3314      	adds	r3, #20
     650:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     652:	6833      	ldr	r3, [r6, #0]
     654:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     656:	0018      	movs	r0, r3
     658:	47c8      	blx	r9
     65a:	4681      	mov	r9, r0
	config->mux_position = SYSTEM_PINMUX_GPIO;
     65c:	2380      	movs	r3, #128	; 0x80
     65e:	aa08      	add	r2, sp, #32
     660:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     662:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     664:	2301      	movs	r3, #1
     666:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     668:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     66a:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     66c:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     66e:	2800      	cmp	r0, #0
     670:	d100      	bne.n	674 <i2c_master_init+0xb0>
     672:	e0af      	b.n	7d4 <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
     674:	ab08      	add	r3, sp, #32
     676:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     678:	2302      	movs	r3, #2
     67a:	aa08      	add	r2, sp, #32
     67c:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     67e:	0c00      	lsrs	r0, r0, #16
     680:	b2c0      	uxtb	r0, r0
     682:	0011      	movs	r1, r2
     684:	4b7d      	ldr	r3, [pc, #500]	; (87c <i2c_master_init+0x2b8>)
     686:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     688:	2f00      	cmp	r7, #0
     68a:	d100      	bne.n	68e <i2c_master_init+0xca>
     68c:	e0a7      	b.n	7de <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
     68e:	ab08      	add	r3, sp, #32
     690:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     692:	2302      	movs	r3, #2
     694:	aa08      	add	r2, sp, #32
     696:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     698:	0c3f      	lsrs	r7, r7, #16
     69a:	b2f8      	uxtb	r0, r7
     69c:	0011      	movs	r1, r2
     69e:	4b77      	ldr	r3, [pc, #476]	; (87c <i2c_master_init+0x2b8>)
     6a0:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     6a2:	8aa3      	ldrh	r3, [r4, #20]
     6a4:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     6a6:	8ae3      	ldrh	r3, [r4, #22]
     6a8:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     6aa:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     6ac:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     6ae:	2b00      	cmp	r3, #0
     6b0:	d104      	bne.n	6bc <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     6b2:	4b73      	ldr	r3, [pc, #460]	; (880 <i2c_master_init+0x2bc>)
     6b4:	789b      	ldrb	r3, [r3, #2]
     6b6:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     6b8:	0fdb      	lsrs	r3, r3, #31
     6ba:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     6bc:	68a1      	ldr	r1, [r4, #8]
     6be:	6923      	ldr	r3, [r4, #16]
     6c0:	430b      	orrs	r3, r1
     6c2:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     6c4:	2224      	movs	r2, #36	; 0x24
     6c6:	5ca2      	ldrb	r2, [r4, r2]
     6c8:	2a00      	cmp	r2, #0
     6ca:	d002      	beq.n	6d2 <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     6cc:	2280      	movs	r2, #128	; 0x80
     6ce:	05d2      	lsls	r2, r2, #23
     6d0:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     6d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     6d4:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     6d6:	222c      	movs	r2, #44	; 0x2c
     6d8:	5ca2      	ldrb	r2, [r4, r2]
     6da:	2a00      	cmp	r2, #0
     6dc:	d103      	bne.n	6e6 <i2c_master_init+0x122>
     6de:	2280      	movs	r2, #128	; 0x80
     6e0:	0492      	lsls	r2, r2, #18
     6e2:	4291      	cmp	r1, r2
     6e4:	d102      	bne.n	6ec <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     6e6:	2280      	movs	r2, #128	; 0x80
     6e8:	0512      	lsls	r2, r2, #20
     6ea:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     6ec:	222d      	movs	r2, #45	; 0x2d
     6ee:	5ca2      	ldrb	r2, [r4, r2]
     6f0:	2a00      	cmp	r2, #0
     6f2:	d002      	beq.n	6fa <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     6f4:	2280      	movs	r2, #128	; 0x80
     6f6:	0412      	lsls	r2, r2, #16
     6f8:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     6fa:	222e      	movs	r2, #46	; 0x2e
     6fc:	5ca2      	ldrb	r2, [r4, r2]
     6fe:	2a00      	cmp	r2, #0
     700:	d002      	beq.n	708 <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     702:	2280      	movs	r2, #128	; 0x80
     704:	03d2      	lsls	r2, r2, #15
     706:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     708:	4642      	mov	r2, r8
     70a:	6812      	ldr	r2, [r2, #0]
     70c:	4313      	orrs	r3, r2
     70e:	4642      	mov	r2, r8
     710:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     712:	2380      	movs	r3, #128	; 0x80
     714:	005b      	lsls	r3, r3, #1
     716:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     718:	4648      	mov	r0, r9
     71a:	3014      	adds	r0, #20
     71c:	b2c0      	uxtb	r0, r0
     71e:	4b59      	ldr	r3, [pc, #356]	; (884 <i2c_master_init+0x2c0>)
     720:	4798      	blx	r3
     722:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     724:	23fa      	movs	r3, #250	; 0xfa
     726:	009b      	lsls	r3, r3, #2
     728:	6822      	ldr	r2, [r4, #0]
     72a:	435a      	muls	r2, r3
     72c:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     72e:	6863      	ldr	r3, [r4, #4]
     730:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     732:	4d55      	ldr	r5, [pc, #340]	; (888 <i2c_master_init+0x2c4>)
     734:	47a8      	blx	r5
     736:	9000      	str	r0, [sp, #0]
     738:	9101      	str	r1, [sp, #4]
     73a:	464b      	mov	r3, r9
     73c:	0058      	lsls	r0, r3, #1
     73e:	47a8      	blx	r5
     740:	9002      	str	r0, [sp, #8]
     742:	9103      	str	r1, [sp, #12]
     744:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     746:	47a8      	blx	r5
     748:	9004      	str	r0, [sp, #16]
     74a:	9105      	str	r1, [sp, #20]
     74c:	4f4f      	ldr	r7, [pc, #316]	; (88c <i2c_master_init+0x2c8>)
     74e:	4a50      	ldr	r2, [pc, #320]	; (890 <i2c_master_init+0x2cc>)
     750:	4b50      	ldr	r3, [pc, #320]	; (894 <i2c_master_init+0x2d0>)
     752:	9800      	ldr	r0, [sp, #0]
     754:	9901      	ldr	r1, [sp, #4]
     756:	47b8      	blx	r7
     758:	0002      	movs	r2, r0
     75a:	000b      	movs	r3, r1
     75c:	9804      	ldr	r0, [sp, #16]
     75e:	9905      	ldr	r1, [sp, #20]
     760:	47b8      	blx	r7
     762:	4e4d      	ldr	r6, [pc, #308]	; (898 <i2c_master_init+0x2d4>)
     764:	2200      	movs	r2, #0
     766:	4b4d      	ldr	r3, [pc, #308]	; (89c <i2c_master_init+0x2d8>)
     768:	47b0      	blx	r6
     76a:	9004      	str	r0, [sp, #16]
     76c:	9105      	str	r1, [sp, #20]
     76e:	4648      	mov	r0, r9
     770:	47a8      	blx	r5
     772:	0002      	movs	r2, r0
     774:	000b      	movs	r3, r1
     776:	9804      	ldr	r0, [sp, #16]
     778:	9905      	ldr	r1, [sp, #20]
     77a:	47b8      	blx	r7
     77c:	0002      	movs	r2, r0
     77e:	000b      	movs	r3, r1
     780:	4d47      	ldr	r5, [pc, #284]	; (8a0 <i2c_master_init+0x2dc>)
     782:	9800      	ldr	r0, [sp, #0]
     784:	9901      	ldr	r1, [sp, #4]
     786:	47a8      	blx	r5
     788:	9a02      	ldr	r2, [sp, #8]
     78a:	9b03      	ldr	r3, [sp, #12]
     78c:	47b0      	blx	r6
     78e:	2200      	movs	r2, #0
     790:	4b44      	ldr	r3, [pc, #272]	; (8a4 <i2c_master_init+0x2e0>)
     792:	47a8      	blx	r5
     794:	9a02      	ldr	r2, [sp, #8]
     796:	9b03      	ldr	r3, [sp, #12]
     798:	4d43      	ldr	r5, [pc, #268]	; (8a8 <i2c_master_init+0x2e4>)
     79a:	47a8      	blx	r5
     79c:	4b43      	ldr	r3, [pc, #268]	; (8ac <i2c_master_init+0x2e8>)
     79e:	4798      	blx	r3
     7a0:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     7a2:	2380      	movs	r3, #128	; 0x80
     7a4:	049b      	lsls	r3, r3, #18
     7a6:	68a2      	ldr	r2, [r4, #8]
     7a8:	429a      	cmp	r2, r3
     7aa:	d01e      	beq.n	7ea <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     7ac:	0003      	movs	r3, r0
     7ae:	2040      	movs	r0, #64	; 0x40
     7b0:	2dff      	cmp	r5, #255	; 0xff
     7b2:	d900      	bls.n	7b6 <i2c_master_init+0x1f2>
     7b4:	e72d      	b.n	612 <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     7b6:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     7b8:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     7ba:	25ff      	movs	r5, #255	; 0xff
     7bc:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     7be:	0624      	lsls	r4, r4, #24
     7c0:	4325      	orrs	r5, r4
     7c2:	0400      	lsls	r0, r0, #16
     7c4:	23ff      	movs	r3, #255	; 0xff
     7c6:	041b      	lsls	r3, r3, #16
     7c8:	4018      	ands	r0, r3
     7ca:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     7cc:	4643      	mov	r3, r8
     7ce:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     7d0:	2000      	movs	r0, #0
     7d2:	e71e      	b.n	612 <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     7d4:	2100      	movs	r1, #0
     7d6:	4640      	mov	r0, r8
     7d8:	4b35      	ldr	r3, [pc, #212]	; (8b0 <i2c_master_init+0x2ec>)
     7da:	4798      	blx	r3
     7dc:	e74a      	b.n	674 <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     7de:	2101      	movs	r1, #1
     7e0:	4640      	mov	r0, r8
     7e2:	4b33      	ldr	r3, [pc, #204]	; (8b0 <i2c_master_init+0x2ec>)
     7e4:	4798      	blx	r3
     7e6:	0007      	movs	r7, r0
     7e8:	e751      	b.n	68e <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     7ea:	26fa      	movs	r6, #250	; 0xfa
     7ec:	00b6      	lsls	r6, r6, #2
     7ee:	4653      	mov	r3, sl
     7f0:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     7f2:	9800      	ldr	r0, [sp, #0]
     7f4:	9901      	ldr	r1, [sp, #4]
     7f6:	0002      	movs	r2, r0
     7f8:	000b      	movs	r3, r1
     7fa:	4c27      	ldr	r4, [pc, #156]	; (898 <i2c_master_init+0x2d4>)
     7fc:	47a0      	blx	r4
     7fe:	9000      	str	r0, [sp, #0]
     800:	9101      	str	r1, [sp, #4]
     802:	0030      	movs	r0, r6
     804:	4b20      	ldr	r3, [pc, #128]	; (888 <i2c_master_init+0x2c4>)
     806:	4798      	blx	r3
     808:	2200      	movs	r2, #0
     80a:	4b2a      	ldr	r3, [pc, #168]	; (8b4 <i2c_master_init+0x2f0>)
     80c:	47b8      	blx	r7
     80e:	0002      	movs	r2, r0
     810:	000b      	movs	r3, r1
     812:	9800      	ldr	r0, [sp, #0]
     814:	9901      	ldr	r1, [sp, #4]
     816:	4c24      	ldr	r4, [pc, #144]	; (8a8 <i2c_master_init+0x2e4>)
     818:	47a0      	blx	r4
     81a:	2200      	movs	r2, #0
     81c:	4b21      	ldr	r3, [pc, #132]	; (8a4 <i2c_master_init+0x2e0>)
     81e:	4c20      	ldr	r4, [pc, #128]	; (8a0 <i2c_master_init+0x2dc>)
     820:	47a0      	blx	r4
     822:	4b22      	ldr	r3, [pc, #136]	; (8ac <i2c_master_init+0x2e8>)
     824:	4798      	blx	r3
     826:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     828:	d00c      	beq.n	844 <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     82a:	0031      	movs	r1, r6
     82c:	9807      	ldr	r0, [sp, #28]
     82e:	4b22      	ldr	r3, [pc, #136]	; (8b8 <i2c_master_init+0x2f4>)
     830:	4798      	blx	r3
     832:	3802      	subs	r0, #2
     834:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     836:	002b      	movs	r3, r5
     838:	2dff      	cmp	r5, #255	; 0xff
     83a:	d80c      	bhi.n	856 <i2c_master_init+0x292>
     83c:	28ff      	cmp	r0, #255	; 0xff
     83e:	d9bc      	bls.n	7ba <i2c_master_init+0x1f6>
     840:	2040      	movs	r0, #64	; 0x40
     842:	e6e6      	b.n	612 <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     844:	0071      	lsls	r1, r6, #1
     846:	1e48      	subs	r0, r1, #1
     848:	9b07      	ldr	r3, [sp, #28]
     84a:	469c      	mov	ip, r3
     84c:	4460      	add	r0, ip
     84e:	4b1a      	ldr	r3, [pc, #104]	; (8b8 <i2c_master_init+0x2f4>)
     850:	4798      	blx	r3
     852:	3801      	subs	r0, #1
     854:	e7ef      	b.n	836 <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     856:	2040      	movs	r0, #64	; 0x40
     858:	e6db      	b.n	612 <i2c_master_init+0x4e>
     85a:	46c0      	nop			; (mov r8, r8)
     85c:	0000485d 	.word	0x0000485d
     860:	40000400 	.word	0x40000400
     864:	000059d1 	.word	0x000059d1
     868:	00005945 	.word	0x00005945
     86c:	00004699 	.word	0x00004699
     870:	00000ce5 	.word	0x00000ce5
     874:	00004899 	.word	0x00004899
     878:	200003e4 	.word	0x200003e4
     87c:	00005ac9 	.word	0x00005ac9
     880:	41002000 	.word	0x41002000
     884:	000059ed 	.word	0x000059ed
     888:	000097ed 	.word	0x000097ed
     88c:	00008c59 	.word	0x00008c59
     890:	e826d695 	.word	0xe826d695
     894:	3e112e0b 	.word	0x3e112e0b
     898:	00007fd1 	.word	0x00007fd1
     89c:	40240000 	.word	0x40240000
     8a0:	00009159 	.word	0x00009159
     8a4:	3ff00000 	.word	0x3ff00000
     8a8:	000085f1 	.word	0x000085f1
     8ac:	00009785 	.word	0x00009785
     8b0:	000046e5 	.word	0x000046e5
     8b4:	40080000 	.word	0x40080000
     8b8:	00007961 	.word	0x00007961

000008bc <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     8bc:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     8be:	7e1a      	ldrb	r2, [r3, #24]
     8c0:	0792      	lsls	r2, r2, #30
     8c2:	d507      	bpl.n	8d4 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     8c4:	2202      	movs	r2, #2
     8c6:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     8c8:	8b5b      	ldrh	r3, [r3, #26]
     8ca:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     8cc:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     8ce:	17db      	asrs	r3, r3, #31
     8d0:	4018      	ands	r0, r3
}
     8d2:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     8d4:	8b5a      	ldrh	r2, [r3, #26]
     8d6:	0752      	lsls	r2, r2, #29
     8d8:	d506      	bpl.n	8e8 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     8da:	6859      	ldr	r1, [r3, #4]
     8dc:	22c0      	movs	r2, #192	; 0xc0
     8de:	0292      	lsls	r2, r2, #10
     8e0:	430a      	orrs	r2, r1
     8e2:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     8e4:	2018      	movs	r0, #24
     8e6:	e7f4      	b.n	8d2 <_i2c_master_address_response+0x16>
	return STATUS_OK;
     8e8:	2000      	movs	r0, #0
     8ea:	e7f2      	b.n	8d2 <_i2c_master_address_response+0x16>

000008ec <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     8ec:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     8ee:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     8f0:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     8f2:	2401      	movs	r4, #1
     8f4:	2502      	movs	r5, #2
     8f6:	7e11      	ldrb	r1, [r2, #24]
     8f8:	4221      	tst	r1, r4
     8fa:	d10b      	bne.n	914 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     8fc:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     8fe:	4229      	tst	r1, r5
     900:	d106      	bne.n	910 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     902:	3301      	adds	r3, #1
     904:	b29b      	uxth	r3, r3
     906:	8901      	ldrh	r1, [r0, #8]
     908:	4299      	cmp	r1, r3
     90a:	d8f4      	bhi.n	8f6 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     90c:	2012      	movs	r0, #18
     90e:	e002      	b.n	916 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     910:	2000      	movs	r0, #0
     912:	e000      	b.n	916 <_i2c_master_wait_for_bus+0x2a>
     914:	2000      	movs	r0, #0
}
     916:	bd30      	pop	{r4, r5, pc}

00000918 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     918:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     91a:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     91c:	6862      	ldr	r2, [r4, #4]
     91e:	2380      	movs	r3, #128	; 0x80
     920:	02db      	lsls	r3, r3, #11
     922:	4313      	orrs	r3, r2
     924:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     926:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     928:	4b02      	ldr	r3, [pc, #8]	; (934 <_i2c_master_send_hs_master_code+0x1c>)
     92a:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     92c:	2301      	movs	r3, #1
     92e:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     930:	bd10      	pop	{r4, pc}
     932:	46c0      	nop			; (mov r8, r8)
     934:	000008ed 	.word	0x000008ed

00000938 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     938:	b5f0      	push	{r4, r5, r6, r7, lr}
     93a:	46de      	mov	lr, fp
     93c:	4657      	mov	r7, sl
     93e:	464e      	mov	r6, r9
     940:	4645      	mov	r5, r8
     942:	b5e0      	push	{r5, r6, r7, lr}
     944:	b083      	sub	sp, #12
     946:	0006      	movs	r6, r0
     948:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     94a:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     94c:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     94e:	682b      	ldr	r3, [r5, #0]
     950:	011b      	lsls	r3, r3, #4
     952:	0fdb      	lsrs	r3, r3, #31
     954:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     956:	7a4b      	ldrb	r3, [r1, #9]
     958:	2b00      	cmp	r3, #0
     95a:	d12b      	bne.n	9b4 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     95c:	686b      	ldr	r3, [r5, #4]
     95e:	4a58      	ldr	r2, [pc, #352]	; (ac0 <_i2c_master_read_packet+0x188>)
     960:	4013      	ands	r3, r2
     962:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     964:	464b      	mov	r3, r9
     966:	7a1b      	ldrb	r3, [r3, #8]
     968:	2b00      	cmp	r3, #0
     96a:	d127      	bne.n	9bc <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     96c:	464b      	mov	r3, r9
     96e:	881b      	ldrh	r3, [r3, #0]
     970:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     972:	464a      	mov	r2, r9
     974:	7a52      	ldrb	r2, [r2, #9]
     976:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     978:	4313      	orrs	r3, r2
     97a:	2201      	movs	r2, #1
     97c:	4313      	orrs	r3, r2
     97e:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     980:	0030      	movs	r0, r6
     982:	4b50      	ldr	r3, [pc, #320]	; (ac4 <_i2c_master_read_packet+0x18c>)
     984:	4798      	blx	r3
     986:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     988:	4653      	mov	r3, sl
     98a:	2b00      	cmp	r3, #0
     98c:	d003      	beq.n	996 <_i2c_master_read_packet+0x5e>
     98e:	464b      	mov	r3, r9
     990:	885b      	ldrh	r3, [r3, #2]
     992:	2b01      	cmp	r3, #1
     994:	d03b      	beq.n	a0e <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
     996:	686b      	ldr	r3, [r5, #4]
     998:	4a49      	ldr	r2, [pc, #292]	; (ac0 <_i2c_master_read_packet+0x188>)
     99a:	4013      	ands	r3, r2
     99c:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     99e:	9b01      	ldr	r3, [sp, #4]
     9a0:	2b00      	cmp	r3, #0
     9a2:	d03a      	beq.n	a1a <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     9a4:	9801      	ldr	r0, [sp, #4]
     9a6:	b003      	add	sp, #12
     9a8:	bc3c      	pop	{r2, r3, r4, r5}
     9aa:	4690      	mov	r8, r2
     9ac:	4699      	mov	r9, r3
     9ae:	46a2      	mov	sl, r4
     9b0:	46ab      	mov	fp, r5
     9b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     9b4:	7a89      	ldrb	r1, [r1, #10]
     9b6:	4b44      	ldr	r3, [pc, #272]	; (ac8 <_i2c_master_read_packet+0x190>)
     9b8:	4798      	blx	r3
     9ba:	e7cf      	b.n	95c <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
     9bc:	464b      	mov	r3, r9
     9be:	881b      	ldrh	r3, [r3, #0]
     9c0:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     9c2:	464a      	mov	r2, r9
     9c4:	7a52      	ldrb	r2, [r2, #9]
     9c6:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     9c8:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     9ca:	2280      	movs	r2, #128	; 0x80
     9cc:	0212      	lsls	r2, r2, #8
     9ce:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     9d0:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     9d2:	0030      	movs	r0, r6
     9d4:	4b3b      	ldr	r3, [pc, #236]	; (ac4 <_i2c_master_read_packet+0x18c>)
     9d6:	4798      	blx	r3
     9d8:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     9da:	686b      	ldr	r3, [r5, #4]
     9dc:	4a38      	ldr	r2, [pc, #224]	; (ac0 <_i2c_master_read_packet+0x188>)
     9de:	4013      	ands	r3, r2
     9e0:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
     9e2:	2800      	cmp	r0, #0
     9e4:	d1de      	bne.n	9a4 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
     9e6:	0030      	movs	r0, r6
     9e8:	4b38      	ldr	r3, [pc, #224]	; (acc <_i2c_master_read_packet+0x194>)
     9ea:	4798      	blx	r3
     9ec:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
     9ee:	2800      	cmp	r0, #0
     9f0:	d1d8      	bne.n	9a4 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     9f2:	464b      	mov	r3, r9
     9f4:	881b      	ldrh	r3, [r3, #0]
     9f6:	0a1b      	lsrs	r3, r3, #8
     9f8:	2278      	movs	r2, #120	; 0x78
     9fa:	4313      	orrs	r3, r2
     9fc:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     9fe:	464a      	mov	r2, r9
     a00:	7a52      	ldrb	r2, [r2, #9]
     a02:	0392      	lsls	r2, r2, #14
     a04:	2101      	movs	r1, #1
     a06:	430a      	orrs	r2, r1
     a08:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     a0a:	626b      	str	r3, [r5, #36]	; 0x24
     a0c:	e7b8      	b.n	980 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     a0e:	686a      	ldr	r2, [r5, #4]
     a10:	2380      	movs	r3, #128	; 0x80
     a12:	02db      	lsls	r3, r3, #11
     a14:	4313      	orrs	r3, r2
     a16:	606b      	str	r3, [r5, #4]
     a18:	e7c1      	b.n	99e <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
     a1a:	0030      	movs	r0, r6
     a1c:	4b2b      	ldr	r3, [pc, #172]	; (acc <_i2c_master_read_packet+0x194>)
     a1e:	4798      	blx	r3
     a20:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     a22:	2800      	cmp	r0, #0
     a24:	d1be      	bne.n	9a4 <_i2c_master_read_packet+0x6c>
     a26:	3c01      	subs	r4, #1
     a28:	b2a4      	uxth	r4, r4
     a2a:	4680      	mov	r8, r0
		while (tmp_data_length--) {
     a2c:	4b28      	ldr	r3, [pc, #160]	; (ad0 <_i2c_master_read_packet+0x198>)
     a2e:	469b      	mov	fp, r3
     a30:	e015      	b.n	a5e <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     a32:	2c01      	cmp	r4, #1
     a34:	d020      	beq.n	a78 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
     a36:	0030      	movs	r0, r6
     a38:	4b26      	ldr	r3, [pc, #152]	; (ad4 <_i2c_master_read_packet+0x19c>)
     a3a:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     a3c:	4643      	mov	r3, r8
     a3e:	1c5f      	adds	r7, r3, #1
     a40:	b2bf      	uxth	r7, r7
     a42:	2328      	movs	r3, #40	; 0x28
     a44:	5ceb      	ldrb	r3, [r5, r3]
     a46:	464a      	mov	r2, r9
     a48:	6852      	ldr	r2, [r2, #4]
     a4a:	4641      	mov	r1, r8
     a4c:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
     a4e:	0030      	movs	r0, r6
     a50:	4b1c      	ldr	r3, [pc, #112]	; (ac4 <_i2c_master_read_packet+0x18c>)
     a52:	4798      	blx	r3
     a54:	3c01      	subs	r4, #1
     a56:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
     a58:	2800      	cmp	r0, #0
     a5a:	d115      	bne.n	a88 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
     a5c:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
     a5e:	455c      	cmp	r4, fp
     a60:	d014      	beq.n	a8c <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     a62:	8b6b      	ldrh	r3, [r5, #26]
     a64:	069b      	lsls	r3, r3, #26
     a66:	d527      	bpl.n	ab8 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     a68:	7af3      	ldrb	r3, [r6, #11]
     a6a:	2b00      	cmp	r3, #0
     a6c:	d0e3      	beq.n	a36 <_i2c_master_read_packet+0xfe>
     a6e:	4653      	mov	r3, sl
     a70:	2b00      	cmp	r3, #0
     a72:	d1de      	bne.n	a32 <_i2c_master_read_packet+0xfa>
     a74:	2c00      	cmp	r4, #0
     a76:	d1de      	bne.n	a36 <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     a78:	686a      	ldr	r2, [r5, #4]
     a7a:	2380      	movs	r3, #128	; 0x80
     a7c:	02db      	lsls	r3, r3, #11
     a7e:	4313      	orrs	r3, r2
     a80:	606b      	str	r3, [r5, #4]
     a82:	3c01      	subs	r4, #1
     a84:	b2a4      	uxth	r4, r4
     a86:	e7ea      	b.n	a5e <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
     a88:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
     a8a:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     a8c:	7ab3      	ldrb	r3, [r6, #10]
     a8e:	2b00      	cmp	r3, #0
     a90:	d109      	bne.n	aa6 <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
     a92:	0030      	movs	r0, r6
     a94:	4b0f      	ldr	r3, [pc, #60]	; (ad4 <_i2c_master_read_packet+0x19c>)
     a96:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     a98:	2328      	movs	r3, #40	; 0x28
     a9a:	5cea      	ldrb	r2, [r5, r3]
     a9c:	464b      	mov	r3, r9
     a9e:	685b      	ldr	r3, [r3, #4]
     aa0:	4641      	mov	r1, r8
     aa2:	545a      	strb	r2, [r3, r1]
     aa4:	e77e      	b.n	9a4 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
     aa6:	0030      	movs	r0, r6
     aa8:	4b0a      	ldr	r3, [pc, #40]	; (ad4 <_i2c_master_read_packet+0x19c>)
     aaa:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     aac:	686a      	ldr	r2, [r5, #4]
     aae:	23c0      	movs	r3, #192	; 0xc0
     ab0:	029b      	lsls	r3, r3, #10
     ab2:	4313      	orrs	r3, r2
     ab4:	606b      	str	r3, [r5, #4]
     ab6:	e7ec      	b.n	a92 <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
     ab8:	2341      	movs	r3, #65	; 0x41
     aba:	9301      	str	r3, [sp, #4]
     abc:	e772      	b.n	9a4 <_i2c_master_read_packet+0x6c>
     abe:	46c0      	nop			; (mov r8, r8)
     ac0:	fffbffff 	.word	0xfffbffff
     ac4:	000008ed 	.word	0x000008ed
     ac8:	00000919 	.word	0x00000919
     acc:	000008bd 	.word	0x000008bd
     ad0:	0000ffff 	.word	0x0000ffff
     ad4:	000005b9 	.word	0x000005b9

00000ad8 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
     ada:	46de      	mov	lr, fp
     adc:	4657      	mov	r7, sl
     ade:	464e      	mov	r6, r9
     ae0:	4645      	mov	r5, r8
     ae2:	b5e0      	push	{r5, r6, r7, lr}
     ae4:	b083      	sub	sp, #12
     ae6:	0006      	movs	r6, r0
     ae8:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     aea:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     aec:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     aee:	4b32      	ldr	r3, [pc, #200]	; (bb8 <_i2c_master_write_packet+0xe0>)
     af0:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     af2:	7a7b      	ldrb	r3, [r7, #9]
     af4:	2b00      	cmp	r3, #0
     af6:	d11d      	bne.n	b34 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     af8:	686b      	ldr	r3, [r5, #4]
     afa:	4a30      	ldr	r2, [pc, #192]	; (bbc <_i2c_master_write_packet+0xe4>)
     afc:	4013      	ands	r3, r2
     afe:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     b00:	7a3b      	ldrb	r3, [r7, #8]
     b02:	2b00      	cmp	r3, #0
     b04:	d01b      	beq.n	b3e <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b06:	883b      	ldrh	r3, [r7, #0]
     b08:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     b0a:	7a7a      	ldrb	r2, [r7, #9]
     b0c:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b0e:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     b10:	2280      	movs	r2, #128	; 0x80
     b12:	0212      	lsls	r2, r2, #8
     b14:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b16:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     b18:	0030      	movs	r0, r6
     b1a:	4b29      	ldr	r3, [pc, #164]	; (bc0 <_i2c_master_write_packet+0xe8>)
     b1c:	4798      	blx	r3
     b1e:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     b20:	2800      	cmp	r0, #0
     b22:	d013      	beq.n	b4c <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     b24:	9801      	ldr	r0, [sp, #4]
     b26:	b003      	add	sp, #12
     b28:	bc3c      	pop	{r2, r3, r4, r5}
     b2a:	4690      	mov	r8, r2
     b2c:	4699      	mov	r9, r3
     b2e:	46a2      	mov	sl, r4
     b30:	46ab      	mov	fp, r5
     b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     b34:	7ab9      	ldrb	r1, [r7, #10]
     b36:	0030      	movs	r0, r6
     b38:	4b22      	ldr	r3, [pc, #136]	; (bc4 <_i2c_master_write_packet+0xec>)
     b3a:	4798      	blx	r3
     b3c:	e7dc      	b.n	af8 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b3e:	883b      	ldrh	r3, [r7, #0]
     b40:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     b42:	7a7a      	ldrb	r2, [r7, #9]
     b44:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b46:	4313      	orrs	r3, r2
     b48:	626b      	str	r3, [r5, #36]	; 0x24
     b4a:	e7e5      	b.n	b18 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
     b4c:	0030      	movs	r0, r6
     b4e:	4b1e      	ldr	r3, [pc, #120]	; (bc8 <_i2c_master_write_packet+0xf0>)
     b50:	4798      	blx	r3
     b52:	1e03      	subs	r3, r0, #0
     b54:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     b56:	d1e5      	bne.n	b24 <_i2c_master_write_packet+0x4c>
     b58:	46a0      	mov	r8, r4
     b5a:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     b5c:	3320      	adds	r3, #32
     b5e:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
     b60:	4b15      	ldr	r3, [pc, #84]	; (bb8 <_i2c_master_write_packet+0xe0>)
     b62:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
     b64:	4b16      	ldr	r3, [pc, #88]	; (bc0 <_i2c_master_write_packet+0xe8>)
     b66:	469a      	mov	sl, r3
		while (tmp_data_length--) {
     b68:	4544      	cmp	r4, r8
     b6a:	d015      	beq.n	b98 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     b6c:	8b6b      	ldrh	r3, [r5, #26]
     b6e:	464a      	mov	r2, r9
     b70:	4213      	tst	r3, r2
     b72:	d01d      	beq.n	bb0 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
     b74:	0030      	movs	r0, r6
     b76:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     b78:	687b      	ldr	r3, [r7, #4]
     b7a:	5d1a      	ldrb	r2, [r3, r4]
     b7c:	2328      	movs	r3, #40	; 0x28
     b7e:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
     b80:	0030      	movs	r0, r6
     b82:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
     b84:	2800      	cmp	r0, #0
     b86:	d106      	bne.n	b96 <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     b88:	8b6b      	ldrh	r3, [r5, #26]
     b8a:	3401      	adds	r4, #1
     b8c:	075b      	lsls	r3, r3, #29
     b8e:	d5eb      	bpl.n	b68 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
     b90:	231e      	movs	r3, #30
     b92:	9301      	str	r3, [sp, #4]
     b94:	e000      	b.n	b98 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
     b96:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     b98:	7ab3      	ldrb	r3, [r6, #10]
     b9a:	2b00      	cmp	r3, #0
     b9c:	d0c2      	beq.n	b24 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
     b9e:	0030      	movs	r0, r6
     ba0:	4b05      	ldr	r3, [pc, #20]	; (bb8 <_i2c_master_write_packet+0xe0>)
     ba2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     ba4:	686a      	ldr	r2, [r5, #4]
     ba6:	23c0      	movs	r3, #192	; 0xc0
     ba8:	029b      	lsls	r3, r3, #10
     baa:	4313      	orrs	r3, r2
     bac:	606b      	str	r3, [r5, #4]
     bae:	e7b9      	b.n	b24 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
     bb0:	2341      	movs	r3, #65	; 0x41
     bb2:	9301      	str	r3, [sp, #4]
     bb4:	e7b6      	b.n	b24 <_i2c_master_write_packet+0x4c>
     bb6:	46c0      	nop			; (mov r8, r8)
     bb8:	000005b9 	.word	0x000005b9
     bbc:	fffbffff 	.word	0xfffbffff
     bc0:	000008ed 	.word	0x000008ed
     bc4:	00000919 	.word	0x00000919
     bc8:	000008bd 	.word	0x000008bd

00000bcc <i2c_master_read_packet_wait>:
{
     bcc:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
     bce:	8b83      	ldrh	r3, [r0, #28]
     bd0:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     bd2:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     bd4:	2b00      	cmp	r3, #0
     bd6:	d001      	beq.n	bdc <i2c_master_read_packet_wait+0x10>
}
     bd8:	0010      	movs	r0, r2
     bda:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     bdc:	3301      	adds	r3, #1
     bde:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     be0:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     be2:	4b02      	ldr	r3, [pc, #8]	; (bec <i2c_master_read_packet_wait+0x20>)
     be4:	4798      	blx	r3
     be6:	0002      	movs	r2, r0
     be8:	e7f6      	b.n	bd8 <i2c_master_read_packet_wait+0xc>
     bea:	46c0      	nop			; (mov r8, r8)
     bec:	00000939 	.word	0x00000939

00000bf0 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     bf0:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     bf2:	8b83      	ldrh	r3, [r0, #28]
     bf4:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     bf6:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     bf8:	2b00      	cmp	r3, #0
     bfa:	d001      	beq.n	c00 <i2c_master_write_packet_wait_no_stop+0x10>

	module->send_stop = false;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
     bfc:	0010      	movs	r0, r2
     bfe:	bd10      	pop	{r4, pc}
	module->send_stop = false;
     c00:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     c02:	3301      	adds	r3, #1
     c04:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     c06:	4b02      	ldr	r3, [pc, #8]	; (c10 <i2c_master_write_packet_wait_no_stop+0x20>)
     c08:	4798      	blx	r3
     c0a:	0002      	movs	r2, r0
     c0c:	e7f6      	b.n	bfc <i2c_master_write_packet_wait_no_stop+0xc>
     c0e:	46c0      	nop			; (mov r8, r8)
     c10:	00000ad9 	.word	0x00000ad9

00000c14 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     c14:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     c16:	2207      	movs	r2, #7
     c18:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
     c1a:	421a      	tst	r2, r3
     c1c:	d1fc      	bne.n	c18 <_i2c_master_wait_for_sync+0x4>
}
     c1e:	4770      	bx	lr

00000c20 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     c20:	b570      	push	{r4, r5, r6, lr}
     c22:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     c24:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     c26:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     c28:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     c2a:	8b83      	ldrh	r3, [r0, #28]
     c2c:	1aed      	subs	r5, r5, r3
     c2e:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     c30:	8b83      	ldrh	r3, [r0, #28]
     c32:	3b01      	subs	r3, #1
     c34:	b29b      	uxth	r3, r3
     c36:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     c38:	0113      	lsls	r3, r2, #4
     c3a:	d51d      	bpl.n	c78 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     c3c:	7ac3      	ldrb	r3, [r0, #11]
     c3e:	2b00      	cmp	r3, #0
     c40:	d003      	beq.n	c4a <_i2c_master_read+0x2a>
     c42:	8b83      	ldrh	r3, [r0, #28]
     c44:	b29b      	uxth	r3, r3
     c46:	2b01      	cmp	r3, #1
     c48:	d010      	beq.n	c6c <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     c4a:	8ba3      	ldrh	r3, [r4, #28]
     c4c:	b29b      	uxth	r3, r3
     c4e:	2b00      	cmp	r3, #0
     c50:	d102      	bne.n	c58 <_i2c_master_read+0x38>
		if (module->send_stop) {
     c52:	7aa3      	ldrb	r3, [r4, #10]
     c54:	2b00      	cmp	r3, #0
     c56:	d11c      	bne.n	c92 <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     c58:	0020      	movs	r0, r4
     c5a:	4b12      	ldr	r3, [pc, #72]	; (ca4 <_i2c_master_read+0x84>)
     c5c:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     c5e:	6a23      	ldr	r3, [r4, #32]
     c60:	195d      	adds	r5, r3, r5
     c62:	2328      	movs	r3, #40	; 0x28
     c64:	5cf3      	ldrb	r3, [r6, r3]
     c66:	b2db      	uxtb	r3, r3
     c68:	702b      	strb	r3, [r5, #0]
}
     c6a:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     c6c:	6872      	ldr	r2, [r6, #4]
     c6e:	2380      	movs	r3, #128	; 0x80
     c70:	02db      	lsls	r3, r3, #11
     c72:	4313      	orrs	r3, r2
     c74:	6073      	str	r3, [r6, #4]
     c76:	e7e8      	b.n	c4a <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     c78:	7ac3      	ldrb	r3, [r0, #11]
     c7a:	2b00      	cmp	r3, #0
     c7c:	d0e5      	beq.n	c4a <_i2c_master_read+0x2a>
     c7e:	8b83      	ldrh	r3, [r0, #28]
     c80:	b29b      	uxth	r3, r3
     c82:	2b00      	cmp	r3, #0
     c84:	d1e1      	bne.n	c4a <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     c86:	6872      	ldr	r2, [r6, #4]
     c88:	2380      	movs	r3, #128	; 0x80
     c8a:	02db      	lsls	r3, r3, #11
     c8c:	4313      	orrs	r3, r2
     c8e:	6073      	str	r3, [r6, #4]
     c90:	e7db      	b.n	c4a <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     c92:	0020      	movs	r0, r4
     c94:	4b03      	ldr	r3, [pc, #12]	; (ca4 <_i2c_master_read+0x84>)
     c96:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     c98:	6872      	ldr	r2, [r6, #4]
     c9a:	23c0      	movs	r3, #192	; 0xc0
     c9c:	029b      	lsls	r3, r3, #10
     c9e:	4313      	orrs	r3, r2
     ca0:	6073      	str	r3, [r6, #4]
     ca2:	e7d9      	b.n	c58 <_i2c_master_read+0x38>
     ca4:	00000c15 	.word	0x00000c15

00000ca8 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     ca8:	b570      	push	{r4, r5, r6, lr}
     caa:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     cac:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     cae:	8b6b      	ldrh	r3, [r5, #26]
     cb0:	075b      	lsls	r3, r3, #29
     cb2:	d503      	bpl.n	cbc <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     cb4:	221e      	movs	r2, #30
     cb6:	2325      	movs	r3, #37	; 0x25
     cb8:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     cba:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     cbc:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     cbe:	8b83      	ldrh	r3, [r0, #28]
     cc0:	1af6      	subs	r6, r6, r3
     cc2:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     cc4:	8b83      	ldrh	r3, [r0, #28]
     cc6:	3b01      	subs	r3, #1
     cc8:	b29b      	uxth	r3, r3
     cca:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     ccc:	4b04      	ldr	r3, [pc, #16]	; (ce0 <_i2c_master_write+0x38>)
     cce:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     cd0:	6a23      	ldr	r3, [r4, #32]
     cd2:	199e      	adds	r6, r3, r6
     cd4:	7833      	ldrb	r3, [r6, #0]
     cd6:	b2db      	uxtb	r3, r3
     cd8:	2228      	movs	r2, #40	; 0x28
     cda:	54ab      	strb	r3, [r5, r2]
     cdc:	e7ed      	b.n	cba <_i2c_master_write+0x12>
     cde:	46c0      	nop			; (mov r8, r8)
     ce0:	00000c15 	.word	0x00000c15

00000ce4 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     ce4:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     ce6:	0080      	lsls	r0, r0, #2
     ce8:	4b75      	ldr	r3, [pc, #468]	; (ec0 <_i2c_master_interrupt_handler+0x1dc>)
     cea:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     cec:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     cee:	682b      	ldr	r3, [r5, #0]
     cf0:	011b      	lsls	r3, r3, #4
     cf2:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     cf4:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     cf6:	7e26      	ldrb	r6, [r4, #24]
     cf8:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     cfa:	8b63      	ldrh	r3, [r4, #26]
     cfc:	b29b      	uxth	r3, r3
     cfe:	2b00      	cmp	r3, #0
     d00:	d103      	bne.n	d0a <_i2c_master_interrupt_handler+0x26>
     d02:	8ba3      	ldrh	r3, [r4, #28]
     d04:	b29b      	uxth	r3, r3
     d06:	2b00      	cmp	r3, #0
     d08:	d123      	bne.n	d52 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     d0a:	8b63      	ldrh	r3, [r4, #26]
     d0c:	b29b      	uxth	r3, r3
     d0e:	2b00      	cmp	r3, #0
     d10:	d008      	beq.n	d24 <_i2c_master_interrupt_handler+0x40>
     d12:	8ba3      	ldrh	r3, [r4, #28]
     d14:	b29b      	uxth	r3, r3
     d16:	2b00      	cmp	r3, #0
     d18:	d104      	bne.n	d24 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
     d1a:	3325      	adds	r3, #37	; 0x25
     d1c:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     d1e:	2b05      	cmp	r3, #5
     d20:	d100      	bne.n	d24 <_i2c_master_interrupt_handler+0x40>
     d22:	e06d      	b.n	e00 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     d24:	8b63      	ldrh	r3, [r4, #26]
     d26:	b29b      	uxth	r3, r3
     d28:	2b00      	cmp	r3, #0
     d2a:	d024      	beq.n	d76 <_i2c_master_interrupt_handler+0x92>
     d2c:	8ba3      	ldrh	r3, [r4, #28]
     d2e:	b29b      	uxth	r3, r3
     d30:	2b00      	cmp	r3, #0
     d32:	d020      	beq.n	d76 <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     d34:	8b6b      	ldrh	r3, [r5, #26]
     d36:	069b      	lsls	r3, r3, #26
     d38:	d500      	bpl.n	d3c <_i2c_master_interrupt_handler+0x58>
     d3a:	e081      	b.n	e40 <_i2c_master_interrupt_handler+0x15c>
     d3c:	2a00      	cmp	r2, #0
     d3e:	d004      	beq.n	d4a <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     d40:	8ba3      	ldrh	r3, [r4, #28]
     d42:	b29b      	uxth	r3, r3
     d44:	2b01      	cmp	r3, #1
     d46:	d100      	bne.n	d4a <_i2c_master_interrupt_handler+0x66>
     d48:	e07a      	b.n	e40 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     d4a:	2241      	movs	r2, #65	; 0x41
     d4c:	2325      	movs	r3, #37	; 0x25
     d4e:	54e2      	strb	r2, [r4, r3]
     d50:	e011      	b.n	d76 <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     d52:	7e2b      	ldrb	r3, [r5, #24]
     d54:	07db      	lsls	r3, r3, #31
     d56:	d507      	bpl.n	d68 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     d58:	2301      	movs	r3, #1
     d5a:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     d5c:	8b6b      	ldrh	r3, [r5, #26]
     d5e:	079b      	lsls	r3, r3, #30
     d60:	d52e      	bpl.n	dc0 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     d62:	2241      	movs	r2, #65	; 0x41
     d64:	2325      	movs	r3, #37	; 0x25
     d66:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     d68:	8ba3      	ldrh	r3, [r4, #28]
     d6a:	b29b      	uxth	r3, r3
     d6c:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     d6e:	2325      	movs	r3, #37	; 0x25
     d70:	5ce3      	ldrb	r3, [r4, r3]
     d72:	2b05      	cmp	r3, #5
     d74:	d038      	beq.n	de8 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     d76:	8b63      	ldrh	r3, [r4, #26]
     d78:	b29b      	uxth	r3, r3
     d7a:	2b00      	cmp	r3, #0
     d7c:	d007      	beq.n	d8e <_i2c_master_interrupt_handler+0xaa>
     d7e:	8ba3      	ldrh	r3, [r4, #28]
     d80:	b29b      	uxth	r3, r3
     d82:	2b00      	cmp	r3, #0
     d84:	d103      	bne.n	d8e <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     d86:	3325      	adds	r3, #37	; 0x25
     d88:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     d8a:	2b05      	cmp	r3, #5
     d8c:	d064      	beq.n	e58 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     d8e:	2325      	movs	r3, #37	; 0x25
     d90:	5ce3      	ldrb	r3, [r4, r3]
     d92:	2b05      	cmp	r3, #5
     d94:	d013      	beq.n	dbe <_i2c_master_interrupt_handler+0xda>
     d96:	2325      	movs	r3, #37	; 0x25
     d98:	5ce3      	ldrb	r3, [r4, r3]
     d9a:	2b00      	cmp	r3, #0
     d9c:	d00f      	beq.n	dbe <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     d9e:	2303      	movs	r3, #3
     da0:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     da2:	2300      	movs	r3, #0
     da4:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     da6:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     da8:	3325      	adds	r3, #37	; 0x25
     daa:	5ce3      	ldrb	r3, [r4, r3]
     dac:	2b41      	cmp	r3, #65	; 0x41
     dae:	d003      	beq.n	db8 <_i2c_master_interrupt_handler+0xd4>
     db0:	7aa3      	ldrb	r3, [r4, #10]
     db2:	2b00      	cmp	r3, #0
     db4:	d000      	beq.n	db8 <_i2c_master_interrupt_handler+0xd4>
     db6:	e075      	b.n	ea4 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     db8:	0773      	lsls	r3, r6, #29
     dba:	d500      	bpl.n	dbe <_i2c_master_interrupt_handler+0xda>
     dbc:	e07b      	b.n	eb6 <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     dbe:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     dc0:	8b6b      	ldrh	r3, [r5, #26]
     dc2:	075b      	lsls	r3, r3, #29
     dc4:	d5d0      	bpl.n	d68 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     dc6:	2218      	movs	r2, #24
     dc8:	2325      	movs	r3, #37	; 0x25
     dca:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     dcc:	2300      	movs	r3, #0
     dce:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     dd0:	7aa3      	ldrb	r3, [r4, #10]
     dd2:	2b00      	cmp	r3, #0
     dd4:	d0c8      	beq.n	d68 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     dd6:	0020      	movs	r0, r4
     dd8:	4b3a      	ldr	r3, [pc, #232]	; (ec4 <_i2c_master_interrupt_handler+0x1e0>)
     dda:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     ddc:	686a      	ldr	r2, [r5, #4]
     dde:	23c0      	movs	r3, #192	; 0xc0
     de0:	029b      	lsls	r3, r3, #10
     de2:	4313      	orrs	r3, r2
     de4:	606b      	str	r3, [r5, #4]
     de6:	e7bf      	b.n	d68 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     de8:	331f      	adds	r3, #31
     dea:	5ce3      	ldrb	r3, [r4, r3]
     dec:	2b00      	cmp	r3, #0
     dee:	d003      	beq.n	df8 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     df0:	0020      	movs	r0, r4
     df2:	4b35      	ldr	r3, [pc, #212]	; (ec8 <_i2c_master_interrupt_handler+0x1e4>)
     df4:	4798      	blx	r3
     df6:	e7be      	b.n	d76 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     df8:	0020      	movs	r0, r4
     dfa:	4b34      	ldr	r3, [pc, #208]	; (ecc <_i2c_master_interrupt_handler+0x1e8>)
     dfc:	4798      	blx	r3
     dfe:	e7ba      	b.n	d76 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     e00:	331f      	adds	r3, #31
     e02:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     e04:	2b00      	cmp	r3, #0
     e06:	d000      	beq.n	e0a <_i2c_master_interrupt_handler+0x126>
     e08:	e78c      	b.n	d24 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
     e0a:	3303      	adds	r3, #3
     e0c:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     e0e:	2300      	movs	r3, #0
     e10:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     e12:	3325      	adds	r3, #37	; 0x25
     e14:	2200      	movs	r2, #0
     e16:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     e18:	7aa3      	ldrb	r3, [r4, #10]
     e1a:	2b00      	cmp	r3, #0
     e1c:	d107      	bne.n	e2e <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     e1e:	2301      	movs	r3, #1
     e20:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     e22:	07f3      	lsls	r3, r6, #31
     e24:	d5a7      	bpl.n	d76 <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     e26:	68e3      	ldr	r3, [r4, #12]
     e28:	0020      	movs	r0, r4
     e2a:	4798      	blx	r3
     e2c:	e7a3      	b.n	d76 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     e2e:	0020      	movs	r0, r4
     e30:	4b24      	ldr	r3, [pc, #144]	; (ec4 <_i2c_master_interrupt_handler+0x1e0>)
     e32:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     e34:	686a      	ldr	r2, [r5, #4]
     e36:	23c0      	movs	r3, #192	; 0xc0
     e38:	029b      	lsls	r3, r3, #10
     e3a:	4313      	orrs	r3, r2
     e3c:	606b      	str	r3, [r5, #4]
     e3e:	e7f0      	b.n	e22 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     e40:	2324      	movs	r3, #36	; 0x24
     e42:	5ce3      	ldrb	r3, [r4, r3]
     e44:	2b00      	cmp	r3, #0
     e46:	d103      	bne.n	e50 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     e48:	0020      	movs	r0, r4
     e4a:	4b20      	ldr	r3, [pc, #128]	; (ecc <_i2c_master_interrupt_handler+0x1e8>)
     e4c:	4798      	blx	r3
     e4e:	e792      	b.n	d76 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     e50:	0020      	movs	r0, r4
     e52:	4b1d      	ldr	r3, [pc, #116]	; (ec8 <_i2c_master_interrupt_handler+0x1e4>)
     e54:	4798      	blx	r3
     e56:	e78e      	b.n	d76 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     e58:	331f      	adds	r3, #31
     e5a:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     e5c:	2b01      	cmp	r3, #1
     e5e:	d196      	bne.n	d8e <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     e60:	7e2b      	ldrb	r3, [r5, #24]
     e62:	079b      	lsls	r3, r3, #30
     e64:	d501      	bpl.n	e6a <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     e66:	2302      	movs	r3, #2
     e68:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     e6a:	2303      	movs	r3, #3
     e6c:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     e6e:	2300      	movs	r3, #0
     e70:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     e72:	3325      	adds	r3, #37	; 0x25
     e74:	2200      	movs	r2, #0
     e76:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     e78:	07b3      	lsls	r3, r6, #30
     e7a:	d503      	bpl.n	e84 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     e7c:	2324      	movs	r3, #36	; 0x24
     e7e:	5ce3      	ldrb	r3, [r4, r3]
     e80:	2b01      	cmp	r3, #1
     e82:	d00b      	beq.n	e9c <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     e84:	07f3      	lsls	r3, r6, #31
     e86:	d400      	bmi.n	e8a <_i2c_master_interrupt_handler+0x1a6>
     e88:	e781      	b.n	d8e <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     e8a:	2324      	movs	r3, #36	; 0x24
     e8c:	5ce3      	ldrb	r3, [r4, r3]
     e8e:	2b00      	cmp	r3, #0
     e90:	d000      	beq.n	e94 <_i2c_master_interrupt_handler+0x1b0>
     e92:	e77c      	b.n	d8e <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     e94:	68e3      	ldr	r3, [r4, #12]
     e96:	0020      	movs	r0, r4
     e98:	4798      	blx	r3
     e9a:	e778      	b.n	d8e <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     e9c:	6923      	ldr	r3, [r4, #16]
     e9e:	0020      	movs	r0, r4
     ea0:	4798      	blx	r3
     ea2:	e774      	b.n	d8e <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     ea4:	0020      	movs	r0, r4
     ea6:	4b07      	ldr	r3, [pc, #28]	; (ec4 <_i2c_master_interrupt_handler+0x1e0>)
     ea8:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     eaa:	686a      	ldr	r2, [r5, #4]
     eac:	23e0      	movs	r3, #224	; 0xe0
     eae:	02db      	lsls	r3, r3, #11
     eb0:	4313      	orrs	r3, r2
     eb2:	606b      	str	r3, [r5, #4]
     eb4:	e780      	b.n	db8 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     eb6:	6963      	ldr	r3, [r4, #20]
     eb8:	0020      	movs	r0, r4
     eba:	4798      	blx	r3
}
     ebc:	e77f      	b.n	dbe <_i2c_master_interrupt_handler+0xda>
     ebe:	46c0      	nop			; (mov r8, r8)
     ec0:	200003e4 	.word	0x200003e4
     ec4:	00000c15 	.word	0x00000c15
     ec8:	00000c21 	.word	0x00000c21
     ecc:	00000ca9 	.word	0x00000ca9

00000ed0 <shtc1_check_crc>:
static const uint8_t ID_REG_MASK       = 0x1f;
static const uint8_t CRC_POLYNOMIAL    = 0x31;
static const uint8_t CRC_INIT          = 0xff;

static bool shtc1_check_crc(uint8_t *data, uint8_t data_length, uint8_t checksum)
{
     ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t crc = CRC_INIT;
    uint8_t current_byte;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < data_length; ++current_byte)
     ed2:	2900      	cmp	r1, #0
     ed4:	d01c      	beq.n	f10 <shtc1_check_crc+0x40>
     ed6:	0006      	movs	r6, r0
     ed8:	3901      	subs	r1, #1
     eda:	b2c9      	uxtb	r1, r1
     edc:	3101      	adds	r1, #1
     ede:	1840      	adds	r0, r0, r1
     ee0:	23ff      	movs	r3, #255	; 0xff
    {
        crc ^= (data[current_byte]);
     ee2:	2508      	movs	r5, #8
        for (uint8_t bit = 8; bit > 0; --bit)
        {
            if (crc & 0x80)
                crc = (crc << 1) ^ CRC_POLYNOMIAL;
     ee4:	2731      	movs	r7, #49	; 0x31
     ee6:	e00f      	b.n	f08 <shtc1_check_crc+0x38>
     ee8:	005b      	lsls	r3, r3, #1
     eea:	407b      	eors	r3, r7
     eec:	b2db      	uxtb	r3, r3
     eee:	3901      	subs	r1, #1
     ef0:	b2c9      	uxtb	r1, r1
        for (uint8_t bit = 8; bit > 0; --bit)
     ef2:	2900      	cmp	r1, #0
     ef4:	d005      	beq.n	f02 <shtc1_check_crc+0x32>
            if (crc & 0x80)
     ef6:	b25c      	sxtb	r4, r3
     ef8:	2c00      	cmp	r4, #0
     efa:	dbf5      	blt.n	ee8 <shtc1_check_crc+0x18>
            else
                crc = (crc << 1);
     efc:	005b      	lsls	r3, r3, #1
     efe:	b2db      	uxtb	r3, r3
     f00:	e7f5      	b.n	eee <shtc1_check_crc+0x1e>
     f02:	3601      	adds	r6, #1
    for (current_byte = 0; current_byte < data_length; ++current_byte)
     f04:	4286      	cmp	r6, r0
     f06:	d004      	beq.n	f12 <shtc1_check_crc+0x42>
        crc ^= (data[current_byte]);
     f08:	7831      	ldrb	r1, [r6, #0]
     f0a:	404b      	eors	r3, r1
     f0c:	0029      	movs	r1, r5
     f0e:	e7f2      	b.n	ef6 <shtc1_check_crc+0x26>
    uint8_t crc = CRC_INIT;
     f10:	23ff      	movs	r3, #255	; 0xff
        }
    }
    return crc == checksum;
     f12:	1ad2      	subs	r2, r2, r3
     f14:	4250      	negs	r0, r2
     f16:	4150      	adcs	r0, r2
     f18:	b2c0      	uxtb	r0, r0
}
     f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000f1c <shtc1_read_async_result>:

enum status_code shtc1_read_async_result(struct i2c_master_module *i2c_master_instance_ptr,
        int *temp, int *rh)
{
     f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
     f1e:	b087      	sub	sp, #28
     f20:	0005      	movs	r5, r0
     f22:	000f      	movs	r7, r1
     f24:	0016      	movs	r6, r2
    uint8_t data[6];
    struct i2c_master_packet packet = {
     f26:	ac01      	add	r4, sp, #4
     f28:	220c      	movs	r2, #12
     f2a:	2100      	movs	r1, #0
     f2c:	0020      	movs	r0, r4
     f2e:	4b1e      	ldr	r3, [pc, #120]	; (fa8 <shtc1_read_async_result+0x8c>)
     f30:	4798      	blx	r3
     f32:	2370      	movs	r3, #112	; 0x70
     f34:	8023      	strh	r3, [r4, #0]
     f36:	3b6a      	subs	r3, #106	; 0x6a
     f38:	8063      	strh	r3, [r4, #2]
     f3a:	ab04      	add	r3, sp, #16
     f3c:	6063      	str	r3, [r4, #4]
            .data_length = sizeof(data),
            .data = data,
			.ten_bit_address = false,
			.high_speed = false,
    };
    enum status_code ret = i2c_master_read_packet_wait(i2c_master_instance_ptr, &packet);
     f3e:	0021      	movs	r1, r4
     f40:	0028      	movs	r0, r5
     f42:	4b1a      	ldr	r3, [pc, #104]	; (fac <shtc1_read_async_result+0x90>)
     f44:	4798      	blx	r3
     f46:	1e04      	subs	r4, r0, #0
    if (ret)
     f48:	d107      	bne.n	f5a <shtc1_read_async_result+0x3e>
        return ret;
    if (!shtc1_check_crc(data, 2, data[2]) || !shtc1_check_crc(data + 3, 2, data[5]))
     f4a:	a804      	add	r0, sp, #16
     f4c:	7882      	ldrb	r2, [r0, #2]
     f4e:	2102      	movs	r1, #2
     f50:	4b17      	ldr	r3, [pc, #92]	; (fb0 <shtc1_read_async_result+0x94>)
     f52:	4798      	blx	r3
     f54:	2800      	cmp	r0, #0
     f56:	d103      	bne.n	f60 <shtc1_read_async_result+0x44>
        return STATUS_ERR_BAD_DATA;
     f58:	2413      	movs	r4, #19
    *rh = (data[4] & 0xff) | (data[3] << 8);
    *temp = ((21875 * *temp) >> 13) - 45000;
    *rh = ((12500 * *rh) >> 13);

    return STATUS_OK;
}
     f5a:	0020      	movs	r0, r4
     f5c:	b007      	add	sp, #28
     f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!shtc1_check_crc(data, 2, data[2]) || !shtc1_check_crc(data + 3, 2, data[5]))
     f60:	ab04      	add	r3, sp, #16
     f62:	795a      	ldrb	r2, [r3, #5]
     f64:	2102      	movs	r1, #2
     f66:	2013      	movs	r0, #19
     f68:	4468      	add	r0, sp
     f6a:	4b11      	ldr	r3, [pc, #68]	; (fb0 <shtc1_read_async_result+0x94>)
     f6c:	4798      	blx	r3
     f6e:	2800      	cmp	r0, #0
     f70:	d101      	bne.n	f76 <shtc1_read_async_result+0x5a>
        return STATUS_ERR_BAD_DATA;
     f72:	2413      	movs	r4, #19
     f74:	e7f1      	b.n	f5a <shtc1_read_async_result+0x3e>
    *temp = (data[1] & 0xff) | (data[0] << 8);
     f76:	aa04      	add	r2, sp, #16
     f78:	7813      	ldrb	r3, [r2, #0]
     f7a:	021b      	lsls	r3, r3, #8
     f7c:	7851      	ldrb	r1, [r2, #1]
     f7e:	430b      	orrs	r3, r1
     f80:	603b      	str	r3, [r7, #0]
    *rh = (data[4] & 0xff) | (data[3] << 8);
     f82:	78d3      	ldrb	r3, [r2, #3]
     f84:	021b      	lsls	r3, r3, #8
     f86:	7912      	ldrb	r2, [r2, #4]
     f88:	4313      	orrs	r3, r2
     f8a:	6033      	str	r3, [r6, #0]
    *temp = ((21875 * *temp) >> 13) - 45000;
     f8c:	4b09      	ldr	r3, [pc, #36]	; (fb4 <shtc1_read_async_result+0x98>)
     f8e:	683a      	ldr	r2, [r7, #0]
     f90:	4353      	muls	r3, r2
     f92:	135b      	asrs	r3, r3, #13
     f94:	4a08      	ldr	r2, [pc, #32]	; (fb8 <shtc1_read_async_result+0x9c>)
     f96:	4694      	mov	ip, r2
     f98:	4463      	add	r3, ip
     f9a:	603b      	str	r3, [r7, #0]
    *rh = ((12500 * *rh) >> 13);
     f9c:	4b07      	ldr	r3, [pc, #28]	; (fbc <shtc1_read_async_result+0xa0>)
     f9e:	6832      	ldr	r2, [r6, #0]
     fa0:	4353      	muls	r3, r2
     fa2:	135b      	asrs	r3, r3, #13
     fa4:	6033      	str	r3, [r6, #0]
    return STATUS_OK;
     fa6:	e7d8      	b.n	f5a <shtc1_read_async_result+0x3e>
     fa8:	000099cf 	.word	0x000099cf
     fac:	00000bcd 	.word	0x00000bcd
     fb0:	00000ed1 	.word	0x00000ed1
     fb4:	00005573 	.word	0x00005573
     fb8:	ffff5038 	.word	0xffff5038
     fbc:	000030d4 	.word	0x000030d4

00000fc0 <shtc1_read_sync>:

static enum status_code shtc1_read_sync(struct i2c_master_module *i2c_master_instance_ptr,
        const uint8_t command[], int *temp, int *rh)
{
     fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
     fc2:	b087      	sub	sp, #28
     fc4:	0004      	movs	r4, r0
     fc6:	000d      	movs	r5, r1
     fc8:	9201      	str	r2, [sp, #4]
     fca:	001e      	movs	r6, r3
    enum status_code ret;
    struct i2c_master_packet packet = {
     fcc:	af03      	add	r7, sp, #12
     fce:	220c      	movs	r2, #12
     fd0:	2100      	movs	r1, #0
     fd2:	0038      	movs	r0, r7
     fd4:	4b0a      	ldr	r3, [pc, #40]	; (1000 <shtc1_read_sync+0x40>)
     fd6:	4798      	blx	r3
     fd8:	2370      	movs	r3, #112	; 0x70
     fda:	803b      	strh	r3, [r7, #0]
     fdc:	3b6e      	subs	r3, #110	; 0x6e
     fde:	807b      	strh	r3, [r7, #2]
     fe0:	607d      	str	r5, [r7, #4]
            .data_length = COMMAND_SIZE,
            .data = (uint8_t *)command,
			.ten_bit_address = false,
			.high_speed = false,
    };
    ret = i2c_master_write_packet_wait_no_stop(i2c_master_instance_ptr, &packet);
     fe2:	0039      	movs	r1, r7
     fe4:	0020      	movs	r0, r4
     fe6:	4b07      	ldr	r3, [pc, #28]	; (1004 <shtc1_read_sync+0x44>)
     fe8:	4798      	blx	r3
    if (ret)
     fea:	2800      	cmp	r0, #0
     fec:	d001      	beq.n	ff2 <shtc1_read_sync+0x32>
        return ret;
    return shtc1_read_async_result(i2c_master_instance_ptr, temp, rh);
}
     fee:	b007      	add	sp, #28
     ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return shtc1_read_async_result(i2c_master_instance_ptr, temp, rh);
     ff2:	0032      	movs	r2, r6
     ff4:	9901      	ldr	r1, [sp, #4]
     ff6:	0020      	movs	r0, r4
     ff8:	4b03      	ldr	r3, [pc, #12]	; (1008 <shtc1_read_sync+0x48>)
     ffa:	4798      	blx	r3
     ffc:	e7f7      	b.n	fee <shtc1_read_sync+0x2e>
     ffe:	46c0      	nop			; (mov r8, r8)
    1000:	000099cf 	.word	0x000099cf
    1004:	00000bf1 	.word	0x00000bf1
    1008:	00000f1d 	.word	0x00000f1d

0000100c <shtc1_read_lpm_sync>:

enum status_code shtc1_read_lpm_sync(struct i2c_master_module *i2c_master_instance_ptr,
        int *temp, int *rh)
{
    100c:	b510      	push	{r4, lr}
    100e:	0013      	movs	r3, r2
    return shtc1_read_sync(i2c_master_instance_ptr, CMD_MEASURE_LPM_CS, temp, rh);
    1010:	000a      	movs	r2, r1
    1012:	4902      	ldr	r1, [pc, #8]	; (101c <shtc1_read_lpm_sync+0x10>)
    1014:	4c02      	ldr	r4, [pc, #8]	; (1020 <shtc1_read_lpm_sync+0x14>)
    1016:	47a0      	blx	r4
}
    1018:	bd10      	pop	{r4, pc}
    101a:	46c0      	nop			; (mov r8, r8)
    101c:	0000b008 	.word	0x0000b008
    1020:	00000fc1 	.word	0x00000fc1

00001024 <shtc1_probe>:
    };
    return i2c_master_write_packet_wait(i2c_master_instance_ptr, &packet);
}

bool shtc1_probe(struct i2c_master_module *i2c_master_instance_ptr)
{
    1024:	b510      	push	{r4, lr}
    1026:	b084      	sub	sp, #16
    1028:	0004      	movs	r4, r0
    uint8_t data[3];
    struct i2c_master_packet packet = {
    102a:	220c      	movs	r2, #12
    102c:	2100      	movs	r1, #0
    102e:	4668      	mov	r0, sp
    1030:	4b15      	ldr	r3, [pc, #84]	; (1088 <shtc1_probe+0x64>)
    1032:	4798      	blx	r3
    1034:	2370      	movs	r3, #112	; 0x70
    1036:	466a      	mov	r2, sp
    1038:	8013      	strh	r3, [r2, #0]
    103a:	3b6e      	subs	r3, #110	; 0x6e
    103c:	8053      	strh	r3, [r2, #2]
    103e:	4b13      	ldr	r3, [pc, #76]	; (108c <shtc1_probe+0x68>)
    1040:	9301      	str	r3, [sp, #4]
            .data_length = COMMAND_SIZE,
            .data = (uint8_t *)CMD_READ_ID_REG,
			.ten_bit_address = false,
			.high_speed = false,
    };
    i2c_master_write_packet_wait_no_stop(i2c_master_instance_ptr, &packet);
    1042:	4669      	mov	r1, sp
    1044:	0020      	movs	r0, r4
    1046:	4b12      	ldr	r3, [pc, #72]	; (1090 <shtc1_probe+0x6c>)
    1048:	4798      	blx	r3
    packet.data_length = sizeof(data);
    104a:	2303      	movs	r3, #3
    104c:	466a      	mov	r2, sp
    104e:	8053      	strh	r3, [r2, #2]
    packet.data = data;
    1050:	ab03      	add	r3, sp, #12
    1052:	9301      	str	r3, [sp, #4]
    enum status_code ret = i2c_master_read_packet_wait(i2c_master_instance_ptr, &packet);
    1054:	4669      	mov	r1, sp
    1056:	0020      	movs	r0, r4
    1058:	4b0e      	ldr	r3, [pc, #56]	; (1094 <shtc1_probe+0x70>)
    105a:	4798      	blx	r3
    105c:	0003      	movs	r3, r0

    if (ret)
        return false;
    105e:	2000      	movs	r0, #0
    if (ret)
    1060:	2b00      	cmp	r3, #0
    1062:	d10e      	bne.n	1082 <shtc1_probe+0x5e>
    if (!shtc1_check_crc(data, 2, data[2]))
    1064:	a803      	add	r0, sp, #12
    1066:	7882      	ldrb	r2, [r0, #2]
    1068:	2102      	movs	r1, #2
    106a:	4b0b      	ldr	r3, [pc, #44]	; (1098 <shtc1_probe+0x74>)
    106c:	4798      	blx	r3
    106e:	2800      	cmp	r0, #0
    1070:	d007      	beq.n	1082 <shtc1_probe+0x5e>
        return false;
    return (data[1] & ID_REG_MASK) == ID_REG_CONTENT;
    1072:	ab03      	add	r3, sp, #12
    1074:	785b      	ldrb	r3, [r3, #1]
    1076:	201f      	movs	r0, #31
    1078:	4018      	ands	r0, r3
    107a:	3807      	subs	r0, #7
    107c:	4243      	negs	r3, r0
    107e:	4158      	adcs	r0, r3
    1080:	b2c0      	uxtb	r0, r0
}
    1082:	b004      	add	sp, #16
    1084:	bd10      	pop	{r4, pc}
    1086:	46c0      	nop			; (mov r8, r8)
    1088:	000099cf 	.word	0x000099cf
    108c:	0000b00c 	.word	0x0000b00c
    1090:	00000bf1 	.word	0x00000bf1
    1094:	00000bcd 	.word	0x00000bcd
    1098:	00000ed1 	.word	0x00000ed1

0000109c <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    109c:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    109e:	2000      	movs	r0, #0
    10a0:	4b08      	ldr	r3, [pc, #32]	; (10c4 <delay_init+0x28>)
    10a2:	4798      	blx	r3
    10a4:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    10a6:	4c08      	ldr	r4, [pc, #32]	; (10c8 <delay_init+0x2c>)
    10a8:	21fa      	movs	r1, #250	; 0xfa
    10aa:	0089      	lsls	r1, r1, #2
    10ac:	47a0      	blx	r4
    10ae:	4b07      	ldr	r3, [pc, #28]	; (10cc <delay_init+0x30>)
    10b0:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    10b2:	4907      	ldr	r1, [pc, #28]	; (10d0 <delay_init+0x34>)
    10b4:	0028      	movs	r0, r5
    10b6:	47a0      	blx	r4
    10b8:	4b06      	ldr	r3, [pc, #24]	; (10d4 <delay_init+0x38>)
    10ba:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    10bc:	2205      	movs	r2, #5
    10be:	4b06      	ldr	r3, [pc, #24]	; (10d8 <delay_init+0x3c>)
    10c0:	601a      	str	r2, [r3, #0]
}
    10c2:	bd70      	pop	{r4, r5, r6, pc}
    10c4:	000058b9 	.word	0x000058b9
    10c8:	00007961 	.word	0x00007961
    10cc:	20000000 	.word	0x20000000
    10d0:	000f4240 	.word	0x000f4240
    10d4:	20000004 	.word	0x20000004
    10d8:	e000e010 	.word	0xe000e010

000010dc <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    10dc:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    10de:	4b08      	ldr	r3, [pc, #32]	; (1100 <delay_cycles_ms+0x24>)
    10e0:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    10e2:	4a08      	ldr	r2, [pc, #32]	; (1104 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    10e4:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    10e6:	2180      	movs	r1, #128	; 0x80
    10e8:	0249      	lsls	r1, r1, #9
	while (n--) {
    10ea:	3801      	subs	r0, #1
    10ec:	d307      	bcc.n	10fe <delay_cycles_ms+0x22>
	if (n > 0) {
    10ee:	2c00      	cmp	r4, #0
    10f0:	d0fb      	beq.n	10ea <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    10f2:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    10f4:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    10f6:	6813      	ldr	r3, [r2, #0]
    10f8:	420b      	tst	r3, r1
    10fa:	d0fc      	beq.n	10f6 <delay_cycles_ms+0x1a>
    10fc:	e7f5      	b.n	10ea <delay_cycles_ms+0xe>
	}
}
    10fe:	bd30      	pop	{r4, r5, pc}
    1100:	20000000 	.word	0x20000000
    1104:	e000e010 	.word	0xe000e010

00001108 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    1108:	b510      	push	{r4, lr}
	if (gpfIsr) {
    110a:	4b03      	ldr	r3, [pc, #12]	; (1118 <chip_isr+0x10>)
    110c:	681b      	ldr	r3, [r3, #0]
    110e:	2b00      	cmp	r3, #0
    1110:	d000      	beq.n	1114 <chip_isr+0xc>
		gpfIsr();
    1112:	4798      	blx	r3
	}
}
    1114:	bd10      	pop	{r4, pc}
    1116:	46c0      	nop			; (mov r8, r8)
    1118:	2000008c 	.word	0x2000008c

0000111c <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    111c:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
    111e:	1e44      	subs	r4, r0, #1
    1120:	2800      	cmp	r0, #0
    1122:	d004      	beq.n	112e <nm_bsp_sleep+0x12>
		delay_ms(1);
    1124:	4d02      	ldr	r5, [pc, #8]	; (1130 <nm_bsp_sleep+0x14>)
    1126:	2001      	movs	r0, #1
    1128:	47a8      	blx	r5
	while (u32TimeMsec--) {
    112a:	3c01      	subs	r4, #1
    112c:	d2fb      	bcs.n	1126 <nm_bsp_sleep+0xa>
	}
}
    112e:	bd70      	pop	{r4, r5, r6, pc}
    1130:	000010dd 	.word	0x000010dd

00001134 <nm_bsp_reset>:
{
    1134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1136:	4c07      	ldr	r4, [pc, #28]	; (1154 <nm_bsp_reset+0x20>)
    1138:	2720      	movs	r7, #32
    113a:	6167      	str	r7, [r4, #20]
    113c:	2640      	movs	r6, #64	; 0x40
    113e:	6166      	str	r6, [r4, #20]
	nm_bsp_sleep(100);
    1140:	2064      	movs	r0, #100	; 0x64
    1142:	4d05      	ldr	r5, [pc, #20]	; (1158 <nm_bsp_reset+0x24>)
    1144:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    1146:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(100);
    1148:	2064      	movs	r0, #100	; 0x64
    114a:	47a8      	blx	r5
    114c:	61a6      	str	r6, [r4, #24]
	nm_bsp_sleep(100);
    114e:	2064      	movs	r0, #100	; 0x64
    1150:	47a8      	blx	r5
}
    1152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1154:	41004480 	.word	0x41004480
    1158:	0000111d 	.word	0x0000111d

0000115c <nm_bsp_init>:
{
    115c:	b570      	push	{r4, r5, r6, lr}
    115e:	b082      	sub	sp, #8
	gpfIsr = NULL;
    1160:	2300      	movs	r3, #0
    1162:	4a15      	ldr	r2, [pc, #84]	; (11b8 <nm_bsp_init+0x5c>)
    1164:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    1166:	ac01      	add	r4, sp, #4
    1168:	2501      	movs	r5, #1
    116a:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    116c:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    116e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    1170:	0021      	movs	r1, r4
    1172:	2026      	movs	r0, #38	; 0x26
    1174:	4e11      	ldr	r6, [pc, #68]	; (11bc <nm_bsp_init+0x60>)
    1176:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    1178:	0021      	movs	r1, r4
    117a:	2025      	movs	r0, #37	; 0x25
    117c:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    117e:	0021      	movs	r1, r4
    1180:	2027      	movs	r0, #39	; 0x27
    1182:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    1184:	4b0e      	ldr	r3, [pc, #56]	; (11c0 <nm_bsp_init+0x64>)
    1186:	2220      	movs	r2, #32
    1188:	615a      	str	r2, [r3, #20]
    118a:	3220      	adds	r2, #32
    118c:	615a      	str	r2, [r3, #20]
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    118e:	4b0d      	ldr	r3, [pc, #52]	; (11c4 <nm_bsp_init+0x68>)
    1190:	681b      	ldr	r3, [r3, #0]
    1192:	421d      	tst	r5, r3
    1194:	d003      	beq.n	119e <nm_bsp_init+0x42>
    1196:	4b0b      	ldr	r3, [pc, #44]	; (11c4 <nm_bsp_init+0x68>)
    1198:	681b      	ldr	r3, [r3, #0]
    119a:	079b      	lsls	r3, r3, #30
    119c:	d401      	bmi.n	11a2 <nm_bsp_init+0x46>
	    delay_init();
    119e:	4b0a      	ldr	r3, [pc, #40]	; (11c8 <nm_bsp_init+0x6c>)
    11a0:	4798      	blx	r3
	nm_bsp_reset();
    11a2:	4b0a      	ldr	r3, [pc, #40]	; (11cc <nm_bsp_init+0x70>)
    11a4:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    11a6:	2201      	movs	r2, #1
    11a8:	4b09      	ldr	r3, [pc, #36]	; (11d0 <nm_bsp_init+0x74>)
    11aa:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    11ac:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    11b0:	b662      	cpsie	i
}
    11b2:	2000      	movs	r0, #0
    11b4:	b002      	add	sp, #8
    11b6:	bd70      	pop	{r4, r5, r6, pc}
    11b8:	2000008c 	.word	0x2000008c
    11bc:	000044fd 	.word	0x000044fd
    11c0:	41004480 	.word	0x41004480
    11c4:	e000e010 	.word	0xe000e010
    11c8:	0000109d 	.word	0x0000109d
    11cc:	00001135 	.word	0x00001135
    11d0:	2000000a 	.word	0x2000000a

000011d4 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    11d4:	b510      	push	{r4, lr}
    11d6:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    11d8:	4b0e      	ldr	r3, [pc, #56]	; (1214 <nm_bsp_register_isr+0x40>)
    11da:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    11dc:	ac01      	add	r4, sp, #4
    11de:	0020      	movs	r0, r4
    11e0:	4b0d      	ldr	r3, [pc, #52]	; (1218 <nm_bsp_register_isr+0x44>)
    11e2:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    11e4:	2324      	movs	r3, #36	; 0x24
    11e6:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    11e8:	2300      	movs	r3, #0
    11ea:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    11ec:	3301      	adds	r3, #1
    11ee:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    11f0:	3301      	adds	r3, #1
    11f2:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    11f4:	0021      	movs	r1, r4
    11f6:	2004      	movs	r0, #4
    11f8:	4b08      	ldr	r3, [pc, #32]	; (121c <nm_bsp_register_isr+0x48>)
    11fa:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    11fc:	2200      	movs	r2, #0
    11fe:	2104      	movs	r1, #4
    1200:	4807      	ldr	r0, [pc, #28]	; (1220 <nm_bsp_register_isr+0x4c>)
    1202:	4b08      	ldr	r3, [pc, #32]	; (1224 <nm_bsp_register_isr+0x50>)
    1204:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    1206:	2100      	movs	r1, #0
    1208:	2004      	movs	r0, #4
    120a:	4b07      	ldr	r3, [pc, #28]	; (1228 <nm_bsp_register_isr+0x54>)
    120c:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    120e:	b004      	add	sp, #16
    1210:	bd10      	pop	{r4, pc}
    1212:	46c0      	nop			; (mov r8, r8)
    1214:	2000008c 	.word	0x2000008c
    1218:	00004471 	.word	0x00004471
    121c:	00004485 	.word	0x00004485
    1220:	00001109 	.word	0x00001109
    1224:	0000432d 	.word	0x0000432d
    1228:	00004359 	.word	0x00004359

0000122c <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    122c:	b510      	push	{r4, lr}
	if (u8Enable) {
    122e:	2800      	cmp	r0, #0
    1230:	d104      	bne.n	123c <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    1232:	2100      	movs	r1, #0
    1234:	2004      	movs	r0, #4
    1236:	4b04      	ldr	r3, [pc, #16]	; (1248 <nm_bsp_interrupt_ctrl+0x1c>)
    1238:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    123a:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    123c:	2100      	movs	r1, #0
    123e:	2004      	movs	r0, #4
    1240:	4b02      	ldr	r3, [pc, #8]	; (124c <nm_bsp_interrupt_ctrl+0x20>)
    1242:	4798      	blx	r3
    1244:	e7f9      	b.n	123a <nm_bsp_interrupt_ctrl+0xe>
    1246:	46c0      	nop			; (mov r8, r8)
    1248:	00004379 	.word	0x00004379
    124c:	00004359 	.word	0x00004359

00001250 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    1250:	b530      	push	{r4, r5, lr}
    1252:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    1254:	4c30      	ldr	r4, [pc, #192]	; (1318 <nm_bus_init+0xc8>)
    1256:	2305      	movs	r3, #5
    1258:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    125a:	2300      	movs	r3, #0
    125c:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    125e:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    1260:	a901      	add	r1, sp, #4
    1262:	2201      	movs	r2, #1
    1264:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    1266:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    1268:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    126a:	2005      	movs	r0, #5
    126c:	4b2b      	ldr	r3, [pc, #172]	; (131c <nm_bus_init+0xcc>)
    126e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    1270:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1272:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1274:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1276:	2900      	cmp	r1, #0
    1278:	d104      	bne.n	1284 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
    127a:	0953      	lsrs	r3, r2, #5
    127c:	01db      	lsls	r3, r3, #7
    127e:	4928      	ldr	r1, [pc, #160]	; (1320 <nm_bus_init+0xd0>)
    1280:	468c      	mov	ip, r1
    1282:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1284:	211f      	movs	r1, #31
    1286:	4011      	ands	r1, r2
    1288:	2201      	movs	r2, #1
    128a:	0010      	movs	r0, r2
    128c:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    128e:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    1290:	ac02      	add	r4, sp, #8
    1292:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    1294:	2300      	movs	r3, #0
    1296:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    1298:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    129a:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    129c:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    129e:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    12a0:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    12a2:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    12a4:	3223      	adds	r2, #35	; 0x23
    12a6:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    12a8:	3a18      	subs	r2, #24
    12aa:	2100      	movs	r1, #0
    12ac:	a808      	add	r0, sp, #32
    12ae:	4b1d      	ldr	r3, [pc, #116]	; (1324 <nm_bus_init+0xd4>)
    12b0:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
    12b2:	2380      	movs	r3, #128	; 0x80
    12b4:	025b      	lsls	r3, r3, #9
    12b6:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    12b8:	4b1b      	ldr	r3, [pc, #108]	; (1328 <nm_bus_init+0xd8>)
    12ba:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    12bc:	2301      	movs	r3, #1
    12be:	425b      	negs	r3, r3
    12c0:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    12c2:	4b1a      	ldr	r3, [pc, #104]	; (132c <nm_bus_init+0xdc>)
    12c4:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    12c6:	4b1a      	ldr	r3, [pc, #104]	; (1330 <nm_bus_init+0xe0>)
    12c8:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    12ca:	4b1a      	ldr	r3, [pc, #104]	; (1334 <nm_bus_init+0xe4>)
    12cc:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    12ce:	0022      	movs	r2, r4
    12d0:	4919      	ldr	r1, [pc, #100]	; (1338 <nm_bus_init+0xe8>)
    12d2:	481a      	ldr	r0, [pc, #104]	; (133c <nm_bus_init+0xec>)
    12d4:	4b1a      	ldr	r3, [pc, #104]	; (1340 <nm_bus_init+0xf0>)
    12d6:	4798      	blx	r3
    12d8:	2800      	cmp	r0, #0
    12da:	d11a      	bne.n	1312 <nm_bus_init+0xc2>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    12dc:	4d17      	ldr	r5, [pc, #92]	; (133c <nm_bus_init+0xec>)
    12de:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    12e0:	0020      	movs	r0, r4
    12e2:	4b18      	ldr	r3, [pc, #96]	; (1344 <nm_bus_init+0xf4>)
    12e4:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    12e6:	231f      	movs	r3, #31
    12e8:	4018      	ands	r0, r3
    12ea:	3b1e      	subs	r3, #30
    12ec:	4083      	lsls	r3, r0
    12ee:	4a16      	ldr	r2, [pc, #88]	; (1348 <nm_bus_init+0xf8>)
    12f0:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    12f2:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    12f4:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    12f6:	2b00      	cmp	r3, #0
    12f8:	d1fc      	bne.n	12f4 <nm_bus_init+0xa4>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    12fa:	6823      	ldr	r3, [r4, #0]
    12fc:	2202      	movs	r2, #2
    12fe:	4313      	orrs	r3, r2
    1300:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
    1302:	4b12      	ldr	r3, [pc, #72]	; (134c <nm_bus_init+0xfc>)
    1304:	4798      	blx	r3
	nm_bsp_sleep(1);
    1306:	2001      	movs	r0, #1
    1308:	4b11      	ldr	r3, [pc, #68]	; (1350 <nm_bus_init+0x100>)
    130a:	4798      	blx	r3
#endif
	return result;
    130c:	2000      	movs	r0, #0
}
    130e:	b011      	add	sp, #68	; 0x44
    1310:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
    1312:	2006      	movs	r0, #6
    1314:	4240      	negs	r0, r0
    1316:	e7fa      	b.n	130e <nm_bus_init+0xbe>
    1318:	20000278 	.word	0x20000278
    131c:	000044fd 	.word	0x000044fd
    1320:	41004400 	.word	0x41004400
    1324:	000099cf 	.word	0x000099cf
    1328:	00040003 	.word	0x00040003
    132c:	00060003 	.word	0x00060003
    1330:	00070003 	.word	0x00070003
    1334:	00b71b00 	.word	0x00b71b00
    1338:	42000800 	.word	0x42000800
    133c:	2000027c 	.word	0x2000027c
    1340:	00004965 	.word	0x00004965
    1344:	000048d5 	.word	0x000048d5
    1348:	e000e100 	.word	0xe000e100
    134c:	00001135 	.word	0x00001135
    1350:	0000111d 	.word	0x0000111d

00001354 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    1354:	b5f0      	push	{r4, r5, r6, r7, lr}
    1356:	46de      	mov	lr, fp
    1358:	4657      	mov	r7, sl
    135a:	464e      	mov	r6, r9
    135c:	4645      	mov	r5, r8
    135e:	b5e0      	push	{r5, r6, r7, lr}
    1360:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
    1362:	2803      	cmp	r0, #3
    1364:	d000      	beq.n	1368 <nm_bus_ioctl+0x14>
    1366:	e075      	b.n	1454 <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    1368:	680e      	ldr	r6, [r1, #0]
    136a:	684d      	ldr	r5, [r1, #4]
    136c:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
    136e:	2200      	movs	r2, #0
    1370:	466b      	mov	r3, sp
    1372:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    1374:	2d00      	cmp	r5, #0
    1376:	d027      	beq.n	13c8 <nm_bus_ioctl+0x74>
    1378:	2c00      	cmp	r4, #0
    137a:	d065      	beq.n	1448 <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
    137c:	2e00      	cmp	r6, #0
    137e:	d100      	bne.n	1382 <nm_bus_ioctl+0x2e>
    1380:	e077      	b.n	1472 <nm_bus_ioctl+0x11e>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    1382:	2300      	movs	r3, #0
    1384:	4698      	mov	r8, r3
    1386:	2300      	movs	r3, #0
    1388:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
    138a:	2201      	movs	r2, #1
    138c:	493b      	ldr	r1, [pc, #236]	; (147c <nm_bus_ioctl+0x128>)
    138e:	483c      	ldr	r0, [pc, #240]	; (1480 <nm_bus_ioctl+0x12c>)
    1390:	4b3c      	ldr	r3, [pc, #240]	; (1484 <nm_bus_ioctl+0x130>)
    1392:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1394:	4b3a      	ldr	r3, [pc, #232]	; (1480 <nm_bus_ioctl+0x12c>)
    1396:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
    1398:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
    139a:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    139c:	4699      	mov	r9, r3
			pu8Miso++;
    139e:	4659      	mov	r1, fp
    13a0:	424b      	negs	r3, r1
    13a2:	4159      	adcs	r1, r3
    13a4:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
    13a6:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    13a8:	4653      	mov	r3, sl
    13aa:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    13ac:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
    13ae:	4239      	tst	r1, r7
    13b0:	d0fc      	beq.n	13ac <nm_bus_ioctl+0x58>
    13b2:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    13b4:	4239      	tst	r1, r7
    13b6:	d0fc      	beq.n	13b2 <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    13b8:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    13ba:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
    13bc:	4211      	tst	r1, r2
    13be:	d0fc      	beq.n	13ba <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    13c0:	4649      	mov	r1, r9
    13c2:	7989      	ldrb	r1, [r1, #6]
    13c4:	468c      	mov	ip, r1
    13c6:	e011      	b.n	13ec <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    13c8:	2e00      	cmp	r6, #0
    13ca:	d03a      	beq.n	1442 <nm_bus_ioctl+0xee>
    13cc:	2c00      	cmp	r4, #0
    13ce:	d03e      	beq.n	144e <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    13d0:	2300      	movs	r3, #0
    13d2:	4698      	mov	r8, r3
		u8SkipMiso = 1;
    13d4:	3301      	adds	r3, #1
    13d6:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
    13d8:	466b      	mov	r3, sp
    13da:	1ddd      	adds	r5, r3, #7
    13dc:	e7d5      	b.n	138a <nm_bus_ioctl+0x36>
    13de:	4660      	mov	r0, ip
    13e0:	2801      	cmp	r0, #1
    13e2:	d00d      	beq.n	1400 <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    13e4:	6a98      	ldr	r0, [r3, #40]	; 0x28
    13e6:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    13e8:	2900      	cmp	r1, #0
    13ea:	d00d      	beq.n	1408 <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    13ec:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    13ee:	4211      	tst	r1, r2
    13f0:	d0fc      	beq.n	13ec <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    13f2:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
    13f4:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    13f6:	4210      	tst	r0, r2
    13f8:	d0f1      	beq.n	13de <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    13fa:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    13fc:	311e      	adds	r1, #30
    13fe:	e7ee      	b.n	13de <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1400:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1402:	05c0      	lsls	r0, r0, #23
    1404:	0dc0      	lsrs	r0, r0, #23
    1406:	e7ef      	b.n	13e8 <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
    1408:	7028      	strb	r0, [r5, #0]
		u16Sz--;
    140a:	3c01      	subs	r4, #1
    140c:	b2a4      	uxth	r4, r4
			pu8Miso++;
    140e:	445d      	add	r5, fp
			pu8Mosi++;
    1410:	4643      	mov	r3, r8
    1412:	4259      	negs	r1, r3
    1414:	414b      	adcs	r3, r1
    1416:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
    1418:	2c00      	cmp	r4, #0
    141a:	d1c4      	bne.n	13a6 <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    141c:	4b18      	ldr	r3, [pc, #96]	; (1480 <nm_bus_ioctl+0x12c>)
    141e:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
    1420:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1422:	7e0b      	ldrb	r3, [r1, #24]
    1424:	4213      	tst	r3, r2
    1426:	d0fc      	beq.n	1422 <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
    1428:	2200      	movs	r2, #0
    142a:	4914      	ldr	r1, [pc, #80]	; (147c <nm_bus_ioctl+0x128>)
    142c:	4814      	ldr	r0, [pc, #80]	; (1480 <nm_bus_ioctl+0x12c>)
    142e:	4b15      	ldr	r3, [pc, #84]	; (1484 <nm_bus_ioctl+0x130>)
    1430:	4798      	blx	r3
	return M2M_SUCCESS;
    1432:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
    1434:	b003      	add	sp, #12
    1436:	bc3c      	pop	{r2, r3, r4, r5}
    1438:	4690      	mov	r8, r2
    143a:	4699      	mov	r9, r3
    143c:	46a2      	mov	sl, r4
    143e:	46ab      	mov	fp, r5
    1440:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
    1442:	200f      	movs	r0, #15
    1444:	4240      	negs	r0, r0
    1446:	e7f5      	b.n	1434 <nm_bus_ioctl+0xe0>
    1448:	200f      	movs	r0, #15
    144a:	4240      	negs	r0, r0
    144c:	e7f2      	b.n	1434 <nm_bus_ioctl+0xe0>
    144e:	200f      	movs	r0, #15
    1450:	4240      	negs	r0, r0
		break;
    1452:	e7ef      	b.n	1434 <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
    1454:	220e      	movs	r2, #14
    1456:	32ff      	adds	r2, #255	; 0xff
    1458:	490b      	ldr	r1, [pc, #44]	; (1488 <nm_bus_ioctl+0x134>)
    145a:	480c      	ldr	r0, [pc, #48]	; (148c <nm_bus_ioctl+0x138>)
    145c:	4b0c      	ldr	r3, [pc, #48]	; (1490 <nm_bus_ioctl+0x13c>)
    145e:	4798      	blx	r3
    1460:	480c      	ldr	r0, [pc, #48]	; (1494 <nm_bus_ioctl+0x140>)
    1462:	4b0d      	ldr	r3, [pc, #52]	; (1498 <nm_bus_ioctl+0x144>)
    1464:	4798      	blx	r3
    1466:	200d      	movs	r0, #13
    1468:	4b0c      	ldr	r3, [pc, #48]	; (149c <nm_bus_ioctl+0x148>)
    146a:	4798      	blx	r3
			s8Ret = -1;
    146c:	2001      	movs	r0, #1
    146e:	4240      	negs	r0, r0
	return s8Ret;
    1470:	e7e0      	b.n	1434 <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
    1472:	2301      	movs	r3, #1
    1474:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
    1476:	466b      	mov	r3, sp
    1478:	1dde      	adds	r6, r3, #7
    147a:	e784      	b.n	1386 <nm_bus_ioctl+0x32>
    147c:	20000278 	.word	0x20000278
    1480:	2000027c 	.word	0x2000027c
    1484:	00004b3d 	.word	0x00004b3d
    1488:	0000b010 	.word	0x0000b010
    148c:	0000b020 	.word	0x0000b020
    1490:	00009b31 	.word	0x00009b31
    1494:	0000b034 	.word	0x0000b034
    1498:	00009c4d 	.word	0x00009c4d
    149c:	00009b65 	.word	0x00009b65

000014a0 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    14a0:	b530      	push	{r4, r5, lr}
    14a2:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    14a4:	ab01      	add	r3, sp, #4
    14a6:	2200      	movs	r2, #0
    14a8:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
    14aa:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    14ac:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
    14ae:	4d13      	ldr	r5, [pc, #76]	; (14fc <nm_bus_deinit+0x5c>)
    14b0:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    14b2:	0020      	movs	r0, r4
    14b4:	4b12      	ldr	r3, [pc, #72]	; (1500 <nm_bus_deinit+0x60>)
    14b6:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    14b8:	231f      	movs	r3, #31
    14ba:	4018      	ands	r0, r3
    14bc:	3b1e      	subs	r3, #30
    14be:	4083      	lsls	r3, r0
    14c0:	2280      	movs	r2, #128	; 0x80
    14c2:	4910      	ldr	r1, [pc, #64]	; (1504 <nm_bus_deinit+0x64>)
    14c4:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    14c6:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    14c8:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    14ca:	2b00      	cmp	r3, #0
    14cc:	d1fc      	bne.n	14c8 <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    14ce:	338f      	adds	r3, #143	; 0x8f
    14d0:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    14d2:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    14d4:	6823      	ldr	r3, [r4, #0]
    14d6:	2202      	movs	r2, #2
    14d8:	4393      	bics	r3, r2
    14da:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    14dc:	a901      	add	r1, sp, #4
    14de:	2006      	movs	r0, #6
    14e0:	4c09      	ldr	r4, [pc, #36]	; (1508 <nm_bus_deinit+0x68>)
    14e2:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    14e4:	a901      	add	r1, sp, #4
    14e6:	2004      	movs	r0, #4
    14e8:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    14ea:	a901      	add	r1, sp, #4
    14ec:	2007      	movs	r0, #7
    14ee:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    14f0:	a901      	add	r1, sp, #4
    14f2:	2005      	movs	r0, #5
    14f4:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    14f6:	2000      	movs	r0, #0
    14f8:	b003      	add	sp, #12
    14fa:	bd30      	pop	{r4, r5, pc}
    14fc:	2000027c 	.word	0x2000027c
    1500:	000048d5 	.word	0x000048d5
    1504:	e000e100 	.word	0xe000e100
    1508:	000044fd 	.word	0x000044fd

0000150c <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    150c:	2a00      	cmp	r2, #0
    150e:	d006      	beq.n	151e <m2m_memcpy+0x12>
    1510:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
    1512:	780b      	ldrb	r3, [r1, #0]
    1514:	7003      	strb	r3, [r0, #0]
		pDst++;
    1516:	3001      	adds	r0, #1
		pSrc++;
    1518:	3101      	adds	r1, #1
	}while(--sz);
    151a:	4290      	cmp	r0, r2
    151c:	d1f9      	bne.n	1512 <m2m_memcpy+0x6>
}
    151e:	4770      	bx	lr

00001520 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    1520:	2a00      	cmp	r2, #0
    1522:	d004      	beq.n	152e <m2m_memset+0xe>
    1524:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
    1526:	7001      	strb	r1, [r0, #0]
		pBuf++;
    1528:	3001      	adds	r0, #1
	}while(--sz);
    152a:	4290      	cmp	r0, r2
    152c:	d1fb      	bne.n	1526 <m2m_memset+0x6>
}
    152e:	4770      	bx	lr

00001530 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    1530:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
    1532:	7802      	ldrb	r2, [r0, #0]
    1534:	2a00      	cmp	r2, #0
    1536:	d007      	beq.n	1548 <m2m_strlen+0x18>
    1538:	2000      	movs	r0, #0
	{
		u16StrLen ++;
    153a:	3001      	adds	r0, #1
    153c:	b280      	uxth	r0, r0
		pcStr++;
    153e:	3301      	adds	r3, #1
	while(*pcStr)
    1540:	781a      	ldrb	r2, [r3, #0]
    1542:	2a00      	cmp	r2, #0
    1544:	d1f9      	bne.n	153a <m2m_strlen+0xa>
	}
	return u16StrLen;
}
    1546:	4770      	bx	lr
	uint16	u16StrLen = 0;
    1548:	2000      	movs	r0, #0
    154a:	e7fc      	b.n	1546 <m2m_strlen+0x16>

0000154c <isr>:

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
    154c:	4a02      	ldr	r2, [pc, #8]	; (1558 <isr+0xc>)
    154e:	78d3      	ldrb	r3, [r2, #3]
    1550:	3301      	adds	r3, #1
    1552:	b2db      	uxtb	r3, r3
    1554:	70d3      	strb	r3, [r2, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
    1556:	4770      	bx	lr
    1558:	200002b8 	.word	0x200002b8

0000155c <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    155c:	4770      	bx	lr
	...

00001560 <hif_set_rx_done>:
{
    1560:	b500      	push	{lr}
    1562:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
    1564:	2200      	movs	r2, #0
    1566:	4b0a      	ldr	r3, [pc, #40]	; (1590 <hif_set_rx_done+0x30>)
    1568:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
    156a:	2001      	movs	r0, #1
    156c:	4b09      	ldr	r3, [pc, #36]	; (1594 <hif_set_rx_done+0x34>)
    156e:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    1570:	a901      	add	r1, sp, #4
    1572:	4809      	ldr	r0, [pc, #36]	; (1598 <hif_set_rx_done+0x38>)
    1574:	4b09      	ldr	r3, [pc, #36]	; (159c <hif_set_rx_done+0x3c>)
    1576:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    1578:	2800      	cmp	r0, #0
    157a:	d001      	beq.n	1580 <hif_set_rx_done+0x20>
}
    157c:	b003      	add	sp, #12
    157e:	bd00      	pop	{pc}
	reg |= NBIT1;
    1580:	2102      	movs	r1, #2
    1582:	9b01      	ldr	r3, [sp, #4]
    1584:	4319      	orrs	r1, r3
    1586:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    1588:	4803      	ldr	r0, [pc, #12]	; (1598 <hif_set_rx_done+0x38>)
    158a:	4b05      	ldr	r3, [pc, #20]	; (15a0 <hif_set_rx_done+0x40>)
    158c:	4798      	blx	r3
    158e:	e7f5      	b.n	157c <hif_set_rx_done+0x1c>
    1590:	200002b8 	.word	0x200002b8
    1594:	0000122d 	.word	0x0000122d
    1598:	00001070 	.word	0x00001070
    159c:	00002969 	.word	0x00002969
    15a0:	00002975 	.word	0x00002975

000015a4 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    15a4:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
    15a6:	4b0c      	ldr	r3, [pc, #48]	; (15d8 <hif_chip_wake+0x34>)
    15a8:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    15aa:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
    15ac:	2b00      	cmp	r3, #0
    15ae:	d10d      	bne.n	15cc <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    15b0:	4b09      	ldr	r3, [pc, #36]	; (15d8 <hif_chip_wake+0x34>)
    15b2:	785b      	ldrb	r3, [r3, #1]
    15b4:	2b00      	cmp	r3, #0
    15b6:	d103      	bne.n	15c0 <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    15b8:	4b07      	ldr	r3, [pc, #28]	; (15d8 <hif_chip_wake+0x34>)
    15ba:	781b      	ldrb	r3, [r3, #0]
    15bc:	2b00      	cmp	r3, #0
    15be:	d106      	bne.n	15ce <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    15c0:	4a05      	ldr	r2, [pc, #20]	; (15d8 <hif_chip_wake+0x34>)
    15c2:	7853      	ldrb	r3, [r2, #1]
    15c4:	3301      	adds	r3, #1
    15c6:	b2db      	uxtb	r3, r3
    15c8:	7053      	strb	r3, [r2, #1]
    15ca:	2000      	movs	r0, #0
ERR1:
	return ret;
}
    15cc:	bd10      	pop	{r4, pc}
			ret = chip_wake();
    15ce:	4b03      	ldr	r3, [pc, #12]	; (15dc <hif_chip_wake+0x38>)
    15d0:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    15d2:	2800      	cmp	r0, #0
    15d4:	d0f4      	beq.n	15c0 <hif_chip_wake+0x1c>
    15d6:	e7f9      	b.n	15cc <hif_chip_wake+0x28>
    15d8:	200002b8 	.word	0x200002b8
    15dc:	00002651 	.word	0x00002651

000015e0 <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
    15e0:	4b05      	ldr	r3, [pc, #20]	; (15f8 <hif_chip_sleep_sc+0x18>)
    15e2:	785b      	ldrb	r3, [r3, #1]
    15e4:	2b00      	cmp	r3, #0
    15e6:	d004      	beq.n	15f2 <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
    15e8:	4a03      	ldr	r2, [pc, #12]	; (15f8 <hif_chip_sleep_sc+0x18>)
    15ea:	7853      	ldrb	r3, [r2, #1]
    15ec:	3b01      	subs	r3, #1
    15ee:	b2db      	uxtb	r3, r3
    15f0:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
    15f2:	2000      	movs	r0, #0
    15f4:	4770      	bx	lr
    15f6:	46c0      	nop			; (mov r8, r8)
    15f8:	200002b8 	.word	0x200002b8

000015fc <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    15fc:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
    15fe:	4b0b      	ldr	r3, [pc, #44]	; (162c <hif_chip_sleep+0x30>)
    1600:	785b      	ldrb	r3, [r3, #1]
    1602:	2b00      	cmp	r3, #0
    1604:	d004      	beq.n	1610 <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
    1606:	4a09      	ldr	r2, [pc, #36]	; (162c <hif_chip_sleep+0x30>)
    1608:	7853      	ldrb	r3, [r2, #1]
    160a:	3b01      	subs	r3, #1
    160c:	b2db      	uxtb	r3, r3
    160e:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    1610:	4b06      	ldr	r3, [pc, #24]	; (162c <hif_chip_sleep+0x30>)
    1612:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
    1614:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
    1616:	2b00      	cmp	r3, #0
    1618:	d103      	bne.n	1622 <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    161a:	4b04      	ldr	r3, [pc, #16]	; (162c <hif_chip_sleep+0x30>)
    161c:	781b      	ldrb	r3, [r3, #0]
    161e:	2b00      	cmp	r3, #0
    1620:	d100      	bne.n	1624 <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
    1622:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
    1624:	4b02      	ldr	r3, [pc, #8]	; (1630 <hif_chip_sleep+0x34>)
    1626:	4798      	blx	r3
    1628:	e7fb      	b.n	1622 <hif_chip_sleep+0x26>
    162a:	46c0      	nop			; (mov r8, r8)
    162c:	200002b8 	.word	0x200002b8
    1630:	000025e9 	.word	0x000025e9

00001634 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    1634:	b5f0      	push	{r4, r5, r6, r7, lr}
    1636:	46de      	mov	lr, fp
    1638:	4657      	mov	r7, sl
    163a:	b580      	push	{r7, lr}
    163c:	b089      	sub	sp, #36	; 0x24
    163e:	4683      	mov	fp, r0
    1640:	468a      	mov	sl, r1
    1642:	9201      	str	r2, [sp, #4]
    1644:	9300      	str	r3, [sp, #0]
    1646:	ab10      	add	r3, sp, #64	; 0x40
    1648:	cb80      	ldmia	r3!, {r7}
    164a:	881e      	ldrh	r6, [r3, #0]
    164c:	ab12      	add	r3, sp, #72	; 0x48
    164e:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    1650:	227f      	movs	r2, #127	; 0x7f
    1652:	400a      	ands	r2, r1
    1654:	ab07      	add	r3, sp, #28
    1656:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    1658:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    165a:	2208      	movs	r2, #8
    165c:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    165e:	2f00      	cmp	r7, #0
    1660:	d03d      	beq.n	16de <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    1662:	885a      	ldrh	r2, [r3, #2]
    1664:	1992      	adds	r2, r2, r6
    1666:	18aa      	adds	r2, r5, r2
    1668:	b292      	uxth	r2, r2
    166a:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
    166c:	4b69      	ldr	r3, [pc, #420]	; (1814 <hif_send+0x1e0>)
    166e:	4798      	blx	r3
    1670:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    1672:	d000      	beq.n	1676 <hif_send+0x42>
    1674:	e0c1      	b.n	17fa <hif_send+0x1c6>
	{
		volatile uint32 reg, dma_addr = 0;
    1676:	2300      	movs	r3, #0
    1678:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
    167a:	aa02      	add	r2, sp, #8
    167c:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    167e:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
    1680:	9b04      	ldr	r3, [sp, #16]
    1682:	465a      	mov	r2, fp
    1684:	431a      	orrs	r2, r3
    1686:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
    1688:	9a04      	ldr	r2, [sp, #16]
    168a:	4653      	mov	r3, sl
    168c:	021b      	lsls	r3, r3, #8
    168e:	4313      	orrs	r3, r2
    1690:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
    1692:	ab07      	add	r3, sp, #28
    1694:	885b      	ldrh	r3, [r3, #2]
    1696:	9a04      	ldr	r2, [sp, #16]
    1698:	041b      	lsls	r3, r3, #16
    169a:	4313      	orrs	r3, r2
    169c:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    169e:	9904      	ldr	r1, [sp, #16]
    16a0:	485d      	ldr	r0, [pc, #372]	; (1818 <hif_send+0x1e4>)
    16a2:	4b5e      	ldr	r3, [pc, #376]	; (181c <hif_send+0x1e8>)
    16a4:	4798      	blx	r3
    16a6:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    16a8:	d157      	bne.n	175a <hif_send+0x126>

		reg = 0UL;
    16aa:	2300      	movs	r3, #0
    16ac:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
    16ae:	9b04      	ldr	r3, [sp, #16]
    16b0:	2202      	movs	r2, #2
    16b2:	4313      	orrs	r3, r2
    16b4:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    16b6:	9904      	ldr	r1, [sp, #16]
    16b8:	4859      	ldr	r0, [pc, #356]	; (1820 <hif_send+0x1ec>)
    16ba:	4b58      	ldr	r3, [pc, #352]	; (181c <hif_send+0x1e8>)
    16bc:	4798      	blx	r3
    16be:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    16c0:	d14b      	bne.n	175a <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    16c2:	2200      	movs	r2, #0
    16c4:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    16c6:	ab02      	add	r3, sp, #8
    16c8:	80da      	strh	r2, [r3, #6]
    16ca:	3306      	adds	r3, #6
    16cc:	881b      	ldrh	r3, [r3, #0]
    16ce:	b29b      	uxth	r3, r3
    16d0:	4a54      	ldr	r2, [pc, #336]	; (1824 <hif_send+0x1f0>)
    16d2:	4293      	cmp	r3, r2
    16d4:	d849      	bhi.n	176a <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    16d6:	4c54      	ldr	r4, [pc, #336]	; (1828 <hif_send+0x1f4>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    16d8:	4b54      	ldr	r3, [pc, #336]	; (182c <hif_send+0x1f8>)
    16da:	469a      	mov	sl, r3
    16dc:	e017      	b.n	170e <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
    16de:	ab07      	add	r3, sp, #28
    16e0:	885a      	ldrh	r2, [r3, #2]
    16e2:	9900      	ldr	r1, [sp, #0]
    16e4:	468c      	mov	ip, r1
    16e6:	4462      	add	r2, ip
    16e8:	b292      	uxth	r2, r2
    16ea:	805a      	strh	r2, [r3, #2]
    16ec:	e7be      	b.n	166c <hif_send+0x38>
				nm_bsp_sleep(1);
    16ee:	2001      	movs	r0, #1
    16f0:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
    16f2:	9b04      	ldr	r3, [sp, #16]
    16f4:	079b      	lsls	r3, r3, #30
    16f6:	d528      	bpl.n	174a <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
    16f8:	ab02      	add	r3, sp, #8
    16fa:	88da      	ldrh	r2, [r3, #6]
    16fc:	3201      	adds	r2, #1
    16fe:	b292      	uxth	r2, r2
    1700:	80da      	strh	r2, [r3, #6]
    1702:	3306      	adds	r3, #6
    1704:	881b      	ldrh	r3, [r3, #0]
    1706:	b29b      	uxth	r3, r3
    1708:	4a46      	ldr	r2, [pc, #280]	; (1824 <hif_send+0x1f0>)
    170a:	4293      	cmp	r3, r2
    170c:	d82d      	bhi.n	176a <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    170e:	a904      	add	r1, sp, #16
    1710:	4843      	ldr	r0, [pc, #268]	; (1820 <hif_send+0x1ec>)
    1712:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
    1714:	2800      	cmp	r0, #0
    1716:	d128      	bne.n	176a <hif_send+0x136>
			if(cnt >= 500) {
    1718:	ab02      	add	r3, sp, #8
    171a:	3306      	adds	r3, #6
    171c:	881b      	ldrh	r3, [r3, #0]
    171e:	b29b      	uxth	r3, r3
    1720:	22f4      	movs	r2, #244	; 0xf4
    1722:	32ff      	adds	r2, #255	; 0xff
    1724:	4293      	cmp	r3, r2
    1726:	d9e4      	bls.n	16f2 <hif_send+0xbe>
				if(cnt < 501) {
    1728:	ab02      	add	r3, sp, #8
    172a:	3306      	adds	r3, #6
    172c:	881b      	ldrh	r3, [r3, #0]
    172e:	b29b      	uxth	r3, r3
    1730:	3201      	adds	r2, #1
    1732:	4293      	cmp	r3, r2
    1734:	d8db      	bhi.n	16ee <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
    1736:	483e      	ldr	r0, [pc, #248]	; (1830 <hif_send+0x1fc>)
    1738:	4b3e      	ldr	r3, [pc, #248]	; (1834 <hif_send+0x200>)
    173a:	4798      	blx	r3
    173c:	483e      	ldr	r0, [pc, #248]	; (1838 <hif_send+0x204>)
    173e:	4b3f      	ldr	r3, [pc, #252]	; (183c <hif_send+0x208>)
    1740:	4798      	blx	r3
    1742:	200d      	movs	r0, #13
    1744:	4b3e      	ldr	r3, [pc, #248]	; (1840 <hif_send+0x20c>)
    1746:	4798      	blx	r3
    1748:	e7d1      	b.n	16ee <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    174a:	a905      	add	r1, sp, #20
    174c:	483d      	ldr	r0, [pc, #244]	; (1844 <hif_send+0x210>)
    174e:	4b36      	ldr	r3, [pc, #216]	; (1828 <hif_send+0x1f4>)
    1750:	4798      	blx	r3
    1752:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
    1754:	d009      	beq.n	176a <hif_send+0x136>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    1756:	2300      	movs	r3, #0
    1758:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    175a:	4b3b      	ldr	r3, [pc, #236]	; (1848 <hif_send+0x214>)
    175c:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
    175e:	0020      	movs	r0, r4
    1760:	b009      	add	sp, #36	; 0x24
    1762:	bc0c      	pop	{r2, r3}
    1764:	4692      	mov	sl, r2
    1766:	469b      	mov	fp, r3
    1768:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
    176a:	9b05      	ldr	r3, [sp, #20]
    176c:	2b00      	cmp	r3, #0
    176e:	d03f      	beq.n	17f0 <hif_send+0x1bc>
			u32CurrAddr = dma_addr;
    1770:	9b05      	ldr	r3, [sp, #20]
    1772:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    1774:	a907      	add	r1, sp, #28
    1776:	884b      	ldrh	r3, [r1, #2]
    1778:	b29b      	uxth	r3, r3
    177a:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    177c:	9806      	ldr	r0, [sp, #24]
    177e:	2208      	movs	r2, #8
    1780:	4b32      	ldr	r3, [pc, #200]	; (184c <hif_send+0x218>)
    1782:	4798      	blx	r3
    1784:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    1786:	d1e8      	bne.n	175a <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    1788:	9b06      	ldr	r3, [sp, #24]
    178a:	3308      	adds	r3, #8
    178c:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
    178e:	9b01      	ldr	r3, [sp, #4]
    1790:	2b00      	cmp	r3, #0
    1792:	d00b      	beq.n	17ac <hif_send+0x178>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    1794:	9806      	ldr	r0, [sp, #24]
    1796:	9a00      	ldr	r2, [sp, #0]
    1798:	0019      	movs	r1, r3
    179a:	4b2c      	ldr	r3, [pc, #176]	; (184c <hif_send+0x218>)
    179c:	4798      	blx	r3
    179e:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    17a0:	d1db      	bne.n	175a <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
    17a2:	9b06      	ldr	r3, [sp, #24]
    17a4:	9a00      	ldr	r2, [sp, #0]
    17a6:	4694      	mov	ip, r2
    17a8:	4463      	add	r3, ip
    17aa:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
    17ac:	2f00      	cmp	r7, #0
    17ae:	d00e      	beq.n	17ce <hif_send+0x19a>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    17b0:	9b06      	ldr	r3, [sp, #24]
    17b2:	9a00      	ldr	r2, [sp, #0]
    17b4:	1aad      	subs	r5, r5, r2
    17b6:	18ed      	adds	r5, r5, r3
    17b8:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    17ba:	9806      	ldr	r0, [sp, #24]
    17bc:	0032      	movs	r2, r6
    17be:	0039      	movs	r1, r7
    17c0:	4b22      	ldr	r3, [pc, #136]	; (184c <hif_send+0x218>)
    17c2:	4798      	blx	r3
    17c4:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    17c6:	d1c8      	bne.n	175a <hif_send+0x126>
				u32CurrAddr += u16DataSize;
    17c8:	9b06      	ldr	r3, [sp, #24]
    17ca:	18f3      	adds	r3, r6, r3
    17cc:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
    17ce:	9b05      	ldr	r3, [sp, #20]
    17d0:	009b      	lsls	r3, r3, #2
    17d2:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
    17d4:	9b04      	ldr	r3, [sp, #16]
    17d6:	2202      	movs	r2, #2
    17d8:	4313      	orrs	r3, r2
    17da:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    17dc:	9904      	ldr	r1, [sp, #16]
    17de:	481c      	ldr	r0, [pc, #112]	; (1850 <hif_send+0x21c>)
    17e0:	4b0e      	ldr	r3, [pc, #56]	; (181c <hif_send+0x1e8>)
    17e2:	4798      	blx	r3
    17e4:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    17e6:	d1b8      	bne.n	175a <hif_send+0x126>
 	ret = hif_chip_sleep();
    17e8:	4b1a      	ldr	r3, [pc, #104]	; (1854 <hif_send+0x220>)
    17ea:	4798      	blx	r3
    17ec:	0004      	movs	r4, r0
	return ret;
    17ee:	e7b6      	b.n	175e <hif_send+0x12a>
			ret = hif_chip_sleep();
    17f0:	4b18      	ldr	r3, [pc, #96]	; (1854 <hif_send+0x220>)
    17f2:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
    17f4:	2403      	movs	r4, #3
    17f6:	4264      	negs	r4, r4
			goto ERR2;
    17f8:	e7b1      	b.n	175e <hif_send+0x12a>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    17fa:	22cb      	movs	r2, #203	; 0xcb
    17fc:	0052      	lsls	r2, r2, #1
    17fe:	4916      	ldr	r1, [pc, #88]	; (1858 <hif_send+0x224>)
    1800:	4816      	ldr	r0, [pc, #88]	; (185c <hif_send+0x228>)
    1802:	4b0c      	ldr	r3, [pc, #48]	; (1834 <hif_send+0x200>)
    1804:	4798      	blx	r3
    1806:	4816      	ldr	r0, [pc, #88]	; (1860 <hif_send+0x22c>)
    1808:	4b0c      	ldr	r3, [pc, #48]	; (183c <hif_send+0x208>)
    180a:	4798      	blx	r3
    180c:	200d      	movs	r0, #13
    180e:	4b0c      	ldr	r3, [pc, #48]	; (1840 <hif_send+0x20c>)
    1810:	4798      	blx	r3
		goto ERR2;
    1812:	e7a4      	b.n	175e <hif_send+0x12a>
    1814:	000015a5 	.word	0x000015a5
    1818:	0000108c 	.word	0x0000108c
    181c:	00002975 	.word	0x00002975
    1820:	00001078 	.word	0x00001078
    1824:	000003e7 	.word	0x000003e7
    1828:	00002969 	.word	0x00002969
    182c:	0000111d 	.word	0x0000111d
    1830:	0000b350 	.word	0x0000b350
    1834:	00009b31 	.word	0x00009b31
    1838:	0000b35c 	.word	0x0000b35c
    183c:	00009c4d 	.word	0x00009c4d
    1840:	00009b65 	.word	0x00009b65
    1844:	00150400 	.word	0x00150400
    1848:	000015e1 	.word	0x000015e1
    184c:	000029e9 	.word	0x000029e9
    1850:	0000106c 	.word	0x0000106c
    1854:	000015fd 	.word	0x000015fd
    1858:	0000b068 	.word	0x0000b068
    185c:	0000b020 	.word	0x0000b020
    1860:	0000b36c 	.word	0x0000b36c

00001864 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    1864:	b5f0      	push	{r4, r5, r6, r7, lr}
    1866:	46ce      	mov	lr, r9
    1868:	4647      	mov	r7, r8
    186a:	b580      	push	{r7, lr}
    186c:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	while (gstrHifCxt.u8Interrupt) {
    186e:	4bcf      	ldr	r3, [pc, #828]	; (1bac <hif_handle_isr+0x348>)
    1870:	4698      	mov	r8, r3
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    1872:	4699      	mov	r9, r3
	while (gstrHifCxt.u8Interrupt) {
    1874:	e080      	b.n	1978 <hif_handle_isr+0x114>
				gstrHifCxt.u32RxAddr = address;
    1876:	4bcd      	ldr	r3, [pc, #820]	; (1bac <hif_handle_isr+0x348>)
    1878:	9a05      	ldr	r2, [sp, #20]
    187a:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
    187c:	609d      	str	r5, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    187e:	af04      	add	r7, sp, #16
    1880:	2204      	movs	r2, #4
    1882:	0039      	movs	r1, r7
    1884:	9805      	ldr	r0, [sp, #20]
    1886:	4bca      	ldr	r3, [pc, #808]	; (1bb0 <hif_handle_isr+0x34c>)
    1888:	4798      	blx	r3
    188a:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    188c:	887b      	ldrh	r3, [r7, #2]
    188e:	b29b      	uxth	r3, r3
    1890:	807b      	strh	r3, [r7, #2]
				if(M2M_SUCCESS != ret)
    1892:	2800      	cmp	r0, #0
    1894:	d133      	bne.n	18fe <hif_handle_isr+0x9a>
				if(strHif.u16Length != size)
    1896:	ab04      	add	r3, sp, #16
    1898:	885b      	ldrh	r3, [r3, #2]
    189a:	b29b      	uxth	r3, r3
    189c:	429d      	cmp	r5, r3
    189e:	d004      	beq.n	18aa <hif_handle_isr+0x46>
					if((size - strHif.u16Length) > 4)
    18a0:	ab04      	add	r3, sp, #16
    18a2:	885b      	ldrh	r3, [r3, #2]
    18a4:	1aeb      	subs	r3, r5, r3
    18a6:	2b04      	cmp	r3, #4
    18a8:	dc39      	bgt.n	191e <hif_handle_isr+0xba>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    18aa:	ab04      	add	r3, sp, #16
    18ac:	781b      	ldrb	r3, [r3, #0]
    18ae:	2b01      	cmp	r3, #1
    18b0:	d04e      	beq.n	1950 <hif_handle_isr+0xec>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    18b2:	ab04      	add	r3, sp, #16
    18b4:	781b      	ldrb	r3, [r3, #0]
    18b6:	2b02      	cmp	r3, #2
    18b8:	d078      	beq.n	19ac <hif_handle_isr+0x148>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    18ba:	ab04      	add	r3, sp, #16
    18bc:	781b      	ldrb	r3, [r3, #0]
    18be:	2b04      	cmp	r3, #4
    18c0:	d100      	bne.n	18c4 <hif_handle_isr+0x60>
    18c2:	e090      	b.n	19e6 <hif_handle_isr+0x182>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    18c4:	ab04      	add	r3, sp, #16
    18c6:	781b      	ldrb	r3, [r3, #0]
    18c8:	2b06      	cmp	r3, #6
    18ca:	d100      	bne.n	18ce <hif_handle_isr+0x6a>
    18cc:	e0a8      	b.n	1a20 <hif_handle_isr+0x1bc>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    18ce:	ab04      	add	r3, sp, #16
    18d0:	781b      	ldrb	r3, [r3, #0]
    18d2:	2b07      	cmp	r3, #7
    18d4:	d100      	bne.n	18d8 <hif_handle_isr+0x74>
    18d6:	e0bf      	b.n	1a58 <hif_handle_isr+0x1f4>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    18d8:	ab04      	add	r3, sp, #16
    18da:	781b      	ldrb	r3, [r3, #0]
    18dc:	2b05      	cmp	r3, #5
    18de:	d100      	bne.n	18e2 <hif_handle_isr+0x7e>
    18e0:	e0d6      	b.n	1a90 <hif_handle_isr+0x22c>
					M2M_ERR("(hif) invalid group ID\n");
    18e2:	4ab4      	ldr	r2, [pc, #720]	; (1bb4 <hif_handle_isr+0x350>)
    18e4:	49b4      	ldr	r1, [pc, #720]	; (1bb8 <hif_handle_isr+0x354>)
    18e6:	48b5      	ldr	r0, [pc, #724]	; (1bbc <hif_handle_isr+0x358>)
    18e8:	4bb5      	ldr	r3, [pc, #724]	; (1bc0 <hif_handle_isr+0x35c>)
    18ea:	4798      	blx	r3
    18ec:	48b5      	ldr	r0, [pc, #724]	; (1bc4 <hif_handle_isr+0x360>)
    18ee:	4bb6      	ldr	r3, [pc, #728]	; (1bc8 <hif_handle_isr+0x364>)
    18f0:	4798      	blx	r3
    18f2:	200d      	movs	r0, #13
    18f4:	4bb5      	ldr	r3, [pc, #724]	; (1bcc <hif_handle_isr+0x368>)
    18f6:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    18f8:	2406      	movs	r4, #6
    18fa:	4264      	negs	r4, r4
    18fc:	e116      	b.n	1b2c <hif_handle_isr+0x2c8>
					M2M_ERR("(hif) address bus fail\n");
    18fe:	22d2      	movs	r2, #210	; 0xd2
    1900:	32ff      	adds	r2, #255	; 0xff
    1902:	49ad      	ldr	r1, [pc, #692]	; (1bb8 <hif_handle_isr+0x354>)
    1904:	48ad      	ldr	r0, [pc, #692]	; (1bbc <hif_handle_isr+0x358>)
    1906:	4bae      	ldr	r3, [pc, #696]	; (1bc0 <hif_handle_isr+0x35c>)
    1908:	4798      	blx	r3
    190a:	48b1      	ldr	r0, [pc, #708]	; (1bd0 <hif_handle_isr+0x36c>)
    190c:	4bae      	ldr	r3, [pc, #696]	; (1bc8 <hif_handle_isr+0x364>)
    190e:	4798      	blx	r3
    1910:	200d      	movs	r0, #13
    1912:	4bae      	ldr	r3, [pc, #696]	; (1bcc <hif_handle_isr+0x368>)
    1914:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    1916:	2001      	movs	r0, #1
    1918:	4bae      	ldr	r3, [pc, #696]	; (1bd4 <hif_handle_isr+0x370>)
    191a:	4798      	blx	r3
    191c:	e106      	b.n	1b2c <hif_handle_isr+0x2c8>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    191e:	22ed      	movs	r2, #237	; 0xed
    1920:	0052      	lsls	r2, r2, #1
    1922:	49a5      	ldr	r1, [pc, #660]	; (1bb8 <hif_handle_isr+0x354>)
    1924:	48a5      	ldr	r0, [pc, #660]	; (1bbc <hif_handle_isr+0x358>)
    1926:	4ca6      	ldr	r4, [pc, #664]	; (1bc0 <hif_handle_isr+0x35c>)
    1928:	47a0      	blx	r4
    192a:	a904      	add	r1, sp, #16
    192c:	884a      	ldrh	r2, [r1, #2]
    192e:	b292      	uxth	r2, r2
    1930:	780b      	ldrb	r3, [r1, #0]
    1932:	b2db      	uxtb	r3, r3
    1934:	7849      	ldrb	r1, [r1, #1]
    1936:	9100      	str	r1, [sp, #0]
    1938:	0029      	movs	r1, r5
    193a:	48a7      	ldr	r0, [pc, #668]	; (1bd8 <hif_handle_isr+0x374>)
    193c:	47a0      	blx	r4
    193e:	200d      	movs	r0, #13
    1940:	4ba2      	ldr	r3, [pc, #648]	; (1bcc <hif_handle_isr+0x368>)
    1942:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    1944:	2001      	movs	r0, #1
    1946:	4ba3      	ldr	r3, [pc, #652]	; (1bd4 <hif_handle_isr+0x370>)
    1948:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    194a:	2406      	movs	r4, #6
    194c:	4264      	negs	r4, r4
    194e:	e0ed      	b.n	1b2c <hif_handle_isr+0x2c8>
					if(gstrHifCxt.pfWifiCb)
    1950:	4b96      	ldr	r3, [pc, #600]	; (1bac <hif_handle_isr+0x348>)
    1952:	68db      	ldr	r3, [r3, #12]
    1954:	2b00      	cmp	r3, #0
    1956:	d01c      	beq.n	1992 <hif_handle_isr+0x12e>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1958:	4b94      	ldr	r3, [pc, #592]	; (1bac <hif_handle_isr+0x348>)
    195a:	68db      	ldr	r3, [r3, #12]
    195c:	aa04      	add	r2, sp, #16
    195e:	7850      	ldrb	r0, [r2, #1]
    1960:	b2c0      	uxtb	r0, r0
    1962:	8851      	ldrh	r1, [r2, #2]
    1964:	9a05      	ldr	r2, [sp, #20]
    1966:	3208      	adds	r2, #8
    1968:	3908      	subs	r1, #8
    196a:	b289      	uxth	r1, r1
    196c:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
    196e:	4b8f      	ldr	r3, [pc, #572]	; (1bac <hif_handle_isr+0x348>)
    1970:	789b      	ldrb	r3, [r3, #2]
    1972:	2b00      	cmp	r3, #0
    1974:	d000      	beq.n	1978 <hif_handle_isr+0x114>
    1976:	e09c      	b.n	1ab2 <hif_handle_isr+0x24e>
	while (gstrHifCxt.u8Interrupt) {
    1978:	4643      	mov	r3, r8
    197a:	78db      	ldrb	r3, [r3, #3]
    197c:	2b00      	cmp	r3, #0
    197e:	d100      	bne.n	1982 <hif_handle_isr+0x11e>
    1980:	e158      	b.n	1c34 <hif_handle_isr+0x3d0>
		gstrHifCxt.u8Interrupt--;
    1982:	464b      	mov	r3, r9
    1984:	78db      	ldrb	r3, [r3, #3]
    1986:	3b01      	subs	r3, #1
    1988:	b2db      	uxtb	r3, r3
    198a:	464a      	mov	r2, r9
    198c:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    198e:	4e93      	ldr	r6, [pc, #588]	; (1bdc <hif_handle_isr+0x378>)
    1990:	e0d7      	b.n	1b42 <hif_handle_isr+0x2de>
						M2M_ERR("WIFI callback is not registered\n");
    1992:	22f3      	movs	r2, #243	; 0xf3
    1994:	0052      	lsls	r2, r2, #1
    1996:	4988      	ldr	r1, [pc, #544]	; (1bb8 <hif_handle_isr+0x354>)
    1998:	4888      	ldr	r0, [pc, #544]	; (1bbc <hif_handle_isr+0x358>)
    199a:	4b89      	ldr	r3, [pc, #548]	; (1bc0 <hif_handle_isr+0x35c>)
    199c:	4798      	blx	r3
    199e:	4890      	ldr	r0, [pc, #576]	; (1be0 <hif_handle_isr+0x37c>)
    19a0:	4b89      	ldr	r3, [pc, #548]	; (1bc8 <hif_handle_isr+0x364>)
    19a2:	4798      	blx	r3
    19a4:	200d      	movs	r0, #13
    19a6:	4b89      	ldr	r3, [pc, #548]	; (1bcc <hif_handle_isr+0x368>)
    19a8:	4798      	blx	r3
    19aa:	e7e0      	b.n	196e <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfIpCb)
    19ac:	4b7f      	ldr	r3, [pc, #508]	; (1bac <hif_handle_isr+0x348>)
    19ae:	691b      	ldr	r3, [r3, #16]
    19b0:	2b00      	cmp	r3, #0
    19b2:	d00b      	beq.n	19cc <hif_handle_isr+0x168>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    19b4:	4b7d      	ldr	r3, [pc, #500]	; (1bac <hif_handle_isr+0x348>)
    19b6:	691b      	ldr	r3, [r3, #16]
    19b8:	aa04      	add	r2, sp, #16
    19ba:	7850      	ldrb	r0, [r2, #1]
    19bc:	b2c0      	uxtb	r0, r0
    19be:	8851      	ldrh	r1, [r2, #2]
    19c0:	9a05      	ldr	r2, [sp, #20]
    19c2:	3208      	adds	r2, #8
    19c4:	3908      	subs	r1, #8
    19c6:	b289      	uxth	r1, r1
    19c8:	4798      	blx	r3
    19ca:	e7d0      	b.n	196e <hif_handle_isr+0x10a>
						M2M_ERR("Scoket callback is not registered\n");
    19cc:	22f7      	movs	r2, #247	; 0xf7
    19ce:	0052      	lsls	r2, r2, #1
    19d0:	4979      	ldr	r1, [pc, #484]	; (1bb8 <hif_handle_isr+0x354>)
    19d2:	487a      	ldr	r0, [pc, #488]	; (1bbc <hif_handle_isr+0x358>)
    19d4:	4b7a      	ldr	r3, [pc, #488]	; (1bc0 <hif_handle_isr+0x35c>)
    19d6:	4798      	blx	r3
    19d8:	4882      	ldr	r0, [pc, #520]	; (1be4 <hif_handle_isr+0x380>)
    19da:	4b7b      	ldr	r3, [pc, #492]	; (1bc8 <hif_handle_isr+0x364>)
    19dc:	4798      	blx	r3
    19de:	200d      	movs	r0, #13
    19e0:	4b7a      	ldr	r3, [pc, #488]	; (1bcc <hif_handle_isr+0x368>)
    19e2:	4798      	blx	r3
    19e4:	e7c3      	b.n	196e <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfOtaCb)
    19e6:	4b71      	ldr	r3, [pc, #452]	; (1bac <hif_handle_isr+0x348>)
    19e8:	695b      	ldr	r3, [r3, #20]
    19ea:	2b00      	cmp	r3, #0
    19ec:	d00b      	beq.n	1a06 <hif_handle_isr+0x1a2>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    19ee:	4b6f      	ldr	r3, [pc, #444]	; (1bac <hif_handle_isr+0x348>)
    19f0:	695b      	ldr	r3, [r3, #20]
    19f2:	aa04      	add	r2, sp, #16
    19f4:	7850      	ldrb	r0, [r2, #1]
    19f6:	b2c0      	uxtb	r0, r0
    19f8:	8851      	ldrh	r1, [r2, #2]
    19fa:	9a05      	ldr	r2, [sp, #20]
    19fc:	3208      	adds	r2, #8
    19fe:	3908      	subs	r1, #8
    1a00:	b289      	uxth	r1, r1
    1a02:	4798      	blx	r3
    1a04:	e7b3      	b.n	196e <hif_handle_isr+0x10a>
						M2M_ERR("Ota callback is not registered\n");
    1a06:	22fb      	movs	r2, #251	; 0xfb
    1a08:	0052      	lsls	r2, r2, #1
    1a0a:	496b      	ldr	r1, [pc, #428]	; (1bb8 <hif_handle_isr+0x354>)
    1a0c:	486b      	ldr	r0, [pc, #428]	; (1bbc <hif_handle_isr+0x358>)
    1a0e:	4b6c      	ldr	r3, [pc, #432]	; (1bc0 <hif_handle_isr+0x35c>)
    1a10:	4798      	blx	r3
    1a12:	4875      	ldr	r0, [pc, #468]	; (1be8 <hif_handle_isr+0x384>)
    1a14:	4b6c      	ldr	r3, [pc, #432]	; (1bc8 <hif_handle_isr+0x364>)
    1a16:	4798      	blx	r3
    1a18:	200d      	movs	r0, #13
    1a1a:	4b6c      	ldr	r3, [pc, #432]	; (1bcc <hif_handle_isr+0x368>)
    1a1c:	4798      	blx	r3
    1a1e:	e7a6      	b.n	196e <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfCryptoCb)
    1a20:	4b62      	ldr	r3, [pc, #392]	; (1bac <hif_handle_isr+0x348>)
    1a22:	6a1b      	ldr	r3, [r3, #32]
    1a24:	2b00      	cmp	r3, #0
    1a26:	d00b      	beq.n	1a40 <hif_handle_isr+0x1dc>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1a28:	4b60      	ldr	r3, [pc, #384]	; (1bac <hif_handle_isr+0x348>)
    1a2a:	6a1b      	ldr	r3, [r3, #32]
    1a2c:	aa04      	add	r2, sp, #16
    1a2e:	7850      	ldrb	r0, [r2, #1]
    1a30:	b2c0      	uxtb	r0, r0
    1a32:	8851      	ldrh	r1, [r2, #2]
    1a34:	9a05      	ldr	r2, [sp, #20]
    1a36:	3208      	adds	r2, #8
    1a38:	3908      	subs	r1, #8
    1a3a:	b289      	uxth	r1, r1
    1a3c:	4798      	blx	r3
    1a3e:	e796      	b.n	196e <hif_handle_isr+0x10a>
						M2M_ERR("Crypto callback is not registered\n");
    1a40:	4a6a      	ldr	r2, [pc, #424]	; (1bec <hif_handle_isr+0x388>)
    1a42:	495d      	ldr	r1, [pc, #372]	; (1bb8 <hif_handle_isr+0x354>)
    1a44:	485d      	ldr	r0, [pc, #372]	; (1bbc <hif_handle_isr+0x358>)
    1a46:	4b5e      	ldr	r3, [pc, #376]	; (1bc0 <hif_handle_isr+0x35c>)
    1a48:	4798      	blx	r3
    1a4a:	4869      	ldr	r0, [pc, #420]	; (1bf0 <hif_handle_isr+0x38c>)
    1a4c:	4b5e      	ldr	r3, [pc, #376]	; (1bc8 <hif_handle_isr+0x364>)
    1a4e:	4798      	blx	r3
    1a50:	200d      	movs	r0, #13
    1a52:	4b5e      	ldr	r3, [pc, #376]	; (1bcc <hif_handle_isr+0x368>)
    1a54:	4798      	blx	r3
    1a56:	e78a      	b.n	196e <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfSigmaCb)
    1a58:	4b54      	ldr	r3, [pc, #336]	; (1bac <hif_handle_isr+0x348>)
    1a5a:	699b      	ldr	r3, [r3, #24]
    1a5c:	2b00      	cmp	r3, #0
    1a5e:	d00b      	beq.n	1a78 <hif_handle_isr+0x214>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1a60:	4b52      	ldr	r3, [pc, #328]	; (1bac <hif_handle_isr+0x348>)
    1a62:	699b      	ldr	r3, [r3, #24]
    1a64:	aa04      	add	r2, sp, #16
    1a66:	7850      	ldrb	r0, [r2, #1]
    1a68:	b2c0      	uxtb	r0, r0
    1a6a:	8851      	ldrh	r1, [r2, #2]
    1a6c:	9a05      	ldr	r2, [sp, #20]
    1a6e:	3208      	adds	r2, #8
    1a70:	3908      	subs	r1, #8
    1a72:	b289      	uxth	r1, r1
    1a74:	4798      	blx	r3
    1a76:	e77a      	b.n	196e <hif_handle_isr+0x10a>
						M2M_ERR("Sigma callback is not registered\n");
    1a78:	4a5e      	ldr	r2, [pc, #376]	; (1bf4 <hif_handle_isr+0x390>)
    1a7a:	494f      	ldr	r1, [pc, #316]	; (1bb8 <hif_handle_isr+0x354>)
    1a7c:	484f      	ldr	r0, [pc, #316]	; (1bbc <hif_handle_isr+0x358>)
    1a7e:	4b50      	ldr	r3, [pc, #320]	; (1bc0 <hif_handle_isr+0x35c>)
    1a80:	4798      	blx	r3
    1a82:	485d      	ldr	r0, [pc, #372]	; (1bf8 <hif_handle_isr+0x394>)
    1a84:	4b50      	ldr	r3, [pc, #320]	; (1bc8 <hif_handle_isr+0x364>)
    1a86:	4798      	blx	r3
    1a88:	200d      	movs	r0, #13
    1a8a:	4b50      	ldr	r3, [pc, #320]	; (1bcc <hif_handle_isr+0x368>)
    1a8c:	4798      	blx	r3
    1a8e:	e76e      	b.n	196e <hif_handle_isr+0x10a>
				    if(gstrHifCxt.pfSslCb)
    1a90:	4b46      	ldr	r3, [pc, #280]	; (1bac <hif_handle_isr+0x348>)
    1a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1a94:	2b00      	cmp	r3, #0
    1a96:	d100      	bne.n	1a9a <hif_handle_isr+0x236>
    1a98:	e769      	b.n	196e <hif_handle_isr+0x10a>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1a9a:	4b44      	ldr	r3, [pc, #272]	; (1bac <hif_handle_isr+0x348>)
    1a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1a9e:	aa04      	add	r2, sp, #16
    1aa0:	7850      	ldrb	r0, [r2, #1]
    1aa2:	b2c0      	uxtb	r0, r0
    1aa4:	8851      	ldrh	r1, [r2, #2]
    1aa6:	9a05      	ldr	r2, [sp, #20]
    1aa8:	3208      	adds	r2, #8
    1aaa:	3908      	subs	r1, #8
    1aac:	b289      	uxth	r1, r1
    1aae:	4798      	blx	r3
    1ab0:	e75d      	b.n	196e <hif_handle_isr+0x10a>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    1ab2:	4a52      	ldr	r2, [pc, #328]	; (1bfc <hif_handle_isr+0x398>)
    1ab4:	4940      	ldr	r1, [pc, #256]	; (1bb8 <hif_handle_isr+0x354>)
    1ab6:	4841      	ldr	r0, [pc, #260]	; (1bbc <hif_handle_isr+0x358>)
    1ab8:	4c41      	ldr	r4, [pc, #260]	; (1bc0 <hif_handle_isr+0x35c>)
    1aba:	47a0      	blx	r4
    1abc:	ab04      	add	r3, sp, #16
    1abe:	7819      	ldrb	r1, [r3, #0]
    1ac0:	b2c9      	uxtb	r1, r1
    1ac2:	785a      	ldrb	r2, [r3, #1]
    1ac4:	b2d2      	uxtb	r2, r2
    1ac6:	484e      	ldr	r0, [pc, #312]	; (1c00 <hif_handle_isr+0x39c>)
    1ac8:	47a0      	blx	r4
    1aca:	200d      	movs	r0, #13
    1acc:	4b3f      	ldr	r3, [pc, #252]	; (1bcc <hif_handle_isr+0x368>)
    1ace:	4798      	blx	r3
					ret = hif_set_rx_done();
    1ad0:	4b4c      	ldr	r3, [pc, #304]	; (1c04 <hif_handle_isr+0x3a0>)
    1ad2:	4798      	blx	r3
    1ad4:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
    1ad6:	d129      	bne.n	1b2c <hif_handle_isr+0x2c8>
    1ad8:	e74e      	b.n	1978 <hif_handle_isr+0x114>
				M2M_ERR("(hif) Wrong Size\n");
    1ada:	2287      	movs	r2, #135	; 0x87
    1adc:	0092      	lsls	r2, r2, #2
    1ade:	4936      	ldr	r1, [pc, #216]	; (1bb8 <hif_handle_isr+0x354>)
    1ae0:	4836      	ldr	r0, [pc, #216]	; (1bbc <hif_handle_isr+0x358>)
    1ae2:	4b37      	ldr	r3, [pc, #220]	; (1bc0 <hif_handle_isr+0x35c>)
    1ae4:	4798      	blx	r3
    1ae6:	4848      	ldr	r0, [pc, #288]	; (1c08 <hif_handle_isr+0x3a4>)
    1ae8:	4b37      	ldr	r3, [pc, #220]	; (1bc8 <hif_handle_isr+0x364>)
    1aea:	4798      	blx	r3
    1aec:	200d      	movs	r0, #13
    1aee:	4b37      	ldr	r3, [pc, #220]	; (1bcc <hif_handle_isr+0x368>)
    1af0:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    1af2:	2402      	movs	r4, #2
    1af4:	4264      	negs	r4, r4
    1af6:	e019      	b.n	1b2c <hif_handle_isr+0x2c8>
			M2M_ERR("(hif) False interrupt %lx",reg);
    1af8:	2289      	movs	r2, #137	; 0x89
    1afa:	0092      	lsls	r2, r2, #2
    1afc:	492e      	ldr	r1, [pc, #184]	; (1bb8 <hif_handle_isr+0x354>)
    1afe:	482f      	ldr	r0, [pc, #188]	; (1bbc <hif_handle_isr+0x358>)
    1b00:	4c2f      	ldr	r4, [pc, #188]	; (1bc0 <hif_handle_isr+0x35c>)
    1b02:	47a0      	blx	r4
    1b04:	9903      	ldr	r1, [sp, #12]
    1b06:	4841      	ldr	r0, [pc, #260]	; (1c0c <hif_handle_isr+0x3a8>)
    1b08:	47a0      	blx	r4
    1b0a:	200d      	movs	r0, #13
    1b0c:	4b2f      	ldr	r3, [pc, #188]	; (1bcc <hif_handle_isr+0x368>)
    1b0e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1b10:	240c      	movs	r4, #12
    1b12:	4264      	negs	r4, r4
    1b14:	e00a      	b.n	1b2c <hif_handle_isr+0x2c8>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    1b16:	4a3e      	ldr	r2, [pc, #248]	; (1c10 <hif_handle_isr+0x3ac>)
    1b18:	4927      	ldr	r1, [pc, #156]	; (1bb8 <hif_handle_isr+0x354>)
    1b1a:	4828      	ldr	r0, [pc, #160]	; (1bbc <hif_handle_isr+0x358>)
    1b1c:	4b28      	ldr	r3, [pc, #160]	; (1bc0 <hif_handle_isr+0x35c>)
    1b1e:	4798      	blx	r3
    1b20:	483c      	ldr	r0, [pc, #240]	; (1c14 <hif_handle_isr+0x3b0>)
    1b22:	4b29      	ldr	r3, [pc, #164]	; (1bc8 <hif_handle_isr+0x364>)
    1b24:	4798      	blx	r3
    1b26:	200d      	movs	r0, #13
    1b28:	4b28      	ldr	r3, [pc, #160]	; (1bcc <hif_handle_isr+0x368>)
    1b2a:	4798      	blx	r3
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    1b2c:	4a3a      	ldr	r2, [pc, #232]	; (1c18 <hif_handle_isr+0x3b4>)
    1b2e:	493b      	ldr	r1, [pc, #236]	; (1c1c <hif_handle_isr+0x3b8>)
    1b30:	4822      	ldr	r0, [pc, #136]	; (1bbc <hif_handle_isr+0x358>)
    1b32:	4f23      	ldr	r7, [pc, #140]	; (1bc0 <hif_handle_isr+0x35c>)
    1b34:	47b8      	blx	r7
    1b36:	0021      	movs	r1, r4
    1b38:	4839      	ldr	r0, [pc, #228]	; (1c20 <hif_handle_isr+0x3bc>)
    1b3a:	47b8      	blx	r7
    1b3c:	200d      	movs	r0, #13
    1b3e:	4b23      	ldr	r3, [pc, #140]	; (1bcc <hif_handle_isr+0x368>)
    1b40:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    1b42:	a903      	add	r1, sp, #12
    1b44:	4837      	ldr	r0, [pc, #220]	; (1c24 <hif_handle_isr+0x3c0>)
    1b46:	47b0      	blx	r6
    1b48:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
    1b4a:	d1e4      	bne.n	1b16 <hif_handle_isr+0x2b2>
		if(reg & 0x1)	/* New interrupt has been received */
    1b4c:	9b03      	ldr	r3, [sp, #12]
    1b4e:	07db      	lsls	r3, r3, #31
    1b50:	d5d2      	bpl.n	1af8 <hif_handle_isr+0x294>
			nm_bsp_interrupt_ctrl(0);
    1b52:	2000      	movs	r0, #0
    1b54:	4b1f      	ldr	r3, [pc, #124]	; (1bd4 <hif_handle_isr+0x370>)
    1b56:	4798      	blx	r3
			reg &= ~NBIT0;
    1b58:	2301      	movs	r3, #1
    1b5a:	9903      	ldr	r1, [sp, #12]
    1b5c:	4399      	bics	r1, r3
    1b5e:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    1b60:	4830      	ldr	r0, [pc, #192]	; (1c24 <hif_handle_isr+0x3c0>)
    1b62:	4b31      	ldr	r3, [pc, #196]	; (1c28 <hif_handle_isr+0x3c4>)
    1b64:	4798      	blx	r3
    1b66:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
    1b68:	d1e0      	bne.n	1b2c <hif_handle_isr+0x2c8>
			gstrHifCxt.u8HifRXDone = 1;
    1b6a:	2201      	movs	r2, #1
    1b6c:	4b0f      	ldr	r3, [pc, #60]	; (1bac <hif_handle_isr+0x348>)
    1b6e:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    1b70:	9b03      	ldr	r3, [sp, #12]
    1b72:	049d      	lsls	r5, r3, #18
    1b74:	0d2d      	lsrs	r5, r5, #20
			if (size > 0) {
    1b76:	d0b0      	beq.n	1ada <hif_handle_isr+0x276>
				uint32 address = 0;
    1b78:	2300      	movs	r3, #0
    1b7a:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    1b7c:	a905      	add	r1, sp, #20
    1b7e:	482b      	ldr	r0, [pc, #172]	; (1c2c <hif_handle_isr+0x3c8>)
    1b80:	4b16      	ldr	r3, [pc, #88]	; (1bdc <hif_handle_isr+0x378>)
    1b82:	4798      	blx	r3
    1b84:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    1b86:	d100      	bne.n	1b8a <hif_handle_isr+0x326>
    1b88:	e675      	b.n	1876 <hif_handle_isr+0x12>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    1b8a:	22c8      	movs	r2, #200	; 0xc8
    1b8c:	32ff      	adds	r2, #255	; 0xff
    1b8e:	490a      	ldr	r1, [pc, #40]	; (1bb8 <hif_handle_isr+0x354>)
    1b90:	480a      	ldr	r0, [pc, #40]	; (1bbc <hif_handle_isr+0x358>)
    1b92:	4b0b      	ldr	r3, [pc, #44]	; (1bc0 <hif_handle_isr+0x35c>)
    1b94:	4798      	blx	r3
    1b96:	4826      	ldr	r0, [pc, #152]	; (1c30 <hif_handle_isr+0x3cc>)
    1b98:	4b0b      	ldr	r3, [pc, #44]	; (1bc8 <hif_handle_isr+0x364>)
    1b9a:	4798      	blx	r3
    1b9c:	200d      	movs	r0, #13
    1b9e:	4b0b      	ldr	r3, [pc, #44]	; (1bcc <hif_handle_isr+0x368>)
    1ba0:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    1ba2:	2001      	movs	r0, #1
    1ba4:	4b0b      	ldr	r3, [pc, #44]	; (1bd4 <hif_handle_isr+0x370>)
    1ba6:	4798      	blx	r3
    1ba8:	e7c0      	b.n	1b2c <hif_handle_isr+0x2c8>
    1baa:	46c0      	nop			; (mov r8, r8)
    1bac:	200002b8 	.word	0x200002b8
    1bb0:	00002981 	.word	0x00002981
    1bb4:	0000020f 	.word	0x0000020f
    1bb8:	0000b074 	.word	0x0000b074
    1bbc:	0000b020 	.word	0x0000b020
    1bc0:	00009b31 	.word	0x00009b31
    1bc4:	0000b1d0 	.word	0x0000b1d0
    1bc8:	00009c4d 	.word	0x00009c4d
    1bcc:	00009b65 	.word	0x00009b65
    1bd0:	0000b0cc 	.word	0x0000b0cc
    1bd4:	0000122d 	.word	0x0000122d
    1bd8:	0000b0e4 	.word	0x0000b0e4
    1bdc:	00002969 	.word	0x00002969
    1be0:	0000b124 	.word	0x0000b124
    1be4:	0000b144 	.word	0x0000b144
    1be8:	0000b168 	.word	0x0000b168
    1bec:	000001ff 	.word	0x000001ff
    1bf0:	0000b188 	.word	0x0000b188
    1bf4:	00000206 	.word	0x00000206
    1bf8:	0000b1ac 	.word	0x0000b1ac
    1bfc:	00000215 	.word	0x00000215
    1c00:	0000b1e8 	.word	0x0000b1e8
    1c04:	00001561 	.word	0x00001561
    1c08:	0000b214 	.word	0x0000b214
    1c0c:	0000b228 	.word	0x0000b228
    1c10:	0000022d 	.word	0x0000022d
    1c14:	0000b244 	.word	0x0000b244
    1c18:	0000024a 	.word	0x0000024a
    1c1c:	0000b07c 	.word	0x0000b07c
    1c20:	0000b268 	.word	0x0000b268
    1c24:	00001070 	.word	0x00001070
    1c28:	00002975 	.word	0x00002975
    1c2c:	00001084 	.word	0x00001084
    1c30:	0000b0a8 	.word	0x0000b0a8
			}
		}
	}

	return ret;
}
    1c34:	2000      	movs	r0, #0
    1c36:	b007      	add	sp, #28
    1c38:	bc0c      	pop	{r2, r3}
    1c3a:	4690      	mov	r8, r2
    1c3c:	4699      	mov	r9, r3
    1c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001c40 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    1c40:	b570      	push	{r4, r5, r6, lr}
    1c42:	0014      	movs	r4, r2
    1c44:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    1c46:	2800      	cmp	r0, #0
    1c48:	d003      	beq.n	1c52 <hif_receive+0x12>
    1c4a:	2900      	cmp	r1, #0
    1c4c:	d001      	beq.n	1c52 <hif_receive+0x12>
    1c4e:	2a00      	cmp	r2, #0
    1c50:	d112      	bne.n	1c78 <hif_receive+0x38>
	{
		if(isDone)
    1c52:	2d00      	cmp	r5, #0
    1c54:	d002      	beq.n	1c5c <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    1c56:	4b27      	ldr	r3, [pc, #156]	; (1cf4 <hif_receive+0xb4>)
    1c58:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    1c5a:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
    1c5c:	4a26      	ldr	r2, [pc, #152]	; (1cf8 <hif_receive+0xb8>)
    1c5e:	4927      	ldr	r1, [pc, #156]	; (1cfc <hif_receive+0xbc>)
    1c60:	4827      	ldr	r0, [pc, #156]	; (1d00 <hif_receive+0xc0>)
    1c62:	4b28      	ldr	r3, [pc, #160]	; (1d04 <hif_receive+0xc4>)
    1c64:	4798      	blx	r3
    1c66:	4828      	ldr	r0, [pc, #160]	; (1d08 <hif_receive+0xc8>)
    1c68:	4b28      	ldr	r3, [pc, #160]	; (1d0c <hif_receive+0xcc>)
    1c6a:	4798      	blx	r3
    1c6c:	200d      	movs	r0, #13
    1c6e:	4b28      	ldr	r3, [pc, #160]	; (1d10 <hif_receive+0xd0>)
    1c70:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1c72:	200c      	movs	r0, #12
    1c74:	4240      	negs	r0, r0
    1c76:	e7f0      	b.n	1c5a <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
    1c78:	4b26      	ldr	r3, [pc, #152]	; (1d14 <hif_receive+0xd4>)
    1c7a:	689b      	ldr	r3, [r3, #8]
    1c7c:	429a      	cmp	r2, r3
    1c7e:	d81a      	bhi.n	1cb6 <hif_receive+0x76>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    1c80:	4b24      	ldr	r3, [pc, #144]	; (1d14 <hif_receive+0xd4>)
    1c82:	685b      	ldr	r3, [r3, #4]
    1c84:	4298      	cmp	r0, r3
    1c86:	d326      	bcc.n	1cd6 <hif_receive+0x96>
    1c88:	1886      	adds	r6, r0, r2
    1c8a:	4a22      	ldr	r2, [pc, #136]	; (1d14 <hif_receive+0xd4>)
    1c8c:	6853      	ldr	r3, [r2, #4]
    1c8e:	6892      	ldr	r2, [r2, #8]
    1c90:	189b      	adds	r3, r3, r2
    1c92:	429e      	cmp	r6, r3
    1c94:	d81f      	bhi.n	1cd6 <hif_receive+0x96>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    1c96:	0022      	movs	r2, r4
    1c98:	4b1f      	ldr	r3, [pc, #124]	; (1d18 <hif_receive+0xd8>)
    1c9a:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    1c9c:	2800      	cmp	r0, #0
    1c9e:	d1dc      	bne.n	1c5a <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    1ca0:	4a1c      	ldr	r2, [pc, #112]	; (1d14 <hif_receive+0xd4>)
    1ca2:	6853      	ldr	r3, [r2, #4]
    1ca4:	6892      	ldr	r2, [r2, #8]
    1ca6:	189b      	adds	r3, r3, r2
    1ca8:	429e      	cmp	r6, r3
    1caa:	d001      	beq.n	1cb0 <hif_receive+0x70>
    1cac:	2d00      	cmp	r5, #0
    1cae:	d0d4      	beq.n	1c5a <hif_receive+0x1a>
		ret = hif_set_rx_done();
    1cb0:	4b10      	ldr	r3, [pc, #64]	; (1cf4 <hif_receive+0xb4>)
    1cb2:	4798      	blx	r3
    1cb4:	e7d1      	b.n	1c5a <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    1cb6:	4a19      	ldr	r2, [pc, #100]	; (1d1c <hif_receive+0xdc>)
    1cb8:	4910      	ldr	r1, [pc, #64]	; (1cfc <hif_receive+0xbc>)
    1cba:	4811      	ldr	r0, [pc, #68]	; (1d00 <hif_receive+0xc0>)
    1cbc:	4d11      	ldr	r5, [pc, #68]	; (1d04 <hif_receive+0xc4>)
    1cbe:	47a8      	blx	r5
    1cc0:	4b14      	ldr	r3, [pc, #80]	; (1d14 <hif_receive+0xd4>)
    1cc2:	689a      	ldr	r2, [r3, #8]
    1cc4:	0021      	movs	r1, r4
    1cc6:	4816      	ldr	r0, [pc, #88]	; (1d20 <hif_receive+0xe0>)
    1cc8:	47a8      	blx	r5
    1cca:	200d      	movs	r0, #13
    1ccc:	4b10      	ldr	r3, [pc, #64]	; (1d10 <hif_receive+0xd0>)
    1cce:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1cd0:	200c      	movs	r0, #12
    1cd2:	4240      	negs	r0, r0
		goto ERR1;
    1cd4:	e7c1      	b.n	1c5a <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    1cd6:	4a13      	ldr	r2, [pc, #76]	; (1d24 <hif_receive+0xe4>)
    1cd8:	4908      	ldr	r1, [pc, #32]	; (1cfc <hif_receive+0xbc>)
    1cda:	4809      	ldr	r0, [pc, #36]	; (1d00 <hif_receive+0xc0>)
    1cdc:	4b09      	ldr	r3, [pc, #36]	; (1d04 <hif_receive+0xc4>)
    1cde:	4798      	blx	r3
    1ce0:	4811      	ldr	r0, [pc, #68]	; (1d28 <hif_receive+0xe8>)
    1ce2:	4b0a      	ldr	r3, [pc, #40]	; (1d0c <hif_receive+0xcc>)
    1ce4:	4798      	blx	r3
    1ce6:	200d      	movs	r0, #13
    1ce8:	4b09      	ldr	r3, [pc, #36]	; (1d10 <hif_receive+0xd0>)
    1cea:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1cec:	200c      	movs	r0, #12
    1cee:	4240      	negs	r0, r0
		goto ERR1;
    1cf0:	e7b3      	b.n	1c5a <hif_receive+0x1a>
    1cf2:	46c0      	nop			; (mov r8, r8)
    1cf4:	00001561 	.word	0x00001561
    1cf8:	0000026b 	.word	0x0000026b
    1cfc:	0000b08c 	.word	0x0000b08c
    1d00:	0000b020 	.word	0x0000b020
    1d04:	00009b31 	.word	0x00009b31
    1d08:	0000b298 	.word	0x0000b298
    1d0c:	00009c4d 	.word	0x00009c4d
    1d10:	00009b65 	.word	0x00009b65
    1d14:	200002b8 	.word	0x200002b8
    1d18:	00002981 	.word	0x00002981
    1d1c:	00000273 	.word	0x00000273
    1d20:	0000b2b8 	.word	0x0000b2b8
    1d24:	00000279 	.word	0x00000279
    1d28:	0000b300 	.word	0x0000b300

00001d2c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    1d2c:	b570      	push	{r4, r5, r6, lr}
    1d2e:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    1d30:	2807      	cmp	r0, #7
    1d32:	d81f      	bhi.n	1d74 <hif_register_cb+0x48>
    1d34:	0083      	lsls	r3, r0, #2
    1d36:	4a16      	ldr	r2, [pc, #88]	; (1d90 <hif_register_cb+0x64>)
    1d38:	58d3      	ldr	r3, [r2, r3]
    1d3a:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    1d3c:	4b15      	ldr	r3, [pc, #84]	; (1d94 <hif_register_cb+0x68>)
    1d3e:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
    1d40:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
    1d42:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
    1d44:	4b13      	ldr	r3, [pc, #76]	; (1d94 <hif_register_cb+0x68>)
    1d46:	60d9      	str	r1, [r3, #12]
	sint8 ret = M2M_SUCCESS;
    1d48:	2000      	movs	r0, #0
			break;
    1d4a:	e7fa      	b.n	1d42 <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
    1d4c:	4b11      	ldr	r3, [pc, #68]	; (1d94 <hif_register_cb+0x68>)
    1d4e:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
    1d50:	2000      	movs	r0, #0
			break;
    1d52:	e7f6      	b.n	1d42 <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
    1d54:	4b0f      	ldr	r3, [pc, #60]	; (1d94 <hif_register_cb+0x68>)
    1d56:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
    1d58:	2000      	movs	r0, #0
			break;
    1d5a:	e7f2      	b.n	1d42 <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
    1d5c:	4b0d      	ldr	r3, [pc, #52]	; (1d94 <hif_register_cb+0x68>)
    1d5e:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
    1d60:	2000      	movs	r0, #0
			break;
    1d62:	e7ee      	b.n	1d42 <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
    1d64:	4b0b      	ldr	r3, [pc, #44]	; (1d94 <hif_register_cb+0x68>)
    1d66:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
    1d68:	2000      	movs	r0, #0
			break;
    1d6a:	e7ea      	b.n	1d42 <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
    1d6c:	4b09      	ldr	r3, [pc, #36]	; (1d94 <hif_register_cb+0x68>)
    1d6e:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
    1d70:	2000      	movs	r0, #0
			break;
    1d72:	e7e6      	b.n	1d42 <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
    1d74:	4a08      	ldr	r2, [pc, #32]	; (1d98 <hif_register_cb+0x6c>)
    1d76:	4909      	ldr	r1, [pc, #36]	; (1d9c <hif_register_cb+0x70>)
    1d78:	4809      	ldr	r0, [pc, #36]	; (1da0 <hif_register_cb+0x74>)
    1d7a:	4d0a      	ldr	r5, [pc, #40]	; (1da4 <hif_register_cb+0x78>)
    1d7c:	47a8      	blx	r5
    1d7e:	0021      	movs	r1, r4
    1d80:	4809      	ldr	r0, [pc, #36]	; (1da8 <hif_register_cb+0x7c>)
    1d82:	47a8      	blx	r5
    1d84:	200d      	movs	r0, #13
    1d86:	4b09      	ldr	r3, [pc, #36]	; (1dac <hif_register_cb+0x80>)
    1d88:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1d8a:	200c      	movs	r0, #12
    1d8c:	4240      	negs	r0, r0
			break;
    1d8e:	e7d8      	b.n	1d42 <hif_register_cb+0x16>
    1d90:	0000b048 	.word	0x0000b048
    1d94:	200002b8 	.word	0x200002b8
    1d98:	000002b1 	.word	0x000002b1
    1d9c:	0000b098 	.word	0x0000b098
    1da0:	0000b020 	.word	0x0000b020
    1da4:	00009b31 	.word	0x00009b31
    1da8:	0000b344 	.word	0x0000b344
    1dac:	00009b65 	.word	0x00009b65

00001db0 <hif_init>:
{
    1db0:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    1db2:	2228      	movs	r2, #40	; 0x28
    1db4:	2100      	movs	r1, #0
    1db6:	4806      	ldr	r0, [pc, #24]	; (1dd0 <hif_init+0x20>)
    1db8:	4b06      	ldr	r3, [pc, #24]	; (1dd4 <hif_init+0x24>)
    1dba:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    1dbc:	4806      	ldr	r0, [pc, #24]	; (1dd8 <hif_init+0x28>)
    1dbe:	4b07      	ldr	r3, [pc, #28]	; (1ddc <hif_init+0x2c>)
    1dc0:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    1dc2:	4907      	ldr	r1, [pc, #28]	; (1de0 <hif_init+0x30>)
    1dc4:	2003      	movs	r0, #3
    1dc6:	4b07      	ldr	r3, [pc, #28]	; (1de4 <hif_init+0x34>)
    1dc8:	4798      	blx	r3
}
    1dca:	2000      	movs	r0, #0
    1dcc:	bd10      	pop	{r4, pc}
    1dce:	46c0      	nop			; (mov r8, r8)
    1dd0:	200002b8 	.word	0x200002b8
    1dd4:	00001521 	.word	0x00001521
    1dd8:	0000154d 	.word	0x0000154d
    1ddc:	000011d5 	.word	0x000011d5
    1de0:	0000155d 	.word	0x0000155d
    1de4:	00001d2d 	.word	0x00001d2d

00001de8 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    1de8:	b530      	push	{r4, r5, lr}
    1dea:	b09f      	sub	sp, #124	; 0x7c
    1dec:	0004      	movs	r4, r0
    1dee:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    1df0:	282c      	cmp	r0, #44	; 0x2c
    1df2:	d02f      	beq.n	1e54 <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    1df4:	281b      	cmp	r0, #27
    1df6:	d03d      	beq.n	1e74 <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    1df8:	2806      	cmp	r0, #6
    1dfa:	d04b      	beq.n	1e94 <m2m_wifi_cb+0xac>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    1dfc:	280e      	cmp	r0, #14
    1dfe:	d027      	beq.n	1e50 <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    1e00:	2832      	cmp	r0, #50	; 0x32
    1e02:	d057      	beq.n	1eb4 <m2m_wifi_cb+0xcc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    1e04:	282f      	cmp	r0, #47	; 0x2f
    1e06:	d065      	beq.n	1ed4 <m2m_wifi_cb+0xec>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    1e08:	2834      	cmp	r0, #52	; 0x34
    1e0a:	d100      	bne.n	1e0e <m2m_wifi_cb+0x26>
    1e0c:	e077      	b.n	1efe <m2m_wifi_cb+0x116>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    1e0e:	2811      	cmp	r0, #17
    1e10:	d100      	bne.n	1e14 <m2m_wifi_cb+0x2c>
    1e12:	e096      	b.n	1f42 <m2m_wifi_cb+0x15a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    1e14:	2813      	cmp	r0, #19
    1e16:	d100      	bne.n	1e1a <m2m_wifi_cb+0x32>
    1e18:	e0ac      	b.n	1f74 <m2m_wifi_cb+0x18c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    1e1a:	2804      	cmp	r0, #4
    1e1c:	d100      	bne.n	1e20 <m2m_wifi_cb+0x38>
    1e1e:	e0bb      	b.n	1f98 <m2m_wifi_cb+0x1b0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    1e20:	2865      	cmp	r0, #101	; 0x65
    1e22:	d100      	bne.n	1e26 <m2m_wifi_cb+0x3e>
    1e24:	e0ca      	b.n	1fbc <m2m_wifi_cb+0x1d4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    1e26:	2809      	cmp	r0, #9
    1e28:	d100      	bne.n	1e2c <m2m_wifi_cb+0x44>
    1e2a:	e0d9      	b.n	1fe0 <m2m_wifi_cb+0x1f8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    1e2c:	282a      	cmp	r0, #42	; 0x2a
    1e2e:	d100      	bne.n	1e32 <m2m_wifi_cb+0x4a>
    1e30:	e0e8      	b.n	2004 <STACK_SIZE+0x4>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    1e32:	2820      	cmp	r0, #32
    1e34:	d100      	bne.n	1e38 <m2m_wifi_cb+0x50>
    1e36:	e0f7      	b.n	2028 <STACK_SIZE+0x28>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    1e38:	2292      	movs	r2, #146	; 0x92
    1e3a:	0052      	lsls	r2, r2, #1
    1e3c:	4989      	ldr	r1, [pc, #548]	; (2064 <STACK_SIZE+0x64>)
    1e3e:	488a      	ldr	r0, [pc, #552]	; (2068 <STACK_SIZE+0x68>)
    1e40:	4d8a      	ldr	r5, [pc, #552]	; (206c <STACK_SIZE+0x6c>)
    1e42:	47a8      	blx	r5
    1e44:	0021      	movs	r1, r4
    1e46:	488a      	ldr	r0, [pc, #552]	; (2070 <STACK_SIZE+0x70>)
    1e48:	47a8      	blx	r5
    1e4a:	200d      	movs	r0, #13
    1e4c:	4b89      	ldr	r3, [pc, #548]	; (2074 <STACK_SIZE+0x74>)
    1e4e:	4798      	blx	r3
	}
}
    1e50:	b01f      	add	sp, #124	; 0x7c
    1e52:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    1e54:	2300      	movs	r3, #0
    1e56:	2204      	movs	r2, #4
    1e58:	a903      	add	r1, sp, #12
    1e5a:	0028      	movs	r0, r5
    1e5c:	4c86      	ldr	r4, [pc, #536]	; (2078 <STACK_SIZE+0x78>)
    1e5e:	47a0      	blx	r4
    1e60:	2800      	cmp	r0, #0
    1e62:	d1f5      	bne.n	1e50 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1e64:	4b85      	ldr	r3, [pc, #532]	; (207c <STACK_SIZE+0x7c>)
    1e66:	681b      	ldr	r3, [r3, #0]
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d0f1      	beq.n	1e50 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    1e6c:	a903      	add	r1, sp, #12
    1e6e:	302c      	adds	r0, #44	; 0x2c
    1e70:	4798      	blx	r3
    1e72:	e7ed      	b.n	1e50 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    1e74:	2300      	movs	r3, #0
    1e76:	2208      	movs	r2, #8
    1e78:	a903      	add	r1, sp, #12
    1e7a:	0028      	movs	r0, r5
    1e7c:	4c7e      	ldr	r4, [pc, #504]	; (2078 <STACK_SIZE+0x78>)
    1e7e:	47a0      	blx	r4
    1e80:	2800      	cmp	r0, #0
    1e82:	d1e5      	bne.n	1e50 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1e84:	4b7d      	ldr	r3, [pc, #500]	; (207c <STACK_SIZE+0x7c>)
    1e86:	681b      	ldr	r3, [r3, #0]
    1e88:	2b00      	cmp	r3, #0
    1e8a:	d0e1      	beq.n	1e50 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    1e8c:	a903      	add	r1, sp, #12
    1e8e:	301b      	adds	r0, #27
    1e90:	4798      	blx	r3
    1e92:	e7dd      	b.n	1e50 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    1e94:	2301      	movs	r3, #1
    1e96:	2230      	movs	r2, #48	; 0x30
    1e98:	a903      	add	r1, sp, #12
    1e9a:	0028      	movs	r0, r5
    1e9c:	4c76      	ldr	r4, [pc, #472]	; (2078 <STACK_SIZE+0x78>)
    1e9e:	47a0      	blx	r4
    1ea0:	2800      	cmp	r0, #0
    1ea2:	d1d5      	bne.n	1e50 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    1ea4:	4b75      	ldr	r3, [pc, #468]	; (207c <STACK_SIZE+0x7c>)
    1ea6:	681b      	ldr	r3, [r3, #0]
    1ea8:	2b00      	cmp	r3, #0
    1eaa:	d0d1      	beq.n	1e50 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    1eac:	a903      	add	r1, sp, #12
    1eae:	3006      	adds	r0, #6
    1eb0:	4798      	blx	r3
    1eb2:	e7cd      	b.n	1e50 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    1eb4:	2300      	movs	r3, #0
    1eb6:	2214      	movs	r2, #20
    1eb8:	a903      	add	r1, sp, #12
    1eba:	0028      	movs	r0, r5
    1ebc:	4c6e      	ldr	r4, [pc, #440]	; (2078 <STACK_SIZE+0x78>)
    1ebe:	47a0      	blx	r4
    1ec0:	2800      	cmp	r0, #0
    1ec2:	d1c5      	bne.n	1e50 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1ec4:	4b6d      	ldr	r3, [pc, #436]	; (207c <STACK_SIZE+0x7c>)
    1ec6:	681b      	ldr	r3, [r3, #0]
    1ec8:	2b00      	cmp	r3, #0
    1eca:	d0c1      	beq.n	1e50 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    1ecc:	a903      	add	r1, sp, #12
    1ece:	3032      	adds	r0, #50	; 0x32
    1ed0:	4798      	blx	r3
    1ed2:	e7bd      	b.n	1e50 <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    1ed4:	2264      	movs	r2, #100	; 0x64
    1ed6:	2100      	movs	r1, #0
    1ed8:	a803      	add	r0, sp, #12
    1eda:	4b69      	ldr	r3, [pc, #420]	; (2080 <STACK_SIZE+0x80>)
    1edc:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    1ede:	2300      	movs	r3, #0
    1ee0:	2264      	movs	r2, #100	; 0x64
    1ee2:	a903      	add	r1, sp, #12
    1ee4:	0028      	movs	r0, r5
    1ee6:	4c64      	ldr	r4, [pc, #400]	; (2078 <STACK_SIZE+0x78>)
    1ee8:	47a0      	blx	r4
    1eea:	2800      	cmp	r0, #0
    1eec:	d1b0      	bne.n	1e50 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1eee:	4b63      	ldr	r3, [pc, #396]	; (207c <STACK_SIZE+0x7c>)
    1ef0:	681b      	ldr	r3, [r3, #0]
    1ef2:	2b00      	cmp	r3, #0
    1ef4:	d0ac      	beq.n	1e50 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    1ef6:	a903      	add	r1, sp, #12
    1ef8:	302f      	adds	r0, #47	; 0x2f
    1efa:	4798      	blx	r3
    1efc:	e7a8      	b.n	1e50 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    1efe:	2300      	movs	r3, #0
    1f00:	2204      	movs	r2, #4
    1f02:	a903      	add	r1, sp, #12
    1f04:	0028      	movs	r0, r5
    1f06:	4c5c      	ldr	r4, [pc, #368]	; (2078 <STACK_SIZE+0x78>)
    1f08:	47a0      	blx	r4
    1f0a:	2800      	cmp	r0, #0
    1f0c:	d1a0      	bne.n	1e50 <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    1f0e:	485d      	ldr	r0, [pc, #372]	; (2084 <STACK_SIZE+0x84>)
    1f10:	4d56      	ldr	r5, [pc, #344]	; (206c <STACK_SIZE+0x6c>)
    1f12:	47a8      	blx	r5
    1f14:	9c03      	ldr	r4, [sp, #12]
    1f16:	0a23      	lsrs	r3, r4, #8
    1f18:	20ff      	movs	r0, #255	; 0xff
    1f1a:	4003      	ands	r3, r0
    1f1c:	0c22      	lsrs	r2, r4, #16
    1f1e:	4002      	ands	r2, r0
    1f20:	0e21      	lsrs	r1, r4, #24
    1f22:	4020      	ands	r0, r4
    1f24:	9000      	str	r0, [sp, #0]
    1f26:	4858      	ldr	r0, [pc, #352]	; (2088 <STACK_SIZE+0x88>)
    1f28:	47a8      	blx	r5
    1f2a:	200d      	movs	r0, #13
    1f2c:	4b51      	ldr	r3, [pc, #324]	; (2074 <STACK_SIZE+0x74>)
    1f2e:	4798      	blx	r3
			if (gpfAppWifiCb)
    1f30:	4b52      	ldr	r3, [pc, #328]	; (207c <STACK_SIZE+0x7c>)
    1f32:	681b      	ldr	r3, [r3, #0]
    1f34:	2b00      	cmp	r3, #0
    1f36:	d100      	bne.n	1f3a <m2m_wifi_cb+0x152>
    1f38:	e78a      	b.n	1e50 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    1f3a:	2100      	movs	r1, #0
    1f3c:	2034      	movs	r0, #52	; 0x34
    1f3e:	4798      	blx	r3
    1f40:	e786      	b.n	1e50 <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
    1f42:	2200      	movs	r2, #0
    1f44:	4b51      	ldr	r3, [pc, #324]	; (208c <STACK_SIZE+0x8c>)
    1f46:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    1f48:	2300      	movs	r3, #0
    1f4a:	3204      	adds	r2, #4
    1f4c:	a903      	add	r1, sp, #12
    1f4e:	0028      	movs	r0, r5
    1f50:	4c49      	ldr	r4, [pc, #292]	; (2078 <STACK_SIZE+0x78>)
    1f52:	47a0      	blx	r4
    1f54:	2800      	cmp	r0, #0
    1f56:	d000      	beq.n	1f5a <m2m_wifi_cb+0x172>
    1f58:	e77a      	b.n	1e50 <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
    1f5a:	ab03      	add	r3, sp, #12
    1f5c:	781a      	ldrb	r2, [r3, #0]
    1f5e:	4b4c      	ldr	r3, [pc, #304]	; (2090 <STACK_SIZE+0x90>)
    1f60:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    1f62:	4b46      	ldr	r3, [pc, #280]	; (207c <STACK_SIZE+0x7c>)
    1f64:	681b      	ldr	r3, [r3, #0]
    1f66:	2b00      	cmp	r3, #0
    1f68:	d100      	bne.n	1f6c <m2m_wifi_cb+0x184>
    1f6a:	e771      	b.n	1e50 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    1f6c:	a903      	add	r1, sp, #12
    1f6e:	3011      	adds	r0, #17
    1f70:	4798      	blx	r3
    1f72:	e76d      	b.n	1e50 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    1f74:	2300      	movs	r3, #0
    1f76:	222c      	movs	r2, #44	; 0x2c
    1f78:	a903      	add	r1, sp, #12
    1f7a:	0028      	movs	r0, r5
    1f7c:	4c3e      	ldr	r4, [pc, #248]	; (2078 <STACK_SIZE+0x78>)
    1f7e:	47a0      	blx	r4
    1f80:	2800      	cmp	r0, #0
    1f82:	d000      	beq.n	1f86 <m2m_wifi_cb+0x19e>
    1f84:	e764      	b.n	1e50 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1f86:	4b3d      	ldr	r3, [pc, #244]	; (207c <STACK_SIZE+0x7c>)
    1f88:	681b      	ldr	r3, [r3, #0]
    1f8a:	2b00      	cmp	r3, #0
    1f8c:	d100      	bne.n	1f90 <m2m_wifi_cb+0x1a8>
    1f8e:	e75f      	b.n	1e50 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    1f90:	a903      	add	r1, sp, #12
    1f92:	3013      	adds	r0, #19
    1f94:	4798      	blx	r3
    1f96:	e75b      	b.n	1e50 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1f98:	2300      	movs	r3, #0
    1f9a:	2204      	movs	r2, #4
    1f9c:	a91c      	add	r1, sp, #112	; 0x70
    1f9e:	0028      	movs	r0, r5
    1fa0:	4c35      	ldr	r4, [pc, #212]	; (2078 <STACK_SIZE+0x78>)
    1fa2:	47a0      	blx	r4
    1fa4:	2800      	cmp	r0, #0
    1fa6:	d000      	beq.n	1faa <m2m_wifi_cb+0x1c2>
    1fa8:	e752      	b.n	1e50 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1faa:	4b34      	ldr	r3, [pc, #208]	; (207c <STACK_SIZE+0x7c>)
    1fac:	681b      	ldr	r3, [r3, #0]
    1fae:	2b00      	cmp	r3, #0
    1fb0:	d100      	bne.n	1fb4 <m2m_wifi_cb+0x1cc>
    1fb2:	e74d      	b.n	1e50 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    1fb4:	a91c      	add	r1, sp, #112	; 0x70
    1fb6:	3004      	adds	r0, #4
    1fb8:	4798      	blx	r3
    1fba:	e749      	b.n	1e50 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1fbc:	2300      	movs	r3, #0
    1fbe:	2204      	movs	r2, #4
    1fc0:	a91c      	add	r1, sp, #112	; 0x70
    1fc2:	0028      	movs	r0, r5
    1fc4:	4c2c      	ldr	r4, [pc, #176]	; (2078 <STACK_SIZE+0x78>)
    1fc6:	47a0      	blx	r4
    1fc8:	2800      	cmp	r0, #0
    1fca:	d000      	beq.n	1fce <m2m_wifi_cb+0x1e6>
    1fcc:	e740      	b.n	1e50 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1fce:	4b2b      	ldr	r3, [pc, #172]	; (207c <STACK_SIZE+0x7c>)
    1fd0:	681b      	ldr	r3, [r3, #0]
    1fd2:	2b00      	cmp	r3, #0
    1fd4:	d100      	bne.n	1fd8 <m2m_wifi_cb+0x1f0>
    1fd6:	e73b      	b.n	1e50 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    1fd8:	a91c      	add	r1, sp, #112	; 0x70
    1fda:	3065      	adds	r0, #101	; 0x65
    1fdc:	4798      	blx	r3
    1fde:	e737      	b.n	1e50 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    1fe0:	2301      	movs	r3, #1
    1fe2:	2264      	movs	r2, #100	; 0x64
    1fe4:	a903      	add	r1, sp, #12
    1fe6:	0028      	movs	r0, r5
    1fe8:	4c23      	ldr	r4, [pc, #140]	; (2078 <STACK_SIZE+0x78>)
    1fea:	47a0      	blx	r4
    1fec:	2800      	cmp	r0, #0
    1fee:	d000      	beq.n	1ff2 <m2m_wifi_cb+0x20a>
    1ff0:	e72e      	b.n	1e50 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    1ff2:	4b22      	ldr	r3, [pc, #136]	; (207c <STACK_SIZE+0x7c>)
    1ff4:	681b      	ldr	r3, [r3, #0]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d100      	bne.n	1ffc <m2m_wifi_cb+0x214>
    1ffa:	e729      	b.n	1e50 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    1ffc:	a903      	add	r1, sp, #12
    1ffe:	3009      	adds	r0, #9
    2000:	4798      	blx	r3
    2002:	e725      	b.n	1e50 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    2004:	2301      	movs	r3, #1
    2006:	2204      	movs	r2, #4
    2008:	a903      	add	r1, sp, #12
    200a:	0028      	movs	r0, r5
    200c:	4c1a      	ldr	r4, [pc, #104]	; (2078 <STACK_SIZE+0x78>)
    200e:	47a0      	blx	r4
    2010:	2800      	cmp	r0, #0
    2012:	d000      	beq.n	2016 <STACK_SIZE+0x16>
    2014:	e71c      	b.n	1e50 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    2016:	4b19      	ldr	r3, [pc, #100]	; (207c <STACK_SIZE+0x7c>)
    2018:	681b      	ldr	r3, [r3, #0]
    201a:	2b00      	cmp	r3, #0
    201c:	d100      	bne.n	2020 <STACK_SIZE+0x20>
    201e:	e717      	b.n	1e50 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    2020:	a903      	add	r1, sp, #12
    2022:	302a      	adds	r0, #42	; 0x2a
    2024:	4798      	blx	r3
    2026:	e713      	b.n	1e50 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    2028:	2300      	movs	r3, #0
    202a:	2208      	movs	r2, #8
    202c:	a903      	add	r1, sp, #12
    202e:	0028      	movs	r0, r5
    2030:	4c11      	ldr	r4, [pc, #68]	; (2078 <STACK_SIZE+0x78>)
    2032:	47a0      	blx	r4
    2034:	2800      	cmp	r0, #0
    2036:	d000      	beq.n	203a <STACK_SIZE+0x3a>
    2038:	e70a      	b.n	1e50 <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    203a:	ab03      	add	r3, sp, #12
    203c:	889a      	ldrh	r2, [r3, #4]
    203e:	0028      	movs	r0, r5
    2040:	3008      	adds	r0, #8
    2042:	2301      	movs	r3, #1
    2044:	9903      	ldr	r1, [sp, #12]
    2046:	4c0c      	ldr	r4, [pc, #48]	; (2078 <STACK_SIZE+0x78>)
    2048:	47a0      	blx	r4
    204a:	2800      	cmp	r0, #0
    204c:	d000      	beq.n	2050 <STACK_SIZE+0x50>
    204e:	e6ff      	b.n	1e50 <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    2050:	4b0a      	ldr	r3, [pc, #40]	; (207c <STACK_SIZE+0x7c>)
    2052:	681b      	ldr	r3, [r3, #0]
    2054:	2b00      	cmp	r3, #0
    2056:	d100      	bne.n	205a <STACK_SIZE+0x5a>
    2058:	e6fa      	b.n	1e50 <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    205a:	a903      	add	r1, sp, #12
    205c:	3020      	adds	r0, #32
    205e:	4798      	blx	r3
    2060:	e6f6      	b.n	1e50 <m2m_wifi_cb+0x68>
    2062:	46c0      	nop			; (mov r8, r8)
    2064:	0000b388 	.word	0x0000b388
    2068:	0000b020 	.word	0x0000b020
    206c:	00009b31 	.word	0x00009b31
    2070:	0000b3d8 	.word	0x0000b3d8
    2074:	00009b65 	.word	0x00009b65
    2078:	00001c41 	.word	0x00001c41
    207c:	20000090 	.word	0x20000090
    2080:	00001521 	.word	0x00001521
    2084:	0000b350 	.word	0x0000b350
    2088:	0000b3b8 	.word	0x0000b3b8
    208c:	20000095 	.word	0x20000095
    2090:	20000094 	.word	0x20000094

00002094 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    2094:	b5f0      	push	{r4, r5, r6, r7, lr}
    2096:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    2098:	2201      	movs	r2, #1
    209a:	230f      	movs	r3, #15
    209c:	446b      	add	r3, sp
    209e:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    20a0:	2800      	cmp	r0, #0
    20a2:	d061      	beq.n	2168 <m2m_wifi_init+0xd4>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    20a4:	6802      	ldr	r2, [r0, #0]
    20a6:	4b32      	ldr	r3, [pc, #200]	; (2170 <m2m_wifi_init+0xdc>)
    20a8:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    20aa:	2200      	movs	r2, #0
    20ac:	4b31      	ldr	r3, [pc, #196]	; (2174 <m2m_wifi_init+0xe0>)
    20ae:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    20b0:	200f      	movs	r0, #15
    20b2:	4468      	add	r0, sp
    20b4:	4b30      	ldr	r3, [pc, #192]	; (2178 <m2m_wifi_init+0xe4>)
    20b6:	4798      	blx	r3
    20b8:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    20ba:	d002      	beq.n	20c2 <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    20bc:	0020      	movs	r0, r4
    20be:	b00f      	add	sp, #60	; 0x3c
    20c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    20c2:	2000      	movs	r0, #0
    20c4:	4b2d      	ldr	r3, [pc, #180]	; (217c <m2m_wifi_init+0xe8>)
    20c6:	4798      	blx	r3
    20c8:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    20ca:	d149      	bne.n	2160 <m2m_wifi_init+0xcc>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    20cc:	492c      	ldr	r1, [pc, #176]	; (2180 <m2m_wifi_init+0xec>)
    20ce:	2001      	movs	r0, #1
    20d0:	4b2c      	ldr	r3, [pc, #176]	; (2184 <m2m_wifi_init+0xf0>)
    20d2:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    20d4:	ae04      	add	r6, sp, #16
    20d6:	0030      	movs	r0, r6
    20d8:	4b2b      	ldr	r3, [pc, #172]	; (2188 <m2m_wifi_init+0xf4>)
    20da:	4798      	blx	r3
    20dc:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    20de:	482b      	ldr	r0, [pc, #172]	; (218c <m2m_wifi_init+0xf8>)
    20e0:	4d2b      	ldr	r5, [pc, #172]	; (2190 <m2m_wifi_init+0xfc>)
    20e2:	47a8      	blx	r5
    20e4:	79b3      	ldrb	r3, [r6, #6]
    20e6:	7972      	ldrb	r2, [r6, #5]
    20e8:	7931      	ldrb	r1, [r6, #4]
    20ea:	8c30      	ldrh	r0, [r6, #32]
    20ec:	9000      	str	r0, [sp, #0]
    20ee:	4829      	ldr	r0, [pc, #164]	; (2194 <m2m_wifi_init+0x100>)
    20f0:	47a8      	blx	r5
    20f2:	200d      	movs	r0, #13
    20f4:	4f28      	ldr	r7, [pc, #160]	; (2198 <m2m_wifi_init+0x104>)
    20f6:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    20f8:	4824      	ldr	r0, [pc, #144]	; (218c <m2m_wifi_init+0xf8>)
    20fa:	47a8      	blx	r5
    20fc:	2226      	movs	r2, #38	; 0x26
    20fe:	446a      	add	r2, sp
    2100:	211a      	movs	r1, #26
    2102:	4469      	add	r1, sp
    2104:	4825      	ldr	r0, [pc, #148]	; (219c <m2m_wifi_init+0x108>)
    2106:	47a8      	blx	r5
    2108:	200d      	movs	r0, #13
    210a:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    210c:	481f      	ldr	r0, [pc, #124]	; (218c <m2m_wifi_init+0xf8>)
    210e:	47a8      	blx	r5
    2110:	7a73      	ldrb	r3, [r6, #9]
    2112:	7a32      	ldrb	r2, [r6, #8]
    2114:	79f1      	ldrb	r1, [r6, #7]
    2116:	4822      	ldr	r0, [pc, #136]	; (21a0 <m2m_wifi_init+0x10c>)
    2118:	47a8      	blx	r5
    211a:	200d      	movs	r0, #13
    211c:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    211e:	481b      	ldr	r0, [pc, #108]	; (218c <m2m_wifi_init+0xf8>)
    2120:	47a8      	blx	r5
    2122:	2302      	movs	r3, #2
    2124:	2205      	movs	r2, #5
    2126:	2113      	movs	r1, #19
    2128:	481e      	ldr	r0, [pc, #120]	; (21a4 <m2m_wifi_init+0x110>)
    212a:	47a8      	blx	r5
    212c:	200d      	movs	r0, #13
    212e:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    2130:	4816      	ldr	r0, [pc, #88]	; (218c <m2m_wifi_init+0xf8>)
    2132:	47a8      	blx	r5
    2134:	4a1c      	ldr	r2, [pc, #112]	; (21a8 <m2m_wifi_init+0x114>)
    2136:	491d      	ldr	r1, [pc, #116]	; (21ac <m2m_wifi_init+0x118>)
    2138:	481d      	ldr	r0, [pc, #116]	; (21b0 <m2m_wifi_init+0x11c>)
    213a:	47a8      	blx	r5
    213c:	200d      	movs	r0, #13
    213e:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    2140:	0023      	movs	r3, r4
    2142:	330d      	adds	r3, #13
    2144:	d1ba      	bne.n	20bc <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    2146:	22e8      	movs	r2, #232	; 0xe8
    2148:	32ff      	adds	r2, #255	; 0xff
    214a:	491a      	ldr	r1, [pc, #104]	; (21b4 <m2m_wifi_init+0x120>)
    214c:	481a      	ldr	r0, [pc, #104]	; (21b8 <m2m_wifi_init+0x124>)
    214e:	4b10      	ldr	r3, [pc, #64]	; (2190 <m2m_wifi_init+0xfc>)
    2150:	4798      	blx	r3
    2152:	481a      	ldr	r0, [pc, #104]	; (21bc <m2m_wifi_init+0x128>)
    2154:	4b1a      	ldr	r3, [pc, #104]	; (21c0 <m2m_wifi_init+0x12c>)
    2156:	4798      	blx	r3
    2158:	200d      	movs	r0, #13
    215a:	4b0f      	ldr	r3, [pc, #60]	; (2198 <m2m_wifi_init+0x104>)
    215c:	4798      	blx	r3
    215e:	e7ad      	b.n	20bc <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    2160:	2000      	movs	r0, #0
    2162:	4b18      	ldr	r3, [pc, #96]	; (21c4 <m2m_wifi_init+0x130>)
    2164:	4798      	blx	r3
    2166:	e7a9      	b.n	20bc <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    2168:	240c      	movs	r4, #12
    216a:	4264      	negs	r4, r4
    216c:	e7a6      	b.n	20bc <m2m_wifi_init+0x28>
    216e:	46c0      	nop			; (mov r8, r8)
    2170:	20000090 	.word	0x20000090
    2174:	20000095 	.word	0x20000095
    2178:	00002b35 	.word	0x00002b35
    217c:	00001db1 	.word	0x00001db1
    2180:	00001de9 	.word	0x00001de9
    2184:	00001d2d 	.word	0x00001d2d
    2188:	00002a51 	.word	0x00002a51
    218c:	0000b350 	.word	0x0000b350
    2190:	00009b31 	.word	0x00009b31
    2194:	0000b494 	.word	0x0000b494
    2198:	00009b65 	.word	0x00009b65
    219c:	0000b4bc 	.word	0x0000b4bc
    21a0:	0000b4d8 	.word	0x0000b4d8
    21a4:	0000b4fc 	.word	0x0000b4fc
    21a8:	0000b514 	.word	0x0000b514
    21ac:	0000b520 	.word	0x0000b520
    21b0:	0000b52c 	.word	0x0000b52c
    21b4:	0000b394 	.word	0x0000b394
    21b8:	0000b020 	.word	0x0000b020
    21bc:	0000b544 	.word	0x0000b544
    21c0:	00009c4d 	.word	0x00009c4d
    21c4:	00002c09 	.word	0x00002c09

000021c8 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    21c8:	b510      	push	{r4, lr}
	return hif_handle_isr();
    21ca:	4b01      	ldr	r3, [pc, #4]	; (21d0 <m2m_wifi_handle_events+0x8>)
    21cc:	4798      	blx	r3
}
    21ce:	bd10      	pop	{r4, pc}
    21d0:	00001865 	.word	0x00001865

000021d4 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    21d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    21d6:	46ce      	mov	lr, r9
    21d8:	4647      	mov	r7, r8
    21da:	b580      	push	{r7, lr}
    21dc:	b0a3      	sub	sp, #140	; 0x8c
    21de:	9005      	str	r0, [sp, #20]
    21e0:	000c      	movs	r4, r1
    21e2:	0015      	movs	r5, r2
    21e4:	001f      	movs	r7, r3
    21e6:	ab2a      	add	r3, sp, #168	; 0xa8
    21e8:	881b      	ldrh	r3, [r3, #0]
    21ea:	4699      	mov	r9, r3
    21ec:	ab2b      	add	r3, sp, #172	; 0xac
    21ee:	781b      	ldrb	r3, [r3, #0]
    21f0:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    21f2:	2a01      	cmp	r2, #1
    21f4:	d003      	beq.n	21fe <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    21f6:	2f00      	cmp	r7, #0
    21f8:	d040      	beq.n	227c <m2m_wifi_connect_sc+0xa8>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    21fa:	2a02      	cmp	r2, #2
    21fc:	d04c      	beq.n	2298 <m2m_wifi_connect_sc+0xc4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    21fe:	1e63      	subs	r3, r4, #1
    2200:	2b1f      	cmp	r3, #31
    2202:	d900      	bls.n	2206 <m2m_wifi_connect_sc+0x32>
    2204:	e078      	b.n	22f8 <m2m_wifi_connect_sc+0x124>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    2206:	464b      	mov	r3, r9
    2208:	3b01      	subs	r3, #1
    220a:	b29b      	uxth	r3, r3
    220c:	2b0d      	cmp	r3, #13
    220e:	d903      	bls.n	2218 <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    2210:	464b      	mov	r3, r9
    2212:	2bff      	cmp	r3, #255	; 0xff
    2214:	d000      	beq.n	2218 <m2m_wifi_connect_sc+0x44>
    2216:	e07d      	b.n	2314 <m2m_wifi_connect_sc+0x140>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    2218:	ae07      	add	r6, sp, #28
    221a:	0022      	movs	r2, r4
    221c:	9905      	ldr	r1, [sp, #20]
    221e:	205a      	movs	r0, #90	; 0x5a
    2220:	ab02      	add	r3, sp, #8
    2222:	469c      	mov	ip, r3
    2224:	4460      	add	r0, ip
    2226:	4b78      	ldr	r3, [pc, #480]	; (2408 <m2m_wifi_connect_sc+0x234>)
    2228:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    222a:	1934      	adds	r4, r6, r4
    222c:	3446      	adds	r4, #70	; 0x46
    222e:	2300      	movs	r3, #0
    2230:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    2232:	3344      	adds	r3, #68	; 0x44
    2234:	464a      	mov	r2, r9
    2236:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    2238:	4643      	mov	r3, r8
    223a:	1e5a      	subs	r2, r3, #1
    223c:	4193      	sbcs	r3, r2
    223e:	2267      	movs	r2, #103	; 0x67
    2240:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    2242:	2341      	movs	r3, #65	; 0x41
    2244:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    2246:	2d03      	cmp	r5, #3
    2248:	d100      	bne.n	224c <m2m_wifi_connect_sc+0x78>
    224a:	e072      	b.n	2332 <m2m_wifi_connect_sc+0x15e>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    224c:	2d02      	cmp	r5, #2
    224e:	d100      	bne.n	2252 <m2m_wifi_connect_sc+0x7e>
    2250:	e0ab      	b.n	23aa <m2m_wifi_connect_sc+0x1d6>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    2252:	2d04      	cmp	r5, #4
    2254:	d100      	bne.n	2258 <m2m_wifi_connect_sc+0x84>
    2256:	e0c3      	b.n	23e0 <m2m_wifi_connect_sc+0x20c>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    2258:	2d01      	cmp	r5, #1
    225a:	d000      	beq.n	225e <m2m_wifi_connect_sc+0x8a>
    225c:	e0c6      	b.n	23ec <m2m_wifi_connect_sc+0x218>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    225e:	2300      	movs	r3, #0
    2260:	9302      	str	r3, [sp, #8]
    2262:	9301      	str	r3, [sp, #4]
    2264:	9300      	str	r3, [sp, #0]
    2266:	336c      	adds	r3, #108	; 0x6c
    2268:	aa07      	add	r2, sp, #28
    226a:	2128      	movs	r1, #40	; 0x28
    226c:	2001      	movs	r0, #1
    226e:	4c67      	ldr	r4, [pc, #412]	; (240c <m2m_wifi_connect_sc+0x238>)
    2270:	47a0      	blx	r4

ERR1:
	return ret;
}
    2272:	b023      	add	sp, #140	; 0x8c
    2274:	bc0c      	pop	{r2, r3}
    2276:	4690      	mov	r8, r2
    2278:	4699      	mov	r9, r3
    227a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    227c:	4a64      	ldr	r2, [pc, #400]	; (2410 <m2m_wifi_connect_sc+0x23c>)
    227e:	4965      	ldr	r1, [pc, #404]	; (2414 <m2m_wifi_connect_sc+0x240>)
    2280:	4865      	ldr	r0, [pc, #404]	; (2418 <m2m_wifi_connect_sc+0x244>)
    2282:	4b66      	ldr	r3, [pc, #408]	; (241c <m2m_wifi_connect_sc+0x248>)
    2284:	4798      	blx	r3
    2286:	4866      	ldr	r0, [pc, #408]	; (2420 <m2m_wifi_connect_sc+0x24c>)
    2288:	4b66      	ldr	r3, [pc, #408]	; (2424 <m2m_wifi_connect_sc+0x250>)
    228a:	4798      	blx	r3
    228c:	200d      	movs	r0, #13
    228e:	4b66      	ldr	r3, [pc, #408]	; (2428 <m2m_wifi_connect_sc+0x254>)
    2290:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2292:	200c      	movs	r0, #12
    2294:	4240      	negs	r0, r0
			goto ERR1;
    2296:	e7ec      	b.n	2272 <m2m_wifi_connect_sc+0x9e>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    2298:	0038      	movs	r0, r7
    229a:	4b64      	ldr	r3, [pc, #400]	; (242c <m2m_wifi_connect_sc+0x258>)
    229c:	4798      	blx	r3
    229e:	2840      	cmp	r0, #64	; 0x40
    22a0:	d1ad      	bne.n	21fe <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    22a2:	783b      	ldrb	r3, [r7, #0]
    22a4:	001a      	movs	r2, r3
    22a6:	3a30      	subs	r2, #48	; 0x30
    22a8:	2a36      	cmp	r2, #54	; 0x36
    22aa:	d817      	bhi.n	22dc <m2m_wifi_connect_sc+0x108>
    22ac:	3a0a      	subs	r2, #10
    22ae:	2a06      	cmp	r2, #6
    22b0:	d914      	bls.n	22dc <m2m_wifi_connect_sc+0x108>
    22b2:	3b47      	subs	r3, #71	; 0x47
    22b4:	2b19      	cmp	r3, #25
    22b6:	d911      	bls.n	22dc <m2m_wifi_connect_sc+0x108>
    22b8:	1c7a      	adds	r2, r7, #1
    22ba:	0038      	movs	r0, r7
    22bc:	3040      	adds	r0, #64	; 0x40
    22be:	7813      	ldrb	r3, [r2, #0]
    22c0:	0019      	movs	r1, r3
    22c2:	3930      	subs	r1, #48	; 0x30
    22c4:	2936      	cmp	r1, #54	; 0x36
    22c6:	d809      	bhi.n	22dc <m2m_wifi_connect_sc+0x108>
    22c8:	390a      	subs	r1, #10
    22ca:	2906      	cmp	r1, #6
    22cc:	d906      	bls.n	22dc <m2m_wifi_connect_sc+0x108>
    22ce:	3b47      	subs	r3, #71	; 0x47
    22d0:	2b19      	cmp	r3, #25
    22d2:	d903      	bls.n	22dc <m2m_wifi_connect_sc+0x108>
    22d4:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    22d6:	4282      	cmp	r2, r0
    22d8:	d1f1      	bne.n	22be <m2m_wifi_connect_sc+0xea>
    22da:	e790      	b.n	21fe <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    22dc:	4a54      	ldr	r2, [pc, #336]	; (2430 <m2m_wifi_connect_sc+0x25c>)
    22de:	494d      	ldr	r1, [pc, #308]	; (2414 <m2m_wifi_connect_sc+0x240>)
    22e0:	484d      	ldr	r0, [pc, #308]	; (2418 <m2m_wifi_connect_sc+0x244>)
    22e2:	4b4e      	ldr	r3, [pc, #312]	; (241c <m2m_wifi_connect_sc+0x248>)
    22e4:	4798      	blx	r3
    22e6:	4853      	ldr	r0, [pc, #332]	; (2434 <m2m_wifi_connect_sc+0x260>)
    22e8:	4b4e      	ldr	r3, [pc, #312]	; (2424 <m2m_wifi_connect_sc+0x250>)
    22ea:	4798      	blx	r3
    22ec:	200d      	movs	r0, #13
    22ee:	4b4e      	ldr	r3, [pc, #312]	; (2428 <m2m_wifi_connect_sc+0x254>)
    22f0:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    22f2:	200c      	movs	r0, #12
    22f4:	4240      	negs	r0, r0
					goto ERR1;
    22f6:	e7bc      	b.n	2272 <m2m_wifi_connect_sc+0x9e>
		M2M_ERR("SSID LEN INVALID\n");
    22f8:	4a4f      	ldr	r2, [pc, #316]	; (2438 <m2m_wifi_connect_sc+0x264>)
    22fa:	4946      	ldr	r1, [pc, #280]	; (2414 <m2m_wifi_connect_sc+0x240>)
    22fc:	4846      	ldr	r0, [pc, #280]	; (2418 <m2m_wifi_connect_sc+0x244>)
    22fe:	4b47      	ldr	r3, [pc, #284]	; (241c <m2m_wifi_connect_sc+0x248>)
    2300:	4798      	blx	r3
    2302:	484e      	ldr	r0, [pc, #312]	; (243c <m2m_wifi_connect_sc+0x268>)
    2304:	4b47      	ldr	r3, [pc, #284]	; (2424 <m2m_wifi_connect_sc+0x250>)
    2306:	4798      	blx	r3
    2308:	200d      	movs	r0, #13
    230a:	4b47      	ldr	r3, [pc, #284]	; (2428 <m2m_wifi_connect_sc+0x254>)
    230c:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    230e:	200c      	movs	r0, #12
    2310:	4240      	negs	r0, r0
		goto ERR1;
    2312:	e7ae      	b.n	2272 <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("CH INVALID\n");
    2314:	228d      	movs	r2, #141	; 0x8d
    2316:	0092      	lsls	r2, r2, #2
    2318:	493e      	ldr	r1, [pc, #248]	; (2414 <m2m_wifi_connect_sc+0x240>)
    231a:	483f      	ldr	r0, [pc, #252]	; (2418 <m2m_wifi_connect_sc+0x244>)
    231c:	4b3f      	ldr	r3, [pc, #252]	; (241c <m2m_wifi_connect_sc+0x248>)
    231e:	4798      	blx	r3
    2320:	4847      	ldr	r0, [pc, #284]	; (2440 <m2m_wifi_connect_sc+0x26c>)
    2322:	4b40      	ldr	r3, [pc, #256]	; (2424 <m2m_wifi_connect_sc+0x250>)
    2324:	4798      	blx	r3
    2326:	200d      	movs	r0, #13
    2328:	4b3f      	ldr	r3, [pc, #252]	; (2428 <m2m_wifi_connect_sc+0x254>)
    232a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    232c:	200c      	movs	r0, #12
    232e:	4240      	negs	r0, r0
			goto ERR1;
    2330:	e79f      	b.n	2272 <m2m_wifi_connect_sc+0x9e>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    2332:	783b      	ldrb	r3, [r7, #0]
    2334:	3b01      	subs	r3, #1
    2336:	b2db      	uxtb	r3, r3
    2338:	aa07      	add	r2, sp, #28
    233a:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    233c:	2b03      	cmp	r3, #3
    233e:	d817      	bhi.n	2370 <m2m_wifi_connect_sc+0x19c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    2340:	787a      	ldrb	r2, [r7, #1]
    2342:	1e51      	subs	r1, r2, #1
    2344:	ab07      	add	r3, sp, #28
    2346:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    2348:	2310      	movs	r3, #16
    234a:	0011      	movs	r1, r2
    234c:	4399      	bics	r1, r3
    234e:	290b      	cmp	r1, #11
    2350:	d01d      	beq.n	238e <m2m_wifi_connect_sc+0x1ba>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    2352:	4a3c      	ldr	r2, [pc, #240]	; (2444 <m2m_wifi_connect_sc+0x270>)
    2354:	492f      	ldr	r1, [pc, #188]	; (2414 <m2m_wifi_connect_sc+0x240>)
    2356:	4830      	ldr	r0, [pc, #192]	; (2418 <m2m_wifi_connect_sc+0x244>)
    2358:	4c30      	ldr	r4, [pc, #192]	; (241c <m2m_wifi_connect_sc+0x248>)
    235a:	47a0      	blx	r4
    235c:	ab07      	add	r3, sp, #28
    235e:	7859      	ldrb	r1, [r3, #1]
    2360:	4839      	ldr	r0, [pc, #228]	; (2448 <m2m_wifi_connect_sc+0x274>)
    2362:	47a0      	blx	r4
    2364:	200d      	movs	r0, #13
    2366:	4b30      	ldr	r3, [pc, #192]	; (2428 <m2m_wifi_connect_sc+0x254>)
    2368:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    236a:	200c      	movs	r0, #12
    236c:	4240      	negs	r0, r0
			goto ERR1;
    236e:	e780      	b.n	2272 <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    2370:	4a36      	ldr	r2, [pc, #216]	; (244c <m2m_wifi_connect_sc+0x278>)
    2372:	4928      	ldr	r1, [pc, #160]	; (2414 <m2m_wifi_connect_sc+0x240>)
    2374:	4828      	ldr	r0, [pc, #160]	; (2418 <m2m_wifi_connect_sc+0x244>)
    2376:	4c29      	ldr	r4, [pc, #164]	; (241c <m2m_wifi_connect_sc+0x248>)
    2378:	47a0      	blx	r4
    237a:	ab07      	add	r3, sp, #28
    237c:	7819      	ldrb	r1, [r3, #0]
    237e:	4834      	ldr	r0, [pc, #208]	; (2450 <m2m_wifi_connect_sc+0x27c>)
    2380:	47a0      	blx	r4
    2382:	200d      	movs	r0, #13
    2384:	4b28      	ldr	r3, [pc, #160]	; (2428 <m2m_wifi_connect_sc+0x254>)
    2386:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2388:	200c      	movs	r0, #12
    238a:	4240      	negs	r0, r0
			goto ERR1;
    238c:	e771      	b.n	2272 <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    238e:	1cb9      	adds	r1, r7, #2
    2390:	2016      	movs	r0, #22
    2392:	ab02      	add	r3, sp, #8
    2394:	469c      	mov	ip, r3
    2396:	4460      	add	r0, ip
    2398:	4b1b      	ldr	r3, [pc, #108]	; (2408 <m2m_wifi_connect_sc+0x234>)
    239a:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    239c:	787b      	ldrb	r3, [r7, #1]
    239e:	aa07      	add	r2, sp, #28
    23a0:	4694      	mov	ip, r2
    23a2:	4463      	add	r3, ip
    23a4:	2200      	movs	r2, #0
    23a6:	709a      	strb	r2, [r3, #2]
    23a8:	e759      	b.n	225e <m2m_wifi_connect_sc+0x8a>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    23aa:	0038      	movs	r0, r7
    23ac:	4b1f      	ldr	r3, [pc, #124]	; (242c <m2m_wifi_connect_sc+0x258>)
    23ae:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    23b0:	1e43      	subs	r3, r0, #1
    23b2:	b29b      	uxth	r3, r3
    23b4:	2b3f      	cmp	r3, #63	; 0x3f
    23b6:	d805      	bhi.n	23c4 <m2m_wifi_connect_sc+0x1f0>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    23b8:	1c42      	adds	r2, r0, #1
    23ba:	0039      	movs	r1, r7
    23bc:	a807      	add	r0, sp, #28
    23be:	4b12      	ldr	r3, [pc, #72]	; (2408 <m2m_wifi_connect_sc+0x234>)
    23c0:	4798      	blx	r3
    23c2:	e74c      	b.n	225e <m2m_wifi_connect_sc+0x8a>
			M2M_ERR("Incorrect PSK key length\n");
    23c4:	4a23      	ldr	r2, [pc, #140]	; (2454 <m2m_wifi_connect_sc+0x280>)
    23c6:	4913      	ldr	r1, [pc, #76]	; (2414 <m2m_wifi_connect_sc+0x240>)
    23c8:	4813      	ldr	r0, [pc, #76]	; (2418 <m2m_wifi_connect_sc+0x244>)
    23ca:	4b14      	ldr	r3, [pc, #80]	; (241c <m2m_wifi_connect_sc+0x248>)
    23cc:	4798      	blx	r3
    23ce:	4822      	ldr	r0, [pc, #136]	; (2458 <m2m_wifi_connect_sc+0x284>)
    23d0:	4b14      	ldr	r3, [pc, #80]	; (2424 <m2m_wifi_connect_sc+0x250>)
    23d2:	4798      	blx	r3
    23d4:	200d      	movs	r0, #13
    23d6:	4b14      	ldr	r3, [pc, #80]	; (2428 <m2m_wifi_connect_sc+0x254>)
    23d8:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    23da:	200c      	movs	r0, #12
    23dc:	4240      	negs	r0, r0
			goto ERR1;
    23de:	e748      	b.n	2272 <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    23e0:	223e      	movs	r2, #62	; 0x3e
    23e2:	0039      	movs	r1, r7
    23e4:	a807      	add	r0, sp, #28
    23e6:	4b08      	ldr	r3, [pc, #32]	; (2408 <m2m_wifi_connect_sc+0x234>)
    23e8:	4798      	blx	r3
    23ea:	e738      	b.n	225e <m2m_wifi_connect_sc+0x8a>
		M2M_ERR("undefined sec type\n");
    23ec:	4a1b      	ldr	r2, [pc, #108]	; (245c <m2m_wifi_connect_sc+0x288>)
    23ee:	4909      	ldr	r1, [pc, #36]	; (2414 <m2m_wifi_connect_sc+0x240>)
    23f0:	4809      	ldr	r0, [pc, #36]	; (2418 <m2m_wifi_connect_sc+0x244>)
    23f2:	4b0a      	ldr	r3, [pc, #40]	; (241c <m2m_wifi_connect_sc+0x248>)
    23f4:	4798      	blx	r3
    23f6:	481a      	ldr	r0, [pc, #104]	; (2460 <m2m_wifi_connect_sc+0x28c>)
    23f8:	4b0a      	ldr	r3, [pc, #40]	; (2424 <m2m_wifi_connect_sc+0x250>)
    23fa:	4798      	blx	r3
    23fc:	200d      	movs	r0, #13
    23fe:	4b0a      	ldr	r3, [pc, #40]	; (2428 <m2m_wifi_connect_sc+0x254>)
    2400:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    2402:	200c      	movs	r0, #12
    2404:	4240      	negs	r0, r0
		goto ERR1;
    2406:	e734      	b.n	2272 <m2m_wifi_connect_sc+0x9e>
    2408:	0000150d 	.word	0x0000150d
    240c:	00001635 	.word	0x00001635
    2410:	00000215 	.word	0x00000215
    2414:	0000b3a4 	.word	0x0000b3a4
    2418:	0000b020 	.word	0x0000b020
    241c:	00009b31 	.word	0x00009b31
    2420:	0000b3ec 	.word	0x0000b3ec
    2424:	00009c4d 	.word	0x00009c4d
    2428:	00009b65 	.word	0x00009b65
    242c:	00001531 	.word	0x00001531
    2430:	00000221 	.word	0x00000221
    2434:	0000b400 	.word	0x0000b400
    2438:	0000022b 	.word	0x0000022b
    243c:	0000b40c 	.word	0x0000b40c
    2440:	0000b420 	.word	0x0000b420
    2444:	00000252 	.word	0x00000252
    2448:	0000b448 	.word	0x0000b448
    244c:	0000024b 	.word	0x0000024b
    2450:	0000b42c 	.word	0x0000b42c
    2454:	00000261 	.word	0x00000261
    2458:	0000b464 	.word	0x0000b464
    245c:	00000271 	.word	0x00000271
    2460:	0000b480 	.word	0x0000b480

00002464 <m2m_wifi_connect>:
{
    2464:	b530      	push	{r4, r5, lr}
    2466:	b083      	sub	sp, #12
    2468:	ac06      	add	r4, sp, #24
    246a:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    246c:	2500      	movs	r5, #0
    246e:	9501      	str	r5, [sp, #4]
    2470:	9400      	str	r4, [sp, #0]
    2472:	4c02      	ldr	r4, [pc, #8]	; (247c <m2m_wifi_connect+0x18>)
    2474:	47a0      	blx	r4
}
    2476:	b003      	add	sp, #12
    2478:	bd30      	pop	{r4, r5, pc}
    247a:	46c0      	nop			; (mov r8, r8)
    247c:	000021d5 	.word	0x000021d5

00002480 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    2480:	2000      	movs	r0, #0
    2482:	4770      	bx	lr

00002484 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    2484:	b5f0      	push	{r4, r5, r6, r7, lr}
    2486:	b083      	sub	sp, #12
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    2488:	2580      	movs	r5, #128	; 0x80
    248a:	006d      	lsls	r5, r5, #1
    248c:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    248e:	24a5      	movs	r4, #165	; 0xa5
    2490:	0164      	lsls	r4, r4, #5
    2492:	4f08      	ldr	r7, [pc, #32]	; (24b4 <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    2494:	4e08      	ldr	r6, [pc, #32]	; (24b8 <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    2496:	0029      	movs	r1, r5
    2498:	0020      	movs	r0, r4
    249a:	47b8      	blx	r7
			uint32 reg = 0;
    249c:	2300      	movs	r3, #0
    249e:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    24a0:	a901      	add	r1, sp, #4
    24a2:	0020      	movs	r0, r4
    24a4:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    24a6:	2800      	cmp	r0, #0
    24a8:	d1f5      	bne.n	2496 <chip_apply_conf+0x12>
				if(reg == val32)
    24aa:	9b01      	ldr	r3, [sp, #4]
    24ac:	429d      	cmp	r5, r3
    24ae:	d1f2      	bne.n	2496 <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    24b0:	b003      	add	sp, #12
    24b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24b4:	00002975 	.word	0x00002975
    24b8:	00002969 	.word	0x00002969

000024bc <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    24bc:	b500      	push	{lr}
    24be:	b083      	sub	sp, #12
	uint32 reg = 0;
    24c0:	2300      	movs	r3, #0
    24c2:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    24c4:	a901      	add	r1, sp, #4
    24c6:	4811      	ldr	r0, [pc, #68]	; (250c <enable_interrupts+0x50>)
    24c8:	4b11      	ldr	r3, [pc, #68]	; (2510 <enable_interrupts+0x54>)
    24ca:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    24cc:	2800      	cmp	r0, #0
    24ce:	d001      	beq.n	24d4 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    24d0:	b003      	add	sp, #12
    24d2:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    24d4:	2180      	movs	r1, #128	; 0x80
    24d6:	0049      	lsls	r1, r1, #1
    24d8:	9b01      	ldr	r3, [sp, #4]
    24da:	4319      	orrs	r1, r3
    24dc:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    24de:	480b      	ldr	r0, [pc, #44]	; (250c <enable_interrupts+0x50>)
    24e0:	4b0c      	ldr	r3, [pc, #48]	; (2514 <enable_interrupts+0x58>)
    24e2:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    24e4:	2800      	cmp	r0, #0
    24e6:	d1f3      	bne.n	24d0 <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    24e8:	a901      	add	r1, sp, #4
    24ea:	20d0      	movs	r0, #208	; 0xd0
    24ec:	0140      	lsls	r0, r0, #5
    24ee:	4b08      	ldr	r3, [pc, #32]	; (2510 <enable_interrupts+0x54>)
    24f0:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    24f2:	2800      	cmp	r0, #0
    24f4:	d1ec      	bne.n	24d0 <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    24f6:	2180      	movs	r1, #128	; 0x80
    24f8:	0249      	lsls	r1, r1, #9
    24fa:	9b01      	ldr	r3, [sp, #4]
    24fc:	4319      	orrs	r1, r3
    24fe:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    2500:	20d0      	movs	r0, #208	; 0xd0
    2502:	0140      	lsls	r0, r0, #5
    2504:	4b03      	ldr	r3, [pc, #12]	; (2514 <enable_interrupts+0x58>)
    2506:	4798      	blx	r3
    2508:	e7e2      	b.n	24d0 <enable_interrupts+0x14>
    250a:	46c0      	nop			; (mov r8, r8)
    250c:	00001408 	.word	0x00001408
    2510:	00002969 	.word	0x00002969
    2514:	00002975 	.word	0x00002975

00002518 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    2518:	b510      	push	{r4, lr}
    251a:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    251c:	4b28      	ldr	r3, [pc, #160]	; (25c0 <nmi_get_chipid+0xa8>)
    251e:	681c      	ldr	r4, [r3, #0]
    2520:	2c00      	cmp	r4, #0
    2522:	d004      	beq.n	252e <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    2524:	4b26      	ldr	r3, [pc, #152]	; (25c0 <nmi_get_chipid+0xa8>)
    2526:	681c      	ldr	r4, [r3, #0]
}
    2528:	0020      	movs	r0, r4
    252a:	b002      	add	sp, #8
    252c:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    252e:	0019      	movs	r1, r3
    2530:	2080      	movs	r0, #128	; 0x80
    2532:	0140      	lsls	r0, r0, #5
    2534:	4b23      	ldr	r3, [pc, #140]	; (25c4 <nmi_get_chipid+0xac>)
    2536:	4798      	blx	r3
    2538:	2800      	cmp	r0, #0
    253a:	d003      	beq.n	2544 <nmi_get_chipid+0x2c>
			chipid = 0;
    253c:	2200      	movs	r2, #0
    253e:	4b20      	ldr	r3, [pc, #128]	; (25c0 <nmi_get_chipid+0xa8>)
    2540:	601a      	str	r2, [r3, #0]
			return 0;
    2542:	e7f1      	b.n	2528 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    2544:	a901      	add	r1, sp, #4
    2546:	4820      	ldr	r0, [pc, #128]	; (25c8 <nmi_get_chipid+0xb0>)
    2548:	4b1e      	ldr	r3, [pc, #120]	; (25c4 <nmi_get_chipid+0xac>)
    254a:	4798      	blx	r3
    254c:	2800      	cmp	r0, #0
    254e:	d003      	beq.n	2558 <nmi_get_chipid+0x40>
			chipid = 0;
    2550:	2200      	movs	r2, #0
    2552:	4b1b      	ldr	r3, [pc, #108]	; (25c0 <nmi_get_chipid+0xa8>)
    2554:	601a      	str	r2, [r3, #0]
			return 0;
    2556:	e7e7      	b.n	2528 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    2558:	4b19      	ldr	r3, [pc, #100]	; (25c0 <nmi_get_chipid+0xa8>)
    255a:	681b      	ldr	r3, [r3, #0]
    255c:	4a1b      	ldr	r2, [pc, #108]	; (25cc <nmi_get_chipid+0xb4>)
    255e:	4293      	cmp	r3, r2
    2560:	d00e      	beq.n	2580 <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    2562:	4a1b      	ldr	r2, [pc, #108]	; (25d0 <nmi_get_chipid+0xb8>)
    2564:	4293      	cmp	r3, r2
    2566:	d012      	beq.n	258e <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    2568:	4a1a      	ldr	r2, [pc, #104]	; (25d4 <nmi_get_chipid+0xbc>)
    256a:	4293      	cmp	r3, r2
    256c:	d01c      	beq.n	25a8 <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    256e:	4914      	ldr	r1, [pc, #80]	; (25c0 <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    2570:	4a19      	ldr	r2, [pc, #100]	; (25d8 <nmi_get_chipid+0xc0>)
    2572:	680b      	ldr	r3, [r1, #0]
    2574:	401a      	ands	r2, r3
		chipid |= 0x050000;
    2576:	23a0      	movs	r3, #160	; 0xa0
    2578:	02db      	lsls	r3, r3, #11
    257a:	4313      	orrs	r3, r2
    257c:	600b      	str	r3, [r1, #0]
    257e:	e7d1      	b.n	2524 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    2580:	9b01      	ldr	r3, [sp, #4]
    2582:	2b01      	cmp	r3, #1
    2584:	d0f3      	beq.n	256e <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    2586:	4a15      	ldr	r2, [pc, #84]	; (25dc <nmi_get_chipid+0xc4>)
    2588:	4b0d      	ldr	r3, [pc, #52]	; (25c0 <nmi_get_chipid+0xa8>)
    258a:	601a      	str	r2, [r3, #0]
    258c:	e7ef      	b.n	256e <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    258e:	9b01      	ldr	r3, [sp, #4]
    2590:	2b03      	cmp	r3, #3
    2592:	d0ec      	beq.n	256e <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    2594:	2b04      	cmp	r3, #4
    2596:	d003      	beq.n	25a0 <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    2598:	4a11      	ldr	r2, [pc, #68]	; (25e0 <nmi_get_chipid+0xc8>)
    259a:	4b09      	ldr	r3, [pc, #36]	; (25c0 <nmi_get_chipid+0xa8>)
    259c:	601a      	str	r2, [r3, #0]
    259e:	e7e6      	b.n	256e <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    25a0:	4a10      	ldr	r2, [pc, #64]	; (25e4 <nmi_get_chipid+0xcc>)
    25a2:	4b07      	ldr	r3, [pc, #28]	; (25c0 <nmi_get_chipid+0xa8>)
    25a4:	601a      	str	r2, [r3, #0]
    25a6:	e7e2      	b.n	256e <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    25a8:	4905      	ldr	r1, [pc, #20]	; (25c0 <nmi_get_chipid+0xa8>)
    25aa:	20ec      	movs	r0, #236	; 0xec
    25ac:	0380      	lsls	r0, r0, #14
    25ae:	4b05      	ldr	r3, [pc, #20]	; (25c4 <nmi_get_chipid+0xac>)
    25b0:	4798      	blx	r3
    25b2:	2800      	cmp	r0, #0
    25b4:	d0db      	beq.n	256e <nmi_get_chipid+0x56>
			chipid = 0;
    25b6:	2200      	movs	r2, #0
    25b8:	4b01      	ldr	r3, [pc, #4]	; (25c0 <nmi_get_chipid+0xa8>)
    25ba:	601a      	str	r2, [r3, #0]
			return 0;
    25bc:	e7b4      	b.n	2528 <nmi_get_chipid+0x10>
    25be:	46c0      	nop			; (mov r8, r8)
    25c0:	20000098 	.word	0x20000098
    25c4:	00002969 	.word	0x00002969
    25c8:	000013f4 	.word	0x000013f4
    25cc:	001002a0 	.word	0x001002a0
    25d0:	001002b0 	.word	0x001002b0
    25d4:	001000f0 	.word	0x001000f0
    25d8:	fff0ffff 	.word	0xfff0ffff
    25dc:	001002a1 	.word	0x001002a1
    25e0:	001002b2 	.word	0x001002b2
    25e4:	001002b1 	.word	0x001002b1

000025e8 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    25e8:	b530      	push	{r4, r5, lr}
    25ea:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    25ec:	4c16      	ldr	r4, [pc, #88]	; (2648 <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    25ee:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    25f0:	a901      	add	r1, sp, #4
    25f2:	2010      	movs	r0, #16
    25f4:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    25f6:	2800      	cmp	r0, #0
    25f8:	d11c      	bne.n	2634 <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    25fa:	9b01      	ldr	r3, [sp, #4]
    25fc:	422b      	tst	r3, r5
    25fe:	d1f7      	bne.n	25f0 <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    2600:	a901      	add	r1, sp, #4
    2602:	3001      	adds	r0, #1
    2604:	4b10      	ldr	r3, [pc, #64]	; (2648 <chip_sleep+0x60>)
    2606:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    2608:	2800      	cmp	r0, #0
    260a:	d113      	bne.n	2634 <chip_sleep+0x4c>
	if(reg & NBIT1)
    260c:	9901      	ldr	r1, [sp, #4]
    260e:	078b      	lsls	r3, r1, #30
    2610:	d507      	bpl.n	2622 <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    2612:	2302      	movs	r3, #2
    2614:	4399      	bics	r1, r3
    2616:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    2618:	3001      	adds	r0, #1
    261a:	4b0c      	ldr	r3, [pc, #48]	; (264c <chip_sleep+0x64>)
    261c:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    261e:	2800      	cmp	r0, #0
    2620:	d108      	bne.n	2634 <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    2622:	a901      	add	r1, sp, #4
    2624:	200b      	movs	r0, #11
    2626:	4b08      	ldr	r3, [pc, #32]	; (2648 <chip_sleep+0x60>)
    2628:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    262a:	2800      	cmp	r0, #0
    262c:	d102      	bne.n	2634 <chip_sleep+0x4c>
	if(reg & NBIT0)
    262e:	9901      	ldr	r1, [sp, #4]
    2630:	07cb      	lsls	r3, r1, #31
    2632:	d401      	bmi.n	2638 <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    2634:	b003      	add	sp, #12
    2636:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    2638:	2301      	movs	r3, #1
    263a:	4399      	bics	r1, r3
    263c:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    263e:	300b      	adds	r0, #11
    2640:	4b02      	ldr	r3, [pc, #8]	; (264c <chip_sleep+0x64>)
    2642:	4798      	blx	r3
    2644:	e7f6      	b.n	2634 <chip_sleep+0x4c>
    2646:	46c0      	nop			; (mov r8, r8)
    2648:	00002969 	.word	0x00002969
    264c:	00002975 	.word	0x00002975

00002650 <chip_wake>:
sint8 chip_wake(void)
{
    2650:	b5f0      	push	{r4, r5, r6, r7, lr}
    2652:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    2654:	2300      	movs	r3, #0
    2656:	9301      	str	r3, [sp, #4]
    2658:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    265a:	a901      	add	r1, sp, #4
    265c:	200b      	movs	r0, #11
    265e:	4b28      	ldr	r3, [pc, #160]	; (2700 <chip_wake+0xb0>)
    2660:	4798      	blx	r3
    2662:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2664:	d130      	bne.n	26c8 <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    2666:	9901      	ldr	r1, [sp, #4]
    2668:	07cb      	lsls	r3, r1, #31
    266a:	d406      	bmi.n	267a <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    266c:	2301      	movs	r3, #1
    266e:	4319      	orrs	r1, r3
    2670:	200b      	movs	r0, #11
    2672:	4b24      	ldr	r3, [pc, #144]	; (2704 <chip_wake+0xb4>)
    2674:	4798      	blx	r3
    2676:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2678:	d126      	bne.n	26c8 <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    267a:	a901      	add	r1, sp, #4
    267c:	2001      	movs	r0, #1
    267e:	4b20      	ldr	r3, [pc, #128]	; (2700 <chip_wake+0xb0>)
    2680:	4798      	blx	r3
    2682:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2684:	d120      	bne.n	26c8 <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    2686:	9901      	ldr	r1, [sp, #4]
    2688:	078b      	lsls	r3, r1, #30
    268a:	d520      	bpl.n	26ce <chip_wake+0x7e>
{
    268c:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    268e:	4f1c      	ldr	r7, [pc, #112]	; (2700 <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    2690:	4e1d      	ldr	r6, [pc, #116]	; (2708 <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    2692:	4669      	mov	r1, sp
    2694:	200f      	movs	r0, #15
    2696:	47b8      	blx	r7
    2698:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    269a:	d120      	bne.n	26de <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    269c:	9b00      	ldr	r3, [sp, #0]
    269e:	075b      	lsls	r3, r3, #29
    26a0:	d42b      	bmi.n	26fa <chip_wake+0xaa>
		nm_bsp_sleep(2);
    26a2:	2002      	movs	r0, #2
    26a4:	47b0      	blx	r6
    26a6:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    26a8:	2d00      	cmp	r5, #0
    26aa:	d1f2      	bne.n	2692 <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    26ac:	22af      	movs	r2, #175	; 0xaf
    26ae:	0052      	lsls	r2, r2, #1
    26b0:	4916      	ldr	r1, [pc, #88]	; (270c <chip_wake+0xbc>)
    26b2:	4817      	ldr	r0, [pc, #92]	; (2710 <chip_wake+0xc0>)
    26b4:	4b17      	ldr	r3, [pc, #92]	; (2714 <chip_wake+0xc4>)
    26b6:	4798      	blx	r3
    26b8:	4817      	ldr	r0, [pc, #92]	; (2718 <chip_wake+0xc8>)
    26ba:	4b18      	ldr	r3, [pc, #96]	; (271c <chip_wake+0xcc>)
    26bc:	4798      	blx	r3
    26be:	200d      	movs	r0, #13
    26c0:	4b17      	ldr	r3, [pc, #92]	; (2720 <chip_wake+0xd0>)
    26c2:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    26c4:	2404      	movs	r4, #4
    26c6:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    26c8:	0020      	movs	r0, r4
    26ca:	b003      	add	sp, #12
    26cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    26ce:	2302      	movs	r3, #2
    26d0:	4319      	orrs	r1, r3
    26d2:	2001      	movs	r0, #1
    26d4:	4b0b      	ldr	r3, [pc, #44]	; (2704 <chip_wake+0xb4>)
    26d6:	4798      	blx	r3
    26d8:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    26da:	d0d7      	beq.n	268c <chip_wake+0x3c>
    26dc:	e7f4      	b.n	26c8 <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    26de:	22aa      	movs	r2, #170	; 0xaa
    26e0:	0052      	lsls	r2, r2, #1
    26e2:	490a      	ldr	r1, [pc, #40]	; (270c <chip_wake+0xbc>)
    26e4:	480a      	ldr	r0, [pc, #40]	; (2710 <chip_wake+0xc0>)
    26e6:	4d0b      	ldr	r5, [pc, #44]	; (2714 <chip_wake+0xc4>)
    26e8:	47a8      	blx	r5
    26ea:	9a00      	ldr	r2, [sp, #0]
    26ec:	0021      	movs	r1, r4
    26ee:	480d      	ldr	r0, [pc, #52]	; (2724 <chip_wake+0xd4>)
    26f0:	47a8      	blx	r5
    26f2:	200d      	movs	r0, #13
    26f4:	4b0a      	ldr	r3, [pc, #40]	; (2720 <chip_wake+0xd0>)
    26f6:	4798      	blx	r3
			goto _WAKE_EXIT;
    26f8:	e7e6      	b.n	26c8 <chip_wake+0x78>
	nm_bus_reset();
    26fa:	4b0b      	ldr	r3, [pc, #44]	; (2728 <chip_wake+0xd8>)
    26fc:	4798      	blx	r3
    26fe:	e7e3      	b.n	26c8 <chip_wake+0x78>
    2700:	00002969 	.word	0x00002969
    2704:	00002975 	.word	0x00002975
    2708:	0000111d 	.word	0x0000111d
    270c:	0000b560 	.word	0x0000b560
    2710:	0000b020 	.word	0x0000b020
    2714:	00009b31 	.word	0x00009b31
    2718:	0000b5a8 	.word	0x0000b5a8
    271c:	00009c4d 	.word	0x00009c4d
    2720:	00009b65 	.word	0x00009b65
    2724:	0000b590 	.word	0x0000b590
    2728:	00002951 	.word	0x00002951

0000272c <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    272c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    272e:	0007      	movs	r7, r0
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    2730:	4d2d      	ldr	r5, [pc, #180]	; (27e8 <wait_for_bootrom+0xbc>)
    2732:	4c2e      	ldr	r4, [pc, #184]	; (27ec <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    2734:	4e2e      	ldr	r6, [pc, #184]	; (27f0 <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    2736:	0028      	movs	r0, r5
    2738:	47a0      	blx	r4
		if (reg & 0x80000000) {
    273a:	2800      	cmp	r0, #0
    273c:	db02      	blt.n	2744 <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    273e:	2001      	movs	r0, #1
    2740:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    2742:	e7f8      	b.n	2736 <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    2744:	482b      	ldr	r0, [pc, #172]	; (27f4 <wait_for_bootrom+0xc8>)
    2746:	4b29      	ldr	r3, [pc, #164]	; (27ec <wait_for_bootrom+0xc0>)
    2748:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    274a:	07c3      	lsls	r3, r0, #31
    274c:	d409      	bmi.n	2762 <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    274e:	4e28      	ldr	r6, [pc, #160]	; (27f0 <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
    2750:	4c29      	ldr	r4, [pc, #164]	; (27f8 <wait_for_bootrom+0xcc>)
    2752:	4d26      	ldr	r5, [pc, #152]	; (27ec <wait_for_bootrom+0xc0>)
			nm_bsp_sleep(1);
    2754:	2001      	movs	r0, #1
    2756:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    2758:	0020      	movs	r0, r4
    275a:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    275c:	4b27      	ldr	r3, [pc, #156]	; (27fc <wait_for_bootrom+0xd0>)
    275e:	4298      	cmp	r0, r3
    2760:	d1f8      	bne.n	2754 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    2762:	2f02      	cmp	r7, #2
    2764:	d021      	beq.n	27aa <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    2766:	2f03      	cmp	r7, #3
    2768:	d029      	beq.n	27be <wait_for_bootrom+0x92>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    276a:	2f04      	cmp	r7, #4
    276c:	d030      	beq.n	27d0 <wait_for_bootrom+0xa4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    276e:	4924      	ldr	r1, [pc, #144]	; (2800 <wait_for_bootrom+0xd4>)
    2770:	4824      	ldr	r0, [pc, #144]	; (2804 <wait_for_bootrom+0xd8>)
    2772:	4b25      	ldr	r3, [pc, #148]	; (2808 <wait_for_bootrom+0xdc>)
    2774:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    2776:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    2778:	4b24      	ldr	r3, [pc, #144]	; (280c <wait_for_bootrom+0xe0>)
    277a:	4798      	blx	r3
    277c:	0500      	lsls	r0, r0, #20
    277e:	0d00      	lsrs	r0, r0, #20
    2780:	4b23      	ldr	r3, [pc, #140]	; (2810 <wait_for_bootrom+0xe4>)
    2782:	4298      	cmp	r0, r3
    2784:	d82a      	bhi.n	27dc <wait_for_bootrom+0xb0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    2786:	0020      	movs	r0, r4
    2788:	4b22      	ldr	r3, [pc, #136]	; (2814 <wait_for_bootrom+0xe8>)
    278a:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    278c:	4822      	ldr	r0, [pc, #136]	; (2818 <wait_for_bootrom+0xec>)
    278e:	4c23      	ldr	r4, [pc, #140]	; (281c <wait_for_bootrom+0xf0>)
    2790:	47a0      	blx	r4
    2792:	491b      	ldr	r1, [pc, #108]	; (2800 <wait_for_bootrom+0xd4>)
    2794:	4822      	ldr	r0, [pc, #136]	; (2820 <wait_for_bootrom+0xf4>)
    2796:	47a0      	blx	r4
    2798:	200d      	movs	r0, #13
    279a:	4b22      	ldr	r3, [pc, #136]	; (2824 <wait_for_bootrom+0xf8>)
    279c:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    279e:	4922      	ldr	r1, [pc, #136]	; (2828 <wait_for_bootrom+0xfc>)
    27a0:	4815      	ldr	r0, [pc, #84]	; (27f8 <wait_for_bootrom+0xcc>)
    27a2:	4b19      	ldr	r3, [pc, #100]	; (2808 <wait_for_bootrom+0xdc>)
    27a4:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    27a6:	2000      	movs	r0, #0
    27a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    27aa:	4920      	ldr	r1, [pc, #128]	; (282c <wait_for_bootrom+0x100>)
    27ac:	4820      	ldr	r0, [pc, #128]	; (2830 <wait_for_bootrom+0x104>)
    27ae:	4c16      	ldr	r4, [pc, #88]	; (2808 <wait_for_bootrom+0xdc>)
    27b0:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    27b2:	2180      	movs	r1, #128	; 0x80
    27b4:	0349      	lsls	r1, r1, #13
    27b6:	4813      	ldr	r0, [pc, #76]	; (2804 <wait_for_bootrom+0xd8>)
    27b8:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    27ba:	2400      	movs	r4, #0
    27bc:	e7dc      	b.n	2778 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    27be:	491b      	ldr	r1, [pc, #108]	; (282c <wait_for_bootrom+0x100>)
    27c0:	481b      	ldr	r0, [pc, #108]	; (2830 <wait_for_bootrom+0x104>)
    27c2:	4c11      	ldr	r4, [pc, #68]	; (2808 <wait_for_bootrom+0xdc>)
    27c4:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    27c6:	2100      	movs	r1, #0
    27c8:	480e      	ldr	r0, [pc, #56]	; (2804 <wait_for_bootrom+0xd8>)
    27ca:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    27cc:	2400      	movs	r4, #0
    27ce:	e7d3      	b.n	2778 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    27d0:	490b      	ldr	r1, [pc, #44]	; (2800 <wait_for_bootrom+0xd4>)
    27d2:	480c      	ldr	r0, [pc, #48]	; (2804 <wait_for_bootrom+0xd8>)
    27d4:	4b0c      	ldr	r3, [pc, #48]	; (2808 <wait_for_bootrom+0xdc>)
    27d6:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    27d8:	2480      	movs	r4, #128	; 0x80
    27da:	e7cd      	b.n	2778 <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    27dc:	2002      	movs	r0, #2
    27de:	4320      	orrs	r0, r4
    27e0:	4b0c      	ldr	r3, [pc, #48]	; (2814 <wait_for_bootrom+0xe8>)
    27e2:	4798      	blx	r3
    27e4:	e7d2      	b.n	278c <wait_for_bootrom+0x60>
    27e6:	46c0      	nop			; (mov r8, r8)
    27e8:	00001014 	.word	0x00001014
    27ec:	0000295d 	.word	0x0000295d
    27f0:	0000111d 	.word	0x0000111d
    27f4:	000207bc 	.word	0x000207bc
    27f8:	000c000c 	.word	0x000c000c
    27fc:	10add09e 	.word	0x10add09e
    2800:	13521352 	.word	0x13521352
    2804:	0000108c 	.word	0x0000108c
    2808:	00002975 	.word	0x00002975
    280c:	00002519 	.word	0x00002519
    2810:	0000039f 	.word	0x0000039f
    2814:	00002485 	.word	0x00002485
    2818:	0000b350 	.word	0x0000b350
    281c:	00009b31 	.word	0x00009b31
    2820:	0000b5c4 	.word	0x0000b5c4
    2824:	00009b65 	.word	0x00009b65
    2828:	ef522f61 	.word	0xef522f61
    282c:	3c1cd57d 	.word	0x3c1cd57d
    2830:	000207ac 	.word	0x000207ac

00002834 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    2834:	b570      	push	{r4, r5, r6, lr}
    2836:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    2838:	4b15      	ldr	r3, [pc, #84]	; (2890 <wait_for_firmware_start+0x5c>)
    283a:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    283c:	4b15      	ldr	r3, [pc, #84]	; (2894 <wait_for_firmware_start+0x60>)
    283e:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    2840:	3802      	subs	r0, #2
    2842:	2801      	cmp	r0, #1
    2844:	d911      	bls.n	286a <wait_for_firmware_start+0x36>
{
    2846:	2401      	movs	r4, #1
    2848:	4264      	negs	r4, r4
    284a:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    284c:	4e12      	ldr	r6, [pc, #72]	; (2898 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    284e:	4d13      	ldr	r5, [pc, #76]	; (289c <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    2850:	9b00      	ldr	r3, [sp, #0]
    2852:	4298      	cmp	r0, r3
    2854:	d00e      	beq.n	2874 <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    2856:	2002      	movs	r0, #2
    2858:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    285a:	9801      	ldr	r0, [sp, #4]
    285c:	47a8      	blx	r5
    285e:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    2860:	2c00      	cmp	r4, #0
    2862:	d1f5      	bne.n	2850 <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    2864:	2005      	movs	r0, #5
    2866:	4240      	negs	r0, r0
    2868:	e009      	b.n	287e <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    286a:	4b0d      	ldr	r3, [pc, #52]	; (28a0 <wait_for_firmware_start+0x6c>)
    286c:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    286e:	4b0d      	ldr	r3, [pc, #52]	; (28a4 <wait_for_firmware_start+0x70>)
    2870:	9300      	str	r3, [sp, #0]
    2872:	e7e8      	b.n	2846 <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    2874:	9a00      	ldr	r2, [sp, #0]
    2876:	4b07      	ldr	r3, [pc, #28]	; (2894 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    2878:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    287a:	429a      	cmp	r2, r3
    287c:	d001      	beq.n	2882 <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    287e:	b002      	add	sp, #8
    2880:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    2882:	2100      	movs	r1, #0
    2884:	4802      	ldr	r0, [pc, #8]	; (2890 <wait_for_firmware_start+0x5c>)
    2886:	4b08      	ldr	r3, [pc, #32]	; (28a8 <wait_for_firmware_start+0x74>)
    2888:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    288a:	2000      	movs	r0, #0
    288c:	e7f7      	b.n	287e <wait_for_firmware_start+0x4a>
    288e:	46c0      	nop			; (mov r8, r8)
    2890:	0000108c 	.word	0x0000108c
    2894:	02532636 	.word	0x02532636
    2898:	0000111d 	.word	0x0000111d
    289c:	0000295d 	.word	0x0000295d
    28a0:	000207ac 	.word	0x000207ac
    28a4:	d75dc1c3 	.word	0xd75dc1c3
    28a8:	00002975 	.word	0x00002975

000028ac <chip_deinit>:

sint8 chip_deinit(void)
{
    28ac:	b510      	push	{r4, lr}
    28ae:	b082      	sub	sp, #8
	uint32 reg = 0;
    28b0:	2300      	movs	r3, #0
    28b2:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    28b4:	a901      	add	r1, sp, #4
    28b6:	20a0      	movs	r0, #160	; 0xa0
    28b8:	0140      	lsls	r0, r0, #5
    28ba:	4b14      	ldr	r3, [pc, #80]	; (290c <chip_deinit+0x60>)
    28bc:	4798      	blx	r3
    28be:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    28c0:	d115      	bne.n	28ee <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    28c2:	4913      	ldr	r1, [pc, #76]	; (2910 <chip_deinit+0x64>)
    28c4:	9b01      	ldr	r3, [sp, #4]
    28c6:	4019      	ands	r1, r3
    28c8:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    28ca:	20a0      	movs	r0, #160	; 0xa0
    28cc:	0140      	lsls	r0, r0, #5
    28ce:	4b11      	ldr	r3, [pc, #68]	; (2914 <chip_deinit+0x68>)
    28d0:	4798      	blx	r3
    28d2:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    28d4:	d016      	beq.n	2904 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    28d6:	4a10      	ldr	r2, [pc, #64]	; (2918 <chip_deinit+0x6c>)
    28d8:	4910      	ldr	r1, [pc, #64]	; (291c <chip_deinit+0x70>)
    28da:	4811      	ldr	r0, [pc, #68]	; (2920 <chip_deinit+0x74>)
    28dc:	4b11      	ldr	r3, [pc, #68]	; (2924 <chip_deinit+0x78>)
    28de:	4798      	blx	r3
    28e0:	4811      	ldr	r0, [pc, #68]	; (2928 <chip_deinit+0x7c>)
    28e2:	4b12      	ldr	r3, [pc, #72]	; (292c <chip_deinit+0x80>)
    28e4:	4798      	blx	r3
    28e6:	200d      	movs	r0, #13
    28e8:	4b11      	ldr	r3, [pc, #68]	; (2930 <chip_deinit+0x84>)
    28ea:	4798      	blx	r3
		goto ERR1;
    28ec:	e00a      	b.n	2904 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    28ee:	4a11      	ldr	r2, [pc, #68]	; (2934 <chip_deinit+0x88>)
    28f0:	490a      	ldr	r1, [pc, #40]	; (291c <chip_deinit+0x70>)
    28f2:	480b      	ldr	r0, [pc, #44]	; (2920 <chip_deinit+0x74>)
    28f4:	4b0b      	ldr	r3, [pc, #44]	; (2924 <chip_deinit+0x78>)
    28f6:	4798      	blx	r3
    28f8:	480b      	ldr	r0, [pc, #44]	; (2928 <chip_deinit+0x7c>)
    28fa:	4b0c      	ldr	r3, [pc, #48]	; (292c <chip_deinit+0x80>)
    28fc:	4798      	blx	r3
    28fe:	200d      	movs	r0, #13
    2900:	4b0b      	ldr	r3, [pc, #44]	; (2930 <chip_deinit+0x84>)
    2902:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    2904:	0020      	movs	r0, r4
    2906:	b002      	add	sp, #8
    2908:	bd10      	pop	{r4, pc}
    290a:	46c0      	nop			; (mov r8, r8)
    290c:	00002969 	.word	0x00002969
    2910:	fffffbff 	.word	0xfffffbff
    2914:	00002975 	.word	0x00002975
    2918:	0000020b 	.word	0x0000020b
    291c:	0000b56c 	.word	0x0000b56c
    2920:	0000b020 	.word	0x0000b020
    2924:	00009b31 	.word	0x00009b31
    2928:	0000b578 	.word	0x0000b578
    292c:	00009c4d 	.word	0x00009c4d
    2930:	00009b65 	.word	0x00009b65
    2934:	00000205 	.word	0x00000205

00002938 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    2938:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    293a:	4b01      	ldr	r3, [pc, #4]	; (2940 <nm_bus_iface_init+0x8>)
    293c:	4798      	blx	r3
	return ret;
}
    293e:	bd10      	pop	{r4, pc}
    2940:	00001251 	.word	0x00001251

00002944 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    2944:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    2946:	4b01      	ldr	r3, [pc, #4]	; (294c <nm_bus_iface_deinit+0x8>)
    2948:	4798      	blx	r3

	return ret;
}
    294a:	bd10      	pop	{r4, pc}
    294c:	000014a1 	.word	0x000014a1

00002950 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    2950:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    2952:	4b01      	ldr	r3, [pc, #4]	; (2958 <nm_bus_reset+0x8>)
    2954:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    2956:	bd10      	pop	{r4, pc}
    2958:	00003301 	.word	0x00003301

0000295c <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    295c:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    295e:	4b01      	ldr	r3, [pc, #4]	; (2964 <nm_read_reg+0x8>)
    2960:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    2962:	bd10      	pop	{r4, pc}
    2964:	00003339 	.word	0x00003339

00002968 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    2968:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    296a:	4b01      	ldr	r3, [pc, #4]	; (2970 <nm_read_reg_with_ret+0x8>)
    296c:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    296e:	bd10      	pop	{r4, pc}
    2970:	0000334d 	.word	0x0000334d

00002974 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    2974:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    2976:	4b01      	ldr	r3, [pc, #4]	; (297c <nm_write_reg+0x8>)
    2978:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    297a:	bd10      	pop	{r4, pc}
    297c:	00003365 	.word	0x00003365

00002980 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    2980:	b5f0      	push	{r4, r5, r6, r7, lr}
    2982:	46d6      	mov	lr, sl
    2984:	464f      	mov	r7, r9
    2986:	4646      	mov	r6, r8
    2988:	b5c0      	push	{r6, r7, lr}
    298a:	b082      	sub	sp, #8
    298c:	4680      	mov	r8, r0
    298e:	4689      	mov	r9, r1
    2990:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    2992:	4b13      	ldr	r3, [pc, #76]	; (29e0 <nm_read_block+0x60>)
    2994:	881f      	ldrh	r7, [r3, #0]
    2996:	3f08      	subs	r7, #8
    2998:	b2bb      	uxth	r3, r7
    299a:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    299c:	001e      	movs	r6, r3
    299e:	0004      	movs	r4, r0
    29a0:	429a      	cmp	r2, r3
    29a2:	d91a      	bls.n	29da <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    29a4:	4b0f      	ldr	r3, [pc, #60]	; (29e4 <nm_read_block+0x64>)
    29a6:	469a      	mov	sl, r3
    29a8:	1a37      	subs	r7, r6, r0
    29aa:	4643      	mov	r3, r8
    29ac:	1ae1      	subs	r1, r4, r3
    29ae:	4449      	add	r1, r9
    29b0:	9a01      	ldr	r2, [sp, #4]
    29b2:	0020      	movs	r0, r4
    29b4:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    29b6:	2800      	cmp	r0, #0
    29b8:	d109      	bne.n	29ce <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    29ba:	1bad      	subs	r5, r5, r6
    29bc:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    29be:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    29c0:	42b5      	cmp	r5, r6
    29c2:	d8f2      	bhi.n	29aa <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    29c4:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    29c6:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    29c8:	0020      	movs	r0, r4
    29ca:	4b06      	ldr	r3, [pc, #24]	; (29e4 <nm_read_block+0x64>)
    29cc:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    29ce:	b002      	add	sp, #8
    29d0:	bc1c      	pop	{r2, r3, r4}
    29d2:	4690      	mov	r8, r2
    29d4:	4699      	mov	r9, r3
    29d6:	46a2      	mov	sl, r4
    29d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    29da:	2100      	movs	r1, #0
    29dc:	e7f2      	b.n	29c4 <nm_read_block+0x44>
    29de:	46c0      	nop			; (mov r8, r8)
    29e0:	20000008 	.word	0x20000008
    29e4:	000034a9 	.word	0x000034a9

000029e8 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    29e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    29ea:	46d6      	mov	lr, sl
    29ec:	464f      	mov	r7, r9
    29ee:	4646      	mov	r6, r8
    29f0:	b5c0      	push	{r6, r7, lr}
    29f2:	b082      	sub	sp, #8
    29f4:	4680      	mov	r8, r0
    29f6:	4689      	mov	r9, r1
    29f8:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    29fa:	4b13      	ldr	r3, [pc, #76]	; (2a48 <nm_write_block+0x60>)
    29fc:	881f      	ldrh	r7, [r3, #0]
    29fe:	3f08      	subs	r7, #8
    2a00:	b2bb      	uxth	r3, r7
    2a02:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2a04:	001e      	movs	r6, r3
    2a06:	0004      	movs	r4, r0
    2a08:	429a      	cmp	r2, r3
    2a0a:	d91a      	bls.n	2a42 <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2a0c:	4b0f      	ldr	r3, [pc, #60]	; (2a4c <nm_write_block+0x64>)
    2a0e:	469a      	mov	sl, r3
    2a10:	1a37      	subs	r7, r6, r0
    2a12:	4643      	mov	r3, r8
    2a14:	1ae1      	subs	r1, r4, r3
    2a16:	4449      	add	r1, r9
    2a18:	9a01      	ldr	r2, [sp, #4]
    2a1a:	0020      	movs	r0, r4
    2a1c:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    2a1e:	2800      	cmp	r0, #0
    2a20:	d109      	bne.n	2a36 <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    2a22:	1bad      	subs	r5, r5, r6
    2a24:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    2a26:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    2a28:	42b5      	cmp	r5, r6
    2a2a:	d8f2      	bhi.n	2a12 <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2a2c:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    2a2e:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2a30:	0020      	movs	r0, r4
    2a32:	4b06      	ldr	r3, [pc, #24]	; (2a4c <nm_write_block+0x64>)
    2a34:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    2a36:	b002      	add	sp, #8
    2a38:	bc1c      	pop	{r2, r3, r4}
    2a3a:	4690      	mov	r8, r2
    2a3c:	4699      	mov	r9, r3
    2a3e:	46a2      	mov	sl, r4
    2a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    2a42:	2100      	movs	r1, #0
    2a44:	e7f2      	b.n	2a2c <nm_write_block+0x44>
    2a46:	46c0      	nop			; (mov r8, r8)
    2a48:	20000008 	.word	0x20000008
    2a4c:	00003605 	.word	0x00003605

00002a50 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    2a50:	b570      	push	{r4, r5, r6, lr}
    2a52:	b084      	sub	sp, #16
    2a54:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    2a56:	2300      	movs	r3, #0
    2a58:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    2a5a:	2208      	movs	r2, #8
    2a5c:	2100      	movs	r1, #0
    2a5e:	a801      	add	r0, sp, #4
    2a60:	4b2d      	ldr	r3, [pc, #180]	; (2b18 <nm_get_firmware_full_info+0xc8>)
    2a62:	4798      	blx	r3
	if (pstrRev != NULL)
    2a64:	2c00      	cmp	r4, #0
    2a66:	d044      	beq.n	2af2 <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    2a68:	2228      	movs	r2, #40	; 0x28
    2a6a:	2100      	movs	r1, #0
    2a6c:	0020      	movs	r0, r4
    2a6e:	4b2b      	ldr	r3, [pc, #172]	; (2b1c <nm_get_firmware_full_info+0xcc>)
    2a70:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    2a72:	a903      	add	r1, sp, #12
    2a74:	482a      	ldr	r0, [pc, #168]	; (2b20 <nm_get_firmware_full_info+0xd0>)
    2a76:	4b2b      	ldr	r3, [pc, #172]	; (2b24 <nm_get_firmware_full_info+0xd4>)
    2a78:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    2a7a:	2800      	cmp	r0, #0
    2a7c:	d13a      	bne.n	2af4 <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    2a7e:	9b03      	ldr	r3, [sp, #12]
    2a80:	2b00      	cmp	r3, #0
    2a82:	d039      	beq.n	2af8 <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    2a84:	20c0      	movs	r0, #192	; 0xc0
    2a86:	0280      	lsls	r0, r0, #10
    2a88:	4318      	orrs	r0, r3
    2a8a:	2208      	movs	r2, #8
    2a8c:	a901      	add	r1, sp, #4
    2a8e:	4b26      	ldr	r3, [pc, #152]	; (2b28 <nm_get_firmware_full_info+0xd8>)
    2a90:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    2a92:	2800      	cmp	r0, #0
    2a94:	d12e      	bne.n	2af4 <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    2a96:	9b02      	ldr	r3, [sp, #8]
    2a98:	0418      	lsls	r0, r3, #16
    2a9a:	0c00      	lsrs	r0, r0, #16
    2a9c:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    2a9e:	d02e      	beq.n	2afe <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    2aa0:	23c0      	movs	r3, #192	; 0xc0
    2aa2:	029b      	lsls	r3, r3, #10
    2aa4:	4318      	orrs	r0, r3
    2aa6:	2228      	movs	r2, #40	; 0x28
    2aa8:	0021      	movs	r1, r4
    2aaa:	4b1f      	ldr	r3, [pc, #124]	; (2b28 <nm_get_firmware_full_info+0xd8>)
    2aac:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    2aae:	2800      	cmp	r0, #0
    2ab0:	d120      	bne.n	2af4 <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    2ab2:	7921      	ldrb	r1, [r4, #4]
    2ab4:	0209      	lsls	r1, r1, #8
    2ab6:	79a2      	ldrb	r2, [r4, #6]
    2ab8:	230f      	movs	r3, #15
    2aba:	401a      	ands	r2, r3
    2abc:	430a      	orrs	r2, r1
    2abe:	7961      	ldrb	r1, [r4, #5]
    2ac0:	0109      	lsls	r1, r1, #4
    2ac2:	25ff      	movs	r5, #255	; 0xff
    2ac4:	4029      	ands	r1, r5
    2ac6:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    2ac8:	79e1      	ldrb	r1, [r4, #7]
    2aca:	0209      	lsls	r1, r1, #8
    2acc:	7a66      	ldrb	r6, [r4, #9]
    2ace:	4033      	ands	r3, r6
    2ad0:	430b      	orrs	r3, r1
    2ad2:	7a21      	ldrb	r1, [r4, #8]
    2ad4:	0109      	lsls	r1, r1, #4
    2ad6:	400d      	ands	r5, r1
    2ad8:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    2ada:	2a00      	cmp	r2, #0
    2adc:	d012      	beq.n	2b04 <nm_get_firmware_full_info+0xb4>
    2ade:	2b00      	cmp	r3, #0
    2ae0:	d013      	beq.n	2b0a <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    2ae2:	4912      	ldr	r1, [pc, #72]	; (2b2c <nm_get_firmware_full_info+0xdc>)
    2ae4:	428b      	cmp	r3, r1
    2ae6:	d813      	bhi.n	2b10 <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    2ae8:	4b11      	ldr	r3, [pc, #68]	; (2b30 <nm_get_firmware_full_info+0xe0>)
    2aea:	429a      	cmp	r2, r3
    2aec:	d802      	bhi.n	2af4 <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    2aee:	380d      	subs	r0, #13
    2af0:	e000      	b.n	2af4 <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    2af2:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    2af4:	b004      	add	sp, #16
    2af6:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    2af8:	200c      	movs	r0, #12
    2afa:	4240      	negs	r0, r0
    2afc:	e7fa      	b.n	2af4 <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    2afe:	200c      	movs	r0, #12
    2b00:	4240      	negs	r0, r0
    2b02:	e7f7      	b.n	2af4 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    2b04:	200c      	movs	r0, #12
    2b06:	4240      	negs	r0, r0
    2b08:	e7f4      	b.n	2af4 <nm_get_firmware_full_info+0xa4>
    2b0a:	200c      	movs	r0, #12
    2b0c:	4240      	negs	r0, r0
    2b0e:	e7f1      	b.n	2af4 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    2b10:	200d      	movs	r0, #13
    2b12:	4240      	negs	r0, r0
    2b14:	e7ee      	b.n	2af4 <nm_get_firmware_full_info+0xa4>
    2b16:	46c0      	nop			; (mov r8, r8)
    2b18:	000099cf 	.word	0x000099cf
    2b1c:	00001521 	.word	0x00001521
    2b20:	000c0008 	.word	0x000c0008
    2b24:	00002969 	.word	0x00002969
    2b28:	00002981 	.word	0x00002981
    2b2c:	00001352 	.word	0x00001352
    2b30:	00001351 	.word	0x00001351

00002b34 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    2b34:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    2b36:	2800      	cmp	r0, #0
    2b38:	d037      	beq.n	2baa <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
    2b3a:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    2b3c:	1e6b      	subs	r3, r5, #1
    2b3e:	2b03      	cmp	r3, #3
    2b40:	d900      	bls.n	2b44 <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    2b42:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    2b44:	2000      	movs	r0, #0
    2b46:	4b20      	ldr	r3, [pc, #128]	; (2bc8 <nm_drv_init+0x94>)
    2b48:	4798      	blx	r3
    2b4a:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2b4c:	d12f      	bne.n	2bae <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    2b4e:	481f      	ldr	r0, [pc, #124]	; (2bcc <nm_drv_init+0x98>)
    2b50:	4c1f      	ldr	r4, [pc, #124]	; (2bd0 <nm_drv_init+0x9c>)
    2b52:	47a0      	blx	r4
    2b54:	4b1f      	ldr	r3, [pc, #124]	; (2bd4 <nm_drv_init+0xa0>)
    2b56:	4798      	blx	r3
    2b58:	0001      	movs	r1, r0
    2b5a:	481f      	ldr	r0, [pc, #124]	; (2bd8 <nm_drv_init+0xa4>)
    2b5c:	47a0      	blx	r4
    2b5e:	200d      	movs	r0, #13
    2b60:	4b1e      	ldr	r3, [pc, #120]	; (2bdc <nm_drv_init+0xa8>)
    2b62:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    2b64:	4b1e      	ldr	r3, [pc, #120]	; (2be0 <nm_drv_init+0xac>)
    2b66:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    2b68:	0028      	movs	r0, r5
    2b6a:	4b1e      	ldr	r3, [pc, #120]	; (2be4 <nm_drv_init+0xb0>)
    2b6c:	4798      	blx	r3
    2b6e:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2b70:	d117      	bne.n	2ba2 <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    2b72:	0028      	movs	r0, r5
    2b74:	4b1c      	ldr	r3, [pc, #112]	; (2be8 <nm_drv_init+0xb4>)
    2b76:	4798      	blx	r3
    2b78:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2b7a:	d112      	bne.n	2ba2 <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    2b7c:	3d02      	subs	r5, #2
    2b7e:	2d01      	cmp	r5, #1
    2b80:	d911      	bls.n	2ba6 <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    2b82:	4b1a      	ldr	r3, [pc, #104]	; (2bec <nm_drv_init+0xb8>)
    2b84:	4798      	blx	r3
    2b86:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2b88:	d00d      	beq.n	2ba6 <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
    2b8a:	2256      	movs	r2, #86	; 0x56
    2b8c:	32ff      	adds	r2, #255	; 0xff
    2b8e:	4918      	ldr	r1, [pc, #96]	; (2bf0 <nm_drv_init+0xbc>)
    2b90:	4818      	ldr	r0, [pc, #96]	; (2bf4 <nm_drv_init+0xc0>)
    2b92:	4b0f      	ldr	r3, [pc, #60]	; (2bd0 <nm_drv_init+0x9c>)
    2b94:	4798      	blx	r3
    2b96:	4818      	ldr	r0, [pc, #96]	; (2bf8 <nm_drv_init+0xc4>)
    2b98:	4b18      	ldr	r3, [pc, #96]	; (2bfc <nm_drv_init+0xc8>)
    2b9a:	4798      	blx	r3
    2b9c:	200d      	movs	r0, #13
    2b9e:	4b0f      	ldr	r3, [pc, #60]	; (2bdc <nm_drv_init+0xa8>)
    2ba0:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    2ba2:	4b17      	ldr	r3, [pc, #92]	; (2c00 <nm_drv_init+0xcc>)
    2ba4:	4798      	blx	r3
ERR1:
	return ret;
}
    2ba6:	0020      	movs	r0, r4
    2ba8:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    2baa:	2501      	movs	r5, #1
    2bac:	e7ca      	b.n	2b44 <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    2bae:	2228      	movs	r2, #40	; 0x28
    2bb0:	32ff      	adds	r2, #255	; 0xff
    2bb2:	490f      	ldr	r1, [pc, #60]	; (2bf0 <nm_drv_init+0xbc>)
    2bb4:	480f      	ldr	r0, [pc, #60]	; (2bf4 <nm_drv_init+0xc0>)
    2bb6:	4b06      	ldr	r3, [pc, #24]	; (2bd0 <nm_drv_init+0x9c>)
    2bb8:	4798      	blx	r3
    2bba:	4812      	ldr	r0, [pc, #72]	; (2c04 <nm_drv_init+0xd0>)
    2bbc:	4b0f      	ldr	r3, [pc, #60]	; (2bfc <nm_drv_init+0xc8>)
    2bbe:	4798      	blx	r3
    2bc0:	200d      	movs	r0, #13
    2bc2:	4b06      	ldr	r3, [pc, #24]	; (2bdc <nm_drv_init+0xa8>)
    2bc4:	4798      	blx	r3
		goto ERR1;
    2bc6:	e7ee      	b.n	2ba6 <nm_drv_init+0x72>
    2bc8:	00002939 	.word	0x00002939
    2bcc:	0000b350 	.word	0x0000b350
    2bd0:	00009b31 	.word	0x00009b31
    2bd4:	00002519 	.word	0x00002519
    2bd8:	0000b694 	.word	0x0000b694
    2bdc:	00009b65 	.word	0x00009b65
    2be0:	0000337d 	.word	0x0000337d
    2be4:	0000272d 	.word	0x0000272d
    2be8:	00002835 	.word	0x00002835
    2bec:	000024bd 	.word	0x000024bd
    2bf0:	0000b5dc 	.word	0x0000b5dc
    2bf4:	0000b020 	.word	0x0000b020
    2bf8:	0000b658 	.word	0x0000b658
    2bfc:	00009c4d 	.word	0x00009c4d
    2c00:	00002945 	.word	0x00002945
    2c04:	0000b678 	.word	0x0000b678

00002c08 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    2c08:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    2c0a:	4b1c      	ldr	r3, [pc, #112]	; (2c7c <nm_drv_deinit+0x74>)
    2c0c:	4798      	blx	r3
    2c0e:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2c10:	d10b      	bne.n	2c2a <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    2c12:	2000      	movs	r0, #0
    2c14:	4b1a      	ldr	r3, [pc, #104]	; (2c80 <nm_drv_deinit+0x78>)
    2c16:	4798      	blx	r3
    2c18:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2c1a:	d114      	bne.n	2c46 <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    2c1c:	4b19      	ldr	r3, [pc, #100]	; (2c84 <nm_drv_deinit+0x7c>)
    2c1e:	4798      	blx	r3
    2c20:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2c22:	d11d      	bne.n	2c60 <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    2c24:	4b18      	ldr	r3, [pc, #96]	; (2c88 <nm_drv_deinit+0x80>)
    2c26:	4798      	blx	r3
    2c28:	e00b      	b.n	2c42 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    2c2a:	22b6      	movs	r2, #182	; 0xb6
    2c2c:	0052      	lsls	r2, r2, #1
    2c2e:	4917      	ldr	r1, [pc, #92]	; (2c8c <nm_drv_deinit+0x84>)
    2c30:	4817      	ldr	r0, [pc, #92]	; (2c90 <nm_drv_deinit+0x88>)
    2c32:	4b18      	ldr	r3, [pc, #96]	; (2c94 <nm_drv_deinit+0x8c>)
    2c34:	4798      	blx	r3
    2c36:	4818      	ldr	r0, [pc, #96]	; (2c98 <nm_drv_deinit+0x90>)
    2c38:	4b18      	ldr	r3, [pc, #96]	; (2c9c <nm_drv_deinit+0x94>)
    2c3a:	4798      	blx	r3
    2c3c:	200d      	movs	r0, #13
    2c3e:	4b18      	ldr	r3, [pc, #96]	; (2ca0 <nm_drv_deinit+0x98>)
    2c40:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    2c42:	0020      	movs	r0, r4
    2c44:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    2c46:	2274      	movs	r2, #116	; 0x74
    2c48:	32ff      	adds	r2, #255	; 0xff
    2c4a:	4910      	ldr	r1, [pc, #64]	; (2c8c <nm_drv_deinit+0x84>)
    2c4c:	4810      	ldr	r0, [pc, #64]	; (2c90 <nm_drv_deinit+0x88>)
    2c4e:	4b11      	ldr	r3, [pc, #68]	; (2c94 <nm_drv_deinit+0x8c>)
    2c50:	4798      	blx	r3
    2c52:	4814      	ldr	r0, [pc, #80]	; (2ca4 <nm_drv_deinit+0x9c>)
    2c54:	4b11      	ldr	r3, [pc, #68]	; (2c9c <nm_drv_deinit+0x94>)
    2c56:	4798      	blx	r3
    2c58:	200d      	movs	r0, #13
    2c5a:	4b11      	ldr	r3, [pc, #68]	; (2ca0 <nm_drv_deinit+0x98>)
    2c5c:	4798      	blx	r3
		goto ERR1;
    2c5e:	e7f0      	b.n	2c42 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    2c60:	227a      	movs	r2, #122	; 0x7a
    2c62:	32ff      	adds	r2, #255	; 0xff
    2c64:	4909      	ldr	r1, [pc, #36]	; (2c8c <nm_drv_deinit+0x84>)
    2c66:	480a      	ldr	r0, [pc, #40]	; (2c90 <nm_drv_deinit+0x88>)
    2c68:	4b0a      	ldr	r3, [pc, #40]	; (2c94 <nm_drv_deinit+0x8c>)
    2c6a:	4798      	blx	r3
    2c6c:	480e      	ldr	r0, [pc, #56]	; (2ca8 <nm_drv_deinit+0xa0>)
    2c6e:	4b0b      	ldr	r3, [pc, #44]	; (2c9c <nm_drv_deinit+0x94>)
    2c70:	4798      	blx	r3
    2c72:	200d      	movs	r0, #13
    2c74:	4b0a      	ldr	r3, [pc, #40]	; (2ca0 <nm_drv_deinit+0x98>)
    2c76:	4798      	blx	r3
		goto ERR1;
    2c78:	e7e3      	b.n	2c42 <nm_drv_deinit+0x3a>
    2c7a:	46c0      	nop			; (mov r8, r8)
    2c7c:	000028ad 	.word	0x000028ad
    2c80:	0000419d 	.word	0x0000419d
    2c84:	00002945 	.word	0x00002945
    2c88:	00003329 	.word	0x00003329
    2c8c:	0000b5e8 	.word	0x0000b5e8
    2c90:	0000b020 	.word	0x0000b020
    2c94:	00009b31 	.word	0x00009b31
    2c98:	0000b5f8 	.word	0x0000b5f8
    2c9c:	00009c4d 	.word	0x00009c4d
    2ca0:	00009b65 	.word	0x00009b65
    2ca4:	0000b618 	.word	0x0000b618
    2ca8:	0000b63c 	.word	0x0000b63c

00002cac <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    2cac:	b500      	push	{lr}
    2cae:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    2cb0:	ab01      	add	r3, sp, #4
    2cb2:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    2cb4:	2200      	movs	r2, #0
    2cb6:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    2cb8:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    2cba:	0019      	movs	r1, r3
    2cbc:	2003      	movs	r0, #3
    2cbe:	4b02      	ldr	r3, [pc, #8]	; (2cc8 <nmi_spi_write+0x1c>)
    2cc0:	4798      	blx	r3
}
    2cc2:	b005      	add	sp, #20
    2cc4:	bd00      	pop	{pc}
    2cc6:	46c0      	nop			; (mov r8, r8)
    2cc8:	00001355 	.word	0x00001355

00002ccc <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    2ccc:	b570      	push	{r4, r5, r6, lr}
    2cce:	b084      	sub	sp, #16
    2cd0:	ac08      	add	r4, sp, #32
    2cd2:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    2cd4:	ac01      	add	r4, sp, #4
    2cd6:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    2cd8:	303f      	adds	r0, #63	; 0x3f
    2cda:	b2c4      	uxtb	r4, r0
    2cdc:	2c0e      	cmp	r4, #14
    2cde:	d900      	bls.n	2ce2 <spi_cmd+0x16>
    2ce0:	e084      	b.n	2dec <spi_cmd+0x120>
    2ce2:	00a0      	lsls	r0, r4, #2
    2ce4:	4c4f      	ldr	r4, [pc, #316]	; (2e24 <spi_cmd+0x158>)
    2ce6:	5820      	ldr	r0, [r4, r0]
    2ce8:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    2cea:	ab01      	add	r3, sp, #4
    2cec:	0c0a      	lsrs	r2, r1, #16
    2cee:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    2cf0:	0a0a      	lsrs	r2, r1, #8
    2cf2:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    2cf4:	70d9      	strb	r1, [r3, #3]
		len = 5;
    2cf6:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    2cf8:	4b4b      	ldr	r3, [pc, #300]	; (2e28 <spi_cmd+0x15c>)
    2cfa:	781b      	ldrb	r3, [r3, #0]
    2cfc:	2b00      	cmp	r3, #0
    2cfe:	d077      	beq.n	2df0 <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    2d00:	3901      	subs	r1, #1
    2d02:	b2c9      	uxtb	r1, r1
    2d04:	e083      	b.n	2e0e <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
    2d06:	0a0b      	lsrs	r3, r1, #8
    2d08:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    2d0a:	2d00      	cmp	r5, #0
    2d0c:	d107      	bne.n	2d1e <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    2d0e:	aa01      	add	r2, sp, #4
    2d10:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    2d12:	ab01      	add	r3, sp, #4
    2d14:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    2d16:	2200      	movs	r2, #0
    2d18:	70da      	strb	r2, [r3, #3]
		len = 5;
    2d1a:	2105      	movs	r1, #5
		break;
    2d1c:	e7ec      	b.n	2cf8 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    2d1e:	2280      	movs	r2, #128	; 0x80
    2d20:	4252      	negs	r2, r2
    2d22:	4313      	orrs	r3, r2
    2d24:	aa01      	add	r2, sp, #4
    2d26:	7053      	strb	r3, [r2, #1]
    2d28:	e7f3      	b.n	2d12 <spi_cmd+0x46>
		bc[1] = 0x00;
    2d2a:	ab01      	add	r3, sp, #4
    2d2c:	2200      	movs	r2, #0
    2d2e:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    2d30:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    2d32:	70da      	strb	r2, [r3, #3]
		len = 5;
    2d34:	2105      	movs	r1, #5
		break;
    2d36:	e7df      	b.n	2cf8 <spi_cmd+0x2c>
		bc[1] = 0x00;
    2d38:	ab01      	add	r3, sp, #4
    2d3a:	2200      	movs	r2, #0
    2d3c:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    2d3e:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    2d40:	70da      	strb	r2, [r3, #3]
		len = 5;
    2d42:	2105      	movs	r1, #5
		break;
    2d44:	e7d8      	b.n	2cf8 <spi_cmd+0x2c>
		bc[1] = 0xff;
    2d46:	ab01      	add	r3, sp, #4
    2d48:	22ff      	movs	r2, #255	; 0xff
    2d4a:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    2d4c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    2d4e:	70da      	strb	r2, [r3, #3]
		len = 5;
    2d50:	2105      	movs	r1, #5
		break;
    2d52:	e7d1      	b.n	2cf8 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    2d54:	aa01      	add	r2, sp, #4
    2d56:	0c08      	lsrs	r0, r1, #16
    2d58:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    2d5a:	0a08      	lsrs	r0, r1, #8
    2d5c:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    2d5e:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    2d60:	0a19      	lsrs	r1, r3, #8
    2d62:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    2d64:	7153      	strb	r3, [r2, #5]
		len = 7;
    2d66:	2107      	movs	r1, #7
		break;
    2d68:	e7c6      	b.n	2cf8 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    2d6a:	aa01      	add	r2, sp, #4
    2d6c:	0c08      	lsrs	r0, r1, #16
    2d6e:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    2d70:	0a08      	lsrs	r0, r1, #8
    2d72:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    2d74:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    2d76:	0c19      	lsrs	r1, r3, #16
    2d78:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    2d7a:	0a19      	lsrs	r1, r3, #8
    2d7c:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    2d7e:	7193      	strb	r3, [r2, #6]
		len = 8;
    2d80:	2108      	movs	r1, #8
		break;
    2d82:	e7b9      	b.n	2cf8 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    2d84:	0a0b      	lsrs	r3, r1, #8
    2d86:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    2d88:	2d00      	cmp	r5, #0
    2d8a:	d10c      	bne.n	2da6 <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    2d8c:	a801      	add	r0, sp, #4
    2d8e:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    2d90:	ab01      	add	r3, sp, #4
    2d92:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    2d94:	0e11      	lsrs	r1, r2, #24
    2d96:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    2d98:	0c11      	lsrs	r1, r2, #16
    2d9a:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    2d9c:	0a11      	lsrs	r1, r2, #8
    2d9e:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    2da0:	719a      	strb	r2, [r3, #6]
		len = 8;
    2da2:	2108      	movs	r1, #8
		break;
    2da4:	e7a8      	b.n	2cf8 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    2da6:	2080      	movs	r0, #128	; 0x80
    2da8:	4240      	negs	r0, r0
    2daa:	4303      	orrs	r3, r0
    2dac:	a801      	add	r0, sp, #4
    2dae:	7043      	strb	r3, [r0, #1]
    2db0:	e7ee      	b.n	2d90 <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    2db2:	ab01      	add	r3, sp, #4
    2db4:	0c08      	lsrs	r0, r1, #16
    2db6:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    2db8:	0a08      	lsrs	r0, r1, #8
    2dba:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    2dbc:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    2dbe:	0e11      	lsrs	r1, r2, #24
    2dc0:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    2dc2:	0c11      	lsrs	r1, r2, #16
    2dc4:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    2dc6:	0a11      	lsrs	r1, r2, #8
    2dc8:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    2dca:	71da      	strb	r2, [r3, #7]
		len = 9;
    2dcc:	2109      	movs	r1, #9
		break;
    2dce:	e793      	b.n	2cf8 <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    2dd0:	2228      	movs	r2, #40	; 0x28
    2dd2:	32ff      	adds	r2, #255	; 0xff
    2dd4:	4915      	ldr	r1, [pc, #84]	; (2e2c <spi_cmd+0x160>)
    2dd6:	4816      	ldr	r0, [pc, #88]	; (2e30 <spi_cmd+0x164>)
    2dd8:	4b16      	ldr	r3, [pc, #88]	; (2e34 <spi_cmd+0x168>)
    2dda:	4798      	blx	r3
    2ddc:	4816      	ldr	r0, [pc, #88]	; (2e38 <spi_cmd+0x16c>)
    2dde:	4b17      	ldr	r3, [pc, #92]	; (2e3c <spi_cmd+0x170>)
    2de0:	4798      	blx	r3
    2de2:	200d      	movs	r0, #13
    2de4:	4b16      	ldr	r3, [pc, #88]	; (2e40 <spi_cmd+0x174>)
    2de6:	4798      	blx	r3
			result = N_FAIL;
    2de8:	2300      	movs	r3, #0
    2dea:	e017      	b.n	2e1c <spi_cmd+0x150>
	switch (cmd) {
    2dec:	2300      	movs	r3, #0
    2dee:	e015      	b.n	2e1c <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    2df0:	1e4e      	subs	r6, r1, #1
    2df2:	aa01      	add	r2, sp, #4
    2df4:	1995      	adds	r5, r2, r6
    2df6:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    2df8:	4c12      	ldr	r4, [pc, #72]	; (2e44 <spi_cmd+0x178>)
    2dfa:	005b      	lsls	r3, r3, #1
    2dfc:	7810      	ldrb	r0, [r2, #0]
    2dfe:	4043      	eors	r3, r0
    2e00:	5ce3      	ldrb	r3, [r4, r3]
    2e02:	3201      	adds	r2, #1
	while (len--)
    2e04:	42aa      	cmp	r2, r5
    2e06:	d1f8      	bne.n	2dfa <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    2e08:	005b      	lsls	r3, r3, #1
    2e0a:	aa01      	add	r2, sp, #4
    2e0c:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    2e0e:	b289      	uxth	r1, r1
    2e10:	a801      	add	r0, sp, #4
    2e12:	4b0d      	ldr	r3, [pc, #52]	; (2e48 <spi_cmd+0x17c>)
    2e14:	4798      	blx	r3
    2e16:	2301      	movs	r3, #1
    2e18:	2800      	cmp	r0, #0
    2e1a:	d1d9      	bne.n	2dd0 <spi_cmd+0x104>
		}
	}

	return result;
}
    2e1c:	0018      	movs	r0, r3
    2e1e:	b004      	add	sp, #16
    2e20:	bd70      	pop	{r4, r5, r6, pc}
    2e22:	46c0      	nop			; (mov r8, r8)
    2e24:	0000b6a4 	.word	0x0000b6a4
    2e28:	2000009c 	.word	0x2000009c
    2e2c:	0000b6e4 	.word	0x0000b6e4
    2e30:	0000b020 	.word	0x0000b020
    2e34:	00009b31 	.word	0x00009b31
    2e38:	0000bb74 	.word	0x0000bb74
    2e3c:	00009c4d 	.word	0x00009c4d
    2e40:	00009b65 	.word	0x00009b65
    2e44:	0000b770 	.word	0x0000b770
    2e48:	00002cad 	.word	0x00002cad

00002e4c <nmi_spi_read>:
{
    2e4c:	b500      	push	{lr}
    2e4e:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    2e50:	ab01      	add	r3, sp, #4
    2e52:	2200      	movs	r2, #0
    2e54:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    2e56:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    2e58:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    2e5a:	0019      	movs	r1, r3
    2e5c:	2003      	movs	r0, #3
    2e5e:	4b02      	ldr	r3, [pc, #8]	; (2e68 <nmi_spi_read+0x1c>)
    2e60:	4798      	blx	r3
}
    2e62:	b005      	add	sp, #20
    2e64:	bd00      	pop	{pc}
    2e66:	46c0      	nop			; (mov r8, r8)
    2e68:	00001355 	.word	0x00001355

00002e6c <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    2e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e6e:	46c6      	mov	lr, r8
    2e70:	b500      	push	{lr}
    2e72:	b082      	sub	sp, #8
    2e74:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    2e76:	28cf      	cmp	r0, #207	; 0xcf
    2e78:	d02b      	beq.n	2ed2 <spi_cmd_rsp+0x66>
    2e7a:	0003      	movs	r3, r0
    2e7c:	333b      	adds	r3, #59	; 0x3b
    2e7e:	b2db      	uxtb	r3, r3
    2e80:	2b01      	cmp	r3, #1
    2e82:	d926      	bls.n	2ed2 <spi_cmd_rsp+0x66>
{
    2e84:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2e86:	466b      	mov	r3, sp
    2e88:	1dde      	adds	r6, r3, #7
    2e8a:	4b26      	ldr	r3, [pc, #152]	; (2f24 <spi_cmd_rsp+0xb8>)
    2e8c:	4698      	mov	r8, r3
    2e8e:	2101      	movs	r1, #1
    2e90:	0030      	movs	r0, r6
    2e92:	47c0      	blx	r8
    2e94:	1e05      	subs	r5, r0, #0
    2e96:	d125      	bne.n	2ee4 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    2e98:	7833      	ldrb	r3, [r6, #0]
    2e9a:	42bb      	cmp	r3, r7
    2e9c:	d030      	beq.n	2f00 <spi_cmd_rsp+0x94>
    2e9e:	3c01      	subs	r4, #1
    2ea0:	b2e4      	uxtb	r4, r4
    2ea2:	2c00      	cmp	r4, #0
    2ea4:	d1f3      	bne.n	2e8e <spi_cmd_rsp+0x22>
    2ea6:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2ea8:	466b      	mov	r3, sp
    2eaa:	1dde      	adds	r6, r3, #7
    2eac:	4f1d      	ldr	r7, [pc, #116]	; (2f24 <spi_cmd_rsp+0xb8>)
    2eae:	2101      	movs	r1, #1
    2eb0:	0030      	movs	r0, r6
    2eb2:	47b8      	blx	r7
    2eb4:	2800      	cmp	r0, #0
    2eb6:	d125      	bne.n	2f04 <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    2eb8:	7833      	ldrb	r3, [r6, #0]
    2eba:	2b00      	cmp	r3, #0
    2ebc:	d02f      	beq.n	2f1e <spi_cmd_rsp+0xb2>
    2ebe:	3c01      	subs	r4, #1
    2ec0:	b2e4      	uxtb	r4, r4
    2ec2:	2c00      	cmp	r4, #0
    2ec4:	d1f3      	bne.n	2eae <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    2ec6:	2501      	movs	r5, #1

_fail_:

	return result;
}
    2ec8:	0028      	movs	r0, r5
    2eca:	b002      	add	sp, #8
    2ecc:	bc04      	pop	{r2}
    2ece:	4690      	mov	r8, r2
    2ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2ed2:	2101      	movs	r1, #1
    2ed4:	466b      	mov	r3, sp
    2ed6:	1dd8      	adds	r0, r3, #7
    2ed8:	4b12      	ldr	r3, [pc, #72]	; (2f24 <spi_cmd_rsp+0xb8>)
    2eda:	4798      	blx	r3
			result = N_FAIL;
    2edc:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2ede:	2800      	cmp	r0, #0
    2ee0:	d0d0      	beq.n	2e84 <spi_cmd_rsp+0x18>
    2ee2:	e7f1      	b.n	2ec8 <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    2ee4:	22b1      	movs	r2, #177	; 0xb1
    2ee6:	0052      	lsls	r2, r2, #1
    2ee8:	490f      	ldr	r1, [pc, #60]	; (2f28 <spi_cmd_rsp+0xbc>)
    2eea:	4810      	ldr	r0, [pc, #64]	; (2f2c <spi_cmd_rsp+0xc0>)
    2eec:	4b10      	ldr	r3, [pc, #64]	; (2f30 <spi_cmd_rsp+0xc4>)
    2eee:	4798      	blx	r3
    2ef0:	4810      	ldr	r0, [pc, #64]	; (2f34 <spi_cmd_rsp+0xc8>)
    2ef2:	4b11      	ldr	r3, [pc, #68]	; (2f38 <spi_cmd_rsp+0xcc>)
    2ef4:	4798      	blx	r3
    2ef6:	200d      	movs	r0, #13
    2ef8:	4b10      	ldr	r3, [pc, #64]	; (2f3c <spi_cmd_rsp+0xd0>)
    2efa:	4798      	blx	r3
			result = N_FAIL;
    2efc:	2500      	movs	r5, #0
			goto _fail_;
    2efe:	e7e3      	b.n	2ec8 <spi_cmd_rsp+0x5c>
    2f00:	240b      	movs	r4, #11
    2f02:	e7d1      	b.n	2ea8 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    2f04:	22b8      	movs	r2, #184	; 0xb8
    2f06:	0052      	lsls	r2, r2, #1
    2f08:	4907      	ldr	r1, [pc, #28]	; (2f28 <spi_cmd_rsp+0xbc>)
    2f0a:	4808      	ldr	r0, [pc, #32]	; (2f2c <spi_cmd_rsp+0xc0>)
    2f0c:	4b08      	ldr	r3, [pc, #32]	; (2f30 <spi_cmd_rsp+0xc4>)
    2f0e:	4798      	blx	r3
    2f10:	4808      	ldr	r0, [pc, #32]	; (2f34 <spi_cmd_rsp+0xc8>)
    2f12:	4b09      	ldr	r3, [pc, #36]	; (2f38 <spi_cmd_rsp+0xcc>)
    2f14:	4798      	blx	r3
    2f16:	200d      	movs	r0, #13
    2f18:	4b08      	ldr	r3, [pc, #32]	; (2f3c <spi_cmd_rsp+0xd0>)
    2f1a:	4798      	blx	r3
			goto _fail_;
    2f1c:	e7d4      	b.n	2ec8 <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    2f1e:	2501      	movs	r5, #1
    2f20:	e7d2      	b.n	2ec8 <spi_cmd_rsp+0x5c>
    2f22:	46c0      	nop			; (mov r8, r8)
    2f24:	00002e4d 	.word	0x00002e4d
    2f28:	0000b6fc 	.word	0x0000b6fc
    2f2c:	0000b020 	.word	0x0000b020
    2f30:	00009b31 	.word	0x00009b31
    2f34:	0000bba0 	.word	0x0000bba0
    2f38:	00009c4d 	.word	0x00009c4d
    2f3c:	00009b65 	.word	0x00009b65

00002f40 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    2f40:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f42:	46de      	mov	lr, fp
    2f44:	4657      	mov	r7, sl
    2f46:	464e      	mov	r6, r9
    2f48:	4645      	mov	r5, r8
    2f4a:	b5e0      	push	{r5, r6, r7, lr}
    2f4c:	b087      	sub	sp, #28
    2f4e:	9001      	str	r0, [sp, #4]
    2f50:	4689      	mov	r9, r1
    2f52:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    2f54:	2300      	movs	r3, #0
    2f56:	469a      	mov	sl, r3
    2f58:	2380      	movs	r3, #128	; 0x80
    2f5a:	019b      	lsls	r3, r3, #6
    2f5c:	469b      	mov	fp, r3
    2f5e:	466a      	mov	r2, sp
    2f60:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2f62:	4b3b      	ldr	r3, [pc, #236]	; (3050 <spi_data_read+0x110>)
    2f64:	4698      	mov	r8, r3
    2f66:	e02e      	b.n	2fc6 <spi_data_read+0x86>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    2f68:	4a3a      	ldr	r2, [pc, #232]	; (3054 <spi_data_read+0x114>)
    2f6a:	493b      	ldr	r1, [pc, #236]	; (3058 <spi_data_read+0x118>)
    2f6c:	483b      	ldr	r0, [pc, #236]	; (305c <spi_data_read+0x11c>)
    2f6e:	4b3c      	ldr	r3, [pc, #240]	; (3060 <spi_data_read+0x120>)
    2f70:	4798      	blx	r3
    2f72:	483c      	ldr	r0, [pc, #240]	; (3064 <spi_data_read+0x124>)
    2f74:	4b3c      	ldr	r3, [pc, #240]	; (3068 <spi_data_read+0x128>)
    2f76:	4798      	blx	r3
    2f78:	200d      	movs	r0, #13
    2f7a:	4b3c      	ldr	r3, [pc, #240]	; (306c <spi_data_read+0x12c>)
    2f7c:	4798      	blx	r3
    2f7e:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    2f80:	0028      	movs	r0, r5
    2f82:	b007      	add	sp, #28
    2f84:	bc3c      	pop	{r2, r3, r4, r5}
    2f86:	4690      	mov	r8, r2
    2f88:	4699      	mov	r9, r3
    2f8a:	46a2      	mov	sl, r4
    2f8c:	46ab      	mov	fp, r5
    2f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    2f90:	2c00      	cmp	r4, #0
    2f92:	dd2e      	ble.n	2ff2 <spi_data_read+0xb2>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    2f94:	9b01      	ldr	r3, [sp, #4]
    2f96:	4453      	add	r3, sl
    2f98:	0018      	movs	r0, r3
    2f9a:	0039      	movs	r1, r7
    2f9c:	4b2c      	ldr	r3, [pc, #176]	; (3050 <spi_data_read+0x110>)
    2f9e:	4798      	blx	r3
    2fa0:	1e04      	subs	r4, r0, #0
    2fa2:	d133      	bne.n	300c <spi_data_read+0xcc>
		if(!clockless)
    2fa4:	9b02      	ldr	r3, [sp, #8]
    2fa6:	2b00      	cmp	r3, #0
    2fa8:	d103      	bne.n	2fb2 <spi_data_read+0x72>
			if (!gu8Crc_off) {
    2faa:	4b31      	ldr	r3, [pc, #196]	; (3070 <spi_data_read+0x130>)
    2fac:	781b      	ldrb	r3, [r3, #0]
    2fae:	2b00      	cmp	r3, #0
    2fb0:	d039      	beq.n	3026 <spi_data_read+0xe6>
		ix += nbytes;
    2fb2:	4653      	mov	r3, sl
    2fb4:	18fb      	adds	r3, r7, r3
    2fb6:	b21b      	sxth	r3, r3
    2fb8:	469a      	mov	sl, r3
		sz -= nbytes;
    2fba:	464b      	mov	r3, r9
    2fbc:	1bdf      	subs	r7, r3, r7
    2fbe:	b2bb      	uxth	r3, r7
    2fc0:	4699      	mov	r9, r3
	} while (sz);
    2fc2:	2b00      	cmp	r3, #0
    2fc4:	d042      	beq.n	304c <spi_data_read+0x10c>
    2fc6:	464f      	mov	r7, r9
    2fc8:	45d9      	cmp	r9, fp
    2fca:	d901      	bls.n	2fd0 <spi_data_read+0x90>
    2fcc:	466b      	mov	r3, sp
    2fce:	89df      	ldrh	r7, [r3, #14]
    2fd0:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    2fd2:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2fd4:	ab04      	add	r3, sp, #16
    2fd6:	1cde      	adds	r6, r3, #3
    2fd8:	2101      	movs	r1, #1
    2fda:	0030      	movs	r0, r6
    2fdc:	47c0      	blx	r8
    2fde:	1e05      	subs	r5, r0, #0
    2fe0:	d1c2      	bne.n	2f68 <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    2fe2:	7833      	ldrb	r3, [r6, #0]
    2fe4:	091b      	lsrs	r3, r3, #4
    2fe6:	2b0f      	cmp	r3, #15
    2fe8:	d0d2      	beq.n	2f90 <spi_data_read+0x50>
    2fea:	3c01      	subs	r4, #1
    2fec:	b224      	sxth	r4, r4
		} while (retry--);
    2fee:	1c63      	adds	r3, r4, #1
    2ff0:	d1f2      	bne.n	2fd8 <spi_data_read+0x98>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    2ff2:	4a20      	ldr	r2, [pc, #128]	; (3074 <spi_data_read+0x134>)
    2ff4:	4918      	ldr	r1, [pc, #96]	; (3058 <spi_data_read+0x118>)
    2ff6:	4819      	ldr	r0, [pc, #100]	; (305c <spi_data_read+0x11c>)
    2ff8:	4c19      	ldr	r4, [pc, #100]	; (3060 <spi_data_read+0x120>)
    2ffa:	47a0      	blx	r4
    2ffc:	ab04      	add	r3, sp, #16
    2ffe:	78d9      	ldrb	r1, [r3, #3]
    3000:	481d      	ldr	r0, [pc, #116]	; (3078 <spi_data_read+0x138>)
    3002:	47a0      	blx	r4
    3004:	200d      	movs	r0, #13
    3006:	4b19      	ldr	r3, [pc, #100]	; (306c <spi_data_read+0x12c>)
    3008:	4798      	blx	r3
			break;
    300a:	e7b9      	b.n	2f80 <spi_data_read+0x40>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    300c:	22c5      	movs	r2, #197	; 0xc5
    300e:	0092      	lsls	r2, r2, #2
    3010:	4911      	ldr	r1, [pc, #68]	; (3058 <spi_data_read+0x118>)
    3012:	4812      	ldr	r0, [pc, #72]	; (305c <spi_data_read+0x11c>)
    3014:	4b12      	ldr	r3, [pc, #72]	; (3060 <spi_data_read+0x120>)
    3016:	4798      	blx	r3
    3018:	4818      	ldr	r0, [pc, #96]	; (307c <spi_data_read+0x13c>)
    301a:	4b13      	ldr	r3, [pc, #76]	; (3068 <spi_data_read+0x128>)
    301c:	4798      	blx	r3
    301e:	200d      	movs	r0, #13
    3020:	4b12      	ldr	r3, [pc, #72]	; (306c <spi_data_read+0x12c>)
    3022:	4798      	blx	r3
			break;
    3024:	e7ac      	b.n	2f80 <spi_data_read+0x40>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    3026:	2102      	movs	r1, #2
    3028:	a805      	add	r0, sp, #20
    302a:	4b09      	ldr	r3, [pc, #36]	; (3050 <spi_data_read+0x110>)
    302c:	4798      	blx	r3
    302e:	2800      	cmp	r0, #0
    3030:	d0bf      	beq.n	2fb2 <spi_data_read+0x72>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    3032:	4a13      	ldr	r2, [pc, #76]	; (3080 <spi_data_read+0x140>)
    3034:	4908      	ldr	r1, [pc, #32]	; (3058 <spi_data_read+0x118>)
    3036:	4809      	ldr	r0, [pc, #36]	; (305c <spi_data_read+0x11c>)
    3038:	4b09      	ldr	r3, [pc, #36]	; (3060 <spi_data_read+0x120>)
    303a:	4798      	blx	r3
    303c:	4811      	ldr	r0, [pc, #68]	; (3084 <spi_data_read+0x144>)
    303e:	4b0a      	ldr	r3, [pc, #40]	; (3068 <spi_data_read+0x128>)
    3040:	4798      	blx	r3
    3042:	200d      	movs	r0, #13
    3044:	4b09      	ldr	r3, [pc, #36]	; (306c <spi_data_read+0x12c>)
    3046:	4798      	blx	r3
					result = N_FAIL;
    3048:	0025      	movs	r5, r4
					break;
    304a:	e799      	b.n	2f80 <spi_data_read+0x40>
    304c:	2501      	movs	r5, #1
    304e:	e797      	b.n	2f80 <spi_data_read+0x40>
    3050:	00002e4d 	.word	0x00002e4d
    3054:	000002ff 	.word	0x000002ff
    3058:	0000b708 	.word	0x0000b708
    305c:	0000b020 	.word	0x0000b020
    3060:	00009b31 	.word	0x00009b31
    3064:	0000bbd4 	.word	0x0000bbd4
    3068:	00009c4d 	.word	0x00009c4d
    306c:	00009b65 	.word	0x00009b65
    3070:	2000009c 	.word	0x2000009c
    3074:	0000030b 	.word	0x0000030b
    3078:	0000bc08 	.word	0x0000bc08
    307c:	0000bc38 	.word	0x0000bc38
    3080:	0000031f 	.word	0x0000031f
    3084:	0000bc68 	.word	0x0000bc68

00003088 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    3088:	b5f0      	push	{r4, r5, r6, r7, lr}
    308a:	46d6      	mov	lr, sl
    308c:	464f      	mov	r7, r9
    308e:	4646      	mov	r6, r8
    3090:	b5c0      	push	{r6, r7, lr}
    3092:	b086      	sub	sp, #24
    3094:	9003      	str	r0, [sp, #12]
    3096:	9104      	str	r1, [sp, #16]
    3098:	2830      	cmp	r0, #48	; 0x30
    309a:	d80f      	bhi.n	30bc <spi_write_reg+0x34>
    309c:	4b30      	ldr	r3, [pc, #192]	; (3160 <spi_write_reg+0xd8>)
    309e:	781f      	ldrb	r7, [r3, #0]
    30a0:	b2fb      	uxtb	r3, r7
    30a2:	9305      	str	r3, [sp, #20]
    30a4:	2300      	movs	r3, #0
    30a6:	2230      	movs	r2, #48	; 0x30
    30a8:	9903      	ldr	r1, [sp, #12]
    30aa:	428a      	cmp	r2, r1
    30ac:	415b      	adcs	r3, r3
    30ae:	b2db      	uxtb	r3, r3
    30b0:	469a      	mov	sl, r3
    30b2:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    30b4:	4b2b      	ldr	r3, [pc, #172]	; (3164 <spi_write_reg+0xdc>)
    30b6:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    30b8:	46d1      	mov	r9, sl
    30ba:	e033      	b.n	3124 <spi_write_reg+0x9c>
    30bc:	4b2a      	ldr	r3, [pc, #168]	; (3168 <spi_write_reg+0xe0>)
    30be:	781f      	ldrb	r7, [r3, #0]
    30c0:	e7ee      	b.n	30a0 <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    30c2:	9805      	ldr	r0, [sp, #20]
    30c4:	4b29      	ldr	r3, [pc, #164]	; (316c <spi_write_reg+0xe4>)
    30c6:	4798      	blx	r3
    30c8:	0004      	movs	r4, r0
	if (result != N_OK) {
    30ca:	2801      	cmp	r0, #1
    30cc:	d041      	beq.n	3152 <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    30ce:	22e7      	movs	r2, #231	; 0xe7
    30d0:	0092      	lsls	r2, r2, #2
    30d2:	4927      	ldr	r1, [pc, #156]	; (3170 <spi_write_reg+0xe8>)
    30d4:	4827      	ldr	r0, [pc, #156]	; (3174 <spi_write_reg+0xec>)
    30d6:	4e28      	ldr	r6, [pc, #160]	; (3178 <spi_write_reg+0xf0>)
    30d8:	47b0      	blx	r6
    30da:	9903      	ldr	r1, [sp, #12]
    30dc:	4827      	ldr	r0, [pc, #156]	; (317c <spi_write_reg+0xf4>)
    30de:	47b0      	blx	r6
    30e0:	200d      	movs	r0, #13
    30e2:	4b27      	ldr	r3, [pc, #156]	; (3180 <spi_write_reg+0xf8>)
    30e4:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    30e6:	2001      	movs	r0, #1
    30e8:	4e26      	ldr	r6, [pc, #152]	; (3184 <spi_write_reg+0xfc>)
    30ea:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    30ec:	2300      	movs	r3, #0
    30ee:	9300      	str	r3, [sp, #0]
    30f0:	2200      	movs	r2, #0
    30f2:	2100      	movs	r1, #0
    30f4:	20cf      	movs	r0, #207	; 0xcf
    30f6:	4f1b      	ldr	r7, [pc, #108]	; (3164 <spi_write_reg+0xdc>)
    30f8:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    30fa:	20cf      	movs	r0, #207	; 0xcf
    30fc:	4b1b      	ldr	r3, [pc, #108]	; (316c <spi_write_reg+0xe4>)
    30fe:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    3100:	4a21      	ldr	r2, [pc, #132]	; (3188 <spi_write_reg+0x100>)
    3102:	491b      	ldr	r1, [pc, #108]	; (3170 <spi_write_reg+0xe8>)
    3104:	481b      	ldr	r0, [pc, #108]	; (3174 <spi_write_reg+0xec>)
    3106:	4f1c      	ldr	r7, [pc, #112]	; (3178 <spi_write_reg+0xf0>)
    3108:	47b8      	blx	r7
    310a:	9b04      	ldr	r3, [sp, #16]
    310c:	9a03      	ldr	r2, [sp, #12]
    310e:	0029      	movs	r1, r5
    3110:	481e      	ldr	r0, [pc, #120]	; (318c <spi_write_reg+0x104>)
    3112:	47b8      	blx	r7
    3114:	200d      	movs	r0, #13
    3116:	4b1a      	ldr	r3, [pc, #104]	; (3180 <spi_write_reg+0xf8>)
    3118:	4798      	blx	r3
		nm_bsp_sleep(1);
    311a:	2001      	movs	r0, #1
    311c:	47b0      	blx	r6
    311e:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    3120:	2d00      	cmp	r5, #0
    3122:	d016      	beq.n	3152 <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    3124:	464b      	mov	r3, r9
    3126:	9300      	str	r3, [sp, #0]
    3128:	2304      	movs	r3, #4
    312a:	9a04      	ldr	r2, [sp, #16]
    312c:	9f03      	ldr	r7, [sp, #12]
    312e:	0039      	movs	r1, r7
    3130:	9805      	ldr	r0, [sp, #20]
    3132:	47c0      	blx	r8
    3134:	0004      	movs	r4, r0
	if (result != N_OK) {
    3136:	2801      	cmp	r0, #1
    3138:	d0c3      	beq.n	30c2 <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    313a:	4a15      	ldr	r2, [pc, #84]	; (3190 <spi_write_reg+0x108>)
    313c:	490c      	ldr	r1, [pc, #48]	; (3170 <spi_write_reg+0xe8>)
    313e:	480d      	ldr	r0, [pc, #52]	; (3174 <spi_write_reg+0xec>)
    3140:	4e0d      	ldr	r6, [pc, #52]	; (3178 <spi_write_reg+0xf0>)
    3142:	47b0      	blx	r6
    3144:	0039      	movs	r1, r7
    3146:	4813      	ldr	r0, [pc, #76]	; (3194 <spi_write_reg+0x10c>)
    3148:	47b0      	blx	r6
    314a:	200d      	movs	r0, #13
    314c:	4b0c      	ldr	r3, [pc, #48]	; (3180 <spi_write_reg+0xf8>)
    314e:	4798      	blx	r3
		goto _FAIL_;
    3150:	e7c9      	b.n	30e6 <spi_write_reg+0x5e>
	}

	return result;
}
    3152:	0020      	movs	r0, r4
    3154:	b006      	add	sp, #24
    3156:	bc1c      	pop	{r2, r3, r4}
    3158:	4690      	mov	r8, r2
    315a:	4699      	mov	r9, r3
    315c:	46a2      	mov	sl, r4
    315e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3160:	0000b6e0 	.word	0x0000b6e0
    3164:	00002ccd 	.word	0x00002ccd
    3168:	0000b6e1 	.word	0x0000b6e1
    316c:	00002e6d 	.word	0x00002e6d
    3170:	0000b728 	.word	0x0000b728
    3174:	0000b020 	.word	0x0000b020
    3178:	00009b31 	.word	0x00009b31
    317c:	0000bd60 	.word	0x0000bd60
    3180:	00009b65 	.word	0x00009b65
    3184:	0000111d 	.word	0x0000111d
    3188:	000003af 	.word	0x000003af
    318c:	0000bd98 	.word	0x0000bd98
    3190:	00000396 	.word	0x00000396
    3194:	0000bd34 	.word	0x0000bd34

00003198 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    3198:	b5f0      	push	{r4, r5, r6, r7, lr}
    319a:	46de      	mov	lr, fp
    319c:	4657      	mov	r7, sl
    319e:	464e      	mov	r6, r9
    31a0:	4645      	mov	r5, r8
    31a2:	b5e0      	push	{r5, r6, r7, lr}
    31a4:	b087      	sub	sp, #28
    31a6:	9002      	str	r0, [sp, #8]
    31a8:	468b      	mov	fp, r1
    31aa:	28ff      	cmp	r0, #255	; 0xff
    31ac:	d80f      	bhi.n	31ce <spi_read_reg+0x36>
    31ae:	4b41      	ldr	r3, [pc, #260]	; (32b4 <spi_read_reg+0x11c>)
    31b0:	781f      	ldrb	r7, [r3, #0]
    31b2:	b2fb      	uxtb	r3, r7
    31b4:	9303      	str	r3, [sp, #12]
    31b6:	2300      	movs	r3, #0
    31b8:	22ff      	movs	r2, #255	; 0xff
    31ba:	9902      	ldr	r1, [sp, #8]
    31bc:	428a      	cmp	r2, r1
    31be:	415b      	adcs	r3, r3
    31c0:	b2db      	uxtb	r3, r3
    31c2:	469a      	mov	sl, r3
    31c4:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    31c6:	4b3c      	ldr	r3, [pc, #240]	; (32b8 <spi_read_reg+0x120>)
    31c8:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    31ca:	46d1      	mov	r9, sl
    31cc:	e031      	b.n	3232 <spi_read_reg+0x9a>
    31ce:	4b3b      	ldr	r3, [pc, #236]	; (32bc <spi_read_reg+0x124>)
    31d0:	781f      	ldrb	r7, [r3, #0]
    31d2:	e7ee      	b.n	31b2 <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    31d4:	9803      	ldr	r0, [sp, #12]
    31d6:	4b3a      	ldr	r3, [pc, #232]	; (32c0 <spi_read_reg+0x128>)
    31d8:	4798      	blx	r3
    31da:	0004      	movs	r4, r0
	if (result != N_OK) {
    31dc:	2801      	cmp	r0, #1
    31de:	d03f      	beq.n	3260 <spi_read_reg+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    31e0:	4a38      	ldr	r2, [pc, #224]	; (32c4 <spi_read_reg+0x12c>)
    31e2:	4939      	ldr	r1, [pc, #228]	; (32c8 <spi_read_reg+0x130>)
    31e4:	4839      	ldr	r0, [pc, #228]	; (32cc <spi_read_reg+0x134>)
    31e6:	4e3a      	ldr	r6, [pc, #232]	; (32d0 <spi_read_reg+0x138>)
    31e8:	47b0      	blx	r6
    31ea:	9902      	ldr	r1, [sp, #8]
    31ec:	4839      	ldr	r0, [pc, #228]	; (32d4 <spi_read_reg+0x13c>)
    31ee:	47b0      	blx	r6
    31f0:	200d      	movs	r0, #13
    31f2:	4b39      	ldr	r3, [pc, #228]	; (32d8 <spi_read_reg+0x140>)
    31f4:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    31f6:	2001      	movs	r0, #1
    31f8:	4e38      	ldr	r6, [pc, #224]	; (32dc <spi_read_reg+0x144>)
    31fa:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    31fc:	2300      	movs	r3, #0
    31fe:	9300      	str	r3, [sp, #0]
    3200:	2200      	movs	r2, #0
    3202:	2100      	movs	r1, #0
    3204:	20cf      	movs	r0, #207	; 0xcf
    3206:	4f2c      	ldr	r7, [pc, #176]	; (32b8 <spi_read_reg+0x120>)
    3208:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    320a:	20cf      	movs	r0, #207	; 0xcf
    320c:	4b2c      	ldr	r3, [pc, #176]	; (32c0 <spi_read_reg+0x128>)
    320e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    3210:	4a33      	ldr	r2, [pc, #204]	; (32e0 <spi_read_reg+0x148>)
    3212:	492d      	ldr	r1, [pc, #180]	; (32c8 <spi_read_reg+0x130>)
    3214:	482d      	ldr	r0, [pc, #180]	; (32cc <spi_read_reg+0x134>)
    3216:	4f2e      	ldr	r7, [pc, #184]	; (32d0 <spi_read_reg+0x138>)
    3218:	47b8      	blx	r7
    321a:	9a02      	ldr	r2, [sp, #8]
    321c:	0029      	movs	r1, r5
    321e:	4831      	ldr	r0, [pc, #196]	; (32e4 <spi_read_reg+0x14c>)
    3220:	47b8      	blx	r7
    3222:	200d      	movs	r0, #13
    3224:	4b2c      	ldr	r3, [pc, #176]	; (32d8 <spi_read_reg+0x140>)
    3226:	4798      	blx	r3
		nm_bsp_sleep(1);
    3228:	2001      	movs	r0, #1
    322a:	47b0      	blx	r6
    322c:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    322e:	2d00      	cmp	r5, #0
    3230:	d037      	beq.n	32a2 <spi_read_reg+0x10a>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    3232:	464b      	mov	r3, r9
    3234:	9300      	str	r3, [sp, #0]
    3236:	2304      	movs	r3, #4
    3238:	2200      	movs	r2, #0
    323a:	9f02      	ldr	r7, [sp, #8]
    323c:	0039      	movs	r1, r7
    323e:	9803      	ldr	r0, [sp, #12]
    3240:	47c0      	blx	r8
    3242:	0004      	movs	r4, r0
	if (result != N_OK) {
    3244:	2801      	cmp	r0, #1
    3246:	d0c5      	beq.n	31d4 <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    3248:	4a27      	ldr	r2, [pc, #156]	; (32e8 <spi_read_reg+0x150>)
    324a:	491f      	ldr	r1, [pc, #124]	; (32c8 <spi_read_reg+0x130>)
    324c:	481f      	ldr	r0, [pc, #124]	; (32cc <spi_read_reg+0x134>)
    324e:	4e20      	ldr	r6, [pc, #128]	; (32d0 <spi_read_reg+0x138>)
    3250:	47b0      	blx	r6
    3252:	0039      	movs	r1, r7
    3254:	4825      	ldr	r0, [pc, #148]	; (32ec <spi_read_reg+0x154>)
    3256:	47b0      	blx	r6
    3258:	200d      	movs	r0, #13
    325a:	4b1f      	ldr	r3, [pc, #124]	; (32d8 <spi_read_reg+0x140>)
    325c:	4798      	blx	r3
		goto _FAIL_;
    325e:	e7ca      	b.n	31f6 <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
    3260:	464a      	mov	r2, r9
    3262:	2104      	movs	r1, #4
    3264:	a805      	add	r0, sp, #20
    3266:	4b22      	ldr	r3, [pc, #136]	; (32f0 <spi_read_reg+0x158>)
    3268:	4798      	blx	r3
    326a:	0004      	movs	r4, r0
	if (result != N_OK) {
    326c:	2801      	cmp	r0, #1
    326e:	d00b      	beq.n	3288 <spi_read_reg+0xf0>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    3270:	4a20      	ldr	r2, [pc, #128]	; (32f4 <spi_read_reg+0x15c>)
    3272:	4915      	ldr	r1, [pc, #84]	; (32c8 <spi_read_reg+0x130>)
    3274:	4815      	ldr	r0, [pc, #84]	; (32cc <spi_read_reg+0x134>)
    3276:	4b16      	ldr	r3, [pc, #88]	; (32d0 <spi_read_reg+0x138>)
    3278:	4798      	blx	r3
    327a:	481f      	ldr	r0, [pc, #124]	; (32f8 <spi_read_reg+0x160>)
    327c:	4b1f      	ldr	r3, [pc, #124]	; (32fc <spi_read_reg+0x164>)
    327e:	4798      	blx	r3
    3280:	200d      	movs	r0, #13
    3282:	4b15      	ldr	r3, [pc, #84]	; (32d8 <spi_read_reg+0x140>)
    3284:	4798      	blx	r3
		goto _FAIL_;
    3286:	e7b6      	b.n	31f6 <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
    3288:	aa05      	add	r2, sp, #20
    328a:	7853      	ldrb	r3, [r2, #1]
    328c:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    328e:	7891      	ldrb	r1, [r2, #2]
    3290:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    3292:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    3294:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    3296:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    3298:	78d2      	ldrb	r2, [r2, #3]
    329a:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    329c:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    329e:	465a      	mov	r2, fp
    32a0:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    32a2:	0020      	movs	r0, r4
    32a4:	b007      	add	sp, #28
    32a6:	bc3c      	pop	{r2, r3, r4, r5}
    32a8:	4690      	mov	r8, r2
    32aa:	4699      	mov	r9, r3
    32ac:	46a2      	mov	sl, r4
    32ae:	46ab      	mov	fp, r5
    32b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32b2:	46c0      	nop			; (mov r8, r8)
    32b4:	0000b6e2 	.word	0x0000b6e2
    32b8:	00002ccd 	.word	0x00002ccd
    32bc:	0000b6e3 	.word	0x0000b6e3
    32c0:	00002e6d 	.word	0x00002e6d
    32c4:	0000041d 	.word	0x0000041d
    32c8:	0000b748 	.word	0x0000b748
    32cc:	0000b020 	.word	0x0000b020
    32d0:	00009b31 	.word	0x00009b31
    32d4:	0000bcc8 	.word	0x0000bcc8
    32d8:	00009b65 	.word	0x00009b65
    32dc:	0000111d 	.word	0x0000111d
    32e0:	0000043c 	.word	0x0000043c
    32e4:	0000bd1c 	.word	0x0000bd1c
    32e8:	00000417 	.word	0x00000417
    32ec:	0000bc9c 	.word	0x0000bc9c
    32f0:	00002f41 	.word	0x00002f41
    32f4:	00000424 	.word	0x00000424
    32f8:	0000bcfc 	.word	0x0000bcfc
    32fc:	00009c4d 	.word	0x00009c4d

00003300 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    3300:	b510      	push	{r4, lr}
    3302:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3304:	2300      	movs	r3, #0
    3306:	9300      	str	r3, [sp, #0]
    3308:	2200      	movs	r2, #0
    330a:	2100      	movs	r1, #0
    330c:	20cf      	movs	r0, #207	; 0xcf
    330e:	4c04      	ldr	r4, [pc, #16]	; (3320 <nm_spi_reset+0x20>)
    3310:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    3312:	20cf      	movs	r0, #207	; 0xcf
    3314:	4b03      	ldr	r3, [pc, #12]	; (3324 <nm_spi_reset+0x24>)
    3316:	4798      	blx	r3
	return M2M_SUCCESS;
}
    3318:	2000      	movs	r0, #0
    331a:	b002      	add	sp, #8
    331c:	bd10      	pop	{r4, pc}
    331e:	46c0      	nop			; (mov r8, r8)
    3320:	00002ccd 	.word	0x00002ccd
    3324:	00002e6d 	.word	0x00002e6d

00003328 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    3328:	2200      	movs	r2, #0
    332a:	4b02      	ldr	r3, [pc, #8]	; (3334 <nm_spi_deinit+0xc>)
    332c:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    332e:	2000      	movs	r0, #0
    3330:	4770      	bx	lr
    3332:	46c0      	nop			; (mov r8, r8)
    3334:	2000009c 	.word	0x2000009c

00003338 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    3338:	b500      	push	{lr}
    333a:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    333c:	a901      	add	r1, sp, #4
    333e:	4b02      	ldr	r3, [pc, #8]	; (3348 <nm_spi_read_reg+0x10>)
    3340:	4798      	blx	r3

	return u32Val;
}
    3342:	9801      	ldr	r0, [sp, #4]
    3344:	b003      	add	sp, #12
    3346:	bd00      	pop	{pc}
    3348:	00003199 	.word	0x00003199

0000334c <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    334c:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    334e:	4b04      	ldr	r3, [pc, #16]	; (3360 <nm_spi_read_reg_with_ret+0x14>)
    3350:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    3352:	2300      	movs	r3, #0
    3354:	2801      	cmp	r0, #1
    3356:	d101      	bne.n	335c <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    3358:	0018      	movs	r0, r3
    335a:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    335c:	3b06      	subs	r3, #6
    335e:	e7fb      	b.n	3358 <nm_spi_read_reg_with_ret+0xc>
    3360:	00003199 	.word	0x00003199

00003364 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    3364:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    3366:	4b04      	ldr	r3, [pc, #16]	; (3378 <nm_spi_write_reg+0x14>)
    3368:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    336a:	2300      	movs	r3, #0
    336c:	2801      	cmp	r0, #1
    336e:	d101      	bne.n	3374 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    3370:	0018      	movs	r0, r3
    3372:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    3374:	3b06      	subs	r3, #6
    3376:	e7fb      	b.n	3370 <nm_spi_write_reg+0xc>
    3378:	00003089 	.word	0x00003089

0000337c <nm_spi_init>:
{
    337c:	b510      	push	{r4, lr}
    337e:	b082      	sub	sp, #8
	uint32 reg = 0;
    3380:	2300      	movs	r3, #0
    3382:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    3384:	4a35      	ldr	r2, [pc, #212]	; (345c <nm_spi_init+0xe0>)
    3386:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    3388:	4669      	mov	r1, sp
    338a:	4835      	ldr	r0, [pc, #212]	; (3460 <nm_spi_init+0xe4>)
    338c:	4b35      	ldr	r3, [pc, #212]	; (3464 <nm_spi_init+0xe8>)
    338e:	4798      	blx	r3
    3390:	2800      	cmp	r0, #0
    3392:	d028      	beq.n	33e6 <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    3394:	4b31      	ldr	r3, [pc, #196]	; (345c <nm_spi_init+0xe0>)
    3396:	781b      	ldrb	r3, [r3, #0]
    3398:	2b00      	cmp	r3, #0
    339a:	d10d      	bne.n	33b8 <nm_spi_init+0x3c>
		reg &= ~0x70;
    339c:	337c      	adds	r3, #124	; 0x7c
    339e:	9900      	ldr	r1, [sp, #0]
    33a0:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    33a2:	3b2c      	subs	r3, #44	; 0x2c
    33a4:	4319      	orrs	r1, r3
    33a6:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    33a8:	482d      	ldr	r0, [pc, #180]	; (3460 <nm_spi_init+0xe4>)
    33aa:	4b2f      	ldr	r3, [pc, #188]	; (3468 <nm_spi_init+0xec>)
    33ac:	4798      	blx	r3
    33ae:	1e04      	subs	r4, r0, #0
    33b0:	d039      	beq.n	3426 <nm_spi_init+0xaa>
		gu8Crc_off = 1;
    33b2:	2201      	movs	r2, #1
    33b4:	4b29      	ldr	r3, [pc, #164]	; (345c <nm_spi_init+0xe0>)
    33b6:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    33b8:	a901      	add	r1, sp, #4
    33ba:	2080      	movs	r0, #128	; 0x80
    33bc:	0140      	lsls	r0, r0, #5
    33be:	4b29      	ldr	r3, [pc, #164]	; (3464 <nm_spi_init+0xe8>)
    33c0:	4798      	blx	r3
    33c2:	2800      	cmp	r0, #0
    33c4:	d03b      	beq.n	343e <nm_spi_init+0xc2>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    33c6:	4c26      	ldr	r4, [pc, #152]	; (3460 <nm_spi_init+0xe4>)
    33c8:	0020      	movs	r0, r4
    33ca:	4b28      	ldr	r3, [pc, #160]	; (346c <nm_spi_init+0xf0>)
    33cc:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    33ce:	2370      	movs	r3, #112	; 0x70
    33d0:	0001      	movs	r1, r0
    33d2:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    33d4:	2050      	movs	r0, #80	; 0x50
    33d6:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    33d8:	0020      	movs	r0, r4
    33da:	4b25      	ldr	r3, [pc, #148]	; (3470 <nm_spi_init+0xf4>)
    33dc:	4798      	blx	r3
	return M2M_SUCCESS;
    33de:	2400      	movs	r4, #0
}
    33e0:	0020      	movs	r0, r4
    33e2:	b002      	add	sp, #8
    33e4:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    33e6:	2201      	movs	r2, #1
    33e8:	4b1c      	ldr	r3, [pc, #112]	; (345c <nm_spi_init+0xe0>)
    33ea:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    33ec:	4a21      	ldr	r2, [pc, #132]	; (3474 <nm_spi_init+0xf8>)
    33ee:	4922      	ldr	r1, [pc, #136]	; (3478 <nm_spi_init+0xfc>)
    33f0:	4822      	ldr	r0, [pc, #136]	; (347c <nm_spi_init+0x100>)
    33f2:	4b23      	ldr	r3, [pc, #140]	; (3480 <nm_spi_init+0x104>)
    33f4:	4798      	blx	r3
    33f6:	4823      	ldr	r0, [pc, #140]	; (3484 <nm_spi_init+0x108>)
    33f8:	4b23      	ldr	r3, [pc, #140]	; (3488 <nm_spi_init+0x10c>)
    33fa:	4798      	blx	r3
    33fc:	200d      	movs	r0, #13
    33fe:	4b23      	ldr	r3, [pc, #140]	; (348c <nm_spi_init+0x110>)
    3400:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    3402:	4669      	mov	r1, sp
    3404:	4816      	ldr	r0, [pc, #88]	; (3460 <nm_spi_init+0xe4>)
    3406:	4b17      	ldr	r3, [pc, #92]	; (3464 <nm_spi_init+0xe8>)
    3408:	4798      	blx	r3
    340a:	1e04      	subs	r4, r0, #0
    340c:	d1c2      	bne.n	3394 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    340e:	4a20      	ldr	r2, [pc, #128]	; (3490 <nm_spi_init+0x114>)
    3410:	4919      	ldr	r1, [pc, #100]	; (3478 <nm_spi_init+0xfc>)
    3412:	481a      	ldr	r0, [pc, #104]	; (347c <nm_spi_init+0x100>)
    3414:	4b1a      	ldr	r3, [pc, #104]	; (3480 <nm_spi_init+0x104>)
    3416:	4798      	blx	r3
    3418:	481e      	ldr	r0, [pc, #120]	; (3494 <nm_spi_init+0x118>)
    341a:	4b1b      	ldr	r3, [pc, #108]	; (3488 <nm_spi_init+0x10c>)
    341c:	4798      	blx	r3
    341e:	200d      	movs	r0, #13
    3420:	4b1a      	ldr	r3, [pc, #104]	; (348c <nm_spi_init+0x110>)
    3422:	4798      	blx	r3
			return 0;
    3424:	e7dc      	b.n	33e0 <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    3426:	4a1c      	ldr	r2, [pc, #112]	; (3498 <nm_spi_init+0x11c>)
    3428:	4913      	ldr	r1, [pc, #76]	; (3478 <nm_spi_init+0xfc>)
    342a:	4814      	ldr	r0, [pc, #80]	; (347c <nm_spi_init+0x100>)
    342c:	4b14      	ldr	r3, [pc, #80]	; (3480 <nm_spi_init+0x104>)
    342e:	4798      	blx	r3
    3430:	481a      	ldr	r0, [pc, #104]	; (349c <nm_spi_init+0x120>)
    3432:	4b15      	ldr	r3, [pc, #84]	; (3488 <nm_spi_init+0x10c>)
    3434:	4798      	blx	r3
    3436:	200d      	movs	r0, #13
    3438:	4b14      	ldr	r3, [pc, #80]	; (348c <nm_spi_init+0x110>)
    343a:	4798      	blx	r3
			return 0;
    343c:	e7d0      	b.n	33e0 <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    343e:	4a18      	ldr	r2, [pc, #96]	; (34a0 <nm_spi_init+0x124>)
    3440:	490d      	ldr	r1, [pc, #52]	; (3478 <nm_spi_init+0xfc>)
    3442:	480e      	ldr	r0, [pc, #56]	; (347c <nm_spi_init+0x100>)
    3444:	4b0e      	ldr	r3, [pc, #56]	; (3480 <nm_spi_init+0x104>)
    3446:	4798      	blx	r3
    3448:	4816      	ldr	r0, [pc, #88]	; (34a4 <nm_spi_init+0x128>)
    344a:	4b0f      	ldr	r3, [pc, #60]	; (3488 <nm_spi_init+0x10c>)
    344c:	4798      	blx	r3
    344e:	200d      	movs	r0, #13
    3450:	4b0e      	ldr	r3, [pc, #56]	; (348c <nm_spi_init+0x110>)
    3452:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    3454:	2406      	movs	r4, #6
    3456:	4264      	negs	r4, r4
    3458:	e7c2      	b.n	33e0 <nm_spi_init+0x64>
    345a:	46c0      	nop			; (mov r8, r8)
    345c:	2000009c 	.word	0x2000009c
    3460:	0000e824 	.word	0x0000e824
    3464:	00003199 	.word	0x00003199
    3468:	00003089 	.word	0x00003089
    346c:	00003339 	.word	0x00003339
    3470:	00003365 	.word	0x00003365
    3474:	000004c7 	.word	0x000004c7
    3478:	0000b764 	.word	0x0000b764
    347c:	0000b020 	.word	0x0000b020
    3480:	00009b31 	.word	0x00009b31
    3484:	0000b870 	.word	0x0000b870
    3488:	00009c4d 	.word	0x00009c4d
    348c:	00009b65 	.word	0x00009b65
    3490:	000004ca 	.word	0x000004ca
    3494:	0000b8c0 	.word	0x0000b8c0
    3498:	000004d4 	.word	0x000004d4
    349c:	0000b8ec 	.word	0x0000b8ec
    34a0:	000004de 	.word	0x000004de
    34a4:	0000b920 	.word	0x0000b920

000034a8 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    34a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    34aa:	46de      	mov	lr, fp
    34ac:	4657      	mov	r7, sl
    34ae:	464e      	mov	r6, r9
    34b0:	4645      	mov	r5, r8
    34b2:	b5e0      	push	{r5, r6, r7, lr}
    34b4:	b087      	sub	sp, #28
    34b6:	9002      	str	r0, [sp, #8]
    34b8:	9103      	str	r1, [sp, #12]
    34ba:	0016      	movs	r6, r2
    34bc:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    34be:	2300      	movs	r3, #0
    34c0:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    34c2:	2400      	movs	r4, #0
    34c4:	4b3e      	ldr	r3, [pc, #248]	; (35c0 <nm_spi_read_block+0x118>)
    34c6:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    34c8:	46a9      	mov	r9, r5
    34ca:	e037      	b.n	353c <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    34cc:	2301      	movs	r3, #1
    34ce:	469b      	mov	fp, r3
		size = 2;
    34d0:	3601      	adds	r6, #1
    34d2:	e035      	b.n	3540 <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    34d4:	20c8      	movs	r0, #200	; 0xc8
    34d6:	4b3b      	ldr	r3, [pc, #236]	; (35c4 <nm_spi_read_block+0x11c>)
    34d8:	4798      	blx	r3
	if (result != N_OK) {
    34da:	2801      	cmp	r0, #1
    34dc:	d045      	beq.n	356a <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    34de:	4a3a      	ldr	r2, [pc, #232]	; (35c8 <nm_spi_read_block+0x120>)
    34e0:	493a      	ldr	r1, [pc, #232]	; (35cc <nm_spi_read_block+0x124>)
    34e2:	483b      	ldr	r0, [pc, #236]	; (35d0 <nm_spi_read_block+0x128>)
    34e4:	4f3b      	ldr	r7, [pc, #236]	; (35d4 <nm_spi_read_block+0x12c>)
    34e6:	47b8      	blx	r7
    34e8:	9902      	ldr	r1, [sp, #8]
    34ea:	483b      	ldr	r0, [pc, #236]	; (35d8 <nm_spi_read_block+0x130>)
    34ec:	47b8      	blx	r7
    34ee:	200d      	movs	r0, #13
    34f0:	4b3a      	ldr	r3, [pc, #232]	; (35dc <nm_spi_read_block+0x134>)
    34f2:	4798      	blx	r3
		nm_bsp_sleep(1);
    34f4:	2001      	movs	r0, #1
    34f6:	4f3a      	ldr	r7, [pc, #232]	; (35e0 <nm_spi_read_block+0x138>)
    34f8:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    34fa:	9400      	str	r4, [sp, #0]
    34fc:	0023      	movs	r3, r4
    34fe:	0022      	movs	r2, r4
    3500:	0021      	movs	r1, r4
    3502:	20cf      	movs	r0, #207	; 0xcf
    3504:	4d2e      	ldr	r5, [pc, #184]	; (35c0 <nm_spi_read_block+0x118>)
    3506:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    3508:	20cf      	movs	r0, #207	; 0xcf
    350a:	4b2e      	ldr	r3, [pc, #184]	; (35c4 <nm_spi_read_block+0x11c>)
    350c:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    350e:	4a35      	ldr	r2, [pc, #212]	; (35e4 <nm_spi_read_block+0x13c>)
    3510:	492e      	ldr	r1, [pc, #184]	; (35cc <nm_spi_read_block+0x124>)
    3512:	482f      	ldr	r0, [pc, #188]	; (35d0 <nm_spi_read_block+0x128>)
    3514:	4b2f      	ldr	r3, [pc, #188]	; (35d4 <nm_spi_read_block+0x12c>)
    3516:	469a      	mov	sl, r3
    3518:	4798      	blx	r3
    351a:	0033      	movs	r3, r6
    351c:	9a02      	ldr	r2, [sp, #8]
    351e:	4649      	mov	r1, r9
    3520:	4831      	ldr	r0, [pc, #196]	; (35e8 <nm_spi_read_block+0x140>)
    3522:	47d0      	blx	sl
    3524:	200d      	movs	r0, #13
    3526:	4b2d      	ldr	r3, [pc, #180]	; (35dc <nm_spi_read_block+0x134>)
    3528:	4798      	blx	r3
		nm_bsp_sleep(1);
    352a:	2001      	movs	r0, #1
    352c:	47b8      	blx	r7
    352e:	2301      	movs	r3, #1
    3530:	425b      	negs	r3, r3
    3532:	469c      	mov	ip, r3
    3534:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    3536:	464b      	mov	r3, r9
    3538:	2b00      	cmp	r3, #0
    353a:	d038      	beq.n	35ae <nm_spi_read_block+0x106>
	if (size == 1)
    353c:	2e01      	cmp	r6, #1
    353e:	d0c5      	beq.n	34cc <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    3540:	9400      	str	r4, [sp, #0]
    3542:	0033      	movs	r3, r6
    3544:	0022      	movs	r2, r4
    3546:	9d02      	ldr	r5, [sp, #8]
    3548:	0029      	movs	r1, r5
    354a:	20c8      	movs	r0, #200	; 0xc8
    354c:	47c0      	blx	r8
	if (result != N_OK) {
    354e:	2801      	cmp	r0, #1
    3550:	d0c0      	beq.n	34d4 <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    3552:	4a26      	ldr	r2, [pc, #152]	; (35ec <nm_spi_read_block+0x144>)
    3554:	491d      	ldr	r1, [pc, #116]	; (35cc <nm_spi_read_block+0x124>)
    3556:	481e      	ldr	r0, [pc, #120]	; (35d0 <nm_spi_read_block+0x128>)
    3558:	4f1e      	ldr	r7, [pc, #120]	; (35d4 <nm_spi_read_block+0x12c>)
    355a:	47b8      	blx	r7
    355c:	0029      	movs	r1, r5
    355e:	4824      	ldr	r0, [pc, #144]	; (35f0 <nm_spi_read_block+0x148>)
    3560:	47b8      	blx	r7
    3562:	200d      	movs	r0, #13
    3564:	4b1d      	ldr	r3, [pc, #116]	; (35dc <nm_spi_read_block+0x134>)
    3566:	4798      	blx	r3
    3568:	e7c4      	b.n	34f4 <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    356a:	465b      	mov	r3, fp
    356c:	2b00      	cmp	r3, #0
    356e:	d016      	beq.n	359e <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    3570:	af05      	add	r7, sp, #20
    3572:	0022      	movs	r2, r4
    3574:	0031      	movs	r1, r6
    3576:	0038      	movs	r0, r7
    3578:	4b1e      	ldr	r3, [pc, #120]	; (35f4 <nm_spi_read_block+0x14c>)
    357a:	4798      	blx	r3
		buf[0] = tmp[0];
    357c:	783b      	ldrb	r3, [r7, #0]
    357e:	9a03      	ldr	r2, [sp, #12]
    3580:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    3582:	2801      	cmp	r0, #1
    3584:	d011      	beq.n	35aa <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    3586:	4a1c      	ldr	r2, [pc, #112]	; (35f8 <nm_spi_read_block+0x150>)
    3588:	4910      	ldr	r1, [pc, #64]	; (35cc <nm_spi_read_block+0x124>)
    358a:	4811      	ldr	r0, [pc, #68]	; (35d0 <nm_spi_read_block+0x128>)
    358c:	4b11      	ldr	r3, [pc, #68]	; (35d4 <nm_spi_read_block+0x12c>)
    358e:	4798      	blx	r3
    3590:	481a      	ldr	r0, [pc, #104]	; (35fc <nm_spi_read_block+0x154>)
    3592:	4b1b      	ldr	r3, [pc, #108]	; (3600 <nm_spi_read_block+0x158>)
    3594:	4798      	blx	r3
    3596:	200d      	movs	r0, #13
    3598:	4b10      	ldr	r3, [pc, #64]	; (35dc <nm_spi_read_block+0x134>)
    359a:	4798      	blx	r3
    359c:	e7aa      	b.n	34f4 <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    359e:	0022      	movs	r2, r4
    35a0:	0031      	movs	r1, r6
    35a2:	9803      	ldr	r0, [sp, #12]
    35a4:	4b13      	ldr	r3, [pc, #76]	; (35f4 <nm_spi_read_block+0x14c>)
    35a6:	4798      	blx	r3
    35a8:	e7eb      	b.n	3582 <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    35aa:	2000      	movs	r0, #0
    35ac:	e001      	b.n	35b2 <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    35ae:	2006      	movs	r0, #6
    35b0:	4240      	negs	r0, r0

	return s8Ret;
}
    35b2:	b007      	add	sp, #28
    35b4:	bc3c      	pop	{r2, r3, r4, r5}
    35b6:	4690      	mov	r8, r2
    35b8:	4699      	mov	r9, r3
    35ba:	46a2      	mov	sl, r4
    35bc:	46ab      	mov	fp, r5
    35be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35c0:	00002ccd 	.word	0x00002ccd
    35c4:	00002e6d 	.word	0x00002e6d
    35c8:	00000463 	.word	0x00000463
    35cc:	0000b758 	.word	0x0000b758
    35d0:	0000b020 	.word	0x0000b020
    35d4:	00009b31 	.word	0x00009b31
    35d8:	0000b974 	.word	0x0000b974
    35dc:	00009b65 	.word	0x00009b65
    35e0:	0000111d 	.word	0x0000111d
    35e4:	00000484 	.word	0x00000484
    35e8:	0000b9d4 	.word	0x0000b9d4
    35ec:	0000045d 	.word	0x0000045d
    35f0:	0000b944 	.word	0x0000b944
    35f4:	00002f41 	.word	0x00002f41
    35f8:	00000473 	.word	0x00000473
    35fc:	0000b9ac 	.word	0x0000b9ac
    3600:	00009c4d 	.word	0x00009c4d

00003604 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    3604:	b5f0      	push	{r4, r5, r6, r7, lr}
    3606:	46de      	mov	lr, fp
    3608:	4647      	mov	r7, r8
    360a:	b580      	push	{r7, lr}
    360c:	b089      	sub	sp, #36	; 0x24
    360e:	9004      	str	r0, [sp, #16]
    3610:	468b      	mov	fp, r1
    3612:	9203      	str	r2, [sp, #12]
    3614:	260a      	movs	r6, #10
    3616:	2780      	movs	r7, #128	; 0x80
    3618:	01bf      	lsls	r7, r7, #6
    361a:	466b      	mov	r3, sp
    361c:	82df      	strh	r7, [r3, #22]
    361e:	0035      	movs	r5, r6
    3620:	e02d      	b.n	367e <nm_spi_write_block+0x7a>
		size = 2;
    3622:	3301      	adds	r3, #1
    3624:	9303      	str	r3, [sp, #12]
    3626:	e02d      	b.n	3684 <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    3628:	4a83      	ldr	r2, [pc, #524]	; (3838 <nm_spi_write_block+0x234>)
    362a:	4984      	ldr	r1, [pc, #528]	; (383c <nm_spi_write_block+0x238>)
    362c:	4884      	ldr	r0, [pc, #528]	; (3840 <nm_spi_write_block+0x23c>)
    362e:	4c85      	ldr	r4, [pc, #532]	; (3844 <nm_spi_write_block+0x240>)
    3630:	47a0      	blx	r4
    3632:	0031      	movs	r1, r6
    3634:	4884      	ldr	r0, [pc, #528]	; (3848 <nm_spi_write_block+0x244>)
    3636:	47a0      	blx	r4
    3638:	200d      	movs	r0, #13
    363a:	4b84      	ldr	r3, [pc, #528]	; (384c <nm_spi_write_block+0x248>)
    363c:	4798      	blx	r3
		nm_bsp_sleep(1);
    363e:	2001      	movs	r0, #1
    3640:	4c83      	ldr	r4, [pc, #524]	; (3850 <nm_spi_write_block+0x24c>)
    3642:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3644:	2300      	movs	r3, #0
    3646:	9300      	str	r3, [sp, #0]
    3648:	2200      	movs	r2, #0
    364a:	2100      	movs	r1, #0
    364c:	20cf      	movs	r0, #207	; 0xcf
    364e:	4e81      	ldr	r6, [pc, #516]	; (3854 <nm_spi_write_block+0x250>)
    3650:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    3652:	20cf      	movs	r0, #207	; 0xcf
    3654:	4b80      	ldr	r3, [pc, #512]	; (3858 <nm_spi_write_block+0x254>)
    3656:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    3658:	4a80      	ldr	r2, [pc, #512]	; (385c <nm_spi_write_block+0x258>)
    365a:	4978      	ldr	r1, [pc, #480]	; (383c <nm_spi_write_block+0x238>)
    365c:	4878      	ldr	r0, [pc, #480]	; (3840 <nm_spi_write_block+0x23c>)
    365e:	4e79      	ldr	r6, [pc, #484]	; (3844 <nm_spi_write_block+0x240>)
    3660:	47b0      	blx	r6
    3662:	9b03      	ldr	r3, [sp, #12]
    3664:	9a04      	ldr	r2, [sp, #16]
    3666:	0029      	movs	r1, r5
    3668:	487d      	ldr	r0, [pc, #500]	; (3860 <nm_spi_write_block+0x25c>)
    366a:	47b0      	blx	r6
    366c:	200d      	movs	r0, #13
    366e:	4b77      	ldr	r3, [pc, #476]	; (384c <nm_spi_write_block+0x248>)
    3670:	4798      	blx	r3
		nm_bsp_sleep(1);
    3672:	2001      	movs	r0, #1
    3674:	47a0      	blx	r4
    3676:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    3678:	2d00      	cmp	r5, #0
    367a:	d100      	bne.n	367e <nm_spi_write_block+0x7a>
    367c:	e0d5      	b.n	382a <nm_spi_write_block+0x226>
	if (size == 1)
    367e:	9b03      	ldr	r3, [sp, #12]
    3680:	2b01      	cmp	r3, #1
    3682:	d0ce      	beq.n	3622 <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    3684:	2300      	movs	r3, #0
    3686:	9300      	str	r3, [sp, #0]
    3688:	9b03      	ldr	r3, [sp, #12]
    368a:	2200      	movs	r2, #0
    368c:	9e04      	ldr	r6, [sp, #16]
    368e:	0031      	movs	r1, r6
    3690:	20c7      	movs	r0, #199	; 0xc7
    3692:	4c70      	ldr	r4, [pc, #448]	; (3854 <nm_spi_write_block+0x250>)
    3694:	47a0      	blx	r4
	if (result != N_OK) {
    3696:	2801      	cmp	r0, #1
    3698:	d1c6      	bne.n	3628 <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    369a:	20c7      	movs	r0, #199	; 0xc7
    369c:	4b6e      	ldr	r3, [pc, #440]	; (3858 <nm_spi_write_block+0x254>)
    369e:	4798      	blx	r3
	if (result != N_OK) {
    36a0:	2801      	cmp	r0, #1
    36a2:	d00c      	beq.n	36be <nm_spi_write_block+0xba>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    36a4:	22f4      	movs	r2, #244	; 0xf4
    36a6:	0092      	lsls	r2, r2, #2
    36a8:	4964      	ldr	r1, [pc, #400]	; (383c <nm_spi_write_block+0x238>)
    36aa:	4865      	ldr	r0, [pc, #404]	; (3840 <nm_spi_write_block+0x23c>)
    36ac:	4c65      	ldr	r4, [pc, #404]	; (3844 <nm_spi_write_block+0x240>)
    36ae:	47a0      	blx	r4
    36b0:	9904      	ldr	r1, [sp, #16]
    36b2:	486c      	ldr	r0, [pc, #432]	; (3864 <nm_spi_write_block+0x260>)
    36b4:	47a0      	blx	r4
    36b6:	200d      	movs	r0, #13
    36b8:	4b64      	ldr	r3, [pc, #400]	; (384c <nm_spi_write_block+0x248>)
    36ba:	4798      	blx	r3
    36bc:	e7bf      	b.n	363e <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    36be:	2200      	movs	r2, #0
    36c0:	ab07      	add	r3, sp, #28
    36c2:	801a      	strh	r2, [r3, #0]
    36c4:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    36c6:	2600      	movs	r6, #0
				order = 0x1;
    36c8:	46a8      	mov	r8, r5
    36ca:	0035      	movs	r5, r6
    36cc:	0026      	movs	r6, r4
    36ce:	e021      	b.n	3714 <nm_spi_write_block+0x110>
				order = 0x2;
    36d0:	2300      	movs	r3, #0
    36d2:	42b7      	cmp	r7, r6
    36d4:	415b      	adcs	r3, r3
    36d6:	3302      	adds	r3, #2
		cmd |= order;
    36d8:	200b      	movs	r0, #11
    36da:	aa04      	add	r2, sp, #16
    36dc:	4694      	mov	ip, r2
    36de:	4460      	add	r0, ip
    36e0:	2210      	movs	r2, #16
    36e2:	4252      	negs	r2, r2
    36e4:	4313      	orrs	r3, r2
    36e6:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    36e8:	2101      	movs	r1, #1
    36ea:	4b5f      	ldr	r3, [pc, #380]	; (3868 <nm_spi_write_block+0x264>)
    36ec:	4798      	blx	r3
    36ee:	2800      	cmp	r0, #0
    36f0:	d11d      	bne.n	372e <nm_spi_write_block+0x12a>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    36f2:	465b      	mov	r3, fp
    36f4:	1958      	adds	r0, r3, r5
    36f6:	0021      	movs	r1, r4
    36f8:	4b5b      	ldr	r3, [pc, #364]	; (3868 <nm_spi_write_block+0x264>)
    36fa:	4798      	blx	r3
    36fc:	2800      	cmp	r0, #0
    36fe:	d130      	bne.n	3762 <nm_spi_write_block+0x15e>
		if (!gu8Crc_off) {
    3700:	4b5a      	ldr	r3, [pc, #360]	; (386c <nm_spi_write_block+0x268>)
    3702:	781b      	ldrb	r3, [r3, #0]
    3704:	2b00      	cmp	r3, #0
    3706:	d039      	beq.n	377c <nm_spi_write_block+0x178>
		ix += nbytes;
    3708:	1965      	adds	r5, r4, r5
    370a:	b22d      	sxth	r5, r5
		sz -= nbytes;
    370c:	1b36      	subs	r6, r6, r4
    370e:	b2b6      	uxth	r6, r6
	} while (sz);
    3710:	2e00      	cmp	r6, #0
    3712:	d053      	beq.n	37bc <nm_spi_write_block+0x1b8>
    3714:	1c34      	adds	r4, r6, #0
    3716:	42be      	cmp	r6, r7
    3718:	d901      	bls.n	371e <nm_spi_write_block+0x11a>
    371a:	466b      	mov	r3, sp
    371c:	8adc      	ldrh	r4, [r3, #22]
    371e:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    3720:	2d00      	cmp	r5, #0
    3722:	d1d5      	bne.n	36d0 <nm_spi_write_block+0xcc>
				order = 0x3;
    3724:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    3726:	42be      	cmp	r6, r7
    3728:	d9d6      	bls.n	36d8 <nm_spi_write_block+0xd4>
				order = 0x1;
    372a:	3b02      	subs	r3, #2
    372c:	e7d4      	b.n	36d8 <nm_spi_write_block+0xd4>
    372e:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    3730:	22d4      	movs	r2, #212	; 0xd4
    3732:	0092      	lsls	r2, r2, #2
    3734:	494e      	ldr	r1, [pc, #312]	; (3870 <nm_spi_write_block+0x26c>)
    3736:	4842      	ldr	r0, [pc, #264]	; (3840 <nm_spi_write_block+0x23c>)
    3738:	4b42      	ldr	r3, [pc, #264]	; (3844 <nm_spi_write_block+0x240>)
    373a:	4798      	blx	r3
    373c:	484d      	ldr	r0, [pc, #308]	; (3874 <nm_spi_write_block+0x270>)
    373e:	4b4e      	ldr	r3, [pc, #312]	; (3878 <nm_spi_write_block+0x274>)
    3740:	4798      	blx	r3
    3742:	200d      	movs	r0, #13
    3744:	4b41      	ldr	r3, [pc, #260]	; (384c <nm_spi_write_block+0x248>)
    3746:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    3748:	22f8      	movs	r2, #248	; 0xf8
    374a:	0092      	lsls	r2, r2, #2
    374c:	493b      	ldr	r1, [pc, #236]	; (383c <nm_spi_write_block+0x238>)
    374e:	483c      	ldr	r0, [pc, #240]	; (3840 <nm_spi_write_block+0x23c>)
    3750:	4b3c      	ldr	r3, [pc, #240]	; (3844 <nm_spi_write_block+0x240>)
    3752:	4798      	blx	r3
    3754:	4849      	ldr	r0, [pc, #292]	; (387c <nm_spi_write_block+0x278>)
    3756:	4b48      	ldr	r3, [pc, #288]	; (3878 <nm_spi_write_block+0x274>)
    3758:	4798      	blx	r3
    375a:	200d      	movs	r0, #13
    375c:	4b3b      	ldr	r3, [pc, #236]	; (384c <nm_spi_write_block+0x248>)
    375e:	4798      	blx	r3
    3760:	e76d      	b.n	363e <nm_spi_write_block+0x3a>
    3762:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    3764:	4a46      	ldr	r2, [pc, #280]	; (3880 <nm_spi_write_block+0x27c>)
    3766:	4942      	ldr	r1, [pc, #264]	; (3870 <nm_spi_write_block+0x26c>)
    3768:	4835      	ldr	r0, [pc, #212]	; (3840 <nm_spi_write_block+0x23c>)
    376a:	4b36      	ldr	r3, [pc, #216]	; (3844 <nm_spi_write_block+0x240>)
    376c:	4798      	blx	r3
    376e:	4845      	ldr	r0, [pc, #276]	; (3884 <nm_spi_write_block+0x280>)
    3770:	4b41      	ldr	r3, [pc, #260]	; (3878 <nm_spi_write_block+0x274>)
    3772:	4798      	blx	r3
    3774:	200d      	movs	r0, #13
    3776:	4b35      	ldr	r3, [pc, #212]	; (384c <nm_spi_write_block+0x248>)
    3778:	4798      	blx	r3
    377a:	e7e5      	b.n	3748 <nm_spi_write_block+0x144>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    377c:	2102      	movs	r1, #2
    377e:	a807      	add	r0, sp, #28
    3780:	4b39      	ldr	r3, [pc, #228]	; (3868 <nm_spi_write_block+0x264>)
    3782:	4798      	blx	r3
    3784:	2800      	cmp	r0, #0
    3786:	d0bf      	beq.n	3708 <nm_spi_write_block+0x104>
    3788:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    378a:	4a3f      	ldr	r2, [pc, #252]	; (3888 <nm_spi_write_block+0x284>)
    378c:	4938      	ldr	r1, [pc, #224]	; (3870 <nm_spi_write_block+0x26c>)
    378e:	482c      	ldr	r0, [pc, #176]	; (3840 <nm_spi_write_block+0x23c>)
    3790:	4b2c      	ldr	r3, [pc, #176]	; (3844 <nm_spi_write_block+0x240>)
    3792:	4798      	blx	r3
    3794:	483d      	ldr	r0, [pc, #244]	; (388c <nm_spi_write_block+0x288>)
    3796:	4b38      	ldr	r3, [pc, #224]	; (3878 <nm_spi_write_block+0x274>)
    3798:	4798      	blx	r3
    379a:	200d      	movs	r0, #13
    379c:	4b2b      	ldr	r3, [pc, #172]	; (384c <nm_spi_write_block+0x248>)
    379e:	4798      	blx	r3
    37a0:	e7d2      	b.n	3748 <nm_spi_write_block+0x144>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    37a2:	223c      	movs	r2, #60	; 0x3c
    37a4:	32ff      	adds	r2, #255	; 0xff
    37a6:	493a      	ldr	r1, [pc, #232]	; (3890 <nm_spi_write_block+0x28c>)
    37a8:	4825      	ldr	r0, [pc, #148]	; (3840 <nm_spi_write_block+0x23c>)
    37aa:	4b26      	ldr	r3, [pc, #152]	; (3844 <nm_spi_write_block+0x240>)
    37ac:	4798      	blx	r3
    37ae:	4839      	ldr	r0, [pc, #228]	; (3894 <nm_spi_write_block+0x290>)
    37b0:	4b31      	ldr	r3, [pc, #196]	; (3878 <nm_spi_write_block+0x274>)
    37b2:	4798      	blx	r3
    37b4:	200d      	movs	r0, #13
    37b6:	4b25      	ldr	r3, [pc, #148]	; (384c <nm_spi_write_block+0x248>)
    37b8:	4798      	blx	r3
    37ba:	e027      	b.n	380c <nm_spi_write_block+0x208>
    37bc:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    37be:	4b2b      	ldr	r3, [pc, #172]	; (386c <nm_spi_write_block+0x268>)
    37c0:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    37c2:	1e63      	subs	r3, r4, #1
    37c4:	419c      	sbcs	r4, r3
    37c6:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    37c8:	b2a1      	uxth	r1, r4
    37ca:	a807      	add	r0, sp, #28
    37cc:	4b32      	ldr	r3, [pc, #200]	; (3898 <nm_spi_write_block+0x294>)
    37ce:	4798      	blx	r3
    37d0:	2800      	cmp	r0, #0
    37d2:	d1e6      	bne.n	37a2 <nm_spi_write_block+0x19e>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    37d4:	ab08      	add	r3, sp, #32
    37d6:	191b      	adds	r3, r3, r4
    37d8:	3b05      	subs	r3, #5
    37da:	781b      	ldrb	r3, [r3, #0]
    37dc:	2b00      	cmp	r3, #0
    37de:	d106      	bne.n	37ee <nm_spi_write_block+0x1ea>
    37e0:	ab08      	add	r3, sp, #32
    37e2:	469c      	mov	ip, r3
    37e4:	4464      	add	r4, ip
    37e6:	3c06      	subs	r4, #6
    37e8:	7823      	ldrb	r3, [r4, #0]
    37ea:	2bc3      	cmp	r3, #195	; 0xc3
    37ec:	d01b      	beq.n	3826 <nm_spi_write_block+0x222>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    37ee:	22a1      	movs	r2, #161	; 0xa1
    37f0:	0052      	lsls	r2, r2, #1
    37f2:	4927      	ldr	r1, [pc, #156]	; (3890 <nm_spi_write_block+0x28c>)
    37f4:	4812      	ldr	r0, [pc, #72]	; (3840 <nm_spi_write_block+0x23c>)
    37f6:	4c13      	ldr	r4, [pc, #76]	; (3844 <nm_spi_write_block+0x240>)
    37f8:	47a0      	blx	r4
    37fa:	a907      	add	r1, sp, #28
    37fc:	788b      	ldrb	r3, [r1, #2]
    37fe:	784a      	ldrb	r2, [r1, #1]
    3800:	7809      	ldrb	r1, [r1, #0]
    3802:	4826      	ldr	r0, [pc, #152]	; (389c <nm_spi_write_block+0x298>)
    3804:	47a0      	blx	r4
    3806:	200d      	movs	r0, #13
    3808:	4b10      	ldr	r3, [pc, #64]	; (384c <nm_spi_write_block+0x248>)
    380a:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    380c:	22fa      	movs	r2, #250	; 0xfa
    380e:	0092      	lsls	r2, r2, #2
    3810:	490a      	ldr	r1, [pc, #40]	; (383c <nm_spi_write_block+0x238>)
    3812:	480b      	ldr	r0, [pc, #44]	; (3840 <nm_spi_write_block+0x23c>)
    3814:	4b0b      	ldr	r3, [pc, #44]	; (3844 <nm_spi_write_block+0x240>)
    3816:	4798      	blx	r3
    3818:	4818      	ldr	r0, [pc, #96]	; (387c <nm_spi_write_block+0x278>)
    381a:	4b17      	ldr	r3, [pc, #92]	; (3878 <nm_spi_write_block+0x274>)
    381c:	4798      	blx	r3
    381e:	200d      	movs	r0, #13
    3820:	4b0a      	ldr	r3, [pc, #40]	; (384c <nm_spi_write_block+0x248>)
    3822:	4798      	blx	r3
    3824:	e70b      	b.n	363e <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    3826:	2000      	movs	r0, #0
    3828:	e001      	b.n	382e <nm_spi_write_block+0x22a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    382a:	2006      	movs	r0, #6
    382c:	4240      	negs	r0, r0

	return s8Ret;
}
    382e:	b009      	add	sp, #36	; 0x24
    3830:	bc0c      	pop	{r2, r3}
    3832:	4690      	mov	r8, r2
    3834:	469b      	mov	fp, r3
    3836:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3838:	000003ca 	.word	0x000003ca
    383c:	0000b738 	.word	0x0000b738
    3840:	0000b020 	.word	0x0000b020
    3844:	00009b31 	.word	0x00009b31
    3848:	0000b9f0 	.word	0x0000b9f0
    384c:	00009b65 	.word	0x00009b65
    3850:	0000111d 	.word	0x0000111d
    3854:	00002ccd 	.word	0x00002ccd
    3858:	00002e6d 	.word	0x00002e6d
    385c:	000003f2 	.word	0x000003f2
    3860:	0000b9d4 	.word	0x0000b9d4
    3864:	0000ba20 	.word	0x0000ba20
    3868:	00002cad 	.word	0x00002cad
    386c:	2000009c 	.word	0x2000009c
    3870:	0000b718 	.word	0x0000b718
    3874:	0000ba58 	.word	0x0000ba58
    3878:	00009c4d 	.word	0x00009c4d
    387c:	0000bb4c 	.word	0x0000bb4c
    3880:	00000359 	.word	0x00000359
    3884:	0000ba90 	.word	0x0000ba90
    3888:	00000363 	.word	0x00000363
    388c:	0000bac4 	.word	0x0000bac4
    3890:	0000b6ec 	.word	0x0000b6ec
    3894:	0000bafc 	.word	0x0000bafc
    3898:	00002e4d 	.word	0x00002e4d
    389c:	0000bb1c 	.word	0x0000bb1c

000038a0 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    38a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    38a2:	46de      	mov	lr, fp
    38a4:	4657      	mov	r7, sl
    38a6:	464e      	mov	r6, r9
    38a8:	4645      	mov	r5, r8
    38aa:	b5e0      	push	{r5, r6, r7, lr}
    38ac:	b085      	sub	sp, #20
    38ae:	9001      	str	r0, [sp, #4]
    38b0:	000e      	movs	r6, r1
    38b2:	9202      	str	r2, [sp, #8]
    38b4:	001d      	movs	r5, r3
    38b6:	ab0e      	add	r3, sp, #56	; 0x38
    38b8:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    38ba:	2c00      	cmp	r4, #0
    38bc:	d064      	beq.n	3988 <Socket_ReadSocketData+0xe8>
    38be:	0103      	lsls	r3, r0, #4
    38c0:	4935      	ldr	r1, [pc, #212]	; (3998 <Socket_ReadSocketData+0xf8>)
    38c2:	585b      	ldr	r3, [r3, r1]
    38c4:	2b00      	cmp	r3, #0
    38c6:	d05f      	beq.n	3988 <Socket_ReadSocketData+0xe8>
    38c8:	0101      	lsls	r1, r0, #4
    38ca:	4b33      	ldr	r3, [pc, #204]	; (3998 <Socket_ReadSocketData+0xf8>)
    38cc:	185b      	adds	r3, r3, r1
    38ce:	889b      	ldrh	r3, [r3, #4]
    38d0:	b29b      	uxth	r3, r3
    38d2:	2b00      	cmp	r3, #0
    38d4:	d058      	beq.n	3988 <Socket_ReadSocketData+0xe8>
    38d6:	4b30      	ldr	r3, [pc, #192]	; (3998 <Socket_ReadSocketData+0xf8>)
    38d8:	185b      	adds	r3, r3, r1
    38da:	7a9b      	ldrb	r3, [r3, #10]
    38dc:	2b01      	cmp	r3, #1
    38de:	d153      	bne.n	3988 <Socket_ReadSocketData+0xe8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    38e0:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    38e2:	4b2d      	ldr	r3, [pc, #180]	; (3998 <Socket_ReadSocketData+0xf8>)
    38e4:	469b      	mov	fp, r3
    38e6:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    38e8:	465b      	mov	r3, fp
    38ea:	220a      	movs	r2, #10
    38ec:	4690      	mov	r8, r2
    38ee:	44d8      	add	r8, fp
    38f0:	468a      	mov	sl, r1
    38f2:	9500      	str	r5, [sp, #0]
    38f4:	9303      	str	r3, [sp, #12]
    38f6:	e015      	b.n	3924 <Socket_ReadSocketData+0x84>
    38f8:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    38fa:	2301      	movs	r3, #1
    38fc:	e01c      	b.n	3938 <Socket_ReadSocketData+0x98>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    38fe:	3301      	adds	r3, #1
    3900:	2200      	movs	r2, #0
    3902:	2100      	movs	r1, #0
    3904:	2000      	movs	r0, #0
    3906:	4c25      	ldr	r4, [pc, #148]	; (399c <Socket_ReadSocketData+0xfc>)
    3908:	47a0      	blx	r4
    390a:	e03d      	b.n	3988 <Socket_ReadSocketData+0xe8>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    390c:	4824      	ldr	r0, [pc, #144]	; (39a0 <Socket_ReadSocketData+0x100>)
    390e:	4d25      	ldr	r5, [pc, #148]	; (39a4 <Socket_ReadSocketData+0x104>)
    3910:	47a8      	blx	r5
    3912:	0021      	movs	r1, r4
    3914:	4824      	ldr	r0, [pc, #144]	; (39a8 <Socket_ReadSocketData+0x108>)
    3916:	47a8      	blx	r5
    3918:	200d      	movs	r0, #13
    391a:	4b24      	ldr	r3, [pc, #144]	; (39ac <Socket_ReadSocketData+0x10c>)
    391c:	4798      	blx	r3
				break;
    391e:	e033      	b.n	3988 <Socket_ReadSocketData+0xe8>
			}
		}while(u16ReadCount != 0);
    3920:	2c00      	cmp	r4, #0
    3922:	d031      	beq.n	3988 <Socket_ReadSocketData+0xe8>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    3924:	465b      	mov	r3, fp
    3926:	889b      	ldrh	r3, [r3, #4]
    3928:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    392a:	b21b      	sxth	r3, r3
    392c:	2b00      	cmp	r3, #0
    392e:	dde3      	ble.n	38f8 <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    3930:	9b03      	ldr	r3, [sp, #12]
    3932:	889d      	ldrh	r5, [r3, #4]
    3934:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    3936:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    3938:	4a17      	ldr	r2, [pc, #92]	; (3998 <Socket_ReadSocketData+0xf8>)
    393a:	4651      	mov	r1, sl
    393c:	5889      	ldr	r1, [r1, r2]
    393e:	002a      	movs	r2, r5
    3940:	9800      	ldr	r0, [sp, #0]
    3942:	4f16      	ldr	r7, [pc, #88]	; (399c <Socket_ReadSocketData+0xfc>)
    3944:	47b8      	blx	r7
    3946:	2800      	cmp	r0, #0
    3948:	d1e0      	bne.n	390c <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    394a:	4b13      	ldr	r3, [pc, #76]	; (3998 <Socket_ReadSocketData+0xf8>)
    394c:	4652      	mov	r2, sl
    394e:	58d3      	ldr	r3, [r2, r3]
    3950:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    3952:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    3954:	88f3      	ldrh	r3, [r6, #6]
    3956:	1b5b      	subs	r3, r3, r5
    3958:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    395a:	4b15      	ldr	r3, [pc, #84]	; (39b0 <Socket_ReadSocketData+0x110>)
    395c:	681b      	ldr	r3, [r3, #0]
    395e:	2b00      	cmp	r3, #0
    3960:	d005      	beq.n	396e <Socket_ReadSocketData+0xce>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    3962:	4b13      	ldr	r3, [pc, #76]	; (39b0 <Socket_ReadSocketData+0x110>)
    3964:	681b      	ldr	r3, [r3, #0]
    3966:	0032      	movs	r2, r6
    3968:	9902      	ldr	r1, [sp, #8]
    396a:	9801      	ldr	r0, [sp, #4]
    396c:	4798      	blx	r3
				u16ReadCount -= u16Read;
    396e:	1b64      	subs	r4, r4, r5
    3970:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    3972:	9b00      	ldr	r3, [sp, #0]
    3974:	469c      	mov	ip, r3
    3976:	44ac      	add	ip, r5
    3978:	4663      	mov	r3, ip
    397a:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    397c:	4643      	mov	r3, r8
    397e:	781b      	ldrb	r3, [r3, #0]
    3980:	2b00      	cmp	r3, #0
    3982:	d1cd      	bne.n	3920 <Socket_ReadSocketData+0x80>
    3984:	2c00      	cmp	r4, #0
    3986:	d1ba      	bne.n	38fe <Socket_ReadSocketData+0x5e>
	}
}
    3988:	b005      	add	sp, #20
    398a:	bc3c      	pop	{r2, r3, r4, r5}
    398c:	4690      	mov	r8, r2
    398e:	4699      	mov	r9, r3
    3990:	46a2      	mov	sl, r4
    3992:	46ab      	mov	fp, r5
    3994:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3996:	46c0      	nop			; (mov r8, r8)
    3998:	200002e4 	.word	0x200002e4
    399c:	00001c41 	.word	0x00001c41
    39a0:	0000b350 	.word	0x0000b350
    39a4:	00009b31 	.word	0x00009b31
    39a8:	0000bdb4 	.word	0x0000bdb4
    39ac:	00009b65 	.word	0x00009b65
    39b0:	20000394 	.word	0x20000394

000039b4 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    39b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    39b6:	46d6      	mov	lr, sl
    39b8:	464f      	mov	r7, r9
    39ba:	4646      	mov	r6, r8
    39bc:	b5c0      	push	{r6, r7, lr}
    39be:	b09a      	sub	sp, #104	; 0x68
    39c0:	000d      	movs	r5, r1
    39c2:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    39c4:	2841      	cmp	r0, #65	; 0x41
    39c6:	d039      	beq.n	3a3c <m2m_ip_cb+0x88>
    39c8:	2854      	cmp	r0, #84	; 0x54
    39ca:	d037      	beq.n	3a3c <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    39cc:	2842      	cmp	r0, #66	; 0x42
    39ce:	d053      	beq.n	3a78 <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    39d0:	2843      	cmp	r0, #67	; 0x43
    39d2:	d06a      	beq.n	3aaa <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    39d4:	2844      	cmp	r0, #68	; 0x44
    39d6:	d100      	bne.n	39da <m2m_ip_cb+0x26>
    39d8:	e0af      	b.n	3b3a <m2m_ip_cb+0x186>
    39da:	284b      	cmp	r0, #75	; 0x4b
    39dc:	d100      	bne.n	39e0 <m2m_ip_cb+0x2c>
    39de:	e0ac      	b.n	3b3a <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    39e0:	284a      	cmp	r0, #74	; 0x4a
    39e2:	d100      	bne.n	39e6 <m2m_ip_cb+0x32>
    39e4:	e0cf      	b.n	3b86 <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    39e6:	2846      	cmp	r0, #70	; 0x46
    39e8:	d100      	bne.n	39ec <m2m_ip_cb+0x38>
    39ea:	e0e5      	b.n	3bb8 <m2m_ip_cb+0x204>
    39ec:	2848      	cmp	r0, #72	; 0x48
    39ee:	d100      	bne.n	39f2 <m2m_ip_cb+0x3e>
    39f0:	e10e      	b.n	3c10 <m2m_ip_cb+0x25c>
    39f2:	284d      	cmp	r0, #77	; 0x4d
    39f4:	d100      	bne.n	39f8 <m2m_ip_cb+0x44>
    39f6:	e0dc      	b.n	3bb2 <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    39f8:	2845      	cmp	r0, #69	; 0x45
    39fa:	d100      	bne.n	39fe <m2m_ip_cb+0x4a>
    39fc:	e12c      	b.n	3c58 <m2m_ip_cb+0x2a4>
    39fe:	2847      	cmp	r0, #71	; 0x47
    3a00:	d100      	bne.n	3a04 <m2m_ip_cb+0x50>
    3a02:	e14d      	b.n	3ca0 <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    3a04:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    3a06:	284c      	cmp	r0, #76	; 0x4c
    3a08:	d100      	bne.n	3a0c <m2m_ip_cb+0x58>
    3a0a:	e126      	b.n	3c5a <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    3a0c:	2852      	cmp	r0, #82	; 0x52
    3a0e:	d12d      	bne.n	3a6c <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    3a10:	2301      	movs	r3, #1
    3a12:	2214      	movs	r2, #20
    3a14:	a909      	add	r1, sp, #36	; 0x24
    3a16:	0020      	movs	r0, r4
    3a18:	4ca2      	ldr	r4, [pc, #648]	; (3ca4 <m2m_ip_cb+0x2f0>)
    3a1a:	47a0      	blx	r4
    3a1c:	2800      	cmp	r0, #0
    3a1e:	d125      	bne.n	3a6c <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    3a20:	4ba1      	ldr	r3, [pc, #644]	; (3ca8 <m2m_ip_cb+0x2f4>)
    3a22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3a24:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    3a26:	681b      	ldr	r3, [r3, #0]
    3a28:	2b00      	cmp	r3, #0
    3a2a:	d01f      	beq.n	3a6c <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    3a2c:	4b9e      	ldr	r3, [pc, #632]	; (3ca8 <m2m_ip_cb+0x2f4>)
    3a2e:	681c      	ldr	r4, [r3, #0]
    3a30:	ab09      	add	r3, sp, #36	; 0x24
    3a32:	7c1a      	ldrb	r2, [r3, #16]
    3a34:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3a36:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a38:	47a0      	blx	r4
			}
		}
	}
}
    3a3a:	e017      	b.n	3a6c <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    3a3c:	2300      	movs	r3, #0
    3a3e:	2204      	movs	r2, #4
    3a40:	a909      	add	r1, sp, #36	; 0x24
    3a42:	0020      	movs	r0, r4
    3a44:	4c97      	ldr	r4, [pc, #604]	; (3ca4 <m2m_ip_cb+0x2f0>)
    3a46:	47a0      	blx	r4
    3a48:	2800      	cmp	r0, #0
    3a4a:	d10f      	bne.n	3a6c <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    3a4c:	ab09      	add	r3, sp, #36	; 0x24
    3a4e:	785a      	ldrb	r2, [r3, #1]
    3a50:	ab05      	add	r3, sp, #20
    3a52:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    3a54:	4b95      	ldr	r3, [pc, #596]	; (3cac <m2m_ip_cb+0x2f8>)
    3a56:	681b      	ldr	r3, [r3, #0]
    3a58:	2b00      	cmp	r3, #0
    3a5a:	d007      	beq.n	3a6c <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    3a5c:	4b93      	ldr	r3, [pc, #588]	; (3cac <m2m_ip_cb+0x2f8>)
    3a5e:	681b      	ldr	r3, [r3, #0]
    3a60:	aa09      	add	r2, sp, #36	; 0x24
    3a62:	2000      	movs	r0, #0
    3a64:	5610      	ldrsb	r0, [r2, r0]
    3a66:	aa05      	add	r2, sp, #20
    3a68:	2101      	movs	r1, #1
    3a6a:	4798      	blx	r3
}
    3a6c:	b01a      	add	sp, #104	; 0x68
    3a6e:	bc1c      	pop	{r2, r3, r4}
    3a70:	4690      	mov	r8, r2
    3a72:	4699      	mov	r9, r3
    3a74:	46a2      	mov	sl, r4
    3a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    3a78:	2300      	movs	r3, #0
    3a7a:	2204      	movs	r2, #4
    3a7c:	a909      	add	r1, sp, #36	; 0x24
    3a7e:	0020      	movs	r0, r4
    3a80:	4c88      	ldr	r4, [pc, #544]	; (3ca4 <m2m_ip_cb+0x2f0>)
    3a82:	47a0      	blx	r4
    3a84:	2800      	cmp	r0, #0
    3a86:	d1f1      	bne.n	3a6c <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    3a88:	ab09      	add	r3, sp, #36	; 0x24
    3a8a:	785a      	ldrb	r2, [r3, #1]
    3a8c:	ab05      	add	r3, sp, #20
    3a8e:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    3a90:	4b86      	ldr	r3, [pc, #536]	; (3cac <m2m_ip_cb+0x2f8>)
    3a92:	681b      	ldr	r3, [r3, #0]
    3a94:	2b00      	cmp	r3, #0
    3a96:	d0e9      	beq.n	3a6c <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    3a98:	4b84      	ldr	r3, [pc, #528]	; (3cac <m2m_ip_cb+0x2f8>)
    3a9a:	681b      	ldr	r3, [r3, #0]
    3a9c:	aa09      	add	r2, sp, #36	; 0x24
    3a9e:	2000      	movs	r0, #0
    3aa0:	5610      	ldrsb	r0, [r2, r0]
    3aa2:	aa05      	add	r2, sp, #20
    3aa4:	2102      	movs	r1, #2
    3aa6:	4798      	blx	r3
    3aa8:	e7e0      	b.n	3a6c <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    3aaa:	2300      	movs	r3, #0
    3aac:	220c      	movs	r2, #12
    3aae:	a905      	add	r1, sp, #20
    3ab0:	0020      	movs	r0, r4
    3ab2:	4c7c      	ldr	r4, [pc, #496]	; (3ca4 <m2m_ip_cb+0x2f0>)
    3ab4:	47a0      	blx	r4
    3ab6:	2800      	cmp	r0, #0
    3ab8:	d1d8      	bne.n	3a6c <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    3aba:	ab05      	add	r3, sp, #20
    3abc:	2209      	movs	r2, #9
    3abe:	569a      	ldrsb	r2, [r3, r2]
    3ac0:	2a00      	cmp	r2, #0
    3ac2:	db24      	blt.n	3b0e <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    3ac4:	0018      	movs	r0, r3
    3ac6:	2108      	movs	r1, #8
    3ac8:	5659      	ldrsb	r1, [r3, r1]
    3aca:	4b79      	ldr	r3, [pc, #484]	; (3cb0 <m2m_ip_cb+0x2fc>)
    3acc:	0109      	lsls	r1, r1, #4
    3ace:	1859      	adds	r1, r3, r1
    3ad0:	7ac9      	ldrb	r1, [r1, #11]
    3ad2:	b2c9      	uxtb	r1, r1
    3ad4:	0114      	lsls	r4, r2, #4
    3ad6:	191b      	adds	r3, r3, r4
    3ad8:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    3ada:	2101      	movs	r1, #1
    3adc:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    3ade:	8941      	ldrh	r1, [r0, #10]
    3ae0:	3908      	subs	r1, #8
    3ae2:	b289      	uxth	r1, r1
    3ae4:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    3ae6:	4973      	ldr	r1, [pc, #460]	; (3cb4 <m2m_ip_cb+0x300>)
    3ae8:	880b      	ldrh	r3, [r1, #0]
    3aea:	3301      	adds	r3, #1
    3aec:	b29b      	uxth	r3, r3
    3aee:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    3af0:	880b      	ldrh	r3, [r1, #0]
    3af2:	b29b      	uxth	r3, r3
    3af4:	2b00      	cmp	r3, #0
    3af6:	d103      	bne.n	3b00 <m2m_ip_cb+0x14c>
					++gu16SessionID;
    3af8:	880b      	ldrh	r3, [r1, #0]
    3afa:	3301      	adds	r3, #1
    3afc:	b29b      	uxth	r3, r3
    3afe:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    3b00:	4b6c      	ldr	r3, [pc, #432]	; (3cb4 <m2m_ip_cb+0x300>)
    3b02:	8819      	ldrh	r1, [r3, #0]
    3b04:	b289      	uxth	r1, r1
    3b06:	0110      	lsls	r0, r2, #4
    3b08:	4b69      	ldr	r3, [pc, #420]	; (3cb0 <m2m_ip_cb+0x2fc>)
    3b0a:	181b      	adds	r3, r3, r0
    3b0c:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    3b0e:	ab09      	add	r3, sp, #36	; 0x24
    3b10:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    3b12:	2202      	movs	r2, #2
    3b14:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    3b16:	aa05      	add	r2, sp, #20
    3b18:	8851      	ldrh	r1, [r2, #2]
    3b1a:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    3b1c:	9a06      	ldr	r2, [sp, #24]
    3b1e:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    3b20:	4b62      	ldr	r3, [pc, #392]	; (3cac <m2m_ip_cb+0x2f8>)
    3b22:	681b      	ldr	r3, [r3, #0]
    3b24:	2b00      	cmp	r3, #0
    3b26:	d0a1      	beq.n	3a6c <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    3b28:	4b60      	ldr	r3, [pc, #384]	; (3cac <m2m_ip_cb+0x2f8>)
    3b2a:	681b      	ldr	r3, [r3, #0]
    3b2c:	aa05      	add	r2, sp, #20
    3b2e:	2008      	movs	r0, #8
    3b30:	5610      	ldrsb	r0, [r2, r0]
    3b32:	aa09      	add	r2, sp, #36	; 0x24
    3b34:	2104      	movs	r1, #4
    3b36:	4798      	blx	r3
    3b38:	e798      	b.n	3a6c <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    3b3a:	2300      	movs	r3, #0
    3b3c:	2204      	movs	r2, #4
    3b3e:	a909      	add	r1, sp, #36	; 0x24
    3b40:	0020      	movs	r0, r4
    3b42:	4c58      	ldr	r4, [pc, #352]	; (3ca4 <m2m_ip_cb+0x2f0>)
    3b44:	47a0      	blx	r4
    3b46:	2800      	cmp	r0, #0
    3b48:	d000      	beq.n	3b4c <m2m_ip_cb+0x198>
    3b4a:	e78f      	b.n	3a6c <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    3b4c:	ab09      	add	r3, sp, #36	; 0x24
    3b4e:	2000      	movs	r0, #0
    3b50:	5618      	ldrsb	r0, [r3, r0]
    3b52:	aa05      	add	r2, sp, #20
    3b54:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    3b56:	785b      	ldrb	r3, [r3, #1]
    3b58:	b25b      	sxtb	r3, r3
    3b5a:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    3b5c:	2b00      	cmp	r3, #0
    3b5e:	d107      	bne.n	3b70 <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    3b60:	ab09      	add	r3, sp, #36	; 0x24
    3b62:	885b      	ldrh	r3, [r3, #2]
    3b64:	3b08      	subs	r3, #8
    3b66:	b29b      	uxth	r3, r3
    3b68:	0101      	lsls	r1, r0, #4
    3b6a:	4a51      	ldr	r2, [pc, #324]	; (3cb0 <m2m_ip_cb+0x2fc>)
    3b6c:	1852      	adds	r2, r2, r1
    3b6e:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    3b70:	4b4e      	ldr	r3, [pc, #312]	; (3cac <m2m_ip_cb+0x2f8>)
    3b72:	681b      	ldr	r3, [r3, #0]
    3b74:	2b00      	cmp	r3, #0
    3b76:	d100      	bne.n	3b7a <m2m_ip_cb+0x1c6>
    3b78:	e778      	b.n	3a6c <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    3b7a:	4b4c      	ldr	r3, [pc, #304]	; (3cac <m2m_ip_cb+0x2f8>)
    3b7c:	681b      	ldr	r3, [r3, #0]
    3b7e:	aa05      	add	r2, sp, #20
    3b80:	2105      	movs	r1, #5
    3b82:	4798      	blx	r3
	{
    3b84:	e772      	b.n	3a6c <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    3b86:	2300      	movs	r3, #0
    3b88:	2244      	movs	r2, #68	; 0x44
    3b8a:	a909      	add	r1, sp, #36	; 0x24
    3b8c:	0020      	movs	r0, r4
    3b8e:	4c45      	ldr	r4, [pc, #276]	; (3ca4 <m2m_ip_cb+0x2f0>)
    3b90:	47a0      	blx	r4
    3b92:	2800      	cmp	r0, #0
    3b94:	d000      	beq.n	3b98 <m2m_ip_cb+0x1e4>
    3b96:	e769      	b.n	3a6c <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    3b98:	4b47      	ldr	r3, [pc, #284]	; (3cb8 <m2m_ip_cb+0x304>)
    3b9a:	681b      	ldr	r3, [r3, #0]
    3b9c:	2b00      	cmp	r3, #0
    3b9e:	d100      	bne.n	3ba2 <m2m_ip_cb+0x1ee>
    3ba0:	e764      	b.n	3a6c <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    3ba2:	4b45      	ldr	r3, [pc, #276]	; (3cb8 <m2m_ip_cb+0x304>)
    3ba4:	681b      	ldr	r3, [r3, #0]
    3ba6:	9a19      	ldr	r2, [sp, #100]	; 0x64
    3ba8:	9203      	str	r2, [sp, #12]
    3baa:	0011      	movs	r1, r2
    3bac:	a809      	add	r0, sp, #36	; 0x24
    3bae:	4798      	blx	r3
    3bb0:	e75c      	b.n	3a6c <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    3bb2:	2306      	movs	r3, #6
    3bb4:	469a      	mov	sl, r3
    3bb6:	e001      	b.n	3bbc <m2m_ip_cb+0x208>
    3bb8:	2306      	movs	r3, #6
    3bba:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    3bbc:	2300      	movs	r3, #0
    3bbe:	2210      	movs	r2, #16
    3bc0:	a905      	add	r1, sp, #20
    3bc2:	0020      	movs	r0, r4
    3bc4:	4f37      	ldr	r7, [pc, #220]	; (3ca4 <m2m_ip_cb+0x2f0>)
    3bc6:	47b8      	blx	r7
    3bc8:	2800      	cmp	r0, #0
    3bca:	d000      	beq.n	3bce <m2m_ip_cb+0x21a>
    3bcc:	e74e      	b.n	3a6c <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    3bce:	aa05      	add	r2, sp, #20
    3bd0:	200c      	movs	r0, #12
    3bd2:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    3bd4:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    3bd6:	0107      	lsls	r7, r0, #4
    3bd8:	4935      	ldr	r1, [pc, #212]	; (3cb0 <m2m_ip_cb+0x2fc>)
    3bda:	19c9      	adds	r1, r1, r7
    3bdc:	2700      	movs	r7, #0
    3bde:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    3be0:	2608      	movs	r6, #8
    3be2:	5f97      	ldrsh	r7, [r2, r6]
    3be4:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    3be6:	8957      	ldrh	r7, [r2, #10]
    3be8:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    3bea:	af09      	add	r7, sp, #36	; 0x24
    3bec:	8856      	ldrh	r6, [r2, #2]
    3bee:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    3bf0:	9a06      	ldr	r2, [sp, #24]
    3bf2:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    3bf4:	88ca      	ldrh	r2, [r1, #6]
    3bf6:	b292      	uxth	r2, r2
    3bf8:	4293      	cmp	r3, r2
    3bfa:	d00c      	beq.n	3c16 <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    3bfc:	2d10      	cmp	r5, #16
    3bfe:	d800      	bhi.n	3c02 <m2m_ip_cb+0x24e>
    3c00:	e734      	b.n	3a6c <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    3c02:	2301      	movs	r3, #1
    3c04:	2200      	movs	r2, #0
    3c06:	2100      	movs	r1, #0
    3c08:	2000      	movs	r0, #0
    3c0a:	4c26      	ldr	r4, [pc, #152]	; (3ca4 <m2m_ip_cb+0x2f0>)
    3c0c:	47a0      	blx	r4
	{
    3c0e:	e72d      	b.n	3a6c <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    3c10:	2309      	movs	r3, #9
    3c12:	469a      	mov	sl, r3
    3c14:	e7d2      	b.n	3bbc <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    3c16:	4643      	mov	r3, r8
    3c18:	2b00      	cmp	r3, #0
    3c1a:	dd01      	ble.n	3c20 <m2m_ip_cb+0x26c>
    3c1c:	45a8      	cmp	r8, r5
    3c1e:	db0f      	blt.n	3c40 <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    3c20:	ab09      	add	r3, sp, #36	; 0x24
    3c22:	4642      	mov	r2, r8
    3c24:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    3c26:	2300      	movs	r3, #0
    3c28:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    3c2a:	4b20      	ldr	r3, [pc, #128]	; (3cac <m2m_ip_cb+0x2f8>)
    3c2c:	681b      	ldr	r3, [r3, #0]
    3c2e:	2b00      	cmp	r3, #0
    3c30:	d100      	bne.n	3c34 <m2m_ip_cb+0x280>
    3c32:	e71b      	b.n	3a6c <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    3c34:	4b1d      	ldr	r3, [pc, #116]	; (3cac <m2m_ip_cb+0x2f8>)
    3c36:	681b      	ldr	r3, [r3, #0]
    3c38:	aa09      	add	r2, sp, #36	; 0x24
    3c3a:	4651      	mov	r1, sl
    3c3c:	4798      	blx	r3
    3c3e:	e715      	b.n	3a6c <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    3c40:	0023      	movs	r3, r4
    3c42:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    3c44:	4642      	mov	r2, r8
    3c46:	4669      	mov	r1, sp
    3c48:	818a      	strh	r2, [r1, #12]
    3c4a:	898a      	ldrh	r2, [r1, #12]
    3c4c:	9200      	str	r2, [sp, #0]
    3c4e:	4652      	mov	r2, sl
    3c50:	0039      	movs	r1, r7
    3c52:	4c1a      	ldr	r4, [pc, #104]	; (3cbc <m2m_ip_cb+0x308>)
    3c54:	47a0      	blx	r4
    3c56:	e709      	b.n	3a6c <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    3c58:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    3c5a:	2300      	movs	r3, #0
    3c5c:	2208      	movs	r2, #8
    3c5e:	a909      	add	r1, sp, #36	; 0x24
    3c60:	0020      	movs	r0, r4
    3c62:	4c10      	ldr	r4, [pc, #64]	; (3ca4 <m2m_ip_cb+0x2f0>)
    3c64:	47a0      	blx	r4
    3c66:	2800      	cmp	r0, #0
    3c68:	d000      	beq.n	3c6c <m2m_ip_cb+0x2b8>
    3c6a:	e6ff      	b.n	3a6c <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    3c6c:	ab09      	add	r3, sp, #36	; 0x24
    3c6e:	2000      	movs	r0, #0
    3c70:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    3c72:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    3c74:	8859      	ldrh	r1, [r3, #2]
    3c76:	ab05      	add	r3, sp, #20
    3c78:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    3c7a:	0101      	lsls	r1, r0, #4
    3c7c:	4b0c      	ldr	r3, [pc, #48]	; (3cb0 <m2m_ip_cb+0x2fc>)
    3c7e:	185b      	adds	r3, r3, r1
    3c80:	88db      	ldrh	r3, [r3, #6]
    3c82:	b29b      	uxth	r3, r3
    3c84:	429a      	cmp	r2, r3
    3c86:	d000      	beq.n	3c8a <m2m_ip_cb+0x2d6>
    3c88:	e6f0      	b.n	3a6c <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    3c8a:	4b08      	ldr	r3, [pc, #32]	; (3cac <m2m_ip_cb+0x2f8>)
    3c8c:	681b      	ldr	r3, [r3, #0]
    3c8e:	2b00      	cmp	r3, #0
    3c90:	d100      	bne.n	3c94 <m2m_ip_cb+0x2e0>
    3c92:	e6eb      	b.n	3a6c <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    3c94:	4b05      	ldr	r3, [pc, #20]	; (3cac <m2m_ip_cb+0x2f8>)
    3c96:	681b      	ldr	r3, [r3, #0]
    3c98:	aa05      	add	r2, sp, #20
    3c9a:	0029      	movs	r1, r5
    3c9c:	4798      	blx	r3
	{
    3c9e:	e6e5      	b.n	3a6c <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    3ca0:	2508      	movs	r5, #8
    3ca2:	e7da      	b.n	3c5a <m2m_ip_cb+0x2a6>
    3ca4:	00001c41 	.word	0x00001c41
    3ca8:	20000398 	.word	0x20000398
    3cac:	20000394 	.word	0x20000394
    3cb0:	200002e4 	.word	0x200002e4
    3cb4:	2000009e 	.word	0x2000009e
    3cb8:	2000039c 	.word	0x2000039c
    3cbc:	000038a1 	.word	0x000038a1

00003cc0 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    3cc0:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    3cc2:	4b0a      	ldr	r3, [pc, #40]	; (3cec <socketInit+0x2c>)
    3cc4:	781b      	ldrb	r3, [r3, #0]
    3cc6:	2b00      	cmp	r3, #0
    3cc8:	d000      	beq.n	3ccc <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    3cca:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    3ccc:	22b0      	movs	r2, #176	; 0xb0
    3cce:	2100      	movs	r1, #0
    3cd0:	4807      	ldr	r0, [pc, #28]	; (3cf0 <socketInit+0x30>)
    3cd2:	4b08      	ldr	r3, [pc, #32]	; (3cf4 <socketInit+0x34>)
    3cd4:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    3cd6:	4908      	ldr	r1, [pc, #32]	; (3cf8 <socketInit+0x38>)
    3cd8:	2002      	movs	r0, #2
    3cda:	4b08      	ldr	r3, [pc, #32]	; (3cfc <socketInit+0x3c>)
    3cdc:	4798      	blx	r3
		gbSocketInit	= 1;
    3cde:	2201      	movs	r2, #1
    3ce0:	4b02      	ldr	r3, [pc, #8]	; (3cec <socketInit+0x2c>)
    3ce2:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    3ce4:	2200      	movs	r2, #0
    3ce6:	4b06      	ldr	r3, [pc, #24]	; (3d00 <socketInit+0x40>)
    3ce8:	801a      	strh	r2, [r3, #0]
}
    3cea:	e7ee      	b.n	3cca <socketInit+0xa>
    3cec:	2000009d 	.word	0x2000009d
    3cf0:	200002e4 	.word	0x200002e4
    3cf4:	00001521 	.word	0x00001521
    3cf8:	000039b5 	.word	0x000039b5
    3cfc:	00001d2d 	.word	0x00001d2d
    3d00:	2000009e 	.word	0x2000009e

00003d04 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    3d04:	4b02      	ldr	r3, [pc, #8]	; (3d10 <registerSocketCallback+0xc>)
    3d06:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    3d08:	4b02      	ldr	r3, [pc, #8]	; (3d14 <registerSocketCallback+0x10>)
    3d0a:	6019      	str	r1, [r3, #0]
}
    3d0c:	4770      	bx	lr
    3d0e:	46c0      	nop			; (mov r8, r8)
    3d10:	20000394 	.word	0x20000394
    3d14:	2000039c 	.word	0x2000039c

00003d18 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    3d18:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d1a:	46d6      	mov	lr, sl
    3d1c:	4647      	mov	r7, r8
    3d1e:	b580      	push	{r7, lr}
    3d20:	b089      	sub	sp, #36	; 0x24
    3d22:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    3d24:	2802      	cmp	r0, #2
    3d26:	d000      	beq.n	3d2a <socket+0x12>
    3d28:	e09c      	b.n	3e64 <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    3d2a:	2901      	cmp	r1, #1
    3d2c:	d00a      	beq.n	3d44 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    3d2e:	2902      	cmp	r1, #2
    3d30:	d100      	bne.n	3d34 <socket+0x1c>
    3d32:	e070      	b.n	3e16 <socket+0xfe>
	SOCKET					sock = -1;
    3d34:	2501      	movs	r5, #1
    3d36:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    3d38:	0028      	movs	r0, r5
    3d3a:	b009      	add	sp, #36	; 0x24
    3d3c:	bc0c      	pop	{r2, r3}
    3d3e:	4690      	mov	r8, r2
    3d40:	469a      	mov	sl, r3
    3d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    3d44:	4c49      	ldr	r4, [pc, #292]	; (3e6c <socket+0x154>)
    3d46:	7827      	ldrb	r7, [r4, #0]
    3d48:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    3d4a:	7826      	ldrb	r6, [r4, #0]
    3d4c:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    3d4e:	7820      	ldrb	r0, [r4, #0]
    3d50:	3001      	adds	r0, #1
    3d52:	3106      	adds	r1, #6
    3d54:	4b46      	ldr	r3, [pc, #280]	; (3e70 <socket+0x158>)
    3d56:	4798      	blx	r3
    3d58:	b2c9      	uxtb	r1, r1
    3d5a:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    3d5c:	0132      	lsls	r2, r6, #4
    3d5e:	4b45      	ldr	r3, [pc, #276]	; (3e74 <socket+0x15c>)
    3d60:	189b      	adds	r3, r3, r2
    3d62:	7a9b      	ldrb	r3, [r3, #10]
    3d64:	2506      	movs	r5, #6
    3d66:	2b00      	cmp	r3, #0
    3d68:	d018      	beq.n	3d9c <socket+0x84>
				u8SockID	= u8NextTcpSock;
    3d6a:	4e40      	ldr	r6, [pc, #256]	; (3e6c <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    3d6c:	4b40      	ldr	r3, [pc, #256]	; (3e70 <socket+0x158>)
    3d6e:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    3d70:	4b40      	ldr	r3, [pc, #256]	; (3e74 <socket+0x15c>)
    3d72:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    3d74:	7837      	ldrb	r7, [r6, #0]
    3d76:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    3d78:	7834      	ldrb	r4, [r6, #0]
    3d7a:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    3d7c:	7830      	ldrb	r0, [r6, #0]
    3d7e:	3001      	adds	r0, #1
    3d80:	2107      	movs	r1, #7
    3d82:	47d0      	blx	sl
    3d84:	b2c9      	uxtb	r1, r1
    3d86:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    3d88:	0123      	lsls	r3, r4, #4
    3d8a:	4443      	add	r3, r8
    3d8c:	7a9b      	ldrb	r3, [r3, #10]
    3d8e:	2b00      	cmp	r3, #0
    3d90:	d007      	beq.n	3da2 <socket+0x8a>
    3d92:	3d01      	subs	r5, #1
    3d94:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    3d96:	2d00      	cmp	r5, #0
    3d98:	d1ec      	bne.n	3d74 <socket+0x5c>
    3d9a:	e7cb      	b.n	3d34 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    3d9c:	4b35      	ldr	r3, [pc, #212]	; (3e74 <socket+0x15c>)
    3d9e:	18d4      	adds	r4, r2, r3
    3da0:	e002      	b.n	3da8 <socket+0x90>
    3da2:	0124      	lsls	r4, r4, #4
    3da4:	4b33      	ldr	r3, [pc, #204]	; (3e74 <socket+0x15c>)
    3da6:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    3da8:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    3daa:	2d00      	cmp	r5, #0
    3dac:	dbc4      	blt.n	3d38 <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    3dae:	2210      	movs	r2, #16
    3db0:	2100      	movs	r1, #0
    3db2:	0020      	movs	r0, r4
    3db4:	4b30      	ldr	r3, [pc, #192]	; (3e78 <socket+0x160>)
    3db6:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    3db8:	2301      	movs	r3, #1
    3dba:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    3dbc:	4a2f      	ldr	r2, [pc, #188]	; (3e7c <socket+0x164>)
    3dbe:	8813      	ldrh	r3, [r2, #0]
    3dc0:	3301      	adds	r3, #1
    3dc2:	b29b      	uxth	r3, r3
    3dc4:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    3dc6:	8813      	ldrh	r3, [r2, #0]
    3dc8:	b29b      	uxth	r3, r3
    3dca:	2b00      	cmp	r3, #0
    3dcc:	d103      	bne.n	3dd6 <socket+0xbe>
				++gu16SessionID;
    3dce:	8813      	ldrh	r3, [r2, #0]
    3dd0:	3301      	adds	r3, #1
    3dd2:	b29b      	uxth	r3, r3
    3dd4:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    3dd6:	4e29      	ldr	r6, [pc, #164]	; (3e7c <socket+0x164>)
    3dd8:	8833      	ldrh	r3, [r6, #0]
    3dda:	b29b      	uxth	r3, r3
    3ddc:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    3dde:	4828      	ldr	r0, [pc, #160]	; (3e80 <socket+0x168>)
    3de0:	4f28      	ldr	r7, [pc, #160]	; (3e84 <socket+0x16c>)
    3de2:	47b8      	blx	r7
    3de4:	8832      	ldrh	r2, [r6, #0]
    3de6:	b292      	uxth	r2, r2
    3de8:	0029      	movs	r1, r5
    3dea:	4827      	ldr	r0, [pc, #156]	; (3e88 <socket+0x170>)
    3dec:	47b8      	blx	r7
    3dee:	200d      	movs	r0, #13
    3df0:	4b26      	ldr	r3, [pc, #152]	; (3e8c <socket+0x174>)
    3df2:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    3df4:	9b05      	ldr	r3, [sp, #20]
    3df6:	07db      	lsls	r3, r3, #31
    3df8:	d59e      	bpl.n	3d38 <socket+0x20>
				strSSLCreate.sslSock = sock;
    3dfa:	aa07      	add	r2, sp, #28
    3dfc:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    3dfe:	2321      	movs	r3, #33	; 0x21
    3e00:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    3e02:	2300      	movs	r3, #0
    3e04:	9302      	str	r3, [sp, #8]
    3e06:	9301      	str	r3, [sp, #4]
    3e08:	9300      	str	r3, [sp, #0]
    3e0a:	3304      	adds	r3, #4
    3e0c:	2150      	movs	r1, #80	; 0x50
    3e0e:	2002      	movs	r0, #2
    3e10:	4c1f      	ldr	r4, [pc, #124]	; (3e90 <socket+0x178>)
    3e12:	47a0      	blx	r4
    3e14:	e790      	b.n	3d38 <socket+0x20>
				u8SockID		= u8NextUdpSock;
    3e16:	4b1f      	ldr	r3, [pc, #124]	; (3e94 <socket+0x17c>)
    3e18:	781d      	ldrb	r5, [r3, #0]
    3e1a:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    3e1c:	781c      	ldrb	r4, [r3, #0]
    3e1e:	0124      	lsls	r4, r4, #4
    3e20:	4a1d      	ldr	r2, [pc, #116]	; (3e98 <socket+0x180>)
    3e22:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    3e24:	7819      	ldrb	r1, [r3, #0]
    3e26:	3101      	adds	r1, #1
    3e28:	2203      	movs	r2, #3
    3e2a:	400a      	ands	r2, r1
    3e2c:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    3e2e:	7aa3      	ldrb	r3, [r4, #10]
    3e30:	2b00      	cmp	r3, #0
    3e32:	d014      	beq.n	3e5e <socket+0x146>
    3e34:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    3e36:	4917      	ldr	r1, [pc, #92]	; (3e94 <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    3e38:	4f17      	ldr	r7, [pc, #92]	; (3e98 <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    3e3a:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    3e3c:	780d      	ldrb	r5, [r1, #0]
    3e3e:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    3e40:	780c      	ldrb	r4, [r1, #0]
    3e42:	0124      	lsls	r4, r4, #4
    3e44:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    3e46:	780b      	ldrb	r3, [r1, #0]
    3e48:	3301      	adds	r3, #1
    3e4a:	4003      	ands	r3, r0
    3e4c:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    3e4e:	7aa3      	ldrb	r3, [r4, #10]
    3e50:	2b00      	cmp	r3, #0
    3e52:	d004      	beq.n	3e5e <socket+0x146>
    3e54:	3a01      	subs	r2, #1
    3e56:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    3e58:	2a00      	cmp	r2, #0
    3e5a:	d1ef      	bne.n	3e3c <socket+0x124>
    3e5c:	e76a      	b.n	3d34 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    3e5e:	3507      	adds	r5, #7
    3e60:	b26d      	sxtb	r5, r5
					break;
    3e62:	e7a2      	b.n	3daa <socket+0x92>
	SOCKET					sock = -1;
    3e64:	2501      	movs	r5, #1
    3e66:	426d      	negs	r5, r5
    3e68:	e766      	b.n	3d38 <socket+0x20>
    3e6a:	46c0      	nop			; (mov r8, r8)
    3e6c:	200000a0 	.word	0x200000a0
    3e70:	00007c41 	.word	0x00007c41
    3e74:	200002e4 	.word	0x200002e4
    3e78:	00001521 	.word	0x00001521
    3e7c:	2000009e 	.word	0x2000009e
    3e80:	0000b350 	.word	0x0000b350
    3e84:	00009b31 	.word	0x00009b31
    3e88:	0000bde0 	.word	0x0000bde0
    3e8c:	00009b65 	.word	0x00009b65
    3e90:	00001635 	.word	0x00001635
    3e94:	200000a1 	.word	0x200000a1
    3e98:	20000354 	.word	0x20000354

00003e9c <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    3e9c:	b570      	push	{r4, r5, r6, lr}
    3e9e:	b088      	sub	sp, #32
    3ea0:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    3ea2:	db30      	blt.n	3f06 <connect+0x6a>
    3ea4:	2900      	cmp	r1, #0
    3ea6:	d031      	beq.n	3f0c <connect+0x70>
    3ea8:	0100      	lsls	r0, r0, #4
    3eaa:	4b1d      	ldr	r3, [pc, #116]	; (3f20 <connect+0x84>)
    3eac:	181b      	adds	r3, r3, r0
    3eae:	7a9b      	ldrb	r3, [r3, #10]
    3eb0:	2b01      	cmp	r3, #1
    3eb2:	d12e      	bne.n	3f12 <connect+0x76>
    3eb4:	2a00      	cmp	r2, #0
    3eb6:	d02f      	beq.n	3f18 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    3eb8:	4b19      	ldr	r3, [pc, #100]	; (3f20 <connect+0x84>)
    3eba:	181b      	adds	r3, r3, r0
    3ebc:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    3ebe:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    3ec0:	07db      	lsls	r3, r3, #31
    3ec2:	d505      	bpl.n	3ed0 <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    3ec4:	4b16      	ldr	r3, [pc, #88]	; (3f20 <connect+0x84>)
    3ec6:	181b      	adds	r3, r3, r0
    3ec8:	7ada      	ldrb	r2, [r3, #11]
    3eca:	ab05      	add	r3, sp, #20
    3ecc:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    3ece:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
    3ed0:	ad05      	add	r5, sp, #20
    3ed2:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    3ed4:	2208      	movs	r2, #8
    3ed6:	0028      	movs	r0, r5
    3ed8:	4b12      	ldr	r3, [pc, #72]	; (3f24 <connect+0x88>)
    3eda:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    3edc:	0124      	lsls	r4, r4, #4
    3ede:	4b10      	ldr	r3, [pc, #64]	; (3f20 <connect+0x84>)
    3ee0:	191c      	adds	r4, r3, r4
    3ee2:	88e3      	ldrh	r3, [r4, #6]
    3ee4:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    3ee6:	2300      	movs	r3, #0
    3ee8:	9302      	str	r3, [sp, #8]
    3eea:	9301      	str	r3, [sp, #4]
    3eec:	9300      	str	r3, [sp, #0]
    3eee:	330c      	adds	r3, #12
    3ef0:	002a      	movs	r2, r5
    3ef2:	0031      	movs	r1, r6
    3ef4:	2002      	movs	r0, #2
    3ef6:	4c0c      	ldr	r4, [pc, #48]	; (3f28 <connect+0x8c>)
    3ef8:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    3efa:	2800      	cmp	r0, #0
    3efc:	d001      	beq.n	3f02 <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    3efe:	2009      	movs	r0, #9
    3f00:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    3f02:	b008      	add	sp, #32
    3f04:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    3f06:	2006      	movs	r0, #6
    3f08:	4240      	negs	r0, r0
    3f0a:	e7fa      	b.n	3f02 <connect+0x66>
    3f0c:	2006      	movs	r0, #6
    3f0e:	4240      	negs	r0, r0
    3f10:	e7f7      	b.n	3f02 <connect+0x66>
    3f12:	2006      	movs	r0, #6
    3f14:	4240      	negs	r0, r0
    3f16:	e7f4      	b.n	3f02 <connect+0x66>
    3f18:	2006      	movs	r0, #6
    3f1a:	4240      	negs	r0, r0
    3f1c:	e7f1      	b.n	3f02 <connect+0x66>
    3f1e:	46c0      	nop			; (mov r8, r8)
    3f20:	200002e4 	.word	0x200002e4
    3f24:	0000150d 	.word	0x0000150d
    3f28:	00001635 	.word	0x00001635

00003f2c <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    3f2c:	b530      	push	{r4, r5, lr}
    3f2e:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    3f30:	2800      	cmp	r0, #0
    3f32:	db36      	blt.n	3fa2 <send+0x76>
    3f34:	2900      	cmp	r1, #0
    3f36:	d037      	beq.n	3fa8 <send+0x7c>
    3f38:	23af      	movs	r3, #175	; 0xaf
    3f3a:	00db      	lsls	r3, r3, #3
    3f3c:	429a      	cmp	r2, r3
    3f3e:	d836      	bhi.n	3fae <send+0x82>
    3f40:	0104      	lsls	r4, r0, #4
    3f42:	4b1e      	ldr	r3, [pc, #120]	; (3fbc <send+0x90>)
    3f44:	191b      	adds	r3, r3, r4
    3f46:	7a9b      	ldrb	r3, [r3, #10]
    3f48:	2b01      	cmp	r3, #1
    3f4a:	d133      	bne.n	3fb4 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    3f4c:	ab04      	add	r3, sp, #16
    3f4e:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    3f50:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    3f52:	0025      	movs	r5, r4
    3f54:	4c19      	ldr	r4, [pc, #100]	; (3fbc <send+0x90>)
    3f56:	1964      	adds	r4, r4, r5
    3f58:	88e4      	ldrh	r4, [r4, #6]
    3f5a:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    3f5c:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    3f5e:	2806      	cmp	r0, #6
    3f60:	dd00      	ble.n	3f64 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    3f62:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3f64:	0104      	lsls	r4, r0, #4
    3f66:	4b15      	ldr	r3, [pc, #84]	; (3fbc <send+0x90>)
    3f68:	191b      	adds	r3, r3, r4
    3f6a:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    3f6c:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3f6e:	07e4      	lsls	r4, r4, #31
    3f70:	d505      	bpl.n	3f7e <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    3f72:	0100      	lsls	r0, r0, #4
    3f74:	4b11      	ldr	r3, [pc, #68]	; (3fbc <send+0x90>)
    3f76:	1818      	adds	r0, r3, r0
    3f78:	8905      	ldrh	r5, [r0, #8]
    3f7a:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    3f7c:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    3f7e:	2080      	movs	r0, #128	; 0x80
    3f80:	4318      	orrs	r0, r3
    3f82:	9502      	str	r5, [sp, #8]
    3f84:	9201      	str	r2, [sp, #4]
    3f86:	9100      	str	r1, [sp, #0]
    3f88:	2310      	movs	r3, #16
    3f8a:	aa04      	add	r2, sp, #16
    3f8c:	0001      	movs	r1, r0
    3f8e:	2002      	movs	r0, #2
    3f90:	4c0b      	ldr	r4, [pc, #44]	; (3fc0 <send+0x94>)
    3f92:	47a0      	blx	r4
    3f94:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    3f96:	2800      	cmp	r0, #0
    3f98:	d000      	beq.n	3f9c <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    3f9a:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    3f9c:	0018      	movs	r0, r3
    3f9e:	b009      	add	sp, #36	; 0x24
    3fa0:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    3fa2:	2306      	movs	r3, #6
    3fa4:	425b      	negs	r3, r3
    3fa6:	e7f9      	b.n	3f9c <send+0x70>
    3fa8:	2306      	movs	r3, #6
    3faa:	425b      	negs	r3, r3
    3fac:	e7f6      	b.n	3f9c <send+0x70>
    3fae:	2306      	movs	r3, #6
    3fb0:	425b      	negs	r3, r3
    3fb2:	e7f3      	b.n	3f9c <send+0x70>
    3fb4:	2306      	movs	r3, #6
    3fb6:	425b      	negs	r3, r3
    3fb8:	e7f0      	b.n	3f9c <send+0x70>
    3fba:	46c0      	nop			; (mov r8, r8)
    3fbc:	200002e4 	.word	0x200002e4
    3fc0:	00001635 	.word	0x00001635

00003fc4 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    3fc4:	b530      	push	{r4, r5, lr}
    3fc6:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    3fc8:	2800      	cmp	r0, #0
    3fca:	db34      	blt.n	4036 <recv+0x72>
    3fcc:	2900      	cmp	r1, #0
    3fce:	d035      	beq.n	403c <recv+0x78>
    3fd0:	2a00      	cmp	r2, #0
    3fd2:	d036      	beq.n	4042 <recv+0x7e>
    3fd4:	0105      	lsls	r5, r0, #4
    3fd6:	4c1e      	ldr	r4, [pc, #120]	; (4050 <recv+0x8c>)
    3fd8:	1964      	adds	r4, r4, r5
    3fda:	7aa4      	ldrb	r4, [r4, #10]
    3fdc:	2c01      	cmp	r4, #1
    3fde:	d133      	bne.n	4048 <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    3fe0:	4c1b      	ldr	r4, [pc, #108]	; (4050 <recv+0x8c>)
    3fe2:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    3fe4:	1964      	adds	r4, r4, r5
    3fe6:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    3fe8:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    3fea:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    3fec:	2900      	cmp	r1, #0
    3fee:	d11d      	bne.n	402c <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    3ff0:	2101      	movs	r1, #1
    3ff2:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3ff4:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    3ff6:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3ff8:	07d2      	lsls	r2, r2, #31
    3ffa:	d500      	bpl.n	3ffe <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    3ffc:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    3ffe:	2b00      	cmp	r3, #0
    4000:	d117      	bne.n	4032 <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    4002:	3b01      	subs	r3, #1
    4004:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    4006:	aa04      	add	r2, sp, #16
    4008:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    400a:	0100      	lsls	r0, r0, #4
    400c:	4b10      	ldr	r3, [pc, #64]	; (4050 <recv+0x8c>)
    400e:	1818      	adds	r0, r3, r0
    4010:	88c3      	ldrh	r3, [r0, #6]
    4012:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    4014:	2300      	movs	r3, #0
    4016:	9302      	str	r3, [sp, #8]
    4018:	9301      	str	r3, [sp, #4]
    401a:	9300      	str	r3, [sp, #0]
    401c:	3308      	adds	r3, #8
    401e:	2002      	movs	r0, #2
    4020:	4c0c      	ldr	r4, [pc, #48]	; (4054 <recv+0x90>)
    4022:	47a0      	blx	r4
    4024:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    4026:	2800      	cmp	r0, #0
    4028:	d000      	beq.n	402c <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    402a:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    402c:	0010      	movs	r0, r2
    402e:	b007      	add	sp, #28
    4030:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    4032:	9304      	str	r3, [sp, #16]
    4034:	e7e7      	b.n	4006 <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    4036:	2206      	movs	r2, #6
    4038:	4252      	negs	r2, r2
    403a:	e7f7      	b.n	402c <recv+0x68>
    403c:	2206      	movs	r2, #6
    403e:	4252      	negs	r2, r2
    4040:	e7f4      	b.n	402c <recv+0x68>
    4042:	2206      	movs	r2, #6
    4044:	4252      	negs	r2, r2
    4046:	e7f1      	b.n	402c <recv+0x68>
    4048:	2206      	movs	r2, #6
    404a:	4252      	negs	r2, r2
    404c:	e7ee      	b.n	402c <recv+0x68>
    404e:	46c0      	nop			; (mov r8, r8)
    4050:	200002e4 	.word	0x200002e4
    4054:	00001635 	.word	0x00001635

00004058 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    4058:	b530      	push	{r4, r5, lr}
    405a:	b087      	sub	sp, #28
    405c:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    405e:	481e      	ldr	r0, [pc, #120]	; (40d8 <close+0x80>)
    4060:	4d1e      	ldr	r5, [pc, #120]	; (40dc <close+0x84>)
    4062:	47a8      	blx	r5
    4064:	0021      	movs	r1, r4
    4066:	481e      	ldr	r0, [pc, #120]	; (40e0 <close+0x88>)
    4068:	47a8      	blx	r5
    406a:	200d      	movs	r0, #13
    406c:	4b1d      	ldr	r3, [pc, #116]	; (40e4 <close+0x8c>)
    406e:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    4070:	2c00      	cmp	r4, #0
    4072:	db2a      	blt.n	40ca <close+0x72>
    4074:	0122      	lsls	r2, r4, #4
    4076:	4b1c      	ldr	r3, [pc, #112]	; (40e8 <close+0x90>)
    4078:	189b      	adds	r3, r3, r2
    407a:	7a9b      	ldrb	r3, [r3, #10]
    407c:	2b01      	cmp	r3, #1
    407e:	d127      	bne.n	40d0 <close+0x78>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    4080:	a905      	add	r1, sp, #20
    4082:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    4084:	4b18      	ldr	r3, [pc, #96]	; (40e8 <close+0x90>)
    4086:	189b      	adds	r3, r3, r2
    4088:	88da      	ldrh	r2, [r3, #6]
    408a:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    408c:	2200      	movs	r2, #0
    408e:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    4090:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    4092:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    4094:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    4096:	07db      	lsls	r3, r3, #31
    4098:	d500      	bpl.n	409c <close+0x44>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    409a:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    409c:	2300      	movs	r3, #0
    409e:	9302      	str	r3, [sp, #8]
    40a0:	9301      	str	r3, [sp, #4]
    40a2:	9300      	str	r3, [sp, #0]
    40a4:	3304      	adds	r3, #4
    40a6:	aa05      	add	r2, sp, #20
    40a8:	2002      	movs	r0, #2
    40aa:	4d10      	ldr	r5, [pc, #64]	; (40ec <close+0x94>)
    40ac:	47a8      	blx	r5
    40ae:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    40b0:	d001      	beq.n	40b6 <close+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    40b2:	2509      	movs	r5, #9
    40b4:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    40b6:	0124      	lsls	r4, r4, #4
    40b8:	480b      	ldr	r0, [pc, #44]	; (40e8 <close+0x90>)
    40ba:	1820      	adds	r0, r4, r0
    40bc:	2210      	movs	r2, #16
    40be:	2100      	movs	r1, #0
    40c0:	4b0b      	ldr	r3, [pc, #44]	; (40f0 <close+0x98>)
    40c2:	4798      	blx	r3
	}
	return s8Ret;
}
    40c4:	0028      	movs	r0, r5
    40c6:	b007      	add	sp, #28
    40c8:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    40ca:	2506      	movs	r5, #6
    40cc:	426d      	negs	r5, r5
    40ce:	e7f9      	b.n	40c4 <close+0x6c>
    40d0:	2506      	movs	r5, #6
    40d2:	426d      	negs	r5, r5
    40d4:	e7f6      	b.n	40c4 <close+0x6c>
    40d6:	46c0      	nop			; (mov r8, r8)
    40d8:	0000b350 	.word	0x0000b350
    40dc:	00009b31 	.word	0x00009b31
    40e0:	0000bdc8 	.word	0x0000bdc8
    40e4:	00009b65 	.word	0x00009b65
    40e8:	200002e4 	.word	0x200002e4
    40ec:	00001635 	.word	0x00001635
    40f0:	00001521 	.word	0x00001521

000040f4 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    40f4:	b570      	push	{r4, r5, r6, lr}
    40f6:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
    40f8:	2300      	movs	r3, #0
    40fa:	9301      	str	r3, [sp, #4]
    40fc:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
    40fe:	2100      	movs	r1, #0
    4100:	7802      	ldrb	r2, [r0, #0]
    4102:	1c44      	adds	r4, r0, #1
    4104:	3005      	adds	r0, #5
    4106:	000b      	movs	r3, r1
    4108:	e009      	b.n	411e <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
    410a:	009d      	lsls	r5, r3, #2
    410c:	195b      	adds	r3, r3, r5
    410e:	005b      	lsls	r3, r3, #1
    4110:	189b      	adds	r3, r3, r2
    4112:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
    4114:	0022      	movs	r2, r4
    4116:	3401      	adds	r4, #1
			if(j > 4)
    4118:	42a0      	cmp	r0, r4
    411a:	d00a      	beq.n	4132 <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
    411c:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
    411e:	2a2e      	cmp	r2, #46	; 0x2e
    4120:	d00a      	beq.n	4138 <nmi_inet_addr+0x44>
    4122:	2a00      	cmp	r2, #0
    4124:	d00c      	beq.n	4140 <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
    4126:	3a30      	subs	r2, #48	; 0x30
    4128:	b2d2      	uxtb	r2, r2
    412a:	2a09      	cmp	r2, #9
    412c:	d9ed      	bls.n	410a <nmi_inet_addr+0x16>
				return 0;
    412e:	2000      	movs	r0, #0
    4130:	e000      	b.n	4134 <nmi_inet_addr+0x40>
				return 0;
    4132:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
    4134:	b002      	add	sp, #8
    4136:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
    4138:	466a      	mov	r2, sp
    413a:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    413c:	0020      	movs	r0, r4
    413e:	e002      	b.n	4146 <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
    4140:	466a      	mov	r2, sp
    4142:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    4144:	0020      	movs	r0, r4
    4146:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
    4148:	2e04      	cmp	r6, #4
    414a:	d1d9      	bne.n	4100 <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    414c:	2204      	movs	r2, #4
    414e:	4669      	mov	r1, sp
    4150:	a801      	add	r0, sp, #4
    4152:	4b02      	ldr	r3, [pc, #8]	; (415c <nmi_inet_addr+0x68>)
    4154:	4798      	blx	r3
	return u32IP;
    4156:	9801      	ldr	r0, [sp, #4]
    4158:	e7ec      	b.n	4134 <nmi_inet_addr+0x40>
    415a:	46c0      	nop			; (mov r8, r8)
    415c:	0000150d 	.word	0x0000150d

00004160 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    4160:	b510      	push	{r4, lr}
    4162:	b084      	sub	sp, #16
    4164:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    4166:	4b0b      	ldr	r3, [pc, #44]	; (4194 <gethostbyname+0x34>)
    4168:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    416a:	b2c3      	uxtb	r3, r0
    416c:	2b40      	cmp	r3, #64	; 0x40
    416e:	d80d      	bhi.n	418c <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    4170:	23ff      	movs	r3, #255	; 0xff
    4172:	4003      	ands	r3, r0
    4174:	3301      	adds	r3, #1
    4176:	2200      	movs	r2, #0
    4178:	9202      	str	r2, [sp, #8]
    417a:	9201      	str	r2, [sp, #4]
    417c:	9200      	str	r2, [sp, #0]
    417e:	0022      	movs	r2, r4
    4180:	214a      	movs	r1, #74	; 0x4a
    4182:	2002      	movs	r0, #2
    4184:	4c04      	ldr	r4, [pc, #16]	; (4198 <gethostbyname+0x38>)
    4186:	47a0      	blx	r4
	}
	return s8Err;
}
    4188:	b004      	add	sp, #16
    418a:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    418c:	2006      	movs	r0, #6
    418e:	4240      	negs	r0, r0
    4190:	e7fa      	b.n	4188 <gethostbyname+0x28>
    4192:	46c0      	nop			; (mov r8, r8)
    4194:	00001531 	.word	0x00001531
    4198:	00001635 	.word	0x00001635

0000419c <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    419c:	b570      	push	{r4, r5, r6, lr}
    419e:	b082      	sub	sp, #8
    41a0:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    41a2:	4b2a      	ldr	r3, [pc, #168]	; (424c <spi_flash_enable+0xb0>)
    41a4:	4798      	blx	r3
    41a6:	0500      	lsls	r0, r0, #20
    41a8:	0d00      	lsrs	r0, r0, #20
    41aa:	4b29      	ldr	r3, [pc, #164]	; (4250 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    41ac:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    41ae:	4298      	cmp	r0, r3
    41b0:	d802      	bhi.n	41b8 <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    41b2:	0028      	movs	r0, r5
    41b4:	b002      	add	sp, #8
    41b6:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    41b8:	a901      	add	r1, sp, #4
    41ba:	4826      	ldr	r0, [pc, #152]	; (4254 <spi_flash_enable+0xb8>)
    41bc:	4b26      	ldr	r3, [pc, #152]	; (4258 <spi_flash_enable+0xbc>)
    41be:	4798      	blx	r3
    41c0:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    41c2:	d1f6      	bne.n	41b2 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    41c4:	4b25      	ldr	r3, [pc, #148]	; (425c <spi_flash_enable+0xc0>)
    41c6:	9a01      	ldr	r2, [sp, #4]
    41c8:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    41ca:	4925      	ldr	r1, [pc, #148]	; (4260 <spi_flash_enable+0xc4>)
    41cc:	4319      	orrs	r1, r3
    41ce:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    41d0:	4820      	ldr	r0, [pc, #128]	; (4254 <spi_flash_enable+0xb8>)
    41d2:	4b24      	ldr	r3, [pc, #144]	; (4264 <spi_flash_enable+0xc8>)
    41d4:	4798      	blx	r3
		if(enable) {
    41d6:	2c00      	cmp	r4, #0
    41d8:	d020      	beq.n	421c <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    41da:	2100      	movs	r1, #0
    41dc:	4822      	ldr	r0, [pc, #136]	; (4268 <spi_flash_enable+0xcc>)
    41de:	4c21      	ldr	r4, [pc, #132]	; (4264 <spi_flash_enable+0xc8>)
    41e0:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    41e2:	21ab      	movs	r1, #171	; 0xab
    41e4:	4821      	ldr	r0, [pc, #132]	; (426c <spi_flash_enable+0xd0>)
    41e6:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    41e8:	2101      	movs	r1, #1
    41ea:	4821      	ldr	r0, [pc, #132]	; (4270 <spi_flash_enable+0xd4>)
    41ec:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    41ee:	2100      	movs	r1, #0
    41f0:	4820      	ldr	r0, [pc, #128]	; (4274 <spi_flash_enable+0xd8>)
    41f2:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    41f4:	2181      	movs	r1, #129	; 0x81
    41f6:	4820      	ldr	r0, [pc, #128]	; (4278 <spi_flash_enable+0xdc>)
    41f8:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    41fa:	4e20      	ldr	r6, [pc, #128]	; (427c <spi_flash_enable+0xe0>)
    41fc:	4c20      	ldr	r4, [pc, #128]	; (4280 <spi_flash_enable+0xe4>)
    41fe:	0030      	movs	r0, r6
    4200:	47a0      	blx	r4
    4202:	2801      	cmp	r0, #1
    4204:	d1fb      	bne.n	41fe <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    4206:	4b15      	ldr	r3, [pc, #84]	; (425c <spi_flash_enable+0xc0>)
    4208:	9a01      	ldr	r2, [sp, #4]
    420a:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    420c:	2180      	movs	r1, #128	; 0x80
    420e:	0249      	lsls	r1, r1, #9
    4210:	4319      	orrs	r1, r3
    4212:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    4214:	480f      	ldr	r0, [pc, #60]	; (4254 <spi_flash_enable+0xb8>)
    4216:	4b13      	ldr	r3, [pc, #76]	; (4264 <spi_flash_enable+0xc8>)
    4218:	4798      	blx	r3
    421a:	e7ca      	b.n	41b2 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    421c:	2100      	movs	r1, #0
    421e:	4812      	ldr	r0, [pc, #72]	; (4268 <spi_flash_enable+0xcc>)
    4220:	4c10      	ldr	r4, [pc, #64]	; (4264 <spi_flash_enable+0xc8>)
    4222:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    4224:	21b9      	movs	r1, #185	; 0xb9
    4226:	4811      	ldr	r0, [pc, #68]	; (426c <spi_flash_enable+0xd0>)
    4228:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    422a:	2101      	movs	r1, #1
    422c:	4810      	ldr	r0, [pc, #64]	; (4270 <spi_flash_enable+0xd4>)
    422e:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    4230:	2100      	movs	r1, #0
    4232:	4810      	ldr	r0, [pc, #64]	; (4274 <spi_flash_enable+0xd8>)
    4234:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    4236:	2181      	movs	r1, #129	; 0x81
    4238:	480f      	ldr	r0, [pc, #60]	; (4278 <spi_flash_enable+0xdc>)
    423a:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    423c:	4e0f      	ldr	r6, [pc, #60]	; (427c <spi_flash_enable+0xe0>)
    423e:	4c10      	ldr	r4, [pc, #64]	; (4280 <spi_flash_enable+0xe4>)
    4240:	0030      	movs	r0, r6
    4242:	47a0      	blx	r4
    4244:	2801      	cmp	r0, #1
    4246:	d1fb      	bne.n	4240 <spi_flash_enable+0xa4>
    4248:	e7dd      	b.n	4206 <spi_flash_enable+0x6a>
    424a:	46c0      	nop			; (mov r8, r8)
    424c:	00002519 	.word	0x00002519
    4250:	0000039f 	.word	0x0000039f
    4254:	00001410 	.word	0x00001410
    4258:	00002969 	.word	0x00002969
    425c:	f8888fff 	.word	0xf8888fff
    4260:	01111000 	.word	0x01111000
    4264:	00002975 	.word	0x00002975
    4268:	00010208 	.word	0x00010208
    426c:	0001020c 	.word	0x0001020c
    4270:	00010214 	.word	0x00010214
    4274:	0001021c 	.word	0x0001021c
    4278:	00010204 	.word	0x00010204
    427c:	00010218 	.word	0x00010218
    4280:	0000295d 	.word	0x0000295d

00004284 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    4284:	4b0c      	ldr	r3, [pc, #48]	; (42b8 <cpu_irq_enter_critical+0x34>)
    4286:	681b      	ldr	r3, [r3, #0]
    4288:	2b00      	cmp	r3, #0
    428a:	d106      	bne.n	429a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    428c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    4290:	2b00      	cmp	r3, #0
    4292:	d007      	beq.n	42a4 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    4294:	2200      	movs	r2, #0
    4296:	4b09      	ldr	r3, [pc, #36]	; (42bc <cpu_irq_enter_critical+0x38>)
    4298:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    429a:	4a07      	ldr	r2, [pc, #28]	; (42b8 <cpu_irq_enter_critical+0x34>)
    429c:	6813      	ldr	r3, [r2, #0]
    429e:	3301      	adds	r3, #1
    42a0:	6013      	str	r3, [r2, #0]
}
    42a2:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    42a4:	b672      	cpsid	i
    42a6:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    42aa:	2200      	movs	r2, #0
    42ac:	4b04      	ldr	r3, [pc, #16]	; (42c0 <cpu_irq_enter_critical+0x3c>)
    42ae:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    42b0:	3201      	adds	r2, #1
    42b2:	4b02      	ldr	r3, [pc, #8]	; (42bc <cpu_irq_enter_critical+0x38>)
    42b4:	701a      	strb	r2, [r3, #0]
    42b6:	e7f0      	b.n	429a <cpu_irq_enter_critical+0x16>
    42b8:	200000a4 	.word	0x200000a4
    42bc:	200000a8 	.word	0x200000a8
    42c0:	2000000a 	.word	0x2000000a

000042c4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    42c4:	4b08      	ldr	r3, [pc, #32]	; (42e8 <cpu_irq_leave_critical+0x24>)
    42c6:	681a      	ldr	r2, [r3, #0]
    42c8:	3a01      	subs	r2, #1
    42ca:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    42cc:	681b      	ldr	r3, [r3, #0]
    42ce:	2b00      	cmp	r3, #0
    42d0:	d109      	bne.n	42e6 <cpu_irq_leave_critical+0x22>
    42d2:	4b06      	ldr	r3, [pc, #24]	; (42ec <cpu_irq_leave_critical+0x28>)
    42d4:	781b      	ldrb	r3, [r3, #0]
    42d6:	2b00      	cmp	r3, #0
    42d8:	d005      	beq.n	42e6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    42da:	2201      	movs	r2, #1
    42dc:	4b04      	ldr	r3, [pc, #16]	; (42f0 <cpu_irq_leave_critical+0x2c>)
    42de:	701a      	strb	r2, [r3, #0]
    42e0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    42e4:	b662      	cpsie	i
	}
}
    42e6:	4770      	bx	lr
    42e8:	200000a4 	.word	0x200000a4
    42ec:	200000a8 	.word	0x200000a8
    42f0:	2000000a 	.word	0x2000000a

000042f4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    42f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    42f6:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    42f8:	ac01      	add	r4, sp, #4
    42fa:	2501      	movs	r5, #1
    42fc:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    42fe:	2700      	movs	r7, #0
    4300:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4302:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    4304:	0021      	movs	r1, r4
    4306:	203e      	movs	r0, #62	; 0x3e
    4308:	4e06      	ldr	r6, [pc, #24]	; (4324 <system_board_init+0x30>)
    430a:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    430c:	2280      	movs	r2, #128	; 0x80
    430e:	05d2      	lsls	r2, r2, #23
    4310:	4b05      	ldr	r3, [pc, #20]	; (4328 <system_board_init+0x34>)
    4312:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    4314:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    4316:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    4318:	0021      	movs	r1, r4
    431a:	200f      	movs	r0, #15
    431c:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    431e:	b003      	add	sp, #12
    4320:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4322:	46c0      	nop			; (mov r8, r8)
    4324:	000044fd 	.word	0x000044fd
    4328:	41004480 	.word	0x41004480

0000432c <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    432c:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    432e:	2a00      	cmp	r2, #0
    4330:	d001      	beq.n	4336 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    4332:	0018      	movs	r0, r3
    4334:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    4336:	008b      	lsls	r3, r1, #2
    4338:	4a06      	ldr	r2, [pc, #24]	; (4354 <extint_register_callback+0x28>)
    433a:	589b      	ldr	r3, [r3, r2]
    433c:	2b00      	cmp	r3, #0
    433e:	d003      	beq.n	4348 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    4340:	4283      	cmp	r3, r0
    4342:	d005      	beq.n	4350 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    4344:	231d      	movs	r3, #29
    4346:	e7f4      	b.n	4332 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    4348:	0089      	lsls	r1, r1, #2
    434a:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    434c:	2300      	movs	r3, #0
    434e:	e7f0      	b.n	4332 <extint_register_callback+0x6>
		return STATUS_OK;
    4350:	2300      	movs	r3, #0
    4352:	e7ee      	b.n	4332 <extint_register_callback+0x6>
    4354:	200003a4 	.word	0x200003a4

00004358 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4358:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    435a:	2900      	cmp	r1, #0
    435c:	d001      	beq.n	4362 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    435e:	0018      	movs	r0, r3
    4360:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    4362:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    4364:	281f      	cmp	r0, #31
    4366:	d800      	bhi.n	436a <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    4368:	4a02      	ldr	r2, [pc, #8]	; (4374 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    436a:	2301      	movs	r3, #1
    436c:	4083      	lsls	r3, r0
    436e:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    4370:	2300      	movs	r3, #0
    4372:	e7f4      	b.n	435e <extint_chan_enable_callback+0x6>
    4374:	40001800 	.word	0x40001800

00004378 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4378:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    437a:	2900      	cmp	r1, #0
    437c:	d001      	beq.n	4382 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    437e:	0018      	movs	r0, r3
    4380:	4770      	bx	lr
		return NULL;
    4382:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    4384:	281f      	cmp	r0, #31
    4386:	d800      	bhi.n	438a <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    4388:	4a02      	ldr	r2, [pc, #8]	; (4394 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    438a:	2301      	movs	r3, #1
    438c:	4083      	lsls	r3, r0
    438e:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    4390:	2300      	movs	r3, #0
    4392:	e7f4      	b.n	437e <extint_chan_disable_callback+0x6>
    4394:	40001800 	.word	0x40001800

00004398 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    4398:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    439a:	2200      	movs	r2, #0
    439c:	4b10      	ldr	r3, [pc, #64]	; (43e0 <EIC_Handler+0x48>)
    439e:	701a      	strb	r2, [r3, #0]
    43a0:	2300      	movs	r3, #0
    43a2:	4910      	ldr	r1, [pc, #64]	; (43e4 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    43a4:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    43a6:	4e10      	ldr	r6, [pc, #64]	; (43e8 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    43a8:	4c0d      	ldr	r4, [pc, #52]	; (43e0 <EIC_Handler+0x48>)
    43aa:	e00a      	b.n	43c2 <EIC_Handler+0x2a>
		return eics[eic_index];
    43ac:	490d      	ldr	r1, [pc, #52]	; (43e4 <EIC_Handler+0x4c>)
    43ae:	e008      	b.n	43c2 <EIC_Handler+0x2a>
    43b0:	7823      	ldrb	r3, [r4, #0]
    43b2:	3301      	adds	r3, #1
    43b4:	b2db      	uxtb	r3, r3
    43b6:	7023      	strb	r3, [r4, #0]
    43b8:	2b0f      	cmp	r3, #15
    43ba:	d810      	bhi.n	43de <EIC_Handler+0x46>
		return NULL;
    43bc:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    43be:	2b1f      	cmp	r3, #31
    43c0:	d9f4      	bls.n	43ac <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    43c2:	0028      	movs	r0, r5
    43c4:	4018      	ands	r0, r3
    43c6:	2201      	movs	r2, #1
    43c8:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    43ca:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    43cc:	4210      	tst	r0, r2
    43ce:	d0ef      	beq.n	43b0 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    43d0:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    43d2:	009b      	lsls	r3, r3, #2
    43d4:	599b      	ldr	r3, [r3, r6]
    43d6:	2b00      	cmp	r3, #0
    43d8:	d0ea      	beq.n	43b0 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    43da:	4798      	blx	r3
    43dc:	e7e8      	b.n	43b0 <EIC_Handler+0x18>
			}
		}
	}
}
    43de:	bd70      	pop	{r4, r5, r6, pc}
    43e0:	200003a0 	.word	0x200003a0
    43e4:	40001800 	.word	0x40001800
    43e8:	200003a4 	.word	0x200003a4

000043ec <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    43ec:	4a04      	ldr	r2, [pc, #16]	; (4400 <_extint_enable+0x14>)
    43ee:	7813      	ldrb	r3, [r2, #0]
    43f0:	2102      	movs	r1, #2
    43f2:	430b      	orrs	r3, r1
    43f4:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    43f6:	7853      	ldrb	r3, [r2, #1]
    43f8:	b25b      	sxtb	r3, r3
    43fa:	2b00      	cmp	r3, #0
    43fc:	dbfb      	blt.n	43f6 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    43fe:	4770      	bx	lr
    4400:	40001800 	.word	0x40001800

00004404 <_system_extint_init>:
{
    4404:	b500      	push	{lr}
    4406:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    4408:	4a12      	ldr	r2, [pc, #72]	; (4454 <_system_extint_init+0x50>)
    440a:	6993      	ldr	r3, [r2, #24]
    440c:	2140      	movs	r1, #64	; 0x40
    440e:	430b      	orrs	r3, r1
    4410:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    4412:	a901      	add	r1, sp, #4
    4414:	2300      	movs	r3, #0
    4416:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    4418:	2005      	movs	r0, #5
    441a:	4b0f      	ldr	r3, [pc, #60]	; (4458 <_system_extint_init+0x54>)
    441c:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    441e:	2005      	movs	r0, #5
    4420:	4b0e      	ldr	r3, [pc, #56]	; (445c <_system_extint_init+0x58>)
    4422:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    4424:	4a0e      	ldr	r2, [pc, #56]	; (4460 <_system_extint_init+0x5c>)
    4426:	7813      	ldrb	r3, [r2, #0]
    4428:	2101      	movs	r1, #1
    442a:	430b      	orrs	r3, r1
    442c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    442e:	7853      	ldrb	r3, [r2, #1]
    4430:	b25b      	sxtb	r3, r3
    4432:	2b00      	cmp	r3, #0
    4434:	dbfb      	blt.n	442e <_system_extint_init+0x2a>
    4436:	4b0b      	ldr	r3, [pc, #44]	; (4464 <_system_extint_init+0x60>)
    4438:	0019      	movs	r1, r3
    443a:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    443c:	2200      	movs	r2, #0
    443e:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4440:	4299      	cmp	r1, r3
    4442:	d1fc      	bne.n	443e <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4444:	2210      	movs	r2, #16
    4446:	4b08      	ldr	r3, [pc, #32]	; (4468 <_system_extint_init+0x64>)
    4448:	601a      	str	r2, [r3, #0]
	_extint_enable();
    444a:	4b08      	ldr	r3, [pc, #32]	; (446c <_system_extint_init+0x68>)
    444c:	4798      	blx	r3
}
    444e:	b003      	add	sp, #12
    4450:	bd00      	pop	{pc}
    4452:	46c0      	nop			; (mov r8, r8)
    4454:	40000400 	.word	0x40000400
    4458:	000059d1 	.word	0x000059d1
    445c:	00005945 	.word	0x00005945
    4460:	40001800 	.word	0x40001800
    4464:	200003a4 	.word	0x200003a4
    4468:	e000e100 	.word	0xe000e100
    446c:	000043ed 	.word	0x000043ed

00004470 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    4470:	2300      	movs	r3, #0
    4472:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    4474:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    4476:	2201      	movs	r2, #1
    4478:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    447a:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    447c:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    447e:	3302      	adds	r3, #2
    4480:	72c3      	strb	r3, [r0, #11]
}
    4482:	4770      	bx	lr

00004484 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    4484:	b5f0      	push	{r4, r5, r6, r7, lr}
    4486:	b083      	sub	sp, #12
    4488:	0005      	movs	r5, r0
    448a:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    448c:	a901      	add	r1, sp, #4
    448e:	2300      	movs	r3, #0
    4490:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    4492:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    4494:	7923      	ldrb	r3, [r4, #4]
    4496:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    4498:	7a23      	ldrb	r3, [r4, #8]
    449a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    449c:	7820      	ldrb	r0, [r4, #0]
    449e:	4b15      	ldr	r3, [pc, #84]	; (44f4 <extint_chan_set_config+0x70>)
    44a0:	4798      	blx	r3
		return NULL;
    44a2:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    44a4:	2d1f      	cmp	r5, #31
    44a6:	d800      	bhi.n	44aa <extint_chan_set_config+0x26>
		return eics[eic_index];
    44a8:	4813      	ldr	r0, [pc, #76]	; (44f8 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    44aa:	2207      	movs	r2, #7
    44ac:	402a      	ands	r2, r5
    44ae:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    44b0:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    44b2:	7aa3      	ldrb	r3, [r4, #10]
    44b4:	2b00      	cmp	r3, #0
    44b6:	d001      	beq.n	44bc <extint_chan_set_config+0x38>
    44b8:	2308      	movs	r3, #8
    44ba:	431f      	orrs	r7, r3
    44bc:	08eb      	lsrs	r3, r5, #3
    44be:	009b      	lsls	r3, r3, #2
    44c0:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    44c2:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    44c4:	260f      	movs	r6, #15
    44c6:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    44c8:	43b1      	bics	r1, r6
			(new_config << config_pos);
    44ca:	4097      	lsls	r7, r2
    44cc:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    44ce:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    44d0:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    44d2:	7a63      	ldrb	r3, [r4, #9]
    44d4:	2b00      	cmp	r3, #0
    44d6:	d106      	bne.n	44e6 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    44d8:	6943      	ldr	r3, [r0, #20]
    44da:	2201      	movs	r2, #1
    44dc:	40aa      	lsls	r2, r5
    44de:	4393      	bics	r3, r2
    44e0:	6143      	str	r3, [r0, #20]
	}
}
    44e2:	b003      	add	sp, #12
    44e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    44e6:	6942      	ldr	r2, [r0, #20]
    44e8:	2301      	movs	r3, #1
    44ea:	40ab      	lsls	r3, r5
    44ec:	4313      	orrs	r3, r2
    44ee:	6143      	str	r3, [r0, #20]
    44f0:	e7f7      	b.n	44e2 <extint_chan_set_config+0x5e>
    44f2:	46c0      	nop			; (mov r8, r8)
    44f4:	00005ac9 	.word	0x00005ac9
    44f8:	40001800 	.word	0x40001800

000044fc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    44fc:	b500      	push	{lr}
    44fe:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4500:	ab01      	add	r3, sp, #4
    4502:	2280      	movs	r2, #128	; 0x80
    4504:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    4506:	780a      	ldrb	r2, [r1, #0]
    4508:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    450a:	784a      	ldrb	r2, [r1, #1]
    450c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    450e:	788a      	ldrb	r2, [r1, #2]
    4510:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    4512:	0019      	movs	r1, r3
    4514:	4b01      	ldr	r3, [pc, #4]	; (451c <port_pin_set_config+0x20>)
    4516:	4798      	blx	r3
}
    4518:	b003      	add	sp, #12
    451a:	bd00      	pop	{pc}
    451c:	00005ac9 	.word	0x00005ac9

00004520 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    4520:	b5f0      	push	{r4, r5, r6, r7, lr}
    4522:	46de      	mov	lr, fp
    4524:	4657      	mov	r7, sl
    4526:	464e      	mov	r6, r9
    4528:	4645      	mov	r5, r8
    452a:	b5e0      	push	{r5, r6, r7, lr}
    452c:	b087      	sub	sp, #28
    452e:	4680      	mov	r8, r0
    4530:	9104      	str	r1, [sp, #16]
    4532:	0016      	movs	r6, r2
    4534:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    4536:	2200      	movs	r2, #0
    4538:	2300      	movs	r3, #0
    453a:	2100      	movs	r1, #0
    453c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    453e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    4540:	2001      	movs	r0, #1
    4542:	0021      	movs	r1, r4
    4544:	9600      	str	r6, [sp, #0]
    4546:	9701      	str	r7, [sp, #4]
    4548:	465c      	mov	r4, fp
    454a:	9403      	str	r4, [sp, #12]
    454c:	4644      	mov	r4, r8
    454e:	9405      	str	r4, [sp, #20]
    4550:	e013      	b.n	457a <long_division+0x5a>
    4552:	2420      	movs	r4, #32
    4554:	1a64      	subs	r4, r4, r1
    4556:	0005      	movs	r5, r0
    4558:	40e5      	lsrs	r5, r4
    455a:	46a8      	mov	r8, r5
    455c:	e014      	b.n	4588 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    455e:	9c00      	ldr	r4, [sp, #0]
    4560:	9d01      	ldr	r5, [sp, #4]
    4562:	1b12      	subs	r2, r2, r4
    4564:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    4566:	465c      	mov	r4, fp
    4568:	464d      	mov	r5, r9
    456a:	432c      	orrs	r4, r5
    456c:	46a3      	mov	fp, r4
    456e:	9c03      	ldr	r4, [sp, #12]
    4570:	4645      	mov	r5, r8
    4572:	432c      	orrs	r4, r5
    4574:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    4576:	3901      	subs	r1, #1
    4578:	d325      	bcc.n	45c6 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    457a:	2420      	movs	r4, #32
    457c:	4264      	negs	r4, r4
    457e:	190c      	adds	r4, r1, r4
    4580:	d4e7      	bmi.n	4552 <long_division+0x32>
    4582:	0005      	movs	r5, r0
    4584:	40a5      	lsls	r5, r4
    4586:	46a8      	mov	r8, r5
    4588:	0004      	movs	r4, r0
    458a:	408c      	lsls	r4, r1
    458c:	46a1      	mov	r9, r4
		r = r << 1;
    458e:	1892      	adds	r2, r2, r2
    4590:	415b      	adcs	r3, r3
    4592:	0014      	movs	r4, r2
    4594:	001d      	movs	r5, r3
		if (n & bit_shift) {
    4596:	9e05      	ldr	r6, [sp, #20]
    4598:	464f      	mov	r7, r9
    459a:	403e      	ands	r6, r7
    459c:	46b4      	mov	ip, r6
    459e:	9e04      	ldr	r6, [sp, #16]
    45a0:	4647      	mov	r7, r8
    45a2:	403e      	ands	r6, r7
    45a4:	46b2      	mov	sl, r6
    45a6:	4666      	mov	r6, ip
    45a8:	4657      	mov	r7, sl
    45aa:	433e      	orrs	r6, r7
    45ac:	d003      	beq.n	45b6 <long_division+0x96>
			r |= 0x01;
    45ae:	0006      	movs	r6, r0
    45b0:	4326      	orrs	r6, r4
    45b2:	0032      	movs	r2, r6
    45b4:	002b      	movs	r3, r5
		if (r >= d) {
    45b6:	9c00      	ldr	r4, [sp, #0]
    45b8:	9d01      	ldr	r5, [sp, #4]
    45ba:	429d      	cmp	r5, r3
    45bc:	d8db      	bhi.n	4576 <long_division+0x56>
    45be:	d1ce      	bne.n	455e <long_division+0x3e>
    45c0:	4294      	cmp	r4, r2
    45c2:	d8d8      	bhi.n	4576 <long_division+0x56>
    45c4:	e7cb      	b.n	455e <long_division+0x3e>
    45c6:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    45c8:	4658      	mov	r0, fp
    45ca:	0019      	movs	r1, r3
    45cc:	b007      	add	sp, #28
    45ce:	bc3c      	pop	{r2, r3, r4, r5}
    45d0:	4690      	mov	r8, r2
    45d2:	4699      	mov	r9, r3
    45d4:	46a2      	mov	sl, r4
    45d6:	46ab      	mov	fp, r5
    45d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000045da <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    45da:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    45dc:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    45de:	2340      	movs	r3, #64	; 0x40
    45e0:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    45e2:	4281      	cmp	r1, r0
    45e4:	d202      	bcs.n	45ec <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    45e6:	0018      	movs	r0, r3
    45e8:	bd10      	pop	{r4, pc}
		baud_calculated++;
    45ea:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    45ec:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    45ee:	1c63      	adds	r3, r4, #1
    45f0:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    45f2:	4288      	cmp	r0, r1
    45f4:	d9f9      	bls.n	45ea <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    45f6:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    45f8:	2cff      	cmp	r4, #255	; 0xff
    45fa:	d8f4      	bhi.n	45e6 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    45fc:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    45fe:	2300      	movs	r3, #0
    4600:	e7f1      	b.n	45e6 <_sercom_get_sync_baud_val+0xc>
	...

00004604 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    4604:	b5f0      	push	{r4, r5, r6, r7, lr}
    4606:	b083      	sub	sp, #12
    4608:	000f      	movs	r7, r1
    460a:	0016      	movs	r6, r2
    460c:	aa08      	add	r2, sp, #32
    460e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    4610:	0004      	movs	r4, r0
    4612:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4614:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    4616:	42bc      	cmp	r4, r7
    4618:	d902      	bls.n	4620 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    461a:	0010      	movs	r0, r2
    461c:	b003      	add	sp, #12
    461e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    4620:	2b00      	cmp	r3, #0
    4622:	d114      	bne.n	464e <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    4624:	0002      	movs	r2, r0
    4626:	0008      	movs	r0, r1
    4628:	2100      	movs	r1, #0
    462a:	4c19      	ldr	r4, [pc, #100]	; (4690 <_sercom_get_async_baud_val+0x8c>)
    462c:	47a0      	blx	r4
    462e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    4630:	003a      	movs	r2, r7
    4632:	2300      	movs	r3, #0
    4634:	2000      	movs	r0, #0
    4636:	4c17      	ldr	r4, [pc, #92]	; (4694 <_sercom_get_async_baud_val+0x90>)
    4638:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    463a:	2200      	movs	r2, #0
    463c:	2301      	movs	r3, #1
    463e:	1a12      	subs	r2, r2, r0
    4640:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    4642:	0c12      	lsrs	r2, r2, #16
    4644:	041b      	lsls	r3, r3, #16
    4646:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    4648:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    464a:	2200      	movs	r2, #0
    464c:	e7e5      	b.n	461a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    464e:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    4650:	2b01      	cmp	r3, #1
    4652:	d1f9      	bne.n	4648 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    4654:	000a      	movs	r2, r1
    4656:	2300      	movs	r3, #0
    4658:	2100      	movs	r1, #0
    465a:	4c0d      	ldr	r4, [pc, #52]	; (4690 <_sercom_get_async_baud_val+0x8c>)
    465c:	47a0      	blx	r4
    465e:	0002      	movs	r2, r0
    4660:	000b      	movs	r3, r1
    4662:	9200      	str	r2, [sp, #0]
    4664:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    4666:	0038      	movs	r0, r7
    4668:	2100      	movs	r1, #0
    466a:	4c0a      	ldr	r4, [pc, #40]	; (4694 <_sercom_get_async_baud_val+0x90>)
    466c:	47a0      	blx	r4
    466e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    4670:	2380      	movs	r3, #128	; 0x80
    4672:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4674:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    4676:	4298      	cmp	r0, r3
    4678:	d8cf      	bhi.n	461a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    467a:	0f79      	lsrs	r1, r7, #29
    467c:	00f8      	lsls	r0, r7, #3
    467e:	9a00      	ldr	r2, [sp, #0]
    4680:	9b01      	ldr	r3, [sp, #4]
    4682:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    4684:	00ea      	lsls	r2, r5, #3
    4686:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    4688:	b2d2      	uxtb	r2, r2
    468a:	0352      	lsls	r2, r2, #13
    468c:	432a      	orrs	r2, r5
    468e:	e7db      	b.n	4648 <_sercom_get_async_baud_val+0x44>
    4690:	00007c4d 	.word	0x00007c4d
    4694:	00004521 	.word	0x00004521

00004698 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    4698:	b510      	push	{r4, lr}
    469a:	b082      	sub	sp, #8
    469c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    469e:	4b0e      	ldr	r3, [pc, #56]	; (46d8 <sercom_set_gclk_generator+0x40>)
    46a0:	781b      	ldrb	r3, [r3, #0]
    46a2:	2b00      	cmp	r3, #0
    46a4:	d007      	beq.n	46b6 <sercom_set_gclk_generator+0x1e>
    46a6:	2900      	cmp	r1, #0
    46a8:	d105      	bne.n	46b6 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    46aa:	4b0b      	ldr	r3, [pc, #44]	; (46d8 <sercom_set_gclk_generator+0x40>)
    46ac:	785b      	ldrb	r3, [r3, #1]
    46ae:	4283      	cmp	r3, r0
    46b0:	d010      	beq.n	46d4 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    46b2:	201d      	movs	r0, #29
    46b4:	e00c      	b.n	46d0 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    46b6:	a901      	add	r1, sp, #4
    46b8:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    46ba:	2013      	movs	r0, #19
    46bc:	4b07      	ldr	r3, [pc, #28]	; (46dc <sercom_set_gclk_generator+0x44>)
    46be:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    46c0:	2013      	movs	r0, #19
    46c2:	4b07      	ldr	r3, [pc, #28]	; (46e0 <sercom_set_gclk_generator+0x48>)
    46c4:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    46c6:	4b04      	ldr	r3, [pc, #16]	; (46d8 <sercom_set_gclk_generator+0x40>)
    46c8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    46ca:	2201      	movs	r2, #1
    46cc:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    46ce:	2000      	movs	r0, #0
}
    46d0:	b002      	add	sp, #8
    46d2:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    46d4:	2000      	movs	r0, #0
    46d6:	e7fb      	b.n	46d0 <sercom_set_gclk_generator+0x38>
    46d8:	200000ac 	.word	0x200000ac
    46dc:	000059d1 	.word	0x000059d1
    46e0:	00005945 	.word	0x00005945

000046e4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    46e4:	4b40      	ldr	r3, [pc, #256]	; (47e8 <_sercom_get_default_pad+0x104>)
    46e6:	4298      	cmp	r0, r3
    46e8:	d031      	beq.n	474e <_sercom_get_default_pad+0x6a>
    46ea:	d90a      	bls.n	4702 <_sercom_get_default_pad+0x1e>
    46ec:	4b3f      	ldr	r3, [pc, #252]	; (47ec <_sercom_get_default_pad+0x108>)
    46ee:	4298      	cmp	r0, r3
    46f0:	d04d      	beq.n	478e <_sercom_get_default_pad+0xaa>
    46f2:	4b3f      	ldr	r3, [pc, #252]	; (47f0 <_sercom_get_default_pad+0x10c>)
    46f4:	4298      	cmp	r0, r3
    46f6:	d05a      	beq.n	47ae <_sercom_get_default_pad+0xca>
    46f8:	4b3e      	ldr	r3, [pc, #248]	; (47f4 <_sercom_get_default_pad+0x110>)
    46fa:	4298      	cmp	r0, r3
    46fc:	d037      	beq.n	476e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    46fe:	2000      	movs	r0, #0
}
    4700:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    4702:	4b3d      	ldr	r3, [pc, #244]	; (47f8 <_sercom_get_default_pad+0x114>)
    4704:	4298      	cmp	r0, r3
    4706:	d00c      	beq.n	4722 <_sercom_get_default_pad+0x3e>
    4708:	4b3c      	ldr	r3, [pc, #240]	; (47fc <_sercom_get_default_pad+0x118>)
    470a:	4298      	cmp	r0, r3
    470c:	d1f7      	bne.n	46fe <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    470e:	2901      	cmp	r1, #1
    4710:	d017      	beq.n	4742 <_sercom_get_default_pad+0x5e>
    4712:	2900      	cmp	r1, #0
    4714:	d05d      	beq.n	47d2 <_sercom_get_default_pad+0xee>
    4716:	2902      	cmp	r1, #2
    4718:	d015      	beq.n	4746 <_sercom_get_default_pad+0x62>
    471a:	2903      	cmp	r1, #3
    471c:	d015      	beq.n	474a <_sercom_get_default_pad+0x66>
	return 0;
    471e:	2000      	movs	r0, #0
    4720:	e7ee      	b.n	4700 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4722:	2901      	cmp	r1, #1
    4724:	d007      	beq.n	4736 <_sercom_get_default_pad+0x52>
    4726:	2900      	cmp	r1, #0
    4728:	d051      	beq.n	47ce <_sercom_get_default_pad+0xea>
    472a:	2902      	cmp	r1, #2
    472c:	d005      	beq.n	473a <_sercom_get_default_pad+0x56>
    472e:	2903      	cmp	r1, #3
    4730:	d005      	beq.n	473e <_sercom_get_default_pad+0x5a>
	return 0;
    4732:	2000      	movs	r0, #0
    4734:	e7e4      	b.n	4700 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4736:	4832      	ldr	r0, [pc, #200]	; (4800 <_sercom_get_default_pad+0x11c>)
    4738:	e7e2      	b.n	4700 <_sercom_get_default_pad+0x1c>
    473a:	4832      	ldr	r0, [pc, #200]	; (4804 <_sercom_get_default_pad+0x120>)
    473c:	e7e0      	b.n	4700 <_sercom_get_default_pad+0x1c>
    473e:	4832      	ldr	r0, [pc, #200]	; (4808 <_sercom_get_default_pad+0x124>)
    4740:	e7de      	b.n	4700 <_sercom_get_default_pad+0x1c>
    4742:	4832      	ldr	r0, [pc, #200]	; (480c <_sercom_get_default_pad+0x128>)
    4744:	e7dc      	b.n	4700 <_sercom_get_default_pad+0x1c>
    4746:	4832      	ldr	r0, [pc, #200]	; (4810 <_sercom_get_default_pad+0x12c>)
    4748:	e7da      	b.n	4700 <_sercom_get_default_pad+0x1c>
    474a:	4832      	ldr	r0, [pc, #200]	; (4814 <_sercom_get_default_pad+0x130>)
    474c:	e7d8      	b.n	4700 <_sercom_get_default_pad+0x1c>
    474e:	2901      	cmp	r1, #1
    4750:	d007      	beq.n	4762 <_sercom_get_default_pad+0x7e>
    4752:	2900      	cmp	r1, #0
    4754:	d03f      	beq.n	47d6 <_sercom_get_default_pad+0xf2>
    4756:	2902      	cmp	r1, #2
    4758:	d005      	beq.n	4766 <_sercom_get_default_pad+0x82>
    475a:	2903      	cmp	r1, #3
    475c:	d005      	beq.n	476a <_sercom_get_default_pad+0x86>
	return 0;
    475e:	2000      	movs	r0, #0
    4760:	e7ce      	b.n	4700 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4762:	482d      	ldr	r0, [pc, #180]	; (4818 <_sercom_get_default_pad+0x134>)
    4764:	e7cc      	b.n	4700 <_sercom_get_default_pad+0x1c>
    4766:	482d      	ldr	r0, [pc, #180]	; (481c <_sercom_get_default_pad+0x138>)
    4768:	e7ca      	b.n	4700 <_sercom_get_default_pad+0x1c>
    476a:	482d      	ldr	r0, [pc, #180]	; (4820 <_sercom_get_default_pad+0x13c>)
    476c:	e7c8      	b.n	4700 <_sercom_get_default_pad+0x1c>
    476e:	2901      	cmp	r1, #1
    4770:	d007      	beq.n	4782 <_sercom_get_default_pad+0x9e>
    4772:	2900      	cmp	r1, #0
    4774:	d031      	beq.n	47da <_sercom_get_default_pad+0xf6>
    4776:	2902      	cmp	r1, #2
    4778:	d005      	beq.n	4786 <_sercom_get_default_pad+0xa2>
    477a:	2903      	cmp	r1, #3
    477c:	d005      	beq.n	478a <_sercom_get_default_pad+0xa6>
	return 0;
    477e:	2000      	movs	r0, #0
    4780:	e7be      	b.n	4700 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4782:	4828      	ldr	r0, [pc, #160]	; (4824 <_sercom_get_default_pad+0x140>)
    4784:	e7bc      	b.n	4700 <_sercom_get_default_pad+0x1c>
    4786:	4828      	ldr	r0, [pc, #160]	; (4828 <_sercom_get_default_pad+0x144>)
    4788:	e7ba      	b.n	4700 <_sercom_get_default_pad+0x1c>
    478a:	4828      	ldr	r0, [pc, #160]	; (482c <_sercom_get_default_pad+0x148>)
    478c:	e7b8      	b.n	4700 <_sercom_get_default_pad+0x1c>
    478e:	2901      	cmp	r1, #1
    4790:	d007      	beq.n	47a2 <_sercom_get_default_pad+0xbe>
    4792:	2900      	cmp	r1, #0
    4794:	d023      	beq.n	47de <_sercom_get_default_pad+0xfa>
    4796:	2902      	cmp	r1, #2
    4798:	d005      	beq.n	47a6 <_sercom_get_default_pad+0xc2>
    479a:	2903      	cmp	r1, #3
    479c:	d005      	beq.n	47aa <_sercom_get_default_pad+0xc6>
	return 0;
    479e:	2000      	movs	r0, #0
    47a0:	e7ae      	b.n	4700 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    47a2:	4823      	ldr	r0, [pc, #140]	; (4830 <_sercom_get_default_pad+0x14c>)
    47a4:	e7ac      	b.n	4700 <_sercom_get_default_pad+0x1c>
    47a6:	4823      	ldr	r0, [pc, #140]	; (4834 <_sercom_get_default_pad+0x150>)
    47a8:	e7aa      	b.n	4700 <_sercom_get_default_pad+0x1c>
    47aa:	4823      	ldr	r0, [pc, #140]	; (4838 <_sercom_get_default_pad+0x154>)
    47ac:	e7a8      	b.n	4700 <_sercom_get_default_pad+0x1c>
    47ae:	2901      	cmp	r1, #1
    47b0:	d007      	beq.n	47c2 <_sercom_get_default_pad+0xde>
    47b2:	2900      	cmp	r1, #0
    47b4:	d015      	beq.n	47e2 <_sercom_get_default_pad+0xfe>
    47b6:	2902      	cmp	r1, #2
    47b8:	d005      	beq.n	47c6 <_sercom_get_default_pad+0xe2>
    47ba:	2903      	cmp	r1, #3
    47bc:	d005      	beq.n	47ca <_sercom_get_default_pad+0xe6>
	return 0;
    47be:	2000      	movs	r0, #0
    47c0:	e79e      	b.n	4700 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    47c2:	481e      	ldr	r0, [pc, #120]	; (483c <_sercom_get_default_pad+0x158>)
    47c4:	e79c      	b.n	4700 <_sercom_get_default_pad+0x1c>
    47c6:	481e      	ldr	r0, [pc, #120]	; (4840 <_sercom_get_default_pad+0x15c>)
    47c8:	e79a      	b.n	4700 <_sercom_get_default_pad+0x1c>
    47ca:	481e      	ldr	r0, [pc, #120]	; (4844 <_sercom_get_default_pad+0x160>)
    47cc:	e798      	b.n	4700 <_sercom_get_default_pad+0x1c>
    47ce:	481e      	ldr	r0, [pc, #120]	; (4848 <_sercom_get_default_pad+0x164>)
    47d0:	e796      	b.n	4700 <_sercom_get_default_pad+0x1c>
    47d2:	2003      	movs	r0, #3
    47d4:	e794      	b.n	4700 <_sercom_get_default_pad+0x1c>
    47d6:	481d      	ldr	r0, [pc, #116]	; (484c <_sercom_get_default_pad+0x168>)
    47d8:	e792      	b.n	4700 <_sercom_get_default_pad+0x1c>
    47da:	481d      	ldr	r0, [pc, #116]	; (4850 <_sercom_get_default_pad+0x16c>)
    47dc:	e790      	b.n	4700 <_sercom_get_default_pad+0x1c>
    47de:	481d      	ldr	r0, [pc, #116]	; (4854 <_sercom_get_default_pad+0x170>)
    47e0:	e78e      	b.n	4700 <_sercom_get_default_pad+0x1c>
    47e2:	481d      	ldr	r0, [pc, #116]	; (4858 <_sercom_get_default_pad+0x174>)
    47e4:	e78c      	b.n	4700 <_sercom_get_default_pad+0x1c>
    47e6:	46c0      	nop			; (mov r8, r8)
    47e8:	42001000 	.word	0x42001000
    47ec:	42001800 	.word	0x42001800
    47f0:	42001c00 	.word	0x42001c00
    47f4:	42001400 	.word	0x42001400
    47f8:	42000800 	.word	0x42000800
    47fc:	42000c00 	.word	0x42000c00
    4800:	00050003 	.word	0x00050003
    4804:	00060003 	.word	0x00060003
    4808:	00070003 	.word	0x00070003
    480c:	00010003 	.word	0x00010003
    4810:	001e0003 	.word	0x001e0003
    4814:	001f0003 	.word	0x001f0003
    4818:	00090003 	.word	0x00090003
    481c:	000a0003 	.word	0x000a0003
    4820:	000b0003 	.word	0x000b0003
    4824:	00110003 	.word	0x00110003
    4828:	00120003 	.word	0x00120003
    482c:	00130003 	.word	0x00130003
    4830:	000d0003 	.word	0x000d0003
    4834:	000e0003 	.word	0x000e0003
    4838:	000f0003 	.word	0x000f0003
    483c:	00170003 	.word	0x00170003
    4840:	00180003 	.word	0x00180003
    4844:	00190003 	.word	0x00190003
    4848:	00040003 	.word	0x00040003
    484c:	00080003 	.word	0x00080003
    4850:	00100003 	.word	0x00100003
    4854:	000c0003 	.word	0x000c0003
    4858:	00160003 	.word	0x00160003

0000485c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    485c:	b530      	push	{r4, r5, lr}
    485e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    4860:	4b0b      	ldr	r3, [pc, #44]	; (4890 <_sercom_get_sercom_inst_index+0x34>)
    4862:	466a      	mov	r2, sp
    4864:	cb32      	ldmia	r3!, {r1, r4, r5}
    4866:	c232      	stmia	r2!, {r1, r4, r5}
    4868:	cb32      	ldmia	r3!, {r1, r4, r5}
    486a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    486c:	9b00      	ldr	r3, [sp, #0]
    486e:	4283      	cmp	r3, r0
    4870:	d00b      	beq.n	488a <_sercom_get_sercom_inst_index+0x2e>
    4872:	2301      	movs	r3, #1
    4874:	009a      	lsls	r2, r3, #2
    4876:	4669      	mov	r1, sp
    4878:	5852      	ldr	r2, [r2, r1]
    487a:	4282      	cmp	r2, r0
    487c:	d006      	beq.n	488c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    487e:	3301      	adds	r3, #1
    4880:	2b06      	cmp	r3, #6
    4882:	d1f7      	bne.n	4874 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    4884:	2000      	movs	r0, #0
}
    4886:	b007      	add	sp, #28
    4888:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    488a:	2300      	movs	r3, #0
			return i;
    488c:	b2d8      	uxtb	r0, r3
    488e:	e7fa      	b.n	4886 <_sercom_get_sercom_inst_index+0x2a>
    4890:	0000bdfc 	.word	0x0000bdfc

00004894 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    4894:	4770      	bx	lr
	...

00004898 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    4898:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    489a:	4b0a      	ldr	r3, [pc, #40]	; (48c4 <_sercom_set_handler+0x2c>)
    489c:	781b      	ldrb	r3, [r3, #0]
    489e:	2b00      	cmp	r3, #0
    48a0:	d10c      	bne.n	48bc <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    48a2:	4f09      	ldr	r7, [pc, #36]	; (48c8 <_sercom_set_handler+0x30>)
    48a4:	4e09      	ldr	r6, [pc, #36]	; (48cc <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    48a6:	4d0a      	ldr	r5, [pc, #40]	; (48d0 <_sercom_set_handler+0x38>)
    48a8:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    48aa:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    48ac:	195a      	adds	r2, r3, r5
    48ae:	6014      	str	r4, [r2, #0]
    48b0:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    48b2:	2b18      	cmp	r3, #24
    48b4:	d1f9      	bne.n	48aa <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    48b6:	2201      	movs	r2, #1
    48b8:	4b02      	ldr	r3, [pc, #8]	; (48c4 <_sercom_set_handler+0x2c>)
    48ba:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    48bc:	0080      	lsls	r0, r0, #2
    48be:	4b02      	ldr	r3, [pc, #8]	; (48c8 <_sercom_set_handler+0x30>)
    48c0:	50c1      	str	r1, [r0, r3]
}
    48c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48c4:	200000ae 	.word	0x200000ae
    48c8:	200000b0 	.word	0x200000b0
    48cc:	00004895 	.word	0x00004895
    48d0:	200003e4 	.word	0x200003e4

000048d4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    48d4:	b500      	push	{lr}
    48d6:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    48d8:	2309      	movs	r3, #9
    48da:	466a      	mov	r2, sp
    48dc:	7013      	strb	r3, [r2, #0]
    48de:	3301      	adds	r3, #1
    48e0:	7053      	strb	r3, [r2, #1]
    48e2:	3301      	adds	r3, #1
    48e4:	7093      	strb	r3, [r2, #2]
    48e6:	3301      	adds	r3, #1
    48e8:	70d3      	strb	r3, [r2, #3]
    48ea:	3301      	adds	r3, #1
    48ec:	7113      	strb	r3, [r2, #4]
    48ee:	3301      	adds	r3, #1
    48f0:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    48f2:	4b03      	ldr	r3, [pc, #12]	; (4900 <_sercom_get_interrupt_vector+0x2c>)
    48f4:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    48f6:	466b      	mov	r3, sp
    48f8:	5618      	ldrsb	r0, [r3, r0]
}
    48fa:	b003      	add	sp, #12
    48fc:	bd00      	pop	{pc}
    48fe:	46c0      	nop			; (mov r8, r8)
    4900:	0000485d 	.word	0x0000485d

00004904 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    4904:	b510      	push	{r4, lr}
    4906:	4b02      	ldr	r3, [pc, #8]	; (4910 <SERCOM0_Handler+0xc>)
    4908:	681b      	ldr	r3, [r3, #0]
    490a:	2000      	movs	r0, #0
    490c:	4798      	blx	r3
    490e:	bd10      	pop	{r4, pc}
    4910:	200000b0 	.word	0x200000b0

00004914 <SERCOM1_Handler>:
    4914:	b510      	push	{r4, lr}
    4916:	4b02      	ldr	r3, [pc, #8]	; (4920 <SERCOM1_Handler+0xc>)
    4918:	685b      	ldr	r3, [r3, #4]
    491a:	2001      	movs	r0, #1
    491c:	4798      	blx	r3
    491e:	bd10      	pop	{r4, pc}
    4920:	200000b0 	.word	0x200000b0

00004924 <SERCOM2_Handler>:
    4924:	b510      	push	{r4, lr}
    4926:	4b02      	ldr	r3, [pc, #8]	; (4930 <SERCOM2_Handler+0xc>)
    4928:	689b      	ldr	r3, [r3, #8]
    492a:	2002      	movs	r0, #2
    492c:	4798      	blx	r3
    492e:	bd10      	pop	{r4, pc}
    4930:	200000b0 	.word	0x200000b0

00004934 <SERCOM3_Handler>:
    4934:	b510      	push	{r4, lr}
    4936:	4b02      	ldr	r3, [pc, #8]	; (4940 <SERCOM3_Handler+0xc>)
    4938:	68db      	ldr	r3, [r3, #12]
    493a:	2003      	movs	r0, #3
    493c:	4798      	blx	r3
    493e:	bd10      	pop	{r4, pc}
    4940:	200000b0 	.word	0x200000b0

00004944 <SERCOM4_Handler>:
    4944:	b510      	push	{r4, lr}
    4946:	4b02      	ldr	r3, [pc, #8]	; (4950 <SERCOM4_Handler+0xc>)
    4948:	691b      	ldr	r3, [r3, #16]
    494a:	2004      	movs	r0, #4
    494c:	4798      	blx	r3
    494e:	bd10      	pop	{r4, pc}
    4950:	200000b0 	.word	0x200000b0

00004954 <SERCOM5_Handler>:
    4954:	b510      	push	{r4, lr}
    4956:	4b02      	ldr	r3, [pc, #8]	; (4960 <SERCOM5_Handler+0xc>)
    4958:	695b      	ldr	r3, [r3, #20]
    495a:	2005      	movs	r0, #5
    495c:	4798      	blx	r3
    495e:	bd10      	pop	{r4, pc}
    4960:	200000b0 	.word	0x200000b0

00004964 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    4964:	b5f0      	push	{r4, r5, r6, r7, lr}
    4966:	b08b      	sub	sp, #44	; 0x2c
    4968:	0005      	movs	r5, r0
    496a:	000c      	movs	r4, r1
    496c:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    496e:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    4970:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    4972:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    4974:	079b      	lsls	r3, r3, #30
    4976:	d501      	bpl.n	497c <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    4978:	b00b      	add	sp, #44	; 0x2c
    497a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    497c:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    497e:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    4980:	07db      	lsls	r3, r3, #31
    4982:	d4f9      	bmi.n	4978 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4984:	0008      	movs	r0, r1
    4986:	4b60      	ldr	r3, [pc, #384]	; (4b08 <spi_init+0x1a4>)
    4988:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    498a:	4a60      	ldr	r2, [pc, #384]	; (4b0c <spi_init+0x1a8>)
    498c:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    498e:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4990:	2301      	movs	r3, #1
    4992:	40bb      	lsls	r3, r7
    4994:	430b      	orrs	r3, r1
    4996:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    4998:	a909      	add	r1, sp, #36	; 0x24
    499a:	2724      	movs	r7, #36	; 0x24
    499c:	5df3      	ldrb	r3, [r6, r7]
    499e:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    49a0:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    49a2:	b2c3      	uxtb	r3, r0
    49a4:	9301      	str	r3, [sp, #4]
    49a6:	0018      	movs	r0, r3
    49a8:	4b59      	ldr	r3, [pc, #356]	; (4b10 <spi_init+0x1ac>)
    49aa:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    49ac:	9801      	ldr	r0, [sp, #4]
    49ae:	4b59      	ldr	r3, [pc, #356]	; (4b14 <spi_init+0x1b0>)
    49b0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    49b2:	5df0      	ldrb	r0, [r6, r7]
    49b4:	2100      	movs	r1, #0
    49b6:	4b58      	ldr	r3, [pc, #352]	; (4b18 <spi_init+0x1b4>)
    49b8:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    49ba:	7833      	ldrb	r3, [r6, #0]
    49bc:	2b01      	cmp	r3, #1
    49be:	d038      	beq.n	4a32 <spi_init+0xce>
    49c0:	002b      	movs	r3, r5
    49c2:	330c      	adds	r3, #12
    49c4:	0029      	movs	r1, r5
    49c6:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    49c8:	2200      	movs	r2, #0
    49ca:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    49cc:	428b      	cmp	r3, r1
    49ce:	d1fc      	bne.n	49ca <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    49d0:	2300      	movs	r3, #0
    49d2:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    49d4:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    49d6:	2400      	movs	r4, #0
    49d8:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    49da:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    49dc:	3336      	adds	r3, #54	; 0x36
    49de:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    49e0:	3301      	adds	r3, #1
    49e2:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    49e4:	3301      	adds	r3, #1
    49e6:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    49e8:	3b35      	subs	r3, #53	; 0x35
    49ea:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    49ec:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    49ee:	6828      	ldr	r0, [r5, #0]
    49f0:	4b45      	ldr	r3, [pc, #276]	; (4b08 <spi_init+0x1a4>)
    49f2:	4798      	blx	r3
    49f4:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    49f6:	4949      	ldr	r1, [pc, #292]	; (4b1c <spi_init+0x1b8>)
    49f8:	4b49      	ldr	r3, [pc, #292]	; (4b20 <spi_init+0x1bc>)
    49fa:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    49fc:	00bf      	lsls	r7, r7, #2
    49fe:	4b49      	ldr	r3, [pc, #292]	; (4b24 <spi_init+0x1c0>)
    4a00:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4a02:	682f      	ldr	r7, [r5, #0]
    4a04:	ab04      	add	r3, sp, #16
    4a06:	2280      	movs	r2, #128	; 0x80
    4a08:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4a0a:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4a0c:	3a7f      	subs	r2, #127	; 0x7f
    4a0e:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4a10:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    4a12:	7833      	ldrb	r3, [r6, #0]
    4a14:	2b00      	cmp	r3, #0
    4a16:	d102      	bne.n	4a1e <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4a18:	2200      	movs	r2, #0
    4a1a:	ab04      	add	r3, sp, #16
    4a1c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    4a1e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    4a20:	9305      	str	r3, [sp, #20]
    4a22:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    4a24:	9306      	str	r3, [sp, #24]
    4a26:	6b33      	ldr	r3, [r6, #48]	; 0x30
    4a28:	9307      	str	r3, [sp, #28]
    4a2a:	6b73      	ldr	r3, [r6, #52]	; 0x34
    4a2c:	9308      	str	r3, [sp, #32]
    4a2e:	2400      	movs	r4, #0
    4a30:	e00b      	b.n	4a4a <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    4a32:	6823      	ldr	r3, [r4, #0]
    4a34:	220c      	movs	r2, #12
    4a36:	4313      	orrs	r3, r2
    4a38:	6023      	str	r3, [r4, #0]
    4a3a:	e7c1      	b.n	49c0 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4a3c:	0038      	movs	r0, r7
    4a3e:	4b3a      	ldr	r3, [pc, #232]	; (4b28 <spi_init+0x1c4>)
    4a40:	4798      	blx	r3
    4a42:	e00a      	b.n	4a5a <spi_init+0xf6>
    4a44:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    4a46:	2c04      	cmp	r4, #4
    4a48:	d010      	beq.n	4a6c <spi_init+0x108>
    4a4a:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4a4c:	00a3      	lsls	r3, r4, #2
    4a4e:	aa02      	add	r2, sp, #8
    4a50:	200c      	movs	r0, #12
    4a52:	1812      	adds	r2, r2, r0
    4a54:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    4a56:	2800      	cmp	r0, #0
    4a58:	d0f0      	beq.n	4a3c <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    4a5a:	1c43      	adds	r3, r0, #1
    4a5c:	d0f2      	beq.n	4a44 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4a5e:	a904      	add	r1, sp, #16
    4a60:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4a62:	0c00      	lsrs	r0, r0, #16
    4a64:	b2c0      	uxtb	r0, r0
    4a66:	4b31      	ldr	r3, [pc, #196]	; (4b2c <spi_init+0x1c8>)
    4a68:	4798      	blx	r3
    4a6a:	e7eb      	b.n	4a44 <spi_init+0xe0>
	module->mode             = config->mode;
    4a6c:	7833      	ldrb	r3, [r6, #0]
    4a6e:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    4a70:	7c33      	ldrb	r3, [r6, #16]
    4a72:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    4a74:	7cb3      	ldrb	r3, [r6, #18]
    4a76:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    4a78:	7d33      	ldrb	r3, [r6, #20]
    4a7a:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    4a7c:	2200      	movs	r2, #0
    4a7e:	ab02      	add	r3, sp, #8
    4a80:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    4a82:	7833      	ldrb	r3, [r6, #0]
    4a84:	2b01      	cmp	r3, #1
    4a86:	d028      	beq.n	4ada <spi_init+0x176>
	ctrla |= config->transfer_mode;
    4a88:	6873      	ldr	r3, [r6, #4]
    4a8a:	68b2      	ldr	r2, [r6, #8]
    4a8c:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    4a8e:	68f2      	ldr	r2, [r6, #12]
    4a90:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    4a92:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    4a94:	7c72      	ldrb	r2, [r6, #17]
    4a96:	2a00      	cmp	r2, #0
    4a98:	d103      	bne.n	4aa2 <spi_init+0x13e>
    4a9a:	4a25      	ldr	r2, [pc, #148]	; (4b30 <spi_init+0x1cc>)
    4a9c:	7892      	ldrb	r2, [r2, #2]
    4a9e:	0792      	lsls	r2, r2, #30
    4aa0:	d501      	bpl.n	4aa6 <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    4aa2:	2280      	movs	r2, #128	; 0x80
    4aa4:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    4aa6:	7cb2      	ldrb	r2, [r6, #18]
    4aa8:	2a00      	cmp	r2, #0
    4aaa:	d002      	beq.n	4ab2 <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    4aac:	2280      	movs	r2, #128	; 0x80
    4aae:	0292      	lsls	r2, r2, #10
    4ab0:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    4ab2:	7cf2      	ldrb	r2, [r6, #19]
    4ab4:	2a00      	cmp	r2, #0
    4ab6:	d002      	beq.n	4abe <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    4ab8:	2280      	movs	r2, #128	; 0x80
    4aba:	0092      	lsls	r2, r2, #2
    4abc:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    4abe:	7d32      	ldrb	r2, [r6, #20]
    4ac0:	2a00      	cmp	r2, #0
    4ac2:	d002      	beq.n	4aca <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    4ac4:	2280      	movs	r2, #128	; 0x80
    4ac6:	0192      	lsls	r2, r2, #6
    4ac8:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    4aca:	683a      	ldr	r2, [r7, #0]
    4acc:	4313      	orrs	r3, r2
    4ace:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    4ad0:	687b      	ldr	r3, [r7, #4]
    4ad2:	430b      	orrs	r3, r1
    4ad4:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    4ad6:	2000      	movs	r0, #0
    4ad8:	e74e      	b.n	4978 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4ada:	6828      	ldr	r0, [r5, #0]
    4adc:	4b0a      	ldr	r3, [pc, #40]	; (4b08 <spi_init+0x1a4>)
    4ade:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4ae0:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    4ae2:	b2c0      	uxtb	r0, r0
    4ae4:	4b13      	ldr	r3, [pc, #76]	; (4b34 <spi_init+0x1d0>)
    4ae6:	4798      	blx	r3
    4ae8:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    4aea:	ab02      	add	r3, sp, #8
    4aec:	1d9a      	adds	r2, r3, #6
    4aee:	69b0      	ldr	r0, [r6, #24]
    4af0:	4b11      	ldr	r3, [pc, #68]	; (4b38 <spi_init+0x1d4>)
    4af2:	4798      	blx	r3
    4af4:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    4af6:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    4af8:	2b00      	cmp	r3, #0
    4afa:	d000      	beq.n	4afe <spi_init+0x19a>
    4afc:	e73c      	b.n	4978 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    4afe:	ab02      	add	r3, sp, #8
    4b00:	3306      	adds	r3, #6
    4b02:	781b      	ldrb	r3, [r3, #0]
    4b04:	733b      	strb	r3, [r7, #12]
    4b06:	e7bf      	b.n	4a88 <spi_init+0x124>
    4b08:	0000485d 	.word	0x0000485d
    4b0c:	40000400 	.word	0x40000400
    4b10:	000059d1 	.word	0x000059d1
    4b14:	00005945 	.word	0x00005945
    4b18:	00004699 	.word	0x00004699
    4b1c:	00004c31 	.word	0x00004c31
    4b20:	00004899 	.word	0x00004899
    4b24:	200003e4 	.word	0x200003e4
    4b28:	000046e5 	.word	0x000046e5
    4b2c:	00005ac9 	.word	0x00005ac9
    4b30:	41002000 	.word	0x41002000
    4b34:	000059ed 	.word	0x000059ed
    4b38:	000045db 	.word	0x000045db

00004b3c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    4b3c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    4b3e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    4b40:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    4b42:	2c01      	cmp	r4, #1
    4b44:	d001      	beq.n	4b4a <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    4b46:	0018      	movs	r0, r3
    4b48:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    4b4a:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    4b4c:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    4b4e:	2c00      	cmp	r4, #0
    4b50:	d1f9      	bne.n	4b46 <spi_select_slave+0xa>
		if (select) {
    4b52:	2a00      	cmp	r2, #0
    4b54:	d058      	beq.n	4c08 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    4b56:	784b      	ldrb	r3, [r1, #1]
    4b58:	2b00      	cmp	r3, #0
    4b5a:	d044      	beq.n	4be6 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4b5c:	6803      	ldr	r3, [r0, #0]
    4b5e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    4b60:	07db      	lsls	r3, r3, #31
    4b62:	d410      	bmi.n	4b86 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    4b64:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    4b66:	09d1      	lsrs	r1, r2, #7
		return NULL;
    4b68:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4b6a:	2900      	cmp	r1, #0
    4b6c:	d104      	bne.n	4b78 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    4b6e:	0953      	lsrs	r3, r2, #5
    4b70:	01db      	lsls	r3, r3, #7
    4b72:	492e      	ldr	r1, [pc, #184]	; (4c2c <spi_select_slave+0xf0>)
    4b74:	468c      	mov	ip, r1
    4b76:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4b78:	211f      	movs	r1, #31
    4b7a:	4011      	ands	r1, r2
    4b7c:	2201      	movs	r2, #1
    4b7e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    4b80:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    4b82:	2305      	movs	r3, #5
    4b84:	e7df      	b.n	4b46 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    4b86:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    4b88:	09d4      	lsrs	r4, r2, #7
		return NULL;
    4b8a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4b8c:	2c00      	cmp	r4, #0
    4b8e:	d104      	bne.n	4b9a <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    4b90:	0953      	lsrs	r3, r2, #5
    4b92:	01db      	lsls	r3, r3, #7
    4b94:	4c25      	ldr	r4, [pc, #148]	; (4c2c <spi_select_slave+0xf0>)
    4b96:	46a4      	mov	ip, r4
    4b98:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4b9a:	241f      	movs	r4, #31
    4b9c:	4014      	ands	r4, r2
    4b9e:	2201      	movs	r2, #1
    4ba0:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    4ba2:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4ba4:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4ba6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4ba8:	07d2      	lsls	r2, r2, #31
    4baa:	d501      	bpl.n	4bb0 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4bac:	788a      	ldrb	r2, [r1, #2]
    4bae:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    4bb0:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    4bb2:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    4bb4:	2a00      	cmp	r2, #0
    4bb6:	d1c6      	bne.n	4b46 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    4bb8:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    4bba:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4bbc:	7e13      	ldrb	r3, [r2, #24]
    4bbe:	420b      	tst	r3, r1
    4bc0:	d0fc      	beq.n	4bbc <spi_select_slave+0x80>
    4bc2:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    4bc4:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    4bc6:	0749      	lsls	r1, r1, #29
    4bc8:	d5bd      	bpl.n	4b46 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4bca:	8b53      	ldrh	r3, [r2, #26]
    4bcc:	075b      	lsls	r3, r3, #29
    4bce:	d501      	bpl.n	4bd4 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4bd0:	2304      	movs	r3, #4
    4bd2:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4bd4:	7983      	ldrb	r3, [r0, #6]
    4bd6:	2b01      	cmp	r3, #1
    4bd8:	d002      	beq.n	4be0 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4bda:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4bdc:	2300      	movs	r3, #0
    4bde:	e7b2      	b.n	4b46 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4be0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4be2:	2300      	movs	r3, #0
    4be4:	e7af      	b.n	4b46 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    4be6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    4be8:	09d1      	lsrs	r1, r2, #7
		return NULL;
    4bea:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4bec:	2900      	cmp	r1, #0
    4bee:	d104      	bne.n	4bfa <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    4bf0:	0953      	lsrs	r3, r2, #5
    4bf2:	01db      	lsls	r3, r3, #7
    4bf4:	490d      	ldr	r1, [pc, #52]	; (4c2c <spi_select_slave+0xf0>)
    4bf6:	468c      	mov	ip, r1
    4bf8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4bfa:	211f      	movs	r1, #31
    4bfc:	4011      	ands	r1, r2
    4bfe:	2201      	movs	r2, #1
    4c00:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    4c02:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    4c04:	2300      	movs	r3, #0
    4c06:	e79e      	b.n	4b46 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    4c08:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    4c0a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    4c0c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4c0e:	2900      	cmp	r1, #0
    4c10:	d104      	bne.n	4c1c <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    4c12:	0953      	lsrs	r3, r2, #5
    4c14:	01db      	lsls	r3, r3, #7
    4c16:	4905      	ldr	r1, [pc, #20]	; (4c2c <spi_select_slave+0xf0>)
    4c18:	468c      	mov	ip, r1
    4c1a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4c1c:	211f      	movs	r1, #31
    4c1e:	4011      	ands	r1, r2
    4c20:	2201      	movs	r2, #1
    4c22:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    4c24:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    4c26:	2300      	movs	r3, #0
    4c28:	e78d      	b.n	4b46 <spi_select_slave+0xa>
    4c2a:	46c0      	nop			; (mov r8, r8)
    4c2c:	41004400 	.word	0x41004400

00004c30 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    4c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    4c32:	0080      	lsls	r0, r0, #2
    4c34:	4b70      	ldr	r3, [pc, #448]	; (4df8 <_spi_interrupt_handler+0x1c8>)
    4c36:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4c38:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    4c3a:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    4c3c:	5ce7      	ldrb	r7, [r4, r3]
    4c3e:	2236      	movs	r2, #54	; 0x36
    4c40:	5ca2      	ldrb	r2, [r4, r2]
    4c42:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    4c44:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    4c46:	7db5      	ldrb	r5, [r6, #22]
    4c48:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    4c4a:	07eb      	lsls	r3, r5, #31
    4c4c:	d502      	bpl.n	4c54 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4c4e:	7963      	ldrb	r3, [r4, #5]
    4c50:	2b01      	cmp	r3, #1
    4c52:	d01e      	beq.n	4c92 <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    4c54:	076b      	lsls	r3, r5, #29
    4c56:	d511      	bpl.n	4c7c <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4c58:	8b73      	ldrh	r3, [r6, #26]
    4c5a:	075b      	lsls	r3, r3, #29
    4c5c:	d55a      	bpl.n	4d14 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    4c5e:	7a63      	ldrb	r3, [r4, #9]
    4c60:	2b01      	cmp	r3, #1
    4c62:	d008      	beq.n	4c76 <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    4c64:	221e      	movs	r2, #30
    4c66:	2338      	movs	r3, #56	; 0x38
    4c68:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    4c6a:	3b35      	subs	r3, #53	; 0x35
    4c6c:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    4c6e:	3302      	adds	r3, #2
    4c70:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    4c72:	073b      	lsls	r3, r7, #28
    4c74:	d44a      	bmi.n	4d0c <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    4c76:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4c78:	2304      	movs	r3, #4
    4c7a:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    4c7c:	07ab      	lsls	r3, r5, #30
    4c7e:	d503      	bpl.n	4c88 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4c80:	7963      	ldrb	r3, [r4, #5]
    4c82:	2b01      	cmp	r3, #1
    4c84:	d100      	bne.n	4c88 <_spi_interrupt_handler+0x58>
    4c86:	e097      	b.n	4db8 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    4c88:	b26d      	sxtb	r5, r5
    4c8a:	2d00      	cmp	r5, #0
    4c8c:	da00      	bge.n	4c90 <_spi_interrupt_handler+0x60>
    4c8e:	e0a9      	b.n	4de4 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    4c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    4c92:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    4c94:	2b00      	cmp	r3, #0
    4c96:	d022      	beq.n	4cde <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    4c98:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    4c9a:	2b00      	cmp	r3, #0
    4c9c:	d0da      	beq.n	4c54 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4c9e:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    4ca0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4ca2:	7813      	ldrb	r3, [r2, #0]
    4ca4:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    4ca6:	1c50      	adds	r0, r2, #1
    4ca8:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4caa:	79a0      	ldrb	r0, [r4, #6]
    4cac:	2801      	cmp	r0, #1
    4cae:	d027      	beq.n	4d00 <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    4cb0:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    4cb2:	05db      	lsls	r3, r3, #23
    4cb4:	0ddb      	lsrs	r3, r3, #23
    4cb6:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    4cb8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    4cba:	3b01      	subs	r3, #1
    4cbc:	b29b      	uxth	r3, r3
    4cbe:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    4cc0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    4cc2:	b29b      	uxth	r3, r3
    4cc4:	2b00      	cmp	r3, #0
    4cc6:	d1c5      	bne.n	4c54 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4cc8:	3301      	adds	r3, #1
    4cca:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    4ccc:	7a63      	ldrb	r3, [r4, #9]
    4cce:	2b01      	cmp	r3, #1
    4cd0:	d1c0      	bne.n	4c54 <_spi_interrupt_handler+0x24>
    4cd2:	79e3      	ldrb	r3, [r4, #7]
    4cd4:	2b00      	cmp	r3, #0
    4cd6:	d1bd      	bne.n	4c54 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4cd8:	3302      	adds	r3, #2
    4cda:	75b3      	strb	r3, [r6, #22]
    4cdc:	e7ba      	b.n	4c54 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    4cde:	4b47      	ldr	r3, [pc, #284]	; (4dfc <_spi_interrupt_handler+0x1cc>)
    4ce0:	881b      	ldrh	r3, [r3, #0]
    4ce2:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    4ce4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4ce6:	3b01      	subs	r3, #1
    4ce8:	b29b      	uxth	r3, r3
    4cea:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    4cec:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4cee:	b29b      	uxth	r3, r3
    4cf0:	2b00      	cmp	r3, #0
    4cf2:	d101      	bne.n	4cf8 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4cf4:	3301      	adds	r3, #1
    4cf6:	7533      	strb	r3, [r6, #20]
		if (0
    4cf8:	7963      	ldrb	r3, [r4, #5]
    4cfa:	2b01      	cmp	r3, #1
    4cfc:	d0cc      	beq.n	4c98 <_spi_interrupt_handler+0x68>
    4cfe:	e7a9      	b.n	4c54 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    4d00:	7850      	ldrb	r0, [r2, #1]
    4d02:	0200      	lsls	r0, r0, #8
    4d04:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    4d06:	3202      	adds	r2, #2
    4d08:	62e2      	str	r2, [r4, #44]	; 0x2c
    4d0a:	e7d2      	b.n	4cb2 <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    4d0c:	0020      	movs	r0, r4
    4d0e:	69a3      	ldr	r3, [r4, #24]
    4d10:	4798      	blx	r3
    4d12:	e7b0      	b.n	4c76 <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    4d14:	7a63      	ldrb	r3, [r4, #9]
    4d16:	2b01      	cmp	r3, #1
    4d18:	d028      	beq.n	4d6c <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4d1a:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    4d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4d1e:	05db      	lsls	r3, r3, #23
    4d20:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    4d22:	b2da      	uxtb	r2, r3
    4d24:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    4d26:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    4d28:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4d2a:	1c51      	adds	r1, r2, #1
    4d2c:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4d2e:	79a1      	ldrb	r1, [r4, #6]
    4d30:	2901      	cmp	r1, #1
    4d32:	d034      	beq.n	4d9e <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    4d34:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    4d36:	3b01      	subs	r3, #1
    4d38:	b29b      	uxth	r3, r3
    4d3a:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    4d3c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    4d3e:	b29b      	uxth	r3, r3
    4d40:	2b00      	cmp	r3, #0
    4d42:	d000      	beq.n	4d46 <_spi_interrupt_handler+0x116>
    4d44:	e79a      	b.n	4c7c <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    4d46:	2200      	movs	r2, #0
    4d48:	3338      	adds	r3, #56	; 0x38
    4d4a:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4d4c:	3b34      	subs	r3, #52	; 0x34
    4d4e:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    4d50:	7a63      	ldrb	r3, [r4, #9]
    4d52:	2b02      	cmp	r3, #2
    4d54:	d029      	beq.n	4daa <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    4d56:	7a63      	ldrb	r3, [r4, #9]
    4d58:	2b00      	cmp	r3, #0
    4d5a:	d000      	beq.n	4d5e <_spi_interrupt_handler+0x12e>
    4d5c:	e78e      	b.n	4c7c <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    4d5e:	07bb      	lsls	r3, r7, #30
    4d60:	d400      	bmi.n	4d64 <_spi_interrupt_handler+0x134>
    4d62:	e78b      	b.n	4c7c <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    4d64:	0020      	movs	r0, r4
    4d66:	6923      	ldr	r3, [r4, #16]
    4d68:	4798      	blx	r3
    4d6a:	e787      	b.n	4c7c <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4d6c:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    4d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    4d70:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4d72:	3b01      	subs	r3, #1
    4d74:	b29b      	uxth	r3, r3
    4d76:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    4d78:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4d7a:	b29b      	uxth	r3, r3
    4d7c:	2b00      	cmp	r3, #0
    4d7e:	d000      	beq.n	4d82 <_spi_interrupt_handler+0x152>
    4d80:	e77c      	b.n	4c7c <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4d82:	3304      	adds	r3, #4
    4d84:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    4d86:	2200      	movs	r2, #0
    4d88:	3334      	adds	r3, #52	; 0x34
    4d8a:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    4d8c:	3b35      	subs	r3, #53	; 0x35
    4d8e:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    4d90:	07fb      	lsls	r3, r7, #31
    4d92:	d400      	bmi.n	4d96 <_spi_interrupt_handler+0x166>
    4d94:	e772      	b.n	4c7c <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    4d96:	0020      	movs	r0, r4
    4d98:	68e3      	ldr	r3, [r4, #12]
    4d9a:	4798      	blx	r3
    4d9c:	e76e      	b.n	4c7c <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    4d9e:	0a1b      	lsrs	r3, r3, #8
    4da0:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    4da2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4da4:	3301      	adds	r3, #1
    4da6:	62a3      	str	r3, [r4, #40]	; 0x28
    4da8:	e7c4      	b.n	4d34 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    4daa:	077b      	lsls	r3, r7, #29
    4dac:	d400      	bmi.n	4db0 <_spi_interrupt_handler+0x180>
    4dae:	e765      	b.n	4c7c <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    4db0:	0020      	movs	r0, r4
    4db2:	6963      	ldr	r3, [r4, #20]
    4db4:	4798      	blx	r3
    4db6:	e761      	b.n	4c7c <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4db8:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    4dba:	2b01      	cmp	r3, #1
    4dbc:	d000      	beq.n	4dc0 <_spi_interrupt_handler+0x190>
    4dbe:	e763      	b.n	4c88 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4dc0:	79e3      	ldrb	r3, [r4, #7]
    4dc2:	2b00      	cmp	r3, #0
    4dc4:	d000      	beq.n	4dc8 <_spi_interrupt_handler+0x198>
    4dc6:	e75f      	b.n	4c88 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4dc8:	3302      	adds	r3, #2
    4dca:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    4dcc:	3301      	adds	r3, #1
    4dce:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    4dd0:	2200      	movs	r2, #0
    4dd2:	3335      	adds	r3, #53	; 0x35
    4dd4:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    4dd6:	07fb      	lsls	r3, r7, #31
    4dd8:	d400      	bmi.n	4ddc <_spi_interrupt_handler+0x1ac>
    4dda:	e755      	b.n	4c88 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    4ddc:	0020      	movs	r0, r4
    4dde:	68e3      	ldr	r3, [r4, #12]
    4de0:	4798      	blx	r3
    4de2:	e751      	b.n	4c88 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4de4:	2380      	movs	r3, #128	; 0x80
    4de6:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4de8:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    4dea:	067b      	lsls	r3, r7, #25
    4dec:	d400      	bmi.n	4df0 <_spi_interrupt_handler+0x1c0>
    4dee:	e74f      	b.n	4c90 <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    4df0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4df2:	0020      	movs	r0, r4
    4df4:	4798      	blx	r3
}
    4df6:	e74b      	b.n	4c90 <_spi_interrupt_handler+0x60>
    4df8:	200003e4 	.word	0x200003e4
    4dfc:	200003fc 	.word	0x200003fc

00004e00 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    4e00:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e02:	46de      	mov	lr, fp
    4e04:	4657      	mov	r7, sl
    4e06:	464e      	mov	r6, r9
    4e08:	4645      	mov	r5, r8
    4e0a:	b5e0      	push	{r5, r6, r7, lr}
    4e0c:	b091      	sub	sp, #68	; 0x44
    4e0e:	0005      	movs	r5, r0
    4e10:	000c      	movs	r4, r1
    4e12:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    4e14:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4e16:	0008      	movs	r0, r1
    4e18:	4bbc      	ldr	r3, [pc, #752]	; (510c <usart_init+0x30c>)
    4e1a:	4798      	blx	r3
    4e1c:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    4e1e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    4e20:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    4e22:	07db      	lsls	r3, r3, #31
    4e24:	d506      	bpl.n	4e34 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    4e26:	b011      	add	sp, #68	; 0x44
    4e28:	bc3c      	pop	{r2, r3, r4, r5}
    4e2a:	4690      	mov	r8, r2
    4e2c:	4699      	mov	r9, r3
    4e2e:	46a2      	mov	sl, r4
    4e30:	46ab      	mov	fp, r5
    4e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    4e34:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    4e36:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    4e38:	079b      	lsls	r3, r3, #30
    4e3a:	d4f4      	bmi.n	4e26 <usart_init+0x26>
    4e3c:	49b4      	ldr	r1, [pc, #720]	; (5110 <usart_init+0x310>)
    4e3e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    4e40:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4e42:	2301      	movs	r3, #1
    4e44:	40bb      	lsls	r3, r7
    4e46:	4303      	orrs	r3, r0
    4e48:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    4e4a:	a90f      	add	r1, sp, #60	; 0x3c
    4e4c:	272d      	movs	r7, #45	; 0x2d
    4e4e:	5df3      	ldrb	r3, [r6, r7]
    4e50:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4e52:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4e54:	b2d3      	uxtb	r3, r2
    4e56:	9302      	str	r3, [sp, #8]
    4e58:	0018      	movs	r0, r3
    4e5a:	4bae      	ldr	r3, [pc, #696]	; (5114 <usart_init+0x314>)
    4e5c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4e5e:	9802      	ldr	r0, [sp, #8]
    4e60:	4bad      	ldr	r3, [pc, #692]	; (5118 <usart_init+0x318>)
    4e62:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4e64:	5df0      	ldrb	r0, [r6, r7]
    4e66:	2100      	movs	r1, #0
    4e68:	4bac      	ldr	r3, [pc, #688]	; (511c <usart_init+0x31c>)
    4e6a:	4798      	blx	r3
	module->character_size = config->character_size;
    4e6c:	7af3      	ldrb	r3, [r6, #11]
    4e6e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    4e70:	2324      	movs	r3, #36	; 0x24
    4e72:	5cf3      	ldrb	r3, [r6, r3]
    4e74:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    4e76:	2325      	movs	r3, #37	; 0x25
    4e78:	5cf3      	ldrb	r3, [r6, r3]
    4e7a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    4e7c:	7ef3      	ldrb	r3, [r6, #27]
    4e7e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    4e80:	7f33      	ldrb	r3, [r6, #28]
    4e82:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4e84:	682b      	ldr	r3, [r5, #0]
    4e86:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4e88:	0018      	movs	r0, r3
    4e8a:	4ba0      	ldr	r3, [pc, #640]	; (510c <usart_init+0x30c>)
    4e8c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4e8e:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    4e90:	2200      	movs	r2, #0
    4e92:	230e      	movs	r3, #14
    4e94:	a906      	add	r1, sp, #24
    4e96:	468c      	mov	ip, r1
    4e98:	4463      	add	r3, ip
    4e9a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    4e9c:	8a32      	ldrh	r2, [r6, #16]
    4e9e:	9202      	str	r2, [sp, #8]
    4ea0:	2380      	movs	r3, #128	; 0x80
    4ea2:	01db      	lsls	r3, r3, #7
    4ea4:	429a      	cmp	r2, r3
    4ea6:	d100      	bne.n	4eaa <usart_init+0xaa>
    4ea8:	e09e      	b.n	4fe8 <usart_init+0x1e8>
    4eaa:	d90f      	bls.n	4ecc <usart_init+0xcc>
    4eac:	23c0      	movs	r3, #192	; 0xc0
    4eae:	01db      	lsls	r3, r3, #7
    4eb0:	9a02      	ldr	r2, [sp, #8]
    4eb2:	429a      	cmp	r2, r3
    4eb4:	d100      	bne.n	4eb8 <usart_init+0xb8>
    4eb6:	e092      	b.n	4fde <usart_init+0x1de>
    4eb8:	2380      	movs	r3, #128	; 0x80
    4eba:	021b      	lsls	r3, r3, #8
    4ebc:	429a      	cmp	r2, r3
    4ebe:	d000      	beq.n	4ec2 <usart_init+0xc2>
    4ec0:	e11f      	b.n	5102 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    4ec2:	2303      	movs	r3, #3
    4ec4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4ec6:	2300      	movs	r3, #0
    4ec8:	9307      	str	r3, [sp, #28]
    4eca:	e008      	b.n	4ede <usart_init+0xde>
	switch (config->sample_rate) {
    4ecc:	2380      	movs	r3, #128	; 0x80
    4ece:	019b      	lsls	r3, r3, #6
    4ed0:	429a      	cmp	r2, r3
    4ed2:	d000      	beq.n	4ed6 <usart_init+0xd6>
    4ed4:	e115      	b.n	5102 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4ed6:	2310      	movs	r3, #16
    4ed8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4eda:	3b0f      	subs	r3, #15
    4edc:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    4ede:	6833      	ldr	r3, [r6, #0]
    4ee0:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    4ee2:	68f3      	ldr	r3, [r6, #12]
    4ee4:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    4ee6:	6973      	ldr	r3, [r6, #20]
    4ee8:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4eea:	7e33      	ldrb	r3, [r6, #24]
    4eec:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4eee:	2326      	movs	r3, #38	; 0x26
    4ef0:	5cf3      	ldrb	r3, [r6, r3]
    4ef2:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    4ef4:	6873      	ldr	r3, [r6, #4]
    4ef6:	4699      	mov	r9, r3
	switch (transfer_mode)
    4ef8:	2b00      	cmp	r3, #0
    4efa:	d100      	bne.n	4efe <usart_init+0xfe>
    4efc:	e0a0      	b.n	5040 <usart_init+0x240>
    4efe:	2380      	movs	r3, #128	; 0x80
    4f00:	055b      	lsls	r3, r3, #21
    4f02:	4599      	cmp	r9, r3
    4f04:	d100      	bne.n	4f08 <usart_init+0x108>
    4f06:	e084      	b.n	5012 <usart_init+0x212>
	if(config->encoding_format_enable) {
    4f08:	7e73      	ldrb	r3, [r6, #25]
    4f0a:	2b00      	cmp	r3, #0
    4f0c:	d002      	beq.n	4f14 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    4f0e:	7eb3      	ldrb	r3, [r6, #26]
    4f10:	4642      	mov	r2, r8
    4f12:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4f14:	682a      	ldr	r2, [r5, #0]
    4f16:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4f18:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    4f1a:	2b00      	cmp	r3, #0
    4f1c:	d1fc      	bne.n	4f18 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    4f1e:	330e      	adds	r3, #14
    4f20:	aa06      	add	r2, sp, #24
    4f22:	4694      	mov	ip, r2
    4f24:	4463      	add	r3, ip
    4f26:	881b      	ldrh	r3, [r3, #0]
    4f28:	4642      	mov	r2, r8
    4f2a:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    4f2c:	9b05      	ldr	r3, [sp, #20]
    4f2e:	9a03      	ldr	r2, [sp, #12]
    4f30:	4313      	orrs	r3, r2
    4f32:	9a04      	ldr	r2, [sp, #16]
    4f34:	4313      	orrs	r3, r2
    4f36:	464a      	mov	r2, r9
    4f38:	4313      	orrs	r3, r2
    4f3a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4f3c:	465b      	mov	r3, fp
    4f3e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    4f40:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4f42:	4653      	mov	r3, sl
    4f44:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    4f46:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    4f48:	2327      	movs	r3, #39	; 0x27
    4f4a:	5cf3      	ldrb	r3, [r6, r3]
    4f4c:	2b00      	cmp	r3, #0
    4f4e:	d101      	bne.n	4f54 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    4f50:	3304      	adds	r3, #4
    4f52:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4f54:	7e73      	ldrb	r3, [r6, #25]
    4f56:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4f58:	7f32      	ldrb	r2, [r6, #28]
    4f5a:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4f5c:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    4f5e:	7f72      	ldrb	r2, [r6, #29]
    4f60:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4f62:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4f64:	2224      	movs	r2, #36	; 0x24
    4f66:	5cb2      	ldrb	r2, [r6, r2]
    4f68:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    4f6a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    4f6c:	2225      	movs	r2, #37	; 0x25
    4f6e:	5cb2      	ldrb	r2, [r6, r2]
    4f70:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4f72:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    4f74:	7ab1      	ldrb	r1, [r6, #10]
    4f76:	7af2      	ldrb	r2, [r6, #11]
    4f78:	4311      	orrs	r1, r2
    4f7a:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    4f7c:	8933      	ldrh	r3, [r6, #8]
    4f7e:	2bff      	cmp	r3, #255	; 0xff
    4f80:	d100      	bne.n	4f84 <usart_init+0x184>
    4f82:	e081      	b.n	5088 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    4f84:	2280      	movs	r2, #128	; 0x80
    4f86:	0452      	lsls	r2, r2, #17
    4f88:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    4f8a:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    4f8c:	232c      	movs	r3, #44	; 0x2c
    4f8e:	5cf3      	ldrb	r3, [r6, r3]
    4f90:	2b00      	cmp	r3, #0
    4f92:	d103      	bne.n	4f9c <usart_init+0x19c>
    4f94:	4b62      	ldr	r3, [pc, #392]	; (5120 <usart_init+0x320>)
    4f96:	789b      	ldrb	r3, [r3, #2]
    4f98:	079b      	lsls	r3, r3, #30
    4f9a:	d501      	bpl.n	4fa0 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    4f9c:	2380      	movs	r3, #128	; 0x80
    4f9e:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    4fa0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    4fa2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4fa4:	2b00      	cmp	r3, #0
    4fa6:	d1fc      	bne.n	4fa2 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    4fa8:	4643      	mov	r3, r8
    4faa:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4fac:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    4fae:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4fb0:	2b00      	cmp	r3, #0
    4fb2:	d1fc      	bne.n	4fae <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    4fb4:	4643      	mov	r3, r8
    4fb6:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4fb8:	ab0e      	add	r3, sp, #56	; 0x38
    4fba:	2280      	movs	r2, #128	; 0x80
    4fbc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4fbe:	2200      	movs	r2, #0
    4fc0:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    4fc2:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4fc4:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    4fc6:	6b33      	ldr	r3, [r6, #48]	; 0x30
    4fc8:	930a      	str	r3, [sp, #40]	; 0x28
    4fca:	6b73      	ldr	r3, [r6, #52]	; 0x34
    4fcc:	930b      	str	r3, [sp, #44]	; 0x2c
    4fce:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    4fd0:	930c      	str	r3, [sp, #48]	; 0x30
    4fd2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    4fd4:	9302      	str	r3, [sp, #8]
    4fd6:	930d      	str	r3, [sp, #52]	; 0x34
    4fd8:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4fda:	ae0a      	add	r6, sp, #40	; 0x28
    4fdc:	e063      	b.n	50a6 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4fde:	2308      	movs	r3, #8
    4fe0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4fe2:	3b07      	subs	r3, #7
    4fe4:	9307      	str	r3, [sp, #28]
    4fe6:	e77a      	b.n	4ede <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    4fe8:	6833      	ldr	r3, [r6, #0]
    4fea:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    4fec:	68f3      	ldr	r3, [r6, #12]
    4fee:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    4ff0:	6973      	ldr	r3, [r6, #20]
    4ff2:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4ff4:	7e33      	ldrb	r3, [r6, #24]
    4ff6:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4ff8:	2326      	movs	r3, #38	; 0x26
    4ffa:	5cf3      	ldrb	r3, [r6, r3]
    4ffc:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    4ffe:	6873      	ldr	r3, [r6, #4]
    5000:	4699      	mov	r9, r3
	switch (transfer_mode)
    5002:	2b00      	cmp	r3, #0
    5004:	d018      	beq.n	5038 <usart_init+0x238>
    5006:	2380      	movs	r3, #128	; 0x80
    5008:	055b      	lsls	r3, r3, #21
    500a:	4599      	cmp	r9, r3
    500c:	d001      	beq.n	5012 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    500e:	2000      	movs	r0, #0
    5010:	e025      	b.n	505e <usart_init+0x25e>
			if (!config->use_external_clock) {
    5012:	2327      	movs	r3, #39	; 0x27
    5014:	5cf3      	ldrb	r3, [r6, r3]
    5016:	2b00      	cmp	r3, #0
    5018:	d000      	beq.n	501c <usart_init+0x21c>
    501a:	e775      	b.n	4f08 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    501c:	6a33      	ldr	r3, [r6, #32]
    501e:	001f      	movs	r7, r3
    5020:	b2c0      	uxtb	r0, r0
    5022:	4b40      	ldr	r3, [pc, #256]	; (5124 <usart_init+0x324>)
    5024:	4798      	blx	r3
    5026:	0001      	movs	r1, r0
    5028:	220e      	movs	r2, #14
    502a:	ab06      	add	r3, sp, #24
    502c:	469c      	mov	ip, r3
    502e:	4462      	add	r2, ip
    5030:	0038      	movs	r0, r7
    5032:	4b3d      	ldr	r3, [pc, #244]	; (5128 <usart_init+0x328>)
    5034:	4798      	blx	r3
    5036:	e012      	b.n	505e <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5038:	2308      	movs	r3, #8
    503a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    503c:	2300      	movs	r3, #0
    503e:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    5040:	2327      	movs	r3, #39	; 0x27
    5042:	5cf3      	ldrb	r3, [r6, r3]
    5044:	2b00      	cmp	r3, #0
    5046:	d00e      	beq.n	5066 <usart_init+0x266>
				status_code =
    5048:	9b06      	ldr	r3, [sp, #24]
    504a:	9300      	str	r3, [sp, #0]
    504c:	9b07      	ldr	r3, [sp, #28]
    504e:	220e      	movs	r2, #14
    5050:	a906      	add	r1, sp, #24
    5052:	468c      	mov	ip, r1
    5054:	4462      	add	r2, ip
    5056:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    5058:	6a30      	ldr	r0, [r6, #32]
    505a:	4f34      	ldr	r7, [pc, #208]	; (512c <usart_init+0x32c>)
    505c:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    505e:	2800      	cmp	r0, #0
    5060:	d000      	beq.n	5064 <usart_init+0x264>
    5062:	e6e0      	b.n	4e26 <usart_init+0x26>
    5064:	e750      	b.n	4f08 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    5066:	6a33      	ldr	r3, [r6, #32]
    5068:	001f      	movs	r7, r3
    506a:	b2c0      	uxtb	r0, r0
    506c:	4b2d      	ldr	r3, [pc, #180]	; (5124 <usart_init+0x324>)
    506e:	4798      	blx	r3
    5070:	0001      	movs	r1, r0
				status_code =
    5072:	9b06      	ldr	r3, [sp, #24]
    5074:	9300      	str	r3, [sp, #0]
    5076:	9b07      	ldr	r3, [sp, #28]
    5078:	220e      	movs	r2, #14
    507a:	a806      	add	r0, sp, #24
    507c:	4684      	mov	ip, r0
    507e:	4462      	add	r2, ip
    5080:	0038      	movs	r0, r7
    5082:	4f2a      	ldr	r7, [pc, #168]	; (512c <usart_init+0x32c>)
    5084:	47b8      	blx	r7
    5086:	e7ea      	b.n	505e <usart_init+0x25e>
		if(config->lin_slave_enable) {
    5088:	7ef3      	ldrb	r3, [r6, #27]
    508a:	2b00      	cmp	r3, #0
    508c:	d100      	bne.n	5090 <usart_init+0x290>
    508e:	e77d      	b.n	4f8c <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    5090:	2380      	movs	r3, #128	; 0x80
    5092:	04db      	lsls	r3, r3, #19
    5094:	431f      	orrs	r7, r3
    5096:	e779      	b.n	4f8c <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5098:	0020      	movs	r0, r4
    509a:	4b25      	ldr	r3, [pc, #148]	; (5130 <usart_init+0x330>)
    509c:	4798      	blx	r3
    509e:	e007      	b.n	50b0 <usart_init+0x2b0>
    50a0:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    50a2:	2f04      	cmp	r7, #4
    50a4:	d00d      	beq.n	50c2 <usart_init+0x2c2>
    50a6:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    50a8:	00bb      	lsls	r3, r7, #2
    50aa:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    50ac:	2800      	cmp	r0, #0
    50ae:	d0f3      	beq.n	5098 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    50b0:	1c43      	adds	r3, r0, #1
    50b2:	d0f5      	beq.n	50a0 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    50b4:	a90e      	add	r1, sp, #56	; 0x38
    50b6:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    50b8:	0c00      	lsrs	r0, r0, #16
    50ba:	b2c0      	uxtb	r0, r0
    50bc:	4b1d      	ldr	r3, [pc, #116]	; (5134 <usart_init+0x334>)
    50be:	4798      	blx	r3
    50c0:	e7ee      	b.n	50a0 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    50c2:	2300      	movs	r3, #0
    50c4:	60eb      	str	r3, [r5, #12]
    50c6:	612b      	str	r3, [r5, #16]
    50c8:	616b      	str	r3, [r5, #20]
    50ca:	61ab      	str	r3, [r5, #24]
    50cc:	61eb      	str	r3, [r5, #28]
    50ce:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    50d0:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    50d2:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    50d4:	2200      	movs	r2, #0
    50d6:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    50d8:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    50da:	3330      	adds	r3, #48	; 0x30
    50dc:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    50de:	3301      	adds	r3, #1
    50e0:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    50e2:	3301      	adds	r3, #1
    50e4:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    50e6:	3301      	adds	r3, #1
    50e8:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    50ea:	6828      	ldr	r0, [r5, #0]
    50ec:	4b07      	ldr	r3, [pc, #28]	; (510c <usart_init+0x30c>)
    50ee:	4798      	blx	r3
    50f0:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    50f2:	4911      	ldr	r1, [pc, #68]	; (5138 <usart_init+0x338>)
    50f4:	4b11      	ldr	r3, [pc, #68]	; (513c <usart_init+0x33c>)
    50f6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    50f8:	00a4      	lsls	r4, r4, #2
    50fa:	4b11      	ldr	r3, [pc, #68]	; (5140 <usart_init+0x340>)
    50fc:	50e5      	str	r5, [r4, r3]
	return status_code;
    50fe:	2000      	movs	r0, #0
    5100:	e691      	b.n	4e26 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5102:	2310      	movs	r3, #16
    5104:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5106:	2300      	movs	r3, #0
    5108:	9307      	str	r3, [sp, #28]
    510a:	e6e8      	b.n	4ede <usart_init+0xde>
    510c:	0000485d 	.word	0x0000485d
    5110:	40000400 	.word	0x40000400
    5114:	000059d1 	.word	0x000059d1
    5118:	00005945 	.word	0x00005945
    511c:	00004699 	.word	0x00004699
    5120:	41002000 	.word	0x41002000
    5124:	000059ed 	.word	0x000059ed
    5128:	000045db 	.word	0x000045db
    512c:	00004605 	.word	0x00004605
    5130:	000046e5 	.word	0x000046e5
    5134:	00005ac9 	.word	0x00005ac9
    5138:	000051f9 	.word	0x000051f9
    513c:	00004899 	.word	0x00004899
    5140:	200003e4 	.word	0x200003e4

00005144 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    5144:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    5146:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    5148:	2a00      	cmp	r2, #0
    514a:	d101      	bne.n	5150 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    514c:	0018      	movs	r0, r3
    514e:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    5150:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    5152:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    5154:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    5156:	2a00      	cmp	r2, #0
    5158:	d1f8      	bne.n	514c <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    515a:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    515c:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    515e:	2a00      	cmp	r2, #0
    5160:	d1fc      	bne.n	515c <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    5162:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    5164:	2102      	movs	r1, #2
    5166:	7e1a      	ldrb	r2, [r3, #24]
    5168:	420a      	tst	r2, r1
    516a:	d0fc      	beq.n	5166 <usart_write_wait+0x22>
	return STATUS_OK;
    516c:	2300      	movs	r3, #0
    516e:	e7ed      	b.n	514c <usart_write_wait+0x8>

00005170 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    5170:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    5172:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    5174:	2a00      	cmp	r2, #0
    5176:	d101      	bne.n	517c <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    5178:	0018      	movs	r0, r3
    517a:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    517c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    517e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    5180:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    5182:	2a00      	cmp	r2, #0
    5184:	d1f8      	bne.n	5178 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    5186:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    5188:	7e10      	ldrb	r0, [r2, #24]
    518a:	0740      	lsls	r0, r0, #29
    518c:	d5f4      	bpl.n	5178 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    518e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    5190:	2b00      	cmp	r3, #0
    5192:	d1fc      	bne.n	518e <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5194:	8b53      	ldrh	r3, [r2, #26]
    5196:	b2db      	uxtb	r3, r3
	if (error_code) {
    5198:	0698      	lsls	r0, r3, #26
    519a:	d01d      	beq.n	51d8 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    519c:	0798      	lsls	r0, r3, #30
    519e:	d503      	bpl.n	51a8 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    51a0:	2302      	movs	r3, #2
    51a2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    51a4:	3318      	adds	r3, #24
    51a6:	e7e7      	b.n	5178 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    51a8:	0758      	lsls	r0, r3, #29
    51aa:	d503      	bpl.n	51b4 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    51ac:	2304      	movs	r3, #4
    51ae:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    51b0:	331a      	adds	r3, #26
    51b2:	e7e1      	b.n	5178 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    51b4:	07d8      	lsls	r0, r3, #31
    51b6:	d503      	bpl.n	51c0 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    51b8:	2301      	movs	r3, #1
    51ba:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    51bc:	3312      	adds	r3, #18
    51be:	e7db      	b.n	5178 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    51c0:	06d8      	lsls	r0, r3, #27
    51c2:	d503      	bpl.n	51cc <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    51c4:	2310      	movs	r3, #16
    51c6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    51c8:	3332      	adds	r3, #50	; 0x32
    51ca:	e7d5      	b.n	5178 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    51cc:	069b      	lsls	r3, r3, #26
    51ce:	d503      	bpl.n	51d8 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    51d0:	2320      	movs	r3, #32
    51d2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    51d4:	3321      	adds	r3, #33	; 0x21
    51d6:	e7cf      	b.n	5178 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    51d8:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    51da:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    51dc:	2300      	movs	r3, #0
    51de:	e7cb      	b.n	5178 <usart_read_wait+0x8>

000051e0 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    51e0:	1c93      	adds	r3, r2, #2
    51e2:	009b      	lsls	r3, r3, #2
    51e4:	18c3      	adds	r3, r0, r3
    51e6:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    51e8:	2130      	movs	r1, #48	; 0x30
    51ea:	2301      	movs	r3, #1
    51ec:	4093      	lsls	r3, r2
    51ee:	001a      	movs	r2, r3
    51f0:	5c43      	ldrb	r3, [r0, r1]
    51f2:	4313      	orrs	r3, r2
    51f4:	5443      	strb	r3, [r0, r1]
}
    51f6:	4770      	bx	lr

000051f8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    51f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    51fa:	0080      	lsls	r0, r0, #2
    51fc:	4b62      	ldr	r3, [pc, #392]	; (5388 <_usart_interrupt_handler+0x190>)
    51fe:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    5200:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    5202:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    5204:	2b00      	cmp	r3, #0
    5206:	d1fc      	bne.n	5202 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    5208:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    520a:	7da6      	ldrb	r6, [r4, #22]
    520c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    520e:	2330      	movs	r3, #48	; 0x30
    5210:	5ceb      	ldrb	r3, [r5, r3]
    5212:	2231      	movs	r2, #49	; 0x31
    5214:	5caf      	ldrb	r7, [r5, r2]
    5216:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    5218:	07f3      	lsls	r3, r6, #31
    521a:	d522      	bpl.n	5262 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    521c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    521e:	b29b      	uxth	r3, r3
    5220:	2b00      	cmp	r3, #0
    5222:	d01c      	beq.n	525e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    5224:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5226:	7813      	ldrb	r3, [r2, #0]
    5228:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    522a:	1c51      	adds	r1, r2, #1
    522c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    522e:	7969      	ldrb	r1, [r5, #5]
    5230:	2901      	cmp	r1, #1
    5232:	d00e      	beq.n	5252 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    5234:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    5236:	05db      	lsls	r3, r3, #23
    5238:	0ddb      	lsrs	r3, r3, #23
    523a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    523c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    523e:	3b01      	subs	r3, #1
    5240:	b29b      	uxth	r3, r3
    5242:	85eb      	strh	r3, [r5, #46]	; 0x2e
    5244:	2b00      	cmp	r3, #0
    5246:	d10c      	bne.n	5262 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5248:	3301      	adds	r3, #1
    524a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    524c:	3301      	adds	r3, #1
    524e:	75a3      	strb	r3, [r4, #22]
    5250:	e007      	b.n	5262 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    5252:	7851      	ldrb	r1, [r2, #1]
    5254:	0209      	lsls	r1, r1, #8
    5256:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    5258:	3202      	adds	r2, #2
    525a:	62aa      	str	r2, [r5, #40]	; 0x28
    525c:	e7eb      	b.n	5236 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    525e:	2301      	movs	r3, #1
    5260:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    5262:	07b3      	lsls	r3, r6, #30
    5264:	d506      	bpl.n	5274 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    5266:	2302      	movs	r3, #2
    5268:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    526a:	2200      	movs	r2, #0
    526c:	3331      	adds	r3, #49	; 0x31
    526e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    5270:	07fb      	lsls	r3, r7, #31
    5272:	d41a      	bmi.n	52aa <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    5274:	0773      	lsls	r3, r6, #29
    5276:	d565      	bpl.n	5344 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    5278:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    527a:	b29b      	uxth	r3, r3
    527c:	2b00      	cmp	r3, #0
    527e:	d05f      	beq.n	5340 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5280:	8b63      	ldrh	r3, [r4, #26]
    5282:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    5284:	071a      	lsls	r2, r3, #28
    5286:	d414      	bmi.n	52b2 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5288:	223f      	movs	r2, #63	; 0x3f
    528a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    528c:	2b00      	cmp	r3, #0
    528e:	d034      	beq.n	52fa <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    5290:	079a      	lsls	r2, r3, #30
    5292:	d511      	bpl.n	52b8 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    5294:	221a      	movs	r2, #26
    5296:	2332      	movs	r3, #50	; 0x32
    5298:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    529a:	3b30      	subs	r3, #48	; 0x30
    529c:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    529e:	077b      	lsls	r3, r7, #29
    52a0:	d550      	bpl.n	5344 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    52a2:	0028      	movs	r0, r5
    52a4:	696b      	ldr	r3, [r5, #20]
    52a6:	4798      	blx	r3
    52a8:	e04c      	b.n	5344 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    52aa:	0028      	movs	r0, r5
    52ac:	68eb      	ldr	r3, [r5, #12]
    52ae:	4798      	blx	r3
    52b0:	e7e0      	b.n	5274 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    52b2:	2237      	movs	r2, #55	; 0x37
    52b4:	4013      	ands	r3, r2
    52b6:	e7e9      	b.n	528c <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    52b8:	075a      	lsls	r2, r3, #29
    52ba:	d505      	bpl.n	52c8 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    52bc:	221e      	movs	r2, #30
    52be:	2332      	movs	r3, #50	; 0x32
    52c0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    52c2:	3b2e      	subs	r3, #46	; 0x2e
    52c4:	8363      	strh	r3, [r4, #26]
    52c6:	e7ea      	b.n	529e <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    52c8:	07da      	lsls	r2, r3, #31
    52ca:	d505      	bpl.n	52d8 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    52cc:	2213      	movs	r2, #19
    52ce:	2332      	movs	r3, #50	; 0x32
    52d0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    52d2:	3b31      	subs	r3, #49	; 0x31
    52d4:	8363      	strh	r3, [r4, #26]
    52d6:	e7e2      	b.n	529e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    52d8:	06da      	lsls	r2, r3, #27
    52da:	d505      	bpl.n	52e8 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    52dc:	2242      	movs	r2, #66	; 0x42
    52de:	2332      	movs	r3, #50	; 0x32
    52e0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    52e2:	3b22      	subs	r3, #34	; 0x22
    52e4:	8363      	strh	r3, [r4, #26]
    52e6:	e7da      	b.n	529e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    52e8:	2220      	movs	r2, #32
    52ea:	421a      	tst	r2, r3
    52ec:	d0d7      	beq.n	529e <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    52ee:	3221      	adds	r2, #33	; 0x21
    52f0:	2332      	movs	r3, #50	; 0x32
    52f2:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    52f4:	3b12      	subs	r3, #18
    52f6:	8363      	strh	r3, [r4, #26]
    52f8:	e7d1      	b.n	529e <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    52fa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    52fc:	05db      	lsls	r3, r3, #23
    52fe:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    5300:	b2da      	uxtb	r2, r3
    5302:	6a69      	ldr	r1, [r5, #36]	; 0x24
    5304:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    5306:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    5308:	1c51      	adds	r1, r2, #1
    530a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    530c:	7969      	ldrb	r1, [r5, #5]
    530e:	2901      	cmp	r1, #1
    5310:	d010      	beq.n	5334 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    5312:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    5314:	3b01      	subs	r3, #1
    5316:	b29b      	uxth	r3, r3
    5318:	85ab      	strh	r3, [r5, #44]	; 0x2c
    531a:	2b00      	cmp	r3, #0
    531c:	d112      	bne.n	5344 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    531e:	3304      	adds	r3, #4
    5320:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    5322:	2200      	movs	r2, #0
    5324:	332e      	adds	r3, #46	; 0x2e
    5326:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    5328:	07bb      	lsls	r3, r7, #30
    532a:	d50b      	bpl.n	5344 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    532c:	0028      	movs	r0, r5
    532e:	692b      	ldr	r3, [r5, #16]
    5330:	4798      	blx	r3
    5332:	e007      	b.n	5344 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    5334:	0a1b      	lsrs	r3, r3, #8
    5336:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    5338:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    533a:	3301      	adds	r3, #1
    533c:	626b      	str	r3, [r5, #36]	; 0x24
    533e:	e7e8      	b.n	5312 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    5340:	2304      	movs	r3, #4
    5342:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    5344:	06f3      	lsls	r3, r6, #27
    5346:	d504      	bpl.n	5352 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    5348:	2310      	movs	r3, #16
    534a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    534c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    534e:	06fb      	lsls	r3, r7, #27
    5350:	d40e      	bmi.n	5370 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    5352:	06b3      	lsls	r3, r6, #26
    5354:	d504      	bpl.n	5360 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    5356:	2320      	movs	r3, #32
    5358:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    535a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    535c:	073b      	lsls	r3, r7, #28
    535e:	d40b      	bmi.n	5378 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    5360:	0733      	lsls	r3, r6, #28
    5362:	d504      	bpl.n	536e <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    5364:	2308      	movs	r3, #8
    5366:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    5368:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    536a:	06bb      	lsls	r3, r7, #26
    536c:	d408      	bmi.n	5380 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    536e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    5370:	0028      	movs	r0, r5
    5372:	69eb      	ldr	r3, [r5, #28]
    5374:	4798      	blx	r3
    5376:	e7ec      	b.n	5352 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    5378:	0028      	movs	r0, r5
    537a:	69ab      	ldr	r3, [r5, #24]
    537c:	4798      	blx	r3
    537e:	e7ef      	b.n	5360 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    5380:	6a2b      	ldr	r3, [r5, #32]
    5382:	0028      	movs	r0, r5
    5384:	4798      	blx	r3
}
    5386:	e7f2      	b.n	536e <_usart_interrupt_handler+0x176>
    5388:	200003e4 	.word	0x200003e4

0000538c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    538c:	b510      	push	{r4, lr}
	switch (clock_source) {
    538e:	2808      	cmp	r0, #8
    5390:	d803      	bhi.n	539a <system_clock_source_get_hz+0xe>
    5392:	0080      	lsls	r0, r0, #2
    5394:	4b1b      	ldr	r3, [pc, #108]	; (5404 <system_clock_source_get_hz+0x78>)
    5396:	581b      	ldr	r3, [r3, r0]
    5398:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    539a:	2000      	movs	r0, #0
    539c:	e030      	b.n	5400 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    539e:	4b1a      	ldr	r3, [pc, #104]	; (5408 <system_clock_source_get_hz+0x7c>)
    53a0:	6918      	ldr	r0, [r3, #16]
    53a2:	e02d      	b.n	5400 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    53a4:	4b19      	ldr	r3, [pc, #100]	; (540c <system_clock_source_get_hz+0x80>)
    53a6:	6a1b      	ldr	r3, [r3, #32]
    53a8:	059b      	lsls	r3, r3, #22
    53aa:	0f9b      	lsrs	r3, r3, #30
    53ac:	4818      	ldr	r0, [pc, #96]	; (5410 <system_clock_source_get_hz+0x84>)
    53ae:	40d8      	lsrs	r0, r3
    53b0:	e026      	b.n	5400 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    53b2:	4b15      	ldr	r3, [pc, #84]	; (5408 <system_clock_source_get_hz+0x7c>)
    53b4:	6958      	ldr	r0, [r3, #20]
    53b6:	e023      	b.n	5400 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    53b8:	4b13      	ldr	r3, [pc, #76]	; (5408 <system_clock_source_get_hz+0x7c>)
    53ba:	681b      	ldr	r3, [r3, #0]
			return 0;
    53bc:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    53be:	079b      	lsls	r3, r3, #30
    53c0:	d51e      	bpl.n	5400 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    53c2:	4912      	ldr	r1, [pc, #72]	; (540c <system_clock_source_get_hz+0x80>)
    53c4:	2210      	movs	r2, #16
    53c6:	68cb      	ldr	r3, [r1, #12]
    53c8:	421a      	tst	r2, r3
    53ca:	d0fc      	beq.n	53c6 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    53cc:	4b0e      	ldr	r3, [pc, #56]	; (5408 <system_clock_source_get_hz+0x7c>)
    53ce:	681b      	ldr	r3, [r3, #0]
    53d0:	075b      	lsls	r3, r3, #29
    53d2:	d401      	bmi.n	53d8 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    53d4:	480f      	ldr	r0, [pc, #60]	; (5414 <system_clock_source_get_hz+0x88>)
    53d6:	e013      	b.n	5400 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    53d8:	2000      	movs	r0, #0
    53da:	4b0f      	ldr	r3, [pc, #60]	; (5418 <system_clock_source_get_hz+0x8c>)
    53dc:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    53de:	4b0a      	ldr	r3, [pc, #40]	; (5408 <system_clock_source_get_hz+0x7c>)
    53e0:	689b      	ldr	r3, [r3, #8]
    53e2:	041b      	lsls	r3, r3, #16
    53e4:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    53e6:	4358      	muls	r0, r3
    53e8:	e00a      	b.n	5400 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    53ea:	2350      	movs	r3, #80	; 0x50
    53ec:	4a07      	ldr	r2, [pc, #28]	; (540c <system_clock_source_get_hz+0x80>)
    53ee:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    53f0:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    53f2:	075b      	lsls	r3, r3, #29
    53f4:	d504      	bpl.n	5400 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    53f6:	4b04      	ldr	r3, [pc, #16]	; (5408 <system_clock_source_get_hz+0x7c>)
    53f8:	68d8      	ldr	r0, [r3, #12]
    53fa:	e001      	b.n	5400 <system_clock_source_get_hz+0x74>
		return 32768UL;
    53fc:	2080      	movs	r0, #128	; 0x80
    53fe:	0200      	lsls	r0, r0, #8
	}
}
    5400:	bd10      	pop	{r4, pc}
    5402:	46c0      	nop			; (mov r8, r8)
    5404:	0000be14 	.word	0x0000be14
    5408:	200000c8 	.word	0x200000c8
    540c:	40000800 	.word	0x40000800
    5410:	007a1200 	.word	0x007a1200
    5414:	02dc6c00 	.word	0x02dc6c00
    5418:	000059ed 	.word	0x000059ed

0000541c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    541c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    541e:	490c      	ldr	r1, [pc, #48]	; (5450 <system_clock_source_osc8m_set_config+0x34>)
    5420:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    5422:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    5424:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    5426:	7840      	ldrb	r0, [r0, #1]
    5428:	2201      	movs	r2, #1
    542a:	4010      	ands	r0, r2
    542c:	0180      	lsls	r0, r0, #6
    542e:	2640      	movs	r6, #64	; 0x40
    5430:	43b3      	bics	r3, r6
    5432:	4303      	orrs	r3, r0
    5434:	402a      	ands	r2, r5
    5436:	01d2      	lsls	r2, r2, #7
    5438:	2080      	movs	r0, #128	; 0x80
    543a:	4383      	bics	r3, r0
    543c:	4313      	orrs	r3, r2
    543e:	2203      	movs	r2, #3
    5440:	4022      	ands	r2, r4
    5442:	0212      	lsls	r2, r2, #8
    5444:	4803      	ldr	r0, [pc, #12]	; (5454 <system_clock_source_osc8m_set_config+0x38>)
    5446:	4003      	ands	r3, r0
    5448:	4313      	orrs	r3, r2
    544a:	620b      	str	r3, [r1, #32]
}
    544c:	bd70      	pop	{r4, r5, r6, pc}
    544e:	46c0      	nop			; (mov r8, r8)
    5450:	40000800 	.word	0x40000800
    5454:	fffffcff 	.word	0xfffffcff

00005458 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    5458:	b5f0      	push	{r4, r5, r6, r7, lr}
    545a:	46de      	mov	lr, fp
    545c:	4657      	mov	r7, sl
    545e:	464e      	mov	r6, r9
    5460:	4645      	mov	r5, r8
    5462:	b5e0      	push	{r5, r6, r7, lr}
    5464:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    5466:	4b26      	ldr	r3, [pc, #152]	; (5500 <system_clock_source_xosc32k_set_config+0xa8>)
    5468:	469b      	mov	fp, r3
    546a:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    546c:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    546e:	7800      	ldrb	r0, [r0, #0]
    5470:	4242      	negs	r2, r0
    5472:	4142      	adcs	r2, r0
    5474:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    5476:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    5478:	78ca      	ldrb	r2, [r1, #3]
    547a:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    547c:	790a      	ldrb	r2, [r1, #4]
    547e:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    5480:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    5482:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    5484:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    5486:	688a      	ldr	r2, [r1, #8]
    5488:	491e      	ldr	r1, [pc, #120]	; (5504 <system_clock_source_xosc32k_set_config+0xac>)
    548a:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    548c:	2101      	movs	r1, #1
    548e:	464a      	mov	r2, r9
    5490:	0092      	lsls	r2, r2, #2
    5492:	4691      	mov	r9, r2
    5494:	2204      	movs	r2, #4
    5496:	4393      	bics	r3, r2
    5498:	464a      	mov	r2, r9
    549a:	4313      	orrs	r3, r2
    549c:	4642      	mov	r2, r8
    549e:	400a      	ands	r2, r1
    54a0:	00d2      	lsls	r2, r2, #3
    54a2:	4690      	mov	r8, r2
    54a4:	2208      	movs	r2, #8
    54a6:	4393      	bics	r3, r2
    54a8:	4642      	mov	r2, r8
    54aa:	4313      	orrs	r3, r2
    54ac:	4662      	mov	r2, ip
    54ae:	400a      	ands	r2, r1
    54b0:	0112      	lsls	r2, r2, #4
    54b2:	4694      	mov	ip, r2
    54b4:	2210      	movs	r2, #16
    54b6:	4393      	bics	r3, r2
    54b8:	4662      	mov	r2, ip
    54ba:	4313      	orrs	r3, r2
    54bc:	4008      	ands	r0, r1
    54be:	0140      	lsls	r0, r0, #5
    54c0:	2220      	movs	r2, #32
    54c2:	4393      	bics	r3, r2
    54c4:	4303      	orrs	r3, r0
    54c6:	400f      	ands	r7, r1
    54c8:	01bf      	lsls	r7, r7, #6
    54ca:	2040      	movs	r0, #64	; 0x40
    54cc:	4383      	bics	r3, r0
    54ce:	433b      	orrs	r3, r7
    54d0:	400e      	ands	r6, r1
    54d2:	01f6      	lsls	r6, r6, #7
    54d4:	3040      	adds	r0, #64	; 0x40
    54d6:	4383      	bics	r3, r0
    54d8:	4333      	orrs	r3, r6
    54da:	3879      	subs	r0, #121	; 0x79
    54dc:	4005      	ands	r5, r0
    54de:	022d      	lsls	r5, r5, #8
    54e0:	4809      	ldr	r0, [pc, #36]	; (5508 <system_clock_source_xosc32k_set_config+0xb0>)
    54e2:	4003      	ands	r3, r0
    54e4:	432b      	orrs	r3, r5
    54e6:	4021      	ands	r1, r4
    54e8:	0309      	lsls	r1, r1, #12
    54ea:	4808      	ldr	r0, [pc, #32]	; (550c <system_clock_source_xosc32k_set_config+0xb4>)
    54ec:	4003      	ands	r3, r0
    54ee:	430b      	orrs	r3, r1
    54f0:	465a      	mov	r2, fp
    54f2:	8293      	strh	r3, [r2, #20]
}
    54f4:	bc3c      	pop	{r2, r3, r4, r5}
    54f6:	4690      	mov	r8, r2
    54f8:	4699      	mov	r9, r3
    54fa:	46a2      	mov	sl, r4
    54fc:	46ab      	mov	fp, r5
    54fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5500:	40000800 	.word	0x40000800
    5504:	200000c8 	.word	0x200000c8
    5508:	fffff8ff 	.word	0xfffff8ff
    550c:	ffffefff 	.word	0xffffefff

00005510 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    5510:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5512:	7a03      	ldrb	r3, [r0, #8]
    5514:	069b      	lsls	r3, r3, #26
    5516:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    5518:	8942      	ldrh	r2, [r0, #10]
    551a:	0592      	lsls	r2, r2, #22
    551c:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    551e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    5520:	4918      	ldr	r1, [pc, #96]	; (5584 <system_clock_source_dfll_set_config+0x74>)
    5522:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    5524:	7983      	ldrb	r3, [r0, #6]
    5526:	79c2      	ldrb	r2, [r0, #7]
    5528:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    552a:	8842      	ldrh	r2, [r0, #2]
    552c:	8884      	ldrh	r4, [r0, #4]
    552e:	4322      	orrs	r2, r4
    5530:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    5532:	7842      	ldrb	r2, [r0, #1]
    5534:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    5536:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    5538:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    553a:	7803      	ldrb	r3, [r0, #0]
    553c:	2b04      	cmp	r3, #4
    553e:	d011      	beq.n	5564 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    5540:	2b20      	cmp	r3, #32
    5542:	d10e      	bne.n	5562 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5544:	7b03      	ldrb	r3, [r0, #12]
    5546:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    5548:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    554a:	4313      	orrs	r3, r2
    554c:	89c2      	ldrh	r2, [r0, #14]
    554e:	0412      	lsls	r2, r2, #16
    5550:	490d      	ldr	r1, [pc, #52]	; (5588 <system_clock_source_dfll_set_config+0x78>)
    5552:	400a      	ands	r2, r1
    5554:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    5556:	4a0b      	ldr	r2, [pc, #44]	; (5584 <system_clock_source_dfll_set_config+0x74>)
    5558:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    555a:	6811      	ldr	r1, [r2, #0]
    555c:	4b0b      	ldr	r3, [pc, #44]	; (558c <system_clock_source_dfll_set_config+0x7c>)
    555e:	430b      	orrs	r3, r1
    5560:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    5562:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5564:	7b03      	ldrb	r3, [r0, #12]
    5566:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    5568:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    556a:	4313      	orrs	r3, r2
    556c:	89c2      	ldrh	r2, [r0, #14]
    556e:	0412      	lsls	r2, r2, #16
    5570:	4905      	ldr	r1, [pc, #20]	; (5588 <system_clock_source_dfll_set_config+0x78>)
    5572:	400a      	ands	r2, r1
    5574:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    5576:	4a03      	ldr	r2, [pc, #12]	; (5584 <system_clock_source_dfll_set_config+0x74>)
    5578:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    557a:	6813      	ldr	r3, [r2, #0]
    557c:	2104      	movs	r1, #4
    557e:	430b      	orrs	r3, r1
    5580:	6013      	str	r3, [r2, #0]
    5582:	e7ee      	b.n	5562 <system_clock_source_dfll_set_config+0x52>
    5584:	200000c8 	.word	0x200000c8
    5588:	03ff0000 	.word	0x03ff0000
    558c:	00000424 	.word	0x00000424

00005590 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    5590:	2808      	cmp	r0, #8
    5592:	d803      	bhi.n	559c <system_clock_source_enable+0xc>
    5594:	0080      	lsls	r0, r0, #2
    5596:	4b25      	ldr	r3, [pc, #148]	; (562c <system_clock_source_enable+0x9c>)
    5598:	581b      	ldr	r3, [r3, r0]
    559a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    559c:	2017      	movs	r0, #23
    559e:	e044      	b.n	562a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    55a0:	4a23      	ldr	r2, [pc, #140]	; (5630 <system_clock_source_enable+0xa0>)
    55a2:	6a13      	ldr	r3, [r2, #32]
    55a4:	2102      	movs	r1, #2
    55a6:	430b      	orrs	r3, r1
    55a8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    55aa:	2000      	movs	r0, #0
    55ac:	e03d      	b.n	562a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    55ae:	4a20      	ldr	r2, [pc, #128]	; (5630 <system_clock_source_enable+0xa0>)
    55b0:	6993      	ldr	r3, [r2, #24]
    55b2:	2102      	movs	r1, #2
    55b4:	430b      	orrs	r3, r1
    55b6:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    55b8:	2000      	movs	r0, #0
		break;
    55ba:	e036      	b.n	562a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    55bc:	4a1c      	ldr	r2, [pc, #112]	; (5630 <system_clock_source_enable+0xa0>)
    55be:	8a13      	ldrh	r3, [r2, #16]
    55c0:	2102      	movs	r1, #2
    55c2:	430b      	orrs	r3, r1
    55c4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    55c6:	2000      	movs	r0, #0
		break;
    55c8:	e02f      	b.n	562a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    55ca:	4a19      	ldr	r2, [pc, #100]	; (5630 <system_clock_source_enable+0xa0>)
    55cc:	8a93      	ldrh	r3, [r2, #20]
    55ce:	2102      	movs	r1, #2
    55d0:	430b      	orrs	r3, r1
    55d2:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    55d4:	2000      	movs	r0, #0
		break;
    55d6:	e028      	b.n	562a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    55d8:	4916      	ldr	r1, [pc, #88]	; (5634 <system_clock_source_enable+0xa4>)
    55da:	680b      	ldr	r3, [r1, #0]
    55dc:	2202      	movs	r2, #2
    55de:	4313      	orrs	r3, r2
    55e0:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    55e2:	4b13      	ldr	r3, [pc, #76]	; (5630 <system_clock_source_enable+0xa0>)
    55e4:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    55e6:	0019      	movs	r1, r3
    55e8:	320e      	adds	r2, #14
    55ea:	68cb      	ldr	r3, [r1, #12]
    55ec:	421a      	tst	r2, r3
    55ee:	d0fc      	beq.n	55ea <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    55f0:	4a10      	ldr	r2, [pc, #64]	; (5634 <system_clock_source_enable+0xa4>)
    55f2:	6891      	ldr	r1, [r2, #8]
    55f4:	4b0e      	ldr	r3, [pc, #56]	; (5630 <system_clock_source_enable+0xa0>)
    55f6:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    55f8:	6852      	ldr	r2, [r2, #4]
    55fa:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    55fc:	2200      	movs	r2, #0
    55fe:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5600:	0019      	movs	r1, r3
    5602:	3210      	adds	r2, #16
    5604:	68cb      	ldr	r3, [r1, #12]
    5606:	421a      	tst	r2, r3
    5608:	d0fc      	beq.n	5604 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    560a:	4b0a      	ldr	r3, [pc, #40]	; (5634 <system_clock_source_enable+0xa4>)
    560c:	681b      	ldr	r3, [r3, #0]
    560e:	b29b      	uxth	r3, r3
    5610:	4a07      	ldr	r2, [pc, #28]	; (5630 <system_clock_source_enable+0xa0>)
    5612:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    5614:	2000      	movs	r0, #0
    5616:	e008      	b.n	562a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    5618:	4905      	ldr	r1, [pc, #20]	; (5630 <system_clock_source_enable+0xa0>)
    561a:	2244      	movs	r2, #68	; 0x44
    561c:	5c8b      	ldrb	r3, [r1, r2]
    561e:	2002      	movs	r0, #2
    5620:	4303      	orrs	r3, r0
    5622:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    5624:	2000      	movs	r0, #0
		break;
    5626:	e000      	b.n	562a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    5628:	2000      	movs	r0, #0
}
    562a:	4770      	bx	lr
    562c:	0000be38 	.word	0x0000be38
    5630:	40000800 	.word	0x40000800
    5634:	200000c8 	.word	0x200000c8

00005638 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    5638:	b5f0      	push	{r4, r5, r6, r7, lr}
    563a:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    563c:	22c2      	movs	r2, #194	; 0xc2
    563e:	00d2      	lsls	r2, r2, #3
    5640:	4b47      	ldr	r3, [pc, #284]	; (5760 <system_clock_init+0x128>)
    5642:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    5644:	4a47      	ldr	r2, [pc, #284]	; (5764 <system_clock_init+0x12c>)
    5646:	6853      	ldr	r3, [r2, #4]
    5648:	211e      	movs	r1, #30
    564a:	438b      	bics	r3, r1
    564c:	391a      	subs	r1, #26
    564e:	430b      	orrs	r3, r1
    5650:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    5652:	2202      	movs	r2, #2
    5654:	ab01      	add	r3, sp, #4
    5656:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    5658:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    565a:	4d43      	ldr	r5, [pc, #268]	; (5768 <system_clock_init+0x130>)
    565c:	b2e0      	uxtb	r0, r4
    565e:	a901      	add	r1, sp, #4
    5660:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    5662:	3401      	adds	r4, #1
    5664:	2c25      	cmp	r4, #37	; 0x25
    5666:	d1f9      	bne.n	565c <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    5668:	a80a      	add	r0, sp, #40	; 0x28
    566a:	2300      	movs	r3, #0
    566c:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    566e:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    5670:	2280      	movs	r2, #128	; 0x80
    5672:	0212      	lsls	r2, r2, #8
    5674:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    5676:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    5678:	2201      	movs	r2, #1
    567a:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    567c:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    567e:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    5680:	3202      	adds	r2, #2
    5682:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    5684:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    5686:	4b39      	ldr	r3, [pc, #228]	; (576c <system_clock_init+0x134>)
    5688:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    568a:	2005      	movs	r0, #5
    568c:	4b38      	ldr	r3, [pc, #224]	; (5770 <system_clock_init+0x138>)
    568e:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    5690:	4933      	ldr	r1, [pc, #204]	; (5760 <system_clock_init+0x128>)
    5692:	2202      	movs	r2, #2
    5694:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    5696:	421a      	tst	r2, r3
    5698:	d0fc      	beq.n	5694 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    569a:	4a31      	ldr	r2, [pc, #196]	; (5760 <system_clock_init+0x128>)
    569c:	8a93      	ldrh	r3, [r2, #20]
    569e:	2180      	movs	r1, #128	; 0x80
    56a0:	430b      	orrs	r3, r1
    56a2:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    56a4:	ab05      	add	r3, sp, #20
    56a6:	2100      	movs	r1, #0
    56a8:	2200      	movs	r2, #0
    56aa:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    56ac:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    56ae:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    56b0:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    56b2:	313f      	adds	r1, #63	; 0x3f
    56b4:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    56b6:	393b      	subs	r1, #59	; 0x3b
    56b8:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    56ba:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    56bc:	4b2d      	ldr	r3, [pc, #180]	; (5774 <system_clock_init+0x13c>)
    56be:	681b      	ldr	r3, [r3, #0]
    56c0:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    56c2:	2b3f      	cmp	r3, #63	; 0x3f
    56c4:	d04a      	beq.n	575c <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    56c6:	a805      	add	r0, sp, #20
    56c8:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    56ca:	4b2b      	ldr	r3, [pc, #172]	; (5778 <system_clock_init+0x140>)
    56cc:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    56ce:	2307      	movs	r3, #7
    56d0:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    56d2:	3338      	adds	r3, #56	; 0x38
    56d4:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    56d6:	4b29      	ldr	r3, [pc, #164]	; (577c <system_clock_init+0x144>)
    56d8:	4798      	blx	r3
	config->run_in_standby  = false;
    56da:	a804      	add	r0, sp, #16
    56dc:	2500      	movs	r5, #0
    56de:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    56e0:	2601      	movs	r6, #1
    56e2:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    56e4:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    56e6:	4b26      	ldr	r3, [pc, #152]	; (5780 <system_clock_init+0x148>)
    56e8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    56ea:	2006      	movs	r0, #6
    56ec:	4f20      	ldr	r7, [pc, #128]	; (5770 <system_clock_init+0x138>)
    56ee:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    56f0:	4b24      	ldr	r3, [pc, #144]	; (5784 <system_clock_init+0x14c>)
    56f2:	4798      	blx	r3
	config->division_factor    = 1;
    56f4:	ac01      	add	r4, sp, #4
    56f6:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    56f8:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    56fa:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    56fc:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    56fe:	2305      	movs	r3, #5
    5700:	7023      	strb	r3, [r4, #0]
    5702:	0021      	movs	r1, r4
    5704:	2001      	movs	r0, #1
    5706:	4b20      	ldr	r3, [pc, #128]	; (5788 <system_clock_init+0x150>)
    5708:	4798      	blx	r3
    570a:	2001      	movs	r0, #1
    570c:	4b1f      	ldr	r3, [pc, #124]	; (578c <system_clock_init+0x154>)
    570e:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    5710:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    5712:	0021      	movs	r1, r4
    5714:	2000      	movs	r0, #0
    5716:	4b14      	ldr	r3, [pc, #80]	; (5768 <system_clock_init+0x130>)
    5718:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    571a:	2000      	movs	r0, #0
    571c:	4b1c      	ldr	r3, [pc, #112]	; (5790 <system_clock_init+0x158>)
    571e:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    5720:	2007      	movs	r0, #7
    5722:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    5724:	490e      	ldr	r1, [pc, #56]	; (5760 <system_clock_init+0x128>)
    5726:	22d0      	movs	r2, #208	; 0xd0
    5728:	68cb      	ldr	r3, [r1, #12]
    572a:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    572c:	2bd0      	cmp	r3, #208	; 0xd0
    572e:	d1fb      	bne.n	5728 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    5730:	4a18      	ldr	r2, [pc, #96]	; (5794 <system_clock_init+0x15c>)
    5732:	2300      	movs	r3, #0
    5734:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    5736:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    5738:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    573a:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    573c:	a901      	add	r1, sp, #4
    573e:	2201      	movs	r2, #1
    5740:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    5742:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    5744:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    5746:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    5748:	3307      	adds	r3, #7
    574a:	700b      	strb	r3, [r1, #0]
    574c:	2000      	movs	r0, #0
    574e:	4b0e      	ldr	r3, [pc, #56]	; (5788 <system_clock_init+0x150>)
    5750:	4798      	blx	r3
    5752:	2000      	movs	r0, #0
    5754:	4b0d      	ldr	r3, [pc, #52]	; (578c <system_clock_init+0x154>)
    5756:	4798      	blx	r3
#endif
}
    5758:	b00f      	add	sp, #60	; 0x3c
    575a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    575c:	3b20      	subs	r3, #32
    575e:	e7b2      	b.n	56c6 <system_clock_init+0x8e>
    5760:	40000800 	.word	0x40000800
    5764:	41004000 	.word	0x41004000
    5768:	000059d1 	.word	0x000059d1
    576c:	00005459 	.word	0x00005459
    5770:	00005591 	.word	0x00005591
    5774:	00806024 	.word	0x00806024
    5778:	000005b9 	.word	0x000005b9
    577c:	00005511 	.word	0x00005511
    5780:	0000541d 	.word	0x0000541d
    5784:	00005799 	.word	0x00005799
    5788:	000057bd 	.word	0x000057bd
    578c:	00005875 	.word	0x00005875
    5790:	00005945 	.word	0x00005945
    5794:	40000400 	.word	0x40000400

00005798 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    5798:	4a06      	ldr	r2, [pc, #24]	; (57b4 <system_gclk_init+0x1c>)
    579a:	6993      	ldr	r3, [r2, #24]
    579c:	2108      	movs	r1, #8
    579e:	430b      	orrs	r3, r1
    57a0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    57a2:	2201      	movs	r2, #1
    57a4:	4b04      	ldr	r3, [pc, #16]	; (57b8 <system_gclk_init+0x20>)
    57a6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    57a8:	0019      	movs	r1, r3
    57aa:	780b      	ldrb	r3, [r1, #0]
    57ac:	4213      	tst	r3, r2
    57ae:	d1fc      	bne.n	57aa <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    57b0:	4770      	bx	lr
    57b2:	46c0      	nop			; (mov r8, r8)
    57b4:	40000400 	.word	0x40000400
    57b8:	40000c00 	.word	0x40000c00

000057bc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    57bc:	b570      	push	{r4, r5, r6, lr}
    57be:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    57c0:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    57c2:	780d      	ldrb	r5, [r1, #0]
    57c4:	022d      	lsls	r5, r5, #8
    57c6:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    57c8:	784b      	ldrb	r3, [r1, #1]
    57ca:	2b00      	cmp	r3, #0
    57cc:	d002      	beq.n	57d4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    57ce:	2380      	movs	r3, #128	; 0x80
    57d0:	02db      	lsls	r3, r3, #11
    57d2:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    57d4:	7a4b      	ldrb	r3, [r1, #9]
    57d6:	2b00      	cmp	r3, #0
    57d8:	d002      	beq.n	57e0 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    57da:	2380      	movs	r3, #128	; 0x80
    57dc:	031b      	lsls	r3, r3, #12
    57de:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    57e0:	6848      	ldr	r0, [r1, #4]
    57e2:	2801      	cmp	r0, #1
    57e4:	d910      	bls.n	5808 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    57e6:	1e43      	subs	r3, r0, #1
    57e8:	4218      	tst	r0, r3
    57ea:	d134      	bne.n	5856 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    57ec:	2802      	cmp	r0, #2
    57ee:	d930      	bls.n	5852 <system_gclk_gen_set_config+0x96>
    57f0:	2302      	movs	r3, #2
    57f2:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    57f4:	3201      	adds	r2, #1
						mask <<= 1) {
    57f6:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    57f8:	4298      	cmp	r0, r3
    57fa:	d8fb      	bhi.n	57f4 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    57fc:	0212      	lsls	r2, r2, #8
    57fe:	4332      	orrs	r2, r6
    5800:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    5802:	2380      	movs	r3, #128	; 0x80
    5804:	035b      	lsls	r3, r3, #13
    5806:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    5808:	7a0b      	ldrb	r3, [r1, #8]
    580a:	2b00      	cmp	r3, #0
    580c:	d002      	beq.n	5814 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    580e:	2380      	movs	r3, #128	; 0x80
    5810:	039b      	lsls	r3, r3, #14
    5812:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5814:	4a13      	ldr	r2, [pc, #76]	; (5864 <system_gclk_gen_set_config+0xa8>)
    5816:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    5818:	b25b      	sxtb	r3, r3
    581a:	2b00      	cmp	r3, #0
    581c:	dbfb      	blt.n	5816 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    581e:	4b12      	ldr	r3, [pc, #72]	; (5868 <system_gclk_gen_set_config+0xac>)
    5820:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5822:	4b12      	ldr	r3, [pc, #72]	; (586c <system_gclk_gen_set_config+0xb0>)
    5824:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5826:	4a0f      	ldr	r2, [pc, #60]	; (5864 <system_gclk_gen_set_config+0xa8>)
    5828:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    582a:	b25b      	sxtb	r3, r3
    582c:	2b00      	cmp	r3, #0
    582e:	dbfb      	blt.n	5828 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    5830:	4b0c      	ldr	r3, [pc, #48]	; (5864 <system_gclk_gen_set_config+0xa8>)
    5832:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5834:	001a      	movs	r2, r3
    5836:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    5838:	b25b      	sxtb	r3, r3
    583a:	2b00      	cmp	r3, #0
    583c:	dbfb      	blt.n	5836 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    583e:	4a09      	ldr	r2, [pc, #36]	; (5864 <system_gclk_gen_set_config+0xa8>)
    5840:	6853      	ldr	r3, [r2, #4]
    5842:	2180      	movs	r1, #128	; 0x80
    5844:	0249      	lsls	r1, r1, #9
    5846:	400b      	ands	r3, r1
    5848:	431d      	orrs	r5, r3
    584a:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    584c:	4b08      	ldr	r3, [pc, #32]	; (5870 <system_gclk_gen_set_config+0xb4>)
    584e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5850:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    5852:	2200      	movs	r2, #0
    5854:	e7d2      	b.n	57fc <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    5856:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    5858:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    585a:	2380      	movs	r3, #128	; 0x80
    585c:	029b      	lsls	r3, r3, #10
    585e:	431d      	orrs	r5, r3
    5860:	e7d2      	b.n	5808 <system_gclk_gen_set_config+0x4c>
    5862:	46c0      	nop			; (mov r8, r8)
    5864:	40000c00 	.word	0x40000c00
    5868:	00004285 	.word	0x00004285
    586c:	40000c08 	.word	0x40000c08
    5870:	000042c5 	.word	0x000042c5

00005874 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    5874:	b510      	push	{r4, lr}
    5876:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5878:	4a0b      	ldr	r2, [pc, #44]	; (58a8 <system_gclk_gen_enable+0x34>)
    587a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    587c:	b25b      	sxtb	r3, r3
    587e:	2b00      	cmp	r3, #0
    5880:	dbfb      	blt.n	587a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    5882:	4b0a      	ldr	r3, [pc, #40]	; (58ac <system_gclk_gen_enable+0x38>)
    5884:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5886:	4b0a      	ldr	r3, [pc, #40]	; (58b0 <system_gclk_gen_enable+0x3c>)
    5888:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    588a:	4a07      	ldr	r2, [pc, #28]	; (58a8 <system_gclk_gen_enable+0x34>)
    588c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    588e:	b25b      	sxtb	r3, r3
    5890:	2b00      	cmp	r3, #0
    5892:	dbfb      	blt.n	588c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    5894:	4a04      	ldr	r2, [pc, #16]	; (58a8 <system_gclk_gen_enable+0x34>)
    5896:	6851      	ldr	r1, [r2, #4]
    5898:	2380      	movs	r3, #128	; 0x80
    589a:	025b      	lsls	r3, r3, #9
    589c:	430b      	orrs	r3, r1
    589e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    58a0:	4b04      	ldr	r3, [pc, #16]	; (58b4 <system_gclk_gen_enable+0x40>)
    58a2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    58a4:	bd10      	pop	{r4, pc}
    58a6:	46c0      	nop			; (mov r8, r8)
    58a8:	40000c00 	.word	0x40000c00
    58ac:	00004285 	.word	0x00004285
    58b0:	40000c04 	.word	0x40000c04
    58b4:	000042c5 	.word	0x000042c5

000058b8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    58b8:	b570      	push	{r4, r5, r6, lr}
    58ba:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    58bc:	4a1a      	ldr	r2, [pc, #104]	; (5928 <system_gclk_gen_get_hz+0x70>)
    58be:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    58c0:	b25b      	sxtb	r3, r3
    58c2:	2b00      	cmp	r3, #0
    58c4:	dbfb      	blt.n	58be <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    58c6:	4b19      	ldr	r3, [pc, #100]	; (592c <system_gclk_gen_get_hz+0x74>)
    58c8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    58ca:	4b19      	ldr	r3, [pc, #100]	; (5930 <system_gclk_gen_get_hz+0x78>)
    58cc:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    58ce:	4a16      	ldr	r2, [pc, #88]	; (5928 <system_gclk_gen_get_hz+0x70>)
    58d0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    58d2:	b25b      	sxtb	r3, r3
    58d4:	2b00      	cmp	r3, #0
    58d6:	dbfb      	blt.n	58d0 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    58d8:	4e13      	ldr	r6, [pc, #76]	; (5928 <system_gclk_gen_get_hz+0x70>)
    58da:	6870      	ldr	r0, [r6, #4]
    58dc:	04c0      	lsls	r0, r0, #19
    58de:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    58e0:	4b14      	ldr	r3, [pc, #80]	; (5934 <system_gclk_gen_get_hz+0x7c>)
    58e2:	4798      	blx	r3
    58e4:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    58e6:	4b12      	ldr	r3, [pc, #72]	; (5930 <system_gclk_gen_get_hz+0x78>)
    58e8:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    58ea:	6876      	ldr	r6, [r6, #4]
    58ec:	02f6      	lsls	r6, r6, #11
    58ee:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    58f0:	4b11      	ldr	r3, [pc, #68]	; (5938 <system_gclk_gen_get_hz+0x80>)
    58f2:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    58f4:	4a0c      	ldr	r2, [pc, #48]	; (5928 <system_gclk_gen_get_hz+0x70>)
    58f6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    58f8:	b25b      	sxtb	r3, r3
    58fa:	2b00      	cmp	r3, #0
    58fc:	dbfb      	blt.n	58f6 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    58fe:	4b0a      	ldr	r3, [pc, #40]	; (5928 <system_gclk_gen_get_hz+0x70>)
    5900:	689c      	ldr	r4, [r3, #8]
    5902:	0224      	lsls	r4, r4, #8
    5904:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    5906:	4b0d      	ldr	r3, [pc, #52]	; (593c <system_gclk_gen_get_hz+0x84>)
    5908:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    590a:	2e00      	cmp	r6, #0
    590c:	d107      	bne.n	591e <system_gclk_gen_get_hz+0x66>
    590e:	2c01      	cmp	r4, #1
    5910:	d907      	bls.n	5922 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    5912:	0021      	movs	r1, r4
    5914:	0028      	movs	r0, r5
    5916:	4b0a      	ldr	r3, [pc, #40]	; (5940 <system_gclk_gen_get_hz+0x88>)
    5918:	4798      	blx	r3
    591a:	0005      	movs	r5, r0
    591c:	e001      	b.n	5922 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    591e:	3401      	adds	r4, #1
    5920:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    5922:	0028      	movs	r0, r5
    5924:	bd70      	pop	{r4, r5, r6, pc}
    5926:	46c0      	nop			; (mov r8, r8)
    5928:	40000c00 	.word	0x40000c00
    592c:	00004285 	.word	0x00004285
    5930:	40000c04 	.word	0x40000c04
    5934:	0000538d 	.word	0x0000538d
    5938:	40000c08 	.word	0x40000c08
    593c:	000042c5 	.word	0x000042c5
    5940:	00007961 	.word	0x00007961

00005944 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    5944:	b510      	push	{r4, lr}
    5946:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    5948:	4b06      	ldr	r3, [pc, #24]	; (5964 <system_gclk_chan_enable+0x20>)
    594a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    594c:	4b06      	ldr	r3, [pc, #24]	; (5968 <system_gclk_chan_enable+0x24>)
    594e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    5950:	4a06      	ldr	r2, [pc, #24]	; (596c <system_gclk_chan_enable+0x28>)
    5952:	8853      	ldrh	r3, [r2, #2]
    5954:	2180      	movs	r1, #128	; 0x80
    5956:	01c9      	lsls	r1, r1, #7
    5958:	430b      	orrs	r3, r1
    595a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    595c:	4b04      	ldr	r3, [pc, #16]	; (5970 <system_gclk_chan_enable+0x2c>)
    595e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5960:	bd10      	pop	{r4, pc}
    5962:	46c0      	nop			; (mov r8, r8)
    5964:	00004285 	.word	0x00004285
    5968:	40000c02 	.word	0x40000c02
    596c:	40000c00 	.word	0x40000c00
    5970:	000042c5 	.word	0x000042c5

00005974 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    5974:	b510      	push	{r4, lr}
    5976:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    5978:	4b0f      	ldr	r3, [pc, #60]	; (59b8 <system_gclk_chan_disable+0x44>)
    597a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    597c:	4b0f      	ldr	r3, [pc, #60]	; (59bc <system_gclk_chan_disable+0x48>)
    597e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    5980:	4a0f      	ldr	r2, [pc, #60]	; (59c0 <system_gclk_chan_disable+0x4c>)
    5982:	8853      	ldrh	r3, [r2, #2]
    5984:	051b      	lsls	r3, r3, #20
    5986:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    5988:	8853      	ldrh	r3, [r2, #2]
    598a:	490e      	ldr	r1, [pc, #56]	; (59c4 <system_gclk_chan_disable+0x50>)
    598c:	400b      	ands	r3, r1
    598e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    5990:	8853      	ldrh	r3, [r2, #2]
    5992:	490d      	ldr	r1, [pc, #52]	; (59c8 <system_gclk_chan_disable+0x54>)
    5994:	400b      	ands	r3, r1
    5996:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    5998:	0011      	movs	r1, r2
    599a:	2280      	movs	r2, #128	; 0x80
    599c:	01d2      	lsls	r2, r2, #7
    599e:	884b      	ldrh	r3, [r1, #2]
    59a0:	4213      	tst	r3, r2
    59a2:	d1fc      	bne.n	599e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    59a4:	4906      	ldr	r1, [pc, #24]	; (59c0 <system_gclk_chan_disable+0x4c>)
    59a6:	884a      	ldrh	r2, [r1, #2]
    59a8:	0203      	lsls	r3, r0, #8
    59aa:	4806      	ldr	r0, [pc, #24]	; (59c4 <system_gclk_chan_disable+0x50>)
    59ac:	4002      	ands	r2, r0
    59ae:	4313      	orrs	r3, r2
    59b0:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    59b2:	4b06      	ldr	r3, [pc, #24]	; (59cc <system_gclk_chan_disable+0x58>)
    59b4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    59b6:	bd10      	pop	{r4, pc}
    59b8:	00004285 	.word	0x00004285
    59bc:	40000c02 	.word	0x40000c02
    59c0:	40000c00 	.word	0x40000c00
    59c4:	fffff0ff 	.word	0xfffff0ff
    59c8:	ffffbfff 	.word	0xffffbfff
    59cc:	000042c5 	.word	0x000042c5

000059d0 <system_gclk_chan_set_config>:
{
    59d0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    59d2:	780c      	ldrb	r4, [r1, #0]
    59d4:	0224      	lsls	r4, r4, #8
    59d6:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    59d8:	4b02      	ldr	r3, [pc, #8]	; (59e4 <system_gclk_chan_set_config+0x14>)
    59da:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    59dc:	b2a4      	uxth	r4, r4
    59de:	4b02      	ldr	r3, [pc, #8]	; (59e8 <system_gclk_chan_set_config+0x18>)
    59e0:	805c      	strh	r4, [r3, #2]
}
    59e2:	bd10      	pop	{r4, pc}
    59e4:	00005975 	.word	0x00005975
    59e8:	40000c00 	.word	0x40000c00

000059ec <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    59ec:	b510      	push	{r4, lr}
    59ee:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    59f0:	4b06      	ldr	r3, [pc, #24]	; (5a0c <system_gclk_chan_get_hz+0x20>)
    59f2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    59f4:	4b06      	ldr	r3, [pc, #24]	; (5a10 <system_gclk_chan_get_hz+0x24>)
    59f6:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    59f8:	4b06      	ldr	r3, [pc, #24]	; (5a14 <system_gclk_chan_get_hz+0x28>)
    59fa:	885c      	ldrh	r4, [r3, #2]
    59fc:	0524      	lsls	r4, r4, #20
    59fe:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    5a00:	4b05      	ldr	r3, [pc, #20]	; (5a18 <system_gclk_chan_get_hz+0x2c>)
    5a02:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    5a04:	0020      	movs	r0, r4
    5a06:	4b05      	ldr	r3, [pc, #20]	; (5a1c <system_gclk_chan_get_hz+0x30>)
    5a08:	4798      	blx	r3
}
    5a0a:	bd10      	pop	{r4, pc}
    5a0c:	00004285 	.word	0x00004285
    5a10:	40000c02 	.word	0x40000c02
    5a14:	40000c00 	.word	0x40000c00
    5a18:	000042c5 	.word	0x000042c5
    5a1c:	000058b9 	.word	0x000058b9

00005a20 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    5a20:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    5a22:	78d3      	ldrb	r3, [r2, #3]
    5a24:	2b00      	cmp	r3, #0
    5a26:	d135      	bne.n	5a94 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    5a28:	7813      	ldrb	r3, [r2, #0]
    5a2a:	2b80      	cmp	r3, #128	; 0x80
    5a2c:	d029      	beq.n	5a82 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    5a2e:	061b      	lsls	r3, r3, #24
    5a30:	2480      	movs	r4, #128	; 0x80
    5a32:	0264      	lsls	r4, r4, #9
    5a34:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    5a36:	7854      	ldrb	r4, [r2, #1]
    5a38:	2502      	movs	r5, #2
    5a3a:	43ac      	bics	r4, r5
    5a3c:	d106      	bne.n	5a4c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    5a3e:	7894      	ldrb	r4, [r2, #2]
    5a40:	2c00      	cmp	r4, #0
    5a42:	d120      	bne.n	5a86 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    5a44:	2480      	movs	r4, #128	; 0x80
    5a46:	02a4      	lsls	r4, r4, #10
    5a48:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    5a4a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5a4c:	7854      	ldrb	r4, [r2, #1]
    5a4e:	3c01      	subs	r4, #1
    5a50:	2c01      	cmp	r4, #1
    5a52:	d91c      	bls.n	5a8e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    5a54:	040d      	lsls	r5, r1, #16
    5a56:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    5a58:	24a0      	movs	r4, #160	; 0xa0
    5a5a:	05e4      	lsls	r4, r4, #23
    5a5c:	432c      	orrs	r4, r5
    5a5e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5a60:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    5a62:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    5a64:	24d0      	movs	r4, #208	; 0xd0
    5a66:	0624      	lsls	r4, r4, #24
    5a68:	432c      	orrs	r4, r5
    5a6a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5a6c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    5a6e:	78d4      	ldrb	r4, [r2, #3]
    5a70:	2c00      	cmp	r4, #0
    5a72:	d122      	bne.n	5aba <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    5a74:	035b      	lsls	r3, r3, #13
    5a76:	d51c      	bpl.n	5ab2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    5a78:	7893      	ldrb	r3, [r2, #2]
    5a7a:	2b01      	cmp	r3, #1
    5a7c:	d01e      	beq.n	5abc <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    5a7e:	6141      	str	r1, [r0, #20]
    5a80:	e017      	b.n	5ab2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    5a82:	2300      	movs	r3, #0
    5a84:	e7d7      	b.n	5a36 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    5a86:	24c0      	movs	r4, #192	; 0xc0
    5a88:	02e4      	lsls	r4, r4, #11
    5a8a:	4323      	orrs	r3, r4
    5a8c:	e7dd      	b.n	5a4a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    5a8e:	4c0d      	ldr	r4, [pc, #52]	; (5ac4 <_system_pinmux_config+0xa4>)
    5a90:	4023      	ands	r3, r4
    5a92:	e7df      	b.n	5a54 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    5a94:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    5a96:	040c      	lsls	r4, r1, #16
    5a98:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    5a9a:	23a0      	movs	r3, #160	; 0xa0
    5a9c:	05db      	lsls	r3, r3, #23
    5a9e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5aa0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    5aa2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    5aa4:	23d0      	movs	r3, #208	; 0xd0
    5aa6:	061b      	lsls	r3, r3, #24
    5aa8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5aaa:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    5aac:	78d3      	ldrb	r3, [r2, #3]
    5aae:	2b00      	cmp	r3, #0
    5ab0:	d103      	bne.n	5aba <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5ab2:	7853      	ldrb	r3, [r2, #1]
    5ab4:	3b01      	subs	r3, #1
    5ab6:	2b01      	cmp	r3, #1
    5ab8:	d902      	bls.n	5ac0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    5aba:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    5abc:	6181      	str	r1, [r0, #24]
    5abe:	e7f8      	b.n	5ab2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    5ac0:	6081      	str	r1, [r0, #8]
}
    5ac2:	e7fa      	b.n	5aba <_system_pinmux_config+0x9a>
    5ac4:	fffbffff 	.word	0xfffbffff

00005ac8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    5ac8:	b510      	push	{r4, lr}
    5aca:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    5acc:	09c1      	lsrs	r1, r0, #7
		return NULL;
    5ace:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5ad0:	2900      	cmp	r1, #0
    5ad2:	d104      	bne.n	5ade <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    5ad4:	0943      	lsrs	r3, r0, #5
    5ad6:	01db      	lsls	r3, r3, #7
    5ad8:	4905      	ldr	r1, [pc, #20]	; (5af0 <system_pinmux_pin_set_config+0x28>)
    5ada:	468c      	mov	ip, r1
    5adc:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    5ade:	241f      	movs	r4, #31
    5ae0:	4020      	ands	r0, r4
    5ae2:	2101      	movs	r1, #1
    5ae4:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    5ae6:	0018      	movs	r0, r3
    5ae8:	4b02      	ldr	r3, [pc, #8]	; (5af4 <system_pinmux_pin_set_config+0x2c>)
    5aea:	4798      	blx	r3
}
    5aec:	bd10      	pop	{r4, pc}
    5aee:	46c0      	nop			; (mov r8, r8)
    5af0:	41004400 	.word	0x41004400
    5af4:	00005a21 	.word	0x00005a21

00005af8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    5af8:	4770      	bx	lr
	...

00005afc <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    5afc:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    5afe:	4b05      	ldr	r3, [pc, #20]	; (5b14 <system_init+0x18>)
    5b00:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    5b02:	4b05      	ldr	r3, [pc, #20]	; (5b18 <system_init+0x1c>)
    5b04:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    5b06:	4b05      	ldr	r3, [pc, #20]	; (5b1c <system_init+0x20>)
    5b08:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    5b0a:	4b05      	ldr	r3, [pc, #20]	; (5b20 <system_init+0x24>)
    5b0c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    5b0e:	4b05      	ldr	r3, [pc, #20]	; (5b24 <system_init+0x28>)
    5b10:	4798      	blx	r3
}
    5b12:	bd10      	pop	{r4, pc}
    5b14:	00005639 	.word	0x00005639
    5b18:	000042f5 	.word	0x000042f5
    5b1c:	00005af9 	.word	0x00005af9
    5b20:	00004405 	.word	0x00004405
    5b24:	00005af9 	.word	0x00005af9

00005b28 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    5b28:	4b09      	ldr	r3, [pc, #36]	; (5b50 <_tcc_get_inst_index+0x28>)
    5b2a:	4298      	cmp	r0, r3
    5b2c:	d00c      	beq.n	5b48 <_tcc_get_inst_index+0x20>
    5b2e:	4b09      	ldr	r3, [pc, #36]	; (5b54 <_tcc_get_inst_index+0x2c>)
    5b30:	4298      	cmp	r0, r3
    5b32:	d007      	beq.n	5b44 <_tcc_get_inst_index+0x1c>
    5b34:	4a08      	ldr	r2, [pc, #32]	; (5b58 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    5b36:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
    5b38:	4290      	cmp	r0, r2
    5b3a:	d001      	beq.n	5b40 <_tcc_get_inst_index+0x18>
}
    5b3c:	0018      	movs	r0, r3
    5b3e:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    5b40:	3302      	adds	r3, #2
    5b42:	e002      	b.n	5b4a <_tcc_get_inst_index+0x22>
    5b44:	2301      	movs	r3, #1
    5b46:	e000      	b.n	5b4a <_tcc_get_inst_index+0x22>
    5b48:	2300      	movs	r3, #0
			return i;
    5b4a:	b2db      	uxtb	r3, r3
    5b4c:	e7f6      	b.n	5b3c <_tcc_get_inst_index+0x14>
    5b4e:	46c0      	nop			; (mov r8, r8)
    5b50:	42002000 	.word	0x42002000
    5b54:	42002400 	.word	0x42002400
    5b58:	42002800 	.word	0x42002800

00005b5c <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    5b5c:	b510      	push	{r4, lr}
    5b5e:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    5b60:	0008      	movs	r0, r1
    5b62:	4b4f      	ldr	r3, [pc, #316]	; (5ca0 <tcc_get_config_defaults+0x144>)
    5b64:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
    5b66:	2300      	movs	r3, #0
    5b68:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    5b6a:	0080      	lsls	r0, r0, #2
    5b6c:	4a4d      	ldr	r2, [pc, #308]	; (5ca4 <tcc_get_config_defaults+0x148>)
    5b6e:	5882      	ldr	r2, [r0, r2]
    5b70:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    5b72:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    5b74:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    5b76:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    5b78:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    5b7a:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    5b7c:	61e3      	str	r3, [r4, #28]
    5b7e:	6223      	str	r3, [r4, #32]
    5b80:	6263      	str	r3, [r4, #36]	; 0x24
    5b82:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    5b84:	7523      	strb	r3, [r4, #20]
    5b86:	7563      	strb	r3, [r4, #21]
    5b88:	75a3      	strb	r3, [r4, #22]
    5b8a:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    5b8c:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    5b8e:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    5b90:	7423      	strb	r3, [r4, #16]
    5b92:	7463      	strb	r3, [r4, #17]
    5b94:	74a3      	strb	r3, [r4, #18]
    5b96:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    5b98:	222c      	movs	r2, #44	; 0x2c
    5b9a:	54a3      	strb	r3, [r4, r2]
    5b9c:	3201      	adds	r2, #1
    5b9e:	54a3      	strb	r3, [r4, r2]
    5ba0:	3201      	adds	r2, #1
    5ba2:	54a3      	strb	r3, [r4, r2]
    5ba4:	3201      	adds	r2, #1
    5ba6:	54a3      	strb	r3, [r4, r2]
    5ba8:	3201      	adds	r2, #1
    5baa:	54a3      	strb	r3, [r4, r2]
    5bac:	3201      	adds	r2, #1
    5bae:	54a3      	strb	r3, [r4, r2]
    5bb0:	3201      	adds	r2, #1
    5bb2:	54a3      	strb	r3, [r4, r2]
    5bb4:	3201      	adds	r2, #1
    5bb6:	54a3      	strb	r3, [r4, r2]
    5bb8:	3201      	adds	r2, #1
    5bba:	54a3      	strb	r3, [r4, r2]
    5bbc:	3201      	adds	r2, #1
    5bbe:	54a3      	strb	r3, [r4, r2]
    5bc0:	3201      	adds	r2, #1
    5bc2:	54a3      	strb	r3, [r4, r2]
    5bc4:	3201      	adds	r2, #1
    5bc6:	54a3      	strb	r3, [r4, r2]
    5bc8:	3201      	adds	r2, #1
    5bca:	54a3      	strb	r3, [r4, r2]
    5bcc:	3201      	adds	r2, #1
    5bce:	54a3      	strb	r3, [r4, r2]
    5bd0:	3201      	adds	r2, #1
    5bd2:	54a3      	strb	r3, [r4, r2]
    5bd4:	3201      	adds	r2, #1
    5bd6:	54a3      	strb	r3, [r4, r2]
    5bd8:	3201      	adds	r2, #1
    5bda:	54a3      	strb	r3, [r4, r2]
    5bdc:	3201      	adds	r2, #1
    5bde:	54a3      	strb	r3, [r4, r2]
    5be0:	3201      	adds	r2, #1
    5be2:	54a3      	strb	r3, [r4, r2]
    5be4:	3201      	adds	r2, #1
    5be6:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    5be8:	3201      	adds	r2, #1
    5bea:	54a3      	strb	r3, [r4, r2]
    5bec:	3201      	adds	r2, #1
    5bee:	54a3      	strb	r3, [r4, r2]
    5bf0:	3201      	adds	r2, #1
    5bf2:	54a3      	strb	r3, [r4, r2]
    5bf4:	3201      	adds	r2, #1
    5bf6:	54a3      	strb	r3, [r4, r2]
    5bf8:	3201      	adds	r2, #1
    5bfa:	54a3      	strb	r3, [r4, r2]
    5bfc:	3201      	adds	r2, #1
    5bfe:	54a3      	strb	r3, [r4, r2]
    5c00:	3201      	adds	r2, #1
    5c02:	54a3      	strb	r3, [r4, r2]
    5c04:	3201      	adds	r2, #1
    5c06:	54a3      	strb	r3, [r4, r2]
    5c08:	3201      	adds	r2, #1
    5c0a:	54a3      	strb	r3, [r4, r2]
    5c0c:	3201      	adds	r2, #1
    5c0e:	54a3      	strb	r3, [r4, r2]
    5c10:	3201      	adds	r2, #1
    5c12:	54a3      	strb	r3, [r4, r2]
    5c14:	3201      	adds	r2, #1
    5c16:	54a3      	strb	r3, [r4, r2]
    5c18:	3201      	adds	r2, #1
    5c1a:	54a3      	strb	r3, [r4, r2]
    5c1c:	3201      	adds	r2, #1
    5c1e:	54a3      	strb	r3, [r4, r2]
    5c20:	3201      	adds	r2, #1
    5c22:	54a3      	strb	r3, [r4, r2]
    5c24:	3201      	adds	r2, #1
    5c26:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    5c28:	3201      	adds	r2, #1
    5c2a:	54a3      	strb	r3, [r4, r2]
    5c2c:	3201      	adds	r2, #1
    5c2e:	54a3      	strb	r3, [r4, r2]
    5c30:	3201      	adds	r2, #1
    5c32:	54a3      	strb	r3, [r4, r2]
    5c34:	3201      	adds	r2, #1
    5c36:	54a3      	strb	r3, [r4, r2]
    5c38:	3201      	adds	r2, #1
    5c3a:	54a3      	strb	r3, [r4, r2]
    5c3c:	3201      	adds	r2, #1
    5c3e:	54a3      	strb	r3, [r4, r2]
    5c40:	3201      	adds	r2, #1
    5c42:	54a3      	strb	r3, [r4, r2]
    5c44:	3201      	adds	r2, #1
    5c46:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    5c48:	3241      	adds	r2, #65	; 0x41
    5c4a:	54a3      	strb	r3, [r4, r2]
    5c4c:	65a3      	str	r3, [r4, #88]	; 0x58
    5c4e:	67a3      	str	r3, [r4, #120]	; 0x78
    5c50:	3201      	adds	r2, #1
    5c52:	54a3      	strb	r3, [r4, r2]
    5c54:	65e3      	str	r3, [r4, #92]	; 0x5c
    5c56:	67e3      	str	r3, [r4, #124]	; 0x7c
    5c58:	3201      	adds	r2, #1
    5c5a:	54a3      	strb	r3, [r4, r2]
    5c5c:	6623      	str	r3, [r4, #96]	; 0x60
    5c5e:	3a1a      	subs	r2, #26
    5c60:	50a3      	str	r3, [r4, r2]
    5c62:	321b      	adds	r2, #27
    5c64:	54a3      	strb	r3, [r4, r2]
    5c66:	6663      	str	r3, [r4, #100]	; 0x64
    5c68:	3a17      	subs	r2, #23
    5c6a:	50a3      	str	r3, [r4, r2]
    5c6c:	3218      	adds	r2, #24
    5c6e:	54a3      	strb	r3, [r4, r2]
    5c70:	66a3      	str	r3, [r4, #104]	; 0x68
    5c72:	3a14      	subs	r2, #20
    5c74:	50a3      	str	r3, [r4, r2]
    5c76:	3215      	adds	r2, #21
    5c78:	54a3      	strb	r3, [r4, r2]
    5c7a:	66e3      	str	r3, [r4, #108]	; 0x6c
    5c7c:	3a11      	subs	r2, #17
    5c7e:	50a3      	str	r3, [r4, r2]
    5c80:	3212      	adds	r2, #18
    5c82:	54a3      	strb	r3, [r4, r2]
    5c84:	6723      	str	r3, [r4, #112]	; 0x70
    5c86:	3a0e      	subs	r2, #14
    5c88:	50a3      	str	r3, [r4, r2]
    5c8a:	320f      	adds	r2, #15
    5c8c:	54a3      	strb	r3, [r4, r2]
    5c8e:	6763      	str	r3, [r4, #116]	; 0x74
    5c90:	3a0b      	subs	r2, #11
    5c92:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    5c94:	2101      	movs	r1, #1
    5c96:	320c      	adds	r2, #12
    5c98:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    5c9a:	3201      	adds	r2, #1
    5c9c:	54a3      	strb	r3, [r4, r2]
}
    5c9e:	bd10      	pop	{r4, pc}
    5ca0:	00005b29 	.word	0x00005b29
    5ca4:	0000be70 	.word	0x0000be70

00005ca8 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    5ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5caa:	46de      	mov	lr, fp
    5cac:	4657      	mov	r7, sl
    5cae:	464e      	mov	r6, r9
    5cb0:	4645      	mov	r5, r8
    5cb2:	b5e0      	push	{r5, r6, r7, lr}
    5cb4:	b091      	sub	sp, #68	; 0x44
    5cb6:	9001      	str	r0, [sp, #4]
    5cb8:	000c      	movs	r4, r1
    5cba:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    5cbc:	0008      	movs	r0, r1
    5cbe:	4bc3      	ldr	r3, [pc, #780]	; (5fcc <tcc_init+0x324>)
    5cc0:	4798      	blx	r3
    5cc2:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    5cc4:	0001      	movs	r1, r0
			PM->APBCMASK.reg |= mask;
    5cc6:	48c2      	ldr	r0, [pc, #776]	; (5fd0 <tcc_init+0x328>)
    5cc8:	6a02      	ldr	r2, [r0, #32]
    5cca:	009e      	lsls	r6, r3, #2
    5ccc:	4fc1      	ldr	r7, [pc, #772]	; (5fd4 <tcc_init+0x32c>)
    5cce:	59f7      	ldr	r7, [r6, r7]
    5cd0:	433a      	orrs	r2, r7
    5cd2:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    5cd4:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    5cd6:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    5cd8:	0792      	lsls	r2, r2, #30
    5cda:	d506      	bpl.n	5cea <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    5cdc:	b011      	add	sp, #68	; 0x44
    5cde:	bc3c      	pop	{r2, r3, r4, r5}
    5ce0:	4690      	mov	r8, r2
    5ce2:	4699      	mov	r9, r3
    5ce4:	46a2      	mov	sl, r4
    5ce6:	46ab      	mov	fp, r5
    5ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    5cea:	6822      	ldr	r2, [r4, #0]
    5cec:	2701      	movs	r7, #1
    5cee:	4017      	ands	r7, r2
    5cf0:	d1f4      	bne.n	5cdc <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
    5cf2:	48b9      	ldr	r0, [pc, #740]	; (5fd8 <tcc_init+0x330>)
    5cf4:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
    5cf6:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
    5cf8:	682e      	ldr	r6, [r5, #0]
    5cfa:	42b2      	cmp	r2, r6
    5cfc:	d3ee      	bcc.n	5cdc <tcc_init+0x34>
		|| (config->counter.period > count_max)
    5cfe:	686e      	ldr	r6, [r5, #4]
    5d00:	42b2      	cmp	r2, r6
    5d02:	d3eb      	bcc.n	5cdc <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
    5d04:	69e8      	ldr	r0, [r5, #28]
    5d06:	4282      	cmp	r2, r0
    5d08:	d200      	bcs.n	5d0c <tcc_init+0x64>
    5d0a:	e1b9      	b.n	6080 <tcc_init+0x3d8>
    5d0c:	6a28      	ldr	r0, [r5, #32]
    5d0e:	4282      	cmp	r2, r0
    5d10:	d200      	bcs.n	5d14 <tcc_init+0x6c>
    5d12:	e1b7      	b.n	6084 <tcc_init+0x3dc>
    5d14:	6a68      	ldr	r0, [r5, #36]	; 0x24
    5d16:	4282      	cmp	r2, r0
    5d18:	d200      	bcs.n	5d1c <tcc_init+0x74>
    5d1a:	e1b5      	b.n	6088 <tcc_init+0x3e0>
    5d1c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    5d1e:	4282      	cmp	r2, r0
    5d20:	d200      	bcs.n	5d24 <tcc_init+0x7c>
    5d22:	e1b3      	b.n	608c <tcc_init+0x3e4>
    5d24:	2298      	movs	r2, #152	; 0x98
    5d26:	4694      	mov	ip, r2
    5d28:	44ac      	add	ip, r5
    5d2a:	4662      	mov	r2, ip
    5d2c:	9208      	str	r2, [sp, #32]
    5d2e:	2000      	movs	r0, #0
    5d30:	e003      	b.n	5d3a <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    5d32:	3001      	adds	r0, #1
    5d34:	3201      	adds	r2, #1
    5d36:	2808      	cmp	r0, #8
    5d38:	d008      	beq.n	5d4c <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
    5d3a:	7816      	ldrb	r6, [r2, #0]
    5d3c:	2e00      	cmp	r6, #0
    5d3e:	d0f8      	beq.n	5d32 <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
    5d40:	4ea6      	ldr	r6, [pc, #664]	; (5fdc <tcc_init+0x334>)
    5d42:	5c76      	ldrb	r6, [r6, r1]
    5d44:	4286      	cmp	r6, r0
    5d46:	dcf4      	bgt.n	5d32 <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
    5d48:	2017      	movs	r0, #23
    5d4a:	e7c7      	b.n	5cdc <tcc_init+0x34>
    5d4c:	2200      	movs	r2, #0
    5d4e:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    5d50:	2080      	movs	r0, #128	; 0x80
    5d52:	0440      	lsls	r0, r0, #17
    5d54:	4684      	mov	ip, r0
    5d56:	e002      	b.n	5d5e <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    5d58:	3201      	adds	r2, #1
    5d5a:	2a04      	cmp	r2, #4
    5d5c:	d00e      	beq.n	5d7c <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
    5d5e:	18a8      	adds	r0, r5, r2
    5d60:	7c00      	ldrb	r0, [r0, #16]
    5d62:	2801      	cmp	r0, #1
    5d64:	d1f8      	bne.n	5d58 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
    5d66:	489e      	ldr	r0, [pc, #632]	; (5fe0 <tcc_init+0x338>)
    5d68:	5c40      	ldrb	r0, [r0, r1]
    5d6a:	4290      	cmp	r0, r2
    5d6c:	da00      	bge.n	5d70 <tcc_init+0xc8>
    5d6e:	e18f      	b.n	6090 <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    5d70:	4660      	mov	r0, ip
    5d72:	4090      	lsls	r0, r2
    5d74:	9e02      	ldr	r6, [sp, #8]
    5d76:	4306      	orrs	r6, r0
    5d78:	9602      	str	r6, [sp, #8]
    5d7a:	e7ed      	b.n	5d58 <tcc_init+0xb0>
	if (config->run_in_standby) {
    5d7c:	329d      	adds	r2, #157	; 0x9d
    5d7e:	5caa      	ldrb	r2, [r5, r2]
    5d80:	2a00      	cmp	r2, #0
    5d82:	d004      	beq.n	5d8e <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    5d84:	2280      	movs	r2, #128	; 0x80
    5d86:	0112      	lsls	r2, r2, #4
    5d88:	9902      	ldr	r1, [sp, #8]
    5d8a:	4311      	orrs	r1, r2
    5d8c:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    5d8e:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    5d90:	1e51      	subs	r1, r2, #1
    5d92:	418a      	sbcs	r2, r1
    5d94:	0092      	lsls	r2, r2, #2
    5d96:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    5d98:	7a6a      	ldrb	r2, [r5, #9]
    5d9a:	2a01      	cmp	r2, #1
    5d9c:	d022      	beq.n	5de4 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
    5d9e:	4a90      	ldr	r2, [pc, #576]	; (5fe0 <tcc_init+0x338>)
    5da0:	5cd2      	ldrb	r2, [r2, r3]
    5da2:	0011      	movs	r1, r2
    5da4:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
    5da6:	2235      	movs	r2, #53	; 0x35
    5da8:	5caa      	ldrb	r2, [r5, r2]
    5daa:	428a      	cmp	r2, r1
    5dac:	d300      	bcc.n	5db0 <tcc_init+0x108>
    5dae:	e179      	b.n	60a4 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    5db0:	212c      	movs	r1, #44	; 0x2c
    5db2:	5c69      	ldrb	r1, [r5, r1]
    5db4:	290f      	cmp	r1, #15
    5db6:	d900      	bls.n	5dba <tcc_init+0x112>
    5db8:	e174      	b.n	60a4 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    5dba:	7b28      	ldrb	r0, [r5, #12]
    5dbc:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    5dbe:	7ae8      	ldrb	r0, [r5, #11]
    5dc0:	900b      	str	r0, [sp, #44]	; 0x2c
    5dc2:	202d      	movs	r0, #45	; 0x2d
    5dc4:	4682      	mov	sl, r0
    5dc6:	44aa      	add	sl, r5
    5dc8:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    5dca:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
    5dcc:	ae0e      	add	r6, sp, #56	; 0x38
    5dce:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    5dd0:	26c0      	movs	r6, #192	; 0xc0
    5dd2:	0136      	lsls	r6, r6, #4
    5dd4:	46b1      	mov	r9, r6
    5dd6:	4684      	mov	ip, r0
    5dd8:	46a0      	mov	r8, r4
    5dda:	0028      	movs	r0, r5
    5ddc:	4655      	mov	r5, sl
    5dde:	9309      	str	r3, [sp, #36]	; 0x24
    5de0:	4682      	mov	sl, r0
    5de2:	e035      	b.n	5e50 <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
    5de4:	9906      	ldr	r1, [sp, #24]
    5de6:	4311      	orrs	r1, r2
    5de8:	9106      	str	r1, [sp, #24]
    5dea:	e7d8      	b.n	5d9e <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    5dec:	0292      	lsls	r2, r2, #10
    5dee:	464f      	mov	r7, r9
    5df0:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    5df2:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
    5df4:	7919      	ldrb	r1, [r3, #4]
    5df6:	468b      	mov	fp, r1
    5df8:	2103      	movs	r1, #3
    5dfa:	465f      	mov	r7, fp
    5dfc:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    5dfe:	430a      	orrs	r2, r1
    5e00:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
    5e02:	795a      	ldrb	r2, [r3, #5]
    5e04:	0152      	lsls	r2, r2, #5
    5e06:	2160      	movs	r1, #96	; 0x60
    5e08:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    5e0a:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
    5e0c:	7999      	ldrb	r1, [r3, #6]
    5e0e:	0209      	lsls	r1, r1, #8
    5e10:	26c0      	movs	r6, #192	; 0xc0
    5e12:	00b6      	lsls	r6, r6, #2
    5e14:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    5e16:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    5e18:	79da      	ldrb	r2, [r3, #7]
    5e1a:	0312      	lsls	r2, r2, #12
    5e1c:	21e0      	movs	r1, #224	; 0xe0
    5e1e:	01c9      	lsls	r1, r1, #7
    5e20:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    5e22:	4316      	orrs	r6, r2
    5e24:	4334      	orrs	r4, r6
    5e26:	9a03      	ldr	r2, [sp, #12]
    5e28:	4314      	orrs	r4, r2
    5e2a:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
    5e2c:	4662      	mov	r2, ip
    5e2e:	9907      	ldr	r1, [sp, #28]
    5e30:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    5e32:	2a04      	cmp	r2, #4
    5e34:	d02a      	beq.n	5e8c <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
    5e36:	7c9a      	ldrb	r2, [r3, #18]
    5e38:	9905      	ldr	r1, [sp, #20]
    5e3a:	4291      	cmp	r1, r2
    5e3c:	d800      	bhi.n	5e40 <tcc_init+0x198>
    5e3e:	e131      	b.n	60a4 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    5e40:	7a59      	ldrb	r1, [r3, #9]
    5e42:	350a      	adds	r5, #10
    5e44:	2304      	movs	r3, #4
    5e46:	469b      	mov	fp, r3
    5e48:	44dc      	add	ip, fp
    5e4a:	290f      	cmp	r1, #15
    5e4c:	d900      	bls.n	5e50 <tcc_init+0x1a8>
    5e4e:	e129      	b.n	60a4 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    5e50:	0609      	lsls	r1, r1, #24
    5e52:	23f0      	movs	r3, #240	; 0xf0
    5e54:	051b      	lsls	r3, r3, #20
    5e56:	4019      	ands	r1, r3
    5e58:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    5e5a:	782e      	ldrb	r6, [r5, #0]
    5e5c:	0436      	lsls	r6, r6, #16
    5e5e:	20ff      	movs	r0, #255	; 0xff
    5e60:	0400      	lsls	r0, r0, #16
    5e62:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    5e64:	7868      	ldrb	r0, [r5, #1]
    5e66:	2480      	movs	r4, #128	; 0x80
    5e68:	2800      	cmp	r0, #0
    5e6a:	d100      	bne.n	5e6e <tcc_init+0x1c6>
    5e6c:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    5e6e:	7898      	ldrb	r0, [r3, #2]
    5e70:	2708      	movs	r7, #8
    5e72:	9703      	str	r7, [sp, #12]
    5e74:	2800      	cmp	r0, #0
    5e76:	d101      	bne.n	5e7c <tcc_init+0x1d4>
    5e78:	9804      	ldr	r0, [sp, #16]
    5e7a:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    5e7c:	78d8      	ldrb	r0, [r3, #3]
    5e7e:	4683      	mov	fp, r0
    5e80:	2010      	movs	r0, #16
    5e82:	465f      	mov	r7, fp
    5e84:	2f00      	cmp	r7, #0
    5e86:	d1b1      	bne.n	5dec <tcc_init+0x144>
    5e88:	9804      	ldr	r0, [sp, #16]
    5e8a:	e7af      	b.n	5dec <tcc_init+0x144>
    5e8c:	4644      	mov	r4, r8
    5e8e:	4655      	mov	r5, sl
    5e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
    5e92:	4a52      	ldr	r2, [pc, #328]	; (5fdc <tcc_init+0x334>)
    5e94:	5cd2      	ldrb	r2, [r2, r3]
    5e96:	4691      	mov	r9, r2
    5e98:	4651      	mov	r1, sl
    5e9a:	3150      	adds	r1, #80	; 0x50
    5e9c:	4650      	mov	r0, sl
    5e9e:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
    5ea0:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    5ea2:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    5ea4:	2601      	movs	r6, #1
    5ea6:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    5ea8:	2602      	movs	r6, #2
    5eaa:	36ff      	adds	r6, #255	; 0xff
    5eac:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    5eae:	2680      	movs	r6, #128	; 0x80
    5eb0:	0276      	lsls	r6, r6, #9
    5eb2:	46b0      	mov	r8, r6
    5eb4:	46a4      	mov	ip, r4
    5eb6:	001c      	movs	r4, r3
    5eb8:	464b      	mov	r3, r9
    5eba:	e00f      	b.n	5edc <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
    5ebc:	7806      	ldrb	r6, [r0, #0]
    5ebe:	2e00      	cmp	r6, #0
    5ec0:	d007      	beq.n	5ed2 <tcc_init+0x22a>
			if (i >= ow_num) {
    5ec2:	4293      	cmp	r3, r2
    5ec4:	d800      	bhi.n	5ec8 <tcc_init+0x220>
    5ec6:	e0e7      	b.n	6098 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    5ec8:	2e02      	cmp	r6, #2
    5eca:	d014      	beq.n	5ef6 <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    5ecc:	4656      	mov	r6, sl
    5ece:	4096      	lsls	r6, r2
    5ed0:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    5ed2:	3201      	adds	r2, #1
    5ed4:	3101      	adds	r1, #1
    5ed6:	3002      	adds	r0, #2
    5ed8:	2a08      	cmp	r2, #8
    5eda:	d010      	beq.n	5efe <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
    5edc:	780e      	ldrb	r6, [r1, #0]
    5ede:	2e00      	cmp	r6, #0
    5ee0:	d0ec      	beq.n	5ebc <tcc_init+0x214>
			if (i >= ow_num) {
    5ee2:	4293      	cmp	r3, r2
    5ee4:	d800      	bhi.n	5ee8 <tcc_init+0x240>
    5ee6:	e0d5      	b.n	6094 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    5ee8:	4646      	mov	r6, r8
    5eea:	4096      	lsls	r6, r2
    5eec:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
    5eee:	7806      	ldrb	r6, [r0, #0]
    5ef0:	2e00      	cmp	r6, #0
    5ef2:	d1e9      	bne.n	5ec8 <tcc_init+0x220>
    5ef4:	e7ed      	b.n	5ed2 <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    5ef6:	465e      	mov	r6, fp
    5ef8:	4096      	lsls	r6, r2
    5efa:	4337      	orrs	r7, r6
    5efc:	e7e9      	b.n	5ed2 <tcc_init+0x22a>
    5efe:	4699      	mov	r9, r3
    5f00:	0023      	movs	r3, r4
    5f02:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    5f04:	7e6a      	ldrb	r2, [r5, #25]
    5f06:	0112      	lsls	r2, r2, #4
    5f08:	2130      	movs	r1, #48	; 0x30
    5f0a:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    5f0c:	7e28      	ldrb	r0, [r5, #24]
    5f0e:	2207      	movs	r2, #7
    5f10:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    5f12:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    5f14:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    5f16:	2080      	movs	r0, #128	; 0x80
    5f18:	0240      	lsls	r0, r0, #9
    5f1a:	000e      	movs	r6, r1
    5f1c:	e002      	b.n	5f24 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    5f1e:	3201      	adds	r2, #1
    5f20:	2a04      	cmp	r2, #4
    5f22:	d00b      	beq.n	5f3c <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
    5f24:	18a9      	adds	r1, r5, r2
    5f26:	7d09      	ldrb	r1, [r1, #20]
    5f28:	2900      	cmp	r1, #0
    5f2a:	d0f8      	beq.n	5f1e <tcc_init+0x276>
			if (n >= cc_num) {
    5f2c:	9905      	ldr	r1, [sp, #20]
    5f2e:	4291      	cmp	r1, r2
    5f30:	dc00      	bgt.n	5f34 <tcc_init+0x28c>
    5f32:	e0b3      	b.n	609c <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
    5f34:	0001      	movs	r1, r0
    5f36:	4091      	lsls	r1, r2
    5f38:	430e      	orrs	r6, r1
    5f3a:	e7f0      	b.n	5f1e <tcc_init+0x276>
    5f3c:	46b2      	mov	sl, r6
    5f3e:	9801      	ldr	r0, [sp, #4]
    5f40:	0002      	movs	r2, r0
    5f42:	3204      	adds	r2, #4
    5f44:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    5f46:	2100      	movs	r1, #0
    5f48:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    5f4a:	4282      	cmp	r2, r0
    5f4c:	d1fc      	bne.n	5f48 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
    5f4e:	2200      	movs	r2, #0
    5f50:	9801      	ldr	r0, [sp, #4]
    5f52:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    5f54:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    5f56:	0099      	lsls	r1, r3, #2
    5f58:	4a22      	ldr	r2, [pc, #136]	; (5fe4 <tcc_init+0x33c>)
    5f5a:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
    5f5c:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    5f5e:	22a0      	movs	r2, #160	; 0xa0
    5f60:	5ca9      	ldrb	r1, [r5, r2]
    5f62:	3a64      	subs	r2, #100	; 0x64
    5f64:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
    5f66:	a90d      	add	r1, sp, #52	; 0x34
    5f68:	7aaa      	ldrb	r2, [r5, #10]
    5f6a:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    5f6c:	4a1e      	ldr	r2, [pc, #120]	; (5fe8 <tcc_init+0x340>)
    5f6e:	5cd6      	ldrb	r6, [r2, r3]
    5f70:	0030      	movs	r0, r6
    5f72:	4b1e      	ldr	r3, [pc, #120]	; (5fec <tcc_init+0x344>)
    5f74:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    5f76:	0030      	movs	r0, r6
    5f78:	4b1d      	ldr	r3, [pc, #116]	; (5ff0 <tcc_init+0x348>)
    5f7a:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    5f7c:	464b      	mov	r3, r9
    5f7e:	2b00      	cmp	r3, #0
    5f80:	dd3c      	ble.n	5ffc <tcc_init+0x354>
    5f82:	002e      	movs	r6, r5
    5f84:	3658      	adds	r6, #88	; 0x58
    5f86:	3398      	adds	r3, #152	; 0x98
    5f88:	4698      	mov	r8, r3
    5f8a:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5f8c:	2301      	movs	r3, #1
    5f8e:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
    5f90:	46ab      	mov	fp, r5
    5f92:	4645      	mov	r5, r8
    5f94:	46a0      	mov	r8, r4
    5f96:	9c08      	ldr	r4, [sp, #32]
    5f98:	e003      	b.n	5fa2 <tcc_init+0x2fa>
    5f9a:	3401      	adds	r4, #1
    5f9c:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    5f9e:	42ac      	cmp	r4, r5
    5fa0:	d02a      	beq.n	5ff8 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
    5fa2:	7823      	ldrb	r3, [r4, #0]
    5fa4:	2b00      	cmp	r3, #0
    5fa6:	d0f8      	beq.n	5f9a <tcc_init+0x2f2>
    5fa8:	ab0c      	add	r3, sp, #48	; 0x30
    5faa:	464a      	mov	r2, r9
    5fac:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    5fae:	2300      	movs	r3, #0
    5fb0:	aa0c      	add	r2, sp, #48	; 0x30
    5fb2:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    5fb4:	0013      	movs	r3, r2
    5fb6:	2220      	movs	r2, #32
    5fb8:	18b2      	adds	r2, r6, r2
    5fba:	7812      	ldrb	r2, [r2, #0]
    5fbc:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    5fbe:	464a      	mov	r2, r9
    5fc0:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    5fc2:	7830      	ldrb	r0, [r6, #0]
    5fc4:	0019      	movs	r1, r3
    5fc6:	4b0b      	ldr	r3, [pc, #44]	; (5ff4 <tcc_init+0x34c>)
    5fc8:	4798      	blx	r3
    5fca:	e7e6      	b.n	5f9a <tcc_init+0x2f2>
    5fcc:	00005b29 	.word	0x00005b29
    5fd0:	40000400 	.word	0x40000400
    5fd4:	0000be5c 	.word	0x0000be5c
    5fd8:	0000be70 	.word	0x0000be70
    5fdc:	0000be7c 	.word	0x0000be7c
    5fe0:	0000be68 	.word	0x0000be68
    5fe4:	20000400 	.word	0x20000400
    5fe8:	0000be6c 	.word	0x0000be6c
    5fec:	000059d1 	.word	0x000059d1
    5ff0:	00005945 	.word	0x00005945
    5ff4:	00005ac9 	.word	0x00005ac9
    5ff8:	4644      	mov	r4, r8
    5ffa:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    5ffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5ffe:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    6000:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6002:	0212      	lsls	r2, r2, #8
    6004:	4313      	orrs	r3, r2
    6006:	9a02      	ldr	r2, [sp, #8]
    6008:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    600a:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    600c:	2204      	movs	r2, #4
    600e:	68a3      	ldr	r3, [r4, #8]
    6010:	421a      	tst	r2, r3
    6012:	d1fc      	bne.n	600e <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
    6014:	23ff      	movs	r3, #255	; 0xff
    6016:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    6018:	2204      	movs	r2, #4
    601a:	68a3      	ldr	r3, [r4, #8]
    601c:	421a      	tst	r2, r3
    601e:	d1fc      	bne.n	601a <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
    6020:	466b      	mov	r3, sp
    6022:	7e1b      	ldrb	r3, [r3, #24]
    6024:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    6026:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6028:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    602a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    602c:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    602e:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    6030:	4a1d      	ldr	r2, [pc, #116]	; (60a8 <tcc_init+0x400>)
    6032:	68a3      	ldr	r3, [r4, #8]
    6034:	4213      	tst	r3, r2
    6036:	d1fc      	bne.n	6032 <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
    6038:	4653      	mov	r3, sl
    603a:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    603c:	2210      	movs	r2, #16
    603e:	68a3      	ldr	r3, [r4, #8]
    6040:	421a      	tst	r2, r3
    6042:	d1fc      	bne.n	603e <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
    6044:	682b      	ldr	r3, [r5, #0]
    6046:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    6048:	4a18      	ldr	r2, [pc, #96]	; (60ac <tcc_init+0x404>)
    604a:	68a3      	ldr	r3, [r4, #8]
    604c:	4213      	tst	r3, r2
    604e:	d1fc      	bne.n	604a <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
    6050:	686b      	ldr	r3, [r5, #4]
    6052:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    6054:	9805      	ldr	r0, [sp, #20]
    6056:	2800      	cmp	r0, #0
    6058:	dd22      	ble.n	60a0 <tcc_init+0x3f8>
    605a:	351c      	adds	r5, #28
    605c:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    605e:	4e14      	ldr	r6, [pc, #80]	; (60b0 <tcc_init+0x408>)
    6060:	0032      	movs	r2, r6
    6062:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    6064:	68a3      	ldr	r3, [r4, #8]
    6066:	421a      	tst	r2, r3
    6068:	d1fc      	bne.n	6064 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
    606a:	cd04      	ldmia	r5!, {r2}
    606c:	000b      	movs	r3, r1
    606e:	3310      	adds	r3, #16
    6070:	009b      	lsls	r3, r3, #2
    6072:	18e3      	adds	r3, r4, r3
    6074:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    6076:	3101      	adds	r1, #1
    6078:	4288      	cmp	r0, r1
    607a:	dcf1      	bgt.n	6060 <tcc_init+0x3b8>
	return STATUS_OK;
    607c:	2000      	movs	r0, #0
    607e:	e62d      	b.n	5cdc <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
    6080:	2017      	movs	r0, #23
    6082:	e62b      	b.n	5cdc <tcc_init+0x34>
    6084:	2017      	movs	r0, #23
    6086:	e629      	b.n	5cdc <tcc_init+0x34>
    6088:	2017      	movs	r0, #23
    608a:	e627      	b.n	5cdc <tcc_init+0x34>
    608c:	2017      	movs	r0, #23
    608e:	e625      	b.n	5cdc <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    6090:	2017      	movs	r0, #23
    6092:	e623      	b.n	5cdc <tcc_init+0x34>
			if (i >= ow_num) {
    6094:	2017      	movs	r0, #23
    6096:	e621      	b.n	5cdc <tcc_init+0x34>
			if (i >= ow_num) {
    6098:	2017      	movs	r0, #23
    609a:	e61f      	b.n	5cdc <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    609c:	2017      	movs	r0, #23
    609e:	e61d      	b.n	5cdc <tcc_init+0x34>
	return STATUS_OK;
    60a0:	2000      	movs	r0, #0
    60a2:	e61b      	b.n	5cdc <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    60a4:	2017      	movs	r0, #23
    60a6:	e619      	b.n	5cdc <tcc_init+0x34>
    60a8:	00020040 	.word	0x00020040
    60ac:	00040080 	.word	0x00040080
    60b0:	00080100 	.word	0x00080100

000060b4 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    60b4:	0092      	lsls	r2, r2, #2
    60b6:	1883      	adds	r3, r0, r2
    60b8:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    60ba:	4b03      	ldr	r3, [pc, #12]	; (60c8 <tcc_register_callback+0x14>)
    60bc:	58d3      	ldr	r3, [r2, r3]
    60be:	6b42      	ldr	r2, [r0, #52]	; 0x34
    60c0:	4313      	orrs	r3, r2
    60c2:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
    60c4:	2000      	movs	r0, #0
    60c6:	4770      	bx	lr
    60c8:	0000be80 	.word	0x0000be80

000060cc <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    60cc:	b570      	push	{r4, r5, r6, lr}
    60ce:	0004      	movs	r4, r0
    60d0:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    60d2:	6800      	ldr	r0, [r0, #0]
    60d4:	4b09      	ldr	r3, [pc, #36]	; (60fc <tcc_enable_callback+0x30>)
    60d6:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    60d8:	4b09      	ldr	r3, [pc, #36]	; (6100 <tcc_enable_callback+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    60da:	5c1b      	ldrb	r3, [r3, r0]
    60dc:	221f      	movs	r2, #31
    60de:	401a      	ands	r2, r3
    60e0:	2301      	movs	r3, #1
    60e2:	4093      	lsls	r3, r2
    60e4:	4a07      	ldr	r2, [pc, #28]	; (6104 <tcc_enable_callback+0x38>)
    60e6:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    60e8:	00ad      	lsls	r5, r5, #2
    60ea:	4b07      	ldr	r3, [pc, #28]	; (6108 <tcc_enable_callback+0x3c>)
    60ec:	58ea      	ldr	r2, [r5, r3]
    60ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    60f0:	4313      	orrs	r3, r2
    60f2:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    60f4:	6823      	ldr	r3, [r4, #0]
    60f6:	629a      	str	r2, [r3, #40]	; 0x28
}
    60f8:	bd70      	pop	{r4, r5, r6, pc}
    60fa:	46c0      	nop			; (mov r8, r8)
    60fc:	00005b29 	.word	0x00005b29
    6100:	0000beb0 	.word	0x0000beb0
    6104:	e000e100 	.word	0xe000e100
    6108:	0000be80 	.word	0x0000be80

0000610c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    610c:	b5f0      	push	{r4, r5, r6, r7, lr}
    610e:	46c6      	mov	lr, r8
    6110:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    6112:	0080      	lsls	r0, r0, #2
    6114:	4b0e      	ldr	r3, [pc, #56]	; (6150 <_tcc_interrupt_handler+0x44>)
    6116:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    6118:	683b      	ldr	r3, [r7, #0]
    611a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    611c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    611e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    6120:	4013      	ands	r3, r2
    6122:	401e      	ands	r6, r3
    6124:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    6126:	4b0b      	ldr	r3, [pc, #44]	; (6154 <_tcc_interrupt_handler+0x48>)
    6128:	4698      	mov	r8, r3
    612a:	e002      	b.n	6132 <_tcc_interrupt_handler+0x26>
    612c:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    612e:	2c30      	cmp	r4, #48	; 0x30
    6130:	d00a      	beq.n	6148 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    6132:	4643      	mov	r3, r8
    6134:	58e5      	ldr	r5, [r4, r3]
    6136:	4235      	tst	r5, r6
    6138:	d0f8      	beq.n	612c <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    613a:	193b      	adds	r3, r7, r4
    613c:	685b      	ldr	r3, [r3, #4]
    613e:	0038      	movs	r0, r7
    6140:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    6142:	683b      	ldr	r3, [r7, #0]
    6144:	62dd      	str	r5, [r3, #44]	; 0x2c
    6146:	e7f1      	b.n	612c <_tcc_interrupt_handler+0x20>
		}
	}
}
    6148:	bc04      	pop	{r2}
    614a:	4690      	mov	r8, r2
    614c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    614e:	46c0      	nop			; (mov r8, r8)
    6150:	20000400 	.word	0x20000400
    6154:	0000be80 	.word	0x0000be80

00006158 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    6158:	b510      	push	{r4, lr}
    615a:	2000      	movs	r0, #0
    615c:	4b01      	ldr	r3, [pc, #4]	; (6164 <TCC0_Handler+0xc>)
    615e:	4798      	blx	r3
    6160:	bd10      	pop	{r4, pc}
    6162:	46c0      	nop			; (mov r8, r8)
    6164:	0000610d 	.word	0x0000610d

00006168 <TCC1_Handler>:
    6168:	b510      	push	{r4, lr}
    616a:	2001      	movs	r0, #1
    616c:	4b01      	ldr	r3, [pc, #4]	; (6174 <TCC1_Handler+0xc>)
    616e:	4798      	blx	r3
    6170:	bd10      	pop	{r4, pc}
    6172:	46c0      	nop			; (mov r8, r8)
    6174:	0000610d 	.word	0x0000610d

00006178 <TCC2_Handler>:
    6178:	b510      	push	{r4, lr}
    617a:	2002      	movs	r0, #2
    617c:	4b01      	ldr	r3, [pc, #4]	; (6184 <TCC2_Handler+0xc>)
    617e:	4798      	blx	r3
    6180:	bd10      	pop	{r4, pc}
    6182:	46c0      	nop			; (mov r8, r8)
    6184:	0000610d 	.word	0x0000610d

00006188 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    6188:	e7fe      	b.n	6188 <Dummy_Handler>
	...

0000618c <Reset_Handler>:
{
    618c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    618e:	4a2a      	ldr	r2, [pc, #168]	; (6238 <Reset_Handler+0xac>)
    6190:	4b2a      	ldr	r3, [pc, #168]	; (623c <Reset_Handler+0xb0>)
    6192:	429a      	cmp	r2, r3
    6194:	d011      	beq.n	61ba <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    6196:	001a      	movs	r2, r3
    6198:	4b29      	ldr	r3, [pc, #164]	; (6240 <Reset_Handler+0xb4>)
    619a:	429a      	cmp	r2, r3
    619c:	d20d      	bcs.n	61ba <Reset_Handler+0x2e>
    619e:	4a29      	ldr	r2, [pc, #164]	; (6244 <Reset_Handler+0xb8>)
    61a0:	3303      	adds	r3, #3
    61a2:	1a9b      	subs	r3, r3, r2
    61a4:	089b      	lsrs	r3, r3, #2
    61a6:	3301      	adds	r3, #1
    61a8:	009b      	lsls	r3, r3, #2
    61aa:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    61ac:	4823      	ldr	r0, [pc, #140]	; (623c <Reset_Handler+0xb0>)
    61ae:	4922      	ldr	r1, [pc, #136]	; (6238 <Reset_Handler+0xac>)
    61b0:	588c      	ldr	r4, [r1, r2]
    61b2:	5084      	str	r4, [r0, r2]
    61b4:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    61b6:	429a      	cmp	r2, r3
    61b8:	d1fa      	bne.n	61b0 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    61ba:	4a23      	ldr	r2, [pc, #140]	; (6248 <Reset_Handler+0xbc>)
    61bc:	4b23      	ldr	r3, [pc, #140]	; (624c <Reset_Handler+0xc0>)
    61be:	429a      	cmp	r2, r3
    61c0:	d20a      	bcs.n	61d8 <Reset_Handler+0x4c>
    61c2:	43d3      	mvns	r3, r2
    61c4:	4921      	ldr	r1, [pc, #132]	; (624c <Reset_Handler+0xc0>)
    61c6:	185b      	adds	r3, r3, r1
    61c8:	2103      	movs	r1, #3
    61ca:	438b      	bics	r3, r1
    61cc:	3304      	adds	r3, #4
    61ce:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    61d0:	2100      	movs	r1, #0
    61d2:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    61d4:	4293      	cmp	r3, r2
    61d6:	d1fc      	bne.n	61d2 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    61d8:	4a1d      	ldr	r2, [pc, #116]	; (6250 <Reset_Handler+0xc4>)
    61da:	21ff      	movs	r1, #255	; 0xff
    61dc:	4b1d      	ldr	r3, [pc, #116]	; (6254 <Reset_Handler+0xc8>)
    61de:	438b      	bics	r3, r1
    61e0:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    61e2:	39fd      	subs	r1, #253	; 0xfd
    61e4:	2390      	movs	r3, #144	; 0x90
    61e6:	005b      	lsls	r3, r3, #1
    61e8:	4a1b      	ldr	r2, [pc, #108]	; (6258 <Reset_Handler+0xcc>)
    61ea:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    61ec:	4a1b      	ldr	r2, [pc, #108]	; (625c <Reset_Handler+0xd0>)
    61ee:	78d3      	ldrb	r3, [r2, #3]
    61f0:	2503      	movs	r5, #3
    61f2:	43ab      	bics	r3, r5
    61f4:	2402      	movs	r4, #2
    61f6:	4323      	orrs	r3, r4
    61f8:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    61fa:	78d3      	ldrb	r3, [r2, #3]
    61fc:	270c      	movs	r7, #12
    61fe:	43bb      	bics	r3, r7
    6200:	2608      	movs	r6, #8
    6202:	4333      	orrs	r3, r6
    6204:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    6206:	4b16      	ldr	r3, [pc, #88]	; (6260 <Reset_Handler+0xd4>)
    6208:	7b98      	ldrb	r0, [r3, #14]
    620a:	2230      	movs	r2, #48	; 0x30
    620c:	4390      	bics	r0, r2
    620e:	2220      	movs	r2, #32
    6210:	4310      	orrs	r0, r2
    6212:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    6214:	7b99      	ldrb	r1, [r3, #14]
    6216:	43b9      	bics	r1, r7
    6218:	4331      	orrs	r1, r6
    621a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    621c:	7b9a      	ldrb	r2, [r3, #14]
    621e:	43aa      	bics	r2, r5
    6220:	4322      	orrs	r2, r4
    6222:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    6224:	4a0f      	ldr	r2, [pc, #60]	; (6264 <Reset_Handler+0xd8>)
    6226:	6853      	ldr	r3, [r2, #4]
    6228:	2180      	movs	r1, #128	; 0x80
    622a:	430b      	orrs	r3, r1
    622c:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    622e:	4b0e      	ldr	r3, [pc, #56]	; (6268 <Reset_Handler+0xdc>)
    6230:	4798      	blx	r3
        main();
    6232:	4b0e      	ldr	r3, [pc, #56]	; (626c <Reset_Handler+0xe0>)
    6234:	4798      	blx	r3
    6236:	e7fe      	b.n	6236 <Reset_Handler+0xaa>
    6238:	0000c448 	.word	0x0000c448
    623c:	20000000 	.word	0x20000000
    6240:	20000070 	.word	0x20000070
    6244:	20000004 	.word	0x20000004
    6248:	20000070 	.word	0x20000070
    624c:	200004d8 	.word	0x200004d8
    6250:	e000ed00 	.word	0xe000ed00
    6254:	00000000 	.word	0x00000000
    6258:	41007000 	.word	0x41007000
    625c:	41005000 	.word	0x41005000
    6260:	41004800 	.word	0x41004800
    6264:	41004000 	.word	0x41004000
    6268:	0000993d 	.word	0x0000993d
    626c:	000068d5 	.word	0x000068d5

00006270 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    6270:	b5f0      	push	{r4, r5, r6, r7, lr}
    6272:	46c6      	mov	lr, r8
    6274:	b500      	push	{lr}
    6276:	000c      	movs	r4, r1
    6278:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    627a:	2800      	cmp	r0, #0
    627c:	d10f      	bne.n	629e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    627e:	2a00      	cmp	r2, #0
    6280:	dd11      	ble.n	62a6 <_read+0x36>
    6282:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    6284:	4e09      	ldr	r6, [pc, #36]	; (62ac <_read+0x3c>)
    6286:	4d0a      	ldr	r5, [pc, #40]	; (62b0 <_read+0x40>)
    6288:	6830      	ldr	r0, [r6, #0]
    628a:	0021      	movs	r1, r4
    628c:	682b      	ldr	r3, [r5, #0]
    628e:	4798      	blx	r3
		ptr++;
    6290:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    6292:	42bc      	cmp	r4, r7
    6294:	d1f8      	bne.n	6288 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    6296:	4640      	mov	r0, r8
    6298:	bc04      	pop	{r2}
    629a:	4690      	mov	r8, r2
    629c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    629e:	2301      	movs	r3, #1
    62a0:	425b      	negs	r3, r3
    62a2:	4698      	mov	r8, r3
    62a4:	e7f7      	b.n	6296 <_read+0x26>
	for (; len > 0; --len) {
    62a6:	4680      	mov	r8, r0
    62a8:	e7f5      	b.n	6296 <_read+0x26>
    62aa:	46c0      	nop			; (mov r8, r8)
    62ac:	20000414 	.word	0x20000414
    62b0:	2000040c 	.word	0x2000040c

000062b4 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    62b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    62b6:	46c6      	mov	lr, r8
    62b8:	b500      	push	{lr}
    62ba:	000e      	movs	r6, r1
    62bc:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    62be:	3801      	subs	r0, #1
    62c0:	2802      	cmp	r0, #2
    62c2:	d810      	bhi.n	62e6 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    62c4:	2a00      	cmp	r2, #0
    62c6:	d011      	beq.n	62ec <_write+0x38>
    62c8:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    62ca:	4b0c      	ldr	r3, [pc, #48]	; (62fc <_write+0x48>)
    62cc:	4698      	mov	r8, r3
    62ce:	4f0c      	ldr	r7, [pc, #48]	; (6300 <_write+0x4c>)
    62d0:	4643      	mov	r3, r8
    62d2:	6818      	ldr	r0, [r3, #0]
    62d4:	5d31      	ldrb	r1, [r6, r4]
    62d6:	683b      	ldr	r3, [r7, #0]
    62d8:	4798      	blx	r3
    62da:	2800      	cmp	r0, #0
    62dc:	db08      	blt.n	62f0 <_write+0x3c>
			return -1;
		}
		++nChars;
    62de:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    62e0:	42a5      	cmp	r5, r4
    62e2:	d1f5      	bne.n	62d0 <_write+0x1c>
    62e4:	e006      	b.n	62f4 <_write+0x40>
		return -1;
    62e6:	2401      	movs	r4, #1
    62e8:	4264      	negs	r4, r4
    62ea:	e003      	b.n	62f4 <_write+0x40>
	for (; len != 0; --len) {
    62ec:	0014      	movs	r4, r2
    62ee:	e001      	b.n	62f4 <_write+0x40>
			return -1;
    62f0:	2401      	movs	r4, #1
    62f2:	4264      	negs	r4, r4
	}
	return nChars;
}
    62f4:	0020      	movs	r0, r4
    62f6:	bc04      	pop	{r2}
    62f8:	4690      	mov	r8, r2
    62fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    62fc:	20000414 	.word	0x20000414
    6300:	20000410 	.word	0x20000410

00006304 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    6304:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    6306:	4a06      	ldr	r2, [pc, #24]	; (6320 <_sbrk+0x1c>)
    6308:	6812      	ldr	r2, [r2, #0]
    630a:	2a00      	cmp	r2, #0
    630c:	d004      	beq.n	6318 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    630e:	4a04      	ldr	r2, [pc, #16]	; (6320 <_sbrk+0x1c>)
    6310:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    6312:	18c3      	adds	r3, r0, r3
    6314:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    6316:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    6318:	4902      	ldr	r1, [pc, #8]	; (6324 <_sbrk+0x20>)
    631a:	4a01      	ldr	r2, [pc, #4]	; (6320 <_sbrk+0x1c>)
    631c:	6011      	str	r1, [r2, #0]
    631e:	e7f6      	b.n	630e <_sbrk+0xa>
    6320:	200000e0 	.word	0x200000e0
    6324:	200024d8 	.word	0x200024d8

00006328 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    6328:	2001      	movs	r0, #1
    632a:	4240      	negs	r0, r0
    632c:	4770      	bx	lr

0000632e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    632e:	2380      	movs	r3, #128	; 0x80
    6330:	019b      	lsls	r3, r3, #6
    6332:	604b      	str	r3, [r1, #4]

	return 0;
}
    6334:	2000      	movs	r0, #0
    6336:	4770      	bx	lr

00006338 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    6338:	2001      	movs	r0, #1
    633a:	4770      	bx	lr

0000633c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    633c:	2000      	movs	r0, #0
    633e:	4770      	bx	lr

00006340 <configure_i2c_master>:

/* used to init I2C software module. */
struct i2c_master_module i2c_master_instance;

void configure_i2c_master(void)
{
    6340:	b530      	push	{r4, r5, lr}
    6342:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    6344:	aa01      	add	r2, sp, #4
    6346:	2364      	movs	r3, #100	; 0x64
    6348:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    634a:	4b20      	ldr	r3, [pc, #128]	; (63cc <configure_i2c_master+0x8c>)
    634c:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    634e:	2300      	movs	r3, #0
    6350:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    6352:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    6354:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    6356:	2180      	movs	r1, #128	; 0x80
    6358:	0389      	lsls	r1, r1, #14
    635a:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    635c:	2101      	movs	r1, #1
    635e:	4249      	negs	r1, r1
    6360:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    6362:	61d3      	str	r3, [r2, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    6364:	6213      	str	r3, [r2, #32]
	config->scl_low_timeout  = false;
    6366:	3125      	adds	r1, #37	; 0x25
    6368:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    636a:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    636c:	3108      	adds	r1, #8
    636e:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    6370:	3101      	adds	r1, #1
    6372:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    6374:	3101      	adds	r1, #1
    6376:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    6378:	33d7      	adds	r3, #215	; 0xd7
    637a:	8613      	strh	r3, [r2, #48]	; 0x30
    /* initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);

    /* change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 10000;
    637c:	4b14      	ldr	r3, [pc, #80]	; (63d0 <configure_i2c_master+0x90>)
    637e:	82d3      	strh	r3, [r2, #22]

    /* initialize and enable device with config. */
    i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master);
    6380:	4c14      	ldr	r4, [pc, #80]	; (63d4 <configure_i2c_master+0x94>)
    6382:	4915      	ldr	r1, [pc, #84]	; (63d8 <configure_i2c_master+0x98>)
    6384:	0020      	movs	r0, r4
    6386:	4b15      	ldr	r3, [pc, #84]	; (63dc <configure_i2c_master+0x9c>)
    6388:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    638a:	6824      	ldr	r4, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    638c:	2207      	movs	r2, #7
    638e:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    6390:	421a      	tst	r2, r3
    6392:	d1fc      	bne.n	638e <configure_i2c_master+0x4e>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    6394:	6823      	ldr	r3, [r4, #0]
    6396:	2202      	movs	r2, #2
    6398:	4313      	orrs	r3, r2
    639a:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    639c:	4d0d      	ldr	r5, [pc, #52]	; (63d4 <configure_i2c_master+0x94>)
    639e:	6828      	ldr	r0, [r5, #0]
    63a0:	4b0f      	ldr	r3, [pc, #60]	; (63e0 <configure_i2c_master+0xa0>)
    63a2:	4798      	blx	r3
    63a4:	231f      	movs	r3, #31
    63a6:	4018      	ands	r0, r3
    63a8:	3b1e      	subs	r3, #30
    63aa:	4083      	lsls	r3, r0
    63ac:	4a0d      	ldr	r2, [pc, #52]	; (63e4 <configure_i2c_master+0xa4>)
    63ae:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    63b0:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    63b2:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    63b4:	2110      	movs	r1, #16
    63b6:	8b62      	ldrh	r2, [r4, #26]
    63b8:	420a      	tst	r2, r1
    63ba:	d104      	bne.n	63c6 <configure_i2c_master+0x86>
		timeout_counter++;
    63bc:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    63be:	4283      	cmp	r3, r0
    63c0:	d3f9      	bcc.n	63b6 <configure_i2c_master+0x76>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    63c2:	2310      	movs	r3, #16
    63c4:	8363      	strh	r3, [r4, #26]
    i2c_master_enable(&i2c_master_instance);
}
    63c6:	b00f      	add	sp, #60	; 0x3c
    63c8:	bd30      	pop	{r4, r5, pc}
    63ca:	46c0      	nop			; (mov r8, r8)
    63cc:	00000d48 	.word	0x00000d48
    63d0:	00002710 	.word	0x00002710
    63d4:	2000044c 	.word	0x2000044c
    63d8:	42001000 	.word	0x42001000
    63dc:	000005c5 	.word	0x000005c5
    63e0:	000048d5 	.word	0x000048d5
    63e4:	e000e100 	.word	0xe000e100

000063e8 <shtc1_demo_init>:




void shtc1_demo_init()
{
    63e8:	b510      	push	{r4, lr}
    //delay_init();
    //configure_port_pins();
    //configure_usart();
    configure_i2c_master();
    63ea:	4b01      	ldr	r3, [pc, #4]	; (63f0 <shtc1_demo_init+0x8>)
    63ec:	4798      	blx	r3
}
    63ee:	bd10      	pop	{r4, pc}
    63f0:	00006341 	.word	0x00006341

000063f4 <stream_writer_init>:
#include <string.h>
#include <asf.h>

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
    63f4:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
    63f6:	6101      	str	r1, [r0, #16]
	writer->written = 0;
    63f8:	2200      	movs	r2, #0
    63fa:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
    63fc:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
    63fe:	9b00      	ldr	r3, [sp, #0]
    6400:	60c3      	str	r3, [r0, #12]
}
    6402:	4770      	bx	lr

00006404 <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
    6404:	b510      	push	{r4, lr}
    6406:	0004      	movs	r4, r0
	if(writer->written > 0) {
    6408:	6842      	ldr	r2, [r0, #4]
    640a:	2a00      	cmp	r2, #0
    640c:	d100      	bne.n	6410 <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
    640e:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    6410:	6901      	ldr	r1, [r0, #16]
    6412:	68c0      	ldr	r0, [r0, #12]
    6414:	68a3      	ldr	r3, [r4, #8]
    6416:	4798      	blx	r3
		writer->written = 0;
    6418:	2300      	movs	r3, #0
    641a:	6063      	str	r3, [r4, #4]
}
    641c:	e7f7      	b.n	640e <stream_writer_send_remain+0xa>
	...

00006420 <stream_writer_send_8>:
{
    6420:	b570      	push	{r4, r5, r6, lr}
    6422:	0004      	movs	r4, r0
    6424:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
    6426:	6803      	ldr	r3, [r0, #0]
    6428:	6842      	ldr	r2, [r0, #4]
    642a:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
    642c:	2b00      	cmp	r3, #0
    642e:	dd05      	ble.n	643c <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
    6430:	6922      	ldr	r2, [r4, #16]
    6432:	6863      	ldr	r3, [r4, #4]
    6434:	1c59      	adds	r1, r3, #1
    6436:	6061      	str	r1, [r4, #4]
    6438:	54d5      	strb	r5, [r2, r3]
}
    643a:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
    643c:	4b01      	ldr	r3, [pc, #4]	; (6444 <stream_writer_send_8+0x24>)
    643e:	4798      	blx	r3
    6440:	e7f6      	b.n	6430 <stream_writer_send_8+0x10>
    6442:	46c0      	nop			; (mov r8, r8)
    6444:	00006405 	.word	0x00006405

00006448 <stream_writer_send_16BE>:
{
    6448:	b570      	push	{r4, r5, r6, lr}
    644a:	0006      	movs	r6, r0
    644c:	000c      	movs	r4, r1
	stream_writer_send_8(writer, (value >> 8) & 0xFF);
    644e:	1209      	asrs	r1, r1, #8
    6450:	4d02      	ldr	r5, [pc, #8]	; (645c <stream_writer_send_16BE+0x14>)
    6452:	47a8      	blx	r5
	stream_writer_send_8(writer, value & 0xFF);
    6454:	b261      	sxtb	r1, r4
    6456:	0030      	movs	r0, r6
    6458:	47a8      	blx	r5
}
    645a:	bd70      	pop	{r4, r5, r6, pc}
    645c:	00006421 	.word	0x00006421

00006460 <stream_writer_send_buffer>:
{
    6460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6462:	0006      	movs	r6, r0
    6464:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
    6466:	2a00      	cmp	r2, #0
    6468:	d008      	beq.n	647c <stream_writer_send_buffer+0x1c>
    646a:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
    646c:	4f04      	ldr	r7, [pc, #16]	; (6480 <stream_writer_send_buffer+0x20>)
    646e:	2100      	movs	r1, #0
    6470:	5661      	ldrsb	r1, [r4, r1]
    6472:	0030      	movs	r0, r6
    6474:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
    6476:	3401      	adds	r4, #1
    6478:	42a5      	cmp	r5, r4
    647a:	d1f8      	bne.n	646e <stream_writer_send_buffer+0xe>
}
    647c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    647e:	46c0      	nop			; (mov r8, r8)
    6480:	00006421 	.word	0x00006421

00006484 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
    6484:	4a02      	ldr	r2, [pc, #8]	; (6490 <sw_timer_tcc_callback+0xc>)
    6486:	6813      	ldr	r3, [r2, #0]
    6488:	3301      	adds	r3, #1
    648a:	6013      	str	r3, [r2, #0]
}
    648c:	4770      	bx	lr
    648e:	46c0      	nop			; (mov r8, r8)
    6490:	200000e4 	.word	0x200000e4

00006494 <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
    6494:	2364      	movs	r3, #100	; 0x64
    6496:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
    6498:	2300      	movs	r3, #0
    649a:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
    649c:	7043      	strb	r3, [r0, #1]
}
    649e:	4770      	bx	lr

000064a0 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    64a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    64a2:	46c6      	mov	lr, r8
    64a4:	b500      	push	{lr}
    64a6:	b0ac      	sub	sp, #176	; 0xb0
    64a8:	000d      	movs	r5, r1
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    64aa:	466e      	mov	r6, sp
    64ac:	4b1d      	ldr	r3, [pc, #116]	; (6524 <sw_timer_init+0x84>)
    64ae:	466a      	mov	r2, sp
    64b0:	cb92      	ldmia	r3!, {r1, r4, r7}
    64b2:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    64b4:	886b      	ldrh	r3, [r5, #2]
    64b6:	6543      	str	r3, [r0, #84]	; 0x54

	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    64b8:	3014      	adds	r0, #20
    64ba:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    64bc:	782b      	ldrb	r3, [r5, #0]
    64be:	009b      	lsls	r3, r3, #2
    64c0:	5999      	ldr	r1, [r3, r6]
    64c2:	0017      	movs	r7, r2
    64c4:	0010      	movs	r0, r2
    64c6:	4b18      	ldr	r3, [pc, #96]	; (6528 <sw_timer_init+0x88>)
    64c8:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    64ca:	2000      	movs	r0, #0
    64cc:	4b17      	ldr	r3, [pc, #92]	; (652c <sw_timer_init+0x8c>)
    64ce:	4798      	blx	r3
    64d0:	4b17      	ldr	r3, [pc, #92]	; (6530 <sw_timer_init+0x90>)
    64d2:	7a1b      	ldrb	r3, [r3, #8]
    64d4:	b2db      	uxtb	r3, r3
    64d6:	40d8      	lsrs	r0, r3
    64d8:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    64da:	8869      	ldrh	r1, [r5, #2]
    64dc:	20fa      	movs	r0, #250	; 0xfa
    64de:	0200      	lsls	r0, r0, #8
    64e0:	4b14      	ldr	r3, [pc, #80]	; (6534 <sw_timer_init+0x94>)
    64e2:	4798      	blx	r3
    64e4:	0001      	movs	r1, r0
    64e6:	4640      	mov	r0, r8
    64e8:	4b13      	ldr	r3, [pc, #76]	; (6538 <sw_timer_init+0x98>)
    64ea:	4798      	blx	r3
    64ec:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    64ee:	2305      	movs	r3, #5
    64f0:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    64f2:	782b      	ldrb	r3, [r5, #0]
    64f4:	009b      	lsls	r3, r3, #2
    64f6:	5999      	ldr	r1, [r3, r6]
    64f8:	003a      	movs	r2, r7
    64fa:	0020      	movs	r0, r4
    64fc:	4b0f      	ldr	r3, [pc, #60]	; (653c <sw_timer_init+0x9c>)
    64fe:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    6500:	786a      	ldrb	r2, [r5, #1]
    6502:	3208      	adds	r2, #8
    6504:	b2d2      	uxtb	r2, r2
    6506:	490e      	ldr	r1, [pc, #56]	; (6540 <sw_timer_init+0xa0>)
    6508:	0020      	movs	r0, r4
    650a:	4b0e      	ldr	r3, [pc, #56]	; (6544 <sw_timer_init+0xa4>)
    650c:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    650e:	7869      	ldrb	r1, [r5, #1]
    6510:	3108      	adds	r1, #8
    6512:	b2c9      	uxtb	r1, r1
    6514:	0020      	movs	r0, r4
    6516:	4b0c      	ldr	r3, [pc, #48]	; (6548 <sw_timer_init+0xa8>)
    6518:	4798      	blx	r3
}
    651a:	b02c      	add	sp, #176	; 0xb0
    651c:	bc04      	pop	{r2}
    651e:	4690      	mov	r8, r2
    6520:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6522:	46c0      	nop			; (mov r8, r8)
    6524:	0000beb4 	.word	0x0000beb4
    6528:	00005b5d 	.word	0x00005b5d
    652c:	000058b9 	.word	0x000058b9
    6530:	40000400 	.word	0x40000400
    6534:	00007a75 	.word	0x00007a75
    6538:	00007961 	.word	0x00007961
    653c:	00005ca9 	.word	0x00005ca9
    6540:	00006485 	.word	0x00006485
    6544:	000060b5 	.word	0x000060b5
    6548:	000060cd 	.word	0x000060cd

0000654c <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    654c:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    654e:	2102      	movs	r1, #2
    6550:	6893      	ldr	r3, [r2, #8]
    6552:	4219      	tst	r1, r3
    6554:	d1fc      	bne.n	6550 <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    6556:	6813      	ldr	r3, [r2, #0]
    6558:	2102      	movs	r1, #2
    655a:	430b      	orrs	r3, r1
    655c:	6013      	str	r3, [r2, #0]
	Assert(module_inst);

	tcc_module = &module_inst->tcc_inst;

	tcc_enable(tcc_module);
}
    655e:	4770      	bx	lr

00006560 <sw_timer_register_callback>:
	tcc_disable(tcc_module);
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
	sw_timer_callback_t callback, void *context, uint32_t period)
{
    6560:	b570      	push	{r4, r5, r6, lr}
    6562:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
    6564:	7805      	ldrb	r5, [r0, #0]
    6566:	07e8      	lsls	r0, r5, #31
    6568:	d502      	bpl.n	6570 <sw_timer_register_callback+0x10>
			handler->used = 1;
			return index;
		}
	}

	return -1;
    656a:	2001      	movs	r0, #1
    656c:	4240      	negs	r0, r0
}
    656e:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
    6570:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
    6572:	0029      	movs	r1, r5
    6574:	2002      	movs	r0, #2
    6576:	4381      	bics	r1, r0
    6578:	7021      	strb	r1, [r4, #0]
			handler->context = context;
    657a:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
    657c:	6d61      	ldr	r1, [r4, #84]	; 0x54
    657e:	0018      	movs	r0, r3
    6580:	4b04      	ldr	r3, [pc, #16]	; (6594 <sw_timer_register_callback+0x34>)
    6582:	4798      	blx	r3
    6584:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
    6586:	7823      	ldrb	r3, [r4, #0]
    6588:	2201      	movs	r2, #1
    658a:	4313      	orrs	r3, r2
    658c:	7023      	strb	r3, [r4, #0]
			return index;
    658e:	2000      	movs	r0, #0
    6590:	e7ed      	b.n	656e <sw_timer_register_callback+0xe>
    6592:	46c0      	nop			; (mov r8, r8)
    6594:	00007961 	.word	0x00007961

00006598 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    6598:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
    659a:	008b      	lsls	r3, r1, #2
    659c:	185d      	adds	r5, r3, r1
    659e:	00ad      	lsls	r5, r5, #2
    65a0:	5c29      	ldrb	r1, [r5, r0]
    65a2:	2602      	movs	r6, #2
    65a4:	4331      	orrs	r1, r6
    65a6:	5429      	strb	r1, [r5, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    65a8:	1944      	adds	r4, r0, r5
    65aa:	6d41      	ldr	r1, [r0, #84]	; 0x54
    65ac:	0010      	movs	r0, r2
    65ae:	4b03      	ldr	r3, [pc, #12]	; (65bc <sw_timer_enable_callback+0x24>)
    65b0:	4798      	blx	r3
    65b2:	4b03      	ldr	r3, [pc, #12]	; (65c0 <sw_timer_enable_callback+0x28>)
    65b4:	681b      	ldr	r3, [r3, #0]
    65b6:	18c0      	adds	r0, r0, r3
    65b8:	6120      	str	r0, [r4, #16]
}
    65ba:	bd70      	pop	{r4, r5, r6, pc}
    65bc:	00007961 	.word	0x00007961
    65c0:	200000e4 	.word	0x200000e4

000065c4 <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
    65c4:	008b      	lsls	r3, r1, #2
    65c6:	1859      	adds	r1, r3, r1
    65c8:	0089      	lsls	r1, r1, #2
    65ca:	5c0b      	ldrb	r3, [r1, r0]
    65cc:	2202      	movs	r2, #2
    65ce:	4393      	bics	r3, r2
    65d0:	540b      	strb	r3, [r1, r0]
}
    65d2:	4770      	bx	lr

000065d4 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    65d4:	b570      	push	{r4, r5, r6, lr}
    65d6:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    65d8:	7803      	ldrb	r3, [r0, #0]
    65da:	07db      	lsls	r3, r3, #31
    65dc:	d507      	bpl.n	65ee <sw_timer_task+0x1a>
    65de:	7803      	ldrb	r3, [r0, #0]
    65e0:	079b      	lsls	r3, r3, #30
    65e2:	d504      	bpl.n	65ee <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    65e4:	4b11      	ldr	r3, [pc, #68]	; (662c <sw_timer_task+0x58>)
    65e6:	681b      	ldr	r3, [r3, #0]
    65e8:	6902      	ldr	r2, [r0, #16]
    65ea:	1ad3      	subs	r3, r2, r3
    65ec:	d400      	bmi.n	65f0 <sw_timer_task+0x1c>
				handler->busy = 0;
			}
		}
	}

}
    65ee:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    65f0:	7803      	ldrb	r3, [r0, #0]
    65f2:	075b      	lsls	r3, r3, #29
    65f4:	d4fb      	bmi.n	65ee <sw_timer_task+0x1a>
				handler->busy = 1;
    65f6:	7803      	ldrb	r3, [r0, #0]
    65f8:	2204      	movs	r2, #4
    65fa:	4313      	orrs	r3, r2
    65fc:	7003      	strb	r3, [r0, #0]
				handler->callback(module_inst, index, handler->context, handler->period);
    65fe:	68c3      	ldr	r3, [r0, #12]
    6600:	6882      	ldr	r2, [r0, #8]
    6602:	2100      	movs	r1, #0
    6604:	6845      	ldr	r5, [r0, #4]
    6606:	47a8      	blx	r5
				if (handler->period > 0) {
    6608:	68e3      	ldr	r3, [r4, #12]
    660a:	2b00      	cmp	r3, #0
    660c:	d008      	beq.n	6620 <sw_timer_task+0x4c>
					handler->expire_time = sw_timer_tick + handler->period;
    660e:	4a07      	ldr	r2, [pc, #28]	; (662c <sw_timer_task+0x58>)
    6610:	6812      	ldr	r2, [r2, #0]
    6612:	18d3      	adds	r3, r2, r3
    6614:	6123      	str	r3, [r4, #16]
				handler->busy = 0;
    6616:	7823      	ldrb	r3, [r4, #0]
    6618:	2204      	movs	r2, #4
    661a:	4393      	bics	r3, r2
    661c:	7023      	strb	r3, [r4, #0]
}
    661e:	e7e6      	b.n	65ee <sw_timer_task+0x1a>
					handler->callback_enable = 0;
    6620:	7823      	ldrb	r3, [r4, #0]
    6622:	2202      	movs	r2, #2
    6624:	4393      	bics	r3, r2
    6626:	7023      	strb	r3, [r4, #0]
    6628:	e7f5      	b.n	6616 <sw_timer_task+0x42>
    662a:	46c0      	nop			; (mov r8, r8)
    662c:	200000e4 	.word	0x200000e4

00006630 <uart_callback>:
 * \param[in] module USART module structure.
 */
static void uart_callback(const struct usart_module *const module)
{
	/* If input string is bigger than buffer size limit, ignore the excess part. */
	if (uart_buffer_written < MAIN_CHAT_BUFFER_SIZE) {
    6630:	4b03      	ldr	r3, [pc, #12]	; (6640 <uart_callback+0x10>)
    6632:	681b      	ldr	r3, [r3, #0]
    6634:	2b3f      	cmp	r3, #63	; 0x3f
    6636:	dc02      	bgt.n	663e <uart_callback+0xe>
		uart_buffer[uart_buffer_written++] = uart_ch_buffer & 0xFF;
    6638:	3301      	adds	r3, #1
    663a:	4a01      	ldr	r2, [pc, #4]	; (6640 <uart_callback+0x10>)
    663c:	6013      	str	r3, [r2, #0]
	}
}
    663e:	4770      	bx	lr
    6640:	20000250 	.word	0x20000250

00006644 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
    6644:	b510      	push	{r4, lr}
	mqtt_socket_resolve_handler(doamin_name, server_ip);
    6646:	4b01      	ldr	r3, [pc, #4]	; (664c <socket_resolve_handler+0x8>)
    6648:	4798      	blx	r3
}
    664a:	bd10      	pop	{r4, pc}
    664c:	00006e55 	.word	0x00006e55

00006650 <socket_event_handler>:
{
    6650:	b510      	push	{r4, lr}
	mqtt_socket_event_handler(sock, msg_type, msg_data);
    6652:	4b01      	ldr	r3, [pc, #4]	; (6658 <socket_event_handler+0x8>)
    6654:	4798      	blx	r3
}
    6656:	bd10      	pop	{r4, pc}
    6658:	0000784d 	.word	0x0000784d

0000665c <wifi_callback>:
{
    665c:	b510      	push	{r4, lr}
    665e:	b082      	sub	sp, #8
	switch (msg_type) {
    6660:	282c      	cmp	r0, #44	; 0x2c
    6662:	d003      	beq.n	666c <wifi_callback+0x10>
    6664:	2832      	cmp	r0, #50	; 0x32
    6666:	d01c      	beq.n	66a2 <wifi_callback+0x46>
}
    6668:	b002      	add	sp, #8
    666a:	bd10      	pop	{r4, pc}
		if (msg_wifi_state->u8CurrState == M2M_WIFI_CONNECTED) {
    666c:	780b      	ldrb	r3, [r1, #0]
    666e:	2b01      	cmp	r3, #1
    6670:	d011      	beq.n	6696 <wifi_callback+0x3a>
		} else if (msg_wifi_state->u8CurrState == M2M_WIFI_DISCONNECTED) {
    6672:	2b00      	cmp	r3, #0
    6674:	d1f8      	bne.n	6668 <wifi_callback+0xc>
			printf("Wi-Fi disconnected\r\n");
    6676:	4812      	ldr	r0, [pc, #72]	; (66c0 <wifi_callback+0x64>)
    6678:	4b12      	ldr	r3, [pc, #72]	; (66c4 <wifi_callback+0x68>)
    667a:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    667c:	23ff      	movs	r3, #255	; 0xff
    667e:	9300      	str	r3, [sp, #0]
    6680:	4b11      	ldr	r3, [pc, #68]	; (66c8 <wifi_callback+0x6c>)
    6682:	2202      	movs	r2, #2
    6684:	210e      	movs	r1, #14
    6686:	4811      	ldr	r0, [pc, #68]	; (66cc <wifi_callback+0x70>)
    6688:	4c11      	ldr	r4, [pc, #68]	; (66d0 <wifi_callback+0x74>)
    668a:	47a0      	blx	r4
			mqtt_disconnect(&mqtt_inst, 1);
    668c:	2101      	movs	r1, #1
    668e:	4811      	ldr	r0, [pc, #68]	; (66d4 <wifi_callback+0x78>)
    6690:	4b11      	ldr	r3, [pc, #68]	; (66d8 <wifi_callback+0x7c>)
    6692:	4798      	blx	r3
    6694:	e7e8      	b.n	6668 <wifi_callback+0xc>
			printf("Wi-Fi connected\r\n");
    6696:	4811      	ldr	r0, [pc, #68]	; (66dc <wifi_callback+0x80>)
    6698:	4b0a      	ldr	r3, [pc, #40]	; (66c4 <wifi_callback+0x68>)
    669a:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    669c:	4b10      	ldr	r3, [pc, #64]	; (66e0 <wifi_callback+0x84>)
    669e:	4798      	blx	r3
    66a0:	e7e2      	b.n	6668 <wifi_callback+0xc>
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    66a2:	788b      	ldrb	r3, [r1, #2]
    66a4:	784a      	ldrb	r2, [r1, #1]
    66a6:	7808      	ldrb	r0, [r1, #0]
    66a8:	78c9      	ldrb	r1, [r1, #3]
    66aa:	9100      	str	r1, [sp, #0]
    66ac:	0001      	movs	r1, r0
    66ae:	480d      	ldr	r0, [pc, #52]	; (66e4 <wifi_callback+0x88>)
    66b0:	4c0d      	ldr	r4, [pc, #52]	; (66e8 <wifi_callback+0x8c>)
    66b2:	47a0      	blx	r4
		mqtt_connect(&mqtt_inst, main_mqtt_broker);
    66b4:	490d      	ldr	r1, [pc, #52]	; (66ec <wifi_callback+0x90>)
    66b6:	4807      	ldr	r0, [pc, #28]	; (66d4 <wifi_callback+0x78>)
    66b8:	4b0d      	ldr	r3, [pc, #52]	; (66f0 <wifi_callback+0x94>)
    66ba:	4798      	blx	r3
}
    66bc:	e7d4      	b.n	6668 <wifi_callback+0xc>
    66be:	46c0      	nop			; (mov r8, r8)
    66c0:	0000c23c 	.word	0x0000c23c
    66c4:	00009c4d 	.word	0x00009c4d
    66c8:	0000c250 	.word	0x0000c250
    66cc:	0000c25c 	.word	0x0000c25c
    66d0:	00002465 	.word	0x00002465
    66d4:	2000019c 	.word	0x2000019c
    66d8:	0000750d 	.word	0x0000750d
    66dc:	0000c228 	.word	0x0000c228
    66e0:	00002481 	.word	0x00002481
    66e4:	0000c26c 	.word	0x0000c26c
    66e8:	00009b31 	.word	0x00009b31
    66ec:	0000c144 	.word	0x0000c144
    66f0:	00006ea9 	.word	0x00006ea9

000066f4 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    66f4:	b570      	push	{r4, r5, r6, lr}
    66f6:	b082      	sub	sp, #8
    66f8:	0005      	movs	r5, r0
    66fa:	000e      	movs	r6, r1
	uint16_t temp = 0;
    66fc:	2200      	movs	r2, #0
    66fe:	466b      	mov	r3, sp
    6700:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    6702:	4c06      	ldr	r4, [pc, #24]	; (671c <usart_serial_getchar+0x28>)
    6704:	466b      	mov	r3, sp
    6706:	1d99      	adds	r1, r3, #6
    6708:	0028      	movs	r0, r5
    670a:	47a0      	blx	r4
    670c:	2800      	cmp	r0, #0
    670e:	d1f9      	bne.n	6704 <usart_serial_getchar+0x10>

	*c = temp;
    6710:	466b      	mov	r3, sp
    6712:	3306      	adds	r3, #6
    6714:	881b      	ldrh	r3, [r3, #0]
    6716:	7033      	strb	r3, [r6, #0]
}
    6718:	b002      	add	sp, #8
    671a:	bd70      	pop	{r4, r5, r6, pc}
    671c:	00005171 	.word	0x00005171

00006720 <usart_serial_putchar>:
{
    6720:	b570      	push	{r4, r5, r6, lr}
    6722:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    6724:	b28c      	uxth	r4, r1
    6726:	4e03      	ldr	r6, [pc, #12]	; (6734 <usart_serial_putchar+0x14>)
    6728:	0021      	movs	r1, r4
    672a:	0028      	movs	r0, r5
    672c:	47b0      	blx	r6
    672e:	2800      	cmp	r0, #0
    6730:	d1fa      	bne.n	6728 <usart_serial_putchar+0x8>
}
    6732:	bd70      	pop	{r4, r5, r6, pc}
    6734:	00005145 	.word	0x00005145

00006738 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
    6738:	b5f0      	push	{r4, r5, r6, r7, lr}
    673a:	b087      	sub	sp, #28
    673c:	0005      	movs	r5, r0
    673e:	0014      	movs	r4, r2
	switch (type) {
    6740:	2901      	cmp	r1, #1
    6742:	d04b      	beq.n	67dc <mqtt_callback+0xa4>
    6744:	dd2d      	ble.n	67a2 <mqtt_callback+0x6a>
    6746:	2905      	cmp	r1, #5
    6748:	d05d      	beq.n	6806 <mqtt_callback+0xce>
    674a:	2906      	cmp	r1, #6
    674c:	d164      	bne.n	6818 <mqtt_callback+0xe0>

		break;

	case MQTT_CALLBACK_RECV_PUBLISH:
		/* You received publish message which you had subscribed. */
		if (data->recv_publish.topic != NULL && data->recv_publish.msg != NULL) {
    674e:	6810      	ldr	r0, [r2, #0]
    6750:	2800      	cmp	r0, #0
    6752:	d061      	beq.n	6818 <mqtt_callback+0xe0>
    6754:	6893      	ldr	r3, [r2, #8]
    6756:	2b00      	cmp	r3, #0
    6758:	d05e      	beq.n	6818 <mqtt_callback+0xe0>
			if (!strncmp(data->recv_publish.topic, MAIN_CHAT_TOPIC, strlen(MAIN_CHAT_TOPIC))) {
    675a:	220a      	movs	r2, #10
    675c:	492f      	ldr	r1, [pc, #188]	; (681c <mqtt_callback+0xe4>)
    675e:	4b30      	ldr	r3, [pc, #192]	; (6820 <mqtt_callback+0xe8>)
    6760:	4798      	blx	r3
    6762:	1e05      	subs	r5, r0, #0
    6764:	d158      	bne.n	6818 <mqtt_callback+0xe0>
				/* Print user name and message */
				for (int i = strlen(MAIN_CHAT_TOPIC); i < data->recv_publish.topic_size; i++) {
    6766:	6863      	ldr	r3, [r4, #4]
    6768:	2b0a      	cmp	r3, #10
    676a:	dd08      	ble.n	677e <mqtt_callback+0x46>
    676c:	260a      	movs	r6, #10
				//for (int i = 0; i < data->recv_publish.topic_size; i++) {
					printf("%c", data->recv_publish.topic[i]);
    676e:	4f2d      	ldr	r7, [pc, #180]	; (6824 <mqtt_callback+0xec>)
    6770:	6823      	ldr	r3, [r4, #0]
    6772:	5d98      	ldrb	r0, [r3, r6]
    6774:	47b8      	blx	r7
				for (int i = strlen(MAIN_CHAT_TOPIC); i < data->recv_publish.topic_size; i++) {
    6776:	3601      	adds	r6, #1
    6778:	6863      	ldr	r3, [r4, #4]
    677a:	42b3      	cmp	r3, r6
    677c:	dcf8      	bgt.n	6770 <mqtt_callback+0x38>
				}
				printf(" >> ");
    677e:	482a      	ldr	r0, [pc, #168]	; (6828 <mqtt_callback+0xf0>)
    6780:	4b2a      	ldr	r3, [pc, #168]	; (682c <mqtt_callback+0xf4>)
    6782:	4798      	blx	r3
				for (int i = 0; i < data->recv_publish.msg_size; i++) {
    6784:	68e3      	ldr	r3, [r4, #12]
    6786:	2b00      	cmp	r3, #0
    6788:	dd07      	ble.n	679a <mqtt_callback+0x62>
					printf("%c", data->recv_publish.msg[i]);
    678a:	4e26      	ldr	r6, [pc, #152]	; (6824 <mqtt_callback+0xec>)
    678c:	68a3      	ldr	r3, [r4, #8]
    678e:	5d58      	ldrb	r0, [r3, r5]
    6790:	47b0      	blx	r6
				for (int i = 0; i < data->recv_publish.msg_size; i++) {
    6792:	3501      	adds	r5, #1
    6794:	68e3      	ldr	r3, [r4, #12]
    6796:	42ab      	cmp	r3, r5
    6798:	dcf8      	bgt.n	678c <mqtt_callback+0x54>
				}
				printf("\r\n");
    679a:	4825      	ldr	r0, [pc, #148]	; (6830 <mqtt_callback+0xf8>)
    679c:	4b25      	ldr	r3, [pc, #148]	; (6834 <mqtt_callback+0xfc>)
    679e:	4798      	blx	r3
    67a0:	e03a      	b.n	6818 <mqtt_callback+0xe0>
	switch (type) {
    67a2:	2900      	cmp	r1, #0
    67a4:	d138      	bne.n	6818 <mqtt_callback+0xe0>
		if (data->sock_connected.result >= 0) {
    67a6:	6813      	ldr	r3, [r2, #0]
    67a8:	2b00      	cmp	r3, #0
    67aa:	db0d      	blt.n	67c8 <mqtt_callback+0x90>
			mqtt_connect_broker(module_inst, 1, NULL, NULL, mqtt_user, NULL, NULL, 0, 0, 0);
    67ac:	2300      	movs	r3, #0
    67ae:	9305      	str	r3, [sp, #20]
    67b0:	9304      	str	r3, [sp, #16]
    67b2:	9303      	str	r3, [sp, #12]
    67b4:	9302      	str	r3, [sp, #8]
    67b6:	9301      	str	r3, [sp, #4]
    67b8:	4b1f      	ldr	r3, [pc, #124]	; (6838 <mqtt_callback+0x100>)
    67ba:	9300      	str	r3, [sp, #0]
    67bc:	2300      	movs	r3, #0
    67be:	2200      	movs	r2, #0
    67c0:	2101      	movs	r1, #1
    67c2:	4c1e      	ldr	r4, [pc, #120]	; (683c <mqtt_callback+0x104>)
    67c4:	47a0      	blx	r4
    67c6:	e027      	b.n	6818 <mqtt_callback+0xe0>
			printf("Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
    67c8:	4c1d      	ldr	r4, [pc, #116]	; (6840 <mqtt_callback+0x108>)
    67ca:	0021      	movs	r1, r4
    67cc:	481d      	ldr	r0, [pc, #116]	; (6844 <mqtt_callback+0x10c>)
    67ce:	4b17      	ldr	r3, [pc, #92]	; (682c <mqtt_callback+0xf4>)
    67d0:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
    67d2:	0021      	movs	r1, r4
    67d4:	0028      	movs	r0, r5
    67d6:	4b1c      	ldr	r3, [pc, #112]	; (6848 <mqtt_callback+0x110>)
    67d8:	4798      	blx	r3
    67da:	e01d      	b.n	6818 <mqtt_callback+0xe0>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
    67dc:	7811      	ldrb	r1, [r2, #0]
    67de:	2900      	cmp	r1, #0
    67e0:	d10d      	bne.n	67fe <mqtt_callback+0xc6>
			mqtt_subscribe(module_inst, MAIN_CHAT_TOPIC "#", 0);
    67e2:	2200      	movs	r2, #0
    67e4:	4919      	ldr	r1, [pc, #100]	; (684c <mqtt_callback+0x114>)
    67e6:	4b1a      	ldr	r3, [pc, #104]	; (6850 <mqtt_callback+0x118>)
    67e8:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    67ea:	491a      	ldr	r1, [pc, #104]	; (6854 <mqtt_callback+0x11c>)
    67ec:	2231      	movs	r2, #49	; 0x31
    67ee:	5c8b      	ldrb	r3, [r1, r2]
    67f0:	2002      	movs	r0, #2
    67f2:	4303      	orrs	r3, r0
    67f4:	548b      	strb	r3, [r1, r2]
			printf("Preparation of the chat has been completed.\r\n");
    67f6:	4818      	ldr	r0, [pc, #96]	; (6858 <mqtt_callback+0x120>)
    67f8:	4b0e      	ldr	r3, [pc, #56]	; (6834 <mqtt_callback+0xfc>)
    67fa:	4798      	blx	r3
    67fc:	e00c      	b.n	6818 <mqtt_callback+0xe0>
			printf("MQTT broker decline your access! error code %d\r\n", data->connected.result);
    67fe:	4817      	ldr	r0, [pc, #92]	; (685c <mqtt_callback+0x124>)
    6800:	4b0a      	ldr	r3, [pc, #40]	; (682c <mqtt_callback+0xf4>)
    6802:	4798      	blx	r3
    6804:	e008      	b.n	6818 <mqtt_callback+0xe0>

		break;

	case MQTT_CALLBACK_DISCONNECTED:
		/* Stop timer and USART callback. */
		printf("MQTT disconnected\r\n");
    6806:	4816      	ldr	r0, [pc, #88]	; (6860 <mqtt_callback+0x128>)
    6808:	4b0a      	ldr	r3, [pc, #40]	; (6834 <mqtt_callback+0xfc>)
    680a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
    680c:	4911      	ldr	r1, [pc, #68]	; (6854 <mqtt_callback+0x11c>)
    680e:	2231      	movs	r2, #49	; 0x31
    6810:	5c8b      	ldrb	r3, [r1, r2]
    6812:	2002      	movs	r0, #2
    6814:	4383      	bics	r3, r0
    6816:	548b      	strb	r3, [r1, r2]
		usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
		break;
	}
}
    6818:	b007      	add	sp, #28
    681a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    681c:	0000c1fc 	.word	0x0000c1fc
    6820:	00009e67 	.word	0x00009e67
    6824:	00009b65 	.word	0x00009b65
    6828:	0000c208 	.word	0x0000c208
    682c:	00009b31 	.word	0x00009b31
    6830:	0000c210 	.word	0x0000c210
    6834:	00009c4d 	.word	0x00009c4d
    6838:	20000210 	.word	0x20000210
    683c:	00006fbd 	.word	0x00006fbd
    6840:	0000c144 	.word	0x0000c144
    6844:	0000c154 	.word	0x0000c154
    6848:	00006ea9 	.word	0x00006ea9
    684c:	0000c18c 	.word	0x0000c18c
    6850:	0000726d 	.word	0x0000726d
    6854:	200000e8 	.word	0x200000e8
    6858:	0000c198 	.word	0x0000c198
    685c:	0000c1c8 	.word	0x0000c1c8
    6860:	0000c214 	.word	0x0000c214

00006864 <configure_adc>:
{
    6864:	b510      	push	{r4, lr}
    6866:	b08c      	sub	sp, #48	; 0x30
	adc_get_config_defaults(&config_adc);
    6868:	4668      	mov	r0, sp
    686a:	4b16      	ldr	r3, [pc, #88]	; (68c4 <configure_adc+0x60>)
    686c:	4798      	blx	r3
	config_adc.gain_factor		= ADC_GAIN_FACTOR_DIV2;
    686e:	23f0      	movs	r3, #240	; 0xf0
    6870:	051b      	lsls	r3, r3, #20
    6872:	9302      	str	r3, [sp, #8]
	config_adc.clock_prescaler	= ADC_CLOCK_PRESCALER_DIV32;
    6874:	23c0      	movs	r3, #192	; 0xc0
    6876:	009b      	lsls	r3, r3, #2
    6878:	466a      	mov	r2, sp
    687a:	8053      	strh	r3, [r2, #2]
	config_adc.reference		= ADC_REFERENCE_INTVCC1;
    687c:	2302      	movs	r3, #2
    687e:	7053      	strb	r3, [r2, #1]
	config_adc.positive_input	= ADC_POSITIVE_INPUT_PIN0; //AIN0 which is PA02 in Xplained pro board
    6880:	2300      	movs	r3, #0
    6882:	7313      	strb	r3, [r2, #12]
	config_adc.resolution		= ADC_RESOLUTION_12BIT;
    6884:	7113      	strb	r3, [r2, #4]
	config_adc.freerunning		= true;
    6886:	2201      	movs	r2, #1
    6888:	4669      	mov	r1, sp
    688a:	750a      	strb	r2, [r1, #20]
	config_adc.left_adjust		= false;
    688c:	466a      	mov	r2, sp
    688e:	748b      	strb	r3, [r1, #18]
	adc_init(&adc_instance, ADC, &config_adc);
    6890:	4c0d      	ldr	r4, [pc, #52]	; (68c8 <configure_adc+0x64>)
    6892:	490e      	ldr	r1, [pc, #56]	; (68cc <configure_adc+0x68>)
    6894:	0020      	movs	r0, r4
    6896:	4b0e      	ldr	r3, [pc, #56]	; (68d0 <configure_adc+0x6c>)
    6898:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    689a:	6822      	ldr	r2, [r4, #0]
    689c:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    689e:	b25b      	sxtb	r3, r3
    68a0:	2b00      	cmp	r3, #0
    68a2:	dbfb      	blt.n	689c <configure_adc+0x38>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    68a4:	230f      	movs	r3, #15
    68a6:	7593      	strb	r3, [r2, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    68a8:	7613      	strb	r3, [r2, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    68aa:	7813      	ldrb	r3, [r2, #0]
    68ac:	2102      	movs	r1, #2
    68ae:	430b      	orrs	r3, r1
    68b0:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    68b2:	4b05      	ldr	r3, [pc, #20]	; (68c8 <configure_adc+0x64>)
    68b4:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    68b6:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    68b8:	b25b      	sxtb	r3, r3
    68ba:	2b00      	cmp	r3, #0
    68bc:	dbfb      	blt.n	68b6 <configure_adc+0x52>
}
    68be:	b00c      	add	sp, #48	; 0x30
    68c0:	bd10      	pop	{r4, pc}
    68c2:	46c0      	nop			; (mov r8, r8)
    68c4:	00000181 	.word	0x00000181
    68c8:	200004cc 	.word	0x200004cc
    68cc:	42004000 	.word	0x42004000
    68d0:	000001c9 	.word	0x000001c9

000068d4 <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
    68d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    68d6:	46c6      	mov	lr, r8
    68d8:	b500      	push	{lr}
    68da:	b0ba      	sub	sp, #232	; 0xe8
	int8_t ret;
	char topic[strlen(MAIN_CHAT_TOPIC) + MAIN_CHAT_USER_NAME_SIZE + 1];
	char topic2[64];
	char msgBuff[32];
	char dt[] = "FU";
	char mqtt_user[]="seyam";
    68dc:	4bb3      	ldr	r3, [pc, #716]	; (6bac <main+0x2d8>)
    68de:	681a      	ldr	r2, [r3, #0]
    68e0:	921a      	str	r2, [sp, #104]	; 0x68
    68e2:	889a      	ldrh	r2, [r3, #4]
    68e4:	ab1a      	add	r3, sp, #104	; 0x68
    68e6:	809a      	strh	r2, [r3, #4]
	

	/* Initialize the board. */
	system_init();
    68e8:	4bb1      	ldr	r3, [pc, #708]	; (6bb0 <main+0x2dc>)
    68ea:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    68ec:	aa03      	add	r2, sp, #12
    68ee:	2380      	movs	r3, #128	; 0x80
    68f0:	05db      	lsls	r3, r3, #23
    68f2:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    68f4:	2300      	movs	r3, #0
    68f6:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    68f8:	21ff      	movs	r1, #255	; 0xff
    68fa:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    68fc:	2100      	movs	r1, #0
    68fe:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    6900:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
    6902:	2096      	movs	r0, #150	; 0x96
    6904:	0180      	lsls	r0, r0, #6
    6906:	6210      	str	r0, [r2, #32]
	config->receiver_enable  = true;
    6908:	2501      	movs	r5, #1
    690a:	2024      	movs	r0, #36	; 0x24
    690c:	5415      	strb	r5, [r2, r0]
	config->transmitter_enable = true;
    690e:	3001      	adds	r0, #1
    6910:	5415      	strb	r5, [r2, r0]
	config->clock_polarity_inverted = false;
    6912:	3001      	adds	r0, #1
    6914:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
    6916:	3001      	adds	r0, #1
    6918:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
    691a:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    691c:	3005      	adds	r0, #5
    691e:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
    6920:	3001      	adds	r0, #1
    6922:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    6924:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    6926:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    6928:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    692a:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    692c:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    692e:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
    6930:	2313      	movs	r3, #19
    6932:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    6934:	7751      	strb	r1, [r2, #29]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    6936:	2380      	movs	r3, #128	; 0x80
    6938:	035b      	lsls	r3, r3, #13
    693a:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    693c:	4b9d      	ldr	r3, [pc, #628]	; (6bb4 <main+0x2e0>)
    693e:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    6940:	4b9d      	ldr	r3, [pc, #628]	; (6bb8 <main+0x2e4>)
    6942:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    6944:	2301      	movs	r3, #1
    6946:	425b      	negs	r3, r3
    6948:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    694a:	63d3      	str	r3, [r2, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    694c:	4c9b      	ldr	r4, [pc, #620]	; (6bbc <main+0x2e8>)
    694e:	4b9c      	ldr	r3, [pc, #624]	; (6bc0 <main+0x2ec>)
    6950:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    6952:	499c      	ldr	r1, [pc, #624]	; (6bc4 <main+0x2f0>)
    6954:	4b9c      	ldr	r3, [pc, #624]	; (6bc8 <main+0x2f4>)
    6956:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    6958:	499c      	ldr	r1, [pc, #624]	; (6bcc <main+0x2f8>)
    695a:	4b9d      	ldr	r3, [pc, #628]	; (6bd0 <main+0x2fc>)
    695c:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    695e:	499d      	ldr	r1, [pc, #628]	; (6bd4 <main+0x300>)
    6960:	0020      	movs	r0, r4
    6962:	4b9d      	ldr	r3, [pc, #628]	; (6bd8 <main+0x304>)
    6964:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    6966:	4f9d      	ldr	r7, [pc, #628]	; (6bdc <main+0x308>)
    6968:	683b      	ldr	r3, [r7, #0]
    696a:	6898      	ldr	r0, [r3, #8]
    696c:	2100      	movs	r1, #0
    696e:	4e9c      	ldr	r6, [pc, #624]	; (6be0 <main+0x30c>)
    6970:	47b0      	blx	r6
	setbuf(stdin, NULL);
    6972:	683b      	ldr	r3, [r7, #0]
    6974:	6858      	ldr	r0, [r3, #4]
    6976:	2100      	movs	r1, #0
    6978:	47b0      	blx	r6
	usart_register_callback(&cdc_uart_module, (usart_callback_t)uart_callback, USART_CALLBACK_BUFFER_RECEIVED);
    697a:	2201      	movs	r2, #1
    697c:	4999      	ldr	r1, [pc, #612]	; (6be4 <main+0x310>)
    697e:	0020      	movs	r0, r4
    6980:	4b99      	ldr	r3, [pc, #612]	; (6be8 <main+0x314>)
    6982:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    6984:	6826      	ldr	r6, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    6986:	0030      	movs	r0, r6
    6988:	4b98      	ldr	r3, [pc, #608]	; (6bec <main+0x318>)
    698a:	4798      	blx	r3
    698c:	231f      	movs	r3, #31
    698e:	4018      	ands	r0, r3
    6990:	4085      	lsls	r5, r0
    6992:	4b97      	ldr	r3, [pc, #604]	; (6bf0 <main+0x31c>)
    6994:	601d      	str	r5, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    6996:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    6998:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    699a:	2a00      	cmp	r2, #0
    699c:	d1fc      	bne.n	6998 <main+0xc4>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    699e:	6833      	ldr	r3, [r6, #0]
    69a0:	3202      	adds	r2, #2
    69a2:	4313      	orrs	r3, r2
    69a4:	6033      	str	r3, [r6, #0]

	/* Initialize the UART console. */
	configure_console();
	
	/* Initialize the ADC on a specific channel */
	configure_adc();
    69a6:	4b93      	ldr	r3, [pc, #588]	; (6bf4 <main+0x320>)
    69a8:	4798      	blx	r3
	
	

	/* Output example information */
	printf(STRING_HEADER);
    69aa:	4893      	ldr	r0, [pc, #588]	; (6bf8 <main+0x324>)
    69ac:	4b93      	ldr	r3, [pc, #588]	; (6bfc <main+0x328>)
    69ae:	4798      	blx	r3
	sw_timer_get_config_defaults(&swt_conf);
    69b0:	a803      	add	r0, sp, #12
    69b2:	4b93      	ldr	r3, [pc, #588]	; (6c00 <main+0x32c>)
    69b4:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
    69b6:	4c93      	ldr	r4, [pc, #588]	; (6c04 <main+0x330>)
    69b8:	a903      	add	r1, sp, #12
    69ba:	0020      	movs	r0, r4
    69bc:	4b92      	ldr	r3, [pc, #584]	; (6c08 <main+0x334>)
    69be:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    69c0:	0020      	movs	r0, r4
    69c2:	4b92      	ldr	r3, [pc, #584]	; (6c0c <main+0x338>)
    69c4:	4798      	blx	r3
	mqtt_get_config_defaults(&mqtt_conf);
    69c6:	a803      	add	r0, sp, #12
    69c8:	4b91      	ldr	r3, [pc, #580]	; (6c10 <main+0x33c>)
    69ca:	4798      	blx	r3
	mqtt_conf.timer_inst = &swt_module_inst;
    69cc:	9404      	str	r4, [sp, #16]
	mqtt_conf.recv_buffer = mqtt_buffer;
    69ce:	4b91      	ldr	r3, [pc, #580]	; (6c14 <main+0x340>)
    69d0:	9306      	str	r3, [sp, #24]
	mqtt_conf.recv_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    69d2:	2380      	movs	r3, #128	; 0x80
    69d4:	9307      	str	r3, [sp, #28]
	result = mqtt_init(&mqtt_inst, &mqtt_conf);
    69d6:	a903      	add	r1, sp, #12
    69d8:	488f      	ldr	r0, [pc, #572]	; (6c18 <main+0x344>)
    69da:	4b90      	ldr	r3, [pc, #576]	; (6c1c <main+0x348>)
    69dc:	4798      	blx	r3
    69de:	1e01      	subs	r1, r0, #0
	if (result < 0) {
    69e0:	da03      	bge.n	69ea <main+0x116>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
    69e2:	488f      	ldr	r0, [pc, #572]	; (6c20 <main+0x34c>)
    69e4:	4b8f      	ldr	r3, [pc, #572]	; (6c24 <main+0x350>)
    69e6:	4798      	blx	r3
    69e8:	e7fe      	b.n	69e8 <main+0x114>
	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
    69ea:	498f      	ldr	r1, [pc, #572]	; (6c28 <main+0x354>)
    69ec:	488a      	ldr	r0, [pc, #552]	; (6c18 <main+0x344>)
    69ee:	4b8f      	ldr	r3, [pc, #572]	; (6c2c <main+0x358>)
    69f0:	4798      	blx	r3
    69f2:	1e01      	subs	r1, r0, #0
	if (result < 0) {
    69f4:	da03      	bge.n	69fe <main+0x12a>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
    69f6:	488e      	ldr	r0, [pc, #568]	; (6c30 <main+0x35c>)
    69f8:	4b8a      	ldr	r3, [pc, #552]	; (6c24 <main+0x350>)
    69fa:	4798      	blx	r3
    69fc:	e7fe      	b.n	69fc <main+0x128>

	/* Initialize the MQTT service. */
	configure_mqtt();

	/* Initialize the BSP. */
	nm_bsp_init();
    69fe:	4b8d      	ldr	r3, [pc, #564]	; (6c34 <main+0x360>)
    6a00:	4798      	blx	r3
	
	
		/* Setup user name first */
	printf("Enter the user name (Max %d characters)\r\n", MAIN_CHAT_USER_NAME_SIZE);
    6a02:	2140      	movs	r1, #64	; 0x40
    6a04:	488c      	ldr	r0, [pc, #560]	; (6c38 <main+0x364>)
    6a06:	4c87      	ldr	r4, [pc, #540]	; (6c24 <main+0x350>)
    6a08:	47a0      	blx	r4
	//scanf("%64s", mqtt_user);
	printf("User : %s\r\n", mqtt_user); // Add new line after printing mqtt_user
    6a0a:	a91a      	add	r1, sp, #104	; 0x68
    6a0c:	488b      	ldr	r0, [pc, #556]	; (6c3c <main+0x368>)
    6a0e:	47a0      	blx	r4
	sprintf(topic, "%s%s", MAIN_CHAT_TOPIC, mqtt_user); //save 'MAIN_CHAT_TOPIC' data to the 'topic' char array
    6a10:	4d8b      	ldr	r5, [pc, #556]	; (6c40 <main+0x36c>)
    6a12:	ab1a      	add	r3, sp, #104	; 0x68
    6a14:	4a8b      	ldr	r2, [pc, #556]	; (6c44 <main+0x370>)
    6a16:	0029      	movs	r1, r5
    6a18:	a803      	add	r0, sp, #12
    6a1a:	4c8b      	ldr	r4, [pc, #556]	; (6c48 <main+0x374>)
    6a1c:	47a0      	blx	r4
	sprintf(topic2, "%s%s", DATA_TOPIC, mqtt_user); //save 'MAIN_CHAT_TOPIC' data to the 'topic' char array  
    6a1e:	ab1a      	add	r3, sp, #104	; 0x68
    6a20:	4a8a      	ldr	r2, [pc, #552]	; (6c4c <main+0x378>)
    6a22:	0029      	movs	r1, r5
    6a24:	a824      	add	r0, sp, #144	; 0x90
    6a26:	47a0      	blx	r4

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    6a28:	2218      	movs	r2, #24
    6a2a:	2100      	movs	r1, #0
    6a2c:	a834      	add	r0, sp, #208	; 0xd0
    6a2e:	4b88      	ldr	r3, [pc, #544]	; (6c50 <main+0x37c>)
    6a30:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_callback; /* Set Wi-Fi event callback. */
    6a32:	4b88      	ldr	r3, [pc, #544]	; (6c54 <main+0x380>)
    6a34:	9334      	str	r3, [sp, #208]	; 0xd0
	ret = m2m_wifi_init(&param);
    6a36:	a834      	add	r0, sp, #208	; 0xd0
    6a38:	4b87      	ldr	r3, [pc, #540]	; (6c58 <main+0x384>)
    6a3a:	4798      	blx	r3
    6a3c:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) {
    6a3e:	d003      	beq.n	6a48 <main+0x174>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
    6a40:	4886      	ldr	r0, [pc, #536]	; (6c5c <main+0x388>)
    6a42:	4b78      	ldr	r3, [pc, #480]	; (6c24 <main+0x350>)
    6a44:	4798      	blx	r3
    6a46:	e7fe      	b.n	6a46 <main+0x172>
		while (1) { /* Loop forever. */
		}
	}

	/* Initialize socket interface. */
	socketInit();
    6a48:	4b85      	ldr	r3, [pc, #532]	; (6c60 <main+0x38c>)
    6a4a:	4798      	blx	r3
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
    6a4c:	4985      	ldr	r1, [pc, #532]	; (6c64 <main+0x390>)
    6a4e:	4886      	ldr	r0, [pc, #536]	; (6c68 <main+0x394>)
    6a50:	4b86      	ldr	r3, [pc, #536]	; (6c6c <main+0x398>)
    6a52:	4798      	blx	r3

	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    6a54:	23ff      	movs	r3, #255	; 0xff
    6a56:	9300      	str	r3, [sp, #0]
    6a58:	4b85      	ldr	r3, [pc, #532]	; (6c70 <main+0x39c>)
    6a5a:	2202      	movs	r2, #2
    6a5c:	210e      	movs	r1, #14
    6a5e:	4885      	ldr	r0, [pc, #532]	; (6c74 <main+0x3a0>)
    6a60:	4c85      	ldr	r4, [pc, #532]	; (6c78 <main+0x3a4>)
    6a62:	47a0      	blx	r4
    enum status_code shtc1_connected;
    enum status_code shtc1_read_status;
	enum status_code ams_read_status;
	
	/* Initialize the I2C console. */
	shtc1_demo_init();
    6a64:	4b85      	ldr	r3, [pc, #532]	; (6c7c <main+0x3a8>)
    6a66:	4798      	blx	r3

    delay_s(1);
    6a68:	20fa      	movs	r0, #250	; 0xfa
    6a6a:	0080      	lsls	r0, r0, #2
    6a6c:	4b84      	ldr	r3, [pc, #528]	; (6c80 <main+0x3ac>)
    6a6e:	4798      	blx	r3

    printf("\r\nstarting...\r\n");
    6a70:	4884      	ldr	r0, [pc, #528]	; (6c84 <main+0x3b0>)
    6a72:	4b62      	ldr	r3, [pc, #392]	; (6bfc <main+0x328>)
    6a74:	4798      	blx	r3

    /* test if sensor is connected */
    shtc1_connected = shtc1_probe(&i2c_master_instance);
    6a76:	4884      	ldr	r0, [pc, #528]	; (6c88 <main+0x3b4>)
    6a78:	4b84      	ldr	r3, [pc, #528]	; (6c8c <main+0x3b8>)
    6a7a:	4798      	blx	r3
    printf("sensor is %s\r\n",
    6a7c:	2800      	cmp	r0, #0
    6a7e:	d108      	bne.n	6a92 <main+0x1be>
    6a80:	4983      	ldr	r1, [pc, #524]	; (6c90 <main+0x3bc>)
    6a82:	4884      	ldr	r0, [pc, #528]	; (6c94 <main+0x3c0>)
    6a84:	4b67      	ldr	r3, [pc, #412]	; (6c24 <main+0x350>)
    6a86:	4798      	blx	r3



	while (1) {
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
    6a88:	4b83      	ldr	r3, [pc, #524]	; (6c98 <main+0x3c4>)
    6a8a:	4698      	mov	r8, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    6a8c:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    6a8e:	2602      	movs	r6, #2
    6a90:	e032      	b.n	6af8 <main+0x224>
    printf("sensor is %s\r\n",
    6a92:	4982      	ldr	r1, [pc, #520]	; (6c9c <main+0x3c8>)
    6a94:	e7f5      	b.n	6a82 <main+0x1ae>
            else
                port_pin_set_output_level(LED_0_PIN, true);*/
        }
        else
        {
            printf("Bro I can't measure the Temp & Humidity. Are you sure you plugged the sensor in?\n");
    6a96:	4882      	ldr	r0, [pc, #520]	; (6ca0 <main+0x3cc>)
    6a98:	4b58      	ldr	r3, [pc, #352]	; (6bfc <main+0x328>)
    6a9a:	4798      	blx	r3
    6a9c:	e05d      	b.n	6b5a <main+0x286>
					printf("CO2 = (%d) ppm\r\n",co2);
					
				}
				else
				{
					printf("Bro I can't measure the VOC & CO2. Are you sure you plugged the iAQ-Core in?\n");
    6a9e:	4881      	ldr	r0, [pc, #516]	; (6ca4 <main+0x3d0>)
    6aa0:	4b56      	ldr	r3, [pc, #344]	; (6bfc <main+0x328>)
    6aa2:	4798      	blx	r3
    6aa4:	e06e      	b.n	6b84 <main+0x2b0>
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    6aa6:	4211      	tst	r1, r2
    6aa8:	d10a      	bne.n	6ac0 <main+0x1ec>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    6aaa:	7e03      	ldrb	r3, [r0, #24]
    6aac:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    6aae:	000a      	movs	r2, r1
    6ab0:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    6ab2:	421d      	tst	r5, r3
    6ab4:	d000      	beq.n	6ab8 <main+0x1e4>
		status_flags |= ADC_STATUS_WINDOW;
    6ab6:	4332      	orrs	r2, r6
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    6ab8:	421e      	tst	r6, r3
    6aba:	d0f4      	beq.n	6aa6 <main+0x1d2>
		status_flags |= ADC_STATUS_OVERRUN;
    6abc:	432a      	orrs	r2, r5
    6abe:	e7f2      	b.n	6aa6 <main+0x1d2>
    6ac0:	7e43      	ldrb	r3, [r0, #25]
	}

	Adc *const adc_module = module_inst->hw;

#if (SAMD) || (SAMHA1) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    6ac2:	b25b      	sxtb	r3, r3
    6ac4:	2b00      	cmp	r3, #0
    6ac6:	dbfb      	blt.n	6ac0 <main+0x1ec>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    6ac8:	8b41      	ldrh	r1, [r0, #26]
    6aca:	b289      	uxth	r1, r1
	adc_module->INTFLAG.reg = int_flags;
    6acc:	2301      	movs	r3, #1
    6ace:	7603      	strb	r3, [r0, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    6ad0:	7e02      	ldrb	r2, [r0, #24]
    6ad2:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    6ad4:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    6ad6:	4215      	tst	r5, r2
    6ad8:	d000      	beq.n	6adc <main+0x208>
		status_flags |= ADC_STATUS_WINDOW;
    6ada:	4333      	orrs	r3, r6
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    6adc:	4216      	tst	r6, r2
    6ade:	d000      	beq.n	6ae2 <main+0x20e>
		status_flags |= ADC_STATUS_OVERRUN;
    6ae0:	432b      	orrs	r3, r5

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    6ae2:	421d      	tst	r5, r3
    6ae4:	d000      	beq.n	6ae8 <main+0x214>
	adc_module->INTFLAG.reg = int_flags;
    6ae6:	7606      	strb	r6, [r0, #24]
					
				}
				
		delay_ms(500);
		val = getADC_Value();		
		printf("ADC = (%d)\r\n",val);
    6ae8:	b209      	sxth	r1, r1
    6aea:	486f      	ldr	r0, [pc, #444]	; (6ca8 <main+0x3d4>)
    6aec:	4b4d      	ldr	r3, [pc, #308]	; (6c24 <main+0x350>)
    6aee:	4798      	blx	r3
		


        /* delay until the next iteration */
        delay_ms(MEASUREMENT_INTERVAL_MS);
    6af0:	20fa      	movs	r0, #250	; 0xfa
    6af2:	00c0      	lsls	r0, r0, #3
    6af4:	4b62      	ldr	r3, [pc, #392]	; (6c80 <main+0x3ac>)
    6af6:	4798      	blx	r3
		m2m_wifi_handle_events(NULL);
    6af8:	2000      	movs	r0, #0
    6afa:	47c0      	blx	r8
		sw_timer_task(&swt_module_inst);
    6afc:	4841      	ldr	r0, [pc, #260]	; (6c04 <main+0x330>)
    6afe:	4b6b      	ldr	r3, [pc, #428]	; (6cac <main+0x3d8>)
    6b00:	4798      	blx	r3
		delay_s(1);
    6b02:	20fa      	movs	r0, #250	; 0xfa
    6b04:	0080      	lsls	r0, r0, #2
    6b06:	4f5e      	ldr	r7, [pc, #376]	; (6c80 <main+0x3ac>)
    6b08:	47b8      	blx	r7
        shtc1_read_status = shtc1_read_lpm_sync(&i2c_master_instance, &temp, &rh); //read into the temp and rh variables
    6b0a:	aa18      	add	r2, sp, #96	; 0x60
    6b0c:	a919      	add	r1, sp, #100	; 0x64
    6b0e:	485e      	ldr	r0, [pc, #376]	; (6c88 <main+0x3b4>)
    6b10:	4b67      	ldr	r3, [pc, #412]	; (6cb0 <main+0x3dc>)
    6b12:	4798      	blx	r3
    6b14:	0004      	movs	r4, r0
		delay_ms(100);
    6b16:	2064      	movs	r0, #100	; 0x64
    6b18:	47b8      	blx	r7
        if (shtc1_read_status == STATUS_OK)
    6b1a:	2c00      	cmp	r4, #0
    6b1c:	d1bb      	bne.n	6a96 <main+0x1c2>
			printf("Temp: (%d'C)\r\n",temp/1000);
    6b1e:	4f65      	ldr	r7, [pc, #404]	; (6cb4 <main+0x3e0>)
    6b20:	21fa      	movs	r1, #250	; 0xfa
    6b22:	0089      	lsls	r1, r1, #2
    6b24:	9819      	ldr	r0, [sp, #100]	; 0x64
    6b26:	47b8      	blx	r7
    6b28:	0001      	movs	r1, r0
    6b2a:	4863      	ldr	r0, [pc, #396]	; (6cb8 <main+0x3e4>)
    6b2c:	4c3d      	ldr	r4, [pc, #244]	; (6c24 <main+0x350>)
    6b2e:	47a0      	blx	r4
			printf("Humidity: (%d%%)\r\n",rh/1000);
    6b30:	21fa      	movs	r1, #250	; 0xfa
    6b32:	0089      	lsls	r1, r1, #2
    6b34:	9818      	ldr	r0, [sp, #96]	; 0x60
    6b36:	47b8      	blx	r7
    6b38:	0001      	movs	r1, r0
    6b3a:	4860      	ldr	r0, [pc, #384]	; (6cbc <main+0x3e8>)
    6b3c:	47a0      	blx	r4
            temp_f = (float)temp / 1000;
    6b3e:	9819      	ldr	r0, [sp, #100]	; 0x64
    6b40:	4b5f      	ldr	r3, [pc, #380]	; (6cc0 <main+0x3ec>)
    6b42:	4798      	blx	r3
    6b44:	495f      	ldr	r1, [pc, #380]	; (6cc4 <main+0x3f0>)
    6b46:	4b60      	ldr	r3, [pc, #384]	; (6cc8 <main+0x3f4>)
    6b48:	4798      	blx	r3
			sprintf(msgBuff,"%.2f",temp_f); //converts and stores float to char array
    6b4a:	4b60      	ldr	r3, [pc, #384]	; (6ccc <main+0x3f8>)
    6b4c:	4798      	blx	r3
    6b4e:	0002      	movs	r2, r0
    6b50:	000b      	movs	r3, r1
    6b52:	495f      	ldr	r1, [pc, #380]	; (6cd0 <main+0x3fc>)
    6b54:	a81c      	add	r0, sp, #112	; 0x70
    6b56:	4c3c      	ldr	r4, [pc, #240]	; (6c48 <main+0x374>)
    6b58:	47a0      	blx	r4
				delay_s(1);
    6b5a:	20fa      	movs	r0, #250	; 0xfa
    6b5c:	0080      	lsls	r0, r0, #2
    6b5e:	4f48      	ldr	r7, [pc, #288]	; (6c80 <main+0x3ac>)
    6b60:	47b8      	blx	r7
				ams_read_status = ams_sensor_read(&i2c_master_instance, &voc, &co2); //read into the variable voc and co2
    6b62:	aa16      	add	r2, sp, #88	; 0x58
    6b64:	a917      	add	r1, sp, #92	; 0x5c
    6b66:	4848      	ldr	r0, [pc, #288]	; (6c88 <main+0x3b4>)
    6b68:	4b5a      	ldr	r3, [pc, #360]	; (6cd4 <main+0x400>)
    6b6a:	4798      	blx	r3
    6b6c:	0004      	movs	r4, r0
				delay_ms(100);
    6b6e:	2064      	movs	r0, #100	; 0x64
    6b70:	47b8      	blx	r7
				if (ams_read_status==STATUS_OK)
    6b72:	2c00      	cmp	r4, #0
    6b74:	d193      	bne.n	6a9e <main+0x1ca>
					printf("VOC = (%d) ppb\r\n",voc);
    6b76:	9917      	ldr	r1, [sp, #92]	; 0x5c
    6b78:	4857      	ldr	r0, [pc, #348]	; (6cd8 <main+0x404>)
    6b7a:	4c2a      	ldr	r4, [pc, #168]	; (6c24 <main+0x350>)
    6b7c:	47a0      	blx	r4
					printf("CO2 = (%d) ppm\r\n",co2);
    6b7e:	9916      	ldr	r1, [sp, #88]	; 0x58
    6b80:	4856      	ldr	r0, [pc, #344]	; (6cdc <main+0x408>)
    6b82:	47a0      	blx	r4
		delay_ms(500);
    6b84:	20fa      	movs	r0, #250	; 0xfa
    6b86:	0040      	lsls	r0, r0, #1
    6b88:	4b3d      	ldr	r3, [pc, #244]	; (6c80 <main+0x3ac>)
    6b8a:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    6b8c:	4b54      	ldr	r3, [pc, #336]	; (6ce0 <main+0x40c>)
    6b8e:	6818      	ldr	r0, [r3, #0]
    6b90:	7e43      	ldrb	r3, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    6b92:	b25b      	sxtb	r3, r3
    6b94:	2b00      	cmp	r3, #0
    6b96:	dbfb      	blt.n	6b90 <main+0x2bc>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    6b98:	7b03      	ldrb	r3, [r0, #12]
    6b9a:	2202      	movs	r2, #2
    6b9c:	4313      	orrs	r3, r2
    6b9e:	7303      	strb	r3, [r0, #12]
    6ba0:	7e43      	ldrb	r3, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    6ba2:	b25b      	sxtb	r3, r3
    6ba4:	2b00      	cmp	r3, #0
    6ba6:	dbfb      	blt.n	6ba0 <main+0x2cc>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    6ba8:	2101      	movs	r1, #1
    6baa:	e77e      	b.n	6aaa <main+0x1d6>
    6bac:	0000c13c 	.word	0x0000c13c
    6bb0:	00005afd 	.word	0x00005afd
    6bb4:	00160002 	.word	0x00160002
    6bb8:	00170002 	.word	0x00170002
    6bbc:	200000e8 	.word	0x200000e8
    6bc0:	20000414 	.word	0x20000414
    6bc4:	00006721 	.word	0x00006721
    6bc8:	20000410 	.word	0x20000410
    6bcc:	000066f5 	.word	0x000066f5
    6bd0:	2000040c 	.word	0x2000040c
    6bd4:	42001400 	.word	0x42001400
    6bd8:	00004e01 	.word	0x00004e01
    6bdc:	2000000c 	.word	0x2000000c
    6be0:	00009c85 	.word	0x00009c85
    6be4:	00006631 	.word	0x00006631
    6be8:	000051e1 	.word	0x000051e1
    6bec:	000048d5 	.word	0x000048d5
    6bf0:	e000e100 	.word	0xe000e100
    6bf4:	00006865 	.word	0x00006865
    6bf8:	0000becc 	.word	0x0000becc
    6bfc:	00009c4d 	.word	0x00009c4d
    6c00:	00006495 	.word	0x00006495
    6c04:	20000474 	.word	0x20000474
    6c08:	000064a1 	.word	0x000064a1
    6c0c:	0000654d 	.word	0x0000654d
    6c10:	00006d95 	.word	0x00006d95
    6c14:	2000011c 	.word	0x2000011c
    6c18:	2000019c 	.word	0x2000019c
    6c1c:	00006db9 	.word	0x00006db9
    6c20:	0000bf38 	.word	0x0000bf38
    6c24:	00009b31 	.word	0x00009b31
    6c28:	00006739 	.word	0x00006739
    6c2c:	00006e45 	.word	0x00006e45
    6c30:	0000bf6c 	.word	0x0000bf6c
    6c34:	0000115d 	.word	0x0000115d
    6c38:	0000bfa0 	.word	0x0000bfa0
    6c3c:	0000bfcc 	.word	0x0000bfcc
    6c40:	0000bfd8 	.word	0x0000bfd8
    6c44:	0000c1fc 	.word	0x0000c1fc
    6c48:	00009df1 	.word	0x00009df1
    6c4c:	0000bfe0 	.word	0x0000bfe0
    6c50:	000099cf 	.word	0x000099cf
    6c54:	0000665d 	.word	0x0000665d
    6c58:	00002095 	.word	0x00002095
    6c5c:	0000bfec 	.word	0x0000bfec
    6c60:	00003cc1 	.word	0x00003cc1
    6c64:	00006645 	.word	0x00006645
    6c68:	00006651 	.word	0x00006651
    6c6c:	00003d05 	.word	0x00003d05
    6c70:	0000c250 	.word	0x0000c250
    6c74:	0000c25c 	.word	0x0000c25c
    6c78:	00002465 	.word	0x00002465
    6c7c:	000063e9 	.word	0x000063e9
    6c80:	000010dd 	.word	0x000010dd
    6c84:	0000c014 	.word	0x0000c014
    6c88:	2000044c 	.word	0x2000044c
    6c8c:	00001025 	.word	0x00001025
    6c90:	0000bec0 	.word	0x0000bec0
    6c94:	0000c024 	.word	0x0000c024
    6c98:	000021c9 	.word	0x000021c9
    6c9c:	0000bec4 	.word	0x0000bec4
    6ca0:	0000c060 	.word	0x0000c060
    6ca4:	0000c0dc 	.word	0x0000c0dc
    6ca8:	0000c12c 	.word	0x0000c12c
    6cac:	000065d5 	.word	0x000065d5
    6cb0:	0000100d 	.word	0x0000100d
    6cb4:	00007a75 	.word	0x00007a75
    6cb8:	0000c034 	.word	0x0000c034
    6cbc:	0000c044 	.word	0x0000c044
    6cc0:	00007f31 	.word	0x00007f31
    6cc4:	447a0000 	.word	0x447a0000
    6cc8:	00007ca1 	.word	0x00007ca1
    6ccc:	0000985d 	.word	0x0000985d
    6cd0:	0000c058 	.word	0x0000c058
    6cd4:	00000115 	.word	0x00000115
    6cd8:	0000c0b4 	.word	0x0000c0b4
    6cdc:	0000c0c8 	.word	0x0000c0c8
    6ce0:	200004cc 	.word	0x200004cc

00006ce4 <_hwerr_to_stderr>:
    6ce4:	1c03      	adds	r3, r0, #0
    6ce6:	300e      	adds	r0, #14
    6ce8:	b500      	push	{lr}
    6cea:	280e      	cmp	r0, #14
    6cec:	d819      	bhi.n	6d22 <_hwerr_to_stderr+0x3e>
    6cee:	f000 fe2d 	bl	794c <__gnu_thumb1_case_uqi>
    6cf2:	1416      	.short	0x1416
    6cf4:	1b181012 	.word	0x1b181012
    6cf8:	180c0e18 	.word	0x180c0e18
    6cfc:	1d0a0e0e 	.word	0x1d0a0e0e
    6d00:	08          	.byte	0x08
    6d01:	00          	.byte	0x00
    6d02:	2000      	movs	r0, #0
    6d04:	e014      	b.n	6d30 <_hwerr_to_stderr+0x4c>
    6d06:	2070      	movs	r0, #112	; 0x70
    6d08:	e011      	b.n	6d2e <_hwerr_to_stderr+0x4a>
    6d0a:	2016      	movs	r0, #22
    6d0c:	e00f      	b.n	6d2e <_hwerr_to_stderr+0x4a>
    6d0e:	200c      	movs	r0, #12
    6d10:	e00d      	b.n	6d2e <_hwerr_to_stderr+0x4a>
    6d12:	2079      	movs	r0, #121	; 0x79
    6d14:	e00b      	b.n	6d2e <_hwerr_to_stderr+0x4a>
    6d16:	2068      	movs	r0, #104	; 0x68
    6d18:	e009      	b.n	6d2e <_hwerr_to_stderr+0x4a>
    6d1a:	200b      	movs	r0, #11
    6d1c:	e007      	b.n	6d2e <_hwerr_to_stderr+0x4a>
    6d1e:	2010      	movs	r0, #16
    6d20:	e005      	b.n	6d2e <_hwerr_to_stderr+0x4a>
    6d22:	2000      	movs	r0, #0
    6d24:	4283      	cmp	r3, r0
    6d26:	da03      	bge.n	6d30 <_hwerr_to_stderr+0x4c>
    6d28:	2005      	movs	r0, #5
    6d2a:	e000      	b.n	6d2e <_hwerr_to_stderr+0x4a>
    6d2c:	2002      	movs	r0, #2
    6d2e:	4240      	negs	r0, r0
    6d30:	bd00      	pop	{pc}
	...

00006d34 <_mqtt_send_wait>:
    6d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d36:	1c04      	adds	r4, r0, #0
    6d38:	3443      	adds	r4, #67	; 0x43
    6d3a:	7823      	ldrb	r3, [r4, #0]
    6d3c:	1c05      	adds	r5, r0, #0
    6d3e:	07d8      	lsls	r0, r3, #31
    6d40:	d51c      	bpl.n	6d7c <_mqtt_send_wait+0x48>
    6d42:	2604      	movs	r6, #4
    6d44:	4333      	orrs	r3, r6
    6d46:	7023      	strb	r3, [r4, #0]
    6d48:	2002      	movs	r0, #2
    6d4a:	5628      	ldrsb	r0, [r5, r0]
    6d4c:	b292      	uxth	r2, r2
    6d4e:	2300      	movs	r3, #0
    6d50:	4f0c      	ldr	r7, [pc, #48]	; (6d84 <_mqtt_send_wait+0x50>)
    6d52:	47b8      	blx	r7
    6d54:	2800      	cmp	r0, #0
    6d56:	da05      	bge.n	6d64 <_mqtt_send_wait+0x30>
    6d58:	7823      	ldrb	r3, [r4, #0]
    6d5a:	43b3      	bics	r3, r6
    6d5c:	7023      	strb	r3, [r4, #0]
    6d5e:	4b0a      	ldr	r3, [pc, #40]	; (6d88 <_mqtt_send_wait+0x54>)
    6d60:	4798      	blx	r3
    6d62:	e00d      	b.n	6d80 <_mqtt_send_wait+0x4c>
    6d64:	7822      	ldrb	r2, [r4, #0]
    6d66:	2314      	movs	r3, #20
    6d68:	4013      	ands	r3, r2
    6d6a:	2000      	movs	r0, #0
    6d6c:	2b04      	cmp	r3, #4
    6d6e:	d107      	bne.n	6d80 <_mqtt_send_wait+0x4c>
    6d70:	4b06      	ldr	r3, [pc, #24]	; (6d8c <_mqtt_send_wait+0x58>)
    6d72:	4798      	blx	r3
    6d74:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    6d76:	4b06      	ldr	r3, [pc, #24]	; (6d90 <_mqtt_send_wait+0x5c>)
    6d78:	4798      	blx	r3
    6d7a:	e7f3      	b.n	6d64 <_mqtt_send_wait+0x30>
    6d7c:	2001      	movs	r0, #1
    6d7e:	4240      	negs	r0, r0
    6d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6d82:	46c0      	nop			; (mov r8, r8)
    6d84:	00003f2d 	.word	0x00003f2d
    6d88:	00006ce5 	.word	0x00006ce5
    6d8c:	000021c9 	.word	0x000021c9
    6d90:	000065d5 	.word	0x000065d5

00006d94 <mqtt_get_config_defaults>:
    6d94:	4b07      	ldr	r3, [pc, #28]	; (6db4 <mqtt_get_config_defaults+0x20>)
    6d96:	2240      	movs	r2, #64	; 0x40
    6d98:	8003      	strh	r3, [r0, #0]
    6d9a:	2396      	movs	r3, #150	; 0x96
    6d9c:	009b      	lsls	r3, r3, #2
    6d9e:	8103      	strh	r3, [r0, #8]
    6da0:	6102      	str	r2, [r0, #16]
    6da2:	2300      	movs	r3, #0
    6da4:	2220      	movs	r2, #32
    6da6:	7083      	strb	r3, [r0, #2]
    6da8:	6043      	str	r3, [r0, #4]
    6daa:	60c3      	str	r3, [r0, #12]
    6dac:	6142      	str	r2, [r0, #20]
    6dae:	7603      	strb	r3, [r0, #24]
    6db0:	4770      	bx	lr
    6db2:	46c0      	nop			; (mov r8, r8)
    6db4:	0000075b 	.word	0x0000075b

00006db8 <mqtt_init>:
    6db8:	b538      	push	{r3, r4, r5, lr}
    6dba:	1c04      	adds	r4, r0, #0
    6dbc:	1c0d      	adds	r5, r1, #0
    6dbe:	2800      	cmp	r0, #0
    6dc0:	d030      	beq.n	6e24 <mqtt_init+0x6c>
    6dc2:	2900      	cmp	r1, #0
    6dc4:	d02e      	beq.n	6e24 <mqtt_init+0x6c>
    6dc6:	690b      	ldr	r3, [r1, #16]
    6dc8:	2b00      	cmp	r3, #0
    6dca:	d02b      	beq.n	6e24 <mqtt_init+0x6c>
    6dcc:	684b      	ldr	r3, [r1, #4]
    6dce:	2b00      	cmp	r3, #0
    6dd0:	d028      	beq.n	6e24 <mqtt_init+0x6c>
    6dd2:	2100      	movs	r1, #0
    6dd4:	2274      	movs	r2, #116	; 0x74
    6dd6:	4b16      	ldr	r3, [pc, #88]	; (6e30 <mqtt_init+0x78>)
    6dd8:	4798      	blx	r3
    6dda:	1c20      	adds	r0, r4, #0
    6ddc:	4b15      	ldr	r3, [pc, #84]	; (6e34 <mqtt_init+0x7c>)
    6dde:	3058      	adds	r0, #88	; 0x58
    6de0:	1c29      	adds	r1, r5, #0
    6de2:	221c      	movs	r2, #28
    6de4:	4798      	blx	r3
    6de6:	6e63      	ldr	r3, [r4, #100]	; 0x64
    6de8:	2b00      	cmp	r3, #0
    6dea:	d10b      	bne.n	6e04 <mqtt_init+0x4c>
    6dec:	6928      	ldr	r0, [r5, #16]
    6dee:	4b12      	ldr	r3, [pc, #72]	; (6e38 <mqtt_init+0x80>)
    6df0:	4798      	blx	r3
    6df2:	6660      	str	r0, [r4, #100]	; 0x64
    6df4:	2800      	cmp	r0, #0
    6df6:	d017      	beq.n	6e28 <mqtt_init+0x70>
    6df8:	1c23      	adds	r3, r4, #0
    6dfa:	3343      	adds	r3, #67	; 0x43
    6dfc:	781a      	ldrb	r2, [r3, #0]
    6dfe:	2120      	movs	r1, #32
    6e00:	430a      	orrs	r2, r1
    6e02:	701a      	strb	r2, [r3, #0]
    6e04:	892a      	ldrh	r2, [r5, #8]
    6e06:	23fa      	movs	r3, #250	; 0xfa
    6e08:	005b      	lsls	r3, r3, #1
    6e0a:	4353      	muls	r3, r2
    6e0c:	6868      	ldr	r0, [r5, #4]
    6e0e:	490b      	ldr	r1, [pc, #44]	; (6e3c <mqtt_init+0x84>)
    6e10:	1c22      	adds	r2, r4, #0
    6e12:	4d0b      	ldr	r5, [pc, #44]	; (6e40 <mqtt_init+0x88>)
    6e14:	47a8      	blx	r5
    6e16:	1c03      	adds	r3, r0, #0
    6e18:	6520      	str	r0, [r4, #80]	; 0x50
    6e1a:	2000      	movs	r0, #0
    6e1c:	4283      	cmp	r3, r0
    6e1e:	da05      	bge.n	6e2c <mqtt_init+0x74>
    6e20:	201c      	movs	r0, #28
    6e22:	e002      	b.n	6e2a <mqtt_init+0x72>
    6e24:	2016      	movs	r0, #22
    6e26:	e000      	b.n	6e2a <mqtt_init+0x72>
    6e28:	200c      	movs	r0, #12
    6e2a:	4240      	negs	r0, r0
    6e2c:	bd38      	pop	{r3, r4, r5, pc}
    6e2e:	46c0      	nop			; (mov r8, r8)
    6e30:	000099cf 	.word	0x000099cf
    6e34:	00009999 	.word	0x00009999
    6e38:	00009985 	.word	0x00009985
    6e3c:	00007419 	.word	0x00007419
    6e40:	00006561 	.word	0x00006561

00006e44 <mqtt_register_callback>:
    6e44:	2800      	cmp	r0, #0
    6e46:	d002      	beq.n	6e4e <mqtt_register_callback+0xa>
    6e48:	6541      	str	r1, [r0, #84]	; 0x54
    6e4a:	2000      	movs	r0, #0
    6e4c:	e001      	b.n	6e52 <mqtt_register_callback+0xe>
    6e4e:	2016      	movs	r0, #22
    6e50:	4240      	negs	r0, r0
    6e52:	4770      	bx	lr

00006e54 <mqtt_socket_resolve_handler>:
    6e54:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e56:	1c06      	adds	r6, r0, #0
    6e58:	b085      	sub	sp, #20
    6e5a:	1c0f      	adds	r7, r1, #0
    6e5c:	2400      	movs	r4, #0
    6e5e:	4b0f      	ldr	r3, [pc, #60]	; (6e9c <mqtt_socket_resolve_handler+0x48>)
    6e60:	58e5      	ldr	r5, [r4, r3]
    6e62:	2d00      	cmp	r5, #0
    6e64:	d015      	beq.n	6e92 <mqtt_socket_resolve_handler+0x3e>
    6e66:	1ce9      	adds	r1, r5, #3
    6e68:	1c30      	adds	r0, r6, #0
    6e6a:	4b0d      	ldr	r3, [pc, #52]	; (6ea0 <mqtt_socket_resolve_handler+0x4c>)
    6e6c:	4798      	blx	r3
    6e6e:	2800      	cmp	r0, #0
    6e70:	d10f      	bne.n	6e92 <mqtt_socket_resolve_handler+0x3e>
    6e72:	466a      	mov	r2, sp
    6e74:	2302      	movs	r3, #2
    6e76:	8013      	strh	r3, [r2, #0]
    6e78:	1c2b      	adds	r3, r5, #0
    6e7a:	3358      	adds	r3, #88	; 0x58
    6e7c:	881b      	ldrh	r3, [r3, #0]
    6e7e:	9701      	str	r7, [sp, #4]
    6e80:	ba5b      	rev16	r3, r3
    6e82:	8053      	strh	r3, [r2, #2]
    6e84:	2002      	movs	r0, #2
    6e86:	5628      	ldrsb	r0, [r5, r0]
    6e88:	4669      	mov	r1, sp
    6e8a:	2210      	movs	r2, #16
    6e8c:	4b05      	ldr	r3, [pc, #20]	; (6ea4 <mqtt_socket_resolve_handler+0x50>)
    6e8e:	4798      	blx	r3
    6e90:	e002      	b.n	6e98 <mqtt_socket_resolve_handler+0x44>
    6e92:	3404      	adds	r4, #4
    6e94:	2c1c      	cmp	r4, #28
    6e96:	d1e2      	bne.n	6e5e <mqtt_socket_resolve_handler+0xa>
    6e98:	b005      	add	sp, #20
    6e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6e9c:	20000254 	.word	0x20000254
    6ea0:	00009e35 	.word	0x00009e35
    6ea4:	00003e9d 	.word	0x00003e9d

00006ea8 <mqtt_connect>:
    6ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
    6eaa:	1c04      	adds	r4, r0, #0
    6eac:	b089      	sub	sp, #36	; 0x24
    6eae:	1c0d      	adds	r5, r1, #0
    6eb0:	2800      	cmp	r0, #0
    6eb2:	d051      	beq.n	6f58 <mqtt_connect+0xb0>
    6eb4:	2900      	cmp	r1, #0
    6eb6:	d04f      	beq.n	6f58 <mqtt_connect+0xb0>
    6eb8:	1c08      	adds	r0, r1, #0
    6eba:	4b39      	ldr	r3, [pc, #228]	; (6fa0 <mqtt_connect+0xf8>)
    6ebc:	4798      	blx	r3
    6ebe:	2840      	cmp	r0, #64	; 0x40
    6ec0:	d84c      	bhi.n	6f5c <mqtt_connect+0xb4>
    6ec2:	1c21      	adds	r1, r4, #0
    6ec4:	3143      	adds	r1, #67	; 0x43
    6ec6:	780b      	ldrb	r3, [r1, #0]
    6ec8:	9101      	str	r1, [sp, #4]
    6eca:	07db      	lsls	r3, r3, #31
    6ecc:	0fd9      	lsrs	r1, r3, #31
    6ece:	466a      	mov	r2, sp
    6ed0:	b2ce      	uxtb	r6, r1
    6ed2:	1ce0      	adds	r0, r4, #3
    6ed4:	7211      	strb	r1, [r2, #8]
    6ed6:	2e00      	cmp	r6, #0
    6ed8:	d142      	bne.n	6f60 <mqtt_connect+0xb8>
    6eda:	2701      	movs	r7, #1
    6edc:	1c29      	adds	r1, r5, #0
    6ede:	4b31      	ldr	r3, [pc, #196]	; (6fa4 <mqtt_connect+0xfc>)
    6ee0:	8027      	strh	r7, [r4, #0]
    6ee2:	4798      	blx	r3
    6ee4:	9a01      	ldr	r2, [sp, #4]
    6ee6:	2002      	movs	r0, #2
    6ee8:	7813      	ldrb	r3, [r2, #0]
    6eea:	9901      	ldr	r1, [sp, #4]
    6eec:	43bb      	bics	r3, r7
    6eee:	4383      	bics	r3, r0
    6ef0:	22e3      	movs	r2, #227	; 0xe3
    6ef2:	4013      	ands	r3, r2
    6ef4:	466a      	mov	r2, sp
    6ef6:	700b      	strb	r3, [r1, #0]
    6ef8:	7a12      	ldrb	r2, [r2, #8]
    6efa:	1c23      	adds	r3, r4, #0
    6efc:	3348      	adds	r3, #72	; 0x48
    6efe:	6466      	str	r6, [r4, #68]	; 0x44
    6f00:	701a      	strb	r2, [r3, #0]
    6f02:	7c9a      	ldrb	r2, [r3, #18]
    6f04:	805e      	strh	r6, [r3, #2]
    6f06:	1e53      	subs	r3, r2, #1
    6f08:	419a      	sbcs	r2, r3
    6f0a:	b2d2      	uxtb	r2, r2
    6f0c:	1c39      	adds	r1, r7, #0
    6f0e:	4b26      	ldr	r3, [pc, #152]	; (6fa8 <mqtt_connect+0x100>)
    6f10:	4798      	blx	r3
    6f12:	70a0      	strb	r0, [r4, #2]
    6f14:	2800      	cmp	r0, #0
    6f16:	db25      	blt.n	6f64 <mqtt_connect+0xbc>
    6f18:	4b24      	ldr	r3, [pc, #144]	; (6fac <mqtt_connect+0x104>)
    6f1a:	0080      	lsls	r0, r0, #2
    6f1c:	50c4      	str	r4, [r0, r3]
    6f1e:	1c2b      	adds	r3, r5, #0
    6f20:	781f      	ldrb	r7, [r3, #0]
    6f22:	2f00      	cmp	r7, #0
    6f24:	d026      	beq.n	6f74 <mqtt_connect+0xcc>
    6f26:	2220      	movs	r2, #32
    6f28:	1c39      	adds	r1, r7, #0
    6f2a:	4391      	bics	r1, r2
    6f2c:	1c0a      	adds	r2, r1, #0
    6f2e:	3a41      	subs	r2, #65	; 0x41
    6f30:	b2d2      	uxtb	r2, r2
    6f32:	3301      	adds	r3, #1
    6f34:	2a05      	cmp	r2, #5
    6f36:	d90d      	bls.n	6f54 <mqtt_connect+0xac>
    6f38:	2f3a      	cmp	r7, #58	; 0x3a
    6f3a:	d00b      	beq.n	6f54 <mqtt_connect+0xac>
    6f3c:	2f2f      	cmp	r7, #47	; 0x2f
    6f3e:	d009      	beq.n	6f54 <mqtt_connect+0xac>
    6f40:	2f2e      	cmp	r7, #46	; 0x2e
    6f42:	d102      	bne.n	6f4a <mqtt_connect+0xa2>
    6f44:	2e00      	cmp	r6, #0
    6f46:	d0eb      	beq.n	6f20 <mqtt_connect+0x78>
    6f48:	e00f      	b.n	6f6a <mqtt_connect+0xc2>
    6f4a:	2230      	movs	r2, #48	; 0x30
    6f4c:	4017      	ands	r7, r2
    6f4e:	4297      	cmp	r7, r2
    6f50:	d0e6      	beq.n	6f20 <mqtt_connect+0x78>
    6f52:	e00a      	b.n	6f6a <mqtt_connect+0xc2>
    6f54:	2601      	movs	r6, #1
    6f56:	e7e3      	b.n	6f20 <mqtt_connect+0x78>
    6f58:	2016      	movs	r0, #22
    6f5a:	e004      	b.n	6f66 <mqtt_connect+0xbe>
    6f5c:	205b      	movs	r0, #91	; 0x5b
    6f5e:	e002      	b.n	6f66 <mqtt_connect+0xbe>
    6f60:	2078      	movs	r0, #120	; 0x78
    6f62:	e000      	b.n	6f66 <mqtt_connect+0xbe>
    6f64:	201c      	movs	r0, #28
    6f66:	4240      	negs	r0, r0
    6f68:	e017      	b.n	6f9a <mqtt_connect+0xf2>
    6f6a:	1c28      	adds	r0, r5, #0
    6f6c:	4b10      	ldr	r3, [pc, #64]	; (6fb0 <mqtt_connect+0x108>)
    6f6e:	4798      	blx	r3
    6f70:	2000      	movs	r0, #0
    6f72:	e012      	b.n	6f9a <mqtt_connect+0xf2>
    6f74:	466a      	mov	r2, sp
    6f76:	2302      	movs	r3, #2
    6f78:	8213      	strh	r3, [r2, #16]
    6f7a:	1c23      	adds	r3, r4, #0
    6f7c:	3358      	adds	r3, #88	; 0x58
    6f7e:	881b      	ldrh	r3, [r3, #0]
    6f80:	1c28      	adds	r0, r5, #0
    6f82:	ba5b      	rev16	r3, r3
    6f84:	8253      	strh	r3, [r2, #18]
    6f86:	4b0b      	ldr	r3, [pc, #44]	; (6fb4 <mqtt_connect+0x10c>)
    6f88:	4798      	blx	r3
    6f8a:	9005      	str	r0, [sp, #20]
    6f8c:	2002      	movs	r0, #2
    6f8e:	5620      	ldrsb	r0, [r4, r0]
    6f90:	a904      	add	r1, sp, #16
    6f92:	2210      	movs	r2, #16
    6f94:	4b08      	ldr	r3, [pc, #32]	; (6fb8 <mqtt_connect+0x110>)
    6f96:	4798      	blx	r3
    6f98:	1c38      	adds	r0, r7, #0
    6f9a:	b009      	add	sp, #36	; 0x24
    6f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6f9e:	46c0      	nop			; (mov r8, r8)
    6fa0:	00009e59 	.word	0x00009e59
    6fa4:	00009e49 	.word	0x00009e49
    6fa8:	00003d19 	.word	0x00003d19
    6fac:	20000254 	.word	0x20000254
    6fb0:	00004161 	.word	0x00004161
    6fb4:	000040f5 	.word	0x000040f5
    6fb8:	00003e9d 	.word	0x00003e9d

00006fbc <mqtt_connect_broker>:
    6fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    6fbe:	b095      	sub	sp, #84	; 0x54
    6fc0:	af02      	add	r7, sp, #8
    6fc2:	617b      	str	r3, [r7, #20]
    6fc4:	1c3b      	adds	r3, r7, #0
    6fc6:	3370      	adds	r3, #112	; 0x70
    6fc8:	781b      	ldrb	r3, [r3, #0]
    6fca:	1c05      	adds	r5, r0, #0
    6fcc:	60fb      	str	r3, [r7, #12]
    6fce:	1c3b      	adds	r3, r7, #0
    6fd0:	3374      	adds	r3, #116	; 0x74
    6fd2:	781b      	ldrb	r3, [r3, #0]
    6fd4:	6139      	str	r1, [r7, #16]
    6fd6:	61fa      	str	r2, [r7, #28]
    6fd8:	60bb      	str	r3, [r7, #8]
    6fda:	2800      	cmp	r0, #0
    6fdc:	d101      	bne.n	6fe2 <mqtt_connect_broker+0x26>
    6fde:	2016      	movs	r0, #22
    6fe0:	e129      	b.n	7236 <mqtt_connect_broker+0x27a>
    6fe2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    6fe4:	4668      	mov	r0, sp
    6fe6:	3307      	adds	r3, #7
    6fe8:	08db      	lsrs	r3, r3, #3
    6fea:	00db      	lsls	r3, r3, #3
    6fec:	1ac0      	subs	r0, r0, r3
    6fee:	4685      	mov	sp, r0
    6ff0:	ac02      	add	r4, sp, #8
    6ff2:	607c      	str	r4, [r7, #4]
    6ff4:	6e3c      	ldr	r4, [r7, #96]	; 0x60
    6ff6:	2c00      	cmp	r4, #0
    6ff8:	d0f1      	beq.n	6fde <mqtt_connect_broker+0x22>
    6ffa:	1c2b      	adds	r3, r5, #0
    6ffc:	3343      	adds	r3, #67	; 0x43
    6ffe:	781b      	ldrb	r3, [r3, #0]
    7000:	07d8      	lsls	r0, r3, #31
    7002:	d400      	bmi.n	7006 <mqtt_connect_broker+0x4a>
    7004:	e112      	b.n	722c <mqtt_connect_broker+0x270>
    7006:	079a      	lsls	r2, r3, #30
    7008:	d500      	bpl.n	700c <mqtt_connect_broker+0x50>
    700a:	e111      	b.n	7230 <mqtt_connect_broker+0x274>
    700c:	071c      	lsls	r4, r3, #28
    700e:	d40b      	bmi.n	7028 <mqtt_connect_broker+0x6c>
    7010:	4e8b      	ldr	r6, [pc, #556]	; (7240 <mqtt_connect_broker+0x284>)
    7012:	6e38      	ldr	r0, [r7, #96]	; 0x60
    7014:	47b0      	blx	r6
    7016:	1c03      	adds	r3, r0, #0
    7018:	61b8      	str	r0, [r7, #24]
    701a:	69f8      	ldr	r0, [r7, #28]
    701c:	330e      	adds	r3, #14
    701e:	1c34      	adds	r4, r6, #0
    7020:	2800      	cmp	r0, #0
    7022:	d113      	bne.n	704c <mqtt_connect_broker+0x90>
    7024:	1c1e      	adds	r6, r3, #0
    7026:	e01d      	b.n	7064 <mqtt_connect_broker+0xa8>
    7028:	1c2b      	adds	r3, r5, #0
    702a:	3370      	adds	r3, #112	; 0x70
    702c:	781b      	ldrb	r3, [r3, #0]
    702e:	2b00      	cmp	r3, #0
    7030:	d000      	beq.n	7034 <mqtt_connect_broker+0x78>
    7032:	e0ff      	b.n	7234 <mqtt_connect_broker+0x278>
    7034:	1c2b      	adds	r3, r5, #0
    7036:	3343      	adds	r3, #67	; 0x43
    7038:	781b      	ldrb	r3, [r3, #0]
    703a:	071a      	lsls	r2, r3, #28
    703c:	d5e8      	bpl.n	7010 <mqtt_connect_broker+0x54>
    703e:	4b81      	ldr	r3, [pc, #516]	; (7244 <mqtt_connect_broker+0x288>)
    7040:	2000      	movs	r0, #0
    7042:	4798      	blx	r3
    7044:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    7046:	4b80      	ldr	r3, [pc, #512]	; (7248 <mqtt_connect_broker+0x28c>)
    7048:	4798      	blx	r3
    704a:	e7f3      	b.n	7034 <mqtt_connect_broker+0x78>
    704c:	69f8      	ldr	r0, [r7, #28]
    704e:	47b0      	blx	r6
    7050:	69be      	ldr	r6, [r7, #24]
    7052:	697b      	ldr	r3, [r7, #20]
    7054:	3610      	adds	r6, #16
    7056:	1836      	adds	r6, r6, r0
    7058:	2b00      	cmp	r3, #0
    705a:	d003      	beq.n	7064 <mqtt_connect_broker+0xa8>
    705c:	1c18      	adds	r0, r3, #0
    705e:	47a0      	blx	r4
    7060:	3602      	adds	r6, #2
    7062:	1836      	adds	r6, r6, r0
    7064:	6e78      	ldr	r0, [r7, #100]	; 0x64
    7066:	2800      	cmp	r0, #0
    7068:	d007      	beq.n	707a <mqtt_connect_broker+0xbe>
    706a:	47a0      	blx	r4
    706c:	3602      	adds	r6, #2
    706e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    7070:	1830      	adds	r0, r6, r0
    7072:	1906      	adds	r6, r0, r4
    7074:	2c00      	cmp	r4, #0
    7076:	d100      	bne.n	707a <mqtt_connect_broker+0xbe>
    7078:	1c06      	adds	r6, r0, #0
    707a:	69fc      	ldr	r4, [r7, #28]
    707c:	2c00      	cmp	r4, #0
    707e:	d006      	beq.n	708e <mqtt_connect_broker+0xd2>
    7080:	24c0      	movs	r4, #192	; 0xc0
    7082:	61bc      	str	r4, [r7, #24]
    7084:	697c      	ldr	r4, [r7, #20]
    7086:	2c00      	cmp	r4, #0
    7088:	d103      	bne.n	7092 <mqtt_connect_broker+0xd6>
    708a:	2480      	movs	r4, #128	; 0x80
    708c:	e000      	b.n	7090 <mqtt_connect_broker+0xd4>
    708e:	69fc      	ldr	r4, [r7, #28]
    7090:	61bc      	str	r4, [r7, #24]
    7092:	6e7c      	ldr	r4, [r7, #100]	; 0x64
    7094:	2c00      	cmp	r4, #0
    7096:	d00f      	beq.n	70b8 <mqtt_connect_broker+0xfc>
    7098:	68bc      	ldr	r4, [r7, #8]
    709a:	2c00      	cmp	r4, #0
    709c:	d003      	beq.n	70a6 <mqtt_connect_broker+0xea>
    709e:	69bc      	ldr	r4, [r7, #24]
    70a0:	2320      	movs	r3, #32
    70a2:	431c      	orrs	r4, r3
    70a4:	61bc      	str	r4, [r7, #24]
    70a6:	68fc      	ldr	r4, [r7, #12]
    70a8:	2303      	movs	r3, #3
    70aa:	4023      	ands	r3, r4
    70ac:	00db      	lsls	r3, r3, #3
    70ae:	69bc      	ldr	r4, [r7, #24]
    70b0:	2204      	movs	r2, #4
    70b2:	4313      	orrs	r3, r2
    70b4:	431c      	orrs	r4, r3
    70b6:	61bc      	str	r4, [r7, #24]
    70b8:	693c      	ldr	r4, [r7, #16]
    70ba:	2c00      	cmp	r4, #0
    70bc:	d003      	beq.n	70c6 <mqtt_connect_broker+0x10a>
    70be:	69bc      	ldr	r4, [r7, #24]
    70c0:	2302      	movs	r3, #2
    70c2:	431c      	orrs	r4, r3
    70c4:	61bc      	str	r4, [r7, #24]
    70c6:	1c2b      	adds	r3, r5, #0
    70c8:	3343      	adds	r3, #67	; 0x43
    70ca:	781a      	ldrb	r2, [r3, #0]
    70cc:	2108      	movs	r1, #8
    70ce:	430a      	orrs	r2, r1
    70d0:	701a      	strb	r2, [r3, #0]
    70d2:	1c38      	adds	r0, r7, #0
    70d4:	9500      	str	r5, [sp, #0]
    70d6:	3020      	adds	r0, #32
    70d8:	6879      	ldr	r1, [r7, #4]
    70da:	4b5c      	ldr	r3, [pc, #368]	; (724c <mqtt_connect_broker+0x290>)
    70dc:	6eea      	ldr	r2, [r5, #108]	; 0x6c
    70de:	4c5c      	ldr	r4, [pc, #368]	; (7250 <mqtt_connect_broker+0x294>)
    70e0:	47a0      	blx	r4
    70e2:	1c38      	adds	r0, r7, #0
    70e4:	3020      	adds	r0, #32
    70e6:	2110      	movs	r1, #16
    70e8:	4b5a      	ldr	r3, [pc, #360]	; (7254 <mqtt_connect_broker+0x298>)
    70ea:	4798      	blx	r3
    70ec:	2e80      	cmp	r6, #128	; 0x80
    70ee:	dd09      	ble.n	7104 <mqtt_connect_broker+0x148>
    70f0:	2180      	movs	r1, #128	; 0x80
    70f2:	4249      	negs	r1, r1
    70f4:	4331      	orrs	r1, r6
    70f6:	1c38      	adds	r0, r7, #0
    70f8:	b249      	sxtb	r1, r1
    70fa:	3020      	adds	r0, #32
    70fc:	4c55      	ldr	r4, [pc, #340]	; (7254 <mqtt_connect_broker+0x298>)
    70fe:	47a0      	blx	r4
    7100:	11f6      	asrs	r6, r6, #7
    7102:	e7f3      	b.n	70ec <mqtt_connect_broker+0x130>
    7104:	4b54      	ldr	r3, [pc, #336]	; (7258 <mqtt_connect_broker+0x29c>)
    7106:	401e      	ands	r6, r3
    7108:	d504      	bpl.n	7114 <mqtt_connect_broker+0x158>
    710a:	2380      	movs	r3, #128	; 0x80
    710c:	3e01      	subs	r6, #1
    710e:	425b      	negs	r3, r3
    7110:	431e      	orrs	r6, r3
    7112:	3601      	adds	r6, #1
    7114:	1c38      	adds	r0, r7, #0
    7116:	b271      	sxtb	r1, r6
    7118:	3020      	adds	r0, #32
    711a:	4c4e      	ldr	r4, [pc, #312]	; (7254 <mqtt_connect_broker+0x298>)
    711c:	47a0      	blx	r4
    711e:	1c38      	adds	r0, r7, #0
    7120:	4c4e      	ldr	r4, [pc, #312]	; (725c <mqtt_connect_broker+0x2a0>)
    7122:	3020      	adds	r0, #32
    7124:	2106      	movs	r1, #6
    7126:	47a0      	blx	r4
    7128:	1c38      	adds	r0, r7, #0
    712a:	4b4d      	ldr	r3, [pc, #308]	; (7260 <mqtt_connect_broker+0x2a4>)
    712c:	3020      	adds	r0, #32
    712e:	494d      	ldr	r1, [pc, #308]	; (7264 <mqtt_connect_broker+0x2a8>)
    7130:	2206      	movs	r2, #6
    7132:	4798      	blx	r3
    7134:	1c38      	adds	r0, r7, #0
    7136:	3020      	adds	r0, #32
    7138:	2103      	movs	r1, #3
    713a:	4a46      	ldr	r2, [pc, #280]	; (7254 <mqtt_connect_broker+0x298>)
    713c:	4790      	blx	r2
    713e:	69bb      	ldr	r3, [r7, #24]
    7140:	1c38      	adds	r0, r7, #0
    7142:	4a44      	ldr	r2, [pc, #272]	; (7254 <mqtt_connect_broker+0x298>)
    7144:	b259      	sxtb	r1, r3
    7146:	3020      	adds	r0, #32
    7148:	4790      	blx	r2
    714a:	1c2b      	adds	r3, r5, #0
    714c:	3360      	adds	r3, #96	; 0x60
    714e:	2000      	movs	r0, #0
    7150:	5e19      	ldrsh	r1, [r3, r0]
    7152:	1c38      	adds	r0, r7, #0
    7154:	3020      	adds	r0, #32
    7156:	47a0      	blx	r4
    7158:	4e39      	ldr	r6, [pc, #228]	; (7240 <mqtt_connect_broker+0x284>)
    715a:	6e38      	ldr	r0, [r7, #96]	; 0x60
    715c:	47b0      	blx	r6
    715e:	b201      	sxth	r1, r0
    7160:	1c38      	adds	r0, r7, #0
    7162:	3020      	adds	r0, #32
    7164:	47a0      	blx	r4
    7166:	6e38      	ldr	r0, [r7, #96]	; 0x60
    7168:	47b0      	blx	r6
    716a:	1c02      	adds	r2, r0, #0
    716c:	1c38      	adds	r0, r7, #0
    716e:	3020      	adds	r0, #32
    7170:	6e39      	ldr	r1, [r7, #96]	; 0x60
    7172:	4b3b      	ldr	r3, [pc, #236]	; (7260 <mqtt_connect_broker+0x2a4>)
    7174:	4798      	blx	r3
    7176:	6e78      	ldr	r0, [r7, #100]	; 0x64
    7178:	2800      	cmp	r0, #0
    717a:	d015      	beq.n	71a8 <mqtt_connect_broker+0x1ec>
    717c:	47b0      	blx	r6
    717e:	b201      	sxth	r1, r0
    7180:	1c38      	adds	r0, r7, #0
    7182:	3020      	adds	r0, #32
    7184:	47a0      	blx	r4
    7186:	6e78      	ldr	r0, [r7, #100]	; 0x64
    7188:	47b0      	blx	r6
    718a:	1c02      	adds	r2, r0, #0
    718c:	1c38      	adds	r0, r7, #0
    718e:	4c34      	ldr	r4, [pc, #208]	; (7260 <mqtt_connect_broker+0x2a4>)
    7190:	3020      	adds	r0, #32
    7192:	6e79      	ldr	r1, [r7, #100]	; 0x64
    7194:	47a0      	blx	r4
    7196:	6ebc      	ldr	r4, [r7, #104]	; 0x68
    7198:	2c00      	cmp	r4, #0
    719a:	d005      	beq.n	71a8 <mqtt_connect_broker+0x1ec>
    719c:	1c38      	adds	r0, r7, #0
    719e:	1c21      	adds	r1, r4, #0
    71a0:	3020      	adds	r0, #32
    71a2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    71a4:	4c2e      	ldr	r4, [pc, #184]	; (7260 <mqtt_connect_broker+0x2a4>)
    71a6:	47a0      	blx	r4
    71a8:	69fc      	ldr	r4, [r7, #28]
    71aa:	2c00      	cmp	r4, #0
    71ac:	d01f      	beq.n	71ee <mqtt_connect_broker+0x232>
    71ae:	4e24      	ldr	r6, [pc, #144]	; (7240 <mqtt_connect_broker+0x284>)
    71b0:	1c20      	adds	r0, r4, #0
    71b2:	47b0      	blx	r6
    71b4:	b201      	sxth	r1, r0
    71b6:	1c38      	adds	r0, r7, #0
    71b8:	3020      	adds	r0, #32
    71ba:	4c28      	ldr	r4, [pc, #160]	; (725c <mqtt_connect_broker+0x2a0>)
    71bc:	47a0      	blx	r4
    71be:	69f8      	ldr	r0, [r7, #28]
    71c0:	47b0      	blx	r6
    71c2:	1c02      	adds	r2, r0, #0
    71c4:	1c38      	adds	r0, r7, #0
    71c6:	3020      	adds	r0, #32
    71c8:	69f9      	ldr	r1, [r7, #28]
    71ca:	4c25      	ldr	r4, [pc, #148]	; (7260 <mqtt_connect_broker+0x2a4>)
    71cc:	47a0      	blx	r4
    71ce:	6978      	ldr	r0, [r7, #20]
    71d0:	2800      	cmp	r0, #0
    71d2:	d00c      	beq.n	71ee <mqtt_connect_broker+0x232>
    71d4:	47b0      	blx	r6
    71d6:	b201      	sxth	r1, r0
    71d8:	1c38      	adds	r0, r7, #0
    71da:	4a20      	ldr	r2, [pc, #128]	; (725c <mqtt_connect_broker+0x2a0>)
    71dc:	3020      	adds	r0, #32
    71de:	4790      	blx	r2
    71e0:	6978      	ldr	r0, [r7, #20]
    71e2:	47b0      	blx	r6
    71e4:	1c02      	adds	r2, r0, #0
    71e6:	1c38      	adds	r0, r7, #0
    71e8:	3020      	adds	r0, #32
    71ea:	6979      	ldr	r1, [r7, #20]
    71ec:	47a0      	blx	r4
    71ee:	1c38      	adds	r0, r7, #0
    71f0:	1c2c      	adds	r4, r5, #0
    71f2:	3020      	adds	r0, #32
    71f4:	4b1c      	ldr	r3, [pc, #112]	; (7268 <mqtt_connect_broker+0x2ac>)
    71f6:	3443      	adds	r4, #67	; 0x43
    71f8:	4798      	blx	r3
    71fa:	7821      	ldrb	r1, [r4, #0]
    71fc:	0789      	lsls	r1, r1, #30
    71fe:	0fc9      	lsrs	r1, r1, #31
    7200:	2901      	cmp	r1, #1
    7202:	d10b      	bne.n	721c <mqtt_connect_broker+0x260>
    7204:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    7206:	2a00      	cmp	r2, #0
    7208:	d108      	bne.n	721c <mqtt_connect_broker+0x260>
    720a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    720c:	2b00      	cmp	r3, #0
    720e:	d005      	beq.n	721c <mqtt_connect_broker+0x260>
    7210:	2034      	movs	r0, #52	; 0x34
    7212:	55c2      	strb	r2, [r0, r7]
    7214:	1c3a      	adds	r2, r7, #0
    7216:	1c28      	adds	r0, r5, #0
    7218:	3234      	adds	r2, #52	; 0x34
    721a:	4798      	blx	r3
    721c:	7823      	ldrb	r3, [r4, #0]
    721e:	2202      	movs	r2, #2
    7220:	4313      	orrs	r3, r2
    7222:	2208      	movs	r2, #8
    7224:	4393      	bics	r3, r2
    7226:	7023      	strb	r3, [r4, #0]
    7228:	2000      	movs	r0, #0
    722a:	e005      	b.n	7238 <mqtt_connect_broker+0x27c>
    722c:	2080      	movs	r0, #128	; 0x80
    722e:	e002      	b.n	7236 <mqtt_connect_broker+0x27a>
    7230:	2078      	movs	r0, #120	; 0x78
    7232:	e000      	b.n	7236 <mqtt_connect_broker+0x27a>
    7234:	200b      	movs	r0, #11
    7236:	4240      	negs	r0, r0
    7238:	46bd      	mov	sp, r7
    723a:	b013      	add	sp, #76	; 0x4c
    723c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    723e:	46c0      	nop			; (mov r8, r8)
    7240:	00009e59 	.word	0x00009e59
    7244:	000021c9 	.word	0x000021c9
    7248:	000065d5 	.word	0x000065d5
    724c:	00006d35 	.word	0x00006d35
    7250:	000063f5 	.word	0x000063f5
    7254:	00006421 	.word	0x00006421
    7258:	8000007f 	.word	0x8000007f
    725c:	00006449 	.word	0x00006449
    7260:	00006461 	.word	0x00006461
    7264:	0000c288 	.word	0x0000c288
    7268:	00006405 	.word	0x00006405

0000726c <mqtt_subscribe>:
    726c:	b5f0      	push	{r4, r5, r6, r7, lr}
    726e:	b08d      	sub	sp, #52	; 0x34
    7270:	af02      	add	r7, sp, #8
    7272:	1c04      	adds	r4, r0, #0
    7274:	60b9      	str	r1, [r7, #8]
    7276:	607a      	str	r2, [r7, #4]
    7278:	d101      	bne.n	727e <mqtt_subscribe+0x12>
    727a:	2016      	movs	r0, #22
    727c:	e086      	b.n	738c <mqtt_subscribe+0x120>
    727e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    7280:	466a      	mov	r2, sp
    7282:	3307      	adds	r3, #7
    7284:	08db      	lsrs	r3, r3, #3
    7286:	00db      	lsls	r3, r3, #3
    7288:	1ad2      	subs	r2, r2, r3
    728a:	4695      	mov	sp, r2
    728c:	ad02      	add	r5, sp, #8
    728e:	603d      	str	r5, [r7, #0]
    7290:	68bd      	ldr	r5, [r7, #8]
    7292:	2d00      	cmp	r5, #0
    7294:	d0f1      	beq.n	727a <mqtt_subscribe+0xe>
    7296:	687d      	ldr	r5, [r7, #4]
    7298:	2d02      	cmp	r5, #2
    729a:	d8ee      	bhi.n	727a <mqtt_subscribe+0xe>
    729c:	1c05      	adds	r5, r0, #0
    729e:	3543      	adds	r5, #67	; 0x43
    72a0:	782b      	ldrb	r3, [r5, #0]
    72a2:	079a      	lsls	r2, r3, #30
    72a4:	d56f      	bpl.n	7386 <mqtt_subscribe+0x11a>
    72a6:	071a      	lsls	r2, r3, #28
    72a8:	d41a      	bmi.n	72e0 <mqtt_subscribe+0x74>
    72aa:	68b8      	ldr	r0, [r7, #8]
    72ac:	4d39      	ldr	r5, [pc, #228]	; (7394 <mqtt_subscribe+0x128>)
    72ae:	47a8      	blx	r5
    72b0:	1c25      	adds	r5, r4, #0
    72b2:	3543      	adds	r5, #67	; 0x43
    72b4:	782b      	ldrb	r3, [r5, #0]
    72b6:	2208      	movs	r2, #8
    72b8:	4313      	orrs	r3, r2
    72ba:	702b      	strb	r3, [r5, #0]
    72bc:	60fd      	str	r5, [r7, #12]
    72be:	1d46      	adds	r6, r0, #5
    72c0:	9400      	str	r4, [sp, #0]
    72c2:	1c38      	adds	r0, r7, #0
    72c4:	3014      	adds	r0, #20
    72c6:	6839      	ldr	r1, [r7, #0]
    72c8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    72ca:	4b33      	ldr	r3, [pc, #204]	; (7398 <mqtt_subscribe+0x12c>)
    72cc:	4d33      	ldr	r5, [pc, #204]	; (739c <mqtt_subscribe+0x130>)
    72ce:	47a8      	blx	r5
    72d0:	1c38      	adds	r0, r7, #0
    72d2:	217e      	movs	r1, #126	; 0x7e
    72d4:	3014      	adds	r0, #20
    72d6:	4249      	negs	r1, r1
    72d8:	4b31      	ldr	r3, [pc, #196]	; (73a0 <mqtt_subscribe+0x134>)
    72da:	4798      	blx	r3
    72dc:	4d2d      	ldr	r5, [pc, #180]	; (7394 <mqtt_subscribe+0x128>)
    72de:	e00e      	b.n	72fe <mqtt_subscribe+0x92>
    72e0:	1c03      	adds	r3, r0, #0
    72e2:	3370      	adds	r3, #112	; 0x70
    72e4:	781b      	ldrb	r3, [r3, #0]
    72e6:	2b00      	cmp	r3, #0
    72e8:	d14f      	bne.n	738a <mqtt_subscribe+0x11e>
    72ea:	782b      	ldrb	r3, [r5, #0]
    72ec:	071a      	lsls	r2, r3, #28
    72ee:	d5dc      	bpl.n	72aa <mqtt_subscribe+0x3e>
    72f0:	4b2c      	ldr	r3, [pc, #176]	; (73a4 <mqtt_subscribe+0x138>)
    72f2:	2000      	movs	r0, #0
    72f4:	4798      	blx	r3
    72f6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    72f8:	4b2b      	ldr	r3, [pc, #172]	; (73a8 <mqtt_subscribe+0x13c>)
    72fa:	4798      	blx	r3
    72fc:	e7f5      	b.n	72ea <mqtt_subscribe+0x7e>
    72fe:	4b28      	ldr	r3, [pc, #160]	; (73a0 <mqtt_subscribe+0x134>)
    7300:	2e80      	cmp	r6, #128	; 0x80
    7302:	dd08      	ble.n	7316 <mqtt_subscribe+0xaa>
    7304:	2180      	movs	r1, #128	; 0x80
    7306:	4249      	negs	r1, r1
    7308:	4331      	orrs	r1, r6
    730a:	1c38      	adds	r0, r7, #0
    730c:	b249      	sxtb	r1, r1
    730e:	3014      	adds	r0, #20
    7310:	4798      	blx	r3
    7312:	11f6      	asrs	r6, r6, #7
    7314:	e7f3      	b.n	72fe <mqtt_subscribe+0x92>
    7316:	4925      	ldr	r1, [pc, #148]	; (73ac <mqtt_subscribe+0x140>)
    7318:	4031      	ands	r1, r6
    731a:	d504      	bpl.n	7326 <mqtt_subscribe+0xba>
    731c:	2280      	movs	r2, #128	; 0x80
    731e:	3901      	subs	r1, #1
    7320:	4252      	negs	r2, r2
    7322:	4311      	orrs	r1, r2
    7324:	3101      	adds	r1, #1
    7326:	1c38      	adds	r0, r7, #0
    7328:	b249      	sxtb	r1, r1
    732a:	3014      	adds	r0, #20
    732c:	4798      	blx	r3
    732e:	8821      	ldrh	r1, [r4, #0]
    7330:	1c38      	adds	r0, r7, #0
    7332:	1c4b      	adds	r3, r1, #1
    7334:	8023      	strh	r3, [r4, #0]
    7336:	b209      	sxth	r1, r1
    7338:	3014      	adds	r0, #20
    733a:	4e1d      	ldr	r6, [pc, #116]	; (73b0 <mqtt_subscribe+0x144>)
    733c:	47b0      	blx	r6
    733e:	8823      	ldrh	r3, [r4, #0]
    7340:	2b00      	cmp	r3, #0
    7342:	d101      	bne.n	7348 <mqtt_subscribe+0xdc>
    7344:	2301      	movs	r3, #1
    7346:	8023      	strh	r3, [r4, #0]
    7348:	68b8      	ldr	r0, [r7, #8]
    734a:	47a8      	blx	r5
    734c:	b201      	sxth	r1, r0
    734e:	1c38      	adds	r0, r7, #0
    7350:	3014      	adds	r0, #20
    7352:	47b0      	blx	r6
    7354:	68b8      	ldr	r0, [r7, #8]
    7356:	47a8      	blx	r5
    7358:	1c02      	adds	r2, r0, #0
    735a:	1c38      	adds	r0, r7, #0
    735c:	3014      	adds	r0, #20
    735e:	68b9      	ldr	r1, [r7, #8]
    7360:	4b14      	ldr	r3, [pc, #80]	; (73b4 <mqtt_subscribe+0x148>)
    7362:	4798      	blx	r3
    7364:	687d      	ldr	r5, [r7, #4]
    7366:	1c38      	adds	r0, r7, #0
    7368:	b269      	sxtb	r1, r5
    736a:	3014      	adds	r0, #20
    736c:	4b0c      	ldr	r3, [pc, #48]	; (73a0 <mqtt_subscribe+0x134>)
    736e:	4798      	blx	r3
    7370:	1c38      	adds	r0, r7, #0
    7372:	3014      	adds	r0, #20
    7374:	4b10      	ldr	r3, [pc, #64]	; (73b8 <mqtt_subscribe+0x14c>)
    7376:	4798      	blx	r3
    7378:	68fd      	ldr	r5, [r7, #12]
    737a:	2208      	movs	r2, #8
    737c:	782b      	ldrb	r3, [r5, #0]
    737e:	2000      	movs	r0, #0
    7380:	4393      	bics	r3, r2
    7382:	702b      	strb	r3, [r5, #0]
    7384:	e003      	b.n	738e <mqtt_subscribe+0x122>
    7386:	2080      	movs	r0, #128	; 0x80
    7388:	e000      	b.n	738c <mqtt_subscribe+0x120>
    738a:	200b      	movs	r0, #11
    738c:	4240      	negs	r0, r0
    738e:	46bd      	mov	sp, r7
    7390:	b00b      	add	sp, #44	; 0x2c
    7392:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7394:	00009e59 	.word	0x00009e59
    7398:	00006d35 	.word	0x00006d35
    739c:	000063f5 	.word	0x000063f5
    73a0:	00006421 	.word	0x00006421
    73a4:	000021c9 	.word	0x000021c9
    73a8:	000065d5 	.word	0x000065d5
    73ac:	8000007f 	.word	0x8000007f
    73b0:	00006449 	.word	0x00006449
    73b4:	00006461 	.word	0x00006461
    73b8:	00006405 	.word	0x00006405

000073bc <_mqtt_ping>:
    73bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    73be:	23c0      	movs	r3, #192	; 0xc0
    73c0:	a901      	add	r1, sp, #4
    73c2:	2500      	movs	r5, #0
    73c4:	700b      	strb	r3, [r1, #0]
    73c6:	704d      	strb	r5, [r1, #1]
    73c8:	42a8      	cmp	r0, r5
    73ca:	d019      	beq.n	7400 <_mqtt_ping+0x44>
    73cc:	1c04      	adds	r4, r0, #0
    73ce:	3443      	adds	r4, #67	; 0x43
    73d0:	7823      	ldrb	r3, [r4, #0]
    73d2:	079a      	lsls	r2, r3, #30
    73d4:	d516      	bpl.n	7404 <_mqtt_ping+0x48>
    73d6:	071a      	lsls	r2, r3, #28
    73d8:	d416      	bmi.n	7408 <_mqtt_ping+0x4c>
    73da:	2608      	movs	r6, #8
    73dc:	4333      	orrs	r3, r6
    73de:	7023      	strb	r3, [r4, #0]
    73e0:	7880      	ldrb	r0, [r0, #2]
    73e2:	1c2b      	adds	r3, r5, #0
    73e4:	b240      	sxtb	r0, r0
    73e6:	2202      	movs	r2, #2
    73e8:	4f09      	ldr	r7, [pc, #36]	; (7410 <_mqtt_ping+0x54>)
    73ea:	47b8      	blx	r7
    73ec:	1c2b      	adds	r3, r5, #0
    73ee:	42a8      	cmp	r0, r5
    73f0:	da0c      	bge.n	740c <_mqtt_ping+0x50>
    73f2:	7823      	ldrb	r3, [r4, #0]
    73f4:	43b3      	bics	r3, r6
    73f6:	7023      	strb	r3, [r4, #0]
    73f8:	4b06      	ldr	r3, [pc, #24]	; (7414 <_mqtt_ping+0x58>)
    73fa:	4798      	blx	r3
    73fc:	1c03      	adds	r3, r0, #0
    73fe:	e005      	b.n	740c <_mqtt_ping+0x50>
    7400:	2316      	movs	r3, #22
    7402:	e002      	b.n	740a <_mqtt_ping+0x4e>
    7404:	2380      	movs	r3, #128	; 0x80
    7406:	e000      	b.n	740a <_mqtt_ping+0x4e>
    7408:	230b      	movs	r3, #11
    740a:	425b      	negs	r3, r3
    740c:	1c18      	adds	r0, r3, #0
    740e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7410:	00003f2d 	.word	0x00003f2d
    7414:	00006ce5 	.word	0x00006ce5

00007418 <mqtt_timer_callback>:
    7418:	b570      	push	{r4, r5, r6, lr}
    741a:	1c05      	adds	r5, r0, #0
    741c:	b086      	sub	sp, #24
    741e:	1c0e      	adds	r6, r1, #0
    7420:	1c14      	adds	r4, r2, #0
    7422:	2800      	cmp	r0, #0
    7424:	d012      	beq.n	744c <mqtt_timer_callback+0x34>
    7426:	2a00      	cmp	r2, #0
    7428:	d010      	beq.n	744c <mqtt_timer_callback+0x34>
    742a:	1c10      	adds	r0, r2, #0
    742c:	4b08      	ldr	r3, [pc, #32]	; (7450 <mqtt_timer_callback+0x38>)
    742e:	4798      	blx	r3
    7430:	2800      	cmp	r0, #0
    7432:	da04      	bge.n	743e <mqtt_timer_callback+0x26>
    7434:	1c28      	adds	r0, r5, #0
    7436:	1c31      	adds	r1, r6, #0
    7438:	2200      	movs	r2, #0
    743a:	4b06      	ldr	r3, [pc, #24]	; (7454 <mqtt_timer_callback+0x3c>)
    743c:	e005      	b.n	744a <mqtt_timer_callback+0x32>
    743e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7440:	2b00      	cmp	r3, #0
    7442:	d003      	beq.n	744c <mqtt_timer_callback+0x34>
    7444:	1c20      	adds	r0, r4, #0
    7446:	2107      	movs	r1, #7
    7448:	aa01      	add	r2, sp, #4
    744a:	4798      	blx	r3
    744c:	b006      	add	sp, #24
    744e:	bd70      	pop	{r4, r5, r6, pc}
    7450:	000073bd 	.word	0x000073bd
    7454:	00006599 	.word	0x00006599

00007458 <_mqtt_puback>:
    7458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    745a:	2302      	movs	r3, #2
    745c:	ac01      	add	r4, sp, #4
    745e:	2700      	movs	r7, #0
    7460:	7063      	strb	r3, [r4, #1]
    7462:	42b8      	cmp	r0, r7
    7464:	d01e      	beq.n	74a4 <_mqtt_puback+0x4c>
    7466:	1c05      	adds	r5, r0, #0
    7468:	3543      	adds	r5, #67	; 0x43
    746a:	782b      	ldrb	r3, [r5, #0]
    746c:	079e      	lsls	r6, r3, #30
    746e:	d51b      	bpl.n	74a8 <_mqtt_puback+0x50>
    7470:	071e      	lsls	r6, r3, #28
    7472:	d41b      	bmi.n	74ac <_mqtt_puback+0x54>
    7474:	2608      	movs	r6, #8
    7476:	4333      	orrs	r3, r6
    7478:	702b      	strb	r3, [r5, #0]
    747a:	7880      	ldrb	r0, [r0, #2]
    747c:	7021      	strb	r1, [r4, #0]
    747e:	0a11      	lsrs	r1, r2, #8
    7480:	70a1      	strb	r1, [r4, #2]
    7482:	70e2      	strb	r2, [r4, #3]
    7484:	1c21      	adds	r1, r4, #0
    7486:	1c3b      	adds	r3, r7, #0
    7488:	b240      	sxtb	r0, r0
    748a:	2204      	movs	r2, #4
    748c:	4c09      	ldr	r4, [pc, #36]	; (74b4 <_mqtt_puback+0x5c>)
    748e:	47a0      	blx	r4
    7490:	1c3b      	adds	r3, r7, #0
    7492:	42b8      	cmp	r0, r7
    7494:	da0c      	bge.n	74b0 <_mqtt_puback+0x58>
    7496:	782b      	ldrb	r3, [r5, #0]
    7498:	43b3      	bics	r3, r6
    749a:	702b      	strb	r3, [r5, #0]
    749c:	4b06      	ldr	r3, [pc, #24]	; (74b8 <_mqtt_puback+0x60>)
    749e:	4798      	blx	r3
    74a0:	1c03      	adds	r3, r0, #0
    74a2:	e005      	b.n	74b0 <_mqtt_puback+0x58>
    74a4:	2316      	movs	r3, #22
    74a6:	e002      	b.n	74ae <_mqtt_puback+0x56>
    74a8:	2380      	movs	r3, #128	; 0x80
    74aa:	e000      	b.n	74ae <_mqtt_puback+0x56>
    74ac:	230b      	movs	r3, #11
    74ae:	425b      	negs	r3, r3
    74b0:	1c18      	adds	r0, r3, #0
    74b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    74b4:	00003f2d 	.word	0x00003f2d
    74b8:	00006ce5 	.word	0x00006ce5

000074bc <mqtt_clear_conn>:
    74bc:	b530      	push	{r4, r5, lr}
    74be:	1c04      	adds	r4, r0, #0
    74c0:	b087      	sub	sp, #28
    74c2:	2800      	cmp	r0, #0
    74c4:	d01c      	beq.n	7500 <mqtt_clear_conn+0x44>
    74c6:	2002      	movs	r0, #2
    74c8:	4b0e      	ldr	r3, [pc, #56]	; (7504 <mqtt_clear_conn+0x48>)
    74ca:	5620      	ldrsb	r0, [r4, r0]
    74cc:	4798      	blx	r3
    74ce:	1c23      	adds	r3, r4, #0
    74d0:	3343      	adds	r3, #67	; 0x43
    74d2:	781a      	ldrb	r2, [r3, #0]
    74d4:	21fc      	movs	r1, #252	; 0xfc
    74d6:	0795      	lsls	r5, r2, #30
    74d8:	400a      	ands	r2, r1
    74da:	701a      	strb	r2, [r3, #0]
    74dc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    74de:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    74e0:	9301      	str	r3, [sp, #4]
    74e2:	2300      	movs	r3, #0
    74e4:	64e3      	str	r3, [r4, #76]	; 0x4c
    74e6:	6d21      	ldr	r1, [r4, #80]	; 0x50
    74e8:	4b07      	ldr	r3, [pc, #28]	; (7508 <mqtt_clear_conn+0x4c>)
    74ea:	4798      	blx	r3
    74ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
    74ee:	0fed      	lsrs	r5, r5, #31
    74f0:	2b00      	cmp	r3, #0
    74f2:	d005      	beq.n	7500 <mqtt_clear_conn+0x44>
    74f4:	2d00      	cmp	r5, #0
    74f6:	d003      	beq.n	7500 <mqtt_clear_conn+0x44>
    74f8:	1c20      	adds	r0, r4, #0
    74fa:	2105      	movs	r1, #5
    74fc:	aa01      	add	r2, sp, #4
    74fe:	4798      	blx	r3
    7500:	b007      	add	sp, #28
    7502:	bd30      	pop	{r4, r5, pc}
    7504:	00004059 	.word	0x00004059
    7508:	000065c5 	.word	0x000065c5

0000750c <mqtt_disconnect>:
    750c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    750e:	23e0      	movs	r3, #224	; 0xe0
    7510:	ae01      	add	r6, sp, #4
    7512:	2700      	movs	r7, #0
    7514:	1c05      	adds	r5, r0, #0
    7516:	7033      	strb	r3, [r6, #0]
    7518:	7077      	strb	r7, [r6, #1]
    751a:	42b8      	cmp	r0, r7
    751c:	d036      	beq.n	758c <mqtt_disconnect+0x80>
    751e:	1c04      	adds	r4, r0, #0
    7520:	3443      	adds	r4, #67	; 0x43
    7522:	7823      	ldrb	r3, [r4, #0]
    7524:	079a      	lsls	r2, r3, #30
    7526:	d533      	bpl.n	7590 <mqtt_disconnect+0x84>
    7528:	42b9      	cmp	r1, r7
    752a:	d12b      	bne.n	7584 <mqtt_disconnect+0x78>
    752c:	071a      	lsls	r2, r3, #28
    752e:	d414      	bmi.n	755a <mqtt_disconnect+0x4e>
    7530:	7823      	ldrb	r3, [r4, #0]
    7532:	2210      	movs	r2, #16
    7534:	4313      	orrs	r3, r2
    7536:	2708      	movs	r7, #8
    7538:	433b      	orrs	r3, r7
    753a:	7023      	strb	r3, [r4, #0]
    753c:	2002      	movs	r0, #2
    753e:	5628      	ldrsb	r0, [r5, r0]
    7540:	1c31      	adds	r1, r6, #0
    7542:	2202      	movs	r2, #2
    7544:	2300      	movs	r3, #0
    7546:	4d15      	ldr	r5, [pc, #84]	; (759c <mqtt_disconnect+0x90>)
    7548:	47a8      	blx	r5
    754a:	2800      	cmp	r0, #0
    754c:	da14      	bge.n	7578 <mqtt_disconnect+0x6c>
    754e:	7823      	ldrb	r3, [r4, #0]
    7550:	43bb      	bics	r3, r7
    7552:	7023      	strb	r3, [r4, #0]
    7554:	4b12      	ldr	r3, [pc, #72]	; (75a0 <mqtt_disconnect+0x94>)
    7556:	4798      	blx	r3
    7558:	e01e      	b.n	7598 <mqtt_disconnect+0x8c>
    755a:	1c03      	adds	r3, r0, #0
    755c:	3370      	adds	r3, #112	; 0x70
    755e:	781b      	ldrb	r3, [r3, #0]
    7560:	2b00      	cmp	r3, #0
    7562:	d117      	bne.n	7594 <mqtt_disconnect+0x88>
    7564:	7823      	ldrb	r3, [r4, #0]
    7566:	071a      	lsls	r2, r3, #28
    7568:	d5e2      	bpl.n	7530 <mqtt_disconnect+0x24>
    756a:	4b0e      	ldr	r3, [pc, #56]	; (75a4 <mqtt_disconnect+0x98>)
    756c:	2000      	movs	r0, #0
    756e:	4798      	blx	r3
    7570:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    7572:	4b0d      	ldr	r3, [pc, #52]	; (75a8 <mqtt_disconnect+0x9c>)
    7574:	4798      	blx	r3
    7576:	e7f5      	b.n	7564 <mqtt_disconnect+0x58>
    7578:	7823      	ldrb	r3, [r4, #0]
    757a:	2202      	movs	r2, #2
    757c:	4393      	bics	r3, r2
    757e:	7023      	strb	r3, [r4, #0]
    7580:	2000      	movs	r0, #0
    7582:	e009      	b.n	7598 <mqtt_disconnect+0x8c>
    7584:	4b09      	ldr	r3, [pc, #36]	; (75ac <mqtt_disconnect+0xa0>)
    7586:	4798      	blx	r3
    7588:	1c38      	adds	r0, r7, #0
    758a:	e005      	b.n	7598 <mqtt_disconnect+0x8c>
    758c:	2016      	movs	r0, #22
    758e:	e002      	b.n	7596 <mqtt_disconnect+0x8a>
    7590:	2080      	movs	r0, #128	; 0x80
    7592:	e000      	b.n	7596 <mqtt_disconnect+0x8a>
    7594:	200b      	movs	r0, #11
    7596:	4240      	negs	r0, r0
    7598:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    759a:	46c0      	nop			; (mov r8, r8)
    759c:	00003f2d 	.word	0x00003f2d
    75a0:	00006ce5 	.word	0x00006ce5
    75a4:	000021c9 	.word	0x000021c9
    75a8:	000065d5 	.word	0x000065d5
    75ac:	000074bd 	.word	0x000074bd

000075b0 <_mqtt_recv_handler>:
    75b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    75b2:	1c04      	adds	r4, r0, #0
    75b4:	6e40      	ldr	r0, [r0, #100]	; 0x64
    75b6:	230f      	movs	r3, #15
    75b8:	7802      	ldrb	r2, [r0, #0]
    75ba:	b087      	sub	sp, #28
    75bc:	1c15      	adds	r5, r2, #0
    75be:	439d      	bics	r5, r3
    75c0:	2d50      	cmp	r5, #80	; 0x50
    75c2:	d100      	bne.n	75c6 <_mqtt_recv_handler+0x16>
    75c4:	e098      	b.n	76f8 <_mqtt_recv_handler+0x148>
    75c6:	d808      	bhi.n	75da <_mqtt_recv_handler+0x2a>
    75c8:	2d30      	cmp	r5, #48	; 0x30
    75ca:	d03f      	beq.n	764c <_mqtt_recv_handler+0x9c>
    75cc:	2d40      	cmp	r5, #64	; 0x40
    75ce:	d100      	bne.n	75d2 <_mqtt_recv_handler+0x22>
    75d0:	e0b3      	b.n	773a <_mqtt_recv_handler+0x18a>
    75d2:	2d20      	cmp	r5, #32
    75d4:	d000      	beq.n	75d8 <_mqtt_recv_handler+0x28>
    75d6:	e0c3      	b.n	7760 <_mqtt_recv_handler+0x1b0>
    75d8:	e00e      	b.n	75f8 <_mqtt_recv_handler+0x48>
    75da:	2d70      	cmp	r5, #112	; 0x70
    75dc:	d100      	bne.n	75e0 <_mqtt_recv_handler+0x30>
    75de:	e0ac      	b.n	773a <_mqtt_recv_handler+0x18a>
    75e0:	d803      	bhi.n	75ea <_mqtt_recv_handler+0x3a>
    75e2:	2d60      	cmp	r5, #96	; 0x60
    75e4:	d100      	bne.n	75e8 <_mqtt_recv_handler+0x38>
    75e6:	e096      	b.n	7716 <_mqtt_recv_handler+0x166>
    75e8:	e0ba      	b.n	7760 <_mqtt_recv_handler+0x1b0>
    75ea:	2d90      	cmp	r5, #144	; 0x90
    75ec:	d100      	bne.n	75f0 <_mqtt_recv_handler+0x40>
    75ee:	e0aa      	b.n	7746 <_mqtt_recv_handler+0x196>
    75f0:	2db0      	cmp	r5, #176	; 0xb0
    75f2:	d100      	bne.n	75f6 <_mqtt_recv_handler+0x46>
    75f4:	e0ad      	b.n	7752 <_mqtt_recv_handler+0x1a2>
    75f6:	e0b3      	b.n	7760 <_mqtt_recv_handler+0x1b0>
    75f8:	aa01      	add	r2, sp, #4
    75fa:	2303      	movs	r3, #3
    75fc:	2901      	cmp	r1, #1
    75fe:	d900      	bls.n	7602 <_mqtt_recv_handler+0x52>
    7600:	78c3      	ldrb	r3, [r0, #3]
    7602:	7013      	strb	r3, [r2, #0]
    7604:	7813      	ldrb	r3, [r2, #0]
    7606:	2b00      	cmp	r3, #0
    7608:	d00d      	beq.n	7626 <_mqtt_recv_handler+0x76>
    760a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    760c:	2b00      	cmp	r3, #0
    760e:	d002      	beq.n	7616 <_mqtt_recv_handler+0x66>
    7610:	1c20      	adds	r0, r4, #0
    7612:	2101      	movs	r1, #1
    7614:	4798      	blx	r3
    7616:	236f      	movs	r3, #111	; 0x6f
    7618:	425b      	negs	r3, r3
    761a:	64e3      	str	r3, [r4, #76]	; 0x4c
    761c:	1c20      	adds	r0, r4, #0
    761e:	2100      	movs	r1, #0
    7620:	4b50      	ldr	r3, [pc, #320]	; (7764 <_mqtt_recv_handler+0x1b4>)
    7622:	4798      	blx	r3
    7624:	e09c      	b.n	7760 <_mqtt_recv_handler+0x1b0>
    7626:	1c23      	adds	r3, r4, #0
    7628:	3343      	adds	r3, #67	; 0x43
    762a:	7819      	ldrb	r1, [r3, #0]
    762c:	0789      	lsls	r1, r1, #30
    762e:	0fc9      	lsrs	r1, r1, #31
    7630:	d105      	bne.n	763e <_mqtt_recv_handler+0x8e>
    7632:	781a      	ldrb	r2, [r3, #0]
    7634:	64e1      	str	r1, [r4, #76]	; 0x4c
    7636:	2102      	movs	r1, #2
    7638:	430a      	orrs	r2, r1
    763a:	701a      	strb	r2, [r3, #0]
    763c:	e090      	b.n	7760 <_mqtt_recv_handler+0x1b0>
    763e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7640:	2b00      	cmp	r3, #0
    7642:	d100      	bne.n	7646 <_mqtt_recv_handler+0x96>
    7644:	e08c      	b.n	7760 <_mqtt_recv_handler+0x1b0>
    7646:	1c20      	adds	r0, r4, #0
    7648:	2101      	movs	r1, #1
    764a:	e088      	b.n	775e <_mqtt_recv_handler+0x1ae>
    764c:	ad01      	add	r5, sp, #4
    764e:	0713      	lsls	r3, r2, #28
    7650:	7c2a      	ldrb	r2, [r5, #16]
    7652:	0fdb      	lsrs	r3, r3, #31
    7654:	2604      	movs	r6, #4
    7656:	009b      	lsls	r3, r3, #2
    7658:	43b2      	bics	r2, r6
    765a:	431a      	orrs	r2, r3
    765c:	742a      	strb	r2, [r5, #16]
    765e:	7807      	ldrb	r7, [r0, #0]
    7660:	2303      	movs	r3, #3
    7662:	b2d2      	uxtb	r2, r2
    7664:	087f      	lsrs	r7, r7, #1
    7666:	439a      	bics	r2, r3
    7668:	401f      	ands	r7, r3
    766a:	1c13      	adds	r3, r2, #0
    766c:	433b      	orrs	r3, r7
    766e:	742b      	strb	r3, [r5, #16]
    7670:	1c43      	adds	r3, r0, #1
    7672:	7818      	ldrb	r0, [r3, #0]
    7674:	1c5a      	adds	r2, r3, #1
    7676:	287f      	cmp	r0, #127	; 0x7f
    7678:	d901      	bls.n	767e <_mqtt_recv_handler+0xce>
    767a:	1c13      	adds	r3, r2, #0
    767c:	e7f9      	b.n	7672 <_mqtt_recv_handler+0xc2>
    767e:	7858      	ldrb	r0, [r3, #1]
    7680:	789e      	ldrb	r6, [r3, #2]
    7682:	0200      	lsls	r0, r0, #8
    7684:	4330      	orrs	r0, r6
    7686:	3303      	adds	r3, #3
    7688:	2600      	movs	r6, #0
    768a:	6068      	str	r0, [r5, #4]
    768c:	9301      	str	r3, [sp, #4]
    768e:	1818      	adds	r0, r3, r0
    7690:	42b7      	cmp	r7, r6
    7692:	d004      	beq.n	769e <_mqtt_recv_handler+0xee>
    7694:	7806      	ldrb	r6, [r0, #0]
    7696:	7843      	ldrb	r3, [r0, #1]
    7698:	0236      	lsls	r6, r6, #8
    769a:	431e      	orrs	r6, r3
    769c:	3002      	adds	r0, #2
    769e:	1851      	adds	r1, r2, r1
    76a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    76a2:	60a8      	str	r0, [r5, #8]
    76a4:	1a08      	subs	r0, r1, r0
    76a6:	60e8      	str	r0, [r5, #12]
    76a8:	2b00      	cmp	r3, #0
    76aa:	d003      	beq.n	76b4 <_mqtt_recv_handler+0x104>
    76ac:	1c20      	adds	r0, r4, #0
    76ae:	2106      	movs	r1, #6
    76b0:	1c2a      	adds	r2, r5, #0
    76b2:	4798      	blx	r3
    76b4:	7c2b      	ldrb	r3, [r5, #16]
    76b6:	079b      	lsls	r3, r3, #30
    76b8:	0f9b      	lsrs	r3, r3, #30
    76ba:	2b01      	cmp	r3, #1
    76bc:	d10b      	bne.n	76d6 <_mqtt_recv_handler+0x126>
    76be:	b2b6      	uxth	r6, r6
    76c0:	1c20      	adds	r0, r4, #0
    76c2:	2140      	movs	r1, #64	; 0x40
    76c4:	1c32      	adds	r2, r6, #0
    76c6:	4b28      	ldr	r3, [pc, #160]	; (7768 <_mqtt_recv_handler+0x1b8>)
    76c8:	4798      	blx	r3
    76ca:	2800      	cmp	r0, #0
    76cc:	d048      	beq.n	7760 <_mqtt_recv_handler+0x1b0>
    76ce:	1c23      	adds	r3, r4, #0
    76d0:	3348      	adds	r3, #72	; 0x48
    76d2:	2240      	movs	r2, #64	; 0x40
    76d4:	e00c      	b.n	76f0 <_mqtt_recv_handler+0x140>
    76d6:	2b02      	cmp	r3, #2
    76d8:	d142      	bne.n	7760 <_mqtt_recv_handler+0x1b0>
    76da:	b2b6      	uxth	r6, r6
    76dc:	1c20      	adds	r0, r4, #0
    76de:	2150      	movs	r1, #80	; 0x50
    76e0:	1c32      	adds	r2, r6, #0
    76e2:	4b21      	ldr	r3, [pc, #132]	; (7768 <_mqtt_recv_handler+0x1b8>)
    76e4:	4798      	blx	r3
    76e6:	2800      	cmp	r0, #0
    76e8:	d03a      	beq.n	7760 <_mqtt_recv_handler+0x1b0>
    76ea:	1c23      	adds	r3, r4, #0
    76ec:	3348      	adds	r3, #72	; 0x48
    76ee:	2250      	movs	r2, #80	; 0x50
    76f0:	344a      	adds	r4, #74	; 0x4a
    76f2:	701a      	strb	r2, [r3, #0]
    76f4:	8026      	strh	r6, [r4, #0]
    76f6:	e033      	b.n	7760 <_mqtt_recv_handler+0x1b0>
    76f8:	7885      	ldrb	r5, [r0, #2]
    76fa:	78c3      	ldrb	r3, [r0, #3]
    76fc:	022d      	lsls	r5, r5, #8
    76fe:	431d      	orrs	r5, r3
    7700:	1c20      	adds	r0, r4, #0
    7702:	2162      	movs	r1, #98	; 0x62
    7704:	1c2a      	adds	r2, r5, #0
    7706:	4b18      	ldr	r3, [pc, #96]	; (7768 <_mqtt_recv_handler+0x1b8>)
    7708:	4798      	blx	r3
    770a:	2800      	cmp	r0, #0
    770c:	d028      	beq.n	7760 <_mqtt_recv_handler+0x1b0>
    770e:	1c23      	adds	r3, r4, #0
    7710:	3348      	adds	r3, #72	; 0x48
    7712:	2260      	movs	r2, #96	; 0x60
    7714:	e00d      	b.n	7732 <_mqtt_recv_handler+0x182>
    7716:	7885      	ldrb	r5, [r0, #2]
    7718:	78c3      	ldrb	r3, [r0, #3]
    771a:	022d      	lsls	r5, r5, #8
    771c:	431d      	orrs	r5, r3
    771e:	1c20      	adds	r0, r4, #0
    7720:	2170      	movs	r1, #112	; 0x70
    7722:	1c2a      	adds	r2, r5, #0
    7724:	4b10      	ldr	r3, [pc, #64]	; (7768 <_mqtt_recv_handler+0x1b8>)
    7726:	4798      	blx	r3
    7728:	2800      	cmp	r0, #0
    772a:	d019      	beq.n	7760 <_mqtt_recv_handler+0x1b0>
    772c:	1c23      	adds	r3, r4, #0
    772e:	3348      	adds	r3, #72	; 0x48
    7730:	2270      	movs	r2, #112	; 0x70
    7732:	344a      	adds	r4, #74	; 0x4a
    7734:	701a      	strb	r2, [r3, #0]
    7736:	8025      	strh	r5, [r4, #0]
    7738:	e012      	b.n	7760 <_mqtt_recv_handler+0x1b0>
    773a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    773c:	2b00      	cmp	r3, #0
    773e:	d00f      	beq.n	7760 <_mqtt_recv_handler+0x1b0>
    7740:	1c20      	adds	r0, r4, #0
    7742:	2102      	movs	r1, #2
    7744:	e00a      	b.n	775c <_mqtt_recv_handler+0x1ac>
    7746:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7748:	2b00      	cmp	r3, #0
    774a:	d009      	beq.n	7760 <_mqtt_recv_handler+0x1b0>
    774c:	1c20      	adds	r0, r4, #0
    774e:	2103      	movs	r1, #3
    7750:	e004      	b.n	775c <_mqtt_recv_handler+0x1ac>
    7752:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7754:	2b00      	cmp	r3, #0
    7756:	d003      	beq.n	7760 <_mqtt_recv_handler+0x1b0>
    7758:	1c20      	adds	r0, r4, #0
    775a:	2104      	movs	r1, #4
    775c:	aa01      	add	r2, sp, #4
    775e:	4798      	blx	r3
    7760:	b007      	add	sp, #28
    7762:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7764:	0000750d 	.word	0x0000750d
    7768:	00007459 	.word	0x00007459

0000776c <mqtt_recv_packet>:
    776c:	b538      	push	{r3, r4, r5, lr}
    776e:	1e04      	subs	r4, r0, #0
    7770:	d017      	beq.n	77a2 <mqtt_recv_packet+0x36>
    7772:	6c42      	ldr	r2, [r0, #68]	; 0x44
    7774:	6e83      	ldr	r3, [r0, #104]	; 0x68
    7776:	429a      	cmp	r2, r3
    7778:	d906      	bls.n	7788 <mqtt_recv_packet+0x1c>
    777a:	238b      	movs	r3, #139	; 0x8b
    777c:	425b      	negs	r3, r3
    777e:	64c3      	str	r3, [r0, #76]	; 0x4c
    7780:	2100      	movs	r1, #0
    7782:	4b08      	ldr	r3, [pc, #32]	; (77a4 <mqtt_recv_packet+0x38>)
    7784:	4798      	blx	r3
    7786:	e00c      	b.n	77a2 <mqtt_recv_packet+0x36>
    7788:	6c62      	ldr	r2, [r4, #68]	; 0x44
    778a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    778c:	2002      	movs	r0, #2
    778e:	1899      	adds	r1, r3, r2
    7790:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    7792:	5620      	ldrsb	r0, [r4, r0]
    7794:	1a9a      	subs	r2, r3, r2
    7796:	b292      	uxth	r2, r2
    7798:	2300      	movs	r3, #0
    779a:	4d03      	ldr	r5, [pc, #12]	; (77a8 <mqtt_recv_packet+0x3c>)
    779c:	47a8      	blx	r5
    779e:	2800      	cmp	r0, #0
    77a0:	d1f2      	bne.n	7788 <mqtt_recv_packet+0x1c>
    77a2:	bd38      	pop	{r3, r4, r5, pc}
    77a4:	0000750d 	.word	0x0000750d
    77a8:	00003fc5 	.word	0x00003fc5

000077ac <mqtt_recved_packet>:
    77ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    77ae:	1e04      	subs	r4, r0, #0
    77b0:	d042      	beq.n	7838 <mqtt_recved_packet+0x8c>
    77b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    77b4:	6e67      	ldr	r7, [r4, #100]	; 0x64
    77b6:	18ca      	adds	r2, r1, r3
    77b8:	2301      	movs	r3, #1
    77ba:	9701      	str	r7, [sp, #4]
    77bc:	6462      	str	r2, [r4, #68]	; 0x44
    77be:	2600      	movs	r6, #0
    77c0:	1c1d      	adds	r5, r3, #0
    77c2:	42a9      	cmp	r1, r5
    77c4:	dc03      	bgt.n	77ce <mqtt_recved_packet+0x22>
    77c6:	1c20      	adds	r0, r4, #0
    77c8:	4b1c      	ldr	r3, [pc, #112]	; (783c <mqtt_recved_packet+0x90>)
    77ca:	4798      	blx	r3
    77cc:	e034      	b.n	7838 <mqtt_recved_packet+0x8c>
    77ce:	9f01      	ldr	r7, [sp, #4]
    77d0:	5d78      	ldrb	r0, [r7, r5]
    77d2:	01df      	lsls	r7, r3, #7
    77d4:	46bc      	mov	ip, r7
    77d6:	2d03      	cmp	r5, #3
    77d8:	d101      	bne.n	77de <mqtt_recved_packet+0x32>
    77da:	234d      	movs	r3, #77	; 0x4d
    77dc:	e00e      	b.n	77fc <mqtt_recved_packet+0x50>
    77de:	277f      	movs	r7, #127	; 0x7f
    77e0:	4007      	ands	r7, r0
    77e2:	437b      	muls	r3, r7
    77e4:	b240      	sxtb	r0, r0
    77e6:	3501      	adds	r5, #1
    77e8:	18f6      	adds	r6, r6, r3
    77ea:	2800      	cmp	r0, #0
    77ec:	da01      	bge.n	77f2 <mqtt_recved_packet+0x46>
    77ee:	4663      	mov	r3, ip
    77f0:	e7e7      	b.n	77c2 <mqtt_recved_packet+0x16>
    77f2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    77f4:	19af      	adds	r7, r5, r6
    77f6:	429f      	cmp	r7, r3
    77f8:	d907      	bls.n	780a <mqtt_recved_packet+0x5e>
    77fa:	238b      	movs	r3, #139	; 0x8b
    77fc:	425b      	negs	r3, r3
    77fe:	64e3      	str	r3, [r4, #76]	; 0x4c
    7800:	1c20      	adds	r0, r4, #0
    7802:	2100      	movs	r1, #0
    7804:	4b0e      	ldr	r3, [pc, #56]	; (7840 <mqtt_recved_packet+0x94>)
    7806:	4798      	blx	r3
    7808:	e016      	b.n	7838 <mqtt_recved_packet+0x8c>
    780a:	42ba      	cmp	r2, r7
    780c:	d314      	bcc.n	7838 <mqtt_recved_packet+0x8c>
    780e:	4b0d      	ldr	r3, [pc, #52]	; (7844 <mqtt_recved_packet+0x98>)
    7810:	1c20      	adds	r0, r4, #0
    7812:	1c31      	adds	r1, r6, #0
    7814:	4798      	blx	r3
    7816:	6c63      	ldr	r3, [r4, #68]	; 0x44
    7818:	42bb      	cmp	r3, r7
    781a:	d102      	bne.n	7822 <mqtt_recved_packet+0x76>
    781c:	2300      	movs	r3, #0
    781e:	6463      	str	r3, [r4, #68]	; 0x44
    7820:	e00a      	b.n	7838 <mqtt_recved_packet+0x8c>
    7822:	1b9e      	subs	r6, r3, r6
    7824:	9b01      	ldr	r3, [sp, #4]
    7826:	1b75      	subs	r5, r6, r5
    7828:	19d9      	adds	r1, r3, r7
    782a:	1c18      	adds	r0, r3, #0
    782c:	1c2a      	adds	r2, r5, #0
    782e:	4b06      	ldr	r3, [pc, #24]	; (7848 <mqtt_recved_packet+0x9c>)
    7830:	4798      	blx	r3
    7832:	6465      	str	r5, [r4, #68]	; 0x44
    7834:	2100      	movs	r1, #0
    7836:	e7bc      	b.n	77b2 <mqtt_recved_packet+0x6>
    7838:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    783a:	46c0      	nop			; (mov r8, r8)
    783c:	0000776d 	.word	0x0000776d
    7840:	0000750d 	.word	0x0000750d
    7844:	000075b1 	.word	0x000075b1
    7848:	000099ab 	.word	0x000099ab

0000784c <mqtt_socket_event_handler>:
    784c:	b570      	push	{r4, r5, r6, lr}
    784e:	4d37      	ldr	r5, [pc, #220]	; (792c <mqtt_socket_event_handler+0xe0>)
    7850:	0086      	lsls	r6, r0, #2
    7852:	5974      	ldr	r4, [r6, r5]
    7854:	b086      	sub	sp, #24
    7856:	2c00      	cmp	r4, #0
    7858:	d066      	beq.n	7928 <mqtt_socket_event_handler+0xdc>
    785a:	2906      	cmp	r1, #6
    785c:	d02b      	beq.n	78b6 <mqtt_socket_event_handler+0x6a>
    785e:	2907      	cmp	r1, #7
    7860:	d039      	beq.n	78d6 <mqtt_socket_event_handler+0x8a>
    7862:	2905      	cmp	r1, #5
    7864:	d160      	bne.n	7928 <mqtt_socket_event_handler+0xdc>
    7866:	2001      	movs	r0, #1
    7868:	5610      	ldrsb	r0, [r2, r0]
    786a:	4b31      	ldr	r3, [pc, #196]	; (7930 <mqtt_socket_event_handler+0xe4>)
    786c:	4798      	blx	r3
    786e:	9001      	str	r0, [sp, #4]
    7870:	2800      	cmp	r0, #0
    7872:	da06      	bge.n	7882 <mqtt_socket_event_handler+0x36>
    7874:	2002      	movs	r0, #2
    7876:	4b2f      	ldr	r3, [pc, #188]	; (7934 <mqtt_socket_event_handler+0xe8>)
    7878:	5620      	ldrsb	r0, [r4, r0]
    787a:	4798      	blx	r3
    787c:	2300      	movs	r3, #0
    787e:	5173      	str	r3, [r6, r5]
    7880:	e011      	b.n	78a6 <mqtt_socket_event_handler+0x5a>
    7882:	1c23      	adds	r3, r4, #0
    7884:	3343      	adds	r3, #67	; 0x43
    7886:	781a      	ldrb	r2, [r3, #0]
    7888:	2101      	movs	r1, #1
    788a:	430a      	orrs	r2, r1
    788c:	701a      	strb	r2, [r3, #0]
    788e:	331d      	adds	r3, #29
    7890:	881b      	ldrh	r3, [r3, #0]
    7892:	2b00      	cmp	r3, #0
    7894:	d004      	beq.n	78a0 <mqtt_socket_event_handler+0x54>
    7896:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    7898:	6d21      	ldr	r1, [r4, #80]	; 0x50
    789a:	2200      	movs	r2, #0
    789c:	4b26      	ldr	r3, [pc, #152]	; (7938 <mqtt_socket_event_handler+0xec>)
    789e:	4798      	blx	r3
    78a0:	1c20      	adds	r0, r4, #0
    78a2:	4b26      	ldr	r3, [pc, #152]	; (793c <mqtt_socket_event_handler+0xf0>)
    78a4:	4798      	blx	r3
    78a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    78a8:	2b00      	cmp	r3, #0
    78aa:	d03d      	beq.n	7928 <mqtt_socket_event_handler+0xdc>
    78ac:	1c20      	adds	r0, r4, #0
    78ae:	2100      	movs	r1, #0
    78b0:	aa01      	add	r2, sp, #4
    78b2:	4798      	blx	r3
    78b4:	e038      	b.n	7928 <mqtt_socket_event_handler+0xdc>
    78b6:	2304      	movs	r3, #4
    78b8:	5ed1      	ldrsh	r1, [r2, r3]
    78ba:	2900      	cmp	r1, #0
    78bc:	dd03      	ble.n	78c6 <mqtt_socket_event_handler+0x7a>
    78be:	1c20      	adds	r0, r4, #0
    78c0:	4b1f      	ldr	r3, [pc, #124]	; (7940 <mqtt_socket_event_handler+0xf4>)
    78c2:	4798      	blx	r3
    78c4:	e003      	b.n	78ce <mqtt_socket_event_handler+0x82>
    78c6:	1c0b      	adds	r3, r1, #0
    78c8:	1c08      	adds	r0, r1, #0
    78ca:	330d      	adds	r3, #13
    78cc:	d11a      	bne.n	7904 <mqtt_socket_event_handler+0xb8>
    78ce:	4b1b      	ldr	r3, [pc, #108]	; (793c <mqtt_socket_event_handler+0xf0>)
    78d0:	1c20      	adds	r0, r4, #0
    78d2:	4798      	blx	r3
    78d4:	e028      	b.n	7928 <mqtt_socket_event_handler+0xdc>
    78d6:	1c23      	adds	r3, r4, #0
    78d8:	3343      	adds	r3, #67	; 0x43
    78da:	8810      	ldrh	r0, [r2, #0]
    78dc:	781a      	ldrb	r2, [r3, #0]
    78de:	0751      	lsls	r1, r2, #29
    78e0:	d402      	bmi.n	78e8 <mqtt_socket_event_handler+0x9c>
    78e2:	2108      	movs	r1, #8
    78e4:	438a      	bics	r2, r1
    78e6:	701a      	strb	r2, [r3, #0]
    78e8:	781a      	ldrb	r2, [r3, #0]
    78ea:	2104      	movs	r1, #4
    78ec:	438a      	bics	r2, r1
    78ee:	701a      	strb	r2, [r3, #0]
    78f0:	06d3      	lsls	r3, r2, #27
    78f2:	0fde      	lsrs	r6, r3, #31
    78f4:	b200      	sxth	r0, r0
    78f6:	2b00      	cmp	r3, #0
    78f8:	db02      	blt.n	7900 <mqtt_socket_event_handler+0xb4>
    78fa:	2800      	cmp	r0, #0
    78fc:	da08      	bge.n	7910 <mqtt_socket_event_handler+0xc4>
    78fe:	e001      	b.n	7904 <mqtt_socket_event_handler+0xb8>
    7900:	2800      	cmp	r0, #0
    7902:	da02      	bge.n	790a <mqtt_socket_event_handler+0xbe>
    7904:	4b0a      	ldr	r3, [pc, #40]	; (7930 <mqtt_socket_event_handler+0xe4>)
    7906:	4798      	blx	r3
    7908:	64e0      	str	r0, [r4, #76]	; 0x4c
    790a:	1c20      	adds	r0, r4, #0
    790c:	4b0d      	ldr	r3, [pc, #52]	; (7944 <mqtt_socket_event_handler+0xf8>)
    790e:	e7e0      	b.n	78d2 <mqtt_socket_event_handler+0x86>
    7910:	1c25      	adds	r5, r4, #0
    7912:	3548      	adds	r5, #72	; 0x48
    7914:	7829      	ldrb	r1, [r5, #0]
    7916:	2900      	cmp	r1, #0
    7918:	d006      	beq.n	7928 <mqtt_socket_event_handler+0xdc>
    791a:	1c23      	adds	r3, r4, #0
    791c:	334a      	adds	r3, #74	; 0x4a
    791e:	881a      	ldrh	r2, [r3, #0]
    7920:	1c20      	adds	r0, r4, #0
    7922:	4b09      	ldr	r3, [pc, #36]	; (7948 <mqtt_socket_event_handler+0xfc>)
    7924:	4798      	blx	r3
    7926:	702e      	strb	r6, [r5, #0]
    7928:	b006      	add	sp, #24
    792a:	bd70      	pop	{r4, r5, r6, pc}
    792c:	20000254 	.word	0x20000254
    7930:	00006ce5 	.word	0x00006ce5
    7934:	00004059 	.word	0x00004059
    7938:	00006599 	.word	0x00006599
    793c:	0000776d 	.word	0x0000776d
    7940:	000077ad 	.word	0x000077ad
    7944:	000074bd 	.word	0x000074bd
    7948:	00007459 	.word	0x00007459

0000794c <__gnu_thumb1_case_uqi>:
    794c:	b402      	push	{r1}
    794e:	4671      	mov	r1, lr
    7950:	0849      	lsrs	r1, r1, #1
    7952:	0049      	lsls	r1, r1, #1
    7954:	5c09      	ldrb	r1, [r1, r0]
    7956:	0049      	lsls	r1, r1, #1
    7958:	448e      	add	lr, r1
    795a:	bc02      	pop	{r1}
    795c:	4770      	bx	lr
    795e:	46c0      	nop			; (mov r8, r8)

00007960 <__udivsi3>:
    7960:	2200      	movs	r2, #0
    7962:	0843      	lsrs	r3, r0, #1
    7964:	428b      	cmp	r3, r1
    7966:	d374      	bcc.n	7a52 <__udivsi3+0xf2>
    7968:	0903      	lsrs	r3, r0, #4
    796a:	428b      	cmp	r3, r1
    796c:	d35f      	bcc.n	7a2e <__udivsi3+0xce>
    796e:	0a03      	lsrs	r3, r0, #8
    7970:	428b      	cmp	r3, r1
    7972:	d344      	bcc.n	79fe <__udivsi3+0x9e>
    7974:	0b03      	lsrs	r3, r0, #12
    7976:	428b      	cmp	r3, r1
    7978:	d328      	bcc.n	79cc <__udivsi3+0x6c>
    797a:	0c03      	lsrs	r3, r0, #16
    797c:	428b      	cmp	r3, r1
    797e:	d30d      	bcc.n	799c <__udivsi3+0x3c>
    7980:	22ff      	movs	r2, #255	; 0xff
    7982:	0209      	lsls	r1, r1, #8
    7984:	ba12      	rev	r2, r2
    7986:	0c03      	lsrs	r3, r0, #16
    7988:	428b      	cmp	r3, r1
    798a:	d302      	bcc.n	7992 <__udivsi3+0x32>
    798c:	1212      	asrs	r2, r2, #8
    798e:	0209      	lsls	r1, r1, #8
    7990:	d065      	beq.n	7a5e <__udivsi3+0xfe>
    7992:	0b03      	lsrs	r3, r0, #12
    7994:	428b      	cmp	r3, r1
    7996:	d319      	bcc.n	79cc <__udivsi3+0x6c>
    7998:	e000      	b.n	799c <__udivsi3+0x3c>
    799a:	0a09      	lsrs	r1, r1, #8
    799c:	0bc3      	lsrs	r3, r0, #15
    799e:	428b      	cmp	r3, r1
    79a0:	d301      	bcc.n	79a6 <__udivsi3+0x46>
    79a2:	03cb      	lsls	r3, r1, #15
    79a4:	1ac0      	subs	r0, r0, r3
    79a6:	4152      	adcs	r2, r2
    79a8:	0b83      	lsrs	r3, r0, #14
    79aa:	428b      	cmp	r3, r1
    79ac:	d301      	bcc.n	79b2 <__udivsi3+0x52>
    79ae:	038b      	lsls	r3, r1, #14
    79b0:	1ac0      	subs	r0, r0, r3
    79b2:	4152      	adcs	r2, r2
    79b4:	0b43      	lsrs	r3, r0, #13
    79b6:	428b      	cmp	r3, r1
    79b8:	d301      	bcc.n	79be <__udivsi3+0x5e>
    79ba:	034b      	lsls	r3, r1, #13
    79bc:	1ac0      	subs	r0, r0, r3
    79be:	4152      	adcs	r2, r2
    79c0:	0b03      	lsrs	r3, r0, #12
    79c2:	428b      	cmp	r3, r1
    79c4:	d301      	bcc.n	79ca <__udivsi3+0x6a>
    79c6:	030b      	lsls	r3, r1, #12
    79c8:	1ac0      	subs	r0, r0, r3
    79ca:	4152      	adcs	r2, r2
    79cc:	0ac3      	lsrs	r3, r0, #11
    79ce:	428b      	cmp	r3, r1
    79d0:	d301      	bcc.n	79d6 <__udivsi3+0x76>
    79d2:	02cb      	lsls	r3, r1, #11
    79d4:	1ac0      	subs	r0, r0, r3
    79d6:	4152      	adcs	r2, r2
    79d8:	0a83      	lsrs	r3, r0, #10
    79da:	428b      	cmp	r3, r1
    79dc:	d301      	bcc.n	79e2 <__udivsi3+0x82>
    79de:	028b      	lsls	r3, r1, #10
    79e0:	1ac0      	subs	r0, r0, r3
    79e2:	4152      	adcs	r2, r2
    79e4:	0a43      	lsrs	r3, r0, #9
    79e6:	428b      	cmp	r3, r1
    79e8:	d301      	bcc.n	79ee <__udivsi3+0x8e>
    79ea:	024b      	lsls	r3, r1, #9
    79ec:	1ac0      	subs	r0, r0, r3
    79ee:	4152      	adcs	r2, r2
    79f0:	0a03      	lsrs	r3, r0, #8
    79f2:	428b      	cmp	r3, r1
    79f4:	d301      	bcc.n	79fa <__udivsi3+0x9a>
    79f6:	020b      	lsls	r3, r1, #8
    79f8:	1ac0      	subs	r0, r0, r3
    79fa:	4152      	adcs	r2, r2
    79fc:	d2cd      	bcs.n	799a <__udivsi3+0x3a>
    79fe:	09c3      	lsrs	r3, r0, #7
    7a00:	428b      	cmp	r3, r1
    7a02:	d301      	bcc.n	7a08 <__udivsi3+0xa8>
    7a04:	01cb      	lsls	r3, r1, #7
    7a06:	1ac0      	subs	r0, r0, r3
    7a08:	4152      	adcs	r2, r2
    7a0a:	0983      	lsrs	r3, r0, #6
    7a0c:	428b      	cmp	r3, r1
    7a0e:	d301      	bcc.n	7a14 <__udivsi3+0xb4>
    7a10:	018b      	lsls	r3, r1, #6
    7a12:	1ac0      	subs	r0, r0, r3
    7a14:	4152      	adcs	r2, r2
    7a16:	0943      	lsrs	r3, r0, #5
    7a18:	428b      	cmp	r3, r1
    7a1a:	d301      	bcc.n	7a20 <__udivsi3+0xc0>
    7a1c:	014b      	lsls	r3, r1, #5
    7a1e:	1ac0      	subs	r0, r0, r3
    7a20:	4152      	adcs	r2, r2
    7a22:	0903      	lsrs	r3, r0, #4
    7a24:	428b      	cmp	r3, r1
    7a26:	d301      	bcc.n	7a2c <__udivsi3+0xcc>
    7a28:	010b      	lsls	r3, r1, #4
    7a2a:	1ac0      	subs	r0, r0, r3
    7a2c:	4152      	adcs	r2, r2
    7a2e:	08c3      	lsrs	r3, r0, #3
    7a30:	428b      	cmp	r3, r1
    7a32:	d301      	bcc.n	7a38 <__udivsi3+0xd8>
    7a34:	00cb      	lsls	r3, r1, #3
    7a36:	1ac0      	subs	r0, r0, r3
    7a38:	4152      	adcs	r2, r2
    7a3a:	0883      	lsrs	r3, r0, #2
    7a3c:	428b      	cmp	r3, r1
    7a3e:	d301      	bcc.n	7a44 <__udivsi3+0xe4>
    7a40:	008b      	lsls	r3, r1, #2
    7a42:	1ac0      	subs	r0, r0, r3
    7a44:	4152      	adcs	r2, r2
    7a46:	0843      	lsrs	r3, r0, #1
    7a48:	428b      	cmp	r3, r1
    7a4a:	d301      	bcc.n	7a50 <__udivsi3+0xf0>
    7a4c:	004b      	lsls	r3, r1, #1
    7a4e:	1ac0      	subs	r0, r0, r3
    7a50:	4152      	adcs	r2, r2
    7a52:	1a41      	subs	r1, r0, r1
    7a54:	d200      	bcs.n	7a58 <__udivsi3+0xf8>
    7a56:	4601      	mov	r1, r0
    7a58:	4152      	adcs	r2, r2
    7a5a:	4610      	mov	r0, r2
    7a5c:	4770      	bx	lr
    7a5e:	e7ff      	b.n	7a60 <__udivsi3+0x100>
    7a60:	b501      	push	{r0, lr}
    7a62:	2000      	movs	r0, #0
    7a64:	f000 f8f0 	bl	7c48 <__aeabi_idiv0>
    7a68:	bd02      	pop	{r1, pc}
    7a6a:	46c0      	nop			; (mov r8, r8)

00007a6c <__aeabi_uidivmod>:
    7a6c:	2900      	cmp	r1, #0
    7a6e:	d0f7      	beq.n	7a60 <__udivsi3+0x100>
    7a70:	e776      	b.n	7960 <__udivsi3>
    7a72:	4770      	bx	lr

00007a74 <__divsi3>:
    7a74:	4603      	mov	r3, r0
    7a76:	430b      	orrs	r3, r1
    7a78:	d47f      	bmi.n	7b7a <__divsi3+0x106>
    7a7a:	2200      	movs	r2, #0
    7a7c:	0843      	lsrs	r3, r0, #1
    7a7e:	428b      	cmp	r3, r1
    7a80:	d374      	bcc.n	7b6c <__divsi3+0xf8>
    7a82:	0903      	lsrs	r3, r0, #4
    7a84:	428b      	cmp	r3, r1
    7a86:	d35f      	bcc.n	7b48 <__divsi3+0xd4>
    7a88:	0a03      	lsrs	r3, r0, #8
    7a8a:	428b      	cmp	r3, r1
    7a8c:	d344      	bcc.n	7b18 <__divsi3+0xa4>
    7a8e:	0b03      	lsrs	r3, r0, #12
    7a90:	428b      	cmp	r3, r1
    7a92:	d328      	bcc.n	7ae6 <__divsi3+0x72>
    7a94:	0c03      	lsrs	r3, r0, #16
    7a96:	428b      	cmp	r3, r1
    7a98:	d30d      	bcc.n	7ab6 <__divsi3+0x42>
    7a9a:	22ff      	movs	r2, #255	; 0xff
    7a9c:	0209      	lsls	r1, r1, #8
    7a9e:	ba12      	rev	r2, r2
    7aa0:	0c03      	lsrs	r3, r0, #16
    7aa2:	428b      	cmp	r3, r1
    7aa4:	d302      	bcc.n	7aac <__divsi3+0x38>
    7aa6:	1212      	asrs	r2, r2, #8
    7aa8:	0209      	lsls	r1, r1, #8
    7aaa:	d065      	beq.n	7b78 <__divsi3+0x104>
    7aac:	0b03      	lsrs	r3, r0, #12
    7aae:	428b      	cmp	r3, r1
    7ab0:	d319      	bcc.n	7ae6 <__divsi3+0x72>
    7ab2:	e000      	b.n	7ab6 <__divsi3+0x42>
    7ab4:	0a09      	lsrs	r1, r1, #8
    7ab6:	0bc3      	lsrs	r3, r0, #15
    7ab8:	428b      	cmp	r3, r1
    7aba:	d301      	bcc.n	7ac0 <__divsi3+0x4c>
    7abc:	03cb      	lsls	r3, r1, #15
    7abe:	1ac0      	subs	r0, r0, r3
    7ac0:	4152      	adcs	r2, r2
    7ac2:	0b83      	lsrs	r3, r0, #14
    7ac4:	428b      	cmp	r3, r1
    7ac6:	d301      	bcc.n	7acc <__divsi3+0x58>
    7ac8:	038b      	lsls	r3, r1, #14
    7aca:	1ac0      	subs	r0, r0, r3
    7acc:	4152      	adcs	r2, r2
    7ace:	0b43      	lsrs	r3, r0, #13
    7ad0:	428b      	cmp	r3, r1
    7ad2:	d301      	bcc.n	7ad8 <__divsi3+0x64>
    7ad4:	034b      	lsls	r3, r1, #13
    7ad6:	1ac0      	subs	r0, r0, r3
    7ad8:	4152      	adcs	r2, r2
    7ada:	0b03      	lsrs	r3, r0, #12
    7adc:	428b      	cmp	r3, r1
    7ade:	d301      	bcc.n	7ae4 <__divsi3+0x70>
    7ae0:	030b      	lsls	r3, r1, #12
    7ae2:	1ac0      	subs	r0, r0, r3
    7ae4:	4152      	adcs	r2, r2
    7ae6:	0ac3      	lsrs	r3, r0, #11
    7ae8:	428b      	cmp	r3, r1
    7aea:	d301      	bcc.n	7af0 <__divsi3+0x7c>
    7aec:	02cb      	lsls	r3, r1, #11
    7aee:	1ac0      	subs	r0, r0, r3
    7af0:	4152      	adcs	r2, r2
    7af2:	0a83      	lsrs	r3, r0, #10
    7af4:	428b      	cmp	r3, r1
    7af6:	d301      	bcc.n	7afc <__divsi3+0x88>
    7af8:	028b      	lsls	r3, r1, #10
    7afa:	1ac0      	subs	r0, r0, r3
    7afc:	4152      	adcs	r2, r2
    7afe:	0a43      	lsrs	r3, r0, #9
    7b00:	428b      	cmp	r3, r1
    7b02:	d301      	bcc.n	7b08 <__divsi3+0x94>
    7b04:	024b      	lsls	r3, r1, #9
    7b06:	1ac0      	subs	r0, r0, r3
    7b08:	4152      	adcs	r2, r2
    7b0a:	0a03      	lsrs	r3, r0, #8
    7b0c:	428b      	cmp	r3, r1
    7b0e:	d301      	bcc.n	7b14 <__divsi3+0xa0>
    7b10:	020b      	lsls	r3, r1, #8
    7b12:	1ac0      	subs	r0, r0, r3
    7b14:	4152      	adcs	r2, r2
    7b16:	d2cd      	bcs.n	7ab4 <__divsi3+0x40>
    7b18:	09c3      	lsrs	r3, r0, #7
    7b1a:	428b      	cmp	r3, r1
    7b1c:	d301      	bcc.n	7b22 <__divsi3+0xae>
    7b1e:	01cb      	lsls	r3, r1, #7
    7b20:	1ac0      	subs	r0, r0, r3
    7b22:	4152      	adcs	r2, r2
    7b24:	0983      	lsrs	r3, r0, #6
    7b26:	428b      	cmp	r3, r1
    7b28:	d301      	bcc.n	7b2e <__divsi3+0xba>
    7b2a:	018b      	lsls	r3, r1, #6
    7b2c:	1ac0      	subs	r0, r0, r3
    7b2e:	4152      	adcs	r2, r2
    7b30:	0943      	lsrs	r3, r0, #5
    7b32:	428b      	cmp	r3, r1
    7b34:	d301      	bcc.n	7b3a <__divsi3+0xc6>
    7b36:	014b      	lsls	r3, r1, #5
    7b38:	1ac0      	subs	r0, r0, r3
    7b3a:	4152      	adcs	r2, r2
    7b3c:	0903      	lsrs	r3, r0, #4
    7b3e:	428b      	cmp	r3, r1
    7b40:	d301      	bcc.n	7b46 <__divsi3+0xd2>
    7b42:	010b      	lsls	r3, r1, #4
    7b44:	1ac0      	subs	r0, r0, r3
    7b46:	4152      	adcs	r2, r2
    7b48:	08c3      	lsrs	r3, r0, #3
    7b4a:	428b      	cmp	r3, r1
    7b4c:	d301      	bcc.n	7b52 <__divsi3+0xde>
    7b4e:	00cb      	lsls	r3, r1, #3
    7b50:	1ac0      	subs	r0, r0, r3
    7b52:	4152      	adcs	r2, r2
    7b54:	0883      	lsrs	r3, r0, #2
    7b56:	428b      	cmp	r3, r1
    7b58:	d301      	bcc.n	7b5e <__divsi3+0xea>
    7b5a:	008b      	lsls	r3, r1, #2
    7b5c:	1ac0      	subs	r0, r0, r3
    7b5e:	4152      	adcs	r2, r2
    7b60:	0843      	lsrs	r3, r0, #1
    7b62:	428b      	cmp	r3, r1
    7b64:	d301      	bcc.n	7b6a <__divsi3+0xf6>
    7b66:	004b      	lsls	r3, r1, #1
    7b68:	1ac0      	subs	r0, r0, r3
    7b6a:	4152      	adcs	r2, r2
    7b6c:	1a41      	subs	r1, r0, r1
    7b6e:	d200      	bcs.n	7b72 <__divsi3+0xfe>
    7b70:	4601      	mov	r1, r0
    7b72:	4152      	adcs	r2, r2
    7b74:	4610      	mov	r0, r2
    7b76:	4770      	bx	lr
    7b78:	e05d      	b.n	7c36 <__divsi3+0x1c2>
    7b7a:	0fca      	lsrs	r2, r1, #31
    7b7c:	d000      	beq.n	7b80 <__divsi3+0x10c>
    7b7e:	4249      	negs	r1, r1
    7b80:	1003      	asrs	r3, r0, #32
    7b82:	d300      	bcc.n	7b86 <__divsi3+0x112>
    7b84:	4240      	negs	r0, r0
    7b86:	4053      	eors	r3, r2
    7b88:	2200      	movs	r2, #0
    7b8a:	469c      	mov	ip, r3
    7b8c:	0903      	lsrs	r3, r0, #4
    7b8e:	428b      	cmp	r3, r1
    7b90:	d32d      	bcc.n	7bee <__divsi3+0x17a>
    7b92:	0a03      	lsrs	r3, r0, #8
    7b94:	428b      	cmp	r3, r1
    7b96:	d312      	bcc.n	7bbe <__divsi3+0x14a>
    7b98:	22fc      	movs	r2, #252	; 0xfc
    7b9a:	0189      	lsls	r1, r1, #6
    7b9c:	ba12      	rev	r2, r2
    7b9e:	0a03      	lsrs	r3, r0, #8
    7ba0:	428b      	cmp	r3, r1
    7ba2:	d30c      	bcc.n	7bbe <__divsi3+0x14a>
    7ba4:	0189      	lsls	r1, r1, #6
    7ba6:	1192      	asrs	r2, r2, #6
    7ba8:	428b      	cmp	r3, r1
    7baa:	d308      	bcc.n	7bbe <__divsi3+0x14a>
    7bac:	0189      	lsls	r1, r1, #6
    7bae:	1192      	asrs	r2, r2, #6
    7bb0:	428b      	cmp	r3, r1
    7bb2:	d304      	bcc.n	7bbe <__divsi3+0x14a>
    7bb4:	0189      	lsls	r1, r1, #6
    7bb6:	d03a      	beq.n	7c2e <__divsi3+0x1ba>
    7bb8:	1192      	asrs	r2, r2, #6
    7bba:	e000      	b.n	7bbe <__divsi3+0x14a>
    7bbc:	0989      	lsrs	r1, r1, #6
    7bbe:	09c3      	lsrs	r3, r0, #7
    7bc0:	428b      	cmp	r3, r1
    7bc2:	d301      	bcc.n	7bc8 <__divsi3+0x154>
    7bc4:	01cb      	lsls	r3, r1, #7
    7bc6:	1ac0      	subs	r0, r0, r3
    7bc8:	4152      	adcs	r2, r2
    7bca:	0983      	lsrs	r3, r0, #6
    7bcc:	428b      	cmp	r3, r1
    7bce:	d301      	bcc.n	7bd4 <__divsi3+0x160>
    7bd0:	018b      	lsls	r3, r1, #6
    7bd2:	1ac0      	subs	r0, r0, r3
    7bd4:	4152      	adcs	r2, r2
    7bd6:	0943      	lsrs	r3, r0, #5
    7bd8:	428b      	cmp	r3, r1
    7bda:	d301      	bcc.n	7be0 <__divsi3+0x16c>
    7bdc:	014b      	lsls	r3, r1, #5
    7bde:	1ac0      	subs	r0, r0, r3
    7be0:	4152      	adcs	r2, r2
    7be2:	0903      	lsrs	r3, r0, #4
    7be4:	428b      	cmp	r3, r1
    7be6:	d301      	bcc.n	7bec <__divsi3+0x178>
    7be8:	010b      	lsls	r3, r1, #4
    7bea:	1ac0      	subs	r0, r0, r3
    7bec:	4152      	adcs	r2, r2
    7bee:	08c3      	lsrs	r3, r0, #3
    7bf0:	428b      	cmp	r3, r1
    7bf2:	d301      	bcc.n	7bf8 <__divsi3+0x184>
    7bf4:	00cb      	lsls	r3, r1, #3
    7bf6:	1ac0      	subs	r0, r0, r3
    7bf8:	4152      	adcs	r2, r2
    7bfa:	0883      	lsrs	r3, r0, #2
    7bfc:	428b      	cmp	r3, r1
    7bfe:	d301      	bcc.n	7c04 <__divsi3+0x190>
    7c00:	008b      	lsls	r3, r1, #2
    7c02:	1ac0      	subs	r0, r0, r3
    7c04:	4152      	adcs	r2, r2
    7c06:	d2d9      	bcs.n	7bbc <__divsi3+0x148>
    7c08:	0843      	lsrs	r3, r0, #1
    7c0a:	428b      	cmp	r3, r1
    7c0c:	d301      	bcc.n	7c12 <__divsi3+0x19e>
    7c0e:	004b      	lsls	r3, r1, #1
    7c10:	1ac0      	subs	r0, r0, r3
    7c12:	4152      	adcs	r2, r2
    7c14:	1a41      	subs	r1, r0, r1
    7c16:	d200      	bcs.n	7c1a <__divsi3+0x1a6>
    7c18:	4601      	mov	r1, r0
    7c1a:	4663      	mov	r3, ip
    7c1c:	4152      	adcs	r2, r2
    7c1e:	105b      	asrs	r3, r3, #1
    7c20:	4610      	mov	r0, r2
    7c22:	d301      	bcc.n	7c28 <__divsi3+0x1b4>
    7c24:	4240      	negs	r0, r0
    7c26:	2b00      	cmp	r3, #0
    7c28:	d500      	bpl.n	7c2c <__divsi3+0x1b8>
    7c2a:	4249      	negs	r1, r1
    7c2c:	4770      	bx	lr
    7c2e:	4663      	mov	r3, ip
    7c30:	105b      	asrs	r3, r3, #1
    7c32:	d300      	bcc.n	7c36 <__divsi3+0x1c2>
    7c34:	4240      	negs	r0, r0
    7c36:	b501      	push	{r0, lr}
    7c38:	2000      	movs	r0, #0
    7c3a:	f000 f805 	bl	7c48 <__aeabi_idiv0>
    7c3e:	bd02      	pop	{r1, pc}

00007c40 <__aeabi_idivmod>:
    7c40:	2900      	cmp	r1, #0
    7c42:	d0f8      	beq.n	7c36 <__divsi3+0x1c2>
    7c44:	e716      	b.n	7a74 <__divsi3>
    7c46:	4770      	bx	lr

00007c48 <__aeabi_idiv0>:
    7c48:	4770      	bx	lr
    7c4a:	46c0      	nop			; (mov r8, r8)

00007c4c <__aeabi_lmul>:
    7c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c4e:	46ce      	mov	lr, r9
    7c50:	4647      	mov	r7, r8
    7c52:	0415      	lsls	r5, r2, #16
    7c54:	0c2d      	lsrs	r5, r5, #16
    7c56:	002e      	movs	r6, r5
    7c58:	b580      	push	{r7, lr}
    7c5a:	0407      	lsls	r7, r0, #16
    7c5c:	0c14      	lsrs	r4, r2, #16
    7c5e:	0c3f      	lsrs	r7, r7, #16
    7c60:	4699      	mov	r9, r3
    7c62:	0c03      	lsrs	r3, r0, #16
    7c64:	437e      	muls	r6, r7
    7c66:	435d      	muls	r5, r3
    7c68:	4367      	muls	r7, r4
    7c6a:	4363      	muls	r3, r4
    7c6c:	197f      	adds	r7, r7, r5
    7c6e:	0c34      	lsrs	r4, r6, #16
    7c70:	19e4      	adds	r4, r4, r7
    7c72:	469c      	mov	ip, r3
    7c74:	42a5      	cmp	r5, r4
    7c76:	d903      	bls.n	7c80 <__aeabi_lmul+0x34>
    7c78:	2380      	movs	r3, #128	; 0x80
    7c7a:	025b      	lsls	r3, r3, #9
    7c7c:	4698      	mov	r8, r3
    7c7e:	44c4      	add	ip, r8
    7c80:	464b      	mov	r3, r9
    7c82:	4351      	muls	r1, r2
    7c84:	4343      	muls	r3, r0
    7c86:	0436      	lsls	r6, r6, #16
    7c88:	0c36      	lsrs	r6, r6, #16
    7c8a:	0c25      	lsrs	r5, r4, #16
    7c8c:	0424      	lsls	r4, r4, #16
    7c8e:	4465      	add	r5, ip
    7c90:	19a4      	adds	r4, r4, r6
    7c92:	1859      	adds	r1, r3, r1
    7c94:	1949      	adds	r1, r1, r5
    7c96:	0020      	movs	r0, r4
    7c98:	bc0c      	pop	{r2, r3}
    7c9a:	4690      	mov	r8, r2
    7c9c:	4699      	mov	r9, r3
    7c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007ca0 <__aeabi_fdiv>:
    7ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ca2:	4657      	mov	r7, sl
    7ca4:	464e      	mov	r6, r9
    7ca6:	46de      	mov	lr, fp
    7ca8:	4645      	mov	r5, r8
    7caa:	b5e0      	push	{r5, r6, r7, lr}
    7cac:	0244      	lsls	r4, r0, #9
    7cae:	0043      	lsls	r3, r0, #1
    7cb0:	0fc6      	lsrs	r6, r0, #31
    7cb2:	b083      	sub	sp, #12
    7cb4:	1c0f      	adds	r7, r1, #0
    7cb6:	0a64      	lsrs	r4, r4, #9
    7cb8:	0e1b      	lsrs	r3, r3, #24
    7cba:	46b2      	mov	sl, r6
    7cbc:	d053      	beq.n	7d66 <__aeabi_fdiv+0xc6>
    7cbe:	2bff      	cmp	r3, #255	; 0xff
    7cc0:	d027      	beq.n	7d12 <__aeabi_fdiv+0x72>
    7cc2:	2280      	movs	r2, #128	; 0x80
    7cc4:	00e4      	lsls	r4, r4, #3
    7cc6:	04d2      	lsls	r2, r2, #19
    7cc8:	4314      	orrs	r4, r2
    7cca:	227f      	movs	r2, #127	; 0x7f
    7ccc:	4252      	negs	r2, r2
    7cce:	4690      	mov	r8, r2
    7cd0:	4498      	add	r8, r3
    7cd2:	2300      	movs	r3, #0
    7cd4:	4699      	mov	r9, r3
    7cd6:	469b      	mov	fp, r3
    7cd8:	027d      	lsls	r5, r7, #9
    7cda:	0078      	lsls	r0, r7, #1
    7cdc:	0ffb      	lsrs	r3, r7, #31
    7cde:	0a6d      	lsrs	r5, r5, #9
    7ce0:	0e00      	lsrs	r0, r0, #24
    7ce2:	9300      	str	r3, [sp, #0]
    7ce4:	d024      	beq.n	7d30 <__aeabi_fdiv+0x90>
    7ce6:	28ff      	cmp	r0, #255	; 0xff
    7ce8:	d046      	beq.n	7d78 <__aeabi_fdiv+0xd8>
    7cea:	2380      	movs	r3, #128	; 0x80
    7cec:	2100      	movs	r1, #0
    7cee:	00ed      	lsls	r5, r5, #3
    7cf0:	04db      	lsls	r3, r3, #19
    7cf2:	431d      	orrs	r5, r3
    7cf4:	387f      	subs	r0, #127	; 0x7f
    7cf6:	4647      	mov	r7, r8
    7cf8:	1a38      	subs	r0, r7, r0
    7cfa:	464f      	mov	r7, r9
    7cfc:	430f      	orrs	r7, r1
    7cfe:	00bf      	lsls	r7, r7, #2
    7d00:	46b9      	mov	r9, r7
    7d02:	0033      	movs	r3, r6
    7d04:	9a00      	ldr	r2, [sp, #0]
    7d06:	4f87      	ldr	r7, [pc, #540]	; (7f24 <__aeabi_fdiv+0x284>)
    7d08:	4053      	eors	r3, r2
    7d0a:	464a      	mov	r2, r9
    7d0c:	58ba      	ldr	r2, [r7, r2]
    7d0e:	9301      	str	r3, [sp, #4]
    7d10:	4697      	mov	pc, r2
    7d12:	2c00      	cmp	r4, #0
    7d14:	d14e      	bne.n	7db4 <__aeabi_fdiv+0x114>
    7d16:	2308      	movs	r3, #8
    7d18:	4699      	mov	r9, r3
    7d1a:	33f7      	adds	r3, #247	; 0xf7
    7d1c:	4698      	mov	r8, r3
    7d1e:	3bfd      	subs	r3, #253	; 0xfd
    7d20:	469b      	mov	fp, r3
    7d22:	027d      	lsls	r5, r7, #9
    7d24:	0078      	lsls	r0, r7, #1
    7d26:	0ffb      	lsrs	r3, r7, #31
    7d28:	0a6d      	lsrs	r5, r5, #9
    7d2a:	0e00      	lsrs	r0, r0, #24
    7d2c:	9300      	str	r3, [sp, #0]
    7d2e:	d1da      	bne.n	7ce6 <__aeabi_fdiv+0x46>
    7d30:	2d00      	cmp	r5, #0
    7d32:	d126      	bne.n	7d82 <__aeabi_fdiv+0xe2>
    7d34:	2000      	movs	r0, #0
    7d36:	2101      	movs	r1, #1
    7d38:	0033      	movs	r3, r6
    7d3a:	9a00      	ldr	r2, [sp, #0]
    7d3c:	4f7a      	ldr	r7, [pc, #488]	; (7f28 <__aeabi_fdiv+0x288>)
    7d3e:	4053      	eors	r3, r2
    7d40:	4642      	mov	r2, r8
    7d42:	1a10      	subs	r0, r2, r0
    7d44:	464a      	mov	r2, r9
    7d46:	430a      	orrs	r2, r1
    7d48:	0092      	lsls	r2, r2, #2
    7d4a:	58ba      	ldr	r2, [r7, r2]
    7d4c:	001d      	movs	r5, r3
    7d4e:	4697      	mov	pc, r2
    7d50:	9b00      	ldr	r3, [sp, #0]
    7d52:	002c      	movs	r4, r5
    7d54:	469a      	mov	sl, r3
    7d56:	468b      	mov	fp, r1
    7d58:	465b      	mov	r3, fp
    7d5a:	2b02      	cmp	r3, #2
    7d5c:	d131      	bne.n	7dc2 <__aeabi_fdiv+0x122>
    7d5e:	4653      	mov	r3, sl
    7d60:	21ff      	movs	r1, #255	; 0xff
    7d62:	2400      	movs	r4, #0
    7d64:	e038      	b.n	7dd8 <__aeabi_fdiv+0x138>
    7d66:	2c00      	cmp	r4, #0
    7d68:	d117      	bne.n	7d9a <__aeabi_fdiv+0xfa>
    7d6a:	2304      	movs	r3, #4
    7d6c:	4699      	mov	r9, r3
    7d6e:	2300      	movs	r3, #0
    7d70:	4698      	mov	r8, r3
    7d72:	3301      	adds	r3, #1
    7d74:	469b      	mov	fp, r3
    7d76:	e7af      	b.n	7cd8 <__aeabi_fdiv+0x38>
    7d78:	20ff      	movs	r0, #255	; 0xff
    7d7a:	2d00      	cmp	r5, #0
    7d7c:	d10b      	bne.n	7d96 <__aeabi_fdiv+0xf6>
    7d7e:	2102      	movs	r1, #2
    7d80:	e7da      	b.n	7d38 <__aeabi_fdiv+0x98>
    7d82:	0028      	movs	r0, r5
    7d84:	f001 fdbc 	bl	9900 <__clzsi2>
    7d88:	1f43      	subs	r3, r0, #5
    7d8a:	409d      	lsls	r5, r3
    7d8c:	2376      	movs	r3, #118	; 0x76
    7d8e:	425b      	negs	r3, r3
    7d90:	1a18      	subs	r0, r3, r0
    7d92:	2100      	movs	r1, #0
    7d94:	e7af      	b.n	7cf6 <__aeabi_fdiv+0x56>
    7d96:	2103      	movs	r1, #3
    7d98:	e7ad      	b.n	7cf6 <__aeabi_fdiv+0x56>
    7d9a:	0020      	movs	r0, r4
    7d9c:	f001 fdb0 	bl	9900 <__clzsi2>
    7da0:	1f43      	subs	r3, r0, #5
    7da2:	409c      	lsls	r4, r3
    7da4:	2376      	movs	r3, #118	; 0x76
    7da6:	425b      	negs	r3, r3
    7da8:	1a1b      	subs	r3, r3, r0
    7daa:	4698      	mov	r8, r3
    7dac:	2300      	movs	r3, #0
    7dae:	4699      	mov	r9, r3
    7db0:	469b      	mov	fp, r3
    7db2:	e791      	b.n	7cd8 <__aeabi_fdiv+0x38>
    7db4:	230c      	movs	r3, #12
    7db6:	4699      	mov	r9, r3
    7db8:	33f3      	adds	r3, #243	; 0xf3
    7dba:	4698      	mov	r8, r3
    7dbc:	3bfc      	subs	r3, #252	; 0xfc
    7dbe:	469b      	mov	fp, r3
    7dc0:	e78a      	b.n	7cd8 <__aeabi_fdiv+0x38>
    7dc2:	2b03      	cmp	r3, #3
    7dc4:	d100      	bne.n	7dc8 <__aeabi_fdiv+0x128>
    7dc6:	e0a5      	b.n	7f14 <__aeabi_fdiv+0x274>
    7dc8:	4655      	mov	r5, sl
    7dca:	2b01      	cmp	r3, #1
    7dcc:	d000      	beq.n	7dd0 <__aeabi_fdiv+0x130>
    7dce:	e081      	b.n	7ed4 <__aeabi_fdiv+0x234>
    7dd0:	2301      	movs	r3, #1
    7dd2:	2100      	movs	r1, #0
    7dd4:	2400      	movs	r4, #0
    7dd6:	402b      	ands	r3, r5
    7dd8:	0264      	lsls	r4, r4, #9
    7dda:	05c9      	lsls	r1, r1, #23
    7ddc:	0a60      	lsrs	r0, r4, #9
    7dde:	07db      	lsls	r3, r3, #31
    7de0:	4308      	orrs	r0, r1
    7de2:	4318      	orrs	r0, r3
    7de4:	b003      	add	sp, #12
    7de6:	bc3c      	pop	{r2, r3, r4, r5}
    7de8:	4690      	mov	r8, r2
    7dea:	4699      	mov	r9, r3
    7dec:	46a2      	mov	sl, r4
    7dee:	46ab      	mov	fp, r5
    7df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7df2:	2480      	movs	r4, #128	; 0x80
    7df4:	2300      	movs	r3, #0
    7df6:	03e4      	lsls	r4, r4, #15
    7df8:	21ff      	movs	r1, #255	; 0xff
    7dfa:	e7ed      	b.n	7dd8 <__aeabi_fdiv+0x138>
    7dfc:	21ff      	movs	r1, #255	; 0xff
    7dfe:	2400      	movs	r4, #0
    7e00:	e7ea      	b.n	7dd8 <__aeabi_fdiv+0x138>
    7e02:	2301      	movs	r3, #1
    7e04:	1a59      	subs	r1, r3, r1
    7e06:	291b      	cmp	r1, #27
    7e08:	dd66      	ble.n	7ed8 <__aeabi_fdiv+0x238>
    7e0a:	9a01      	ldr	r2, [sp, #4]
    7e0c:	4013      	ands	r3, r2
    7e0e:	2100      	movs	r1, #0
    7e10:	2400      	movs	r4, #0
    7e12:	e7e1      	b.n	7dd8 <__aeabi_fdiv+0x138>
    7e14:	2380      	movs	r3, #128	; 0x80
    7e16:	03db      	lsls	r3, r3, #15
    7e18:	421c      	tst	r4, r3
    7e1a:	d038      	beq.n	7e8e <__aeabi_fdiv+0x1ee>
    7e1c:	421d      	tst	r5, r3
    7e1e:	d051      	beq.n	7ec4 <__aeabi_fdiv+0x224>
    7e20:	431c      	orrs	r4, r3
    7e22:	0264      	lsls	r4, r4, #9
    7e24:	0a64      	lsrs	r4, r4, #9
    7e26:	0033      	movs	r3, r6
    7e28:	21ff      	movs	r1, #255	; 0xff
    7e2a:	e7d5      	b.n	7dd8 <__aeabi_fdiv+0x138>
    7e2c:	0163      	lsls	r3, r4, #5
    7e2e:	016c      	lsls	r4, r5, #5
    7e30:	42a3      	cmp	r3, r4
    7e32:	d23b      	bcs.n	7eac <__aeabi_fdiv+0x20c>
    7e34:	261b      	movs	r6, #27
    7e36:	2100      	movs	r1, #0
    7e38:	3801      	subs	r0, #1
    7e3a:	2501      	movs	r5, #1
    7e3c:	001f      	movs	r7, r3
    7e3e:	0049      	lsls	r1, r1, #1
    7e40:	005b      	lsls	r3, r3, #1
    7e42:	2f00      	cmp	r7, #0
    7e44:	db01      	blt.n	7e4a <__aeabi_fdiv+0x1aa>
    7e46:	429c      	cmp	r4, r3
    7e48:	d801      	bhi.n	7e4e <__aeabi_fdiv+0x1ae>
    7e4a:	1b1b      	subs	r3, r3, r4
    7e4c:	4329      	orrs	r1, r5
    7e4e:	3e01      	subs	r6, #1
    7e50:	2e00      	cmp	r6, #0
    7e52:	d1f3      	bne.n	7e3c <__aeabi_fdiv+0x19c>
    7e54:	001c      	movs	r4, r3
    7e56:	1e63      	subs	r3, r4, #1
    7e58:	419c      	sbcs	r4, r3
    7e5a:	430c      	orrs	r4, r1
    7e5c:	0001      	movs	r1, r0
    7e5e:	317f      	adds	r1, #127	; 0x7f
    7e60:	2900      	cmp	r1, #0
    7e62:	ddce      	ble.n	7e02 <__aeabi_fdiv+0x162>
    7e64:	0763      	lsls	r3, r4, #29
    7e66:	d004      	beq.n	7e72 <__aeabi_fdiv+0x1d2>
    7e68:	230f      	movs	r3, #15
    7e6a:	4023      	ands	r3, r4
    7e6c:	2b04      	cmp	r3, #4
    7e6e:	d000      	beq.n	7e72 <__aeabi_fdiv+0x1d2>
    7e70:	3404      	adds	r4, #4
    7e72:	0123      	lsls	r3, r4, #4
    7e74:	d503      	bpl.n	7e7e <__aeabi_fdiv+0x1de>
    7e76:	0001      	movs	r1, r0
    7e78:	4b2c      	ldr	r3, [pc, #176]	; (7f2c <__aeabi_fdiv+0x28c>)
    7e7a:	3180      	adds	r1, #128	; 0x80
    7e7c:	401c      	ands	r4, r3
    7e7e:	29fe      	cmp	r1, #254	; 0xfe
    7e80:	dd0d      	ble.n	7e9e <__aeabi_fdiv+0x1fe>
    7e82:	2301      	movs	r3, #1
    7e84:	9a01      	ldr	r2, [sp, #4]
    7e86:	21ff      	movs	r1, #255	; 0xff
    7e88:	4013      	ands	r3, r2
    7e8a:	2400      	movs	r4, #0
    7e8c:	e7a4      	b.n	7dd8 <__aeabi_fdiv+0x138>
    7e8e:	2380      	movs	r3, #128	; 0x80
    7e90:	03db      	lsls	r3, r3, #15
    7e92:	431c      	orrs	r4, r3
    7e94:	0264      	lsls	r4, r4, #9
    7e96:	0a64      	lsrs	r4, r4, #9
    7e98:	0033      	movs	r3, r6
    7e9a:	21ff      	movs	r1, #255	; 0xff
    7e9c:	e79c      	b.n	7dd8 <__aeabi_fdiv+0x138>
    7e9e:	2301      	movs	r3, #1
    7ea0:	9a01      	ldr	r2, [sp, #4]
    7ea2:	01a4      	lsls	r4, r4, #6
    7ea4:	0a64      	lsrs	r4, r4, #9
    7ea6:	b2c9      	uxtb	r1, r1
    7ea8:	4013      	ands	r3, r2
    7eaa:	e795      	b.n	7dd8 <__aeabi_fdiv+0x138>
    7eac:	1b1b      	subs	r3, r3, r4
    7eae:	261a      	movs	r6, #26
    7eb0:	2101      	movs	r1, #1
    7eb2:	e7c2      	b.n	7e3a <__aeabi_fdiv+0x19a>
    7eb4:	9b00      	ldr	r3, [sp, #0]
    7eb6:	468b      	mov	fp, r1
    7eb8:	469a      	mov	sl, r3
    7eba:	2400      	movs	r4, #0
    7ebc:	e74c      	b.n	7d58 <__aeabi_fdiv+0xb8>
    7ebe:	0263      	lsls	r3, r4, #9
    7ec0:	d5e5      	bpl.n	7e8e <__aeabi_fdiv+0x1ee>
    7ec2:	2500      	movs	r5, #0
    7ec4:	2480      	movs	r4, #128	; 0x80
    7ec6:	03e4      	lsls	r4, r4, #15
    7ec8:	432c      	orrs	r4, r5
    7eca:	0264      	lsls	r4, r4, #9
    7ecc:	0a64      	lsrs	r4, r4, #9
    7ece:	9b00      	ldr	r3, [sp, #0]
    7ed0:	21ff      	movs	r1, #255	; 0xff
    7ed2:	e781      	b.n	7dd8 <__aeabi_fdiv+0x138>
    7ed4:	9501      	str	r5, [sp, #4]
    7ed6:	e7c1      	b.n	7e5c <__aeabi_fdiv+0x1bc>
    7ed8:	0023      	movs	r3, r4
    7eda:	2020      	movs	r0, #32
    7edc:	40cb      	lsrs	r3, r1
    7ede:	1a41      	subs	r1, r0, r1
    7ee0:	408c      	lsls	r4, r1
    7ee2:	1e61      	subs	r1, r4, #1
    7ee4:	418c      	sbcs	r4, r1
    7ee6:	431c      	orrs	r4, r3
    7ee8:	0763      	lsls	r3, r4, #29
    7eea:	d004      	beq.n	7ef6 <__aeabi_fdiv+0x256>
    7eec:	230f      	movs	r3, #15
    7eee:	4023      	ands	r3, r4
    7ef0:	2b04      	cmp	r3, #4
    7ef2:	d000      	beq.n	7ef6 <__aeabi_fdiv+0x256>
    7ef4:	3404      	adds	r4, #4
    7ef6:	0163      	lsls	r3, r4, #5
    7ef8:	d505      	bpl.n	7f06 <__aeabi_fdiv+0x266>
    7efa:	2301      	movs	r3, #1
    7efc:	9a01      	ldr	r2, [sp, #4]
    7efe:	2101      	movs	r1, #1
    7f00:	4013      	ands	r3, r2
    7f02:	2400      	movs	r4, #0
    7f04:	e768      	b.n	7dd8 <__aeabi_fdiv+0x138>
    7f06:	2301      	movs	r3, #1
    7f08:	9a01      	ldr	r2, [sp, #4]
    7f0a:	01a4      	lsls	r4, r4, #6
    7f0c:	0a64      	lsrs	r4, r4, #9
    7f0e:	4013      	ands	r3, r2
    7f10:	2100      	movs	r1, #0
    7f12:	e761      	b.n	7dd8 <__aeabi_fdiv+0x138>
    7f14:	2380      	movs	r3, #128	; 0x80
    7f16:	03db      	lsls	r3, r3, #15
    7f18:	431c      	orrs	r4, r3
    7f1a:	0264      	lsls	r4, r4, #9
    7f1c:	0a64      	lsrs	r4, r4, #9
    7f1e:	4653      	mov	r3, sl
    7f20:	21ff      	movs	r1, #255	; 0xff
    7f22:	e759      	b.n	7dd8 <__aeabi_fdiv+0x138>
    7f24:	0000c290 	.word	0x0000c290
    7f28:	0000c2d0 	.word	0x0000c2d0
    7f2c:	f7ffffff 	.word	0xf7ffffff

00007f30 <__aeabi_i2f>:
    7f30:	b570      	push	{r4, r5, r6, lr}
    7f32:	2800      	cmp	r0, #0
    7f34:	d030      	beq.n	7f98 <__aeabi_i2f+0x68>
    7f36:	17c3      	asrs	r3, r0, #31
    7f38:	18c4      	adds	r4, r0, r3
    7f3a:	405c      	eors	r4, r3
    7f3c:	0fc5      	lsrs	r5, r0, #31
    7f3e:	0020      	movs	r0, r4
    7f40:	f001 fcde 	bl	9900 <__clzsi2>
    7f44:	239e      	movs	r3, #158	; 0x9e
    7f46:	1a1b      	subs	r3, r3, r0
    7f48:	2b96      	cmp	r3, #150	; 0x96
    7f4a:	dc0d      	bgt.n	7f68 <__aeabi_i2f+0x38>
    7f4c:	2296      	movs	r2, #150	; 0x96
    7f4e:	1ad2      	subs	r2, r2, r3
    7f50:	4094      	lsls	r4, r2
    7f52:	002a      	movs	r2, r5
    7f54:	0264      	lsls	r4, r4, #9
    7f56:	0a64      	lsrs	r4, r4, #9
    7f58:	b2db      	uxtb	r3, r3
    7f5a:	0264      	lsls	r4, r4, #9
    7f5c:	05db      	lsls	r3, r3, #23
    7f5e:	0a60      	lsrs	r0, r4, #9
    7f60:	07d2      	lsls	r2, r2, #31
    7f62:	4318      	orrs	r0, r3
    7f64:	4310      	orrs	r0, r2
    7f66:	bd70      	pop	{r4, r5, r6, pc}
    7f68:	2b99      	cmp	r3, #153	; 0x99
    7f6a:	dc19      	bgt.n	7fa0 <__aeabi_i2f+0x70>
    7f6c:	2299      	movs	r2, #153	; 0x99
    7f6e:	1ad2      	subs	r2, r2, r3
    7f70:	2a00      	cmp	r2, #0
    7f72:	dd29      	ble.n	7fc8 <__aeabi_i2f+0x98>
    7f74:	4094      	lsls	r4, r2
    7f76:	0022      	movs	r2, r4
    7f78:	4c14      	ldr	r4, [pc, #80]	; (7fcc <__aeabi_i2f+0x9c>)
    7f7a:	4014      	ands	r4, r2
    7f7c:	0751      	lsls	r1, r2, #29
    7f7e:	d004      	beq.n	7f8a <__aeabi_i2f+0x5a>
    7f80:	210f      	movs	r1, #15
    7f82:	400a      	ands	r2, r1
    7f84:	2a04      	cmp	r2, #4
    7f86:	d000      	beq.n	7f8a <__aeabi_i2f+0x5a>
    7f88:	3404      	adds	r4, #4
    7f8a:	0162      	lsls	r2, r4, #5
    7f8c:	d413      	bmi.n	7fb6 <__aeabi_i2f+0x86>
    7f8e:	01a4      	lsls	r4, r4, #6
    7f90:	0a64      	lsrs	r4, r4, #9
    7f92:	b2db      	uxtb	r3, r3
    7f94:	002a      	movs	r2, r5
    7f96:	e7e0      	b.n	7f5a <__aeabi_i2f+0x2a>
    7f98:	2200      	movs	r2, #0
    7f9a:	2300      	movs	r3, #0
    7f9c:	2400      	movs	r4, #0
    7f9e:	e7dc      	b.n	7f5a <__aeabi_i2f+0x2a>
    7fa0:	2205      	movs	r2, #5
    7fa2:	0021      	movs	r1, r4
    7fa4:	1a12      	subs	r2, r2, r0
    7fa6:	40d1      	lsrs	r1, r2
    7fa8:	22b9      	movs	r2, #185	; 0xb9
    7faa:	1ad2      	subs	r2, r2, r3
    7fac:	4094      	lsls	r4, r2
    7fae:	1e62      	subs	r2, r4, #1
    7fb0:	4194      	sbcs	r4, r2
    7fb2:	430c      	orrs	r4, r1
    7fb4:	e7da      	b.n	7f6c <__aeabi_i2f+0x3c>
    7fb6:	4b05      	ldr	r3, [pc, #20]	; (7fcc <__aeabi_i2f+0x9c>)
    7fb8:	002a      	movs	r2, r5
    7fba:	401c      	ands	r4, r3
    7fbc:	239f      	movs	r3, #159	; 0x9f
    7fbe:	01a4      	lsls	r4, r4, #6
    7fc0:	1a1b      	subs	r3, r3, r0
    7fc2:	0a64      	lsrs	r4, r4, #9
    7fc4:	b2db      	uxtb	r3, r3
    7fc6:	e7c8      	b.n	7f5a <__aeabi_i2f+0x2a>
    7fc8:	0022      	movs	r2, r4
    7fca:	e7d5      	b.n	7f78 <__aeabi_i2f+0x48>
    7fcc:	fbffffff 	.word	0xfbffffff

00007fd0 <__aeabi_dadd>:
    7fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7fd2:	4645      	mov	r5, r8
    7fd4:	46de      	mov	lr, fp
    7fd6:	4657      	mov	r7, sl
    7fd8:	464e      	mov	r6, r9
    7fda:	030c      	lsls	r4, r1, #12
    7fdc:	b5e0      	push	{r5, r6, r7, lr}
    7fde:	004e      	lsls	r6, r1, #1
    7fe0:	0fc9      	lsrs	r1, r1, #31
    7fe2:	4688      	mov	r8, r1
    7fe4:	000d      	movs	r5, r1
    7fe6:	0a61      	lsrs	r1, r4, #9
    7fe8:	0f44      	lsrs	r4, r0, #29
    7fea:	430c      	orrs	r4, r1
    7fec:	00c7      	lsls	r7, r0, #3
    7fee:	0319      	lsls	r1, r3, #12
    7ff0:	0058      	lsls	r0, r3, #1
    7ff2:	0fdb      	lsrs	r3, r3, #31
    7ff4:	469b      	mov	fp, r3
    7ff6:	0a4b      	lsrs	r3, r1, #9
    7ff8:	0f51      	lsrs	r1, r2, #29
    7ffa:	430b      	orrs	r3, r1
    7ffc:	0d76      	lsrs	r6, r6, #21
    7ffe:	0d40      	lsrs	r0, r0, #21
    8000:	0019      	movs	r1, r3
    8002:	00d2      	lsls	r2, r2, #3
    8004:	45d8      	cmp	r8, fp
    8006:	d100      	bne.n	800a <__aeabi_dadd+0x3a>
    8008:	e0ae      	b.n	8168 <__aeabi_dadd+0x198>
    800a:	1a35      	subs	r5, r6, r0
    800c:	2d00      	cmp	r5, #0
    800e:	dc00      	bgt.n	8012 <__aeabi_dadd+0x42>
    8010:	e0f6      	b.n	8200 <__aeabi_dadd+0x230>
    8012:	2800      	cmp	r0, #0
    8014:	d10f      	bne.n	8036 <__aeabi_dadd+0x66>
    8016:	4313      	orrs	r3, r2
    8018:	d100      	bne.n	801c <__aeabi_dadd+0x4c>
    801a:	e0db      	b.n	81d4 <__aeabi_dadd+0x204>
    801c:	1e6b      	subs	r3, r5, #1
    801e:	2b00      	cmp	r3, #0
    8020:	d000      	beq.n	8024 <__aeabi_dadd+0x54>
    8022:	e137      	b.n	8294 <__aeabi_dadd+0x2c4>
    8024:	1aba      	subs	r2, r7, r2
    8026:	4297      	cmp	r7, r2
    8028:	41bf      	sbcs	r7, r7
    802a:	1a64      	subs	r4, r4, r1
    802c:	427f      	negs	r7, r7
    802e:	1be4      	subs	r4, r4, r7
    8030:	2601      	movs	r6, #1
    8032:	0017      	movs	r7, r2
    8034:	e024      	b.n	8080 <__aeabi_dadd+0xb0>
    8036:	4bc6      	ldr	r3, [pc, #792]	; (8350 <__aeabi_dadd+0x380>)
    8038:	429e      	cmp	r6, r3
    803a:	d04d      	beq.n	80d8 <__aeabi_dadd+0x108>
    803c:	2380      	movs	r3, #128	; 0x80
    803e:	041b      	lsls	r3, r3, #16
    8040:	4319      	orrs	r1, r3
    8042:	2d38      	cmp	r5, #56	; 0x38
    8044:	dd00      	ble.n	8048 <__aeabi_dadd+0x78>
    8046:	e107      	b.n	8258 <__aeabi_dadd+0x288>
    8048:	2d1f      	cmp	r5, #31
    804a:	dd00      	ble.n	804e <__aeabi_dadd+0x7e>
    804c:	e138      	b.n	82c0 <__aeabi_dadd+0x2f0>
    804e:	2020      	movs	r0, #32
    8050:	1b43      	subs	r3, r0, r5
    8052:	469a      	mov	sl, r3
    8054:	000b      	movs	r3, r1
    8056:	4650      	mov	r0, sl
    8058:	4083      	lsls	r3, r0
    805a:	4699      	mov	r9, r3
    805c:	0013      	movs	r3, r2
    805e:	4648      	mov	r0, r9
    8060:	40eb      	lsrs	r3, r5
    8062:	4318      	orrs	r0, r3
    8064:	0003      	movs	r3, r0
    8066:	4650      	mov	r0, sl
    8068:	4082      	lsls	r2, r0
    806a:	1e50      	subs	r0, r2, #1
    806c:	4182      	sbcs	r2, r0
    806e:	40e9      	lsrs	r1, r5
    8070:	431a      	orrs	r2, r3
    8072:	1aba      	subs	r2, r7, r2
    8074:	1a61      	subs	r1, r4, r1
    8076:	4297      	cmp	r7, r2
    8078:	41a4      	sbcs	r4, r4
    807a:	0017      	movs	r7, r2
    807c:	4264      	negs	r4, r4
    807e:	1b0c      	subs	r4, r1, r4
    8080:	0223      	lsls	r3, r4, #8
    8082:	d562      	bpl.n	814a <__aeabi_dadd+0x17a>
    8084:	0264      	lsls	r4, r4, #9
    8086:	0a65      	lsrs	r5, r4, #9
    8088:	2d00      	cmp	r5, #0
    808a:	d100      	bne.n	808e <__aeabi_dadd+0xbe>
    808c:	e0df      	b.n	824e <__aeabi_dadd+0x27e>
    808e:	0028      	movs	r0, r5
    8090:	f001 fc36 	bl	9900 <__clzsi2>
    8094:	0003      	movs	r3, r0
    8096:	3b08      	subs	r3, #8
    8098:	2b1f      	cmp	r3, #31
    809a:	dd00      	ble.n	809e <__aeabi_dadd+0xce>
    809c:	e0d2      	b.n	8244 <__aeabi_dadd+0x274>
    809e:	2220      	movs	r2, #32
    80a0:	003c      	movs	r4, r7
    80a2:	1ad2      	subs	r2, r2, r3
    80a4:	409d      	lsls	r5, r3
    80a6:	40d4      	lsrs	r4, r2
    80a8:	409f      	lsls	r7, r3
    80aa:	4325      	orrs	r5, r4
    80ac:	429e      	cmp	r6, r3
    80ae:	dd00      	ble.n	80b2 <__aeabi_dadd+0xe2>
    80b0:	e0c4      	b.n	823c <__aeabi_dadd+0x26c>
    80b2:	1b9e      	subs	r6, r3, r6
    80b4:	1c73      	adds	r3, r6, #1
    80b6:	2b1f      	cmp	r3, #31
    80b8:	dd00      	ble.n	80bc <__aeabi_dadd+0xec>
    80ba:	e0f1      	b.n	82a0 <__aeabi_dadd+0x2d0>
    80bc:	2220      	movs	r2, #32
    80be:	0038      	movs	r0, r7
    80c0:	0029      	movs	r1, r5
    80c2:	1ad2      	subs	r2, r2, r3
    80c4:	40d8      	lsrs	r0, r3
    80c6:	4091      	lsls	r1, r2
    80c8:	4097      	lsls	r7, r2
    80ca:	002c      	movs	r4, r5
    80cc:	4301      	orrs	r1, r0
    80ce:	1e78      	subs	r0, r7, #1
    80d0:	4187      	sbcs	r7, r0
    80d2:	40dc      	lsrs	r4, r3
    80d4:	2600      	movs	r6, #0
    80d6:	430f      	orrs	r7, r1
    80d8:	077b      	lsls	r3, r7, #29
    80da:	d009      	beq.n	80f0 <__aeabi_dadd+0x120>
    80dc:	230f      	movs	r3, #15
    80de:	403b      	ands	r3, r7
    80e0:	2b04      	cmp	r3, #4
    80e2:	d005      	beq.n	80f0 <__aeabi_dadd+0x120>
    80e4:	1d3b      	adds	r3, r7, #4
    80e6:	42bb      	cmp	r3, r7
    80e8:	41bf      	sbcs	r7, r7
    80ea:	427f      	negs	r7, r7
    80ec:	19e4      	adds	r4, r4, r7
    80ee:	001f      	movs	r7, r3
    80f0:	0223      	lsls	r3, r4, #8
    80f2:	d52c      	bpl.n	814e <__aeabi_dadd+0x17e>
    80f4:	4b96      	ldr	r3, [pc, #600]	; (8350 <__aeabi_dadd+0x380>)
    80f6:	3601      	adds	r6, #1
    80f8:	429e      	cmp	r6, r3
    80fa:	d100      	bne.n	80fe <__aeabi_dadd+0x12e>
    80fc:	e09a      	b.n	8234 <__aeabi_dadd+0x264>
    80fe:	4645      	mov	r5, r8
    8100:	4b94      	ldr	r3, [pc, #592]	; (8354 <__aeabi_dadd+0x384>)
    8102:	08ff      	lsrs	r7, r7, #3
    8104:	401c      	ands	r4, r3
    8106:	0760      	lsls	r0, r4, #29
    8108:	0576      	lsls	r6, r6, #21
    810a:	0264      	lsls	r4, r4, #9
    810c:	4307      	orrs	r7, r0
    810e:	0b24      	lsrs	r4, r4, #12
    8110:	0d76      	lsrs	r6, r6, #21
    8112:	2100      	movs	r1, #0
    8114:	0324      	lsls	r4, r4, #12
    8116:	0b23      	lsrs	r3, r4, #12
    8118:	0d0c      	lsrs	r4, r1, #20
    811a:	4a8f      	ldr	r2, [pc, #572]	; (8358 <__aeabi_dadd+0x388>)
    811c:	0524      	lsls	r4, r4, #20
    811e:	431c      	orrs	r4, r3
    8120:	4014      	ands	r4, r2
    8122:	0533      	lsls	r3, r6, #20
    8124:	4323      	orrs	r3, r4
    8126:	005b      	lsls	r3, r3, #1
    8128:	07ed      	lsls	r5, r5, #31
    812a:	085b      	lsrs	r3, r3, #1
    812c:	432b      	orrs	r3, r5
    812e:	0038      	movs	r0, r7
    8130:	0019      	movs	r1, r3
    8132:	bc3c      	pop	{r2, r3, r4, r5}
    8134:	4690      	mov	r8, r2
    8136:	4699      	mov	r9, r3
    8138:	46a2      	mov	sl, r4
    813a:	46ab      	mov	fp, r5
    813c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    813e:	4664      	mov	r4, ip
    8140:	4304      	orrs	r4, r0
    8142:	d100      	bne.n	8146 <__aeabi_dadd+0x176>
    8144:	e211      	b.n	856a <__aeabi_dadd+0x59a>
    8146:	0004      	movs	r4, r0
    8148:	4667      	mov	r7, ip
    814a:	077b      	lsls	r3, r7, #29
    814c:	d1c6      	bne.n	80dc <__aeabi_dadd+0x10c>
    814e:	4645      	mov	r5, r8
    8150:	0760      	lsls	r0, r4, #29
    8152:	08ff      	lsrs	r7, r7, #3
    8154:	4307      	orrs	r7, r0
    8156:	08e4      	lsrs	r4, r4, #3
    8158:	4b7d      	ldr	r3, [pc, #500]	; (8350 <__aeabi_dadd+0x380>)
    815a:	429e      	cmp	r6, r3
    815c:	d030      	beq.n	81c0 <__aeabi_dadd+0x1f0>
    815e:	0324      	lsls	r4, r4, #12
    8160:	0576      	lsls	r6, r6, #21
    8162:	0b24      	lsrs	r4, r4, #12
    8164:	0d76      	lsrs	r6, r6, #21
    8166:	e7d4      	b.n	8112 <__aeabi_dadd+0x142>
    8168:	1a33      	subs	r3, r6, r0
    816a:	469a      	mov	sl, r3
    816c:	2b00      	cmp	r3, #0
    816e:	dd78      	ble.n	8262 <__aeabi_dadd+0x292>
    8170:	2800      	cmp	r0, #0
    8172:	d031      	beq.n	81d8 <__aeabi_dadd+0x208>
    8174:	4876      	ldr	r0, [pc, #472]	; (8350 <__aeabi_dadd+0x380>)
    8176:	4286      	cmp	r6, r0
    8178:	d0ae      	beq.n	80d8 <__aeabi_dadd+0x108>
    817a:	2080      	movs	r0, #128	; 0x80
    817c:	0400      	lsls	r0, r0, #16
    817e:	4301      	orrs	r1, r0
    8180:	4653      	mov	r3, sl
    8182:	2b38      	cmp	r3, #56	; 0x38
    8184:	dc00      	bgt.n	8188 <__aeabi_dadd+0x1b8>
    8186:	e0e9      	b.n	835c <__aeabi_dadd+0x38c>
    8188:	430a      	orrs	r2, r1
    818a:	1e51      	subs	r1, r2, #1
    818c:	418a      	sbcs	r2, r1
    818e:	2100      	movs	r1, #0
    8190:	19d2      	adds	r2, r2, r7
    8192:	42ba      	cmp	r2, r7
    8194:	41bf      	sbcs	r7, r7
    8196:	1909      	adds	r1, r1, r4
    8198:	427c      	negs	r4, r7
    819a:	0017      	movs	r7, r2
    819c:	190c      	adds	r4, r1, r4
    819e:	0223      	lsls	r3, r4, #8
    81a0:	d5d3      	bpl.n	814a <__aeabi_dadd+0x17a>
    81a2:	4b6b      	ldr	r3, [pc, #428]	; (8350 <__aeabi_dadd+0x380>)
    81a4:	3601      	adds	r6, #1
    81a6:	429e      	cmp	r6, r3
    81a8:	d100      	bne.n	81ac <__aeabi_dadd+0x1dc>
    81aa:	e13a      	b.n	8422 <__aeabi_dadd+0x452>
    81ac:	2001      	movs	r0, #1
    81ae:	4b69      	ldr	r3, [pc, #420]	; (8354 <__aeabi_dadd+0x384>)
    81b0:	401c      	ands	r4, r3
    81b2:	087b      	lsrs	r3, r7, #1
    81b4:	4007      	ands	r7, r0
    81b6:	431f      	orrs	r7, r3
    81b8:	07e0      	lsls	r0, r4, #31
    81ba:	4307      	orrs	r7, r0
    81bc:	0864      	lsrs	r4, r4, #1
    81be:	e78b      	b.n	80d8 <__aeabi_dadd+0x108>
    81c0:	0023      	movs	r3, r4
    81c2:	433b      	orrs	r3, r7
    81c4:	d100      	bne.n	81c8 <__aeabi_dadd+0x1f8>
    81c6:	e1cb      	b.n	8560 <__aeabi_dadd+0x590>
    81c8:	2280      	movs	r2, #128	; 0x80
    81ca:	0312      	lsls	r2, r2, #12
    81cc:	4314      	orrs	r4, r2
    81ce:	0324      	lsls	r4, r4, #12
    81d0:	0b24      	lsrs	r4, r4, #12
    81d2:	e79e      	b.n	8112 <__aeabi_dadd+0x142>
    81d4:	002e      	movs	r6, r5
    81d6:	e77f      	b.n	80d8 <__aeabi_dadd+0x108>
    81d8:	0008      	movs	r0, r1
    81da:	4310      	orrs	r0, r2
    81dc:	d100      	bne.n	81e0 <__aeabi_dadd+0x210>
    81de:	e0b4      	b.n	834a <__aeabi_dadd+0x37a>
    81e0:	1e58      	subs	r0, r3, #1
    81e2:	2800      	cmp	r0, #0
    81e4:	d000      	beq.n	81e8 <__aeabi_dadd+0x218>
    81e6:	e0de      	b.n	83a6 <__aeabi_dadd+0x3d6>
    81e8:	18ba      	adds	r2, r7, r2
    81ea:	42ba      	cmp	r2, r7
    81ec:	419b      	sbcs	r3, r3
    81ee:	1864      	adds	r4, r4, r1
    81f0:	425b      	negs	r3, r3
    81f2:	18e4      	adds	r4, r4, r3
    81f4:	0017      	movs	r7, r2
    81f6:	2601      	movs	r6, #1
    81f8:	0223      	lsls	r3, r4, #8
    81fa:	d5a6      	bpl.n	814a <__aeabi_dadd+0x17a>
    81fc:	2602      	movs	r6, #2
    81fe:	e7d5      	b.n	81ac <__aeabi_dadd+0x1dc>
    8200:	2d00      	cmp	r5, #0
    8202:	d16e      	bne.n	82e2 <__aeabi_dadd+0x312>
    8204:	1c70      	adds	r0, r6, #1
    8206:	0540      	lsls	r0, r0, #21
    8208:	0d40      	lsrs	r0, r0, #21
    820a:	2801      	cmp	r0, #1
    820c:	dc00      	bgt.n	8210 <__aeabi_dadd+0x240>
    820e:	e0f9      	b.n	8404 <__aeabi_dadd+0x434>
    8210:	1ab8      	subs	r0, r7, r2
    8212:	4684      	mov	ip, r0
    8214:	4287      	cmp	r7, r0
    8216:	4180      	sbcs	r0, r0
    8218:	1ae5      	subs	r5, r4, r3
    821a:	4240      	negs	r0, r0
    821c:	1a2d      	subs	r5, r5, r0
    821e:	0228      	lsls	r0, r5, #8
    8220:	d400      	bmi.n	8224 <__aeabi_dadd+0x254>
    8222:	e089      	b.n	8338 <__aeabi_dadd+0x368>
    8224:	1bd7      	subs	r7, r2, r7
    8226:	42ba      	cmp	r2, r7
    8228:	4192      	sbcs	r2, r2
    822a:	1b1c      	subs	r4, r3, r4
    822c:	4252      	negs	r2, r2
    822e:	1aa5      	subs	r5, r4, r2
    8230:	46d8      	mov	r8, fp
    8232:	e729      	b.n	8088 <__aeabi_dadd+0xb8>
    8234:	4645      	mov	r5, r8
    8236:	2400      	movs	r4, #0
    8238:	2700      	movs	r7, #0
    823a:	e76a      	b.n	8112 <__aeabi_dadd+0x142>
    823c:	4c45      	ldr	r4, [pc, #276]	; (8354 <__aeabi_dadd+0x384>)
    823e:	1af6      	subs	r6, r6, r3
    8240:	402c      	ands	r4, r5
    8242:	e749      	b.n	80d8 <__aeabi_dadd+0x108>
    8244:	003d      	movs	r5, r7
    8246:	3828      	subs	r0, #40	; 0x28
    8248:	4085      	lsls	r5, r0
    824a:	2700      	movs	r7, #0
    824c:	e72e      	b.n	80ac <__aeabi_dadd+0xdc>
    824e:	0038      	movs	r0, r7
    8250:	f001 fb56 	bl	9900 <__clzsi2>
    8254:	3020      	adds	r0, #32
    8256:	e71d      	b.n	8094 <__aeabi_dadd+0xc4>
    8258:	430a      	orrs	r2, r1
    825a:	1e51      	subs	r1, r2, #1
    825c:	418a      	sbcs	r2, r1
    825e:	2100      	movs	r1, #0
    8260:	e707      	b.n	8072 <__aeabi_dadd+0xa2>
    8262:	2b00      	cmp	r3, #0
    8264:	d000      	beq.n	8268 <__aeabi_dadd+0x298>
    8266:	e0f3      	b.n	8450 <__aeabi_dadd+0x480>
    8268:	1c70      	adds	r0, r6, #1
    826a:	0543      	lsls	r3, r0, #21
    826c:	0d5b      	lsrs	r3, r3, #21
    826e:	2b01      	cmp	r3, #1
    8270:	dc00      	bgt.n	8274 <__aeabi_dadd+0x2a4>
    8272:	e0ad      	b.n	83d0 <__aeabi_dadd+0x400>
    8274:	4b36      	ldr	r3, [pc, #216]	; (8350 <__aeabi_dadd+0x380>)
    8276:	4298      	cmp	r0, r3
    8278:	d100      	bne.n	827c <__aeabi_dadd+0x2ac>
    827a:	e0d1      	b.n	8420 <__aeabi_dadd+0x450>
    827c:	18ba      	adds	r2, r7, r2
    827e:	42ba      	cmp	r2, r7
    8280:	41bf      	sbcs	r7, r7
    8282:	1864      	adds	r4, r4, r1
    8284:	427f      	negs	r7, r7
    8286:	19e4      	adds	r4, r4, r7
    8288:	07e7      	lsls	r7, r4, #31
    828a:	0852      	lsrs	r2, r2, #1
    828c:	4317      	orrs	r7, r2
    828e:	0864      	lsrs	r4, r4, #1
    8290:	0006      	movs	r6, r0
    8292:	e721      	b.n	80d8 <__aeabi_dadd+0x108>
    8294:	482e      	ldr	r0, [pc, #184]	; (8350 <__aeabi_dadd+0x380>)
    8296:	4285      	cmp	r5, r0
    8298:	d100      	bne.n	829c <__aeabi_dadd+0x2cc>
    829a:	e093      	b.n	83c4 <__aeabi_dadd+0x3f4>
    829c:	001d      	movs	r5, r3
    829e:	e6d0      	b.n	8042 <__aeabi_dadd+0x72>
    82a0:	0029      	movs	r1, r5
    82a2:	3e1f      	subs	r6, #31
    82a4:	40f1      	lsrs	r1, r6
    82a6:	2b20      	cmp	r3, #32
    82a8:	d100      	bne.n	82ac <__aeabi_dadd+0x2dc>
    82aa:	e08d      	b.n	83c8 <__aeabi_dadd+0x3f8>
    82ac:	2240      	movs	r2, #64	; 0x40
    82ae:	1ad3      	subs	r3, r2, r3
    82b0:	409d      	lsls	r5, r3
    82b2:	432f      	orrs	r7, r5
    82b4:	1e7d      	subs	r5, r7, #1
    82b6:	41af      	sbcs	r7, r5
    82b8:	2400      	movs	r4, #0
    82ba:	430f      	orrs	r7, r1
    82bc:	2600      	movs	r6, #0
    82be:	e744      	b.n	814a <__aeabi_dadd+0x17a>
    82c0:	002b      	movs	r3, r5
    82c2:	0008      	movs	r0, r1
    82c4:	3b20      	subs	r3, #32
    82c6:	40d8      	lsrs	r0, r3
    82c8:	0003      	movs	r3, r0
    82ca:	2d20      	cmp	r5, #32
    82cc:	d100      	bne.n	82d0 <__aeabi_dadd+0x300>
    82ce:	e07d      	b.n	83cc <__aeabi_dadd+0x3fc>
    82d0:	2040      	movs	r0, #64	; 0x40
    82d2:	1b45      	subs	r5, r0, r5
    82d4:	40a9      	lsls	r1, r5
    82d6:	430a      	orrs	r2, r1
    82d8:	1e51      	subs	r1, r2, #1
    82da:	418a      	sbcs	r2, r1
    82dc:	2100      	movs	r1, #0
    82de:	431a      	orrs	r2, r3
    82e0:	e6c7      	b.n	8072 <__aeabi_dadd+0xa2>
    82e2:	2e00      	cmp	r6, #0
    82e4:	d050      	beq.n	8388 <__aeabi_dadd+0x3b8>
    82e6:	4e1a      	ldr	r6, [pc, #104]	; (8350 <__aeabi_dadd+0x380>)
    82e8:	42b0      	cmp	r0, r6
    82ea:	d057      	beq.n	839c <__aeabi_dadd+0x3cc>
    82ec:	2680      	movs	r6, #128	; 0x80
    82ee:	426b      	negs	r3, r5
    82f0:	4699      	mov	r9, r3
    82f2:	0436      	lsls	r6, r6, #16
    82f4:	4334      	orrs	r4, r6
    82f6:	464b      	mov	r3, r9
    82f8:	2b38      	cmp	r3, #56	; 0x38
    82fa:	dd00      	ble.n	82fe <__aeabi_dadd+0x32e>
    82fc:	e0d6      	b.n	84ac <__aeabi_dadd+0x4dc>
    82fe:	2b1f      	cmp	r3, #31
    8300:	dd00      	ble.n	8304 <__aeabi_dadd+0x334>
    8302:	e135      	b.n	8570 <__aeabi_dadd+0x5a0>
    8304:	2620      	movs	r6, #32
    8306:	1af5      	subs	r5, r6, r3
    8308:	0026      	movs	r6, r4
    830a:	40ae      	lsls	r6, r5
    830c:	46b2      	mov	sl, r6
    830e:	003e      	movs	r6, r7
    8310:	40de      	lsrs	r6, r3
    8312:	46ac      	mov	ip, r5
    8314:	0035      	movs	r5, r6
    8316:	4656      	mov	r6, sl
    8318:	432e      	orrs	r6, r5
    831a:	4665      	mov	r5, ip
    831c:	40af      	lsls	r7, r5
    831e:	1e7d      	subs	r5, r7, #1
    8320:	41af      	sbcs	r7, r5
    8322:	40dc      	lsrs	r4, r3
    8324:	4337      	orrs	r7, r6
    8326:	1bd7      	subs	r7, r2, r7
    8328:	42ba      	cmp	r2, r7
    832a:	4192      	sbcs	r2, r2
    832c:	1b0c      	subs	r4, r1, r4
    832e:	4252      	negs	r2, r2
    8330:	1aa4      	subs	r4, r4, r2
    8332:	0006      	movs	r6, r0
    8334:	46d8      	mov	r8, fp
    8336:	e6a3      	b.n	8080 <__aeabi_dadd+0xb0>
    8338:	4664      	mov	r4, ip
    833a:	4667      	mov	r7, ip
    833c:	432c      	orrs	r4, r5
    833e:	d000      	beq.n	8342 <__aeabi_dadd+0x372>
    8340:	e6a2      	b.n	8088 <__aeabi_dadd+0xb8>
    8342:	2500      	movs	r5, #0
    8344:	2600      	movs	r6, #0
    8346:	2700      	movs	r7, #0
    8348:	e706      	b.n	8158 <__aeabi_dadd+0x188>
    834a:	001e      	movs	r6, r3
    834c:	e6c4      	b.n	80d8 <__aeabi_dadd+0x108>
    834e:	46c0      	nop			; (mov r8, r8)
    8350:	000007ff 	.word	0x000007ff
    8354:	ff7fffff 	.word	0xff7fffff
    8358:	800fffff 	.word	0x800fffff
    835c:	2b1f      	cmp	r3, #31
    835e:	dc63      	bgt.n	8428 <__aeabi_dadd+0x458>
    8360:	2020      	movs	r0, #32
    8362:	1ac3      	subs	r3, r0, r3
    8364:	0008      	movs	r0, r1
    8366:	4098      	lsls	r0, r3
    8368:	469c      	mov	ip, r3
    836a:	4683      	mov	fp, r0
    836c:	4653      	mov	r3, sl
    836e:	0010      	movs	r0, r2
    8370:	40d8      	lsrs	r0, r3
    8372:	0003      	movs	r3, r0
    8374:	4658      	mov	r0, fp
    8376:	4318      	orrs	r0, r3
    8378:	4663      	mov	r3, ip
    837a:	409a      	lsls	r2, r3
    837c:	1e53      	subs	r3, r2, #1
    837e:	419a      	sbcs	r2, r3
    8380:	4653      	mov	r3, sl
    8382:	4302      	orrs	r2, r0
    8384:	40d9      	lsrs	r1, r3
    8386:	e703      	b.n	8190 <__aeabi_dadd+0x1c0>
    8388:	0026      	movs	r6, r4
    838a:	433e      	orrs	r6, r7
    838c:	d006      	beq.n	839c <__aeabi_dadd+0x3cc>
    838e:	43eb      	mvns	r3, r5
    8390:	4699      	mov	r9, r3
    8392:	2b00      	cmp	r3, #0
    8394:	d0c7      	beq.n	8326 <__aeabi_dadd+0x356>
    8396:	4e94      	ldr	r6, [pc, #592]	; (85e8 <__aeabi_dadd+0x618>)
    8398:	42b0      	cmp	r0, r6
    839a:	d1ac      	bne.n	82f6 <__aeabi_dadd+0x326>
    839c:	000c      	movs	r4, r1
    839e:	0017      	movs	r7, r2
    83a0:	0006      	movs	r6, r0
    83a2:	46d8      	mov	r8, fp
    83a4:	e698      	b.n	80d8 <__aeabi_dadd+0x108>
    83a6:	4b90      	ldr	r3, [pc, #576]	; (85e8 <__aeabi_dadd+0x618>)
    83a8:	459a      	cmp	sl, r3
    83aa:	d00b      	beq.n	83c4 <__aeabi_dadd+0x3f4>
    83ac:	4682      	mov	sl, r0
    83ae:	e6e7      	b.n	8180 <__aeabi_dadd+0x1b0>
    83b0:	2800      	cmp	r0, #0
    83b2:	d000      	beq.n	83b6 <__aeabi_dadd+0x3e6>
    83b4:	e09e      	b.n	84f4 <__aeabi_dadd+0x524>
    83b6:	0018      	movs	r0, r3
    83b8:	4310      	orrs	r0, r2
    83ba:	d100      	bne.n	83be <__aeabi_dadd+0x3ee>
    83bc:	e0e9      	b.n	8592 <__aeabi_dadd+0x5c2>
    83be:	001c      	movs	r4, r3
    83c0:	0017      	movs	r7, r2
    83c2:	46d8      	mov	r8, fp
    83c4:	4e88      	ldr	r6, [pc, #544]	; (85e8 <__aeabi_dadd+0x618>)
    83c6:	e687      	b.n	80d8 <__aeabi_dadd+0x108>
    83c8:	2500      	movs	r5, #0
    83ca:	e772      	b.n	82b2 <__aeabi_dadd+0x2e2>
    83cc:	2100      	movs	r1, #0
    83ce:	e782      	b.n	82d6 <__aeabi_dadd+0x306>
    83d0:	0023      	movs	r3, r4
    83d2:	433b      	orrs	r3, r7
    83d4:	2e00      	cmp	r6, #0
    83d6:	d000      	beq.n	83da <__aeabi_dadd+0x40a>
    83d8:	e0ab      	b.n	8532 <__aeabi_dadd+0x562>
    83da:	2b00      	cmp	r3, #0
    83dc:	d100      	bne.n	83e0 <__aeabi_dadd+0x410>
    83de:	e0e7      	b.n	85b0 <__aeabi_dadd+0x5e0>
    83e0:	000b      	movs	r3, r1
    83e2:	4313      	orrs	r3, r2
    83e4:	d100      	bne.n	83e8 <__aeabi_dadd+0x418>
    83e6:	e677      	b.n	80d8 <__aeabi_dadd+0x108>
    83e8:	18ba      	adds	r2, r7, r2
    83ea:	42ba      	cmp	r2, r7
    83ec:	41bf      	sbcs	r7, r7
    83ee:	1864      	adds	r4, r4, r1
    83f0:	427f      	negs	r7, r7
    83f2:	19e4      	adds	r4, r4, r7
    83f4:	0223      	lsls	r3, r4, #8
    83f6:	d400      	bmi.n	83fa <__aeabi_dadd+0x42a>
    83f8:	e0f2      	b.n	85e0 <__aeabi_dadd+0x610>
    83fa:	4b7c      	ldr	r3, [pc, #496]	; (85ec <__aeabi_dadd+0x61c>)
    83fc:	0017      	movs	r7, r2
    83fe:	401c      	ands	r4, r3
    8400:	0006      	movs	r6, r0
    8402:	e669      	b.n	80d8 <__aeabi_dadd+0x108>
    8404:	0020      	movs	r0, r4
    8406:	4338      	orrs	r0, r7
    8408:	2e00      	cmp	r6, #0
    840a:	d1d1      	bne.n	83b0 <__aeabi_dadd+0x3e0>
    840c:	2800      	cmp	r0, #0
    840e:	d15b      	bne.n	84c8 <__aeabi_dadd+0x4f8>
    8410:	001c      	movs	r4, r3
    8412:	4314      	orrs	r4, r2
    8414:	d100      	bne.n	8418 <__aeabi_dadd+0x448>
    8416:	e0a8      	b.n	856a <__aeabi_dadd+0x59a>
    8418:	001c      	movs	r4, r3
    841a:	0017      	movs	r7, r2
    841c:	46d8      	mov	r8, fp
    841e:	e65b      	b.n	80d8 <__aeabi_dadd+0x108>
    8420:	0006      	movs	r6, r0
    8422:	2400      	movs	r4, #0
    8424:	2700      	movs	r7, #0
    8426:	e697      	b.n	8158 <__aeabi_dadd+0x188>
    8428:	4650      	mov	r0, sl
    842a:	000b      	movs	r3, r1
    842c:	3820      	subs	r0, #32
    842e:	40c3      	lsrs	r3, r0
    8430:	4699      	mov	r9, r3
    8432:	4653      	mov	r3, sl
    8434:	2b20      	cmp	r3, #32
    8436:	d100      	bne.n	843a <__aeabi_dadd+0x46a>
    8438:	e095      	b.n	8566 <__aeabi_dadd+0x596>
    843a:	2340      	movs	r3, #64	; 0x40
    843c:	4650      	mov	r0, sl
    843e:	1a1b      	subs	r3, r3, r0
    8440:	4099      	lsls	r1, r3
    8442:	430a      	orrs	r2, r1
    8444:	1e51      	subs	r1, r2, #1
    8446:	418a      	sbcs	r2, r1
    8448:	464b      	mov	r3, r9
    844a:	2100      	movs	r1, #0
    844c:	431a      	orrs	r2, r3
    844e:	e69f      	b.n	8190 <__aeabi_dadd+0x1c0>
    8450:	2e00      	cmp	r6, #0
    8452:	d130      	bne.n	84b6 <__aeabi_dadd+0x4e6>
    8454:	0026      	movs	r6, r4
    8456:	433e      	orrs	r6, r7
    8458:	d067      	beq.n	852a <__aeabi_dadd+0x55a>
    845a:	43db      	mvns	r3, r3
    845c:	469a      	mov	sl, r3
    845e:	2b00      	cmp	r3, #0
    8460:	d01c      	beq.n	849c <__aeabi_dadd+0x4cc>
    8462:	4e61      	ldr	r6, [pc, #388]	; (85e8 <__aeabi_dadd+0x618>)
    8464:	42b0      	cmp	r0, r6
    8466:	d060      	beq.n	852a <__aeabi_dadd+0x55a>
    8468:	4653      	mov	r3, sl
    846a:	2b38      	cmp	r3, #56	; 0x38
    846c:	dd00      	ble.n	8470 <__aeabi_dadd+0x4a0>
    846e:	e096      	b.n	859e <__aeabi_dadd+0x5ce>
    8470:	2b1f      	cmp	r3, #31
    8472:	dd00      	ble.n	8476 <__aeabi_dadd+0x4a6>
    8474:	e09f      	b.n	85b6 <__aeabi_dadd+0x5e6>
    8476:	2620      	movs	r6, #32
    8478:	1af3      	subs	r3, r6, r3
    847a:	0026      	movs	r6, r4
    847c:	409e      	lsls	r6, r3
    847e:	469c      	mov	ip, r3
    8480:	46b3      	mov	fp, r6
    8482:	4653      	mov	r3, sl
    8484:	003e      	movs	r6, r7
    8486:	40de      	lsrs	r6, r3
    8488:	0033      	movs	r3, r6
    848a:	465e      	mov	r6, fp
    848c:	431e      	orrs	r6, r3
    848e:	4663      	mov	r3, ip
    8490:	409f      	lsls	r7, r3
    8492:	1e7b      	subs	r3, r7, #1
    8494:	419f      	sbcs	r7, r3
    8496:	4653      	mov	r3, sl
    8498:	40dc      	lsrs	r4, r3
    849a:	4337      	orrs	r7, r6
    849c:	18bf      	adds	r7, r7, r2
    849e:	4297      	cmp	r7, r2
    84a0:	4192      	sbcs	r2, r2
    84a2:	1864      	adds	r4, r4, r1
    84a4:	4252      	negs	r2, r2
    84a6:	18a4      	adds	r4, r4, r2
    84a8:	0006      	movs	r6, r0
    84aa:	e678      	b.n	819e <__aeabi_dadd+0x1ce>
    84ac:	4327      	orrs	r7, r4
    84ae:	1e7c      	subs	r4, r7, #1
    84b0:	41a7      	sbcs	r7, r4
    84b2:	2400      	movs	r4, #0
    84b4:	e737      	b.n	8326 <__aeabi_dadd+0x356>
    84b6:	4e4c      	ldr	r6, [pc, #304]	; (85e8 <__aeabi_dadd+0x618>)
    84b8:	42b0      	cmp	r0, r6
    84ba:	d036      	beq.n	852a <__aeabi_dadd+0x55a>
    84bc:	2680      	movs	r6, #128	; 0x80
    84be:	425b      	negs	r3, r3
    84c0:	0436      	lsls	r6, r6, #16
    84c2:	469a      	mov	sl, r3
    84c4:	4334      	orrs	r4, r6
    84c6:	e7cf      	b.n	8468 <__aeabi_dadd+0x498>
    84c8:	0018      	movs	r0, r3
    84ca:	4310      	orrs	r0, r2
    84cc:	d100      	bne.n	84d0 <__aeabi_dadd+0x500>
    84ce:	e603      	b.n	80d8 <__aeabi_dadd+0x108>
    84d0:	1ab8      	subs	r0, r7, r2
    84d2:	4684      	mov	ip, r0
    84d4:	4567      	cmp	r7, ip
    84d6:	41ad      	sbcs	r5, r5
    84d8:	1ae0      	subs	r0, r4, r3
    84da:	426d      	negs	r5, r5
    84dc:	1b40      	subs	r0, r0, r5
    84de:	0205      	lsls	r5, r0, #8
    84e0:	d400      	bmi.n	84e4 <__aeabi_dadd+0x514>
    84e2:	e62c      	b.n	813e <__aeabi_dadd+0x16e>
    84e4:	1bd7      	subs	r7, r2, r7
    84e6:	42ba      	cmp	r2, r7
    84e8:	4192      	sbcs	r2, r2
    84ea:	1b1c      	subs	r4, r3, r4
    84ec:	4252      	negs	r2, r2
    84ee:	1aa4      	subs	r4, r4, r2
    84f0:	46d8      	mov	r8, fp
    84f2:	e5f1      	b.n	80d8 <__aeabi_dadd+0x108>
    84f4:	0018      	movs	r0, r3
    84f6:	4310      	orrs	r0, r2
    84f8:	d100      	bne.n	84fc <__aeabi_dadd+0x52c>
    84fa:	e763      	b.n	83c4 <__aeabi_dadd+0x3f4>
    84fc:	08f8      	lsrs	r0, r7, #3
    84fe:	0767      	lsls	r7, r4, #29
    8500:	4307      	orrs	r7, r0
    8502:	2080      	movs	r0, #128	; 0x80
    8504:	08e4      	lsrs	r4, r4, #3
    8506:	0300      	lsls	r0, r0, #12
    8508:	4204      	tst	r4, r0
    850a:	d008      	beq.n	851e <__aeabi_dadd+0x54e>
    850c:	08dd      	lsrs	r5, r3, #3
    850e:	4205      	tst	r5, r0
    8510:	d105      	bne.n	851e <__aeabi_dadd+0x54e>
    8512:	08d2      	lsrs	r2, r2, #3
    8514:	0759      	lsls	r1, r3, #29
    8516:	4311      	orrs	r1, r2
    8518:	000f      	movs	r7, r1
    851a:	002c      	movs	r4, r5
    851c:	46d8      	mov	r8, fp
    851e:	0f7b      	lsrs	r3, r7, #29
    8520:	00e4      	lsls	r4, r4, #3
    8522:	431c      	orrs	r4, r3
    8524:	00ff      	lsls	r7, r7, #3
    8526:	4e30      	ldr	r6, [pc, #192]	; (85e8 <__aeabi_dadd+0x618>)
    8528:	e5d6      	b.n	80d8 <__aeabi_dadd+0x108>
    852a:	000c      	movs	r4, r1
    852c:	0017      	movs	r7, r2
    852e:	0006      	movs	r6, r0
    8530:	e5d2      	b.n	80d8 <__aeabi_dadd+0x108>
    8532:	2b00      	cmp	r3, #0
    8534:	d038      	beq.n	85a8 <__aeabi_dadd+0x5d8>
    8536:	000b      	movs	r3, r1
    8538:	4313      	orrs	r3, r2
    853a:	d100      	bne.n	853e <__aeabi_dadd+0x56e>
    853c:	e742      	b.n	83c4 <__aeabi_dadd+0x3f4>
    853e:	08f8      	lsrs	r0, r7, #3
    8540:	0767      	lsls	r7, r4, #29
    8542:	4307      	orrs	r7, r0
    8544:	2080      	movs	r0, #128	; 0x80
    8546:	08e4      	lsrs	r4, r4, #3
    8548:	0300      	lsls	r0, r0, #12
    854a:	4204      	tst	r4, r0
    854c:	d0e7      	beq.n	851e <__aeabi_dadd+0x54e>
    854e:	08cb      	lsrs	r3, r1, #3
    8550:	4203      	tst	r3, r0
    8552:	d1e4      	bne.n	851e <__aeabi_dadd+0x54e>
    8554:	08d2      	lsrs	r2, r2, #3
    8556:	0749      	lsls	r1, r1, #29
    8558:	4311      	orrs	r1, r2
    855a:	000f      	movs	r7, r1
    855c:	001c      	movs	r4, r3
    855e:	e7de      	b.n	851e <__aeabi_dadd+0x54e>
    8560:	2700      	movs	r7, #0
    8562:	2400      	movs	r4, #0
    8564:	e5d5      	b.n	8112 <__aeabi_dadd+0x142>
    8566:	2100      	movs	r1, #0
    8568:	e76b      	b.n	8442 <__aeabi_dadd+0x472>
    856a:	2500      	movs	r5, #0
    856c:	2700      	movs	r7, #0
    856e:	e5f3      	b.n	8158 <__aeabi_dadd+0x188>
    8570:	464e      	mov	r6, r9
    8572:	0025      	movs	r5, r4
    8574:	3e20      	subs	r6, #32
    8576:	40f5      	lsrs	r5, r6
    8578:	464b      	mov	r3, r9
    857a:	002e      	movs	r6, r5
    857c:	2b20      	cmp	r3, #32
    857e:	d02d      	beq.n	85dc <__aeabi_dadd+0x60c>
    8580:	2540      	movs	r5, #64	; 0x40
    8582:	1aed      	subs	r5, r5, r3
    8584:	40ac      	lsls	r4, r5
    8586:	4327      	orrs	r7, r4
    8588:	1e7c      	subs	r4, r7, #1
    858a:	41a7      	sbcs	r7, r4
    858c:	2400      	movs	r4, #0
    858e:	4337      	orrs	r7, r6
    8590:	e6c9      	b.n	8326 <__aeabi_dadd+0x356>
    8592:	2480      	movs	r4, #128	; 0x80
    8594:	2500      	movs	r5, #0
    8596:	0324      	lsls	r4, r4, #12
    8598:	4e13      	ldr	r6, [pc, #76]	; (85e8 <__aeabi_dadd+0x618>)
    859a:	2700      	movs	r7, #0
    859c:	e5dc      	b.n	8158 <__aeabi_dadd+0x188>
    859e:	4327      	orrs	r7, r4
    85a0:	1e7c      	subs	r4, r7, #1
    85a2:	41a7      	sbcs	r7, r4
    85a4:	2400      	movs	r4, #0
    85a6:	e779      	b.n	849c <__aeabi_dadd+0x4cc>
    85a8:	000c      	movs	r4, r1
    85aa:	0017      	movs	r7, r2
    85ac:	4e0e      	ldr	r6, [pc, #56]	; (85e8 <__aeabi_dadd+0x618>)
    85ae:	e593      	b.n	80d8 <__aeabi_dadd+0x108>
    85b0:	000c      	movs	r4, r1
    85b2:	0017      	movs	r7, r2
    85b4:	e590      	b.n	80d8 <__aeabi_dadd+0x108>
    85b6:	4656      	mov	r6, sl
    85b8:	0023      	movs	r3, r4
    85ba:	3e20      	subs	r6, #32
    85bc:	40f3      	lsrs	r3, r6
    85be:	4699      	mov	r9, r3
    85c0:	4653      	mov	r3, sl
    85c2:	2b20      	cmp	r3, #32
    85c4:	d00e      	beq.n	85e4 <__aeabi_dadd+0x614>
    85c6:	2340      	movs	r3, #64	; 0x40
    85c8:	4656      	mov	r6, sl
    85ca:	1b9b      	subs	r3, r3, r6
    85cc:	409c      	lsls	r4, r3
    85ce:	4327      	orrs	r7, r4
    85d0:	1e7c      	subs	r4, r7, #1
    85d2:	41a7      	sbcs	r7, r4
    85d4:	464b      	mov	r3, r9
    85d6:	2400      	movs	r4, #0
    85d8:	431f      	orrs	r7, r3
    85da:	e75f      	b.n	849c <__aeabi_dadd+0x4cc>
    85dc:	2400      	movs	r4, #0
    85de:	e7d2      	b.n	8586 <__aeabi_dadd+0x5b6>
    85e0:	0017      	movs	r7, r2
    85e2:	e5b2      	b.n	814a <__aeabi_dadd+0x17a>
    85e4:	2400      	movs	r4, #0
    85e6:	e7f2      	b.n	85ce <__aeabi_dadd+0x5fe>
    85e8:	000007ff 	.word	0x000007ff
    85ec:	ff7fffff 	.word	0xff7fffff

000085f0 <__aeabi_ddiv>:
    85f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    85f2:	4657      	mov	r7, sl
    85f4:	4645      	mov	r5, r8
    85f6:	46de      	mov	lr, fp
    85f8:	464e      	mov	r6, r9
    85fa:	b5e0      	push	{r5, r6, r7, lr}
    85fc:	004c      	lsls	r4, r1, #1
    85fe:	030e      	lsls	r6, r1, #12
    8600:	b087      	sub	sp, #28
    8602:	4683      	mov	fp, r0
    8604:	4692      	mov	sl, r2
    8606:	001d      	movs	r5, r3
    8608:	4680      	mov	r8, r0
    860a:	0b36      	lsrs	r6, r6, #12
    860c:	0d64      	lsrs	r4, r4, #21
    860e:	0fcf      	lsrs	r7, r1, #31
    8610:	2c00      	cmp	r4, #0
    8612:	d04f      	beq.n	86b4 <__aeabi_ddiv+0xc4>
    8614:	4b6f      	ldr	r3, [pc, #444]	; (87d4 <__aeabi_ddiv+0x1e4>)
    8616:	429c      	cmp	r4, r3
    8618:	d035      	beq.n	8686 <__aeabi_ddiv+0x96>
    861a:	2380      	movs	r3, #128	; 0x80
    861c:	0f42      	lsrs	r2, r0, #29
    861e:	041b      	lsls	r3, r3, #16
    8620:	00f6      	lsls	r6, r6, #3
    8622:	4313      	orrs	r3, r2
    8624:	4333      	orrs	r3, r6
    8626:	4699      	mov	r9, r3
    8628:	00c3      	lsls	r3, r0, #3
    862a:	4698      	mov	r8, r3
    862c:	4b6a      	ldr	r3, [pc, #424]	; (87d8 <__aeabi_ddiv+0x1e8>)
    862e:	2600      	movs	r6, #0
    8630:	469c      	mov	ip, r3
    8632:	2300      	movs	r3, #0
    8634:	4464      	add	r4, ip
    8636:	9303      	str	r3, [sp, #12]
    8638:	032b      	lsls	r3, r5, #12
    863a:	0b1b      	lsrs	r3, r3, #12
    863c:	469b      	mov	fp, r3
    863e:	006b      	lsls	r3, r5, #1
    8640:	0fed      	lsrs	r5, r5, #31
    8642:	4650      	mov	r0, sl
    8644:	0d5b      	lsrs	r3, r3, #21
    8646:	9501      	str	r5, [sp, #4]
    8648:	d05e      	beq.n	8708 <__aeabi_ddiv+0x118>
    864a:	4a62      	ldr	r2, [pc, #392]	; (87d4 <__aeabi_ddiv+0x1e4>)
    864c:	4293      	cmp	r3, r2
    864e:	d053      	beq.n	86f8 <__aeabi_ddiv+0x108>
    8650:	465a      	mov	r2, fp
    8652:	00d1      	lsls	r1, r2, #3
    8654:	2280      	movs	r2, #128	; 0x80
    8656:	0f40      	lsrs	r0, r0, #29
    8658:	0412      	lsls	r2, r2, #16
    865a:	4302      	orrs	r2, r0
    865c:	430a      	orrs	r2, r1
    865e:	4693      	mov	fp, r2
    8660:	4652      	mov	r2, sl
    8662:	00d1      	lsls	r1, r2, #3
    8664:	4a5c      	ldr	r2, [pc, #368]	; (87d8 <__aeabi_ddiv+0x1e8>)
    8666:	4694      	mov	ip, r2
    8668:	2200      	movs	r2, #0
    866a:	4463      	add	r3, ip
    866c:	0038      	movs	r0, r7
    866e:	4068      	eors	r0, r5
    8670:	4684      	mov	ip, r0
    8672:	9002      	str	r0, [sp, #8]
    8674:	1ae4      	subs	r4, r4, r3
    8676:	4316      	orrs	r6, r2
    8678:	2e0f      	cmp	r6, #15
    867a:	d900      	bls.n	867e <__aeabi_ddiv+0x8e>
    867c:	e0b4      	b.n	87e8 <__aeabi_ddiv+0x1f8>
    867e:	4b57      	ldr	r3, [pc, #348]	; (87dc <__aeabi_ddiv+0x1ec>)
    8680:	00b6      	lsls	r6, r6, #2
    8682:	599b      	ldr	r3, [r3, r6]
    8684:	469f      	mov	pc, r3
    8686:	0003      	movs	r3, r0
    8688:	4333      	orrs	r3, r6
    868a:	4699      	mov	r9, r3
    868c:	d16c      	bne.n	8768 <__aeabi_ddiv+0x178>
    868e:	2300      	movs	r3, #0
    8690:	4698      	mov	r8, r3
    8692:	3302      	adds	r3, #2
    8694:	2608      	movs	r6, #8
    8696:	9303      	str	r3, [sp, #12]
    8698:	e7ce      	b.n	8638 <__aeabi_ddiv+0x48>
    869a:	46cb      	mov	fp, r9
    869c:	4641      	mov	r1, r8
    869e:	9a03      	ldr	r2, [sp, #12]
    86a0:	9701      	str	r7, [sp, #4]
    86a2:	2a02      	cmp	r2, #2
    86a4:	d165      	bne.n	8772 <__aeabi_ddiv+0x182>
    86a6:	9b01      	ldr	r3, [sp, #4]
    86a8:	4c4a      	ldr	r4, [pc, #296]	; (87d4 <__aeabi_ddiv+0x1e4>)
    86aa:	469c      	mov	ip, r3
    86ac:	2300      	movs	r3, #0
    86ae:	2200      	movs	r2, #0
    86b0:	4698      	mov	r8, r3
    86b2:	e06b      	b.n	878c <__aeabi_ddiv+0x19c>
    86b4:	0003      	movs	r3, r0
    86b6:	4333      	orrs	r3, r6
    86b8:	4699      	mov	r9, r3
    86ba:	d04e      	beq.n	875a <__aeabi_ddiv+0x16a>
    86bc:	2e00      	cmp	r6, #0
    86be:	d100      	bne.n	86c2 <__aeabi_ddiv+0xd2>
    86c0:	e1bc      	b.n	8a3c <__aeabi_ddiv+0x44c>
    86c2:	0030      	movs	r0, r6
    86c4:	f001 f91c 	bl	9900 <__clzsi2>
    86c8:	0003      	movs	r3, r0
    86ca:	3b0b      	subs	r3, #11
    86cc:	2b1c      	cmp	r3, #28
    86ce:	dd00      	ble.n	86d2 <__aeabi_ddiv+0xe2>
    86d0:	e1ac      	b.n	8a2c <__aeabi_ddiv+0x43c>
    86d2:	221d      	movs	r2, #29
    86d4:	1ad3      	subs	r3, r2, r3
    86d6:	465a      	mov	r2, fp
    86d8:	0001      	movs	r1, r0
    86da:	40da      	lsrs	r2, r3
    86dc:	3908      	subs	r1, #8
    86de:	408e      	lsls	r6, r1
    86e0:	0013      	movs	r3, r2
    86e2:	4333      	orrs	r3, r6
    86e4:	4699      	mov	r9, r3
    86e6:	465b      	mov	r3, fp
    86e8:	408b      	lsls	r3, r1
    86ea:	4698      	mov	r8, r3
    86ec:	2300      	movs	r3, #0
    86ee:	4c3c      	ldr	r4, [pc, #240]	; (87e0 <__aeabi_ddiv+0x1f0>)
    86f0:	2600      	movs	r6, #0
    86f2:	1a24      	subs	r4, r4, r0
    86f4:	9303      	str	r3, [sp, #12]
    86f6:	e79f      	b.n	8638 <__aeabi_ddiv+0x48>
    86f8:	4651      	mov	r1, sl
    86fa:	465a      	mov	r2, fp
    86fc:	4311      	orrs	r1, r2
    86fe:	d129      	bne.n	8754 <__aeabi_ddiv+0x164>
    8700:	2200      	movs	r2, #0
    8702:	4693      	mov	fp, r2
    8704:	3202      	adds	r2, #2
    8706:	e7b1      	b.n	866c <__aeabi_ddiv+0x7c>
    8708:	4659      	mov	r1, fp
    870a:	4301      	orrs	r1, r0
    870c:	d01e      	beq.n	874c <__aeabi_ddiv+0x15c>
    870e:	465b      	mov	r3, fp
    8710:	2b00      	cmp	r3, #0
    8712:	d100      	bne.n	8716 <__aeabi_ddiv+0x126>
    8714:	e19e      	b.n	8a54 <__aeabi_ddiv+0x464>
    8716:	4658      	mov	r0, fp
    8718:	f001 f8f2 	bl	9900 <__clzsi2>
    871c:	0003      	movs	r3, r0
    871e:	3b0b      	subs	r3, #11
    8720:	2b1c      	cmp	r3, #28
    8722:	dd00      	ble.n	8726 <__aeabi_ddiv+0x136>
    8724:	e18f      	b.n	8a46 <__aeabi_ddiv+0x456>
    8726:	0002      	movs	r2, r0
    8728:	4659      	mov	r1, fp
    872a:	3a08      	subs	r2, #8
    872c:	4091      	lsls	r1, r2
    872e:	468b      	mov	fp, r1
    8730:	211d      	movs	r1, #29
    8732:	1acb      	subs	r3, r1, r3
    8734:	4651      	mov	r1, sl
    8736:	40d9      	lsrs	r1, r3
    8738:	000b      	movs	r3, r1
    873a:	4659      	mov	r1, fp
    873c:	430b      	orrs	r3, r1
    873e:	4651      	mov	r1, sl
    8740:	469b      	mov	fp, r3
    8742:	4091      	lsls	r1, r2
    8744:	4b26      	ldr	r3, [pc, #152]	; (87e0 <__aeabi_ddiv+0x1f0>)
    8746:	2200      	movs	r2, #0
    8748:	1a1b      	subs	r3, r3, r0
    874a:	e78f      	b.n	866c <__aeabi_ddiv+0x7c>
    874c:	2300      	movs	r3, #0
    874e:	2201      	movs	r2, #1
    8750:	469b      	mov	fp, r3
    8752:	e78b      	b.n	866c <__aeabi_ddiv+0x7c>
    8754:	4651      	mov	r1, sl
    8756:	2203      	movs	r2, #3
    8758:	e788      	b.n	866c <__aeabi_ddiv+0x7c>
    875a:	2300      	movs	r3, #0
    875c:	4698      	mov	r8, r3
    875e:	3301      	adds	r3, #1
    8760:	2604      	movs	r6, #4
    8762:	2400      	movs	r4, #0
    8764:	9303      	str	r3, [sp, #12]
    8766:	e767      	b.n	8638 <__aeabi_ddiv+0x48>
    8768:	2303      	movs	r3, #3
    876a:	46b1      	mov	r9, r6
    876c:	9303      	str	r3, [sp, #12]
    876e:	260c      	movs	r6, #12
    8770:	e762      	b.n	8638 <__aeabi_ddiv+0x48>
    8772:	2a03      	cmp	r2, #3
    8774:	d100      	bne.n	8778 <__aeabi_ddiv+0x188>
    8776:	e25c      	b.n	8c32 <__aeabi_ddiv+0x642>
    8778:	9b01      	ldr	r3, [sp, #4]
    877a:	2a01      	cmp	r2, #1
    877c:	d000      	beq.n	8780 <__aeabi_ddiv+0x190>
    877e:	e1e4      	b.n	8b4a <__aeabi_ddiv+0x55a>
    8780:	4013      	ands	r3, r2
    8782:	469c      	mov	ip, r3
    8784:	2300      	movs	r3, #0
    8786:	2400      	movs	r4, #0
    8788:	2200      	movs	r2, #0
    878a:	4698      	mov	r8, r3
    878c:	2100      	movs	r1, #0
    878e:	0312      	lsls	r2, r2, #12
    8790:	0b13      	lsrs	r3, r2, #12
    8792:	0d0a      	lsrs	r2, r1, #20
    8794:	0512      	lsls	r2, r2, #20
    8796:	431a      	orrs	r2, r3
    8798:	0523      	lsls	r3, r4, #20
    879a:	4c12      	ldr	r4, [pc, #72]	; (87e4 <__aeabi_ddiv+0x1f4>)
    879c:	4640      	mov	r0, r8
    879e:	4022      	ands	r2, r4
    87a0:	4313      	orrs	r3, r2
    87a2:	4662      	mov	r2, ip
    87a4:	005b      	lsls	r3, r3, #1
    87a6:	07d2      	lsls	r2, r2, #31
    87a8:	085b      	lsrs	r3, r3, #1
    87aa:	4313      	orrs	r3, r2
    87ac:	0019      	movs	r1, r3
    87ae:	b007      	add	sp, #28
    87b0:	bc3c      	pop	{r2, r3, r4, r5}
    87b2:	4690      	mov	r8, r2
    87b4:	4699      	mov	r9, r3
    87b6:	46a2      	mov	sl, r4
    87b8:	46ab      	mov	fp, r5
    87ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    87bc:	2300      	movs	r3, #0
    87be:	2280      	movs	r2, #128	; 0x80
    87c0:	469c      	mov	ip, r3
    87c2:	0312      	lsls	r2, r2, #12
    87c4:	4698      	mov	r8, r3
    87c6:	4c03      	ldr	r4, [pc, #12]	; (87d4 <__aeabi_ddiv+0x1e4>)
    87c8:	e7e0      	b.n	878c <__aeabi_ddiv+0x19c>
    87ca:	2300      	movs	r3, #0
    87cc:	4c01      	ldr	r4, [pc, #4]	; (87d4 <__aeabi_ddiv+0x1e4>)
    87ce:	2200      	movs	r2, #0
    87d0:	4698      	mov	r8, r3
    87d2:	e7db      	b.n	878c <__aeabi_ddiv+0x19c>
    87d4:	000007ff 	.word	0x000007ff
    87d8:	fffffc01 	.word	0xfffffc01
    87dc:	0000c310 	.word	0x0000c310
    87e0:	fffffc0d 	.word	0xfffffc0d
    87e4:	800fffff 	.word	0x800fffff
    87e8:	45d9      	cmp	r9, fp
    87ea:	d900      	bls.n	87ee <__aeabi_ddiv+0x1fe>
    87ec:	e139      	b.n	8a62 <__aeabi_ddiv+0x472>
    87ee:	d100      	bne.n	87f2 <__aeabi_ddiv+0x202>
    87f0:	e134      	b.n	8a5c <__aeabi_ddiv+0x46c>
    87f2:	2300      	movs	r3, #0
    87f4:	4646      	mov	r6, r8
    87f6:	464d      	mov	r5, r9
    87f8:	469a      	mov	sl, r3
    87fa:	3c01      	subs	r4, #1
    87fc:	465b      	mov	r3, fp
    87fe:	0e0a      	lsrs	r2, r1, #24
    8800:	021b      	lsls	r3, r3, #8
    8802:	431a      	orrs	r2, r3
    8804:	020b      	lsls	r3, r1, #8
    8806:	0c17      	lsrs	r7, r2, #16
    8808:	9303      	str	r3, [sp, #12]
    880a:	0413      	lsls	r3, r2, #16
    880c:	0c1b      	lsrs	r3, r3, #16
    880e:	0039      	movs	r1, r7
    8810:	0028      	movs	r0, r5
    8812:	4690      	mov	r8, r2
    8814:	9301      	str	r3, [sp, #4]
    8816:	f7ff f8a3 	bl	7960 <__udivsi3>
    881a:	0002      	movs	r2, r0
    881c:	9b01      	ldr	r3, [sp, #4]
    881e:	4683      	mov	fp, r0
    8820:	435a      	muls	r2, r3
    8822:	0028      	movs	r0, r5
    8824:	0039      	movs	r1, r7
    8826:	4691      	mov	r9, r2
    8828:	f7ff f920 	bl	7a6c <__aeabi_uidivmod>
    882c:	0c35      	lsrs	r5, r6, #16
    882e:	0409      	lsls	r1, r1, #16
    8830:	430d      	orrs	r5, r1
    8832:	45a9      	cmp	r9, r5
    8834:	d90d      	bls.n	8852 <__aeabi_ddiv+0x262>
    8836:	465b      	mov	r3, fp
    8838:	4445      	add	r5, r8
    883a:	3b01      	subs	r3, #1
    883c:	45a8      	cmp	r8, r5
    883e:	d900      	bls.n	8842 <__aeabi_ddiv+0x252>
    8840:	e13a      	b.n	8ab8 <__aeabi_ddiv+0x4c8>
    8842:	45a9      	cmp	r9, r5
    8844:	d800      	bhi.n	8848 <__aeabi_ddiv+0x258>
    8846:	e137      	b.n	8ab8 <__aeabi_ddiv+0x4c8>
    8848:	2302      	movs	r3, #2
    884a:	425b      	negs	r3, r3
    884c:	469c      	mov	ip, r3
    884e:	4445      	add	r5, r8
    8850:	44e3      	add	fp, ip
    8852:	464b      	mov	r3, r9
    8854:	1aeb      	subs	r3, r5, r3
    8856:	0039      	movs	r1, r7
    8858:	0018      	movs	r0, r3
    885a:	9304      	str	r3, [sp, #16]
    885c:	f7ff f880 	bl	7960 <__udivsi3>
    8860:	9b01      	ldr	r3, [sp, #4]
    8862:	0005      	movs	r5, r0
    8864:	4343      	muls	r3, r0
    8866:	0039      	movs	r1, r7
    8868:	9804      	ldr	r0, [sp, #16]
    886a:	4699      	mov	r9, r3
    886c:	f7ff f8fe 	bl	7a6c <__aeabi_uidivmod>
    8870:	0433      	lsls	r3, r6, #16
    8872:	0409      	lsls	r1, r1, #16
    8874:	0c1b      	lsrs	r3, r3, #16
    8876:	430b      	orrs	r3, r1
    8878:	4599      	cmp	r9, r3
    887a:	d909      	bls.n	8890 <__aeabi_ddiv+0x2a0>
    887c:	4443      	add	r3, r8
    887e:	1e6a      	subs	r2, r5, #1
    8880:	4598      	cmp	r8, r3
    8882:	d900      	bls.n	8886 <__aeabi_ddiv+0x296>
    8884:	e11a      	b.n	8abc <__aeabi_ddiv+0x4cc>
    8886:	4599      	cmp	r9, r3
    8888:	d800      	bhi.n	888c <__aeabi_ddiv+0x29c>
    888a:	e117      	b.n	8abc <__aeabi_ddiv+0x4cc>
    888c:	3d02      	subs	r5, #2
    888e:	4443      	add	r3, r8
    8890:	464a      	mov	r2, r9
    8892:	1a9b      	subs	r3, r3, r2
    8894:	465a      	mov	r2, fp
    8896:	0412      	lsls	r2, r2, #16
    8898:	432a      	orrs	r2, r5
    889a:	9903      	ldr	r1, [sp, #12]
    889c:	4693      	mov	fp, r2
    889e:	0c10      	lsrs	r0, r2, #16
    88a0:	0c0a      	lsrs	r2, r1, #16
    88a2:	4691      	mov	r9, r2
    88a4:	0409      	lsls	r1, r1, #16
    88a6:	465a      	mov	r2, fp
    88a8:	0c09      	lsrs	r1, r1, #16
    88aa:	464e      	mov	r6, r9
    88ac:	000d      	movs	r5, r1
    88ae:	0412      	lsls	r2, r2, #16
    88b0:	0c12      	lsrs	r2, r2, #16
    88b2:	4345      	muls	r5, r0
    88b4:	9105      	str	r1, [sp, #20]
    88b6:	4351      	muls	r1, r2
    88b8:	4372      	muls	r2, r6
    88ba:	4370      	muls	r0, r6
    88bc:	1952      	adds	r2, r2, r5
    88be:	0c0e      	lsrs	r6, r1, #16
    88c0:	18b2      	adds	r2, r6, r2
    88c2:	4295      	cmp	r5, r2
    88c4:	d903      	bls.n	88ce <__aeabi_ddiv+0x2de>
    88c6:	2580      	movs	r5, #128	; 0x80
    88c8:	026d      	lsls	r5, r5, #9
    88ca:	46ac      	mov	ip, r5
    88cc:	4460      	add	r0, ip
    88ce:	0c15      	lsrs	r5, r2, #16
    88d0:	0409      	lsls	r1, r1, #16
    88d2:	0412      	lsls	r2, r2, #16
    88d4:	0c09      	lsrs	r1, r1, #16
    88d6:	1828      	adds	r0, r5, r0
    88d8:	1852      	adds	r2, r2, r1
    88da:	4283      	cmp	r3, r0
    88dc:	d200      	bcs.n	88e0 <__aeabi_ddiv+0x2f0>
    88de:	e0ce      	b.n	8a7e <__aeabi_ddiv+0x48e>
    88e0:	d100      	bne.n	88e4 <__aeabi_ddiv+0x2f4>
    88e2:	e0c8      	b.n	8a76 <__aeabi_ddiv+0x486>
    88e4:	1a1d      	subs	r5, r3, r0
    88e6:	4653      	mov	r3, sl
    88e8:	1a9e      	subs	r6, r3, r2
    88ea:	45b2      	cmp	sl, r6
    88ec:	4192      	sbcs	r2, r2
    88ee:	4252      	negs	r2, r2
    88f0:	1aab      	subs	r3, r5, r2
    88f2:	469a      	mov	sl, r3
    88f4:	4598      	cmp	r8, r3
    88f6:	d100      	bne.n	88fa <__aeabi_ddiv+0x30a>
    88f8:	e117      	b.n	8b2a <__aeabi_ddiv+0x53a>
    88fa:	0039      	movs	r1, r7
    88fc:	0018      	movs	r0, r3
    88fe:	f7ff f82f 	bl	7960 <__udivsi3>
    8902:	9b01      	ldr	r3, [sp, #4]
    8904:	0005      	movs	r5, r0
    8906:	4343      	muls	r3, r0
    8908:	0039      	movs	r1, r7
    890a:	4650      	mov	r0, sl
    890c:	9304      	str	r3, [sp, #16]
    890e:	f7ff f8ad 	bl	7a6c <__aeabi_uidivmod>
    8912:	9804      	ldr	r0, [sp, #16]
    8914:	040b      	lsls	r3, r1, #16
    8916:	0c31      	lsrs	r1, r6, #16
    8918:	4319      	orrs	r1, r3
    891a:	4288      	cmp	r0, r1
    891c:	d909      	bls.n	8932 <__aeabi_ddiv+0x342>
    891e:	4441      	add	r1, r8
    8920:	1e6b      	subs	r3, r5, #1
    8922:	4588      	cmp	r8, r1
    8924:	d900      	bls.n	8928 <__aeabi_ddiv+0x338>
    8926:	e107      	b.n	8b38 <__aeabi_ddiv+0x548>
    8928:	4288      	cmp	r0, r1
    892a:	d800      	bhi.n	892e <__aeabi_ddiv+0x33e>
    892c:	e104      	b.n	8b38 <__aeabi_ddiv+0x548>
    892e:	3d02      	subs	r5, #2
    8930:	4441      	add	r1, r8
    8932:	9b04      	ldr	r3, [sp, #16]
    8934:	1acb      	subs	r3, r1, r3
    8936:	0018      	movs	r0, r3
    8938:	0039      	movs	r1, r7
    893a:	9304      	str	r3, [sp, #16]
    893c:	f7ff f810 	bl	7960 <__udivsi3>
    8940:	9b01      	ldr	r3, [sp, #4]
    8942:	4682      	mov	sl, r0
    8944:	4343      	muls	r3, r0
    8946:	0039      	movs	r1, r7
    8948:	9804      	ldr	r0, [sp, #16]
    894a:	9301      	str	r3, [sp, #4]
    894c:	f7ff f88e 	bl	7a6c <__aeabi_uidivmod>
    8950:	9801      	ldr	r0, [sp, #4]
    8952:	040b      	lsls	r3, r1, #16
    8954:	0431      	lsls	r1, r6, #16
    8956:	0c09      	lsrs	r1, r1, #16
    8958:	4319      	orrs	r1, r3
    895a:	4288      	cmp	r0, r1
    895c:	d90d      	bls.n	897a <__aeabi_ddiv+0x38a>
    895e:	4653      	mov	r3, sl
    8960:	4441      	add	r1, r8
    8962:	3b01      	subs	r3, #1
    8964:	4588      	cmp	r8, r1
    8966:	d900      	bls.n	896a <__aeabi_ddiv+0x37a>
    8968:	e0e8      	b.n	8b3c <__aeabi_ddiv+0x54c>
    896a:	4288      	cmp	r0, r1
    896c:	d800      	bhi.n	8970 <__aeabi_ddiv+0x380>
    896e:	e0e5      	b.n	8b3c <__aeabi_ddiv+0x54c>
    8970:	2302      	movs	r3, #2
    8972:	425b      	negs	r3, r3
    8974:	469c      	mov	ip, r3
    8976:	4441      	add	r1, r8
    8978:	44e2      	add	sl, ip
    897a:	9b01      	ldr	r3, [sp, #4]
    897c:	042d      	lsls	r5, r5, #16
    897e:	1ace      	subs	r6, r1, r3
    8980:	4651      	mov	r1, sl
    8982:	4329      	orrs	r1, r5
    8984:	9d05      	ldr	r5, [sp, #20]
    8986:	464f      	mov	r7, r9
    8988:	002a      	movs	r2, r5
    898a:	040b      	lsls	r3, r1, #16
    898c:	0c08      	lsrs	r0, r1, #16
    898e:	0c1b      	lsrs	r3, r3, #16
    8990:	435a      	muls	r2, r3
    8992:	4345      	muls	r5, r0
    8994:	437b      	muls	r3, r7
    8996:	4378      	muls	r0, r7
    8998:	195b      	adds	r3, r3, r5
    899a:	0c17      	lsrs	r7, r2, #16
    899c:	18fb      	adds	r3, r7, r3
    899e:	429d      	cmp	r5, r3
    89a0:	d903      	bls.n	89aa <__aeabi_ddiv+0x3ba>
    89a2:	2580      	movs	r5, #128	; 0x80
    89a4:	026d      	lsls	r5, r5, #9
    89a6:	46ac      	mov	ip, r5
    89a8:	4460      	add	r0, ip
    89aa:	0c1d      	lsrs	r5, r3, #16
    89ac:	0412      	lsls	r2, r2, #16
    89ae:	041b      	lsls	r3, r3, #16
    89b0:	0c12      	lsrs	r2, r2, #16
    89b2:	1828      	adds	r0, r5, r0
    89b4:	189b      	adds	r3, r3, r2
    89b6:	4286      	cmp	r6, r0
    89b8:	d200      	bcs.n	89bc <__aeabi_ddiv+0x3cc>
    89ba:	e093      	b.n	8ae4 <__aeabi_ddiv+0x4f4>
    89bc:	d100      	bne.n	89c0 <__aeabi_ddiv+0x3d0>
    89be:	e08e      	b.n	8ade <__aeabi_ddiv+0x4ee>
    89c0:	2301      	movs	r3, #1
    89c2:	4319      	orrs	r1, r3
    89c4:	4ba0      	ldr	r3, [pc, #640]	; (8c48 <__aeabi_ddiv+0x658>)
    89c6:	18e3      	adds	r3, r4, r3
    89c8:	2b00      	cmp	r3, #0
    89ca:	dc00      	bgt.n	89ce <__aeabi_ddiv+0x3de>
    89cc:	e099      	b.n	8b02 <__aeabi_ddiv+0x512>
    89ce:	074a      	lsls	r2, r1, #29
    89d0:	d000      	beq.n	89d4 <__aeabi_ddiv+0x3e4>
    89d2:	e09e      	b.n	8b12 <__aeabi_ddiv+0x522>
    89d4:	465a      	mov	r2, fp
    89d6:	01d2      	lsls	r2, r2, #7
    89d8:	d506      	bpl.n	89e8 <__aeabi_ddiv+0x3f8>
    89da:	465a      	mov	r2, fp
    89dc:	4b9b      	ldr	r3, [pc, #620]	; (8c4c <__aeabi_ddiv+0x65c>)
    89de:	401a      	ands	r2, r3
    89e0:	2380      	movs	r3, #128	; 0x80
    89e2:	4693      	mov	fp, r2
    89e4:	00db      	lsls	r3, r3, #3
    89e6:	18e3      	adds	r3, r4, r3
    89e8:	4a99      	ldr	r2, [pc, #612]	; (8c50 <__aeabi_ddiv+0x660>)
    89ea:	4293      	cmp	r3, r2
    89ec:	dd68      	ble.n	8ac0 <__aeabi_ddiv+0x4d0>
    89ee:	2301      	movs	r3, #1
    89f0:	9a02      	ldr	r2, [sp, #8]
    89f2:	4c98      	ldr	r4, [pc, #608]	; (8c54 <__aeabi_ddiv+0x664>)
    89f4:	401a      	ands	r2, r3
    89f6:	2300      	movs	r3, #0
    89f8:	4694      	mov	ip, r2
    89fa:	4698      	mov	r8, r3
    89fc:	2200      	movs	r2, #0
    89fe:	e6c5      	b.n	878c <__aeabi_ddiv+0x19c>
    8a00:	2280      	movs	r2, #128	; 0x80
    8a02:	464b      	mov	r3, r9
    8a04:	0312      	lsls	r2, r2, #12
    8a06:	4213      	tst	r3, r2
    8a08:	d00a      	beq.n	8a20 <__aeabi_ddiv+0x430>
    8a0a:	465b      	mov	r3, fp
    8a0c:	4213      	tst	r3, r2
    8a0e:	d106      	bne.n	8a1e <__aeabi_ddiv+0x42e>
    8a10:	431a      	orrs	r2, r3
    8a12:	0312      	lsls	r2, r2, #12
    8a14:	0b12      	lsrs	r2, r2, #12
    8a16:	46ac      	mov	ip, r5
    8a18:	4688      	mov	r8, r1
    8a1a:	4c8e      	ldr	r4, [pc, #568]	; (8c54 <__aeabi_ddiv+0x664>)
    8a1c:	e6b6      	b.n	878c <__aeabi_ddiv+0x19c>
    8a1e:	464b      	mov	r3, r9
    8a20:	431a      	orrs	r2, r3
    8a22:	0312      	lsls	r2, r2, #12
    8a24:	0b12      	lsrs	r2, r2, #12
    8a26:	46bc      	mov	ip, r7
    8a28:	4c8a      	ldr	r4, [pc, #552]	; (8c54 <__aeabi_ddiv+0x664>)
    8a2a:	e6af      	b.n	878c <__aeabi_ddiv+0x19c>
    8a2c:	0003      	movs	r3, r0
    8a2e:	465a      	mov	r2, fp
    8a30:	3b28      	subs	r3, #40	; 0x28
    8a32:	409a      	lsls	r2, r3
    8a34:	2300      	movs	r3, #0
    8a36:	4691      	mov	r9, r2
    8a38:	4698      	mov	r8, r3
    8a3a:	e657      	b.n	86ec <__aeabi_ddiv+0xfc>
    8a3c:	4658      	mov	r0, fp
    8a3e:	f000 ff5f 	bl	9900 <__clzsi2>
    8a42:	3020      	adds	r0, #32
    8a44:	e640      	b.n	86c8 <__aeabi_ddiv+0xd8>
    8a46:	0003      	movs	r3, r0
    8a48:	4652      	mov	r2, sl
    8a4a:	3b28      	subs	r3, #40	; 0x28
    8a4c:	409a      	lsls	r2, r3
    8a4e:	2100      	movs	r1, #0
    8a50:	4693      	mov	fp, r2
    8a52:	e677      	b.n	8744 <__aeabi_ddiv+0x154>
    8a54:	f000 ff54 	bl	9900 <__clzsi2>
    8a58:	3020      	adds	r0, #32
    8a5a:	e65f      	b.n	871c <__aeabi_ddiv+0x12c>
    8a5c:	4588      	cmp	r8, r1
    8a5e:	d200      	bcs.n	8a62 <__aeabi_ddiv+0x472>
    8a60:	e6c7      	b.n	87f2 <__aeabi_ddiv+0x202>
    8a62:	464b      	mov	r3, r9
    8a64:	07de      	lsls	r6, r3, #31
    8a66:	085d      	lsrs	r5, r3, #1
    8a68:	4643      	mov	r3, r8
    8a6a:	085b      	lsrs	r3, r3, #1
    8a6c:	431e      	orrs	r6, r3
    8a6e:	4643      	mov	r3, r8
    8a70:	07db      	lsls	r3, r3, #31
    8a72:	469a      	mov	sl, r3
    8a74:	e6c2      	b.n	87fc <__aeabi_ddiv+0x20c>
    8a76:	2500      	movs	r5, #0
    8a78:	4592      	cmp	sl, r2
    8a7a:	d300      	bcc.n	8a7e <__aeabi_ddiv+0x48e>
    8a7c:	e733      	b.n	88e6 <__aeabi_ddiv+0x2f6>
    8a7e:	9e03      	ldr	r6, [sp, #12]
    8a80:	4659      	mov	r1, fp
    8a82:	46b4      	mov	ip, r6
    8a84:	44e2      	add	sl, ip
    8a86:	45b2      	cmp	sl, r6
    8a88:	41ad      	sbcs	r5, r5
    8a8a:	426d      	negs	r5, r5
    8a8c:	4445      	add	r5, r8
    8a8e:	18eb      	adds	r3, r5, r3
    8a90:	3901      	subs	r1, #1
    8a92:	4598      	cmp	r8, r3
    8a94:	d207      	bcs.n	8aa6 <__aeabi_ddiv+0x4b6>
    8a96:	4298      	cmp	r0, r3
    8a98:	d900      	bls.n	8a9c <__aeabi_ddiv+0x4ac>
    8a9a:	e07f      	b.n	8b9c <__aeabi_ddiv+0x5ac>
    8a9c:	d100      	bne.n	8aa0 <__aeabi_ddiv+0x4b0>
    8a9e:	e0bc      	b.n	8c1a <__aeabi_ddiv+0x62a>
    8aa0:	1a1d      	subs	r5, r3, r0
    8aa2:	468b      	mov	fp, r1
    8aa4:	e71f      	b.n	88e6 <__aeabi_ddiv+0x2f6>
    8aa6:	4598      	cmp	r8, r3
    8aa8:	d1fa      	bne.n	8aa0 <__aeabi_ddiv+0x4b0>
    8aaa:	9d03      	ldr	r5, [sp, #12]
    8aac:	4555      	cmp	r5, sl
    8aae:	d9f2      	bls.n	8a96 <__aeabi_ddiv+0x4a6>
    8ab0:	4643      	mov	r3, r8
    8ab2:	468b      	mov	fp, r1
    8ab4:	1a1d      	subs	r5, r3, r0
    8ab6:	e716      	b.n	88e6 <__aeabi_ddiv+0x2f6>
    8ab8:	469b      	mov	fp, r3
    8aba:	e6ca      	b.n	8852 <__aeabi_ddiv+0x262>
    8abc:	0015      	movs	r5, r2
    8abe:	e6e7      	b.n	8890 <__aeabi_ddiv+0x2a0>
    8ac0:	465a      	mov	r2, fp
    8ac2:	08c9      	lsrs	r1, r1, #3
    8ac4:	0752      	lsls	r2, r2, #29
    8ac6:	430a      	orrs	r2, r1
    8ac8:	055b      	lsls	r3, r3, #21
    8aca:	4690      	mov	r8, r2
    8acc:	0d5c      	lsrs	r4, r3, #21
    8ace:	465a      	mov	r2, fp
    8ad0:	2301      	movs	r3, #1
    8ad2:	9902      	ldr	r1, [sp, #8]
    8ad4:	0252      	lsls	r2, r2, #9
    8ad6:	4019      	ands	r1, r3
    8ad8:	0b12      	lsrs	r2, r2, #12
    8ada:	468c      	mov	ip, r1
    8adc:	e656      	b.n	878c <__aeabi_ddiv+0x19c>
    8ade:	2b00      	cmp	r3, #0
    8ae0:	d100      	bne.n	8ae4 <__aeabi_ddiv+0x4f4>
    8ae2:	e76f      	b.n	89c4 <__aeabi_ddiv+0x3d4>
    8ae4:	4446      	add	r6, r8
    8ae6:	1e4a      	subs	r2, r1, #1
    8ae8:	45b0      	cmp	r8, r6
    8aea:	d929      	bls.n	8b40 <__aeabi_ddiv+0x550>
    8aec:	0011      	movs	r1, r2
    8aee:	4286      	cmp	r6, r0
    8af0:	d000      	beq.n	8af4 <__aeabi_ddiv+0x504>
    8af2:	e765      	b.n	89c0 <__aeabi_ddiv+0x3d0>
    8af4:	9a03      	ldr	r2, [sp, #12]
    8af6:	4293      	cmp	r3, r2
    8af8:	d000      	beq.n	8afc <__aeabi_ddiv+0x50c>
    8afa:	e761      	b.n	89c0 <__aeabi_ddiv+0x3d0>
    8afc:	e762      	b.n	89c4 <__aeabi_ddiv+0x3d4>
    8afe:	2101      	movs	r1, #1
    8b00:	4249      	negs	r1, r1
    8b02:	2001      	movs	r0, #1
    8b04:	1ac2      	subs	r2, r0, r3
    8b06:	2a38      	cmp	r2, #56	; 0x38
    8b08:	dd21      	ble.n	8b4e <__aeabi_ddiv+0x55e>
    8b0a:	9b02      	ldr	r3, [sp, #8]
    8b0c:	4003      	ands	r3, r0
    8b0e:	469c      	mov	ip, r3
    8b10:	e638      	b.n	8784 <__aeabi_ddiv+0x194>
    8b12:	220f      	movs	r2, #15
    8b14:	400a      	ands	r2, r1
    8b16:	2a04      	cmp	r2, #4
    8b18:	d100      	bne.n	8b1c <__aeabi_ddiv+0x52c>
    8b1a:	e75b      	b.n	89d4 <__aeabi_ddiv+0x3e4>
    8b1c:	000a      	movs	r2, r1
    8b1e:	1d11      	adds	r1, r2, #4
    8b20:	4291      	cmp	r1, r2
    8b22:	4192      	sbcs	r2, r2
    8b24:	4252      	negs	r2, r2
    8b26:	4493      	add	fp, r2
    8b28:	e754      	b.n	89d4 <__aeabi_ddiv+0x3e4>
    8b2a:	4b47      	ldr	r3, [pc, #284]	; (8c48 <__aeabi_ddiv+0x658>)
    8b2c:	18e3      	adds	r3, r4, r3
    8b2e:	2b00      	cmp	r3, #0
    8b30:	dde5      	ble.n	8afe <__aeabi_ddiv+0x50e>
    8b32:	2201      	movs	r2, #1
    8b34:	4252      	negs	r2, r2
    8b36:	e7f2      	b.n	8b1e <__aeabi_ddiv+0x52e>
    8b38:	001d      	movs	r5, r3
    8b3a:	e6fa      	b.n	8932 <__aeabi_ddiv+0x342>
    8b3c:	469a      	mov	sl, r3
    8b3e:	e71c      	b.n	897a <__aeabi_ddiv+0x38a>
    8b40:	42b0      	cmp	r0, r6
    8b42:	d839      	bhi.n	8bb8 <__aeabi_ddiv+0x5c8>
    8b44:	d06e      	beq.n	8c24 <__aeabi_ddiv+0x634>
    8b46:	0011      	movs	r1, r2
    8b48:	e73a      	b.n	89c0 <__aeabi_ddiv+0x3d0>
    8b4a:	9302      	str	r3, [sp, #8]
    8b4c:	e73a      	b.n	89c4 <__aeabi_ddiv+0x3d4>
    8b4e:	2a1f      	cmp	r2, #31
    8b50:	dc3c      	bgt.n	8bcc <__aeabi_ddiv+0x5dc>
    8b52:	2320      	movs	r3, #32
    8b54:	1a9b      	subs	r3, r3, r2
    8b56:	000c      	movs	r4, r1
    8b58:	4658      	mov	r0, fp
    8b5a:	4099      	lsls	r1, r3
    8b5c:	4098      	lsls	r0, r3
    8b5e:	1e4b      	subs	r3, r1, #1
    8b60:	4199      	sbcs	r1, r3
    8b62:	465b      	mov	r3, fp
    8b64:	40d4      	lsrs	r4, r2
    8b66:	40d3      	lsrs	r3, r2
    8b68:	4320      	orrs	r0, r4
    8b6a:	4308      	orrs	r0, r1
    8b6c:	001a      	movs	r2, r3
    8b6e:	0743      	lsls	r3, r0, #29
    8b70:	d009      	beq.n	8b86 <__aeabi_ddiv+0x596>
    8b72:	230f      	movs	r3, #15
    8b74:	4003      	ands	r3, r0
    8b76:	2b04      	cmp	r3, #4
    8b78:	d005      	beq.n	8b86 <__aeabi_ddiv+0x596>
    8b7a:	0001      	movs	r1, r0
    8b7c:	1d08      	adds	r0, r1, #4
    8b7e:	4288      	cmp	r0, r1
    8b80:	419b      	sbcs	r3, r3
    8b82:	425b      	negs	r3, r3
    8b84:	18d2      	adds	r2, r2, r3
    8b86:	0213      	lsls	r3, r2, #8
    8b88:	d53a      	bpl.n	8c00 <__aeabi_ddiv+0x610>
    8b8a:	2301      	movs	r3, #1
    8b8c:	9a02      	ldr	r2, [sp, #8]
    8b8e:	2401      	movs	r4, #1
    8b90:	401a      	ands	r2, r3
    8b92:	2300      	movs	r3, #0
    8b94:	4694      	mov	ip, r2
    8b96:	4698      	mov	r8, r3
    8b98:	2200      	movs	r2, #0
    8b9a:	e5f7      	b.n	878c <__aeabi_ddiv+0x19c>
    8b9c:	2102      	movs	r1, #2
    8b9e:	4249      	negs	r1, r1
    8ba0:	468c      	mov	ip, r1
    8ba2:	9d03      	ldr	r5, [sp, #12]
    8ba4:	44e3      	add	fp, ip
    8ba6:	46ac      	mov	ip, r5
    8ba8:	44e2      	add	sl, ip
    8baa:	45aa      	cmp	sl, r5
    8bac:	41ad      	sbcs	r5, r5
    8bae:	426d      	negs	r5, r5
    8bb0:	4445      	add	r5, r8
    8bb2:	18ed      	adds	r5, r5, r3
    8bb4:	1a2d      	subs	r5, r5, r0
    8bb6:	e696      	b.n	88e6 <__aeabi_ddiv+0x2f6>
    8bb8:	1e8a      	subs	r2, r1, #2
    8bba:	9903      	ldr	r1, [sp, #12]
    8bbc:	004d      	lsls	r5, r1, #1
    8bbe:	428d      	cmp	r5, r1
    8bc0:	4189      	sbcs	r1, r1
    8bc2:	4249      	negs	r1, r1
    8bc4:	4441      	add	r1, r8
    8bc6:	1876      	adds	r6, r6, r1
    8bc8:	9503      	str	r5, [sp, #12]
    8bca:	e78f      	b.n	8aec <__aeabi_ddiv+0x4fc>
    8bcc:	201f      	movs	r0, #31
    8bce:	4240      	negs	r0, r0
    8bd0:	1ac3      	subs	r3, r0, r3
    8bd2:	4658      	mov	r0, fp
    8bd4:	40d8      	lsrs	r0, r3
    8bd6:	0003      	movs	r3, r0
    8bd8:	2a20      	cmp	r2, #32
    8bda:	d028      	beq.n	8c2e <__aeabi_ddiv+0x63e>
    8bdc:	2040      	movs	r0, #64	; 0x40
    8bde:	465d      	mov	r5, fp
    8be0:	1a82      	subs	r2, r0, r2
    8be2:	4095      	lsls	r5, r2
    8be4:	4329      	orrs	r1, r5
    8be6:	1e4a      	subs	r2, r1, #1
    8be8:	4191      	sbcs	r1, r2
    8bea:	4319      	orrs	r1, r3
    8bec:	2307      	movs	r3, #7
    8bee:	2200      	movs	r2, #0
    8bf0:	400b      	ands	r3, r1
    8bf2:	d009      	beq.n	8c08 <__aeabi_ddiv+0x618>
    8bf4:	230f      	movs	r3, #15
    8bf6:	2200      	movs	r2, #0
    8bf8:	400b      	ands	r3, r1
    8bfa:	0008      	movs	r0, r1
    8bfc:	2b04      	cmp	r3, #4
    8bfe:	d1bd      	bne.n	8b7c <__aeabi_ddiv+0x58c>
    8c00:	0001      	movs	r1, r0
    8c02:	0753      	lsls	r3, r2, #29
    8c04:	0252      	lsls	r2, r2, #9
    8c06:	0b12      	lsrs	r2, r2, #12
    8c08:	08c9      	lsrs	r1, r1, #3
    8c0a:	4319      	orrs	r1, r3
    8c0c:	2301      	movs	r3, #1
    8c0e:	4688      	mov	r8, r1
    8c10:	9902      	ldr	r1, [sp, #8]
    8c12:	2400      	movs	r4, #0
    8c14:	4019      	ands	r1, r3
    8c16:	468c      	mov	ip, r1
    8c18:	e5b8      	b.n	878c <__aeabi_ddiv+0x19c>
    8c1a:	4552      	cmp	r2, sl
    8c1c:	d8be      	bhi.n	8b9c <__aeabi_ddiv+0x5ac>
    8c1e:	468b      	mov	fp, r1
    8c20:	2500      	movs	r5, #0
    8c22:	e660      	b.n	88e6 <__aeabi_ddiv+0x2f6>
    8c24:	9d03      	ldr	r5, [sp, #12]
    8c26:	429d      	cmp	r5, r3
    8c28:	d3c6      	bcc.n	8bb8 <__aeabi_ddiv+0x5c8>
    8c2a:	0011      	movs	r1, r2
    8c2c:	e762      	b.n	8af4 <__aeabi_ddiv+0x504>
    8c2e:	2500      	movs	r5, #0
    8c30:	e7d8      	b.n	8be4 <__aeabi_ddiv+0x5f4>
    8c32:	2280      	movs	r2, #128	; 0x80
    8c34:	465b      	mov	r3, fp
    8c36:	0312      	lsls	r2, r2, #12
    8c38:	431a      	orrs	r2, r3
    8c3a:	9b01      	ldr	r3, [sp, #4]
    8c3c:	0312      	lsls	r2, r2, #12
    8c3e:	0b12      	lsrs	r2, r2, #12
    8c40:	469c      	mov	ip, r3
    8c42:	4688      	mov	r8, r1
    8c44:	4c03      	ldr	r4, [pc, #12]	; (8c54 <__aeabi_ddiv+0x664>)
    8c46:	e5a1      	b.n	878c <__aeabi_ddiv+0x19c>
    8c48:	000003ff 	.word	0x000003ff
    8c4c:	feffffff 	.word	0xfeffffff
    8c50:	000007fe 	.word	0x000007fe
    8c54:	000007ff 	.word	0x000007ff

00008c58 <__aeabi_dmul>:
    8c58:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c5a:	4657      	mov	r7, sl
    8c5c:	4645      	mov	r5, r8
    8c5e:	46de      	mov	lr, fp
    8c60:	464e      	mov	r6, r9
    8c62:	b5e0      	push	{r5, r6, r7, lr}
    8c64:	030c      	lsls	r4, r1, #12
    8c66:	4698      	mov	r8, r3
    8c68:	004e      	lsls	r6, r1, #1
    8c6a:	0b23      	lsrs	r3, r4, #12
    8c6c:	b087      	sub	sp, #28
    8c6e:	0007      	movs	r7, r0
    8c70:	4692      	mov	sl, r2
    8c72:	469b      	mov	fp, r3
    8c74:	0d76      	lsrs	r6, r6, #21
    8c76:	0fcd      	lsrs	r5, r1, #31
    8c78:	2e00      	cmp	r6, #0
    8c7a:	d06b      	beq.n	8d54 <__aeabi_dmul+0xfc>
    8c7c:	4b6d      	ldr	r3, [pc, #436]	; (8e34 <__aeabi_dmul+0x1dc>)
    8c7e:	429e      	cmp	r6, r3
    8c80:	d035      	beq.n	8cee <__aeabi_dmul+0x96>
    8c82:	2480      	movs	r4, #128	; 0x80
    8c84:	465b      	mov	r3, fp
    8c86:	0f42      	lsrs	r2, r0, #29
    8c88:	0424      	lsls	r4, r4, #16
    8c8a:	00db      	lsls	r3, r3, #3
    8c8c:	4314      	orrs	r4, r2
    8c8e:	431c      	orrs	r4, r3
    8c90:	00c3      	lsls	r3, r0, #3
    8c92:	4699      	mov	r9, r3
    8c94:	4b68      	ldr	r3, [pc, #416]	; (8e38 <__aeabi_dmul+0x1e0>)
    8c96:	46a3      	mov	fp, r4
    8c98:	469c      	mov	ip, r3
    8c9a:	2300      	movs	r3, #0
    8c9c:	2700      	movs	r7, #0
    8c9e:	4466      	add	r6, ip
    8ca0:	9302      	str	r3, [sp, #8]
    8ca2:	4643      	mov	r3, r8
    8ca4:	031c      	lsls	r4, r3, #12
    8ca6:	005a      	lsls	r2, r3, #1
    8ca8:	0fdb      	lsrs	r3, r3, #31
    8caa:	4650      	mov	r0, sl
    8cac:	0b24      	lsrs	r4, r4, #12
    8cae:	0d52      	lsrs	r2, r2, #21
    8cb0:	4698      	mov	r8, r3
    8cb2:	d100      	bne.n	8cb6 <__aeabi_dmul+0x5e>
    8cb4:	e076      	b.n	8da4 <__aeabi_dmul+0x14c>
    8cb6:	4b5f      	ldr	r3, [pc, #380]	; (8e34 <__aeabi_dmul+0x1dc>)
    8cb8:	429a      	cmp	r2, r3
    8cba:	d06d      	beq.n	8d98 <__aeabi_dmul+0x140>
    8cbc:	2380      	movs	r3, #128	; 0x80
    8cbe:	0f41      	lsrs	r1, r0, #29
    8cc0:	041b      	lsls	r3, r3, #16
    8cc2:	430b      	orrs	r3, r1
    8cc4:	495c      	ldr	r1, [pc, #368]	; (8e38 <__aeabi_dmul+0x1e0>)
    8cc6:	00e4      	lsls	r4, r4, #3
    8cc8:	468c      	mov	ip, r1
    8cca:	431c      	orrs	r4, r3
    8ccc:	00c3      	lsls	r3, r0, #3
    8cce:	2000      	movs	r0, #0
    8cd0:	4462      	add	r2, ip
    8cd2:	4641      	mov	r1, r8
    8cd4:	18b6      	adds	r6, r6, r2
    8cd6:	4069      	eors	r1, r5
    8cd8:	1c72      	adds	r2, r6, #1
    8cda:	9101      	str	r1, [sp, #4]
    8cdc:	4694      	mov	ip, r2
    8cde:	4307      	orrs	r7, r0
    8ce0:	2f0f      	cmp	r7, #15
    8ce2:	d900      	bls.n	8ce6 <__aeabi_dmul+0x8e>
    8ce4:	e0b0      	b.n	8e48 <__aeabi_dmul+0x1f0>
    8ce6:	4a55      	ldr	r2, [pc, #340]	; (8e3c <__aeabi_dmul+0x1e4>)
    8ce8:	00bf      	lsls	r7, r7, #2
    8cea:	59d2      	ldr	r2, [r2, r7]
    8cec:	4697      	mov	pc, r2
    8cee:	465b      	mov	r3, fp
    8cf0:	4303      	orrs	r3, r0
    8cf2:	4699      	mov	r9, r3
    8cf4:	d000      	beq.n	8cf8 <__aeabi_dmul+0xa0>
    8cf6:	e087      	b.n	8e08 <__aeabi_dmul+0x1b0>
    8cf8:	2300      	movs	r3, #0
    8cfa:	469b      	mov	fp, r3
    8cfc:	3302      	adds	r3, #2
    8cfe:	2708      	movs	r7, #8
    8d00:	9302      	str	r3, [sp, #8]
    8d02:	e7ce      	b.n	8ca2 <__aeabi_dmul+0x4a>
    8d04:	4642      	mov	r2, r8
    8d06:	9201      	str	r2, [sp, #4]
    8d08:	2802      	cmp	r0, #2
    8d0a:	d067      	beq.n	8ddc <__aeabi_dmul+0x184>
    8d0c:	2803      	cmp	r0, #3
    8d0e:	d100      	bne.n	8d12 <__aeabi_dmul+0xba>
    8d10:	e20e      	b.n	9130 <__aeabi_dmul+0x4d8>
    8d12:	2801      	cmp	r0, #1
    8d14:	d000      	beq.n	8d18 <__aeabi_dmul+0xc0>
    8d16:	e162      	b.n	8fde <__aeabi_dmul+0x386>
    8d18:	2300      	movs	r3, #0
    8d1a:	2400      	movs	r4, #0
    8d1c:	2200      	movs	r2, #0
    8d1e:	4699      	mov	r9, r3
    8d20:	9901      	ldr	r1, [sp, #4]
    8d22:	4001      	ands	r1, r0
    8d24:	b2cd      	uxtb	r5, r1
    8d26:	2100      	movs	r1, #0
    8d28:	0312      	lsls	r2, r2, #12
    8d2a:	0d0b      	lsrs	r3, r1, #20
    8d2c:	0b12      	lsrs	r2, r2, #12
    8d2e:	051b      	lsls	r3, r3, #20
    8d30:	4313      	orrs	r3, r2
    8d32:	4a43      	ldr	r2, [pc, #268]	; (8e40 <__aeabi_dmul+0x1e8>)
    8d34:	0524      	lsls	r4, r4, #20
    8d36:	4013      	ands	r3, r2
    8d38:	431c      	orrs	r4, r3
    8d3a:	0064      	lsls	r4, r4, #1
    8d3c:	07ed      	lsls	r5, r5, #31
    8d3e:	0864      	lsrs	r4, r4, #1
    8d40:	432c      	orrs	r4, r5
    8d42:	4648      	mov	r0, r9
    8d44:	0021      	movs	r1, r4
    8d46:	b007      	add	sp, #28
    8d48:	bc3c      	pop	{r2, r3, r4, r5}
    8d4a:	4690      	mov	r8, r2
    8d4c:	4699      	mov	r9, r3
    8d4e:	46a2      	mov	sl, r4
    8d50:	46ab      	mov	fp, r5
    8d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8d54:	4303      	orrs	r3, r0
    8d56:	4699      	mov	r9, r3
    8d58:	d04f      	beq.n	8dfa <__aeabi_dmul+0x1a2>
    8d5a:	465b      	mov	r3, fp
    8d5c:	2b00      	cmp	r3, #0
    8d5e:	d100      	bne.n	8d62 <__aeabi_dmul+0x10a>
    8d60:	e189      	b.n	9076 <__aeabi_dmul+0x41e>
    8d62:	4658      	mov	r0, fp
    8d64:	f000 fdcc 	bl	9900 <__clzsi2>
    8d68:	0003      	movs	r3, r0
    8d6a:	3b0b      	subs	r3, #11
    8d6c:	2b1c      	cmp	r3, #28
    8d6e:	dd00      	ble.n	8d72 <__aeabi_dmul+0x11a>
    8d70:	e17a      	b.n	9068 <__aeabi_dmul+0x410>
    8d72:	221d      	movs	r2, #29
    8d74:	1ad3      	subs	r3, r2, r3
    8d76:	003a      	movs	r2, r7
    8d78:	0001      	movs	r1, r0
    8d7a:	465c      	mov	r4, fp
    8d7c:	40da      	lsrs	r2, r3
    8d7e:	3908      	subs	r1, #8
    8d80:	408c      	lsls	r4, r1
    8d82:	0013      	movs	r3, r2
    8d84:	408f      	lsls	r7, r1
    8d86:	4323      	orrs	r3, r4
    8d88:	469b      	mov	fp, r3
    8d8a:	46b9      	mov	r9, r7
    8d8c:	2300      	movs	r3, #0
    8d8e:	4e2d      	ldr	r6, [pc, #180]	; (8e44 <__aeabi_dmul+0x1ec>)
    8d90:	2700      	movs	r7, #0
    8d92:	1a36      	subs	r6, r6, r0
    8d94:	9302      	str	r3, [sp, #8]
    8d96:	e784      	b.n	8ca2 <__aeabi_dmul+0x4a>
    8d98:	4653      	mov	r3, sl
    8d9a:	4323      	orrs	r3, r4
    8d9c:	d12a      	bne.n	8df4 <__aeabi_dmul+0x19c>
    8d9e:	2400      	movs	r4, #0
    8da0:	2002      	movs	r0, #2
    8da2:	e796      	b.n	8cd2 <__aeabi_dmul+0x7a>
    8da4:	4653      	mov	r3, sl
    8da6:	4323      	orrs	r3, r4
    8da8:	d020      	beq.n	8dec <__aeabi_dmul+0x194>
    8daa:	2c00      	cmp	r4, #0
    8dac:	d100      	bne.n	8db0 <__aeabi_dmul+0x158>
    8dae:	e157      	b.n	9060 <__aeabi_dmul+0x408>
    8db0:	0020      	movs	r0, r4
    8db2:	f000 fda5 	bl	9900 <__clzsi2>
    8db6:	0003      	movs	r3, r0
    8db8:	3b0b      	subs	r3, #11
    8dba:	2b1c      	cmp	r3, #28
    8dbc:	dd00      	ble.n	8dc0 <__aeabi_dmul+0x168>
    8dbe:	e149      	b.n	9054 <__aeabi_dmul+0x3fc>
    8dc0:	211d      	movs	r1, #29
    8dc2:	1acb      	subs	r3, r1, r3
    8dc4:	4651      	mov	r1, sl
    8dc6:	0002      	movs	r2, r0
    8dc8:	40d9      	lsrs	r1, r3
    8dca:	4653      	mov	r3, sl
    8dcc:	3a08      	subs	r2, #8
    8dce:	4094      	lsls	r4, r2
    8dd0:	4093      	lsls	r3, r2
    8dd2:	430c      	orrs	r4, r1
    8dd4:	4a1b      	ldr	r2, [pc, #108]	; (8e44 <__aeabi_dmul+0x1ec>)
    8dd6:	1a12      	subs	r2, r2, r0
    8dd8:	2000      	movs	r0, #0
    8dda:	e77a      	b.n	8cd2 <__aeabi_dmul+0x7a>
    8ddc:	2501      	movs	r5, #1
    8dde:	9b01      	ldr	r3, [sp, #4]
    8de0:	4c14      	ldr	r4, [pc, #80]	; (8e34 <__aeabi_dmul+0x1dc>)
    8de2:	401d      	ands	r5, r3
    8de4:	2300      	movs	r3, #0
    8de6:	2200      	movs	r2, #0
    8de8:	4699      	mov	r9, r3
    8dea:	e79c      	b.n	8d26 <__aeabi_dmul+0xce>
    8dec:	2400      	movs	r4, #0
    8dee:	2200      	movs	r2, #0
    8df0:	2001      	movs	r0, #1
    8df2:	e76e      	b.n	8cd2 <__aeabi_dmul+0x7a>
    8df4:	4653      	mov	r3, sl
    8df6:	2003      	movs	r0, #3
    8df8:	e76b      	b.n	8cd2 <__aeabi_dmul+0x7a>
    8dfa:	2300      	movs	r3, #0
    8dfc:	469b      	mov	fp, r3
    8dfe:	3301      	adds	r3, #1
    8e00:	2704      	movs	r7, #4
    8e02:	2600      	movs	r6, #0
    8e04:	9302      	str	r3, [sp, #8]
    8e06:	e74c      	b.n	8ca2 <__aeabi_dmul+0x4a>
    8e08:	2303      	movs	r3, #3
    8e0a:	4681      	mov	r9, r0
    8e0c:	270c      	movs	r7, #12
    8e0e:	9302      	str	r3, [sp, #8]
    8e10:	e747      	b.n	8ca2 <__aeabi_dmul+0x4a>
    8e12:	2280      	movs	r2, #128	; 0x80
    8e14:	2300      	movs	r3, #0
    8e16:	2500      	movs	r5, #0
    8e18:	0312      	lsls	r2, r2, #12
    8e1a:	4699      	mov	r9, r3
    8e1c:	4c05      	ldr	r4, [pc, #20]	; (8e34 <__aeabi_dmul+0x1dc>)
    8e1e:	e782      	b.n	8d26 <__aeabi_dmul+0xce>
    8e20:	465c      	mov	r4, fp
    8e22:	464b      	mov	r3, r9
    8e24:	9802      	ldr	r0, [sp, #8]
    8e26:	e76f      	b.n	8d08 <__aeabi_dmul+0xb0>
    8e28:	465c      	mov	r4, fp
    8e2a:	464b      	mov	r3, r9
    8e2c:	9501      	str	r5, [sp, #4]
    8e2e:	9802      	ldr	r0, [sp, #8]
    8e30:	e76a      	b.n	8d08 <__aeabi_dmul+0xb0>
    8e32:	46c0      	nop			; (mov r8, r8)
    8e34:	000007ff 	.word	0x000007ff
    8e38:	fffffc01 	.word	0xfffffc01
    8e3c:	0000c350 	.word	0x0000c350
    8e40:	800fffff 	.word	0x800fffff
    8e44:	fffffc0d 	.word	0xfffffc0d
    8e48:	464a      	mov	r2, r9
    8e4a:	4649      	mov	r1, r9
    8e4c:	0c17      	lsrs	r7, r2, #16
    8e4e:	0c1a      	lsrs	r2, r3, #16
    8e50:	041b      	lsls	r3, r3, #16
    8e52:	0c1b      	lsrs	r3, r3, #16
    8e54:	0408      	lsls	r0, r1, #16
    8e56:	0019      	movs	r1, r3
    8e58:	0c00      	lsrs	r0, r0, #16
    8e5a:	4341      	muls	r1, r0
    8e5c:	0015      	movs	r5, r2
    8e5e:	4688      	mov	r8, r1
    8e60:	0019      	movs	r1, r3
    8e62:	437d      	muls	r5, r7
    8e64:	4379      	muls	r1, r7
    8e66:	9503      	str	r5, [sp, #12]
    8e68:	4689      	mov	r9, r1
    8e6a:	0029      	movs	r1, r5
    8e6c:	0015      	movs	r5, r2
    8e6e:	4345      	muls	r5, r0
    8e70:	444d      	add	r5, r9
    8e72:	9502      	str	r5, [sp, #8]
    8e74:	4645      	mov	r5, r8
    8e76:	0c2d      	lsrs	r5, r5, #16
    8e78:	46aa      	mov	sl, r5
    8e7a:	9d02      	ldr	r5, [sp, #8]
    8e7c:	4455      	add	r5, sl
    8e7e:	45a9      	cmp	r9, r5
    8e80:	d906      	bls.n	8e90 <__aeabi_dmul+0x238>
    8e82:	468a      	mov	sl, r1
    8e84:	2180      	movs	r1, #128	; 0x80
    8e86:	0249      	lsls	r1, r1, #9
    8e88:	4689      	mov	r9, r1
    8e8a:	44ca      	add	sl, r9
    8e8c:	4651      	mov	r1, sl
    8e8e:	9103      	str	r1, [sp, #12]
    8e90:	0c29      	lsrs	r1, r5, #16
    8e92:	9104      	str	r1, [sp, #16]
    8e94:	4641      	mov	r1, r8
    8e96:	0409      	lsls	r1, r1, #16
    8e98:	042d      	lsls	r5, r5, #16
    8e9a:	0c09      	lsrs	r1, r1, #16
    8e9c:	4688      	mov	r8, r1
    8e9e:	0029      	movs	r1, r5
    8ea0:	0c25      	lsrs	r5, r4, #16
    8ea2:	0424      	lsls	r4, r4, #16
    8ea4:	4441      	add	r1, r8
    8ea6:	0c24      	lsrs	r4, r4, #16
    8ea8:	9105      	str	r1, [sp, #20]
    8eaa:	0021      	movs	r1, r4
    8eac:	4341      	muls	r1, r0
    8eae:	4688      	mov	r8, r1
    8eb0:	0021      	movs	r1, r4
    8eb2:	4379      	muls	r1, r7
    8eb4:	468a      	mov	sl, r1
    8eb6:	4368      	muls	r0, r5
    8eb8:	4641      	mov	r1, r8
    8eba:	4450      	add	r0, sl
    8ebc:	4681      	mov	r9, r0
    8ebe:	0c08      	lsrs	r0, r1, #16
    8ec0:	4448      	add	r0, r9
    8ec2:	436f      	muls	r7, r5
    8ec4:	4582      	cmp	sl, r0
    8ec6:	d903      	bls.n	8ed0 <__aeabi_dmul+0x278>
    8ec8:	2180      	movs	r1, #128	; 0x80
    8eca:	0249      	lsls	r1, r1, #9
    8ecc:	4689      	mov	r9, r1
    8ece:	444f      	add	r7, r9
    8ed0:	0c01      	lsrs	r1, r0, #16
    8ed2:	4689      	mov	r9, r1
    8ed4:	0039      	movs	r1, r7
    8ed6:	4449      	add	r1, r9
    8ed8:	9102      	str	r1, [sp, #8]
    8eda:	4641      	mov	r1, r8
    8edc:	040f      	lsls	r7, r1, #16
    8ede:	9904      	ldr	r1, [sp, #16]
    8ee0:	0c3f      	lsrs	r7, r7, #16
    8ee2:	4688      	mov	r8, r1
    8ee4:	0400      	lsls	r0, r0, #16
    8ee6:	19c0      	adds	r0, r0, r7
    8ee8:	4480      	add	r8, r0
    8eea:	4641      	mov	r1, r8
    8eec:	9104      	str	r1, [sp, #16]
    8eee:	4659      	mov	r1, fp
    8ef0:	0c0f      	lsrs	r7, r1, #16
    8ef2:	0409      	lsls	r1, r1, #16
    8ef4:	0c09      	lsrs	r1, r1, #16
    8ef6:	4688      	mov	r8, r1
    8ef8:	4359      	muls	r1, r3
    8efa:	468a      	mov	sl, r1
    8efc:	0039      	movs	r1, r7
    8efe:	4351      	muls	r1, r2
    8f00:	4689      	mov	r9, r1
    8f02:	4641      	mov	r1, r8
    8f04:	434a      	muls	r2, r1
    8f06:	4651      	mov	r1, sl
    8f08:	0c09      	lsrs	r1, r1, #16
    8f0a:	468b      	mov	fp, r1
    8f0c:	437b      	muls	r3, r7
    8f0e:	18d2      	adds	r2, r2, r3
    8f10:	445a      	add	r2, fp
    8f12:	4293      	cmp	r3, r2
    8f14:	d903      	bls.n	8f1e <__aeabi_dmul+0x2c6>
    8f16:	2380      	movs	r3, #128	; 0x80
    8f18:	025b      	lsls	r3, r3, #9
    8f1a:	469b      	mov	fp, r3
    8f1c:	44d9      	add	r9, fp
    8f1e:	4651      	mov	r1, sl
    8f20:	0409      	lsls	r1, r1, #16
    8f22:	0c09      	lsrs	r1, r1, #16
    8f24:	468a      	mov	sl, r1
    8f26:	4641      	mov	r1, r8
    8f28:	4361      	muls	r1, r4
    8f2a:	437c      	muls	r4, r7
    8f2c:	0c13      	lsrs	r3, r2, #16
    8f2e:	0412      	lsls	r2, r2, #16
    8f30:	444b      	add	r3, r9
    8f32:	4452      	add	r2, sl
    8f34:	46a1      	mov	r9, r4
    8f36:	468a      	mov	sl, r1
    8f38:	003c      	movs	r4, r7
    8f3a:	4641      	mov	r1, r8
    8f3c:	436c      	muls	r4, r5
    8f3e:	434d      	muls	r5, r1
    8f40:	4651      	mov	r1, sl
    8f42:	444d      	add	r5, r9
    8f44:	0c0f      	lsrs	r7, r1, #16
    8f46:	197d      	adds	r5, r7, r5
    8f48:	45a9      	cmp	r9, r5
    8f4a:	d903      	bls.n	8f54 <__aeabi_dmul+0x2fc>
    8f4c:	2180      	movs	r1, #128	; 0x80
    8f4e:	0249      	lsls	r1, r1, #9
    8f50:	4688      	mov	r8, r1
    8f52:	4444      	add	r4, r8
    8f54:	9f04      	ldr	r7, [sp, #16]
    8f56:	9903      	ldr	r1, [sp, #12]
    8f58:	46b8      	mov	r8, r7
    8f5a:	4441      	add	r1, r8
    8f5c:	468b      	mov	fp, r1
    8f5e:	4583      	cmp	fp, r0
    8f60:	4180      	sbcs	r0, r0
    8f62:	4241      	negs	r1, r0
    8f64:	4688      	mov	r8, r1
    8f66:	4651      	mov	r1, sl
    8f68:	0408      	lsls	r0, r1, #16
    8f6a:	042f      	lsls	r7, r5, #16
    8f6c:	0c00      	lsrs	r0, r0, #16
    8f6e:	183f      	adds	r7, r7, r0
    8f70:	4658      	mov	r0, fp
    8f72:	9902      	ldr	r1, [sp, #8]
    8f74:	1810      	adds	r0, r2, r0
    8f76:	4689      	mov	r9, r1
    8f78:	4290      	cmp	r0, r2
    8f7a:	4192      	sbcs	r2, r2
    8f7c:	444f      	add	r7, r9
    8f7e:	46ba      	mov	sl, r7
    8f80:	4252      	negs	r2, r2
    8f82:	4699      	mov	r9, r3
    8f84:	4693      	mov	fp, r2
    8f86:	44c2      	add	sl, r8
    8f88:	44d1      	add	r9, sl
    8f8a:	44cb      	add	fp, r9
    8f8c:	428f      	cmp	r7, r1
    8f8e:	41bf      	sbcs	r7, r7
    8f90:	45c2      	cmp	sl, r8
    8f92:	4189      	sbcs	r1, r1
    8f94:	4599      	cmp	r9, r3
    8f96:	419b      	sbcs	r3, r3
    8f98:	4593      	cmp	fp, r2
    8f9a:	4192      	sbcs	r2, r2
    8f9c:	427f      	negs	r7, r7
    8f9e:	4249      	negs	r1, r1
    8fa0:	0c2d      	lsrs	r5, r5, #16
    8fa2:	4252      	negs	r2, r2
    8fa4:	430f      	orrs	r7, r1
    8fa6:	425b      	negs	r3, r3
    8fa8:	4313      	orrs	r3, r2
    8faa:	197f      	adds	r7, r7, r5
    8fac:	18ff      	adds	r7, r7, r3
    8fae:	465b      	mov	r3, fp
    8fb0:	193c      	adds	r4, r7, r4
    8fb2:	0ddb      	lsrs	r3, r3, #23
    8fb4:	9a05      	ldr	r2, [sp, #20]
    8fb6:	0264      	lsls	r4, r4, #9
    8fb8:	431c      	orrs	r4, r3
    8fba:	0243      	lsls	r3, r0, #9
    8fbc:	4313      	orrs	r3, r2
    8fbe:	1e5d      	subs	r5, r3, #1
    8fc0:	41ab      	sbcs	r3, r5
    8fc2:	465a      	mov	r2, fp
    8fc4:	0dc0      	lsrs	r0, r0, #23
    8fc6:	4303      	orrs	r3, r0
    8fc8:	0252      	lsls	r2, r2, #9
    8fca:	4313      	orrs	r3, r2
    8fcc:	01e2      	lsls	r2, r4, #7
    8fce:	d556      	bpl.n	907e <__aeabi_dmul+0x426>
    8fd0:	2001      	movs	r0, #1
    8fd2:	085a      	lsrs	r2, r3, #1
    8fd4:	4003      	ands	r3, r0
    8fd6:	4313      	orrs	r3, r2
    8fd8:	07e2      	lsls	r2, r4, #31
    8fda:	4313      	orrs	r3, r2
    8fdc:	0864      	lsrs	r4, r4, #1
    8fde:	485a      	ldr	r0, [pc, #360]	; (9148 <__aeabi_dmul+0x4f0>)
    8fe0:	4460      	add	r0, ip
    8fe2:	2800      	cmp	r0, #0
    8fe4:	dd4d      	ble.n	9082 <__aeabi_dmul+0x42a>
    8fe6:	075a      	lsls	r2, r3, #29
    8fe8:	d009      	beq.n	8ffe <__aeabi_dmul+0x3a6>
    8fea:	220f      	movs	r2, #15
    8fec:	401a      	ands	r2, r3
    8fee:	2a04      	cmp	r2, #4
    8ff0:	d005      	beq.n	8ffe <__aeabi_dmul+0x3a6>
    8ff2:	1d1a      	adds	r2, r3, #4
    8ff4:	429a      	cmp	r2, r3
    8ff6:	419b      	sbcs	r3, r3
    8ff8:	425b      	negs	r3, r3
    8ffa:	18e4      	adds	r4, r4, r3
    8ffc:	0013      	movs	r3, r2
    8ffe:	01e2      	lsls	r2, r4, #7
    9000:	d504      	bpl.n	900c <__aeabi_dmul+0x3b4>
    9002:	2080      	movs	r0, #128	; 0x80
    9004:	4a51      	ldr	r2, [pc, #324]	; (914c <__aeabi_dmul+0x4f4>)
    9006:	00c0      	lsls	r0, r0, #3
    9008:	4014      	ands	r4, r2
    900a:	4460      	add	r0, ip
    900c:	4a50      	ldr	r2, [pc, #320]	; (9150 <__aeabi_dmul+0x4f8>)
    900e:	4290      	cmp	r0, r2
    9010:	dd00      	ble.n	9014 <__aeabi_dmul+0x3bc>
    9012:	e6e3      	b.n	8ddc <__aeabi_dmul+0x184>
    9014:	2501      	movs	r5, #1
    9016:	08db      	lsrs	r3, r3, #3
    9018:	0762      	lsls	r2, r4, #29
    901a:	431a      	orrs	r2, r3
    901c:	0264      	lsls	r4, r4, #9
    901e:	9b01      	ldr	r3, [sp, #4]
    9020:	4691      	mov	r9, r2
    9022:	0b22      	lsrs	r2, r4, #12
    9024:	0544      	lsls	r4, r0, #21
    9026:	0d64      	lsrs	r4, r4, #21
    9028:	401d      	ands	r5, r3
    902a:	e67c      	b.n	8d26 <__aeabi_dmul+0xce>
    902c:	2280      	movs	r2, #128	; 0x80
    902e:	4659      	mov	r1, fp
    9030:	0312      	lsls	r2, r2, #12
    9032:	4211      	tst	r1, r2
    9034:	d008      	beq.n	9048 <__aeabi_dmul+0x3f0>
    9036:	4214      	tst	r4, r2
    9038:	d106      	bne.n	9048 <__aeabi_dmul+0x3f0>
    903a:	4322      	orrs	r2, r4
    903c:	0312      	lsls	r2, r2, #12
    903e:	0b12      	lsrs	r2, r2, #12
    9040:	4645      	mov	r5, r8
    9042:	4699      	mov	r9, r3
    9044:	4c43      	ldr	r4, [pc, #268]	; (9154 <__aeabi_dmul+0x4fc>)
    9046:	e66e      	b.n	8d26 <__aeabi_dmul+0xce>
    9048:	465b      	mov	r3, fp
    904a:	431a      	orrs	r2, r3
    904c:	0312      	lsls	r2, r2, #12
    904e:	0b12      	lsrs	r2, r2, #12
    9050:	4c40      	ldr	r4, [pc, #256]	; (9154 <__aeabi_dmul+0x4fc>)
    9052:	e668      	b.n	8d26 <__aeabi_dmul+0xce>
    9054:	0003      	movs	r3, r0
    9056:	4654      	mov	r4, sl
    9058:	3b28      	subs	r3, #40	; 0x28
    905a:	409c      	lsls	r4, r3
    905c:	2300      	movs	r3, #0
    905e:	e6b9      	b.n	8dd4 <__aeabi_dmul+0x17c>
    9060:	f000 fc4e 	bl	9900 <__clzsi2>
    9064:	3020      	adds	r0, #32
    9066:	e6a6      	b.n	8db6 <__aeabi_dmul+0x15e>
    9068:	0003      	movs	r3, r0
    906a:	3b28      	subs	r3, #40	; 0x28
    906c:	409f      	lsls	r7, r3
    906e:	2300      	movs	r3, #0
    9070:	46bb      	mov	fp, r7
    9072:	4699      	mov	r9, r3
    9074:	e68a      	b.n	8d8c <__aeabi_dmul+0x134>
    9076:	f000 fc43 	bl	9900 <__clzsi2>
    907a:	3020      	adds	r0, #32
    907c:	e674      	b.n	8d68 <__aeabi_dmul+0x110>
    907e:	46b4      	mov	ip, r6
    9080:	e7ad      	b.n	8fde <__aeabi_dmul+0x386>
    9082:	2501      	movs	r5, #1
    9084:	1a2a      	subs	r2, r5, r0
    9086:	2a38      	cmp	r2, #56	; 0x38
    9088:	dd06      	ble.n	9098 <__aeabi_dmul+0x440>
    908a:	9b01      	ldr	r3, [sp, #4]
    908c:	2400      	movs	r4, #0
    908e:	401d      	ands	r5, r3
    9090:	2300      	movs	r3, #0
    9092:	2200      	movs	r2, #0
    9094:	4699      	mov	r9, r3
    9096:	e646      	b.n	8d26 <__aeabi_dmul+0xce>
    9098:	2a1f      	cmp	r2, #31
    909a:	dc21      	bgt.n	90e0 <__aeabi_dmul+0x488>
    909c:	2520      	movs	r5, #32
    909e:	0020      	movs	r0, r4
    90a0:	1aad      	subs	r5, r5, r2
    90a2:	001e      	movs	r6, r3
    90a4:	40ab      	lsls	r3, r5
    90a6:	40a8      	lsls	r0, r5
    90a8:	40d6      	lsrs	r6, r2
    90aa:	1e5d      	subs	r5, r3, #1
    90ac:	41ab      	sbcs	r3, r5
    90ae:	4330      	orrs	r0, r6
    90b0:	4318      	orrs	r0, r3
    90b2:	40d4      	lsrs	r4, r2
    90b4:	0743      	lsls	r3, r0, #29
    90b6:	d009      	beq.n	90cc <__aeabi_dmul+0x474>
    90b8:	230f      	movs	r3, #15
    90ba:	4003      	ands	r3, r0
    90bc:	2b04      	cmp	r3, #4
    90be:	d005      	beq.n	90cc <__aeabi_dmul+0x474>
    90c0:	0003      	movs	r3, r0
    90c2:	1d18      	adds	r0, r3, #4
    90c4:	4298      	cmp	r0, r3
    90c6:	419b      	sbcs	r3, r3
    90c8:	425b      	negs	r3, r3
    90ca:	18e4      	adds	r4, r4, r3
    90cc:	0223      	lsls	r3, r4, #8
    90ce:	d521      	bpl.n	9114 <__aeabi_dmul+0x4bc>
    90d0:	2501      	movs	r5, #1
    90d2:	9b01      	ldr	r3, [sp, #4]
    90d4:	2401      	movs	r4, #1
    90d6:	401d      	ands	r5, r3
    90d8:	2300      	movs	r3, #0
    90da:	2200      	movs	r2, #0
    90dc:	4699      	mov	r9, r3
    90de:	e622      	b.n	8d26 <__aeabi_dmul+0xce>
    90e0:	251f      	movs	r5, #31
    90e2:	0021      	movs	r1, r4
    90e4:	426d      	negs	r5, r5
    90e6:	1a28      	subs	r0, r5, r0
    90e8:	40c1      	lsrs	r1, r0
    90ea:	0008      	movs	r0, r1
    90ec:	2a20      	cmp	r2, #32
    90ee:	d01d      	beq.n	912c <__aeabi_dmul+0x4d4>
    90f0:	355f      	adds	r5, #95	; 0x5f
    90f2:	1aaa      	subs	r2, r5, r2
    90f4:	4094      	lsls	r4, r2
    90f6:	4323      	orrs	r3, r4
    90f8:	1e5c      	subs	r4, r3, #1
    90fa:	41a3      	sbcs	r3, r4
    90fc:	2507      	movs	r5, #7
    90fe:	4303      	orrs	r3, r0
    9100:	401d      	ands	r5, r3
    9102:	2200      	movs	r2, #0
    9104:	2d00      	cmp	r5, #0
    9106:	d009      	beq.n	911c <__aeabi_dmul+0x4c4>
    9108:	220f      	movs	r2, #15
    910a:	2400      	movs	r4, #0
    910c:	401a      	ands	r2, r3
    910e:	0018      	movs	r0, r3
    9110:	2a04      	cmp	r2, #4
    9112:	d1d6      	bne.n	90c2 <__aeabi_dmul+0x46a>
    9114:	0003      	movs	r3, r0
    9116:	0765      	lsls	r5, r4, #29
    9118:	0264      	lsls	r4, r4, #9
    911a:	0b22      	lsrs	r2, r4, #12
    911c:	08db      	lsrs	r3, r3, #3
    911e:	432b      	orrs	r3, r5
    9120:	2501      	movs	r5, #1
    9122:	4699      	mov	r9, r3
    9124:	9b01      	ldr	r3, [sp, #4]
    9126:	2400      	movs	r4, #0
    9128:	401d      	ands	r5, r3
    912a:	e5fc      	b.n	8d26 <__aeabi_dmul+0xce>
    912c:	2400      	movs	r4, #0
    912e:	e7e2      	b.n	90f6 <__aeabi_dmul+0x49e>
    9130:	2280      	movs	r2, #128	; 0x80
    9132:	2501      	movs	r5, #1
    9134:	0312      	lsls	r2, r2, #12
    9136:	4322      	orrs	r2, r4
    9138:	9901      	ldr	r1, [sp, #4]
    913a:	0312      	lsls	r2, r2, #12
    913c:	0b12      	lsrs	r2, r2, #12
    913e:	400d      	ands	r5, r1
    9140:	4699      	mov	r9, r3
    9142:	4c04      	ldr	r4, [pc, #16]	; (9154 <__aeabi_dmul+0x4fc>)
    9144:	e5ef      	b.n	8d26 <__aeabi_dmul+0xce>
    9146:	46c0      	nop			; (mov r8, r8)
    9148:	000003ff 	.word	0x000003ff
    914c:	feffffff 	.word	0xfeffffff
    9150:	000007fe 	.word	0x000007fe
    9154:	000007ff 	.word	0x000007ff

00009158 <__aeabi_dsub>:
    9158:	b5f0      	push	{r4, r5, r6, r7, lr}
    915a:	4646      	mov	r6, r8
    915c:	46d6      	mov	lr, sl
    915e:	464f      	mov	r7, r9
    9160:	030c      	lsls	r4, r1, #12
    9162:	b5c0      	push	{r6, r7, lr}
    9164:	0fcd      	lsrs	r5, r1, #31
    9166:	004e      	lsls	r6, r1, #1
    9168:	0a61      	lsrs	r1, r4, #9
    916a:	0f44      	lsrs	r4, r0, #29
    916c:	430c      	orrs	r4, r1
    916e:	00c1      	lsls	r1, r0, #3
    9170:	0058      	lsls	r0, r3, #1
    9172:	0d40      	lsrs	r0, r0, #21
    9174:	4684      	mov	ip, r0
    9176:	468a      	mov	sl, r1
    9178:	000f      	movs	r7, r1
    917a:	0319      	lsls	r1, r3, #12
    917c:	0f50      	lsrs	r0, r2, #29
    917e:	0a49      	lsrs	r1, r1, #9
    9180:	4301      	orrs	r1, r0
    9182:	48c6      	ldr	r0, [pc, #792]	; (949c <__aeabi_dsub+0x344>)
    9184:	0d76      	lsrs	r6, r6, #21
    9186:	46a8      	mov	r8, r5
    9188:	0fdb      	lsrs	r3, r3, #31
    918a:	00d2      	lsls	r2, r2, #3
    918c:	4584      	cmp	ip, r0
    918e:	d100      	bne.n	9192 <__aeabi_dsub+0x3a>
    9190:	e0d8      	b.n	9344 <__aeabi_dsub+0x1ec>
    9192:	2001      	movs	r0, #1
    9194:	4043      	eors	r3, r0
    9196:	42ab      	cmp	r3, r5
    9198:	d100      	bne.n	919c <__aeabi_dsub+0x44>
    919a:	e0a6      	b.n	92ea <__aeabi_dsub+0x192>
    919c:	4660      	mov	r0, ip
    919e:	1a35      	subs	r5, r6, r0
    91a0:	2d00      	cmp	r5, #0
    91a2:	dc00      	bgt.n	91a6 <__aeabi_dsub+0x4e>
    91a4:	e105      	b.n	93b2 <__aeabi_dsub+0x25a>
    91a6:	2800      	cmp	r0, #0
    91a8:	d110      	bne.n	91cc <__aeabi_dsub+0x74>
    91aa:	000b      	movs	r3, r1
    91ac:	4313      	orrs	r3, r2
    91ae:	d100      	bne.n	91b2 <__aeabi_dsub+0x5a>
    91b0:	e0d7      	b.n	9362 <__aeabi_dsub+0x20a>
    91b2:	1e6b      	subs	r3, r5, #1
    91b4:	2b00      	cmp	r3, #0
    91b6:	d000      	beq.n	91ba <__aeabi_dsub+0x62>
    91b8:	e14b      	b.n	9452 <__aeabi_dsub+0x2fa>
    91ba:	4653      	mov	r3, sl
    91bc:	1a9f      	subs	r7, r3, r2
    91be:	45ba      	cmp	sl, r7
    91c0:	4180      	sbcs	r0, r0
    91c2:	1a64      	subs	r4, r4, r1
    91c4:	4240      	negs	r0, r0
    91c6:	1a24      	subs	r4, r4, r0
    91c8:	2601      	movs	r6, #1
    91ca:	e01e      	b.n	920a <__aeabi_dsub+0xb2>
    91cc:	4bb3      	ldr	r3, [pc, #716]	; (949c <__aeabi_dsub+0x344>)
    91ce:	429e      	cmp	r6, r3
    91d0:	d048      	beq.n	9264 <__aeabi_dsub+0x10c>
    91d2:	2380      	movs	r3, #128	; 0x80
    91d4:	041b      	lsls	r3, r3, #16
    91d6:	4319      	orrs	r1, r3
    91d8:	2d38      	cmp	r5, #56	; 0x38
    91da:	dd00      	ble.n	91de <__aeabi_dsub+0x86>
    91dc:	e119      	b.n	9412 <__aeabi_dsub+0x2ba>
    91de:	2d1f      	cmp	r5, #31
    91e0:	dd00      	ble.n	91e4 <__aeabi_dsub+0x8c>
    91e2:	e14c      	b.n	947e <__aeabi_dsub+0x326>
    91e4:	2320      	movs	r3, #32
    91e6:	000f      	movs	r7, r1
    91e8:	1b5b      	subs	r3, r3, r5
    91ea:	0010      	movs	r0, r2
    91ec:	409a      	lsls	r2, r3
    91ee:	409f      	lsls	r7, r3
    91f0:	40e8      	lsrs	r0, r5
    91f2:	1e53      	subs	r3, r2, #1
    91f4:	419a      	sbcs	r2, r3
    91f6:	40e9      	lsrs	r1, r5
    91f8:	4307      	orrs	r7, r0
    91fa:	4317      	orrs	r7, r2
    91fc:	4653      	mov	r3, sl
    91fe:	1bdf      	subs	r7, r3, r7
    9200:	1a61      	subs	r1, r4, r1
    9202:	45ba      	cmp	sl, r7
    9204:	41a4      	sbcs	r4, r4
    9206:	4264      	negs	r4, r4
    9208:	1b0c      	subs	r4, r1, r4
    920a:	0223      	lsls	r3, r4, #8
    920c:	d400      	bmi.n	9210 <__aeabi_dsub+0xb8>
    920e:	e0c5      	b.n	939c <__aeabi_dsub+0x244>
    9210:	0264      	lsls	r4, r4, #9
    9212:	0a65      	lsrs	r5, r4, #9
    9214:	2d00      	cmp	r5, #0
    9216:	d100      	bne.n	921a <__aeabi_dsub+0xc2>
    9218:	e0f6      	b.n	9408 <__aeabi_dsub+0x2b0>
    921a:	0028      	movs	r0, r5
    921c:	f000 fb70 	bl	9900 <__clzsi2>
    9220:	0003      	movs	r3, r0
    9222:	3b08      	subs	r3, #8
    9224:	2b1f      	cmp	r3, #31
    9226:	dd00      	ble.n	922a <__aeabi_dsub+0xd2>
    9228:	e0e9      	b.n	93fe <__aeabi_dsub+0x2a6>
    922a:	2220      	movs	r2, #32
    922c:	003c      	movs	r4, r7
    922e:	1ad2      	subs	r2, r2, r3
    9230:	409d      	lsls	r5, r3
    9232:	40d4      	lsrs	r4, r2
    9234:	409f      	lsls	r7, r3
    9236:	4325      	orrs	r5, r4
    9238:	429e      	cmp	r6, r3
    923a:	dd00      	ble.n	923e <__aeabi_dsub+0xe6>
    923c:	e0db      	b.n	93f6 <__aeabi_dsub+0x29e>
    923e:	1b9e      	subs	r6, r3, r6
    9240:	1c73      	adds	r3, r6, #1
    9242:	2b1f      	cmp	r3, #31
    9244:	dd00      	ble.n	9248 <__aeabi_dsub+0xf0>
    9246:	e10a      	b.n	945e <__aeabi_dsub+0x306>
    9248:	2220      	movs	r2, #32
    924a:	0038      	movs	r0, r7
    924c:	1ad2      	subs	r2, r2, r3
    924e:	0029      	movs	r1, r5
    9250:	4097      	lsls	r7, r2
    9252:	002c      	movs	r4, r5
    9254:	4091      	lsls	r1, r2
    9256:	40d8      	lsrs	r0, r3
    9258:	1e7a      	subs	r2, r7, #1
    925a:	4197      	sbcs	r7, r2
    925c:	40dc      	lsrs	r4, r3
    925e:	2600      	movs	r6, #0
    9260:	4301      	orrs	r1, r0
    9262:	430f      	orrs	r7, r1
    9264:	077b      	lsls	r3, r7, #29
    9266:	d009      	beq.n	927c <__aeabi_dsub+0x124>
    9268:	230f      	movs	r3, #15
    926a:	403b      	ands	r3, r7
    926c:	2b04      	cmp	r3, #4
    926e:	d005      	beq.n	927c <__aeabi_dsub+0x124>
    9270:	1d3b      	adds	r3, r7, #4
    9272:	42bb      	cmp	r3, r7
    9274:	41bf      	sbcs	r7, r7
    9276:	427f      	negs	r7, r7
    9278:	19e4      	adds	r4, r4, r7
    927a:	001f      	movs	r7, r3
    927c:	0223      	lsls	r3, r4, #8
    927e:	d525      	bpl.n	92cc <__aeabi_dsub+0x174>
    9280:	4b86      	ldr	r3, [pc, #536]	; (949c <__aeabi_dsub+0x344>)
    9282:	3601      	adds	r6, #1
    9284:	429e      	cmp	r6, r3
    9286:	d100      	bne.n	928a <__aeabi_dsub+0x132>
    9288:	e0af      	b.n	93ea <__aeabi_dsub+0x292>
    928a:	4b85      	ldr	r3, [pc, #532]	; (94a0 <__aeabi_dsub+0x348>)
    928c:	2501      	movs	r5, #1
    928e:	401c      	ands	r4, r3
    9290:	4643      	mov	r3, r8
    9292:	0762      	lsls	r2, r4, #29
    9294:	08ff      	lsrs	r7, r7, #3
    9296:	0264      	lsls	r4, r4, #9
    9298:	0576      	lsls	r6, r6, #21
    929a:	4317      	orrs	r7, r2
    929c:	0b24      	lsrs	r4, r4, #12
    929e:	0d76      	lsrs	r6, r6, #21
    92a0:	401d      	ands	r5, r3
    92a2:	2100      	movs	r1, #0
    92a4:	0324      	lsls	r4, r4, #12
    92a6:	0b23      	lsrs	r3, r4, #12
    92a8:	0d0c      	lsrs	r4, r1, #20
    92aa:	4a7e      	ldr	r2, [pc, #504]	; (94a4 <__aeabi_dsub+0x34c>)
    92ac:	0524      	lsls	r4, r4, #20
    92ae:	431c      	orrs	r4, r3
    92b0:	4014      	ands	r4, r2
    92b2:	0533      	lsls	r3, r6, #20
    92b4:	4323      	orrs	r3, r4
    92b6:	005b      	lsls	r3, r3, #1
    92b8:	07ed      	lsls	r5, r5, #31
    92ba:	085b      	lsrs	r3, r3, #1
    92bc:	432b      	orrs	r3, r5
    92be:	0038      	movs	r0, r7
    92c0:	0019      	movs	r1, r3
    92c2:	bc1c      	pop	{r2, r3, r4}
    92c4:	4690      	mov	r8, r2
    92c6:	4699      	mov	r9, r3
    92c8:	46a2      	mov	sl, r4
    92ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    92cc:	2501      	movs	r5, #1
    92ce:	4643      	mov	r3, r8
    92d0:	0762      	lsls	r2, r4, #29
    92d2:	08ff      	lsrs	r7, r7, #3
    92d4:	4317      	orrs	r7, r2
    92d6:	08e4      	lsrs	r4, r4, #3
    92d8:	401d      	ands	r5, r3
    92da:	4b70      	ldr	r3, [pc, #448]	; (949c <__aeabi_dsub+0x344>)
    92dc:	429e      	cmp	r6, r3
    92de:	d036      	beq.n	934e <__aeabi_dsub+0x1f6>
    92e0:	0324      	lsls	r4, r4, #12
    92e2:	0576      	lsls	r6, r6, #21
    92e4:	0b24      	lsrs	r4, r4, #12
    92e6:	0d76      	lsrs	r6, r6, #21
    92e8:	e7db      	b.n	92a2 <__aeabi_dsub+0x14a>
    92ea:	4663      	mov	r3, ip
    92ec:	1af3      	subs	r3, r6, r3
    92ee:	2b00      	cmp	r3, #0
    92f0:	dc00      	bgt.n	92f4 <__aeabi_dsub+0x19c>
    92f2:	e094      	b.n	941e <__aeabi_dsub+0x2c6>
    92f4:	4660      	mov	r0, ip
    92f6:	2800      	cmp	r0, #0
    92f8:	d035      	beq.n	9366 <__aeabi_dsub+0x20e>
    92fa:	4868      	ldr	r0, [pc, #416]	; (949c <__aeabi_dsub+0x344>)
    92fc:	4286      	cmp	r6, r0
    92fe:	d0b1      	beq.n	9264 <__aeabi_dsub+0x10c>
    9300:	2780      	movs	r7, #128	; 0x80
    9302:	043f      	lsls	r7, r7, #16
    9304:	4339      	orrs	r1, r7
    9306:	2b38      	cmp	r3, #56	; 0x38
    9308:	dc00      	bgt.n	930c <__aeabi_dsub+0x1b4>
    930a:	e0fd      	b.n	9508 <__aeabi_dsub+0x3b0>
    930c:	430a      	orrs	r2, r1
    930e:	0017      	movs	r7, r2
    9310:	2100      	movs	r1, #0
    9312:	1e7a      	subs	r2, r7, #1
    9314:	4197      	sbcs	r7, r2
    9316:	4457      	add	r7, sl
    9318:	4557      	cmp	r7, sl
    931a:	4180      	sbcs	r0, r0
    931c:	1909      	adds	r1, r1, r4
    931e:	4244      	negs	r4, r0
    9320:	190c      	adds	r4, r1, r4
    9322:	0223      	lsls	r3, r4, #8
    9324:	d53a      	bpl.n	939c <__aeabi_dsub+0x244>
    9326:	4b5d      	ldr	r3, [pc, #372]	; (949c <__aeabi_dsub+0x344>)
    9328:	3601      	adds	r6, #1
    932a:	429e      	cmp	r6, r3
    932c:	d100      	bne.n	9330 <__aeabi_dsub+0x1d8>
    932e:	e14b      	b.n	95c8 <__aeabi_dsub+0x470>
    9330:	2201      	movs	r2, #1
    9332:	4b5b      	ldr	r3, [pc, #364]	; (94a0 <__aeabi_dsub+0x348>)
    9334:	401c      	ands	r4, r3
    9336:	087b      	lsrs	r3, r7, #1
    9338:	4017      	ands	r7, r2
    933a:	431f      	orrs	r7, r3
    933c:	07e2      	lsls	r2, r4, #31
    933e:	4317      	orrs	r7, r2
    9340:	0864      	lsrs	r4, r4, #1
    9342:	e78f      	b.n	9264 <__aeabi_dsub+0x10c>
    9344:	0008      	movs	r0, r1
    9346:	4310      	orrs	r0, r2
    9348:	d000      	beq.n	934c <__aeabi_dsub+0x1f4>
    934a:	e724      	b.n	9196 <__aeabi_dsub+0x3e>
    934c:	e721      	b.n	9192 <__aeabi_dsub+0x3a>
    934e:	0023      	movs	r3, r4
    9350:	433b      	orrs	r3, r7
    9352:	d100      	bne.n	9356 <__aeabi_dsub+0x1fe>
    9354:	e1b9      	b.n	96ca <__aeabi_dsub+0x572>
    9356:	2280      	movs	r2, #128	; 0x80
    9358:	0312      	lsls	r2, r2, #12
    935a:	4314      	orrs	r4, r2
    935c:	0324      	lsls	r4, r4, #12
    935e:	0b24      	lsrs	r4, r4, #12
    9360:	e79f      	b.n	92a2 <__aeabi_dsub+0x14a>
    9362:	002e      	movs	r6, r5
    9364:	e77e      	b.n	9264 <__aeabi_dsub+0x10c>
    9366:	0008      	movs	r0, r1
    9368:	4310      	orrs	r0, r2
    936a:	d100      	bne.n	936e <__aeabi_dsub+0x216>
    936c:	e0ca      	b.n	9504 <__aeabi_dsub+0x3ac>
    936e:	1e58      	subs	r0, r3, #1
    9370:	4684      	mov	ip, r0
    9372:	2800      	cmp	r0, #0
    9374:	d000      	beq.n	9378 <__aeabi_dsub+0x220>
    9376:	e0e7      	b.n	9548 <__aeabi_dsub+0x3f0>
    9378:	4452      	add	r2, sl
    937a:	4552      	cmp	r2, sl
    937c:	4180      	sbcs	r0, r0
    937e:	1864      	adds	r4, r4, r1
    9380:	4240      	negs	r0, r0
    9382:	1824      	adds	r4, r4, r0
    9384:	0017      	movs	r7, r2
    9386:	2601      	movs	r6, #1
    9388:	0223      	lsls	r3, r4, #8
    938a:	d507      	bpl.n	939c <__aeabi_dsub+0x244>
    938c:	2602      	movs	r6, #2
    938e:	e7cf      	b.n	9330 <__aeabi_dsub+0x1d8>
    9390:	4664      	mov	r4, ip
    9392:	432c      	orrs	r4, r5
    9394:	d100      	bne.n	9398 <__aeabi_dsub+0x240>
    9396:	e1b3      	b.n	9700 <__aeabi_dsub+0x5a8>
    9398:	002c      	movs	r4, r5
    939a:	4667      	mov	r7, ip
    939c:	077b      	lsls	r3, r7, #29
    939e:	d000      	beq.n	93a2 <__aeabi_dsub+0x24a>
    93a0:	e762      	b.n	9268 <__aeabi_dsub+0x110>
    93a2:	0763      	lsls	r3, r4, #29
    93a4:	08ff      	lsrs	r7, r7, #3
    93a6:	431f      	orrs	r7, r3
    93a8:	2501      	movs	r5, #1
    93aa:	4643      	mov	r3, r8
    93ac:	08e4      	lsrs	r4, r4, #3
    93ae:	401d      	ands	r5, r3
    93b0:	e793      	b.n	92da <__aeabi_dsub+0x182>
    93b2:	2d00      	cmp	r5, #0
    93b4:	d178      	bne.n	94a8 <__aeabi_dsub+0x350>
    93b6:	1c75      	adds	r5, r6, #1
    93b8:	056d      	lsls	r5, r5, #21
    93ba:	0d6d      	lsrs	r5, r5, #21
    93bc:	2d01      	cmp	r5, #1
    93be:	dc00      	bgt.n	93c2 <__aeabi_dsub+0x26a>
    93c0:	e0f2      	b.n	95a8 <__aeabi_dsub+0x450>
    93c2:	4650      	mov	r0, sl
    93c4:	1a80      	subs	r0, r0, r2
    93c6:	4582      	cmp	sl, r0
    93c8:	41bf      	sbcs	r7, r7
    93ca:	1a65      	subs	r5, r4, r1
    93cc:	427f      	negs	r7, r7
    93ce:	1bed      	subs	r5, r5, r7
    93d0:	4684      	mov	ip, r0
    93d2:	0228      	lsls	r0, r5, #8
    93d4:	d400      	bmi.n	93d8 <__aeabi_dsub+0x280>
    93d6:	e08c      	b.n	94f2 <__aeabi_dsub+0x39a>
    93d8:	4650      	mov	r0, sl
    93da:	1a17      	subs	r7, r2, r0
    93dc:	42ba      	cmp	r2, r7
    93de:	4192      	sbcs	r2, r2
    93e0:	1b0c      	subs	r4, r1, r4
    93e2:	4255      	negs	r5, r2
    93e4:	1b65      	subs	r5, r4, r5
    93e6:	4698      	mov	r8, r3
    93e8:	e714      	b.n	9214 <__aeabi_dsub+0xbc>
    93ea:	2501      	movs	r5, #1
    93ec:	4643      	mov	r3, r8
    93ee:	2400      	movs	r4, #0
    93f0:	401d      	ands	r5, r3
    93f2:	2700      	movs	r7, #0
    93f4:	e755      	b.n	92a2 <__aeabi_dsub+0x14a>
    93f6:	4c2a      	ldr	r4, [pc, #168]	; (94a0 <__aeabi_dsub+0x348>)
    93f8:	1af6      	subs	r6, r6, r3
    93fa:	402c      	ands	r4, r5
    93fc:	e732      	b.n	9264 <__aeabi_dsub+0x10c>
    93fe:	003d      	movs	r5, r7
    9400:	3828      	subs	r0, #40	; 0x28
    9402:	4085      	lsls	r5, r0
    9404:	2700      	movs	r7, #0
    9406:	e717      	b.n	9238 <__aeabi_dsub+0xe0>
    9408:	0038      	movs	r0, r7
    940a:	f000 fa79 	bl	9900 <__clzsi2>
    940e:	3020      	adds	r0, #32
    9410:	e706      	b.n	9220 <__aeabi_dsub+0xc8>
    9412:	430a      	orrs	r2, r1
    9414:	0017      	movs	r7, r2
    9416:	2100      	movs	r1, #0
    9418:	1e7a      	subs	r2, r7, #1
    941a:	4197      	sbcs	r7, r2
    941c:	e6ee      	b.n	91fc <__aeabi_dsub+0xa4>
    941e:	2b00      	cmp	r3, #0
    9420:	d000      	beq.n	9424 <__aeabi_dsub+0x2cc>
    9422:	e0e5      	b.n	95f0 <__aeabi_dsub+0x498>
    9424:	1c73      	adds	r3, r6, #1
    9426:	469c      	mov	ip, r3
    9428:	055b      	lsls	r3, r3, #21
    942a:	0d5b      	lsrs	r3, r3, #21
    942c:	2b01      	cmp	r3, #1
    942e:	dc00      	bgt.n	9432 <__aeabi_dsub+0x2da>
    9430:	e09f      	b.n	9572 <__aeabi_dsub+0x41a>
    9432:	4b1a      	ldr	r3, [pc, #104]	; (949c <__aeabi_dsub+0x344>)
    9434:	459c      	cmp	ip, r3
    9436:	d100      	bne.n	943a <__aeabi_dsub+0x2e2>
    9438:	e0c5      	b.n	95c6 <__aeabi_dsub+0x46e>
    943a:	4452      	add	r2, sl
    943c:	4552      	cmp	r2, sl
    943e:	4180      	sbcs	r0, r0
    9440:	1864      	adds	r4, r4, r1
    9442:	4240      	negs	r0, r0
    9444:	1824      	adds	r4, r4, r0
    9446:	07e7      	lsls	r7, r4, #31
    9448:	0852      	lsrs	r2, r2, #1
    944a:	4317      	orrs	r7, r2
    944c:	0864      	lsrs	r4, r4, #1
    944e:	4666      	mov	r6, ip
    9450:	e708      	b.n	9264 <__aeabi_dsub+0x10c>
    9452:	4812      	ldr	r0, [pc, #72]	; (949c <__aeabi_dsub+0x344>)
    9454:	4285      	cmp	r5, r0
    9456:	d100      	bne.n	945a <__aeabi_dsub+0x302>
    9458:	e085      	b.n	9566 <__aeabi_dsub+0x40e>
    945a:	001d      	movs	r5, r3
    945c:	e6bc      	b.n	91d8 <__aeabi_dsub+0x80>
    945e:	0029      	movs	r1, r5
    9460:	3e1f      	subs	r6, #31
    9462:	40f1      	lsrs	r1, r6
    9464:	2b20      	cmp	r3, #32
    9466:	d100      	bne.n	946a <__aeabi_dsub+0x312>
    9468:	e07f      	b.n	956a <__aeabi_dsub+0x412>
    946a:	2240      	movs	r2, #64	; 0x40
    946c:	1ad3      	subs	r3, r2, r3
    946e:	409d      	lsls	r5, r3
    9470:	432f      	orrs	r7, r5
    9472:	1e7d      	subs	r5, r7, #1
    9474:	41af      	sbcs	r7, r5
    9476:	2400      	movs	r4, #0
    9478:	430f      	orrs	r7, r1
    947a:	2600      	movs	r6, #0
    947c:	e78e      	b.n	939c <__aeabi_dsub+0x244>
    947e:	002b      	movs	r3, r5
    9480:	000f      	movs	r7, r1
    9482:	3b20      	subs	r3, #32
    9484:	40df      	lsrs	r7, r3
    9486:	2d20      	cmp	r5, #32
    9488:	d071      	beq.n	956e <__aeabi_dsub+0x416>
    948a:	2340      	movs	r3, #64	; 0x40
    948c:	1b5d      	subs	r5, r3, r5
    948e:	40a9      	lsls	r1, r5
    9490:	430a      	orrs	r2, r1
    9492:	1e51      	subs	r1, r2, #1
    9494:	418a      	sbcs	r2, r1
    9496:	2100      	movs	r1, #0
    9498:	4317      	orrs	r7, r2
    949a:	e6af      	b.n	91fc <__aeabi_dsub+0xa4>
    949c:	000007ff 	.word	0x000007ff
    94a0:	ff7fffff 	.word	0xff7fffff
    94a4:	800fffff 	.word	0x800fffff
    94a8:	2e00      	cmp	r6, #0
    94aa:	d03e      	beq.n	952a <__aeabi_dsub+0x3d2>
    94ac:	4eb3      	ldr	r6, [pc, #716]	; (977c <__aeabi_dsub+0x624>)
    94ae:	45b4      	cmp	ip, r6
    94b0:	d045      	beq.n	953e <__aeabi_dsub+0x3e6>
    94b2:	2680      	movs	r6, #128	; 0x80
    94b4:	0436      	lsls	r6, r6, #16
    94b6:	426d      	negs	r5, r5
    94b8:	4334      	orrs	r4, r6
    94ba:	2d38      	cmp	r5, #56	; 0x38
    94bc:	dd00      	ble.n	94c0 <__aeabi_dsub+0x368>
    94be:	e0a8      	b.n	9612 <__aeabi_dsub+0x4ba>
    94c0:	2d1f      	cmp	r5, #31
    94c2:	dd00      	ble.n	94c6 <__aeabi_dsub+0x36e>
    94c4:	e11f      	b.n	9706 <__aeabi_dsub+0x5ae>
    94c6:	2620      	movs	r6, #32
    94c8:	0027      	movs	r7, r4
    94ca:	4650      	mov	r0, sl
    94cc:	1b76      	subs	r6, r6, r5
    94ce:	40b7      	lsls	r7, r6
    94d0:	40e8      	lsrs	r0, r5
    94d2:	4307      	orrs	r7, r0
    94d4:	4650      	mov	r0, sl
    94d6:	40b0      	lsls	r0, r6
    94d8:	1e46      	subs	r6, r0, #1
    94da:	41b0      	sbcs	r0, r6
    94dc:	40ec      	lsrs	r4, r5
    94de:	4338      	orrs	r0, r7
    94e0:	1a17      	subs	r7, r2, r0
    94e2:	42ba      	cmp	r2, r7
    94e4:	4192      	sbcs	r2, r2
    94e6:	1b0c      	subs	r4, r1, r4
    94e8:	4252      	negs	r2, r2
    94ea:	1aa4      	subs	r4, r4, r2
    94ec:	4666      	mov	r6, ip
    94ee:	4698      	mov	r8, r3
    94f0:	e68b      	b.n	920a <__aeabi_dsub+0xb2>
    94f2:	4664      	mov	r4, ip
    94f4:	4667      	mov	r7, ip
    94f6:	432c      	orrs	r4, r5
    94f8:	d000      	beq.n	94fc <__aeabi_dsub+0x3a4>
    94fa:	e68b      	b.n	9214 <__aeabi_dsub+0xbc>
    94fc:	2500      	movs	r5, #0
    94fe:	2600      	movs	r6, #0
    9500:	2700      	movs	r7, #0
    9502:	e6ea      	b.n	92da <__aeabi_dsub+0x182>
    9504:	001e      	movs	r6, r3
    9506:	e6ad      	b.n	9264 <__aeabi_dsub+0x10c>
    9508:	2b1f      	cmp	r3, #31
    950a:	dc60      	bgt.n	95ce <__aeabi_dsub+0x476>
    950c:	2720      	movs	r7, #32
    950e:	1af8      	subs	r0, r7, r3
    9510:	000f      	movs	r7, r1
    9512:	4684      	mov	ip, r0
    9514:	4087      	lsls	r7, r0
    9516:	0010      	movs	r0, r2
    9518:	40d8      	lsrs	r0, r3
    951a:	4307      	orrs	r7, r0
    951c:	4660      	mov	r0, ip
    951e:	4082      	lsls	r2, r0
    9520:	1e50      	subs	r0, r2, #1
    9522:	4182      	sbcs	r2, r0
    9524:	40d9      	lsrs	r1, r3
    9526:	4317      	orrs	r7, r2
    9528:	e6f5      	b.n	9316 <__aeabi_dsub+0x1be>
    952a:	0026      	movs	r6, r4
    952c:	4650      	mov	r0, sl
    952e:	4306      	orrs	r6, r0
    9530:	d005      	beq.n	953e <__aeabi_dsub+0x3e6>
    9532:	43ed      	mvns	r5, r5
    9534:	2d00      	cmp	r5, #0
    9536:	d0d3      	beq.n	94e0 <__aeabi_dsub+0x388>
    9538:	4e90      	ldr	r6, [pc, #576]	; (977c <__aeabi_dsub+0x624>)
    953a:	45b4      	cmp	ip, r6
    953c:	d1bd      	bne.n	94ba <__aeabi_dsub+0x362>
    953e:	000c      	movs	r4, r1
    9540:	0017      	movs	r7, r2
    9542:	4666      	mov	r6, ip
    9544:	4698      	mov	r8, r3
    9546:	e68d      	b.n	9264 <__aeabi_dsub+0x10c>
    9548:	488c      	ldr	r0, [pc, #560]	; (977c <__aeabi_dsub+0x624>)
    954a:	4283      	cmp	r3, r0
    954c:	d00b      	beq.n	9566 <__aeabi_dsub+0x40e>
    954e:	4663      	mov	r3, ip
    9550:	e6d9      	b.n	9306 <__aeabi_dsub+0x1ae>
    9552:	2d00      	cmp	r5, #0
    9554:	d000      	beq.n	9558 <__aeabi_dsub+0x400>
    9556:	e096      	b.n	9686 <__aeabi_dsub+0x52e>
    9558:	0008      	movs	r0, r1
    955a:	4310      	orrs	r0, r2
    955c:	d100      	bne.n	9560 <__aeabi_dsub+0x408>
    955e:	e0e2      	b.n	9726 <__aeabi_dsub+0x5ce>
    9560:	000c      	movs	r4, r1
    9562:	0017      	movs	r7, r2
    9564:	4698      	mov	r8, r3
    9566:	4e85      	ldr	r6, [pc, #532]	; (977c <__aeabi_dsub+0x624>)
    9568:	e67c      	b.n	9264 <__aeabi_dsub+0x10c>
    956a:	2500      	movs	r5, #0
    956c:	e780      	b.n	9470 <__aeabi_dsub+0x318>
    956e:	2100      	movs	r1, #0
    9570:	e78e      	b.n	9490 <__aeabi_dsub+0x338>
    9572:	0023      	movs	r3, r4
    9574:	4650      	mov	r0, sl
    9576:	4303      	orrs	r3, r0
    9578:	2e00      	cmp	r6, #0
    957a:	d000      	beq.n	957e <__aeabi_dsub+0x426>
    957c:	e0a8      	b.n	96d0 <__aeabi_dsub+0x578>
    957e:	2b00      	cmp	r3, #0
    9580:	d100      	bne.n	9584 <__aeabi_dsub+0x42c>
    9582:	e0de      	b.n	9742 <__aeabi_dsub+0x5ea>
    9584:	000b      	movs	r3, r1
    9586:	4313      	orrs	r3, r2
    9588:	d100      	bne.n	958c <__aeabi_dsub+0x434>
    958a:	e66b      	b.n	9264 <__aeabi_dsub+0x10c>
    958c:	4452      	add	r2, sl
    958e:	4552      	cmp	r2, sl
    9590:	4180      	sbcs	r0, r0
    9592:	1864      	adds	r4, r4, r1
    9594:	4240      	negs	r0, r0
    9596:	1824      	adds	r4, r4, r0
    9598:	0017      	movs	r7, r2
    959a:	0223      	lsls	r3, r4, #8
    959c:	d400      	bmi.n	95a0 <__aeabi_dsub+0x448>
    959e:	e6fd      	b.n	939c <__aeabi_dsub+0x244>
    95a0:	4b77      	ldr	r3, [pc, #476]	; (9780 <__aeabi_dsub+0x628>)
    95a2:	4666      	mov	r6, ip
    95a4:	401c      	ands	r4, r3
    95a6:	e65d      	b.n	9264 <__aeabi_dsub+0x10c>
    95a8:	0025      	movs	r5, r4
    95aa:	4650      	mov	r0, sl
    95ac:	4305      	orrs	r5, r0
    95ae:	2e00      	cmp	r6, #0
    95b0:	d1cf      	bne.n	9552 <__aeabi_dsub+0x3fa>
    95b2:	2d00      	cmp	r5, #0
    95b4:	d14f      	bne.n	9656 <__aeabi_dsub+0x4fe>
    95b6:	000c      	movs	r4, r1
    95b8:	4314      	orrs	r4, r2
    95ba:	d100      	bne.n	95be <__aeabi_dsub+0x466>
    95bc:	e0a0      	b.n	9700 <__aeabi_dsub+0x5a8>
    95be:	000c      	movs	r4, r1
    95c0:	0017      	movs	r7, r2
    95c2:	4698      	mov	r8, r3
    95c4:	e64e      	b.n	9264 <__aeabi_dsub+0x10c>
    95c6:	4666      	mov	r6, ip
    95c8:	2400      	movs	r4, #0
    95ca:	2700      	movs	r7, #0
    95cc:	e685      	b.n	92da <__aeabi_dsub+0x182>
    95ce:	001f      	movs	r7, r3
    95d0:	0008      	movs	r0, r1
    95d2:	3f20      	subs	r7, #32
    95d4:	40f8      	lsrs	r0, r7
    95d6:	0007      	movs	r7, r0
    95d8:	2b20      	cmp	r3, #32
    95da:	d100      	bne.n	95de <__aeabi_dsub+0x486>
    95dc:	e08e      	b.n	96fc <__aeabi_dsub+0x5a4>
    95de:	2040      	movs	r0, #64	; 0x40
    95e0:	1ac3      	subs	r3, r0, r3
    95e2:	4099      	lsls	r1, r3
    95e4:	430a      	orrs	r2, r1
    95e6:	1e51      	subs	r1, r2, #1
    95e8:	418a      	sbcs	r2, r1
    95ea:	2100      	movs	r1, #0
    95ec:	4317      	orrs	r7, r2
    95ee:	e692      	b.n	9316 <__aeabi_dsub+0x1be>
    95f0:	2e00      	cmp	r6, #0
    95f2:	d114      	bne.n	961e <__aeabi_dsub+0x4c6>
    95f4:	0026      	movs	r6, r4
    95f6:	4650      	mov	r0, sl
    95f8:	4306      	orrs	r6, r0
    95fa:	d062      	beq.n	96c2 <__aeabi_dsub+0x56a>
    95fc:	43db      	mvns	r3, r3
    95fe:	2b00      	cmp	r3, #0
    9600:	d15c      	bne.n	96bc <__aeabi_dsub+0x564>
    9602:	1887      	adds	r7, r0, r2
    9604:	4297      	cmp	r7, r2
    9606:	4192      	sbcs	r2, r2
    9608:	1864      	adds	r4, r4, r1
    960a:	4252      	negs	r2, r2
    960c:	18a4      	adds	r4, r4, r2
    960e:	4666      	mov	r6, ip
    9610:	e687      	b.n	9322 <__aeabi_dsub+0x1ca>
    9612:	4650      	mov	r0, sl
    9614:	4320      	orrs	r0, r4
    9616:	1e44      	subs	r4, r0, #1
    9618:	41a0      	sbcs	r0, r4
    961a:	2400      	movs	r4, #0
    961c:	e760      	b.n	94e0 <__aeabi_dsub+0x388>
    961e:	4e57      	ldr	r6, [pc, #348]	; (977c <__aeabi_dsub+0x624>)
    9620:	45b4      	cmp	ip, r6
    9622:	d04e      	beq.n	96c2 <__aeabi_dsub+0x56a>
    9624:	2680      	movs	r6, #128	; 0x80
    9626:	0436      	lsls	r6, r6, #16
    9628:	425b      	negs	r3, r3
    962a:	4334      	orrs	r4, r6
    962c:	2b38      	cmp	r3, #56	; 0x38
    962e:	dd00      	ble.n	9632 <__aeabi_dsub+0x4da>
    9630:	e07f      	b.n	9732 <__aeabi_dsub+0x5da>
    9632:	2b1f      	cmp	r3, #31
    9634:	dd00      	ble.n	9638 <__aeabi_dsub+0x4e0>
    9636:	e08b      	b.n	9750 <__aeabi_dsub+0x5f8>
    9638:	2620      	movs	r6, #32
    963a:	0027      	movs	r7, r4
    963c:	4650      	mov	r0, sl
    963e:	1af6      	subs	r6, r6, r3
    9640:	40b7      	lsls	r7, r6
    9642:	40d8      	lsrs	r0, r3
    9644:	4307      	orrs	r7, r0
    9646:	4650      	mov	r0, sl
    9648:	40b0      	lsls	r0, r6
    964a:	1e46      	subs	r6, r0, #1
    964c:	41b0      	sbcs	r0, r6
    964e:	4307      	orrs	r7, r0
    9650:	40dc      	lsrs	r4, r3
    9652:	18bf      	adds	r7, r7, r2
    9654:	e7d6      	b.n	9604 <__aeabi_dsub+0x4ac>
    9656:	000d      	movs	r5, r1
    9658:	4315      	orrs	r5, r2
    965a:	d100      	bne.n	965e <__aeabi_dsub+0x506>
    965c:	e602      	b.n	9264 <__aeabi_dsub+0x10c>
    965e:	4650      	mov	r0, sl
    9660:	1a80      	subs	r0, r0, r2
    9662:	4582      	cmp	sl, r0
    9664:	41bf      	sbcs	r7, r7
    9666:	1a65      	subs	r5, r4, r1
    9668:	427f      	negs	r7, r7
    966a:	1bed      	subs	r5, r5, r7
    966c:	4684      	mov	ip, r0
    966e:	0228      	lsls	r0, r5, #8
    9670:	d400      	bmi.n	9674 <__aeabi_dsub+0x51c>
    9672:	e68d      	b.n	9390 <__aeabi_dsub+0x238>
    9674:	4650      	mov	r0, sl
    9676:	1a17      	subs	r7, r2, r0
    9678:	42ba      	cmp	r2, r7
    967a:	4192      	sbcs	r2, r2
    967c:	1b0c      	subs	r4, r1, r4
    967e:	4252      	negs	r2, r2
    9680:	1aa4      	subs	r4, r4, r2
    9682:	4698      	mov	r8, r3
    9684:	e5ee      	b.n	9264 <__aeabi_dsub+0x10c>
    9686:	000d      	movs	r5, r1
    9688:	4315      	orrs	r5, r2
    968a:	d100      	bne.n	968e <__aeabi_dsub+0x536>
    968c:	e76b      	b.n	9566 <__aeabi_dsub+0x40e>
    968e:	4650      	mov	r0, sl
    9690:	0767      	lsls	r7, r4, #29
    9692:	08c0      	lsrs	r0, r0, #3
    9694:	4307      	orrs	r7, r0
    9696:	2080      	movs	r0, #128	; 0x80
    9698:	08e4      	lsrs	r4, r4, #3
    969a:	0300      	lsls	r0, r0, #12
    969c:	4204      	tst	r4, r0
    969e:	d007      	beq.n	96b0 <__aeabi_dsub+0x558>
    96a0:	08cd      	lsrs	r5, r1, #3
    96a2:	4205      	tst	r5, r0
    96a4:	d104      	bne.n	96b0 <__aeabi_dsub+0x558>
    96a6:	002c      	movs	r4, r5
    96a8:	4698      	mov	r8, r3
    96aa:	08d7      	lsrs	r7, r2, #3
    96ac:	0749      	lsls	r1, r1, #29
    96ae:	430f      	orrs	r7, r1
    96b0:	0f7b      	lsrs	r3, r7, #29
    96b2:	00e4      	lsls	r4, r4, #3
    96b4:	431c      	orrs	r4, r3
    96b6:	00ff      	lsls	r7, r7, #3
    96b8:	4e30      	ldr	r6, [pc, #192]	; (977c <__aeabi_dsub+0x624>)
    96ba:	e5d3      	b.n	9264 <__aeabi_dsub+0x10c>
    96bc:	4e2f      	ldr	r6, [pc, #188]	; (977c <__aeabi_dsub+0x624>)
    96be:	45b4      	cmp	ip, r6
    96c0:	d1b4      	bne.n	962c <__aeabi_dsub+0x4d4>
    96c2:	000c      	movs	r4, r1
    96c4:	0017      	movs	r7, r2
    96c6:	4666      	mov	r6, ip
    96c8:	e5cc      	b.n	9264 <__aeabi_dsub+0x10c>
    96ca:	2700      	movs	r7, #0
    96cc:	2400      	movs	r4, #0
    96ce:	e5e8      	b.n	92a2 <__aeabi_dsub+0x14a>
    96d0:	2b00      	cmp	r3, #0
    96d2:	d039      	beq.n	9748 <__aeabi_dsub+0x5f0>
    96d4:	000b      	movs	r3, r1
    96d6:	4313      	orrs	r3, r2
    96d8:	d100      	bne.n	96dc <__aeabi_dsub+0x584>
    96da:	e744      	b.n	9566 <__aeabi_dsub+0x40e>
    96dc:	08c0      	lsrs	r0, r0, #3
    96de:	0767      	lsls	r7, r4, #29
    96e0:	4307      	orrs	r7, r0
    96e2:	2080      	movs	r0, #128	; 0x80
    96e4:	08e4      	lsrs	r4, r4, #3
    96e6:	0300      	lsls	r0, r0, #12
    96e8:	4204      	tst	r4, r0
    96ea:	d0e1      	beq.n	96b0 <__aeabi_dsub+0x558>
    96ec:	08cb      	lsrs	r3, r1, #3
    96ee:	4203      	tst	r3, r0
    96f0:	d1de      	bne.n	96b0 <__aeabi_dsub+0x558>
    96f2:	08d7      	lsrs	r7, r2, #3
    96f4:	0749      	lsls	r1, r1, #29
    96f6:	430f      	orrs	r7, r1
    96f8:	001c      	movs	r4, r3
    96fa:	e7d9      	b.n	96b0 <__aeabi_dsub+0x558>
    96fc:	2100      	movs	r1, #0
    96fe:	e771      	b.n	95e4 <__aeabi_dsub+0x48c>
    9700:	2500      	movs	r5, #0
    9702:	2700      	movs	r7, #0
    9704:	e5e9      	b.n	92da <__aeabi_dsub+0x182>
    9706:	002e      	movs	r6, r5
    9708:	0027      	movs	r7, r4
    970a:	3e20      	subs	r6, #32
    970c:	40f7      	lsrs	r7, r6
    970e:	2d20      	cmp	r5, #32
    9710:	d02f      	beq.n	9772 <__aeabi_dsub+0x61a>
    9712:	2640      	movs	r6, #64	; 0x40
    9714:	1b75      	subs	r5, r6, r5
    9716:	40ac      	lsls	r4, r5
    9718:	4650      	mov	r0, sl
    971a:	4320      	orrs	r0, r4
    971c:	1e44      	subs	r4, r0, #1
    971e:	41a0      	sbcs	r0, r4
    9720:	2400      	movs	r4, #0
    9722:	4338      	orrs	r0, r7
    9724:	e6dc      	b.n	94e0 <__aeabi_dsub+0x388>
    9726:	2480      	movs	r4, #128	; 0x80
    9728:	2500      	movs	r5, #0
    972a:	0324      	lsls	r4, r4, #12
    972c:	4e13      	ldr	r6, [pc, #76]	; (977c <__aeabi_dsub+0x624>)
    972e:	2700      	movs	r7, #0
    9730:	e5d3      	b.n	92da <__aeabi_dsub+0x182>
    9732:	4650      	mov	r0, sl
    9734:	4320      	orrs	r0, r4
    9736:	0007      	movs	r7, r0
    9738:	1e78      	subs	r0, r7, #1
    973a:	4187      	sbcs	r7, r0
    973c:	2400      	movs	r4, #0
    973e:	18bf      	adds	r7, r7, r2
    9740:	e760      	b.n	9604 <__aeabi_dsub+0x4ac>
    9742:	000c      	movs	r4, r1
    9744:	0017      	movs	r7, r2
    9746:	e58d      	b.n	9264 <__aeabi_dsub+0x10c>
    9748:	000c      	movs	r4, r1
    974a:	0017      	movs	r7, r2
    974c:	4e0b      	ldr	r6, [pc, #44]	; (977c <__aeabi_dsub+0x624>)
    974e:	e589      	b.n	9264 <__aeabi_dsub+0x10c>
    9750:	001e      	movs	r6, r3
    9752:	0027      	movs	r7, r4
    9754:	3e20      	subs	r6, #32
    9756:	40f7      	lsrs	r7, r6
    9758:	2b20      	cmp	r3, #32
    975a:	d00c      	beq.n	9776 <__aeabi_dsub+0x61e>
    975c:	2640      	movs	r6, #64	; 0x40
    975e:	1af3      	subs	r3, r6, r3
    9760:	409c      	lsls	r4, r3
    9762:	4650      	mov	r0, sl
    9764:	4320      	orrs	r0, r4
    9766:	1e44      	subs	r4, r0, #1
    9768:	41a0      	sbcs	r0, r4
    976a:	4307      	orrs	r7, r0
    976c:	2400      	movs	r4, #0
    976e:	18bf      	adds	r7, r7, r2
    9770:	e748      	b.n	9604 <__aeabi_dsub+0x4ac>
    9772:	2400      	movs	r4, #0
    9774:	e7d0      	b.n	9718 <__aeabi_dsub+0x5c0>
    9776:	2400      	movs	r4, #0
    9778:	e7f3      	b.n	9762 <__aeabi_dsub+0x60a>
    977a:	46c0      	nop			; (mov r8, r8)
    977c:	000007ff 	.word	0x000007ff
    9780:	ff7fffff 	.word	0xff7fffff

00009784 <__aeabi_d2iz>:
    9784:	b530      	push	{r4, r5, lr}
    9786:	4d13      	ldr	r5, [pc, #76]	; (97d4 <__aeabi_d2iz+0x50>)
    9788:	030a      	lsls	r2, r1, #12
    978a:	004b      	lsls	r3, r1, #1
    978c:	0b12      	lsrs	r2, r2, #12
    978e:	0d5b      	lsrs	r3, r3, #21
    9790:	0fc9      	lsrs	r1, r1, #31
    9792:	2400      	movs	r4, #0
    9794:	42ab      	cmp	r3, r5
    9796:	dd10      	ble.n	97ba <__aeabi_d2iz+0x36>
    9798:	4c0f      	ldr	r4, [pc, #60]	; (97d8 <__aeabi_d2iz+0x54>)
    979a:	42a3      	cmp	r3, r4
    979c:	dc0f      	bgt.n	97be <__aeabi_d2iz+0x3a>
    979e:	2480      	movs	r4, #128	; 0x80
    97a0:	4d0e      	ldr	r5, [pc, #56]	; (97dc <__aeabi_d2iz+0x58>)
    97a2:	0364      	lsls	r4, r4, #13
    97a4:	4322      	orrs	r2, r4
    97a6:	1aed      	subs	r5, r5, r3
    97a8:	2d1f      	cmp	r5, #31
    97aa:	dd0b      	ble.n	97c4 <__aeabi_d2iz+0x40>
    97ac:	480c      	ldr	r0, [pc, #48]	; (97e0 <__aeabi_d2iz+0x5c>)
    97ae:	1ac3      	subs	r3, r0, r3
    97b0:	40da      	lsrs	r2, r3
    97b2:	4254      	negs	r4, r2
    97b4:	2900      	cmp	r1, #0
    97b6:	d100      	bne.n	97ba <__aeabi_d2iz+0x36>
    97b8:	0014      	movs	r4, r2
    97ba:	0020      	movs	r0, r4
    97bc:	bd30      	pop	{r4, r5, pc}
    97be:	4b09      	ldr	r3, [pc, #36]	; (97e4 <__aeabi_d2iz+0x60>)
    97c0:	18cc      	adds	r4, r1, r3
    97c2:	e7fa      	b.n	97ba <__aeabi_d2iz+0x36>
    97c4:	4c08      	ldr	r4, [pc, #32]	; (97e8 <__aeabi_d2iz+0x64>)
    97c6:	40e8      	lsrs	r0, r5
    97c8:	46a4      	mov	ip, r4
    97ca:	4463      	add	r3, ip
    97cc:	409a      	lsls	r2, r3
    97ce:	4302      	orrs	r2, r0
    97d0:	e7ef      	b.n	97b2 <__aeabi_d2iz+0x2e>
    97d2:	46c0      	nop			; (mov r8, r8)
    97d4:	000003fe 	.word	0x000003fe
    97d8:	0000041d 	.word	0x0000041d
    97dc:	00000433 	.word	0x00000433
    97e0:	00000413 	.word	0x00000413
    97e4:	7fffffff 	.word	0x7fffffff
    97e8:	fffffbed 	.word	0xfffffbed

000097ec <__aeabi_ui2d>:
    97ec:	b510      	push	{r4, lr}
    97ee:	1e04      	subs	r4, r0, #0
    97f0:	d028      	beq.n	9844 <__aeabi_ui2d+0x58>
    97f2:	f000 f885 	bl	9900 <__clzsi2>
    97f6:	4b15      	ldr	r3, [pc, #84]	; (984c <__aeabi_ui2d+0x60>)
    97f8:	4a15      	ldr	r2, [pc, #84]	; (9850 <__aeabi_ui2d+0x64>)
    97fa:	1a1b      	subs	r3, r3, r0
    97fc:	1ad2      	subs	r2, r2, r3
    97fe:	2a1f      	cmp	r2, #31
    9800:	dd15      	ble.n	982e <__aeabi_ui2d+0x42>
    9802:	4a14      	ldr	r2, [pc, #80]	; (9854 <__aeabi_ui2d+0x68>)
    9804:	1ad2      	subs	r2, r2, r3
    9806:	4094      	lsls	r4, r2
    9808:	2200      	movs	r2, #0
    980a:	0324      	lsls	r4, r4, #12
    980c:	055b      	lsls	r3, r3, #21
    980e:	0b24      	lsrs	r4, r4, #12
    9810:	0d5b      	lsrs	r3, r3, #21
    9812:	2100      	movs	r1, #0
    9814:	0010      	movs	r0, r2
    9816:	0324      	lsls	r4, r4, #12
    9818:	0d0a      	lsrs	r2, r1, #20
    981a:	0b24      	lsrs	r4, r4, #12
    981c:	0512      	lsls	r2, r2, #20
    981e:	4322      	orrs	r2, r4
    9820:	4c0d      	ldr	r4, [pc, #52]	; (9858 <__aeabi_ui2d+0x6c>)
    9822:	051b      	lsls	r3, r3, #20
    9824:	4022      	ands	r2, r4
    9826:	4313      	orrs	r3, r2
    9828:	005b      	lsls	r3, r3, #1
    982a:	0859      	lsrs	r1, r3, #1
    982c:	bd10      	pop	{r4, pc}
    982e:	0021      	movs	r1, r4
    9830:	4091      	lsls	r1, r2
    9832:	000a      	movs	r2, r1
    9834:	210b      	movs	r1, #11
    9836:	1a08      	subs	r0, r1, r0
    9838:	40c4      	lsrs	r4, r0
    983a:	055b      	lsls	r3, r3, #21
    983c:	0324      	lsls	r4, r4, #12
    983e:	0b24      	lsrs	r4, r4, #12
    9840:	0d5b      	lsrs	r3, r3, #21
    9842:	e7e6      	b.n	9812 <__aeabi_ui2d+0x26>
    9844:	2300      	movs	r3, #0
    9846:	2400      	movs	r4, #0
    9848:	2200      	movs	r2, #0
    984a:	e7e2      	b.n	9812 <__aeabi_ui2d+0x26>
    984c:	0000041e 	.word	0x0000041e
    9850:	00000433 	.word	0x00000433
    9854:	00000413 	.word	0x00000413
    9858:	800fffff 	.word	0x800fffff

0000985c <__aeabi_f2d>:
    985c:	0041      	lsls	r1, r0, #1
    985e:	0e09      	lsrs	r1, r1, #24
    9860:	1c4b      	adds	r3, r1, #1
    9862:	b570      	push	{r4, r5, r6, lr}
    9864:	b2db      	uxtb	r3, r3
    9866:	0246      	lsls	r6, r0, #9
    9868:	0a75      	lsrs	r5, r6, #9
    986a:	0fc4      	lsrs	r4, r0, #31
    986c:	2b01      	cmp	r3, #1
    986e:	dd14      	ble.n	989a <__aeabi_f2d+0x3e>
    9870:	23e0      	movs	r3, #224	; 0xe0
    9872:	009b      	lsls	r3, r3, #2
    9874:	076d      	lsls	r5, r5, #29
    9876:	0b36      	lsrs	r6, r6, #12
    9878:	18cb      	adds	r3, r1, r3
    987a:	2100      	movs	r1, #0
    987c:	0d0a      	lsrs	r2, r1, #20
    987e:	0028      	movs	r0, r5
    9880:	0512      	lsls	r2, r2, #20
    9882:	4d1c      	ldr	r5, [pc, #112]	; (98f4 <__aeabi_f2d+0x98>)
    9884:	4332      	orrs	r2, r6
    9886:	055b      	lsls	r3, r3, #21
    9888:	402a      	ands	r2, r5
    988a:	085b      	lsrs	r3, r3, #1
    988c:	4313      	orrs	r3, r2
    988e:	005b      	lsls	r3, r3, #1
    9890:	07e4      	lsls	r4, r4, #31
    9892:	085b      	lsrs	r3, r3, #1
    9894:	4323      	orrs	r3, r4
    9896:	0019      	movs	r1, r3
    9898:	bd70      	pop	{r4, r5, r6, pc}
    989a:	2900      	cmp	r1, #0
    989c:	d114      	bne.n	98c8 <__aeabi_f2d+0x6c>
    989e:	2d00      	cmp	r5, #0
    98a0:	d01e      	beq.n	98e0 <__aeabi_f2d+0x84>
    98a2:	0028      	movs	r0, r5
    98a4:	f000 f82c 	bl	9900 <__clzsi2>
    98a8:	280a      	cmp	r0, #10
    98aa:	dc1c      	bgt.n	98e6 <__aeabi_f2d+0x8a>
    98ac:	230b      	movs	r3, #11
    98ae:	002a      	movs	r2, r5
    98b0:	1a1b      	subs	r3, r3, r0
    98b2:	40da      	lsrs	r2, r3
    98b4:	0003      	movs	r3, r0
    98b6:	3315      	adds	r3, #21
    98b8:	409d      	lsls	r5, r3
    98ba:	4b0f      	ldr	r3, [pc, #60]	; (98f8 <__aeabi_f2d+0x9c>)
    98bc:	0312      	lsls	r2, r2, #12
    98be:	1a1b      	subs	r3, r3, r0
    98c0:	055b      	lsls	r3, r3, #21
    98c2:	0b16      	lsrs	r6, r2, #12
    98c4:	0d5b      	lsrs	r3, r3, #21
    98c6:	e7d8      	b.n	987a <__aeabi_f2d+0x1e>
    98c8:	2d00      	cmp	r5, #0
    98ca:	d006      	beq.n	98da <__aeabi_f2d+0x7e>
    98cc:	0b32      	lsrs	r2, r6, #12
    98ce:	2680      	movs	r6, #128	; 0x80
    98d0:	0336      	lsls	r6, r6, #12
    98d2:	076d      	lsls	r5, r5, #29
    98d4:	4316      	orrs	r6, r2
    98d6:	4b09      	ldr	r3, [pc, #36]	; (98fc <__aeabi_f2d+0xa0>)
    98d8:	e7cf      	b.n	987a <__aeabi_f2d+0x1e>
    98da:	4b08      	ldr	r3, [pc, #32]	; (98fc <__aeabi_f2d+0xa0>)
    98dc:	2600      	movs	r6, #0
    98de:	e7cc      	b.n	987a <__aeabi_f2d+0x1e>
    98e0:	2300      	movs	r3, #0
    98e2:	2600      	movs	r6, #0
    98e4:	e7c9      	b.n	987a <__aeabi_f2d+0x1e>
    98e6:	0003      	movs	r3, r0
    98e8:	002a      	movs	r2, r5
    98ea:	3b0b      	subs	r3, #11
    98ec:	409a      	lsls	r2, r3
    98ee:	2500      	movs	r5, #0
    98f0:	e7e3      	b.n	98ba <__aeabi_f2d+0x5e>
    98f2:	46c0      	nop			; (mov r8, r8)
    98f4:	800fffff 	.word	0x800fffff
    98f8:	00000389 	.word	0x00000389
    98fc:	000007ff 	.word	0x000007ff

00009900 <__clzsi2>:
    9900:	211c      	movs	r1, #28
    9902:	2301      	movs	r3, #1
    9904:	041b      	lsls	r3, r3, #16
    9906:	4298      	cmp	r0, r3
    9908:	d301      	bcc.n	990e <__clzsi2+0xe>
    990a:	0c00      	lsrs	r0, r0, #16
    990c:	3910      	subs	r1, #16
    990e:	0a1b      	lsrs	r3, r3, #8
    9910:	4298      	cmp	r0, r3
    9912:	d301      	bcc.n	9918 <__clzsi2+0x18>
    9914:	0a00      	lsrs	r0, r0, #8
    9916:	3908      	subs	r1, #8
    9918:	091b      	lsrs	r3, r3, #4
    991a:	4298      	cmp	r0, r3
    991c:	d301      	bcc.n	9922 <__clzsi2+0x22>
    991e:	0900      	lsrs	r0, r0, #4
    9920:	3904      	subs	r1, #4
    9922:	a202      	add	r2, pc, #8	; (adr r2, 992c <__clzsi2+0x2c>)
    9924:	5c10      	ldrb	r0, [r2, r0]
    9926:	1840      	adds	r0, r0, r1
    9928:	4770      	bx	lr
    992a:	46c0      	nop			; (mov r8, r8)
    992c:	02020304 	.word	0x02020304
    9930:	01010101 	.word	0x01010101
	...

0000993c <__libc_init_array>:
    993c:	b570      	push	{r4, r5, r6, lr}
    993e:	2600      	movs	r6, #0
    9940:	4d0c      	ldr	r5, [pc, #48]	; (9974 <__libc_init_array+0x38>)
    9942:	4c0d      	ldr	r4, [pc, #52]	; (9978 <__libc_init_array+0x3c>)
    9944:	1b64      	subs	r4, r4, r5
    9946:	10a4      	asrs	r4, r4, #2
    9948:	42a6      	cmp	r6, r4
    994a:	d109      	bne.n	9960 <__libc_init_array+0x24>
    994c:	2600      	movs	r6, #0
    994e:	f002 fd6b 	bl	c428 <_init>
    9952:	4d0a      	ldr	r5, [pc, #40]	; (997c <__libc_init_array+0x40>)
    9954:	4c0a      	ldr	r4, [pc, #40]	; (9980 <__libc_init_array+0x44>)
    9956:	1b64      	subs	r4, r4, r5
    9958:	10a4      	asrs	r4, r4, #2
    995a:	42a6      	cmp	r6, r4
    995c:	d105      	bne.n	996a <__libc_init_array+0x2e>
    995e:	bd70      	pop	{r4, r5, r6, pc}
    9960:	00b3      	lsls	r3, r6, #2
    9962:	58eb      	ldr	r3, [r5, r3]
    9964:	4798      	blx	r3
    9966:	3601      	adds	r6, #1
    9968:	e7ee      	b.n	9948 <__libc_init_array+0xc>
    996a:	00b3      	lsls	r3, r6, #2
    996c:	58eb      	ldr	r3, [r5, r3]
    996e:	4798      	blx	r3
    9970:	3601      	adds	r6, #1
    9972:	e7f2      	b.n	995a <__libc_init_array+0x1e>
    9974:	0000c434 	.word	0x0000c434
    9978:	0000c434 	.word	0x0000c434
    997c:	0000c434 	.word	0x0000c434
    9980:	0000c438 	.word	0x0000c438

00009984 <malloc>:
    9984:	b510      	push	{r4, lr}
    9986:	4b03      	ldr	r3, [pc, #12]	; (9994 <malloc+0x10>)
    9988:	0001      	movs	r1, r0
    998a:	6818      	ldr	r0, [r3, #0]
    998c:	f000 f872 	bl	9a74 <_malloc_r>
    9990:	bd10      	pop	{r4, pc}
    9992:	46c0      	nop			; (mov r8, r8)
    9994:	2000000c 	.word	0x2000000c

00009998 <memcpy>:
    9998:	2300      	movs	r3, #0
    999a:	b510      	push	{r4, lr}
    999c:	429a      	cmp	r2, r3
    999e:	d100      	bne.n	99a2 <memcpy+0xa>
    99a0:	bd10      	pop	{r4, pc}
    99a2:	5ccc      	ldrb	r4, [r1, r3]
    99a4:	54c4      	strb	r4, [r0, r3]
    99a6:	3301      	adds	r3, #1
    99a8:	e7f8      	b.n	999c <memcpy+0x4>

000099aa <memmove>:
    99aa:	b510      	push	{r4, lr}
    99ac:	4288      	cmp	r0, r1
    99ae:	d902      	bls.n	99b6 <memmove+0xc>
    99b0:	188b      	adds	r3, r1, r2
    99b2:	4298      	cmp	r0, r3
    99b4:	d308      	bcc.n	99c8 <memmove+0x1e>
    99b6:	2300      	movs	r3, #0
    99b8:	429a      	cmp	r2, r3
    99ba:	d007      	beq.n	99cc <memmove+0x22>
    99bc:	5ccc      	ldrb	r4, [r1, r3]
    99be:	54c4      	strb	r4, [r0, r3]
    99c0:	3301      	adds	r3, #1
    99c2:	e7f9      	b.n	99b8 <memmove+0xe>
    99c4:	5c8b      	ldrb	r3, [r1, r2]
    99c6:	5483      	strb	r3, [r0, r2]
    99c8:	3a01      	subs	r2, #1
    99ca:	d2fb      	bcs.n	99c4 <memmove+0x1a>
    99cc:	bd10      	pop	{r4, pc}

000099ce <memset>:
    99ce:	0003      	movs	r3, r0
    99d0:	1882      	adds	r2, r0, r2
    99d2:	4293      	cmp	r3, r2
    99d4:	d100      	bne.n	99d8 <memset+0xa>
    99d6:	4770      	bx	lr
    99d8:	7019      	strb	r1, [r3, #0]
    99da:	3301      	adds	r3, #1
    99dc:	e7f9      	b.n	99d2 <memset+0x4>
	...

000099e0 <_free_r>:
    99e0:	b570      	push	{r4, r5, r6, lr}
    99e2:	0005      	movs	r5, r0
    99e4:	2900      	cmp	r1, #0
    99e6:	d010      	beq.n	9a0a <_free_r+0x2a>
    99e8:	1f0c      	subs	r4, r1, #4
    99ea:	6823      	ldr	r3, [r4, #0]
    99ec:	2b00      	cmp	r3, #0
    99ee:	da00      	bge.n	99f2 <_free_r+0x12>
    99f0:	18e4      	adds	r4, r4, r3
    99f2:	0028      	movs	r0, r5
    99f4:	f000 fd08 	bl	a408 <__malloc_lock>
    99f8:	4a1d      	ldr	r2, [pc, #116]	; (9a70 <_free_r+0x90>)
    99fa:	6813      	ldr	r3, [r2, #0]
    99fc:	2b00      	cmp	r3, #0
    99fe:	d105      	bne.n	9a0c <_free_r+0x2c>
    9a00:	6063      	str	r3, [r4, #4]
    9a02:	6014      	str	r4, [r2, #0]
    9a04:	0028      	movs	r0, r5
    9a06:	f000 fd00 	bl	a40a <__malloc_unlock>
    9a0a:	bd70      	pop	{r4, r5, r6, pc}
    9a0c:	42a3      	cmp	r3, r4
    9a0e:	d909      	bls.n	9a24 <_free_r+0x44>
    9a10:	6821      	ldr	r1, [r4, #0]
    9a12:	1860      	adds	r0, r4, r1
    9a14:	4283      	cmp	r3, r0
    9a16:	d1f3      	bne.n	9a00 <_free_r+0x20>
    9a18:	6818      	ldr	r0, [r3, #0]
    9a1a:	685b      	ldr	r3, [r3, #4]
    9a1c:	1841      	adds	r1, r0, r1
    9a1e:	6021      	str	r1, [r4, #0]
    9a20:	e7ee      	b.n	9a00 <_free_r+0x20>
    9a22:	0013      	movs	r3, r2
    9a24:	685a      	ldr	r2, [r3, #4]
    9a26:	2a00      	cmp	r2, #0
    9a28:	d001      	beq.n	9a2e <_free_r+0x4e>
    9a2a:	42a2      	cmp	r2, r4
    9a2c:	d9f9      	bls.n	9a22 <_free_r+0x42>
    9a2e:	6819      	ldr	r1, [r3, #0]
    9a30:	1858      	adds	r0, r3, r1
    9a32:	42a0      	cmp	r0, r4
    9a34:	d10b      	bne.n	9a4e <_free_r+0x6e>
    9a36:	6820      	ldr	r0, [r4, #0]
    9a38:	1809      	adds	r1, r1, r0
    9a3a:	1858      	adds	r0, r3, r1
    9a3c:	6019      	str	r1, [r3, #0]
    9a3e:	4282      	cmp	r2, r0
    9a40:	d1e0      	bne.n	9a04 <_free_r+0x24>
    9a42:	6810      	ldr	r0, [r2, #0]
    9a44:	6852      	ldr	r2, [r2, #4]
    9a46:	1841      	adds	r1, r0, r1
    9a48:	6019      	str	r1, [r3, #0]
    9a4a:	605a      	str	r2, [r3, #4]
    9a4c:	e7da      	b.n	9a04 <_free_r+0x24>
    9a4e:	42a0      	cmp	r0, r4
    9a50:	d902      	bls.n	9a58 <_free_r+0x78>
    9a52:	230c      	movs	r3, #12
    9a54:	602b      	str	r3, [r5, #0]
    9a56:	e7d5      	b.n	9a04 <_free_r+0x24>
    9a58:	6821      	ldr	r1, [r4, #0]
    9a5a:	1860      	adds	r0, r4, r1
    9a5c:	4282      	cmp	r2, r0
    9a5e:	d103      	bne.n	9a68 <_free_r+0x88>
    9a60:	6810      	ldr	r0, [r2, #0]
    9a62:	6852      	ldr	r2, [r2, #4]
    9a64:	1841      	adds	r1, r0, r1
    9a66:	6021      	str	r1, [r4, #0]
    9a68:	6062      	str	r2, [r4, #4]
    9a6a:	605c      	str	r4, [r3, #4]
    9a6c:	e7ca      	b.n	9a04 <_free_r+0x24>
    9a6e:	46c0      	nop			; (mov r8, r8)
    9a70:	20000270 	.word	0x20000270

00009a74 <_malloc_r>:
    9a74:	2303      	movs	r3, #3
    9a76:	b570      	push	{r4, r5, r6, lr}
    9a78:	1ccd      	adds	r5, r1, #3
    9a7a:	439d      	bics	r5, r3
    9a7c:	3508      	adds	r5, #8
    9a7e:	0006      	movs	r6, r0
    9a80:	2d0c      	cmp	r5, #12
    9a82:	d21e      	bcs.n	9ac2 <_malloc_r+0x4e>
    9a84:	250c      	movs	r5, #12
    9a86:	42a9      	cmp	r1, r5
    9a88:	d81d      	bhi.n	9ac6 <_malloc_r+0x52>
    9a8a:	0030      	movs	r0, r6
    9a8c:	f000 fcbc 	bl	a408 <__malloc_lock>
    9a90:	4a25      	ldr	r2, [pc, #148]	; (9b28 <_malloc_r+0xb4>)
    9a92:	6814      	ldr	r4, [r2, #0]
    9a94:	0021      	movs	r1, r4
    9a96:	2900      	cmp	r1, #0
    9a98:	d119      	bne.n	9ace <_malloc_r+0x5a>
    9a9a:	4c24      	ldr	r4, [pc, #144]	; (9b2c <_malloc_r+0xb8>)
    9a9c:	6823      	ldr	r3, [r4, #0]
    9a9e:	2b00      	cmp	r3, #0
    9aa0:	d103      	bne.n	9aaa <_malloc_r+0x36>
    9aa2:	0030      	movs	r0, r6
    9aa4:	f000 f8dc 	bl	9c60 <_sbrk_r>
    9aa8:	6020      	str	r0, [r4, #0]
    9aaa:	0029      	movs	r1, r5
    9aac:	0030      	movs	r0, r6
    9aae:	f000 f8d7 	bl	9c60 <_sbrk_r>
    9ab2:	1c43      	adds	r3, r0, #1
    9ab4:	d12c      	bne.n	9b10 <_malloc_r+0x9c>
    9ab6:	230c      	movs	r3, #12
    9ab8:	0030      	movs	r0, r6
    9aba:	6033      	str	r3, [r6, #0]
    9abc:	f000 fca5 	bl	a40a <__malloc_unlock>
    9ac0:	e003      	b.n	9aca <_malloc_r+0x56>
    9ac2:	2d00      	cmp	r5, #0
    9ac4:	dadf      	bge.n	9a86 <_malloc_r+0x12>
    9ac6:	230c      	movs	r3, #12
    9ac8:	6033      	str	r3, [r6, #0]
    9aca:	2000      	movs	r0, #0
    9acc:	bd70      	pop	{r4, r5, r6, pc}
    9ace:	680b      	ldr	r3, [r1, #0]
    9ad0:	1b5b      	subs	r3, r3, r5
    9ad2:	d41a      	bmi.n	9b0a <_malloc_r+0x96>
    9ad4:	2b0b      	cmp	r3, #11
    9ad6:	d903      	bls.n	9ae0 <_malloc_r+0x6c>
    9ad8:	600b      	str	r3, [r1, #0]
    9ada:	18cc      	adds	r4, r1, r3
    9adc:	6025      	str	r5, [r4, #0]
    9ade:	e003      	b.n	9ae8 <_malloc_r+0x74>
    9ae0:	428c      	cmp	r4, r1
    9ae2:	d10e      	bne.n	9b02 <_malloc_r+0x8e>
    9ae4:	6863      	ldr	r3, [r4, #4]
    9ae6:	6013      	str	r3, [r2, #0]
    9ae8:	0030      	movs	r0, r6
    9aea:	f000 fc8e 	bl	a40a <__malloc_unlock>
    9aee:	0020      	movs	r0, r4
    9af0:	2207      	movs	r2, #7
    9af2:	300b      	adds	r0, #11
    9af4:	1d23      	adds	r3, r4, #4
    9af6:	4390      	bics	r0, r2
    9af8:	1ac3      	subs	r3, r0, r3
    9afa:	d0e7      	beq.n	9acc <_malloc_r+0x58>
    9afc:	425a      	negs	r2, r3
    9afe:	50e2      	str	r2, [r4, r3]
    9b00:	e7e4      	b.n	9acc <_malloc_r+0x58>
    9b02:	684b      	ldr	r3, [r1, #4]
    9b04:	6063      	str	r3, [r4, #4]
    9b06:	000c      	movs	r4, r1
    9b08:	e7ee      	b.n	9ae8 <_malloc_r+0x74>
    9b0a:	000c      	movs	r4, r1
    9b0c:	6849      	ldr	r1, [r1, #4]
    9b0e:	e7c2      	b.n	9a96 <_malloc_r+0x22>
    9b10:	2303      	movs	r3, #3
    9b12:	1cc4      	adds	r4, r0, #3
    9b14:	439c      	bics	r4, r3
    9b16:	42a0      	cmp	r0, r4
    9b18:	d0e0      	beq.n	9adc <_malloc_r+0x68>
    9b1a:	1a21      	subs	r1, r4, r0
    9b1c:	0030      	movs	r0, r6
    9b1e:	f000 f89f 	bl	9c60 <_sbrk_r>
    9b22:	1c43      	adds	r3, r0, #1
    9b24:	d1da      	bne.n	9adc <_malloc_r+0x68>
    9b26:	e7c6      	b.n	9ab6 <_malloc_r+0x42>
    9b28:	20000270 	.word	0x20000270
    9b2c:	20000274 	.word	0x20000274

00009b30 <iprintf>:
    9b30:	b40f      	push	{r0, r1, r2, r3}
    9b32:	4b0b      	ldr	r3, [pc, #44]	; (9b60 <iprintf+0x30>)
    9b34:	b513      	push	{r0, r1, r4, lr}
    9b36:	681c      	ldr	r4, [r3, #0]
    9b38:	2c00      	cmp	r4, #0
    9b3a:	d005      	beq.n	9b48 <iprintf+0x18>
    9b3c:	69a3      	ldr	r3, [r4, #24]
    9b3e:	2b00      	cmp	r3, #0
    9b40:	d102      	bne.n	9b48 <iprintf+0x18>
    9b42:	0020      	movs	r0, r4
    9b44:	f000 fb64 	bl	a210 <__sinit>
    9b48:	ab05      	add	r3, sp, #20
    9b4a:	9a04      	ldr	r2, [sp, #16]
    9b4c:	68a1      	ldr	r1, [r4, #8]
    9b4e:	0020      	movs	r0, r4
    9b50:	9301      	str	r3, [sp, #4]
    9b52:	f000 fde9 	bl	a728 <_vfiprintf_r>
    9b56:	bc16      	pop	{r1, r2, r4}
    9b58:	bc08      	pop	{r3}
    9b5a:	b004      	add	sp, #16
    9b5c:	4718      	bx	r3
    9b5e:	46c0      	nop			; (mov r8, r8)
    9b60:	2000000c 	.word	0x2000000c

00009b64 <putchar>:
    9b64:	4b08      	ldr	r3, [pc, #32]	; (9b88 <putchar+0x24>)
    9b66:	b570      	push	{r4, r5, r6, lr}
    9b68:	681c      	ldr	r4, [r3, #0]
    9b6a:	0005      	movs	r5, r0
    9b6c:	2c00      	cmp	r4, #0
    9b6e:	d005      	beq.n	9b7c <putchar+0x18>
    9b70:	69a3      	ldr	r3, [r4, #24]
    9b72:	2b00      	cmp	r3, #0
    9b74:	d102      	bne.n	9b7c <putchar+0x18>
    9b76:	0020      	movs	r0, r4
    9b78:	f000 fb4a 	bl	a210 <__sinit>
    9b7c:	0029      	movs	r1, r5
    9b7e:	68a2      	ldr	r2, [r4, #8]
    9b80:	0020      	movs	r0, r4
    9b82:	f001 f875 	bl	ac70 <_putc_r>
    9b86:	bd70      	pop	{r4, r5, r6, pc}
    9b88:	2000000c 	.word	0x2000000c

00009b8c <_puts_r>:
    9b8c:	b570      	push	{r4, r5, r6, lr}
    9b8e:	0005      	movs	r5, r0
    9b90:	000e      	movs	r6, r1
    9b92:	2800      	cmp	r0, #0
    9b94:	d004      	beq.n	9ba0 <_puts_r+0x14>
    9b96:	6983      	ldr	r3, [r0, #24]
    9b98:	2b00      	cmp	r3, #0
    9b9a:	d101      	bne.n	9ba0 <_puts_r+0x14>
    9b9c:	f000 fb38 	bl	a210 <__sinit>
    9ba0:	69ab      	ldr	r3, [r5, #24]
    9ba2:	68ac      	ldr	r4, [r5, #8]
    9ba4:	2b00      	cmp	r3, #0
    9ba6:	d102      	bne.n	9bae <_puts_r+0x22>
    9ba8:	0028      	movs	r0, r5
    9baa:	f000 fb31 	bl	a210 <__sinit>
    9bae:	4b24      	ldr	r3, [pc, #144]	; (9c40 <_puts_r+0xb4>)
    9bb0:	429c      	cmp	r4, r3
    9bb2:	d10f      	bne.n	9bd4 <_puts_r+0x48>
    9bb4:	686c      	ldr	r4, [r5, #4]
    9bb6:	89a3      	ldrh	r3, [r4, #12]
    9bb8:	071b      	lsls	r3, r3, #28
    9bba:	d502      	bpl.n	9bc2 <_puts_r+0x36>
    9bbc:	6923      	ldr	r3, [r4, #16]
    9bbe:	2b00      	cmp	r3, #0
    9bc0:	d120      	bne.n	9c04 <_puts_r+0x78>
    9bc2:	0021      	movs	r1, r4
    9bc4:	0028      	movs	r0, r5
    9bc6:	f000 f9b5 	bl	9f34 <__swsetup_r>
    9bca:	2800      	cmp	r0, #0
    9bcc:	d01a      	beq.n	9c04 <_puts_r+0x78>
    9bce:	2001      	movs	r0, #1
    9bd0:	4240      	negs	r0, r0
    9bd2:	bd70      	pop	{r4, r5, r6, pc}
    9bd4:	4b1b      	ldr	r3, [pc, #108]	; (9c44 <_puts_r+0xb8>)
    9bd6:	429c      	cmp	r4, r3
    9bd8:	d101      	bne.n	9bde <_puts_r+0x52>
    9bda:	68ac      	ldr	r4, [r5, #8]
    9bdc:	e7eb      	b.n	9bb6 <_puts_r+0x2a>
    9bde:	4b1a      	ldr	r3, [pc, #104]	; (9c48 <_puts_r+0xbc>)
    9be0:	429c      	cmp	r4, r3
    9be2:	d1e8      	bne.n	9bb6 <_puts_r+0x2a>
    9be4:	68ec      	ldr	r4, [r5, #12]
    9be6:	e7e6      	b.n	9bb6 <_puts_r+0x2a>
    9be8:	3b01      	subs	r3, #1
    9bea:	3601      	adds	r6, #1
    9bec:	60a3      	str	r3, [r4, #8]
    9bee:	2b00      	cmp	r3, #0
    9bf0:	da04      	bge.n	9bfc <_puts_r+0x70>
    9bf2:	69a2      	ldr	r2, [r4, #24]
    9bf4:	4293      	cmp	r3, r2
    9bf6:	db16      	blt.n	9c26 <_puts_r+0x9a>
    9bf8:	290a      	cmp	r1, #10
    9bfa:	d014      	beq.n	9c26 <_puts_r+0x9a>
    9bfc:	6823      	ldr	r3, [r4, #0]
    9bfe:	1c5a      	adds	r2, r3, #1
    9c00:	6022      	str	r2, [r4, #0]
    9c02:	7019      	strb	r1, [r3, #0]
    9c04:	7831      	ldrb	r1, [r6, #0]
    9c06:	68a3      	ldr	r3, [r4, #8]
    9c08:	2900      	cmp	r1, #0
    9c0a:	d1ed      	bne.n	9be8 <_puts_r+0x5c>
    9c0c:	3b01      	subs	r3, #1
    9c0e:	60a3      	str	r3, [r4, #8]
    9c10:	2b00      	cmp	r3, #0
    9c12:	da0f      	bge.n	9c34 <_puts_r+0xa8>
    9c14:	0022      	movs	r2, r4
    9c16:	310a      	adds	r1, #10
    9c18:	0028      	movs	r0, r5
    9c1a:	f000 f935 	bl	9e88 <__swbuf_r>
    9c1e:	1c43      	adds	r3, r0, #1
    9c20:	d0d5      	beq.n	9bce <_puts_r+0x42>
    9c22:	200a      	movs	r0, #10
    9c24:	e7d5      	b.n	9bd2 <_puts_r+0x46>
    9c26:	0022      	movs	r2, r4
    9c28:	0028      	movs	r0, r5
    9c2a:	f000 f92d 	bl	9e88 <__swbuf_r>
    9c2e:	1c43      	adds	r3, r0, #1
    9c30:	d1e8      	bne.n	9c04 <_puts_r+0x78>
    9c32:	e7cc      	b.n	9bce <_puts_r+0x42>
    9c34:	200a      	movs	r0, #10
    9c36:	6823      	ldr	r3, [r4, #0]
    9c38:	1c5a      	adds	r2, r3, #1
    9c3a:	6022      	str	r2, [r4, #0]
    9c3c:	7018      	strb	r0, [r3, #0]
    9c3e:	e7c8      	b.n	9bd2 <_puts_r+0x46>
    9c40:	0000c3b4 	.word	0x0000c3b4
    9c44:	0000c3d4 	.word	0x0000c3d4
    9c48:	0000c394 	.word	0x0000c394

00009c4c <puts>:
    9c4c:	b510      	push	{r4, lr}
    9c4e:	4b03      	ldr	r3, [pc, #12]	; (9c5c <puts+0x10>)
    9c50:	0001      	movs	r1, r0
    9c52:	6818      	ldr	r0, [r3, #0]
    9c54:	f7ff ff9a 	bl	9b8c <_puts_r>
    9c58:	bd10      	pop	{r4, pc}
    9c5a:	46c0      	nop			; (mov r8, r8)
    9c5c:	2000000c 	.word	0x2000000c

00009c60 <_sbrk_r>:
    9c60:	2300      	movs	r3, #0
    9c62:	b570      	push	{r4, r5, r6, lr}
    9c64:	4c06      	ldr	r4, [pc, #24]	; (9c80 <_sbrk_r+0x20>)
    9c66:	0005      	movs	r5, r0
    9c68:	0008      	movs	r0, r1
    9c6a:	6023      	str	r3, [r4, #0]
    9c6c:	f7fc fb4a 	bl	6304 <_sbrk>
    9c70:	1c43      	adds	r3, r0, #1
    9c72:	d103      	bne.n	9c7c <_sbrk_r+0x1c>
    9c74:	6823      	ldr	r3, [r4, #0]
    9c76:	2b00      	cmp	r3, #0
    9c78:	d000      	beq.n	9c7c <_sbrk_r+0x1c>
    9c7a:	602b      	str	r3, [r5, #0]
    9c7c:	bd70      	pop	{r4, r5, r6, pc}
    9c7e:	46c0      	nop			; (mov r8, r8)
    9c80:	200004d4 	.word	0x200004d4

00009c84 <setbuf>:
    9c84:	424a      	negs	r2, r1
    9c86:	414a      	adcs	r2, r1
    9c88:	2380      	movs	r3, #128	; 0x80
    9c8a:	b510      	push	{r4, lr}
    9c8c:	0052      	lsls	r2, r2, #1
    9c8e:	00db      	lsls	r3, r3, #3
    9c90:	f000 f802 	bl	9c98 <setvbuf>
    9c94:	bd10      	pop	{r4, pc}
	...

00009c98 <setvbuf>:
    9c98:	b5f0      	push	{r4, r5, r6, r7, lr}
    9c9a:	001d      	movs	r5, r3
    9c9c:	4b4f      	ldr	r3, [pc, #316]	; (9ddc <setvbuf+0x144>)
    9c9e:	b085      	sub	sp, #20
    9ca0:	681e      	ldr	r6, [r3, #0]
    9ca2:	0004      	movs	r4, r0
    9ca4:	000f      	movs	r7, r1
    9ca6:	9200      	str	r2, [sp, #0]
    9ca8:	2e00      	cmp	r6, #0
    9caa:	d005      	beq.n	9cb8 <setvbuf+0x20>
    9cac:	69b3      	ldr	r3, [r6, #24]
    9cae:	2b00      	cmp	r3, #0
    9cb0:	d102      	bne.n	9cb8 <setvbuf+0x20>
    9cb2:	0030      	movs	r0, r6
    9cb4:	f000 faac 	bl	a210 <__sinit>
    9cb8:	4b49      	ldr	r3, [pc, #292]	; (9de0 <setvbuf+0x148>)
    9cba:	429c      	cmp	r4, r3
    9cbc:	d150      	bne.n	9d60 <setvbuf+0xc8>
    9cbe:	6874      	ldr	r4, [r6, #4]
    9cc0:	9b00      	ldr	r3, [sp, #0]
    9cc2:	2b02      	cmp	r3, #2
    9cc4:	d005      	beq.n	9cd2 <setvbuf+0x3a>
    9cc6:	2b01      	cmp	r3, #1
    9cc8:	d900      	bls.n	9ccc <setvbuf+0x34>
    9cca:	e084      	b.n	9dd6 <setvbuf+0x13e>
    9ccc:	2d00      	cmp	r5, #0
    9cce:	da00      	bge.n	9cd2 <setvbuf+0x3a>
    9cd0:	e081      	b.n	9dd6 <setvbuf+0x13e>
    9cd2:	0021      	movs	r1, r4
    9cd4:	0030      	movs	r0, r6
    9cd6:	f000 fa2d 	bl	a134 <_fflush_r>
    9cda:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9cdc:	2900      	cmp	r1, #0
    9cde:	d008      	beq.n	9cf2 <setvbuf+0x5a>
    9ce0:	0023      	movs	r3, r4
    9ce2:	3344      	adds	r3, #68	; 0x44
    9ce4:	4299      	cmp	r1, r3
    9ce6:	d002      	beq.n	9cee <setvbuf+0x56>
    9ce8:	0030      	movs	r0, r6
    9cea:	f7ff fe79 	bl	99e0 <_free_r>
    9cee:	2300      	movs	r3, #0
    9cf0:	6363      	str	r3, [r4, #52]	; 0x34
    9cf2:	2300      	movs	r3, #0
    9cf4:	61a3      	str	r3, [r4, #24]
    9cf6:	6063      	str	r3, [r4, #4]
    9cf8:	89a3      	ldrh	r3, [r4, #12]
    9cfa:	061b      	lsls	r3, r3, #24
    9cfc:	d503      	bpl.n	9d06 <setvbuf+0x6e>
    9cfe:	6921      	ldr	r1, [r4, #16]
    9d00:	0030      	movs	r0, r6
    9d02:	f7ff fe6d 	bl	99e0 <_free_r>
    9d06:	89a3      	ldrh	r3, [r4, #12]
    9d08:	4a36      	ldr	r2, [pc, #216]	; (9de4 <setvbuf+0x14c>)
    9d0a:	4013      	ands	r3, r2
    9d0c:	81a3      	strh	r3, [r4, #12]
    9d0e:	9b00      	ldr	r3, [sp, #0]
    9d10:	2b02      	cmp	r3, #2
    9d12:	d05a      	beq.n	9dca <setvbuf+0x132>
    9d14:	ab03      	add	r3, sp, #12
    9d16:	aa02      	add	r2, sp, #8
    9d18:	0021      	movs	r1, r4
    9d1a:	0030      	movs	r0, r6
    9d1c:	f000 fb0e 	bl	a33c <__swhatbuf_r>
    9d20:	89a3      	ldrh	r3, [r4, #12]
    9d22:	4318      	orrs	r0, r3
    9d24:	81a0      	strh	r0, [r4, #12]
    9d26:	2d00      	cmp	r5, #0
    9d28:	d124      	bne.n	9d74 <setvbuf+0xdc>
    9d2a:	9d02      	ldr	r5, [sp, #8]
    9d2c:	0028      	movs	r0, r5
    9d2e:	f7ff fe29 	bl	9984 <malloc>
    9d32:	9501      	str	r5, [sp, #4]
    9d34:	1e07      	subs	r7, r0, #0
    9d36:	d142      	bne.n	9dbe <setvbuf+0x126>
    9d38:	9b02      	ldr	r3, [sp, #8]
    9d3a:	9301      	str	r3, [sp, #4]
    9d3c:	42ab      	cmp	r3, r5
    9d3e:	d139      	bne.n	9db4 <setvbuf+0x11c>
    9d40:	2001      	movs	r0, #1
    9d42:	4240      	negs	r0, r0
    9d44:	2302      	movs	r3, #2
    9d46:	89a2      	ldrh	r2, [r4, #12]
    9d48:	4313      	orrs	r3, r2
    9d4a:	81a3      	strh	r3, [r4, #12]
    9d4c:	2300      	movs	r3, #0
    9d4e:	60a3      	str	r3, [r4, #8]
    9d50:	0023      	movs	r3, r4
    9d52:	3347      	adds	r3, #71	; 0x47
    9d54:	6023      	str	r3, [r4, #0]
    9d56:	6123      	str	r3, [r4, #16]
    9d58:	2301      	movs	r3, #1
    9d5a:	6163      	str	r3, [r4, #20]
    9d5c:	b005      	add	sp, #20
    9d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9d60:	4b21      	ldr	r3, [pc, #132]	; (9de8 <setvbuf+0x150>)
    9d62:	429c      	cmp	r4, r3
    9d64:	d101      	bne.n	9d6a <setvbuf+0xd2>
    9d66:	68b4      	ldr	r4, [r6, #8]
    9d68:	e7aa      	b.n	9cc0 <setvbuf+0x28>
    9d6a:	4b20      	ldr	r3, [pc, #128]	; (9dec <setvbuf+0x154>)
    9d6c:	429c      	cmp	r4, r3
    9d6e:	d1a7      	bne.n	9cc0 <setvbuf+0x28>
    9d70:	68f4      	ldr	r4, [r6, #12]
    9d72:	e7a5      	b.n	9cc0 <setvbuf+0x28>
    9d74:	2f00      	cmp	r7, #0
    9d76:	d0d9      	beq.n	9d2c <setvbuf+0x94>
    9d78:	69b3      	ldr	r3, [r6, #24]
    9d7a:	2b00      	cmp	r3, #0
    9d7c:	d102      	bne.n	9d84 <setvbuf+0xec>
    9d7e:	0030      	movs	r0, r6
    9d80:	f000 fa46 	bl	a210 <__sinit>
    9d84:	9b00      	ldr	r3, [sp, #0]
    9d86:	2b01      	cmp	r3, #1
    9d88:	d103      	bne.n	9d92 <setvbuf+0xfa>
    9d8a:	89a3      	ldrh	r3, [r4, #12]
    9d8c:	9a00      	ldr	r2, [sp, #0]
    9d8e:	431a      	orrs	r2, r3
    9d90:	81a2      	strh	r2, [r4, #12]
    9d92:	2008      	movs	r0, #8
    9d94:	89a3      	ldrh	r3, [r4, #12]
    9d96:	6027      	str	r7, [r4, #0]
    9d98:	6127      	str	r7, [r4, #16]
    9d9a:	6165      	str	r5, [r4, #20]
    9d9c:	4018      	ands	r0, r3
    9d9e:	d018      	beq.n	9dd2 <setvbuf+0x13a>
    9da0:	2001      	movs	r0, #1
    9da2:	4018      	ands	r0, r3
    9da4:	2300      	movs	r3, #0
    9da6:	4298      	cmp	r0, r3
    9da8:	d011      	beq.n	9dce <setvbuf+0x136>
    9daa:	426d      	negs	r5, r5
    9dac:	60a3      	str	r3, [r4, #8]
    9dae:	61a5      	str	r5, [r4, #24]
    9db0:	0018      	movs	r0, r3
    9db2:	e7d3      	b.n	9d5c <setvbuf+0xc4>
    9db4:	9801      	ldr	r0, [sp, #4]
    9db6:	f7ff fde5 	bl	9984 <malloc>
    9dba:	1e07      	subs	r7, r0, #0
    9dbc:	d0c0      	beq.n	9d40 <setvbuf+0xa8>
    9dbe:	2380      	movs	r3, #128	; 0x80
    9dc0:	89a2      	ldrh	r2, [r4, #12]
    9dc2:	9d01      	ldr	r5, [sp, #4]
    9dc4:	4313      	orrs	r3, r2
    9dc6:	81a3      	strh	r3, [r4, #12]
    9dc8:	e7d6      	b.n	9d78 <setvbuf+0xe0>
    9dca:	2000      	movs	r0, #0
    9dcc:	e7ba      	b.n	9d44 <setvbuf+0xac>
    9dce:	60a5      	str	r5, [r4, #8]
    9dd0:	e7c4      	b.n	9d5c <setvbuf+0xc4>
    9dd2:	60a0      	str	r0, [r4, #8]
    9dd4:	e7c2      	b.n	9d5c <setvbuf+0xc4>
    9dd6:	2001      	movs	r0, #1
    9dd8:	4240      	negs	r0, r0
    9dda:	e7bf      	b.n	9d5c <setvbuf+0xc4>
    9ddc:	2000000c 	.word	0x2000000c
    9de0:	0000c3b4 	.word	0x0000c3b4
    9de4:	fffff35c 	.word	0xfffff35c
    9de8:	0000c3d4 	.word	0x0000c3d4
    9dec:	0000c394 	.word	0x0000c394

00009df0 <siprintf>:
    9df0:	b40e      	push	{r1, r2, r3}
    9df2:	b510      	push	{r4, lr}
    9df4:	b09d      	sub	sp, #116	; 0x74
    9df6:	a902      	add	r1, sp, #8
    9df8:	9002      	str	r0, [sp, #8]
    9dfa:	6108      	str	r0, [r1, #16]
    9dfc:	480b      	ldr	r0, [pc, #44]	; (9e2c <siprintf+0x3c>)
    9dfe:	2482      	movs	r4, #130	; 0x82
    9e00:	6088      	str	r0, [r1, #8]
    9e02:	6148      	str	r0, [r1, #20]
    9e04:	2001      	movs	r0, #1
    9e06:	4240      	negs	r0, r0
    9e08:	ab1f      	add	r3, sp, #124	; 0x7c
    9e0a:	81c8      	strh	r0, [r1, #14]
    9e0c:	4808      	ldr	r0, [pc, #32]	; (9e30 <siprintf+0x40>)
    9e0e:	cb04      	ldmia	r3!, {r2}
    9e10:	00a4      	lsls	r4, r4, #2
    9e12:	6800      	ldr	r0, [r0, #0]
    9e14:	9301      	str	r3, [sp, #4]
    9e16:	818c      	strh	r4, [r1, #12]
    9e18:	f000 fb5a 	bl	a4d0 <_svfiprintf_r>
    9e1c:	2300      	movs	r3, #0
    9e1e:	9a02      	ldr	r2, [sp, #8]
    9e20:	7013      	strb	r3, [r2, #0]
    9e22:	b01d      	add	sp, #116	; 0x74
    9e24:	bc10      	pop	{r4}
    9e26:	bc08      	pop	{r3}
    9e28:	b003      	add	sp, #12
    9e2a:	4718      	bx	r3
    9e2c:	7fffffff 	.word	0x7fffffff
    9e30:	2000000c 	.word	0x2000000c

00009e34 <strcmp>:
    9e34:	7802      	ldrb	r2, [r0, #0]
    9e36:	780b      	ldrb	r3, [r1, #0]
    9e38:	2a00      	cmp	r2, #0
    9e3a:	d003      	beq.n	9e44 <strcmp+0x10>
    9e3c:	3001      	adds	r0, #1
    9e3e:	3101      	adds	r1, #1
    9e40:	429a      	cmp	r2, r3
    9e42:	d0f7      	beq.n	9e34 <strcmp>
    9e44:	1ad0      	subs	r0, r2, r3
    9e46:	4770      	bx	lr

00009e48 <strcpy>:
    9e48:	1c03      	adds	r3, r0, #0
    9e4a:	780a      	ldrb	r2, [r1, #0]
    9e4c:	3101      	adds	r1, #1
    9e4e:	701a      	strb	r2, [r3, #0]
    9e50:	3301      	adds	r3, #1
    9e52:	2a00      	cmp	r2, #0
    9e54:	d1f9      	bne.n	9e4a <strcpy+0x2>
    9e56:	4770      	bx	lr

00009e58 <strlen>:
    9e58:	2300      	movs	r3, #0
    9e5a:	5cc2      	ldrb	r2, [r0, r3]
    9e5c:	3301      	adds	r3, #1
    9e5e:	2a00      	cmp	r2, #0
    9e60:	d1fb      	bne.n	9e5a <strlen+0x2>
    9e62:	1e58      	subs	r0, r3, #1
    9e64:	4770      	bx	lr

00009e66 <strncmp>:
    9e66:	2300      	movs	r3, #0
    9e68:	b530      	push	{r4, r5, lr}
    9e6a:	429a      	cmp	r2, r3
    9e6c:	d00a      	beq.n	9e84 <strncmp+0x1e>
    9e6e:	3a01      	subs	r2, #1
    9e70:	5cc4      	ldrb	r4, [r0, r3]
    9e72:	5ccd      	ldrb	r5, [r1, r3]
    9e74:	42ac      	cmp	r4, r5
    9e76:	d104      	bne.n	9e82 <strncmp+0x1c>
    9e78:	429a      	cmp	r2, r3
    9e7a:	d002      	beq.n	9e82 <strncmp+0x1c>
    9e7c:	3301      	adds	r3, #1
    9e7e:	2c00      	cmp	r4, #0
    9e80:	d1f6      	bne.n	9e70 <strncmp+0xa>
    9e82:	1b63      	subs	r3, r4, r5
    9e84:	0018      	movs	r0, r3
    9e86:	bd30      	pop	{r4, r5, pc}

00009e88 <__swbuf_r>:
    9e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9e8a:	0005      	movs	r5, r0
    9e8c:	000e      	movs	r6, r1
    9e8e:	0014      	movs	r4, r2
    9e90:	2800      	cmp	r0, #0
    9e92:	d004      	beq.n	9e9e <__swbuf_r+0x16>
    9e94:	6983      	ldr	r3, [r0, #24]
    9e96:	2b00      	cmp	r3, #0
    9e98:	d101      	bne.n	9e9e <__swbuf_r+0x16>
    9e9a:	f000 f9b9 	bl	a210 <__sinit>
    9e9e:	4b22      	ldr	r3, [pc, #136]	; (9f28 <__swbuf_r+0xa0>)
    9ea0:	429c      	cmp	r4, r3
    9ea2:	d12d      	bne.n	9f00 <__swbuf_r+0x78>
    9ea4:	686c      	ldr	r4, [r5, #4]
    9ea6:	69a3      	ldr	r3, [r4, #24]
    9ea8:	60a3      	str	r3, [r4, #8]
    9eaa:	89a3      	ldrh	r3, [r4, #12]
    9eac:	071b      	lsls	r3, r3, #28
    9eae:	d531      	bpl.n	9f14 <__swbuf_r+0x8c>
    9eb0:	6923      	ldr	r3, [r4, #16]
    9eb2:	2b00      	cmp	r3, #0
    9eb4:	d02e      	beq.n	9f14 <__swbuf_r+0x8c>
    9eb6:	6823      	ldr	r3, [r4, #0]
    9eb8:	6922      	ldr	r2, [r4, #16]
    9eba:	b2f7      	uxtb	r7, r6
    9ebc:	1a98      	subs	r0, r3, r2
    9ebe:	6963      	ldr	r3, [r4, #20]
    9ec0:	b2f6      	uxtb	r6, r6
    9ec2:	4298      	cmp	r0, r3
    9ec4:	db05      	blt.n	9ed2 <__swbuf_r+0x4a>
    9ec6:	0021      	movs	r1, r4
    9ec8:	0028      	movs	r0, r5
    9eca:	f000 f933 	bl	a134 <_fflush_r>
    9ece:	2800      	cmp	r0, #0
    9ed0:	d126      	bne.n	9f20 <__swbuf_r+0x98>
    9ed2:	68a3      	ldr	r3, [r4, #8]
    9ed4:	3001      	adds	r0, #1
    9ed6:	3b01      	subs	r3, #1
    9ed8:	60a3      	str	r3, [r4, #8]
    9eda:	6823      	ldr	r3, [r4, #0]
    9edc:	1c5a      	adds	r2, r3, #1
    9ede:	6022      	str	r2, [r4, #0]
    9ee0:	701f      	strb	r7, [r3, #0]
    9ee2:	6963      	ldr	r3, [r4, #20]
    9ee4:	4298      	cmp	r0, r3
    9ee6:	d004      	beq.n	9ef2 <__swbuf_r+0x6a>
    9ee8:	89a3      	ldrh	r3, [r4, #12]
    9eea:	07db      	lsls	r3, r3, #31
    9eec:	d51a      	bpl.n	9f24 <__swbuf_r+0x9c>
    9eee:	2e0a      	cmp	r6, #10
    9ef0:	d118      	bne.n	9f24 <__swbuf_r+0x9c>
    9ef2:	0021      	movs	r1, r4
    9ef4:	0028      	movs	r0, r5
    9ef6:	f000 f91d 	bl	a134 <_fflush_r>
    9efa:	2800      	cmp	r0, #0
    9efc:	d012      	beq.n	9f24 <__swbuf_r+0x9c>
    9efe:	e00f      	b.n	9f20 <__swbuf_r+0x98>
    9f00:	4b0a      	ldr	r3, [pc, #40]	; (9f2c <__swbuf_r+0xa4>)
    9f02:	429c      	cmp	r4, r3
    9f04:	d101      	bne.n	9f0a <__swbuf_r+0x82>
    9f06:	68ac      	ldr	r4, [r5, #8]
    9f08:	e7cd      	b.n	9ea6 <__swbuf_r+0x1e>
    9f0a:	4b09      	ldr	r3, [pc, #36]	; (9f30 <__swbuf_r+0xa8>)
    9f0c:	429c      	cmp	r4, r3
    9f0e:	d1ca      	bne.n	9ea6 <__swbuf_r+0x1e>
    9f10:	68ec      	ldr	r4, [r5, #12]
    9f12:	e7c8      	b.n	9ea6 <__swbuf_r+0x1e>
    9f14:	0021      	movs	r1, r4
    9f16:	0028      	movs	r0, r5
    9f18:	f000 f80c 	bl	9f34 <__swsetup_r>
    9f1c:	2800      	cmp	r0, #0
    9f1e:	d0ca      	beq.n	9eb6 <__swbuf_r+0x2e>
    9f20:	2601      	movs	r6, #1
    9f22:	4276      	negs	r6, r6
    9f24:	0030      	movs	r0, r6
    9f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9f28:	0000c3b4 	.word	0x0000c3b4
    9f2c:	0000c3d4 	.word	0x0000c3d4
    9f30:	0000c394 	.word	0x0000c394

00009f34 <__swsetup_r>:
    9f34:	4b36      	ldr	r3, [pc, #216]	; (a010 <__swsetup_r+0xdc>)
    9f36:	b570      	push	{r4, r5, r6, lr}
    9f38:	681d      	ldr	r5, [r3, #0]
    9f3a:	0006      	movs	r6, r0
    9f3c:	000c      	movs	r4, r1
    9f3e:	2d00      	cmp	r5, #0
    9f40:	d005      	beq.n	9f4e <__swsetup_r+0x1a>
    9f42:	69ab      	ldr	r3, [r5, #24]
    9f44:	2b00      	cmp	r3, #0
    9f46:	d102      	bne.n	9f4e <__swsetup_r+0x1a>
    9f48:	0028      	movs	r0, r5
    9f4a:	f000 f961 	bl	a210 <__sinit>
    9f4e:	4b31      	ldr	r3, [pc, #196]	; (a014 <__swsetup_r+0xe0>)
    9f50:	429c      	cmp	r4, r3
    9f52:	d10f      	bne.n	9f74 <__swsetup_r+0x40>
    9f54:	686c      	ldr	r4, [r5, #4]
    9f56:	230c      	movs	r3, #12
    9f58:	5ee2      	ldrsh	r2, [r4, r3]
    9f5a:	b293      	uxth	r3, r2
    9f5c:	0719      	lsls	r1, r3, #28
    9f5e:	d42d      	bmi.n	9fbc <__swsetup_r+0x88>
    9f60:	06d9      	lsls	r1, r3, #27
    9f62:	d411      	bmi.n	9f88 <__swsetup_r+0x54>
    9f64:	2309      	movs	r3, #9
    9f66:	2001      	movs	r0, #1
    9f68:	6033      	str	r3, [r6, #0]
    9f6a:	3337      	adds	r3, #55	; 0x37
    9f6c:	4313      	orrs	r3, r2
    9f6e:	81a3      	strh	r3, [r4, #12]
    9f70:	4240      	negs	r0, r0
    9f72:	bd70      	pop	{r4, r5, r6, pc}
    9f74:	4b28      	ldr	r3, [pc, #160]	; (a018 <__swsetup_r+0xe4>)
    9f76:	429c      	cmp	r4, r3
    9f78:	d101      	bne.n	9f7e <__swsetup_r+0x4a>
    9f7a:	68ac      	ldr	r4, [r5, #8]
    9f7c:	e7eb      	b.n	9f56 <__swsetup_r+0x22>
    9f7e:	4b27      	ldr	r3, [pc, #156]	; (a01c <__swsetup_r+0xe8>)
    9f80:	429c      	cmp	r4, r3
    9f82:	d1e8      	bne.n	9f56 <__swsetup_r+0x22>
    9f84:	68ec      	ldr	r4, [r5, #12]
    9f86:	e7e6      	b.n	9f56 <__swsetup_r+0x22>
    9f88:	075b      	lsls	r3, r3, #29
    9f8a:	d513      	bpl.n	9fb4 <__swsetup_r+0x80>
    9f8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9f8e:	2900      	cmp	r1, #0
    9f90:	d008      	beq.n	9fa4 <__swsetup_r+0x70>
    9f92:	0023      	movs	r3, r4
    9f94:	3344      	adds	r3, #68	; 0x44
    9f96:	4299      	cmp	r1, r3
    9f98:	d002      	beq.n	9fa0 <__swsetup_r+0x6c>
    9f9a:	0030      	movs	r0, r6
    9f9c:	f7ff fd20 	bl	99e0 <_free_r>
    9fa0:	2300      	movs	r3, #0
    9fa2:	6363      	str	r3, [r4, #52]	; 0x34
    9fa4:	2224      	movs	r2, #36	; 0x24
    9fa6:	89a3      	ldrh	r3, [r4, #12]
    9fa8:	4393      	bics	r3, r2
    9faa:	81a3      	strh	r3, [r4, #12]
    9fac:	2300      	movs	r3, #0
    9fae:	6063      	str	r3, [r4, #4]
    9fb0:	6923      	ldr	r3, [r4, #16]
    9fb2:	6023      	str	r3, [r4, #0]
    9fb4:	2308      	movs	r3, #8
    9fb6:	89a2      	ldrh	r2, [r4, #12]
    9fb8:	4313      	orrs	r3, r2
    9fba:	81a3      	strh	r3, [r4, #12]
    9fbc:	6923      	ldr	r3, [r4, #16]
    9fbe:	2b00      	cmp	r3, #0
    9fc0:	d10b      	bne.n	9fda <__swsetup_r+0xa6>
    9fc2:	21a0      	movs	r1, #160	; 0xa0
    9fc4:	2280      	movs	r2, #128	; 0x80
    9fc6:	89a3      	ldrh	r3, [r4, #12]
    9fc8:	0089      	lsls	r1, r1, #2
    9fca:	0092      	lsls	r2, r2, #2
    9fcc:	400b      	ands	r3, r1
    9fce:	4293      	cmp	r3, r2
    9fd0:	d003      	beq.n	9fda <__swsetup_r+0xa6>
    9fd2:	0021      	movs	r1, r4
    9fd4:	0030      	movs	r0, r6
    9fd6:	f000 f9d9 	bl	a38c <__smakebuf_r>
    9fda:	2301      	movs	r3, #1
    9fdc:	89a2      	ldrh	r2, [r4, #12]
    9fde:	4013      	ands	r3, r2
    9fe0:	d011      	beq.n	a006 <__swsetup_r+0xd2>
    9fe2:	2300      	movs	r3, #0
    9fe4:	60a3      	str	r3, [r4, #8]
    9fe6:	6963      	ldr	r3, [r4, #20]
    9fe8:	425b      	negs	r3, r3
    9fea:	61a3      	str	r3, [r4, #24]
    9fec:	2000      	movs	r0, #0
    9fee:	6923      	ldr	r3, [r4, #16]
    9ff0:	4283      	cmp	r3, r0
    9ff2:	d1be      	bne.n	9f72 <__swsetup_r+0x3e>
    9ff4:	230c      	movs	r3, #12
    9ff6:	5ee2      	ldrsh	r2, [r4, r3]
    9ff8:	0613      	lsls	r3, r2, #24
    9ffa:	d5ba      	bpl.n	9f72 <__swsetup_r+0x3e>
    9ffc:	2340      	movs	r3, #64	; 0x40
    9ffe:	4313      	orrs	r3, r2
    a000:	81a3      	strh	r3, [r4, #12]
    a002:	3801      	subs	r0, #1
    a004:	e7b5      	b.n	9f72 <__swsetup_r+0x3e>
    a006:	0792      	lsls	r2, r2, #30
    a008:	d400      	bmi.n	a00c <__swsetup_r+0xd8>
    a00a:	6963      	ldr	r3, [r4, #20]
    a00c:	60a3      	str	r3, [r4, #8]
    a00e:	e7ed      	b.n	9fec <__swsetup_r+0xb8>
    a010:	2000000c 	.word	0x2000000c
    a014:	0000c3b4 	.word	0x0000c3b4
    a018:	0000c3d4 	.word	0x0000c3d4
    a01c:	0000c394 	.word	0x0000c394

0000a020 <__sflush_r>:
    a020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a022:	898a      	ldrh	r2, [r1, #12]
    a024:	0005      	movs	r5, r0
    a026:	000c      	movs	r4, r1
    a028:	0713      	lsls	r3, r2, #28
    a02a:	d460      	bmi.n	a0ee <__sflush_r+0xce>
    a02c:	684b      	ldr	r3, [r1, #4]
    a02e:	2b00      	cmp	r3, #0
    a030:	dc04      	bgt.n	a03c <__sflush_r+0x1c>
    a032:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    a034:	2b00      	cmp	r3, #0
    a036:	dc01      	bgt.n	a03c <__sflush_r+0x1c>
    a038:	2000      	movs	r0, #0
    a03a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    a03c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    a03e:	2f00      	cmp	r7, #0
    a040:	d0fa      	beq.n	a038 <__sflush_r+0x18>
    a042:	2300      	movs	r3, #0
    a044:	682e      	ldr	r6, [r5, #0]
    a046:	602b      	str	r3, [r5, #0]
    a048:	2380      	movs	r3, #128	; 0x80
    a04a:	015b      	lsls	r3, r3, #5
    a04c:	401a      	ands	r2, r3
    a04e:	d034      	beq.n	a0ba <__sflush_r+0x9a>
    a050:	6d60      	ldr	r0, [r4, #84]	; 0x54
    a052:	89a3      	ldrh	r3, [r4, #12]
    a054:	075b      	lsls	r3, r3, #29
    a056:	d506      	bpl.n	a066 <__sflush_r+0x46>
    a058:	6863      	ldr	r3, [r4, #4]
    a05a:	1ac0      	subs	r0, r0, r3
    a05c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    a05e:	2b00      	cmp	r3, #0
    a060:	d001      	beq.n	a066 <__sflush_r+0x46>
    a062:	6c23      	ldr	r3, [r4, #64]	; 0x40
    a064:	1ac0      	subs	r0, r0, r3
    a066:	0002      	movs	r2, r0
    a068:	6a21      	ldr	r1, [r4, #32]
    a06a:	2300      	movs	r3, #0
    a06c:	0028      	movs	r0, r5
    a06e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    a070:	47b8      	blx	r7
    a072:	89a1      	ldrh	r1, [r4, #12]
    a074:	1c43      	adds	r3, r0, #1
    a076:	d106      	bne.n	a086 <__sflush_r+0x66>
    a078:	682b      	ldr	r3, [r5, #0]
    a07a:	2b1d      	cmp	r3, #29
    a07c:	d831      	bhi.n	a0e2 <__sflush_r+0xc2>
    a07e:	4a2c      	ldr	r2, [pc, #176]	; (a130 <__sflush_r+0x110>)
    a080:	40da      	lsrs	r2, r3
    a082:	07d3      	lsls	r3, r2, #31
    a084:	d52d      	bpl.n	a0e2 <__sflush_r+0xc2>
    a086:	2300      	movs	r3, #0
    a088:	6063      	str	r3, [r4, #4]
    a08a:	6923      	ldr	r3, [r4, #16]
    a08c:	6023      	str	r3, [r4, #0]
    a08e:	04cb      	lsls	r3, r1, #19
    a090:	d505      	bpl.n	a09e <__sflush_r+0x7e>
    a092:	1c43      	adds	r3, r0, #1
    a094:	d102      	bne.n	a09c <__sflush_r+0x7c>
    a096:	682b      	ldr	r3, [r5, #0]
    a098:	2b00      	cmp	r3, #0
    a09a:	d100      	bne.n	a09e <__sflush_r+0x7e>
    a09c:	6560      	str	r0, [r4, #84]	; 0x54
    a09e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a0a0:	602e      	str	r6, [r5, #0]
    a0a2:	2900      	cmp	r1, #0
    a0a4:	d0c8      	beq.n	a038 <__sflush_r+0x18>
    a0a6:	0023      	movs	r3, r4
    a0a8:	3344      	adds	r3, #68	; 0x44
    a0aa:	4299      	cmp	r1, r3
    a0ac:	d002      	beq.n	a0b4 <__sflush_r+0x94>
    a0ae:	0028      	movs	r0, r5
    a0b0:	f7ff fc96 	bl	99e0 <_free_r>
    a0b4:	2000      	movs	r0, #0
    a0b6:	6360      	str	r0, [r4, #52]	; 0x34
    a0b8:	e7bf      	b.n	a03a <__sflush_r+0x1a>
    a0ba:	2301      	movs	r3, #1
    a0bc:	6a21      	ldr	r1, [r4, #32]
    a0be:	0028      	movs	r0, r5
    a0c0:	47b8      	blx	r7
    a0c2:	1c43      	adds	r3, r0, #1
    a0c4:	d1c5      	bne.n	a052 <__sflush_r+0x32>
    a0c6:	682b      	ldr	r3, [r5, #0]
    a0c8:	2b00      	cmp	r3, #0
    a0ca:	d0c2      	beq.n	a052 <__sflush_r+0x32>
    a0cc:	2b1d      	cmp	r3, #29
    a0ce:	d001      	beq.n	a0d4 <__sflush_r+0xb4>
    a0d0:	2b16      	cmp	r3, #22
    a0d2:	d101      	bne.n	a0d8 <__sflush_r+0xb8>
    a0d4:	602e      	str	r6, [r5, #0]
    a0d6:	e7af      	b.n	a038 <__sflush_r+0x18>
    a0d8:	2340      	movs	r3, #64	; 0x40
    a0da:	89a2      	ldrh	r2, [r4, #12]
    a0dc:	4313      	orrs	r3, r2
    a0de:	81a3      	strh	r3, [r4, #12]
    a0e0:	e7ab      	b.n	a03a <__sflush_r+0x1a>
    a0e2:	2340      	movs	r3, #64	; 0x40
    a0e4:	430b      	orrs	r3, r1
    a0e6:	2001      	movs	r0, #1
    a0e8:	81a3      	strh	r3, [r4, #12]
    a0ea:	4240      	negs	r0, r0
    a0ec:	e7a5      	b.n	a03a <__sflush_r+0x1a>
    a0ee:	690f      	ldr	r7, [r1, #16]
    a0f0:	2f00      	cmp	r7, #0
    a0f2:	d0a1      	beq.n	a038 <__sflush_r+0x18>
    a0f4:	680b      	ldr	r3, [r1, #0]
    a0f6:	600f      	str	r7, [r1, #0]
    a0f8:	1bdb      	subs	r3, r3, r7
    a0fa:	9301      	str	r3, [sp, #4]
    a0fc:	2300      	movs	r3, #0
    a0fe:	0792      	lsls	r2, r2, #30
    a100:	d100      	bne.n	a104 <__sflush_r+0xe4>
    a102:	694b      	ldr	r3, [r1, #20]
    a104:	60a3      	str	r3, [r4, #8]
    a106:	9b01      	ldr	r3, [sp, #4]
    a108:	2b00      	cmp	r3, #0
    a10a:	dc00      	bgt.n	a10e <__sflush_r+0xee>
    a10c:	e794      	b.n	a038 <__sflush_r+0x18>
    a10e:	9b01      	ldr	r3, [sp, #4]
    a110:	003a      	movs	r2, r7
    a112:	6a21      	ldr	r1, [r4, #32]
    a114:	0028      	movs	r0, r5
    a116:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    a118:	47b0      	blx	r6
    a11a:	2800      	cmp	r0, #0
    a11c:	dc03      	bgt.n	a126 <__sflush_r+0x106>
    a11e:	2340      	movs	r3, #64	; 0x40
    a120:	89a2      	ldrh	r2, [r4, #12]
    a122:	4313      	orrs	r3, r2
    a124:	e7df      	b.n	a0e6 <__sflush_r+0xc6>
    a126:	9b01      	ldr	r3, [sp, #4]
    a128:	183f      	adds	r7, r7, r0
    a12a:	1a1b      	subs	r3, r3, r0
    a12c:	9301      	str	r3, [sp, #4]
    a12e:	e7ea      	b.n	a106 <__sflush_r+0xe6>
    a130:	20400001 	.word	0x20400001

0000a134 <_fflush_r>:
    a134:	690b      	ldr	r3, [r1, #16]
    a136:	b570      	push	{r4, r5, r6, lr}
    a138:	0005      	movs	r5, r0
    a13a:	000c      	movs	r4, r1
    a13c:	2b00      	cmp	r3, #0
    a13e:	d101      	bne.n	a144 <_fflush_r+0x10>
    a140:	2000      	movs	r0, #0
    a142:	bd70      	pop	{r4, r5, r6, pc}
    a144:	2800      	cmp	r0, #0
    a146:	d004      	beq.n	a152 <_fflush_r+0x1e>
    a148:	6983      	ldr	r3, [r0, #24]
    a14a:	2b00      	cmp	r3, #0
    a14c:	d101      	bne.n	a152 <_fflush_r+0x1e>
    a14e:	f000 f85f 	bl	a210 <__sinit>
    a152:	4b0b      	ldr	r3, [pc, #44]	; (a180 <_fflush_r+0x4c>)
    a154:	429c      	cmp	r4, r3
    a156:	d109      	bne.n	a16c <_fflush_r+0x38>
    a158:	686c      	ldr	r4, [r5, #4]
    a15a:	220c      	movs	r2, #12
    a15c:	5ea3      	ldrsh	r3, [r4, r2]
    a15e:	2b00      	cmp	r3, #0
    a160:	d0ee      	beq.n	a140 <_fflush_r+0xc>
    a162:	0021      	movs	r1, r4
    a164:	0028      	movs	r0, r5
    a166:	f7ff ff5b 	bl	a020 <__sflush_r>
    a16a:	e7ea      	b.n	a142 <_fflush_r+0xe>
    a16c:	4b05      	ldr	r3, [pc, #20]	; (a184 <_fflush_r+0x50>)
    a16e:	429c      	cmp	r4, r3
    a170:	d101      	bne.n	a176 <_fflush_r+0x42>
    a172:	68ac      	ldr	r4, [r5, #8]
    a174:	e7f1      	b.n	a15a <_fflush_r+0x26>
    a176:	4b04      	ldr	r3, [pc, #16]	; (a188 <_fflush_r+0x54>)
    a178:	429c      	cmp	r4, r3
    a17a:	d1ee      	bne.n	a15a <_fflush_r+0x26>
    a17c:	68ec      	ldr	r4, [r5, #12]
    a17e:	e7ec      	b.n	a15a <_fflush_r+0x26>
    a180:	0000c3b4 	.word	0x0000c3b4
    a184:	0000c3d4 	.word	0x0000c3d4
    a188:	0000c394 	.word	0x0000c394

0000a18c <_cleanup_r>:
    a18c:	b510      	push	{r4, lr}
    a18e:	4902      	ldr	r1, [pc, #8]	; (a198 <_cleanup_r+0xc>)
    a190:	f000 f8b2 	bl	a2f8 <_fwalk_reent>
    a194:	bd10      	pop	{r4, pc}
    a196:	46c0      	nop			; (mov r8, r8)
    a198:	0000a135 	.word	0x0000a135

0000a19c <std.isra.0>:
    a19c:	2300      	movs	r3, #0
    a19e:	b510      	push	{r4, lr}
    a1a0:	0004      	movs	r4, r0
    a1a2:	6003      	str	r3, [r0, #0]
    a1a4:	6043      	str	r3, [r0, #4]
    a1a6:	6083      	str	r3, [r0, #8]
    a1a8:	8181      	strh	r1, [r0, #12]
    a1aa:	6643      	str	r3, [r0, #100]	; 0x64
    a1ac:	81c2      	strh	r2, [r0, #14]
    a1ae:	6103      	str	r3, [r0, #16]
    a1b0:	6143      	str	r3, [r0, #20]
    a1b2:	6183      	str	r3, [r0, #24]
    a1b4:	0019      	movs	r1, r3
    a1b6:	2208      	movs	r2, #8
    a1b8:	305c      	adds	r0, #92	; 0x5c
    a1ba:	f7ff fc08 	bl	99ce <memset>
    a1be:	4b05      	ldr	r3, [pc, #20]	; (a1d4 <std.isra.0+0x38>)
    a1c0:	6224      	str	r4, [r4, #32]
    a1c2:	6263      	str	r3, [r4, #36]	; 0x24
    a1c4:	4b04      	ldr	r3, [pc, #16]	; (a1d8 <std.isra.0+0x3c>)
    a1c6:	62a3      	str	r3, [r4, #40]	; 0x28
    a1c8:	4b04      	ldr	r3, [pc, #16]	; (a1dc <std.isra.0+0x40>)
    a1ca:	62e3      	str	r3, [r4, #44]	; 0x2c
    a1cc:	4b04      	ldr	r3, [pc, #16]	; (a1e0 <std.isra.0+0x44>)
    a1ce:	6323      	str	r3, [r4, #48]	; 0x30
    a1d0:	bd10      	pop	{r4, pc}
    a1d2:	46c0      	nop			; (mov r8, r8)
    a1d4:	0000acdd 	.word	0x0000acdd
    a1d8:	0000ad05 	.word	0x0000ad05
    a1dc:	0000ad3d 	.word	0x0000ad3d
    a1e0:	0000ad69 	.word	0x0000ad69

0000a1e4 <__sfmoreglue>:
    a1e4:	b570      	push	{r4, r5, r6, lr}
    a1e6:	2568      	movs	r5, #104	; 0x68
    a1e8:	1e4a      	subs	r2, r1, #1
    a1ea:	4355      	muls	r5, r2
    a1ec:	000e      	movs	r6, r1
    a1ee:	0029      	movs	r1, r5
    a1f0:	3174      	adds	r1, #116	; 0x74
    a1f2:	f7ff fc3f 	bl	9a74 <_malloc_r>
    a1f6:	1e04      	subs	r4, r0, #0
    a1f8:	d008      	beq.n	a20c <__sfmoreglue+0x28>
    a1fa:	2100      	movs	r1, #0
    a1fc:	002a      	movs	r2, r5
    a1fe:	6001      	str	r1, [r0, #0]
    a200:	6046      	str	r6, [r0, #4]
    a202:	300c      	adds	r0, #12
    a204:	60a0      	str	r0, [r4, #8]
    a206:	3268      	adds	r2, #104	; 0x68
    a208:	f7ff fbe1 	bl	99ce <memset>
    a20c:	0020      	movs	r0, r4
    a20e:	bd70      	pop	{r4, r5, r6, pc}

0000a210 <__sinit>:
    a210:	6983      	ldr	r3, [r0, #24]
    a212:	b513      	push	{r0, r1, r4, lr}
    a214:	0004      	movs	r4, r0
    a216:	2b00      	cmp	r3, #0
    a218:	d128      	bne.n	a26c <__sinit+0x5c>
    a21a:	6483      	str	r3, [r0, #72]	; 0x48
    a21c:	64c3      	str	r3, [r0, #76]	; 0x4c
    a21e:	6503      	str	r3, [r0, #80]	; 0x50
    a220:	4b13      	ldr	r3, [pc, #76]	; (a270 <__sinit+0x60>)
    a222:	4a14      	ldr	r2, [pc, #80]	; (a274 <__sinit+0x64>)
    a224:	681b      	ldr	r3, [r3, #0]
    a226:	6282      	str	r2, [r0, #40]	; 0x28
    a228:	9301      	str	r3, [sp, #4]
    a22a:	4298      	cmp	r0, r3
    a22c:	d101      	bne.n	a232 <__sinit+0x22>
    a22e:	2301      	movs	r3, #1
    a230:	6183      	str	r3, [r0, #24]
    a232:	0020      	movs	r0, r4
    a234:	f000 f820 	bl	a278 <__sfp>
    a238:	6060      	str	r0, [r4, #4]
    a23a:	0020      	movs	r0, r4
    a23c:	f000 f81c 	bl	a278 <__sfp>
    a240:	60a0      	str	r0, [r4, #8]
    a242:	0020      	movs	r0, r4
    a244:	f000 f818 	bl	a278 <__sfp>
    a248:	2200      	movs	r2, #0
    a24a:	60e0      	str	r0, [r4, #12]
    a24c:	2104      	movs	r1, #4
    a24e:	6860      	ldr	r0, [r4, #4]
    a250:	f7ff ffa4 	bl	a19c <std.isra.0>
    a254:	2201      	movs	r2, #1
    a256:	2109      	movs	r1, #9
    a258:	68a0      	ldr	r0, [r4, #8]
    a25a:	f7ff ff9f 	bl	a19c <std.isra.0>
    a25e:	2202      	movs	r2, #2
    a260:	2112      	movs	r1, #18
    a262:	68e0      	ldr	r0, [r4, #12]
    a264:	f7ff ff9a 	bl	a19c <std.isra.0>
    a268:	2301      	movs	r3, #1
    a26a:	61a3      	str	r3, [r4, #24]
    a26c:	bd13      	pop	{r0, r1, r4, pc}
    a26e:	46c0      	nop			; (mov r8, r8)
    a270:	0000c390 	.word	0x0000c390
    a274:	0000a18d 	.word	0x0000a18d

0000a278 <__sfp>:
    a278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a27a:	4b1e      	ldr	r3, [pc, #120]	; (a2f4 <__sfp+0x7c>)
    a27c:	0007      	movs	r7, r0
    a27e:	681e      	ldr	r6, [r3, #0]
    a280:	69b3      	ldr	r3, [r6, #24]
    a282:	2b00      	cmp	r3, #0
    a284:	d102      	bne.n	a28c <__sfp+0x14>
    a286:	0030      	movs	r0, r6
    a288:	f7ff ffc2 	bl	a210 <__sinit>
    a28c:	3648      	adds	r6, #72	; 0x48
    a28e:	68b4      	ldr	r4, [r6, #8]
    a290:	6873      	ldr	r3, [r6, #4]
    a292:	3b01      	subs	r3, #1
    a294:	d504      	bpl.n	a2a0 <__sfp+0x28>
    a296:	6833      	ldr	r3, [r6, #0]
    a298:	2b00      	cmp	r3, #0
    a29a:	d007      	beq.n	a2ac <__sfp+0x34>
    a29c:	6836      	ldr	r6, [r6, #0]
    a29e:	e7f6      	b.n	a28e <__sfp+0x16>
    a2a0:	220c      	movs	r2, #12
    a2a2:	5ea5      	ldrsh	r5, [r4, r2]
    a2a4:	2d00      	cmp	r5, #0
    a2a6:	d00d      	beq.n	a2c4 <__sfp+0x4c>
    a2a8:	3468      	adds	r4, #104	; 0x68
    a2aa:	e7f2      	b.n	a292 <__sfp+0x1a>
    a2ac:	2104      	movs	r1, #4
    a2ae:	0038      	movs	r0, r7
    a2b0:	f7ff ff98 	bl	a1e4 <__sfmoreglue>
    a2b4:	6030      	str	r0, [r6, #0]
    a2b6:	2800      	cmp	r0, #0
    a2b8:	d1f0      	bne.n	a29c <__sfp+0x24>
    a2ba:	230c      	movs	r3, #12
    a2bc:	0004      	movs	r4, r0
    a2be:	603b      	str	r3, [r7, #0]
    a2c0:	0020      	movs	r0, r4
    a2c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a2c4:	2301      	movs	r3, #1
    a2c6:	0020      	movs	r0, r4
    a2c8:	425b      	negs	r3, r3
    a2ca:	81e3      	strh	r3, [r4, #14]
    a2cc:	3302      	adds	r3, #2
    a2ce:	81a3      	strh	r3, [r4, #12]
    a2d0:	6665      	str	r5, [r4, #100]	; 0x64
    a2d2:	6025      	str	r5, [r4, #0]
    a2d4:	60a5      	str	r5, [r4, #8]
    a2d6:	6065      	str	r5, [r4, #4]
    a2d8:	6125      	str	r5, [r4, #16]
    a2da:	6165      	str	r5, [r4, #20]
    a2dc:	61a5      	str	r5, [r4, #24]
    a2de:	2208      	movs	r2, #8
    a2e0:	0029      	movs	r1, r5
    a2e2:	305c      	adds	r0, #92	; 0x5c
    a2e4:	f7ff fb73 	bl	99ce <memset>
    a2e8:	6365      	str	r5, [r4, #52]	; 0x34
    a2ea:	63a5      	str	r5, [r4, #56]	; 0x38
    a2ec:	64a5      	str	r5, [r4, #72]	; 0x48
    a2ee:	64e5      	str	r5, [r4, #76]	; 0x4c
    a2f0:	e7e6      	b.n	a2c0 <__sfp+0x48>
    a2f2:	46c0      	nop			; (mov r8, r8)
    a2f4:	0000c390 	.word	0x0000c390

0000a2f8 <_fwalk_reent>:
    a2f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a2fa:	0004      	movs	r4, r0
    a2fc:	0007      	movs	r7, r0
    a2fe:	2600      	movs	r6, #0
    a300:	9101      	str	r1, [sp, #4]
    a302:	3448      	adds	r4, #72	; 0x48
    a304:	2c00      	cmp	r4, #0
    a306:	d101      	bne.n	a30c <_fwalk_reent+0x14>
    a308:	0030      	movs	r0, r6
    a30a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    a30c:	6863      	ldr	r3, [r4, #4]
    a30e:	68a5      	ldr	r5, [r4, #8]
    a310:	9300      	str	r3, [sp, #0]
    a312:	9b00      	ldr	r3, [sp, #0]
    a314:	3b01      	subs	r3, #1
    a316:	9300      	str	r3, [sp, #0]
    a318:	d501      	bpl.n	a31e <_fwalk_reent+0x26>
    a31a:	6824      	ldr	r4, [r4, #0]
    a31c:	e7f2      	b.n	a304 <_fwalk_reent+0xc>
    a31e:	89ab      	ldrh	r3, [r5, #12]
    a320:	2b01      	cmp	r3, #1
    a322:	d908      	bls.n	a336 <_fwalk_reent+0x3e>
    a324:	220e      	movs	r2, #14
    a326:	5eab      	ldrsh	r3, [r5, r2]
    a328:	3301      	adds	r3, #1
    a32a:	d004      	beq.n	a336 <_fwalk_reent+0x3e>
    a32c:	0029      	movs	r1, r5
    a32e:	0038      	movs	r0, r7
    a330:	9b01      	ldr	r3, [sp, #4]
    a332:	4798      	blx	r3
    a334:	4306      	orrs	r6, r0
    a336:	3568      	adds	r5, #104	; 0x68
    a338:	e7eb      	b.n	a312 <_fwalk_reent+0x1a>
	...

0000a33c <__swhatbuf_r>:
    a33c:	b570      	push	{r4, r5, r6, lr}
    a33e:	000e      	movs	r6, r1
    a340:	001d      	movs	r5, r3
    a342:	230e      	movs	r3, #14
    a344:	5ec9      	ldrsh	r1, [r1, r3]
    a346:	b090      	sub	sp, #64	; 0x40
    a348:	0014      	movs	r4, r2
    a34a:	2900      	cmp	r1, #0
    a34c:	da07      	bge.n	a35e <__swhatbuf_r+0x22>
    a34e:	2300      	movs	r3, #0
    a350:	602b      	str	r3, [r5, #0]
    a352:	89b3      	ldrh	r3, [r6, #12]
    a354:	061b      	lsls	r3, r3, #24
    a356:	d411      	bmi.n	a37c <__swhatbuf_r+0x40>
    a358:	2380      	movs	r3, #128	; 0x80
    a35a:	00db      	lsls	r3, r3, #3
    a35c:	e00f      	b.n	a37e <__swhatbuf_r+0x42>
    a35e:	aa01      	add	r2, sp, #4
    a360:	f000 fd2e 	bl	adc0 <_fstat_r>
    a364:	2800      	cmp	r0, #0
    a366:	dbf2      	blt.n	a34e <__swhatbuf_r+0x12>
    a368:	22f0      	movs	r2, #240	; 0xf0
    a36a:	9b02      	ldr	r3, [sp, #8]
    a36c:	0212      	lsls	r2, r2, #8
    a36e:	4013      	ands	r3, r2
    a370:	4a05      	ldr	r2, [pc, #20]	; (a388 <__swhatbuf_r+0x4c>)
    a372:	189b      	adds	r3, r3, r2
    a374:	425a      	negs	r2, r3
    a376:	4153      	adcs	r3, r2
    a378:	602b      	str	r3, [r5, #0]
    a37a:	e7ed      	b.n	a358 <__swhatbuf_r+0x1c>
    a37c:	2340      	movs	r3, #64	; 0x40
    a37e:	2000      	movs	r0, #0
    a380:	6023      	str	r3, [r4, #0]
    a382:	b010      	add	sp, #64	; 0x40
    a384:	bd70      	pop	{r4, r5, r6, pc}
    a386:	46c0      	nop			; (mov r8, r8)
    a388:	ffffe000 	.word	0xffffe000

0000a38c <__smakebuf_r>:
    a38c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a38e:	2602      	movs	r6, #2
    a390:	898b      	ldrh	r3, [r1, #12]
    a392:	0005      	movs	r5, r0
    a394:	000c      	movs	r4, r1
    a396:	4233      	tst	r3, r6
    a398:	d006      	beq.n	a3a8 <__smakebuf_r+0x1c>
    a39a:	0023      	movs	r3, r4
    a39c:	3347      	adds	r3, #71	; 0x47
    a39e:	6023      	str	r3, [r4, #0]
    a3a0:	6123      	str	r3, [r4, #16]
    a3a2:	2301      	movs	r3, #1
    a3a4:	6163      	str	r3, [r4, #20]
    a3a6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    a3a8:	ab01      	add	r3, sp, #4
    a3aa:	466a      	mov	r2, sp
    a3ac:	f7ff ffc6 	bl	a33c <__swhatbuf_r>
    a3b0:	9900      	ldr	r1, [sp, #0]
    a3b2:	0007      	movs	r7, r0
    a3b4:	0028      	movs	r0, r5
    a3b6:	f7ff fb5d 	bl	9a74 <_malloc_r>
    a3ba:	2800      	cmp	r0, #0
    a3bc:	d106      	bne.n	a3cc <__smakebuf_r+0x40>
    a3be:	220c      	movs	r2, #12
    a3c0:	5ea3      	ldrsh	r3, [r4, r2]
    a3c2:	059a      	lsls	r2, r3, #22
    a3c4:	d4ef      	bmi.n	a3a6 <__smakebuf_r+0x1a>
    a3c6:	431e      	orrs	r6, r3
    a3c8:	81a6      	strh	r6, [r4, #12]
    a3ca:	e7e6      	b.n	a39a <__smakebuf_r+0xe>
    a3cc:	4b0d      	ldr	r3, [pc, #52]	; (a404 <__smakebuf_r+0x78>)
    a3ce:	62ab      	str	r3, [r5, #40]	; 0x28
    a3d0:	2380      	movs	r3, #128	; 0x80
    a3d2:	89a2      	ldrh	r2, [r4, #12]
    a3d4:	6020      	str	r0, [r4, #0]
    a3d6:	4313      	orrs	r3, r2
    a3d8:	81a3      	strh	r3, [r4, #12]
    a3da:	9b00      	ldr	r3, [sp, #0]
    a3dc:	6120      	str	r0, [r4, #16]
    a3de:	6163      	str	r3, [r4, #20]
    a3e0:	9b01      	ldr	r3, [sp, #4]
    a3e2:	2b00      	cmp	r3, #0
    a3e4:	d00a      	beq.n	a3fc <__smakebuf_r+0x70>
    a3e6:	230e      	movs	r3, #14
    a3e8:	5ee1      	ldrsh	r1, [r4, r3]
    a3ea:	0028      	movs	r0, r5
    a3ec:	f000 fcfa 	bl	ade4 <_isatty_r>
    a3f0:	2800      	cmp	r0, #0
    a3f2:	d003      	beq.n	a3fc <__smakebuf_r+0x70>
    a3f4:	2301      	movs	r3, #1
    a3f6:	89a2      	ldrh	r2, [r4, #12]
    a3f8:	4313      	orrs	r3, r2
    a3fa:	81a3      	strh	r3, [r4, #12]
    a3fc:	89a0      	ldrh	r0, [r4, #12]
    a3fe:	4338      	orrs	r0, r7
    a400:	81a0      	strh	r0, [r4, #12]
    a402:	e7d0      	b.n	a3a6 <__smakebuf_r+0x1a>
    a404:	0000a18d 	.word	0x0000a18d

0000a408 <__malloc_lock>:
    a408:	4770      	bx	lr

0000a40a <__malloc_unlock>:
    a40a:	4770      	bx	lr

0000a40c <__ssputs_r>:
    a40c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a40e:	688e      	ldr	r6, [r1, #8]
    a410:	b085      	sub	sp, #20
    a412:	0007      	movs	r7, r0
    a414:	000c      	movs	r4, r1
    a416:	9203      	str	r2, [sp, #12]
    a418:	9301      	str	r3, [sp, #4]
    a41a:	429e      	cmp	r6, r3
    a41c:	d839      	bhi.n	a492 <__ssputs_r+0x86>
    a41e:	2390      	movs	r3, #144	; 0x90
    a420:	898a      	ldrh	r2, [r1, #12]
    a422:	00db      	lsls	r3, r3, #3
    a424:	421a      	tst	r2, r3
    a426:	d034      	beq.n	a492 <__ssputs_r+0x86>
    a428:	2503      	movs	r5, #3
    a42a:	6909      	ldr	r1, [r1, #16]
    a42c:	6823      	ldr	r3, [r4, #0]
    a42e:	1a5b      	subs	r3, r3, r1
    a430:	9302      	str	r3, [sp, #8]
    a432:	6963      	ldr	r3, [r4, #20]
    a434:	9802      	ldr	r0, [sp, #8]
    a436:	435d      	muls	r5, r3
    a438:	0feb      	lsrs	r3, r5, #31
    a43a:	195d      	adds	r5, r3, r5
    a43c:	9b01      	ldr	r3, [sp, #4]
    a43e:	106d      	asrs	r5, r5, #1
    a440:	3301      	adds	r3, #1
    a442:	181b      	adds	r3, r3, r0
    a444:	42ab      	cmp	r3, r5
    a446:	d900      	bls.n	a44a <__ssputs_r+0x3e>
    a448:	001d      	movs	r5, r3
    a44a:	0553      	lsls	r3, r2, #21
    a44c:	d532      	bpl.n	a4b4 <__ssputs_r+0xa8>
    a44e:	0029      	movs	r1, r5
    a450:	0038      	movs	r0, r7
    a452:	f7ff fb0f 	bl	9a74 <_malloc_r>
    a456:	1e06      	subs	r6, r0, #0
    a458:	d109      	bne.n	a46e <__ssputs_r+0x62>
    a45a:	230c      	movs	r3, #12
    a45c:	603b      	str	r3, [r7, #0]
    a45e:	2340      	movs	r3, #64	; 0x40
    a460:	2001      	movs	r0, #1
    a462:	89a2      	ldrh	r2, [r4, #12]
    a464:	4240      	negs	r0, r0
    a466:	4313      	orrs	r3, r2
    a468:	81a3      	strh	r3, [r4, #12]
    a46a:	b005      	add	sp, #20
    a46c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a46e:	9a02      	ldr	r2, [sp, #8]
    a470:	6921      	ldr	r1, [r4, #16]
    a472:	f7ff fa91 	bl	9998 <memcpy>
    a476:	89a3      	ldrh	r3, [r4, #12]
    a478:	4a14      	ldr	r2, [pc, #80]	; (a4cc <__ssputs_r+0xc0>)
    a47a:	401a      	ands	r2, r3
    a47c:	2380      	movs	r3, #128	; 0x80
    a47e:	4313      	orrs	r3, r2
    a480:	81a3      	strh	r3, [r4, #12]
    a482:	9b02      	ldr	r3, [sp, #8]
    a484:	6126      	str	r6, [r4, #16]
    a486:	18f6      	adds	r6, r6, r3
    a488:	6026      	str	r6, [r4, #0]
    a48a:	6165      	str	r5, [r4, #20]
    a48c:	9e01      	ldr	r6, [sp, #4]
    a48e:	1aed      	subs	r5, r5, r3
    a490:	60a5      	str	r5, [r4, #8]
    a492:	9b01      	ldr	r3, [sp, #4]
    a494:	42b3      	cmp	r3, r6
    a496:	d200      	bcs.n	a49a <__ssputs_r+0x8e>
    a498:	001e      	movs	r6, r3
    a49a:	0032      	movs	r2, r6
    a49c:	9903      	ldr	r1, [sp, #12]
    a49e:	6820      	ldr	r0, [r4, #0]
    a4a0:	f7ff fa83 	bl	99aa <memmove>
    a4a4:	68a3      	ldr	r3, [r4, #8]
    a4a6:	2000      	movs	r0, #0
    a4a8:	1b9b      	subs	r3, r3, r6
    a4aa:	60a3      	str	r3, [r4, #8]
    a4ac:	6823      	ldr	r3, [r4, #0]
    a4ae:	199e      	adds	r6, r3, r6
    a4b0:	6026      	str	r6, [r4, #0]
    a4b2:	e7da      	b.n	a46a <__ssputs_r+0x5e>
    a4b4:	002a      	movs	r2, r5
    a4b6:	0038      	movs	r0, r7
    a4b8:	f000 fcc5 	bl	ae46 <_realloc_r>
    a4bc:	1e06      	subs	r6, r0, #0
    a4be:	d1e0      	bne.n	a482 <__ssputs_r+0x76>
    a4c0:	6921      	ldr	r1, [r4, #16]
    a4c2:	0038      	movs	r0, r7
    a4c4:	f7ff fa8c 	bl	99e0 <_free_r>
    a4c8:	e7c7      	b.n	a45a <__ssputs_r+0x4e>
    a4ca:	46c0      	nop			; (mov r8, r8)
    a4cc:	fffffb7f 	.word	0xfffffb7f

0000a4d0 <_svfiprintf_r>:
    a4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a4d2:	b09f      	sub	sp, #124	; 0x7c
    a4d4:	9002      	str	r0, [sp, #8]
    a4d6:	9305      	str	r3, [sp, #20]
    a4d8:	898b      	ldrh	r3, [r1, #12]
    a4da:	000f      	movs	r7, r1
    a4dc:	0016      	movs	r6, r2
    a4de:	061b      	lsls	r3, r3, #24
    a4e0:	d511      	bpl.n	a506 <_svfiprintf_r+0x36>
    a4e2:	690b      	ldr	r3, [r1, #16]
    a4e4:	2b00      	cmp	r3, #0
    a4e6:	d10e      	bne.n	a506 <_svfiprintf_r+0x36>
    a4e8:	2140      	movs	r1, #64	; 0x40
    a4ea:	f7ff fac3 	bl	9a74 <_malloc_r>
    a4ee:	6038      	str	r0, [r7, #0]
    a4f0:	6138      	str	r0, [r7, #16]
    a4f2:	2800      	cmp	r0, #0
    a4f4:	d105      	bne.n	a502 <_svfiprintf_r+0x32>
    a4f6:	230c      	movs	r3, #12
    a4f8:	9a02      	ldr	r2, [sp, #8]
    a4fa:	3801      	subs	r0, #1
    a4fc:	6013      	str	r3, [r2, #0]
    a4fe:	b01f      	add	sp, #124	; 0x7c
    a500:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a502:	2340      	movs	r3, #64	; 0x40
    a504:	617b      	str	r3, [r7, #20]
    a506:	2300      	movs	r3, #0
    a508:	ad06      	add	r5, sp, #24
    a50a:	616b      	str	r3, [r5, #20]
    a50c:	3320      	adds	r3, #32
    a50e:	766b      	strb	r3, [r5, #25]
    a510:	3310      	adds	r3, #16
    a512:	76ab      	strb	r3, [r5, #26]
    a514:	0034      	movs	r4, r6
    a516:	7823      	ldrb	r3, [r4, #0]
    a518:	2b00      	cmp	r3, #0
    a51a:	d147      	bne.n	a5ac <_svfiprintf_r+0xdc>
    a51c:	1ba3      	subs	r3, r4, r6
    a51e:	9304      	str	r3, [sp, #16]
    a520:	d00d      	beq.n	a53e <_svfiprintf_r+0x6e>
    a522:	1ba3      	subs	r3, r4, r6
    a524:	0032      	movs	r2, r6
    a526:	0039      	movs	r1, r7
    a528:	9802      	ldr	r0, [sp, #8]
    a52a:	f7ff ff6f 	bl	a40c <__ssputs_r>
    a52e:	1c43      	adds	r3, r0, #1
    a530:	d100      	bne.n	a534 <_svfiprintf_r+0x64>
    a532:	e0b5      	b.n	a6a0 <_svfiprintf_r+0x1d0>
    a534:	696a      	ldr	r2, [r5, #20]
    a536:	9b04      	ldr	r3, [sp, #16]
    a538:	4694      	mov	ip, r2
    a53a:	4463      	add	r3, ip
    a53c:	616b      	str	r3, [r5, #20]
    a53e:	7823      	ldrb	r3, [r4, #0]
    a540:	2b00      	cmp	r3, #0
    a542:	d100      	bne.n	a546 <_svfiprintf_r+0x76>
    a544:	e0ac      	b.n	a6a0 <_svfiprintf_r+0x1d0>
    a546:	2201      	movs	r2, #1
    a548:	2300      	movs	r3, #0
    a54a:	4252      	negs	r2, r2
    a54c:	606a      	str	r2, [r5, #4]
    a54e:	a902      	add	r1, sp, #8
    a550:	3254      	adds	r2, #84	; 0x54
    a552:	1852      	adds	r2, r2, r1
    a554:	3401      	adds	r4, #1
    a556:	602b      	str	r3, [r5, #0]
    a558:	60eb      	str	r3, [r5, #12]
    a55a:	60ab      	str	r3, [r5, #8]
    a55c:	7013      	strb	r3, [r2, #0]
    a55e:	65ab      	str	r3, [r5, #88]	; 0x58
    a560:	4e58      	ldr	r6, [pc, #352]	; (a6c4 <_svfiprintf_r+0x1f4>)
    a562:	2205      	movs	r2, #5
    a564:	7821      	ldrb	r1, [r4, #0]
    a566:	0030      	movs	r0, r6
    a568:	f000 fc62 	bl	ae30 <memchr>
    a56c:	1c62      	adds	r2, r4, #1
    a56e:	2800      	cmp	r0, #0
    a570:	d120      	bne.n	a5b4 <_svfiprintf_r+0xe4>
    a572:	6829      	ldr	r1, [r5, #0]
    a574:	06cb      	lsls	r3, r1, #27
    a576:	d504      	bpl.n	a582 <_svfiprintf_r+0xb2>
    a578:	2353      	movs	r3, #83	; 0x53
    a57a:	ae02      	add	r6, sp, #8
    a57c:	3020      	adds	r0, #32
    a57e:	199b      	adds	r3, r3, r6
    a580:	7018      	strb	r0, [r3, #0]
    a582:	070b      	lsls	r3, r1, #28
    a584:	d504      	bpl.n	a590 <_svfiprintf_r+0xc0>
    a586:	2353      	movs	r3, #83	; 0x53
    a588:	202b      	movs	r0, #43	; 0x2b
    a58a:	ae02      	add	r6, sp, #8
    a58c:	199b      	adds	r3, r3, r6
    a58e:	7018      	strb	r0, [r3, #0]
    a590:	7823      	ldrb	r3, [r4, #0]
    a592:	2b2a      	cmp	r3, #42	; 0x2a
    a594:	d016      	beq.n	a5c4 <_svfiprintf_r+0xf4>
    a596:	2000      	movs	r0, #0
    a598:	210a      	movs	r1, #10
    a59a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a59c:	7822      	ldrb	r2, [r4, #0]
    a59e:	3a30      	subs	r2, #48	; 0x30
    a5a0:	2a09      	cmp	r2, #9
    a5a2:	d955      	bls.n	a650 <_svfiprintf_r+0x180>
    a5a4:	2800      	cmp	r0, #0
    a5a6:	d015      	beq.n	a5d4 <_svfiprintf_r+0x104>
    a5a8:	9309      	str	r3, [sp, #36]	; 0x24
    a5aa:	e013      	b.n	a5d4 <_svfiprintf_r+0x104>
    a5ac:	2b25      	cmp	r3, #37	; 0x25
    a5ae:	d0b5      	beq.n	a51c <_svfiprintf_r+0x4c>
    a5b0:	3401      	adds	r4, #1
    a5b2:	e7b0      	b.n	a516 <_svfiprintf_r+0x46>
    a5b4:	2301      	movs	r3, #1
    a5b6:	1b80      	subs	r0, r0, r6
    a5b8:	4083      	lsls	r3, r0
    a5ba:	6829      	ldr	r1, [r5, #0]
    a5bc:	0014      	movs	r4, r2
    a5be:	430b      	orrs	r3, r1
    a5c0:	602b      	str	r3, [r5, #0]
    a5c2:	e7cd      	b.n	a560 <_svfiprintf_r+0x90>
    a5c4:	9b05      	ldr	r3, [sp, #20]
    a5c6:	1d18      	adds	r0, r3, #4
    a5c8:	681b      	ldr	r3, [r3, #0]
    a5ca:	9005      	str	r0, [sp, #20]
    a5cc:	2b00      	cmp	r3, #0
    a5ce:	db39      	blt.n	a644 <_svfiprintf_r+0x174>
    a5d0:	9309      	str	r3, [sp, #36]	; 0x24
    a5d2:	0014      	movs	r4, r2
    a5d4:	7823      	ldrb	r3, [r4, #0]
    a5d6:	2b2e      	cmp	r3, #46	; 0x2e
    a5d8:	d10b      	bne.n	a5f2 <_svfiprintf_r+0x122>
    a5da:	7863      	ldrb	r3, [r4, #1]
    a5dc:	1c62      	adds	r2, r4, #1
    a5de:	2b2a      	cmp	r3, #42	; 0x2a
    a5e0:	d13e      	bne.n	a660 <_svfiprintf_r+0x190>
    a5e2:	9b05      	ldr	r3, [sp, #20]
    a5e4:	3402      	adds	r4, #2
    a5e6:	1d1a      	adds	r2, r3, #4
    a5e8:	681b      	ldr	r3, [r3, #0]
    a5ea:	9205      	str	r2, [sp, #20]
    a5ec:	2b00      	cmp	r3, #0
    a5ee:	db34      	blt.n	a65a <_svfiprintf_r+0x18a>
    a5f0:	9307      	str	r3, [sp, #28]
    a5f2:	4e35      	ldr	r6, [pc, #212]	; (a6c8 <_svfiprintf_r+0x1f8>)
    a5f4:	7821      	ldrb	r1, [r4, #0]
    a5f6:	2203      	movs	r2, #3
    a5f8:	0030      	movs	r0, r6
    a5fa:	f000 fc19 	bl	ae30 <memchr>
    a5fe:	2800      	cmp	r0, #0
    a600:	d006      	beq.n	a610 <_svfiprintf_r+0x140>
    a602:	2340      	movs	r3, #64	; 0x40
    a604:	1b80      	subs	r0, r0, r6
    a606:	4083      	lsls	r3, r0
    a608:	682a      	ldr	r2, [r5, #0]
    a60a:	3401      	adds	r4, #1
    a60c:	4313      	orrs	r3, r2
    a60e:	602b      	str	r3, [r5, #0]
    a610:	7821      	ldrb	r1, [r4, #0]
    a612:	2206      	movs	r2, #6
    a614:	482d      	ldr	r0, [pc, #180]	; (a6cc <_svfiprintf_r+0x1fc>)
    a616:	1c66      	adds	r6, r4, #1
    a618:	7629      	strb	r1, [r5, #24]
    a61a:	f000 fc09 	bl	ae30 <memchr>
    a61e:	2800      	cmp	r0, #0
    a620:	d046      	beq.n	a6b0 <_svfiprintf_r+0x1e0>
    a622:	4b2b      	ldr	r3, [pc, #172]	; (a6d0 <_svfiprintf_r+0x200>)
    a624:	2b00      	cmp	r3, #0
    a626:	d12f      	bne.n	a688 <_svfiprintf_r+0x1b8>
    a628:	6829      	ldr	r1, [r5, #0]
    a62a:	9b05      	ldr	r3, [sp, #20]
    a62c:	2207      	movs	r2, #7
    a62e:	05c9      	lsls	r1, r1, #23
    a630:	d528      	bpl.n	a684 <_svfiprintf_r+0x1b4>
    a632:	189b      	adds	r3, r3, r2
    a634:	4393      	bics	r3, r2
    a636:	3308      	adds	r3, #8
    a638:	9305      	str	r3, [sp, #20]
    a63a:	696b      	ldr	r3, [r5, #20]
    a63c:	9a03      	ldr	r2, [sp, #12]
    a63e:	189b      	adds	r3, r3, r2
    a640:	616b      	str	r3, [r5, #20]
    a642:	e767      	b.n	a514 <_svfiprintf_r+0x44>
    a644:	425b      	negs	r3, r3
    a646:	60eb      	str	r3, [r5, #12]
    a648:	2302      	movs	r3, #2
    a64a:	430b      	orrs	r3, r1
    a64c:	602b      	str	r3, [r5, #0]
    a64e:	e7c0      	b.n	a5d2 <_svfiprintf_r+0x102>
    a650:	434b      	muls	r3, r1
    a652:	3401      	adds	r4, #1
    a654:	189b      	adds	r3, r3, r2
    a656:	2001      	movs	r0, #1
    a658:	e7a0      	b.n	a59c <_svfiprintf_r+0xcc>
    a65a:	2301      	movs	r3, #1
    a65c:	425b      	negs	r3, r3
    a65e:	e7c7      	b.n	a5f0 <_svfiprintf_r+0x120>
    a660:	2300      	movs	r3, #0
    a662:	0014      	movs	r4, r2
    a664:	200a      	movs	r0, #10
    a666:	001a      	movs	r2, r3
    a668:	606b      	str	r3, [r5, #4]
    a66a:	7821      	ldrb	r1, [r4, #0]
    a66c:	3930      	subs	r1, #48	; 0x30
    a66e:	2909      	cmp	r1, #9
    a670:	d903      	bls.n	a67a <_svfiprintf_r+0x1aa>
    a672:	2b00      	cmp	r3, #0
    a674:	d0bd      	beq.n	a5f2 <_svfiprintf_r+0x122>
    a676:	9207      	str	r2, [sp, #28]
    a678:	e7bb      	b.n	a5f2 <_svfiprintf_r+0x122>
    a67a:	4342      	muls	r2, r0
    a67c:	3401      	adds	r4, #1
    a67e:	1852      	adds	r2, r2, r1
    a680:	2301      	movs	r3, #1
    a682:	e7f2      	b.n	a66a <_svfiprintf_r+0x19a>
    a684:	3307      	adds	r3, #7
    a686:	e7d5      	b.n	a634 <_svfiprintf_r+0x164>
    a688:	ab05      	add	r3, sp, #20
    a68a:	9300      	str	r3, [sp, #0]
    a68c:	003a      	movs	r2, r7
    a68e:	4b11      	ldr	r3, [pc, #68]	; (a6d4 <_svfiprintf_r+0x204>)
    a690:	0029      	movs	r1, r5
    a692:	9802      	ldr	r0, [sp, #8]
    a694:	e000      	b.n	a698 <_svfiprintf_r+0x1c8>
    a696:	bf00      	nop
    a698:	9003      	str	r0, [sp, #12]
    a69a:	9b03      	ldr	r3, [sp, #12]
    a69c:	3301      	adds	r3, #1
    a69e:	d1cc      	bne.n	a63a <_svfiprintf_r+0x16a>
    a6a0:	89bb      	ldrh	r3, [r7, #12]
    a6a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a6a4:	065b      	lsls	r3, r3, #25
    a6a6:	d400      	bmi.n	a6aa <_svfiprintf_r+0x1da>
    a6a8:	e729      	b.n	a4fe <_svfiprintf_r+0x2e>
    a6aa:	2001      	movs	r0, #1
    a6ac:	4240      	negs	r0, r0
    a6ae:	e726      	b.n	a4fe <_svfiprintf_r+0x2e>
    a6b0:	ab05      	add	r3, sp, #20
    a6b2:	9300      	str	r3, [sp, #0]
    a6b4:	003a      	movs	r2, r7
    a6b6:	4b07      	ldr	r3, [pc, #28]	; (a6d4 <_svfiprintf_r+0x204>)
    a6b8:	0029      	movs	r1, r5
    a6ba:	9802      	ldr	r0, [sp, #8]
    a6bc:	f000 f9be 	bl	aa3c <_printf_i>
    a6c0:	e7ea      	b.n	a698 <_svfiprintf_r+0x1c8>
    a6c2:	46c0      	nop			; (mov r8, r8)
    a6c4:	0000c3f4 	.word	0x0000c3f4
    a6c8:	0000c3fa 	.word	0x0000c3fa
    a6cc:	0000c3fe 	.word	0x0000c3fe
    a6d0:	00000000 	.word	0x00000000
    a6d4:	0000a40d 	.word	0x0000a40d

0000a6d8 <__sfputc_r>:
    a6d8:	6893      	ldr	r3, [r2, #8]
    a6da:	b510      	push	{r4, lr}
    a6dc:	3b01      	subs	r3, #1
    a6de:	6093      	str	r3, [r2, #8]
    a6e0:	2b00      	cmp	r3, #0
    a6e2:	da05      	bge.n	a6f0 <__sfputc_r+0x18>
    a6e4:	6994      	ldr	r4, [r2, #24]
    a6e6:	42a3      	cmp	r3, r4
    a6e8:	db08      	blt.n	a6fc <__sfputc_r+0x24>
    a6ea:	b2cb      	uxtb	r3, r1
    a6ec:	2b0a      	cmp	r3, #10
    a6ee:	d005      	beq.n	a6fc <__sfputc_r+0x24>
    a6f0:	6813      	ldr	r3, [r2, #0]
    a6f2:	1c58      	adds	r0, r3, #1
    a6f4:	6010      	str	r0, [r2, #0]
    a6f6:	7019      	strb	r1, [r3, #0]
    a6f8:	b2c8      	uxtb	r0, r1
    a6fa:	bd10      	pop	{r4, pc}
    a6fc:	f7ff fbc4 	bl	9e88 <__swbuf_r>
    a700:	e7fb      	b.n	a6fa <__sfputc_r+0x22>

0000a702 <__sfputs_r>:
    a702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a704:	0006      	movs	r6, r0
    a706:	000f      	movs	r7, r1
    a708:	0014      	movs	r4, r2
    a70a:	18d5      	adds	r5, r2, r3
    a70c:	42ac      	cmp	r4, r5
    a70e:	d101      	bne.n	a714 <__sfputs_r+0x12>
    a710:	2000      	movs	r0, #0
    a712:	e007      	b.n	a724 <__sfputs_r+0x22>
    a714:	7821      	ldrb	r1, [r4, #0]
    a716:	003a      	movs	r2, r7
    a718:	0030      	movs	r0, r6
    a71a:	f7ff ffdd 	bl	a6d8 <__sfputc_r>
    a71e:	3401      	adds	r4, #1
    a720:	1c43      	adds	r3, r0, #1
    a722:	d1f3      	bne.n	a70c <__sfputs_r+0xa>
    a724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000a728 <_vfiprintf_r>:
    a728:	b5f0      	push	{r4, r5, r6, r7, lr}
    a72a:	b09f      	sub	sp, #124	; 0x7c
    a72c:	0006      	movs	r6, r0
    a72e:	000f      	movs	r7, r1
    a730:	0014      	movs	r4, r2
    a732:	9305      	str	r3, [sp, #20]
    a734:	2800      	cmp	r0, #0
    a736:	d004      	beq.n	a742 <_vfiprintf_r+0x1a>
    a738:	6983      	ldr	r3, [r0, #24]
    a73a:	2b00      	cmp	r3, #0
    a73c:	d101      	bne.n	a742 <_vfiprintf_r+0x1a>
    a73e:	f7ff fd67 	bl	a210 <__sinit>
    a742:	4b7f      	ldr	r3, [pc, #508]	; (a940 <_vfiprintf_r+0x218>)
    a744:	429f      	cmp	r7, r3
    a746:	d15c      	bne.n	a802 <_vfiprintf_r+0xda>
    a748:	6877      	ldr	r7, [r6, #4]
    a74a:	89bb      	ldrh	r3, [r7, #12]
    a74c:	071b      	lsls	r3, r3, #28
    a74e:	d562      	bpl.n	a816 <_vfiprintf_r+0xee>
    a750:	693b      	ldr	r3, [r7, #16]
    a752:	2b00      	cmp	r3, #0
    a754:	d05f      	beq.n	a816 <_vfiprintf_r+0xee>
    a756:	2300      	movs	r3, #0
    a758:	ad06      	add	r5, sp, #24
    a75a:	616b      	str	r3, [r5, #20]
    a75c:	3320      	adds	r3, #32
    a75e:	766b      	strb	r3, [r5, #25]
    a760:	3310      	adds	r3, #16
    a762:	76ab      	strb	r3, [r5, #26]
    a764:	9402      	str	r4, [sp, #8]
    a766:	9c02      	ldr	r4, [sp, #8]
    a768:	7823      	ldrb	r3, [r4, #0]
    a76a:	2b00      	cmp	r3, #0
    a76c:	d15d      	bne.n	a82a <_vfiprintf_r+0x102>
    a76e:	9b02      	ldr	r3, [sp, #8]
    a770:	1ae3      	subs	r3, r4, r3
    a772:	9304      	str	r3, [sp, #16]
    a774:	d00d      	beq.n	a792 <_vfiprintf_r+0x6a>
    a776:	9b04      	ldr	r3, [sp, #16]
    a778:	9a02      	ldr	r2, [sp, #8]
    a77a:	0039      	movs	r1, r7
    a77c:	0030      	movs	r0, r6
    a77e:	f7ff ffc0 	bl	a702 <__sfputs_r>
    a782:	1c43      	adds	r3, r0, #1
    a784:	d100      	bne.n	a788 <_vfiprintf_r+0x60>
    a786:	e0cc      	b.n	a922 <_vfiprintf_r+0x1fa>
    a788:	696a      	ldr	r2, [r5, #20]
    a78a:	9b04      	ldr	r3, [sp, #16]
    a78c:	4694      	mov	ip, r2
    a78e:	4463      	add	r3, ip
    a790:	616b      	str	r3, [r5, #20]
    a792:	7823      	ldrb	r3, [r4, #0]
    a794:	2b00      	cmp	r3, #0
    a796:	d100      	bne.n	a79a <_vfiprintf_r+0x72>
    a798:	e0c3      	b.n	a922 <_vfiprintf_r+0x1fa>
    a79a:	2201      	movs	r2, #1
    a79c:	2300      	movs	r3, #0
    a79e:	4252      	negs	r2, r2
    a7a0:	606a      	str	r2, [r5, #4]
    a7a2:	a902      	add	r1, sp, #8
    a7a4:	3254      	adds	r2, #84	; 0x54
    a7a6:	1852      	adds	r2, r2, r1
    a7a8:	3401      	adds	r4, #1
    a7aa:	602b      	str	r3, [r5, #0]
    a7ac:	60eb      	str	r3, [r5, #12]
    a7ae:	60ab      	str	r3, [r5, #8]
    a7b0:	7013      	strb	r3, [r2, #0]
    a7b2:	65ab      	str	r3, [r5, #88]	; 0x58
    a7b4:	7821      	ldrb	r1, [r4, #0]
    a7b6:	2205      	movs	r2, #5
    a7b8:	4862      	ldr	r0, [pc, #392]	; (a944 <_vfiprintf_r+0x21c>)
    a7ba:	f000 fb39 	bl	ae30 <memchr>
    a7be:	1c63      	adds	r3, r4, #1
    a7c0:	469c      	mov	ip, r3
    a7c2:	2800      	cmp	r0, #0
    a7c4:	d135      	bne.n	a832 <_vfiprintf_r+0x10a>
    a7c6:	6829      	ldr	r1, [r5, #0]
    a7c8:	06cb      	lsls	r3, r1, #27
    a7ca:	d504      	bpl.n	a7d6 <_vfiprintf_r+0xae>
    a7cc:	2353      	movs	r3, #83	; 0x53
    a7ce:	aa02      	add	r2, sp, #8
    a7d0:	3020      	adds	r0, #32
    a7d2:	189b      	adds	r3, r3, r2
    a7d4:	7018      	strb	r0, [r3, #0]
    a7d6:	070b      	lsls	r3, r1, #28
    a7d8:	d504      	bpl.n	a7e4 <_vfiprintf_r+0xbc>
    a7da:	2353      	movs	r3, #83	; 0x53
    a7dc:	202b      	movs	r0, #43	; 0x2b
    a7de:	aa02      	add	r2, sp, #8
    a7e0:	189b      	adds	r3, r3, r2
    a7e2:	7018      	strb	r0, [r3, #0]
    a7e4:	7823      	ldrb	r3, [r4, #0]
    a7e6:	2b2a      	cmp	r3, #42	; 0x2a
    a7e8:	d02c      	beq.n	a844 <_vfiprintf_r+0x11c>
    a7ea:	2000      	movs	r0, #0
    a7ec:	210a      	movs	r1, #10
    a7ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a7f0:	7822      	ldrb	r2, [r4, #0]
    a7f2:	3a30      	subs	r2, #48	; 0x30
    a7f4:	2a09      	cmp	r2, #9
    a7f6:	d800      	bhi.n	a7fa <_vfiprintf_r+0xd2>
    a7f8:	e06b      	b.n	a8d2 <_vfiprintf_r+0x1aa>
    a7fa:	2800      	cmp	r0, #0
    a7fc:	d02a      	beq.n	a854 <_vfiprintf_r+0x12c>
    a7fe:	9309      	str	r3, [sp, #36]	; 0x24
    a800:	e028      	b.n	a854 <_vfiprintf_r+0x12c>
    a802:	4b51      	ldr	r3, [pc, #324]	; (a948 <_vfiprintf_r+0x220>)
    a804:	429f      	cmp	r7, r3
    a806:	d101      	bne.n	a80c <_vfiprintf_r+0xe4>
    a808:	68b7      	ldr	r7, [r6, #8]
    a80a:	e79e      	b.n	a74a <_vfiprintf_r+0x22>
    a80c:	4b4f      	ldr	r3, [pc, #316]	; (a94c <_vfiprintf_r+0x224>)
    a80e:	429f      	cmp	r7, r3
    a810:	d19b      	bne.n	a74a <_vfiprintf_r+0x22>
    a812:	68f7      	ldr	r7, [r6, #12]
    a814:	e799      	b.n	a74a <_vfiprintf_r+0x22>
    a816:	0039      	movs	r1, r7
    a818:	0030      	movs	r0, r6
    a81a:	f7ff fb8b 	bl	9f34 <__swsetup_r>
    a81e:	2800      	cmp	r0, #0
    a820:	d099      	beq.n	a756 <_vfiprintf_r+0x2e>
    a822:	2001      	movs	r0, #1
    a824:	4240      	negs	r0, r0
    a826:	b01f      	add	sp, #124	; 0x7c
    a828:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a82a:	2b25      	cmp	r3, #37	; 0x25
    a82c:	d09f      	beq.n	a76e <_vfiprintf_r+0x46>
    a82e:	3401      	adds	r4, #1
    a830:	e79a      	b.n	a768 <_vfiprintf_r+0x40>
    a832:	4b44      	ldr	r3, [pc, #272]	; (a944 <_vfiprintf_r+0x21c>)
    a834:	6829      	ldr	r1, [r5, #0]
    a836:	1ac0      	subs	r0, r0, r3
    a838:	2301      	movs	r3, #1
    a83a:	4083      	lsls	r3, r0
    a83c:	430b      	orrs	r3, r1
    a83e:	602b      	str	r3, [r5, #0]
    a840:	4664      	mov	r4, ip
    a842:	e7b7      	b.n	a7b4 <_vfiprintf_r+0x8c>
    a844:	9b05      	ldr	r3, [sp, #20]
    a846:	1d18      	adds	r0, r3, #4
    a848:	681b      	ldr	r3, [r3, #0]
    a84a:	9005      	str	r0, [sp, #20]
    a84c:	2b00      	cmp	r3, #0
    a84e:	db3a      	blt.n	a8c6 <_vfiprintf_r+0x19e>
    a850:	9309      	str	r3, [sp, #36]	; 0x24
    a852:	4664      	mov	r4, ip
    a854:	7823      	ldrb	r3, [r4, #0]
    a856:	2b2e      	cmp	r3, #46	; 0x2e
    a858:	d10b      	bne.n	a872 <_vfiprintf_r+0x14a>
    a85a:	7863      	ldrb	r3, [r4, #1]
    a85c:	1c62      	adds	r2, r4, #1
    a85e:	2b2a      	cmp	r3, #42	; 0x2a
    a860:	d13f      	bne.n	a8e2 <_vfiprintf_r+0x1ba>
    a862:	9b05      	ldr	r3, [sp, #20]
    a864:	3402      	adds	r4, #2
    a866:	1d1a      	adds	r2, r3, #4
    a868:	681b      	ldr	r3, [r3, #0]
    a86a:	9205      	str	r2, [sp, #20]
    a86c:	2b00      	cmp	r3, #0
    a86e:	db35      	blt.n	a8dc <_vfiprintf_r+0x1b4>
    a870:	9307      	str	r3, [sp, #28]
    a872:	7821      	ldrb	r1, [r4, #0]
    a874:	2203      	movs	r2, #3
    a876:	4836      	ldr	r0, [pc, #216]	; (a950 <_vfiprintf_r+0x228>)
    a878:	f000 fada 	bl	ae30 <memchr>
    a87c:	2800      	cmp	r0, #0
    a87e:	d007      	beq.n	a890 <_vfiprintf_r+0x168>
    a880:	4b33      	ldr	r3, [pc, #204]	; (a950 <_vfiprintf_r+0x228>)
    a882:	682a      	ldr	r2, [r5, #0]
    a884:	1ac0      	subs	r0, r0, r3
    a886:	2340      	movs	r3, #64	; 0x40
    a888:	4083      	lsls	r3, r0
    a88a:	4313      	orrs	r3, r2
    a88c:	602b      	str	r3, [r5, #0]
    a88e:	3401      	adds	r4, #1
    a890:	7821      	ldrb	r1, [r4, #0]
    a892:	1c63      	adds	r3, r4, #1
    a894:	2206      	movs	r2, #6
    a896:	482f      	ldr	r0, [pc, #188]	; (a954 <_vfiprintf_r+0x22c>)
    a898:	9302      	str	r3, [sp, #8]
    a89a:	7629      	strb	r1, [r5, #24]
    a89c:	f000 fac8 	bl	ae30 <memchr>
    a8a0:	2800      	cmp	r0, #0
    a8a2:	d044      	beq.n	a92e <_vfiprintf_r+0x206>
    a8a4:	4b2c      	ldr	r3, [pc, #176]	; (a958 <_vfiprintf_r+0x230>)
    a8a6:	2b00      	cmp	r3, #0
    a8a8:	d12f      	bne.n	a90a <_vfiprintf_r+0x1e2>
    a8aa:	6829      	ldr	r1, [r5, #0]
    a8ac:	9b05      	ldr	r3, [sp, #20]
    a8ae:	2207      	movs	r2, #7
    a8b0:	05c9      	lsls	r1, r1, #23
    a8b2:	d528      	bpl.n	a906 <_vfiprintf_r+0x1de>
    a8b4:	189b      	adds	r3, r3, r2
    a8b6:	4393      	bics	r3, r2
    a8b8:	3308      	adds	r3, #8
    a8ba:	9305      	str	r3, [sp, #20]
    a8bc:	696b      	ldr	r3, [r5, #20]
    a8be:	9a03      	ldr	r2, [sp, #12]
    a8c0:	189b      	adds	r3, r3, r2
    a8c2:	616b      	str	r3, [r5, #20]
    a8c4:	e74f      	b.n	a766 <_vfiprintf_r+0x3e>
    a8c6:	425b      	negs	r3, r3
    a8c8:	60eb      	str	r3, [r5, #12]
    a8ca:	2302      	movs	r3, #2
    a8cc:	430b      	orrs	r3, r1
    a8ce:	602b      	str	r3, [r5, #0]
    a8d0:	e7bf      	b.n	a852 <_vfiprintf_r+0x12a>
    a8d2:	434b      	muls	r3, r1
    a8d4:	3401      	adds	r4, #1
    a8d6:	189b      	adds	r3, r3, r2
    a8d8:	2001      	movs	r0, #1
    a8da:	e789      	b.n	a7f0 <_vfiprintf_r+0xc8>
    a8dc:	2301      	movs	r3, #1
    a8de:	425b      	negs	r3, r3
    a8e0:	e7c6      	b.n	a870 <_vfiprintf_r+0x148>
    a8e2:	2300      	movs	r3, #0
    a8e4:	0014      	movs	r4, r2
    a8e6:	200a      	movs	r0, #10
    a8e8:	001a      	movs	r2, r3
    a8ea:	606b      	str	r3, [r5, #4]
    a8ec:	7821      	ldrb	r1, [r4, #0]
    a8ee:	3930      	subs	r1, #48	; 0x30
    a8f0:	2909      	cmp	r1, #9
    a8f2:	d903      	bls.n	a8fc <_vfiprintf_r+0x1d4>
    a8f4:	2b00      	cmp	r3, #0
    a8f6:	d0bc      	beq.n	a872 <_vfiprintf_r+0x14a>
    a8f8:	9207      	str	r2, [sp, #28]
    a8fa:	e7ba      	b.n	a872 <_vfiprintf_r+0x14a>
    a8fc:	4342      	muls	r2, r0
    a8fe:	3401      	adds	r4, #1
    a900:	1852      	adds	r2, r2, r1
    a902:	2301      	movs	r3, #1
    a904:	e7f2      	b.n	a8ec <_vfiprintf_r+0x1c4>
    a906:	3307      	adds	r3, #7
    a908:	e7d5      	b.n	a8b6 <_vfiprintf_r+0x18e>
    a90a:	ab05      	add	r3, sp, #20
    a90c:	9300      	str	r3, [sp, #0]
    a90e:	003a      	movs	r2, r7
    a910:	4b12      	ldr	r3, [pc, #72]	; (a95c <_vfiprintf_r+0x234>)
    a912:	0029      	movs	r1, r5
    a914:	0030      	movs	r0, r6
    a916:	e000      	b.n	a91a <_vfiprintf_r+0x1f2>
    a918:	bf00      	nop
    a91a:	9003      	str	r0, [sp, #12]
    a91c:	9b03      	ldr	r3, [sp, #12]
    a91e:	3301      	adds	r3, #1
    a920:	d1cc      	bne.n	a8bc <_vfiprintf_r+0x194>
    a922:	89bb      	ldrh	r3, [r7, #12]
    a924:	065b      	lsls	r3, r3, #25
    a926:	d500      	bpl.n	a92a <_vfiprintf_r+0x202>
    a928:	e77b      	b.n	a822 <_vfiprintf_r+0xfa>
    a92a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a92c:	e77b      	b.n	a826 <_vfiprintf_r+0xfe>
    a92e:	ab05      	add	r3, sp, #20
    a930:	9300      	str	r3, [sp, #0]
    a932:	003a      	movs	r2, r7
    a934:	4b09      	ldr	r3, [pc, #36]	; (a95c <_vfiprintf_r+0x234>)
    a936:	0029      	movs	r1, r5
    a938:	0030      	movs	r0, r6
    a93a:	f000 f87f 	bl	aa3c <_printf_i>
    a93e:	e7ec      	b.n	a91a <_vfiprintf_r+0x1f2>
    a940:	0000c3b4 	.word	0x0000c3b4
    a944:	0000c3f4 	.word	0x0000c3f4
    a948:	0000c3d4 	.word	0x0000c3d4
    a94c:	0000c394 	.word	0x0000c394
    a950:	0000c3fa 	.word	0x0000c3fa
    a954:	0000c3fe 	.word	0x0000c3fe
    a958:	00000000 	.word	0x00000000
    a95c:	0000a703 	.word	0x0000a703

0000a960 <_printf_common>:
    a960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a962:	0015      	movs	r5, r2
    a964:	9301      	str	r3, [sp, #4]
    a966:	688a      	ldr	r2, [r1, #8]
    a968:	690b      	ldr	r3, [r1, #16]
    a96a:	9000      	str	r0, [sp, #0]
    a96c:	000c      	movs	r4, r1
    a96e:	4293      	cmp	r3, r2
    a970:	da00      	bge.n	a974 <_printf_common+0x14>
    a972:	0013      	movs	r3, r2
    a974:	0022      	movs	r2, r4
    a976:	602b      	str	r3, [r5, #0]
    a978:	3243      	adds	r2, #67	; 0x43
    a97a:	7812      	ldrb	r2, [r2, #0]
    a97c:	2a00      	cmp	r2, #0
    a97e:	d001      	beq.n	a984 <_printf_common+0x24>
    a980:	3301      	adds	r3, #1
    a982:	602b      	str	r3, [r5, #0]
    a984:	6823      	ldr	r3, [r4, #0]
    a986:	069b      	lsls	r3, r3, #26
    a988:	d502      	bpl.n	a990 <_printf_common+0x30>
    a98a:	682b      	ldr	r3, [r5, #0]
    a98c:	3302      	adds	r3, #2
    a98e:	602b      	str	r3, [r5, #0]
    a990:	2706      	movs	r7, #6
    a992:	6823      	ldr	r3, [r4, #0]
    a994:	401f      	ands	r7, r3
    a996:	d027      	beq.n	a9e8 <_printf_common+0x88>
    a998:	0023      	movs	r3, r4
    a99a:	3343      	adds	r3, #67	; 0x43
    a99c:	781b      	ldrb	r3, [r3, #0]
    a99e:	1e5a      	subs	r2, r3, #1
    a9a0:	4193      	sbcs	r3, r2
    a9a2:	6822      	ldr	r2, [r4, #0]
    a9a4:	0692      	lsls	r2, r2, #26
    a9a6:	d430      	bmi.n	aa0a <_printf_common+0xaa>
    a9a8:	0022      	movs	r2, r4
    a9aa:	9901      	ldr	r1, [sp, #4]
    a9ac:	3243      	adds	r2, #67	; 0x43
    a9ae:	9800      	ldr	r0, [sp, #0]
    a9b0:	9e08      	ldr	r6, [sp, #32]
    a9b2:	47b0      	blx	r6
    a9b4:	1c43      	adds	r3, r0, #1
    a9b6:	d025      	beq.n	aa04 <_printf_common+0xa4>
    a9b8:	2306      	movs	r3, #6
    a9ba:	6820      	ldr	r0, [r4, #0]
    a9bc:	682a      	ldr	r2, [r5, #0]
    a9be:	68e1      	ldr	r1, [r4, #12]
    a9c0:	4003      	ands	r3, r0
    a9c2:	2500      	movs	r5, #0
    a9c4:	2b04      	cmp	r3, #4
    a9c6:	d103      	bne.n	a9d0 <_printf_common+0x70>
    a9c8:	1a8d      	subs	r5, r1, r2
    a9ca:	43eb      	mvns	r3, r5
    a9cc:	17db      	asrs	r3, r3, #31
    a9ce:	401d      	ands	r5, r3
    a9d0:	68a3      	ldr	r3, [r4, #8]
    a9d2:	6922      	ldr	r2, [r4, #16]
    a9d4:	4293      	cmp	r3, r2
    a9d6:	dd01      	ble.n	a9dc <_printf_common+0x7c>
    a9d8:	1a9b      	subs	r3, r3, r2
    a9da:	18ed      	adds	r5, r5, r3
    a9dc:	2700      	movs	r7, #0
    a9de:	42bd      	cmp	r5, r7
    a9e0:	d120      	bne.n	aa24 <_printf_common+0xc4>
    a9e2:	2000      	movs	r0, #0
    a9e4:	e010      	b.n	aa08 <_printf_common+0xa8>
    a9e6:	3701      	adds	r7, #1
    a9e8:	68e3      	ldr	r3, [r4, #12]
    a9ea:	682a      	ldr	r2, [r5, #0]
    a9ec:	1a9b      	subs	r3, r3, r2
    a9ee:	429f      	cmp	r7, r3
    a9f0:	dad2      	bge.n	a998 <_printf_common+0x38>
    a9f2:	0022      	movs	r2, r4
    a9f4:	2301      	movs	r3, #1
    a9f6:	3219      	adds	r2, #25
    a9f8:	9901      	ldr	r1, [sp, #4]
    a9fa:	9800      	ldr	r0, [sp, #0]
    a9fc:	9e08      	ldr	r6, [sp, #32]
    a9fe:	47b0      	blx	r6
    aa00:	1c43      	adds	r3, r0, #1
    aa02:	d1f0      	bne.n	a9e6 <_printf_common+0x86>
    aa04:	2001      	movs	r0, #1
    aa06:	4240      	negs	r0, r0
    aa08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    aa0a:	2030      	movs	r0, #48	; 0x30
    aa0c:	18e1      	adds	r1, r4, r3
    aa0e:	3143      	adds	r1, #67	; 0x43
    aa10:	7008      	strb	r0, [r1, #0]
    aa12:	0021      	movs	r1, r4
    aa14:	1c5a      	adds	r2, r3, #1
    aa16:	3145      	adds	r1, #69	; 0x45
    aa18:	7809      	ldrb	r1, [r1, #0]
    aa1a:	18a2      	adds	r2, r4, r2
    aa1c:	3243      	adds	r2, #67	; 0x43
    aa1e:	3302      	adds	r3, #2
    aa20:	7011      	strb	r1, [r2, #0]
    aa22:	e7c1      	b.n	a9a8 <_printf_common+0x48>
    aa24:	0022      	movs	r2, r4
    aa26:	2301      	movs	r3, #1
    aa28:	321a      	adds	r2, #26
    aa2a:	9901      	ldr	r1, [sp, #4]
    aa2c:	9800      	ldr	r0, [sp, #0]
    aa2e:	9e08      	ldr	r6, [sp, #32]
    aa30:	47b0      	blx	r6
    aa32:	1c43      	adds	r3, r0, #1
    aa34:	d0e6      	beq.n	aa04 <_printf_common+0xa4>
    aa36:	3701      	adds	r7, #1
    aa38:	e7d1      	b.n	a9de <_printf_common+0x7e>
	...

0000aa3c <_printf_i>:
    aa3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    aa3e:	b08b      	sub	sp, #44	; 0x2c
    aa40:	9206      	str	r2, [sp, #24]
    aa42:	000a      	movs	r2, r1
    aa44:	3243      	adds	r2, #67	; 0x43
    aa46:	9307      	str	r3, [sp, #28]
    aa48:	9005      	str	r0, [sp, #20]
    aa4a:	9204      	str	r2, [sp, #16]
    aa4c:	7e0a      	ldrb	r2, [r1, #24]
    aa4e:	000c      	movs	r4, r1
    aa50:	9b10      	ldr	r3, [sp, #64]	; 0x40
    aa52:	2a6e      	cmp	r2, #110	; 0x6e
    aa54:	d100      	bne.n	aa58 <_printf_i+0x1c>
    aa56:	e08f      	b.n	ab78 <_printf_i+0x13c>
    aa58:	d817      	bhi.n	aa8a <_printf_i+0x4e>
    aa5a:	2a63      	cmp	r2, #99	; 0x63
    aa5c:	d02c      	beq.n	aab8 <_printf_i+0x7c>
    aa5e:	d808      	bhi.n	aa72 <_printf_i+0x36>
    aa60:	2a00      	cmp	r2, #0
    aa62:	d100      	bne.n	aa66 <_printf_i+0x2a>
    aa64:	e099      	b.n	ab9a <_printf_i+0x15e>
    aa66:	2a58      	cmp	r2, #88	; 0x58
    aa68:	d054      	beq.n	ab14 <_printf_i+0xd8>
    aa6a:	0026      	movs	r6, r4
    aa6c:	3642      	adds	r6, #66	; 0x42
    aa6e:	7032      	strb	r2, [r6, #0]
    aa70:	e029      	b.n	aac6 <_printf_i+0x8a>
    aa72:	2a64      	cmp	r2, #100	; 0x64
    aa74:	d001      	beq.n	aa7a <_printf_i+0x3e>
    aa76:	2a69      	cmp	r2, #105	; 0x69
    aa78:	d1f7      	bne.n	aa6a <_printf_i+0x2e>
    aa7a:	6821      	ldr	r1, [r4, #0]
    aa7c:	681a      	ldr	r2, [r3, #0]
    aa7e:	0608      	lsls	r0, r1, #24
    aa80:	d523      	bpl.n	aaca <_printf_i+0x8e>
    aa82:	1d11      	adds	r1, r2, #4
    aa84:	6019      	str	r1, [r3, #0]
    aa86:	6815      	ldr	r5, [r2, #0]
    aa88:	e025      	b.n	aad6 <_printf_i+0x9a>
    aa8a:	2a73      	cmp	r2, #115	; 0x73
    aa8c:	d100      	bne.n	aa90 <_printf_i+0x54>
    aa8e:	e088      	b.n	aba2 <_printf_i+0x166>
    aa90:	d808      	bhi.n	aaa4 <_printf_i+0x68>
    aa92:	2a6f      	cmp	r2, #111	; 0x6f
    aa94:	d029      	beq.n	aaea <_printf_i+0xae>
    aa96:	2a70      	cmp	r2, #112	; 0x70
    aa98:	d1e7      	bne.n	aa6a <_printf_i+0x2e>
    aa9a:	2220      	movs	r2, #32
    aa9c:	6809      	ldr	r1, [r1, #0]
    aa9e:	430a      	orrs	r2, r1
    aaa0:	6022      	str	r2, [r4, #0]
    aaa2:	e003      	b.n	aaac <_printf_i+0x70>
    aaa4:	2a75      	cmp	r2, #117	; 0x75
    aaa6:	d020      	beq.n	aaea <_printf_i+0xae>
    aaa8:	2a78      	cmp	r2, #120	; 0x78
    aaaa:	d1de      	bne.n	aa6a <_printf_i+0x2e>
    aaac:	0022      	movs	r2, r4
    aaae:	2178      	movs	r1, #120	; 0x78
    aab0:	3245      	adds	r2, #69	; 0x45
    aab2:	7011      	strb	r1, [r2, #0]
    aab4:	4a6c      	ldr	r2, [pc, #432]	; (ac68 <_printf_i+0x22c>)
    aab6:	e030      	b.n	ab1a <_printf_i+0xde>
    aab8:	000e      	movs	r6, r1
    aaba:	681a      	ldr	r2, [r3, #0]
    aabc:	3642      	adds	r6, #66	; 0x42
    aabe:	1d11      	adds	r1, r2, #4
    aac0:	6019      	str	r1, [r3, #0]
    aac2:	6813      	ldr	r3, [r2, #0]
    aac4:	7033      	strb	r3, [r6, #0]
    aac6:	2301      	movs	r3, #1
    aac8:	e079      	b.n	abbe <_printf_i+0x182>
    aaca:	0649      	lsls	r1, r1, #25
    aacc:	d5d9      	bpl.n	aa82 <_printf_i+0x46>
    aace:	1d11      	adds	r1, r2, #4
    aad0:	6019      	str	r1, [r3, #0]
    aad2:	2300      	movs	r3, #0
    aad4:	5ed5      	ldrsh	r5, [r2, r3]
    aad6:	2d00      	cmp	r5, #0
    aad8:	da03      	bge.n	aae2 <_printf_i+0xa6>
    aada:	232d      	movs	r3, #45	; 0x2d
    aadc:	9a04      	ldr	r2, [sp, #16]
    aade:	426d      	negs	r5, r5
    aae0:	7013      	strb	r3, [r2, #0]
    aae2:	4b62      	ldr	r3, [pc, #392]	; (ac6c <_printf_i+0x230>)
    aae4:	270a      	movs	r7, #10
    aae6:	9303      	str	r3, [sp, #12]
    aae8:	e02f      	b.n	ab4a <_printf_i+0x10e>
    aaea:	6820      	ldr	r0, [r4, #0]
    aaec:	6819      	ldr	r1, [r3, #0]
    aaee:	0605      	lsls	r5, r0, #24
    aaf0:	d503      	bpl.n	aafa <_printf_i+0xbe>
    aaf2:	1d08      	adds	r0, r1, #4
    aaf4:	6018      	str	r0, [r3, #0]
    aaf6:	680d      	ldr	r5, [r1, #0]
    aaf8:	e005      	b.n	ab06 <_printf_i+0xca>
    aafa:	0640      	lsls	r0, r0, #25
    aafc:	d5f9      	bpl.n	aaf2 <_printf_i+0xb6>
    aafe:	680d      	ldr	r5, [r1, #0]
    ab00:	1d08      	adds	r0, r1, #4
    ab02:	6018      	str	r0, [r3, #0]
    ab04:	b2ad      	uxth	r5, r5
    ab06:	4b59      	ldr	r3, [pc, #356]	; (ac6c <_printf_i+0x230>)
    ab08:	2708      	movs	r7, #8
    ab0a:	9303      	str	r3, [sp, #12]
    ab0c:	2a6f      	cmp	r2, #111	; 0x6f
    ab0e:	d018      	beq.n	ab42 <_printf_i+0x106>
    ab10:	270a      	movs	r7, #10
    ab12:	e016      	b.n	ab42 <_printf_i+0x106>
    ab14:	3145      	adds	r1, #69	; 0x45
    ab16:	700a      	strb	r2, [r1, #0]
    ab18:	4a54      	ldr	r2, [pc, #336]	; (ac6c <_printf_i+0x230>)
    ab1a:	9203      	str	r2, [sp, #12]
    ab1c:	681a      	ldr	r2, [r3, #0]
    ab1e:	6821      	ldr	r1, [r4, #0]
    ab20:	1d10      	adds	r0, r2, #4
    ab22:	6018      	str	r0, [r3, #0]
    ab24:	6815      	ldr	r5, [r2, #0]
    ab26:	0608      	lsls	r0, r1, #24
    ab28:	d522      	bpl.n	ab70 <_printf_i+0x134>
    ab2a:	07cb      	lsls	r3, r1, #31
    ab2c:	d502      	bpl.n	ab34 <_printf_i+0xf8>
    ab2e:	2320      	movs	r3, #32
    ab30:	4319      	orrs	r1, r3
    ab32:	6021      	str	r1, [r4, #0]
    ab34:	2710      	movs	r7, #16
    ab36:	2d00      	cmp	r5, #0
    ab38:	d103      	bne.n	ab42 <_printf_i+0x106>
    ab3a:	2320      	movs	r3, #32
    ab3c:	6822      	ldr	r2, [r4, #0]
    ab3e:	439a      	bics	r2, r3
    ab40:	6022      	str	r2, [r4, #0]
    ab42:	0023      	movs	r3, r4
    ab44:	2200      	movs	r2, #0
    ab46:	3343      	adds	r3, #67	; 0x43
    ab48:	701a      	strb	r2, [r3, #0]
    ab4a:	6863      	ldr	r3, [r4, #4]
    ab4c:	60a3      	str	r3, [r4, #8]
    ab4e:	2b00      	cmp	r3, #0
    ab50:	db5c      	blt.n	ac0c <_printf_i+0x1d0>
    ab52:	2204      	movs	r2, #4
    ab54:	6821      	ldr	r1, [r4, #0]
    ab56:	4391      	bics	r1, r2
    ab58:	6021      	str	r1, [r4, #0]
    ab5a:	2d00      	cmp	r5, #0
    ab5c:	d158      	bne.n	ac10 <_printf_i+0x1d4>
    ab5e:	9e04      	ldr	r6, [sp, #16]
    ab60:	2b00      	cmp	r3, #0
    ab62:	d064      	beq.n	ac2e <_printf_i+0x1f2>
    ab64:	0026      	movs	r6, r4
    ab66:	9b03      	ldr	r3, [sp, #12]
    ab68:	3642      	adds	r6, #66	; 0x42
    ab6a:	781b      	ldrb	r3, [r3, #0]
    ab6c:	7033      	strb	r3, [r6, #0]
    ab6e:	e05e      	b.n	ac2e <_printf_i+0x1f2>
    ab70:	0648      	lsls	r0, r1, #25
    ab72:	d5da      	bpl.n	ab2a <_printf_i+0xee>
    ab74:	b2ad      	uxth	r5, r5
    ab76:	e7d8      	b.n	ab2a <_printf_i+0xee>
    ab78:	6809      	ldr	r1, [r1, #0]
    ab7a:	681a      	ldr	r2, [r3, #0]
    ab7c:	0608      	lsls	r0, r1, #24
    ab7e:	d505      	bpl.n	ab8c <_printf_i+0x150>
    ab80:	1d11      	adds	r1, r2, #4
    ab82:	6019      	str	r1, [r3, #0]
    ab84:	6813      	ldr	r3, [r2, #0]
    ab86:	6962      	ldr	r2, [r4, #20]
    ab88:	601a      	str	r2, [r3, #0]
    ab8a:	e006      	b.n	ab9a <_printf_i+0x15e>
    ab8c:	0649      	lsls	r1, r1, #25
    ab8e:	d5f7      	bpl.n	ab80 <_printf_i+0x144>
    ab90:	1d11      	adds	r1, r2, #4
    ab92:	6019      	str	r1, [r3, #0]
    ab94:	6813      	ldr	r3, [r2, #0]
    ab96:	8aa2      	ldrh	r2, [r4, #20]
    ab98:	801a      	strh	r2, [r3, #0]
    ab9a:	2300      	movs	r3, #0
    ab9c:	9e04      	ldr	r6, [sp, #16]
    ab9e:	6123      	str	r3, [r4, #16]
    aba0:	e054      	b.n	ac4c <_printf_i+0x210>
    aba2:	681a      	ldr	r2, [r3, #0]
    aba4:	1d11      	adds	r1, r2, #4
    aba6:	6019      	str	r1, [r3, #0]
    aba8:	6816      	ldr	r6, [r2, #0]
    abaa:	2100      	movs	r1, #0
    abac:	6862      	ldr	r2, [r4, #4]
    abae:	0030      	movs	r0, r6
    abb0:	f000 f93e 	bl	ae30 <memchr>
    abb4:	2800      	cmp	r0, #0
    abb6:	d001      	beq.n	abbc <_printf_i+0x180>
    abb8:	1b80      	subs	r0, r0, r6
    abba:	6060      	str	r0, [r4, #4]
    abbc:	6863      	ldr	r3, [r4, #4]
    abbe:	6123      	str	r3, [r4, #16]
    abc0:	2300      	movs	r3, #0
    abc2:	9a04      	ldr	r2, [sp, #16]
    abc4:	7013      	strb	r3, [r2, #0]
    abc6:	e041      	b.n	ac4c <_printf_i+0x210>
    abc8:	6923      	ldr	r3, [r4, #16]
    abca:	0032      	movs	r2, r6
    abcc:	9906      	ldr	r1, [sp, #24]
    abce:	9805      	ldr	r0, [sp, #20]
    abd0:	9d07      	ldr	r5, [sp, #28]
    abd2:	47a8      	blx	r5
    abd4:	1c43      	adds	r3, r0, #1
    abd6:	d043      	beq.n	ac60 <_printf_i+0x224>
    abd8:	6823      	ldr	r3, [r4, #0]
    abda:	2500      	movs	r5, #0
    abdc:	079b      	lsls	r3, r3, #30
    abde:	d40f      	bmi.n	ac00 <_printf_i+0x1c4>
    abe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    abe2:	68e0      	ldr	r0, [r4, #12]
    abe4:	4298      	cmp	r0, r3
    abe6:	da3d      	bge.n	ac64 <_printf_i+0x228>
    abe8:	0018      	movs	r0, r3
    abea:	e03b      	b.n	ac64 <_printf_i+0x228>
    abec:	0022      	movs	r2, r4
    abee:	2301      	movs	r3, #1
    abf0:	3219      	adds	r2, #25
    abf2:	9906      	ldr	r1, [sp, #24]
    abf4:	9805      	ldr	r0, [sp, #20]
    abf6:	9e07      	ldr	r6, [sp, #28]
    abf8:	47b0      	blx	r6
    abfa:	1c43      	adds	r3, r0, #1
    abfc:	d030      	beq.n	ac60 <_printf_i+0x224>
    abfe:	3501      	adds	r5, #1
    ac00:	68e3      	ldr	r3, [r4, #12]
    ac02:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ac04:	1a9b      	subs	r3, r3, r2
    ac06:	429d      	cmp	r5, r3
    ac08:	dbf0      	blt.n	abec <_printf_i+0x1b0>
    ac0a:	e7e9      	b.n	abe0 <_printf_i+0x1a4>
    ac0c:	2d00      	cmp	r5, #0
    ac0e:	d0a9      	beq.n	ab64 <_printf_i+0x128>
    ac10:	9e04      	ldr	r6, [sp, #16]
    ac12:	0028      	movs	r0, r5
    ac14:	0039      	movs	r1, r7
    ac16:	f7fc ff29 	bl	7a6c <__aeabi_uidivmod>
    ac1a:	9b03      	ldr	r3, [sp, #12]
    ac1c:	3e01      	subs	r6, #1
    ac1e:	5c5b      	ldrb	r3, [r3, r1]
    ac20:	0028      	movs	r0, r5
    ac22:	7033      	strb	r3, [r6, #0]
    ac24:	0039      	movs	r1, r7
    ac26:	f7fc fe9b 	bl	7960 <__udivsi3>
    ac2a:	1e05      	subs	r5, r0, #0
    ac2c:	d1f1      	bne.n	ac12 <_printf_i+0x1d6>
    ac2e:	2f08      	cmp	r7, #8
    ac30:	d109      	bne.n	ac46 <_printf_i+0x20a>
    ac32:	6823      	ldr	r3, [r4, #0]
    ac34:	07db      	lsls	r3, r3, #31
    ac36:	d506      	bpl.n	ac46 <_printf_i+0x20a>
    ac38:	6863      	ldr	r3, [r4, #4]
    ac3a:	6922      	ldr	r2, [r4, #16]
    ac3c:	4293      	cmp	r3, r2
    ac3e:	dc02      	bgt.n	ac46 <_printf_i+0x20a>
    ac40:	2330      	movs	r3, #48	; 0x30
    ac42:	3e01      	subs	r6, #1
    ac44:	7033      	strb	r3, [r6, #0]
    ac46:	9b04      	ldr	r3, [sp, #16]
    ac48:	1b9b      	subs	r3, r3, r6
    ac4a:	6123      	str	r3, [r4, #16]
    ac4c:	9b07      	ldr	r3, [sp, #28]
    ac4e:	aa09      	add	r2, sp, #36	; 0x24
    ac50:	9300      	str	r3, [sp, #0]
    ac52:	0021      	movs	r1, r4
    ac54:	9b06      	ldr	r3, [sp, #24]
    ac56:	9805      	ldr	r0, [sp, #20]
    ac58:	f7ff fe82 	bl	a960 <_printf_common>
    ac5c:	1c43      	adds	r3, r0, #1
    ac5e:	d1b3      	bne.n	abc8 <_printf_i+0x18c>
    ac60:	2001      	movs	r0, #1
    ac62:	4240      	negs	r0, r0
    ac64:	b00b      	add	sp, #44	; 0x2c
    ac66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ac68:	0000c416 	.word	0x0000c416
    ac6c:	0000c405 	.word	0x0000c405

0000ac70 <_putc_r>:
    ac70:	b570      	push	{r4, r5, r6, lr}
    ac72:	0006      	movs	r6, r0
    ac74:	000d      	movs	r5, r1
    ac76:	0014      	movs	r4, r2
    ac78:	2800      	cmp	r0, #0
    ac7a:	d004      	beq.n	ac86 <_putc_r+0x16>
    ac7c:	6983      	ldr	r3, [r0, #24]
    ac7e:	2b00      	cmp	r3, #0
    ac80:	d101      	bne.n	ac86 <_putc_r+0x16>
    ac82:	f7ff fac5 	bl	a210 <__sinit>
    ac86:	4b12      	ldr	r3, [pc, #72]	; (acd0 <_putc_r+0x60>)
    ac88:	429c      	cmp	r4, r3
    ac8a:	d111      	bne.n	acb0 <_putc_r+0x40>
    ac8c:	6874      	ldr	r4, [r6, #4]
    ac8e:	68a3      	ldr	r3, [r4, #8]
    ac90:	3b01      	subs	r3, #1
    ac92:	60a3      	str	r3, [r4, #8]
    ac94:	2b00      	cmp	r3, #0
    ac96:	da05      	bge.n	aca4 <_putc_r+0x34>
    ac98:	69a2      	ldr	r2, [r4, #24]
    ac9a:	4293      	cmp	r3, r2
    ac9c:	db12      	blt.n	acc4 <_putc_r+0x54>
    ac9e:	b2eb      	uxtb	r3, r5
    aca0:	2b0a      	cmp	r3, #10
    aca2:	d00f      	beq.n	acc4 <_putc_r+0x54>
    aca4:	6823      	ldr	r3, [r4, #0]
    aca6:	b2e8      	uxtb	r0, r5
    aca8:	1c5a      	adds	r2, r3, #1
    acaa:	6022      	str	r2, [r4, #0]
    acac:	701d      	strb	r5, [r3, #0]
    acae:	bd70      	pop	{r4, r5, r6, pc}
    acb0:	4b08      	ldr	r3, [pc, #32]	; (acd4 <_putc_r+0x64>)
    acb2:	429c      	cmp	r4, r3
    acb4:	d101      	bne.n	acba <_putc_r+0x4a>
    acb6:	68b4      	ldr	r4, [r6, #8]
    acb8:	e7e9      	b.n	ac8e <_putc_r+0x1e>
    acba:	4b07      	ldr	r3, [pc, #28]	; (acd8 <_putc_r+0x68>)
    acbc:	429c      	cmp	r4, r3
    acbe:	d1e6      	bne.n	ac8e <_putc_r+0x1e>
    acc0:	68f4      	ldr	r4, [r6, #12]
    acc2:	e7e4      	b.n	ac8e <_putc_r+0x1e>
    acc4:	0022      	movs	r2, r4
    acc6:	0029      	movs	r1, r5
    acc8:	0030      	movs	r0, r6
    acca:	f7ff f8dd 	bl	9e88 <__swbuf_r>
    acce:	e7ee      	b.n	acae <_putc_r+0x3e>
    acd0:	0000c3b4 	.word	0x0000c3b4
    acd4:	0000c3d4 	.word	0x0000c3d4
    acd8:	0000c394 	.word	0x0000c394

0000acdc <__sread>:
    acdc:	b570      	push	{r4, r5, r6, lr}
    acde:	000c      	movs	r4, r1
    ace0:	250e      	movs	r5, #14
    ace2:	5f49      	ldrsh	r1, [r1, r5]
    ace4:	f000 f8d6 	bl	ae94 <_read_r>
    ace8:	2800      	cmp	r0, #0
    acea:	db03      	blt.n	acf4 <__sread+0x18>
    acec:	6d63      	ldr	r3, [r4, #84]	; 0x54
    acee:	181b      	adds	r3, r3, r0
    acf0:	6563      	str	r3, [r4, #84]	; 0x54
    acf2:	bd70      	pop	{r4, r5, r6, pc}
    acf4:	89a3      	ldrh	r3, [r4, #12]
    acf6:	4a02      	ldr	r2, [pc, #8]	; (ad00 <__sread+0x24>)
    acf8:	4013      	ands	r3, r2
    acfa:	81a3      	strh	r3, [r4, #12]
    acfc:	e7f9      	b.n	acf2 <__sread+0x16>
    acfe:	46c0      	nop			; (mov r8, r8)
    ad00:	ffffefff 	.word	0xffffefff

0000ad04 <__swrite>:
    ad04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ad06:	001f      	movs	r7, r3
    ad08:	898b      	ldrh	r3, [r1, #12]
    ad0a:	0005      	movs	r5, r0
    ad0c:	000c      	movs	r4, r1
    ad0e:	0016      	movs	r6, r2
    ad10:	05db      	lsls	r3, r3, #23
    ad12:	d505      	bpl.n	ad20 <__swrite+0x1c>
    ad14:	230e      	movs	r3, #14
    ad16:	5ec9      	ldrsh	r1, [r1, r3]
    ad18:	2200      	movs	r2, #0
    ad1a:	2302      	movs	r3, #2
    ad1c:	f000 f874 	bl	ae08 <_lseek_r>
    ad20:	89a3      	ldrh	r3, [r4, #12]
    ad22:	4a05      	ldr	r2, [pc, #20]	; (ad38 <__swrite+0x34>)
    ad24:	0028      	movs	r0, r5
    ad26:	4013      	ands	r3, r2
    ad28:	81a3      	strh	r3, [r4, #12]
    ad2a:	0032      	movs	r2, r6
    ad2c:	230e      	movs	r3, #14
    ad2e:	5ee1      	ldrsh	r1, [r4, r3]
    ad30:	003b      	movs	r3, r7
    ad32:	f000 f81f 	bl	ad74 <_write_r>
    ad36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ad38:	ffffefff 	.word	0xffffefff

0000ad3c <__sseek>:
    ad3c:	b570      	push	{r4, r5, r6, lr}
    ad3e:	000c      	movs	r4, r1
    ad40:	250e      	movs	r5, #14
    ad42:	5f49      	ldrsh	r1, [r1, r5]
    ad44:	f000 f860 	bl	ae08 <_lseek_r>
    ad48:	89a3      	ldrh	r3, [r4, #12]
    ad4a:	1c42      	adds	r2, r0, #1
    ad4c:	d103      	bne.n	ad56 <__sseek+0x1a>
    ad4e:	4a05      	ldr	r2, [pc, #20]	; (ad64 <__sseek+0x28>)
    ad50:	4013      	ands	r3, r2
    ad52:	81a3      	strh	r3, [r4, #12]
    ad54:	bd70      	pop	{r4, r5, r6, pc}
    ad56:	2280      	movs	r2, #128	; 0x80
    ad58:	0152      	lsls	r2, r2, #5
    ad5a:	4313      	orrs	r3, r2
    ad5c:	81a3      	strh	r3, [r4, #12]
    ad5e:	6560      	str	r0, [r4, #84]	; 0x54
    ad60:	e7f8      	b.n	ad54 <__sseek+0x18>
    ad62:	46c0      	nop			; (mov r8, r8)
    ad64:	ffffefff 	.word	0xffffefff

0000ad68 <__sclose>:
    ad68:	b510      	push	{r4, lr}
    ad6a:	230e      	movs	r3, #14
    ad6c:	5ec9      	ldrsh	r1, [r1, r3]
    ad6e:	f000 f815 	bl	ad9c <_close_r>
    ad72:	bd10      	pop	{r4, pc}

0000ad74 <_write_r>:
    ad74:	b570      	push	{r4, r5, r6, lr}
    ad76:	0005      	movs	r5, r0
    ad78:	0008      	movs	r0, r1
    ad7a:	0011      	movs	r1, r2
    ad7c:	2200      	movs	r2, #0
    ad7e:	4c06      	ldr	r4, [pc, #24]	; (ad98 <_write_r+0x24>)
    ad80:	6022      	str	r2, [r4, #0]
    ad82:	001a      	movs	r2, r3
    ad84:	f7fb fa96 	bl	62b4 <_write>
    ad88:	1c43      	adds	r3, r0, #1
    ad8a:	d103      	bne.n	ad94 <_write_r+0x20>
    ad8c:	6823      	ldr	r3, [r4, #0]
    ad8e:	2b00      	cmp	r3, #0
    ad90:	d000      	beq.n	ad94 <_write_r+0x20>
    ad92:	602b      	str	r3, [r5, #0]
    ad94:	bd70      	pop	{r4, r5, r6, pc}
    ad96:	46c0      	nop			; (mov r8, r8)
    ad98:	200004d4 	.word	0x200004d4

0000ad9c <_close_r>:
    ad9c:	2300      	movs	r3, #0
    ad9e:	b570      	push	{r4, r5, r6, lr}
    ada0:	4c06      	ldr	r4, [pc, #24]	; (adbc <_close_r+0x20>)
    ada2:	0005      	movs	r5, r0
    ada4:	0008      	movs	r0, r1
    ada6:	6023      	str	r3, [r4, #0]
    ada8:	f7fb fabe 	bl	6328 <_close>
    adac:	1c43      	adds	r3, r0, #1
    adae:	d103      	bne.n	adb8 <_close_r+0x1c>
    adb0:	6823      	ldr	r3, [r4, #0]
    adb2:	2b00      	cmp	r3, #0
    adb4:	d000      	beq.n	adb8 <_close_r+0x1c>
    adb6:	602b      	str	r3, [r5, #0]
    adb8:	bd70      	pop	{r4, r5, r6, pc}
    adba:	46c0      	nop			; (mov r8, r8)
    adbc:	200004d4 	.word	0x200004d4

0000adc0 <_fstat_r>:
    adc0:	2300      	movs	r3, #0
    adc2:	b570      	push	{r4, r5, r6, lr}
    adc4:	4c06      	ldr	r4, [pc, #24]	; (ade0 <_fstat_r+0x20>)
    adc6:	0005      	movs	r5, r0
    adc8:	0008      	movs	r0, r1
    adca:	0011      	movs	r1, r2
    adcc:	6023      	str	r3, [r4, #0]
    adce:	f7fb faae 	bl	632e <_fstat>
    add2:	1c43      	adds	r3, r0, #1
    add4:	d103      	bne.n	adde <_fstat_r+0x1e>
    add6:	6823      	ldr	r3, [r4, #0]
    add8:	2b00      	cmp	r3, #0
    adda:	d000      	beq.n	adde <_fstat_r+0x1e>
    addc:	602b      	str	r3, [r5, #0]
    adde:	bd70      	pop	{r4, r5, r6, pc}
    ade0:	200004d4 	.word	0x200004d4

0000ade4 <_isatty_r>:
    ade4:	2300      	movs	r3, #0
    ade6:	b570      	push	{r4, r5, r6, lr}
    ade8:	4c06      	ldr	r4, [pc, #24]	; (ae04 <_isatty_r+0x20>)
    adea:	0005      	movs	r5, r0
    adec:	0008      	movs	r0, r1
    adee:	6023      	str	r3, [r4, #0]
    adf0:	f7fb faa2 	bl	6338 <_isatty>
    adf4:	1c43      	adds	r3, r0, #1
    adf6:	d103      	bne.n	ae00 <_isatty_r+0x1c>
    adf8:	6823      	ldr	r3, [r4, #0]
    adfa:	2b00      	cmp	r3, #0
    adfc:	d000      	beq.n	ae00 <_isatty_r+0x1c>
    adfe:	602b      	str	r3, [r5, #0]
    ae00:	bd70      	pop	{r4, r5, r6, pc}
    ae02:	46c0      	nop			; (mov r8, r8)
    ae04:	200004d4 	.word	0x200004d4

0000ae08 <_lseek_r>:
    ae08:	b570      	push	{r4, r5, r6, lr}
    ae0a:	0005      	movs	r5, r0
    ae0c:	0008      	movs	r0, r1
    ae0e:	0011      	movs	r1, r2
    ae10:	2200      	movs	r2, #0
    ae12:	4c06      	ldr	r4, [pc, #24]	; (ae2c <_lseek_r+0x24>)
    ae14:	6022      	str	r2, [r4, #0]
    ae16:	001a      	movs	r2, r3
    ae18:	f7fb fa90 	bl	633c <_lseek>
    ae1c:	1c43      	adds	r3, r0, #1
    ae1e:	d103      	bne.n	ae28 <_lseek_r+0x20>
    ae20:	6823      	ldr	r3, [r4, #0]
    ae22:	2b00      	cmp	r3, #0
    ae24:	d000      	beq.n	ae28 <_lseek_r+0x20>
    ae26:	602b      	str	r3, [r5, #0]
    ae28:	bd70      	pop	{r4, r5, r6, pc}
    ae2a:	46c0      	nop			; (mov r8, r8)
    ae2c:	200004d4 	.word	0x200004d4

0000ae30 <memchr>:
    ae30:	b2c9      	uxtb	r1, r1
    ae32:	1882      	adds	r2, r0, r2
    ae34:	4290      	cmp	r0, r2
    ae36:	d101      	bne.n	ae3c <memchr+0xc>
    ae38:	2000      	movs	r0, #0
    ae3a:	4770      	bx	lr
    ae3c:	7803      	ldrb	r3, [r0, #0]
    ae3e:	428b      	cmp	r3, r1
    ae40:	d0fb      	beq.n	ae3a <memchr+0xa>
    ae42:	3001      	adds	r0, #1
    ae44:	e7f6      	b.n	ae34 <memchr+0x4>

0000ae46 <_realloc_r>:
    ae46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ae48:	0007      	movs	r7, r0
    ae4a:	000d      	movs	r5, r1
    ae4c:	0016      	movs	r6, r2
    ae4e:	2900      	cmp	r1, #0
    ae50:	d105      	bne.n	ae5e <_realloc_r+0x18>
    ae52:	0011      	movs	r1, r2
    ae54:	f7fe fe0e 	bl	9a74 <_malloc_r>
    ae58:	0004      	movs	r4, r0
    ae5a:	0020      	movs	r0, r4
    ae5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ae5e:	2a00      	cmp	r2, #0
    ae60:	d103      	bne.n	ae6a <_realloc_r+0x24>
    ae62:	f7fe fdbd 	bl	99e0 <_free_r>
    ae66:	0034      	movs	r4, r6
    ae68:	e7f7      	b.n	ae5a <_realloc_r+0x14>
    ae6a:	f000 f827 	bl	aebc <_malloc_usable_size_r>
    ae6e:	002c      	movs	r4, r5
    ae70:	4286      	cmp	r6, r0
    ae72:	d9f2      	bls.n	ae5a <_realloc_r+0x14>
    ae74:	0031      	movs	r1, r6
    ae76:	0038      	movs	r0, r7
    ae78:	f7fe fdfc 	bl	9a74 <_malloc_r>
    ae7c:	1e04      	subs	r4, r0, #0
    ae7e:	d0ec      	beq.n	ae5a <_realloc_r+0x14>
    ae80:	0029      	movs	r1, r5
    ae82:	0032      	movs	r2, r6
    ae84:	f7fe fd88 	bl	9998 <memcpy>
    ae88:	0029      	movs	r1, r5
    ae8a:	0038      	movs	r0, r7
    ae8c:	f7fe fda8 	bl	99e0 <_free_r>
    ae90:	e7e3      	b.n	ae5a <_realloc_r+0x14>
	...

0000ae94 <_read_r>:
    ae94:	b570      	push	{r4, r5, r6, lr}
    ae96:	0005      	movs	r5, r0
    ae98:	0008      	movs	r0, r1
    ae9a:	0011      	movs	r1, r2
    ae9c:	2200      	movs	r2, #0
    ae9e:	4c06      	ldr	r4, [pc, #24]	; (aeb8 <_read_r+0x24>)
    aea0:	6022      	str	r2, [r4, #0]
    aea2:	001a      	movs	r2, r3
    aea4:	f7fb f9e4 	bl	6270 <_read>
    aea8:	1c43      	adds	r3, r0, #1
    aeaa:	d103      	bne.n	aeb4 <_read_r+0x20>
    aeac:	6823      	ldr	r3, [r4, #0]
    aeae:	2b00      	cmp	r3, #0
    aeb0:	d000      	beq.n	aeb4 <_read_r+0x20>
    aeb2:	602b      	str	r3, [r5, #0]
    aeb4:	bd70      	pop	{r4, r5, r6, pc}
    aeb6:	46c0      	nop			; (mov r8, r8)
    aeb8:	200004d4 	.word	0x200004d4

0000aebc <_malloc_usable_size_r>:
    aebc:	1f0b      	subs	r3, r1, #4
    aebe:	681b      	ldr	r3, [r3, #0]
    aec0:	1f18      	subs	r0, r3, #4
    aec2:	2b00      	cmp	r3, #0
    aec4:	da01      	bge.n	aeca <_malloc_usable_size_r+0xe>
    aec6:	580b      	ldr	r3, [r1, r0]
    aec8:	18c0      	adds	r0, r0, r3
    aeca:	4770      	bx	lr
    aecc:	61746164 	.word	0x61746164
    aed0:	205d325b 	.word	0x205d325b
    aed4:	74617473 	.word	0x74617473
    aed8:	3d207375 	.word	0x3d207375
    aedc:	25783020 	.word	0x25783020
    aee0:	00000a78 	.word	0x00000a78
    aee4:	00000366 	.word	0x00000366
    aee8:	000005ac 	.word	0x000005ac
    aeec:	000005ac 	.word	0x000005ac
    aef0:	000005ac 	.word	0x000005ac
    aef4:	000005ac 	.word	0x000005ac
    aef8:	000005ac 	.word	0x000005ac
    aefc:	000005ac 	.word	0x000005ac
    af00:	000005ac 	.word	0x000005ac
    af04:	000005ac 	.word	0x000005ac
    af08:	000005ac 	.word	0x000005ac
    af0c:	000005ac 	.word	0x000005ac
    af10:	000005ac 	.word	0x000005ac
    af14:	000005ac 	.word	0x000005ac
    af18:	000005ac 	.word	0x000005ac
    af1c:	000005ac 	.word	0x000005ac
    af20:	000005ac 	.word	0x000005ac
    af24:	0000034e 	.word	0x0000034e
    af28:	000005ac 	.word	0x000005ac
    af2c:	000005ac 	.word	0x000005ac
    af30:	000005ac 	.word	0x000005ac
    af34:	000005ac 	.word	0x000005ac
    af38:	000005ac 	.word	0x000005ac
    af3c:	000005ac 	.word	0x000005ac
    af40:	000005ac 	.word	0x000005ac
    af44:	000005ac 	.word	0x000005ac
    af48:	000005ac 	.word	0x000005ac
    af4c:	000005ac 	.word	0x000005ac
    af50:	000005ac 	.word	0x000005ac
    af54:	000005ac 	.word	0x000005ac
    af58:	000005ac 	.word	0x000005ac
    af5c:	000005ac 	.word	0x000005ac
    af60:	000005ac 	.word	0x000005ac
    af64:	0000035e 	.word	0x0000035e
    af68:	000005ac 	.word	0x000005ac
    af6c:	000005ac 	.word	0x000005ac
    af70:	000005ac 	.word	0x000005ac
    af74:	000005ac 	.word	0x000005ac
    af78:	000005ac 	.word	0x000005ac
    af7c:	000005ac 	.word	0x000005ac
    af80:	000005ac 	.word	0x000005ac
    af84:	000005ac 	.word	0x000005ac
    af88:	000005ac 	.word	0x000005ac
    af8c:	000005ac 	.word	0x000005ac
    af90:	000005ac 	.word	0x000005ac
    af94:	000005ac 	.word	0x000005ac
    af98:	000005ac 	.word	0x000005ac
    af9c:	000005ac 	.word	0x000005ac
    afa0:	000005ac 	.word	0x000005ac
    afa4:	00000356 	.word	0x00000356
    afa8:	0000036e 	.word	0x0000036e
    afac:	00000336 	.word	0x00000336
    afb0:	00000346 	.word	0x00000346
    afb4:	0000033e 	.word	0x0000033e
    afb8:	00000002 	.word	0x00000002
    afbc:	00000003 	.word	0x00000003
    afc0:	00000028 	.word	0x00000028
    afc4:	00000029 	.word	0x00000029
    afc8:	00000004 	.word	0x00000004
    afcc:	00000005 	.word	0x00000005
    afd0:	00000006 	.word	0x00000006
    afd4:	00000007 	.word	0x00000007
    afd8:	00000020 	.word	0x00000020
    afdc:	00000021 	.word	0x00000021
    afe0:	00000022 	.word	0x00000022
    afe4:	00000023 	.word	0x00000023
    afe8:	00000024 	.word	0x00000024
    afec:	00000025 	.word	0x00000025
    aff0:	00000026 	.word	0x00000026
    aff4:	00000027 	.word	0x00000027
    aff8:	00000008 	.word	0x00000008
    affc:	00000009 	.word	0x00000009
    b000:	0000000a 	.word	0x0000000a
    b004:	0000000b 	.word	0x0000000b

0000b008 <CMD_MEASURE_LPM_CS>:
    b008:	00005864                                dX..

0000b00c <CMD_READ_ID_REG>:
    b00c:	0000c8ef                                ....

0000b010 <__FUNCTION__.14481>:
    b010:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
    b020:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    b030:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
    b040:	6320746c 0000646d 00001d74 00001d44     lt cmd..t...D...
    b050:	00001d3c 00001d54 00001d4c 00001d6c     <...T...L...l...
    b060:	00001d5c 00001d64                       \...d...

0000b068 <__FUNCTION__.13064>:
    b068:	5f666968 646e6573 00000000              hif_send....

0000b074 <__FUNCTION__.13074>:
    b074:	5f666968 00727369                       hif_isr.

0000b07c <__FUNCTION__.13080>:
    b07c:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0000b08c <__FUNCTION__.13092>:
    b08c:	5f666968 65636572 00657669              hif_receive.

0000b098 <__FUNCTION__.13108>:
    b098:	5f666968 69676572 72657473 0062635f     hif_register_cb.
    b0a8:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
    b0b8:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
    b0c8:	006c6961 66696828 64612029 73657264     ail.(hif) addres
    b0d8:	75622073 61662073 00006c69 66696828     s bus fail..(hif
    b0e8:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
    b0f8:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
    b108:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
    b118:	25203d20 3e583230 0000000a 49464957      = %02X>....WIFI
    b128:	6c616320 6361626c 7369206b 746f6e20      callback is not
    b138:	67657220 65747369 00646572 6b6f6353      registered.Scok
    b148:	63207465 626c6c61 206b6361 6e207369     et callback is n
    b158:	7220746f 73696765 65726574 00000064     ot registered...
    b168:	2061744f 6c6c6163 6b636162 20736920     Ota callback is 
    b178:	20746f6e 69676572 72657473 00006465     not registered..
    b188:	70797243 63206f74 626c6c61 206b6361     Crypto callback 
    b198:	6e207369 7220746f 73696765 65726574     is not registere
    b1a8:	00000064 6d676953 61632061 61626c6c     d...Sigma callba
    b1b8:	69206b63 6f6e2073 65722074 74736967     ck is not regist
    b1c8:	64657265 00000000 66696828 6e692029     ered....(hif) in
    b1d8:	696c6176 72672064 2070756f 00004449     valid group ID..
    b1e8:	66696828 6f682029 61207473 64207070     (hif) host app d
    b1f8:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
    b208:	253c2065 253c3e75 000a3e58 66696828     e <%u><%X>..(hif
    b218:	72572029 20676e6f 657a6953 00000000     ) Wrong Size....
    b228:	66696828 61462029 2065736c 65746e69     (hif) False inte
    b238:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
    b248:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
    b258:	7265746e 74707572 67657220 00000000     nterrupt reg....
    b268:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
    b278:	656c646e 746e6920 75727265 25207470     ndle interrupt %
    b288:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
    b298:	66696820 6365725f 65766965 6e49203a      hif_receive: In
    b2a8:	696c6176 72612064 656d7567 0000746e     valid argument..
    b2b8:	20505041 75716552 65747365 69532064     APP Requested Si
    b2c8:	6920657a 616c2073 72656772 61687420     ze is larger tha
    b2d8:	6874206e 65722065 65766963 75622064     n the recived bu
    b2e8:	72656666 7a697320 253c2065 253c3e75     ffer size <%u><%
    b2f8:	0a3e756c 00000000 20505041 75716552     lu>.....APP Requ
    b308:	65747365 64412064 73657264 65622073     ested Address be
    b318:	646e6f79 65687420 63657220 64657669     yond the recived
    b328:	66756220 20726566 72646461 20737365      buffer address 
    b338:	20646e61 676e656c 00006874 20705247     and length..GRp 
    b348:	6425203f 0000000a 50504128 4e492829     ? %d....(APP)(IN
    b358:	00294f46 776f6c53 20676e69 6e776f64     FO).Slowing down
    b368:	002e2e2e 46494828 69614629 6f74206c     ....(HIF)Fail to
    b378:	6b617720 74207075 63206568 00706968      wakup the chip.

0000b388 <__FUNCTION__.13043>:
    b388:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0000b394 <__FUNCTION__.13072>:
    b394:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0000b3a4 <__FUNCTION__.13100>:
    b3a4:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
    b3b4:	0063735f 666e6f43 7463696c 49206465     _sc.Conflicted I
    b3c4:	20222050 252e7525 75252e75 2075252e     P " %u.%u.%u.%u 
    b3d4:	000a2022 20514552 20746f4e 69666564     " ..REQ Not defi
    b3e4:	2064656e 000a6425 2079654b 6e207369     ned %d..Key is n
    b3f4:	7620746f 64696c61 00000000 61766e49     ot valid....Inva
    b404:	2064696c 0079654b 44495353 4e454c20     lid Key.SSID LEN
    b414:	564e4920 44494c41 00000000 49204843      INVALID....CH I
    b424:	4c41564e 00004449 61766e49 2064696c     NVALID..Invalid 
    b434:	20706557 2079656b 65646e69 64252078     Wep key index %d
    b444:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
    b454:	2079656b 676e656c 25206874 00000a64     key length %d...
    b464:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
    b474:	656c2079 6874676e 00000000 65646e75     y length....unde
    b484:	656e6966 65732064 79742063 00006570     fined sec type..
    b494:	6d726946 65726177 72657620 3a202020     Firmware ver   :
    b4a4:	2e752520 252e7525 76532075 7665726e      %u.%u.%u Svnrev
    b4b4:	0a752520 00000000 6d726946 65726177      %u.....Firmware
    b4c4:	69754220 2520646c 69542073 2520656d      Build %s Time %
    b4d4:	00000a73 6d726946 65726177 6e694d20     s...Firmware Min
    b4e4:	69726420 20726576 20726576 7525203a      driver ver : %u
    b4f4:	2e75252e 000a7525 76697244 76207265     .%u.%u..Driver v
    b504:	203a7265 252e7525 75252e75 0000000a     er: %u.%u.%u....
    b514:	303a3431 32353a34 00000000 20626546     14:04:52....Feb 
    b524:	32203032 00383130 76697244 62207265     20 2018.Driver b
    b534:	746c6975 20746120 25097325 00000a73     uilt at %s.%s...
    b544:	6d73694d 68637461 72694620 7277616d     Mismatch Firmawr
    b554:	65562065 6f697372 0000006e              e Version...

0000b560 <__FUNCTION__.12906>:
    b560:	70696863 6b61775f 00000065              chip_wake...

0000b56c <__FUNCTION__.12955>:
    b56c:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
    b57c:	74206465 6564206f 696e692d 6c616974     ed to de-initial
    b58c:	00657a69 20737542 6f727265 35282072     ize.Bus error (5
    b59c:	64252e29 786c2520 0000000a 6c696146     ).%d %lx....Fail
    b5ac:	74206465 6177206f 2070756b 20656874     ed to wakup the 
    b5bc:	70696863 00000000 76697244 65567265     chip....DriverVe
    b5cc:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..

0000b5dc <__FUNCTION__.12953>:
    b5dc:	645f6d6e 695f7672 0074696e              nm_drv_init.

0000b5e8 <__FUNCTION__.12960>:
    b5e8:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
    b5f8:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
    b608:	6965645f 2074696e 6c696166 00000000     _deinit fail....
    b618:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
    b628:	73616c66 69642068 6c626173 61662065     flash disable fa
    b638:	00006c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
    b648:	6c696166 696e6920 75622074 00000073     fail init bus...
    b658:	6c696166 74206465 6e65206f 656c6261     failed to enable
    b668:	746e6920 75727265 2e737470 0000002e      interrupts.....
    b678:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
    b688:	6e69206c 62207469 00007375 70696843     l init bus..Chip
    b698:	20444920 0a786c25 00000000 00002d54      ID %lx.....T-..
    b6a8:	00002d54 00002d84 00002d06 00002d2a     T-...-...-..*-..
    b6b8:	00002d38 00002d6a 00002d6a 00002db2     8-..j-..j-...-..
    b6c8:	00002cea 00002dec 00002dec 00002dec     .,...-...-...-..
    b6d8:	00002dec 00002d46 cac4c9c3              .-..F-......

0000b6e4 <__FUNCTION__.12259>:
    b6e4:	5f697073 00646d63                       spi_cmd.

0000b6ec <__FUNCTION__.12266>:
    b6ec:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

0000b6fc <__FUNCTION__.12275>:
    b6fc:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0000b708 <__FUNCTION__.12291>:
    b708:	5f697073 61746164 6165725f 00000064     spi_data_read...

0000b718 <__FUNCTION__.12306>:
    b718:	5f697073 61746164 6972775f 00006574     spi_data_write..

0000b728 <__FUNCTION__.12318>:
    b728:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0000b738 <__FUNCTION__.12329>:
    b738:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0000b748 <__FUNCTION__.12341>:
    b748:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0000b758 <__FUNCTION__.12354>:
    b758:	735f6d6e 725f6970 00646165              nm_spi_read.

0000b764 <__FUNCTION__.12375>:
    b764:	735f6d6e 695f6970 0074696e              nm_spi_init.

0000b770 <crc7_syndrome_table>:
    b770:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
    b780:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
    b790:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
    b7a0:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
    b7b0:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
    b7c0:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
    b7d0:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
    b7e0:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
    b7f0:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
    b800:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
    b810:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
    b820:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
    b830:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
    b840:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
    b850:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
    b860:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
    b870:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    b880:	6e692064 6e726574 72206c61 20646165     d internal read 
    b890:	746f7270 6c6f636f 74697720 52432068     protocol with CR
    b8a0:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
    b8b0:	20687469 20435243 2e66666f 00002e2e     ith CRC off.....
    b8c0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    b8d0:	6e692064 6e726574 72206c61 20646165     d internal read 
    b8e0:	746f7270 6c6f636f 002e2e2e 696d6e5b     protocol....[nmi
    b8f0:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
    b900:	6e726574 77206c61 65746972 6f727020     ternal write pro
    b910:	6f636f74 6572206c 2e2e2e67 00000000     tocol reg.......
    b920:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
    b930:	20646d63 64616572 69686320 64692070     cmd read chip id
    b940:	002e2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    b950:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
    b960:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
    b970:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    b980:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
    b990:	202c6573 64616572 6f6c6220 28206b63     se, read block (
    b9a0:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
    b9b0:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    b9c0:	206b636f 61746164 61657220 2e2e2e64     ock data read...
    b9d0:	00000000 65736552 6e612074 65722064     ....Reset and re
    b9e0:	20797274 25206425 2520786c 00000a64     try %d %lx %d...
    b9f0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    ba00:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
    ba10:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
    ba20:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
    ba30:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
    ba40:	69727720 62206574 6b636f6c 30252820      write block (%0
    ba50:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
    ba60:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    ba70:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
    ba80:	20737562 6f727265 2e2e2e72 00000000     bus error.......
    ba90:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    baa0:	61642064 62206174 6b636f6c 69727720     d data block wri
    bab0:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
    bac0:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    bad0:	656c6961 61642064 62206174 6b636f6c     ailed data block
    bae0:	63726320 69727720 202c6574 20737562      crc write, bus 
    baf0:	6f727265 2e2e2e72 00000000 696d6e5b     error.......[nmi
    bb00:	69707320 46203a5d 656c6961 75622064      spi]: Failed bu
    bb10:	72652073 2e726f72 00002e2e 696d6e5b     s error.....[nmi
    bb20:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    bb30:	72206174 6f707365 2065736e 64616572     ta response read
    bb40:	7825202c 20782520 000a7825 696d6e5b     , %x %x %x..[nmi
    bb50:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    bb60:	206b636f 61746164 69727720 2e2e6574     ock data write..
    bb70:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    bb80:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
    bb90:	73756220 72726520 2e2e726f 0000002e      bus error......
    bba0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    bbb0:	6d632064 65722064 6e6f7073 72206573     d cmd response r
    bbc0:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
    bbd0:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    bbe0:	656c6961 61642064 72206174 6f707365     ailed data respo
    bbf0:	2065736e 64616572 7562202c 72652073     nse read, bus er
    bc00:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
    bc10:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
    bc20:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
    bc30:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
    bc40:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    bc50:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
    bc60:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
    bc70:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    bc80:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
    bc90:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
    bca0:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    bcb0:	72202c64 20646165 20676572 38302528     d, read reg (%08
    bcc0:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
    bcd0:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
    bce0:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
    bcf0:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    bd00:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    bd10:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
    bd20:	6e612074 65722064 20797274 25206425     t and retry %d %
    bd30:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
    bd40:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
    bd50:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
    bd60:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    bd70:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
    bd80:	74697277 65722065 25282067 29783830     write reg (%08x)
    bd90:	0a2e2e2e 00000000 65736552 6e612074     ........Reset an
    bda0:	65722064 20797274 25206425 2520786c     d retry %d %lx %
    bdb0:	000a786c 52524528 75432952 6e657272     lx..(ERRR)Curren
    bdc0:	253c2074 000a3e64 6b636f53 206f7420     t <%d>..Sock to 
    bdd0:	656c6564 3c206574 0a3e6425 00000000     delete <%d>.....
    bde0:	6b636f53 25207465 65732064 6f697373     Socket %d sessio
    bdf0:	4449206e 25203d20 000a0d64 42000800     n ID = %d......B
    be00:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    be10:	42001c00 0000539e 0000539a 0000539a     ...B.S...S...S..
    be20:	000053fc 000053fc 000053b2 000053a4     .S...S...S...S..
    be30:	000053b8 000053ea 000055bc 0000559c     .S...S...U...U..
    be40:	0000559c 00005628 000055ae 000055ca     .U..(V...U...U..
    be50:	000055a0 000055d8 00005618              .U...U...V..

0000be5c <_tcc_apbcmasks>:
    be5c:	00000100 00000200 00000400              ............

0000be68 <_tcc_cc_nums>:
    be68:	00020204                                ....

0000be6c <_tcc_gclk_ids>:
    be6c:	001b1a1a                                ....

0000be70 <_tcc_maxs>:
    be70:	00ffffff 00ffffff 0000ffff              ............

0000be7c <_tcc_ow_nums>:
    be7c:	00020408                                ....

0000be80 <_tcc_intflag>:
    be80:	00000001 00000002 00000004 00000008     ................
    be90:	00001000 00002000 00004000 00008000     ..... ...@......
    bea0:	00010000 00020000 00040000 00080000     ................

0000beb0 <tcc_interrupt_vectors.12442>:
    beb0:	0011100f 42002000 42002400 42002800     ..... .B.$.B.(.B
    bec0:	20746f6e 73657270 00746e65 57202d2d     not present.-- W
    bed0:	31434e49 20303035 462d6957 514d2069     INC1500 Wi-Fi MQ
    bee0:	63205454 20746168 6d617865 20656c70     TT chat example 
    bef0:	0a0d2d2d 53202d2d 32444d41 50585f31     --..-- SAMD21_XP
    bf00:	4e49414c 505f4445 2d204f52 2d0a0d2d     LAINED_PRO --..-
    bf10:	6f43202d 6c69706d 203a6465 2072614d     - Compiled: Mar 
    bf20:	32203120 20383130 303a3331 33353a37      1 2018 13:07:53
    bf30:	0d2d2d20 00000000 5454514d 696e6920      --.....MQTT ini
    bf40:	6c616974 74617a69 206e6f69 6c696166     tialization fail
    bf50:	202e6465 6f727245 6f632072 69206564     ed. Error code i
    bf60:	25282073 0a0d2964 00000000 5454514d     s (%d)......MQTT
    bf70:	67657220 65747369 61632072 61626c6c      register callba
    bf80:	66206b63 656c6961 45202e64 726f7272     ck failed. Error
    bf90:	646f6320 73692065 64252820 000a0d29      code is (%d)...
    bfa0:	65746e45 68742072 73752065 6e207265     Enter the user n
    bfb0:	20656d61 78614d28 20642520 72616863     ame (Max %d char
    bfc0:	65746361 0d297372 0000000a 72657355     acters).....User
    bfd0:	25203a20 000a0d73 73257325 00000000      : %s...%s%s....
    bfe0:	646d6173 7461642f 00002f61 6e69616d     samd/data/..main
    bff0:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
    c000:	6c6c6163 72726520 2821726f 0d296425     call error!(%d).
    c010:	0000000a 74730a0d 69747261 2e2e676e     ......starting..
    c020:	00000d2e 736e6573 6920726f 73252073     ....sensor is %s
    c030:	00000a0d 706d6554 2528203a 29432764     ....Temp: (%d'C)
    c040:	00000a0d 696d7548 79746964 2528203a     ....Humidity: (%
    c050:	29252564 00000a0d 66322e25 00000000     d%%)....%.2f....
    c060:	206f7242 61632049 2074276e 7361656d     Bro I can't meas
    c070:	20657275 20656874 706d6554 48202620     ure the Temp & H
    c080:	64696d75 2e797469 65724120 756f7920     umidity. Are you
    c090:	72757320 6f792065 6c702075 65676775      sure you plugge
    c0a0:	68742064 65732065 726f736e 3f6e6920     d the sensor in?
    c0b0:	00000000 20434f56 2528203d 70202964     ....VOC = (%d) p
    c0c0:	0a0d6270 00000000 20324f43 2528203d     pb......CO2 = (%
    c0d0:	70202964 0a0d6d70 00000000 206f7242     d) ppm......Bro 
    c0e0:	61632049 2074276e 7361656d 20657275     I can't measure 
    c0f0:	20656874 20434f56 4f432026 41202e32     the VOC & CO2. A
    c100:	79206572 7320756f 20657275 20756f79     re you sure you 
    c110:	67756c70 20646567 20656874 2d514169     plugged the iAQ-
    c120:	65726f43 3f6e6920 00000000 20434441     Core in?....ADC 
    c130:	2528203d 0a0d2964 00000000 61796573     = (%d)......seya
    c140:	0000006d                                m...

0000c144 <main_mqtt_broker>:
    c144:	2e323831 382e3834 38312e34 00000030     182.48.84.180...
    c154:	6e6e6f43 20746365 6c696166 206f7420     Connect fail to 
    c164:	76726573 25287265 20212973 72746572     server(%s)! retr
    c174:	74692079 74756120 74616d6f 6c616369     y it automatical
    c184:	0d2e796c 0000000a 646d6173 7365742f     ly......samd/tes
    c194:	00232f74 70657250 74617261 206e6f69     t/#.Preparation 
    c1a4:	7420666f 63206568 20746168 20736168     of the chat has 
    c1b4:	6e656562 6d6f6320 74656c70 0d2e6465     been completed..
    c1c4:	00000000 5454514d 6f726220 2072656b     ....MQTT broker 
    c1d4:	6c636564 20656e69 72756f79 63636120     decline your acc
    c1e4:	21737365 72726520 6320726f 2065646f     ess! error code 
    c1f4:	0a0d6425 00000000 646d6173 7365742f     %d......samd/tes
    c204:	00002f74 203e3e20 00000000 0000000d     t/.. >> ........
    c214:	5454514d 73696420 6e6e6f63 65746365     MQTT disconnecte
    c224:	00000d64 462d6957 6f632069 63656e6e     d...Wi-Fi connec
    c234:	0d646574 00000000 462d6957 69642069     ted.....Wi-Fi di
    c244:	6e6f6373 7463656e 000d6465 70707573     sconnected..supp
    c254:	3174726f 00003332 61746144 74666f53     ort123..DataSoft
    c264:	4669575f 00000069 462d6957 50492069     _WiFi...Wi-Fi IP
    c274:	20736920 252e7525 75252e75 0d75252e      is %u.%u.%u.%u.
    c284:	0000000a 7349514d 00007064 00007e2c     ....MQIsdp..,~..
    c294:	00007dfc 00007e0e 00007d50 00007e0e     .}...~..P}...~..
    c2a4:	00007df2 00007e0e 00007d50 00007dfc     .}...~..P}...}..
    c2b4:	00007dfc 00007df2 00007d50 00007d58     .}...}..P}..X}..
    c2c4:	00007d58 00007d58 00007e14 00007dfc     X}..X}...~...}..
    c2d4:	00007dfc 00007dd0 00007eb4 00007dd0     .}...}...~...}..
    c2e4:	00007df2 00007dd0 00007eb4 00007dfc     .}...}...~...}..
    c2f4:	00007dfc 00007df2 00007eb4 00007d58     .}...}...~..X}..
    c304:	00007d58 00007d58 00007ebe 000087e8     X}..X}...~......
    c314:	000087ca 00008784 000086a2 00008784     ................
    c324:	000087bc 00008784 000086a2 000087ca     ................
    c334:	000087ca 000087bc 000086a2 0000869a     ................
    c344:	0000869a 0000869a 00008a00 00008e48     ............H...
    c354:	00008d08 00008d08 00008d04 00008e20     ............ ...
    c364:	00008e20 00008e12 00008d04 00008e20      ........... ...
    c374:	00008e12 00008e20 00008d04 00008e28     .... .......(...
    c384:	00008e28 00008e28 0000902c              (...(...,...

0000c390 <_global_impure_ptr>:
    c390:	20000010                                ... 

0000c394 <__sf_fake_stderr>:
	...

0000c3b4 <__sf_fake_stdin>:
	...

0000c3d4 <__sf_fake_stdout>:
	...
    c3f4:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    c404:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    c414:	31300046 35343332 39383736 64636261     F.0123456789abcd
    c424:	00006665                                ef..

0000c428 <_init>:
    c428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c42a:	46c0      	nop			; (mov r8, r8)
    c42c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c42e:	bc08      	pop	{r3}
    c430:	469e      	mov	lr, r3
    c432:	4770      	bx	lr

0000c434 <__init_array_start>:
    c434:	000000dd 	.word	0x000000dd

0000c438 <_fini>:
    c438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c43a:	46c0      	nop			; (mov r8, r8)
    c43c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c43e:	bc08      	pop	{r3}
    c440:	469e      	mov	lr, r3
    c442:	4770      	bx	lr

0000c444 <__fini_array_start>:
    c444:	000000b5 	.word	0x000000b5
