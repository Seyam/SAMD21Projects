
WINC1500_MQTT_CHAT_EXAMPLE_MQTT_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000094f4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000bc  20000000  000094f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003d0  200000bc  000095b0  000200bc  2**2
                  ALLOC
  3 .stack        00002004  2000048c  00009980  000200bc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
  5 .comment      000000ca  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
  6 .debug_info   00058f3a  00000000  00000000  000201ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007f7f  00000000  00000000  000790e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001271b  00000000  00000000  00081067  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000df0  00000000  00000000  00093782  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001390  00000000  00000000  00094572  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00023949  00000000  00000000  00095902  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001bdbe  00000000  00000000  000b924b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00099697  00000000  00000000  000d5009  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002fb4  00000000  00000000  0016e6a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	90 24 00 20 51 52 00 00 4d 52 00 00 4d 52 00 00     .$. QR..MR..MR..
	...
      2c:	4d 52 00 00 00 00 00 00 00 00 00 00 4d 52 00 00     MR..........MR..
      3c:	51 01 00 00 4d 52 00 00 4d 52 00 00 4d 52 00 00     Q...MR..MR..MR..
      4c:	4d 52 00 00 5d 34 00 00 4d 52 00 00 4d 52 00 00     MR..]4..MR..MR..
      5c:	4d 52 00 00 4d 52 00 00 c9 39 00 00 d9 39 00 00     MR..MR...9...9..
      6c:	e9 39 00 00 f9 39 00 00 09 3a 00 00 19 3a 00 00     .9...9...:...:..
      7c:	1d 52 00 00 2d 52 00 00 3d 52 00 00 4d 52 00 00     .R..-R..=R..MR..
      8c:	4d 52 00 00 4d 52 00 00 4d 52 00 00 4d 52 00 00     MR..MR..MR..MR..
      9c:	4d 52 00 00 4d 52 00 00 4d 52 00 00 4d 52 00 00     MR..MR..MR..MR..
      ac:	4d 52 00 00 00 00 00 00                             MR......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000bc 	.word	0x200000bc
      d4:	00000000 	.word	0x00000000
      d8:	000094f4 	.word	0x000094f4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000c0 	.word	0x200000c0
     108:	000094f4 	.word	0x000094f4
     10c:	000094f4 	.word	0x000094f4
     110:	00000000 	.word	0x00000000

00000114 <tick_counter_check_timer>:

bool	tick_counter_check_timer()
{
	bool ret = false;
	
	if( system_tick_count > messages_send_interval)
     114:	4b03      	ldr	r3, [pc, #12]	; (124 <tick_counter_check_timer+0x10>)
     116:	681b      	ldr	r3, [r3, #0]
     118:	4a03      	ldr	r2, [pc, #12]	; (128 <tick_counter_check_timer+0x14>)
     11a:	6810      	ldr	r0, [r2, #0]
		ret = true;
		
	return ret;
     11c:	4298      	cmp	r0, r3
     11e:	4180      	sbcs	r0, r0
     120:	4240      	negs	r0, r0
}
     122:	4770      	bx	lr
     124:	200000dc 	.word	0x200000dc
     128:	200000d8 	.word	0x200000d8

0000012c <tick_counter_reset_timer>:

void	tick_counter_reset_timer(int interval)
{
     12c:	b510      	push	{r4, lr}
	messages_send_interval = system_tick_count + interval;
     12e:	4b04      	ldr	r3, [pc, #16]	; (140 <tick_counter_reset_timer+0x14>)
     130:	681b      	ldr	r3, [r3, #0]
     132:	1818      	adds	r0, r3, r0
     134:	4b03      	ldr	r3, [pc, #12]	; (144 <tick_counter_reset_timer+0x18>)
     136:	6018      	str	r0, [r3, #0]
	printf("Timer reset\r\n");
     138:	4803      	ldr	r0, [pc, #12]	; (148 <tick_counter_reset_timer+0x1c>)
     13a:	4b04      	ldr	r3, [pc, #16]	; (14c <tick_counter_reset_timer+0x20>)
     13c:	4798      	blx	r3
}
     13e:	bd10      	pop	{r4, pc}
     140:	200000dc 	.word	0x200000dc
     144:	200000d8 	.word	0x200000d8
     148:	000082b0 	.word	0x000082b0
     14c:	00007031 	.word	0x00007031

00000150 <SysTick_Handler>:
/** 
 * \Brief System Callback, run during SysTick interrupt.
*/
void SysTick_Handler(void)
{
	system_tick_count++;
     150:	4a02      	ldr	r2, [pc, #8]	; (15c <SysTick_Handler+0xc>)
     152:	6813      	ldr	r3, [r2, #0]
     154:	3301      	adds	r3, #1
     156:	6013      	str	r3, [r2, #0]
}
     158:	4770      	bx	lr
     15a:	46c0      	nop			; (mov r8, r8)
     15c:	200000dc 	.word	0x200000dc

00000160 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     160:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     162:	2000      	movs	r0, #0
     164:	4b08      	ldr	r3, [pc, #32]	; (188 <delay_init+0x28>)
     166:	4798      	blx	r3
     168:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     16a:	4c08      	ldr	r4, [pc, #32]	; (18c <delay_init+0x2c>)
     16c:	21fa      	movs	r1, #250	; 0xfa
     16e:	0089      	lsls	r1, r1, #2
     170:	47a0      	blx	r4
     172:	4b07      	ldr	r3, [pc, #28]	; (190 <delay_init+0x30>)
     174:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     176:	4907      	ldr	r1, [pc, #28]	; (194 <delay_init+0x34>)
     178:	0028      	movs	r0, r5
     17a:	47a0      	blx	r4
     17c:	4b06      	ldr	r3, [pc, #24]	; (198 <delay_init+0x38>)
     17e:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     180:	2205      	movs	r2, #5
     182:	4b06      	ldr	r3, [pc, #24]	; (19c <delay_init+0x3c>)
     184:	601a      	str	r2, [r3, #0]
}
     186:	bd70      	pop	{r4, r5, r6, pc}
     188:	0000497d 	.word	0x0000497d
     18c:	000069e1 	.word	0x000069e1
     190:	20000000 	.word	0x20000000
     194:	000f4240 	.word	0x000f4240
     198:	20000004 	.word	0x20000004
     19c:	e000e010 	.word	0xe000e010

000001a0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     1a0:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     1a2:	4b08      	ldr	r3, [pc, #32]	; (1c4 <delay_cycles_ms+0x24>)
     1a4:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     1a6:	4a08      	ldr	r2, [pc, #32]	; (1c8 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     1a8:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     1aa:	2180      	movs	r1, #128	; 0x80
     1ac:	0249      	lsls	r1, r1, #9
	while (n--) {
     1ae:	3801      	subs	r0, #1
     1b0:	d307      	bcc.n	1c2 <delay_cycles_ms+0x22>
	if (n > 0) {
     1b2:	2c00      	cmp	r4, #0
     1b4:	d0fb      	beq.n	1ae <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     1b6:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     1b8:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     1ba:	6813      	ldr	r3, [r2, #0]
     1bc:	420b      	tst	r3, r1
     1be:	d0fc      	beq.n	1ba <delay_cycles_ms+0x1a>
     1c0:	e7f5      	b.n	1ae <delay_cycles_ms+0xe>
	}
}
     1c2:	bd30      	pop	{r4, r5, pc}
     1c4:	20000000 	.word	0x20000000
     1c8:	e000e010 	.word	0xe000e010

000001cc <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
     1cc:	b510      	push	{r4, lr}
	if (gpfIsr) {
     1ce:	4b03      	ldr	r3, [pc, #12]	; (1dc <chip_isr+0x10>)
     1d0:	681b      	ldr	r3, [r3, #0]
     1d2:	2b00      	cmp	r3, #0
     1d4:	d000      	beq.n	1d8 <chip_isr+0xc>
		gpfIsr();
     1d6:	4798      	blx	r3
	}
}
     1d8:	bd10      	pop	{r4, pc}
     1da:	46c0      	nop			; (mov r8, r8)
     1dc:	200000e0 	.word	0x200000e0

000001e0 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     1e0:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
     1e2:	1e44      	subs	r4, r0, #1
     1e4:	2800      	cmp	r0, #0
     1e6:	d004      	beq.n	1f2 <nm_bsp_sleep+0x12>
		delay_ms(1);
     1e8:	4d02      	ldr	r5, [pc, #8]	; (1f4 <nm_bsp_sleep+0x14>)
     1ea:	2001      	movs	r0, #1
     1ec:	47a8      	blx	r5
	while (u32TimeMsec--) {
     1ee:	3c01      	subs	r4, #1
     1f0:	d2fb      	bcs.n	1ea <nm_bsp_sleep+0xa>
	}
}
     1f2:	bd70      	pop	{r4, r5, r6, pc}
     1f4:	000001a1 	.word	0x000001a1

000001f8 <nm_bsp_reset>:
{
     1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     1fa:	4c07      	ldr	r4, [pc, #28]	; (218 <nm_bsp_reset+0x20>)
     1fc:	2720      	movs	r7, #32
     1fe:	6167      	str	r7, [r4, #20]
     200:	2640      	movs	r6, #64	; 0x40
     202:	6166      	str	r6, [r4, #20]
	nm_bsp_sleep(100);
     204:	2064      	movs	r0, #100	; 0x64
     206:	4d05      	ldr	r5, [pc, #20]	; (21c <nm_bsp_reset+0x24>)
     208:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
     20a:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(100);
     20c:	2064      	movs	r0, #100	; 0x64
     20e:	47a8      	blx	r5
     210:	61a6      	str	r6, [r4, #24]
	nm_bsp_sleep(100);
     212:	2064      	movs	r0, #100	; 0x64
     214:	47a8      	blx	r5
}
     216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     218:	41004480 	.word	0x41004480
     21c:	000001e1 	.word	0x000001e1

00000220 <nm_bsp_init>:
{
     220:	b570      	push	{r4, r5, r6, lr}
     222:	b082      	sub	sp, #8
	gpfIsr = NULL;
     224:	2300      	movs	r3, #0
     226:	4a15      	ldr	r2, [pc, #84]	; (27c <nm_bsp_init+0x5c>)
     228:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     22a:	ac01      	add	r4, sp, #4
     22c:	2501      	movs	r5, #1
     22e:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     230:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     232:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
     234:	0021      	movs	r1, r4
     236:	2026      	movs	r0, #38	; 0x26
     238:	4e11      	ldr	r6, [pc, #68]	; (280 <nm_bsp_init+0x60>)
     23a:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
     23c:	0021      	movs	r1, r4
     23e:	2025      	movs	r0, #37	; 0x25
     240:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
     242:	0021      	movs	r1, r4
     244:	2027      	movs	r0, #39	; 0x27
     246:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
     248:	4b0e      	ldr	r3, [pc, #56]	; (284 <nm_bsp_init+0x64>)
     24a:	2220      	movs	r2, #32
     24c:	615a      	str	r2, [r3, #20]
     24e:	3220      	adds	r2, #32
     250:	615a      	str	r2, [r3, #20]
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
     252:	4b0d      	ldr	r3, [pc, #52]	; (288 <nm_bsp_init+0x68>)
     254:	681b      	ldr	r3, [r3, #0]
     256:	421d      	tst	r5, r3
     258:	d003      	beq.n	262 <nm_bsp_init+0x42>
     25a:	4b0b      	ldr	r3, [pc, #44]	; (288 <nm_bsp_init+0x68>)
     25c:	681b      	ldr	r3, [r3, #0]
     25e:	079b      	lsls	r3, r3, #30
     260:	d401      	bmi.n	266 <nm_bsp_init+0x46>
	    delay_init();
     262:	4b0a      	ldr	r3, [pc, #40]	; (28c <nm_bsp_init+0x6c>)
     264:	4798      	blx	r3
	nm_bsp_reset();
     266:	4b0a      	ldr	r3, [pc, #40]	; (290 <nm_bsp_init+0x70>)
     268:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
     26a:	2201      	movs	r2, #1
     26c:	4b09      	ldr	r3, [pc, #36]	; (294 <nm_bsp_init+0x74>)
     26e:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     270:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     274:	b662      	cpsie	i
}
     276:	2000      	movs	r0, #0
     278:	b002      	add	sp, #8
     27a:	bd70      	pop	{r4, r5, r6, pc}
     27c:	200000e0 	.word	0x200000e0
     280:	000035c1 	.word	0x000035c1
     284:	41004480 	.word	0x41004480
     288:	e000e010 	.word	0xe000e010
     28c:	00000161 	.word	0x00000161
     290:	000001f9 	.word	0x000001f9
     294:	2000000a 	.word	0x2000000a

00000298 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
     298:	b510      	push	{r4, lr}
     29a:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
     29c:	4b0e      	ldr	r3, [pc, #56]	; (2d8 <nm_bsp_register_isr+0x40>)
     29e:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
     2a0:	ac01      	add	r4, sp, #4
     2a2:	0020      	movs	r0, r4
     2a4:	4b0d      	ldr	r3, [pc, #52]	; (2dc <nm_bsp_register_isr+0x44>)
     2a6:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
     2a8:	2324      	movs	r3, #36	; 0x24
     2aa:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
     2ac:	2300      	movs	r3, #0
     2ae:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
     2b0:	3301      	adds	r3, #1
     2b2:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     2b4:	3301      	adds	r3, #1
     2b6:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
     2b8:	0021      	movs	r1, r4
     2ba:	2004      	movs	r0, #4
     2bc:	4b08      	ldr	r3, [pc, #32]	; (2e0 <nm_bsp_register_isr+0x48>)
     2be:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
     2c0:	2200      	movs	r2, #0
     2c2:	2104      	movs	r1, #4
     2c4:	4807      	ldr	r0, [pc, #28]	; (2e4 <nm_bsp_register_isr+0x4c>)
     2c6:	4b08      	ldr	r3, [pc, #32]	; (2e8 <nm_bsp_register_isr+0x50>)
     2c8:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     2ca:	2100      	movs	r1, #0
     2cc:	2004      	movs	r0, #4
     2ce:	4b07      	ldr	r3, [pc, #28]	; (2ec <nm_bsp_register_isr+0x54>)
     2d0:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
     2d2:	b004      	add	sp, #16
     2d4:	bd10      	pop	{r4, pc}
     2d6:	46c0      	nop			; (mov r8, r8)
     2d8:	200000e0 	.word	0x200000e0
     2dc:	00003535 	.word	0x00003535
     2e0:	00003549 	.word	0x00003549
     2e4:	000001cd 	.word	0x000001cd
     2e8:	000033f1 	.word	0x000033f1
     2ec:	0000341d 	.word	0x0000341d

000002f0 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
     2f0:	b510      	push	{r4, lr}
	if (u8Enable) {
     2f2:	2800      	cmp	r0, #0
     2f4:	d104      	bne.n	300 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
     2f6:	2100      	movs	r1, #0
     2f8:	2004      	movs	r0, #4
     2fa:	4b04      	ldr	r3, [pc, #16]	; (30c <nm_bsp_interrupt_ctrl+0x1c>)
     2fc:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     2fe:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     300:	2100      	movs	r1, #0
     302:	2004      	movs	r0, #4
     304:	4b02      	ldr	r3, [pc, #8]	; (310 <nm_bsp_interrupt_ctrl+0x20>)
     306:	4798      	blx	r3
     308:	e7f9      	b.n	2fe <nm_bsp_interrupt_ctrl+0xe>
     30a:	46c0      	nop			; (mov r8, r8)
     30c:	0000343d 	.word	0x0000343d
     310:	0000341d 	.word	0x0000341d

00000314 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
     314:	b530      	push	{r4, r5, lr}
     316:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     318:	4c30      	ldr	r4, [pc, #192]	; (3dc <nm_bus_init+0xc8>)
     31a:	2305      	movs	r3, #5
     31c:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     31e:	2300      	movs	r3, #0
     320:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     322:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
     324:	a901      	add	r1, sp, #4
     326:	2201      	movs	r2, #1
     328:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     32a:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     32c:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     32e:	2005      	movs	r0, #5
     330:	4b2b      	ldr	r3, [pc, #172]	; (3e0 <nm_bus_init+0xcc>)
     332:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     334:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     336:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     338:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     33a:	2900      	cmp	r1, #0
     33c:	d104      	bne.n	348 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
     33e:	0953      	lsrs	r3, r2, #5
     340:	01db      	lsls	r3, r3, #7
     342:	4928      	ldr	r1, [pc, #160]	; (3e4 <nm_bus_init+0xd0>)
     344:	468c      	mov	ip, r1
     346:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     348:	211f      	movs	r1, #31
     34a:	4011      	ands	r1, r2
     34c:	2201      	movs	r2, #1
     34e:	0010      	movs	r0, r2
     350:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
     352:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
     354:	ac02      	add	r4, sp, #8
     356:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     358:	2300      	movs	r3, #0
     35a:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     35c:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     35e:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     360:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     362:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
     364:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
     366:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
     368:	3223      	adds	r2, #35	; 0x23
     36a:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     36c:	3a18      	subs	r2, #24
     36e:	2100      	movs	r1, #0
     370:	a808      	add	r0, sp, #32
     372:	4b1d      	ldr	r3, [pc, #116]	; (3e8 <nm_bus_init+0xd4>)
     374:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
     376:	2380      	movs	r3, #128	; 0x80
     378:	025b      	lsls	r3, r3, #9
     37a:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
     37c:	4b1b      	ldr	r3, [pc, #108]	; (3ec <nm_bus_init+0xd8>)
     37e:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
     380:	2301      	movs	r3, #1
     382:	425b      	negs	r3, r3
     384:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
     386:	4b1a      	ldr	r3, [pc, #104]	; (3f0 <nm_bus_init+0xdc>)
     388:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
     38a:	4b1a      	ldr	r3, [pc, #104]	; (3f4 <nm_bus_init+0xe0>)
     38c:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
     38e:	4b1a      	ldr	r3, [pc, #104]	; (3f8 <nm_bus_init+0xe4>)
     390:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
     392:	0022      	movs	r2, r4
     394:	4919      	ldr	r1, [pc, #100]	; (3fc <nm_bus_init+0xe8>)
     396:	481a      	ldr	r0, [pc, #104]	; (400 <nm_bus_init+0xec>)
     398:	4b1a      	ldr	r3, [pc, #104]	; (404 <nm_bus_init+0xf0>)
     39a:	4798      	blx	r3
     39c:	2800      	cmp	r0, #0
     39e:	d11a      	bne.n	3d6 <nm_bus_init+0xc2>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     3a0:	4d17      	ldr	r5, [pc, #92]	; (400 <nm_bus_init+0xec>)
     3a2:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     3a4:	0020      	movs	r0, r4
     3a6:	4b18      	ldr	r3, [pc, #96]	; (408 <nm_bus_init+0xf4>)
     3a8:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     3aa:	231f      	movs	r3, #31
     3ac:	4018      	ands	r0, r3
     3ae:	3b1e      	subs	r3, #30
     3b0:	4083      	lsls	r3, r0
     3b2:	4a16      	ldr	r2, [pc, #88]	; (40c <nm_bus_init+0xf8>)
     3b4:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     3b6:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     3b8:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
     3ba:	2b00      	cmp	r3, #0
     3bc:	d1fc      	bne.n	3b8 <nm_bus_init+0xa4>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     3be:	6823      	ldr	r3, [r4, #0]
     3c0:	2202      	movs	r2, #2
     3c2:	4313      	orrs	r3, r2
     3c4:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
     3c6:	4b12      	ldr	r3, [pc, #72]	; (410 <nm_bus_init+0xfc>)
     3c8:	4798      	blx	r3
	nm_bsp_sleep(1);
     3ca:	2001      	movs	r0, #1
     3cc:	4b11      	ldr	r3, [pc, #68]	; (414 <nm_bus_init+0x100>)
     3ce:	4798      	blx	r3
#endif
	return result;
     3d0:	2000      	movs	r0, #0
}
     3d2:	b011      	add	sp, #68	; 0x44
     3d4:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
     3d6:	2006      	movs	r0, #6
     3d8:	4240      	negs	r0, r0
     3da:	e7fa      	b.n	3d2 <nm_bus_init+0xbe>
     3dc:	20000290 	.word	0x20000290
     3e0:	000035c1 	.word	0x000035c1
     3e4:	41004400 	.word	0x41004400
     3e8:	00006db3 	.word	0x00006db3
     3ec:	00040003 	.word	0x00040003
     3f0:	00060003 	.word	0x00060003
     3f4:	00070003 	.word	0x00070003
     3f8:	00b71b00 	.word	0x00b71b00
     3fc:	42000800 	.word	0x42000800
     400:	20000294 	.word	0x20000294
     404:	00003a29 	.word	0x00003a29
     408:	00003999 	.word	0x00003999
     40c:	e000e100 	.word	0xe000e100
     410:	000001f9 	.word	0x000001f9
     414:	000001e1 	.word	0x000001e1

00000418 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
     418:	b5f0      	push	{r4, r5, r6, r7, lr}
     41a:	46de      	mov	lr, fp
     41c:	4657      	mov	r7, sl
     41e:	464e      	mov	r6, r9
     420:	4645      	mov	r5, r8
     422:	b5e0      	push	{r5, r6, r7, lr}
     424:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
     426:	2803      	cmp	r0, #3
     428:	d000      	beq.n	42c <nm_bus_ioctl+0x14>
     42a:	e075      	b.n	518 <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
     42c:	680e      	ldr	r6, [r1, #0]
     42e:	684d      	ldr	r5, [r1, #4]
     430:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
     432:	2200      	movs	r2, #0
     434:	466b      	mov	r3, sp
     436:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
     438:	2d00      	cmp	r5, #0
     43a:	d027      	beq.n	48c <nm_bus_ioctl+0x74>
     43c:	2c00      	cmp	r4, #0
     43e:	d065      	beq.n	50c <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
     440:	2e00      	cmp	r6, #0
     442:	d100      	bne.n	446 <nm_bus_ioctl+0x2e>
     444:	e077      	b.n	536 <nm_bus_ioctl+0x11e>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     446:	2300      	movs	r3, #0
     448:	4698      	mov	r8, r3
     44a:	2300      	movs	r3, #0
     44c:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
     44e:	2201      	movs	r2, #1
     450:	493b      	ldr	r1, [pc, #236]	; (540 <nm_bus_ioctl+0x128>)
     452:	483c      	ldr	r0, [pc, #240]	; (544 <nm_bus_ioctl+0x12c>)
     454:	4b3c      	ldr	r3, [pc, #240]	; (548 <nm_bus_ioctl+0x130>)
     456:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     458:	4b3a      	ldr	r3, [pc, #232]	; (544 <nm_bus_ioctl+0x12c>)
     45a:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
     45c:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
     45e:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     460:	4699      	mov	r9, r3
			pu8Miso++;
     462:	4659      	mov	r1, fp
     464:	424b      	negs	r3, r1
     466:	4159      	adcs	r1, r3
     468:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
     46a:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     46c:	4653      	mov	r3, sl
     46e:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     470:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
     472:	4239      	tst	r1, r7
     474:	d0fc      	beq.n	470 <nm_bus_ioctl+0x58>
     476:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     478:	4239      	tst	r1, r7
     47a:	d0fc      	beq.n	476 <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     47c:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     47e:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
     480:	4211      	tst	r1, r2
     482:	d0fc      	beq.n	47e <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     484:	4649      	mov	r1, r9
     486:	7989      	ldrb	r1, [r1, #6]
     488:	468c      	mov	ip, r1
     48a:	e011      	b.n	4b0 <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
     48c:	2e00      	cmp	r6, #0
     48e:	d03a      	beq.n	506 <nm_bus_ioctl+0xee>
     490:	2c00      	cmp	r4, #0
     492:	d03e      	beq.n	512 <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     494:	2300      	movs	r3, #0
     496:	4698      	mov	r8, r3
		u8SkipMiso = 1;
     498:	3301      	adds	r3, #1
     49a:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
     49c:	466b      	mov	r3, sp
     49e:	1ddd      	adds	r5, r3, #7
     4a0:	e7d5      	b.n	44e <nm_bus_ioctl+0x36>
     4a2:	4660      	mov	r0, ip
     4a4:	2801      	cmp	r0, #1
     4a6:	d00d      	beq.n	4c4 <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     4a8:	6a98      	ldr	r0, [r3, #40]	; 0x28
     4aa:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
     4ac:	2900      	cmp	r1, #0
     4ae:	d00d      	beq.n	4cc <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     4b0:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     4b2:	4211      	tst	r1, r2
     4b4:	d0fc      	beq.n	4b0 <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     4b6:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
     4b8:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     4ba:	4210      	tst	r0, r2
     4bc:	d0f1      	beq.n	4a2 <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     4be:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
     4c0:	311e      	adds	r1, #30
     4c2:	e7ee      	b.n	4a2 <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     4c4:	6a98      	ldr	r0, [r3, #40]	; 0x28
     4c6:	05c0      	lsls	r0, r0, #23
     4c8:	0dc0      	lsrs	r0, r0, #23
     4ca:	e7ef      	b.n	4ac <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
     4cc:	7028      	strb	r0, [r5, #0]
		u16Sz--;
     4ce:	3c01      	subs	r4, #1
     4d0:	b2a4      	uxth	r4, r4
			pu8Miso++;
     4d2:	445d      	add	r5, fp
			pu8Mosi++;
     4d4:	4643      	mov	r3, r8
     4d6:	4259      	negs	r1, r3
     4d8:	414b      	adcs	r3, r1
     4da:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
     4dc:	2c00      	cmp	r4, #0
     4de:	d1c4      	bne.n	46a <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
     4e0:	4b18      	ldr	r3, [pc, #96]	; (544 <nm_bus_ioctl+0x12c>)
     4e2:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
     4e4:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     4e6:	7e0b      	ldrb	r3, [r1, #24]
     4e8:	4213      	tst	r3, r2
     4ea:	d0fc      	beq.n	4e6 <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
     4ec:	2200      	movs	r2, #0
     4ee:	4914      	ldr	r1, [pc, #80]	; (540 <nm_bus_ioctl+0x128>)
     4f0:	4814      	ldr	r0, [pc, #80]	; (544 <nm_bus_ioctl+0x12c>)
     4f2:	4b15      	ldr	r3, [pc, #84]	; (548 <nm_bus_ioctl+0x130>)
     4f4:	4798      	blx	r3
	return M2M_SUCCESS;
     4f6:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
     4f8:	b003      	add	sp, #12
     4fa:	bc3c      	pop	{r2, r3, r4, r5}
     4fc:	4690      	mov	r8, r2
     4fe:	4699      	mov	r9, r3
     500:	46a2      	mov	sl, r4
     502:	46ab      	mov	fp, r5
     504:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
     506:	200f      	movs	r0, #15
     508:	4240      	negs	r0, r0
     50a:	e7f5      	b.n	4f8 <nm_bus_ioctl+0xe0>
     50c:	200f      	movs	r0, #15
     50e:	4240      	negs	r0, r0
     510:	e7f2      	b.n	4f8 <nm_bus_ioctl+0xe0>
     512:	200f      	movs	r0, #15
     514:	4240      	negs	r0, r0
		break;
     516:	e7ef      	b.n	4f8 <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
     518:	220e      	movs	r2, #14
     51a:	32ff      	adds	r2, #255	; 0xff
     51c:	490b      	ldr	r1, [pc, #44]	; (54c <nm_bus_ioctl+0x134>)
     51e:	480c      	ldr	r0, [pc, #48]	; (550 <nm_bus_ioctl+0x138>)
     520:	4b0c      	ldr	r3, [pc, #48]	; (554 <nm_bus_ioctl+0x13c>)
     522:	4798      	blx	r3
     524:	480c      	ldr	r0, [pc, #48]	; (558 <nm_bus_ioctl+0x140>)
     526:	4b0d      	ldr	r3, [pc, #52]	; (55c <nm_bus_ioctl+0x144>)
     528:	4798      	blx	r3
     52a:	200d      	movs	r0, #13
     52c:	4b0c      	ldr	r3, [pc, #48]	; (560 <nm_bus_ioctl+0x148>)
     52e:	4798      	blx	r3
			s8Ret = -1;
     530:	2001      	movs	r0, #1
     532:	4240      	negs	r0, r0
	return s8Ret;
     534:	e7e0      	b.n	4f8 <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
     536:	2301      	movs	r3, #1
     538:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
     53a:	466b      	mov	r3, sp
     53c:	1dde      	adds	r6, r3, #7
     53e:	e784      	b.n	44a <nm_bus_ioctl+0x32>
     540:	20000290 	.word	0x20000290
     544:	20000294 	.word	0x20000294
     548:	00003c01 	.word	0x00003c01
     54c:	000082c0 	.word	0x000082c0
     550:	000082d0 	.word	0x000082d0
     554:	00006f15 	.word	0x00006f15
     558:	000082e4 	.word	0x000082e4
     55c:	00007031 	.word	0x00007031
     560:	00006f49 	.word	0x00006f49

00000564 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
     564:	b530      	push	{r4, r5, lr}
     566:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
     568:	ab01      	add	r3, sp, #4
     56a:	2200      	movs	r2, #0
     56c:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
     56e:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
     570:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
     572:	4d13      	ldr	r5, [pc, #76]	; (5c0 <nm_bus_deinit+0x5c>)
     574:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     576:	0020      	movs	r0, r4
     578:	4b12      	ldr	r3, [pc, #72]	; (5c4 <nm_bus_deinit+0x60>)
     57a:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     57c:	231f      	movs	r3, #31
     57e:	4018      	ands	r0, r3
     580:	3b1e      	subs	r3, #30
     582:	4083      	lsls	r3, r0
     584:	2280      	movs	r2, #128	; 0x80
     586:	4910      	ldr	r1, [pc, #64]	; (5c8 <nm_bus_deinit+0x64>)
     588:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
     58a:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     58c:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
     58e:	2b00      	cmp	r3, #0
     590:	d1fc      	bne.n	58c <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
     592:	338f      	adds	r3, #143	; 0x8f
     594:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
     596:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     598:	6823      	ldr	r3, [r4, #0]
     59a:	2202      	movs	r2, #2
     59c:	4393      	bics	r3, r2
     59e:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
     5a0:	a901      	add	r1, sp, #4
     5a2:	2006      	movs	r0, #6
     5a4:	4c09      	ldr	r4, [pc, #36]	; (5cc <nm_bus_deinit+0x68>)
     5a6:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
     5a8:	a901      	add	r1, sp, #4
     5aa:	2004      	movs	r0, #4
     5ac:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
     5ae:	a901      	add	r1, sp, #4
     5b0:	2007      	movs	r0, #7
     5b2:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
     5b4:	a901      	add	r1, sp, #4
     5b6:	2005      	movs	r0, #5
     5b8:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
     5ba:	2000      	movs	r0, #0
     5bc:	b003      	add	sp, #12
     5be:	bd30      	pop	{r4, r5, pc}
     5c0:	20000294 	.word	0x20000294
     5c4:	00003999 	.word	0x00003999
     5c8:	e000e100 	.word	0xe000e100
     5cc:	000035c1 	.word	0x000035c1

000005d0 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
     5d0:	2a00      	cmp	r2, #0
     5d2:	d006      	beq.n	5e2 <m2m_memcpy+0x12>
     5d4:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
     5d6:	780b      	ldrb	r3, [r1, #0]
     5d8:	7003      	strb	r3, [r0, #0]
		pDst++;
     5da:	3001      	adds	r0, #1
		pSrc++;
     5dc:	3101      	adds	r1, #1
	}while(--sz);
     5de:	4290      	cmp	r0, r2
     5e0:	d1f9      	bne.n	5d6 <m2m_memcpy+0x6>
}
     5e2:	4770      	bx	lr

000005e4 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
     5e4:	2a00      	cmp	r2, #0
     5e6:	d004      	beq.n	5f2 <m2m_memset+0xe>
     5e8:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
     5ea:	7001      	strb	r1, [r0, #0]
		pBuf++;
     5ec:	3001      	adds	r0, #1
	}while(--sz);
     5ee:	4290      	cmp	r0, r2
     5f0:	d1fb      	bne.n	5ea <m2m_memset+0x6>
}
     5f2:	4770      	bx	lr

000005f4 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
     5f4:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
     5f6:	7802      	ldrb	r2, [r0, #0]
     5f8:	2a00      	cmp	r2, #0
     5fa:	d007      	beq.n	60c <m2m_strlen+0x18>
     5fc:	2000      	movs	r0, #0
	{
		u16StrLen ++;
     5fe:	3001      	adds	r0, #1
     600:	b280      	uxth	r0, r0
		pcStr++;
     602:	3301      	adds	r3, #1
	while(*pcStr)
     604:	781a      	ldrb	r2, [r3, #0]
     606:	2a00      	cmp	r2, #0
     608:	d1f9      	bne.n	5fe <m2m_strlen+0xa>
	}
	return u16StrLen;
}
     60a:	4770      	bx	lr
	uint16	u16StrLen = 0;
     60c:	2000      	movs	r0, #0
     60e:	e7fc      	b.n	60a <m2m_strlen+0x16>

00000610 <isr>:

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
     610:	4a02      	ldr	r2, [pc, #8]	; (61c <isr+0xc>)
     612:	78d3      	ldrb	r3, [r2, #3]
     614:	3301      	adds	r3, #1
     616:	b2db      	uxtb	r3, r3
     618:	70d3      	strb	r3, [r2, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
     61a:	4770      	bx	lr
     61c:	200002d0 	.word	0x200002d0

00000620 <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
     620:	4770      	bx	lr
	...

00000624 <hif_set_rx_done>:
{
     624:	b500      	push	{lr}
     626:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
     628:	2200      	movs	r2, #0
     62a:	4b0a      	ldr	r3, [pc, #40]	; (654 <hif_set_rx_done+0x30>)
     62c:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
     62e:	2001      	movs	r0, #1
     630:	4b09      	ldr	r3, [pc, #36]	; (658 <hif_set_rx_done+0x34>)
     632:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
     634:	a901      	add	r1, sp, #4
     636:	4809      	ldr	r0, [pc, #36]	; (65c <hif_set_rx_done+0x38>)
     638:	4b09      	ldr	r3, [pc, #36]	; (660 <hif_set_rx_done+0x3c>)
     63a:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
     63c:	2800      	cmp	r0, #0
     63e:	d001      	beq.n	644 <hif_set_rx_done+0x20>
}
     640:	b003      	add	sp, #12
     642:	bd00      	pop	{pc}
	reg |= NBIT1;
     644:	2102      	movs	r1, #2
     646:	9b01      	ldr	r3, [sp, #4]
     648:	4319      	orrs	r1, r3
     64a:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     64c:	4803      	ldr	r0, [pc, #12]	; (65c <hif_set_rx_done+0x38>)
     64e:	4b05      	ldr	r3, [pc, #20]	; (664 <hif_set_rx_done+0x40>)
     650:	4798      	blx	r3
     652:	e7f5      	b.n	640 <hif_set_rx_done+0x1c>
     654:	200002d0 	.word	0x200002d0
     658:	000002f1 	.word	0x000002f1
     65c:	00001070 	.word	0x00001070
     660:	00001a2d 	.word	0x00001a2d
     664:	00001a39 	.word	0x00001a39

00000668 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
     668:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
     66a:	4b0c      	ldr	r3, [pc, #48]	; (69c <hif_chip_wake+0x34>)
     66c:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
     66e:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
     670:	2b00      	cmp	r3, #0
     672:	d10d      	bne.n	690 <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
     674:	4b09      	ldr	r3, [pc, #36]	; (69c <hif_chip_wake+0x34>)
     676:	785b      	ldrb	r3, [r3, #1]
     678:	2b00      	cmp	r3, #0
     67a:	d103      	bne.n	684 <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
     67c:	4b07      	ldr	r3, [pc, #28]	; (69c <hif_chip_wake+0x34>)
     67e:	781b      	ldrb	r3, [r3, #0]
     680:	2b00      	cmp	r3, #0
     682:	d106      	bne.n	692 <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
     684:	4a05      	ldr	r2, [pc, #20]	; (69c <hif_chip_wake+0x34>)
     686:	7853      	ldrb	r3, [r2, #1]
     688:	3301      	adds	r3, #1
     68a:	b2db      	uxtb	r3, r3
     68c:	7053      	strb	r3, [r2, #1]
     68e:	2000      	movs	r0, #0
ERR1:
	return ret;
}
     690:	bd10      	pop	{r4, pc}
			ret = chip_wake();
     692:	4b03      	ldr	r3, [pc, #12]	; (6a0 <hif_chip_wake+0x38>)
     694:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
     696:	2800      	cmp	r0, #0
     698:	d0f4      	beq.n	684 <hif_chip_wake+0x1c>
     69a:	e7f9      	b.n	690 <hif_chip_wake+0x28>
     69c:	200002d0 	.word	0x200002d0
     6a0:	00001715 	.word	0x00001715

000006a4 <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
     6a4:	4b05      	ldr	r3, [pc, #20]	; (6bc <hif_chip_sleep_sc+0x18>)
     6a6:	785b      	ldrb	r3, [r3, #1]
     6a8:	2b00      	cmp	r3, #0
     6aa:	d004      	beq.n	6b6 <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
     6ac:	4a03      	ldr	r2, [pc, #12]	; (6bc <hif_chip_sleep_sc+0x18>)
     6ae:	7853      	ldrb	r3, [r2, #1]
     6b0:	3b01      	subs	r3, #1
     6b2:	b2db      	uxtb	r3, r3
     6b4:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
     6b6:	2000      	movs	r0, #0
     6b8:	4770      	bx	lr
     6ba:	46c0      	nop			; (mov r8, r8)
     6bc:	200002d0 	.word	0x200002d0

000006c0 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
     6c0:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
     6c2:	4b0b      	ldr	r3, [pc, #44]	; (6f0 <hif_chip_sleep+0x30>)
     6c4:	785b      	ldrb	r3, [r3, #1]
     6c6:	2b00      	cmp	r3, #0
     6c8:	d004      	beq.n	6d4 <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
     6ca:	4a09      	ldr	r2, [pc, #36]	; (6f0 <hif_chip_sleep+0x30>)
     6cc:	7853      	ldrb	r3, [r2, #1]
     6ce:	3b01      	subs	r3, #1
     6d0:	b2db      	uxtb	r3, r3
     6d2:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
     6d4:	4b06      	ldr	r3, [pc, #24]	; (6f0 <hif_chip_sleep+0x30>)
     6d6:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
     6d8:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
     6da:	2b00      	cmp	r3, #0
     6dc:	d103      	bne.n	6e6 <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
     6de:	4b04      	ldr	r3, [pc, #16]	; (6f0 <hif_chip_sleep+0x30>)
     6e0:	781b      	ldrb	r3, [r3, #0]
     6e2:	2b00      	cmp	r3, #0
     6e4:	d100      	bne.n	6e8 <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
     6e6:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
     6e8:	4b02      	ldr	r3, [pc, #8]	; (6f4 <hif_chip_sleep+0x34>)
     6ea:	4798      	blx	r3
     6ec:	e7fb      	b.n	6e6 <hif_chip_sleep+0x26>
     6ee:	46c0      	nop			; (mov r8, r8)
     6f0:	200002d0 	.word	0x200002d0
     6f4:	000016ad 	.word	0x000016ad

000006f8 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
     6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     6fa:	46de      	mov	lr, fp
     6fc:	4657      	mov	r7, sl
     6fe:	b580      	push	{r7, lr}
     700:	b089      	sub	sp, #36	; 0x24
     702:	4683      	mov	fp, r0
     704:	468a      	mov	sl, r1
     706:	9201      	str	r2, [sp, #4]
     708:	9300      	str	r3, [sp, #0]
     70a:	ab10      	add	r3, sp, #64	; 0x40
     70c:	cb80      	ldmia	r3!, {r7}
     70e:	881e      	ldrh	r6, [r3, #0]
     710:	ab12      	add	r3, sp, #72	; 0x48
     712:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
     714:	227f      	movs	r2, #127	; 0x7f
     716:	400a      	ands	r2, r1
     718:	ab07      	add	r3, sp, #28
     71a:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
     71c:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
     71e:	2208      	movs	r2, #8
     720:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
     722:	2f00      	cmp	r7, #0
     724:	d03d      	beq.n	7a2 <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
     726:	885a      	ldrh	r2, [r3, #2]
     728:	1992      	adds	r2, r2, r6
     72a:	18aa      	adds	r2, r5, r2
     72c:	b292      	uxth	r2, r2
     72e:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
     730:	4b69      	ldr	r3, [pc, #420]	; (8d8 <hif_send+0x1e0>)
     732:	4798      	blx	r3
     734:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
     736:	d000      	beq.n	73a <hif_send+0x42>
     738:	e0c1      	b.n	8be <hif_send+0x1c6>
	{
		volatile uint32 reg, dma_addr = 0;
     73a:	2300      	movs	r3, #0
     73c:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
     73e:	aa02      	add	r2, sp, #8
     740:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
     742:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
     744:	9b04      	ldr	r3, [sp, #16]
     746:	465a      	mov	r2, fp
     748:	431a      	orrs	r2, r3
     74a:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
     74c:	9a04      	ldr	r2, [sp, #16]
     74e:	4653      	mov	r3, sl
     750:	021b      	lsls	r3, r3, #8
     752:	4313      	orrs	r3, r2
     754:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
     756:	ab07      	add	r3, sp, #28
     758:	885b      	ldrh	r3, [r3, #2]
     75a:	9a04      	ldr	r2, [sp, #16]
     75c:	041b      	lsls	r3, r3, #16
     75e:	4313      	orrs	r3, r2
     760:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
     762:	9904      	ldr	r1, [sp, #16]
     764:	485d      	ldr	r0, [pc, #372]	; (8dc <hif_send+0x1e4>)
     766:	4b5e      	ldr	r3, [pc, #376]	; (8e0 <hif_send+0x1e8>)
     768:	4798      	blx	r3
     76a:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
     76c:	d157      	bne.n	81e <hif_send+0x126>

		reg = 0UL;
     76e:	2300      	movs	r3, #0
     770:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
     772:	9b04      	ldr	r3, [sp, #16]
     774:	2202      	movs	r2, #2
     776:	4313      	orrs	r3, r2
     778:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
     77a:	9904      	ldr	r1, [sp, #16]
     77c:	4859      	ldr	r0, [pc, #356]	; (8e4 <hif_send+0x1ec>)
     77e:	4b58      	ldr	r3, [pc, #352]	; (8e0 <hif_send+0x1e8>)
     780:	4798      	blx	r3
     782:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
     784:	d14b      	bne.n	81e <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
     786:	2200      	movs	r2, #0
     788:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
     78a:	ab02      	add	r3, sp, #8
     78c:	80da      	strh	r2, [r3, #6]
     78e:	3306      	adds	r3, #6
     790:	881b      	ldrh	r3, [r3, #0]
     792:	b29b      	uxth	r3, r3
     794:	4a54      	ldr	r2, [pc, #336]	; (8e8 <hif_send+0x1f0>)
     796:	4293      	cmp	r3, r2
     798:	d849      	bhi.n	82e <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
     79a:	4c54      	ldr	r4, [pc, #336]	; (8ec <hif_send+0x1f4>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
     79c:	4b54      	ldr	r3, [pc, #336]	; (8f0 <hif_send+0x1f8>)
     79e:	469a      	mov	sl, r3
     7a0:	e017      	b.n	7d2 <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
     7a2:	ab07      	add	r3, sp, #28
     7a4:	885a      	ldrh	r2, [r3, #2]
     7a6:	9900      	ldr	r1, [sp, #0]
     7a8:	468c      	mov	ip, r1
     7aa:	4462      	add	r2, ip
     7ac:	b292      	uxth	r2, r2
     7ae:	805a      	strh	r2, [r3, #2]
     7b0:	e7be      	b.n	730 <hif_send+0x38>
				nm_bsp_sleep(1);
     7b2:	2001      	movs	r0, #1
     7b4:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
     7b6:	9b04      	ldr	r3, [sp, #16]
     7b8:	079b      	lsls	r3, r3, #30
     7ba:	d528      	bpl.n	80e <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
     7bc:	ab02      	add	r3, sp, #8
     7be:	88da      	ldrh	r2, [r3, #6]
     7c0:	3201      	adds	r2, #1
     7c2:	b292      	uxth	r2, r2
     7c4:	80da      	strh	r2, [r3, #6]
     7c6:	3306      	adds	r3, #6
     7c8:	881b      	ldrh	r3, [r3, #0]
     7ca:	b29b      	uxth	r3, r3
     7cc:	4a46      	ldr	r2, [pc, #280]	; (8e8 <hif_send+0x1f0>)
     7ce:	4293      	cmp	r3, r2
     7d0:	d82d      	bhi.n	82e <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
     7d2:	a904      	add	r1, sp, #16
     7d4:	4843      	ldr	r0, [pc, #268]	; (8e4 <hif_send+0x1ec>)
     7d6:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
     7d8:	2800      	cmp	r0, #0
     7da:	d128      	bne.n	82e <hif_send+0x136>
			if(cnt >= 500) {
     7dc:	ab02      	add	r3, sp, #8
     7de:	3306      	adds	r3, #6
     7e0:	881b      	ldrh	r3, [r3, #0]
     7e2:	b29b      	uxth	r3, r3
     7e4:	22f4      	movs	r2, #244	; 0xf4
     7e6:	32ff      	adds	r2, #255	; 0xff
     7e8:	4293      	cmp	r3, r2
     7ea:	d9e4      	bls.n	7b6 <hif_send+0xbe>
				if(cnt < 501) {
     7ec:	ab02      	add	r3, sp, #8
     7ee:	3306      	adds	r3, #6
     7f0:	881b      	ldrh	r3, [r3, #0]
     7f2:	b29b      	uxth	r3, r3
     7f4:	3201      	adds	r2, #1
     7f6:	4293      	cmp	r3, r2
     7f8:	d8db      	bhi.n	7b2 <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
     7fa:	483e      	ldr	r0, [pc, #248]	; (8f4 <hif_send+0x1fc>)
     7fc:	4b3e      	ldr	r3, [pc, #248]	; (8f8 <hif_send+0x200>)
     7fe:	4798      	blx	r3
     800:	483e      	ldr	r0, [pc, #248]	; (8fc <hif_send+0x204>)
     802:	4b3f      	ldr	r3, [pc, #252]	; (900 <hif_send+0x208>)
     804:	4798      	blx	r3
     806:	200d      	movs	r0, #13
     808:	4b3e      	ldr	r3, [pc, #248]	; (904 <hif_send+0x20c>)
     80a:	4798      	blx	r3
     80c:	e7d1      	b.n	7b2 <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
     80e:	a905      	add	r1, sp, #20
     810:	483d      	ldr	r0, [pc, #244]	; (908 <hif_send+0x210>)
     812:	4b36      	ldr	r3, [pc, #216]	; (8ec <hif_send+0x1f4>)
     814:	4798      	blx	r3
     816:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
     818:	d009      	beq.n	82e <hif_send+0x136>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
     81a:	2300      	movs	r3, #0
     81c:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
     81e:	4b3b      	ldr	r3, [pc, #236]	; (90c <hif_send+0x214>)
     820:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
     822:	0020      	movs	r0, r4
     824:	b009      	add	sp, #36	; 0x24
     826:	bc0c      	pop	{r2, r3}
     828:	4692      	mov	sl, r2
     82a:	469b      	mov	fp, r3
     82c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
     82e:	9b05      	ldr	r3, [sp, #20]
     830:	2b00      	cmp	r3, #0
     832:	d03f      	beq.n	8b4 <hif_send+0x1bc>
			u32CurrAddr = dma_addr;
     834:	9b05      	ldr	r3, [sp, #20]
     836:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
     838:	a907      	add	r1, sp, #28
     83a:	884b      	ldrh	r3, [r1, #2]
     83c:	b29b      	uxth	r3, r3
     83e:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
     840:	9806      	ldr	r0, [sp, #24]
     842:	2208      	movs	r2, #8
     844:	4b32      	ldr	r3, [pc, #200]	; (910 <hif_send+0x218>)
     846:	4798      	blx	r3
     848:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
     84a:	d1e8      	bne.n	81e <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
     84c:	9b06      	ldr	r3, [sp, #24]
     84e:	3308      	adds	r3, #8
     850:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
     852:	9b01      	ldr	r3, [sp, #4]
     854:	2b00      	cmp	r3, #0
     856:	d00b      	beq.n	870 <hif_send+0x178>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
     858:	9806      	ldr	r0, [sp, #24]
     85a:	9a00      	ldr	r2, [sp, #0]
     85c:	0019      	movs	r1, r3
     85e:	4b2c      	ldr	r3, [pc, #176]	; (910 <hif_send+0x218>)
     860:	4798      	blx	r3
     862:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
     864:	d1db      	bne.n	81e <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
     866:	9b06      	ldr	r3, [sp, #24]
     868:	9a00      	ldr	r2, [sp, #0]
     86a:	4694      	mov	ip, r2
     86c:	4463      	add	r3, ip
     86e:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
     870:	2f00      	cmp	r7, #0
     872:	d00e      	beq.n	892 <hif_send+0x19a>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
     874:	9b06      	ldr	r3, [sp, #24]
     876:	9a00      	ldr	r2, [sp, #0]
     878:	1aad      	subs	r5, r5, r2
     87a:	18ed      	adds	r5, r5, r3
     87c:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
     87e:	9806      	ldr	r0, [sp, #24]
     880:	0032      	movs	r2, r6
     882:	0039      	movs	r1, r7
     884:	4b22      	ldr	r3, [pc, #136]	; (910 <hif_send+0x218>)
     886:	4798      	blx	r3
     888:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
     88a:	d1c8      	bne.n	81e <hif_send+0x126>
				u32CurrAddr += u16DataSize;
     88c:	9b06      	ldr	r3, [sp, #24]
     88e:	18f3      	adds	r3, r6, r3
     890:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
     892:	9b05      	ldr	r3, [sp, #20]
     894:	009b      	lsls	r3, r3, #2
     896:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
     898:	9b04      	ldr	r3, [sp, #16]
     89a:	2202      	movs	r2, #2
     89c:	4313      	orrs	r3, r2
     89e:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
     8a0:	9904      	ldr	r1, [sp, #16]
     8a2:	481c      	ldr	r0, [pc, #112]	; (914 <hif_send+0x21c>)
     8a4:	4b0e      	ldr	r3, [pc, #56]	; (8e0 <hif_send+0x1e8>)
     8a6:	4798      	blx	r3
     8a8:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
     8aa:	d1b8      	bne.n	81e <hif_send+0x126>
 	ret = hif_chip_sleep();
     8ac:	4b1a      	ldr	r3, [pc, #104]	; (918 <hif_send+0x220>)
     8ae:	4798      	blx	r3
     8b0:	0004      	movs	r4, r0
	return ret;
     8b2:	e7b6      	b.n	822 <hif_send+0x12a>
			ret = hif_chip_sleep();
     8b4:	4b18      	ldr	r3, [pc, #96]	; (918 <hif_send+0x220>)
     8b6:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
     8b8:	2403      	movs	r4, #3
     8ba:	4264      	negs	r4, r4
			goto ERR2;
     8bc:	e7b1      	b.n	822 <hif_send+0x12a>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
     8be:	22cb      	movs	r2, #203	; 0xcb
     8c0:	0052      	lsls	r2, r2, #1
     8c2:	4916      	ldr	r1, [pc, #88]	; (91c <hif_send+0x224>)
     8c4:	4816      	ldr	r0, [pc, #88]	; (920 <hif_send+0x228>)
     8c6:	4b0c      	ldr	r3, [pc, #48]	; (8f8 <hif_send+0x200>)
     8c8:	4798      	blx	r3
     8ca:	4816      	ldr	r0, [pc, #88]	; (924 <hif_send+0x22c>)
     8cc:	4b0c      	ldr	r3, [pc, #48]	; (900 <hif_send+0x208>)
     8ce:	4798      	blx	r3
     8d0:	200d      	movs	r0, #13
     8d2:	4b0c      	ldr	r3, [pc, #48]	; (904 <hif_send+0x20c>)
     8d4:	4798      	blx	r3
		goto ERR2;
     8d6:	e7a4      	b.n	822 <hif_send+0x12a>
     8d8:	00000669 	.word	0x00000669
     8dc:	0000108c 	.word	0x0000108c
     8e0:	00001a39 	.word	0x00001a39
     8e4:	00001078 	.word	0x00001078
     8e8:	000003e7 	.word	0x000003e7
     8ec:	00001a2d 	.word	0x00001a2d
     8f0:	000001e1 	.word	0x000001e1
     8f4:	00008600 	.word	0x00008600
     8f8:	00006f15 	.word	0x00006f15
     8fc:	0000860c 	.word	0x0000860c
     900:	00007031 	.word	0x00007031
     904:	00006f49 	.word	0x00006f49
     908:	00150400 	.word	0x00150400
     90c:	000006a5 	.word	0x000006a5
     910:	00001aad 	.word	0x00001aad
     914:	0000106c 	.word	0x0000106c
     918:	000006c1 	.word	0x000006c1
     91c:	00008318 	.word	0x00008318
     920:	000082d0 	.word	0x000082d0
     924:	0000861c 	.word	0x0000861c

00000928 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
     928:	b5f0      	push	{r4, r5, r6, r7, lr}
     92a:	46ce      	mov	lr, r9
     92c:	4647      	mov	r7, r8
     92e:	b580      	push	{r7, lr}
     930:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	while (gstrHifCxt.u8Interrupt) {
     932:	4bcf      	ldr	r3, [pc, #828]	; (c70 <hif_handle_isr+0x348>)
     934:	4698      	mov	r8, r3
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
     936:	4699      	mov	r9, r3
	while (gstrHifCxt.u8Interrupt) {
     938:	e080      	b.n	a3c <hif_handle_isr+0x114>
				gstrHifCxt.u32RxAddr = address;
     93a:	4bcd      	ldr	r3, [pc, #820]	; (c70 <hif_handle_isr+0x348>)
     93c:	9a05      	ldr	r2, [sp, #20]
     93e:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
     940:	609d      	str	r5, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
     942:	af04      	add	r7, sp, #16
     944:	2204      	movs	r2, #4
     946:	0039      	movs	r1, r7
     948:	9805      	ldr	r0, [sp, #20]
     94a:	4bca      	ldr	r3, [pc, #808]	; (c74 <hif_handle_isr+0x34c>)
     94c:	4798      	blx	r3
     94e:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
     950:	887b      	ldrh	r3, [r7, #2]
     952:	b29b      	uxth	r3, r3
     954:	807b      	strh	r3, [r7, #2]
				if(M2M_SUCCESS != ret)
     956:	2800      	cmp	r0, #0
     958:	d133      	bne.n	9c2 <hif_handle_isr+0x9a>
				if(strHif.u16Length != size)
     95a:	ab04      	add	r3, sp, #16
     95c:	885b      	ldrh	r3, [r3, #2]
     95e:	b29b      	uxth	r3, r3
     960:	429d      	cmp	r5, r3
     962:	d004      	beq.n	96e <hif_handle_isr+0x46>
					if((size - strHif.u16Length) > 4)
     964:	ab04      	add	r3, sp, #16
     966:	885b      	ldrh	r3, [r3, #2]
     968:	1aeb      	subs	r3, r5, r3
     96a:	2b04      	cmp	r3, #4
     96c:	dc39      	bgt.n	9e2 <hif_handle_isr+0xba>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
     96e:	ab04      	add	r3, sp, #16
     970:	781b      	ldrb	r3, [r3, #0]
     972:	2b01      	cmp	r3, #1
     974:	d04e      	beq.n	a14 <hif_handle_isr+0xec>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
     976:	ab04      	add	r3, sp, #16
     978:	781b      	ldrb	r3, [r3, #0]
     97a:	2b02      	cmp	r3, #2
     97c:	d078      	beq.n	a70 <hif_handle_isr+0x148>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
     97e:	ab04      	add	r3, sp, #16
     980:	781b      	ldrb	r3, [r3, #0]
     982:	2b04      	cmp	r3, #4
     984:	d100      	bne.n	988 <hif_handle_isr+0x60>
     986:	e090      	b.n	aaa <hif_handle_isr+0x182>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
     988:	ab04      	add	r3, sp, #16
     98a:	781b      	ldrb	r3, [r3, #0]
     98c:	2b06      	cmp	r3, #6
     98e:	d100      	bne.n	992 <hif_handle_isr+0x6a>
     990:	e0a8      	b.n	ae4 <hif_handle_isr+0x1bc>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
     992:	ab04      	add	r3, sp, #16
     994:	781b      	ldrb	r3, [r3, #0]
     996:	2b07      	cmp	r3, #7
     998:	d100      	bne.n	99c <hif_handle_isr+0x74>
     99a:	e0bf      	b.n	b1c <hif_handle_isr+0x1f4>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
     99c:	ab04      	add	r3, sp, #16
     99e:	781b      	ldrb	r3, [r3, #0]
     9a0:	2b05      	cmp	r3, #5
     9a2:	d100      	bne.n	9a6 <hif_handle_isr+0x7e>
     9a4:	e0d6      	b.n	b54 <hif_handle_isr+0x22c>
					M2M_ERR("(hif) invalid group ID\n");
     9a6:	4ab4      	ldr	r2, [pc, #720]	; (c78 <hif_handle_isr+0x350>)
     9a8:	49b4      	ldr	r1, [pc, #720]	; (c7c <hif_handle_isr+0x354>)
     9aa:	48b5      	ldr	r0, [pc, #724]	; (c80 <hif_handle_isr+0x358>)
     9ac:	4bb5      	ldr	r3, [pc, #724]	; (c84 <hif_handle_isr+0x35c>)
     9ae:	4798      	blx	r3
     9b0:	48b5      	ldr	r0, [pc, #724]	; (c88 <hif_handle_isr+0x360>)
     9b2:	4bb6      	ldr	r3, [pc, #728]	; (c8c <hif_handle_isr+0x364>)
     9b4:	4798      	blx	r3
     9b6:	200d      	movs	r0, #13
     9b8:	4bb5      	ldr	r3, [pc, #724]	; (c90 <hif_handle_isr+0x368>)
     9ba:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
     9bc:	2406      	movs	r4, #6
     9be:	4264      	negs	r4, r4
     9c0:	e116      	b.n	bf0 <hif_handle_isr+0x2c8>
					M2M_ERR("(hif) address bus fail\n");
     9c2:	22d2      	movs	r2, #210	; 0xd2
     9c4:	32ff      	adds	r2, #255	; 0xff
     9c6:	49ad      	ldr	r1, [pc, #692]	; (c7c <hif_handle_isr+0x354>)
     9c8:	48ad      	ldr	r0, [pc, #692]	; (c80 <hif_handle_isr+0x358>)
     9ca:	4bae      	ldr	r3, [pc, #696]	; (c84 <hif_handle_isr+0x35c>)
     9cc:	4798      	blx	r3
     9ce:	48b1      	ldr	r0, [pc, #708]	; (c94 <hif_handle_isr+0x36c>)
     9d0:	4bae      	ldr	r3, [pc, #696]	; (c8c <hif_handle_isr+0x364>)
     9d2:	4798      	blx	r3
     9d4:	200d      	movs	r0, #13
     9d6:	4bae      	ldr	r3, [pc, #696]	; (c90 <hif_handle_isr+0x368>)
     9d8:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
     9da:	2001      	movs	r0, #1
     9dc:	4bae      	ldr	r3, [pc, #696]	; (c98 <hif_handle_isr+0x370>)
     9de:	4798      	blx	r3
     9e0:	e106      	b.n	bf0 <hif_handle_isr+0x2c8>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
     9e2:	22ed      	movs	r2, #237	; 0xed
     9e4:	0052      	lsls	r2, r2, #1
     9e6:	49a5      	ldr	r1, [pc, #660]	; (c7c <hif_handle_isr+0x354>)
     9e8:	48a5      	ldr	r0, [pc, #660]	; (c80 <hif_handle_isr+0x358>)
     9ea:	4ca6      	ldr	r4, [pc, #664]	; (c84 <hif_handle_isr+0x35c>)
     9ec:	47a0      	blx	r4
     9ee:	a904      	add	r1, sp, #16
     9f0:	884a      	ldrh	r2, [r1, #2]
     9f2:	b292      	uxth	r2, r2
     9f4:	780b      	ldrb	r3, [r1, #0]
     9f6:	b2db      	uxtb	r3, r3
     9f8:	7849      	ldrb	r1, [r1, #1]
     9fa:	9100      	str	r1, [sp, #0]
     9fc:	0029      	movs	r1, r5
     9fe:	48a7      	ldr	r0, [pc, #668]	; (c9c <hif_handle_isr+0x374>)
     a00:	47a0      	blx	r4
     a02:	200d      	movs	r0, #13
     a04:	4ba2      	ldr	r3, [pc, #648]	; (c90 <hif_handle_isr+0x368>)
     a06:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
     a08:	2001      	movs	r0, #1
     a0a:	4ba3      	ldr	r3, [pc, #652]	; (c98 <hif_handle_isr+0x370>)
     a0c:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
     a0e:	2406      	movs	r4, #6
     a10:	4264      	negs	r4, r4
     a12:	e0ed      	b.n	bf0 <hif_handle_isr+0x2c8>
					if(gstrHifCxt.pfWifiCb)
     a14:	4b96      	ldr	r3, [pc, #600]	; (c70 <hif_handle_isr+0x348>)
     a16:	68db      	ldr	r3, [r3, #12]
     a18:	2b00      	cmp	r3, #0
     a1a:	d01c      	beq.n	a56 <hif_handle_isr+0x12e>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     a1c:	4b94      	ldr	r3, [pc, #592]	; (c70 <hif_handle_isr+0x348>)
     a1e:	68db      	ldr	r3, [r3, #12]
     a20:	aa04      	add	r2, sp, #16
     a22:	7850      	ldrb	r0, [r2, #1]
     a24:	b2c0      	uxtb	r0, r0
     a26:	8851      	ldrh	r1, [r2, #2]
     a28:	9a05      	ldr	r2, [sp, #20]
     a2a:	3208      	adds	r2, #8
     a2c:	3908      	subs	r1, #8
     a2e:	b289      	uxth	r1, r1
     a30:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
     a32:	4b8f      	ldr	r3, [pc, #572]	; (c70 <hif_handle_isr+0x348>)
     a34:	789b      	ldrb	r3, [r3, #2]
     a36:	2b00      	cmp	r3, #0
     a38:	d000      	beq.n	a3c <hif_handle_isr+0x114>
     a3a:	e09c      	b.n	b76 <hif_handle_isr+0x24e>
	while (gstrHifCxt.u8Interrupt) {
     a3c:	4643      	mov	r3, r8
     a3e:	78db      	ldrb	r3, [r3, #3]
     a40:	2b00      	cmp	r3, #0
     a42:	d100      	bne.n	a46 <hif_handle_isr+0x11e>
     a44:	e158      	b.n	cf8 <hif_handle_isr+0x3d0>
		gstrHifCxt.u8Interrupt--;
     a46:	464b      	mov	r3, r9
     a48:	78db      	ldrb	r3, [r3, #3]
     a4a:	3b01      	subs	r3, #1
     a4c:	b2db      	uxtb	r3, r3
     a4e:	464a      	mov	r2, r9
     a50:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
     a52:	4e93      	ldr	r6, [pc, #588]	; (ca0 <hif_handle_isr+0x378>)
     a54:	e0d7      	b.n	c06 <hif_handle_isr+0x2de>
						M2M_ERR("WIFI callback is not registered\n");
     a56:	22f3      	movs	r2, #243	; 0xf3
     a58:	0052      	lsls	r2, r2, #1
     a5a:	4988      	ldr	r1, [pc, #544]	; (c7c <hif_handle_isr+0x354>)
     a5c:	4888      	ldr	r0, [pc, #544]	; (c80 <hif_handle_isr+0x358>)
     a5e:	4b89      	ldr	r3, [pc, #548]	; (c84 <hif_handle_isr+0x35c>)
     a60:	4798      	blx	r3
     a62:	4890      	ldr	r0, [pc, #576]	; (ca4 <hif_handle_isr+0x37c>)
     a64:	4b89      	ldr	r3, [pc, #548]	; (c8c <hif_handle_isr+0x364>)
     a66:	4798      	blx	r3
     a68:	200d      	movs	r0, #13
     a6a:	4b89      	ldr	r3, [pc, #548]	; (c90 <hif_handle_isr+0x368>)
     a6c:	4798      	blx	r3
     a6e:	e7e0      	b.n	a32 <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfIpCb)
     a70:	4b7f      	ldr	r3, [pc, #508]	; (c70 <hif_handle_isr+0x348>)
     a72:	691b      	ldr	r3, [r3, #16]
     a74:	2b00      	cmp	r3, #0
     a76:	d00b      	beq.n	a90 <hif_handle_isr+0x168>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     a78:	4b7d      	ldr	r3, [pc, #500]	; (c70 <hif_handle_isr+0x348>)
     a7a:	691b      	ldr	r3, [r3, #16]
     a7c:	aa04      	add	r2, sp, #16
     a7e:	7850      	ldrb	r0, [r2, #1]
     a80:	b2c0      	uxtb	r0, r0
     a82:	8851      	ldrh	r1, [r2, #2]
     a84:	9a05      	ldr	r2, [sp, #20]
     a86:	3208      	adds	r2, #8
     a88:	3908      	subs	r1, #8
     a8a:	b289      	uxth	r1, r1
     a8c:	4798      	blx	r3
     a8e:	e7d0      	b.n	a32 <hif_handle_isr+0x10a>
						M2M_ERR("Scoket callback is not registered\n");
     a90:	22f7      	movs	r2, #247	; 0xf7
     a92:	0052      	lsls	r2, r2, #1
     a94:	4979      	ldr	r1, [pc, #484]	; (c7c <hif_handle_isr+0x354>)
     a96:	487a      	ldr	r0, [pc, #488]	; (c80 <hif_handle_isr+0x358>)
     a98:	4b7a      	ldr	r3, [pc, #488]	; (c84 <hif_handle_isr+0x35c>)
     a9a:	4798      	blx	r3
     a9c:	4882      	ldr	r0, [pc, #520]	; (ca8 <hif_handle_isr+0x380>)
     a9e:	4b7b      	ldr	r3, [pc, #492]	; (c8c <hif_handle_isr+0x364>)
     aa0:	4798      	blx	r3
     aa2:	200d      	movs	r0, #13
     aa4:	4b7a      	ldr	r3, [pc, #488]	; (c90 <hif_handle_isr+0x368>)
     aa6:	4798      	blx	r3
     aa8:	e7c3      	b.n	a32 <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfOtaCb)
     aaa:	4b71      	ldr	r3, [pc, #452]	; (c70 <hif_handle_isr+0x348>)
     aac:	695b      	ldr	r3, [r3, #20]
     aae:	2b00      	cmp	r3, #0
     ab0:	d00b      	beq.n	aca <hif_handle_isr+0x1a2>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     ab2:	4b6f      	ldr	r3, [pc, #444]	; (c70 <hif_handle_isr+0x348>)
     ab4:	695b      	ldr	r3, [r3, #20]
     ab6:	aa04      	add	r2, sp, #16
     ab8:	7850      	ldrb	r0, [r2, #1]
     aba:	b2c0      	uxtb	r0, r0
     abc:	8851      	ldrh	r1, [r2, #2]
     abe:	9a05      	ldr	r2, [sp, #20]
     ac0:	3208      	adds	r2, #8
     ac2:	3908      	subs	r1, #8
     ac4:	b289      	uxth	r1, r1
     ac6:	4798      	blx	r3
     ac8:	e7b3      	b.n	a32 <hif_handle_isr+0x10a>
						M2M_ERR("Ota callback is not registered\n");
     aca:	22fb      	movs	r2, #251	; 0xfb
     acc:	0052      	lsls	r2, r2, #1
     ace:	496b      	ldr	r1, [pc, #428]	; (c7c <hif_handle_isr+0x354>)
     ad0:	486b      	ldr	r0, [pc, #428]	; (c80 <hif_handle_isr+0x358>)
     ad2:	4b6c      	ldr	r3, [pc, #432]	; (c84 <hif_handle_isr+0x35c>)
     ad4:	4798      	blx	r3
     ad6:	4875      	ldr	r0, [pc, #468]	; (cac <hif_handle_isr+0x384>)
     ad8:	4b6c      	ldr	r3, [pc, #432]	; (c8c <hif_handle_isr+0x364>)
     ada:	4798      	blx	r3
     adc:	200d      	movs	r0, #13
     ade:	4b6c      	ldr	r3, [pc, #432]	; (c90 <hif_handle_isr+0x368>)
     ae0:	4798      	blx	r3
     ae2:	e7a6      	b.n	a32 <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfCryptoCb)
     ae4:	4b62      	ldr	r3, [pc, #392]	; (c70 <hif_handle_isr+0x348>)
     ae6:	6a1b      	ldr	r3, [r3, #32]
     ae8:	2b00      	cmp	r3, #0
     aea:	d00b      	beq.n	b04 <hif_handle_isr+0x1dc>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     aec:	4b60      	ldr	r3, [pc, #384]	; (c70 <hif_handle_isr+0x348>)
     aee:	6a1b      	ldr	r3, [r3, #32]
     af0:	aa04      	add	r2, sp, #16
     af2:	7850      	ldrb	r0, [r2, #1]
     af4:	b2c0      	uxtb	r0, r0
     af6:	8851      	ldrh	r1, [r2, #2]
     af8:	9a05      	ldr	r2, [sp, #20]
     afa:	3208      	adds	r2, #8
     afc:	3908      	subs	r1, #8
     afe:	b289      	uxth	r1, r1
     b00:	4798      	blx	r3
     b02:	e796      	b.n	a32 <hif_handle_isr+0x10a>
						M2M_ERR("Crypto callback is not registered\n");
     b04:	4a6a      	ldr	r2, [pc, #424]	; (cb0 <hif_handle_isr+0x388>)
     b06:	495d      	ldr	r1, [pc, #372]	; (c7c <hif_handle_isr+0x354>)
     b08:	485d      	ldr	r0, [pc, #372]	; (c80 <hif_handle_isr+0x358>)
     b0a:	4b5e      	ldr	r3, [pc, #376]	; (c84 <hif_handle_isr+0x35c>)
     b0c:	4798      	blx	r3
     b0e:	4869      	ldr	r0, [pc, #420]	; (cb4 <hif_handle_isr+0x38c>)
     b10:	4b5e      	ldr	r3, [pc, #376]	; (c8c <hif_handle_isr+0x364>)
     b12:	4798      	blx	r3
     b14:	200d      	movs	r0, #13
     b16:	4b5e      	ldr	r3, [pc, #376]	; (c90 <hif_handle_isr+0x368>)
     b18:	4798      	blx	r3
     b1a:	e78a      	b.n	a32 <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfSigmaCb)
     b1c:	4b54      	ldr	r3, [pc, #336]	; (c70 <hif_handle_isr+0x348>)
     b1e:	699b      	ldr	r3, [r3, #24]
     b20:	2b00      	cmp	r3, #0
     b22:	d00b      	beq.n	b3c <hif_handle_isr+0x214>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     b24:	4b52      	ldr	r3, [pc, #328]	; (c70 <hif_handle_isr+0x348>)
     b26:	699b      	ldr	r3, [r3, #24]
     b28:	aa04      	add	r2, sp, #16
     b2a:	7850      	ldrb	r0, [r2, #1]
     b2c:	b2c0      	uxtb	r0, r0
     b2e:	8851      	ldrh	r1, [r2, #2]
     b30:	9a05      	ldr	r2, [sp, #20]
     b32:	3208      	adds	r2, #8
     b34:	3908      	subs	r1, #8
     b36:	b289      	uxth	r1, r1
     b38:	4798      	blx	r3
     b3a:	e77a      	b.n	a32 <hif_handle_isr+0x10a>
						M2M_ERR("Sigma callback is not registered\n");
     b3c:	4a5e      	ldr	r2, [pc, #376]	; (cb8 <hif_handle_isr+0x390>)
     b3e:	494f      	ldr	r1, [pc, #316]	; (c7c <hif_handle_isr+0x354>)
     b40:	484f      	ldr	r0, [pc, #316]	; (c80 <hif_handle_isr+0x358>)
     b42:	4b50      	ldr	r3, [pc, #320]	; (c84 <hif_handle_isr+0x35c>)
     b44:	4798      	blx	r3
     b46:	485d      	ldr	r0, [pc, #372]	; (cbc <hif_handle_isr+0x394>)
     b48:	4b50      	ldr	r3, [pc, #320]	; (c8c <hif_handle_isr+0x364>)
     b4a:	4798      	blx	r3
     b4c:	200d      	movs	r0, #13
     b4e:	4b50      	ldr	r3, [pc, #320]	; (c90 <hif_handle_isr+0x368>)
     b50:	4798      	blx	r3
     b52:	e76e      	b.n	a32 <hif_handle_isr+0x10a>
				    if(gstrHifCxt.pfSslCb)
     b54:	4b46      	ldr	r3, [pc, #280]	; (c70 <hif_handle_isr+0x348>)
     b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     b58:	2b00      	cmp	r3, #0
     b5a:	d100      	bne.n	b5e <hif_handle_isr+0x236>
     b5c:	e769      	b.n	a32 <hif_handle_isr+0x10a>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     b5e:	4b44      	ldr	r3, [pc, #272]	; (c70 <hif_handle_isr+0x348>)
     b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     b62:	aa04      	add	r2, sp, #16
     b64:	7850      	ldrb	r0, [r2, #1]
     b66:	b2c0      	uxtb	r0, r0
     b68:	8851      	ldrh	r1, [r2, #2]
     b6a:	9a05      	ldr	r2, [sp, #20]
     b6c:	3208      	adds	r2, #8
     b6e:	3908      	subs	r1, #8
     b70:	b289      	uxth	r1, r1
     b72:	4798      	blx	r3
     b74:	e75d      	b.n	a32 <hif_handle_isr+0x10a>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
     b76:	4a52      	ldr	r2, [pc, #328]	; (cc0 <hif_handle_isr+0x398>)
     b78:	4940      	ldr	r1, [pc, #256]	; (c7c <hif_handle_isr+0x354>)
     b7a:	4841      	ldr	r0, [pc, #260]	; (c80 <hif_handle_isr+0x358>)
     b7c:	4c41      	ldr	r4, [pc, #260]	; (c84 <hif_handle_isr+0x35c>)
     b7e:	47a0      	blx	r4
     b80:	ab04      	add	r3, sp, #16
     b82:	7819      	ldrb	r1, [r3, #0]
     b84:	b2c9      	uxtb	r1, r1
     b86:	785a      	ldrb	r2, [r3, #1]
     b88:	b2d2      	uxtb	r2, r2
     b8a:	484e      	ldr	r0, [pc, #312]	; (cc4 <hif_handle_isr+0x39c>)
     b8c:	47a0      	blx	r4
     b8e:	200d      	movs	r0, #13
     b90:	4b3f      	ldr	r3, [pc, #252]	; (c90 <hif_handle_isr+0x368>)
     b92:	4798      	blx	r3
					ret = hif_set_rx_done();
     b94:	4b4c      	ldr	r3, [pc, #304]	; (cc8 <hif_handle_isr+0x3a0>)
     b96:	4798      	blx	r3
     b98:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
     b9a:	d129      	bne.n	bf0 <hif_handle_isr+0x2c8>
     b9c:	e74e      	b.n	a3c <hif_handle_isr+0x114>
				M2M_ERR("(hif) Wrong Size\n");
     b9e:	2287      	movs	r2, #135	; 0x87
     ba0:	0092      	lsls	r2, r2, #2
     ba2:	4936      	ldr	r1, [pc, #216]	; (c7c <hif_handle_isr+0x354>)
     ba4:	4836      	ldr	r0, [pc, #216]	; (c80 <hif_handle_isr+0x358>)
     ba6:	4b37      	ldr	r3, [pc, #220]	; (c84 <hif_handle_isr+0x35c>)
     ba8:	4798      	blx	r3
     baa:	4848      	ldr	r0, [pc, #288]	; (ccc <hif_handle_isr+0x3a4>)
     bac:	4b37      	ldr	r3, [pc, #220]	; (c8c <hif_handle_isr+0x364>)
     bae:	4798      	blx	r3
     bb0:	200d      	movs	r0, #13
     bb2:	4b37      	ldr	r3, [pc, #220]	; (c90 <hif_handle_isr+0x368>)
     bb4:	4798      	blx	r3
				ret = M2M_ERR_RCV;
     bb6:	2402      	movs	r4, #2
     bb8:	4264      	negs	r4, r4
     bba:	e019      	b.n	bf0 <hif_handle_isr+0x2c8>
			M2M_ERR("(hif) False interrupt %lx",reg);
     bbc:	2289      	movs	r2, #137	; 0x89
     bbe:	0092      	lsls	r2, r2, #2
     bc0:	492e      	ldr	r1, [pc, #184]	; (c7c <hif_handle_isr+0x354>)
     bc2:	482f      	ldr	r0, [pc, #188]	; (c80 <hif_handle_isr+0x358>)
     bc4:	4c2f      	ldr	r4, [pc, #188]	; (c84 <hif_handle_isr+0x35c>)
     bc6:	47a0      	blx	r4
     bc8:	9903      	ldr	r1, [sp, #12]
     bca:	4841      	ldr	r0, [pc, #260]	; (cd0 <hif_handle_isr+0x3a8>)
     bcc:	47a0      	blx	r4
     bce:	200d      	movs	r0, #13
     bd0:	4b2f      	ldr	r3, [pc, #188]	; (c90 <hif_handle_isr+0x368>)
     bd2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
     bd4:	240c      	movs	r4, #12
     bd6:	4264      	negs	r4, r4
     bd8:	e00a      	b.n	bf0 <hif_handle_isr+0x2c8>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
     bda:	4a3e      	ldr	r2, [pc, #248]	; (cd4 <hif_handle_isr+0x3ac>)
     bdc:	4927      	ldr	r1, [pc, #156]	; (c7c <hif_handle_isr+0x354>)
     bde:	4828      	ldr	r0, [pc, #160]	; (c80 <hif_handle_isr+0x358>)
     be0:	4b28      	ldr	r3, [pc, #160]	; (c84 <hif_handle_isr+0x35c>)
     be2:	4798      	blx	r3
     be4:	483c      	ldr	r0, [pc, #240]	; (cd8 <hif_handle_isr+0x3b0>)
     be6:	4b29      	ldr	r3, [pc, #164]	; (c8c <hif_handle_isr+0x364>)
     be8:	4798      	blx	r3
     bea:	200d      	movs	r0, #13
     bec:	4b28      	ldr	r3, [pc, #160]	; (c90 <hif_handle_isr+0x368>)
     bee:	4798      	blx	r3
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
     bf0:	4a3a      	ldr	r2, [pc, #232]	; (cdc <hif_handle_isr+0x3b4>)
     bf2:	493b      	ldr	r1, [pc, #236]	; (ce0 <hif_handle_isr+0x3b8>)
     bf4:	4822      	ldr	r0, [pc, #136]	; (c80 <hif_handle_isr+0x358>)
     bf6:	4f23      	ldr	r7, [pc, #140]	; (c84 <hif_handle_isr+0x35c>)
     bf8:	47b8      	blx	r7
     bfa:	0021      	movs	r1, r4
     bfc:	4839      	ldr	r0, [pc, #228]	; (ce4 <hif_handle_isr+0x3bc>)
     bfe:	47b8      	blx	r7
     c00:	200d      	movs	r0, #13
     c02:	4b23      	ldr	r3, [pc, #140]	; (c90 <hif_handle_isr+0x368>)
     c04:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
     c06:	a903      	add	r1, sp, #12
     c08:	4837      	ldr	r0, [pc, #220]	; (ce8 <hif_handle_isr+0x3c0>)
     c0a:	47b0      	blx	r6
     c0c:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
     c0e:	d1e4      	bne.n	bda <hif_handle_isr+0x2b2>
		if(reg & 0x1)	/* New interrupt has been received */
     c10:	9b03      	ldr	r3, [sp, #12]
     c12:	07db      	lsls	r3, r3, #31
     c14:	d5d2      	bpl.n	bbc <hif_handle_isr+0x294>
			nm_bsp_interrupt_ctrl(0);
     c16:	2000      	movs	r0, #0
     c18:	4b1f      	ldr	r3, [pc, #124]	; (c98 <hif_handle_isr+0x370>)
     c1a:	4798      	blx	r3
			reg &= ~NBIT0;
     c1c:	2301      	movs	r3, #1
     c1e:	9903      	ldr	r1, [sp, #12]
     c20:	4399      	bics	r1, r3
     c22:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     c24:	4830      	ldr	r0, [pc, #192]	; (ce8 <hif_handle_isr+0x3c0>)
     c26:	4b31      	ldr	r3, [pc, #196]	; (cec <hif_handle_isr+0x3c4>)
     c28:	4798      	blx	r3
     c2a:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
     c2c:	d1e0      	bne.n	bf0 <hif_handle_isr+0x2c8>
			gstrHifCxt.u8HifRXDone = 1;
     c2e:	2201      	movs	r2, #1
     c30:	4b0f      	ldr	r3, [pc, #60]	; (c70 <hif_handle_isr+0x348>)
     c32:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
     c34:	9b03      	ldr	r3, [sp, #12]
     c36:	049d      	lsls	r5, r3, #18
     c38:	0d2d      	lsrs	r5, r5, #20
			if (size > 0) {
     c3a:	d0b0      	beq.n	b9e <hif_handle_isr+0x276>
				uint32 address = 0;
     c3c:	2300      	movs	r3, #0
     c3e:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
     c40:	a905      	add	r1, sp, #20
     c42:	482b      	ldr	r0, [pc, #172]	; (cf0 <hif_handle_isr+0x3c8>)
     c44:	4b16      	ldr	r3, [pc, #88]	; (ca0 <hif_handle_isr+0x378>)
     c46:	4798      	blx	r3
     c48:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
     c4a:	d100      	bne.n	c4e <hif_handle_isr+0x326>
     c4c:	e675      	b.n	93a <hif_handle_isr+0x12>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
     c4e:	22c8      	movs	r2, #200	; 0xc8
     c50:	32ff      	adds	r2, #255	; 0xff
     c52:	490a      	ldr	r1, [pc, #40]	; (c7c <hif_handle_isr+0x354>)
     c54:	480a      	ldr	r0, [pc, #40]	; (c80 <hif_handle_isr+0x358>)
     c56:	4b0b      	ldr	r3, [pc, #44]	; (c84 <hif_handle_isr+0x35c>)
     c58:	4798      	blx	r3
     c5a:	4826      	ldr	r0, [pc, #152]	; (cf4 <hif_handle_isr+0x3cc>)
     c5c:	4b0b      	ldr	r3, [pc, #44]	; (c8c <hif_handle_isr+0x364>)
     c5e:	4798      	blx	r3
     c60:	200d      	movs	r0, #13
     c62:	4b0b      	ldr	r3, [pc, #44]	; (c90 <hif_handle_isr+0x368>)
     c64:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
     c66:	2001      	movs	r0, #1
     c68:	4b0b      	ldr	r3, [pc, #44]	; (c98 <hif_handle_isr+0x370>)
     c6a:	4798      	blx	r3
     c6c:	e7c0      	b.n	bf0 <hif_handle_isr+0x2c8>
     c6e:	46c0      	nop			; (mov r8, r8)
     c70:	200002d0 	.word	0x200002d0
     c74:	00001a45 	.word	0x00001a45
     c78:	0000020f 	.word	0x0000020f
     c7c:	00008324 	.word	0x00008324
     c80:	000082d0 	.word	0x000082d0
     c84:	00006f15 	.word	0x00006f15
     c88:	00008480 	.word	0x00008480
     c8c:	00007031 	.word	0x00007031
     c90:	00006f49 	.word	0x00006f49
     c94:	0000837c 	.word	0x0000837c
     c98:	000002f1 	.word	0x000002f1
     c9c:	00008394 	.word	0x00008394
     ca0:	00001a2d 	.word	0x00001a2d
     ca4:	000083d4 	.word	0x000083d4
     ca8:	000083f4 	.word	0x000083f4
     cac:	00008418 	.word	0x00008418
     cb0:	000001ff 	.word	0x000001ff
     cb4:	00008438 	.word	0x00008438
     cb8:	00000206 	.word	0x00000206
     cbc:	0000845c 	.word	0x0000845c
     cc0:	00000215 	.word	0x00000215
     cc4:	00008498 	.word	0x00008498
     cc8:	00000625 	.word	0x00000625
     ccc:	000084c4 	.word	0x000084c4
     cd0:	000084d8 	.word	0x000084d8
     cd4:	0000022d 	.word	0x0000022d
     cd8:	000084f4 	.word	0x000084f4
     cdc:	0000024a 	.word	0x0000024a
     ce0:	0000832c 	.word	0x0000832c
     ce4:	00008518 	.word	0x00008518
     ce8:	00001070 	.word	0x00001070
     cec:	00001a39 	.word	0x00001a39
     cf0:	00001084 	.word	0x00001084
     cf4:	00008358 	.word	0x00008358
			}
		}
	}

	return ret;
}
     cf8:	2000      	movs	r0, #0
     cfa:	b007      	add	sp, #28
     cfc:	bc0c      	pop	{r2, r3}
     cfe:	4690      	mov	r8, r2
     d00:	4699      	mov	r9, r3
     d02:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000d04 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
     d04:	b570      	push	{r4, r5, r6, lr}
     d06:	0014      	movs	r4, r2
     d08:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
     d0a:	2800      	cmp	r0, #0
     d0c:	d003      	beq.n	d16 <hif_receive+0x12>
     d0e:	2900      	cmp	r1, #0
     d10:	d001      	beq.n	d16 <hif_receive+0x12>
     d12:	2a00      	cmp	r2, #0
     d14:	d112      	bne.n	d3c <hif_receive+0x38>
	{
		if(isDone)
     d16:	2d00      	cmp	r5, #0
     d18:	d002      	beq.n	d20 <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
     d1a:	4b27      	ldr	r3, [pc, #156]	; (db8 <hif_receive+0xb4>)
     d1c:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
     d1e:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
     d20:	4a26      	ldr	r2, [pc, #152]	; (dbc <hif_receive+0xb8>)
     d22:	4927      	ldr	r1, [pc, #156]	; (dc0 <hif_receive+0xbc>)
     d24:	4827      	ldr	r0, [pc, #156]	; (dc4 <hif_receive+0xc0>)
     d26:	4b28      	ldr	r3, [pc, #160]	; (dc8 <hif_receive+0xc4>)
     d28:	4798      	blx	r3
     d2a:	4828      	ldr	r0, [pc, #160]	; (dcc <hif_receive+0xc8>)
     d2c:	4b28      	ldr	r3, [pc, #160]	; (dd0 <hif_receive+0xcc>)
     d2e:	4798      	blx	r3
     d30:	200d      	movs	r0, #13
     d32:	4b28      	ldr	r3, [pc, #160]	; (dd4 <hif_receive+0xd0>)
     d34:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
     d36:	200c      	movs	r0, #12
     d38:	4240      	negs	r0, r0
     d3a:	e7f0      	b.n	d1e <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
     d3c:	4b26      	ldr	r3, [pc, #152]	; (dd8 <hif_receive+0xd4>)
     d3e:	689b      	ldr	r3, [r3, #8]
     d40:	429a      	cmp	r2, r3
     d42:	d81a      	bhi.n	d7a <hif_receive+0x76>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
     d44:	4b24      	ldr	r3, [pc, #144]	; (dd8 <hif_receive+0xd4>)
     d46:	685b      	ldr	r3, [r3, #4]
     d48:	4298      	cmp	r0, r3
     d4a:	d326      	bcc.n	d9a <hif_receive+0x96>
     d4c:	1886      	adds	r6, r0, r2
     d4e:	4a22      	ldr	r2, [pc, #136]	; (dd8 <hif_receive+0xd4>)
     d50:	6853      	ldr	r3, [r2, #4]
     d52:	6892      	ldr	r2, [r2, #8]
     d54:	189b      	adds	r3, r3, r2
     d56:	429e      	cmp	r6, r3
     d58:	d81f      	bhi.n	d9a <hif_receive+0x96>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
     d5a:	0022      	movs	r2, r4
     d5c:	4b1f      	ldr	r3, [pc, #124]	; (ddc <hif_receive+0xd8>)
     d5e:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
     d60:	2800      	cmp	r0, #0
     d62:	d1dc      	bne.n	d1e <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
     d64:	4a1c      	ldr	r2, [pc, #112]	; (dd8 <hif_receive+0xd4>)
     d66:	6853      	ldr	r3, [r2, #4]
     d68:	6892      	ldr	r2, [r2, #8]
     d6a:	189b      	adds	r3, r3, r2
     d6c:	429e      	cmp	r6, r3
     d6e:	d001      	beq.n	d74 <hif_receive+0x70>
     d70:	2d00      	cmp	r5, #0
     d72:	d0d4      	beq.n	d1e <hif_receive+0x1a>
		ret = hif_set_rx_done();
     d74:	4b10      	ldr	r3, [pc, #64]	; (db8 <hif_receive+0xb4>)
     d76:	4798      	blx	r3
     d78:	e7d1      	b.n	d1e <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
     d7a:	4a19      	ldr	r2, [pc, #100]	; (de0 <hif_receive+0xdc>)
     d7c:	4910      	ldr	r1, [pc, #64]	; (dc0 <hif_receive+0xbc>)
     d7e:	4811      	ldr	r0, [pc, #68]	; (dc4 <hif_receive+0xc0>)
     d80:	4d11      	ldr	r5, [pc, #68]	; (dc8 <hif_receive+0xc4>)
     d82:	47a8      	blx	r5
     d84:	4b14      	ldr	r3, [pc, #80]	; (dd8 <hif_receive+0xd4>)
     d86:	689a      	ldr	r2, [r3, #8]
     d88:	0021      	movs	r1, r4
     d8a:	4816      	ldr	r0, [pc, #88]	; (de4 <hif_receive+0xe0>)
     d8c:	47a8      	blx	r5
     d8e:	200d      	movs	r0, #13
     d90:	4b10      	ldr	r3, [pc, #64]	; (dd4 <hif_receive+0xd0>)
     d92:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
     d94:	200c      	movs	r0, #12
     d96:	4240      	negs	r0, r0
		goto ERR1;
     d98:	e7c1      	b.n	d1e <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
     d9a:	4a13      	ldr	r2, [pc, #76]	; (de8 <hif_receive+0xe4>)
     d9c:	4908      	ldr	r1, [pc, #32]	; (dc0 <hif_receive+0xbc>)
     d9e:	4809      	ldr	r0, [pc, #36]	; (dc4 <hif_receive+0xc0>)
     da0:	4b09      	ldr	r3, [pc, #36]	; (dc8 <hif_receive+0xc4>)
     da2:	4798      	blx	r3
     da4:	4811      	ldr	r0, [pc, #68]	; (dec <hif_receive+0xe8>)
     da6:	4b0a      	ldr	r3, [pc, #40]	; (dd0 <hif_receive+0xcc>)
     da8:	4798      	blx	r3
     daa:	200d      	movs	r0, #13
     dac:	4b09      	ldr	r3, [pc, #36]	; (dd4 <hif_receive+0xd0>)
     dae:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
     db0:	200c      	movs	r0, #12
     db2:	4240      	negs	r0, r0
		goto ERR1;
     db4:	e7b3      	b.n	d1e <hif_receive+0x1a>
     db6:	46c0      	nop			; (mov r8, r8)
     db8:	00000625 	.word	0x00000625
     dbc:	0000026b 	.word	0x0000026b
     dc0:	0000833c 	.word	0x0000833c
     dc4:	000082d0 	.word	0x000082d0
     dc8:	00006f15 	.word	0x00006f15
     dcc:	00008548 	.word	0x00008548
     dd0:	00007031 	.word	0x00007031
     dd4:	00006f49 	.word	0x00006f49
     dd8:	200002d0 	.word	0x200002d0
     ddc:	00001a45 	.word	0x00001a45
     de0:	00000273 	.word	0x00000273
     de4:	00008568 	.word	0x00008568
     de8:	00000279 	.word	0x00000279
     dec:	000085b0 	.word	0x000085b0

00000df0 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
     df0:	b570      	push	{r4, r5, r6, lr}
     df2:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
     df4:	2807      	cmp	r0, #7
     df6:	d81f      	bhi.n	e38 <hif_register_cb+0x48>
     df8:	0083      	lsls	r3, r0, #2
     dfa:	4a16      	ldr	r2, [pc, #88]	; (e54 <hif_register_cb+0x64>)
     dfc:	58d3      	ldr	r3, [r2, r3]
     dfe:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
     e00:	4b15      	ldr	r3, [pc, #84]	; (e58 <hif_register_cb+0x68>)
     e02:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
     e04:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
     e06:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
     e08:	4b13      	ldr	r3, [pc, #76]	; (e58 <hif_register_cb+0x68>)
     e0a:	60d9      	str	r1, [r3, #12]
	sint8 ret = M2M_SUCCESS;
     e0c:	2000      	movs	r0, #0
			break;
     e0e:	e7fa      	b.n	e06 <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
     e10:	4b11      	ldr	r3, [pc, #68]	; (e58 <hif_register_cb+0x68>)
     e12:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
     e14:	2000      	movs	r0, #0
			break;
     e16:	e7f6      	b.n	e06 <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
     e18:	4b0f      	ldr	r3, [pc, #60]	; (e58 <hif_register_cb+0x68>)
     e1a:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
     e1c:	2000      	movs	r0, #0
			break;
     e1e:	e7f2      	b.n	e06 <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
     e20:	4b0d      	ldr	r3, [pc, #52]	; (e58 <hif_register_cb+0x68>)
     e22:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
     e24:	2000      	movs	r0, #0
			break;
     e26:	e7ee      	b.n	e06 <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
     e28:	4b0b      	ldr	r3, [pc, #44]	; (e58 <hif_register_cb+0x68>)
     e2a:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
     e2c:	2000      	movs	r0, #0
			break;
     e2e:	e7ea      	b.n	e06 <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
     e30:	4b09      	ldr	r3, [pc, #36]	; (e58 <hif_register_cb+0x68>)
     e32:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
     e34:	2000      	movs	r0, #0
			break;
     e36:	e7e6      	b.n	e06 <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
     e38:	4a08      	ldr	r2, [pc, #32]	; (e5c <hif_register_cb+0x6c>)
     e3a:	4909      	ldr	r1, [pc, #36]	; (e60 <hif_register_cb+0x70>)
     e3c:	4809      	ldr	r0, [pc, #36]	; (e64 <hif_register_cb+0x74>)
     e3e:	4d0a      	ldr	r5, [pc, #40]	; (e68 <hif_register_cb+0x78>)
     e40:	47a8      	blx	r5
     e42:	0021      	movs	r1, r4
     e44:	4809      	ldr	r0, [pc, #36]	; (e6c <hif_register_cb+0x7c>)
     e46:	47a8      	blx	r5
     e48:	200d      	movs	r0, #13
     e4a:	4b09      	ldr	r3, [pc, #36]	; (e70 <hif_register_cb+0x80>)
     e4c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
     e4e:	200c      	movs	r0, #12
     e50:	4240      	negs	r0, r0
			break;
     e52:	e7d8      	b.n	e06 <hif_register_cb+0x16>
     e54:	000082f8 	.word	0x000082f8
     e58:	200002d0 	.word	0x200002d0
     e5c:	000002b1 	.word	0x000002b1
     e60:	00008348 	.word	0x00008348
     e64:	000082d0 	.word	0x000082d0
     e68:	00006f15 	.word	0x00006f15
     e6c:	000085f4 	.word	0x000085f4
     e70:	00006f49 	.word	0x00006f49

00000e74 <hif_init>:
{
     e74:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
     e76:	2228      	movs	r2, #40	; 0x28
     e78:	2100      	movs	r1, #0
     e7a:	4806      	ldr	r0, [pc, #24]	; (e94 <hif_init+0x20>)
     e7c:	4b06      	ldr	r3, [pc, #24]	; (e98 <hif_init+0x24>)
     e7e:	4798      	blx	r3
	nm_bsp_register_isr(isr);
     e80:	4806      	ldr	r0, [pc, #24]	; (e9c <hif_init+0x28>)
     e82:	4b07      	ldr	r3, [pc, #28]	; (ea0 <hif_init+0x2c>)
     e84:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
     e86:	4907      	ldr	r1, [pc, #28]	; (ea4 <hif_init+0x30>)
     e88:	2003      	movs	r0, #3
     e8a:	4b07      	ldr	r3, [pc, #28]	; (ea8 <hif_init+0x34>)
     e8c:	4798      	blx	r3
}
     e8e:	2000      	movs	r0, #0
     e90:	bd10      	pop	{r4, pc}
     e92:	46c0      	nop			; (mov r8, r8)
     e94:	200002d0 	.word	0x200002d0
     e98:	000005e5 	.word	0x000005e5
     e9c:	00000611 	.word	0x00000611
     ea0:	00000299 	.word	0x00000299
     ea4:	00000621 	.word	0x00000621
     ea8:	00000df1 	.word	0x00000df1

00000eac <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
     eac:	b530      	push	{r4, r5, lr}
     eae:	b09f      	sub	sp, #124	; 0x7c
     eb0:	0004      	movs	r4, r0
     eb2:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
     eb4:	282c      	cmp	r0, #44	; 0x2c
     eb6:	d02f      	beq.n	f18 <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
     eb8:	281b      	cmp	r0, #27
     eba:	d03d      	beq.n	f38 <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
     ebc:	2806      	cmp	r0, #6
     ebe:	d04b      	beq.n	f58 <m2m_wifi_cb+0xac>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
     ec0:	280e      	cmp	r0, #14
     ec2:	d027      	beq.n	f14 <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
     ec4:	2832      	cmp	r0, #50	; 0x32
     ec6:	d057      	beq.n	f78 <m2m_wifi_cb+0xcc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
     ec8:	282f      	cmp	r0, #47	; 0x2f
     eca:	d065      	beq.n	f98 <m2m_wifi_cb+0xec>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
     ecc:	2834      	cmp	r0, #52	; 0x34
     ece:	d100      	bne.n	ed2 <m2m_wifi_cb+0x26>
     ed0:	e077      	b.n	fc2 <m2m_wifi_cb+0x116>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
     ed2:	2811      	cmp	r0, #17
     ed4:	d100      	bne.n	ed8 <m2m_wifi_cb+0x2c>
     ed6:	e096      	b.n	1006 <m2m_wifi_cb+0x15a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
     ed8:	2813      	cmp	r0, #19
     eda:	d100      	bne.n	ede <m2m_wifi_cb+0x32>
     edc:	e0ac      	b.n	1038 <m2m_wifi_cb+0x18c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
     ede:	2804      	cmp	r0, #4
     ee0:	d100      	bne.n	ee4 <m2m_wifi_cb+0x38>
     ee2:	e0bb      	b.n	105c <m2m_wifi_cb+0x1b0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
     ee4:	2865      	cmp	r0, #101	; 0x65
     ee6:	d100      	bne.n	eea <m2m_wifi_cb+0x3e>
     ee8:	e0ca      	b.n	1080 <m2m_wifi_cb+0x1d4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
     eea:	2809      	cmp	r0, #9
     eec:	d100      	bne.n	ef0 <m2m_wifi_cb+0x44>
     eee:	e0d9      	b.n	10a4 <m2m_wifi_cb+0x1f8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
     ef0:	282a      	cmp	r0, #42	; 0x2a
     ef2:	d100      	bne.n	ef6 <m2m_wifi_cb+0x4a>
     ef4:	e0e8      	b.n	10c8 <m2m_wifi_cb+0x21c>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
     ef6:	2820      	cmp	r0, #32
     ef8:	d100      	bne.n	efc <m2m_wifi_cb+0x50>
     efa:	e0f7      	b.n	10ec <m2m_wifi_cb+0x240>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
     efc:	2292      	movs	r2, #146	; 0x92
     efe:	0052      	lsls	r2, r2, #1
     f00:	4989      	ldr	r1, [pc, #548]	; (1128 <m2m_wifi_cb+0x27c>)
     f02:	488a      	ldr	r0, [pc, #552]	; (112c <m2m_wifi_cb+0x280>)
     f04:	4d8a      	ldr	r5, [pc, #552]	; (1130 <m2m_wifi_cb+0x284>)
     f06:	47a8      	blx	r5
     f08:	0021      	movs	r1, r4
     f0a:	488a      	ldr	r0, [pc, #552]	; (1134 <m2m_wifi_cb+0x288>)
     f0c:	47a8      	blx	r5
     f0e:	200d      	movs	r0, #13
     f10:	4b89      	ldr	r3, [pc, #548]	; (1138 <m2m_wifi_cb+0x28c>)
     f12:	4798      	blx	r3
	}
}
     f14:	b01f      	add	sp, #124	; 0x7c
     f16:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
     f18:	2300      	movs	r3, #0
     f1a:	2204      	movs	r2, #4
     f1c:	a903      	add	r1, sp, #12
     f1e:	0028      	movs	r0, r5
     f20:	4c86      	ldr	r4, [pc, #536]	; (113c <m2m_wifi_cb+0x290>)
     f22:	47a0      	blx	r4
     f24:	2800      	cmp	r0, #0
     f26:	d1f5      	bne.n	f14 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     f28:	4b85      	ldr	r3, [pc, #532]	; (1140 <m2m_wifi_cb+0x294>)
     f2a:	681b      	ldr	r3, [r3, #0]
     f2c:	2b00      	cmp	r3, #0
     f2e:	d0f1      	beq.n	f14 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
     f30:	a903      	add	r1, sp, #12
     f32:	302c      	adds	r0, #44	; 0x2c
     f34:	4798      	blx	r3
     f36:	e7ed      	b.n	f14 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
     f38:	2300      	movs	r3, #0
     f3a:	2208      	movs	r2, #8
     f3c:	a903      	add	r1, sp, #12
     f3e:	0028      	movs	r0, r5
     f40:	4c7e      	ldr	r4, [pc, #504]	; (113c <m2m_wifi_cb+0x290>)
     f42:	47a0      	blx	r4
     f44:	2800      	cmp	r0, #0
     f46:	d1e5      	bne.n	f14 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     f48:	4b7d      	ldr	r3, [pc, #500]	; (1140 <m2m_wifi_cb+0x294>)
     f4a:	681b      	ldr	r3, [r3, #0]
     f4c:	2b00      	cmp	r3, #0
     f4e:	d0e1      	beq.n	f14 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
     f50:	a903      	add	r1, sp, #12
     f52:	301b      	adds	r0, #27
     f54:	4798      	blx	r3
     f56:	e7dd      	b.n	f14 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
     f58:	2301      	movs	r3, #1
     f5a:	2230      	movs	r2, #48	; 0x30
     f5c:	a903      	add	r1, sp, #12
     f5e:	0028      	movs	r0, r5
     f60:	4c76      	ldr	r4, [pc, #472]	; (113c <m2m_wifi_cb+0x290>)
     f62:	47a0      	blx	r4
     f64:	2800      	cmp	r0, #0
     f66:	d1d5      	bne.n	f14 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
     f68:	4b75      	ldr	r3, [pc, #468]	; (1140 <m2m_wifi_cb+0x294>)
     f6a:	681b      	ldr	r3, [r3, #0]
     f6c:	2b00      	cmp	r3, #0
     f6e:	d0d1      	beq.n	f14 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
     f70:	a903      	add	r1, sp, #12
     f72:	3006      	adds	r0, #6
     f74:	4798      	blx	r3
     f76:	e7cd      	b.n	f14 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
     f78:	2300      	movs	r3, #0
     f7a:	2214      	movs	r2, #20
     f7c:	a903      	add	r1, sp, #12
     f7e:	0028      	movs	r0, r5
     f80:	4c6e      	ldr	r4, [pc, #440]	; (113c <m2m_wifi_cb+0x290>)
     f82:	47a0      	blx	r4
     f84:	2800      	cmp	r0, #0
     f86:	d1c5      	bne.n	f14 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     f88:	4b6d      	ldr	r3, [pc, #436]	; (1140 <m2m_wifi_cb+0x294>)
     f8a:	681b      	ldr	r3, [r3, #0]
     f8c:	2b00      	cmp	r3, #0
     f8e:	d0c1      	beq.n	f14 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
     f90:	a903      	add	r1, sp, #12
     f92:	3032      	adds	r0, #50	; 0x32
     f94:	4798      	blx	r3
     f96:	e7bd      	b.n	f14 <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
     f98:	2264      	movs	r2, #100	; 0x64
     f9a:	2100      	movs	r1, #0
     f9c:	a803      	add	r0, sp, #12
     f9e:	4b69      	ldr	r3, [pc, #420]	; (1144 <m2m_wifi_cb+0x298>)
     fa0:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
     fa2:	2300      	movs	r3, #0
     fa4:	2264      	movs	r2, #100	; 0x64
     fa6:	a903      	add	r1, sp, #12
     fa8:	0028      	movs	r0, r5
     faa:	4c64      	ldr	r4, [pc, #400]	; (113c <m2m_wifi_cb+0x290>)
     fac:	47a0      	blx	r4
     fae:	2800      	cmp	r0, #0
     fb0:	d1b0      	bne.n	f14 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     fb2:	4b63      	ldr	r3, [pc, #396]	; (1140 <m2m_wifi_cb+0x294>)
     fb4:	681b      	ldr	r3, [r3, #0]
     fb6:	2b00      	cmp	r3, #0
     fb8:	d0ac      	beq.n	f14 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
     fba:	a903      	add	r1, sp, #12
     fbc:	302f      	adds	r0, #47	; 0x2f
     fbe:	4798      	blx	r3
     fc0:	e7a8      	b.n	f14 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
     fc2:	2300      	movs	r3, #0
     fc4:	2204      	movs	r2, #4
     fc6:	a903      	add	r1, sp, #12
     fc8:	0028      	movs	r0, r5
     fca:	4c5c      	ldr	r4, [pc, #368]	; (113c <m2m_wifi_cb+0x290>)
     fcc:	47a0      	blx	r4
     fce:	2800      	cmp	r0, #0
     fd0:	d1a0      	bne.n	f14 <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
     fd2:	485d      	ldr	r0, [pc, #372]	; (1148 <m2m_wifi_cb+0x29c>)
     fd4:	4d56      	ldr	r5, [pc, #344]	; (1130 <m2m_wifi_cb+0x284>)
     fd6:	47a8      	blx	r5
     fd8:	9c03      	ldr	r4, [sp, #12]
     fda:	0a23      	lsrs	r3, r4, #8
     fdc:	20ff      	movs	r0, #255	; 0xff
     fde:	4003      	ands	r3, r0
     fe0:	0c22      	lsrs	r2, r4, #16
     fe2:	4002      	ands	r2, r0
     fe4:	0e21      	lsrs	r1, r4, #24
     fe6:	4020      	ands	r0, r4
     fe8:	9000      	str	r0, [sp, #0]
     fea:	4858      	ldr	r0, [pc, #352]	; (114c <m2m_wifi_cb+0x2a0>)
     fec:	47a8      	blx	r5
     fee:	200d      	movs	r0, #13
     ff0:	4b51      	ldr	r3, [pc, #324]	; (1138 <m2m_wifi_cb+0x28c>)
     ff2:	4798      	blx	r3
			if (gpfAppWifiCb)
     ff4:	4b52      	ldr	r3, [pc, #328]	; (1140 <m2m_wifi_cb+0x294>)
     ff6:	681b      	ldr	r3, [r3, #0]
     ff8:	2b00      	cmp	r3, #0
     ffa:	d100      	bne.n	ffe <m2m_wifi_cb+0x152>
     ffc:	e78a      	b.n	f14 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
     ffe:	2100      	movs	r1, #0
    1000:	2034      	movs	r0, #52	; 0x34
    1002:	4798      	blx	r3
    1004:	e786      	b.n	f14 <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
    1006:	2200      	movs	r2, #0
    1008:	4b51      	ldr	r3, [pc, #324]	; (1150 <m2m_wifi_cb+0x2a4>)
    100a:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    100c:	2300      	movs	r3, #0
    100e:	3204      	adds	r2, #4
    1010:	a903      	add	r1, sp, #12
    1012:	0028      	movs	r0, r5
    1014:	4c49      	ldr	r4, [pc, #292]	; (113c <m2m_wifi_cb+0x290>)
    1016:	47a0      	blx	r4
    1018:	2800      	cmp	r0, #0
    101a:	d000      	beq.n	101e <m2m_wifi_cb+0x172>
    101c:	e77a      	b.n	f14 <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
    101e:	ab03      	add	r3, sp, #12
    1020:	781a      	ldrb	r2, [r3, #0]
    1022:	4b4c      	ldr	r3, [pc, #304]	; (1154 <m2m_wifi_cb+0x2a8>)
    1024:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    1026:	4b46      	ldr	r3, [pc, #280]	; (1140 <m2m_wifi_cb+0x294>)
    1028:	681b      	ldr	r3, [r3, #0]
    102a:	2b00      	cmp	r3, #0
    102c:	d100      	bne.n	1030 <m2m_wifi_cb+0x184>
    102e:	e771      	b.n	f14 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    1030:	a903      	add	r1, sp, #12
    1032:	3011      	adds	r0, #17
    1034:	4798      	blx	r3
    1036:	e76d      	b.n	f14 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    1038:	2300      	movs	r3, #0
    103a:	222c      	movs	r2, #44	; 0x2c
    103c:	a903      	add	r1, sp, #12
    103e:	0028      	movs	r0, r5
    1040:	4c3e      	ldr	r4, [pc, #248]	; (113c <m2m_wifi_cb+0x290>)
    1042:	47a0      	blx	r4
    1044:	2800      	cmp	r0, #0
    1046:	d000      	beq.n	104a <m2m_wifi_cb+0x19e>
    1048:	e764      	b.n	f14 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    104a:	4b3d      	ldr	r3, [pc, #244]	; (1140 <m2m_wifi_cb+0x294>)
    104c:	681b      	ldr	r3, [r3, #0]
    104e:	2b00      	cmp	r3, #0
    1050:	d100      	bne.n	1054 <m2m_wifi_cb+0x1a8>
    1052:	e75f      	b.n	f14 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    1054:	a903      	add	r1, sp, #12
    1056:	3013      	adds	r0, #19
    1058:	4798      	blx	r3
    105a:	e75b      	b.n	f14 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    105c:	2300      	movs	r3, #0
    105e:	2204      	movs	r2, #4
    1060:	a91c      	add	r1, sp, #112	; 0x70
    1062:	0028      	movs	r0, r5
    1064:	4c35      	ldr	r4, [pc, #212]	; (113c <m2m_wifi_cb+0x290>)
    1066:	47a0      	blx	r4
    1068:	2800      	cmp	r0, #0
    106a:	d000      	beq.n	106e <m2m_wifi_cb+0x1c2>
    106c:	e752      	b.n	f14 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    106e:	4b34      	ldr	r3, [pc, #208]	; (1140 <m2m_wifi_cb+0x294>)
    1070:	681b      	ldr	r3, [r3, #0]
    1072:	2b00      	cmp	r3, #0
    1074:	d100      	bne.n	1078 <m2m_wifi_cb+0x1cc>
    1076:	e74d      	b.n	f14 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    1078:	a91c      	add	r1, sp, #112	; 0x70
    107a:	3004      	adds	r0, #4
    107c:	4798      	blx	r3
    107e:	e749      	b.n	f14 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1080:	2300      	movs	r3, #0
    1082:	2204      	movs	r2, #4
    1084:	a91c      	add	r1, sp, #112	; 0x70
    1086:	0028      	movs	r0, r5
    1088:	4c2c      	ldr	r4, [pc, #176]	; (113c <m2m_wifi_cb+0x290>)
    108a:	47a0      	blx	r4
    108c:	2800      	cmp	r0, #0
    108e:	d000      	beq.n	1092 <m2m_wifi_cb+0x1e6>
    1090:	e740      	b.n	f14 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1092:	4b2b      	ldr	r3, [pc, #172]	; (1140 <m2m_wifi_cb+0x294>)
    1094:	681b      	ldr	r3, [r3, #0]
    1096:	2b00      	cmp	r3, #0
    1098:	d100      	bne.n	109c <m2m_wifi_cb+0x1f0>
    109a:	e73b      	b.n	f14 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    109c:	a91c      	add	r1, sp, #112	; 0x70
    109e:	3065      	adds	r0, #101	; 0x65
    10a0:	4798      	blx	r3
    10a2:	e737      	b.n	f14 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    10a4:	2301      	movs	r3, #1
    10a6:	2264      	movs	r2, #100	; 0x64
    10a8:	a903      	add	r1, sp, #12
    10aa:	0028      	movs	r0, r5
    10ac:	4c23      	ldr	r4, [pc, #140]	; (113c <m2m_wifi_cb+0x290>)
    10ae:	47a0      	blx	r4
    10b0:	2800      	cmp	r0, #0
    10b2:	d000      	beq.n	10b6 <m2m_wifi_cb+0x20a>
    10b4:	e72e      	b.n	f14 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    10b6:	4b22      	ldr	r3, [pc, #136]	; (1140 <m2m_wifi_cb+0x294>)
    10b8:	681b      	ldr	r3, [r3, #0]
    10ba:	2b00      	cmp	r3, #0
    10bc:	d100      	bne.n	10c0 <m2m_wifi_cb+0x214>
    10be:	e729      	b.n	f14 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    10c0:	a903      	add	r1, sp, #12
    10c2:	3009      	adds	r0, #9
    10c4:	4798      	blx	r3
    10c6:	e725      	b.n	f14 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    10c8:	2301      	movs	r3, #1
    10ca:	2204      	movs	r2, #4
    10cc:	a903      	add	r1, sp, #12
    10ce:	0028      	movs	r0, r5
    10d0:	4c1a      	ldr	r4, [pc, #104]	; (113c <m2m_wifi_cb+0x290>)
    10d2:	47a0      	blx	r4
    10d4:	2800      	cmp	r0, #0
    10d6:	d000      	beq.n	10da <m2m_wifi_cb+0x22e>
    10d8:	e71c      	b.n	f14 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    10da:	4b19      	ldr	r3, [pc, #100]	; (1140 <m2m_wifi_cb+0x294>)
    10dc:	681b      	ldr	r3, [r3, #0]
    10de:	2b00      	cmp	r3, #0
    10e0:	d100      	bne.n	10e4 <m2m_wifi_cb+0x238>
    10e2:	e717      	b.n	f14 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    10e4:	a903      	add	r1, sp, #12
    10e6:	302a      	adds	r0, #42	; 0x2a
    10e8:	4798      	blx	r3
    10ea:	e713      	b.n	f14 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    10ec:	2300      	movs	r3, #0
    10ee:	2208      	movs	r2, #8
    10f0:	a903      	add	r1, sp, #12
    10f2:	0028      	movs	r0, r5
    10f4:	4c11      	ldr	r4, [pc, #68]	; (113c <m2m_wifi_cb+0x290>)
    10f6:	47a0      	blx	r4
    10f8:	2800      	cmp	r0, #0
    10fa:	d000      	beq.n	10fe <m2m_wifi_cb+0x252>
    10fc:	e70a      	b.n	f14 <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    10fe:	ab03      	add	r3, sp, #12
    1100:	889a      	ldrh	r2, [r3, #4]
    1102:	0028      	movs	r0, r5
    1104:	3008      	adds	r0, #8
    1106:	2301      	movs	r3, #1
    1108:	9903      	ldr	r1, [sp, #12]
    110a:	4c0c      	ldr	r4, [pc, #48]	; (113c <m2m_wifi_cb+0x290>)
    110c:	47a0      	blx	r4
    110e:	2800      	cmp	r0, #0
    1110:	d000      	beq.n	1114 <m2m_wifi_cb+0x268>
    1112:	e6ff      	b.n	f14 <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    1114:	4b0a      	ldr	r3, [pc, #40]	; (1140 <m2m_wifi_cb+0x294>)
    1116:	681b      	ldr	r3, [r3, #0]
    1118:	2b00      	cmp	r3, #0
    111a:	d100      	bne.n	111e <m2m_wifi_cb+0x272>
    111c:	e6fa      	b.n	f14 <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    111e:	a903      	add	r1, sp, #12
    1120:	3020      	adds	r0, #32
    1122:	4798      	blx	r3
    1124:	e6f6      	b.n	f14 <m2m_wifi_cb+0x68>
    1126:	46c0      	nop			; (mov r8, r8)
    1128:	00008638 	.word	0x00008638
    112c:	000082d0 	.word	0x000082d0
    1130:	00006f15 	.word	0x00006f15
    1134:	00008688 	.word	0x00008688
    1138:	00006f49 	.word	0x00006f49
    113c:	00000d05 	.word	0x00000d05
    1140:	200000e4 	.word	0x200000e4
    1144:	000005e5 	.word	0x000005e5
    1148:	00008600 	.word	0x00008600
    114c:	00008668 	.word	0x00008668
    1150:	200000e9 	.word	0x200000e9
    1154:	200000e8 	.word	0x200000e8

00001158 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    1158:	b5f0      	push	{r4, r5, r6, r7, lr}
    115a:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    115c:	2201      	movs	r2, #1
    115e:	230f      	movs	r3, #15
    1160:	446b      	add	r3, sp
    1162:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    1164:	2800      	cmp	r0, #0
    1166:	d061      	beq.n	122c <m2m_wifi_init+0xd4>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    1168:	6802      	ldr	r2, [r0, #0]
    116a:	4b32      	ldr	r3, [pc, #200]	; (1234 <m2m_wifi_init+0xdc>)
    116c:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    116e:	2200      	movs	r2, #0
    1170:	4b31      	ldr	r3, [pc, #196]	; (1238 <m2m_wifi_init+0xe0>)
    1172:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    1174:	200f      	movs	r0, #15
    1176:	4468      	add	r0, sp
    1178:	4b30      	ldr	r3, [pc, #192]	; (123c <m2m_wifi_init+0xe4>)
    117a:	4798      	blx	r3
    117c:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    117e:	d002      	beq.n	1186 <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    1180:	0020      	movs	r0, r4
    1182:	b00f      	add	sp, #60	; 0x3c
    1184:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    1186:	2000      	movs	r0, #0
    1188:	4b2d      	ldr	r3, [pc, #180]	; (1240 <m2m_wifi_init+0xe8>)
    118a:	4798      	blx	r3
    118c:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    118e:	d149      	bne.n	1224 <m2m_wifi_init+0xcc>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    1190:	492c      	ldr	r1, [pc, #176]	; (1244 <m2m_wifi_init+0xec>)
    1192:	2001      	movs	r0, #1
    1194:	4b2c      	ldr	r3, [pc, #176]	; (1248 <m2m_wifi_init+0xf0>)
    1196:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    1198:	ae04      	add	r6, sp, #16
    119a:	0030      	movs	r0, r6
    119c:	4b2b      	ldr	r3, [pc, #172]	; (124c <m2m_wifi_init+0xf4>)
    119e:	4798      	blx	r3
    11a0:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    11a2:	482b      	ldr	r0, [pc, #172]	; (1250 <m2m_wifi_init+0xf8>)
    11a4:	4d2b      	ldr	r5, [pc, #172]	; (1254 <m2m_wifi_init+0xfc>)
    11a6:	47a8      	blx	r5
    11a8:	79b3      	ldrb	r3, [r6, #6]
    11aa:	7972      	ldrb	r2, [r6, #5]
    11ac:	7931      	ldrb	r1, [r6, #4]
    11ae:	8c30      	ldrh	r0, [r6, #32]
    11b0:	9000      	str	r0, [sp, #0]
    11b2:	4829      	ldr	r0, [pc, #164]	; (1258 <m2m_wifi_init+0x100>)
    11b4:	47a8      	blx	r5
    11b6:	200d      	movs	r0, #13
    11b8:	4f28      	ldr	r7, [pc, #160]	; (125c <m2m_wifi_init+0x104>)
    11ba:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    11bc:	4824      	ldr	r0, [pc, #144]	; (1250 <m2m_wifi_init+0xf8>)
    11be:	47a8      	blx	r5
    11c0:	2226      	movs	r2, #38	; 0x26
    11c2:	446a      	add	r2, sp
    11c4:	211a      	movs	r1, #26
    11c6:	4469      	add	r1, sp
    11c8:	4825      	ldr	r0, [pc, #148]	; (1260 <m2m_wifi_init+0x108>)
    11ca:	47a8      	blx	r5
    11cc:	200d      	movs	r0, #13
    11ce:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    11d0:	481f      	ldr	r0, [pc, #124]	; (1250 <m2m_wifi_init+0xf8>)
    11d2:	47a8      	blx	r5
    11d4:	7a73      	ldrb	r3, [r6, #9]
    11d6:	7a32      	ldrb	r2, [r6, #8]
    11d8:	79f1      	ldrb	r1, [r6, #7]
    11da:	4822      	ldr	r0, [pc, #136]	; (1264 <m2m_wifi_init+0x10c>)
    11dc:	47a8      	blx	r5
    11de:	200d      	movs	r0, #13
    11e0:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    11e2:	481b      	ldr	r0, [pc, #108]	; (1250 <m2m_wifi_init+0xf8>)
    11e4:	47a8      	blx	r5
    11e6:	2302      	movs	r3, #2
    11e8:	2205      	movs	r2, #5
    11ea:	2113      	movs	r1, #19
    11ec:	481e      	ldr	r0, [pc, #120]	; (1268 <m2m_wifi_init+0x110>)
    11ee:	47a8      	blx	r5
    11f0:	200d      	movs	r0, #13
    11f2:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    11f4:	4816      	ldr	r0, [pc, #88]	; (1250 <m2m_wifi_init+0xf8>)
    11f6:	47a8      	blx	r5
    11f8:	4a1c      	ldr	r2, [pc, #112]	; (126c <m2m_wifi_init+0x114>)
    11fa:	491d      	ldr	r1, [pc, #116]	; (1270 <m2m_wifi_init+0x118>)
    11fc:	481d      	ldr	r0, [pc, #116]	; (1274 <m2m_wifi_init+0x11c>)
    11fe:	47a8      	blx	r5
    1200:	200d      	movs	r0, #13
    1202:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    1204:	0023      	movs	r3, r4
    1206:	330d      	adds	r3, #13
    1208:	d1ba      	bne.n	1180 <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    120a:	22e8      	movs	r2, #232	; 0xe8
    120c:	32ff      	adds	r2, #255	; 0xff
    120e:	491a      	ldr	r1, [pc, #104]	; (1278 <m2m_wifi_init+0x120>)
    1210:	481a      	ldr	r0, [pc, #104]	; (127c <m2m_wifi_init+0x124>)
    1212:	4b10      	ldr	r3, [pc, #64]	; (1254 <m2m_wifi_init+0xfc>)
    1214:	4798      	blx	r3
    1216:	481a      	ldr	r0, [pc, #104]	; (1280 <m2m_wifi_init+0x128>)
    1218:	4b1a      	ldr	r3, [pc, #104]	; (1284 <m2m_wifi_init+0x12c>)
    121a:	4798      	blx	r3
    121c:	200d      	movs	r0, #13
    121e:	4b0f      	ldr	r3, [pc, #60]	; (125c <m2m_wifi_init+0x104>)
    1220:	4798      	blx	r3
    1222:	e7ad      	b.n	1180 <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    1224:	2000      	movs	r0, #0
    1226:	4b18      	ldr	r3, [pc, #96]	; (1288 <m2m_wifi_init+0x130>)
    1228:	4798      	blx	r3
    122a:	e7a9      	b.n	1180 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    122c:	240c      	movs	r4, #12
    122e:	4264      	negs	r4, r4
    1230:	e7a6      	b.n	1180 <m2m_wifi_init+0x28>
    1232:	46c0      	nop			; (mov r8, r8)
    1234:	200000e4 	.word	0x200000e4
    1238:	200000e9 	.word	0x200000e9
    123c:	00001bf9 	.word	0x00001bf9
    1240:	00000e75 	.word	0x00000e75
    1244:	00000ead 	.word	0x00000ead
    1248:	00000df1 	.word	0x00000df1
    124c:	00001b15 	.word	0x00001b15
    1250:	00008600 	.word	0x00008600
    1254:	00006f15 	.word	0x00006f15
    1258:	00008744 	.word	0x00008744
    125c:	00006f49 	.word	0x00006f49
    1260:	0000876c 	.word	0x0000876c
    1264:	00008788 	.word	0x00008788
    1268:	000087ac 	.word	0x000087ac
    126c:	000087c4 	.word	0x000087c4
    1270:	000087d0 	.word	0x000087d0
    1274:	000087dc 	.word	0x000087dc
    1278:	00008644 	.word	0x00008644
    127c:	000082d0 	.word	0x000082d0
    1280:	000087f4 	.word	0x000087f4
    1284:	00007031 	.word	0x00007031
    1288:	00001ccd 	.word	0x00001ccd

0000128c <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    128c:	b510      	push	{r4, lr}
	return hif_handle_isr();
    128e:	4b01      	ldr	r3, [pc, #4]	; (1294 <m2m_wifi_handle_events+0x8>)
    1290:	4798      	blx	r3
}
    1292:	bd10      	pop	{r4, pc}
    1294:	00000929 	.word	0x00000929

00001298 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    1298:	b5f0      	push	{r4, r5, r6, r7, lr}
    129a:	46ce      	mov	lr, r9
    129c:	4647      	mov	r7, r8
    129e:	b580      	push	{r7, lr}
    12a0:	b0a3      	sub	sp, #140	; 0x8c
    12a2:	9005      	str	r0, [sp, #20]
    12a4:	000c      	movs	r4, r1
    12a6:	0015      	movs	r5, r2
    12a8:	001f      	movs	r7, r3
    12aa:	ab2a      	add	r3, sp, #168	; 0xa8
    12ac:	881b      	ldrh	r3, [r3, #0]
    12ae:	4699      	mov	r9, r3
    12b0:	ab2b      	add	r3, sp, #172	; 0xac
    12b2:	781b      	ldrb	r3, [r3, #0]
    12b4:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    12b6:	2a01      	cmp	r2, #1
    12b8:	d003      	beq.n	12c2 <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    12ba:	2f00      	cmp	r7, #0
    12bc:	d040      	beq.n	1340 <m2m_wifi_connect_sc+0xa8>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    12be:	2a02      	cmp	r2, #2
    12c0:	d04c      	beq.n	135c <m2m_wifi_connect_sc+0xc4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    12c2:	1e63      	subs	r3, r4, #1
    12c4:	2b1f      	cmp	r3, #31
    12c6:	d900      	bls.n	12ca <m2m_wifi_connect_sc+0x32>
    12c8:	e078      	b.n	13bc <m2m_wifi_connect_sc+0x124>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    12ca:	464b      	mov	r3, r9
    12cc:	3b01      	subs	r3, #1
    12ce:	b29b      	uxth	r3, r3
    12d0:	2b0d      	cmp	r3, #13
    12d2:	d903      	bls.n	12dc <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    12d4:	464b      	mov	r3, r9
    12d6:	2bff      	cmp	r3, #255	; 0xff
    12d8:	d000      	beq.n	12dc <m2m_wifi_connect_sc+0x44>
    12da:	e07d      	b.n	13d8 <m2m_wifi_connect_sc+0x140>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    12dc:	ae07      	add	r6, sp, #28
    12de:	0022      	movs	r2, r4
    12e0:	9905      	ldr	r1, [sp, #20]
    12e2:	205a      	movs	r0, #90	; 0x5a
    12e4:	ab02      	add	r3, sp, #8
    12e6:	469c      	mov	ip, r3
    12e8:	4460      	add	r0, ip
    12ea:	4b78      	ldr	r3, [pc, #480]	; (14cc <m2m_wifi_connect_sc+0x234>)
    12ec:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    12ee:	1934      	adds	r4, r6, r4
    12f0:	3446      	adds	r4, #70	; 0x46
    12f2:	2300      	movs	r3, #0
    12f4:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    12f6:	3344      	adds	r3, #68	; 0x44
    12f8:	464a      	mov	r2, r9
    12fa:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    12fc:	4643      	mov	r3, r8
    12fe:	1e5a      	subs	r2, r3, #1
    1300:	4193      	sbcs	r3, r2
    1302:	2267      	movs	r2, #103	; 0x67
    1304:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    1306:	2341      	movs	r3, #65	; 0x41
    1308:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    130a:	2d03      	cmp	r5, #3
    130c:	d100      	bne.n	1310 <m2m_wifi_connect_sc+0x78>
    130e:	e072      	b.n	13f6 <m2m_wifi_connect_sc+0x15e>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    1310:	2d02      	cmp	r5, #2
    1312:	d100      	bne.n	1316 <m2m_wifi_connect_sc+0x7e>
    1314:	e0ab      	b.n	146e <m2m_wifi_connect_sc+0x1d6>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    1316:	2d04      	cmp	r5, #4
    1318:	d100      	bne.n	131c <m2m_wifi_connect_sc+0x84>
    131a:	e0c3      	b.n	14a4 <m2m_wifi_connect_sc+0x20c>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    131c:	2d01      	cmp	r5, #1
    131e:	d000      	beq.n	1322 <m2m_wifi_connect_sc+0x8a>
    1320:	e0c6      	b.n	14b0 <m2m_wifi_connect_sc+0x218>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    1322:	2300      	movs	r3, #0
    1324:	9302      	str	r3, [sp, #8]
    1326:	9301      	str	r3, [sp, #4]
    1328:	9300      	str	r3, [sp, #0]
    132a:	336c      	adds	r3, #108	; 0x6c
    132c:	aa07      	add	r2, sp, #28
    132e:	2128      	movs	r1, #40	; 0x28
    1330:	2001      	movs	r0, #1
    1332:	4c67      	ldr	r4, [pc, #412]	; (14d0 <m2m_wifi_connect_sc+0x238>)
    1334:	47a0      	blx	r4

ERR1:
	return ret;
}
    1336:	b023      	add	sp, #140	; 0x8c
    1338:	bc0c      	pop	{r2, r3}
    133a:	4690      	mov	r8, r2
    133c:	4699      	mov	r9, r3
    133e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    1340:	4a64      	ldr	r2, [pc, #400]	; (14d4 <m2m_wifi_connect_sc+0x23c>)
    1342:	4965      	ldr	r1, [pc, #404]	; (14d8 <m2m_wifi_connect_sc+0x240>)
    1344:	4865      	ldr	r0, [pc, #404]	; (14dc <m2m_wifi_connect_sc+0x244>)
    1346:	4b66      	ldr	r3, [pc, #408]	; (14e0 <m2m_wifi_connect_sc+0x248>)
    1348:	4798      	blx	r3
    134a:	4866      	ldr	r0, [pc, #408]	; (14e4 <m2m_wifi_connect_sc+0x24c>)
    134c:	4b66      	ldr	r3, [pc, #408]	; (14e8 <m2m_wifi_connect_sc+0x250>)
    134e:	4798      	blx	r3
    1350:	200d      	movs	r0, #13
    1352:	4b66      	ldr	r3, [pc, #408]	; (14ec <m2m_wifi_connect_sc+0x254>)
    1354:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1356:	200c      	movs	r0, #12
    1358:	4240      	negs	r0, r0
			goto ERR1;
    135a:	e7ec      	b.n	1336 <m2m_wifi_connect_sc+0x9e>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    135c:	0038      	movs	r0, r7
    135e:	4b64      	ldr	r3, [pc, #400]	; (14f0 <m2m_wifi_connect_sc+0x258>)
    1360:	4798      	blx	r3
    1362:	2840      	cmp	r0, #64	; 0x40
    1364:	d1ad      	bne.n	12c2 <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    1366:	783b      	ldrb	r3, [r7, #0]
    1368:	001a      	movs	r2, r3
    136a:	3a30      	subs	r2, #48	; 0x30
    136c:	2a36      	cmp	r2, #54	; 0x36
    136e:	d817      	bhi.n	13a0 <m2m_wifi_connect_sc+0x108>
    1370:	3a0a      	subs	r2, #10
    1372:	2a06      	cmp	r2, #6
    1374:	d914      	bls.n	13a0 <m2m_wifi_connect_sc+0x108>
    1376:	3b47      	subs	r3, #71	; 0x47
    1378:	2b19      	cmp	r3, #25
    137a:	d911      	bls.n	13a0 <m2m_wifi_connect_sc+0x108>
    137c:	1c7a      	adds	r2, r7, #1
    137e:	0038      	movs	r0, r7
    1380:	3040      	adds	r0, #64	; 0x40
    1382:	7813      	ldrb	r3, [r2, #0]
    1384:	0019      	movs	r1, r3
    1386:	3930      	subs	r1, #48	; 0x30
    1388:	2936      	cmp	r1, #54	; 0x36
    138a:	d809      	bhi.n	13a0 <m2m_wifi_connect_sc+0x108>
    138c:	390a      	subs	r1, #10
    138e:	2906      	cmp	r1, #6
    1390:	d906      	bls.n	13a0 <m2m_wifi_connect_sc+0x108>
    1392:	3b47      	subs	r3, #71	; 0x47
    1394:	2b19      	cmp	r3, #25
    1396:	d903      	bls.n	13a0 <m2m_wifi_connect_sc+0x108>
    1398:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    139a:	4282      	cmp	r2, r0
    139c:	d1f1      	bne.n	1382 <m2m_wifi_connect_sc+0xea>
    139e:	e790      	b.n	12c2 <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    13a0:	4a54      	ldr	r2, [pc, #336]	; (14f4 <m2m_wifi_connect_sc+0x25c>)
    13a2:	494d      	ldr	r1, [pc, #308]	; (14d8 <m2m_wifi_connect_sc+0x240>)
    13a4:	484d      	ldr	r0, [pc, #308]	; (14dc <m2m_wifi_connect_sc+0x244>)
    13a6:	4b4e      	ldr	r3, [pc, #312]	; (14e0 <m2m_wifi_connect_sc+0x248>)
    13a8:	4798      	blx	r3
    13aa:	4853      	ldr	r0, [pc, #332]	; (14f8 <m2m_wifi_connect_sc+0x260>)
    13ac:	4b4e      	ldr	r3, [pc, #312]	; (14e8 <m2m_wifi_connect_sc+0x250>)
    13ae:	4798      	blx	r3
    13b0:	200d      	movs	r0, #13
    13b2:	4b4e      	ldr	r3, [pc, #312]	; (14ec <m2m_wifi_connect_sc+0x254>)
    13b4:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    13b6:	200c      	movs	r0, #12
    13b8:	4240      	negs	r0, r0
					goto ERR1;
    13ba:	e7bc      	b.n	1336 <m2m_wifi_connect_sc+0x9e>
		M2M_ERR("SSID LEN INVALID\n");
    13bc:	4a4f      	ldr	r2, [pc, #316]	; (14fc <m2m_wifi_connect_sc+0x264>)
    13be:	4946      	ldr	r1, [pc, #280]	; (14d8 <m2m_wifi_connect_sc+0x240>)
    13c0:	4846      	ldr	r0, [pc, #280]	; (14dc <m2m_wifi_connect_sc+0x244>)
    13c2:	4b47      	ldr	r3, [pc, #284]	; (14e0 <m2m_wifi_connect_sc+0x248>)
    13c4:	4798      	blx	r3
    13c6:	484e      	ldr	r0, [pc, #312]	; (1500 <m2m_wifi_connect_sc+0x268>)
    13c8:	4b47      	ldr	r3, [pc, #284]	; (14e8 <m2m_wifi_connect_sc+0x250>)
    13ca:	4798      	blx	r3
    13cc:	200d      	movs	r0, #13
    13ce:	4b47      	ldr	r3, [pc, #284]	; (14ec <m2m_wifi_connect_sc+0x254>)
    13d0:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    13d2:	200c      	movs	r0, #12
    13d4:	4240      	negs	r0, r0
		goto ERR1;
    13d6:	e7ae      	b.n	1336 <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("CH INVALID\n");
    13d8:	228d      	movs	r2, #141	; 0x8d
    13da:	0092      	lsls	r2, r2, #2
    13dc:	493e      	ldr	r1, [pc, #248]	; (14d8 <m2m_wifi_connect_sc+0x240>)
    13de:	483f      	ldr	r0, [pc, #252]	; (14dc <m2m_wifi_connect_sc+0x244>)
    13e0:	4b3f      	ldr	r3, [pc, #252]	; (14e0 <m2m_wifi_connect_sc+0x248>)
    13e2:	4798      	blx	r3
    13e4:	4847      	ldr	r0, [pc, #284]	; (1504 <m2m_wifi_connect_sc+0x26c>)
    13e6:	4b40      	ldr	r3, [pc, #256]	; (14e8 <m2m_wifi_connect_sc+0x250>)
    13e8:	4798      	blx	r3
    13ea:	200d      	movs	r0, #13
    13ec:	4b3f      	ldr	r3, [pc, #252]	; (14ec <m2m_wifi_connect_sc+0x254>)
    13ee:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    13f0:	200c      	movs	r0, #12
    13f2:	4240      	negs	r0, r0
			goto ERR1;
    13f4:	e79f      	b.n	1336 <m2m_wifi_connect_sc+0x9e>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    13f6:	783b      	ldrb	r3, [r7, #0]
    13f8:	3b01      	subs	r3, #1
    13fa:	b2db      	uxtb	r3, r3
    13fc:	aa07      	add	r2, sp, #28
    13fe:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    1400:	2b03      	cmp	r3, #3
    1402:	d817      	bhi.n	1434 <m2m_wifi_connect_sc+0x19c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    1404:	787a      	ldrb	r2, [r7, #1]
    1406:	1e51      	subs	r1, r2, #1
    1408:	ab07      	add	r3, sp, #28
    140a:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    140c:	2310      	movs	r3, #16
    140e:	0011      	movs	r1, r2
    1410:	4399      	bics	r1, r3
    1412:	290b      	cmp	r1, #11
    1414:	d01d      	beq.n	1452 <m2m_wifi_connect_sc+0x1ba>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    1416:	4a3c      	ldr	r2, [pc, #240]	; (1508 <m2m_wifi_connect_sc+0x270>)
    1418:	492f      	ldr	r1, [pc, #188]	; (14d8 <m2m_wifi_connect_sc+0x240>)
    141a:	4830      	ldr	r0, [pc, #192]	; (14dc <m2m_wifi_connect_sc+0x244>)
    141c:	4c30      	ldr	r4, [pc, #192]	; (14e0 <m2m_wifi_connect_sc+0x248>)
    141e:	47a0      	blx	r4
    1420:	ab07      	add	r3, sp, #28
    1422:	7859      	ldrb	r1, [r3, #1]
    1424:	4839      	ldr	r0, [pc, #228]	; (150c <m2m_wifi_connect_sc+0x274>)
    1426:	47a0      	blx	r4
    1428:	200d      	movs	r0, #13
    142a:	4b30      	ldr	r3, [pc, #192]	; (14ec <m2m_wifi_connect_sc+0x254>)
    142c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    142e:	200c      	movs	r0, #12
    1430:	4240      	negs	r0, r0
			goto ERR1;
    1432:	e780      	b.n	1336 <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    1434:	4a36      	ldr	r2, [pc, #216]	; (1510 <m2m_wifi_connect_sc+0x278>)
    1436:	4928      	ldr	r1, [pc, #160]	; (14d8 <m2m_wifi_connect_sc+0x240>)
    1438:	4828      	ldr	r0, [pc, #160]	; (14dc <m2m_wifi_connect_sc+0x244>)
    143a:	4c29      	ldr	r4, [pc, #164]	; (14e0 <m2m_wifi_connect_sc+0x248>)
    143c:	47a0      	blx	r4
    143e:	ab07      	add	r3, sp, #28
    1440:	7819      	ldrb	r1, [r3, #0]
    1442:	4834      	ldr	r0, [pc, #208]	; (1514 <m2m_wifi_connect_sc+0x27c>)
    1444:	47a0      	blx	r4
    1446:	200d      	movs	r0, #13
    1448:	4b28      	ldr	r3, [pc, #160]	; (14ec <m2m_wifi_connect_sc+0x254>)
    144a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    144c:	200c      	movs	r0, #12
    144e:	4240      	negs	r0, r0
			goto ERR1;
    1450:	e771      	b.n	1336 <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    1452:	1cb9      	adds	r1, r7, #2
    1454:	2016      	movs	r0, #22
    1456:	ab02      	add	r3, sp, #8
    1458:	469c      	mov	ip, r3
    145a:	4460      	add	r0, ip
    145c:	4b1b      	ldr	r3, [pc, #108]	; (14cc <m2m_wifi_connect_sc+0x234>)
    145e:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    1460:	787b      	ldrb	r3, [r7, #1]
    1462:	aa07      	add	r2, sp, #28
    1464:	4694      	mov	ip, r2
    1466:	4463      	add	r3, ip
    1468:	2200      	movs	r2, #0
    146a:	709a      	strb	r2, [r3, #2]
    146c:	e759      	b.n	1322 <m2m_wifi_connect_sc+0x8a>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    146e:	0038      	movs	r0, r7
    1470:	4b1f      	ldr	r3, [pc, #124]	; (14f0 <m2m_wifi_connect_sc+0x258>)
    1472:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    1474:	1e43      	subs	r3, r0, #1
    1476:	b29b      	uxth	r3, r3
    1478:	2b3f      	cmp	r3, #63	; 0x3f
    147a:	d805      	bhi.n	1488 <m2m_wifi_connect_sc+0x1f0>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    147c:	1c42      	adds	r2, r0, #1
    147e:	0039      	movs	r1, r7
    1480:	a807      	add	r0, sp, #28
    1482:	4b12      	ldr	r3, [pc, #72]	; (14cc <m2m_wifi_connect_sc+0x234>)
    1484:	4798      	blx	r3
    1486:	e74c      	b.n	1322 <m2m_wifi_connect_sc+0x8a>
			M2M_ERR("Incorrect PSK key length\n");
    1488:	4a23      	ldr	r2, [pc, #140]	; (1518 <m2m_wifi_connect_sc+0x280>)
    148a:	4913      	ldr	r1, [pc, #76]	; (14d8 <m2m_wifi_connect_sc+0x240>)
    148c:	4813      	ldr	r0, [pc, #76]	; (14dc <m2m_wifi_connect_sc+0x244>)
    148e:	4b14      	ldr	r3, [pc, #80]	; (14e0 <m2m_wifi_connect_sc+0x248>)
    1490:	4798      	blx	r3
    1492:	4822      	ldr	r0, [pc, #136]	; (151c <m2m_wifi_connect_sc+0x284>)
    1494:	4b14      	ldr	r3, [pc, #80]	; (14e8 <m2m_wifi_connect_sc+0x250>)
    1496:	4798      	blx	r3
    1498:	200d      	movs	r0, #13
    149a:	4b14      	ldr	r3, [pc, #80]	; (14ec <m2m_wifi_connect_sc+0x254>)
    149c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    149e:	200c      	movs	r0, #12
    14a0:	4240      	negs	r0, r0
			goto ERR1;
    14a2:	e748      	b.n	1336 <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    14a4:	223e      	movs	r2, #62	; 0x3e
    14a6:	0039      	movs	r1, r7
    14a8:	a807      	add	r0, sp, #28
    14aa:	4b08      	ldr	r3, [pc, #32]	; (14cc <m2m_wifi_connect_sc+0x234>)
    14ac:	4798      	blx	r3
    14ae:	e738      	b.n	1322 <m2m_wifi_connect_sc+0x8a>
		M2M_ERR("undefined sec type\n");
    14b0:	4a1b      	ldr	r2, [pc, #108]	; (1520 <m2m_wifi_connect_sc+0x288>)
    14b2:	4909      	ldr	r1, [pc, #36]	; (14d8 <m2m_wifi_connect_sc+0x240>)
    14b4:	4809      	ldr	r0, [pc, #36]	; (14dc <m2m_wifi_connect_sc+0x244>)
    14b6:	4b0a      	ldr	r3, [pc, #40]	; (14e0 <m2m_wifi_connect_sc+0x248>)
    14b8:	4798      	blx	r3
    14ba:	481a      	ldr	r0, [pc, #104]	; (1524 <m2m_wifi_connect_sc+0x28c>)
    14bc:	4b0a      	ldr	r3, [pc, #40]	; (14e8 <m2m_wifi_connect_sc+0x250>)
    14be:	4798      	blx	r3
    14c0:	200d      	movs	r0, #13
    14c2:	4b0a      	ldr	r3, [pc, #40]	; (14ec <m2m_wifi_connect_sc+0x254>)
    14c4:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    14c6:	200c      	movs	r0, #12
    14c8:	4240      	negs	r0, r0
		goto ERR1;
    14ca:	e734      	b.n	1336 <m2m_wifi_connect_sc+0x9e>
    14cc:	000005d1 	.word	0x000005d1
    14d0:	000006f9 	.word	0x000006f9
    14d4:	00000215 	.word	0x00000215
    14d8:	00008654 	.word	0x00008654
    14dc:	000082d0 	.word	0x000082d0
    14e0:	00006f15 	.word	0x00006f15
    14e4:	0000869c 	.word	0x0000869c
    14e8:	00007031 	.word	0x00007031
    14ec:	00006f49 	.word	0x00006f49
    14f0:	000005f5 	.word	0x000005f5
    14f4:	00000221 	.word	0x00000221
    14f8:	000086b0 	.word	0x000086b0
    14fc:	0000022b 	.word	0x0000022b
    1500:	000086bc 	.word	0x000086bc
    1504:	000086d0 	.word	0x000086d0
    1508:	00000252 	.word	0x00000252
    150c:	000086f8 	.word	0x000086f8
    1510:	0000024b 	.word	0x0000024b
    1514:	000086dc 	.word	0x000086dc
    1518:	00000261 	.word	0x00000261
    151c:	00008714 	.word	0x00008714
    1520:	00000271 	.word	0x00000271
    1524:	00008730 	.word	0x00008730

00001528 <m2m_wifi_connect>:
{
    1528:	b530      	push	{r4, r5, lr}
    152a:	b083      	sub	sp, #12
    152c:	ac06      	add	r4, sp, #24
    152e:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    1530:	2500      	movs	r5, #0
    1532:	9501      	str	r5, [sp, #4]
    1534:	9400      	str	r4, [sp, #0]
    1536:	4c02      	ldr	r4, [pc, #8]	; (1540 <m2m_wifi_connect+0x18>)
    1538:	47a0      	blx	r4
}
    153a:	b003      	add	sp, #12
    153c:	bd30      	pop	{r4, r5, pc}
    153e:	46c0      	nop			; (mov r8, r8)
    1540:	00001299 	.word	0x00001299

00001544 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    1544:	2000      	movs	r0, #0
    1546:	4770      	bx	lr

00001548 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    1548:	b5f0      	push	{r4, r5, r6, r7, lr}
    154a:	b083      	sub	sp, #12
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    154c:	2580      	movs	r5, #128	; 0x80
    154e:	006d      	lsls	r5, r5, #1
    1550:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    1552:	24a5      	movs	r4, #165	; 0xa5
    1554:	0164      	lsls	r4, r4, #5
    1556:	4f08      	ldr	r7, [pc, #32]	; (1578 <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    1558:	4e08      	ldr	r6, [pc, #32]	; (157c <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    155a:	0029      	movs	r1, r5
    155c:	0020      	movs	r0, r4
    155e:	47b8      	blx	r7
			uint32 reg = 0;
    1560:	2300      	movs	r3, #0
    1562:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    1564:	a901      	add	r1, sp, #4
    1566:	0020      	movs	r0, r4
    1568:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    156a:	2800      	cmp	r0, #0
    156c:	d1f5      	bne.n	155a <chip_apply_conf+0x12>
				if(reg == val32)
    156e:	9b01      	ldr	r3, [sp, #4]
    1570:	429d      	cmp	r5, r3
    1572:	d1f2      	bne.n	155a <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    1574:	b003      	add	sp, #12
    1576:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1578:	00001a39 	.word	0x00001a39
    157c:	00001a2d 	.word	0x00001a2d

00001580 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    1580:	b500      	push	{lr}
    1582:	b083      	sub	sp, #12
	uint32 reg = 0;
    1584:	2300      	movs	r3, #0
    1586:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    1588:	a901      	add	r1, sp, #4
    158a:	4811      	ldr	r0, [pc, #68]	; (15d0 <enable_interrupts+0x50>)
    158c:	4b11      	ldr	r3, [pc, #68]	; (15d4 <enable_interrupts+0x54>)
    158e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    1590:	2800      	cmp	r0, #0
    1592:	d001      	beq.n	1598 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    1594:	b003      	add	sp, #12
    1596:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    1598:	2180      	movs	r1, #128	; 0x80
    159a:	0049      	lsls	r1, r1, #1
    159c:	9b01      	ldr	r3, [sp, #4]
    159e:	4319      	orrs	r1, r3
    15a0:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    15a2:	480b      	ldr	r0, [pc, #44]	; (15d0 <enable_interrupts+0x50>)
    15a4:	4b0c      	ldr	r3, [pc, #48]	; (15d8 <enable_interrupts+0x58>)
    15a6:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    15a8:	2800      	cmp	r0, #0
    15aa:	d1f3      	bne.n	1594 <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    15ac:	a901      	add	r1, sp, #4
    15ae:	20d0      	movs	r0, #208	; 0xd0
    15b0:	0140      	lsls	r0, r0, #5
    15b2:	4b08      	ldr	r3, [pc, #32]	; (15d4 <enable_interrupts+0x54>)
    15b4:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    15b6:	2800      	cmp	r0, #0
    15b8:	d1ec      	bne.n	1594 <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    15ba:	2180      	movs	r1, #128	; 0x80
    15bc:	0249      	lsls	r1, r1, #9
    15be:	9b01      	ldr	r3, [sp, #4]
    15c0:	4319      	orrs	r1, r3
    15c2:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    15c4:	20d0      	movs	r0, #208	; 0xd0
    15c6:	0140      	lsls	r0, r0, #5
    15c8:	4b03      	ldr	r3, [pc, #12]	; (15d8 <enable_interrupts+0x58>)
    15ca:	4798      	blx	r3
    15cc:	e7e2      	b.n	1594 <enable_interrupts+0x14>
    15ce:	46c0      	nop			; (mov r8, r8)
    15d0:	00001408 	.word	0x00001408
    15d4:	00001a2d 	.word	0x00001a2d
    15d8:	00001a39 	.word	0x00001a39

000015dc <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    15dc:	b510      	push	{r4, lr}
    15de:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    15e0:	4b28      	ldr	r3, [pc, #160]	; (1684 <nmi_get_chipid+0xa8>)
    15e2:	681c      	ldr	r4, [r3, #0]
    15e4:	2c00      	cmp	r4, #0
    15e6:	d004      	beq.n	15f2 <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    15e8:	4b26      	ldr	r3, [pc, #152]	; (1684 <nmi_get_chipid+0xa8>)
    15ea:	681c      	ldr	r4, [r3, #0]
}
    15ec:	0020      	movs	r0, r4
    15ee:	b002      	add	sp, #8
    15f0:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    15f2:	0019      	movs	r1, r3
    15f4:	2080      	movs	r0, #128	; 0x80
    15f6:	0140      	lsls	r0, r0, #5
    15f8:	4b23      	ldr	r3, [pc, #140]	; (1688 <nmi_get_chipid+0xac>)
    15fa:	4798      	blx	r3
    15fc:	2800      	cmp	r0, #0
    15fe:	d003      	beq.n	1608 <nmi_get_chipid+0x2c>
			chipid = 0;
    1600:	2200      	movs	r2, #0
    1602:	4b20      	ldr	r3, [pc, #128]	; (1684 <nmi_get_chipid+0xa8>)
    1604:	601a      	str	r2, [r3, #0]
			return 0;
    1606:	e7f1      	b.n	15ec <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    1608:	a901      	add	r1, sp, #4
    160a:	4820      	ldr	r0, [pc, #128]	; (168c <nmi_get_chipid+0xb0>)
    160c:	4b1e      	ldr	r3, [pc, #120]	; (1688 <nmi_get_chipid+0xac>)
    160e:	4798      	blx	r3
    1610:	2800      	cmp	r0, #0
    1612:	d003      	beq.n	161c <nmi_get_chipid+0x40>
			chipid = 0;
    1614:	2200      	movs	r2, #0
    1616:	4b1b      	ldr	r3, [pc, #108]	; (1684 <nmi_get_chipid+0xa8>)
    1618:	601a      	str	r2, [r3, #0]
			return 0;
    161a:	e7e7      	b.n	15ec <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    161c:	4b19      	ldr	r3, [pc, #100]	; (1684 <nmi_get_chipid+0xa8>)
    161e:	681b      	ldr	r3, [r3, #0]
    1620:	4a1b      	ldr	r2, [pc, #108]	; (1690 <nmi_get_chipid+0xb4>)
    1622:	4293      	cmp	r3, r2
    1624:	d00e      	beq.n	1644 <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    1626:	4a1b      	ldr	r2, [pc, #108]	; (1694 <nmi_get_chipid+0xb8>)
    1628:	4293      	cmp	r3, r2
    162a:	d012      	beq.n	1652 <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    162c:	4a1a      	ldr	r2, [pc, #104]	; (1698 <nmi_get_chipid+0xbc>)
    162e:	4293      	cmp	r3, r2
    1630:	d01c      	beq.n	166c <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    1632:	4914      	ldr	r1, [pc, #80]	; (1684 <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    1634:	4a19      	ldr	r2, [pc, #100]	; (169c <nmi_get_chipid+0xc0>)
    1636:	680b      	ldr	r3, [r1, #0]
    1638:	401a      	ands	r2, r3
		chipid |= 0x050000;
    163a:	23a0      	movs	r3, #160	; 0xa0
    163c:	02db      	lsls	r3, r3, #11
    163e:	4313      	orrs	r3, r2
    1640:	600b      	str	r3, [r1, #0]
    1642:	e7d1      	b.n	15e8 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    1644:	9b01      	ldr	r3, [sp, #4]
    1646:	2b01      	cmp	r3, #1
    1648:	d0f3      	beq.n	1632 <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    164a:	4a15      	ldr	r2, [pc, #84]	; (16a0 <nmi_get_chipid+0xc4>)
    164c:	4b0d      	ldr	r3, [pc, #52]	; (1684 <nmi_get_chipid+0xa8>)
    164e:	601a      	str	r2, [r3, #0]
    1650:	e7ef      	b.n	1632 <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    1652:	9b01      	ldr	r3, [sp, #4]
    1654:	2b03      	cmp	r3, #3
    1656:	d0ec      	beq.n	1632 <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    1658:	2b04      	cmp	r3, #4
    165a:	d003      	beq.n	1664 <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    165c:	4a11      	ldr	r2, [pc, #68]	; (16a4 <nmi_get_chipid+0xc8>)
    165e:	4b09      	ldr	r3, [pc, #36]	; (1684 <nmi_get_chipid+0xa8>)
    1660:	601a      	str	r2, [r3, #0]
    1662:	e7e6      	b.n	1632 <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    1664:	4a10      	ldr	r2, [pc, #64]	; (16a8 <nmi_get_chipid+0xcc>)
    1666:	4b07      	ldr	r3, [pc, #28]	; (1684 <nmi_get_chipid+0xa8>)
    1668:	601a      	str	r2, [r3, #0]
    166a:	e7e2      	b.n	1632 <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    166c:	4905      	ldr	r1, [pc, #20]	; (1684 <nmi_get_chipid+0xa8>)
    166e:	20ec      	movs	r0, #236	; 0xec
    1670:	0380      	lsls	r0, r0, #14
    1672:	4b05      	ldr	r3, [pc, #20]	; (1688 <nmi_get_chipid+0xac>)
    1674:	4798      	blx	r3
    1676:	2800      	cmp	r0, #0
    1678:	d0db      	beq.n	1632 <nmi_get_chipid+0x56>
			chipid = 0;
    167a:	2200      	movs	r2, #0
    167c:	4b01      	ldr	r3, [pc, #4]	; (1684 <nmi_get_chipid+0xa8>)
    167e:	601a      	str	r2, [r3, #0]
			return 0;
    1680:	e7b4      	b.n	15ec <nmi_get_chipid+0x10>
    1682:	46c0      	nop			; (mov r8, r8)
    1684:	200000ec 	.word	0x200000ec
    1688:	00001a2d 	.word	0x00001a2d
    168c:	000013f4 	.word	0x000013f4
    1690:	001002a0 	.word	0x001002a0
    1694:	001002b0 	.word	0x001002b0
    1698:	001000f0 	.word	0x001000f0
    169c:	fff0ffff 	.word	0xfff0ffff
    16a0:	001002a1 	.word	0x001002a1
    16a4:	001002b2 	.word	0x001002b2
    16a8:	001002b1 	.word	0x001002b1

000016ac <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    16ac:	b530      	push	{r4, r5, lr}
    16ae:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    16b0:	4c16      	ldr	r4, [pc, #88]	; (170c <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    16b2:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    16b4:	a901      	add	r1, sp, #4
    16b6:	2010      	movs	r0, #16
    16b8:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    16ba:	2800      	cmp	r0, #0
    16bc:	d11c      	bne.n	16f8 <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    16be:	9b01      	ldr	r3, [sp, #4]
    16c0:	422b      	tst	r3, r5
    16c2:	d1f7      	bne.n	16b4 <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    16c4:	a901      	add	r1, sp, #4
    16c6:	3001      	adds	r0, #1
    16c8:	4b10      	ldr	r3, [pc, #64]	; (170c <chip_sleep+0x60>)
    16ca:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    16cc:	2800      	cmp	r0, #0
    16ce:	d113      	bne.n	16f8 <chip_sleep+0x4c>
	if(reg & NBIT1)
    16d0:	9901      	ldr	r1, [sp, #4]
    16d2:	078b      	lsls	r3, r1, #30
    16d4:	d507      	bpl.n	16e6 <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    16d6:	2302      	movs	r3, #2
    16d8:	4399      	bics	r1, r3
    16da:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    16dc:	3001      	adds	r0, #1
    16de:	4b0c      	ldr	r3, [pc, #48]	; (1710 <chip_sleep+0x64>)
    16e0:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    16e2:	2800      	cmp	r0, #0
    16e4:	d108      	bne.n	16f8 <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    16e6:	a901      	add	r1, sp, #4
    16e8:	200b      	movs	r0, #11
    16ea:	4b08      	ldr	r3, [pc, #32]	; (170c <chip_sleep+0x60>)
    16ec:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    16ee:	2800      	cmp	r0, #0
    16f0:	d102      	bne.n	16f8 <chip_sleep+0x4c>
	if(reg & NBIT0)
    16f2:	9901      	ldr	r1, [sp, #4]
    16f4:	07cb      	lsls	r3, r1, #31
    16f6:	d401      	bmi.n	16fc <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    16f8:	b003      	add	sp, #12
    16fa:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    16fc:	2301      	movs	r3, #1
    16fe:	4399      	bics	r1, r3
    1700:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    1702:	300b      	adds	r0, #11
    1704:	4b02      	ldr	r3, [pc, #8]	; (1710 <chip_sleep+0x64>)
    1706:	4798      	blx	r3
    1708:	e7f6      	b.n	16f8 <chip_sleep+0x4c>
    170a:	46c0      	nop			; (mov r8, r8)
    170c:	00001a2d 	.word	0x00001a2d
    1710:	00001a39 	.word	0x00001a39

00001714 <chip_wake>:
sint8 chip_wake(void)
{
    1714:	b5f0      	push	{r4, r5, r6, r7, lr}
    1716:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    1718:	2300      	movs	r3, #0
    171a:	9301      	str	r3, [sp, #4]
    171c:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    171e:	a901      	add	r1, sp, #4
    1720:	200b      	movs	r0, #11
    1722:	4b28      	ldr	r3, [pc, #160]	; (17c4 <chip_wake+0xb0>)
    1724:	4798      	blx	r3
    1726:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    1728:	d130      	bne.n	178c <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    172a:	9901      	ldr	r1, [sp, #4]
    172c:	07cb      	lsls	r3, r1, #31
    172e:	d406      	bmi.n	173e <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    1730:	2301      	movs	r3, #1
    1732:	4319      	orrs	r1, r3
    1734:	200b      	movs	r0, #11
    1736:	4b24      	ldr	r3, [pc, #144]	; (17c8 <chip_wake+0xb4>)
    1738:	4798      	blx	r3
    173a:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    173c:	d126      	bne.n	178c <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    173e:	a901      	add	r1, sp, #4
    1740:	2001      	movs	r0, #1
    1742:	4b20      	ldr	r3, [pc, #128]	; (17c4 <chip_wake+0xb0>)
    1744:	4798      	blx	r3
    1746:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    1748:	d120      	bne.n	178c <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    174a:	9901      	ldr	r1, [sp, #4]
    174c:	078b      	lsls	r3, r1, #30
    174e:	d520      	bpl.n	1792 <chip_wake+0x7e>
{
    1750:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    1752:	4f1c      	ldr	r7, [pc, #112]	; (17c4 <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    1754:	4e1d      	ldr	r6, [pc, #116]	; (17cc <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    1756:	4669      	mov	r1, sp
    1758:	200f      	movs	r0, #15
    175a:	47b8      	blx	r7
    175c:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    175e:	d120      	bne.n	17a2 <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    1760:	9b00      	ldr	r3, [sp, #0]
    1762:	075b      	lsls	r3, r3, #29
    1764:	d42b      	bmi.n	17be <chip_wake+0xaa>
		nm_bsp_sleep(2);
    1766:	2002      	movs	r0, #2
    1768:	47b0      	blx	r6
    176a:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    176c:	2d00      	cmp	r5, #0
    176e:	d1f2      	bne.n	1756 <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    1770:	22af      	movs	r2, #175	; 0xaf
    1772:	0052      	lsls	r2, r2, #1
    1774:	4916      	ldr	r1, [pc, #88]	; (17d0 <chip_wake+0xbc>)
    1776:	4817      	ldr	r0, [pc, #92]	; (17d4 <chip_wake+0xc0>)
    1778:	4b17      	ldr	r3, [pc, #92]	; (17d8 <chip_wake+0xc4>)
    177a:	4798      	blx	r3
    177c:	4817      	ldr	r0, [pc, #92]	; (17dc <chip_wake+0xc8>)
    177e:	4b18      	ldr	r3, [pc, #96]	; (17e0 <chip_wake+0xcc>)
    1780:	4798      	blx	r3
    1782:	200d      	movs	r0, #13
    1784:	4b17      	ldr	r3, [pc, #92]	; (17e4 <chip_wake+0xd0>)
    1786:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    1788:	2404      	movs	r4, #4
    178a:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    178c:	0020      	movs	r0, r4
    178e:	b003      	add	sp, #12
    1790:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    1792:	2302      	movs	r3, #2
    1794:	4319      	orrs	r1, r3
    1796:	2001      	movs	r0, #1
    1798:	4b0b      	ldr	r3, [pc, #44]	; (17c8 <chip_wake+0xb4>)
    179a:	4798      	blx	r3
    179c:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    179e:	d0d7      	beq.n	1750 <chip_wake+0x3c>
    17a0:	e7f4      	b.n	178c <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    17a2:	22aa      	movs	r2, #170	; 0xaa
    17a4:	0052      	lsls	r2, r2, #1
    17a6:	490a      	ldr	r1, [pc, #40]	; (17d0 <chip_wake+0xbc>)
    17a8:	480a      	ldr	r0, [pc, #40]	; (17d4 <chip_wake+0xc0>)
    17aa:	4d0b      	ldr	r5, [pc, #44]	; (17d8 <chip_wake+0xc4>)
    17ac:	47a8      	blx	r5
    17ae:	9a00      	ldr	r2, [sp, #0]
    17b0:	0021      	movs	r1, r4
    17b2:	480d      	ldr	r0, [pc, #52]	; (17e8 <chip_wake+0xd4>)
    17b4:	47a8      	blx	r5
    17b6:	200d      	movs	r0, #13
    17b8:	4b0a      	ldr	r3, [pc, #40]	; (17e4 <chip_wake+0xd0>)
    17ba:	4798      	blx	r3
			goto _WAKE_EXIT;
    17bc:	e7e6      	b.n	178c <chip_wake+0x78>
	nm_bus_reset();
    17be:	4b0b      	ldr	r3, [pc, #44]	; (17ec <chip_wake+0xd8>)
    17c0:	4798      	blx	r3
    17c2:	e7e3      	b.n	178c <chip_wake+0x78>
    17c4:	00001a2d 	.word	0x00001a2d
    17c8:	00001a39 	.word	0x00001a39
    17cc:	000001e1 	.word	0x000001e1
    17d0:	00008810 	.word	0x00008810
    17d4:	000082d0 	.word	0x000082d0
    17d8:	00006f15 	.word	0x00006f15
    17dc:	00008858 	.word	0x00008858
    17e0:	00007031 	.word	0x00007031
    17e4:	00006f49 	.word	0x00006f49
    17e8:	00008840 	.word	0x00008840
    17ec:	00001a15 	.word	0x00001a15

000017f0 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    17f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17f2:	0007      	movs	r7, r0
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    17f4:	4d2d      	ldr	r5, [pc, #180]	; (18ac <wait_for_bootrom+0xbc>)
    17f6:	4c2e      	ldr	r4, [pc, #184]	; (18b0 <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    17f8:	4e2e      	ldr	r6, [pc, #184]	; (18b4 <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    17fa:	0028      	movs	r0, r5
    17fc:	47a0      	blx	r4
		if (reg & 0x80000000) {
    17fe:	2800      	cmp	r0, #0
    1800:	db02      	blt.n	1808 <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    1802:	2001      	movs	r0, #1
    1804:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    1806:	e7f8      	b.n	17fa <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    1808:	482b      	ldr	r0, [pc, #172]	; (18b8 <wait_for_bootrom+0xc8>)
    180a:	4b29      	ldr	r3, [pc, #164]	; (18b0 <wait_for_bootrom+0xc0>)
    180c:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    180e:	07c3      	lsls	r3, r0, #31
    1810:	d409      	bmi.n	1826 <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    1812:	4e28      	ldr	r6, [pc, #160]	; (18b4 <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
    1814:	4c29      	ldr	r4, [pc, #164]	; (18bc <wait_for_bootrom+0xcc>)
    1816:	4d26      	ldr	r5, [pc, #152]	; (18b0 <wait_for_bootrom+0xc0>)
			nm_bsp_sleep(1);
    1818:	2001      	movs	r0, #1
    181a:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    181c:	0020      	movs	r0, r4
    181e:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    1820:	4b27      	ldr	r3, [pc, #156]	; (18c0 <wait_for_bootrom+0xd0>)
    1822:	4298      	cmp	r0, r3
    1824:	d1f8      	bne.n	1818 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    1826:	2f02      	cmp	r7, #2
    1828:	d021      	beq.n	186e <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    182a:	2f03      	cmp	r7, #3
    182c:	d029      	beq.n	1882 <wait_for_bootrom+0x92>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    182e:	2f04      	cmp	r7, #4
    1830:	d030      	beq.n	1894 <wait_for_bootrom+0xa4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    1832:	4924      	ldr	r1, [pc, #144]	; (18c4 <wait_for_bootrom+0xd4>)
    1834:	4824      	ldr	r0, [pc, #144]	; (18c8 <wait_for_bootrom+0xd8>)
    1836:	4b25      	ldr	r3, [pc, #148]	; (18cc <wait_for_bootrom+0xdc>)
    1838:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    183a:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    183c:	4b24      	ldr	r3, [pc, #144]	; (18d0 <wait_for_bootrom+0xe0>)
    183e:	4798      	blx	r3
    1840:	0500      	lsls	r0, r0, #20
    1842:	0d00      	lsrs	r0, r0, #20
    1844:	4b23      	ldr	r3, [pc, #140]	; (18d4 <wait_for_bootrom+0xe4>)
    1846:	4298      	cmp	r0, r3
    1848:	d82a      	bhi.n	18a0 <wait_for_bootrom+0xb0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    184a:	0020      	movs	r0, r4
    184c:	4b22      	ldr	r3, [pc, #136]	; (18d8 <wait_for_bootrom+0xe8>)
    184e:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    1850:	4822      	ldr	r0, [pc, #136]	; (18dc <wait_for_bootrom+0xec>)
    1852:	4c23      	ldr	r4, [pc, #140]	; (18e0 <wait_for_bootrom+0xf0>)
    1854:	47a0      	blx	r4
    1856:	491b      	ldr	r1, [pc, #108]	; (18c4 <wait_for_bootrom+0xd4>)
    1858:	4822      	ldr	r0, [pc, #136]	; (18e4 <wait_for_bootrom+0xf4>)
    185a:	47a0      	blx	r4
    185c:	200d      	movs	r0, #13
    185e:	4b22      	ldr	r3, [pc, #136]	; (18e8 <wait_for_bootrom+0xf8>)
    1860:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    1862:	4922      	ldr	r1, [pc, #136]	; (18ec <wait_for_bootrom+0xfc>)
    1864:	4815      	ldr	r0, [pc, #84]	; (18bc <wait_for_bootrom+0xcc>)
    1866:	4b19      	ldr	r3, [pc, #100]	; (18cc <wait_for_bootrom+0xdc>)
    1868:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    186a:	2000      	movs	r0, #0
    186c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    186e:	4920      	ldr	r1, [pc, #128]	; (18f0 <wait_for_bootrom+0x100>)
    1870:	4820      	ldr	r0, [pc, #128]	; (18f4 <wait_for_bootrom+0x104>)
    1872:	4c16      	ldr	r4, [pc, #88]	; (18cc <wait_for_bootrom+0xdc>)
    1874:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    1876:	2180      	movs	r1, #128	; 0x80
    1878:	0349      	lsls	r1, r1, #13
    187a:	4813      	ldr	r0, [pc, #76]	; (18c8 <wait_for_bootrom+0xd8>)
    187c:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    187e:	2400      	movs	r4, #0
    1880:	e7dc      	b.n	183c <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    1882:	491b      	ldr	r1, [pc, #108]	; (18f0 <wait_for_bootrom+0x100>)
    1884:	481b      	ldr	r0, [pc, #108]	; (18f4 <wait_for_bootrom+0x104>)
    1886:	4c11      	ldr	r4, [pc, #68]	; (18cc <wait_for_bootrom+0xdc>)
    1888:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    188a:	2100      	movs	r1, #0
    188c:	480e      	ldr	r0, [pc, #56]	; (18c8 <wait_for_bootrom+0xd8>)
    188e:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    1890:	2400      	movs	r4, #0
    1892:	e7d3      	b.n	183c <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    1894:	490b      	ldr	r1, [pc, #44]	; (18c4 <wait_for_bootrom+0xd4>)
    1896:	480c      	ldr	r0, [pc, #48]	; (18c8 <wait_for_bootrom+0xd8>)
    1898:	4b0c      	ldr	r3, [pc, #48]	; (18cc <wait_for_bootrom+0xdc>)
    189a:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    189c:	2480      	movs	r4, #128	; 0x80
    189e:	e7cd      	b.n	183c <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    18a0:	2002      	movs	r0, #2
    18a2:	4320      	orrs	r0, r4
    18a4:	4b0c      	ldr	r3, [pc, #48]	; (18d8 <wait_for_bootrom+0xe8>)
    18a6:	4798      	blx	r3
    18a8:	e7d2      	b.n	1850 <wait_for_bootrom+0x60>
    18aa:	46c0      	nop			; (mov r8, r8)
    18ac:	00001014 	.word	0x00001014
    18b0:	00001a21 	.word	0x00001a21
    18b4:	000001e1 	.word	0x000001e1
    18b8:	000207bc 	.word	0x000207bc
    18bc:	000c000c 	.word	0x000c000c
    18c0:	10add09e 	.word	0x10add09e
    18c4:	13521352 	.word	0x13521352
    18c8:	0000108c 	.word	0x0000108c
    18cc:	00001a39 	.word	0x00001a39
    18d0:	000015dd 	.word	0x000015dd
    18d4:	0000039f 	.word	0x0000039f
    18d8:	00001549 	.word	0x00001549
    18dc:	00008600 	.word	0x00008600
    18e0:	00006f15 	.word	0x00006f15
    18e4:	00008874 	.word	0x00008874
    18e8:	00006f49 	.word	0x00006f49
    18ec:	ef522f61 	.word	0xef522f61
    18f0:	3c1cd57d 	.word	0x3c1cd57d
    18f4:	000207ac 	.word	0x000207ac

000018f8 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    18f8:	b570      	push	{r4, r5, r6, lr}
    18fa:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    18fc:	4b15      	ldr	r3, [pc, #84]	; (1954 <wait_for_firmware_start+0x5c>)
    18fe:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    1900:	4b15      	ldr	r3, [pc, #84]	; (1958 <wait_for_firmware_start+0x60>)
    1902:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    1904:	3802      	subs	r0, #2
    1906:	2801      	cmp	r0, #1
    1908:	d911      	bls.n	192e <wait_for_firmware_start+0x36>
{
    190a:	2401      	movs	r4, #1
    190c:	4264      	negs	r4, r4
    190e:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    1910:	4e12      	ldr	r6, [pc, #72]	; (195c <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    1912:	4d13      	ldr	r5, [pc, #76]	; (1960 <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    1914:	9b00      	ldr	r3, [sp, #0]
    1916:	4298      	cmp	r0, r3
    1918:	d00e      	beq.n	1938 <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    191a:	2002      	movs	r0, #2
    191c:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    191e:	9801      	ldr	r0, [sp, #4]
    1920:	47a8      	blx	r5
    1922:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    1924:	2c00      	cmp	r4, #0
    1926:	d1f5      	bne.n	1914 <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    1928:	2005      	movs	r0, #5
    192a:	4240      	negs	r0, r0
    192c:	e009      	b.n	1942 <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    192e:	4b0d      	ldr	r3, [pc, #52]	; (1964 <wait_for_firmware_start+0x6c>)
    1930:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    1932:	4b0d      	ldr	r3, [pc, #52]	; (1968 <wait_for_firmware_start+0x70>)
    1934:	9300      	str	r3, [sp, #0]
    1936:	e7e8      	b.n	190a <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    1938:	9a00      	ldr	r2, [sp, #0]
    193a:	4b07      	ldr	r3, [pc, #28]	; (1958 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    193c:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    193e:	429a      	cmp	r2, r3
    1940:	d001      	beq.n	1946 <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    1942:	b002      	add	sp, #8
    1944:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    1946:	2100      	movs	r1, #0
    1948:	4802      	ldr	r0, [pc, #8]	; (1954 <wait_for_firmware_start+0x5c>)
    194a:	4b08      	ldr	r3, [pc, #32]	; (196c <wait_for_firmware_start+0x74>)
    194c:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    194e:	2000      	movs	r0, #0
    1950:	e7f7      	b.n	1942 <wait_for_firmware_start+0x4a>
    1952:	46c0      	nop			; (mov r8, r8)
    1954:	0000108c 	.word	0x0000108c
    1958:	02532636 	.word	0x02532636
    195c:	000001e1 	.word	0x000001e1
    1960:	00001a21 	.word	0x00001a21
    1964:	000207ac 	.word	0x000207ac
    1968:	d75dc1c3 	.word	0xd75dc1c3
    196c:	00001a39 	.word	0x00001a39

00001970 <chip_deinit>:

sint8 chip_deinit(void)
{
    1970:	b510      	push	{r4, lr}
    1972:	b082      	sub	sp, #8
	uint32 reg = 0;
    1974:	2300      	movs	r3, #0
    1976:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    1978:	a901      	add	r1, sp, #4
    197a:	20a0      	movs	r0, #160	; 0xa0
    197c:	0140      	lsls	r0, r0, #5
    197e:	4b14      	ldr	r3, [pc, #80]	; (19d0 <chip_deinit+0x60>)
    1980:	4798      	blx	r3
    1982:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    1984:	d115      	bne.n	19b2 <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    1986:	4913      	ldr	r1, [pc, #76]	; (19d4 <chip_deinit+0x64>)
    1988:	9b01      	ldr	r3, [sp, #4]
    198a:	4019      	ands	r1, r3
    198c:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    198e:	20a0      	movs	r0, #160	; 0xa0
    1990:	0140      	lsls	r0, r0, #5
    1992:	4b11      	ldr	r3, [pc, #68]	; (19d8 <chip_deinit+0x68>)
    1994:	4798      	blx	r3
    1996:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    1998:	d016      	beq.n	19c8 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    199a:	4a10      	ldr	r2, [pc, #64]	; (19dc <chip_deinit+0x6c>)
    199c:	4910      	ldr	r1, [pc, #64]	; (19e0 <chip_deinit+0x70>)
    199e:	4811      	ldr	r0, [pc, #68]	; (19e4 <chip_deinit+0x74>)
    19a0:	4b11      	ldr	r3, [pc, #68]	; (19e8 <chip_deinit+0x78>)
    19a2:	4798      	blx	r3
    19a4:	4811      	ldr	r0, [pc, #68]	; (19ec <chip_deinit+0x7c>)
    19a6:	4b12      	ldr	r3, [pc, #72]	; (19f0 <chip_deinit+0x80>)
    19a8:	4798      	blx	r3
    19aa:	200d      	movs	r0, #13
    19ac:	4b11      	ldr	r3, [pc, #68]	; (19f4 <chip_deinit+0x84>)
    19ae:	4798      	blx	r3
		goto ERR1;
    19b0:	e00a      	b.n	19c8 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    19b2:	4a11      	ldr	r2, [pc, #68]	; (19f8 <chip_deinit+0x88>)
    19b4:	490a      	ldr	r1, [pc, #40]	; (19e0 <chip_deinit+0x70>)
    19b6:	480b      	ldr	r0, [pc, #44]	; (19e4 <chip_deinit+0x74>)
    19b8:	4b0b      	ldr	r3, [pc, #44]	; (19e8 <chip_deinit+0x78>)
    19ba:	4798      	blx	r3
    19bc:	480b      	ldr	r0, [pc, #44]	; (19ec <chip_deinit+0x7c>)
    19be:	4b0c      	ldr	r3, [pc, #48]	; (19f0 <chip_deinit+0x80>)
    19c0:	4798      	blx	r3
    19c2:	200d      	movs	r0, #13
    19c4:	4b0b      	ldr	r3, [pc, #44]	; (19f4 <chip_deinit+0x84>)
    19c6:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    19c8:	0020      	movs	r0, r4
    19ca:	b002      	add	sp, #8
    19cc:	bd10      	pop	{r4, pc}
    19ce:	46c0      	nop			; (mov r8, r8)
    19d0:	00001a2d 	.word	0x00001a2d
    19d4:	fffffbff 	.word	0xfffffbff
    19d8:	00001a39 	.word	0x00001a39
    19dc:	0000020b 	.word	0x0000020b
    19e0:	0000881c 	.word	0x0000881c
    19e4:	000082d0 	.word	0x000082d0
    19e8:	00006f15 	.word	0x00006f15
    19ec:	00008828 	.word	0x00008828
    19f0:	00007031 	.word	0x00007031
    19f4:	00006f49 	.word	0x00006f49
    19f8:	00000205 	.word	0x00000205

000019fc <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    19fc:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    19fe:	4b01      	ldr	r3, [pc, #4]	; (1a04 <nm_bus_iface_init+0x8>)
    1a00:	4798      	blx	r3
	return ret;
}
    1a02:	bd10      	pop	{r4, pc}
    1a04:	00000315 	.word	0x00000315

00001a08 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    1a08:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    1a0a:	4b01      	ldr	r3, [pc, #4]	; (1a10 <nm_bus_iface_deinit+0x8>)
    1a0c:	4798      	blx	r3

	return ret;
}
    1a0e:	bd10      	pop	{r4, pc}
    1a10:	00000565 	.word	0x00000565

00001a14 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    1a14:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    1a16:	4b01      	ldr	r3, [pc, #4]	; (1a1c <nm_bus_reset+0x8>)
    1a18:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    1a1a:	bd10      	pop	{r4, pc}
    1a1c:	000023c5 	.word	0x000023c5

00001a20 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    1a20:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    1a22:	4b01      	ldr	r3, [pc, #4]	; (1a28 <nm_read_reg+0x8>)
    1a24:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    1a26:	bd10      	pop	{r4, pc}
    1a28:	000023fd 	.word	0x000023fd

00001a2c <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    1a2c:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    1a2e:	4b01      	ldr	r3, [pc, #4]	; (1a34 <nm_read_reg_with_ret+0x8>)
    1a30:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    1a32:	bd10      	pop	{r4, pc}
    1a34:	00002411 	.word	0x00002411

00001a38 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    1a38:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    1a3a:	4b01      	ldr	r3, [pc, #4]	; (1a40 <nm_write_reg+0x8>)
    1a3c:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    1a3e:	bd10      	pop	{r4, pc}
    1a40:	00002429 	.word	0x00002429

00001a44 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    1a44:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a46:	46d6      	mov	lr, sl
    1a48:	464f      	mov	r7, r9
    1a4a:	4646      	mov	r6, r8
    1a4c:	b5c0      	push	{r6, r7, lr}
    1a4e:	b082      	sub	sp, #8
    1a50:	4680      	mov	r8, r0
    1a52:	4689      	mov	r9, r1
    1a54:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    1a56:	4b13      	ldr	r3, [pc, #76]	; (1aa4 <nm_read_block+0x60>)
    1a58:	881f      	ldrh	r7, [r3, #0]
    1a5a:	3f08      	subs	r7, #8
    1a5c:	b2bb      	uxth	r3, r7
    1a5e:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    1a60:	001e      	movs	r6, r3
    1a62:	0004      	movs	r4, r0
    1a64:	429a      	cmp	r2, r3
    1a66:	d91a      	bls.n	1a9e <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    1a68:	4b0f      	ldr	r3, [pc, #60]	; (1aa8 <nm_read_block+0x64>)
    1a6a:	469a      	mov	sl, r3
    1a6c:	1a37      	subs	r7, r6, r0
    1a6e:	4643      	mov	r3, r8
    1a70:	1ae1      	subs	r1, r4, r3
    1a72:	4449      	add	r1, r9
    1a74:	9a01      	ldr	r2, [sp, #4]
    1a76:	0020      	movs	r0, r4
    1a78:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    1a7a:	2800      	cmp	r0, #0
    1a7c:	d109      	bne.n	1a92 <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    1a7e:	1bad      	subs	r5, r5, r6
    1a80:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    1a82:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    1a84:	42b5      	cmp	r5, r6
    1a86:	d8f2      	bhi.n	1a6e <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    1a88:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    1a8a:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    1a8c:	0020      	movs	r0, r4
    1a8e:	4b06      	ldr	r3, [pc, #24]	; (1aa8 <nm_read_block+0x64>)
    1a90:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    1a92:	b002      	add	sp, #8
    1a94:	bc1c      	pop	{r2, r3, r4}
    1a96:	4690      	mov	r8, r2
    1a98:	4699      	mov	r9, r3
    1a9a:	46a2      	mov	sl, r4
    1a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    1a9e:	2100      	movs	r1, #0
    1aa0:	e7f2      	b.n	1a88 <nm_read_block+0x44>
    1aa2:	46c0      	nop			; (mov r8, r8)
    1aa4:	20000008 	.word	0x20000008
    1aa8:	0000256d 	.word	0x0000256d

00001aac <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    1aac:	b5f0      	push	{r4, r5, r6, r7, lr}
    1aae:	46d6      	mov	lr, sl
    1ab0:	464f      	mov	r7, r9
    1ab2:	4646      	mov	r6, r8
    1ab4:	b5c0      	push	{r6, r7, lr}
    1ab6:	b082      	sub	sp, #8
    1ab8:	4680      	mov	r8, r0
    1aba:	4689      	mov	r9, r1
    1abc:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    1abe:	4b13      	ldr	r3, [pc, #76]	; (1b0c <nm_write_block+0x60>)
    1ac0:	881f      	ldrh	r7, [r3, #0]
    1ac2:	3f08      	subs	r7, #8
    1ac4:	b2bb      	uxth	r3, r7
    1ac6:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    1ac8:	001e      	movs	r6, r3
    1aca:	0004      	movs	r4, r0
    1acc:	429a      	cmp	r2, r3
    1ace:	d91a      	bls.n	1b06 <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    1ad0:	4b0f      	ldr	r3, [pc, #60]	; (1b10 <nm_write_block+0x64>)
    1ad2:	469a      	mov	sl, r3
    1ad4:	1a37      	subs	r7, r6, r0
    1ad6:	4643      	mov	r3, r8
    1ad8:	1ae1      	subs	r1, r4, r3
    1ada:	4449      	add	r1, r9
    1adc:	9a01      	ldr	r2, [sp, #4]
    1ade:	0020      	movs	r0, r4
    1ae0:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    1ae2:	2800      	cmp	r0, #0
    1ae4:	d109      	bne.n	1afa <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    1ae6:	1bad      	subs	r5, r5, r6
    1ae8:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    1aea:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    1aec:	42b5      	cmp	r5, r6
    1aee:	d8f2      	bhi.n	1ad6 <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    1af0:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    1af2:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    1af4:	0020      	movs	r0, r4
    1af6:	4b06      	ldr	r3, [pc, #24]	; (1b10 <nm_write_block+0x64>)
    1af8:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    1afa:	b002      	add	sp, #8
    1afc:	bc1c      	pop	{r2, r3, r4}
    1afe:	4690      	mov	r8, r2
    1b00:	4699      	mov	r9, r3
    1b02:	46a2      	mov	sl, r4
    1b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    1b06:	2100      	movs	r1, #0
    1b08:	e7f2      	b.n	1af0 <nm_write_block+0x44>
    1b0a:	46c0      	nop			; (mov r8, r8)
    1b0c:	20000008 	.word	0x20000008
    1b10:	000026c9 	.word	0x000026c9

00001b14 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    1b14:	b570      	push	{r4, r5, r6, lr}
    1b16:	b084      	sub	sp, #16
    1b18:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    1b1a:	2300      	movs	r3, #0
    1b1c:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    1b1e:	2208      	movs	r2, #8
    1b20:	2100      	movs	r1, #0
    1b22:	a801      	add	r0, sp, #4
    1b24:	4b2d      	ldr	r3, [pc, #180]	; (1bdc <nm_get_firmware_full_info+0xc8>)
    1b26:	4798      	blx	r3
	if (pstrRev != NULL)
    1b28:	2c00      	cmp	r4, #0
    1b2a:	d044      	beq.n	1bb6 <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    1b2c:	2228      	movs	r2, #40	; 0x28
    1b2e:	2100      	movs	r1, #0
    1b30:	0020      	movs	r0, r4
    1b32:	4b2b      	ldr	r3, [pc, #172]	; (1be0 <nm_get_firmware_full_info+0xcc>)
    1b34:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    1b36:	a903      	add	r1, sp, #12
    1b38:	482a      	ldr	r0, [pc, #168]	; (1be4 <nm_get_firmware_full_info+0xd0>)
    1b3a:	4b2b      	ldr	r3, [pc, #172]	; (1be8 <nm_get_firmware_full_info+0xd4>)
    1b3c:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    1b3e:	2800      	cmp	r0, #0
    1b40:	d13a      	bne.n	1bb8 <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    1b42:	9b03      	ldr	r3, [sp, #12]
    1b44:	2b00      	cmp	r3, #0
    1b46:	d039      	beq.n	1bbc <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    1b48:	20c0      	movs	r0, #192	; 0xc0
    1b4a:	0280      	lsls	r0, r0, #10
    1b4c:	4318      	orrs	r0, r3
    1b4e:	2208      	movs	r2, #8
    1b50:	a901      	add	r1, sp, #4
    1b52:	4b26      	ldr	r3, [pc, #152]	; (1bec <nm_get_firmware_full_info+0xd8>)
    1b54:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    1b56:	2800      	cmp	r0, #0
    1b58:	d12e      	bne.n	1bb8 <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    1b5a:	9b02      	ldr	r3, [sp, #8]
    1b5c:	0418      	lsls	r0, r3, #16
    1b5e:	0c00      	lsrs	r0, r0, #16
    1b60:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    1b62:	d02e      	beq.n	1bc2 <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    1b64:	23c0      	movs	r3, #192	; 0xc0
    1b66:	029b      	lsls	r3, r3, #10
    1b68:	4318      	orrs	r0, r3
    1b6a:	2228      	movs	r2, #40	; 0x28
    1b6c:	0021      	movs	r1, r4
    1b6e:	4b1f      	ldr	r3, [pc, #124]	; (1bec <nm_get_firmware_full_info+0xd8>)
    1b70:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    1b72:	2800      	cmp	r0, #0
    1b74:	d120      	bne.n	1bb8 <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    1b76:	7921      	ldrb	r1, [r4, #4]
    1b78:	0209      	lsls	r1, r1, #8
    1b7a:	79a2      	ldrb	r2, [r4, #6]
    1b7c:	230f      	movs	r3, #15
    1b7e:	401a      	ands	r2, r3
    1b80:	430a      	orrs	r2, r1
    1b82:	7961      	ldrb	r1, [r4, #5]
    1b84:	0109      	lsls	r1, r1, #4
    1b86:	25ff      	movs	r5, #255	; 0xff
    1b88:	4029      	ands	r1, r5
    1b8a:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    1b8c:	79e1      	ldrb	r1, [r4, #7]
    1b8e:	0209      	lsls	r1, r1, #8
    1b90:	7a66      	ldrb	r6, [r4, #9]
    1b92:	4033      	ands	r3, r6
    1b94:	430b      	orrs	r3, r1
    1b96:	7a21      	ldrb	r1, [r4, #8]
    1b98:	0109      	lsls	r1, r1, #4
    1b9a:	400d      	ands	r5, r1
    1b9c:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    1b9e:	2a00      	cmp	r2, #0
    1ba0:	d012      	beq.n	1bc8 <nm_get_firmware_full_info+0xb4>
    1ba2:	2b00      	cmp	r3, #0
    1ba4:	d013      	beq.n	1bce <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    1ba6:	4912      	ldr	r1, [pc, #72]	; (1bf0 <nm_get_firmware_full_info+0xdc>)
    1ba8:	428b      	cmp	r3, r1
    1baa:	d813      	bhi.n	1bd4 <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    1bac:	4b11      	ldr	r3, [pc, #68]	; (1bf4 <nm_get_firmware_full_info+0xe0>)
    1bae:	429a      	cmp	r2, r3
    1bb0:	d802      	bhi.n	1bb8 <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    1bb2:	380d      	subs	r0, #13
    1bb4:	e000      	b.n	1bb8 <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    1bb6:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    1bb8:	b004      	add	sp, #16
    1bba:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    1bbc:	200c      	movs	r0, #12
    1bbe:	4240      	negs	r0, r0
    1bc0:	e7fa      	b.n	1bb8 <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    1bc2:	200c      	movs	r0, #12
    1bc4:	4240      	negs	r0, r0
    1bc6:	e7f7      	b.n	1bb8 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    1bc8:	200c      	movs	r0, #12
    1bca:	4240      	negs	r0, r0
    1bcc:	e7f4      	b.n	1bb8 <nm_get_firmware_full_info+0xa4>
    1bce:	200c      	movs	r0, #12
    1bd0:	4240      	negs	r0, r0
    1bd2:	e7f1      	b.n	1bb8 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    1bd4:	200d      	movs	r0, #13
    1bd6:	4240      	negs	r0, r0
    1bd8:	e7ee      	b.n	1bb8 <nm_get_firmware_full_info+0xa4>
    1bda:	46c0      	nop			; (mov r8, r8)
    1bdc:	00006db3 	.word	0x00006db3
    1be0:	000005e5 	.word	0x000005e5
    1be4:	000c0008 	.word	0x000c0008
    1be8:	00001a2d 	.word	0x00001a2d
    1bec:	00001a45 	.word	0x00001a45
    1bf0:	00001352 	.word	0x00001352
    1bf4:	00001351 	.word	0x00001351

00001bf8 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    1bf8:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    1bfa:	2800      	cmp	r0, #0
    1bfc:	d037      	beq.n	1c6e <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
    1bfe:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    1c00:	1e6b      	subs	r3, r5, #1
    1c02:	2b03      	cmp	r3, #3
    1c04:	d900      	bls.n	1c08 <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    1c06:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    1c08:	2000      	movs	r0, #0
    1c0a:	4b20      	ldr	r3, [pc, #128]	; (1c8c <nm_drv_init+0x94>)
    1c0c:	4798      	blx	r3
    1c0e:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1c10:	d12f      	bne.n	1c72 <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    1c12:	481f      	ldr	r0, [pc, #124]	; (1c90 <nm_drv_init+0x98>)
    1c14:	4c1f      	ldr	r4, [pc, #124]	; (1c94 <nm_drv_init+0x9c>)
    1c16:	47a0      	blx	r4
    1c18:	4b1f      	ldr	r3, [pc, #124]	; (1c98 <nm_drv_init+0xa0>)
    1c1a:	4798      	blx	r3
    1c1c:	0001      	movs	r1, r0
    1c1e:	481f      	ldr	r0, [pc, #124]	; (1c9c <nm_drv_init+0xa4>)
    1c20:	47a0      	blx	r4
    1c22:	200d      	movs	r0, #13
    1c24:	4b1e      	ldr	r3, [pc, #120]	; (1ca0 <nm_drv_init+0xa8>)
    1c26:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    1c28:	4b1e      	ldr	r3, [pc, #120]	; (1ca4 <nm_drv_init+0xac>)
    1c2a:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    1c2c:	0028      	movs	r0, r5
    1c2e:	4b1e      	ldr	r3, [pc, #120]	; (1ca8 <nm_drv_init+0xb0>)
    1c30:	4798      	blx	r3
    1c32:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1c34:	d117      	bne.n	1c66 <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    1c36:	0028      	movs	r0, r5
    1c38:	4b1c      	ldr	r3, [pc, #112]	; (1cac <nm_drv_init+0xb4>)
    1c3a:	4798      	blx	r3
    1c3c:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1c3e:	d112      	bne.n	1c66 <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    1c40:	3d02      	subs	r5, #2
    1c42:	2d01      	cmp	r5, #1
    1c44:	d911      	bls.n	1c6a <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    1c46:	4b1a      	ldr	r3, [pc, #104]	; (1cb0 <nm_drv_init+0xb8>)
    1c48:	4798      	blx	r3
    1c4a:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1c4c:	d00d      	beq.n	1c6a <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
    1c4e:	2256      	movs	r2, #86	; 0x56
    1c50:	32ff      	adds	r2, #255	; 0xff
    1c52:	4918      	ldr	r1, [pc, #96]	; (1cb4 <nm_drv_init+0xbc>)
    1c54:	4818      	ldr	r0, [pc, #96]	; (1cb8 <nm_drv_init+0xc0>)
    1c56:	4b0f      	ldr	r3, [pc, #60]	; (1c94 <nm_drv_init+0x9c>)
    1c58:	4798      	blx	r3
    1c5a:	4818      	ldr	r0, [pc, #96]	; (1cbc <nm_drv_init+0xc4>)
    1c5c:	4b18      	ldr	r3, [pc, #96]	; (1cc0 <nm_drv_init+0xc8>)
    1c5e:	4798      	blx	r3
    1c60:	200d      	movs	r0, #13
    1c62:	4b0f      	ldr	r3, [pc, #60]	; (1ca0 <nm_drv_init+0xa8>)
    1c64:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    1c66:	4b17      	ldr	r3, [pc, #92]	; (1cc4 <nm_drv_init+0xcc>)
    1c68:	4798      	blx	r3
ERR1:
	return ret;
}
    1c6a:	0020      	movs	r0, r4
    1c6c:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    1c6e:	2501      	movs	r5, #1
    1c70:	e7ca      	b.n	1c08 <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    1c72:	2228      	movs	r2, #40	; 0x28
    1c74:	32ff      	adds	r2, #255	; 0xff
    1c76:	490f      	ldr	r1, [pc, #60]	; (1cb4 <nm_drv_init+0xbc>)
    1c78:	480f      	ldr	r0, [pc, #60]	; (1cb8 <nm_drv_init+0xc0>)
    1c7a:	4b06      	ldr	r3, [pc, #24]	; (1c94 <nm_drv_init+0x9c>)
    1c7c:	4798      	blx	r3
    1c7e:	4812      	ldr	r0, [pc, #72]	; (1cc8 <nm_drv_init+0xd0>)
    1c80:	4b0f      	ldr	r3, [pc, #60]	; (1cc0 <nm_drv_init+0xc8>)
    1c82:	4798      	blx	r3
    1c84:	200d      	movs	r0, #13
    1c86:	4b06      	ldr	r3, [pc, #24]	; (1ca0 <nm_drv_init+0xa8>)
    1c88:	4798      	blx	r3
		goto ERR1;
    1c8a:	e7ee      	b.n	1c6a <nm_drv_init+0x72>
    1c8c:	000019fd 	.word	0x000019fd
    1c90:	00008600 	.word	0x00008600
    1c94:	00006f15 	.word	0x00006f15
    1c98:	000015dd 	.word	0x000015dd
    1c9c:	00008944 	.word	0x00008944
    1ca0:	00006f49 	.word	0x00006f49
    1ca4:	00002441 	.word	0x00002441
    1ca8:	000017f1 	.word	0x000017f1
    1cac:	000018f9 	.word	0x000018f9
    1cb0:	00001581 	.word	0x00001581
    1cb4:	0000888c 	.word	0x0000888c
    1cb8:	000082d0 	.word	0x000082d0
    1cbc:	00008908 	.word	0x00008908
    1cc0:	00007031 	.word	0x00007031
    1cc4:	00001a09 	.word	0x00001a09
    1cc8:	00008928 	.word	0x00008928

00001ccc <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    1ccc:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    1cce:	4b1c      	ldr	r3, [pc, #112]	; (1d40 <nm_drv_deinit+0x74>)
    1cd0:	4798      	blx	r3
    1cd2:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1cd4:	d10b      	bne.n	1cee <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    1cd6:	2000      	movs	r0, #0
    1cd8:	4b1a      	ldr	r3, [pc, #104]	; (1d44 <nm_drv_deinit+0x78>)
    1cda:	4798      	blx	r3
    1cdc:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1cde:	d114      	bne.n	1d0a <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    1ce0:	4b19      	ldr	r3, [pc, #100]	; (1d48 <nm_drv_deinit+0x7c>)
    1ce2:	4798      	blx	r3
    1ce4:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1ce6:	d11d      	bne.n	1d24 <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    1ce8:	4b18      	ldr	r3, [pc, #96]	; (1d4c <nm_drv_deinit+0x80>)
    1cea:	4798      	blx	r3
    1cec:	e00b      	b.n	1d06 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    1cee:	22b6      	movs	r2, #182	; 0xb6
    1cf0:	0052      	lsls	r2, r2, #1
    1cf2:	4917      	ldr	r1, [pc, #92]	; (1d50 <nm_drv_deinit+0x84>)
    1cf4:	4817      	ldr	r0, [pc, #92]	; (1d54 <nm_drv_deinit+0x88>)
    1cf6:	4b18      	ldr	r3, [pc, #96]	; (1d58 <nm_drv_deinit+0x8c>)
    1cf8:	4798      	blx	r3
    1cfa:	4818      	ldr	r0, [pc, #96]	; (1d5c <nm_drv_deinit+0x90>)
    1cfc:	4b18      	ldr	r3, [pc, #96]	; (1d60 <nm_drv_deinit+0x94>)
    1cfe:	4798      	blx	r3
    1d00:	200d      	movs	r0, #13
    1d02:	4b18      	ldr	r3, [pc, #96]	; (1d64 <nm_drv_deinit+0x98>)
    1d04:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    1d06:	0020      	movs	r0, r4
    1d08:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    1d0a:	2274      	movs	r2, #116	; 0x74
    1d0c:	32ff      	adds	r2, #255	; 0xff
    1d0e:	4910      	ldr	r1, [pc, #64]	; (1d50 <nm_drv_deinit+0x84>)
    1d10:	4810      	ldr	r0, [pc, #64]	; (1d54 <nm_drv_deinit+0x88>)
    1d12:	4b11      	ldr	r3, [pc, #68]	; (1d58 <nm_drv_deinit+0x8c>)
    1d14:	4798      	blx	r3
    1d16:	4814      	ldr	r0, [pc, #80]	; (1d68 <nm_drv_deinit+0x9c>)
    1d18:	4b11      	ldr	r3, [pc, #68]	; (1d60 <nm_drv_deinit+0x94>)
    1d1a:	4798      	blx	r3
    1d1c:	200d      	movs	r0, #13
    1d1e:	4b11      	ldr	r3, [pc, #68]	; (1d64 <nm_drv_deinit+0x98>)
    1d20:	4798      	blx	r3
		goto ERR1;
    1d22:	e7f0      	b.n	1d06 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    1d24:	227a      	movs	r2, #122	; 0x7a
    1d26:	32ff      	adds	r2, #255	; 0xff
    1d28:	4909      	ldr	r1, [pc, #36]	; (1d50 <nm_drv_deinit+0x84>)
    1d2a:	480a      	ldr	r0, [pc, #40]	; (1d54 <nm_drv_deinit+0x88>)
    1d2c:	4b0a      	ldr	r3, [pc, #40]	; (1d58 <nm_drv_deinit+0x8c>)
    1d2e:	4798      	blx	r3
    1d30:	480e      	ldr	r0, [pc, #56]	; (1d6c <nm_drv_deinit+0xa0>)
    1d32:	4b0b      	ldr	r3, [pc, #44]	; (1d60 <nm_drv_deinit+0x94>)
    1d34:	4798      	blx	r3
    1d36:	200d      	movs	r0, #13
    1d38:	4b0a      	ldr	r3, [pc, #40]	; (1d64 <nm_drv_deinit+0x98>)
    1d3a:	4798      	blx	r3
		goto ERR1;
    1d3c:	e7e3      	b.n	1d06 <nm_drv_deinit+0x3a>
    1d3e:	46c0      	nop			; (mov r8, r8)
    1d40:	00001971 	.word	0x00001971
    1d44:	00003261 	.word	0x00003261
    1d48:	00001a09 	.word	0x00001a09
    1d4c:	000023ed 	.word	0x000023ed
    1d50:	00008898 	.word	0x00008898
    1d54:	000082d0 	.word	0x000082d0
    1d58:	00006f15 	.word	0x00006f15
    1d5c:	000088a8 	.word	0x000088a8
    1d60:	00007031 	.word	0x00007031
    1d64:	00006f49 	.word	0x00006f49
    1d68:	000088c8 	.word	0x000088c8
    1d6c:	000088ec 	.word	0x000088ec

00001d70 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    1d70:	b500      	push	{lr}
    1d72:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    1d74:	ab01      	add	r3, sp, #4
    1d76:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    1d78:	2200      	movs	r2, #0
    1d7a:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    1d7c:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    1d7e:	0019      	movs	r1, r3
    1d80:	2003      	movs	r0, #3
    1d82:	4b02      	ldr	r3, [pc, #8]	; (1d8c <nmi_spi_write+0x1c>)
    1d84:	4798      	blx	r3
}
    1d86:	b005      	add	sp, #20
    1d88:	bd00      	pop	{pc}
    1d8a:	46c0      	nop			; (mov r8, r8)
    1d8c:	00000419 	.word	0x00000419

00001d90 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    1d90:	b570      	push	{r4, r5, r6, lr}
    1d92:	b084      	sub	sp, #16
    1d94:	ac08      	add	r4, sp, #32
    1d96:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    1d98:	ac01      	add	r4, sp, #4
    1d9a:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    1d9c:	303f      	adds	r0, #63	; 0x3f
    1d9e:	b2c4      	uxtb	r4, r0
    1da0:	2c0e      	cmp	r4, #14
    1da2:	d900      	bls.n	1da6 <spi_cmd+0x16>
    1da4:	e084      	b.n	1eb0 <spi_cmd+0x120>
    1da6:	00a0      	lsls	r0, r4, #2
    1da8:	4c4f      	ldr	r4, [pc, #316]	; (1ee8 <spi_cmd+0x158>)
    1daa:	5820      	ldr	r0, [r4, r0]
    1dac:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    1dae:	ab01      	add	r3, sp, #4
    1db0:	0c0a      	lsrs	r2, r1, #16
    1db2:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    1db4:	0a0a      	lsrs	r2, r1, #8
    1db6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    1db8:	70d9      	strb	r1, [r3, #3]
		len = 5;
    1dba:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    1dbc:	4b4b      	ldr	r3, [pc, #300]	; (1eec <spi_cmd+0x15c>)
    1dbe:	781b      	ldrb	r3, [r3, #0]
    1dc0:	2b00      	cmp	r3, #0
    1dc2:	d077      	beq.n	1eb4 <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    1dc4:	3901      	subs	r1, #1
    1dc6:	b2c9      	uxtb	r1, r1
    1dc8:	e083      	b.n	1ed2 <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
    1dca:	0a0b      	lsrs	r3, r1, #8
    1dcc:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    1dce:	2d00      	cmp	r5, #0
    1dd0:	d107      	bne.n	1de2 <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    1dd2:	aa01      	add	r2, sp, #4
    1dd4:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    1dd6:	ab01      	add	r3, sp, #4
    1dd8:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    1dda:	2200      	movs	r2, #0
    1ddc:	70da      	strb	r2, [r3, #3]
		len = 5;
    1dde:	2105      	movs	r1, #5
		break;
    1de0:	e7ec      	b.n	1dbc <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    1de2:	2280      	movs	r2, #128	; 0x80
    1de4:	4252      	negs	r2, r2
    1de6:	4313      	orrs	r3, r2
    1de8:	aa01      	add	r2, sp, #4
    1dea:	7053      	strb	r3, [r2, #1]
    1dec:	e7f3      	b.n	1dd6 <spi_cmd+0x46>
		bc[1] = 0x00;
    1dee:	ab01      	add	r3, sp, #4
    1df0:	2200      	movs	r2, #0
    1df2:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    1df4:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    1df6:	70da      	strb	r2, [r3, #3]
		len = 5;
    1df8:	2105      	movs	r1, #5
		break;
    1dfa:	e7df      	b.n	1dbc <spi_cmd+0x2c>
		bc[1] = 0x00;
    1dfc:	ab01      	add	r3, sp, #4
    1dfe:	2200      	movs	r2, #0
    1e00:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    1e02:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    1e04:	70da      	strb	r2, [r3, #3]
		len = 5;
    1e06:	2105      	movs	r1, #5
		break;
    1e08:	e7d8      	b.n	1dbc <spi_cmd+0x2c>
		bc[1] = 0xff;
    1e0a:	ab01      	add	r3, sp, #4
    1e0c:	22ff      	movs	r2, #255	; 0xff
    1e0e:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    1e10:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    1e12:	70da      	strb	r2, [r3, #3]
		len = 5;
    1e14:	2105      	movs	r1, #5
		break;
    1e16:	e7d1      	b.n	1dbc <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    1e18:	aa01      	add	r2, sp, #4
    1e1a:	0c08      	lsrs	r0, r1, #16
    1e1c:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    1e1e:	0a08      	lsrs	r0, r1, #8
    1e20:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    1e22:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    1e24:	0a19      	lsrs	r1, r3, #8
    1e26:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    1e28:	7153      	strb	r3, [r2, #5]
		len = 7;
    1e2a:	2107      	movs	r1, #7
		break;
    1e2c:	e7c6      	b.n	1dbc <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    1e2e:	aa01      	add	r2, sp, #4
    1e30:	0c08      	lsrs	r0, r1, #16
    1e32:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    1e34:	0a08      	lsrs	r0, r1, #8
    1e36:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    1e38:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    1e3a:	0c19      	lsrs	r1, r3, #16
    1e3c:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    1e3e:	0a19      	lsrs	r1, r3, #8
    1e40:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    1e42:	7193      	strb	r3, [r2, #6]
		len = 8;
    1e44:	2108      	movs	r1, #8
		break;
    1e46:	e7b9      	b.n	1dbc <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    1e48:	0a0b      	lsrs	r3, r1, #8
    1e4a:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    1e4c:	2d00      	cmp	r5, #0
    1e4e:	d10c      	bne.n	1e6a <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    1e50:	a801      	add	r0, sp, #4
    1e52:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    1e54:	ab01      	add	r3, sp, #4
    1e56:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    1e58:	0e11      	lsrs	r1, r2, #24
    1e5a:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    1e5c:	0c11      	lsrs	r1, r2, #16
    1e5e:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    1e60:	0a11      	lsrs	r1, r2, #8
    1e62:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    1e64:	719a      	strb	r2, [r3, #6]
		len = 8;
    1e66:	2108      	movs	r1, #8
		break;
    1e68:	e7a8      	b.n	1dbc <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    1e6a:	2080      	movs	r0, #128	; 0x80
    1e6c:	4240      	negs	r0, r0
    1e6e:	4303      	orrs	r3, r0
    1e70:	a801      	add	r0, sp, #4
    1e72:	7043      	strb	r3, [r0, #1]
    1e74:	e7ee      	b.n	1e54 <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    1e76:	ab01      	add	r3, sp, #4
    1e78:	0c08      	lsrs	r0, r1, #16
    1e7a:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    1e7c:	0a08      	lsrs	r0, r1, #8
    1e7e:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    1e80:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    1e82:	0e11      	lsrs	r1, r2, #24
    1e84:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    1e86:	0c11      	lsrs	r1, r2, #16
    1e88:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    1e8a:	0a11      	lsrs	r1, r2, #8
    1e8c:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    1e8e:	71da      	strb	r2, [r3, #7]
		len = 9;
    1e90:	2109      	movs	r1, #9
		break;
    1e92:	e793      	b.n	1dbc <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    1e94:	2228      	movs	r2, #40	; 0x28
    1e96:	32ff      	adds	r2, #255	; 0xff
    1e98:	4915      	ldr	r1, [pc, #84]	; (1ef0 <spi_cmd+0x160>)
    1e9a:	4816      	ldr	r0, [pc, #88]	; (1ef4 <spi_cmd+0x164>)
    1e9c:	4b16      	ldr	r3, [pc, #88]	; (1ef8 <spi_cmd+0x168>)
    1e9e:	4798      	blx	r3
    1ea0:	4816      	ldr	r0, [pc, #88]	; (1efc <spi_cmd+0x16c>)
    1ea2:	4b17      	ldr	r3, [pc, #92]	; (1f00 <spi_cmd+0x170>)
    1ea4:	4798      	blx	r3
    1ea6:	200d      	movs	r0, #13
    1ea8:	4b16      	ldr	r3, [pc, #88]	; (1f04 <spi_cmd+0x174>)
    1eaa:	4798      	blx	r3
			result = N_FAIL;
    1eac:	2300      	movs	r3, #0
    1eae:	e017      	b.n	1ee0 <spi_cmd+0x150>
	switch (cmd) {
    1eb0:	2300      	movs	r3, #0
    1eb2:	e015      	b.n	1ee0 <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    1eb4:	1e4e      	subs	r6, r1, #1
    1eb6:	aa01      	add	r2, sp, #4
    1eb8:	1995      	adds	r5, r2, r6
    1eba:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    1ebc:	4c12      	ldr	r4, [pc, #72]	; (1f08 <spi_cmd+0x178>)
    1ebe:	005b      	lsls	r3, r3, #1
    1ec0:	7810      	ldrb	r0, [r2, #0]
    1ec2:	4043      	eors	r3, r0
    1ec4:	5ce3      	ldrb	r3, [r4, r3]
    1ec6:	3201      	adds	r2, #1
	while (len--)
    1ec8:	42aa      	cmp	r2, r5
    1eca:	d1f8      	bne.n	1ebe <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    1ecc:	005b      	lsls	r3, r3, #1
    1ece:	aa01      	add	r2, sp, #4
    1ed0:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    1ed2:	b289      	uxth	r1, r1
    1ed4:	a801      	add	r0, sp, #4
    1ed6:	4b0d      	ldr	r3, [pc, #52]	; (1f0c <spi_cmd+0x17c>)
    1ed8:	4798      	blx	r3
    1eda:	2301      	movs	r3, #1
    1edc:	2800      	cmp	r0, #0
    1ede:	d1d9      	bne.n	1e94 <spi_cmd+0x104>
		}
	}

	return result;
}
    1ee0:	0018      	movs	r0, r3
    1ee2:	b004      	add	sp, #16
    1ee4:	bd70      	pop	{r4, r5, r6, pc}
    1ee6:	46c0      	nop			; (mov r8, r8)
    1ee8:	00008954 	.word	0x00008954
    1eec:	200000f0 	.word	0x200000f0
    1ef0:	00008994 	.word	0x00008994
    1ef4:	000082d0 	.word	0x000082d0
    1ef8:	00006f15 	.word	0x00006f15
    1efc:	00008e24 	.word	0x00008e24
    1f00:	00007031 	.word	0x00007031
    1f04:	00006f49 	.word	0x00006f49
    1f08:	00008a20 	.word	0x00008a20
    1f0c:	00001d71 	.word	0x00001d71

00001f10 <nmi_spi_read>:
{
    1f10:	b500      	push	{lr}
    1f12:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    1f14:	ab01      	add	r3, sp, #4
    1f16:	2200      	movs	r2, #0
    1f18:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    1f1a:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    1f1c:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    1f1e:	0019      	movs	r1, r3
    1f20:	2003      	movs	r0, #3
    1f22:	4b02      	ldr	r3, [pc, #8]	; (1f2c <nmi_spi_read+0x1c>)
    1f24:	4798      	blx	r3
}
    1f26:	b005      	add	sp, #20
    1f28:	bd00      	pop	{pc}
    1f2a:	46c0      	nop			; (mov r8, r8)
    1f2c:	00000419 	.word	0x00000419

00001f30 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    1f30:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f32:	46c6      	mov	lr, r8
    1f34:	b500      	push	{lr}
    1f36:	b082      	sub	sp, #8
    1f38:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    1f3a:	28cf      	cmp	r0, #207	; 0xcf
    1f3c:	d02b      	beq.n	1f96 <spi_cmd_rsp+0x66>
    1f3e:	0003      	movs	r3, r0
    1f40:	333b      	adds	r3, #59	; 0x3b
    1f42:	b2db      	uxtb	r3, r3
    1f44:	2b01      	cmp	r3, #1
    1f46:	d926      	bls.n	1f96 <spi_cmd_rsp+0x66>
{
    1f48:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1f4a:	466b      	mov	r3, sp
    1f4c:	1dde      	adds	r6, r3, #7
    1f4e:	4b26      	ldr	r3, [pc, #152]	; (1fe8 <spi_cmd_rsp+0xb8>)
    1f50:	4698      	mov	r8, r3
    1f52:	2101      	movs	r1, #1
    1f54:	0030      	movs	r0, r6
    1f56:	47c0      	blx	r8
    1f58:	1e05      	subs	r5, r0, #0
    1f5a:	d125      	bne.n	1fa8 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    1f5c:	7833      	ldrb	r3, [r6, #0]
    1f5e:	42bb      	cmp	r3, r7
    1f60:	d030      	beq.n	1fc4 <spi_cmd_rsp+0x94>
    1f62:	3c01      	subs	r4, #1
    1f64:	b2e4      	uxtb	r4, r4
    1f66:	2c00      	cmp	r4, #0
    1f68:	d1f3      	bne.n	1f52 <spi_cmd_rsp+0x22>
    1f6a:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1f6c:	466b      	mov	r3, sp
    1f6e:	1dde      	adds	r6, r3, #7
    1f70:	4f1d      	ldr	r7, [pc, #116]	; (1fe8 <spi_cmd_rsp+0xb8>)
    1f72:	2101      	movs	r1, #1
    1f74:	0030      	movs	r0, r6
    1f76:	47b8      	blx	r7
    1f78:	2800      	cmp	r0, #0
    1f7a:	d125      	bne.n	1fc8 <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    1f7c:	7833      	ldrb	r3, [r6, #0]
    1f7e:	2b00      	cmp	r3, #0
    1f80:	d02f      	beq.n	1fe2 <spi_cmd_rsp+0xb2>
    1f82:	3c01      	subs	r4, #1
    1f84:	b2e4      	uxtb	r4, r4
    1f86:	2c00      	cmp	r4, #0
    1f88:	d1f3      	bne.n	1f72 <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    1f8a:	2501      	movs	r5, #1

_fail_:

	return result;
}
    1f8c:	0028      	movs	r0, r5
    1f8e:	b002      	add	sp, #8
    1f90:	bc04      	pop	{r2}
    1f92:	4690      	mov	r8, r2
    1f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1f96:	2101      	movs	r1, #1
    1f98:	466b      	mov	r3, sp
    1f9a:	1dd8      	adds	r0, r3, #7
    1f9c:	4b12      	ldr	r3, [pc, #72]	; (1fe8 <spi_cmd_rsp+0xb8>)
    1f9e:	4798      	blx	r3
			result = N_FAIL;
    1fa0:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1fa2:	2800      	cmp	r0, #0
    1fa4:	d0d0      	beq.n	1f48 <spi_cmd_rsp+0x18>
    1fa6:	e7f1      	b.n	1f8c <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    1fa8:	22b1      	movs	r2, #177	; 0xb1
    1faa:	0052      	lsls	r2, r2, #1
    1fac:	490f      	ldr	r1, [pc, #60]	; (1fec <spi_cmd_rsp+0xbc>)
    1fae:	4810      	ldr	r0, [pc, #64]	; (1ff0 <spi_cmd_rsp+0xc0>)
    1fb0:	4b10      	ldr	r3, [pc, #64]	; (1ff4 <spi_cmd_rsp+0xc4>)
    1fb2:	4798      	blx	r3
    1fb4:	4810      	ldr	r0, [pc, #64]	; (1ff8 <spi_cmd_rsp+0xc8>)
    1fb6:	4b11      	ldr	r3, [pc, #68]	; (1ffc <spi_cmd_rsp+0xcc>)
    1fb8:	4798      	blx	r3
    1fba:	200d      	movs	r0, #13
    1fbc:	4b10      	ldr	r3, [pc, #64]	; (2000 <STACK_SIZE>)
    1fbe:	4798      	blx	r3
			result = N_FAIL;
    1fc0:	2500      	movs	r5, #0
			goto _fail_;
    1fc2:	e7e3      	b.n	1f8c <spi_cmd_rsp+0x5c>
    1fc4:	240b      	movs	r4, #11
    1fc6:	e7d1      	b.n	1f6c <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    1fc8:	22b8      	movs	r2, #184	; 0xb8
    1fca:	0052      	lsls	r2, r2, #1
    1fcc:	4907      	ldr	r1, [pc, #28]	; (1fec <spi_cmd_rsp+0xbc>)
    1fce:	4808      	ldr	r0, [pc, #32]	; (1ff0 <spi_cmd_rsp+0xc0>)
    1fd0:	4b08      	ldr	r3, [pc, #32]	; (1ff4 <spi_cmd_rsp+0xc4>)
    1fd2:	4798      	blx	r3
    1fd4:	4808      	ldr	r0, [pc, #32]	; (1ff8 <spi_cmd_rsp+0xc8>)
    1fd6:	4b09      	ldr	r3, [pc, #36]	; (1ffc <spi_cmd_rsp+0xcc>)
    1fd8:	4798      	blx	r3
    1fda:	200d      	movs	r0, #13
    1fdc:	4b08      	ldr	r3, [pc, #32]	; (2000 <STACK_SIZE>)
    1fde:	4798      	blx	r3
			goto _fail_;
    1fe0:	e7d4      	b.n	1f8c <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    1fe2:	2501      	movs	r5, #1
    1fe4:	e7d2      	b.n	1f8c <spi_cmd_rsp+0x5c>
    1fe6:	46c0      	nop			; (mov r8, r8)
    1fe8:	00001f11 	.word	0x00001f11
    1fec:	000089ac 	.word	0x000089ac
    1ff0:	000082d0 	.word	0x000082d0
    1ff4:	00006f15 	.word	0x00006f15
    1ff8:	00008e50 	.word	0x00008e50
    1ffc:	00007031 	.word	0x00007031
    2000:	00006f49 	.word	0x00006f49

00002004 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    2004:	b5f0      	push	{r4, r5, r6, r7, lr}
    2006:	46de      	mov	lr, fp
    2008:	4657      	mov	r7, sl
    200a:	464e      	mov	r6, r9
    200c:	4645      	mov	r5, r8
    200e:	b5e0      	push	{r5, r6, r7, lr}
    2010:	b087      	sub	sp, #28
    2012:	9001      	str	r0, [sp, #4]
    2014:	4689      	mov	r9, r1
    2016:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    2018:	2300      	movs	r3, #0
    201a:	469a      	mov	sl, r3
    201c:	2380      	movs	r3, #128	; 0x80
    201e:	019b      	lsls	r3, r3, #6
    2020:	469b      	mov	fp, r3
    2022:	466a      	mov	r2, sp
    2024:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2026:	4b3b      	ldr	r3, [pc, #236]	; (2114 <spi_data_read+0x110>)
    2028:	4698      	mov	r8, r3
    202a:	e02e      	b.n	208a <spi_data_read+0x86>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    202c:	4a3a      	ldr	r2, [pc, #232]	; (2118 <spi_data_read+0x114>)
    202e:	493b      	ldr	r1, [pc, #236]	; (211c <spi_data_read+0x118>)
    2030:	483b      	ldr	r0, [pc, #236]	; (2120 <spi_data_read+0x11c>)
    2032:	4b3c      	ldr	r3, [pc, #240]	; (2124 <spi_data_read+0x120>)
    2034:	4798      	blx	r3
    2036:	483c      	ldr	r0, [pc, #240]	; (2128 <spi_data_read+0x124>)
    2038:	4b3c      	ldr	r3, [pc, #240]	; (212c <spi_data_read+0x128>)
    203a:	4798      	blx	r3
    203c:	200d      	movs	r0, #13
    203e:	4b3c      	ldr	r3, [pc, #240]	; (2130 <spi_data_read+0x12c>)
    2040:	4798      	blx	r3
    2042:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    2044:	0028      	movs	r0, r5
    2046:	b007      	add	sp, #28
    2048:	bc3c      	pop	{r2, r3, r4, r5}
    204a:	4690      	mov	r8, r2
    204c:	4699      	mov	r9, r3
    204e:	46a2      	mov	sl, r4
    2050:	46ab      	mov	fp, r5
    2052:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    2054:	2c00      	cmp	r4, #0
    2056:	dd2e      	ble.n	20b6 <spi_data_read+0xb2>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    2058:	9b01      	ldr	r3, [sp, #4]
    205a:	4453      	add	r3, sl
    205c:	0018      	movs	r0, r3
    205e:	0039      	movs	r1, r7
    2060:	4b2c      	ldr	r3, [pc, #176]	; (2114 <spi_data_read+0x110>)
    2062:	4798      	blx	r3
    2064:	1e04      	subs	r4, r0, #0
    2066:	d133      	bne.n	20d0 <spi_data_read+0xcc>
		if(!clockless)
    2068:	9b02      	ldr	r3, [sp, #8]
    206a:	2b00      	cmp	r3, #0
    206c:	d103      	bne.n	2076 <spi_data_read+0x72>
			if (!gu8Crc_off) {
    206e:	4b31      	ldr	r3, [pc, #196]	; (2134 <spi_data_read+0x130>)
    2070:	781b      	ldrb	r3, [r3, #0]
    2072:	2b00      	cmp	r3, #0
    2074:	d039      	beq.n	20ea <spi_data_read+0xe6>
		ix += nbytes;
    2076:	4653      	mov	r3, sl
    2078:	18fb      	adds	r3, r7, r3
    207a:	b21b      	sxth	r3, r3
    207c:	469a      	mov	sl, r3
		sz -= nbytes;
    207e:	464b      	mov	r3, r9
    2080:	1bdf      	subs	r7, r3, r7
    2082:	b2bb      	uxth	r3, r7
    2084:	4699      	mov	r9, r3
	} while (sz);
    2086:	2b00      	cmp	r3, #0
    2088:	d042      	beq.n	2110 <spi_data_read+0x10c>
    208a:	464f      	mov	r7, r9
    208c:	45d9      	cmp	r9, fp
    208e:	d901      	bls.n	2094 <spi_data_read+0x90>
    2090:	466b      	mov	r3, sp
    2092:	89df      	ldrh	r7, [r3, #14]
    2094:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    2096:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2098:	ab04      	add	r3, sp, #16
    209a:	1cde      	adds	r6, r3, #3
    209c:	2101      	movs	r1, #1
    209e:	0030      	movs	r0, r6
    20a0:	47c0      	blx	r8
    20a2:	1e05      	subs	r5, r0, #0
    20a4:	d1c2      	bne.n	202c <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    20a6:	7833      	ldrb	r3, [r6, #0]
    20a8:	091b      	lsrs	r3, r3, #4
    20aa:	2b0f      	cmp	r3, #15
    20ac:	d0d2      	beq.n	2054 <spi_data_read+0x50>
    20ae:	3c01      	subs	r4, #1
    20b0:	b224      	sxth	r4, r4
		} while (retry--);
    20b2:	1c63      	adds	r3, r4, #1
    20b4:	d1f2      	bne.n	209c <spi_data_read+0x98>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    20b6:	4a20      	ldr	r2, [pc, #128]	; (2138 <spi_data_read+0x134>)
    20b8:	4918      	ldr	r1, [pc, #96]	; (211c <spi_data_read+0x118>)
    20ba:	4819      	ldr	r0, [pc, #100]	; (2120 <spi_data_read+0x11c>)
    20bc:	4c19      	ldr	r4, [pc, #100]	; (2124 <spi_data_read+0x120>)
    20be:	47a0      	blx	r4
    20c0:	ab04      	add	r3, sp, #16
    20c2:	78d9      	ldrb	r1, [r3, #3]
    20c4:	481d      	ldr	r0, [pc, #116]	; (213c <spi_data_read+0x138>)
    20c6:	47a0      	blx	r4
    20c8:	200d      	movs	r0, #13
    20ca:	4b19      	ldr	r3, [pc, #100]	; (2130 <spi_data_read+0x12c>)
    20cc:	4798      	blx	r3
			break;
    20ce:	e7b9      	b.n	2044 <spi_data_read+0x40>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    20d0:	22c5      	movs	r2, #197	; 0xc5
    20d2:	0092      	lsls	r2, r2, #2
    20d4:	4911      	ldr	r1, [pc, #68]	; (211c <spi_data_read+0x118>)
    20d6:	4812      	ldr	r0, [pc, #72]	; (2120 <spi_data_read+0x11c>)
    20d8:	4b12      	ldr	r3, [pc, #72]	; (2124 <spi_data_read+0x120>)
    20da:	4798      	blx	r3
    20dc:	4818      	ldr	r0, [pc, #96]	; (2140 <spi_data_read+0x13c>)
    20de:	4b13      	ldr	r3, [pc, #76]	; (212c <spi_data_read+0x128>)
    20e0:	4798      	blx	r3
    20e2:	200d      	movs	r0, #13
    20e4:	4b12      	ldr	r3, [pc, #72]	; (2130 <spi_data_read+0x12c>)
    20e6:	4798      	blx	r3
			break;
    20e8:	e7ac      	b.n	2044 <spi_data_read+0x40>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    20ea:	2102      	movs	r1, #2
    20ec:	a805      	add	r0, sp, #20
    20ee:	4b09      	ldr	r3, [pc, #36]	; (2114 <spi_data_read+0x110>)
    20f0:	4798      	blx	r3
    20f2:	2800      	cmp	r0, #0
    20f4:	d0bf      	beq.n	2076 <spi_data_read+0x72>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    20f6:	4a13      	ldr	r2, [pc, #76]	; (2144 <spi_data_read+0x140>)
    20f8:	4908      	ldr	r1, [pc, #32]	; (211c <spi_data_read+0x118>)
    20fa:	4809      	ldr	r0, [pc, #36]	; (2120 <spi_data_read+0x11c>)
    20fc:	4b09      	ldr	r3, [pc, #36]	; (2124 <spi_data_read+0x120>)
    20fe:	4798      	blx	r3
    2100:	4811      	ldr	r0, [pc, #68]	; (2148 <spi_data_read+0x144>)
    2102:	4b0a      	ldr	r3, [pc, #40]	; (212c <spi_data_read+0x128>)
    2104:	4798      	blx	r3
    2106:	200d      	movs	r0, #13
    2108:	4b09      	ldr	r3, [pc, #36]	; (2130 <spi_data_read+0x12c>)
    210a:	4798      	blx	r3
					result = N_FAIL;
    210c:	0025      	movs	r5, r4
					break;
    210e:	e799      	b.n	2044 <spi_data_read+0x40>
    2110:	2501      	movs	r5, #1
    2112:	e797      	b.n	2044 <spi_data_read+0x40>
    2114:	00001f11 	.word	0x00001f11
    2118:	000002ff 	.word	0x000002ff
    211c:	000089b8 	.word	0x000089b8
    2120:	000082d0 	.word	0x000082d0
    2124:	00006f15 	.word	0x00006f15
    2128:	00008e84 	.word	0x00008e84
    212c:	00007031 	.word	0x00007031
    2130:	00006f49 	.word	0x00006f49
    2134:	200000f0 	.word	0x200000f0
    2138:	0000030b 	.word	0x0000030b
    213c:	00008eb8 	.word	0x00008eb8
    2140:	00008ee8 	.word	0x00008ee8
    2144:	0000031f 	.word	0x0000031f
    2148:	00008f18 	.word	0x00008f18

0000214c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    214c:	b5f0      	push	{r4, r5, r6, r7, lr}
    214e:	46d6      	mov	lr, sl
    2150:	464f      	mov	r7, r9
    2152:	4646      	mov	r6, r8
    2154:	b5c0      	push	{r6, r7, lr}
    2156:	b086      	sub	sp, #24
    2158:	9003      	str	r0, [sp, #12]
    215a:	9104      	str	r1, [sp, #16]
    215c:	2830      	cmp	r0, #48	; 0x30
    215e:	d80f      	bhi.n	2180 <spi_write_reg+0x34>
    2160:	4b30      	ldr	r3, [pc, #192]	; (2224 <spi_write_reg+0xd8>)
    2162:	781f      	ldrb	r7, [r3, #0]
    2164:	b2fb      	uxtb	r3, r7
    2166:	9305      	str	r3, [sp, #20]
    2168:	2300      	movs	r3, #0
    216a:	2230      	movs	r2, #48	; 0x30
    216c:	9903      	ldr	r1, [sp, #12]
    216e:	428a      	cmp	r2, r1
    2170:	415b      	adcs	r3, r3
    2172:	b2db      	uxtb	r3, r3
    2174:	469a      	mov	sl, r3
    2176:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    2178:	4b2b      	ldr	r3, [pc, #172]	; (2228 <spi_write_reg+0xdc>)
    217a:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    217c:	46d1      	mov	r9, sl
    217e:	e033      	b.n	21e8 <spi_write_reg+0x9c>
    2180:	4b2a      	ldr	r3, [pc, #168]	; (222c <spi_write_reg+0xe0>)
    2182:	781f      	ldrb	r7, [r3, #0]
    2184:	e7ee      	b.n	2164 <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    2186:	9805      	ldr	r0, [sp, #20]
    2188:	4b29      	ldr	r3, [pc, #164]	; (2230 <spi_write_reg+0xe4>)
    218a:	4798      	blx	r3
    218c:	0004      	movs	r4, r0
	if (result != N_OK) {
    218e:	2801      	cmp	r0, #1
    2190:	d041      	beq.n	2216 <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    2192:	22e7      	movs	r2, #231	; 0xe7
    2194:	0092      	lsls	r2, r2, #2
    2196:	4927      	ldr	r1, [pc, #156]	; (2234 <spi_write_reg+0xe8>)
    2198:	4827      	ldr	r0, [pc, #156]	; (2238 <spi_write_reg+0xec>)
    219a:	4e28      	ldr	r6, [pc, #160]	; (223c <spi_write_reg+0xf0>)
    219c:	47b0      	blx	r6
    219e:	9903      	ldr	r1, [sp, #12]
    21a0:	4827      	ldr	r0, [pc, #156]	; (2240 <spi_write_reg+0xf4>)
    21a2:	47b0      	blx	r6
    21a4:	200d      	movs	r0, #13
    21a6:	4b27      	ldr	r3, [pc, #156]	; (2244 <spi_write_reg+0xf8>)
    21a8:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    21aa:	2001      	movs	r0, #1
    21ac:	4e26      	ldr	r6, [pc, #152]	; (2248 <spi_write_reg+0xfc>)
    21ae:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    21b0:	2300      	movs	r3, #0
    21b2:	9300      	str	r3, [sp, #0]
    21b4:	2200      	movs	r2, #0
    21b6:	2100      	movs	r1, #0
    21b8:	20cf      	movs	r0, #207	; 0xcf
    21ba:	4f1b      	ldr	r7, [pc, #108]	; (2228 <spi_write_reg+0xdc>)
    21bc:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    21be:	20cf      	movs	r0, #207	; 0xcf
    21c0:	4b1b      	ldr	r3, [pc, #108]	; (2230 <spi_write_reg+0xe4>)
    21c2:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    21c4:	4a21      	ldr	r2, [pc, #132]	; (224c <spi_write_reg+0x100>)
    21c6:	491b      	ldr	r1, [pc, #108]	; (2234 <spi_write_reg+0xe8>)
    21c8:	481b      	ldr	r0, [pc, #108]	; (2238 <spi_write_reg+0xec>)
    21ca:	4f1c      	ldr	r7, [pc, #112]	; (223c <spi_write_reg+0xf0>)
    21cc:	47b8      	blx	r7
    21ce:	9b04      	ldr	r3, [sp, #16]
    21d0:	9a03      	ldr	r2, [sp, #12]
    21d2:	0029      	movs	r1, r5
    21d4:	481e      	ldr	r0, [pc, #120]	; (2250 <spi_write_reg+0x104>)
    21d6:	47b8      	blx	r7
    21d8:	200d      	movs	r0, #13
    21da:	4b1a      	ldr	r3, [pc, #104]	; (2244 <spi_write_reg+0xf8>)
    21dc:	4798      	blx	r3
		nm_bsp_sleep(1);
    21de:	2001      	movs	r0, #1
    21e0:	47b0      	blx	r6
    21e2:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    21e4:	2d00      	cmp	r5, #0
    21e6:	d016      	beq.n	2216 <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    21e8:	464b      	mov	r3, r9
    21ea:	9300      	str	r3, [sp, #0]
    21ec:	2304      	movs	r3, #4
    21ee:	9a04      	ldr	r2, [sp, #16]
    21f0:	9f03      	ldr	r7, [sp, #12]
    21f2:	0039      	movs	r1, r7
    21f4:	9805      	ldr	r0, [sp, #20]
    21f6:	47c0      	blx	r8
    21f8:	0004      	movs	r4, r0
	if (result != N_OK) {
    21fa:	2801      	cmp	r0, #1
    21fc:	d0c3      	beq.n	2186 <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    21fe:	4a15      	ldr	r2, [pc, #84]	; (2254 <spi_write_reg+0x108>)
    2200:	490c      	ldr	r1, [pc, #48]	; (2234 <spi_write_reg+0xe8>)
    2202:	480d      	ldr	r0, [pc, #52]	; (2238 <spi_write_reg+0xec>)
    2204:	4e0d      	ldr	r6, [pc, #52]	; (223c <spi_write_reg+0xf0>)
    2206:	47b0      	blx	r6
    2208:	0039      	movs	r1, r7
    220a:	4813      	ldr	r0, [pc, #76]	; (2258 <spi_write_reg+0x10c>)
    220c:	47b0      	blx	r6
    220e:	200d      	movs	r0, #13
    2210:	4b0c      	ldr	r3, [pc, #48]	; (2244 <spi_write_reg+0xf8>)
    2212:	4798      	blx	r3
		goto _FAIL_;
    2214:	e7c9      	b.n	21aa <spi_write_reg+0x5e>
	}

	return result;
}
    2216:	0020      	movs	r0, r4
    2218:	b006      	add	sp, #24
    221a:	bc1c      	pop	{r2, r3, r4}
    221c:	4690      	mov	r8, r2
    221e:	4699      	mov	r9, r3
    2220:	46a2      	mov	sl, r4
    2222:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2224:	00008990 	.word	0x00008990
    2228:	00001d91 	.word	0x00001d91
    222c:	00008991 	.word	0x00008991
    2230:	00001f31 	.word	0x00001f31
    2234:	000089d8 	.word	0x000089d8
    2238:	000082d0 	.word	0x000082d0
    223c:	00006f15 	.word	0x00006f15
    2240:	00009010 	.word	0x00009010
    2244:	00006f49 	.word	0x00006f49
    2248:	000001e1 	.word	0x000001e1
    224c:	000003af 	.word	0x000003af
    2250:	00009048 	.word	0x00009048
    2254:	00000396 	.word	0x00000396
    2258:	00008fe4 	.word	0x00008fe4

0000225c <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    225c:	b5f0      	push	{r4, r5, r6, r7, lr}
    225e:	46de      	mov	lr, fp
    2260:	4657      	mov	r7, sl
    2262:	464e      	mov	r6, r9
    2264:	4645      	mov	r5, r8
    2266:	b5e0      	push	{r5, r6, r7, lr}
    2268:	b087      	sub	sp, #28
    226a:	9002      	str	r0, [sp, #8]
    226c:	468b      	mov	fp, r1
    226e:	28ff      	cmp	r0, #255	; 0xff
    2270:	d80f      	bhi.n	2292 <spi_read_reg+0x36>
    2272:	4b41      	ldr	r3, [pc, #260]	; (2378 <spi_read_reg+0x11c>)
    2274:	781f      	ldrb	r7, [r3, #0]
    2276:	b2fb      	uxtb	r3, r7
    2278:	9303      	str	r3, [sp, #12]
    227a:	2300      	movs	r3, #0
    227c:	22ff      	movs	r2, #255	; 0xff
    227e:	9902      	ldr	r1, [sp, #8]
    2280:	428a      	cmp	r2, r1
    2282:	415b      	adcs	r3, r3
    2284:	b2db      	uxtb	r3, r3
    2286:	469a      	mov	sl, r3
    2288:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    228a:	4b3c      	ldr	r3, [pc, #240]	; (237c <spi_read_reg+0x120>)
    228c:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    228e:	46d1      	mov	r9, sl
    2290:	e031      	b.n	22f6 <spi_read_reg+0x9a>
    2292:	4b3b      	ldr	r3, [pc, #236]	; (2380 <spi_read_reg+0x124>)
    2294:	781f      	ldrb	r7, [r3, #0]
    2296:	e7ee      	b.n	2276 <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    2298:	9803      	ldr	r0, [sp, #12]
    229a:	4b3a      	ldr	r3, [pc, #232]	; (2384 <spi_read_reg+0x128>)
    229c:	4798      	blx	r3
    229e:	0004      	movs	r4, r0
	if (result != N_OK) {
    22a0:	2801      	cmp	r0, #1
    22a2:	d03f      	beq.n	2324 <spi_read_reg+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    22a4:	4a38      	ldr	r2, [pc, #224]	; (2388 <spi_read_reg+0x12c>)
    22a6:	4939      	ldr	r1, [pc, #228]	; (238c <spi_read_reg+0x130>)
    22a8:	4839      	ldr	r0, [pc, #228]	; (2390 <spi_read_reg+0x134>)
    22aa:	4e3a      	ldr	r6, [pc, #232]	; (2394 <spi_read_reg+0x138>)
    22ac:	47b0      	blx	r6
    22ae:	9902      	ldr	r1, [sp, #8]
    22b0:	4839      	ldr	r0, [pc, #228]	; (2398 <spi_read_reg+0x13c>)
    22b2:	47b0      	blx	r6
    22b4:	200d      	movs	r0, #13
    22b6:	4b39      	ldr	r3, [pc, #228]	; (239c <spi_read_reg+0x140>)
    22b8:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    22ba:	2001      	movs	r0, #1
    22bc:	4e38      	ldr	r6, [pc, #224]	; (23a0 <spi_read_reg+0x144>)
    22be:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    22c0:	2300      	movs	r3, #0
    22c2:	9300      	str	r3, [sp, #0]
    22c4:	2200      	movs	r2, #0
    22c6:	2100      	movs	r1, #0
    22c8:	20cf      	movs	r0, #207	; 0xcf
    22ca:	4f2c      	ldr	r7, [pc, #176]	; (237c <spi_read_reg+0x120>)
    22cc:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    22ce:	20cf      	movs	r0, #207	; 0xcf
    22d0:	4b2c      	ldr	r3, [pc, #176]	; (2384 <spi_read_reg+0x128>)
    22d2:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    22d4:	4a33      	ldr	r2, [pc, #204]	; (23a4 <spi_read_reg+0x148>)
    22d6:	492d      	ldr	r1, [pc, #180]	; (238c <spi_read_reg+0x130>)
    22d8:	482d      	ldr	r0, [pc, #180]	; (2390 <spi_read_reg+0x134>)
    22da:	4f2e      	ldr	r7, [pc, #184]	; (2394 <spi_read_reg+0x138>)
    22dc:	47b8      	blx	r7
    22de:	9a02      	ldr	r2, [sp, #8]
    22e0:	0029      	movs	r1, r5
    22e2:	4831      	ldr	r0, [pc, #196]	; (23a8 <spi_read_reg+0x14c>)
    22e4:	47b8      	blx	r7
    22e6:	200d      	movs	r0, #13
    22e8:	4b2c      	ldr	r3, [pc, #176]	; (239c <spi_read_reg+0x140>)
    22ea:	4798      	blx	r3
		nm_bsp_sleep(1);
    22ec:	2001      	movs	r0, #1
    22ee:	47b0      	blx	r6
    22f0:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    22f2:	2d00      	cmp	r5, #0
    22f4:	d037      	beq.n	2366 <spi_read_reg+0x10a>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    22f6:	464b      	mov	r3, r9
    22f8:	9300      	str	r3, [sp, #0]
    22fa:	2304      	movs	r3, #4
    22fc:	2200      	movs	r2, #0
    22fe:	9f02      	ldr	r7, [sp, #8]
    2300:	0039      	movs	r1, r7
    2302:	9803      	ldr	r0, [sp, #12]
    2304:	47c0      	blx	r8
    2306:	0004      	movs	r4, r0
	if (result != N_OK) {
    2308:	2801      	cmp	r0, #1
    230a:	d0c5      	beq.n	2298 <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    230c:	4a27      	ldr	r2, [pc, #156]	; (23ac <spi_read_reg+0x150>)
    230e:	491f      	ldr	r1, [pc, #124]	; (238c <spi_read_reg+0x130>)
    2310:	481f      	ldr	r0, [pc, #124]	; (2390 <spi_read_reg+0x134>)
    2312:	4e20      	ldr	r6, [pc, #128]	; (2394 <spi_read_reg+0x138>)
    2314:	47b0      	blx	r6
    2316:	0039      	movs	r1, r7
    2318:	4825      	ldr	r0, [pc, #148]	; (23b0 <spi_read_reg+0x154>)
    231a:	47b0      	blx	r6
    231c:	200d      	movs	r0, #13
    231e:	4b1f      	ldr	r3, [pc, #124]	; (239c <spi_read_reg+0x140>)
    2320:	4798      	blx	r3
		goto _FAIL_;
    2322:	e7ca      	b.n	22ba <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
    2324:	464a      	mov	r2, r9
    2326:	2104      	movs	r1, #4
    2328:	a805      	add	r0, sp, #20
    232a:	4b22      	ldr	r3, [pc, #136]	; (23b4 <spi_read_reg+0x158>)
    232c:	4798      	blx	r3
    232e:	0004      	movs	r4, r0
	if (result != N_OK) {
    2330:	2801      	cmp	r0, #1
    2332:	d00b      	beq.n	234c <spi_read_reg+0xf0>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    2334:	4a20      	ldr	r2, [pc, #128]	; (23b8 <spi_read_reg+0x15c>)
    2336:	4915      	ldr	r1, [pc, #84]	; (238c <spi_read_reg+0x130>)
    2338:	4815      	ldr	r0, [pc, #84]	; (2390 <spi_read_reg+0x134>)
    233a:	4b16      	ldr	r3, [pc, #88]	; (2394 <spi_read_reg+0x138>)
    233c:	4798      	blx	r3
    233e:	481f      	ldr	r0, [pc, #124]	; (23bc <spi_read_reg+0x160>)
    2340:	4b1f      	ldr	r3, [pc, #124]	; (23c0 <spi_read_reg+0x164>)
    2342:	4798      	blx	r3
    2344:	200d      	movs	r0, #13
    2346:	4b15      	ldr	r3, [pc, #84]	; (239c <spi_read_reg+0x140>)
    2348:	4798      	blx	r3
		goto _FAIL_;
    234a:	e7b6      	b.n	22ba <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
    234c:	aa05      	add	r2, sp, #20
    234e:	7853      	ldrb	r3, [r2, #1]
    2350:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    2352:	7891      	ldrb	r1, [r2, #2]
    2354:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    2356:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    2358:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    235a:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    235c:	78d2      	ldrb	r2, [r2, #3]
    235e:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    2360:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    2362:	465a      	mov	r2, fp
    2364:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    2366:	0020      	movs	r0, r4
    2368:	b007      	add	sp, #28
    236a:	bc3c      	pop	{r2, r3, r4, r5}
    236c:	4690      	mov	r8, r2
    236e:	4699      	mov	r9, r3
    2370:	46a2      	mov	sl, r4
    2372:	46ab      	mov	fp, r5
    2374:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2376:	46c0      	nop			; (mov r8, r8)
    2378:	00008992 	.word	0x00008992
    237c:	00001d91 	.word	0x00001d91
    2380:	00008993 	.word	0x00008993
    2384:	00001f31 	.word	0x00001f31
    2388:	0000041d 	.word	0x0000041d
    238c:	000089f8 	.word	0x000089f8
    2390:	000082d0 	.word	0x000082d0
    2394:	00006f15 	.word	0x00006f15
    2398:	00008f78 	.word	0x00008f78
    239c:	00006f49 	.word	0x00006f49
    23a0:	000001e1 	.word	0x000001e1
    23a4:	0000043c 	.word	0x0000043c
    23a8:	00008fcc 	.word	0x00008fcc
    23ac:	00000417 	.word	0x00000417
    23b0:	00008f4c 	.word	0x00008f4c
    23b4:	00002005 	.word	0x00002005
    23b8:	00000424 	.word	0x00000424
    23bc:	00008fac 	.word	0x00008fac
    23c0:	00007031 	.word	0x00007031

000023c4 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    23c4:	b510      	push	{r4, lr}
    23c6:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    23c8:	2300      	movs	r3, #0
    23ca:	9300      	str	r3, [sp, #0]
    23cc:	2200      	movs	r2, #0
    23ce:	2100      	movs	r1, #0
    23d0:	20cf      	movs	r0, #207	; 0xcf
    23d2:	4c04      	ldr	r4, [pc, #16]	; (23e4 <nm_spi_reset+0x20>)
    23d4:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    23d6:	20cf      	movs	r0, #207	; 0xcf
    23d8:	4b03      	ldr	r3, [pc, #12]	; (23e8 <nm_spi_reset+0x24>)
    23da:	4798      	blx	r3
	return M2M_SUCCESS;
}
    23dc:	2000      	movs	r0, #0
    23de:	b002      	add	sp, #8
    23e0:	bd10      	pop	{r4, pc}
    23e2:	46c0      	nop			; (mov r8, r8)
    23e4:	00001d91 	.word	0x00001d91
    23e8:	00001f31 	.word	0x00001f31

000023ec <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    23ec:	2200      	movs	r2, #0
    23ee:	4b02      	ldr	r3, [pc, #8]	; (23f8 <nm_spi_deinit+0xc>)
    23f0:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    23f2:	2000      	movs	r0, #0
    23f4:	4770      	bx	lr
    23f6:	46c0      	nop			; (mov r8, r8)
    23f8:	200000f0 	.word	0x200000f0

000023fc <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    23fc:	b500      	push	{lr}
    23fe:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    2400:	a901      	add	r1, sp, #4
    2402:	4b02      	ldr	r3, [pc, #8]	; (240c <nm_spi_read_reg+0x10>)
    2404:	4798      	blx	r3

	return u32Val;
}
    2406:	9801      	ldr	r0, [sp, #4]
    2408:	b003      	add	sp, #12
    240a:	bd00      	pop	{pc}
    240c:	0000225d 	.word	0x0000225d

00002410 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    2410:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    2412:	4b04      	ldr	r3, [pc, #16]	; (2424 <nm_spi_read_reg_with_ret+0x14>)
    2414:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2416:	2300      	movs	r3, #0
    2418:	2801      	cmp	r0, #1
    241a:	d101      	bne.n	2420 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    241c:	0018      	movs	r0, r3
    241e:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    2420:	3b06      	subs	r3, #6
    2422:	e7fb      	b.n	241c <nm_spi_read_reg_with_ret+0xc>
    2424:	0000225d 	.word	0x0000225d

00002428 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    2428:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    242a:	4b04      	ldr	r3, [pc, #16]	; (243c <nm_spi_write_reg+0x14>)
    242c:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    242e:	2300      	movs	r3, #0
    2430:	2801      	cmp	r0, #1
    2432:	d101      	bne.n	2438 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    2434:	0018      	movs	r0, r3
    2436:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    2438:	3b06      	subs	r3, #6
    243a:	e7fb      	b.n	2434 <nm_spi_write_reg+0xc>
    243c:	0000214d 	.word	0x0000214d

00002440 <nm_spi_init>:
{
    2440:	b510      	push	{r4, lr}
    2442:	b082      	sub	sp, #8
	uint32 reg = 0;
    2444:	2300      	movs	r3, #0
    2446:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    2448:	4a35      	ldr	r2, [pc, #212]	; (2520 <nm_spi_init+0xe0>)
    244a:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    244c:	4669      	mov	r1, sp
    244e:	4835      	ldr	r0, [pc, #212]	; (2524 <nm_spi_init+0xe4>)
    2450:	4b35      	ldr	r3, [pc, #212]	; (2528 <nm_spi_init+0xe8>)
    2452:	4798      	blx	r3
    2454:	2800      	cmp	r0, #0
    2456:	d028      	beq.n	24aa <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    2458:	4b31      	ldr	r3, [pc, #196]	; (2520 <nm_spi_init+0xe0>)
    245a:	781b      	ldrb	r3, [r3, #0]
    245c:	2b00      	cmp	r3, #0
    245e:	d10d      	bne.n	247c <nm_spi_init+0x3c>
		reg &= ~0x70;
    2460:	337c      	adds	r3, #124	; 0x7c
    2462:	9900      	ldr	r1, [sp, #0]
    2464:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    2466:	3b2c      	subs	r3, #44	; 0x2c
    2468:	4319      	orrs	r1, r3
    246a:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    246c:	482d      	ldr	r0, [pc, #180]	; (2524 <nm_spi_init+0xe4>)
    246e:	4b2f      	ldr	r3, [pc, #188]	; (252c <nm_spi_init+0xec>)
    2470:	4798      	blx	r3
    2472:	1e04      	subs	r4, r0, #0
    2474:	d039      	beq.n	24ea <nm_spi_init+0xaa>
		gu8Crc_off = 1;
    2476:	2201      	movs	r2, #1
    2478:	4b29      	ldr	r3, [pc, #164]	; (2520 <nm_spi_init+0xe0>)
    247a:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    247c:	a901      	add	r1, sp, #4
    247e:	2080      	movs	r0, #128	; 0x80
    2480:	0140      	lsls	r0, r0, #5
    2482:	4b29      	ldr	r3, [pc, #164]	; (2528 <nm_spi_init+0xe8>)
    2484:	4798      	blx	r3
    2486:	2800      	cmp	r0, #0
    2488:	d03b      	beq.n	2502 <nm_spi_init+0xc2>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    248a:	4c26      	ldr	r4, [pc, #152]	; (2524 <nm_spi_init+0xe4>)
    248c:	0020      	movs	r0, r4
    248e:	4b28      	ldr	r3, [pc, #160]	; (2530 <nm_spi_init+0xf0>)
    2490:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    2492:	2370      	movs	r3, #112	; 0x70
    2494:	0001      	movs	r1, r0
    2496:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    2498:	2050      	movs	r0, #80	; 0x50
    249a:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    249c:	0020      	movs	r0, r4
    249e:	4b25      	ldr	r3, [pc, #148]	; (2534 <nm_spi_init+0xf4>)
    24a0:	4798      	blx	r3
	return M2M_SUCCESS;
    24a2:	2400      	movs	r4, #0
}
    24a4:	0020      	movs	r0, r4
    24a6:	b002      	add	sp, #8
    24a8:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    24aa:	2201      	movs	r2, #1
    24ac:	4b1c      	ldr	r3, [pc, #112]	; (2520 <nm_spi_init+0xe0>)
    24ae:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    24b0:	4a21      	ldr	r2, [pc, #132]	; (2538 <nm_spi_init+0xf8>)
    24b2:	4922      	ldr	r1, [pc, #136]	; (253c <nm_spi_init+0xfc>)
    24b4:	4822      	ldr	r0, [pc, #136]	; (2540 <nm_spi_init+0x100>)
    24b6:	4b23      	ldr	r3, [pc, #140]	; (2544 <nm_spi_init+0x104>)
    24b8:	4798      	blx	r3
    24ba:	4823      	ldr	r0, [pc, #140]	; (2548 <nm_spi_init+0x108>)
    24bc:	4b23      	ldr	r3, [pc, #140]	; (254c <nm_spi_init+0x10c>)
    24be:	4798      	blx	r3
    24c0:	200d      	movs	r0, #13
    24c2:	4b23      	ldr	r3, [pc, #140]	; (2550 <nm_spi_init+0x110>)
    24c4:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    24c6:	4669      	mov	r1, sp
    24c8:	4816      	ldr	r0, [pc, #88]	; (2524 <nm_spi_init+0xe4>)
    24ca:	4b17      	ldr	r3, [pc, #92]	; (2528 <nm_spi_init+0xe8>)
    24cc:	4798      	blx	r3
    24ce:	1e04      	subs	r4, r0, #0
    24d0:	d1c2      	bne.n	2458 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    24d2:	4a20      	ldr	r2, [pc, #128]	; (2554 <nm_spi_init+0x114>)
    24d4:	4919      	ldr	r1, [pc, #100]	; (253c <nm_spi_init+0xfc>)
    24d6:	481a      	ldr	r0, [pc, #104]	; (2540 <nm_spi_init+0x100>)
    24d8:	4b1a      	ldr	r3, [pc, #104]	; (2544 <nm_spi_init+0x104>)
    24da:	4798      	blx	r3
    24dc:	481e      	ldr	r0, [pc, #120]	; (2558 <nm_spi_init+0x118>)
    24de:	4b1b      	ldr	r3, [pc, #108]	; (254c <nm_spi_init+0x10c>)
    24e0:	4798      	blx	r3
    24e2:	200d      	movs	r0, #13
    24e4:	4b1a      	ldr	r3, [pc, #104]	; (2550 <nm_spi_init+0x110>)
    24e6:	4798      	blx	r3
			return 0;
    24e8:	e7dc      	b.n	24a4 <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    24ea:	4a1c      	ldr	r2, [pc, #112]	; (255c <nm_spi_init+0x11c>)
    24ec:	4913      	ldr	r1, [pc, #76]	; (253c <nm_spi_init+0xfc>)
    24ee:	4814      	ldr	r0, [pc, #80]	; (2540 <nm_spi_init+0x100>)
    24f0:	4b14      	ldr	r3, [pc, #80]	; (2544 <nm_spi_init+0x104>)
    24f2:	4798      	blx	r3
    24f4:	481a      	ldr	r0, [pc, #104]	; (2560 <nm_spi_init+0x120>)
    24f6:	4b15      	ldr	r3, [pc, #84]	; (254c <nm_spi_init+0x10c>)
    24f8:	4798      	blx	r3
    24fa:	200d      	movs	r0, #13
    24fc:	4b14      	ldr	r3, [pc, #80]	; (2550 <nm_spi_init+0x110>)
    24fe:	4798      	blx	r3
			return 0;
    2500:	e7d0      	b.n	24a4 <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    2502:	4a18      	ldr	r2, [pc, #96]	; (2564 <nm_spi_init+0x124>)
    2504:	490d      	ldr	r1, [pc, #52]	; (253c <nm_spi_init+0xfc>)
    2506:	480e      	ldr	r0, [pc, #56]	; (2540 <nm_spi_init+0x100>)
    2508:	4b0e      	ldr	r3, [pc, #56]	; (2544 <nm_spi_init+0x104>)
    250a:	4798      	blx	r3
    250c:	4816      	ldr	r0, [pc, #88]	; (2568 <nm_spi_init+0x128>)
    250e:	4b0f      	ldr	r3, [pc, #60]	; (254c <nm_spi_init+0x10c>)
    2510:	4798      	blx	r3
    2512:	200d      	movs	r0, #13
    2514:	4b0e      	ldr	r3, [pc, #56]	; (2550 <nm_spi_init+0x110>)
    2516:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    2518:	2406      	movs	r4, #6
    251a:	4264      	negs	r4, r4
    251c:	e7c2      	b.n	24a4 <nm_spi_init+0x64>
    251e:	46c0      	nop			; (mov r8, r8)
    2520:	200000f0 	.word	0x200000f0
    2524:	0000e824 	.word	0x0000e824
    2528:	0000225d 	.word	0x0000225d
    252c:	0000214d 	.word	0x0000214d
    2530:	000023fd 	.word	0x000023fd
    2534:	00002429 	.word	0x00002429
    2538:	000004c7 	.word	0x000004c7
    253c:	00008a14 	.word	0x00008a14
    2540:	000082d0 	.word	0x000082d0
    2544:	00006f15 	.word	0x00006f15
    2548:	00008b20 	.word	0x00008b20
    254c:	00007031 	.word	0x00007031
    2550:	00006f49 	.word	0x00006f49
    2554:	000004ca 	.word	0x000004ca
    2558:	00008b70 	.word	0x00008b70
    255c:	000004d4 	.word	0x000004d4
    2560:	00008b9c 	.word	0x00008b9c
    2564:	000004de 	.word	0x000004de
    2568:	00008bd0 	.word	0x00008bd0

0000256c <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    256c:	b5f0      	push	{r4, r5, r6, r7, lr}
    256e:	46de      	mov	lr, fp
    2570:	4657      	mov	r7, sl
    2572:	464e      	mov	r6, r9
    2574:	4645      	mov	r5, r8
    2576:	b5e0      	push	{r5, r6, r7, lr}
    2578:	b087      	sub	sp, #28
    257a:	9002      	str	r0, [sp, #8]
    257c:	9103      	str	r1, [sp, #12]
    257e:	0016      	movs	r6, r2
    2580:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    2582:	2300      	movs	r3, #0
    2584:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    2586:	2400      	movs	r4, #0
    2588:	4b3e      	ldr	r3, [pc, #248]	; (2684 <nm_spi_read_block+0x118>)
    258a:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    258c:	46a9      	mov	r9, r5
    258e:	e037      	b.n	2600 <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    2590:	2301      	movs	r3, #1
    2592:	469b      	mov	fp, r3
		size = 2;
    2594:	3601      	adds	r6, #1
    2596:	e035      	b.n	2604 <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    2598:	20c8      	movs	r0, #200	; 0xc8
    259a:	4b3b      	ldr	r3, [pc, #236]	; (2688 <nm_spi_read_block+0x11c>)
    259c:	4798      	blx	r3
	if (result != N_OK) {
    259e:	2801      	cmp	r0, #1
    25a0:	d045      	beq.n	262e <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    25a2:	4a3a      	ldr	r2, [pc, #232]	; (268c <nm_spi_read_block+0x120>)
    25a4:	493a      	ldr	r1, [pc, #232]	; (2690 <nm_spi_read_block+0x124>)
    25a6:	483b      	ldr	r0, [pc, #236]	; (2694 <nm_spi_read_block+0x128>)
    25a8:	4f3b      	ldr	r7, [pc, #236]	; (2698 <nm_spi_read_block+0x12c>)
    25aa:	47b8      	blx	r7
    25ac:	9902      	ldr	r1, [sp, #8]
    25ae:	483b      	ldr	r0, [pc, #236]	; (269c <nm_spi_read_block+0x130>)
    25b0:	47b8      	blx	r7
    25b2:	200d      	movs	r0, #13
    25b4:	4b3a      	ldr	r3, [pc, #232]	; (26a0 <nm_spi_read_block+0x134>)
    25b6:	4798      	blx	r3
		nm_bsp_sleep(1);
    25b8:	2001      	movs	r0, #1
    25ba:	4f3a      	ldr	r7, [pc, #232]	; (26a4 <nm_spi_read_block+0x138>)
    25bc:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    25be:	9400      	str	r4, [sp, #0]
    25c0:	0023      	movs	r3, r4
    25c2:	0022      	movs	r2, r4
    25c4:	0021      	movs	r1, r4
    25c6:	20cf      	movs	r0, #207	; 0xcf
    25c8:	4d2e      	ldr	r5, [pc, #184]	; (2684 <nm_spi_read_block+0x118>)
    25ca:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    25cc:	20cf      	movs	r0, #207	; 0xcf
    25ce:	4b2e      	ldr	r3, [pc, #184]	; (2688 <nm_spi_read_block+0x11c>)
    25d0:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    25d2:	4a35      	ldr	r2, [pc, #212]	; (26a8 <nm_spi_read_block+0x13c>)
    25d4:	492e      	ldr	r1, [pc, #184]	; (2690 <nm_spi_read_block+0x124>)
    25d6:	482f      	ldr	r0, [pc, #188]	; (2694 <nm_spi_read_block+0x128>)
    25d8:	4b2f      	ldr	r3, [pc, #188]	; (2698 <nm_spi_read_block+0x12c>)
    25da:	469a      	mov	sl, r3
    25dc:	4798      	blx	r3
    25de:	0033      	movs	r3, r6
    25e0:	9a02      	ldr	r2, [sp, #8]
    25e2:	4649      	mov	r1, r9
    25e4:	4831      	ldr	r0, [pc, #196]	; (26ac <nm_spi_read_block+0x140>)
    25e6:	47d0      	blx	sl
    25e8:	200d      	movs	r0, #13
    25ea:	4b2d      	ldr	r3, [pc, #180]	; (26a0 <nm_spi_read_block+0x134>)
    25ec:	4798      	blx	r3
		nm_bsp_sleep(1);
    25ee:	2001      	movs	r0, #1
    25f0:	47b8      	blx	r7
    25f2:	2301      	movs	r3, #1
    25f4:	425b      	negs	r3, r3
    25f6:	469c      	mov	ip, r3
    25f8:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    25fa:	464b      	mov	r3, r9
    25fc:	2b00      	cmp	r3, #0
    25fe:	d038      	beq.n	2672 <nm_spi_read_block+0x106>
	if (size == 1)
    2600:	2e01      	cmp	r6, #1
    2602:	d0c5      	beq.n	2590 <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    2604:	9400      	str	r4, [sp, #0]
    2606:	0033      	movs	r3, r6
    2608:	0022      	movs	r2, r4
    260a:	9d02      	ldr	r5, [sp, #8]
    260c:	0029      	movs	r1, r5
    260e:	20c8      	movs	r0, #200	; 0xc8
    2610:	47c0      	blx	r8
	if (result != N_OK) {
    2612:	2801      	cmp	r0, #1
    2614:	d0c0      	beq.n	2598 <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    2616:	4a26      	ldr	r2, [pc, #152]	; (26b0 <nm_spi_read_block+0x144>)
    2618:	491d      	ldr	r1, [pc, #116]	; (2690 <nm_spi_read_block+0x124>)
    261a:	481e      	ldr	r0, [pc, #120]	; (2694 <nm_spi_read_block+0x128>)
    261c:	4f1e      	ldr	r7, [pc, #120]	; (2698 <nm_spi_read_block+0x12c>)
    261e:	47b8      	blx	r7
    2620:	0029      	movs	r1, r5
    2622:	4824      	ldr	r0, [pc, #144]	; (26b4 <nm_spi_read_block+0x148>)
    2624:	47b8      	blx	r7
    2626:	200d      	movs	r0, #13
    2628:	4b1d      	ldr	r3, [pc, #116]	; (26a0 <nm_spi_read_block+0x134>)
    262a:	4798      	blx	r3
    262c:	e7c4      	b.n	25b8 <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    262e:	465b      	mov	r3, fp
    2630:	2b00      	cmp	r3, #0
    2632:	d016      	beq.n	2662 <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    2634:	af05      	add	r7, sp, #20
    2636:	0022      	movs	r2, r4
    2638:	0031      	movs	r1, r6
    263a:	0038      	movs	r0, r7
    263c:	4b1e      	ldr	r3, [pc, #120]	; (26b8 <nm_spi_read_block+0x14c>)
    263e:	4798      	blx	r3
		buf[0] = tmp[0];
    2640:	783b      	ldrb	r3, [r7, #0]
    2642:	9a03      	ldr	r2, [sp, #12]
    2644:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    2646:	2801      	cmp	r0, #1
    2648:	d011      	beq.n	266e <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    264a:	4a1c      	ldr	r2, [pc, #112]	; (26bc <nm_spi_read_block+0x150>)
    264c:	4910      	ldr	r1, [pc, #64]	; (2690 <nm_spi_read_block+0x124>)
    264e:	4811      	ldr	r0, [pc, #68]	; (2694 <nm_spi_read_block+0x128>)
    2650:	4b11      	ldr	r3, [pc, #68]	; (2698 <nm_spi_read_block+0x12c>)
    2652:	4798      	blx	r3
    2654:	481a      	ldr	r0, [pc, #104]	; (26c0 <nm_spi_read_block+0x154>)
    2656:	4b1b      	ldr	r3, [pc, #108]	; (26c4 <nm_spi_read_block+0x158>)
    2658:	4798      	blx	r3
    265a:	200d      	movs	r0, #13
    265c:	4b10      	ldr	r3, [pc, #64]	; (26a0 <nm_spi_read_block+0x134>)
    265e:	4798      	blx	r3
    2660:	e7aa      	b.n	25b8 <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    2662:	0022      	movs	r2, r4
    2664:	0031      	movs	r1, r6
    2666:	9803      	ldr	r0, [sp, #12]
    2668:	4b13      	ldr	r3, [pc, #76]	; (26b8 <nm_spi_read_block+0x14c>)
    266a:	4798      	blx	r3
    266c:	e7eb      	b.n	2646 <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    266e:	2000      	movs	r0, #0
    2670:	e001      	b.n	2676 <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    2672:	2006      	movs	r0, #6
    2674:	4240      	negs	r0, r0

	return s8Ret;
}
    2676:	b007      	add	sp, #28
    2678:	bc3c      	pop	{r2, r3, r4, r5}
    267a:	4690      	mov	r8, r2
    267c:	4699      	mov	r9, r3
    267e:	46a2      	mov	sl, r4
    2680:	46ab      	mov	fp, r5
    2682:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2684:	00001d91 	.word	0x00001d91
    2688:	00001f31 	.word	0x00001f31
    268c:	00000463 	.word	0x00000463
    2690:	00008a08 	.word	0x00008a08
    2694:	000082d0 	.word	0x000082d0
    2698:	00006f15 	.word	0x00006f15
    269c:	00008c24 	.word	0x00008c24
    26a0:	00006f49 	.word	0x00006f49
    26a4:	000001e1 	.word	0x000001e1
    26a8:	00000484 	.word	0x00000484
    26ac:	00008c84 	.word	0x00008c84
    26b0:	0000045d 	.word	0x0000045d
    26b4:	00008bf4 	.word	0x00008bf4
    26b8:	00002005 	.word	0x00002005
    26bc:	00000473 	.word	0x00000473
    26c0:	00008c5c 	.word	0x00008c5c
    26c4:	00007031 	.word	0x00007031

000026c8 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    26c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    26ca:	46de      	mov	lr, fp
    26cc:	4647      	mov	r7, r8
    26ce:	b580      	push	{r7, lr}
    26d0:	b089      	sub	sp, #36	; 0x24
    26d2:	9004      	str	r0, [sp, #16]
    26d4:	468b      	mov	fp, r1
    26d6:	9203      	str	r2, [sp, #12]
    26d8:	260a      	movs	r6, #10
    26da:	2780      	movs	r7, #128	; 0x80
    26dc:	01bf      	lsls	r7, r7, #6
    26de:	466b      	mov	r3, sp
    26e0:	82df      	strh	r7, [r3, #22]
    26e2:	0035      	movs	r5, r6
    26e4:	e02d      	b.n	2742 <nm_spi_write_block+0x7a>
		size = 2;
    26e6:	3301      	adds	r3, #1
    26e8:	9303      	str	r3, [sp, #12]
    26ea:	e02d      	b.n	2748 <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    26ec:	4a83      	ldr	r2, [pc, #524]	; (28fc <nm_spi_write_block+0x234>)
    26ee:	4984      	ldr	r1, [pc, #528]	; (2900 <nm_spi_write_block+0x238>)
    26f0:	4884      	ldr	r0, [pc, #528]	; (2904 <nm_spi_write_block+0x23c>)
    26f2:	4c85      	ldr	r4, [pc, #532]	; (2908 <nm_spi_write_block+0x240>)
    26f4:	47a0      	blx	r4
    26f6:	0031      	movs	r1, r6
    26f8:	4884      	ldr	r0, [pc, #528]	; (290c <nm_spi_write_block+0x244>)
    26fa:	47a0      	blx	r4
    26fc:	200d      	movs	r0, #13
    26fe:	4b84      	ldr	r3, [pc, #528]	; (2910 <nm_spi_write_block+0x248>)
    2700:	4798      	blx	r3
		nm_bsp_sleep(1);
    2702:	2001      	movs	r0, #1
    2704:	4c83      	ldr	r4, [pc, #524]	; (2914 <nm_spi_write_block+0x24c>)
    2706:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2708:	2300      	movs	r3, #0
    270a:	9300      	str	r3, [sp, #0]
    270c:	2200      	movs	r2, #0
    270e:	2100      	movs	r1, #0
    2710:	20cf      	movs	r0, #207	; 0xcf
    2712:	4e81      	ldr	r6, [pc, #516]	; (2918 <nm_spi_write_block+0x250>)
    2714:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    2716:	20cf      	movs	r0, #207	; 0xcf
    2718:	4b80      	ldr	r3, [pc, #512]	; (291c <nm_spi_write_block+0x254>)
    271a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    271c:	4a80      	ldr	r2, [pc, #512]	; (2920 <nm_spi_write_block+0x258>)
    271e:	4978      	ldr	r1, [pc, #480]	; (2900 <nm_spi_write_block+0x238>)
    2720:	4878      	ldr	r0, [pc, #480]	; (2904 <nm_spi_write_block+0x23c>)
    2722:	4e79      	ldr	r6, [pc, #484]	; (2908 <nm_spi_write_block+0x240>)
    2724:	47b0      	blx	r6
    2726:	9b03      	ldr	r3, [sp, #12]
    2728:	9a04      	ldr	r2, [sp, #16]
    272a:	0029      	movs	r1, r5
    272c:	487d      	ldr	r0, [pc, #500]	; (2924 <nm_spi_write_block+0x25c>)
    272e:	47b0      	blx	r6
    2730:	200d      	movs	r0, #13
    2732:	4b77      	ldr	r3, [pc, #476]	; (2910 <nm_spi_write_block+0x248>)
    2734:	4798      	blx	r3
		nm_bsp_sleep(1);
    2736:	2001      	movs	r0, #1
    2738:	47a0      	blx	r4
    273a:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    273c:	2d00      	cmp	r5, #0
    273e:	d100      	bne.n	2742 <nm_spi_write_block+0x7a>
    2740:	e0d5      	b.n	28ee <nm_spi_write_block+0x226>
	if (size == 1)
    2742:	9b03      	ldr	r3, [sp, #12]
    2744:	2b01      	cmp	r3, #1
    2746:	d0ce      	beq.n	26e6 <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    2748:	2300      	movs	r3, #0
    274a:	9300      	str	r3, [sp, #0]
    274c:	9b03      	ldr	r3, [sp, #12]
    274e:	2200      	movs	r2, #0
    2750:	9e04      	ldr	r6, [sp, #16]
    2752:	0031      	movs	r1, r6
    2754:	20c7      	movs	r0, #199	; 0xc7
    2756:	4c70      	ldr	r4, [pc, #448]	; (2918 <nm_spi_write_block+0x250>)
    2758:	47a0      	blx	r4
	if (result != N_OK) {
    275a:	2801      	cmp	r0, #1
    275c:	d1c6      	bne.n	26ec <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    275e:	20c7      	movs	r0, #199	; 0xc7
    2760:	4b6e      	ldr	r3, [pc, #440]	; (291c <nm_spi_write_block+0x254>)
    2762:	4798      	blx	r3
	if (result != N_OK) {
    2764:	2801      	cmp	r0, #1
    2766:	d00c      	beq.n	2782 <nm_spi_write_block+0xba>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    2768:	22f4      	movs	r2, #244	; 0xf4
    276a:	0092      	lsls	r2, r2, #2
    276c:	4964      	ldr	r1, [pc, #400]	; (2900 <nm_spi_write_block+0x238>)
    276e:	4865      	ldr	r0, [pc, #404]	; (2904 <nm_spi_write_block+0x23c>)
    2770:	4c65      	ldr	r4, [pc, #404]	; (2908 <nm_spi_write_block+0x240>)
    2772:	47a0      	blx	r4
    2774:	9904      	ldr	r1, [sp, #16]
    2776:	486c      	ldr	r0, [pc, #432]	; (2928 <nm_spi_write_block+0x260>)
    2778:	47a0      	blx	r4
    277a:	200d      	movs	r0, #13
    277c:	4b64      	ldr	r3, [pc, #400]	; (2910 <nm_spi_write_block+0x248>)
    277e:	4798      	blx	r3
    2780:	e7bf      	b.n	2702 <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    2782:	2200      	movs	r2, #0
    2784:	ab07      	add	r3, sp, #28
    2786:	801a      	strh	r2, [r3, #0]
    2788:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    278a:	2600      	movs	r6, #0
				order = 0x1;
    278c:	46a8      	mov	r8, r5
    278e:	0035      	movs	r5, r6
    2790:	0026      	movs	r6, r4
    2792:	e021      	b.n	27d8 <nm_spi_write_block+0x110>
				order = 0x2;
    2794:	2300      	movs	r3, #0
    2796:	42b7      	cmp	r7, r6
    2798:	415b      	adcs	r3, r3
    279a:	3302      	adds	r3, #2
		cmd |= order;
    279c:	200b      	movs	r0, #11
    279e:	aa04      	add	r2, sp, #16
    27a0:	4694      	mov	ip, r2
    27a2:	4460      	add	r0, ip
    27a4:	2210      	movs	r2, #16
    27a6:	4252      	negs	r2, r2
    27a8:	4313      	orrs	r3, r2
    27aa:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    27ac:	2101      	movs	r1, #1
    27ae:	4b5f      	ldr	r3, [pc, #380]	; (292c <nm_spi_write_block+0x264>)
    27b0:	4798      	blx	r3
    27b2:	2800      	cmp	r0, #0
    27b4:	d11d      	bne.n	27f2 <nm_spi_write_block+0x12a>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    27b6:	465b      	mov	r3, fp
    27b8:	1958      	adds	r0, r3, r5
    27ba:	0021      	movs	r1, r4
    27bc:	4b5b      	ldr	r3, [pc, #364]	; (292c <nm_spi_write_block+0x264>)
    27be:	4798      	blx	r3
    27c0:	2800      	cmp	r0, #0
    27c2:	d130      	bne.n	2826 <nm_spi_write_block+0x15e>
		if (!gu8Crc_off) {
    27c4:	4b5a      	ldr	r3, [pc, #360]	; (2930 <nm_spi_write_block+0x268>)
    27c6:	781b      	ldrb	r3, [r3, #0]
    27c8:	2b00      	cmp	r3, #0
    27ca:	d039      	beq.n	2840 <nm_spi_write_block+0x178>
		ix += nbytes;
    27cc:	1965      	adds	r5, r4, r5
    27ce:	b22d      	sxth	r5, r5
		sz -= nbytes;
    27d0:	1b36      	subs	r6, r6, r4
    27d2:	b2b6      	uxth	r6, r6
	} while (sz);
    27d4:	2e00      	cmp	r6, #0
    27d6:	d053      	beq.n	2880 <nm_spi_write_block+0x1b8>
    27d8:	1c34      	adds	r4, r6, #0
    27da:	42be      	cmp	r6, r7
    27dc:	d901      	bls.n	27e2 <nm_spi_write_block+0x11a>
    27de:	466b      	mov	r3, sp
    27e0:	8adc      	ldrh	r4, [r3, #22]
    27e2:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    27e4:	2d00      	cmp	r5, #0
    27e6:	d1d5      	bne.n	2794 <nm_spi_write_block+0xcc>
				order = 0x3;
    27e8:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    27ea:	42be      	cmp	r6, r7
    27ec:	d9d6      	bls.n	279c <nm_spi_write_block+0xd4>
				order = 0x1;
    27ee:	3b02      	subs	r3, #2
    27f0:	e7d4      	b.n	279c <nm_spi_write_block+0xd4>
    27f2:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    27f4:	22d4      	movs	r2, #212	; 0xd4
    27f6:	0092      	lsls	r2, r2, #2
    27f8:	494e      	ldr	r1, [pc, #312]	; (2934 <nm_spi_write_block+0x26c>)
    27fa:	4842      	ldr	r0, [pc, #264]	; (2904 <nm_spi_write_block+0x23c>)
    27fc:	4b42      	ldr	r3, [pc, #264]	; (2908 <nm_spi_write_block+0x240>)
    27fe:	4798      	blx	r3
    2800:	484d      	ldr	r0, [pc, #308]	; (2938 <nm_spi_write_block+0x270>)
    2802:	4b4e      	ldr	r3, [pc, #312]	; (293c <nm_spi_write_block+0x274>)
    2804:	4798      	blx	r3
    2806:	200d      	movs	r0, #13
    2808:	4b41      	ldr	r3, [pc, #260]	; (2910 <nm_spi_write_block+0x248>)
    280a:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    280c:	22f8      	movs	r2, #248	; 0xf8
    280e:	0092      	lsls	r2, r2, #2
    2810:	493b      	ldr	r1, [pc, #236]	; (2900 <nm_spi_write_block+0x238>)
    2812:	483c      	ldr	r0, [pc, #240]	; (2904 <nm_spi_write_block+0x23c>)
    2814:	4b3c      	ldr	r3, [pc, #240]	; (2908 <nm_spi_write_block+0x240>)
    2816:	4798      	blx	r3
    2818:	4849      	ldr	r0, [pc, #292]	; (2940 <nm_spi_write_block+0x278>)
    281a:	4b48      	ldr	r3, [pc, #288]	; (293c <nm_spi_write_block+0x274>)
    281c:	4798      	blx	r3
    281e:	200d      	movs	r0, #13
    2820:	4b3b      	ldr	r3, [pc, #236]	; (2910 <nm_spi_write_block+0x248>)
    2822:	4798      	blx	r3
    2824:	e76d      	b.n	2702 <nm_spi_write_block+0x3a>
    2826:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    2828:	4a46      	ldr	r2, [pc, #280]	; (2944 <nm_spi_write_block+0x27c>)
    282a:	4942      	ldr	r1, [pc, #264]	; (2934 <nm_spi_write_block+0x26c>)
    282c:	4835      	ldr	r0, [pc, #212]	; (2904 <nm_spi_write_block+0x23c>)
    282e:	4b36      	ldr	r3, [pc, #216]	; (2908 <nm_spi_write_block+0x240>)
    2830:	4798      	blx	r3
    2832:	4845      	ldr	r0, [pc, #276]	; (2948 <nm_spi_write_block+0x280>)
    2834:	4b41      	ldr	r3, [pc, #260]	; (293c <nm_spi_write_block+0x274>)
    2836:	4798      	blx	r3
    2838:	200d      	movs	r0, #13
    283a:	4b35      	ldr	r3, [pc, #212]	; (2910 <nm_spi_write_block+0x248>)
    283c:	4798      	blx	r3
    283e:	e7e5      	b.n	280c <nm_spi_write_block+0x144>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    2840:	2102      	movs	r1, #2
    2842:	a807      	add	r0, sp, #28
    2844:	4b39      	ldr	r3, [pc, #228]	; (292c <nm_spi_write_block+0x264>)
    2846:	4798      	blx	r3
    2848:	2800      	cmp	r0, #0
    284a:	d0bf      	beq.n	27cc <nm_spi_write_block+0x104>
    284c:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    284e:	4a3f      	ldr	r2, [pc, #252]	; (294c <nm_spi_write_block+0x284>)
    2850:	4938      	ldr	r1, [pc, #224]	; (2934 <nm_spi_write_block+0x26c>)
    2852:	482c      	ldr	r0, [pc, #176]	; (2904 <nm_spi_write_block+0x23c>)
    2854:	4b2c      	ldr	r3, [pc, #176]	; (2908 <nm_spi_write_block+0x240>)
    2856:	4798      	blx	r3
    2858:	483d      	ldr	r0, [pc, #244]	; (2950 <nm_spi_write_block+0x288>)
    285a:	4b38      	ldr	r3, [pc, #224]	; (293c <nm_spi_write_block+0x274>)
    285c:	4798      	blx	r3
    285e:	200d      	movs	r0, #13
    2860:	4b2b      	ldr	r3, [pc, #172]	; (2910 <nm_spi_write_block+0x248>)
    2862:	4798      	blx	r3
    2864:	e7d2      	b.n	280c <nm_spi_write_block+0x144>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    2866:	223c      	movs	r2, #60	; 0x3c
    2868:	32ff      	adds	r2, #255	; 0xff
    286a:	493a      	ldr	r1, [pc, #232]	; (2954 <nm_spi_write_block+0x28c>)
    286c:	4825      	ldr	r0, [pc, #148]	; (2904 <nm_spi_write_block+0x23c>)
    286e:	4b26      	ldr	r3, [pc, #152]	; (2908 <nm_spi_write_block+0x240>)
    2870:	4798      	blx	r3
    2872:	4839      	ldr	r0, [pc, #228]	; (2958 <nm_spi_write_block+0x290>)
    2874:	4b31      	ldr	r3, [pc, #196]	; (293c <nm_spi_write_block+0x274>)
    2876:	4798      	blx	r3
    2878:	200d      	movs	r0, #13
    287a:	4b25      	ldr	r3, [pc, #148]	; (2910 <nm_spi_write_block+0x248>)
    287c:	4798      	blx	r3
    287e:	e027      	b.n	28d0 <nm_spi_write_block+0x208>
    2880:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    2882:	4b2b      	ldr	r3, [pc, #172]	; (2930 <nm_spi_write_block+0x268>)
    2884:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    2886:	1e63      	subs	r3, r4, #1
    2888:	419c      	sbcs	r4, r3
    288a:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    288c:	b2a1      	uxth	r1, r4
    288e:	a807      	add	r0, sp, #28
    2890:	4b32      	ldr	r3, [pc, #200]	; (295c <nm_spi_write_block+0x294>)
    2892:	4798      	blx	r3
    2894:	2800      	cmp	r0, #0
    2896:	d1e6      	bne.n	2866 <nm_spi_write_block+0x19e>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    2898:	ab08      	add	r3, sp, #32
    289a:	191b      	adds	r3, r3, r4
    289c:	3b05      	subs	r3, #5
    289e:	781b      	ldrb	r3, [r3, #0]
    28a0:	2b00      	cmp	r3, #0
    28a2:	d106      	bne.n	28b2 <nm_spi_write_block+0x1ea>
    28a4:	ab08      	add	r3, sp, #32
    28a6:	469c      	mov	ip, r3
    28a8:	4464      	add	r4, ip
    28aa:	3c06      	subs	r4, #6
    28ac:	7823      	ldrb	r3, [r4, #0]
    28ae:	2bc3      	cmp	r3, #195	; 0xc3
    28b0:	d01b      	beq.n	28ea <nm_spi_write_block+0x222>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    28b2:	22a1      	movs	r2, #161	; 0xa1
    28b4:	0052      	lsls	r2, r2, #1
    28b6:	4927      	ldr	r1, [pc, #156]	; (2954 <nm_spi_write_block+0x28c>)
    28b8:	4812      	ldr	r0, [pc, #72]	; (2904 <nm_spi_write_block+0x23c>)
    28ba:	4c13      	ldr	r4, [pc, #76]	; (2908 <nm_spi_write_block+0x240>)
    28bc:	47a0      	blx	r4
    28be:	a907      	add	r1, sp, #28
    28c0:	788b      	ldrb	r3, [r1, #2]
    28c2:	784a      	ldrb	r2, [r1, #1]
    28c4:	7809      	ldrb	r1, [r1, #0]
    28c6:	4826      	ldr	r0, [pc, #152]	; (2960 <nm_spi_write_block+0x298>)
    28c8:	47a0      	blx	r4
    28ca:	200d      	movs	r0, #13
    28cc:	4b10      	ldr	r3, [pc, #64]	; (2910 <nm_spi_write_block+0x248>)
    28ce:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    28d0:	22fa      	movs	r2, #250	; 0xfa
    28d2:	0092      	lsls	r2, r2, #2
    28d4:	490a      	ldr	r1, [pc, #40]	; (2900 <nm_spi_write_block+0x238>)
    28d6:	480b      	ldr	r0, [pc, #44]	; (2904 <nm_spi_write_block+0x23c>)
    28d8:	4b0b      	ldr	r3, [pc, #44]	; (2908 <nm_spi_write_block+0x240>)
    28da:	4798      	blx	r3
    28dc:	4818      	ldr	r0, [pc, #96]	; (2940 <nm_spi_write_block+0x278>)
    28de:	4b17      	ldr	r3, [pc, #92]	; (293c <nm_spi_write_block+0x274>)
    28e0:	4798      	blx	r3
    28e2:	200d      	movs	r0, #13
    28e4:	4b0a      	ldr	r3, [pc, #40]	; (2910 <nm_spi_write_block+0x248>)
    28e6:	4798      	blx	r3
    28e8:	e70b      	b.n	2702 <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    28ea:	2000      	movs	r0, #0
    28ec:	e001      	b.n	28f2 <nm_spi_write_block+0x22a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    28ee:	2006      	movs	r0, #6
    28f0:	4240      	negs	r0, r0

	return s8Ret;
}
    28f2:	b009      	add	sp, #36	; 0x24
    28f4:	bc0c      	pop	{r2, r3}
    28f6:	4690      	mov	r8, r2
    28f8:	469b      	mov	fp, r3
    28fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28fc:	000003ca 	.word	0x000003ca
    2900:	000089e8 	.word	0x000089e8
    2904:	000082d0 	.word	0x000082d0
    2908:	00006f15 	.word	0x00006f15
    290c:	00008ca0 	.word	0x00008ca0
    2910:	00006f49 	.word	0x00006f49
    2914:	000001e1 	.word	0x000001e1
    2918:	00001d91 	.word	0x00001d91
    291c:	00001f31 	.word	0x00001f31
    2920:	000003f2 	.word	0x000003f2
    2924:	00008c84 	.word	0x00008c84
    2928:	00008cd0 	.word	0x00008cd0
    292c:	00001d71 	.word	0x00001d71
    2930:	200000f0 	.word	0x200000f0
    2934:	000089c8 	.word	0x000089c8
    2938:	00008d08 	.word	0x00008d08
    293c:	00007031 	.word	0x00007031
    2940:	00008dfc 	.word	0x00008dfc
    2944:	00000359 	.word	0x00000359
    2948:	00008d40 	.word	0x00008d40
    294c:	00000363 	.word	0x00000363
    2950:	00008d74 	.word	0x00008d74
    2954:	0000899c 	.word	0x0000899c
    2958:	00008dac 	.word	0x00008dac
    295c:	00001f11 	.word	0x00001f11
    2960:	00008dcc 	.word	0x00008dcc

00002964 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    2964:	b5f0      	push	{r4, r5, r6, r7, lr}
    2966:	46de      	mov	lr, fp
    2968:	4657      	mov	r7, sl
    296a:	464e      	mov	r6, r9
    296c:	4645      	mov	r5, r8
    296e:	b5e0      	push	{r5, r6, r7, lr}
    2970:	b085      	sub	sp, #20
    2972:	9001      	str	r0, [sp, #4]
    2974:	000e      	movs	r6, r1
    2976:	9202      	str	r2, [sp, #8]
    2978:	001d      	movs	r5, r3
    297a:	ab0e      	add	r3, sp, #56	; 0x38
    297c:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    297e:	2c00      	cmp	r4, #0
    2980:	d064      	beq.n	2a4c <Socket_ReadSocketData+0xe8>
    2982:	0103      	lsls	r3, r0, #4
    2984:	4935      	ldr	r1, [pc, #212]	; (2a5c <Socket_ReadSocketData+0xf8>)
    2986:	585b      	ldr	r3, [r3, r1]
    2988:	2b00      	cmp	r3, #0
    298a:	d05f      	beq.n	2a4c <Socket_ReadSocketData+0xe8>
    298c:	0101      	lsls	r1, r0, #4
    298e:	4b33      	ldr	r3, [pc, #204]	; (2a5c <Socket_ReadSocketData+0xf8>)
    2990:	185b      	adds	r3, r3, r1
    2992:	889b      	ldrh	r3, [r3, #4]
    2994:	b29b      	uxth	r3, r3
    2996:	2b00      	cmp	r3, #0
    2998:	d058      	beq.n	2a4c <Socket_ReadSocketData+0xe8>
    299a:	4b30      	ldr	r3, [pc, #192]	; (2a5c <Socket_ReadSocketData+0xf8>)
    299c:	185b      	adds	r3, r3, r1
    299e:	7a9b      	ldrb	r3, [r3, #10]
    29a0:	2b01      	cmp	r3, #1
    29a2:	d153      	bne.n	2a4c <Socket_ReadSocketData+0xe8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    29a4:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    29a6:	4b2d      	ldr	r3, [pc, #180]	; (2a5c <Socket_ReadSocketData+0xf8>)
    29a8:	469b      	mov	fp, r3
    29aa:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    29ac:	465b      	mov	r3, fp
    29ae:	220a      	movs	r2, #10
    29b0:	4690      	mov	r8, r2
    29b2:	44d8      	add	r8, fp
    29b4:	468a      	mov	sl, r1
    29b6:	9500      	str	r5, [sp, #0]
    29b8:	9303      	str	r3, [sp, #12]
    29ba:	e015      	b.n	29e8 <Socket_ReadSocketData+0x84>
    29bc:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    29be:	2301      	movs	r3, #1
    29c0:	e01c      	b.n	29fc <Socket_ReadSocketData+0x98>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    29c2:	3301      	adds	r3, #1
    29c4:	2200      	movs	r2, #0
    29c6:	2100      	movs	r1, #0
    29c8:	2000      	movs	r0, #0
    29ca:	4c25      	ldr	r4, [pc, #148]	; (2a60 <Socket_ReadSocketData+0xfc>)
    29cc:	47a0      	blx	r4
    29ce:	e03d      	b.n	2a4c <Socket_ReadSocketData+0xe8>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    29d0:	4824      	ldr	r0, [pc, #144]	; (2a64 <Socket_ReadSocketData+0x100>)
    29d2:	4d25      	ldr	r5, [pc, #148]	; (2a68 <Socket_ReadSocketData+0x104>)
    29d4:	47a8      	blx	r5
    29d6:	0021      	movs	r1, r4
    29d8:	4824      	ldr	r0, [pc, #144]	; (2a6c <Socket_ReadSocketData+0x108>)
    29da:	47a8      	blx	r5
    29dc:	200d      	movs	r0, #13
    29de:	4b24      	ldr	r3, [pc, #144]	; (2a70 <Socket_ReadSocketData+0x10c>)
    29e0:	4798      	blx	r3
				break;
    29e2:	e033      	b.n	2a4c <Socket_ReadSocketData+0xe8>
			}
		}while(u16ReadCount != 0);
    29e4:	2c00      	cmp	r4, #0
    29e6:	d031      	beq.n	2a4c <Socket_ReadSocketData+0xe8>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    29e8:	465b      	mov	r3, fp
    29ea:	889b      	ldrh	r3, [r3, #4]
    29ec:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    29ee:	b21b      	sxth	r3, r3
    29f0:	2b00      	cmp	r3, #0
    29f2:	dde3      	ble.n	29bc <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    29f4:	9b03      	ldr	r3, [sp, #12]
    29f6:	889d      	ldrh	r5, [r3, #4]
    29f8:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    29fa:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    29fc:	4a17      	ldr	r2, [pc, #92]	; (2a5c <Socket_ReadSocketData+0xf8>)
    29fe:	4651      	mov	r1, sl
    2a00:	5889      	ldr	r1, [r1, r2]
    2a02:	002a      	movs	r2, r5
    2a04:	9800      	ldr	r0, [sp, #0]
    2a06:	4f16      	ldr	r7, [pc, #88]	; (2a60 <Socket_ReadSocketData+0xfc>)
    2a08:	47b8      	blx	r7
    2a0a:	2800      	cmp	r0, #0
    2a0c:	d1e0      	bne.n	29d0 <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    2a0e:	4b13      	ldr	r3, [pc, #76]	; (2a5c <Socket_ReadSocketData+0xf8>)
    2a10:	4652      	mov	r2, sl
    2a12:	58d3      	ldr	r3, [r2, r3]
    2a14:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    2a16:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    2a18:	88f3      	ldrh	r3, [r6, #6]
    2a1a:	1b5b      	subs	r3, r3, r5
    2a1c:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    2a1e:	4b15      	ldr	r3, [pc, #84]	; (2a74 <Socket_ReadSocketData+0x110>)
    2a20:	681b      	ldr	r3, [r3, #0]
    2a22:	2b00      	cmp	r3, #0
    2a24:	d005      	beq.n	2a32 <Socket_ReadSocketData+0xce>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    2a26:	4b13      	ldr	r3, [pc, #76]	; (2a74 <Socket_ReadSocketData+0x110>)
    2a28:	681b      	ldr	r3, [r3, #0]
    2a2a:	0032      	movs	r2, r6
    2a2c:	9902      	ldr	r1, [sp, #8]
    2a2e:	9801      	ldr	r0, [sp, #4]
    2a30:	4798      	blx	r3
				u16ReadCount -= u16Read;
    2a32:	1b64      	subs	r4, r4, r5
    2a34:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    2a36:	9b00      	ldr	r3, [sp, #0]
    2a38:	469c      	mov	ip, r3
    2a3a:	44ac      	add	ip, r5
    2a3c:	4663      	mov	r3, ip
    2a3e:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    2a40:	4643      	mov	r3, r8
    2a42:	781b      	ldrb	r3, [r3, #0]
    2a44:	2b00      	cmp	r3, #0
    2a46:	d1cd      	bne.n	29e4 <Socket_ReadSocketData+0x80>
    2a48:	2c00      	cmp	r4, #0
    2a4a:	d1ba      	bne.n	29c2 <Socket_ReadSocketData+0x5e>
	}
}
    2a4c:	b005      	add	sp, #20
    2a4e:	bc3c      	pop	{r2, r3, r4, r5}
    2a50:	4690      	mov	r8, r2
    2a52:	4699      	mov	r9, r3
    2a54:	46a2      	mov	sl, r4
    2a56:	46ab      	mov	fp, r5
    2a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a5a:	46c0      	nop			; (mov r8, r8)
    2a5c:	200002fc 	.word	0x200002fc
    2a60:	00000d05 	.word	0x00000d05
    2a64:	00008600 	.word	0x00008600
    2a68:	00006f15 	.word	0x00006f15
    2a6c:	00009064 	.word	0x00009064
    2a70:	00006f49 	.word	0x00006f49
    2a74:	200003ac 	.word	0x200003ac

00002a78 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    2a78:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a7a:	46d6      	mov	lr, sl
    2a7c:	464f      	mov	r7, r9
    2a7e:	4646      	mov	r6, r8
    2a80:	b5c0      	push	{r6, r7, lr}
    2a82:	b09a      	sub	sp, #104	; 0x68
    2a84:	000d      	movs	r5, r1
    2a86:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    2a88:	2841      	cmp	r0, #65	; 0x41
    2a8a:	d039      	beq.n	2b00 <m2m_ip_cb+0x88>
    2a8c:	2854      	cmp	r0, #84	; 0x54
    2a8e:	d037      	beq.n	2b00 <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    2a90:	2842      	cmp	r0, #66	; 0x42
    2a92:	d053      	beq.n	2b3c <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    2a94:	2843      	cmp	r0, #67	; 0x43
    2a96:	d06a      	beq.n	2b6e <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    2a98:	2844      	cmp	r0, #68	; 0x44
    2a9a:	d100      	bne.n	2a9e <m2m_ip_cb+0x26>
    2a9c:	e0af      	b.n	2bfe <m2m_ip_cb+0x186>
    2a9e:	284b      	cmp	r0, #75	; 0x4b
    2aa0:	d100      	bne.n	2aa4 <m2m_ip_cb+0x2c>
    2aa2:	e0ac      	b.n	2bfe <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    2aa4:	284a      	cmp	r0, #74	; 0x4a
    2aa6:	d100      	bne.n	2aaa <m2m_ip_cb+0x32>
    2aa8:	e0cf      	b.n	2c4a <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    2aaa:	2846      	cmp	r0, #70	; 0x46
    2aac:	d100      	bne.n	2ab0 <m2m_ip_cb+0x38>
    2aae:	e0e5      	b.n	2c7c <m2m_ip_cb+0x204>
    2ab0:	2848      	cmp	r0, #72	; 0x48
    2ab2:	d100      	bne.n	2ab6 <m2m_ip_cb+0x3e>
    2ab4:	e10e      	b.n	2cd4 <m2m_ip_cb+0x25c>
    2ab6:	284d      	cmp	r0, #77	; 0x4d
    2ab8:	d100      	bne.n	2abc <m2m_ip_cb+0x44>
    2aba:	e0dc      	b.n	2c76 <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    2abc:	2845      	cmp	r0, #69	; 0x45
    2abe:	d100      	bne.n	2ac2 <m2m_ip_cb+0x4a>
    2ac0:	e12c      	b.n	2d1c <m2m_ip_cb+0x2a4>
    2ac2:	2847      	cmp	r0, #71	; 0x47
    2ac4:	d100      	bne.n	2ac8 <m2m_ip_cb+0x50>
    2ac6:	e14d      	b.n	2d64 <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    2ac8:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    2aca:	284c      	cmp	r0, #76	; 0x4c
    2acc:	d100      	bne.n	2ad0 <m2m_ip_cb+0x58>
    2ace:	e126      	b.n	2d1e <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    2ad0:	2852      	cmp	r0, #82	; 0x52
    2ad2:	d12d      	bne.n	2b30 <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    2ad4:	2301      	movs	r3, #1
    2ad6:	2214      	movs	r2, #20
    2ad8:	a909      	add	r1, sp, #36	; 0x24
    2ada:	0020      	movs	r0, r4
    2adc:	4ca2      	ldr	r4, [pc, #648]	; (2d68 <m2m_ip_cb+0x2f0>)
    2ade:	47a0      	blx	r4
    2ae0:	2800      	cmp	r0, #0
    2ae2:	d125      	bne.n	2b30 <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    2ae4:	4ba1      	ldr	r3, [pc, #644]	; (2d6c <m2m_ip_cb+0x2f4>)
    2ae6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2ae8:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    2aea:	681b      	ldr	r3, [r3, #0]
    2aec:	2b00      	cmp	r3, #0
    2aee:	d01f      	beq.n	2b30 <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    2af0:	4b9e      	ldr	r3, [pc, #632]	; (2d6c <m2m_ip_cb+0x2f4>)
    2af2:	681c      	ldr	r4, [r3, #0]
    2af4:	ab09      	add	r3, sp, #36	; 0x24
    2af6:	7c1a      	ldrb	r2, [r3, #16]
    2af8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2afa:	9809      	ldr	r0, [sp, #36]	; 0x24
    2afc:	47a0      	blx	r4
			}
		}
	}
}
    2afe:	e017      	b.n	2b30 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    2b00:	2300      	movs	r3, #0
    2b02:	2204      	movs	r2, #4
    2b04:	a909      	add	r1, sp, #36	; 0x24
    2b06:	0020      	movs	r0, r4
    2b08:	4c97      	ldr	r4, [pc, #604]	; (2d68 <m2m_ip_cb+0x2f0>)
    2b0a:	47a0      	blx	r4
    2b0c:	2800      	cmp	r0, #0
    2b0e:	d10f      	bne.n	2b30 <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    2b10:	ab09      	add	r3, sp, #36	; 0x24
    2b12:	785a      	ldrb	r2, [r3, #1]
    2b14:	ab05      	add	r3, sp, #20
    2b16:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    2b18:	4b95      	ldr	r3, [pc, #596]	; (2d70 <m2m_ip_cb+0x2f8>)
    2b1a:	681b      	ldr	r3, [r3, #0]
    2b1c:	2b00      	cmp	r3, #0
    2b1e:	d007      	beq.n	2b30 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    2b20:	4b93      	ldr	r3, [pc, #588]	; (2d70 <m2m_ip_cb+0x2f8>)
    2b22:	681b      	ldr	r3, [r3, #0]
    2b24:	aa09      	add	r2, sp, #36	; 0x24
    2b26:	2000      	movs	r0, #0
    2b28:	5610      	ldrsb	r0, [r2, r0]
    2b2a:	aa05      	add	r2, sp, #20
    2b2c:	2101      	movs	r1, #1
    2b2e:	4798      	blx	r3
}
    2b30:	b01a      	add	sp, #104	; 0x68
    2b32:	bc1c      	pop	{r2, r3, r4}
    2b34:	4690      	mov	r8, r2
    2b36:	4699      	mov	r9, r3
    2b38:	46a2      	mov	sl, r4
    2b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    2b3c:	2300      	movs	r3, #0
    2b3e:	2204      	movs	r2, #4
    2b40:	a909      	add	r1, sp, #36	; 0x24
    2b42:	0020      	movs	r0, r4
    2b44:	4c88      	ldr	r4, [pc, #544]	; (2d68 <m2m_ip_cb+0x2f0>)
    2b46:	47a0      	blx	r4
    2b48:	2800      	cmp	r0, #0
    2b4a:	d1f1      	bne.n	2b30 <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    2b4c:	ab09      	add	r3, sp, #36	; 0x24
    2b4e:	785a      	ldrb	r2, [r3, #1]
    2b50:	ab05      	add	r3, sp, #20
    2b52:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    2b54:	4b86      	ldr	r3, [pc, #536]	; (2d70 <m2m_ip_cb+0x2f8>)
    2b56:	681b      	ldr	r3, [r3, #0]
    2b58:	2b00      	cmp	r3, #0
    2b5a:	d0e9      	beq.n	2b30 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    2b5c:	4b84      	ldr	r3, [pc, #528]	; (2d70 <m2m_ip_cb+0x2f8>)
    2b5e:	681b      	ldr	r3, [r3, #0]
    2b60:	aa09      	add	r2, sp, #36	; 0x24
    2b62:	2000      	movs	r0, #0
    2b64:	5610      	ldrsb	r0, [r2, r0]
    2b66:	aa05      	add	r2, sp, #20
    2b68:	2102      	movs	r1, #2
    2b6a:	4798      	blx	r3
    2b6c:	e7e0      	b.n	2b30 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    2b6e:	2300      	movs	r3, #0
    2b70:	220c      	movs	r2, #12
    2b72:	a905      	add	r1, sp, #20
    2b74:	0020      	movs	r0, r4
    2b76:	4c7c      	ldr	r4, [pc, #496]	; (2d68 <m2m_ip_cb+0x2f0>)
    2b78:	47a0      	blx	r4
    2b7a:	2800      	cmp	r0, #0
    2b7c:	d1d8      	bne.n	2b30 <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    2b7e:	ab05      	add	r3, sp, #20
    2b80:	2209      	movs	r2, #9
    2b82:	569a      	ldrsb	r2, [r3, r2]
    2b84:	2a00      	cmp	r2, #0
    2b86:	db24      	blt.n	2bd2 <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    2b88:	0018      	movs	r0, r3
    2b8a:	2108      	movs	r1, #8
    2b8c:	5659      	ldrsb	r1, [r3, r1]
    2b8e:	4b79      	ldr	r3, [pc, #484]	; (2d74 <m2m_ip_cb+0x2fc>)
    2b90:	0109      	lsls	r1, r1, #4
    2b92:	1859      	adds	r1, r3, r1
    2b94:	7ac9      	ldrb	r1, [r1, #11]
    2b96:	b2c9      	uxtb	r1, r1
    2b98:	0114      	lsls	r4, r2, #4
    2b9a:	191b      	adds	r3, r3, r4
    2b9c:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    2b9e:	2101      	movs	r1, #1
    2ba0:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    2ba2:	8941      	ldrh	r1, [r0, #10]
    2ba4:	3908      	subs	r1, #8
    2ba6:	b289      	uxth	r1, r1
    2ba8:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    2baa:	4973      	ldr	r1, [pc, #460]	; (2d78 <m2m_ip_cb+0x300>)
    2bac:	880b      	ldrh	r3, [r1, #0]
    2bae:	3301      	adds	r3, #1
    2bb0:	b29b      	uxth	r3, r3
    2bb2:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    2bb4:	880b      	ldrh	r3, [r1, #0]
    2bb6:	b29b      	uxth	r3, r3
    2bb8:	2b00      	cmp	r3, #0
    2bba:	d103      	bne.n	2bc4 <m2m_ip_cb+0x14c>
					++gu16SessionID;
    2bbc:	880b      	ldrh	r3, [r1, #0]
    2bbe:	3301      	adds	r3, #1
    2bc0:	b29b      	uxth	r3, r3
    2bc2:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    2bc4:	4b6c      	ldr	r3, [pc, #432]	; (2d78 <m2m_ip_cb+0x300>)
    2bc6:	8819      	ldrh	r1, [r3, #0]
    2bc8:	b289      	uxth	r1, r1
    2bca:	0110      	lsls	r0, r2, #4
    2bcc:	4b69      	ldr	r3, [pc, #420]	; (2d74 <m2m_ip_cb+0x2fc>)
    2bce:	181b      	adds	r3, r3, r0
    2bd0:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    2bd2:	ab09      	add	r3, sp, #36	; 0x24
    2bd4:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    2bd6:	2202      	movs	r2, #2
    2bd8:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    2bda:	aa05      	add	r2, sp, #20
    2bdc:	8851      	ldrh	r1, [r2, #2]
    2bde:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    2be0:	9a06      	ldr	r2, [sp, #24]
    2be2:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    2be4:	4b62      	ldr	r3, [pc, #392]	; (2d70 <m2m_ip_cb+0x2f8>)
    2be6:	681b      	ldr	r3, [r3, #0]
    2be8:	2b00      	cmp	r3, #0
    2bea:	d0a1      	beq.n	2b30 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    2bec:	4b60      	ldr	r3, [pc, #384]	; (2d70 <m2m_ip_cb+0x2f8>)
    2bee:	681b      	ldr	r3, [r3, #0]
    2bf0:	aa05      	add	r2, sp, #20
    2bf2:	2008      	movs	r0, #8
    2bf4:	5610      	ldrsb	r0, [r2, r0]
    2bf6:	aa09      	add	r2, sp, #36	; 0x24
    2bf8:	2104      	movs	r1, #4
    2bfa:	4798      	blx	r3
    2bfc:	e798      	b.n	2b30 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    2bfe:	2300      	movs	r3, #0
    2c00:	2204      	movs	r2, #4
    2c02:	a909      	add	r1, sp, #36	; 0x24
    2c04:	0020      	movs	r0, r4
    2c06:	4c58      	ldr	r4, [pc, #352]	; (2d68 <m2m_ip_cb+0x2f0>)
    2c08:	47a0      	blx	r4
    2c0a:	2800      	cmp	r0, #0
    2c0c:	d000      	beq.n	2c10 <m2m_ip_cb+0x198>
    2c0e:	e78f      	b.n	2b30 <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    2c10:	ab09      	add	r3, sp, #36	; 0x24
    2c12:	2000      	movs	r0, #0
    2c14:	5618      	ldrsb	r0, [r3, r0]
    2c16:	aa05      	add	r2, sp, #20
    2c18:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    2c1a:	785b      	ldrb	r3, [r3, #1]
    2c1c:	b25b      	sxtb	r3, r3
    2c1e:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    2c20:	2b00      	cmp	r3, #0
    2c22:	d107      	bne.n	2c34 <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    2c24:	ab09      	add	r3, sp, #36	; 0x24
    2c26:	885b      	ldrh	r3, [r3, #2]
    2c28:	3b08      	subs	r3, #8
    2c2a:	b29b      	uxth	r3, r3
    2c2c:	0101      	lsls	r1, r0, #4
    2c2e:	4a51      	ldr	r2, [pc, #324]	; (2d74 <m2m_ip_cb+0x2fc>)
    2c30:	1852      	adds	r2, r2, r1
    2c32:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    2c34:	4b4e      	ldr	r3, [pc, #312]	; (2d70 <m2m_ip_cb+0x2f8>)
    2c36:	681b      	ldr	r3, [r3, #0]
    2c38:	2b00      	cmp	r3, #0
    2c3a:	d100      	bne.n	2c3e <m2m_ip_cb+0x1c6>
    2c3c:	e778      	b.n	2b30 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    2c3e:	4b4c      	ldr	r3, [pc, #304]	; (2d70 <m2m_ip_cb+0x2f8>)
    2c40:	681b      	ldr	r3, [r3, #0]
    2c42:	aa05      	add	r2, sp, #20
    2c44:	2105      	movs	r1, #5
    2c46:	4798      	blx	r3
	{
    2c48:	e772      	b.n	2b30 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    2c4a:	2300      	movs	r3, #0
    2c4c:	2244      	movs	r2, #68	; 0x44
    2c4e:	a909      	add	r1, sp, #36	; 0x24
    2c50:	0020      	movs	r0, r4
    2c52:	4c45      	ldr	r4, [pc, #276]	; (2d68 <m2m_ip_cb+0x2f0>)
    2c54:	47a0      	blx	r4
    2c56:	2800      	cmp	r0, #0
    2c58:	d000      	beq.n	2c5c <m2m_ip_cb+0x1e4>
    2c5a:	e769      	b.n	2b30 <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    2c5c:	4b47      	ldr	r3, [pc, #284]	; (2d7c <m2m_ip_cb+0x304>)
    2c5e:	681b      	ldr	r3, [r3, #0]
    2c60:	2b00      	cmp	r3, #0
    2c62:	d100      	bne.n	2c66 <m2m_ip_cb+0x1ee>
    2c64:	e764      	b.n	2b30 <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    2c66:	4b45      	ldr	r3, [pc, #276]	; (2d7c <m2m_ip_cb+0x304>)
    2c68:	681b      	ldr	r3, [r3, #0]
    2c6a:	9a19      	ldr	r2, [sp, #100]	; 0x64
    2c6c:	9203      	str	r2, [sp, #12]
    2c6e:	0011      	movs	r1, r2
    2c70:	a809      	add	r0, sp, #36	; 0x24
    2c72:	4798      	blx	r3
    2c74:	e75c      	b.n	2b30 <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    2c76:	2306      	movs	r3, #6
    2c78:	469a      	mov	sl, r3
    2c7a:	e001      	b.n	2c80 <m2m_ip_cb+0x208>
    2c7c:	2306      	movs	r3, #6
    2c7e:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    2c80:	2300      	movs	r3, #0
    2c82:	2210      	movs	r2, #16
    2c84:	a905      	add	r1, sp, #20
    2c86:	0020      	movs	r0, r4
    2c88:	4f37      	ldr	r7, [pc, #220]	; (2d68 <m2m_ip_cb+0x2f0>)
    2c8a:	47b8      	blx	r7
    2c8c:	2800      	cmp	r0, #0
    2c8e:	d000      	beq.n	2c92 <m2m_ip_cb+0x21a>
    2c90:	e74e      	b.n	2b30 <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    2c92:	aa05      	add	r2, sp, #20
    2c94:	200c      	movs	r0, #12
    2c96:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    2c98:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    2c9a:	0107      	lsls	r7, r0, #4
    2c9c:	4935      	ldr	r1, [pc, #212]	; (2d74 <m2m_ip_cb+0x2fc>)
    2c9e:	19c9      	adds	r1, r1, r7
    2ca0:	2700      	movs	r7, #0
    2ca2:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    2ca4:	2608      	movs	r6, #8
    2ca6:	5f97      	ldrsh	r7, [r2, r6]
    2ca8:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    2caa:	8957      	ldrh	r7, [r2, #10]
    2cac:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    2cae:	af09      	add	r7, sp, #36	; 0x24
    2cb0:	8856      	ldrh	r6, [r2, #2]
    2cb2:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    2cb4:	9a06      	ldr	r2, [sp, #24]
    2cb6:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    2cb8:	88ca      	ldrh	r2, [r1, #6]
    2cba:	b292      	uxth	r2, r2
    2cbc:	4293      	cmp	r3, r2
    2cbe:	d00c      	beq.n	2cda <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    2cc0:	2d10      	cmp	r5, #16
    2cc2:	d800      	bhi.n	2cc6 <m2m_ip_cb+0x24e>
    2cc4:	e734      	b.n	2b30 <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    2cc6:	2301      	movs	r3, #1
    2cc8:	2200      	movs	r2, #0
    2cca:	2100      	movs	r1, #0
    2ccc:	2000      	movs	r0, #0
    2cce:	4c26      	ldr	r4, [pc, #152]	; (2d68 <m2m_ip_cb+0x2f0>)
    2cd0:	47a0      	blx	r4
	{
    2cd2:	e72d      	b.n	2b30 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    2cd4:	2309      	movs	r3, #9
    2cd6:	469a      	mov	sl, r3
    2cd8:	e7d2      	b.n	2c80 <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    2cda:	4643      	mov	r3, r8
    2cdc:	2b00      	cmp	r3, #0
    2cde:	dd01      	ble.n	2ce4 <m2m_ip_cb+0x26c>
    2ce0:	45a8      	cmp	r8, r5
    2ce2:	db0f      	blt.n	2d04 <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    2ce4:	ab09      	add	r3, sp, #36	; 0x24
    2ce6:	4642      	mov	r2, r8
    2ce8:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    2cea:	2300      	movs	r3, #0
    2cec:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    2cee:	4b20      	ldr	r3, [pc, #128]	; (2d70 <m2m_ip_cb+0x2f8>)
    2cf0:	681b      	ldr	r3, [r3, #0]
    2cf2:	2b00      	cmp	r3, #0
    2cf4:	d100      	bne.n	2cf8 <m2m_ip_cb+0x280>
    2cf6:	e71b      	b.n	2b30 <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    2cf8:	4b1d      	ldr	r3, [pc, #116]	; (2d70 <m2m_ip_cb+0x2f8>)
    2cfa:	681b      	ldr	r3, [r3, #0]
    2cfc:	aa09      	add	r2, sp, #36	; 0x24
    2cfe:	4651      	mov	r1, sl
    2d00:	4798      	blx	r3
    2d02:	e715      	b.n	2b30 <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    2d04:	0023      	movs	r3, r4
    2d06:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    2d08:	4642      	mov	r2, r8
    2d0a:	4669      	mov	r1, sp
    2d0c:	818a      	strh	r2, [r1, #12]
    2d0e:	898a      	ldrh	r2, [r1, #12]
    2d10:	9200      	str	r2, [sp, #0]
    2d12:	4652      	mov	r2, sl
    2d14:	0039      	movs	r1, r7
    2d16:	4c1a      	ldr	r4, [pc, #104]	; (2d80 <m2m_ip_cb+0x308>)
    2d18:	47a0      	blx	r4
    2d1a:	e709      	b.n	2b30 <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    2d1c:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    2d1e:	2300      	movs	r3, #0
    2d20:	2208      	movs	r2, #8
    2d22:	a909      	add	r1, sp, #36	; 0x24
    2d24:	0020      	movs	r0, r4
    2d26:	4c10      	ldr	r4, [pc, #64]	; (2d68 <m2m_ip_cb+0x2f0>)
    2d28:	47a0      	blx	r4
    2d2a:	2800      	cmp	r0, #0
    2d2c:	d000      	beq.n	2d30 <m2m_ip_cb+0x2b8>
    2d2e:	e6ff      	b.n	2b30 <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    2d30:	ab09      	add	r3, sp, #36	; 0x24
    2d32:	2000      	movs	r0, #0
    2d34:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    2d36:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    2d38:	8859      	ldrh	r1, [r3, #2]
    2d3a:	ab05      	add	r3, sp, #20
    2d3c:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    2d3e:	0101      	lsls	r1, r0, #4
    2d40:	4b0c      	ldr	r3, [pc, #48]	; (2d74 <m2m_ip_cb+0x2fc>)
    2d42:	185b      	adds	r3, r3, r1
    2d44:	88db      	ldrh	r3, [r3, #6]
    2d46:	b29b      	uxth	r3, r3
    2d48:	429a      	cmp	r2, r3
    2d4a:	d000      	beq.n	2d4e <m2m_ip_cb+0x2d6>
    2d4c:	e6f0      	b.n	2b30 <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    2d4e:	4b08      	ldr	r3, [pc, #32]	; (2d70 <m2m_ip_cb+0x2f8>)
    2d50:	681b      	ldr	r3, [r3, #0]
    2d52:	2b00      	cmp	r3, #0
    2d54:	d100      	bne.n	2d58 <m2m_ip_cb+0x2e0>
    2d56:	e6eb      	b.n	2b30 <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    2d58:	4b05      	ldr	r3, [pc, #20]	; (2d70 <m2m_ip_cb+0x2f8>)
    2d5a:	681b      	ldr	r3, [r3, #0]
    2d5c:	aa05      	add	r2, sp, #20
    2d5e:	0029      	movs	r1, r5
    2d60:	4798      	blx	r3
	{
    2d62:	e6e5      	b.n	2b30 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    2d64:	2508      	movs	r5, #8
    2d66:	e7da      	b.n	2d1e <m2m_ip_cb+0x2a6>
    2d68:	00000d05 	.word	0x00000d05
    2d6c:	200003b0 	.word	0x200003b0
    2d70:	200003ac 	.word	0x200003ac
    2d74:	200002fc 	.word	0x200002fc
    2d78:	200000f2 	.word	0x200000f2
    2d7c:	200003b4 	.word	0x200003b4
    2d80:	00002965 	.word	0x00002965

00002d84 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    2d84:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    2d86:	4b0a      	ldr	r3, [pc, #40]	; (2db0 <socketInit+0x2c>)
    2d88:	781b      	ldrb	r3, [r3, #0]
    2d8a:	2b00      	cmp	r3, #0
    2d8c:	d000      	beq.n	2d90 <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    2d8e:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    2d90:	22b0      	movs	r2, #176	; 0xb0
    2d92:	2100      	movs	r1, #0
    2d94:	4807      	ldr	r0, [pc, #28]	; (2db4 <socketInit+0x30>)
    2d96:	4b08      	ldr	r3, [pc, #32]	; (2db8 <socketInit+0x34>)
    2d98:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    2d9a:	4908      	ldr	r1, [pc, #32]	; (2dbc <socketInit+0x38>)
    2d9c:	2002      	movs	r0, #2
    2d9e:	4b08      	ldr	r3, [pc, #32]	; (2dc0 <socketInit+0x3c>)
    2da0:	4798      	blx	r3
		gbSocketInit	= 1;
    2da2:	2201      	movs	r2, #1
    2da4:	4b02      	ldr	r3, [pc, #8]	; (2db0 <socketInit+0x2c>)
    2da6:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    2da8:	2200      	movs	r2, #0
    2daa:	4b06      	ldr	r3, [pc, #24]	; (2dc4 <socketInit+0x40>)
    2dac:	801a      	strh	r2, [r3, #0]
}
    2dae:	e7ee      	b.n	2d8e <socketInit+0xa>
    2db0:	200000f1 	.word	0x200000f1
    2db4:	200002fc 	.word	0x200002fc
    2db8:	000005e5 	.word	0x000005e5
    2dbc:	00002a79 	.word	0x00002a79
    2dc0:	00000df1 	.word	0x00000df1
    2dc4:	200000f2 	.word	0x200000f2

00002dc8 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    2dc8:	4b02      	ldr	r3, [pc, #8]	; (2dd4 <registerSocketCallback+0xc>)
    2dca:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    2dcc:	4b02      	ldr	r3, [pc, #8]	; (2dd8 <registerSocketCallback+0x10>)
    2dce:	6019      	str	r1, [r3, #0]
}
    2dd0:	4770      	bx	lr
    2dd2:	46c0      	nop			; (mov r8, r8)
    2dd4:	200003ac 	.word	0x200003ac
    2dd8:	200003b4 	.word	0x200003b4

00002ddc <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    2ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dde:	46d6      	mov	lr, sl
    2de0:	4647      	mov	r7, r8
    2de2:	b580      	push	{r7, lr}
    2de4:	b089      	sub	sp, #36	; 0x24
    2de6:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    2de8:	2802      	cmp	r0, #2
    2dea:	d000      	beq.n	2dee <socket+0x12>
    2dec:	e09c      	b.n	2f28 <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    2dee:	2901      	cmp	r1, #1
    2df0:	d00a      	beq.n	2e08 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    2df2:	2902      	cmp	r1, #2
    2df4:	d100      	bne.n	2df8 <socket+0x1c>
    2df6:	e070      	b.n	2eda <socket+0xfe>
	SOCKET					sock = -1;
    2df8:	2501      	movs	r5, #1
    2dfa:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    2dfc:	0028      	movs	r0, r5
    2dfe:	b009      	add	sp, #36	; 0x24
    2e00:	bc0c      	pop	{r2, r3}
    2e02:	4690      	mov	r8, r2
    2e04:	469a      	mov	sl, r3
    2e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    2e08:	4c49      	ldr	r4, [pc, #292]	; (2f30 <socket+0x154>)
    2e0a:	7827      	ldrb	r7, [r4, #0]
    2e0c:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    2e0e:	7826      	ldrb	r6, [r4, #0]
    2e10:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    2e12:	7820      	ldrb	r0, [r4, #0]
    2e14:	3001      	adds	r0, #1
    2e16:	3106      	adds	r1, #6
    2e18:	4b46      	ldr	r3, [pc, #280]	; (2f34 <socket+0x158>)
    2e1a:	4798      	blx	r3
    2e1c:	b2c9      	uxtb	r1, r1
    2e1e:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    2e20:	0132      	lsls	r2, r6, #4
    2e22:	4b45      	ldr	r3, [pc, #276]	; (2f38 <socket+0x15c>)
    2e24:	189b      	adds	r3, r3, r2
    2e26:	7a9b      	ldrb	r3, [r3, #10]
    2e28:	2506      	movs	r5, #6
    2e2a:	2b00      	cmp	r3, #0
    2e2c:	d018      	beq.n	2e60 <socket+0x84>
				u8SockID	= u8NextTcpSock;
    2e2e:	4e40      	ldr	r6, [pc, #256]	; (2f30 <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    2e30:	4b40      	ldr	r3, [pc, #256]	; (2f34 <socket+0x158>)
    2e32:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    2e34:	4b40      	ldr	r3, [pc, #256]	; (2f38 <socket+0x15c>)
    2e36:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    2e38:	7837      	ldrb	r7, [r6, #0]
    2e3a:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    2e3c:	7834      	ldrb	r4, [r6, #0]
    2e3e:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    2e40:	7830      	ldrb	r0, [r6, #0]
    2e42:	3001      	adds	r0, #1
    2e44:	2107      	movs	r1, #7
    2e46:	47d0      	blx	sl
    2e48:	b2c9      	uxtb	r1, r1
    2e4a:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    2e4c:	0123      	lsls	r3, r4, #4
    2e4e:	4443      	add	r3, r8
    2e50:	7a9b      	ldrb	r3, [r3, #10]
    2e52:	2b00      	cmp	r3, #0
    2e54:	d007      	beq.n	2e66 <socket+0x8a>
    2e56:	3d01      	subs	r5, #1
    2e58:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    2e5a:	2d00      	cmp	r5, #0
    2e5c:	d1ec      	bne.n	2e38 <socket+0x5c>
    2e5e:	e7cb      	b.n	2df8 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    2e60:	4b35      	ldr	r3, [pc, #212]	; (2f38 <socket+0x15c>)
    2e62:	18d4      	adds	r4, r2, r3
    2e64:	e002      	b.n	2e6c <socket+0x90>
    2e66:	0124      	lsls	r4, r4, #4
    2e68:	4b33      	ldr	r3, [pc, #204]	; (2f38 <socket+0x15c>)
    2e6a:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    2e6c:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    2e6e:	2d00      	cmp	r5, #0
    2e70:	dbc4      	blt.n	2dfc <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    2e72:	2210      	movs	r2, #16
    2e74:	2100      	movs	r1, #0
    2e76:	0020      	movs	r0, r4
    2e78:	4b30      	ldr	r3, [pc, #192]	; (2f3c <socket+0x160>)
    2e7a:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    2e7c:	2301      	movs	r3, #1
    2e7e:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    2e80:	4a2f      	ldr	r2, [pc, #188]	; (2f40 <socket+0x164>)
    2e82:	8813      	ldrh	r3, [r2, #0]
    2e84:	3301      	adds	r3, #1
    2e86:	b29b      	uxth	r3, r3
    2e88:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    2e8a:	8813      	ldrh	r3, [r2, #0]
    2e8c:	b29b      	uxth	r3, r3
    2e8e:	2b00      	cmp	r3, #0
    2e90:	d103      	bne.n	2e9a <socket+0xbe>
				++gu16SessionID;
    2e92:	8813      	ldrh	r3, [r2, #0]
    2e94:	3301      	adds	r3, #1
    2e96:	b29b      	uxth	r3, r3
    2e98:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    2e9a:	4e29      	ldr	r6, [pc, #164]	; (2f40 <socket+0x164>)
    2e9c:	8833      	ldrh	r3, [r6, #0]
    2e9e:	b29b      	uxth	r3, r3
    2ea0:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    2ea2:	4828      	ldr	r0, [pc, #160]	; (2f44 <socket+0x168>)
    2ea4:	4f28      	ldr	r7, [pc, #160]	; (2f48 <socket+0x16c>)
    2ea6:	47b8      	blx	r7
    2ea8:	8832      	ldrh	r2, [r6, #0]
    2eaa:	b292      	uxth	r2, r2
    2eac:	0029      	movs	r1, r5
    2eae:	4827      	ldr	r0, [pc, #156]	; (2f4c <socket+0x170>)
    2eb0:	47b8      	blx	r7
    2eb2:	200d      	movs	r0, #13
    2eb4:	4b26      	ldr	r3, [pc, #152]	; (2f50 <socket+0x174>)
    2eb6:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    2eb8:	9b05      	ldr	r3, [sp, #20]
    2eba:	07db      	lsls	r3, r3, #31
    2ebc:	d59e      	bpl.n	2dfc <socket+0x20>
				strSSLCreate.sslSock = sock;
    2ebe:	aa07      	add	r2, sp, #28
    2ec0:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    2ec2:	2321      	movs	r3, #33	; 0x21
    2ec4:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    2ec6:	2300      	movs	r3, #0
    2ec8:	9302      	str	r3, [sp, #8]
    2eca:	9301      	str	r3, [sp, #4]
    2ecc:	9300      	str	r3, [sp, #0]
    2ece:	3304      	adds	r3, #4
    2ed0:	2150      	movs	r1, #80	; 0x50
    2ed2:	2002      	movs	r0, #2
    2ed4:	4c1f      	ldr	r4, [pc, #124]	; (2f54 <socket+0x178>)
    2ed6:	47a0      	blx	r4
    2ed8:	e790      	b.n	2dfc <socket+0x20>
				u8SockID		= u8NextUdpSock;
    2eda:	4b1f      	ldr	r3, [pc, #124]	; (2f58 <socket+0x17c>)
    2edc:	781d      	ldrb	r5, [r3, #0]
    2ede:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    2ee0:	781c      	ldrb	r4, [r3, #0]
    2ee2:	0124      	lsls	r4, r4, #4
    2ee4:	4a1d      	ldr	r2, [pc, #116]	; (2f5c <socket+0x180>)
    2ee6:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    2ee8:	7819      	ldrb	r1, [r3, #0]
    2eea:	3101      	adds	r1, #1
    2eec:	2203      	movs	r2, #3
    2eee:	400a      	ands	r2, r1
    2ef0:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    2ef2:	7aa3      	ldrb	r3, [r4, #10]
    2ef4:	2b00      	cmp	r3, #0
    2ef6:	d014      	beq.n	2f22 <socket+0x146>
    2ef8:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    2efa:	4917      	ldr	r1, [pc, #92]	; (2f58 <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    2efc:	4f17      	ldr	r7, [pc, #92]	; (2f5c <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    2efe:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    2f00:	780d      	ldrb	r5, [r1, #0]
    2f02:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    2f04:	780c      	ldrb	r4, [r1, #0]
    2f06:	0124      	lsls	r4, r4, #4
    2f08:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    2f0a:	780b      	ldrb	r3, [r1, #0]
    2f0c:	3301      	adds	r3, #1
    2f0e:	4003      	ands	r3, r0
    2f10:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    2f12:	7aa3      	ldrb	r3, [r4, #10]
    2f14:	2b00      	cmp	r3, #0
    2f16:	d004      	beq.n	2f22 <socket+0x146>
    2f18:	3a01      	subs	r2, #1
    2f1a:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    2f1c:	2a00      	cmp	r2, #0
    2f1e:	d1ef      	bne.n	2f00 <socket+0x124>
    2f20:	e76a      	b.n	2df8 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    2f22:	3507      	adds	r5, #7
    2f24:	b26d      	sxtb	r5, r5
					break;
    2f26:	e7a2      	b.n	2e6e <socket+0x92>
	SOCKET					sock = -1;
    2f28:	2501      	movs	r5, #1
    2f2a:	426d      	negs	r5, r5
    2f2c:	e766      	b.n	2dfc <socket+0x20>
    2f2e:	46c0      	nop			; (mov r8, r8)
    2f30:	200000f4 	.word	0x200000f4
    2f34:	00006cc1 	.word	0x00006cc1
    2f38:	200002fc 	.word	0x200002fc
    2f3c:	000005e5 	.word	0x000005e5
    2f40:	200000f2 	.word	0x200000f2
    2f44:	00008600 	.word	0x00008600
    2f48:	00006f15 	.word	0x00006f15
    2f4c:	00009090 	.word	0x00009090
    2f50:	00006f49 	.word	0x00006f49
    2f54:	000006f9 	.word	0x000006f9
    2f58:	200000f5 	.word	0x200000f5
    2f5c:	2000036c 	.word	0x2000036c

00002f60 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    2f60:	b570      	push	{r4, r5, r6, lr}
    2f62:	b088      	sub	sp, #32
    2f64:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    2f66:	db30      	blt.n	2fca <connect+0x6a>
    2f68:	2900      	cmp	r1, #0
    2f6a:	d031      	beq.n	2fd0 <connect+0x70>
    2f6c:	0100      	lsls	r0, r0, #4
    2f6e:	4b1d      	ldr	r3, [pc, #116]	; (2fe4 <connect+0x84>)
    2f70:	181b      	adds	r3, r3, r0
    2f72:	7a9b      	ldrb	r3, [r3, #10]
    2f74:	2b01      	cmp	r3, #1
    2f76:	d12e      	bne.n	2fd6 <connect+0x76>
    2f78:	2a00      	cmp	r2, #0
    2f7a:	d02f      	beq.n	2fdc <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    2f7c:	4b19      	ldr	r3, [pc, #100]	; (2fe4 <connect+0x84>)
    2f7e:	181b      	adds	r3, r3, r0
    2f80:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    2f82:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    2f84:	07db      	lsls	r3, r3, #31
    2f86:	d505      	bpl.n	2f94 <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    2f88:	4b16      	ldr	r3, [pc, #88]	; (2fe4 <connect+0x84>)
    2f8a:	181b      	adds	r3, r3, r0
    2f8c:	7ada      	ldrb	r2, [r3, #11]
    2f8e:	ab05      	add	r3, sp, #20
    2f90:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    2f92:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
    2f94:	ad05      	add	r5, sp, #20
    2f96:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    2f98:	2208      	movs	r2, #8
    2f9a:	0028      	movs	r0, r5
    2f9c:	4b12      	ldr	r3, [pc, #72]	; (2fe8 <connect+0x88>)
    2f9e:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    2fa0:	0124      	lsls	r4, r4, #4
    2fa2:	4b10      	ldr	r3, [pc, #64]	; (2fe4 <connect+0x84>)
    2fa4:	191c      	adds	r4, r3, r4
    2fa6:	88e3      	ldrh	r3, [r4, #6]
    2fa8:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    2faa:	2300      	movs	r3, #0
    2fac:	9302      	str	r3, [sp, #8]
    2fae:	9301      	str	r3, [sp, #4]
    2fb0:	9300      	str	r3, [sp, #0]
    2fb2:	330c      	adds	r3, #12
    2fb4:	002a      	movs	r2, r5
    2fb6:	0031      	movs	r1, r6
    2fb8:	2002      	movs	r0, #2
    2fba:	4c0c      	ldr	r4, [pc, #48]	; (2fec <connect+0x8c>)
    2fbc:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    2fbe:	2800      	cmp	r0, #0
    2fc0:	d001      	beq.n	2fc6 <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    2fc2:	2009      	movs	r0, #9
    2fc4:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    2fc6:	b008      	add	sp, #32
    2fc8:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    2fca:	2006      	movs	r0, #6
    2fcc:	4240      	negs	r0, r0
    2fce:	e7fa      	b.n	2fc6 <connect+0x66>
    2fd0:	2006      	movs	r0, #6
    2fd2:	4240      	negs	r0, r0
    2fd4:	e7f7      	b.n	2fc6 <connect+0x66>
    2fd6:	2006      	movs	r0, #6
    2fd8:	4240      	negs	r0, r0
    2fda:	e7f4      	b.n	2fc6 <connect+0x66>
    2fdc:	2006      	movs	r0, #6
    2fde:	4240      	negs	r0, r0
    2fe0:	e7f1      	b.n	2fc6 <connect+0x66>
    2fe2:	46c0      	nop			; (mov r8, r8)
    2fe4:	200002fc 	.word	0x200002fc
    2fe8:	000005d1 	.word	0x000005d1
    2fec:	000006f9 	.word	0x000006f9

00002ff0 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    2ff0:	b530      	push	{r4, r5, lr}
    2ff2:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    2ff4:	2800      	cmp	r0, #0
    2ff6:	db36      	blt.n	3066 <send+0x76>
    2ff8:	2900      	cmp	r1, #0
    2ffa:	d037      	beq.n	306c <send+0x7c>
    2ffc:	23af      	movs	r3, #175	; 0xaf
    2ffe:	00db      	lsls	r3, r3, #3
    3000:	429a      	cmp	r2, r3
    3002:	d836      	bhi.n	3072 <send+0x82>
    3004:	0104      	lsls	r4, r0, #4
    3006:	4b1e      	ldr	r3, [pc, #120]	; (3080 <send+0x90>)
    3008:	191b      	adds	r3, r3, r4
    300a:	7a9b      	ldrb	r3, [r3, #10]
    300c:	2b01      	cmp	r3, #1
    300e:	d133      	bne.n	3078 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    3010:	ab04      	add	r3, sp, #16
    3012:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    3014:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    3016:	0025      	movs	r5, r4
    3018:	4c19      	ldr	r4, [pc, #100]	; (3080 <send+0x90>)
    301a:	1964      	adds	r4, r4, r5
    301c:	88e4      	ldrh	r4, [r4, #6]
    301e:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    3020:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    3022:	2806      	cmp	r0, #6
    3024:	dd00      	ble.n	3028 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    3026:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3028:	0104      	lsls	r4, r0, #4
    302a:	4b15      	ldr	r3, [pc, #84]	; (3080 <send+0x90>)
    302c:	191b      	adds	r3, r3, r4
    302e:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    3030:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3032:	07e4      	lsls	r4, r4, #31
    3034:	d505      	bpl.n	3042 <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    3036:	0100      	lsls	r0, r0, #4
    3038:	4b11      	ldr	r3, [pc, #68]	; (3080 <send+0x90>)
    303a:	1818      	adds	r0, r3, r0
    303c:	8905      	ldrh	r5, [r0, #8]
    303e:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    3040:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    3042:	2080      	movs	r0, #128	; 0x80
    3044:	4318      	orrs	r0, r3
    3046:	9502      	str	r5, [sp, #8]
    3048:	9201      	str	r2, [sp, #4]
    304a:	9100      	str	r1, [sp, #0]
    304c:	2310      	movs	r3, #16
    304e:	aa04      	add	r2, sp, #16
    3050:	0001      	movs	r1, r0
    3052:	2002      	movs	r0, #2
    3054:	4c0b      	ldr	r4, [pc, #44]	; (3084 <send+0x94>)
    3056:	47a0      	blx	r4
    3058:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    305a:	2800      	cmp	r0, #0
    305c:	d000      	beq.n	3060 <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    305e:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    3060:	0018      	movs	r0, r3
    3062:	b009      	add	sp, #36	; 0x24
    3064:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    3066:	2306      	movs	r3, #6
    3068:	425b      	negs	r3, r3
    306a:	e7f9      	b.n	3060 <send+0x70>
    306c:	2306      	movs	r3, #6
    306e:	425b      	negs	r3, r3
    3070:	e7f6      	b.n	3060 <send+0x70>
    3072:	2306      	movs	r3, #6
    3074:	425b      	negs	r3, r3
    3076:	e7f3      	b.n	3060 <send+0x70>
    3078:	2306      	movs	r3, #6
    307a:	425b      	negs	r3, r3
    307c:	e7f0      	b.n	3060 <send+0x70>
    307e:	46c0      	nop			; (mov r8, r8)
    3080:	200002fc 	.word	0x200002fc
    3084:	000006f9 	.word	0x000006f9

00003088 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    3088:	b530      	push	{r4, r5, lr}
    308a:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    308c:	2800      	cmp	r0, #0
    308e:	db34      	blt.n	30fa <recv+0x72>
    3090:	2900      	cmp	r1, #0
    3092:	d035      	beq.n	3100 <recv+0x78>
    3094:	2a00      	cmp	r2, #0
    3096:	d036      	beq.n	3106 <recv+0x7e>
    3098:	0105      	lsls	r5, r0, #4
    309a:	4c1e      	ldr	r4, [pc, #120]	; (3114 <recv+0x8c>)
    309c:	1964      	adds	r4, r4, r5
    309e:	7aa4      	ldrb	r4, [r4, #10]
    30a0:	2c01      	cmp	r4, #1
    30a2:	d133      	bne.n	310c <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    30a4:	4c1b      	ldr	r4, [pc, #108]	; (3114 <recv+0x8c>)
    30a6:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    30a8:	1964      	adds	r4, r4, r5
    30aa:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    30ac:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    30ae:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    30b0:	2900      	cmp	r1, #0
    30b2:	d11d      	bne.n	30f0 <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    30b4:	2101      	movs	r1, #1
    30b6:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    30b8:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    30ba:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    30bc:	07d2      	lsls	r2, r2, #31
    30be:	d500      	bpl.n	30c2 <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    30c0:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    30c2:	2b00      	cmp	r3, #0
    30c4:	d117      	bne.n	30f6 <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    30c6:	3b01      	subs	r3, #1
    30c8:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    30ca:	aa04      	add	r2, sp, #16
    30cc:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    30ce:	0100      	lsls	r0, r0, #4
    30d0:	4b10      	ldr	r3, [pc, #64]	; (3114 <recv+0x8c>)
    30d2:	1818      	adds	r0, r3, r0
    30d4:	88c3      	ldrh	r3, [r0, #6]
    30d6:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    30d8:	2300      	movs	r3, #0
    30da:	9302      	str	r3, [sp, #8]
    30dc:	9301      	str	r3, [sp, #4]
    30de:	9300      	str	r3, [sp, #0]
    30e0:	3308      	adds	r3, #8
    30e2:	2002      	movs	r0, #2
    30e4:	4c0c      	ldr	r4, [pc, #48]	; (3118 <recv+0x90>)
    30e6:	47a0      	blx	r4
    30e8:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    30ea:	2800      	cmp	r0, #0
    30ec:	d000      	beq.n	30f0 <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    30ee:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    30f0:	0010      	movs	r0, r2
    30f2:	b007      	add	sp, #28
    30f4:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    30f6:	9304      	str	r3, [sp, #16]
    30f8:	e7e7      	b.n	30ca <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    30fa:	2206      	movs	r2, #6
    30fc:	4252      	negs	r2, r2
    30fe:	e7f7      	b.n	30f0 <recv+0x68>
    3100:	2206      	movs	r2, #6
    3102:	4252      	negs	r2, r2
    3104:	e7f4      	b.n	30f0 <recv+0x68>
    3106:	2206      	movs	r2, #6
    3108:	4252      	negs	r2, r2
    310a:	e7f1      	b.n	30f0 <recv+0x68>
    310c:	2206      	movs	r2, #6
    310e:	4252      	negs	r2, r2
    3110:	e7ee      	b.n	30f0 <recv+0x68>
    3112:	46c0      	nop			; (mov r8, r8)
    3114:	200002fc 	.word	0x200002fc
    3118:	000006f9 	.word	0x000006f9

0000311c <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    311c:	b530      	push	{r4, r5, lr}
    311e:	b087      	sub	sp, #28
    3120:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    3122:	481e      	ldr	r0, [pc, #120]	; (319c <close+0x80>)
    3124:	4d1e      	ldr	r5, [pc, #120]	; (31a0 <close+0x84>)
    3126:	47a8      	blx	r5
    3128:	0021      	movs	r1, r4
    312a:	481e      	ldr	r0, [pc, #120]	; (31a4 <close+0x88>)
    312c:	47a8      	blx	r5
    312e:	200d      	movs	r0, #13
    3130:	4b1d      	ldr	r3, [pc, #116]	; (31a8 <close+0x8c>)
    3132:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    3134:	2c00      	cmp	r4, #0
    3136:	db2a      	blt.n	318e <close+0x72>
    3138:	0122      	lsls	r2, r4, #4
    313a:	4b1c      	ldr	r3, [pc, #112]	; (31ac <close+0x90>)
    313c:	189b      	adds	r3, r3, r2
    313e:	7a9b      	ldrb	r3, [r3, #10]
    3140:	2b01      	cmp	r3, #1
    3142:	d127      	bne.n	3194 <close+0x78>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    3144:	a905      	add	r1, sp, #20
    3146:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    3148:	4b18      	ldr	r3, [pc, #96]	; (31ac <close+0x90>)
    314a:	189b      	adds	r3, r3, r2
    314c:	88da      	ldrh	r2, [r3, #6]
    314e:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    3150:	2200      	movs	r2, #0
    3152:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    3154:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3156:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    3158:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    315a:	07db      	lsls	r3, r3, #31
    315c:	d500      	bpl.n	3160 <close+0x44>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    315e:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    3160:	2300      	movs	r3, #0
    3162:	9302      	str	r3, [sp, #8]
    3164:	9301      	str	r3, [sp, #4]
    3166:	9300      	str	r3, [sp, #0]
    3168:	3304      	adds	r3, #4
    316a:	aa05      	add	r2, sp, #20
    316c:	2002      	movs	r0, #2
    316e:	4d10      	ldr	r5, [pc, #64]	; (31b0 <close+0x94>)
    3170:	47a8      	blx	r5
    3172:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    3174:	d001      	beq.n	317a <close+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    3176:	2509      	movs	r5, #9
    3178:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    317a:	0124      	lsls	r4, r4, #4
    317c:	480b      	ldr	r0, [pc, #44]	; (31ac <close+0x90>)
    317e:	1820      	adds	r0, r4, r0
    3180:	2210      	movs	r2, #16
    3182:	2100      	movs	r1, #0
    3184:	4b0b      	ldr	r3, [pc, #44]	; (31b4 <close+0x98>)
    3186:	4798      	blx	r3
	}
	return s8Ret;
}
    3188:	0028      	movs	r0, r5
    318a:	b007      	add	sp, #28
    318c:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    318e:	2506      	movs	r5, #6
    3190:	426d      	negs	r5, r5
    3192:	e7f9      	b.n	3188 <close+0x6c>
    3194:	2506      	movs	r5, #6
    3196:	426d      	negs	r5, r5
    3198:	e7f6      	b.n	3188 <close+0x6c>
    319a:	46c0      	nop			; (mov r8, r8)
    319c:	00008600 	.word	0x00008600
    31a0:	00006f15 	.word	0x00006f15
    31a4:	00009078 	.word	0x00009078
    31a8:	00006f49 	.word	0x00006f49
    31ac:	200002fc 	.word	0x200002fc
    31b0:	000006f9 	.word	0x000006f9
    31b4:	000005e5 	.word	0x000005e5

000031b8 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    31b8:	b570      	push	{r4, r5, r6, lr}
    31ba:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
    31bc:	2300      	movs	r3, #0
    31be:	9301      	str	r3, [sp, #4]
    31c0:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
    31c2:	2100      	movs	r1, #0
    31c4:	7802      	ldrb	r2, [r0, #0]
    31c6:	1c44      	adds	r4, r0, #1
    31c8:	3005      	adds	r0, #5
    31ca:	000b      	movs	r3, r1
    31cc:	e009      	b.n	31e2 <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
    31ce:	009d      	lsls	r5, r3, #2
    31d0:	195b      	adds	r3, r3, r5
    31d2:	005b      	lsls	r3, r3, #1
    31d4:	189b      	adds	r3, r3, r2
    31d6:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
    31d8:	0022      	movs	r2, r4
    31da:	3401      	adds	r4, #1
			if(j > 4)
    31dc:	42a0      	cmp	r0, r4
    31de:	d00a      	beq.n	31f6 <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
    31e0:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
    31e2:	2a2e      	cmp	r2, #46	; 0x2e
    31e4:	d00a      	beq.n	31fc <nmi_inet_addr+0x44>
    31e6:	2a00      	cmp	r2, #0
    31e8:	d00c      	beq.n	3204 <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
    31ea:	3a30      	subs	r2, #48	; 0x30
    31ec:	b2d2      	uxtb	r2, r2
    31ee:	2a09      	cmp	r2, #9
    31f0:	d9ed      	bls.n	31ce <nmi_inet_addr+0x16>
				return 0;
    31f2:	2000      	movs	r0, #0
    31f4:	e000      	b.n	31f8 <nmi_inet_addr+0x40>
				return 0;
    31f6:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
    31f8:	b002      	add	sp, #8
    31fa:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
    31fc:	466a      	mov	r2, sp
    31fe:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    3200:	0020      	movs	r0, r4
    3202:	e002      	b.n	320a <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
    3204:	466a      	mov	r2, sp
    3206:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    3208:	0020      	movs	r0, r4
    320a:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
    320c:	2e04      	cmp	r6, #4
    320e:	d1d9      	bne.n	31c4 <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    3210:	2204      	movs	r2, #4
    3212:	4669      	mov	r1, sp
    3214:	a801      	add	r0, sp, #4
    3216:	4b02      	ldr	r3, [pc, #8]	; (3220 <nmi_inet_addr+0x68>)
    3218:	4798      	blx	r3
	return u32IP;
    321a:	9801      	ldr	r0, [sp, #4]
    321c:	e7ec      	b.n	31f8 <nmi_inet_addr+0x40>
    321e:	46c0      	nop			; (mov r8, r8)
    3220:	000005d1 	.word	0x000005d1

00003224 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    3224:	b510      	push	{r4, lr}
    3226:	b084      	sub	sp, #16
    3228:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    322a:	4b0b      	ldr	r3, [pc, #44]	; (3258 <gethostbyname+0x34>)
    322c:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    322e:	b2c3      	uxtb	r3, r0
    3230:	2b40      	cmp	r3, #64	; 0x40
    3232:	d80d      	bhi.n	3250 <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    3234:	23ff      	movs	r3, #255	; 0xff
    3236:	4003      	ands	r3, r0
    3238:	3301      	adds	r3, #1
    323a:	2200      	movs	r2, #0
    323c:	9202      	str	r2, [sp, #8]
    323e:	9201      	str	r2, [sp, #4]
    3240:	9200      	str	r2, [sp, #0]
    3242:	0022      	movs	r2, r4
    3244:	214a      	movs	r1, #74	; 0x4a
    3246:	2002      	movs	r0, #2
    3248:	4c04      	ldr	r4, [pc, #16]	; (325c <gethostbyname+0x38>)
    324a:	47a0      	blx	r4
	}
	return s8Err;
}
    324c:	b004      	add	sp, #16
    324e:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    3250:	2006      	movs	r0, #6
    3252:	4240      	negs	r0, r0
    3254:	e7fa      	b.n	324c <gethostbyname+0x28>
    3256:	46c0      	nop			; (mov r8, r8)
    3258:	000005f5 	.word	0x000005f5
    325c:	000006f9 	.word	0x000006f9

00003260 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    3260:	b570      	push	{r4, r5, r6, lr}
    3262:	b082      	sub	sp, #8
    3264:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    3266:	4b2a      	ldr	r3, [pc, #168]	; (3310 <spi_flash_enable+0xb0>)
    3268:	4798      	blx	r3
    326a:	0500      	lsls	r0, r0, #20
    326c:	0d00      	lsrs	r0, r0, #20
    326e:	4b29      	ldr	r3, [pc, #164]	; (3314 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    3270:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    3272:	4298      	cmp	r0, r3
    3274:	d802      	bhi.n	327c <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    3276:	0028      	movs	r0, r5
    3278:	b002      	add	sp, #8
    327a:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    327c:	a901      	add	r1, sp, #4
    327e:	4826      	ldr	r0, [pc, #152]	; (3318 <spi_flash_enable+0xb8>)
    3280:	4b26      	ldr	r3, [pc, #152]	; (331c <spi_flash_enable+0xbc>)
    3282:	4798      	blx	r3
    3284:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    3286:	d1f6      	bne.n	3276 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    3288:	4b25      	ldr	r3, [pc, #148]	; (3320 <spi_flash_enable+0xc0>)
    328a:	9a01      	ldr	r2, [sp, #4]
    328c:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    328e:	4925      	ldr	r1, [pc, #148]	; (3324 <spi_flash_enable+0xc4>)
    3290:	4319      	orrs	r1, r3
    3292:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    3294:	4820      	ldr	r0, [pc, #128]	; (3318 <spi_flash_enable+0xb8>)
    3296:	4b24      	ldr	r3, [pc, #144]	; (3328 <spi_flash_enable+0xc8>)
    3298:	4798      	blx	r3
		if(enable) {
    329a:	2c00      	cmp	r4, #0
    329c:	d020      	beq.n	32e0 <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    329e:	2100      	movs	r1, #0
    32a0:	4822      	ldr	r0, [pc, #136]	; (332c <spi_flash_enable+0xcc>)
    32a2:	4c21      	ldr	r4, [pc, #132]	; (3328 <spi_flash_enable+0xc8>)
    32a4:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    32a6:	21ab      	movs	r1, #171	; 0xab
    32a8:	4821      	ldr	r0, [pc, #132]	; (3330 <spi_flash_enable+0xd0>)
    32aa:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    32ac:	2101      	movs	r1, #1
    32ae:	4821      	ldr	r0, [pc, #132]	; (3334 <spi_flash_enable+0xd4>)
    32b0:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    32b2:	2100      	movs	r1, #0
    32b4:	4820      	ldr	r0, [pc, #128]	; (3338 <spi_flash_enable+0xd8>)
    32b6:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    32b8:	2181      	movs	r1, #129	; 0x81
    32ba:	4820      	ldr	r0, [pc, #128]	; (333c <spi_flash_enable+0xdc>)
    32bc:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    32be:	4e20      	ldr	r6, [pc, #128]	; (3340 <spi_flash_enable+0xe0>)
    32c0:	4c20      	ldr	r4, [pc, #128]	; (3344 <spi_flash_enable+0xe4>)
    32c2:	0030      	movs	r0, r6
    32c4:	47a0      	blx	r4
    32c6:	2801      	cmp	r0, #1
    32c8:	d1fb      	bne.n	32c2 <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    32ca:	4b15      	ldr	r3, [pc, #84]	; (3320 <spi_flash_enable+0xc0>)
    32cc:	9a01      	ldr	r2, [sp, #4]
    32ce:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    32d0:	2180      	movs	r1, #128	; 0x80
    32d2:	0249      	lsls	r1, r1, #9
    32d4:	4319      	orrs	r1, r3
    32d6:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    32d8:	480f      	ldr	r0, [pc, #60]	; (3318 <spi_flash_enable+0xb8>)
    32da:	4b13      	ldr	r3, [pc, #76]	; (3328 <spi_flash_enable+0xc8>)
    32dc:	4798      	blx	r3
    32de:	e7ca      	b.n	3276 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    32e0:	2100      	movs	r1, #0
    32e2:	4812      	ldr	r0, [pc, #72]	; (332c <spi_flash_enable+0xcc>)
    32e4:	4c10      	ldr	r4, [pc, #64]	; (3328 <spi_flash_enable+0xc8>)
    32e6:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    32e8:	21b9      	movs	r1, #185	; 0xb9
    32ea:	4811      	ldr	r0, [pc, #68]	; (3330 <spi_flash_enable+0xd0>)
    32ec:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    32ee:	2101      	movs	r1, #1
    32f0:	4810      	ldr	r0, [pc, #64]	; (3334 <spi_flash_enable+0xd4>)
    32f2:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    32f4:	2100      	movs	r1, #0
    32f6:	4810      	ldr	r0, [pc, #64]	; (3338 <spi_flash_enable+0xd8>)
    32f8:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    32fa:	2181      	movs	r1, #129	; 0x81
    32fc:	480f      	ldr	r0, [pc, #60]	; (333c <spi_flash_enable+0xdc>)
    32fe:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    3300:	4e0f      	ldr	r6, [pc, #60]	; (3340 <spi_flash_enable+0xe0>)
    3302:	4c10      	ldr	r4, [pc, #64]	; (3344 <spi_flash_enable+0xe4>)
    3304:	0030      	movs	r0, r6
    3306:	47a0      	blx	r4
    3308:	2801      	cmp	r0, #1
    330a:	d1fb      	bne.n	3304 <spi_flash_enable+0xa4>
    330c:	e7dd      	b.n	32ca <spi_flash_enable+0x6a>
    330e:	46c0      	nop			; (mov r8, r8)
    3310:	000015dd 	.word	0x000015dd
    3314:	0000039f 	.word	0x0000039f
    3318:	00001410 	.word	0x00001410
    331c:	00001a2d 	.word	0x00001a2d
    3320:	f8888fff 	.word	0xf8888fff
    3324:	01111000 	.word	0x01111000
    3328:	00001a39 	.word	0x00001a39
    332c:	00010208 	.word	0x00010208
    3330:	0001020c 	.word	0x0001020c
    3334:	00010214 	.word	0x00010214
    3338:	0001021c 	.word	0x0001021c
    333c:	00010204 	.word	0x00010204
    3340:	00010218 	.word	0x00010218
    3344:	00001a21 	.word	0x00001a21

00003348 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    3348:	4b0c      	ldr	r3, [pc, #48]	; (337c <cpu_irq_enter_critical+0x34>)
    334a:	681b      	ldr	r3, [r3, #0]
    334c:	2b00      	cmp	r3, #0
    334e:	d106      	bne.n	335e <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3350:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    3354:	2b00      	cmp	r3, #0
    3356:	d007      	beq.n	3368 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    3358:	2200      	movs	r2, #0
    335a:	4b09      	ldr	r3, [pc, #36]	; (3380 <cpu_irq_enter_critical+0x38>)
    335c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    335e:	4a07      	ldr	r2, [pc, #28]	; (337c <cpu_irq_enter_critical+0x34>)
    3360:	6813      	ldr	r3, [r2, #0]
    3362:	3301      	adds	r3, #1
    3364:	6013      	str	r3, [r2, #0]
}
    3366:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    3368:	b672      	cpsid	i
    336a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    336e:	2200      	movs	r2, #0
    3370:	4b04      	ldr	r3, [pc, #16]	; (3384 <cpu_irq_enter_critical+0x3c>)
    3372:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    3374:	3201      	adds	r2, #1
    3376:	4b02      	ldr	r3, [pc, #8]	; (3380 <cpu_irq_enter_critical+0x38>)
    3378:	701a      	strb	r2, [r3, #0]
    337a:	e7f0      	b.n	335e <cpu_irq_enter_critical+0x16>
    337c:	200000f8 	.word	0x200000f8
    3380:	200000fc 	.word	0x200000fc
    3384:	2000000a 	.word	0x2000000a

00003388 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    3388:	4b08      	ldr	r3, [pc, #32]	; (33ac <cpu_irq_leave_critical+0x24>)
    338a:	681a      	ldr	r2, [r3, #0]
    338c:	3a01      	subs	r2, #1
    338e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    3390:	681b      	ldr	r3, [r3, #0]
    3392:	2b00      	cmp	r3, #0
    3394:	d109      	bne.n	33aa <cpu_irq_leave_critical+0x22>
    3396:	4b06      	ldr	r3, [pc, #24]	; (33b0 <cpu_irq_leave_critical+0x28>)
    3398:	781b      	ldrb	r3, [r3, #0]
    339a:	2b00      	cmp	r3, #0
    339c:	d005      	beq.n	33aa <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    339e:	2201      	movs	r2, #1
    33a0:	4b04      	ldr	r3, [pc, #16]	; (33b4 <cpu_irq_leave_critical+0x2c>)
    33a2:	701a      	strb	r2, [r3, #0]
    33a4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    33a8:	b662      	cpsie	i
	}
}
    33aa:	4770      	bx	lr
    33ac:	200000f8 	.word	0x200000f8
    33b0:	200000fc 	.word	0x200000fc
    33b4:	2000000a 	.word	0x2000000a

000033b8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    33b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    33ba:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    33bc:	ac01      	add	r4, sp, #4
    33be:	2501      	movs	r5, #1
    33c0:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    33c2:	2700      	movs	r7, #0
    33c4:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    33c6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    33c8:	0021      	movs	r1, r4
    33ca:	203e      	movs	r0, #62	; 0x3e
    33cc:	4e06      	ldr	r6, [pc, #24]	; (33e8 <system_board_init+0x30>)
    33ce:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    33d0:	2280      	movs	r2, #128	; 0x80
    33d2:	05d2      	lsls	r2, r2, #23
    33d4:	4b05      	ldr	r3, [pc, #20]	; (33ec <system_board_init+0x34>)
    33d6:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    33d8:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    33da:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    33dc:	0021      	movs	r1, r4
    33de:	200f      	movs	r0, #15
    33e0:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    33e2:	b003      	add	sp, #12
    33e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    33e6:	46c0      	nop			; (mov r8, r8)
    33e8:	000035c1 	.word	0x000035c1
    33ec:	41004480 	.word	0x41004480

000033f0 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    33f0:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    33f2:	2a00      	cmp	r2, #0
    33f4:	d001      	beq.n	33fa <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    33f6:	0018      	movs	r0, r3
    33f8:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    33fa:	008b      	lsls	r3, r1, #2
    33fc:	4a06      	ldr	r2, [pc, #24]	; (3418 <extint_register_callback+0x28>)
    33fe:	589b      	ldr	r3, [r3, r2]
    3400:	2b00      	cmp	r3, #0
    3402:	d003      	beq.n	340c <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    3404:	4283      	cmp	r3, r0
    3406:	d005      	beq.n	3414 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    3408:	231d      	movs	r3, #29
    340a:	e7f4      	b.n	33f6 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    340c:	0089      	lsls	r1, r1, #2
    340e:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    3410:	2300      	movs	r3, #0
    3412:	e7f0      	b.n	33f6 <extint_register_callback+0x6>
		return STATUS_OK;
    3414:	2300      	movs	r3, #0
    3416:	e7ee      	b.n	33f6 <extint_register_callback+0x6>
    3418:	200003bc 	.word	0x200003bc

0000341c <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    341c:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    341e:	2900      	cmp	r1, #0
    3420:	d001      	beq.n	3426 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    3422:	0018      	movs	r0, r3
    3424:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    3426:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    3428:	281f      	cmp	r0, #31
    342a:	d800      	bhi.n	342e <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    342c:	4a02      	ldr	r2, [pc, #8]	; (3438 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    342e:	2301      	movs	r3, #1
    3430:	4083      	lsls	r3, r0
    3432:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    3434:	2300      	movs	r3, #0
    3436:	e7f4      	b.n	3422 <extint_chan_enable_callback+0x6>
    3438:	40001800 	.word	0x40001800

0000343c <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    343c:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    343e:	2900      	cmp	r1, #0
    3440:	d001      	beq.n	3446 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    3442:	0018      	movs	r0, r3
    3444:	4770      	bx	lr
		return NULL;
    3446:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    3448:	281f      	cmp	r0, #31
    344a:	d800      	bhi.n	344e <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    344c:	4a02      	ldr	r2, [pc, #8]	; (3458 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    344e:	2301      	movs	r3, #1
    3450:	4083      	lsls	r3, r0
    3452:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    3454:	2300      	movs	r3, #0
    3456:	e7f4      	b.n	3442 <extint_chan_disable_callback+0x6>
    3458:	40001800 	.word	0x40001800

0000345c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    345c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    345e:	2200      	movs	r2, #0
    3460:	4b10      	ldr	r3, [pc, #64]	; (34a4 <EIC_Handler+0x48>)
    3462:	701a      	strb	r2, [r3, #0]
    3464:	2300      	movs	r3, #0
    3466:	4910      	ldr	r1, [pc, #64]	; (34a8 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    3468:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    346a:	4e10      	ldr	r6, [pc, #64]	; (34ac <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    346c:	4c0d      	ldr	r4, [pc, #52]	; (34a4 <EIC_Handler+0x48>)
    346e:	e00a      	b.n	3486 <EIC_Handler+0x2a>
		return eics[eic_index];
    3470:	490d      	ldr	r1, [pc, #52]	; (34a8 <EIC_Handler+0x4c>)
    3472:	e008      	b.n	3486 <EIC_Handler+0x2a>
    3474:	7823      	ldrb	r3, [r4, #0]
    3476:	3301      	adds	r3, #1
    3478:	b2db      	uxtb	r3, r3
    347a:	7023      	strb	r3, [r4, #0]
    347c:	2b0f      	cmp	r3, #15
    347e:	d810      	bhi.n	34a2 <EIC_Handler+0x46>
		return NULL;
    3480:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    3482:	2b1f      	cmp	r3, #31
    3484:	d9f4      	bls.n	3470 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    3486:	0028      	movs	r0, r5
    3488:	4018      	ands	r0, r3
    348a:	2201      	movs	r2, #1
    348c:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    348e:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    3490:	4210      	tst	r0, r2
    3492:	d0ef      	beq.n	3474 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    3494:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    3496:	009b      	lsls	r3, r3, #2
    3498:	599b      	ldr	r3, [r3, r6]
    349a:	2b00      	cmp	r3, #0
    349c:	d0ea      	beq.n	3474 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    349e:	4798      	blx	r3
    34a0:	e7e8      	b.n	3474 <EIC_Handler+0x18>
			}
		}
	}
}
    34a2:	bd70      	pop	{r4, r5, r6, pc}
    34a4:	200003b8 	.word	0x200003b8
    34a8:	40001800 	.word	0x40001800
    34ac:	200003bc 	.word	0x200003bc

000034b0 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    34b0:	4a04      	ldr	r2, [pc, #16]	; (34c4 <_extint_enable+0x14>)
    34b2:	7813      	ldrb	r3, [r2, #0]
    34b4:	2102      	movs	r1, #2
    34b6:	430b      	orrs	r3, r1
    34b8:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    34ba:	7853      	ldrb	r3, [r2, #1]
    34bc:	b25b      	sxtb	r3, r3
    34be:	2b00      	cmp	r3, #0
    34c0:	dbfb      	blt.n	34ba <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    34c2:	4770      	bx	lr
    34c4:	40001800 	.word	0x40001800

000034c8 <_system_extint_init>:
{
    34c8:	b500      	push	{lr}
    34ca:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    34cc:	4a12      	ldr	r2, [pc, #72]	; (3518 <_system_extint_init+0x50>)
    34ce:	6993      	ldr	r3, [r2, #24]
    34d0:	2140      	movs	r1, #64	; 0x40
    34d2:	430b      	orrs	r3, r1
    34d4:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    34d6:	a901      	add	r1, sp, #4
    34d8:	2300      	movs	r3, #0
    34da:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    34dc:	2005      	movs	r0, #5
    34de:	4b0f      	ldr	r3, [pc, #60]	; (351c <_system_extint_init+0x54>)
    34e0:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    34e2:	2005      	movs	r0, #5
    34e4:	4b0e      	ldr	r3, [pc, #56]	; (3520 <_system_extint_init+0x58>)
    34e6:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    34e8:	4a0e      	ldr	r2, [pc, #56]	; (3524 <_system_extint_init+0x5c>)
    34ea:	7813      	ldrb	r3, [r2, #0]
    34ec:	2101      	movs	r1, #1
    34ee:	430b      	orrs	r3, r1
    34f0:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    34f2:	7853      	ldrb	r3, [r2, #1]
    34f4:	b25b      	sxtb	r3, r3
    34f6:	2b00      	cmp	r3, #0
    34f8:	dbfb      	blt.n	34f2 <_system_extint_init+0x2a>
    34fa:	4b0b      	ldr	r3, [pc, #44]	; (3528 <_system_extint_init+0x60>)
    34fc:	0019      	movs	r1, r3
    34fe:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    3500:	2200      	movs	r2, #0
    3502:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    3504:	4299      	cmp	r1, r3
    3506:	d1fc      	bne.n	3502 <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3508:	2210      	movs	r2, #16
    350a:	4b08      	ldr	r3, [pc, #32]	; (352c <_system_extint_init+0x64>)
    350c:	601a      	str	r2, [r3, #0]
	_extint_enable();
    350e:	4b08      	ldr	r3, [pc, #32]	; (3530 <_system_extint_init+0x68>)
    3510:	4798      	blx	r3
}
    3512:	b003      	add	sp, #12
    3514:	bd00      	pop	{pc}
    3516:	46c0      	nop			; (mov r8, r8)
    3518:	40000400 	.word	0x40000400
    351c:	00004a95 	.word	0x00004a95
    3520:	00004a09 	.word	0x00004a09
    3524:	40001800 	.word	0x40001800
    3528:	200003bc 	.word	0x200003bc
    352c:	e000e100 	.word	0xe000e100
    3530:	000034b1 	.word	0x000034b1

00003534 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    3534:	2300      	movs	r3, #0
    3536:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    3538:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    353a:	2201      	movs	r2, #1
    353c:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    353e:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    3540:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    3542:	3302      	adds	r3, #2
    3544:	72c3      	strb	r3, [r0, #11]
}
    3546:	4770      	bx	lr

00003548 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    3548:	b5f0      	push	{r4, r5, r6, r7, lr}
    354a:	b083      	sub	sp, #12
    354c:	0005      	movs	r5, r0
    354e:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3550:	a901      	add	r1, sp, #4
    3552:	2300      	movs	r3, #0
    3554:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    3556:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    3558:	7923      	ldrb	r3, [r4, #4]
    355a:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    355c:	7a23      	ldrb	r3, [r4, #8]
    355e:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    3560:	7820      	ldrb	r0, [r4, #0]
    3562:	4b15      	ldr	r3, [pc, #84]	; (35b8 <extint_chan_set_config+0x70>)
    3564:	4798      	blx	r3
		return NULL;
    3566:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    3568:	2d1f      	cmp	r5, #31
    356a:	d800      	bhi.n	356e <extint_chan_set_config+0x26>
		return eics[eic_index];
    356c:	4813      	ldr	r0, [pc, #76]	; (35bc <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    356e:	2207      	movs	r2, #7
    3570:	402a      	ands	r2, r5
    3572:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    3574:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    3576:	7aa3      	ldrb	r3, [r4, #10]
    3578:	2b00      	cmp	r3, #0
    357a:	d001      	beq.n	3580 <extint_chan_set_config+0x38>
    357c:	2308      	movs	r3, #8
    357e:	431f      	orrs	r7, r3
    3580:	08eb      	lsrs	r3, r5, #3
    3582:	009b      	lsls	r3, r3, #2
    3584:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    3586:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    3588:	260f      	movs	r6, #15
    358a:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    358c:	43b1      	bics	r1, r6
			(new_config << config_pos);
    358e:	4097      	lsls	r7, r2
    3590:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    3592:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    3594:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    3596:	7a63      	ldrb	r3, [r4, #9]
    3598:	2b00      	cmp	r3, #0
    359a:	d106      	bne.n	35aa <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    359c:	6943      	ldr	r3, [r0, #20]
    359e:	2201      	movs	r2, #1
    35a0:	40aa      	lsls	r2, r5
    35a2:	4393      	bics	r3, r2
    35a4:	6143      	str	r3, [r0, #20]
	}
}
    35a6:	b003      	add	sp, #12
    35a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    35aa:	6942      	ldr	r2, [r0, #20]
    35ac:	2301      	movs	r3, #1
    35ae:	40ab      	lsls	r3, r5
    35b0:	4313      	orrs	r3, r2
    35b2:	6143      	str	r3, [r0, #20]
    35b4:	e7f7      	b.n	35a6 <extint_chan_set_config+0x5e>
    35b6:	46c0      	nop			; (mov r8, r8)
    35b8:	00004b8d 	.word	0x00004b8d
    35bc:	40001800 	.word	0x40001800

000035c0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    35c0:	b500      	push	{lr}
    35c2:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    35c4:	ab01      	add	r3, sp, #4
    35c6:	2280      	movs	r2, #128	; 0x80
    35c8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    35ca:	780a      	ldrb	r2, [r1, #0]
    35cc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    35ce:	784a      	ldrb	r2, [r1, #1]
    35d0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    35d2:	788a      	ldrb	r2, [r1, #2]
    35d4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    35d6:	0019      	movs	r1, r3
    35d8:	4b01      	ldr	r3, [pc, #4]	; (35e0 <port_pin_set_config+0x20>)
    35da:	4798      	blx	r3
}
    35dc:	b003      	add	sp, #12
    35de:	bd00      	pop	{pc}
    35e0:	00004b8d 	.word	0x00004b8d

000035e4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    35e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    35e6:	46de      	mov	lr, fp
    35e8:	4657      	mov	r7, sl
    35ea:	464e      	mov	r6, r9
    35ec:	4645      	mov	r5, r8
    35ee:	b5e0      	push	{r5, r6, r7, lr}
    35f0:	b087      	sub	sp, #28
    35f2:	4680      	mov	r8, r0
    35f4:	9104      	str	r1, [sp, #16]
    35f6:	0016      	movs	r6, r2
    35f8:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    35fa:	2200      	movs	r2, #0
    35fc:	2300      	movs	r3, #0
    35fe:	2100      	movs	r1, #0
    3600:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    3602:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    3604:	2001      	movs	r0, #1
    3606:	0021      	movs	r1, r4
    3608:	9600      	str	r6, [sp, #0]
    360a:	9701      	str	r7, [sp, #4]
    360c:	465c      	mov	r4, fp
    360e:	9403      	str	r4, [sp, #12]
    3610:	4644      	mov	r4, r8
    3612:	9405      	str	r4, [sp, #20]
    3614:	e013      	b.n	363e <long_division+0x5a>
    3616:	2420      	movs	r4, #32
    3618:	1a64      	subs	r4, r4, r1
    361a:	0005      	movs	r5, r0
    361c:	40e5      	lsrs	r5, r4
    361e:	46a8      	mov	r8, r5
    3620:	e014      	b.n	364c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    3622:	9c00      	ldr	r4, [sp, #0]
    3624:	9d01      	ldr	r5, [sp, #4]
    3626:	1b12      	subs	r2, r2, r4
    3628:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    362a:	465c      	mov	r4, fp
    362c:	464d      	mov	r5, r9
    362e:	432c      	orrs	r4, r5
    3630:	46a3      	mov	fp, r4
    3632:	9c03      	ldr	r4, [sp, #12]
    3634:	4645      	mov	r5, r8
    3636:	432c      	orrs	r4, r5
    3638:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    363a:	3901      	subs	r1, #1
    363c:	d325      	bcc.n	368a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    363e:	2420      	movs	r4, #32
    3640:	4264      	negs	r4, r4
    3642:	190c      	adds	r4, r1, r4
    3644:	d4e7      	bmi.n	3616 <long_division+0x32>
    3646:	0005      	movs	r5, r0
    3648:	40a5      	lsls	r5, r4
    364a:	46a8      	mov	r8, r5
    364c:	0004      	movs	r4, r0
    364e:	408c      	lsls	r4, r1
    3650:	46a1      	mov	r9, r4
		r = r << 1;
    3652:	1892      	adds	r2, r2, r2
    3654:	415b      	adcs	r3, r3
    3656:	0014      	movs	r4, r2
    3658:	001d      	movs	r5, r3
		if (n & bit_shift) {
    365a:	9e05      	ldr	r6, [sp, #20]
    365c:	464f      	mov	r7, r9
    365e:	403e      	ands	r6, r7
    3660:	46b4      	mov	ip, r6
    3662:	9e04      	ldr	r6, [sp, #16]
    3664:	4647      	mov	r7, r8
    3666:	403e      	ands	r6, r7
    3668:	46b2      	mov	sl, r6
    366a:	4666      	mov	r6, ip
    366c:	4657      	mov	r7, sl
    366e:	433e      	orrs	r6, r7
    3670:	d003      	beq.n	367a <long_division+0x96>
			r |= 0x01;
    3672:	0006      	movs	r6, r0
    3674:	4326      	orrs	r6, r4
    3676:	0032      	movs	r2, r6
    3678:	002b      	movs	r3, r5
		if (r >= d) {
    367a:	9c00      	ldr	r4, [sp, #0]
    367c:	9d01      	ldr	r5, [sp, #4]
    367e:	429d      	cmp	r5, r3
    3680:	d8db      	bhi.n	363a <long_division+0x56>
    3682:	d1ce      	bne.n	3622 <long_division+0x3e>
    3684:	4294      	cmp	r4, r2
    3686:	d8d8      	bhi.n	363a <long_division+0x56>
    3688:	e7cb      	b.n	3622 <long_division+0x3e>
    368a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    368c:	4658      	mov	r0, fp
    368e:	0019      	movs	r1, r3
    3690:	b007      	add	sp, #28
    3692:	bc3c      	pop	{r2, r3, r4, r5}
    3694:	4690      	mov	r8, r2
    3696:	4699      	mov	r9, r3
    3698:	46a2      	mov	sl, r4
    369a:	46ab      	mov	fp, r5
    369c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000369e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    369e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    36a0:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    36a2:	2340      	movs	r3, #64	; 0x40
    36a4:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    36a6:	4281      	cmp	r1, r0
    36a8:	d202      	bcs.n	36b0 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    36aa:	0018      	movs	r0, r3
    36ac:	bd10      	pop	{r4, pc}
		baud_calculated++;
    36ae:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    36b0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    36b2:	1c63      	adds	r3, r4, #1
    36b4:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    36b6:	4288      	cmp	r0, r1
    36b8:	d9f9      	bls.n	36ae <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    36ba:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    36bc:	2cff      	cmp	r4, #255	; 0xff
    36be:	d8f4      	bhi.n	36aa <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    36c0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    36c2:	2300      	movs	r3, #0
    36c4:	e7f1      	b.n	36aa <_sercom_get_sync_baud_val+0xc>
	...

000036c8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    36c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    36ca:	b083      	sub	sp, #12
    36cc:	000f      	movs	r7, r1
    36ce:	0016      	movs	r6, r2
    36d0:	aa08      	add	r2, sp, #32
    36d2:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    36d4:	0004      	movs	r4, r0
    36d6:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    36d8:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    36da:	42bc      	cmp	r4, r7
    36dc:	d902      	bls.n	36e4 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    36de:	0010      	movs	r0, r2
    36e0:	b003      	add	sp, #12
    36e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    36e4:	2b00      	cmp	r3, #0
    36e6:	d114      	bne.n	3712 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    36e8:	0002      	movs	r2, r0
    36ea:	0008      	movs	r0, r1
    36ec:	2100      	movs	r1, #0
    36ee:	4c19      	ldr	r4, [pc, #100]	; (3754 <_sercom_get_async_baud_val+0x8c>)
    36f0:	47a0      	blx	r4
    36f2:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    36f4:	003a      	movs	r2, r7
    36f6:	2300      	movs	r3, #0
    36f8:	2000      	movs	r0, #0
    36fa:	4c17      	ldr	r4, [pc, #92]	; (3758 <_sercom_get_async_baud_val+0x90>)
    36fc:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    36fe:	2200      	movs	r2, #0
    3700:	2301      	movs	r3, #1
    3702:	1a12      	subs	r2, r2, r0
    3704:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    3706:	0c12      	lsrs	r2, r2, #16
    3708:	041b      	lsls	r3, r3, #16
    370a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    370c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    370e:	2200      	movs	r2, #0
    3710:	e7e5      	b.n	36de <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    3712:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    3714:	2b01      	cmp	r3, #1
    3716:	d1f9      	bne.n	370c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    3718:	000a      	movs	r2, r1
    371a:	2300      	movs	r3, #0
    371c:	2100      	movs	r1, #0
    371e:	4c0d      	ldr	r4, [pc, #52]	; (3754 <_sercom_get_async_baud_val+0x8c>)
    3720:	47a0      	blx	r4
    3722:	0002      	movs	r2, r0
    3724:	000b      	movs	r3, r1
    3726:	9200      	str	r2, [sp, #0]
    3728:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    372a:	0038      	movs	r0, r7
    372c:	2100      	movs	r1, #0
    372e:	4c0a      	ldr	r4, [pc, #40]	; (3758 <_sercom_get_async_baud_val+0x90>)
    3730:	47a0      	blx	r4
    3732:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    3734:	2380      	movs	r3, #128	; 0x80
    3736:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3738:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    373a:	4298      	cmp	r0, r3
    373c:	d8cf      	bhi.n	36de <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    373e:	0f79      	lsrs	r1, r7, #29
    3740:	00f8      	lsls	r0, r7, #3
    3742:	9a00      	ldr	r2, [sp, #0]
    3744:	9b01      	ldr	r3, [sp, #4]
    3746:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    3748:	00ea      	lsls	r2, r5, #3
    374a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    374c:	b2d2      	uxtb	r2, r2
    374e:	0352      	lsls	r2, r2, #13
    3750:	432a      	orrs	r2, r5
    3752:	e7db      	b.n	370c <_sercom_get_async_baud_val+0x44>
    3754:	00006ccd 	.word	0x00006ccd
    3758:	000035e5 	.word	0x000035e5

0000375c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    375c:	b510      	push	{r4, lr}
    375e:	b082      	sub	sp, #8
    3760:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    3762:	4b0e      	ldr	r3, [pc, #56]	; (379c <sercom_set_gclk_generator+0x40>)
    3764:	781b      	ldrb	r3, [r3, #0]
    3766:	2b00      	cmp	r3, #0
    3768:	d007      	beq.n	377a <sercom_set_gclk_generator+0x1e>
    376a:	2900      	cmp	r1, #0
    376c:	d105      	bne.n	377a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    376e:	4b0b      	ldr	r3, [pc, #44]	; (379c <sercom_set_gclk_generator+0x40>)
    3770:	785b      	ldrb	r3, [r3, #1]
    3772:	4283      	cmp	r3, r0
    3774:	d010      	beq.n	3798 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    3776:	201d      	movs	r0, #29
    3778:	e00c      	b.n	3794 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    377a:	a901      	add	r1, sp, #4
    377c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    377e:	2013      	movs	r0, #19
    3780:	4b07      	ldr	r3, [pc, #28]	; (37a0 <sercom_set_gclk_generator+0x44>)
    3782:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    3784:	2013      	movs	r0, #19
    3786:	4b07      	ldr	r3, [pc, #28]	; (37a4 <sercom_set_gclk_generator+0x48>)
    3788:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    378a:	4b04      	ldr	r3, [pc, #16]	; (379c <sercom_set_gclk_generator+0x40>)
    378c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    378e:	2201      	movs	r2, #1
    3790:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    3792:	2000      	movs	r0, #0
}
    3794:	b002      	add	sp, #8
    3796:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    3798:	2000      	movs	r0, #0
    379a:	e7fb      	b.n	3794 <sercom_set_gclk_generator+0x38>
    379c:	20000100 	.word	0x20000100
    37a0:	00004a95 	.word	0x00004a95
    37a4:	00004a09 	.word	0x00004a09

000037a8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    37a8:	4b40      	ldr	r3, [pc, #256]	; (38ac <_sercom_get_default_pad+0x104>)
    37aa:	4298      	cmp	r0, r3
    37ac:	d031      	beq.n	3812 <_sercom_get_default_pad+0x6a>
    37ae:	d90a      	bls.n	37c6 <_sercom_get_default_pad+0x1e>
    37b0:	4b3f      	ldr	r3, [pc, #252]	; (38b0 <_sercom_get_default_pad+0x108>)
    37b2:	4298      	cmp	r0, r3
    37b4:	d04d      	beq.n	3852 <_sercom_get_default_pad+0xaa>
    37b6:	4b3f      	ldr	r3, [pc, #252]	; (38b4 <_sercom_get_default_pad+0x10c>)
    37b8:	4298      	cmp	r0, r3
    37ba:	d05a      	beq.n	3872 <_sercom_get_default_pad+0xca>
    37bc:	4b3e      	ldr	r3, [pc, #248]	; (38b8 <_sercom_get_default_pad+0x110>)
    37be:	4298      	cmp	r0, r3
    37c0:	d037      	beq.n	3832 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    37c2:	2000      	movs	r0, #0
}
    37c4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    37c6:	4b3d      	ldr	r3, [pc, #244]	; (38bc <_sercom_get_default_pad+0x114>)
    37c8:	4298      	cmp	r0, r3
    37ca:	d00c      	beq.n	37e6 <_sercom_get_default_pad+0x3e>
    37cc:	4b3c      	ldr	r3, [pc, #240]	; (38c0 <_sercom_get_default_pad+0x118>)
    37ce:	4298      	cmp	r0, r3
    37d0:	d1f7      	bne.n	37c2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    37d2:	2901      	cmp	r1, #1
    37d4:	d017      	beq.n	3806 <_sercom_get_default_pad+0x5e>
    37d6:	2900      	cmp	r1, #0
    37d8:	d05d      	beq.n	3896 <_sercom_get_default_pad+0xee>
    37da:	2902      	cmp	r1, #2
    37dc:	d015      	beq.n	380a <_sercom_get_default_pad+0x62>
    37de:	2903      	cmp	r1, #3
    37e0:	d015      	beq.n	380e <_sercom_get_default_pad+0x66>
	return 0;
    37e2:	2000      	movs	r0, #0
    37e4:	e7ee      	b.n	37c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    37e6:	2901      	cmp	r1, #1
    37e8:	d007      	beq.n	37fa <_sercom_get_default_pad+0x52>
    37ea:	2900      	cmp	r1, #0
    37ec:	d051      	beq.n	3892 <_sercom_get_default_pad+0xea>
    37ee:	2902      	cmp	r1, #2
    37f0:	d005      	beq.n	37fe <_sercom_get_default_pad+0x56>
    37f2:	2903      	cmp	r1, #3
    37f4:	d005      	beq.n	3802 <_sercom_get_default_pad+0x5a>
	return 0;
    37f6:	2000      	movs	r0, #0
    37f8:	e7e4      	b.n	37c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    37fa:	4832      	ldr	r0, [pc, #200]	; (38c4 <_sercom_get_default_pad+0x11c>)
    37fc:	e7e2      	b.n	37c4 <_sercom_get_default_pad+0x1c>
    37fe:	4832      	ldr	r0, [pc, #200]	; (38c8 <_sercom_get_default_pad+0x120>)
    3800:	e7e0      	b.n	37c4 <_sercom_get_default_pad+0x1c>
    3802:	4832      	ldr	r0, [pc, #200]	; (38cc <_sercom_get_default_pad+0x124>)
    3804:	e7de      	b.n	37c4 <_sercom_get_default_pad+0x1c>
    3806:	4832      	ldr	r0, [pc, #200]	; (38d0 <_sercom_get_default_pad+0x128>)
    3808:	e7dc      	b.n	37c4 <_sercom_get_default_pad+0x1c>
    380a:	4832      	ldr	r0, [pc, #200]	; (38d4 <_sercom_get_default_pad+0x12c>)
    380c:	e7da      	b.n	37c4 <_sercom_get_default_pad+0x1c>
    380e:	4832      	ldr	r0, [pc, #200]	; (38d8 <_sercom_get_default_pad+0x130>)
    3810:	e7d8      	b.n	37c4 <_sercom_get_default_pad+0x1c>
    3812:	2901      	cmp	r1, #1
    3814:	d007      	beq.n	3826 <_sercom_get_default_pad+0x7e>
    3816:	2900      	cmp	r1, #0
    3818:	d03f      	beq.n	389a <_sercom_get_default_pad+0xf2>
    381a:	2902      	cmp	r1, #2
    381c:	d005      	beq.n	382a <_sercom_get_default_pad+0x82>
    381e:	2903      	cmp	r1, #3
    3820:	d005      	beq.n	382e <_sercom_get_default_pad+0x86>
	return 0;
    3822:	2000      	movs	r0, #0
    3824:	e7ce      	b.n	37c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3826:	482d      	ldr	r0, [pc, #180]	; (38dc <_sercom_get_default_pad+0x134>)
    3828:	e7cc      	b.n	37c4 <_sercom_get_default_pad+0x1c>
    382a:	482d      	ldr	r0, [pc, #180]	; (38e0 <_sercom_get_default_pad+0x138>)
    382c:	e7ca      	b.n	37c4 <_sercom_get_default_pad+0x1c>
    382e:	482d      	ldr	r0, [pc, #180]	; (38e4 <_sercom_get_default_pad+0x13c>)
    3830:	e7c8      	b.n	37c4 <_sercom_get_default_pad+0x1c>
    3832:	2901      	cmp	r1, #1
    3834:	d007      	beq.n	3846 <_sercom_get_default_pad+0x9e>
    3836:	2900      	cmp	r1, #0
    3838:	d031      	beq.n	389e <_sercom_get_default_pad+0xf6>
    383a:	2902      	cmp	r1, #2
    383c:	d005      	beq.n	384a <_sercom_get_default_pad+0xa2>
    383e:	2903      	cmp	r1, #3
    3840:	d005      	beq.n	384e <_sercom_get_default_pad+0xa6>
	return 0;
    3842:	2000      	movs	r0, #0
    3844:	e7be      	b.n	37c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3846:	4828      	ldr	r0, [pc, #160]	; (38e8 <_sercom_get_default_pad+0x140>)
    3848:	e7bc      	b.n	37c4 <_sercom_get_default_pad+0x1c>
    384a:	4828      	ldr	r0, [pc, #160]	; (38ec <_sercom_get_default_pad+0x144>)
    384c:	e7ba      	b.n	37c4 <_sercom_get_default_pad+0x1c>
    384e:	4828      	ldr	r0, [pc, #160]	; (38f0 <_sercom_get_default_pad+0x148>)
    3850:	e7b8      	b.n	37c4 <_sercom_get_default_pad+0x1c>
    3852:	2901      	cmp	r1, #1
    3854:	d007      	beq.n	3866 <_sercom_get_default_pad+0xbe>
    3856:	2900      	cmp	r1, #0
    3858:	d023      	beq.n	38a2 <_sercom_get_default_pad+0xfa>
    385a:	2902      	cmp	r1, #2
    385c:	d005      	beq.n	386a <_sercom_get_default_pad+0xc2>
    385e:	2903      	cmp	r1, #3
    3860:	d005      	beq.n	386e <_sercom_get_default_pad+0xc6>
	return 0;
    3862:	2000      	movs	r0, #0
    3864:	e7ae      	b.n	37c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3866:	4823      	ldr	r0, [pc, #140]	; (38f4 <_sercom_get_default_pad+0x14c>)
    3868:	e7ac      	b.n	37c4 <_sercom_get_default_pad+0x1c>
    386a:	4823      	ldr	r0, [pc, #140]	; (38f8 <_sercom_get_default_pad+0x150>)
    386c:	e7aa      	b.n	37c4 <_sercom_get_default_pad+0x1c>
    386e:	4823      	ldr	r0, [pc, #140]	; (38fc <_sercom_get_default_pad+0x154>)
    3870:	e7a8      	b.n	37c4 <_sercom_get_default_pad+0x1c>
    3872:	2901      	cmp	r1, #1
    3874:	d007      	beq.n	3886 <_sercom_get_default_pad+0xde>
    3876:	2900      	cmp	r1, #0
    3878:	d015      	beq.n	38a6 <_sercom_get_default_pad+0xfe>
    387a:	2902      	cmp	r1, #2
    387c:	d005      	beq.n	388a <_sercom_get_default_pad+0xe2>
    387e:	2903      	cmp	r1, #3
    3880:	d005      	beq.n	388e <_sercom_get_default_pad+0xe6>
	return 0;
    3882:	2000      	movs	r0, #0
    3884:	e79e      	b.n	37c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3886:	481e      	ldr	r0, [pc, #120]	; (3900 <_sercom_get_default_pad+0x158>)
    3888:	e79c      	b.n	37c4 <_sercom_get_default_pad+0x1c>
    388a:	481e      	ldr	r0, [pc, #120]	; (3904 <_sercom_get_default_pad+0x15c>)
    388c:	e79a      	b.n	37c4 <_sercom_get_default_pad+0x1c>
    388e:	481e      	ldr	r0, [pc, #120]	; (3908 <_sercom_get_default_pad+0x160>)
    3890:	e798      	b.n	37c4 <_sercom_get_default_pad+0x1c>
    3892:	481e      	ldr	r0, [pc, #120]	; (390c <_sercom_get_default_pad+0x164>)
    3894:	e796      	b.n	37c4 <_sercom_get_default_pad+0x1c>
    3896:	2003      	movs	r0, #3
    3898:	e794      	b.n	37c4 <_sercom_get_default_pad+0x1c>
    389a:	481d      	ldr	r0, [pc, #116]	; (3910 <_sercom_get_default_pad+0x168>)
    389c:	e792      	b.n	37c4 <_sercom_get_default_pad+0x1c>
    389e:	481d      	ldr	r0, [pc, #116]	; (3914 <_sercom_get_default_pad+0x16c>)
    38a0:	e790      	b.n	37c4 <_sercom_get_default_pad+0x1c>
    38a2:	481d      	ldr	r0, [pc, #116]	; (3918 <_sercom_get_default_pad+0x170>)
    38a4:	e78e      	b.n	37c4 <_sercom_get_default_pad+0x1c>
    38a6:	481d      	ldr	r0, [pc, #116]	; (391c <_sercom_get_default_pad+0x174>)
    38a8:	e78c      	b.n	37c4 <_sercom_get_default_pad+0x1c>
    38aa:	46c0      	nop			; (mov r8, r8)
    38ac:	42001000 	.word	0x42001000
    38b0:	42001800 	.word	0x42001800
    38b4:	42001c00 	.word	0x42001c00
    38b8:	42001400 	.word	0x42001400
    38bc:	42000800 	.word	0x42000800
    38c0:	42000c00 	.word	0x42000c00
    38c4:	00050003 	.word	0x00050003
    38c8:	00060003 	.word	0x00060003
    38cc:	00070003 	.word	0x00070003
    38d0:	00010003 	.word	0x00010003
    38d4:	001e0003 	.word	0x001e0003
    38d8:	001f0003 	.word	0x001f0003
    38dc:	00090003 	.word	0x00090003
    38e0:	000a0003 	.word	0x000a0003
    38e4:	000b0003 	.word	0x000b0003
    38e8:	00110003 	.word	0x00110003
    38ec:	00120003 	.word	0x00120003
    38f0:	00130003 	.word	0x00130003
    38f4:	000d0003 	.word	0x000d0003
    38f8:	000e0003 	.word	0x000e0003
    38fc:	000f0003 	.word	0x000f0003
    3900:	00170003 	.word	0x00170003
    3904:	00180003 	.word	0x00180003
    3908:	00190003 	.word	0x00190003
    390c:	00040003 	.word	0x00040003
    3910:	00080003 	.word	0x00080003
    3914:	00100003 	.word	0x00100003
    3918:	000c0003 	.word	0x000c0003
    391c:	00160003 	.word	0x00160003

00003920 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    3920:	b530      	push	{r4, r5, lr}
    3922:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    3924:	4b0b      	ldr	r3, [pc, #44]	; (3954 <_sercom_get_sercom_inst_index+0x34>)
    3926:	466a      	mov	r2, sp
    3928:	cb32      	ldmia	r3!, {r1, r4, r5}
    392a:	c232      	stmia	r2!, {r1, r4, r5}
    392c:	cb32      	ldmia	r3!, {r1, r4, r5}
    392e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    3930:	9b00      	ldr	r3, [sp, #0]
    3932:	4283      	cmp	r3, r0
    3934:	d00b      	beq.n	394e <_sercom_get_sercom_inst_index+0x2e>
    3936:	2301      	movs	r3, #1
    3938:	009a      	lsls	r2, r3, #2
    393a:	4669      	mov	r1, sp
    393c:	5852      	ldr	r2, [r2, r1]
    393e:	4282      	cmp	r2, r0
    3940:	d006      	beq.n	3950 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3942:	3301      	adds	r3, #1
    3944:	2b06      	cmp	r3, #6
    3946:	d1f7      	bne.n	3938 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    3948:	2000      	movs	r0, #0
}
    394a:	b007      	add	sp, #28
    394c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    394e:	2300      	movs	r3, #0
			return i;
    3950:	b2d8      	uxtb	r0, r3
    3952:	e7fa      	b.n	394a <_sercom_get_sercom_inst_index+0x2a>
    3954:	000090ac 	.word	0x000090ac

00003958 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    3958:	4770      	bx	lr
	...

0000395c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    395c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    395e:	4b0a      	ldr	r3, [pc, #40]	; (3988 <_sercom_set_handler+0x2c>)
    3960:	781b      	ldrb	r3, [r3, #0]
    3962:	2b00      	cmp	r3, #0
    3964:	d10c      	bne.n	3980 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3966:	4f09      	ldr	r7, [pc, #36]	; (398c <_sercom_set_handler+0x30>)
    3968:	4e09      	ldr	r6, [pc, #36]	; (3990 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    396a:	4d0a      	ldr	r5, [pc, #40]	; (3994 <_sercom_set_handler+0x38>)
    396c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    396e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    3970:	195a      	adds	r2, r3, r5
    3972:	6014      	str	r4, [r2, #0]
    3974:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3976:	2b18      	cmp	r3, #24
    3978:	d1f9      	bne.n	396e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    397a:	2201      	movs	r2, #1
    397c:	4b02      	ldr	r3, [pc, #8]	; (3988 <_sercom_set_handler+0x2c>)
    397e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    3980:	0080      	lsls	r0, r0, #2
    3982:	4b02      	ldr	r3, [pc, #8]	; (398c <_sercom_set_handler+0x30>)
    3984:	50c1      	str	r1, [r0, r3]
}
    3986:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3988:	20000102 	.word	0x20000102
    398c:	20000104 	.word	0x20000104
    3990:	00003959 	.word	0x00003959
    3994:	200003fc 	.word	0x200003fc

00003998 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    3998:	b500      	push	{lr}
    399a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    399c:	2309      	movs	r3, #9
    399e:	466a      	mov	r2, sp
    39a0:	7013      	strb	r3, [r2, #0]
    39a2:	3301      	adds	r3, #1
    39a4:	7053      	strb	r3, [r2, #1]
    39a6:	3301      	adds	r3, #1
    39a8:	7093      	strb	r3, [r2, #2]
    39aa:	3301      	adds	r3, #1
    39ac:	70d3      	strb	r3, [r2, #3]
    39ae:	3301      	adds	r3, #1
    39b0:	7113      	strb	r3, [r2, #4]
    39b2:	3301      	adds	r3, #1
    39b4:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    39b6:	4b03      	ldr	r3, [pc, #12]	; (39c4 <_sercom_get_interrupt_vector+0x2c>)
    39b8:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    39ba:	466b      	mov	r3, sp
    39bc:	5618      	ldrsb	r0, [r3, r0]
}
    39be:	b003      	add	sp, #12
    39c0:	bd00      	pop	{pc}
    39c2:	46c0      	nop			; (mov r8, r8)
    39c4:	00003921 	.word	0x00003921

000039c8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    39c8:	b510      	push	{r4, lr}
    39ca:	4b02      	ldr	r3, [pc, #8]	; (39d4 <SERCOM0_Handler+0xc>)
    39cc:	681b      	ldr	r3, [r3, #0]
    39ce:	2000      	movs	r0, #0
    39d0:	4798      	blx	r3
    39d2:	bd10      	pop	{r4, pc}
    39d4:	20000104 	.word	0x20000104

000039d8 <SERCOM1_Handler>:
    39d8:	b510      	push	{r4, lr}
    39da:	4b02      	ldr	r3, [pc, #8]	; (39e4 <SERCOM1_Handler+0xc>)
    39dc:	685b      	ldr	r3, [r3, #4]
    39de:	2001      	movs	r0, #1
    39e0:	4798      	blx	r3
    39e2:	bd10      	pop	{r4, pc}
    39e4:	20000104 	.word	0x20000104

000039e8 <SERCOM2_Handler>:
    39e8:	b510      	push	{r4, lr}
    39ea:	4b02      	ldr	r3, [pc, #8]	; (39f4 <SERCOM2_Handler+0xc>)
    39ec:	689b      	ldr	r3, [r3, #8]
    39ee:	2002      	movs	r0, #2
    39f0:	4798      	blx	r3
    39f2:	bd10      	pop	{r4, pc}
    39f4:	20000104 	.word	0x20000104

000039f8 <SERCOM3_Handler>:
    39f8:	b510      	push	{r4, lr}
    39fa:	4b02      	ldr	r3, [pc, #8]	; (3a04 <SERCOM3_Handler+0xc>)
    39fc:	68db      	ldr	r3, [r3, #12]
    39fe:	2003      	movs	r0, #3
    3a00:	4798      	blx	r3
    3a02:	bd10      	pop	{r4, pc}
    3a04:	20000104 	.word	0x20000104

00003a08 <SERCOM4_Handler>:
    3a08:	b510      	push	{r4, lr}
    3a0a:	4b02      	ldr	r3, [pc, #8]	; (3a14 <SERCOM4_Handler+0xc>)
    3a0c:	691b      	ldr	r3, [r3, #16]
    3a0e:	2004      	movs	r0, #4
    3a10:	4798      	blx	r3
    3a12:	bd10      	pop	{r4, pc}
    3a14:	20000104 	.word	0x20000104

00003a18 <SERCOM5_Handler>:
    3a18:	b510      	push	{r4, lr}
    3a1a:	4b02      	ldr	r3, [pc, #8]	; (3a24 <SERCOM5_Handler+0xc>)
    3a1c:	695b      	ldr	r3, [r3, #20]
    3a1e:	2005      	movs	r0, #5
    3a20:	4798      	blx	r3
    3a22:	bd10      	pop	{r4, pc}
    3a24:	20000104 	.word	0x20000104

00003a28 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    3a28:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a2a:	b08b      	sub	sp, #44	; 0x2c
    3a2c:	0005      	movs	r5, r0
    3a2e:	000c      	movs	r4, r1
    3a30:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    3a32:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    3a34:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    3a36:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    3a38:	079b      	lsls	r3, r3, #30
    3a3a:	d501      	bpl.n	3a40 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    3a3c:	b00b      	add	sp, #44	; 0x2c
    3a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    3a40:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    3a42:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    3a44:	07db      	lsls	r3, r3, #31
    3a46:	d4f9      	bmi.n	3a3c <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3a48:	0008      	movs	r0, r1
    3a4a:	4b60      	ldr	r3, [pc, #384]	; (3bcc <spi_init+0x1a4>)
    3a4c:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    3a4e:	4a60      	ldr	r2, [pc, #384]	; (3bd0 <spi_init+0x1a8>)
    3a50:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    3a52:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3a54:	2301      	movs	r3, #1
    3a56:	40bb      	lsls	r3, r7
    3a58:	430b      	orrs	r3, r1
    3a5a:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    3a5c:	a909      	add	r1, sp, #36	; 0x24
    3a5e:	2724      	movs	r7, #36	; 0x24
    3a60:	5df3      	ldrb	r3, [r6, r7]
    3a62:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3a64:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3a66:	b2c3      	uxtb	r3, r0
    3a68:	9301      	str	r3, [sp, #4]
    3a6a:	0018      	movs	r0, r3
    3a6c:	4b59      	ldr	r3, [pc, #356]	; (3bd4 <spi_init+0x1ac>)
    3a6e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3a70:	9801      	ldr	r0, [sp, #4]
    3a72:	4b59      	ldr	r3, [pc, #356]	; (3bd8 <spi_init+0x1b0>)
    3a74:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3a76:	5df0      	ldrb	r0, [r6, r7]
    3a78:	2100      	movs	r1, #0
    3a7a:	4b58      	ldr	r3, [pc, #352]	; (3bdc <spi_init+0x1b4>)
    3a7c:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    3a7e:	7833      	ldrb	r3, [r6, #0]
    3a80:	2b01      	cmp	r3, #1
    3a82:	d038      	beq.n	3af6 <spi_init+0xce>
    3a84:	002b      	movs	r3, r5
    3a86:	330c      	adds	r3, #12
    3a88:	0029      	movs	r1, r5
    3a8a:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    3a8c:	2200      	movs	r2, #0
    3a8e:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    3a90:	428b      	cmp	r3, r1
    3a92:	d1fc      	bne.n	3a8e <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    3a94:	2300      	movs	r3, #0
    3a96:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    3a98:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    3a9a:	2400      	movs	r4, #0
    3a9c:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    3a9e:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    3aa0:	3336      	adds	r3, #54	; 0x36
    3aa2:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    3aa4:	3301      	adds	r3, #1
    3aa6:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    3aa8:	3301      	adds	r3, #1
    3aaa:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    3aac:	3b35      	subs	r3, #53	; 0x35
    3aae:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    3ab0:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    3ab2:	6828      	ldr	r0, [r5, #0]
    3ab4:	4b45      	ldr	r3, [pc, #276]	; (3bcc <spi_init+0x1a4>)
    3ab6:	4798      	blx	r3
    3ab8:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    3aba:	4949      	ldr	r1, [pc, #292]	; (3be0 <spi_init+0x1b8>)
    3abc:	4b49      	ldr	r3, [pc, #292]	; (3be4 <spi_init+0x1bc>)
    3abe:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    3ac0:	00bf      	lsls	r7, r7, #2
    3ac2:	4b49      	ldr	r3, [pc, #292]	; (3be8 <spi_init+0x1c0>)
    3ac4:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3ac6:	682f      	ldr	r7, [r5, #0]
    3ac8:	ab04      	add	r3, sp, #16
    3aca:	2280      	movs	r2, #128	; 0x80
    3acc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3ace:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3ad0:	3a7f      	subs	r2, #127	; 0x7f
    3ad2:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3ad4:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    3ad6:	7833      	ldrb	r3, [r6, #0]
    3ad8:	2b00      	cmp	r3, #0
    3ada:	d102      	bne.n	3ae2 <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    3adc:	2200      	movs	r2, #0
    3ade:	ab04      	add	r3, sp, #16
    3ae0:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    3ae2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    3ae4:	9305      	str	r3, [sp, #20]
    3ae6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    3ae8:	9306      	str	r3, [sp, #24]
    3aea:	6b33      	ldr	r3, [r6, #48]	; 0x30
    3aec:	9307      	str	r3, [sp, #28]
    3aee:	6b73      	ldr	r3, [r6, #52]	; 0x34
    3af0:	9308      	str	r3, [sp, #32]
    3af2:	2400      	movs	r4, #0
    3af4:	e00b      	b.n	3b0e <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    3af6:	6823      	ldr	r3, [r4, #0]
    3af8:	220c      	movs	r2, #12
    3afa:	4313      	orrs	r3, r2
    3afc:	6023      	str	r3, [r4, #0]
    3afe:	e7c1      	b.n	3a84 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    3b00:	0038      	movs	r0, r7
    3b02:	4b3a      	ldr	r3, [pc, #232]	; (3bec <spi_init+0x1c4>)
    3b04:	4798      	blx	r3
    3b06:	e00a      	b.n	3b1e <spi_init+0xf6>
    3b08:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    3b0a:	2c04      	cmp	r4, #4
    3b0c:	d010      	beq.n	3b30 <spi_init+0x108>
    3b0e:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3b10:	00a3      	lsls	r3, r4, #2
    3b12:	aa02      	add	r2, sp, #8
    3b14:	200c      	movs	r0, #12
    3b16:	1812      	adds	r2, r2, r0
    3b18:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    3b1a:	2800      	cmp	r0, #0
    3b1c:	d0f0      	beq.n	3b00 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    3b1e:	1c43      	adds	r3, r0, #1
    3b20:	d0f2      	beq.n	3b08 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    3b22:	a904      	add	r1, sp, #16
    3b24:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    3b26:	0c00      	lsrs	r0, r0, #16
    3b28:	b2c0      	uxtb	r0, r0
    3b2a:	4b31      	ldr	r3, [pc, #196]	; (3bf0 <spi_init+0x1c8>)
    3b2c:	4798      	blx	r3
    3b2e:	e7eb      	b.n	3b08 <spi_init+0xe0>
	module->mode             = config->mode;
    3b30:	7833      	ldrb	r3, [r6, #0]
    3b32:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    3b34:	7c33      	ldrb	r3, [r6, #16]
    3b36:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    3b38:	7cb3      	ldrb	r3, [r6, #18]
    3b3a:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    3b3c:	7d33      	ldrb	r3, [r6, #20]
    3b3e:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    3b40:	2200      	movs	r2, #0
    3b42:	ab02      	add	r3, sp, #8
    3b44:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    3b46:	7833      	ldrb	r3, [r6, #0]
    3b48:	2b01      	cmp	r3, #1
    3b4a:	d028      	beq.n	3b9e <spi_init+0x176>
	ctrla |= config->transfer_mode;
    3b4c:	6873      	ldr	r3, [r6, #4]
    3b4e:	68b2      	ldr	r2, [r6, #8]
    3b50:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    3b52:	68f2      	ldr	r2, [r6, #12]
    3b54:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    3b56:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    3b58:	7c72      	ldrb	r2, [r6, #17]
    3b5a:	2a00      	cmp	r2, #0
    3b5c:	d103      	bne.n	3b66 <spi_init+0x13e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    3b5e:	4a25      	ldr	r2, [pc, #148]	; (3bf4 <spi_init+0x1cc>)
    3b60:	7892      	ldrb	r2, [r2, #2]
    3b62:	0792      	lsls	r2, r2, #30
    3b64:	d501      	bpl.n	3b6a <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    3b66:	2280      	movs	r2, #128	; 0x80
    3b68:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    3b6a:	7cb2      	ldrb	r2, [r6, #18]
    3b6c:	2a00      	cmp	r2, #0
    3b6e:	d002      	beq.n	3b76 <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    3b70:	2280      	movs	r2, #128	; 0x80
    3b72:	0292      	lsls	r2, r2, #10
    3b74:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    3b76:	7cf2      	ldrb	r2, [r6, #19]
    3b78:	2a00      	cmp	r2, #0
    3b7a:	d002      	beq.n	3b82 <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    3b7c:	2280      	movs	r2, #128	; 0x80
    3b7e:	0092      	lsls	r2, r2, #2
    3b80:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    3b82:	7d32      	ldrb	r2, [r6, #20]
    3b84:	2a00      	cmp	r2, #0
    3b86:	d002      	beq.n	3b8e <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    3b88:	2280      	movs	r2, #128	; 0x80
    3b8a:	0192      	lsls	r2, r2, #6
    3b8c:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    3b8e:	683a      	ldr	r2, [r7, #0]
    3b90:	4313      	orrs	r3, r2
    3b92:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    3b94:	687b      	ldr	r3, [r7, #4]
    3b96:	430b      	orrs	r3, r1
    3b98:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    3b9a:	2000      	movs	r0, #0
    3b9c:	e74e      	b.n	3a3c <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3b9e:	6828      	ldr	r0, [r5, #0]
    3ba0:	4b0a      	ldr	r3, [pc, #40]	; (3bcc <spi_init+0x1a4>)
    3ba2:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3ba4:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    3ba6:	b2c0      	uxtb	r0, r0
    3ba8:	4b13      	ldr	r3, [pc, #76]	; (3bf8 <spi_init+0x1d0>)
    3baa:	4798      	blx	r3
    3bac:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    3bae:	ab02      	add	r3, sp, #8
    3bb0:	1d9a      	adds	r2, r3, #6
    3bb2:	69b0      	ldr	r0, [r6, #24]
    3bb4:	4b11      	ldr	r3, [pc, #68]	; (3bfc <spi_init+0x1d4>)
    3bb6:	4798      	blx	r3
    3bb8:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    3bba:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    3bbc:	2b00      	cmp	r3, #0
    3bbe:	d000      	beq.n	3bc2 <spi_init+0x19a>
    3bc0:	e73c      	b.n	3a3c <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    3bc2:	ab02      	add	r3, sp, #8
    3bc4:	3306      	adds	r3, #6
    3bc6:	781b      	ldrb	r3, [r3, #0]
    3bc8:	733b      	strb	r3, [r7, #12]
    3bca:	e7bf      	b.n	3b4c <spi_init+0x124>
    3bcc:	00003921 	.word	0x00003921
    3bd0:	40000400 	.word	0x40000400
    3bd4:	00004a95 	.word	0x00004a95
    3bd8:	00004a09 	.word	0x00004a09
    3bdc:	0000375d 	.word	0x0000375d
    3be0:	00003cf5 	.word	0x00003cf5
    3be4:	0000395d 	.word	0x0000395d
    3be8:	200003fc 	.word	0x200003fc
    3bec:	000037a9 	.word	0x000037a9
    3bf0:	00004b8d 	.word	0x00004b8d
    3bf4:	41002000 	.word	0x41002000
    3bf8:	00004ab1 	.word	0x00004ab1
    3bfc:	0000369f 	.word	0x0000369f

00003c00 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    3c00:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    3c02:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    3c04:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    3c06:	2c01      	cmp	r4, #1
    3c08:	d001      	beq.n	3c0e <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    3c0a:	0018      	movs	r0, r3
    3c0c:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    3c0e:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    3c10:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    3c12:	2c00      	cmp	r4, #0
    3c14:	d1f9      	bne.n	3c0a <spi_select_slave+0xa>
		if (select) {
    3c16:	2a00      	cmp	r2, #0
    3c18:	d058      	beq.n	3ccc <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    3c1a:	784b      	ldrb	r3, [r1, #1]
    3c1c:	2b00      	cmp	r3, #0
    3c1e:	d044      	beq.n	3caa <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3c20:	6803      	ldr	r3, [r0, #0]
    3c22:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    3c24:	07db      	lsls	r3, r3, #31
    3c26:	d410      	bmi.n	3c4a <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    3c28:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    3c2a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    3c2c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3c2e:	2900      	cmp	r1, #0
    3c30:	d104      	bne.n	3c3c <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    3c32:	0953      	lsrs	r3, r2, #5
    3c34:	01db      	lsls	r3, r3, #7
    3c36:	492e      	ldr	r1, [pc, #184]	; (3cf0 <spi_select_slave+0xf0>)
    3c38:	468c      	mov	ip, r1
    3c3a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3c3c:	211f      	movs	r1, #31
    3c3e:	4011      	ands	r1, r2
    3c40:	2201      	movs	r2, #1
    3c42:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    3c44:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    3c46:	2305      	movs	r3, #5
    3c48:	e7df      	b.n	3c0a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    3c4a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    3c4c:	09d4      	lsrs	r4, r2, #7
		return NULL;
    3c4e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3c50:	2c00      	cmp	r4, #0
    3c52:	d104      	bne.n	3c5e <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    3c54:	0953      	lsrs	r3, r2, #5
    3c56:	01db      	lsls	r3, r3, #7
    3c58:	4c25      	ldr	r4, [pc, #148]	; (3cf0 <spi_select_slave+0xf0>)
    3c5a:	46a4      	mov	ip, r4
    3c5c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3c5e:	241f      	movs	r4, #31
    3c60:	4014      	ands	r4, r2
    3c62:	2201      	movs	r2, #1
    3c64:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    3c66:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3c68:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3c6a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3c6c:	07d2      	lsls	r2, r2, #31
    3c6e:	d501      	bpl.n	3c74 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3c70:	788a      	ldrb	r2, [r1, #2]
    3c72:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    3c74:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    3c76:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    3c78:	2a00      	cmp	r2, #0
    3c7a:	d1c6      	bne.n	3c0a <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    3c7c:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    3c7e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3c80:	7e13      	ldrb	r3, [r2, #24]
    3c82:	420b      	tst	r3, r1
    3c84:	d0fc      	beq.n	3c80 <spi_select_slave+0x80>
    3c86:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    3c88:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    3c8a:	0749      	lsls	r1, r1, #29
    3c8c:	d5bd      	bpl.n	3c0a <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3c8e:	8b53      	ldrh	r3, [r2, #26]
    3c90:	075b      	lsls	r3, r3, #29
    3c92:	d501      	bpl.n	3c98 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3c94:	2304      	movs	r3, #4
    3c96:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3c98:	7983      	ldrb	r3, [r0, #6]
    3c9a:	2b01      	cmp	r3, #1
    3c9c:	d002      	beq.n	3ca4 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3c9e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3ca0:	2300      	movs	r3, #0
    3ca2:	e7b2      	b.n	3c0a <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3ca4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3ca6:	2300      	movs	r3, #0
    3ca8:	e7af      	b.n	3c0a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    3caa:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    3cac:	09d1      	lsrs	r1, r2, #7
		return NULL;
    3cae:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3cb0:	2900      	cmp	r1, #0
    3cb2:	d104      	bne.n	3cbe <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    3cb4:	0953      	lsrs	r3, r2, #5
    3cb6:	01db      	lsls	r3, r3, #7
    3cb8:	490d      	ldr	r1, [pc, #52]	; (3cf0 <spi_select_slave+0xf0>)
    3cba:	468c      	mov	ip, r1
    3cbc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3cbe:	211f      	movs	r1, #31
    3cc0:	4011      	ands	r1, r2
    3cc2:	2201      	movs	r2, #1
    3cc4:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    3cc6:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    3cc8:	2300      	movs	r3, #0
    3cca:	e79e      	b.n	3c0a <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    3ccc:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    3cce:	09d1      	lsrs	r1, r2, #7
		return NULL;
    3cd0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3cd2:	2900      	cmp	r1, #0
    3cd4:	d104      	bne.n	3ce0 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    3cd6:	0953      	lsrs	r3, r2, #5
    3cd8:	01db      	lsls	r3, r3, #7
    3cda:	4905      	ldr	r1, [pc, #20]	; (3cf0 <spi_select_slave+0xf0>)
    3cdc:	468c      	mov	ip, r1
    3cde:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3ce0:	211f      	movs	r1, #31
    3ce2:	4011      	ands	r1, r2
    3ce4:	2201      	movs	r2, #1
    3ce6:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    3ce8:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    3cea:	2300      	movs	r3, #0
    3cec:	e78d      	b.n	3c0a <spi_select_slave+0xa>
    3cee:	46c0      	nop			; (mov r8, r8)
    3cf0:	41004400 	.word	0x41004400

00003cf4 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    3cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    3cf6:	0080      	lsls	r0, r0, #2
    3cf8:	4b70      	ldr	r3, [pc, #448]	; (3ebc <_spi_interrupt_handler+0x1c8>)
    3cfa:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3cfc:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    3cfe:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    3d00:	5ce7      	ldrb	r7, [r4, r3]
    3d02:	2236      	movs	r2, #54	; 0x36
    3d04:	5ca2      	ldrb	r2, [r4, r2]
    3d06:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    3d08:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    3d0a:	7db5      	ldrb	r5, [r6, #22]
    3d0c:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    3d0e:	07eb      	lsls	r3, r5, #31
    3d10:	d502      	bpl.n	3d18 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    3d12:	7963      	ldrb	r3, [r4, #5]
    3d14:	2b01      	cmp	r3, #1
    3d16:	d01e      	beq.n	3d56 <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    3d18:	076b      	lsls	r3, r5, #29
    3d1a:	d511      	bpl.n	3d40 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3d1c:	8b73      	ldrh	r3, [r6, #26]
    3d1e:	075b      	lsls	r3, r3, #29
    3d20:	d55a      	bpl.n	3dd8 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    3d22:	7a63      	ldrb	r3, [r4, #9]
    3d24:	2b01      	cmp	r3, #1
    3d26:	d008      	beq.n	3d3a <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    3d28:	221e      	movs	r2, #30
    3d2a:	2338      	movs	r3, #56	; 0x38
    3d2c:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    3d2e:	3b35      	subs	r3, #53	; 0x35
    3d30:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    3d32:	3302      	adds	r3, #2
    3d34:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    3d36:	073b      	lsls	r3, r7, #28
    3d38:	d44a      	bmi.n	3dd0 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    3d3a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3d3c:	2304      	movs	r3, #4
    3d3e:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    3d40:	07ab      	lsls	r3, r5, #30
    3d42:	d503      	bpl.n	3d4c <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    3d44:	7963      	ldrb	r3, [r4, #5]
    3d46:	2b01      	cmp	r3, #1
    3d48:	d100      	bne.n	3d4c <_spi_interrupt_handler+0x58>
    3d4a:	e097      	b.n	3e7c <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    3d4c:	b26d      	sxtb	r5, r5
    3d4e:	2d00      	cmp	r5, #0
    3d50:	da00      	bge.n	3d54 <_spi_interrupt_handler+0x60>
    3d52:	e0a9      	b.n	3ea8 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    3d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    3d56:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    3d58:	2b00      	cmp	r3, #0
    3d5a:	d022      	beq.n	3da2 <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    3d5c:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    3d5e:	2b00      	cmp	r3, #0
    3d60:	d0da      	beq.n	3d18 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3d62:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    3d64:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3d66:	7813      	ldrb	r3, [r2, #0]
    3d68:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    3d6a:	1c50      	adds	r0, r2, #1
    3d6c:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3d6e:	79a0      	ldrb	r0, [r4, #6]
    3d70:	2801      	cmp	r0, #1
    3d72:	d027      	beq.n	3dc4 <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    3d74:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    3d76:	05db      	lsls	r3, r3, #23
    3d78:	0ddb      	lsrs	r3, r3, #23
    3d7a:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    3d7c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    3d7e:	3b01      	subs	r3, #1
    3d80:	b29b      	uxth	r3, r3
    3d82:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    3d84:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    3d86:	b29b      	uxth	r3, r3
    3d88:	2b00      	cmp	r3, #0
    3d8a:	d1c5      	bne.n	3d18 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    3d8c:	3301      	adds	r3, #1
    3d8e:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    3d90:	7a63      	ldrb	r3, [r4, #9]
    3d92:	2b01      	cmp	r3, #1
    3d94:	d1c0      	bne.n	3d18 <_spi_interrupt_handler+0x24>
    3d96:	79e3      	ldrb	r3, [r4, #7]
    3d98:	2b00      	cmp	r3, #0
    3d9a:	d1bd      	bne.n	3d18 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    3d9c:	3302      	adds	r3, #2
    3d9e:	75b3      	strb	r3, [r6, #22]
    3da0:	e7ba      	b.n	3d18 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    3da2:	4b47      	ldr	r3, [pc, #284]	; (3ec0 <_spi_interrupt_handler+0x1cc>)
    3da4:	881b      	ldrh	r3, [r3, #0]
    3da6:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    3da8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3daa:	3b01      	subs	r3, #1
    3dac:	b29b      	uxth	r3, r3
    3dae:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    3db0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3db2:	b29b      	uxth	r3, r3
    3db4:	2b00      	cmp	r3, #0
    3db6:	d101      	bne.n	3dbc <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    3db8:	3301      	adds	r3, #1
    3dba:	7533      	strb	r3, [r6, #20]
		if (0
    3dbc:	7963      	ldrb	r3, [r4, #5]
    3dbe:	2b01      	cmp	r3, #1
    3dc0:	d0cc      	beq.n	3d5c <_spi_interrupt_handler+0x68>
    3dc2:	e7a9      	b.n	3d18 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    3dc4:	7850      	ldrb	r0, [r2, #1]
    3dc6:	0200      	lsls	r0, r0, #8
    3dc8:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    3dca:	3202      	adds	r2, #2
    3dcc:	62e2      	str	r2, [r4, #44]	; 0x2c
    3dce:	e7d2      	b.n	3d76 <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    3dd0:	0020      	movs	r0, r4
    3dd2:	69a3      	ldr	r3, [r4, #24]
    3dd4:	4798      	blx	r3
    3dd6:	e7b0      	b.n	3d3a <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    3dd8:	7a63      	ldrb	r3, [r4, #9]
    3dda:	2b01      	cmp	r3, #1
    3ddc:	d028      	beq.n	3e30 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3dde:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    3de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3de2:	05db      	lsls	r3, r3, #23
    3de4:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    3de6:	b2da      	uxtb	r2, r3
    3de8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    3dea:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    3dec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3dee:	1c51      	adds	r1, r2, #1
    3df0:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3df2:	79a1      	ldrb	r1, [r4, #6]
    3df4:	2901      	cmp	r1, #1
    3df6:	d034      	beq.n	3e62 <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    3df8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    3dfa:	3b01      	subs	r3, #1
    3dfc:	b29b      	uxth	r3, r3
    3dfe:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    3e00:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    3e02:	b29b      	uxth	r3, r3
    3e04:	2b00      	cmp	r3, #0
    3e06:	d000      	beq.n	3e0a <_spi_interrupt_handler+0x116>
    3e08:	e79a      	b.n	3d40 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    3e0a:	2200      	movs	r2, #0
    3e0c:	3338      	adds	r3, #56	; 0x38
    3e0e:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    3e10:	3b34      	subs	r3, #52	; 0x34
    3e12:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    3e14:	7a63      	ldrb	r3, [r4, #9]
    3e16:	2b02      	cmp	r3, #2
    3e18:	d029      	beq.n	3e6e <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    3e1a:	7a63      	ldrb	r3, [r4, #9]
    3e1c:	2b00      	cmp	r3, #0
    3e1e:	d000      	beq.n	3e22 <_spi_interrupt_handler+0x12e>
    3e20:	e78e      	b.n	3d40 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    3e22:	07bb      	lsls	r3, r7, #30
    3e24:	d400      	bmi.n	3e28 <_spi_interrupt_handler+0x134>
    3e26:	e78b      	b.n	3d40 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    3e28:	0020      	movs	r0, r4
    3e2a:	6923      	ldr	r3, [r4, #16]
    3e2c:	4798      	blx	r3
    3e2e:	e787      	b.n	3d40 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3e30:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    3e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    3e34:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3e36:	3b01      	subs	r3, #1
    3e38:	b29b      	uxth	r3, r3
    3e3a:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    3e3c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3e3e:	b29b      	uxth	r3, r3
    3e40:	2b00      	cmp	r3, #0
    3e42:	d000      	beq.n	3e46 <_spi_interrupt_handler+0x152>
    3e44:	e77c      	b.n	3d40 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    3e46:	3304      	adds	r3, #4
    3e48:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    3e4a:	2200      	movs	r2, #0
    3e4c:	3334      	adds	r3, #52	; 0x34
    3e4e:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    3e50:	3b35      	subs	r3, #53	; 0x35
    3e52:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    3e54:	07fb      	lsls	r3, r7, #31
    3e56:	d400      	bmi.n	3e5a <_spi_interrupt_handler+0x166>
    3e58:	e772      	b.n	3d40 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    3e5a:	0020      	movs	r0, r4
    3e5c:	68e3      	ldr	r3, [r4, #12]
    3e5e:	4798      	blx	r3
    3e60:	e76e      	b.n	3d40 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    3e62:	0a1b      	lsrs	r3, r3, #8
    3e64:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    3e66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3e68:	3301      	adds	r3, #1
    3e6a:	62a3      	str	r3, [r4, #40]	; 0x28
    3e6c:	e7c4      	b.n	3df8 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    3e6e:	077b      	lsls	r3, r7, #29
    3e70:	d400      	bmi.n	3e74 <_spi_interrupt_handler+0x180>
    3e72:	e765      	b.n	3d40 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    3e74:	0020      	movs	r0, r4
    3e76:	6963      	ldr	r3, [r4, #20]
    3e78:	4798      	blx	r3
    3e7a:	e761      	b.n	3d40 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    3e7c:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    3e7e:	2b01      	cmp	r3, #1
    3e80:	d000      	beq.n	3e84 <_spi_interrupt_handler+0x190>
    3e82:	e763      	b.n	3d4c <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    3e84:	79e3      	ldrb	r3, [r4, #7]
    3e86:	2b00      	cmp	r3, #0
    3e88:	d000      	beq.n	3e8c <_spi_interrupt_handler+0x198>
    3e8a:	e75f      	b.n	3d4c <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    3e8c:	3302      	adds	r3, #2
    3e8e:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    3e90:	3301      	adds	r3, #1
    3e92:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    3e94:	2200      	movs	r2, #0
    3e96:	3335      	adds	r3, #53	; 0x35
    3e98:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    3e9a:	07fb      	lsls	r3, r7, #31
    3e9c:	d400      	bmi.n	3ea0 <_spi_interrupt_handler+0x1ac>
    3e9e:	e755      	b.n	3d4c <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    3ea0:	0020      	movs	r0, r4
    3ea2:	68e3      	ldr	r3, [r4, #12]
    3ea4:	4798      	blx	r3
    3ea6:	e751      	b.n	3d4c <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    3ea8:	2380      	movs	r3, #128	; 0x80
    3eaa:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    3eac:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    3eae:	067b      	lsls	r3, r7, #25
    3eb0:	d400      	bmi.n	3eb4 <_spi_interrupt_handler+0x1c0>
    3eb2:	e74f      	b.n	3d54 <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    3eb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3eb6:	0020      	movs	r0, r4
    3eb8:	4798      	blx	r3
}
    3eba:	e74b      	b.n	3d54 <_spi_interrupt_handler+0x60>
    3ebc:	200003fc 	.word	0x200003fc
    3ec0:	20000414 	.word	0x20000414

00003ec4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    3ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ec6:	46de      	mov	lr, fp
    3ec8:	4657      	mov	r7, sl
    3eca:	464e      	mov	r6, r9
    3ecc:	4645      	mov	r5, r8
    3ece:	b5e0      	push	{r5, r6, r7, lr}
    3ed0:	b091      	sub	sp, #68	; 0x44
    3ed2:	0005      	movs	r5, r0
    3ed4:	000c      	movs	r4, r1
    3ed6:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    3ed8:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3eda:	0008      	movs	r0, r1
    3edc:	4bbc      	ldr	r3, [pc, #752]	; (41d0 <usart_init+0x30c>)
    3ede:	4798      	blx	r3
    3ee0:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3ee2:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    3ee4:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3ee6:	07db      	lsls	r3, r3, #31
    3ee8:	d506      	bpl.n	3ef8 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    3eea:	b011      	add	sp, #68	; 0x44
    3eec:	bc3c      	pop	{r2, r3, r4, r5}
    3eee:	4690      	mov	r8, r2
    3ef0:	4699      	mov	r9, r3
    3ef2:	46a2      	mov	sl, r4
    3ef4:	46ab      	mov	fp, r5
    3ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3ef8:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    3efa:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3efc:	079b      	lsls	r3, r3, #30
    3efe:	d4f4      	bmi.n	3eea <usart_init+0x26>
    3f00:	49b4      	ldr	r1, [pc, #720]	; (41d4 <usart_init+0x310>)
    3f02:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    3f04:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3f06:	2301      	movs	r3, #1
    3f08:	40bb      	lsls	r3, r7
    3f0a:	4303      	orrs	r3, r0
    3f0c:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    3f0e:	a90f      	add	r1, sp, #60	; 0x3c
    3f10:	272d      	movs	r7, #45	; 0x2d
    3f12:	5df3      	ldrb	r3, [r6, r7]
    3f14:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3f16:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3f18:	b2d3      	uxtb	r3, r2
    3f1a:	9302      	str	r3, [sp, #8]
    3f1c:	0018      	movs	r0, r3
    3f1e:	4bae      	ldr	r3, [pc, #696]	; (41d8 <usart_init+0x314>)
    3f20:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3f22:	9802      	ldr	r0, [sp, #8]
    3f24:	4bad      	ldr	r3, [pc, #692]	; (41dc <usart_init+0x318>)
    3f26:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3f28:	5df0      	ldrb	r0, [r6, r7]
    3f2a:	2100      	movs	r1, #0
    3f2c:	4bac      	ldr	r3, [pc, #688]	; (41e0 <usart_init+0x31c>)
    3f2e:	4798      	blx	r3
	module->character_size = config->character_size;
    3f30:	7af3      	ldrb	r3, [r6, #11]
    3f32:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    3f34:	2324      	movs	r3, #36	; 0x24
    3f36:	5cf3      	ldrb	r3, [r6, r3]
    3f38:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    3f3a:	2325      	movs	r3, #37	; 0x25
    3f3c:	5cf3      	ldrb	r3, [r6, r3]
    3f3e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    3f40:	7ef3      	ldrb	r3, [r6, #27]
    3f42:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    3f44:	7f33      	ldrb	r3, [r6, #28]
    3f46:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3f48:	682b      	ldr	r3, [r5, #0]
    3f4a:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3f4c:	0018      	movs	r0, r3
    3f4e:	4ba0      	ldr	r3, [pc, #640]	; (41d0 <usart_init+0x30c>)
    3f50:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3f52:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    3f54:	2200      	movs	r2, #0
    3f56:	230e      	movs	r3, #14
    3f58:	a906      	add	r1, sp, #24
    3f5a:	468c      	mov	ip, r1
    3f5c:	4463      	add	r3, ip
    3f5e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    3f60:	8a32      	ldrh	r2, [r6, #16]
    3f62:	9202      	str	r2, [sp, #8]
    3f64:	2380      	movs	r3, #128	; 0x80
    3f66:	01db      	lsls	r3, r3, #7
    3f68:	429a      	cmp	r2, r3
    3f6a:	d100      	bne.n	3f6e <usart_init+0xaa>
    3f6c:	e09e      	b.n	40ac <usart_init+0x1e8>
    3f6e:	d90f      	bls.n	3f90 <usart_init+0xcc>
    3f70:	23c0      	movs	r3, #192	; 0xc0
    3f72:	01db      	lsls	r3, r3, #7
    3f74:	9a02      	ldr	r2, [sp, #8]
    3f76:	429a      	cmp	r2, r3
    3f78:	d100      	bne.n	3f7c <usart_init+0xb8>
    3f7a:	e092      	b.n	40a2 <usart_init+0x1de>
    3f7c:	2380      	movs	r3, #128	; 0x80
    3f7e:	021b      	lsls	r3, r3, #8
    3f80:	429a      	cmp	r2, r3
    3f82:	d000      	beq.n	3f86 <usart_init+0xc2>
    3f84:	e11f      	b.n	41c6 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    3f86:	2303      	movs	r3, #3
    3f88:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3f8a:	2300      	movs	r3, #0
    3f8c:	9307      	str	r3, [sp, #28]
    3f8e:	e008      	b.n	3fa2 <usart_init+0xde>
	switch (config->sample_rate) {
    3f90:	2380      	movs	r3, #128	; 0x80
    3f92:	019b      	lsls	r3, r3, #6
    3f94:	429a      	cmp	r2, r3
    3f96:	d000      	beq.n	3f9a <usart_init+0xd6>
    3f98:	e115      	b.n	41c6 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3f9a:	2310      	movs	r3, #16
    3f9c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    3f9e:	3b0f      	subs	r3, #15
    3fa0:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    3fa2:	6833      	ldr	r3, [r6, #0]
    3fa4:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    3fa6:	68f3      	ldr	r3, [r6, #12]
    3fa8:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    3faa:	6973      	ldr	r3, [r6, #20]
    3fac:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    3fae:	7e33      	ldrb	r3, [r6, #24]
    3fb0:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    3fb2:	2326      	movs	r3, #38	; 0x26
    3fb4:	5cf3      	ldrb	r3, [r6, r3]
    3fb6:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    3fb8:	6873      	ldr	r3, [r6, #4]
    3fba:	4699      	mov	r9, r3
	switch (transfer_mode)
    3fbc:	2b00      	cmp	r3, #0
    3fbe:	d100      	bne.n	3fc2 <usart_init+0xfe>
    3fc0:	e0a0      	b.n	4104 <usart_init+0x240>
    3fc2:	2380      	movs	r3, #128	; 0x80
    3fc4:	055b      	lsls	r3, r3, #21
    3fc6:	4599      	cmp	r9, r3
    3fc8:	d100      	bne.n	3fcc <usart_init+0x108>
    3fca:	e084      	b.n	40d6 <usart_init+0x212>
	if(config->encoding_format_enable) {
    3fcc:	7e73      	ldrb	r3, [r6, #25]
    3fce:	2b00      	cmp	r3, #0
    3fd0:	d002      	beq.n	3fd8 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    3fd2:	7eb3      	ldrb	r3, [r6, #26]
    3fd4:	4642      	mov	r2, r8
    3fd6:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    3fd8:	682a      	ldr	r2, [r5, #0]
    3fda:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3fdc:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3fde:	2b00      	cmp	r3, #0
    3fe0:	d1fc      	bne.n	3fdc <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    3fe2:	330e      	adds	r3, #14
    3fe4:	aa06      	add	r2, sp, #24
    3fe6:	4694      	mov	ip, r2
    3fe8:	4463      	add	r3, ip
    3fea:	881b      	ldrh	r3, [r3, #0]
    3fec:	4642      	mov	r2, r8
    3fee:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    3ff0:	9b05      	ldr	r3, [sp, #20]
    3ff2:	9a03      	ldr	r2, [sp, #12]
    3ff4:	4313      	orrs	r3, r2
    3ff6:	9a04      	ldr	r2, [sp, #16]
    3ff8:	4313      	orrs	r3, r2
    3ffa:	464a      	mov	r2, r9
    3ffc:	4313      	orrs	r3, r2
    3ffe:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4000:	465b      	mov	r3, fp
    4002:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    4004:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4006:	4653      	mov	r3, sl
    4008:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    400a:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    400c:	2327      	movs	r3, #39	; 0x27
    400e:	5cf3      	ldrb	r3, [r6, r3]
    4010:	2b00      	cmp	r3, #0
    4012:	d101      	bne.n	4018 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    4014:	3304      	adds	r3, #4
    4016:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4018:	7e73      	ldrb	r3, [r6, #25]
    401a:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    401c:	7f32      	ldrb	r2, [r6, #28]
    401e:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4020:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    4022:	7f72      	ldrb	r2, [r6, #29]
    4024:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4026:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4028:	2224      	movs	r2, #36	; 0x24
    402a:	5cb2      	ldrb	r2, [r6, r2]
    402c:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    402e:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    4030:	2225      	movs	r2, #37	; 0x25
    4032:	5cb2      	ldrb	r2, [r6, r2]
    4034:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4036:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    4038:	7ab1      	ldrb	r1, [r6, #10]
    403a:	7af2      	ldrb	r2, [r6, #11]
    403c:	4311      	orrs	r1, r2
    403e:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    4040:	8933      	ldrh	r3, [r6, #8]
    4042:	2bff      	cmp	r3, #255	; 0xff
    4044:	d100      	bne.n	4048 <usart_init+0x184>
    4046:	e081      	b.n	414c <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    4048:	2280      	movs	r2, #128	; 0x80
    404a:	0452      	lsls	r2, r2, #17
    404c:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    404e:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    4050:	232c      	movs	r3, #44	; 0x2c
    4052:	5cf3      	ldrb	r3, [r6, r3]
    4054:	2b00      	cmp	r3, #0
    4056:	d103      	bne.n	4060 <usart_init+0x19c>
    4058:	4b62      	ldr	r3, [pc, #392]	; (41e4 <usart_init+0x320>)
    405a:	789b      	ldrb	r3, [r3, #2]
    405c:	079b      	lsls	r3, r3, #30
    405e:	d501      	bpl.n	4064 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    4060:	2380      	movs	r3, #128	; 0x80
    4062:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    4064:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    4066:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4068:	2b00      	cmp	r3, #0
    406a:	d1fc      	bne.n	4066 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    406c:	4643      	mov	r3, r8
    406e:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4070:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    4072:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4074:	2b00      	cmp	r3, #0
    4076:	d1fc      	bne.n	4072 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    4078:	4643      	mov	r3, r8
    407a:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    407c:	ab0e      	add	r3, sp, #56	; 0x38
    407e:	2280      	movs	r2, #128	; 0x80
    4080:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4082:	2200      	movs	r2, #0
    4084:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    4086:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4088:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    408a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    408c:	930a      	str	r3, [sp, #40]	; 0x28
    408e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    4090:	930b      	str	r3, [sp, #44]	; 0x2c
    4092:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    4094:	930c      	str	r3, [sp, #48]	; 0x30
    4096:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    4098:	9302      	str	r3, [sp, #8]
    409a:	930d      	str	r3, [sp, #52]	; 0x34
    409c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    409e:	ae0a      	add	r6, sp, #40	; 0x28
    40a0:	e063      	b.n	416a <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    40a2:	2308      	movs	r3, #8
    40a4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    40a6:	3b07      	subs	r3, #7
    40a8:	9307      	str	r3, [sp, #28]
    40aa:	e77a      	b.n	3fa2 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    40ac:	6833      	ldr	r3, [r6, #0]
    40ae:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    40b0:	68f3      	ldr	r3, [r6, #12]
    40b2:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    40b4:	6973      	ldr	r3, [r6, #20]
    40b6:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    40b8:	7e33      	ldrb	r3, [r6, #24]
    40ba:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    40bc:	2326      	movs	r3, #38	; 0x26
    40be:	5cf3      	ldrb	r3, [r6, r3]
    40c0:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    40c2:	6873      	ldr	r3, [r6, #4]
    40c4:	4699      	mov	r9, r3
	switch (transfer_mode)
    40c6:	2b00      	cmp	r3, #0
    40c8:	d018      	beq.n	40fc <usart_init+0x238>
    40ca:	2380      	movs	r3, #128	; 0x80
    40cc:	055b      	lsls	r3, r3, #21
    40ce:	4599      	cmp	r9, r3
    40d0:	d001      	beq.n	40d6 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    40d2:	2000      	movs	r0, #0
    40d4:	e025      	b.n	4122 <usart_init+0x25e>
			if (!config->use_external_clock) {
    40d6:	2327      	movs	r3, #39	; 0x27
    40d8:	5cf3      	ldrb	r3, [r6, r3]
    40da:	2b00      	cmp	r3, #0
    40dc:	d000      	beq.n	40e0 <usart_init+0x21c>
    40de:	e775      	b.n	3fcc <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    40e0:	6a33      	ldr	r3, [r6, #32]
    40e2:	001f      	movs	r7, r3
    40e4:	b2c0      	uxtb	r0, r0
    40e6:	4b40      	ldr	r3, [pc, #256]	; (41e8 <usart_init+0x324>)
    40e8:	4798      	blx	r3
    40ea:	0001      	movs	r1, r0
    40ec:	220e      	movs	r2, #14
    40ee:	ab06      	add	r3, sp, #24
    40f0:	469c      	mov	ip, r3
    40f2:	4462      	add	r2, ip
    40f4:	0038      	movs	r0, r7
    40f6:	4b3d      	ldr	r3, [pc, #244]	; (41ec <usart_init+0x328>)
    40f8:	4798      	blx	r3
    40fa:	e012      	b.n	4122 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    40fc:	2308      	movs	r3, #8
    40fe:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4100:	2300      	movs	r3, #0
    4102:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    4104:	2327      	movs	r3, #39	; 0x27
    4106:	5cf3      	ldrb	r3, [r6, r3]
    4108:	2b00      	cmp	r3, #0
    410a:	d00e      	beq.n	412a <usart_init+0x266>
				status_code =
    410c:	9b06      	ldr	r3, [sp, #24]
    410e:	9300      	str	r3, [sp, #0]
    4110:	9b07      	ldr	r3, [sp, #28]
    4112:	220e      	movs	r2, #14
    4114:	a906      	add	r1, sp, #24
    4116:	468c      	mov	ip, r1
    4118:	4462      	add	r2, ip
    411a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    411c:	6a30      	ldr	r0, [r6, #32]
    411e:	4f34      	ldr	r7, [pc, #208]	; (41f0 <usart_init+0x32c>)
    4120:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    4122:	2800      	cmp	r0, #0
    4124:	d000      	beq.n	4128 <usart_init+0x264>
    4126:	e6e0      	b.n	3eea <usart_init+0x26>
    4128:	e750      	b.n	3fcc <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    412a:	6a33      	ldr	r3, [r6, #32]
    412c:	001f      	movs	r7, r3
    412e:	b2c0      	uxtb	r0, r0
    4130:	4b2d      	ldr	r3, [pc, #180]	; (41e8 <usart_init+0x324>)
    4132:	4798      	blx	r3
    4134:	0001      	movs	r1, r0
				status_code =
    4136:	9b06      	ldr	r3, [sp, #24]
    4138:	9300      	str	r3, [sp, #0]
    413a:	9b07      	ldr	r3, [sp, #28]
    413c:	220e      	movs	r2, #14
    413e:	a806      	add	r0, sp, #24
    4140:	4684      	mov	ip, r0
    4142:	4462      	add	r2, ip
    4144:	0038      	movs	r0, r7
    4146:	4f2a      	ldr	r7, [pc, #168]	; (41f0 <usart_init+0x32c>)
    4148:	47b8      	blx	r7
    414a:	e7ea      	b.n	4122 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    414c:	7ef3      	ldrb	r3, [r6, #27]
    414e:	2b00      	cmp	r3, #0
    4150:	d100      	bne.n	4154 <usart_init+0x290>
    4152:	e77d      	b.n	4050 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    4154:	2380      	movs	r3, #128	; 0x80
    4156:	04db      	lsls	r3, r3, #19
    4158:	431f      	orrs	r7, r3
    415a:	e779      	b.n	4050 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    415c:	0020      	movs	r0, r4
    415e:	4b25      	ldr	r3, [pc, #148]	; (41f4 <usart_init+0x330>)
    4160:	4798      	blx	r3
    4162:	e007      	b.n	4174 <usart_init+0x2b0>
    4164:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    4166:	2f04      	cmp	r7, #4
    4168:	d00d      	beq.n	4186 <usart_init+0x2c2>
    416a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    416c:	00bb      	lsls	r3, r7, #2
    416e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    4170:	2800      	cmp	r0, #0
    4172:	d0f3      	beq.n	415c <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    4174:	1c43      	adds	r3, r0, #1
    4176:	d0f5      	beq.n	4164 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4178:	a90e      	add	r1, sp, #56	; 0x38
    417a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    417c:	0c00      	lsrs	r0, r0, #16
    417e:	b2c0      	uxtb	r0, r0
    4180:	4b1d      	ldr	r3, [pc, #116]	; (41f8 <usart_init+0x334>)
    4182:	4798      	blx	r3
    4184:	e7ee      	b.n	4164 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    4186:	2300      	movs	r3, #0
    4188:	60eb      	str	r3, [r5, #12]
    418a:	612b      	str	r3, [r5, #16]
    418c:	616b      	str	r3, [r5, #20]
    418e:	61ab      	str	r3, [r5, #24]
    4190:	61eb      	str	r3, [r5, #28]
    4192:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    4194:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    4196:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    4198:	2200      	movs	r2, #0
    419a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    419c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    419e:	3330      	adds	r3, #48	; 0x30
    41a0:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    41a2:	3301      	adds	r3, #1
    41a4:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    41a6:	3301      	adds	r3, #1
    41a8:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    41aa:	3301      	adds	r3, #1
    41ac:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    41ae:	6828      	ldr	r0, [r5, #0]
    41b0:	4b07      	ldr	r3, [pc, #28]	; (41d0 <usart_init+0x30c>)
    41b2:	4798      	blx	r3
    41b4:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    41b6:	4911      	ldr	r1, [pc, #68]	; (41fc <usart_init+0x338>)
    41b8:	4b11      	ldr	r3, [pc, #68]	; (4200 <usart_init+0x33c>)
    41ba:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    41bc:	00a4      	lsls	r4, r4, #2
    41be:	4b11      	ldr	r3, [pc, #68]	; (4204 <usart_init+0x340>)
    41c0:	50e5      	str	r5, [r4, r3]
	return status_code;
    41c2:	2000      	movs	r0, #0
    41c4:	e691      	b.n	3eea <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    41c6:	2310      	movs	r3, #16
    41c8:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    41ca:	2300      	movs	r3, #0
    41cc:	9307      	str	r3, [sp, #28]
    41ce:	e6e8      	b.n	3fa2 <usart_init+0xde>
    41d0:	00003921 	.word	0x00003921
    41d4:	40000400 	.word	0x40000400
    41d8:	00004a95 	.word	0x00004a95
    41dc:	00004a09 	.word	0x00004a09
    41e0:	0000375d 	.word	0x0000375d
    41e4:	41002000 	.word	0x41002000
    41e8:	00004ab1 	.word	0x00004ab1
    41ec:	0000369f 	.word	0x0000369f
    41f0:	000036c9 	.word	0x000036c9
    41f4:	000037a9 	.word	0x000037a9
    41f8:	00004b8d 	.word	0x00004b8d
    41fc:	000042bd 	.word	0x000042bd
    4200:	0000395d 	.word	0x0000395d
    4204:	200003fc 	.word	0x200003fc

00004208 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    4208:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    420a:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    420c:	2a00      	cmp	r2, #0
    420e:	d101      	bne.n	4214 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    4210:	0018      	movs	r0, r3
    4212:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    4214:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    4216:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    4218:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    421a:	2a00      	cmp	r2, #0
    421c:	d1f8      	bne.n	4210 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    421e:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    4220:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    4222:	2a00      	cmp	r2, #0
    4224:	d1fc      	bne.n	4220 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    4226:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    4228:	2102      	movs	r1, #2
    422a:	7e1a      	ldrb	r2, [r3, #24]
    422c:	420a      	tst	r2, r1
    422e:	d0fc      	beq.n	422a <usart_write_wait+0x22>
	return STATUS_OK;
    4230:	2300      	movs	r3, #0
    4232:	e7ed      	b.n	4210 <usart_write_wait+0x8>

00004234 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    4234:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    4236:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    4238:	2a00      	cmp	r2, #0
    423a:	d101      	bne.n	4240 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    423c:	0018      	movs	r0, r3
    423e:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    4240:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    4242:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    4244:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    4246:	2a00      	cmp	r2, #0
    4248:	d1f8      	bne.n	423c <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    424a:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    424c:	7e10      	ldrb	r0, [r2, #24]
    424e:	0740      	lsls	r0, r0, #29
    4250:	d5f4      	bpl.n	423c <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    4252:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4254:	2b00      	cmp	r3, #0
    4256:	d1fc      	bne.n	4252 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4258:	8b53      	ldrh	r3, [r2, #26]
    425a:	b2db      	uxtb	r3, r3
	if (error_code) {
    425c:	0698      	lsls	r0, r3, #26
    425e:	d01d      	beq.n	429c <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    4260:	0798      	lsls	r0, r3, #30
    4262:	d503      	bpl.n	426c <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    4264:	2302      	movs	r3, #2
    4266:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    4268:	3318      	adds	r3, #24
    426a:	e7e7      	b.n	423c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    426c:	0758      	lsls	r0, r3, #29
    426e:	d503      	bpl.n	4278 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    4270:	2304      	movs	r3, #4
    4272:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    4274:	331a      	adds	r3, #26
    4276:	e7e1      	b.n	423c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    4278:	07d8      	lsls	r0, r3, #31
    427a:	d503      	bpl.n	4284 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    427c:	2301      	movs	r3, #1
    427e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    4280:	3312      	adds	r3, #18
    4282:	e7db      	b.n	423c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    4284:	06d8      	lsls	r0, r3, #27
    4286:	d503      	bpl.n	4290 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    4288:	2310      	movs	r3, #16
    428a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    428c:	3332      	adds	r3, #50	; 0x32
    428e:	e7d5      	b.n	423c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    4290:	069b      	lsls	r3, r3, #26
    4292:	d503      	bpl.n	429c <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    4294:	2320      	movs	r3, #32
    4296:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    4298:	3321      	adds	r3, #33	; 0x21
    429a:	e7cf      	b.n	423c <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    429c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    429e:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    42a0:	2300      	movs	r3, #0
    42a2:	e7cb      	b.n	423c <usart_read_wait+0x8>

000042a4 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    42a4:	1c93      	adds	r3, r2, #2
    42a6:	009b      	lsls	r3, r3, #2
    42a8:	18c3      	adds	r3, r0, r3
    42aa:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    42ac:	2130      	movs	r1, #48	; 0x30
    42ae:	2301      	movs	r3, #1
    42b0:	4093      	lsls	r3, r2
    42b2:	001a      	movs	r2, r3
    42b4:	5c43      	ldrb	r3, [r0, r1]
    42b6:	4313      	orrs	r3, r2
    42b8:	5443      	strb	r3, [r0, r1]
}
    42ba:	4770      	bx	lr

000042bc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    42bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    42be:	0080      	lsls	r0, r0, #2
    42c0:	4b62      	ldr	r3, [pc, #392]	; (444c <_usart_interrupt_handler+0x190>)
    42c2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    42c4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    42c6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    42c8:	2b00      	cmp	r3, #0
    42ca:	d1fc      	bne.n	42c6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    42cc:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    42ce:	7da6      	ldrb	r6, [r4, #22]
    42d0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    42d2:	2330      	movs	r3, #48	; 0x30
    42d4:	5ceb      	ldrb	r3, [r5, r3]
    42d6:	2231      	movs	r2, #49	; 0x31
    42d8:	5caf      	ldrb	r7, [r5, r2]
    42da:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    42dc:	07f3      	lsls	r3, r6, #31
    42de:	d522      	bpl.n	4326 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    42e0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    42e2:	b29b      	uxth	r3, r3
    42e4:	2b00      	cmp	r3, #0
    42e6:	d01c      	beq.n	4322 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    42e8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    42ea:	7813      	ldrb	r3, [r2, #0]
    42ec:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    42ee:	1c51      	adds	r1, r2, #1
    42f0:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    42f2:	7969      	ldrb	r1, [r5, #5]
    42f4:	2901      	cmp	r1, #1
    42f6:	d00e      	beq.n	4316 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    42f8:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    42fa:	05db      	lsls	r3, r3, #23
    42fc:	0ddb      	lsrs	r3, r3, #23
    42fe:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    4300:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    4302:	3b01      	subs	r3, #1
    4304:	b29b      	uxth	r3, r3
    4306:	85eb      	strh	r3, [r5, #46]	; 0x2e
    4308:	2b00      	cmp	r3, #0
    430a:	d10c      	bne.n	4326 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    430c:	3301      	adds	r3, #1
    430e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    4310:	3301      	adds	r3, #1
    4312:	75a3      	strb	r3, [r4, #22]
    4314:	e007      	b.n	4326 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    4316:	7851      	ldrb	r1, [r2, #1]
    4318:	0209      	lsls	r1, r1, #8
    431a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    431c:	3202      	adds	r2, #2
    431e:	62aa      	str	r2, [r5, #40]	; 0x28
    4320:	e7eb      	b.n	42fa <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4322:	2301      	movs	r3, #1
    4324:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    4326:	07b3      	lsls	r3, r6, #30
    4328:	d506      	bpl.n	4338 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    432a:	2302      	movs	r3, #2
    432c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    432e:	2200      	movs	r2, #0
    4330:	3331      	adds	r3, #49	; 0x31
    4332:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    4334:	07fb      	lsls	r3, r7, #31
    4336:	d41a      	bmi.n	436e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    4338:	0773      	lsls	r3, r6, #29
    433a:	d565      	bpl.n	4408 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    433c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    433e:	b29b      	uxth	r3, r3
    4340:	2b00      	cmp	r3, #0
    4342:	d05f      	beq.n	4404 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4344:	8b63      	ldrh	r3, [r4, #26]
    4346:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    4348:	071a      	lsls	r2, r3, #28
    434a:	d414      	bmi.n	4376 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    434c:	223f      	movs	r2, #63	; 0x3f
    434e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    4350:	2b00      	cmp	r3, #0
    4352:	d034      	beq.n	43be <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    4354:	079a      	lsls	r2, r3, #30
    4356:	d511      	bpl.n	437c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    4358:	221a      	movs	r2, #26
    435a:	2332      	movs	r3, #50	; 0x32
    435c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    435e:	3b30      	subs	r3, #48	; 0x30
    4360:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    4362:	077b      	lsls	r3, r7, #29
    4364:	d550      	bpl.n	4408 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    4366:	0028      	movs	r0, r5
    4368:	696b      	ldr	r3, [r5, #20]
    436a:	4798      	blx	r3
    436c:	e04c      	b.n	4408 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    436e:	0028      	movs	r0, r5
    4370:	68eb      	ldr	r3, [r5, #12]
    4372:	4798      	blx	r3
    4374:	e7e0      	b.n	4338 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    4376:	2237      	movs	r2, #55	; 0x37
    4378:	4013      	ands	r3, r2
    437a:	e7e9      	b.n	4350 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    437c:	075a      	lsls	r2, r3, #29
    437e:	d505      	bpl.n	438c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    4380:	221e      	movs	r2, #30
    4382:	2332      	movs	r3, #50	; 0x32
    4384:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    4386:	3b2e      	subs	r3, #46	; 0x2e
    4388:	8363      	strh	r3, [r4, #26]
    438a:	e7ea      	b.n	4362 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    438c:	07da      	lsls	r2, r3, #31
    438e:	d505      	bpl.n	439c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    4390:	2213      	movs	r2, #19
    4392:	2332      	movs	r3, #50	; 0x32
    4394:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    4396:	3b31      	subs	r3, #49	; 0x31
    4398:	8363      	strh	r3, [r4, #26]
    439a:	e7e2      	b.n	4362 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    439c:	06da      	lsls	r2, r3, #27
    439e:	d505      	bpl.n	43ac <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    43a0:	2242      	movs	r2, #66	; 0x42
    43a2:	2332      	movs	r3, #50	; 0x32
    43a4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    43a6:	3b22      	subs	r3, #34	; 0x22
    43a8:	8363      	strh	r3, [r4, #26]
    43aa:	e7da      	b.n	4362 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    43ac:	2220      	movs	r2, #32
    43ae:	421a      	tst	r2, r3
    43b0:	d0d7      	beq.n	4362 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    43b2:	3221      	adds	r2, #33	; 0x21
    43b4:	2332      	movs	r3, #50	; 0x32
    43b6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    43b8:	3b12      	subs	r3, #18
    43ba:	8363      	strh	r3, [r4, #26]
    43bc:	e7d1      	b.n	4362 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    43be:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    43c0:	05db      	lsls	r3, r3, #23
    43c2:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    43c4:	b2da      	uxtb	r2, r3
    43c6:	6a69      	ldr	r1, [r5, #36]	; 0x24
    43c8:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    43ca:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    43cc:	1c51      	adds	r1, r2, #1
    43ce:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    43d0:	7969      	ldrb	r1, [r5, #5]
    43d2:	2901      	cmp	r1, #1
    43d4:	d010      	beq.n	43f8 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    43d6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    43d8:	3b01      	subs	r3, #1
    43da:	b29b      	uxth	r3, r3
    43dc:	85ab      	strh	r3, [r5, #44]	; 0x2c
    43de:	2b00      	cmp	r3, #0
    43e0:	d112      	bne.n	4408 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    43e2:	3304      	adds	r3, #4
    43e4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    43e6:	2200      	movs	r2, #0
    43e8:	332e      	adds	r3, #46	; 0x2e
    43ea:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    43ec:	07bb      	lsls	r3, r7, #30
    43ee:	d50b      	bpl.n	4408 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    43f0:	0028      	movs	r0, r5
    43f2:	692b      	ldr	r3, [r5, #16]
    43f4:	4798      	blx	r3
    43f6:	e007      	b.n	4408 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    43f8:	0a1b      	lsrs	r3, r3, #8
    43fa:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    43fc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    43fe:	3301      	adds	r3, #1
    4400:	626b      	str	r3, [r5, #36]	; 0x24
    4402:	e7e8      	b.n	43d6 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    4404:	2304      	movs	r3, #4
    4406:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    4408:	06f3      	lsls	r3, r6, #27
    440a:	d504      	bpl.n	4416 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    440c:	2310      	movs	r3, #16
    440e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    4410:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    4412:	06fb      	lsls	r3, r7, #27
    4414:	d40e      	bmi.n	4434 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    4416:	06b3      	lsls	r3, r6, #26
    4418:	d504      	bpl.n	4424 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    441a:	2320      	movs	r3, #32
    441c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    441e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    4420:	073b      	lsls	r3, r7, #28
    4422:	d40b      	bmi.n	443c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    4424:	0733      	lsls	r3, r6, #28
    4426:	d504      	bpl.n	4432 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    4428:	2308      	movs	r3, #8
    442a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    442c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    442e:	06bb      	lsls	r3, r7, #26
    4430:	d408      	bmi.n	4444 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    4432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    4434:	0028      	movs	r0, r5
    4436:	69eb      	ldr	r3, [r5, #28]
    4438:	4798      	blx	r3
    443a:	e7ec      	b.n	4416 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    443c:	0028      	movs	r0, r5
    443e:	69ab      	ldr	r3, [r5, #24]
    4440:	4798      	blx	r3
    4442:	e7ef      	b.n	4424 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    4444:	6a2b      	ldr	r3, [r5, #32]
    4446:	0028      	movs	r0, r5
    4448:	4798      	blx	r3
}
    444a:	e7f2      	b.n	4432 <_usart_interrupt_handler+0x176>
    444c:	200003fc 	.word	0x200003fc

00004450 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    4450:	b510      	push	{r4, lr}
	switch (clock_source) {
    4452:	2808      	cmp	r0, #8
    4454:	d803      	bhi.n	445e <system_clock_source_get_hz+0xe>
    4456:	0080      	lsls	r0, r0, #2
    4458:	4b1b      	ldr	r3, [pc, #108]	; (44c8 <system_clock_source_get_hz+0x78>)
    445a:	581b      	ldr	r3, [r3, r0]
    445c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    445e:	2000      	movs	r0, #0
    4460:	e030      	b.n	44c4 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    4462:	4b1a      	ldr	r3, [pc, #104]	; (44cc <system_clock_source_get_hz+0x7c>)
    4464:	6918      	ldr	r0, [r3, #16]
    4466:	e02d      	b.n	44c4 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    4468:	4b19      	ldr	r3, [pc, #100]	; (44d0 <system_clock_source_get_hz+0x80>)
    446a:	6a1b      	ldr	r3, [r3, #32]
    446c:	059b      	lsls	r3, r3, #22
    446e:	0f9b      	lsrs	r3, r3, #30
    4470:	4818      	ldr	r0, [pc, #96]	; (44d4 <system_clock_source_get_hz+0x84>)
    4472:	40d8      	lsrs	r0, r3
    4474:	e026      	b.n	44c4 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    4476:	4b15      	ldr	r3, [pc, #84]	; (44cc <system_clock_source_get_hz+0x7c>)
    4478:	6958      	ldr	r0, [r3, #20]
    447a:	e023      	b.n	44c4 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    447c:	4b13      	ldr	r3, [pc, #76]	; (44cc <system_clock_source_get_hz+0x7c>)
    447e:	681b      	ldr	r3, [r3, #0]
			return 0;
    4480:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4482:	079b      	lsls	r3, r3, #30
    4484:	d51e      	bpl.n	44c4 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4486:	4912      	ldr	r1, [pc, #72]	; (44d0 <system_clock_source_get_hz+0x80>)
    4488:	2210      	movs	r2, #16
    448a:	68cb      	ldr	r3, [r1, #12]
    448c:	421a      	tst	r2, r3
    448e:	d0fc      	beq.n	448a <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    4490:	4b0e      	ldr	r3, [pc, #56]	; (44cc <system_clock_source_get_hz+0x7c>)
    4492:	681b      	ldr	r3, [r3, #0]
    4494:	075b      	lsls	r3, r3, #29
    4496:	d401      	bmi.n	449c <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    4498:	480f      	ldr	r0, [pc, #60]	; (44d8 <system_clock_source_get_hz+0x88>)
    449a:	e013      	b.n	44c4 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    449c:	2000      	movs	r0, #0
    449e:	4b0f      	ldr	r3, [pc, #60]	; (44dc <system_clock_source_get_hz+0x8c>)
    44a0:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    44a2:	4b0a      	ldr	r3, [pc, #40]	; (44cc <system_clock_source_get_hz+0x7c>)
    44a4:	689b      	ldr	r3, [r3, #8]
    44a6:	041b      	lsls	r3, r3, #16
    44a8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    44aa:	4358      	muls	r0, r3
    44ac:	e00a      	b.n	44c4 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    44ae:	2350      	movs	r3, #80	; 0x50
    44b0:	4a07      	ldr	r2, [pc, #28]	; (44d0 <system_clock_source_get_hz+0x80>)
    44b2:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    44b4:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    44b6:	075b      	lsls	r3, r3, #29
    44b8:	d504      	bpl.n	44c4 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    44ba:	4b04      	ldr	r3, [pc, #16]	; (44cc <system_clock_source_get_hz+0x7c>)
    44bc:	68d8      	ldr	r0, [r3, #12]
    44be:	e001      	b.n	44c4 <system_clock_source_get_hz+0x74>
		return 32768UL;
    44c0:	2080      	movs	r0, #128	; 0x80
    44c2:	0200      	lsls	r0, r0, #8
	}
}
    44c4:	bd10      	pop	{r4, pc}
    44c6:	46c0      	nop			; (mov r8, r8)
    44c8:	000090c4 	.word	0x000090c4
    44cc:	2000011c 	.word	0x2000011c
    44d0:	40000800 	.word	0x40000800
    44d4:	007a1200 	.word	0x007a1200
    44d8:	02dc6c00 	.word	0x02dc6c00
    44dc:	00004ab1 	.word	0x00004ab1

000044e0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    44e0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    44e2:	490c      	ldr	r1, [pc, #48]	; (4514 <system_clock_source_osc8m_set_config+0x34>)
    44e4:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    44e6:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    44e8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    44ea:	7840      	ldrb	r0, [r0, #1]
    44ec:	2201      	movs	r2, #1
    44ee:	4010      	ands	r0, r2
    44f0:	0180      	lsls	r0, r0, #6
    44f2:	2640      	movs	r6, #64	; 0x40
    44f4:	43b3      	bics	r3, r6
    44f6:	4303      	orrs	r3, r0
    44f8:	402a      	ands	r2, r5
    44fa:	01d2      	lsls	r2, r2, #7
    44fc:	2080      	movs	r0, #128	; 0x80
    44fe:	4383      	bics	r3, r0
    4500:	4313      	orrs	r3, r2
    4502:	2203      	movs	r2, #3
    4504:	4022      	ands	r2, r4
    4506:	0212      	lsls	r2, r2, #8
    4508:	4803      	ldr	r0, [pc, #12]	; (4518 <system_clock_source_osc8m_set_config+0x38>)
    450a:	4003      	ands	r3, r0
    450c:	4313      	orrs	r3, r2
    450e:	620b      	str	r3, [r1, #32]
}
    4510:	bd70      	pop	{r4, r5, r6, pc}
    4512:	46c0      	nop			; (mov r8, r8)
    4514:	40000800 	.word	0x40000800
    4518:	fffffcff 	.word	0xfffffcff

0000451c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    451c:	b5f0      	push	{r4, r5, r6, r7, lr}
    451e:	46de      	mov	lr, fp
    4520:	4657      	mov	r7, sl
    4522:	464e      	mov	r6, r9
    4524:	4645      	mov	r5, r8
    4526:	b5e0      	push	{r5, r6, r7, lr}
    4528:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    452a:	4b26      	ldr	r3, [pc, #152]	; (45c4 <system_clock_source_xosc32k_set_config+0xa8>)
    452c:	469b      	mov	fp, r3
    452e:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    4530:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    4532:	7800      	ldrb	r0, [r0, #0]
    4534:	4242      	negs	r2, r0
    4536:	4142      	adcs	r2, r0
    4538:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    453a:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    453c:	78ca      	ldrb	r2, [r1, #3]
    453e:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    4540:	790a      	ldrb	r2, [r1, #4]
    4542:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    4544:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    4546:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    4548:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    454a:	688a      	ldr	r2, [r1, #8]
    454c:	491e      	ldr	r1, [pc, #120]	; (45c8 <system_clock_source_xosc32k_set_config+0xac>)
    454e:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    4550:	2101      	movs	r1, #1
    4552:	464a      	mov	r2, r9
    4554:	0092      	lsls	r2, r2, #2
    4556:	4691      	mov	r9, r2
    4558:	2204      	movs	r2, #4
    455a:	4393      	bics	r3, r2
    455c:	464a      	mov	r2, r9
    455e:	4313      	orrs	r3, r2
    4560:	4642      	mov	r2, r8
    4562:	400a      	ands	r2, r1
    4564:	00d2      	lsls	r2, r2, #3
    4566:	4690      	mov	r8, r2
    4568:	2208      	movs	r2, #8
    456a:	4393      	bics	r3, r2
    456c:	4642      	mov	r2, r8
    456e:	4313      	orrs	r3, r2
    4570:	4662      	mov	r2, ip
    4572:	400a      	ands	r2, r1
    4574:	0112      	lsls	r2, r2, #4
    4576:	4694      	mov	ip, r2
    4578:	2210      	movs	r2, #16
    457a:	4393      	bics	r3, r2
    457c:	4662      	mov	r2, ip
    457e:	4313      	orrs	r3, r2
    4580:	4008      	ands	r0, r1
    4582:	0140      	lsls	r0, r0, #5
    4584:	2220      	movs	r2, #32
    4586:	4393      	bics	r3, r2
    4588:	4303      	orrs	r3, r0
    458a:	400f      	ands	r7, r1
    458c:	01bf      	lsls	r7, r7, #6
    458e:	2040      	movs	r0, #64	; 0x40
    4590:	4383      	bics	r3, r0
    4592:	433b      	orrs	r3, r7
    4594:	400e      	ands	r6, r1
    4596:	01f6      	lsls	r6, r6, #7
    4598:	3040      	adds	r0, #64	; 0x40
    459a:	4383      	bics	r3, r0
    459c:	4333      	orrs	r3, r6
    459e:	3879      	subs	r0, #121	; 0x79
    45a0:	4005      	ands	r5, r0
    45a2:	022d      	lsls	r5, r5, #8
    45a4:	4809      	ldr	r0, [pc, #36]	; (45cc <system_clock_source_xosc32k_set_config+0xb0>)
    45a6:	4003      	ands	r3, r0
    45a8:	432b      	orrs	r3, r5
    45aa:	4021      	ands	r1, r4
    45ac:	0309      	lsls	r1, r1, #12
    45ae:	4808      	ldr	r0, [pc, #32]	; (45d0 <system_clock_source_xosc32k_set_config+0xb4>)
    45b0:	4003      	ands	r3, r0
    45b2:	430b      	orrs	r3, r1
    45b4:	465a      	mov	r2, fp
    45b6:	8293      	strh	r3, [r2, #20]
}
    45b8:	bc3c      	pop	{r2, r3, r4, r5}
    45ba:	4690      	mov	r8, r2
    45bc:	4699      	mov	r9, r3
    45be:	46a2      	mov	sl, r4
    45c0:	46ab      	mov	fp, r5
    45c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    45c4:	40000800 	.word	0x40000800
    45c8:	2000011c 	.word	0x2000011c
    45cc:	fffff8ff 	.word	0xfffff8ff
    45d0:	ffffefff 	.word	0xffffefff

000045d4 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    45d4:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    45d6:	7a03      	ldrb	r3, [r0, #8]
    45d8:	069b      	lsls	r3, r3, #26
    45da:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    45dc:	8942      	ldrh	r2, [r0, #10]
    45de:	0592      	lsls	r2, r2, #22
    45e0:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    45e2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    45e4:	4918      	ldr	r1, [pc, #96]	; (4648 <system_clock_source_dfll_set_config+0x74>)
    45e6:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    45e8:	7983      	ldrb	r3, [r0, #6]
    45ea:	79c2      	ldrb	r2, [r0, #7]
    45ec:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    45ee:	8842      	ldrh	r2, [r0, #2]
    45f0:	8884      	ldrh	r4, [r0, #4]
    45f2:	4322      	orrs	r2, r4
    45f4:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    45f6:	7842      	ldrb	r2, [r0, #1]
    45f8:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    45fa:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    45fc:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    45fe:	7803      	ldrb	r3, [r0, #0]
    4600:	2b04      	cmp	r3, #4
    4602:	d011      	beq.n	4628 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    4604:	2b20      	cmp	r3, #32
    4606:	d10e      	bne.n	4626 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4608:	7b03      	ldrb	r3, [r0, #12]
    460a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    460c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    460e:	4313      	orrs	r3, r2
    4610:	89c2      	ldrh	r2, [r0, #14]
    4612:	0412      	lsls	r2, r2, #16
    4614:	490d      	ldr	r1, [pc, #52]	; (464c <system_clock_source_dfll_set_config+0x78>)
    4616:	400a      	ands	r2, r1
    4618:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    461a:	4a0b      	ldr	r2, [pc, #44]	; (4648 <system_clock_source_dfll_set_config+0x74>)
    461c:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    461e:	6811      	ldr	r1, [r2, #0]
    4620:	4b0b      	ldr	r3, [pc, #44]	; (4650 <system_clock_source_dfll_set_config+0x7c>)
    4622:	430b      	orrs	r3, r1
    4624:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    4626:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4628:	7b03      	ldrb	r3, [r0, #12]
    462a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    462c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    462e:	4313      	orrs	r3, r2
    4630:	89c2      	ldrh	r2, [r0, #14]
    4632:	0412      	lsls	r2, r2, #16
    4634:	4905      	ldr	r1, [pc, #20]	; (464c <system_clock_source_dfll_set_config+0x78>)
    4636:	400a      	ands	r2, r1
    4638:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    463a:	4a03      	ldr	r2, [pc, #12]	; (4648 <system_clock_source_dfll_set_config+0x74>)
    463c:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    463e:	6813      	ldr	r3, [r2, #0]
    4640:	2104      	movs	r1, #4
    4642:	430b      	orrs	r3, r1
    4644:	6013      	str	r3, [r2, #0]
    4646:	e7ee      	b.n	4626 <system_clock_source_dfll_set_config+0x52>
    4648:	2000011c 	.word	0x2000011c
    464c:	03ff0000 	.word	0x03ff0000
    4650:	00000424 	.word	0x00000424

00004654 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    4654:	2808      	cmp	r0, #8
    4656:	d803      	bhi.n	4660 <system_clock_source_enable+0xc>
    4658:	0080      	lsls	r0, r0, #2
    465a:	4b25      	ldr	r3, [pc, #148]	; (46f0 <system_clock_source_enable+0x9c>)
    465c:	581b      	ldr	r3, [r3, r0]
    465e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4660:	2017      	movs	r0, #23
    4662:	e044      	b.n	46ee <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    4664:	4a23      	ldr	r2, [pc, #140]	; (46f4 <system_clock_source_enable+0xa0>)
    4666:	6a13      	ldr	r3, [r2, #32]
    4668:	2102      	movs	r1, #2
    466a:	430b      	orrs	r3, r1
    466c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    466e:	2000      	movs	r0, #0
    4670:	e03d      	b.n	46ee <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    4672:	4a20      	ldr	r2, [pc, #128]	; (46f4 <system_clock_source_enable+0xa0>)
    4674:	6993      	ldr	r3, [r2, #24]
    4676:	2102      	movs	r1, #2
    4678:	430b      	orrs	r3, r1
    467a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    467c:	2000      	movs	r0, #0
		break;
    467e:	e036      	b.n	46ee <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    4680:	4a1c      	ldr	r2, [pc, #112]	; (46f4 <system_clock_source_enable+0xa0>)
    4682:	8a13      	ldrh	r3, [r2, #16]
    4684:	2102      	movs	r1, #2
    4686:	430b      	orrs	r3, r1
    4688:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    468a:	2000      	movs	r0, #0
		break;
    468c:	e02f      	b.n	46ee <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    468e:	4a19      	ldr	r2, [pc, #100]	; (46f4 <system_clock_source_enable+0xa0>)
    4690:	8a93      	ldrh	r3, [r2, #20]
    4692:	2102      	movs	r1, #2
    4694:	430b      	orrs	r3, r1
    4696:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    4698:	2000      	movs	r0, #0
		break;
    469a:	e028      	b.n	46ee <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    469c:	4916      	ldr	r1, [pc, #88]	; (46f8 <system_clock_source_enable+0xa4>)
    469e:	680b      	ldr	r3, [r1, #0]
    46a0:	2202      	movs	r2, #2
    46a2:	4313      	orrs	r3, r2
    46a4:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    46a6:	4b13      	ldr	r3, [pc, #76]	; (46f4 <system_clock_source_enable+0xa0>)
    46a8:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    46aa:	0019      	movs	r1, r3
    46ac:	320e      	adds	r2, #14
    46ae:	68cb      	ldr	r3, [r1, #12]
    46b0:	421a      	tst	r2, r3
    46b2:	d0fc      	beq.n	46ae <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    46b4:	4a10      	ldr	r2, [pc, #64]	; (46f8 <system_clock_source_enable+0xa4>)
    46b6:	6891      	ldr	r1, [r2, #8]
    46b8:	4b0e      	ldr	r3, [pc, #56]	; (46f4 <system_clock_source_enable+0xa0>)
    46ba:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    46bc:	6852      	ldr	r2, [r2, #4]
    46be:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    46c0:	2200      	movs	r2, #0
    46c2:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    46c4:	0019      	movs	r1, r3
    46c6:	3210      	adds	r2, #16
    46c8:	68cb      	ldr	r3, [r1, #12]
    46ca:	421a      	tst	r2, r3
    46cc:	d0fc      	beq.n	46c8 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    46ce:	4b0a      	ldr	r3, [pc, #40]	; (46f8 <system_clock_source_enable+0xa4>)
    46d0:	681b      	ldr	r3, [r3, #0]
    46d2:	b29b      	uxth	r3, r3
    46d4:	4a07      	ldr	r2, [pc, #28]	; (46f4 <system_clock_source_enable+0xa0>)
    46d6:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    46d8:	2000      	movs	r0, #0
    46da:	e008      	b.n	46ee <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    46dc:	4905      	ldr	r1, [pc, #20]	; (46f4 <system_clock_source_enable+0xa0>)
    46de:	2244      	movs	r2, #68	; 0x44
    46e0:	5c8b      	ldrb	r3, [r1, r2]
    46e2:	2002      	movs	r0, #2
    46e4:	4303      	orrs	r3, r0
    46e6:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    46e8:	2000      	movs	r0, #0
		break;
    46ea:	e000      	b.n	46ee <system_clock_source_enable+0x9a>
		return STATUS_OK;
    46ec:	2000      	movs	r0, #0
}
    46ee:	4770      	bx	lr
    46f0:	000090e8 	.word	0x000090e8
    46f4:	40000800 	.word	0x40000800
    46f8:	2000011c 	.word	0x2000011c

000046fc <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    46fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    46fe:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    4700:	22c2      	movs	r2, #194	; 0xc2
    4702:	00d2      	lsls	r2, r2, #3
    4704:	4b47      	ldr	r3, [pc, #284]	; (4824 <system_clock_init+0x128>)
    4706:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4708:	4a47      	ldr	r2, [pc, #284]	; (4828 <system_clock_init+0x12c>)
    470a:	6853      	ldr	r3, [r2, #4]
    470c:	211e      	movs	r1, #30
    470e:	438b      	bics	r3, r1
    4710:	391a      	subs	r1, #26
    4712:	430b      	orrs	r3, r1
    4714:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    4716:	2202      	movs	r2, #2
    4718:	ab01      	add	r3, sp, #4
    471a:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    471c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    471e:	4d43      	ldr	r5, [pc, #268]	; (482c <system_clock_init+0x130>)
    4720:	b2e0      	uxtb	r0, r4
    4722:	a901      	add	r1, sp, #4
    4724:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4726:	3401      	adds	r4, #1
    4728:	2c25      	cmp	r4, #37	; 0x25
    472a:	d1f9      	bne.n	4720 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    472c:	a80a      	add	r0, sp, #40	; 0x28
    472e:	2300      	movs	r3, #0
    4730:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    4732:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    4734:	2280      	movs	r2, #128	; 0x80
    4736:	0212      	lsls	r2, r2, #8
    4738:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    473a:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    473c:	2201      	movs	r2, #1
    473e:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    4740:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    4742:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    4744:	3202      	adds	r2, #2
    4746:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    4748:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    474a:	4b39      	ldr	r3, [pc, #228]	; (4830 <system_clock_init+0x134>)
    474c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    474e:	2005      	movs	r0, #5
    4750:	4b38      	ldr	r3, [pc, #224]	; (4834 <system_clock_init+0x138>)
    4752:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    4754:	4933      	ldr	r1, [pc, #204]	; (4824 <system_clock_init+0x128>)
    4756:	2202      	movs	r2, #2
    4758:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    475a:	421a      	tst	r2, r3
    475c:	d0fc      	beq.n	4758 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    475e:	4a31      	ldr	r2, [pc, #196]	; (4824 <system_clock_init+0x128>)
    4760:	8a93      	ldrh	r3, [r2, #20]
    4762:	2180      	movs	r1, #128	; 0x80
    4764:	430b      	orrs	r3, r1
    4766:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    4768:	ab05      	add	r3, sp, #20
    476a:	2100      	movs	r1, #0
    476c:	2200      	movs	r2, #0
    476e:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    4770:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    4772:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    4774:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    4776:	313f      	adds	r1, #63	; 0x3f
    4778:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    477a:	393b      	subs	r1, #59	; 0x3b
    477c:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    477e:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    4780:	4b2d      	ldr	r3, [pc, #180]	; (4838 <system_clock_init+0x13c>)
    4782:	681b      	ldr	r3, [r3, #0]
    4784:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    4786:	2b3f      	cmp	r3, #63	; 0x3f
    4788:	d04a      	beq.n	4820 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    478a:	a805      	add	r0, sp, #20
    478c:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    478e:	4b2b      	ldr	r3, [pc, #172]	; (483c <system_clock_init+0x140>)
    4790:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    4792:	2307      	movs	r3, #7
    4794:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    4796:	3338      	adds	r3, #56	; 0x38
    4798:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    479a:	4b29      	ldr	r3, [pc, #164]	; (4840 <system_clock_init+0x144>)
    479c:	4798      	blx	r3
	config->run_in_standby  = false;
    479e:	a804      	add	r0, sp, #16
    47a0:	2500      	movs	r5, #0
    47a2:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    47a4:	2601      	movs	r6, #1
    47a6:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    47a8:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    47aa:	4b26      	ldr	r3, [pc, #152]	; (4844 <system_clock_init+0x148>)
    47ac:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    47ae:	2006      	movs	r0, #6
    47b0:	4f20      	ldr	r7, [pc, #128]	; (4834 <system_clock_init+0x138>)
    47b2:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    47b4:	4b24      	ldr	r3, [pc, #144]	; (4848 <system_clock_init+0x14c>)
    47b6:	4798      	blx	r3
	config->division_factor    = 1;
    47b8:	ac01      	add	r4, sp, #4
    47ba:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    47bc:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    47be:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    47c0:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    47c2:	2305      	movs	r3, #5
    47c4:	7023      	strb	r3, [r4, #0]
    47c6:	0021      	movs	r1, r4
    47c8:	2001      	movs	r0, #1
    47ca:	4b20      	ldr	r3, [pc, #128]	; (484c <system_clock_init+0x150>)
    47cc:	4798      	blx	r3
    47ce:	2001      	movs	r0, #1
    47d0:	4b1f      	ldr	r3, [pc, #124]	; (4850 <system_clock_init+0x154>)
    47d2:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    47d4:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    47d6:	0021      	movs	r1, r4
    47d8:	2000      	movs	r0, #0
    47da:	4b14      	ldr	r3, [pc, #80]	; (482c <system_clock_init+0x130>)
    47dc:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    47de:	2000      	movs	r0, #0
    47e0:	4b1c      	ldr	r3, [pc, #112]	; (4854 <system_clock_init+0x158>)
    47e2:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    47e4:	2007      	movs	r0, #7
    47e6:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    47e8:	490e      	ldr	r1, [pc, #56]	; (4824 <system_clock_init+0x128>)
    47ea:	22d0      	movs	r2, #208	; 0xd0
    47ec:	68cb      	ldr	r3, [r1, #12]
    47ee:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    47f0:	2bd0      	cmp	r3, #208	; 0xd0
    47f2:	d1fb      	bne.n	47ec <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    47f4:	4a18      	ldr	r2, [pc, #96]	; (4858 <system_clock_init+0x15c>)
    47f6:	2300      	movs	r3, #0
    47f8:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    47fa:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    47fc:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    47fe:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    4800:	a901      	add	r1, sp, #4
    4802:	2201      	movs	r2, #1
    4804:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    4806:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    4808:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    480a:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    480c:	3307      	adds	r3, #7
    480e:	700b      	strb	r3, [r1, #0]
    4810:	2000      	movs	r0, #0
    4812:	4b0e      	ldr	r3, [pc, #56]	; (484c <system_clock_init+0x150>)
    4814:	4798      	blx	r3
    4816:	2000      	movs	r0, #0
    4818:	4b0d      	ldr	r3, [pc, #52]	; (4850 <system_clock_init+0x154>)
    481a:	4798      	blx	r3
#endif
}
    481c:	b00f      	add	sp, #60	; 0x3c
    481e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    4820:	3b20      	subs	r3, #32
    4822:	e7b2      	b.n	478a <system_clock_init+0x8e>
    4824:	40000800 	.word	0x40000800
    4828:	41004000 	.word	0x41004000
    482c:	00004a95 	.word	0x00004a95
    4830:	0000451d 	.word	0x0000451d
    4834:	00004655 	.word	0x00004655
    4838:	00806024 	.word	0x00806024
    483c:	000005b9 	.word	0x000005b9
    4840:	000045d5 	.word	0x000045d5
    4844:	000044e1 	.word	0x000044e1
    4848:	0000485d 	.word	0x0000485d
    484c:	00004881 	.word	0x00004881
    4850:	00004939 	.word	0x00004939
    4854:	00004a09 	.word	0x00004a09
    4858:	40000400 	.word	0x40000400

0000485c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    485c:	4a06      	ldr	r2, [pc, #24]	; (4878 <system_gclk_init+0x1c>)
    485e:	6993      	ldr	r3, [r2, #24]
    4860:	2108      	movs	r1, #8
    4862:	430b      	orrs	r3, r1
    4864:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    4866:	2201      	movs	r2, #1
    4868:	4b04      	ldr	r3, [pc, #16]	; (487c <system_gclk_init+0x20>)
    486a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    486c:	0019      	movs	r1, r3
    486e:	780b      	ldrb	r3, [r1, #0]
    4870:	4213      	tst	r3, r2
    4872:	d1fc      	bne.n	486e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    4874:	4770      	bx	lr
    4876:	46c0      	nop			; (mov r8, r8)
    4878:	40000400 	.word	0x40000400
    487c:	40000c00 	.word	0x40000c00

00004880 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    4880:	b570      	push	{r4, r5, r6, lr}
    4882:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    4884:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    4886:	780d      	ldrb	r5, [r1, #0]
    4888:	022d      	lsls	r5, r5, #8
    488a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    488c:	784b      	ldrb	r3, [r1, #1]
    488e:	2b00      	cmp	r3, #0
    4890:	d002      	beq.n	4898 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    4892:	2380      	movs	r3, #128	; 0x80
    4894:	02db      	lsls	r3, r3, #11
    4896:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    4898:	7a4b      	ldrb	r3, [r1, #9]
    489a:	2b00      	cmp	r3, #0
    489c:	d002      	beq.n	48a4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    489e:	2380      	movs	r3, #128	; 0x80
    48a0:	031b      	lsls	r3, r3, #12
    48a2:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    48a4:	6848      	ldr	r0, [r1, #4]
    48a6:	2801      	cmp	r0, #1
    48a8:	d910      	bls.n	48cc <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    48aa:	1e43      	subs	r3, r0, #1
    48ac:	4218      	tst	r0, r3
    48ae:	d134      	bne.n	491a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    48b0:	2802      	cmp	r0, #2
    48b2:	d930      	bls.n	4916 <system_gclk_gen_set_config+0x96>
    48b4:	2302      	movs	r3, #2
    48b6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    48b8:	3201      	adds	r2, #1
						mask <<= 1) {
    48ba:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    48bc:	4298      	cmp	r0, r3
    48be:	d8fb      	bhi.n	48b8 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    48c0:	0212      	lsls	r2, r2, #8
    48c2:	4332      	orrs	r2, r6
    48c4:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    48c6:	2380      	movs	r3, #128	; 0x80
    48c8:	035b      	lsls	r3, r3, #13
    48ca:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    48cc:	7a0b      	ldrb	r3, [r1, #8]
    48ce:	2b00      	cmp	r3, #0
    48d0:	d002      	beq.n	48d8 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    48d2:	2380      	movs	r3, #128	; 0x80
    48d4:	039b      	lsls	r3, r3, #14
    48d6:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    48d8:	4a13      	ldr	r2, [pc, #76]	; (4928 <system_gclk_gen_set_config+0xa8>)
    48da:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    48dc:	b25b      	sxtb	r3, r3
    48de:	2b00      	cmp	r3, #0
    48e0:	dbfb      	blt.n	48da <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    48e2:	4b12      	ldr	r3, [pc, #72]	; (492c <system_gclk_gen_set_config+0xac>)
    48e4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    48e6:	4b12      	ldr	r3, [pc, #72]	; (4930 <system_gclk_gen_set_config+0xb0>)
    48e8:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    48ea:	4a0f      	ldr	r2, [pc, #60]	; (4928 <system_gclk_gen_set_config+0xa8>)
    48ec:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    48ee:	b25b      	sxtb	r3, r3
    48f0:	2b00      	cmp	r3, #0
    48f2:	dbfb      	blt.n	48ec <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    48f4:	4b0c      	ldr	r3, [pc, #48]	; (4928 <system_gclk_gen_set_config+0xa8>)
    48f6:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    48f8:	001a      	movs	r2, r3
    48fa:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    48fc:	b25b      	sxtb	r3, r3
    48fe:	2b00      	cmp	r3, #0
    4900:	dbfb      	blt.n	48fa <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    4902:	4a09      	ldr	r2, [pc, #36]	; (4928 <system_gclk_gen_set_config+0xa8>)
    4904:	6853      	ldr	r3, [r2, #4]
    4906:	2180      	movs	r1, #128	; 0x80
    4908:	0249      	lsls	r1, r1, #9
    490a:	400b      	ands	r3, r1
    490c:	431d      	orrs	r5, r3
    490e:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    4910:	4b08      	ldr	r3, [pc, #32]	; (4934 <system_gclk_gen_set_config+0xb4>)
    4912:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4914:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    4916:	2200      	movs	r2, #0
    4918:	e7d2      	b.n	48c0 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    491a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    491c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    491e:	2380      	movs	r3, #128	; 0x80
    4920:	029b      	lsls	r3, r3, #10
    4922:	431d      	orrs	r5, r3
    4924:	e7d2      	b.n	48cc <system_gclk_gen_set_config+0x4c>
    4926:	46c0      	nop			; (mov r8, r8)
    4928:	40000c00 	.word	0x40000c00
    492c:	00003349 	.word	0x00003349
    4930:	40000c08 	.word	0x40000c08
    4934:	00003389 	.word	0x00003389

00004938 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    4938:	b510      	push	{r4, lr}
    493a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    493c:	4a0b      	ldr	r2, [pc, #44]	; (496c <system_gclk_gen_enable+0x34>)
    493e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4940:	b25b      	sxtb	r3, r3
    4942:	2b00      	cmp	r3, #0
    4944:	dbfb      	blt.n	493e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    4946:	4b0a      	ldr	r3, [pc, #40]	; (4970 <system_gclk_gen_enable+0x38>)
    4948:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    494a:	4b0a      	ldr	r3, [pc, #40]	; (4974 <system_gclk_gen_enable+0x3c>)
    494c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    494e:	4a07      	ldr	r2, [pc, #28]	; (496c <system_gclk_gen_enable+0x34>)
    4950:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4952:	b25b      	sxtb	r3, r3
    4954:	2b00      	cmp	r3, #0
    4956:	dbfb      	blt.n	4950 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    4958:	4a04      	ldr	r2, [pc, #16]	; (496c <system_gclk_gen_enable+0x34>)
    495a:	6851      	ldr	r1, [r2, #4]
    495c:	2380      	movs	r3, #128	; 0x80
    495e:	025b      	lsls	r3, r3, #9
    4960:	430b      	orrs	r3, r1
    4962:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    4964:	4b04      	ldr	r3, [pc, #16]	; (4978 <system_gclk_gen_enable+0x40>)
    4966:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4968:	bd10      	pop	{r4, pc}
    496a:	46c0      	nop			; (mov r8, r8)
    496c:	40000c00 	.word	0x40000c00
    4970:	00003349 	.word	0x00003349
    4974:	40000c04 	.word	0x40000c04
    4978:	00003389 	.word	0x00003389

0000497c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    497c:	b570      	push	{r4, r5, r6, lr}
    497e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4980:	4a1a      	ldr	r2, [pc, #104]	; (49ec <system_gclk_gen_get_hz+0x70>)
    4982:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4984:	b25b      	sxtb	r3, r3
    4986:	2b00      	cmp	r3, #0
    4988:	dbfb      	blt.n	4982 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    498a:	4b19      	ldr	r3, [pc, #100]	; (49f0 <system_gclk_gen_get_hz+0x74>)
    498c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    498e:	4b19      	ldr	r3, [pc, #100]	; (49f4 <system_gclk_gen_get_hz+0x78>)
    4990:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4992:	4a16      	ldr	r2, [pc, #88]	; (49ec <system_gclk_gen_get_hz+0x70>)
    4994:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4996:	b25b      	sxtb	r3, r3
    4998:	2b00      	cmp	r3, #0
    499a:	dbfb      	blt.n	4994 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    499c:	4e13      	ldr	r6, [pc, #76]	; (49ec <system_gclk_gen_get_hz+0x70>)
    499e:	6870      	ldr	r0, [r6, #4]
    49a0:	04c0      	lsls	r0, r0, #19
    49a2:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    49a4:	4b14      	ldr	r3, [pc, #80]	; (49f8 <system_gclk_gen_get_hz+0x7c>)
    49a6:	4798      	blx	r3
    49a8:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    49aa:	4b12      	ldr	r3, [pc, #72]	; (49f4 <system_gclk_gen_get_hz+0x78>)
    49ac:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    49ae:	6876      	ldr	r6, [r6, #4]
    49b0:	02f6      	lsls	r6, r6, #11
    49b2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    49b4:	4b11      	ldr	r3, [pc, #68]	; (49fc <system_gclk_gen_get_hz+0x80>)
    49b6:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    49b8:	4a0c      	ldr	r2, [pc, #48]	; (49ec <system_gclk_gen_get_hz+0x70>)
    49ba:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    49bc:	b25b      	sxtb	r3, r3
    49be:	2b00      	cmp	r3, #0
    49c0:	dbfb      	blt.n	49ba <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    49c2:	4b0a      	ldr	r3, [pc, #40]	; (49ec <system_gclk_gen_get_hz+0x70>)
    49c4:	689c      	ldr	r4, [r3, #8]
    49c6:	0224      	lsls	r4, r4, #8
    49c8:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    49ca:	4b0d      	ldr	r3, [pc, #52]	; (4a00 <system_gclk_gen_get_hz+0x84>)
    49cc:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    49ce:	2e00      	cmp	r6, #0
    49d0:	d107      	bne.n	49e2 <system_gclk_gen_get_hz+0x66>
    49d2:	2c01      	cmp	r4, #1
    49d4:	d907      	bls.n	49e6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    49d6:	0021      	movs	r1, r4
    49d8:	0028      	movs	r0, r5
    49da:	4b0a      	ldr	r3, [pc, #40]	; (4a04 <system_gclk_gen_get_hz+0x88>)
    49dc:	4798      	blx	r3
    49de:	0005      	movs	r5, r0
    49e0:	e001      	b.n	49e6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    49e2:	3401      	adds	r4, #1
    49e4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    49e6:	0028      	movs	r0, r5
    49e8:	bd70      	pop	{r4, r5, r6, pc}
    49ea:	46c0      	nop			; (mov r8, r8)
    49ec:	40000c00 	.word	0x40000c00
    49f0:	00003349 	.word	0x00003349
    49f4:	40000c04 	.word	0x40000c04
    49f8:	00004451 	.word	0x00004451
    49fc:	40000c08 	.word	0x40000c08
    4a00:	00003389 	.word	0x00003389
    4a04:	000069e1 	.word	0x000069e1

00004a08 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    4a08:	b510      	push	{r4, lr}
    4a0a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4a0c:	4b06      	ldr	r3, [pc, #24]	; (4a28 <system_gclk_chan_enable+0x20>)
    4a0e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4a10:	4b06      	ldr	r3, [pc, #24]	; (4a2c <system_gclk_chan_enable+0x24>)
    4a12:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    4a14:	4a06      	ldr	r2, [pc, #24]	; (4a30 <system_gclk_chan_enable+0x28>)
    4a16:	8853      	ldrh	r3, [r2, #2]
    4a18:	2180      	movs	r1, #128	; 0x80
    4a1a:	01c9      	lsls	r1, r1, #7
    4a1c:	430b      	orrs	r3, r1
    4a1e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    4a20:	4b04      	ldr	r3, [pc, #16]	; (4a34 <system_gclk_chan_enable+0x2c>)
    4a22:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4a24:	bd10      	pop	{r4, pc}
    4a26:	46c0      	nop			; (mov r8, r8)
    4a28:	00003349 	.word	0x00003349
    4a2c:	40000c02 	.word	0x40000c02
    4a30:	40000c00 	.word	0x40000c00
    4a34:	00003389 	.word	0x00003389

00004a38 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    4a38:	b510      	push	{r4, lr}
    4a3a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4a3c:	4b0f      	ldr	r3, [pc, #60]	; (4a7c <system_gclk_chan_disable+0x44>)
    4a3e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4a40:	4b0f      	ldr	r3, [pc, #60]	; (4a80 <system_gclk_chan_disable+0x48>)
    4a42:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    4a44:	4a0f      	ldr	r2, [pc, #60]	; (4a84 <system_gclk_chan_disable+0x4c>)
    4a46:	8853      	ldrh	r3, [r2, #2]
    4a48:	051b      	lsls	r3, r3, #20
    4a4a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    4a4c:	8853      	ldrh	r3, [r2, #2]
    4a4e:	490e      	ldr	r1, [pc, #56]	; (4a88 <system_gclk_chan_disable+0x50>)
    4a50:	400b      	ands	r3, r1
    4a52:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    4a54:	8853      	ldrh	r3, [r2, #2]
    4a56:	490d      	ldr	r1, [pc, #52]	; (4a8c <system_gclk_chan_disable+0x54>)
    4a58:	400b      	ands	r3, r1
    4a5a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    4a5c:	0011      	movs	r1, r2
    4a5e:	2280      	movs	r2, #128	; 0x80
    4a60:	01d2      	lsls	r2, r2, #7
    4a62:	884b      	ldrh	r3, [r1, #2]
    4a64:	4213      	tst	r3, r2
    4a66:	d1fc      	bne.n	4a62 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    4a68:	4906      	ldr	r1, [pc, #24]	; (4a84 <system_gclk_chan_disable+0x4c>)
    4a6a:	884a      	ldrh	r2, [r1, #2]
    4a6c:	0203      	lsls	r3, r0, #8
    4a6e:	4806      	ldr	r0, [pc, #24]	; (4a88 <system_gclk_chan_disable+0x50>)
    4a70:	4002      	ands	r2, r0
    4a72:	4313      	orrs	r3, r2
    4a74:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    4a76:	4b06      	ldr	r3, [pc, #24]	; (4a90 <system_gclk_chan_disable+0x58>)
    4a78:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4a7a:	bd10      	pop	{r4, pc}
    4a7c:	00003349 	.word	0x00003349
    4a80:	40000c02 	.word	0x40000c02
    4a84:	40000c00 	.word	0x40000c00
    4a88:	fffff0ff 	.word	0xfffff0ff
    4a8c:	ffffbfff 	.word	0xffffbfff
    4a90:	00003389 	.word	0x00003389

00004a94 <system_gclk_chan_set_config>:
{
    4a94:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    4a96:	780c      	ldrb	r4, [r1, #0]
    4a98:	0224      	lsls	r4, r4, #8
    4a9a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    4a9c:	4b02      	ldr	r3, [pc, #8]	; (4aa8 <system_gclk_chan_set_config+0x14>)
    4a9e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    4aa0:	b2a4      	uxth	r4, r4
    4aa2:	4b02      	ldr	r3, [pc, #8]	; (4aac <system_gclk_chan_set_config+0x18>)
    4aa4:	805c      	strh	r4, [r3, #2]
}
    4aa6:	bd10      	pop	{r4, pc}
    4aa8:	00004a39 	.word	0x00004a39
    4aac:	40000c00 	.word	0x40000c00

00004ab0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4ab0:	b510      	push	{r4, lr}
    4ab2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4ab4:	4b06      	ldr	r3, [pc, #24]	; (4ad0 <system_gclk_chan_get_hz+0x20>)
    4ab6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4ab8:	4b06      	ldr	r3, [pc, #24]	; (4ad4 <system_gclk_chan_get_hz+0x24>)
    4aba:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    4abc:	4b06      	ldr	r3, [pc, #24]	; (4ad8 <system_gclk_chan_get_hz+0x28>)
    4abe:	885c      	ldrh	r4, [r3, #2]
    4ac0:	0524      	lsls	r4, r4, #20
    4ac2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    4ac4:	4b05      	ldr	r3, [pc, #20]	; (4adc <system_gclk_chan_get_hz+0x2c>)
    4ac6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4ac8:	0020      	movs	r0, r4
    4aca:	4b05      	ldr	r3, [pc, #20]	; (4ae0 <system_gclk_chan_get_hz+0x30>)
    4acc:	4798      	blx	r3
}
    4ace:	bd10      	pop	{r4, pc}
    4ad0:	00003349 	.word	0x00003349
    4ad4:	40000c02 	.word	0x40000c02
    4ad8:	40000c00 	.word	0x40000c00
    4adc:	00003389 	.word	0x00003389
    4ae0:	0000497d 	.word	0x0000497d

00004ae4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    4ae4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    4ae6:	78d3      	ldrb	r3, [r2, #3]
    4ae8:	2b00      	cmp	r3, #0
    4aea:	d135      	bne.n	4b58 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    4aec:	7813      	ldrb	r3, [r2, #0]
    4aee:	2b80      	cmp	r3, #128	; 0x80
    4af0:	d029      	beq.n	4b46 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    4af2:	061b      	lsls	r3, r3, #24
    4af4:	2480      	movs	r4, #128	; 0x80
    4af6:	0264      	lsls	r4, r4, #9
    4af8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4afa:	7854      	ldrb	r4, [r2, #1]
    4afc:	2502      	movs	r5, #2
    4afe:	43ac      	bics	r4, r5
    4b00:	d106      	bne.n	4b10 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    4b02:	7894      	ldrb	r4, [r2, #2]
    4b04:	2c00      	cmp	r4, #0
    4b06:	d120      	bne.n	4b4a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    4b08:	2480      	movs	r4, #128	; 0x80
    4b0a:	02a4      	lsls	r4, r4, #10
    4b0c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    4b0e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4b10:	7854      	ldrb	r4, [r2, #1]
    4b12:	3c01      	subs	r4, #1
    4b14:	2c01      	cmp	r4, #1
    4b16:	d91c      	bls.n	4b52 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    4b18:	040d      	lsls	r5, r1, #16
    4b1a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4b1c:	24a0      	movs	r4, #160	; 0xa0
    4b1e:	05e4      	lsls	r4, r4, #23
    4b20:	432c      	orrs	r4, r5
    4b22:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4b24:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    4b26:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4b28:	24d0      	movs	r4, #208	; 0xd0
    4b2a:	0624      	lsls	r4, r4, #24
    4b2c:	432c      	orrs	r4, r5
    4b2e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4b30:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    4b32:	78d4      	ldrb	r4, [r2, #3]
    4b34:	2c00      	cmp	r4, #0
    4b36:	d122      	bne.n	4b7e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    4b38:	035b      	lsls	r3, r3, #13
    4b3a:	d51c      	bpl.n	4b76 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    4b3c:	7893      	ldrb	r3, [r2, #2]
    4b3e:	2b01      	cmp	r3, #1
    4b40:	d01e      	beq.n	4b80 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    4b42:	6141      	str	r1, [r0, #20]
    4b44:	e017      	b.n	4b76 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    4b46:	2300      	movs	r3, #0
    4b48:	e7d7      	b.n	4afa <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    4b4a:	24c0      	movs	r4, #192	; 0xc0
    4b4c:	02e4      	lsls	r4, r4, #11
    4b4e:	4323      	orrs	r3, r4
    4b50:	e7dd      	b.n	4b0e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    4b52:	4c0d      	ldr	r4, [pc, #52]	; (4b88 <_system_pinmux_config+0xa4>)
    4b54:	4023      	ands	r3, r4
    4b56:	e7df      	b.n	4b18 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    4b58:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    4b5a:	040c      	lsls	r4, r1, #16
    4b5c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4b5e:	23a0      	movs	r3, #160	; 0xa0
    4b60:	05db      	lsls	r3, r3, #23
    4b62:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4b64:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    4b66:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4b68:	23d0      	movs	r3, #208	; 0xd0
    4b6a:	061b      	lsls	r3, r3, #24
    4b6c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4b6e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    4b70:	78d3      	ldrb	r3, [r2, #3]
    4b72:	2b00      	cmp	r3, #0
    4b74:	d103      	bne.n	4b7e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4b76:	7853      	ldrb	r3, [r2, #1]
    4b78:	3b01      	subs	r3, #1
    4b7a:	2b01      	cmp	r3, #1
    4b7c:	d902      	bls.n	4b84 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    4b7e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    4b80:	6181      	str	r1, [r0, #24]
    4b82:	e7f8      	b.n	4b76 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    4b84:	6081      	str	r1, [r0, #8]
}
    4b86:	e7fa      	b.n	4b7e <_system_pinmux_config+0x9a>
    4b88:	fffbffff 	.word	0xfffbffff

00004b8c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    4b8c:	b510      	push	{r4, lr}
    4b8e:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    4b90:	09c1      	lsrs	r1, r0, #7
		return NULL;
    4b92:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4b94:	2900      	cmp	r1, #0
    4b96:	d104      	bne.n	4ba2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    4b98:	0943      	lsrs	r3, r0, #5
    4b9a:	01db      	lsls	r3, r3, #7
    4b9c:	4905      	ldr	r1, [pc, #20]	; (4bb4 <system_pinmux_pin_set_config+0x28>)
    4b9e:	468c      	mov	ip, r1
    4ba0:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    4ba2:	241f      	movs	r4, #31
    4ba4:	4020      	ands	r0, r4
    4ba6:	2101      	movs	r1, #1
    4ba8:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    4baa:	0018      	movs	r0, r3
    4bac:	4b02      	ldr	r3, [pc, #8]	; (4bb8 <system_pinmux_pin_set_config+0x2c>)
    4bae:	4798      	blx	r3
}
    4bb0:	bd10      	pop	{r4, pc}
    4bb2:	46c0      	nop			; (mov r8, r8)
    4bb4:	41004400 	.word	0x41004400
    4bb8:	00004ae5 	.word	0x00004ae5

00004bbc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    4bbc:	4770      	bx	lr
	...

00004bc0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    4bc0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    4bc2:	4b05      	ldr	r3, [pc, #20]	; (4bd8 <system_init+0x18>)
    4bc4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    4bc6:	4b05      	ldr	r3, [pc, #20]	; (4bdc <system_init+0x1c>)
    4bc8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    4bca:	4b05      	ldr	r3, [pc, #20]	; (4be0 <system_init+0x20>)
    4bcc:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    4bce:	4b05      	ldr	r3, [pc, #20]	; (4be4 <system_init+0x24>)
    4bd0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    4bd2:	4b05      	ldr	r3, [pc, #20]	; (4be8 <system_init+0x28>)
    4bd4:	4798      	blx	r3
}
    4bd6:	bd10      	pop	{r4, pc}
    4bd8:	000046fd 	.word	0x000046fd
    4bdc:	000033b9 	.word	0x000033b9
    4be0:	00004bbd 	.word	0x00004bbd
    4be4:	000034c9 	.word	0x000034c9
    4be8:	00004bbd 	.word	0x00004bbd

00004bec <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    4bec:	4b09      	ldr	r3, [pc, #36]	; (4c14 <_tcc_get_inst_index+0x28>)
    4bee:	4298      	cmp	r0, r3
    4bf0:	d00c      	beq.n	4c0c <_tcc_get_inst_index+0x20>
    4bf2:	4b09      	ldr	r3, [pc, #36]	; (4c18 <_tcc_get_inst_index+0x2c>)
    4bf4:	4298      	cmp	r0, r3
    4bf6:	d007      	beq.n	4c08 <_tcc_get_inst_index+0x1c>
    4bf8:	4a08      	ldr	r2, [pc, #32]	; (4c1c <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    4bfa:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
    4bfc:	4290      	cmp	r0, r2
    4bfe:	d001      	beq.n	4c04 <_tcc_get_inst_index+0x18>
}
    4c00:	0018      	movs	r0, r3
    4c02:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    4c04:	3302      	adds	r3, #2
    4c06:	e002      	b.n	4c0e <_tcc_get_inst_index+0x22>
    4c08:	2301      	movs	r3, #1
    4c0a:	e000      	b.n	4c0e <_tcc_get_inst_index+0x22>
    4c0c:	2300      	movs	r3, #0
			return i;
    4c0e:	b2db      	uxtb	r3, r3
    4c10:	e7f6      	b.n	4c00 <_tcc_get_inst_index+0x14>
    4c12:	46c0      	nop			; (mov r8, r8)
    4c14:	42002000 	.word	0x42002000
    4c18:	42002400 	.word	0x42002400
    4c1c:	42002800 	.word	0x42002800

00004c20 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    4c20:	b510      	push	{r4, lr}
    4c22:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    4c24:	0008      	movs	r0, r1
    4c26:	4b4f      	ldr	r3, [pc, #316]	; (4d64 <tcc_get_config_defaults+0x144>)
    4c28:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
    4c2a:	2300      	movs	r3, #0
    4c2c:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    4c2e:	0080      	lsls	r0, r0, #2
    4c30:	4a4d      	ldr	r2, [pc, #308]	; (4d68 <tcc_get_config_defaults+0x148>)
    4c32:	5882      	ldr	r2, [r0, r2]
    4c34:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    4c36:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    4c38:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    4c3a:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    4c3c:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    4c3e:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    4c40:	61e3      	str	r3, [r4, #28]
    4c42:	6223      	str	r3, [r4, #32]
    4c44:	6263      	str	r3, [r4, #36]	; 0x24
    4c46:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    4c48:	7523      	strb	r3, [r4, #20]
    4c4a:	7563      	strb	r3, [r4, #21]
    4c4c:	75a3      	strb	r3, [r4, #22]
    4c4e:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    4c50:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    4c52:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    4c54:	7423      	strb	r3, [r4, #16]
    4c56:	7463      	strb	r3, [r4, #17]
    4c58:	74a3      	strb	r3, [r4, #18]
    4c5a:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    4c5c:	222c      	movs	r2, #44	; 0x2c
    4c5e:	54a3      	strb	r3, [r4, r2]
    4c60:	3201      	adds	r2, #1
    4c62:	54a3      	strb	r3, [r4, r2]
    4c64:	3201      	adds	r2, #1
    4c66:	54a3      	strb	r3, [r4, r2]
    4c68:	3201      	adds	r2, #1
    4c6a:	54a3      	strb	r3, [r4, r2]
    4c6c:	3201      	adds	r2, #1
    4c6e:	54a3      	strb	r3, [r4, r2]
    4c70:	3201      	adds	r2, #1
    4c72:	54a3      	strb	r3, [r4, r2]
    4c74:	3201      	adds	r2, #1
    4c76:	54a3      	strb	r3, [r4, r2]
    4c78:	3201      	adds	r2, #1
    4c7a:	54a3      	strb	r3, [r4, r2]
    4c7c:	3201      	adds	r2, #1
    4c7e:	54a3      	strb	r3, [r4, r2]
    4c80:	3201      	adds	r2, #1
    4c82:	54a3      	strb	r3, [r4, r2]
    4c84:	3201      	adds	r2, #1
    4c86:	54a3      	strb	r3, [r4, r2]
    4c88:	3201      	adds	r2, #1
    4c8a:	54a3      	strb	r3, [r4, r2]
    4c8c:	3201      	adds	r2, #1
    4c8e:	54a3      	strb	r3, [r4, r2]
    4c90:	3201      	adds	r2, #1
    4c92:	54a3      	strb	r3, [r4, r2]
    4c94:	3201      	adds	r2, #1
    4c96:	54a3      	strb	r3, [r4, r2]
    4c98:	3201      	adds	r2, #1
    4c9a:	54a3      	strb	r3, [r4, r2]
    4c9c:	3201      	adds	r2, #1
    4c9e:	54a3      	strb	r3, [r4, r2]
    4ca0:	3201      	adds	r2, #1
    4ca2:	54a3      	strb	r3, [r4, r2]
    4ca4:	3201      	adds	r2, #1
    4ca6:	54a3      	strb	r3, [r4, r2]
    4ca8:	3201      	adds	r2, #1
    4caa:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    4cac:	3201      	adds	r2, #1
    4cae:	54a3      	strb	r3, [r4, r2]
    4cb0:	3201      	adds	r2, #1
    4cb2:	54a3      	strb	r3, [r4, r2]
    4cb4:	3201      	adds	r2, #1
    4cb6:	54a3      	strb	r3, [r4, r2]
    4cb8:	3201      	adds	r2, #1
    4cba:	54a3      	strb	r3, [r4, r2]
    4cbc:	3201      	adds	r2, #1
    4cbe:	54a3      	strb	r3, [r4, r2]
    4cc0:	3201      	adds	r2, #1
    4cc2:	54a3      	strb	r3, [r4, r2]
    4cc4:	3201      	adds	r2, #1
    4cc6:	54a3      	strb	r3, [r4, r2]
    4cc8:	3201      	adds	r2, #1
    4cca:	54a3      	strb	r3, [r4, r2]
    4ccc:	3201      	adds	r2, #1
    4cce:	54a3      	strb	r3, [r4, r2]
    4cd0:	3201      	adds	r2, #1
    4cd2:	54a3      	strb	r3, [r4, r2]
    4cd4:	3201      	adds	r2, #1
    4cd6:	54a3      	strb	r3, [r4, r2]
    4cd8:	3201      	adds	r2, #1
    4cda:	54a3      	strb	r3, [r4, r2]
    4cdc:	3201      	adds	r2, #1
    4cde:	54a3      	strb	r3, [r4, r2]
    4ce0:	3201      	adds	r2, #1
    4ce2:	54a3      	strb	r3, [r4, r2]
    4ce4:	3201      	adds	r2, #1
    4ce6:	54a3      	strb	r3, [r4, r2]
    4ce8:	3201      	adds	r2, #1
    4cea:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    4cec:	3201      	adds	r2, #1
    4cee:	54a3      	strb	r3, [r4, r2]
    4cf0:	3201      	adds	r2, #1
    4cf2:	54a3      	strb	r3, [r4, r2]
    4cf4:	3201      	adds	r2, #1
    4cf6:	54a3      	strb	r3, [r4, r2]
    4cf8:	3201      	adds	r2, #1
    4cfa:	54a3      	strb	r3, [r4, r2]
    4cfc:	3201      	adds	r2, #1
    4cfe:	54a3      	strb	r3, [r4, r2]
    4d00:	3201      	adds	r2, #1
    4d02:	54a3      	strb	r3, [r4, r2]
    4d04:	3201      	adds	r2, #1
    4d06:	54a3      	strb	r3, [r4, r2]
    4d08:	3201      	adds	r2, #1
    4d0a:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    4d0c:	3241      	adds	r2, #65	; 0x41
    4d0e:	54a3      	strb	r3, [r4, r2]
    4d10:	65a3      	str	r3, [r4, #88]	; 0x58
    4d12:	67a3      	str	r3, [r4, #120]	; 0x78
    4d14:	3201      	adds	r2, #1
    4d16:	54a3      	strb	r3, [r4, r2]
    4d18:	65e3      	str	r3, [r4, #92]	; 0x5c
    4d1a:	67e3      	str	r3, [r4, #124]	; 0x7c
    4d1c:	3201      	adds	r2, #1
    4d1e:	54a3      	strb	r3, [r4, r2]
    4d20:	6623      	str	r3, [r4, #96]	; 0x60
    4d22:	3a1a      	subs	r2, #26
    4d24:	50a3      	str	r3, [r4, r2]
    4d26:	321b      	adds	r2, #27
    4d28:	54a3      	strb	r3, [r4, r2]
    4d2a:	6663      	str	r3, [r4, #100]	; 0x64
    4d2c:	3a17      	subs	r2, #23
    4d2e:	50a3      	str	r3, [r4, r2]
    4d30:	3218      	adds	r2, #24
    4d32:	54a3      	strb	r3, [r4, r2]
    4d34:	66a3      	str	r3, [r4, #104]	; 0x68
    4d36:	3a14      	subs	r2, #20
    4d38:	50a3      	str	r3, [r4, r2]
    4d3a:	3215      	adds	r2, #21
    4d3c:	54a3      	strb	r3, [r4, r2]
    4d3e:	66e3      	str	r3, [r4, #108]	; 0x6c
    4d40:	3a11      	subs	r2, #17
    4d42:	50a3      	str	r3, [r4, r2]
    4d44:	3212      	adds	r2, #18
    4d46:	54a3      	strb	r3, [r4, r2]
    4d48:	6723      	str	r3, [r4, #112]	; 0x70
    4d4a:	3a0e      	subs	r2, #14
    4d4c:	50a3      	str	r3, [r4, r2]
    4d4e:	320f      	adds	r2, #15
    4d50:	54a3      	strb	r3, [r4, r2]
    4d52:	6763      	str	r3, [r4, #116]	; 0x74
    4d54:	3a0b      	subs	r2, #11
    4d56:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    4d58:	2101      	movs	r1, #1
    4d5a:	320c      	adds	r2, #12
    4d5c:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    4d5e:	3201      	adds	r2, #1
    4d60:	54a3      	strb	r3, [r4, r2]
}
    4d62:	bd10      	pop	{r4, pc}
    4d64:	00004bed 	.word	0x00004bed
    4d68:	00009120 	.word	0x00009120

00004d6c <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    4d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d6e:	46de      	mov	lr, fp
    4d70:	4657      	mov	r7, sl
    4d72:	464e      	mov	r6, r9
    4d74:	4645      	mov	r5, r8
    4d76:	b5e0      	push	{r5, r6, r7, lr}
    4d78:	b091      	sub	sp, #68	; 0x44
    4d7a:	9001      	str	r0, [sp, #4]
    4d7c:	000c      	movs	r4, r1
    4d7e:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    4d80:	0008      	movs	r0, r1
    4d82:	4bc3      	ldr	r3, [pc, #780]	; (5090 <tcc_init+0x324>)
    4d84:	4798      	blx	r3
    4d86:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    4d88:	0001      	movs	r1, r0
			PM->APBCMASK.reg |= mask;
    4d8a:	48c2      	ldr	r0, [pc, #776]	; (5094 <tcc_init+0x328>)
    4d8c:	6a02      	ldr	r2, [r0, #32]
    4d8e:	009e      	lsls	r6, r3, #2
    4d90:	4fc1      	ldr	r7, [pc, #772]	; (5098 <tcc_init+0x32c>)
    4d92:	59f7      	ldr	r7, [r6, r7]
    4d94:	433a      	orrs	r2, r7
    4d96:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    4d98:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    4d9a:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    4d9c:	0792      	lsls	r2, r2, #30
    4d9e:	d506      	bpl.n	4dae <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    4da0:	b011      	add	sp, #68	; 0x44
    4da2:	bc3c      	pop	{r2, r3, r4, r5}
    4da4:	4690      	mov	r8, r2
    4da6:	4699      	mov	r9, r3
    4da8:	46a2      	mov	sl, r4
    4daa:	46ab      	mov	fp, r5
    4dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    4dae:	6822      	ldr	r2, [r4, #0]
    4db0:	2701      	movs	r7, #1
    4db2:	4017      	ands	r7, r2
    4db4:	d1f4      	bne.n	4da0 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
    4db6:	48b9      	ldr	r0, [pc, #740]	; (509c <tcc_init+0x330>)
    4db8:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
    4dba:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
    4dbc:	682e      	ldr	r6, [r5, #0]
    4dbe:	42b2      	cmp	r2, r6
    4dc0:	d3ee      	bcc.n	4da0 <tcc_init+0x34>
		|| (config->counter.period > count_max)
    4dc2:	686e      	ldr	r6, [r5, #4]
    4dc4:	42b2      	cmp	r2, r6
    4dc6:	d3eb      	bcc.n	4da0 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
    4dc8:	69e8      	ldr	r0, [r5, #28]
    4dca:	4282      	cmp	r2, r0
    4dcc:	d200      	bcs.n	4dd0 <tcc_init+0x64>
    4dce:	e1b9      	b.n	5144 <tcc_init+0x3d8>
    4dd0:	6a28      	ldr	r0, [r5, #32]
    4dd2:	4282      	cmp	r2, r0
    4dd4:	d200      	bcs.n	4dd8 <tcc_init+0x6c>
    4dd6:	e1b7      	b.n	5148 <tcc_init+0x3dc>
    4dd8:	6a68      	ldr	r0, [r5, #36]	; 0x24
    4dda:	4282      	cmp	r2, r0
    4ddc:	d200      	bcs.n	4de0 <tcc_init+0x74>
    4dde:	e1b5      	b.n	514c <tcc_init+0x3e0>
    4de0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    4de2:	4282      	cmp	r2, r0
    4de4:	d200      	bcs.n	4de8 <tcc_init+0x7c>
    4de6:	e1b3      	b.n	5150 <tcc_init+0x3e4>
    4de8:	2298      	movs	r2, #152	; 0x98
    4dea:	4694      	mov	ip, r2
    4dec:	44ac      	add	ip, r5
    4dee:	4662      	mov	r2, ip
    4df0:	9208      	str	r2, [sp, #32]
    4df2:	2000      	movs	r0, #0
    4df4:	e003      	b.n	4dfe <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    4df6:	3001      	adds	r0, #1
    4df8:	3201      	adds	r2, #1
    4dfa:	2808      	cmp	r0, #8
    4dfc:	d008      	beq.n	4e10 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
    4dfe:	7816      	ldrb	r6, [r2, #0]
    4e00:	2e00      	cmp	r6, #0
    4e02:	d0f8      	beq.n	4df6 <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
    4e04:	4ea6      	ldr	r6, [pc, #664]	; (50a0 <tcc_init+0x334>)
    4e06:	5c76      	ldrb	r6, [r6, r1]
    4e08:	4286      	cmp	r6, r0
    4e0a:	dcf4      	bgt.n	4df6 <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
    4e0c:	2017      	movs	r0, #23
    4e0e:	e7c7      	b.n	4da0 <tcc_init+0x34>
    4e10:	2200      	movs	r2, #0
    4e12:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    4e14:	2080      	movs	r0, #128	; 0x80
    4e16:	0440      	lsls	r0, r0, #17
    4e18:	4684      	mov	ip, r0
    4e1a:	e002      	b.n	4e22 <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    4e1c:	3201      	adds	r2, #1
    4e1e:	2a04      	cmp	r2, #4
    4e20:	d00e      	beq.n	4e40 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
    4e22:	18a8      	adds	r0, r5, r2
    4e24:	7c00      	ldrb	r0, [r0, #16]
    4e26:	2801      	cmp	r0, #1
    4e28:	d1f8      	bne.n	4e1c <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
    4e2a:	489e      	ldr	r0, [pc, #632]	; (50a4 <tcc_init+0x338>)
    4e2c:	5c40      	ldrb	r0, [r0, r1]
    4e2e:	4290      	cmp	r0, r2
    4e30:	da00      	bge.n	4e34 <tcc_init+0xc8>
    4e32:	e18f      	b.n	5154 <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    4e34:	4660      	mov	r0, ip
    4e36:	4090      	lsls	r0, r2
    4e38:	9e02      	ldr	r6, [sp, #8]
    4e3a:	4306      	orrs	r6, r0
    4e3c:	9602      	str	r6, [sp, #8]
    4e3e:	e7ed      	b.n	4e1c <tcc_init+0xb0>
	if (config->run_in_standby) {
    4e40:	329d      	adds	r2, #157	; 0x9d
    4e42:	5caa      	ldrb	r2, [r5, r2]
    4e44:	2a00      	cmp	r2, #0
    4e46:	d004      	beq.n	4e52 <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    4e48:	2280      	movs	r2, #128	; 0x80
    4e4a:	0112      	lsls	r2, r2, #4
    4e4c:	9902      	ldr	r1, [sp, #8]
    4e4e:	4311      	orrs	r1, r2
    4e50:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    4e52:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    4e54:	1e51      	subs	r1, r2, #1
    4e56:	418a      	sbcs	r2, r1
    4e58:	0092      	lsls	r2, r2, #2
    4e5a:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    4e5c:	7a6a      	ldrb	r2, [r5, #9]
    4e5e:	2a01      	cmp	r2, #1
    4e60:	d022      	beq.n	4ea8 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
    4e62:	4a90      	ldr	r2, [pc, #576]	; (50a4 <tcc_init+0x338>)
    4e64:	5cd2      	ldrb	r2, [r2, r3]
    4e66:	0011      	movs	r1, r2
    4e68:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
    4e6a:	2235      	movs	r2, #53	; 0x35
    4e6c:	5caa      	ldrb	r2, [r5, r2]
    4e6e:	428a      	cmp	r2, r1
    4e70:	d300      	bcc.n	4e74 <tcc_init+0x108>
    4e72:	e179      	b.n	5168 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    4e74:	212c      	movs	r1, #44	; 0x2c
    4e76:	5c69      	ldrb	r1, [r5, r1]
    4e78:	290f      	cmp	r1, #15
    4e7a:	d900      	bls.n	4e7e <tcc_init+0x112>
    4e7c:	e174      	b.n	5168 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    4e7e:	7b28      	ldrb	r0, [r5, #12]
    4e80:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    4e82:	7ae8      	ldrb	r0, [r5, #11]
    4e84:	900b      	str	r0, [sp, #44]	; 0x2c
    4e86:	202d      	movs	r0, #45	; 0x2d
    4e88:	4682      	mov	sl, r0
    4e8a:	44aa      	add	sl, r5
    4e8c:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    4e8e:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
    4e90:	ae0e      	add	r6, sp, #56	; 0x38
    4e92:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    4e94:	26c0      	movs	r6, #192	; 0xc0
    4e96:	0136      	lsls	r6, r6, #4
    4e98:	46b1      	mov	r9, r6
    4e9a:	4684      	mov	ip, r0
    4e9c:	46a0      	mov	r8, r4
    4e9e:	0028      	movs	r0, r5
    4ea0:	4655      	mov	r5, sl
    4ea2:	9309      	str	r3, [sp, #36]	; 0x24
    4ea4:	4682      	mov	sl, r0
    4ea6:	e035      	b.n	4f14 <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
    4ea8:	9906      	ldr	r1, [sp, #24]
    4eaa:	4311      	orrs	r1, r2
    4eac:	9106      	str	r1, [sp, #24]
    4eae:	e7d8      	b.n	4e62 <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    4eb0:	0292      	lsls	r2, r2, #10
    4eb2:	464f      	mov	r7, r9
    4eb4:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    4eb6:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
    4eb8:	7919      	ldrb	r1, [r3, #4]
    4eba:	468b      	mov	fp, r1
    4ebc:	2103      	movs	r1, #3
    4ebe:	465f      	mov	r7, fp
    4ec0:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    4ec2:	430a      	orrs	r2, r1
    4ec4:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
    4ec6:	795a      	ldrb	r2, [r3, #5]
    4ec8:	0152      	lsls	r2, r2, #5
    4eca:	2160      	movs	r1, #96	; 0x60
    4ecc:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    4ece:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
    4ed0:	7999      	ldrb	r1, [r3, #6]
    4ed2:	0209      	lsls	r1, r1, #8
    4ed4:	26c0      	movs	r6, #192	; 0xc0
    4ed6:	00b6      	lsls	r6, r6, #2
    4ed8:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    4eda:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    4edc:	79da      	ldrb	r2, [r3, #7]
    4ede:	0312      	lsls	r2, r2, #12
    4ee0:	21e0      	movs	r1, #224	; 0xe0
    4ee2:	01c9      	lsls	r1, r1, #7
    4ee4:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    4ee6:	4316      	orrs	r6, r2
    4ee8:	4334      	orrs	r4, r6
    4eea:	9a03      	ldr	r2, [sp, #12]
    4eec:	4314      	orrs	r4, r2
    4eee:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
    4ef0:	4662      	mov	r2, ip
    4ef2:	9907      	ldr	r1, [sp, #28]
    4ef4:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    4ef6:	2a04      	cmp	r2, #4
    4ef8:	d02a      	beq.n	4f50 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
    4efa:	7c9a      	ldrb	r2, [r3, #18]
    4efc:	9905      	ldr	r1, [sp, #20]
    4efe:	4291      	cmp	r1, r2
    4f00:	d800      	bhi.n	4f04 <tcc_init+0x198>
    4f02:	e131      	b.n	5168 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    4f04:	7a59      	ldrb	r1, [r3, #9]
    4f06:	350a      	adds	r5, #10
    4f08:	2304      	movs	r3, #4
    4f0a:	469b      	mov	fp, r3
    4f0c:	44dc      	add	ip, fp
    4f0e:	290f      	cmp	r1, #15
    4f10:	d900      	bls.n	4f14 <tcc_init+0x1a8>
    4f12:	e129      	b.n	5168 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    4f14:	0609      	lsls	r1, r1, #24
    4f16:	23f0      	movs	r3, #240	; 0xf0
    4f18:	051b      	lsls	r3, r3, #20
    4f1a:	4019      	ands	r1, r3
    4f1c:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    4f1e:	782e      	ldrb	r6, [r5, #0]
    4f20:	0436      	lsls	r6, r6, #16
    4f22:	20ff      	movs	r0, #255	; 0xff
    4f24:	0400      	lsls	r0, r0, #16
    4f26:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    4f28:	7868      	ldrb	r0, [r5, #1]
    4f2a:	2480      	movs	r4, #128	; 0x80
    4f2c:	2800      	cmp	r0, #0
    4f2e:	d100      	bne.n	4f32 <tcc_init+0x1c6>
    4f30:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    4f32:	7898      	ldrb	r0, [r3, #2]
    4f34:	2708      	movs	r7, #8
    4f36:	9703      	str	r7, [sp, #12]
    4f38:	2800      	cmp	r0, #0
    4f3a:	d101      	bne.n	4f40 <tcc_init+0x1d4>
    4f3c:	9804      	ldr	r0, [sp, #16]
    4f3e:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    4f40:	78d8      	ldrb	r0, [r3, #3]
    4f42:	4683      	mov	fp, r0
    4f44:	2010      	movs	r0, #16
    4f46:	465f      	mov	r7, fp
    4f48:	2f00      	cmp	r7, #0
    4f4a:	d1b1      	bne.n	4eb0 <tcc_init+0x144>
    4f4c:	9804      	ldr	r0, [sp, #16]
    4f4e:	e7af      	b.n	4eb0 <tcc_init+0x144>
    4f50:	4644      	mov	r4, r8
    4f52:	4655      	mov	r5, sl
    4f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
    4f56:	4a52      	ldr	r2, [pc, #328]	; (50a0 <tcc_init+0x334>)
    4f58:	5cd2      	ldrb	r2, [r2, r3]
    4f5a:	4691      	mov	r9, r2
    4f5c:	4651      	mov	r1, sl
    4f5e:	3150      	adds	r1, #80	; 0x50
    4f60:	4650      	mov	r0, sl
    4f62:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
    4f64:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    4f66:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    4f68:	2601      	movs	r6, #1
    4f6a:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    4f6c:	2602      	movs	r6, #2
    4f6e:	36ff      	adds	r6, #255	; 0xff
    4f70:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    4f72:	2680      	movs	r6, #128	; 0x80
    4f74:	0276      	lsls	r6, r6, #9
    4f76:	46b0      	mov	r8, r6
    4f78:	46a4      	mov	ip, r4
    4f7a:	001c      	movs	r4, r3
    4f7c:	464b      	mov	r3, r9
    4f7e:	e00f      	b.n	4fa0 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
    4f80:	7806      	ldrb	r6, [r0, #0]
    4f82:	2e00      	cmp	r6, #0
    4f84:	d007      	beq.n	4f96 <tcc_init+0x22a>
			if (i >= ow_num) {
    4f86:	4293      	cmp	r3, r2
    4f88:	d800      	bhi.n	4f8c <tcc_init+0x220>
    4f8a:	e0e7      	b.n	515c <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    4f8c:	2e02      	cmp	r6, #2
    4f8e:	d014      	beq.n	4fba <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    4f90:	4656      	mov	r6, sl
    4f92:	4096      	lsls	r6, r2
    4f94:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    4f96:	3201      	adds	r2, #1
    4f98:	3101      	adds	r1, #1
    4f9a:	3002      	adds	r0, #2
    4f9c:	2a08      	cmp	r2, #8
    4f9e:	d010      	beq.n	4fc2 <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
    4fa0:	780e      	ldrb	r6, [r1, #0]
    4fa2:	2e00      	cmp	r6, #0
    4fa4:	d0ec      	beq.n	4f80 <tcc_init+0x214>
			if (i >= ow_num) {
    4fa6:	4293      	cmp	r3, r2
    4fa8:	d800      	bhi.n	4fac <tcc_init+0x240>
    4faa:	e0d5      	b.n	5158 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    4fac:	4646      	mov	r6, r8
    4fae:	4096      	lsls	r6, r2
    4fb0:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
    4fb2:	7806      	ldrb	r6, [r0, #0]
    4fb4:	2e00      	cmp	r6, #0
    4fb6:	d1e9      	bne.n	4f8c <tcc_init+0x220>
    4fb8:	e7ed      	b.n	4f96 <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    4fba:	465e      	mov	r6, fp
    4fbc:	4096      	lsls	r6, r2
    4fbe:	4337      	orrs	r7, r6
    4fc0:	e7e9      	b.n	4f96 <tcc_init+0x22a>
    4fc2:	4699      	mov	r9, r3
    4fc4:	0023      	movs	r3, r4
    4fc6:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    4fc8:	7e6a      	ldrb	r2, [r5, #25]
    4fca:	0112      	lsls	r2, r2, #4
    4fcc:	2130      	movs	r1, #48	; 0x30
    4fce:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    4fd0:	7e28      	ldrb	r0, [r5, #24]
    4fd2:	2207      	movs	r2, #7
    4fd4:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    4fd6:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    4fd8:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    4fda:	2080      	movs	r0, #128	; 0x80
    4fdc:	0240      	lsls	r0, r0, #9
    4fde:	000e      	movs	r6, r1
    4fe0:	e002      	b.n	4fe8 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    4fe2:	3201      	adds	r2, #1
    4fe4:	2a04      	cmp	r2, #4
    4fe6:	d00b      	beq.n	5000 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
    4fe8:	18a9      	adds	r1, r5, r2
    4fea:	7d09      	ldrb	r1, [r1, #20]
    4fec:	2900      	cmp	r1, #0
    4fee:	d0f8      	beq.n	4fe2 <tcc_init+0x276>
			if (n >= cc_num) {
    4ff0:	9905      	ldr	r1, [sp, #20]
    4ff2:	4291      	cmp	r1, r2
    4ff4:	dc00      	bgt.n	4ff8 <tcc_init+0x28c>
    4ff6:	e0b3      	b.n	5160 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
    4ff8:	0001      	movs	r1, r0
    4ffa:	4091      	lsls	r1, r2
    4ffc:	430e      	orrs	r6, r1
    4ffe:	e7f0      	b.n	4fe2 <tcc_init+0x276>
    5000:	46b2      	mov	sl, r6
    5002:	9801      	ldr	r0, [sp, #4]
    5004:	0002      	movs	r2, r0
    5006:	3204      	adds	r2, #4
    5008:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    500a:	2100      	movs	r1, #0
    500c:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    500e:	4282      	cmp	r2, r0
    5010:	d1fc      	bne.n	500c <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
    5012:	2200      	movs	r2, #0
    5014:	9801      	ldr	r0, [sp, #4]
    5016:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    5018:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    501a:	0099      	lsls	r1, r3, #2
    501c:	4a22      	ldr	r2, [pc, #136]	; (50a8 <tcc_init+0x33c>)
    501e:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
    5020:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    5022:	22a0      	movs	r2, #160	; 0xa0
    5024:	5ca9      	ldrb	r1, [r5, r2]
    5026:	3a64      	subs	r2, #100	; 0x64
    5028:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
    502a:	a90d      	add	r1, sp, #52	; 0x34
    502c:	7aaa      	ldrb	r2, [r5, #10]
    502e:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    5030:	4a1e      	ldr	r2, [pc, #120]	; (50ac <tcc_init+0x340>)
    5032:	5cd6      	ldrb	r6, [r2, r3]
    5034:	0030      	movs	r0, r6
    5036:	4b1e      	ldr	r3, [pc, #120]	; (50b0 <tcc_init+0x344>)
    5038:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    503a:	0030      	movs	r0, r6
    503c:	4b1d      	ldr	r3, [pc, #116]	; (50b4 <tcc_init+0x348>)
    503e:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    5040:	464b      	mov	r3, r9
    5042:	2b00      	cmp	r3, #0
    5044:	dd3c      	ble.n	50c0 <tcc_init+0x354>
    5046:	002e      	movs	r6, r5
    5048:	3658      	adds	r6, #88	; 0x58
    504a:	3398      	adds	r3, #152	; 0x98
    504c:	4698      	mov	r8, r3
    504e:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5050:	2301      	movs	r3, #1
    5052:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
    5054:	46ab      	mov	fp, r5
    5056:	4645      	mov	r5, r8
    5058:	46a0      	mov	r8, r4
    505a:	9c08      	ldr	r4, [sp, #32]
    505c:	e003      	b.n	5066 <tcc_init+0x2fa>
    505e:	3401      	adds	r4, #1
    5060:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    5062:	42ac      	cmp	r4, r5
    5064:	d02a      	beq.n	50bc <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
    5066:	7823      	ldrb	r3, [r4, #0]
    5068:	2b00      	cmp	r3, #0
    506a:	d0f8      	beq.n	505e <tcc_init+0x2f2>
    506c:	ab0c      	add	r3, sp, #48	; 0x30
    506e:	464a      	mov	r2, r9
    5070:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    5072:	2300      	movs	r3, #0
    5074:	aa0c      	add	r2, sp, #48	; 0x30
    5076:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    5078:	0013      	movs	r3, r2
    507a:	2220      	movs	r2, #32
    507c:	18b2      	adds	r2, r6, r2
    507e:	7812      	ldrb	r2, [r2, #0]
    5080:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    5082:	464a      	mov	r2, r9
    5084:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    5086:	7830      	ldrb	r0, [r6, #0]
    5088:	0019      	movs	r1, r3
    508a:	4b0b      	ldr	r3, [pc, #44]	; (50b8 <tcc_init+0x34c>)
    508c:	4798      	blx	r3
    508e:	e7e6      	b.n	505e <tcc_init+0x2f2>
    5090:	00004bed 	.word	0x00004bed
    5094:	40000400 	.word	0x40000400
    5098:	0000910c 	.word	0x0000910c
    509c:	00009120 	.word	0x00009120
    50a0:	0000912c 	.word	0x0000912c
    50a4:	00009118 	.word	0x00009118
    50a8:	20000418 	.word	0x20000418
    50ac:	0000911c 	.word	0x0000911c
    50b0:	00004a95 	.word	0x00004a95
    50b4:	00004a09 	.word	0x00004a09
    50b8:	00004b8d 	.word	0x00004b8d
    50bc:	4644      	mov	r4, r8
    50be:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    50c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    50c2:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    50c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    50c6:	0212      	lsls	r2, r2, #8
    50c8:	4313      	orrs	r3, r2
    50ca:	9a02      	ldr	r2, [sp, #8]
    50cc:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    50ce:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    50d0:	2204      	movs	r2, #4
    50d2:	68a3      	ldr	r3, [r4, #8]
    50d4:	421a      	tst	r2, r3
    50d6:	d1fc      	bne.n	50d2 <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
    50d8:	23ff      	movs	r3, #255	; 0xff
    50da:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    50dc:	2204      	movs	r2, #4
    50de:	68a3      	ldr	r3, [r4, #8]
    50e0:	421a      	tst	r2, r3
    50e2:	d1fc      	bne.n	50de <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
    50e4:	466b      	mov	r3, sp
    50e6:	7e1b      	ldrb	r3, [r3, #24]
    50e8:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    50ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    50ec:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    50ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    50f0:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    50f2:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    50f4:	4a1d      	ldr	r2, [pc, #116]	; (516c <tcc_init+0x400>)
    50f6:	68a3      	ldr	r3, [r4, #8]
    50f8:	4213      	tst	r3, r2
    50fa:	d1fc      	bne.n	50f6 <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
    50fc:	4653      	mov	r3, sl
    50fe:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    5100:	2210      	movs	r2, #16
    5102:	68a3      	ldr	r3, [r4, #8]
    5104:	421a      	tst	r2, r3
    5106:	d1fc      	bne.n	5102 <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
    5108:	682b      	ldr	r3, [r5, #0]
    510a:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    510c:	4a18      	ldr	r2, [pc, #96]	; (5170 <tcc_init+0x404>)
    510e:	68a3      	ldr	r3, [r4, #8]
    5110:	4213      	tst	r3, r2
    5112:	d1fc      	bne.n	510e <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
    5114:	686b      	ldr	r3, [r5, #4]
    5116:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    5118:	9805      	ldr	r0, [sp, #20]
    511a:	2800      	cmp	r0, #0
    511c:	dd22      	ble.n	5164 <tcc_init+0x3f8>
    511e:	351c      	adds	r5, #28
    5120:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    5122:	4e14      	ldr	r6, [pc, #80]	; (5174 <tcc_init+0x408>)
    5124:	0032      	movs	r2, r6
    5126:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    5128:	68a3      	ldr	r3, [r4, #8]
    512a:	421a      	tst	r2, r3
    512c:	d1fc      	bne.n	5128 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
    512e:	cd04      	ldmia	r5!, {r2}
    5130:	000b      	movs	r3, r1
    5132:	3310      	adds	r3, #16
    5134:	009b      	lsls	r3, r3, #2
    5136:	18e3      	adds	r3, r4, r3
    5138:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    513a:	3101      	adds	r1, #1
    513c:	4288      	cmp	r0, r1
    513e:	dcf1      	bgt.n	5124 <tcc_init+0x3b8>
	return STATUS_OK;
    5140:	2000      	movs	r0, #0
    5142:	e62d      	b.n	4da0 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
    5144:	2017      	movs	r0, #23
    5146:	e62b      	b.n	4da0 <tcc_init+0x34>
    5148:	2017      	movs	r0, #23
    514a:	e629      	b.n	4da0 <tcc_init+0x34>
    514c:	2017      	movs	r0, #23
    514e:	e627      	b.n	4da0 <tcc_init+0x34>
    5150:	2017      	movs	r0, #23
    5152:	e625      	b.n	4da0 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    5154:	2017      	movs	r0, #23
    5156:	e623      	b.n	4da0 <tcc_init+0x34>
			if (i >= ow_num) {
    5158:	2017      	movs	r0, #23
    515a:	e621      	b.n	4da0 <tcc_init+0x34>
			if (i >= ow_num) {
    515c:	2017      	movs	r0, #23
    515e:	e61f      	b.n	4da0 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    5160:	2017      	movs	r0, #23
    5162:	e61d      	b.n	4da0 <tcc_init+0x34>
	return STATUS_OK;
    5164:	2000      	movs	r0, #0
    5166:	e61b      	b.n	4da0 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    5168:	2017      	movs	r0, #23
    516a:	e619      	b.n	4da0 <tcc_init+0x34>
    516c:	00020040 	.word	0x00020040
    5170:	00040080 	.word	0x00040080
    5174:	00080100 	.word	0x00080100

00005178 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    5178:	0092      	lsls	r2, r2, #2
    517a:	1883      	adds	r3, r0, r2
    517c:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    517e:	4b03      	ldr	r3, [pc, #12]	; (518c <tcc_register_callback+0x14>)
    5180:	58d3      	ldr	r3, [r2, r3]
    5182:	6b42      	ldr	r2, [r0, #52]	; 0x34
    5184:	4313      	orrs	r3, r2
    5186:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
    5188:	2000      	movs	r0, #0
    518a:	4770      	bx	lr
    518c:	00009130 	.word	0x00009130

00005190 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    5190:	b570      	push	{r4, r5, r6, lr}
    5192:	0004      	movs	r4, r0
    5194:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    5196:	6800      	ldr	r0, [r0, #0]
    5198:	4b09      	ldr	r3, [pc, #36]	; (51c0 <tcc_enable_callback+0x30>)
    519a:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    519c:	4b09      	ldr	r3, [pc, #36]	; (51c4 <tcc_enable_callback+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    519e:	5c1b      	ldrb	r3, [r3, r0]
    51a0:	221f      	movs	r2, #31
    51a2:	401a      	ands	r2, r3
    51a4:	2301      	movs	r3, #1
    51a6:	4093      	lsls	r3, r2
    51a8:	4a07      	ldr	r2, [pc, #28]	; (51c8 <tcc_enable_callback+0x38>)
    51aa:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    51ac:	00ad      	lsls	r5, r5, #2
    51ae:	4b07      	ldr	r3, [pc, #28]	; (51cc <tcc_enable_callback+0x3c>)
    51b0:	58ea      	ldr	r2, [r5, r3]
    51b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    51b4:	4313      	orrs	r3, r2
    51b6:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    51b8:	6823      	ldr	r3, [r4, #0]
    51ba:	629a      	str	r2, [r3, #40]	; 0x28
}
    51bc:	bd70      	pop	{r4, r5, r6, pc}
    51be:	46c0      	nop			; (mov r8, r8)
    51c0:	00004bed 	.word	0x00004bed
    51c4:	00009160 	.word	0x00009160
    51c8:	e000e100 	.word	0xe000e100
    51cc:	00009130 	.word	0x00009130

000051d0 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    51d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    51d2:	46c6      	mov	lr, r8
    51d4:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    51d6:	0080      	lsls	r0, r0, #2
    51d8:	4b0e      	ldr	r3, [pc, #56]	; (5214 <_tcc_interrupt_handler+0x44>)
    51da:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    51dc:	683b      	ldr	r3, [r7, #0]
    51de:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    51e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    51e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    51e4:	4013      	ands	r3, r2
    51e6:	401e      	ands	r6, r3
    51e8:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    51ea:	4b0b      	ldr	r3, [pc, #44]	; (5218 <_tcc_interrupt_handler+0x48>)
    51ec:	4698      	mov	r8, r3
    51ee:	e002      	b.n	51f6 <_tcc_interrupt_handler+0x26>
    51f0:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    51f2:	2c30      	cmp	r4, #48	; 0x30
    51f4:	d00a      	beq.n	520c <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    51f6:	4643      	mov	r3, r8
    51f8:	58e5      	ldr	r5, [r4, r3]
    51fa:	4235      	tst	r5, r6
    51fc:	d0f8      	beq.n	51f0 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    51fe:	193b      	adds	r3, r7, r4
    5200:	685b      	ldr	r3, [r3, #4]
    5202:	0038      	movs	r0, r7
    5204:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    5206:	683b      	ldr	r3, [r7, #0]
    5208:	62dd      	str	r5, [r3, #44]	; 0x2c
    520a:	e7f1      	b.n	51f0 <_tcc_interrupt_handler+0x20>
		}
	}
}
    520c:	bc04      	pop	{r2}
    520e:	4690      	mov	r8, r2
    5210:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5212:	46c0      	nop			; (mov r8, r8)
    5214:	20000418 	.word	0x20000418
    5218:	00009130 	.word	0x00009130

0000521c <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    521c:	b510      	push	{r4, lr}
    521e:	2000      	movs	r0, #0
    5220:	4b01      	ldr	r3, [pc, #4]	; (5228 <TCC0_Handler+0xc>)
    5222:	4798      	blx	r3
    5224:	bd10      	pop	{r4, pc}
    5226:	46c0      	nop			; (mov r8, r8)
    5228:	000051d1 	.word	0x000051d1

0000522c <TCC1_Handler>:
    522c:	b510      	push	{r4, lr}
    522e:	2001      	movs	r0, #1
    5230:	4b01      	ldr	r3, [pc, #4]	; (5238 <TCC1_Handler+0xc>)
    5232:	4798      	blx	r3
    5234:	bd10      	pop	{r4, pc}
    5236:	46c0      	nop			; (mov r8, r8)
    5238:	000051d1 	.word	0x000051d1

0000523c <TCC2_Handler>:
    523c:	b510      	push	{r4, lr}
    523e:	2002      	movs	r0, #2
    5240:	4b01      	ldr	r3, [pc, #4]	; (5248 <TCC2_Handler+0xc>)
    5242:	4798      	blx	r3
    5244:	bd10      	pop	{r4, pc}
    5246:	46c0      	nop			; (mov r8, r8)
    5248:	000051d1 	.word	0x000051d1

0000524c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    524c:	e7fe      	b.n	524c <Dummy_Handler>
	...

00005250 <Reset_Handler>:
{
    5250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    5252:	4a2a      	ldr	r2, [pc, #168]	; (52fc <Reset_Handler+0xac>)
    5254:	4b2a      	ldr	r3, [pc, #168]	; (5300 <Reset_Handler+0xb0>)
    5256:	429a      	cmp	r2, r3
    5258:	d011      	beq.n	527e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    525a:	001a      	movs	r2, r3
    525c:	4b29      	ldr	r3, [pc, #164]	; (5304 <Reset_Handler+0xb4>)
    525e:	429a      	cmp	r2, r3
    5260:	d20d      	bcs.n	527e <Reset_Handler+0x2e>
    5262:	4a29      	ldr	r2, [pc, #164]	; (5308 <Reset_Handler+0xb8>)
    5264:	3303      	adds	r3, #3
    5266:	1a9b      	subs	r3, r3, r2
    5268:	089b      	lsrs	r3, r3, #2
    526a:	3301      	adds	r3, #1
    526c:	009b      	lsls	r3, r3, #2
    526e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    5270:	4823      	ldr	r0, [pc, #140]	; (5300 <Reset_Handler+0xb0>)
    5272:	4922      	ldr	r1, [pc, #136]	; (52fc <Reset_Handler+0xac>)
    5274:	588c      	ldr	r4, [r1, r2]
    5276:	5084      	str	r4, [r0, r2]
    5278:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    527a:	429a      	cmp	r2, r3
    527c:	d1fa      	bne.n	5274 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    527e:	4a23      	ldr	r2, [pc, #140]	; (530c <Reset_Handler+0xbc>)
    5280:	4b23      	ldr	r3, [pc, #140]	; (5310 <Reset_Handler+0xc0>)
    5282:	429a      	cmp	r2, r3
    5284:	d20a      	bcs.n	529c <Reset_Handler+0x4c>
    5286:	43d3      	mvns	r3, r2
    5288:	4921      	ldr	r1, [pc, #132]	; (5310 <Reset_Handler+0xc0>)
    528a:	185b      	adds	r3, r3, r1
    528c:	2103      	movs	r1, #3
    528e:	438b      	bics	r3, r1
    5290:	3304      	adds	r3, #4
    5292:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    5294:	2100      	movs	r1, #0
    5296:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    5298:	4293      	cmp	r3, r2
    529a:	d1fc      	bne.n	5296 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    529c:	4a1d      	ldr	r2, [pc, #116]	; (5314 <Reset_Handler+0xc4>)
    529e:	21ff      	movs	r1, #255	; 0xff
    52a0:	4b1d      	ldr	r3, [pc, #116]	; (5318 <Reset_Handler+0xc8>)
    52a2:	438b      	bics	r3, r1
    52a4:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    52a6:	39fd      	subs	r1, #253	; 0xfd
    52a8:	2390      	movs	r3, #144	; 0x90
    52aa:	005b      	lsls	r3, r3, #1
    52ac:	4a1b      	ldr	r2, [pc, #108]	; (531c <Reset_Handler+0xcc>)
    52ae:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    52b0:	4a1b      	ldr	r2, [pc, #108]	; (5320 <Reset_Handler+0xd0>)
    52b2:	78d3      	ldrb	r3, [r2, #3]
    52b4:	2503      	movs	r5, #3
    52b6:	43ab      	bics	r3, r5
    52b8:	2402      	movs	r4, #2
    52ba:	4323      	orrs	r3, r4
    52bc:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    52be:	78d3      	ldrb	r3, [r2, #3]
    52c0:	270c      	movs	r7, #12
    52c2:	43bb      	bics	r3, r7
    52c4:	2608      	movs	r6, #8
    52c6:	4333      	orrs	r3, r6
    52c8:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    52ca:	4b16      	ldr	r3, [pc, #88]	; (5324 <Reset_Handler+0xd4>)
    52cc:	7b98      	ldrb	r0, [r3, #14]
    52ce:	2230      	movs	r2, #48	; 0x30
    52d0:	4390      	bics	r0, r2
    52d2:	2220      	movs	r2, #32
    52d4:	4310      	orrs	r0, r2
    52d6:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    52d8:	7b99      	ldrb	r1, [r3, #14]
    52da:	43b9      	bics	r1, r7
    52dc:	4331      	orrs	r1, r6
    52de:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    52e0:	7b9a      	ldrb	r2, [r3, #14]
    52e2:	43aa      	bics	r2, r5
    52e4:	4322      	orrs	r2, r4
    52e6:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    52e8:	4a0f      	ldr	r2, [pc, #60]	; (5328 <Reset_Handler+0xd8>)
    52ea:	6853      	ldr	r3, [r2, #4]
    52ec:	2180      	movs	r1, #128	; 0x80
    52ee:	430b      	orrs	r3, r1
    52f0:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    52f2:	4b0e      	ldr	r3, [pc, #56]	; (532c <Reset_Handler+0xdc>)
    52f4:	4798      	blx	r3
        main();
    52f6:	4b0e      	ldr	r3, [pc, #56]	; (5330 <Reset_Handler+0xe0>)
    52f8:	4798      	blx	r3
    52fa:	e7fe      	b.n	52fa <Reset_Handler+0xaa>
    52fc:	000094f4 	.word	0x000094f4
    5300:	20000000 	.word	0x20000000
    5304:	200000bc 	.word	0x200000bc
    5308:	20000004 	.word	0x20000004
    530c:	200000bc 	.word	0x200000bc
    5310:	2000048c 	.word	0x2000048c
    5314:	e000ed00 	.word	0xe000ed00
    5318:	00000000 	.word	0x00000000
    531c:	41007000 	.word	0x41007000
    5320:	41005000 	.word	0x41005000
    5324:	41004800 	.word	0x41004800
    5328:	41004000 	.word	0x41004000
    532c:	00006d21 	.word	0x00006d21
    5330:	00005875 	.word	0x00005875

00005334 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    5334:	b5f0      	push	{r4, r5, r6, r7, lr}
    5336:	46c6      	mov	lr, r8
    5338:	b500      	push	{lr}
    533a:	000c      	movs	r4, r1
    533c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    533e:	2800      	cmp	r0, #0
    5340:	d10f      	bne.n	5362 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    5342:	2a00      	cmp	r2, #0
    5344:	dd11      	ble.n	536a <_read+0x36>
    5346:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    5348:	4e09      	ldr	r6, [pc, #36]	; (5370 <_read+0x3c>)
    534a:	4d0a      	ldr	r5, [pc, #40]	; (5374 <_read+0x40>)
    534c:	6830      	ldr	r0, [r6, #0]
    534e:	0021      	movs	r1, r4
    5350:	682b      	ldr	r3, [r5, #0]
    5352:	4798      	blx	r3
		ptr++;
    5354:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    5356:	42bc      	cmp	r4, r7
    5358:	d1f8      	bne.n	534c <_read+0x18>
		nChars++;
	}
	return nChars;
}
    535a:	4640      	mov	r0, r8
    535c:	bc04      	pop	{r2}
    535e:	4690      	mov	r8, r2
    5360:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    5362:	2301      	movs	r3, #1
    5364:	425b      	negs	r3, r3
    5366:	4698      	mov	r8, r3
    5368:	e7f7      	b.n	535a <_read+0x26>
	for (; len > 0; --len) {
    536a:	4680      	mov	r8, r0
    536c:	e7f5      	b.n	535a <_read+0x26>
    536e:	46c0      	nop			; (mov r8, r8)
    5370:	2000042c 	.word	0x2000042c
    5374:	20000424 	.word	0x20000424

00005378 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    5378:	b5f0      	push	{r4, r5, r6, r7, lr}
    537a:	46c6      	mov	lr, r8
    537c:	b500      	push	{lr}
    537e:	000e      	movs	r6, r1
    5380:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    5382:	3801      	subs	r0, #1
    5384:	2802      	cmp	r0, #2
    5386:	d810      	bhi.n	53aa <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    5388:	2a00      	cmp	r2, #0
    538a:	d011      	beq.n	53b0 <_write+0x38>
    538c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    538e:	4b0c      	ldr	r3, [pc, #48]	; (53c0 <_write+0x48>)
    5390:	4698      	mov	r8, r3
    5392:	4f0c      	ldr	r7, [pc, #48]	; (53c4 <_write+0x4c>)
    5394:	4643      	mov	r3, r8
    5396:	6818      	ldr	r0, [r3, #0]
    5398:	5d31      	ldrb	r1, [r6, r4]
    539a:	683b      	ldr	r3, [r7, #0]
    539c:	4798      	blx	r3
    539e:	2800      	cmp	r0, #0
    53a0:	db08      	blt.n	53b4 <_write+0x3c>
			return -1;
		}
		++nChars;
    53a2:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    53a4:	42a5      	cmp	r5, r4
    53a6:	d1f5      	bne.n	5394 <_write+0x1c>
    53a8:	e006      	b.n	53b8 <_write+0x40>
		return -1;
    53aa:	2401      	movs	r4, #1
    53ac:	4264      	negs	r4, r4
    53ae:	e003      	b.n	53b8 <_write+0x40>
	for (; len != 0; --len) {
    53b0:	0014      	movs	r4, r2
    53b2:	e001      	b.n	53b8 <_write+0x40>
			return -1;
    53b4:	2401      	movs	r4, #1
    53b6:	4264      	negs	r4, r4
	}
	return nChars;
}
    53b8:	0020      	movs	r0, r4
    53ba:	bc04      	pop	{r2}
    53bc:	4690      	mov	r8, r2
    53be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53c0:	2000042c 	.word	0x2000042c
    53c4:	20000428 	.word	0x20000428

000053c8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    53c8:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    53ca:	4a06      	ldr	r2, [pc, #24]	; (53e4 <_sbrk+0x1c>)
    53cc:	6812      	ldr	r2, [r2, #0]
    53ce:	2a00      	cmp	r2, #0
    53d0:	d004      	beq.n	53dc <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    53d2:	4a04      	ldr	r2, [pc, #16]	; (53e4 <_sbrk+0x1c>)
    53d4:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    53d6:	18c3      	adds	r3, r0, r3
    53d8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    53da:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    53dc:	4902      	ldr	r1, [pc, #8]	; (53e8 <_sbrk+0x20>)
    53de:	4a01      	ldr	r2, [pc, #4]	; (53e4 <_sbrk+0x1c>)
    53e0:	6011      	str	r1, [r2, #0]
    53e2:	e7f6      	b.n	53d2 <_sbrk+0xa>
    53e4:	20000134 	.word	0x20000134
    53e8:	20002490 	.word	0x20002490

000053ec <_close>:
}

extern int _close(int file)
{
	return -1;
}
    53ec:	2001      	movs	r0, #1
    53ee:	4240      	negs	r0, r0
    53f0:	4770      	bx	lr

000053f2 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    53f2:	2380      	movs	r3, #128	; 0x80
    53f4:	019b      	lsls	r3, r3, #6
    53f6:	604b      	str	r3, [r1, #4]

	return 0;
}
    53f8:	2000      	movs	r0, #0
    53fa:	4770      	bx	lr

000053fc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    53fc:	2001      	movs	r0, #1
    53fe:	4770      	bx	lr

00005400 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    5400:	2000      	movs	r0, #0
    5402:	4770      	bx	lr

00005404 <stream_writer_init>:
#include <string.h>
#include <asf.h>

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
    5404:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
    5406:	6101      	str	r1, [r0, #16]
	writer->written = 0;
    5408:	2200      	movs	r2, #0
    540a:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
    540c:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
    540e:	9b00      	ldr	r3, [sp, #0]
    5410:	60c3      	str	r3, [r0, #12]
}
    5412:	4770      	bx	lr

00005414 <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
    5414:	b510      	push	{r4, lr}
    5416:	0004      	movs	r4, r0
	if(writer->written > 0) {
    5418:	6842      	ldr	r2, [r0, #4]
    541a:	2a00      	cmp	r2, #0
    541c:	d100      	bne.n	5420 <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
    541e:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    5420:	6901      	ldr	r1, [r0, #16]
    5422:	68c0      	ldr	r0, [r0, #12]
    5424:	68a3      	ldr	r3, [r4, #8]
    5426:	4798      	blx	r3
		writer->written = 0;
    5428:	2300      	movs	r3, #0
    542a:	6063      	str	r3, [r4, #4]
}
    542c:	e7f7      	b.n	541e <stream_writer_send_remain+0xa>
	...

00005430 <stream_writer_send_8>:
{
    5430:	b570      	push	{r4, r5, r6, lr}
    5432:	0004      	movs	r4, r0
    5434:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
    5436:	6803      	ldr	r3, [r0, #0]
    5438:	6842      	ldr	r2, [r0, #4]
    543a:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
    543c:	2b00      	cmp	r3, #0
    543e:	dd05      	ble.n	544c <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
    5440:	6922      	ldr	r2, [r4, #16]
    5442:	6863      	ldr	r3, [r4, #4]
    5444:	1c59      	adds	r1, r3, #1
    5446:	6061      	str	r1, [r4, #4]
    5448:	54d5      	strb	r5, [r2, r3]
}
    544a:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
    544c:	4b01      	ldr	r3, [pc, #4]	; (5454 <stream_writer_send_8+0x24>)
    544e:	4798      	blx	r3
    5450:	e7f6      	b.n	5440 <stream_writer_send_8+0x10>
    5452:	46c0      	nop			; (mov r8, r8)
    5454:	00005415 	.word	0x00005415

00005458 <stream_writer_send_16BE>:
{
    5458:	b570      	push	{r4, r5, r6, lr}
    545a:	0006      	movs	r6, r0
    545c:	000c      	movs	r4, r1
	stream_writer_send_8(writer, (value >> 8) & 0xFF);
    545e:	1209      	asrs	r1, r1, #8
    5460:	4d02      	ldr	r5, [pc, #8]	; (546c <stream_writer_send_16BE+0x14>)
    5462:	47a8      	blx	r5
	stream_writer_send_8(writer, value & 0xFF);
    5464:	b261      	sxtb	r1, r4
    5466:	0030      	movs	r0, r6
    5468:	47a8      	blx	r5
}
    546a:	bd70      	pop	{r4, r5, r6, pc}
    546c:	00005431 	.word	0x00005431

00005470 <stream_writer_send_buffer>:
{
    5470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5472:	0006      	movs	r6, r0
    5474:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
    5476:	2a00      	cmp	r2, #0
    5478:	d008      	beq.n	548c <stream_writer_send_buffer+0x1c>
    547a:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
    547c:	4f04      	ldr	r7, [pc, #16]	; (5490 <stream_writer_send_buffer+0x20>)
    547e:	2100      	movs	r1, #0
    5480:	5661      	ldrsb	r1, [r4, r1]
    5482:	0030      	movs	r0, r6
    5484:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
    5486:	3401      	adds	r4, #1
    5488:	42a5      	cmp	r5, r4
    548a:	d1f8      	bne.n	547e <stream_writer_send_buffer+0xe>
}
    548c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    548e:	46c0      	nop			; (mov r8, r8)
    5490:	00005431 	.word	0x00005431

00005494 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
    5494:	4a02      	ldr	r2, [pc, #8]	; (54a0 <sw_timer_tcc_callback+0xc>)
    5496:	6813      	ldr	r3, [r2, #0]
    5498:	3301      	adds	r3, #1
    549a:	6013      	str	r3, [r2, #0]
}
    549c:	4770      	bx	lr
    549e:	46c0      	nop			; (mov r8, r8)
    54a0:	20000138 	.word	0x20000138

000054a4 <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
    54a4:	2364      	movs	r3, #100	; 0x64
    54a6:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
    54a8:	2300      	movs	r3, #0
    54aa:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
    54ac:	7043      	strb	r3, [r0, #1]
}
    54ae:	4770      	bx	lr

000054b0 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    54b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    54b2:	46c6      	mov	lr, r8
    54b4:	b500      	push	{lr}
    54b6:	b0ac      	sub	sp, #176	; 0xb0
    54b8:	000d      	movs	r5, r1
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    54ba:	466e      	mov	r6, sp
    54bc:	4b1d      	ldr	r3, [pc, #116]	; (5534 <sw_timer_init+0x84>)
    54be:	466a      	mov	r2, sp
    54c0:	cb92      	ldmia	r3!, {r1, r4, r7}
    54c2:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    54c4:	886b      	ldrh	r3, [r5, #2]
    54c6:	6543      	str	r3, [r0, #84]	; 0x54

	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    54c8:	3014      	adds	r0, #20
    54ca:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    54cc:	782b      	ldrb	r3, [r5, #0]
    54ce:	009b      	lsls	r3, r3, #2
    54d0:	5999      	ldr	r1, [r3, r6]
    54d2:	0017      	movs	r7, r2
    54d4:	0010      	movs	r0, r2
    54d6:	4b18      	ldr	r3, [pc, #96]	; (5538 <sw_timer_init+0x88>)
    54d8:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    54da:	2000      	movs	r0, #0
    54dc:	4b17      	ldr	r3, [pc, #92]	; (553c <sw_timer_init+0x8c>)
    54de:	4798      	blx	r3
    54e0:	4b17      	ldr	r3, [pc, #92]	; (5540 <sw_timer_init+0x90>)
    54e2:	7a1b      	ldrb	r3, [r3, #8]
    54e4:	b2db      	uxtb	r3, r3
    54e6:	40d8      	lsrs	r0, r3
    54e8:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    54ea:	8869      	ldrh	r1, [r5, #2]
    54ec:	20fa      	movs	r0, #250	; 0xfa
    54ee:	0200      	lsls	r0, r0, #8
    54f0:	4b14      	ldr	r3, [pc, #80]	; (5544 <sw_timer_init+0x94>)
    54f2:	4798      	blx	r3
    54f4:	0001      	movs	r1, r0
    54f6:	4640      	mov	r0, r8
    54f8:	4b13      	ldr	r3, [pc, #76]	; (5548 <sw_timer_init+0x98>)
    54fa:	4798      	blx	r3
    54fc:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    54fe:	2305      	movs	r3, #5
    5500:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    5502:	782b      	ldrb	r3, [r5, #0]
    5504:	009b      	lsls	r3, r3, #2
    5506:	5999      	ldr	r1, [r3, r6]
    5508:	003a      	movs	r2, r7
    550a:	0020      	movs	r0, r4
    550c:	4b0f      	ldr	r3, [pc, #60]	; (554c <sw_timer_init+0x9c>)
    550e:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    5510:	786a      	ldrb	r2, [r5, #1]
    5512:	3208      	adds	r2, #8
    5514:	b2d2      	uxtb	r2, r2
    5516:	490e      	ldr	r1, [pc, #56]	; (5550 <sw_timer_init+0xa0>)
    5518:	0020      	movs	r0, r4
    551a:	4b0e      	ldr	r3, [pc, #56]	; (5554 <sw_timer_init+0xa4>)
    551c:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    551e:	7869      	ldrb	r1, [r5, #1]
    5520:	3108      	adds	r1, #8
    5522:	b2c9      	uxtb	r1, r1
    5524:	0020      	movs	r0, r4
    5526:	4b0c      	ldr	r3, [pc, #48]	; (5558 <sw_timer_init+0xa8>)
    5528:	4798      	blx	r3
}
    552a:	b02c      	add	sp, #176	; 0xb0
    552c:	bc04      	pop	{r2}
    552e:	4690      	mov	r8, r2
    5530:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5532:	46c0      	nop			; (mov r8, r8)
    5534:	00009164 	.word	0x00009164
    5538:	00004c21 	.word	0x00004c21
    553c:	0000497d 	.word	0x0000497d
    5540:	40000400 	.word	0x40000400
    5544:	00006af5 	.word	0x00006af5
    5548:	000069e1 	.word	0x000069e1
    554c:	00004d6d 	.word	0x00004d6d
    5550:	00005495 	.word	0x00005495
    5554:	00005179 	.word	0x00005179
    5558:	00005191 	.word	0x00005191

0000555c <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    555c:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    555e:	2102      	movs	r1, #2
    5560:	6893      	ldr	r3, [r2, #8]
    5562:	4219      	tst	r1, r3
    5564:	d1fc      	bne.n	5560 <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    5566:	6813      	ldr	r3, [r2, #0]
    5568:	2102      	movs	r1, #2
    556a:	430b      	orrs	r3, r1
    556c:	6013      	str	r3, [r2, #0]
	Assert(module_inst);

	tcc_module = &module_inst->tcc_inst;

	tcc_enable(tcc_module);
}
    556e:	4770      	bx	lr

00005570 <sw_timer_register_callback>:
	tcc_disable(tcc_module);
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
	sw_timer_callback_t callback, void *context, uint32_t period)
{
    5570:	b570      	push	{r4, r5, r6, lr}
    5572:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
    5574:	7805      	ldrb	r5, [r0, #0]
    5576:	07e8      	lsls	r0, r5, #31
    5578:	d502      	bpl.n	5580 <sw_timer_register_callback+0x10>
			handler->used = 1;
			return index;
		}
	}

	return -1;
    557a:	2001      	movs	r0, #1
    557c:	4240      	negs	r0, r0
}
    557e:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
    5580:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
    5582:	0029      	movs	r1, r5
    5584:	2002      	movs	r0, #2
    5586:	4381      	bics	r1, r0
    5588:	7021      	strb	r1, [r4, #0]
			handler->context = context;
    558a:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
    558c:	6d61      	ldr	r1, [r4, #84]	; 0x54
    558e:	0018      	movs	r0, r3
    5590:	4b04      	ldr	r3, [pc, #16]	; (55a4 <sw_timer_register_callback+0x34>)
    5592:	4798      	blx	r3
    5594:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
    5596:	7823      	ldrb	r3, [r4, #0]
    5598:	2201      	movs	r2, #1
    559a:	4313      	orrs	r3, r2
    559c:	7023      	strb	r3, [r4, #0]
			return index;
    559e:	2000      	movs	r0, #0
    55a0:	e7ed      	b.n	557e <sw_timer_register_callback+0xe>
    55a2:	46c0      	nop			; (mov r8, r8)
    55a4:	000069e1 	.word	0x000069e1

000055a8 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    55a8:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
    55aa:	008b      	lsls	r3, r1, #2
    55ac:	185d      	adds	r5, r3, r1
    55ae:	00ad      	lsls	r5, r5, #2
    55b0:	5c29      	ldrb	r1, [r5, r0]
    55b2:	2602      	movs	r6, #2
    55b4:	4331      	orrs	r1, r6
    55b6:	5429      	strb	r1, [r5, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    55b8:	1944      	adds	r4, r0, r5
    55ba:	6d41      	ldr	r1, [r0, #84]	; 0x54
    55bc:	0010      	movs	r0, r2
    55be:	4b03      	ldr	r3, [pc, #12]	; (55cc <sw_timer_enable_callback+0x24>)
    55c0:	4798      	blx	r3
    55c2:	4b03      	ldr	r3, [pc, #12]	; (55d0 <sw_timer_enable_callback+0x28>)
    55c4:	681b      	ldr	r3, [r3, #0]
    55c6:	18c0      	adds	r0, r0, r3
    55c8:	6120      	str	r0, [r4, #16]
}
    55ca:	bd70      	pop	{r4, r5, r6, pc}
    55cc:	000069e1 	.word	0x000069e1
    55d0:	20000138 	.word	0x20000138

000055d4 <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
    55d4:	008b      	lsls	r3, r1, #2
    55d6:	1859      	adds	r1, r3, r1
    55d8:	0089      	lsls	r1, r1, #2
    55da:	5c0b      	ldrb	r3, [r1, r0]
    55dc:	2202      	movs	r2, #2
    55de:	4393      	bics	r3, r2
    55e0:	540b      	strb	r3, [r1, r0]
}
    55e2:	4770      	bx	lr

000055e4 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    55e4:	b570      	push	{r4, r5, r6, lr}
    55e6:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    55e8:	7803      	ldrb	r3, [r0, #0]
    55ea:	07db      	lsls	r3, r3, #31
    55ec:	d507      	bpl.n	55fe <sw_timer_task+0x1a>
    55ee:	7803      	ldrb	r3, [r0, #0]
    55f0:	079b      	lsls	r3, r3, #30
    55f2:	d504      	bpl.n	55fe <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    55f4:	4b11      	ldr	r3, [pc, #68]	; (563c <sw_timer_task+0x58>)
    55f6:	681b      	ldr	r3, [r3, #0]
    55f8:	6902      	ldr	r2, [r0, #16]
    55fa:	1ad3      	subs	r3, r2, r3
    55fc:	d400      	bmi.n	5600 <sw_timer_task+0x1c>
				handler->busy = 0;
			}
		}
	}

}
    55fe:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    5600:	7803      	ldrb	r3, [r0, #0]
    5602:	075b      	lsls	r3, r3, #29
    5604:	d4fb      	bmi.n	55fe <sw_timer_task+0x1a>
				handler->busy = 1;
    5606:	7803      	ldrb	r3, [r0, #0]
    5608:	2204      	movs	r2, #4
    560a:	4313      	orrs	r3, r2
    560c:	7003      	strb	r3, [r0, #0]
				handler->callback(module_inst, index, handler->context, handler->period);
    560e:	68c3      	ldr	r3, [r0, #12]
    5610:	6882      	ldr	r2, [r0, #8]
    5612:	2100      	movs	r1, #0
    5614:	6845      	ldr	r5, [r0, #4]
    5616:	47a8      	blx	r5
				if (handler->period > 0) {
    5618:	68e3      	ldr	r3, [r4, #12]
    561a:	2b00      	cmp	r3, #0
    561c:	d008      	beq.n	5630 <sw_timer_task+0x4c>
					handler->expire_time = sw_timer_tick + handler->period;
    561e:	4a07      	ldr	r2, [pc, #28]	; (563c <sw_timer_task+0x58>)
    5620:	6812      	ldr	r2, [r2, #0]
    5622:	18d3      	adds	r3, r2, r3
    5624:	6123      	str	r3, [r4, #16]
				handler->busy = 0;
    5626:	7823      	ldrb	r3, [r4, #0]
    5628:	2204      	movs	r2, #4
    562a:	4393      	bics	r3, r2
    562c:	7023      	strb	r3, [r4, #0]
}
    562e:	e7e6      	b.n	55fe <sw_timer_task+0x1a>
					handler->callback_enable = 0;
    5630:	7823      	ldrb	r3, [r4, #0]
    5632:	2202      	movs	r2, #2
    5634:	4393      	bics	r3, r2
    5636:	7023      	strb	r3, [r4, #0]
    5638:	e7f5      	b.n	5626 <sw_timer_task+0x42>
    563a:	46c0      	nop			; (mov r8, r8)
    563c:	20000138 	.word	0x20000138

00005640 <uart_callback>:


	static void uart_callback(const struct usart_module *const module)
	{
		/* If input string is bigger than buffer size limit, ignore the excess part. */
		if (uart_buffer_written < MAIN_CHAT_BUFFER_SIZE) {
    5640:	4b03      	ldr	r3, [pc, #12]	; (5650 <uart_callback+0x10>)
    5642:	681b      	ldr	r3, [r3, #0]
    5644:	2b09      	cmp	r3, #9
    5646:	dc02      	bgt.n	564e <uart_callback+0xe>
			uart_buffer[uart_buffer_written++] = uart_ch_buffer & 0xFF;
    5648:	3301      	adds	r3, #1
    564a:	4a01      	ldr	r2, [pc, #4]	; (5650 <uart_callback+0x10>)
    564c:	6013      	str	r3, [r2, #0]
		}
	}
    564e:	4770      	bx	lr
    5650:	20000268 	.word	0x20000268

00005654 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
    5654:	b510      	push	{r4, lr}
	mqtt_socket_resolve_handler(doamin_name, server_ip);
    5656:	4b01      	ldr	r3, [pc, #4]	; (565c <socket_resolve_handler+0x8>)
    5658:	4798      	blx	r3
}
    565a:	bd10      	pop	{r4, pc}
    565c:	00005d2d 	.word	0x00005d2d

00005660 <socket_event_handler>:
{
    5660:	b510      	push	{r4, lr}
	mqtt_socket_event_handler(sock, msg_type, msg_data);
    5662:	4b01      	ldr	r3, [pc, #4]	; (5668 <socket_event_handler+0x8>)
    5664:	4798      	blx	r3
}
    5666:	bd10      	pop	{r4, pc}
    5668:	000068cd 	.word	0x000068cd

0000566c <wifi_callback>:
{
    566c:	b510      	push	{r4, lr}
    566e:	b082      	sub	sp, #8
	switch (msg_type) {
    5670:	282c      	cmp	r0, #44	; 0x2c
    5672:	d003      	beq.n	567c <wifi_callback+0x10>
    5674:	2832      	cmp	r0, #50	; 0x32
    5676:	d01c      	beq.n	56b2 <wifi_callback+0x46>
}
    5678:	b002      	add	sp, #8
    567a:	bd10      	pop	{r4, pc}
		if (msg_wifi_state->u8CurrState == M2M_WIFI_CONNECTED) {
    567c:	780b      	ldrb	r3, [r1, #0]
    567e:	2b01      	cmp	r3, #1
    5680:	d011      	beq.n	56a6 <wifi_callback+0x3a>
		} else if (msg_wifi_state->u8CurrState == M2M_WIFI_DISCONNECTED) {
    5682:	2b00      	cmp	r3, #0
    5684:	d1f8      	bne.n	5678 <wifi_callback+0xc>
			printf("Wi-Fi disconnected\r\n");
    5686:	4812      	ldr	r0, [pc, #72]	; (56d0 <wifi_callback+0x64>)
    5688:	4b12      	ldr	r3, [pc, #72]	; (56d4 <wifi_callback+0x68>)
    568a:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    568c:	23ff      	movs	r3, #255	; 0xff
    568e:	9300      	str	r3, [sp, #0]
    5690:	4b11      	ldr	r3, [pc, #68]	; (56d8 <wifi_callback+0x6c>)
    5692:	2202      	movs	r2, #2
    5694:	210e      	movs	r1, #14
    5696:	4811      	ldr	r0, [pc, #68]	; (56dc <wifi_callback+0x70>)
    5698:	4c11      	ldr	r4, [pc, #68]	; (56e0 <wifi_callback+0x74>)
    569a:	47a0      	blx	r4
			mqtt_disconnect(&mqtt_inst, 1);
    569c:	2101      	movs	r1, #1
    569e:	4811      	ldr	r0, [pc, #68]	; (56e4 <wifi_callback+0x78>)
    56a0:	4b11      	ldr	r3, [pc, #68]	; (56e8 <wifi_callback+0x7c>)
    56a2:	4798      	blx	r3
    56a4:	e7e8      	b.n	5678 <wifi_callback+0xc>
			printf("Wi-Fi connected\r\n");
    56a6:	4811      	ldr	r0, [pc, #68]	; (56ec <wifi_callback+0x80>)
    56a8:	4b0a      	ldr	r3, [pc, #40]	; (56d4 <wifi_callback+0x68>)
    56aa:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    56ac:	4b10      	ldr	r3, [pc, #64]	; (56f0 <wifi_callback+0x84>)
    56ae:	4798      	blx	r3
    56b0:	e7e2      	b.n	5678 <wifi_callback+0xc>
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    56b2:	788b      	ldrb	r3, [r1, #2]
    56b4:	784a      	ldrb	r2, [r1, #1]
    56b6:	7808      	ldrb	r0, [r1, #0]
    56b8:	78c9      	ldrb	r1, [r1, #3]
    56ba:	9100      	str	r1, [sp, #0]
    56bc:	0001      	movs	r1, r0
    56be:	480d      	ldr	r0, [pc, #52]	; (56f4 <wifi_callback+0x88>)
    56c0:	4c0d      	ldr	r4, [pc, #52]	; (56f8 <wifi_callback+0x8c>)
    56c2:	47a0      	blx	r4
		mqtt_connect(&mqtt_inst, main_mqtt_broker);
    56c4:	490d      	ldr	r1, [pc, #52]	; (56fc <wifi_callback+0x90>)
    56c6:	4807      	ldr	r0, [pc, #28]	; (56e4 <wifi_callback+0x78>)
    56c8:	4b0d      	ldr	r3, [pc, #52]	; (5700 <wifi_callback+0x94>)
    56ca:	4798      	blx	r3
}
    56cc:	e7d4      	b.n	5678 <wifi_callback+0xc>
    56ce:	46c0      	nop			; (mov r8, r8)
    56d0:	000093e8 	.word	0x000093e8
    56d4:	00007031 	.word	0x00007031
    56d8:	000093fc 	.word	0x000093fc
    56dc:	00009408 	.word	0x00009408
    56e0:	00001529 	.word	0x00001529
    56e4:	200001f4 	.word	0x200001f4
    56e8:	0000658d 	.word	0x0000658d
    56ec:	000093d4 	.word	0x000093d4
    56f0:	00001545 	.word	0x00001545
    56f4:	00009418 	.word	0x00009418
    56f8:	00006f15 	.word	0x00006f15
    56fc:	000092d0 	.word	0x000092d0
    5700:	00005d81 	.word	0x00005d81

00005704 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    5704:	b570      	push	{r4, r5, r6, lr}
    5706:	b082      	sub	sp, #8
    5708:	0005      	movs	r5, r0
    570a:	000e      	movs	r6, r1
	uint16_t temp = 0;
    570c:	2200      	movs	r2, #0
    570e:	466b      	mov	r3, sp
    5710:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    5712:	4c06      	ldr	r4, [pc, #24]	; (572c <usart_serial_getchar+0x28>)
    5714:	466b      	mov	r3, sp
    5716:	1d99      	adds	r1, r3, #6
    5718:	0028      	movs	r0, r5
    571a:	47a0      	blx	r4
    571c:	2800      	cmp	r0, #0
    571e:	d1f9      	bne.n	5714 <usart_serial_getchar+0x10>

	*c = temp;
    5720:	466b      	mov	r3, sp
    5722:	3306      	adds	r3, #6
    5724:	881b      	ldrh	r3, [r3, #0]
    5726:	7033      	strb	r3, [r6, #0]
}
    5728:	b002      	add	sp, #8
    572a:	bd70      	pop	{r4, r5, r6, pc}
    572c:	00004235 	.word	0x00004235

00005730 <usart_serial_putchar>:
{
    5730:	b570      	push	{r4, r5, r6, lr}
    5732:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    5734:	b28c      	uxth	r4, r1
    5736:	4e03      	ldr	r6, [pc, #12]	; (5744 <usart_serial_putchar+0x14>)
    5738:	0021      	movs	r1, r4
    573a:	0028      	movs	r0, r5
    573c:	47b0      	blx	r6
    573e:	2800      	cmp	r0, #0
    5740:	d1fa      	bne.n	5738 <usart_serial_putchar+0x8>
}
    5742:	bd70      	pop	{r4, r5, r6, pc}
    5744:	00004209 	.word	0x00004209

00005748 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
    5748:	b5f0      	push	{r4, r5, r6, r7, lr}
    574a:	b087      	sub	sp, #28
    574c:	0005      	movs	r5, r0
    574e:	0014      	movs	r4, r2
	switch (type) {
    5750:	2901      	cmp	r1, #1
    5752:	d04b      	beq.n	57ec <mqtt_callback+0xa4>
    5754:	dd2d      	ble.n	57b2 <mqtt_callback+0x6a>
    5756:	2905      	cmp	r1, #5
    5758:	d05b      	beq.n	5812 <mqtt_callback+0xca>
    575a:	2906      	cmp	r1, #6
    575c:	d162      	bne.n	5824 <mqtt_callback+0xdc>

		break;

	case MQTT_CALLBACK_RECV_PUBLISH:
		/* You received publish message which you had subscribed. */
		if (data->recv_publish.topic != NULL && data->recv_publish.msg != NULL) {
    575e:	6810      	ldr	r0, [r2, #0]
    5760:	2800      	cmp	r0, #0
    5762:	d05f      	beq.n	5824 <mqtt_callback+0xdc>
    5764:	6893      	ldr	r3, [r2, #8]
    5766:	2b00      	cmp	r3, #0
    5768:	d05c      	beq.n	5824 <mqtt_callback+0xdc>
			if (!strncmp(data->recv_publish.topic, MAIN_CHAT_TOPIC, strlen(MAIN_CHAT_TOPIC))) {
    576a:	220a      	movs	r2, #10
    576c:	492e      	ldr	r1, [pc, #184]	; (5828 <mqtt_callback+0xe0>)
    576e:	4b2f      	ldr	r3, [pc, #188]	; (582c <mqtt_callback+0xe4>)
    5770:	4798      	blx	r3
    5772:	1e05      	subs	r5, r0, #0
    5774:	d156      	bne.n	5824 <mqtt_callback+0xdc>
				/* Print user name and message */
				for (int i = strlen(MAIN_CHAT_TOPIC); i < data->recv_publish.topic_size; i++) {
    5776:	6863      	ldr	r3, [r4, #4]
    5778:	2b0a      	cmp	r3, #10
    577a:	dd08      	ble.n	578e <mqtt_callback+0x46>
    577c:	260a      	movs	r6, #10
					printf("%c", data->recv_publish.topic[i]);
    577e:	4f2c      	ldr	r7, [pc, #176]	; (5830 <mqtt_callback+0xe8>)
    5780:	6823      	ldr	r3, [r4, #0]
    5782:	5d98      	ldrb	r0, [r3, r6]
    5784:	47b8      	blx	r7
				for (int i = strlen(MAIN_CHAT_TOPIC); i < data->recv_publish.topic_size; i++) {
    5786:	3601      	adds	r6, #1
    5788:	6863      	ldr	r3, [r4, #4]
    578a:	42b3      	cmp	r3, r6
    578c:	dcf8      	bgt.n	5780 <mqtt_callback+0x38>
				}
				printf(" >> ");
    578e:	4829      	ldr	r0, [pc, #164]	; (5834 <mqtt_callback+0xec>)
    5790:	4b29      	ldr	r3, [pc, #164]	; (5838 <mqtt_callback+0xf0>)
    5792:	4798      	blx	r3
				for (int i = 0; i < data->recv_publish.msg_size; i++) {
    5794:	68e3      	ldr	r3, [r4, #12]
    5796:	2b00      	cmp	r3, #0
    5798:	dd07      	ble.n	57aa <mqtt_callback+0x62>
					printf("%c", data->recv_publish.msg[i]);
    579a:	4e25      	ldr	r6, [pc, #148]	; (5830 <mqtt_callback+0xe8>)
    579c:	68a3      	ldr	r3, [r4, #8]
    579e:	5d58      	ldrb	r0, [r3, r5]
    57a0:	47b0      	blx	r6
				for (int i = 0; i < data->recv_publish.msg_size; i++) {
    57a2:	3501      	adds	r5, #1
    57a4:	68e3      	ldr	r3, [r4, #12]
    57a6:	42ab      	cmp	r3, r5
    57a8:	dcf8      	bgt.n	579c <mqtt_callback+0x54>
				}
				printf("\r\n");
    57aa:	4824      	ldr	r0, [pc, #144]	; (583c <mqtt_callback+0xf4>)
    57ac:	4b24      	ldr	r3, [pc, #144]	; (5840 <mqtt_callback+0xf8>)
    57ae:	4798      	blx	r3
    57b0:	e038      	b.n	5824 <mqtt_callback+0xdc>
	switch (type) {
    57b2:	2900      	cmp	r1, #0
    57b4:	d136      	bne.n	5824 <mqtt_callback+0xdc>
		if (data->sock_connected.result >= 0) {
    57b6:	6813      	ldr	r3, [r2, #0]
    57b8:	2b00      	cmp	r3, #0
    57ba:	db0d      	blt.n	57d8 <mqtt_callback+0x90>
			mqtt_connect_broker(module_inst, 1, NULL, NULL, mqtt_user, NULL, NULL, 0, 0, 0);
    57bc:	2300      	movs	r3, #0
    57be:	9305      	str	r3, [sp, #20]
    57c0:	9304      	str	r3, [sp, #16]
    57c2:	9303      	str	r3, [sp, #12]
    57c4:	9302      	str	r3, [sp, #8]
    57c6:	9301      	str	r3, [sp, #4]
    57c8:	4b1e      	ldr	r3, [pc, #120]	; (5844 <mqtt_callback+0xfc>)
    57ca:	9300      	str	r3, [sp, #0]
    57cc:	2300      	movs	r3, #0
    57ce:	2200      	movs	r2, #0
    57d0:	2101      	movs	r1, #1
    57d2:	4c1d      	ldr	r4, [pc, #116]	; (5848 <mqtt_callback+0x100>)
    57d4:	47a0      	blx	r4
    57d6:	e025      	b.n	5824 <mqtt_callback+0xdc>
			printf("Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
    57d8:	4c1c      	ldr	r4, [pc, #112]	; (584c <mqtt_callback+0x104>)
    57da:	0021      	movs	r1, r4
    57dc:	481c      	ldr	r0, [pc, #112]	; (5850 <mqtt_callback+0x108>)
    57de:	4b16      	ldr	r3, [pc, #88]	; (5838 <mqtt_callback+0xf0>)
    57e0:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
    57e2:	0021      	movs	r1, r4
    57e4:	0028      	movs	r0, r5
    57e6:	4b1b      	ldr	r3, [pc, #108]	; (5854 <mqtt_callback+0x10c>)
    57e8:	4798      	blx	r3
    57ea:	e01b      	b.n	5824 <mqtt_callback+0xdc>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
    57ec:	7811      	ldrb	r1, [r2, #0]
    57ee:	2900      	cmp	r1, #0
    57f0:	d10b      	bne.n	580a <mqtt_callback+0xc2>
			mqtt_subscribe(module_inst, MAIN_CHAT_TOPIC "#", 0);
    57f2:	2200      	movs	r2, #0
    57f4:	4918      	ldr	r1, [pc, #96]	; (5858 <mqtt_callback+0x110>)
    57f6:	4b19      	ldr	r3, [pc, #100]	; (585c <mqtt_callback+0x114>)
    57f8:	4798      	blx	r3
			printf("Subscribed to the topic: %s\r\n", MAIN_CHAT_TOPIC);
    57fa:	490b      	ldr	r1, [pc, #44]	; (5828 <mqtt_callback+0xe0>)
    57fc:	4818      	ldr	r0, [pc, #96]	; (5860 <mqtt_callback+0x118>)
    57fe:	4b0e      	ldr	r3, [pc, #56]	; (5838 <mqtt_callback+0xf0>)
    5800:	4798      	blx	r3
			printf("Preparation of the chat has been completed.\r\n");
    5802:	4818      	ldr	r0, [pc, #96]	; (5864 <mqtt_callback+0x11c>)
    5804:	4b0e      	ldr	r3, [pc, #56]	; (5840 <mqtt_callback+0xf8>)
    5806:	4798      	blx	r3
    5808:	e00c      	b.n	5824 <mqtt_callback+0xdc>
			printf("MQTT broker decline your access! error code %d\r\n", data->connected.result);
    580a:	4817      	ldr	r0, [pc, #92]	; (5868 <mqtt_callback+0x120>)
    580c:	4b0a      	ldr	r3, [pc, #40]	; (5838 <mqtt_callback+0xf0>)
    580e:	4798      	blx	r3
    5810:	e008      	b.n	5824 <mqtt_callback+0xdc>

		break;

	case MQTT_CALLBACK_DISCONNECTED:
		/* Stop timer and USART callback. */
		printf("MQTT disconnected\r\n");
    5812:	4816      	ldr	r0, [pc, #88]	; (586c <mqtt_callback+0x124>)
    5814:	4b0a      	ldr	r3, [pc, #40]	; (5840 <mqtt_callback+0xf8>)
    5816:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
    5818:	4915      	ldr	r1, [pc, #84]	; (5870 <mqtt_callback+0x128>)
    581a:	2231      	movs	r2, #49	; 0x31
    581c:	5c8b      	ldrb	r3, [r1, r2]
    581e:	2002      	movs	r0, #2
    5820:	4383      	bics	r3, r0
    5822:	548b      	strb	r3, [r1, r2]
		usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
		break;
	}
}
    5824:	b007      	add	sp, #28
    5826:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5828:	00009324 	.word	0x00009324
    582c:	0000724b 	.word	0x0000724b
    5830:	00006f49 	.word	0x00006f49
    5834:	000093b4 	.word	0x000093b4
    5838:	00006f15 	.word	0x00006f15
    583c:	000093bc 	.word	0x000093bc
    5840:	00007031 	.word	0x00007031
    5844:	20000018 	.word	0x20000018
    5848:	00005e95 	.word	0x00005e95
    584c:	000092d0 	.word	0x000092d0
    5850:	000092e0 	.word	0x000092e0
    5854:	00005d81 	.word	0x00005d81
    5858:	00009318 	.word	0x00009318
    585c:	000062ed 	.word	0x000062ed
    5860:	00009330 	.word	0x00009330
    5864:	00009350 	.word	0x00009350
    5868:	00009380 	.word	0x00009380
    586c:	000093c0 	.word	0x000093c0
    5870:	2000013c 	.word	0x2000013c

00005874 <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
    5874:	b5f0      	push	{r4, r5, r6, r7, lr}
    5876:	b09d      	sub	sp, #116	; 0x74
	tstrWifiInitParam param;
	int8_t ret;
	char topic[strlen(MAIN_CHAT_TOPIC) + MAIN_CHAT_USER_NAME_SIZE + 1];

	/* Initialize the board. */
	system_init();
    5878:	4b89      	ldr	r3, [pc, #548]	; (5aa0 <main+0x22c>)
    587a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    587c:	aa03      	add	r2, sp, #12
    587e:	2380      	movs	r3, #128	; 0x80
    5880:	05db      	lsls	r3, r3, #23
    5882:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    5884:	2300      	movs	r3, #0
    5886:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    5888:	21ff      	movs	r1, #255	; 0xff
    588a:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    588c:	2100      	movs	r1, #0
    588e:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    5890:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    5892:	2501      	movs	r5, #1
    5894:	2024      	movs	r0, #36	; 0x24
    5896:	5415      	strb	r5, [r2, r0]
	config->transmitter_enable = true;
    5898:	3001      	adds	r0, #1
    589a:	5415      	strb	r5, [r2, r0]
	config->clock_polarity_inverted = false;
    589c:	3001      	adds	r0, #1
    589e:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
    58a0:	3001      	adds	r0, #1
    58a2:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
    58a4:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    58a6:	3005      	adds	r0, #5
    58a8:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
    58aa:	3001      	adds	r0, #1
    58ac:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    58ae:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    58b0:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    58b2:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    58b4:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    58b6:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    58b8:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
    58ba:	2313      	movs	r3, #19
    58bc:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    58be:	7751      	strb	r1, [r2, #29]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    58c0:	2380      	movs	r3, #128	; 0x80
    58c2:	035b      	lsls	r3, r3, #13
    58c4:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    58c6:	4b77      	ldr	r3, [pc, #476]	; (5aa4 <main+0x230>)
    58c8:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    58ca:	4b77      	ldr	r3, [pc, #476]	; (5aa8 <main+0x234>)
    58cc:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    58ce:	2301      	movs	r3, #1
    58d0:	425b      	negs	r3, r3
    58d2:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    58d4:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    58d6:	23e1      	movs	r3, #225	; 0xe1
    58d8:	025b      	lsls	r3, r3, #9
    58da:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    58dc:	4c73      	ldr	r4, [pc, #460]	; (5aac <main+0x238>)
    58de:	4b74      	ldr	r3, [pc, #464]	; (5ab0 <main+0x23c>)
    58e0:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    58e2:	4974      	ldr	r1, [pc, #464]	; (5ab4 <main+0x240>)
    58e4:	4b74      	ldr	r3, [pc, #464]	; (5ab8 <main+0x244>)
    58e6:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    58e8:	4974      	ldr	r1, [pc, #464]	; (5abc <main+0x248>)
    58ea:	4b75      	ldr	r3, [pc, #468]	; (5ac0 <main+0x24c>)
    58ec:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    58ee:	4975      	ldr	r1, [pc, #468]	; (5ac4 <main+0x250>)
    58f0:	0020      	movs	r0, r4
    58f2:	4b75      	ldr	r3, [pc, #468]	; (5ac8 <main+0x254>)
    58f4:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    58f6:	4f75      	ldr	r7, [pc, #468]	; (5acc <main+0x258>)
    58f8:	683b      	ldr	r3, [r7, #0]
    58fa:	6898      	ldr	r0, [r3, #8]
    58fc:	2100      	movs	r1, #0
    58fe:	4e74      	ldr	r6, [pc, #464]	; (5ad0 <main+0x25c>)
    5900:	47b0      	blx	r6
	setbuf(stdin, NULL);
    5902:	683b      	ldr	r3, [r7, #0]
    5904:	6858      	ldr	r0, [r3, #4]
    5906:	2100      	movs	r1, #0
    5908:	47b0      	blx	r6
	usart_register_callback(&cdc_uart_module, (usart_callback_t)uart_callback, USART_CALLBACK_BUFFER_RECEIVED);
    590a:	2201      	movs	r2, #1
    590c:	4971      	ldr	r1, [pc, #452]	; (5ad4 <main+0x260>)
    590e:	0020      	movs	r0, r4
    5910:	4b71      	ldr	r3, [pc, #452]	; (5ad8 <main+0x264>)
    5912:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5914:	6826      	ldr	r6, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    5916:	0030      	movs	r0, r6
    5918:	4b70      	ldr	r3, [pc, #448]	; (5adc <main+0x268>)
    591a:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    591c:	231f      	movs	r3, #31
    591e:	4018      	ands	r0, r3
    5920:	4085      	lsls	r5, r0
    5922:	4b6f      	ldr	r3, [pc, #444]	; (5ae0 <main+0x26c>)
    5924:	601d      	str	r5, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5926:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    5928:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    592a:	2a00      	cmp	r2, #0
    592c:	d1fc      	bne.n	5928 <main+0xb4>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    592e:	6833      	ldr	r3, [r6, #0]
    5930:	3202      	adds	r2, #2
    5932:	4313      	orrs	r3, r2
    5934:	6033      	str	r3, [r6, #0]

	/* Initialize the UART console. */
	configure_console();

	/* Output example information */
	printf(STRING_HEADER);
    5936:	486b      	ldr	r0, [pc, #428]	; (5ae4 <main+0x270>)
    5938:	4b6b      	ldr	r3, [pc, #428]	; (5ae8 <main+0x274>)
    593a:	4798      	blx	r3
	sw_timer_get_config_defaults(&swt_conf);
    593c:	a803      	add	r0, sp, #12
    593e:	4b6b      	ldr	r3, [pc, #428]	; (5aec <main+0x278>)
    5940:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
    5942:	4c6b      	ldr	r4, [pc, #428]	; (5af0 <main+0x27c>)
    5944:	a903      	add	r1, sp, #12
    5946:	0020      	movs	r0, r4
    5948:	4b6a      	ldr	r3, [pc, #424]	; (5af4 <main+0x280>)
    594a:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    594c:	0020      	movs	r0, r4
    594e:	4b6a      	ldr	r3, [pc, #424]	; (5af8 <main+0x284>)
    5950:	4798      	blx	r3
	mqtt_get_config_defaults(&mqtt_conf);
    5952:	a803      	add	r0, sp, #12
    5954:	4b69      	ldr	r3, [pc, #420]	; (5afc <main+0x288>)
    5956:	4798      	blx	r3
	mqtt_conf.timer_inst = &swt_module_inst;
    5958:	9404      	str	r4, [sp, #16]
	mqtt_conf.recv_buffer = mqtt_buffer;
    595a:	4b69      	ldr	r3, [pc, #420]	; (5b00 <main+0x28c>)
    595c:	9306      	str	r3, [sp, #24]
	mqtt_conf.recv_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    595e:	2380      	movs	r3, #128	; 0x80
    5960:	9307      	str	r3, [sp, #28]
	result = mqtt_init(&mqtt_inst, &mqtt_conf);
    5962:	a903      	add	r1, sp, #12
    5964:	4867      	ldr	r0, [pc, #412]	; (5b04 <main+0x290>)
    5966:	4b68      	ldr	r3, [pc, #416]	; (5b08 <main+0x294>)
    5968:	4798      	blx	r3
    596a:	1e01      	subs	r1, r0, #0
	if (result < 0) {
    596c:	db09      	blt.n	5982 <main+0x10e>
	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
    596e:	4967      	ldr	r1, [pc, #412]	; (5b0c <main+0x298>)
    5970:	4864      	ldr	r0, [pc, #400]	; (5b04 <main+0x290>)
    5972:	4b67      	ldr	r3, [pc, #412]	; (5b10 <main+0x29c>)
    5974:	4798      	blx	r3
    5976:	1e01      	subs	r1, r0, #0
	if (result < 0) {
    5978:	da07      	bge.n	598a <main+0x116>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
    597a:	4866      	ldr	r0, [pc, #408]	; (5b14 <main+0x2a0>)
    597c:	4b66      	ldr	r3, [pc, #408]	; (5b18 <main+0x2a4>)
    597e:	4798      	blx	r3
    5980:	e7fe      	b.n	5980 <main+0x10c>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
    5982:	4866      	ldr	r0, [pc, #408]	; (5b1c <main+0x2a8>)
    5984:	4b64      	ldr	r3, [pc, #400]	; (5b18 <main+0x2a4>)
    5986:	4798      	blx	r3
    5988:	e7fe      	b.n	5988 <main+0x114>

	/* Initialize the MQTT service. */
	configure_mqtt();

	/* Initialize the BSP. */
	nm_bsp_init();
    598a:	4b65      	ldr	r3, [pc, #404]	; (5b20 <main+0x2ac>)
    598c:	4798      	blx	r3
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    598e:	2000      	movs	r0, #0
    5990:	4b64      	ldr	r3, [pc, #400]	; (5b24 <main+0x2b0>)
    5992:	4798      	blx	r3
    5994:	4b64      	ldr	r3, [pc, #400]	; (5b28 <main+0x2b4>)
    5996:	7a1b      	ldrb	r3, [r3, #8]
    5998:	b2db      	uxtb	r3, r3
    599a:	40d8      	lsrs	r0, r3
	
	
	
	/* Enable SysTick interrupt for non busy wait delay. */
	if (SysTick_Config(system_cpu_clock_get_hz() / 1000))
    599c:	21fa      	movs	r1, #250	; 0xfa
    599e:	0089      	lsls	r1, r1, #2
    59a0:	4b62      	ldr	r3, [pc, #392]	; (5b2c <main+0x2b8>)
    59a2:	4798      	blx	r3
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
    59a4:	3801      	subs	r0, #1
    59a6:	4b62      	ldr	r3, [pc, #392]	; (5b30 <main+0x2bc>)
    59a8:	4298      	cmp	r0, r3
    59aa:	d874      	bhi.n	5a96 <main+0x222>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
    59ac:	4a61      	ldr	r2, [pc, #388]	; (5b34 <main+0x2c0>)
    59ae:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    59b0:	4861      	ldr	r0, [pc, #388]	; (5b38 <main+0x2c4>)
    59b2:	6a03      	ldr	r3, [r0, #32]
    59b4:	021b      	lsls	r3, r3, #8
    59b6:	0a1b      	lsrs	r3, r3, #8
    59b8:	21c0      	movs	r1, #192	; 0xc0
    59ba:	0609      	lsls	r1, r1, #24
    59bc:	430b      	orrs	r3, r1
    59be:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    59c0:	2300      	movs	r3, #0
    59c2:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    59c4:	3307      	adds	r3, #7
    59c6:	6013      	str	r3, [r2, #0]


	/* Setup user name first */
	//printf("Enter the user name (Max %d characters)\r\n", MAIN_CHAT_USER_NAME_SIZE);
	//scanf("%64s", mqtt_user);
	printf("User : %s\r\n", mqtt_user);
    59c8:	4c5c      	ldr	r4, [pc, #368]	; (5b3c <main+0x2c8>)
    59ca:	0021      	movs	r1, r4
    59cc:	485c      	ldr	r0, [pc, #368]	; (5b40 <main+0x2cc>)
    59ce:	4b52      	ldr	r3, [pc, #328]	; (5b18 <main+0x2a4>)
    59d0:	4798      	blx	r3
	sprintf(topic, "%s%s", MAIN_CHAT_TOPIC, mqtt_user);
    59d2:	0023      	movs	r3, r4
    59d4:	4a5b      	ldr	r2, [pc, #364]	; (5b44 <main+0x2d0>)
    59d6:	495c      	ldr	r1, [pc, #368]	; (5b48 <main+0x2d4>)
    59d8:	a803      	add	r0, sp, #12
    59da:	4c5c      	ldr	r4, [pc, #368]	; (5b4c <main+0x2d8>)
    59dc:	47a0      	blx	r4

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    59de:	2218      	movs	r2, #24
    59e0:	2100      	movs	r1, #0
    59e2:	a816      	add	r0, sp, #88	; 0x58
    59e4:	4b5a      	ldr	r3, [pc, #360]	; (5b50 <main+0x2dc>)
    59e6:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_callback; /* Set Wi-Fi event callback. */
    59e8:	4b5a      	ldr	r3, [pc, #360]	; (5b54 <main+0x2e0>)
    59ea:	9316      	str	r3, [sp, #88]	; 0x58
	ret = m2m_wifi_init(&param);
    59ec:	a816      	add	r0, sp, #88	; 0x58
    59ee:	4b5a      	ldr	r3, [pc, #360]	; (5b58 <main+0x2e4>)
    59f0:	4798      	blx	r3
    59f2:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) { //if returned status is not M2M_SUCCESS
    59f4:	d111      	bne.n	5a1a <main+0x1a6>
		while (1) { /* Loop forever. */
		}
	}

	/* Initialize socket interface. */
	socketInit();
    59f6:	4b59      	ldr	r3, [pc, #356]	; (5b5c <main+0x2e8>)
    59f8:	4798      	blx	r3
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
    59fa:	4959      	ldr	r1, [pc, #356]	; (5b60 <main+0x2ec>)
    59fc:	4859      	ldr	r0, [pc, #356]	; (5b64 <main+0x2f0>)
    59fe:	4b5a      	ldr	r3, [pc, #360]	; (5b68 <main+0x2f4>)
    5a00:	4798      	blx	r3

	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    5a02:	23ff      	movs	r3, #255	; 0xff
    5a04:	9300      	str	r3, [sp, #0]
    5a06:	4b59      	ldr	r3, [pc, #356]	; (5b6c <main+0x2f8>)
    5a08:	2202      	movs	r2, #2
    5a0a:	210e      	movs	r1, #14
    5a0c:	4858      	ldr	r0, [pc, #352]	; (5b70 <main+0x2fc>)
    5a0e:	4c59      	ldr	r4, [pc, #356]	; (5b74 <main+0x300>)
    5a10:	47a0      	blx	r4

	while (1) {
		
		//loopCounter++;
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
    5a12:	4e59      	ldr	r6, [pc, #356]	; (5b78 <main+0x304>)
		/* Try to read user input from USART. */
		//usart_read_job(&cdc_uart_module, &uart_ch_buffer);
		/* Checks the timer timeout. */
		sw_timer_task(&swt_module_inst);
    5a14:	4c36      	ldr	r4, [pc, #216]	; (5af0 <main+0x27c>)
    5a16:	4d59      	ldr	r5, [pc, #356]	; (5b7c <main+0x308>)
    5a18:	e007      	b.n	5a2a <main+0x1b6>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
    5a1a:	4859      	ldr	r0, [pc, #356]	; (5b80 <main+0x30c>)
    5a1c:	4b3e      	ldr	r3, [pc, #248]	; (5b18 <main+0x2a4>)
    5a1e:	4798      	blx	r3
    5a20:	e7fe      	b.n	5a20 <main+0x1ac>
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    5a22:	4b58      	ldr	r3, [pc, #352]	; (5b84 <main+0x310>)
    5a24:	6a1b      	ldr	r3, [r3, #32]
		
		
		
		
		/* Is button pressed? */
		if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
    5a26:	041b      	lsls	r3, r3, #16
    5a28:	d51b      	bpl.n	5a62 <main+0x1ee>
		m2m_wifi_handle_events(NULL);
    5a2a:	2000      	movs	r0, #0
    5a2c:	47b0      	blx	r6
		sw_timer_task(&swt_module_inst);
    5a2e:	0020      	movs	r0, r4
    5a30:	47a8      	blx	r5
		if( tick_counter_check_timer())
    5a32:	4b55      	ldr	r3, [pc, #340]	; (5b88 <main+0x314>)
    5a34:	4798      	blx	r3
    5a36:	2800      	cmp	r0, #0
    5a38:	d0f3      	beq.n	5a22 <main+0x1ae>
			printf("Temp: %d\r\n",dTemp);
    5a3a:	2119      	movs	r1, #25
    5a3c:	4853      	ldr	r0, [pc, #332]	; (5b8c <main+0x318>)
    5a3e:	4b36      	ldr	r3, [pc, #216]	; (5b18 <main+0x2a4>)
    5a40:	4798      	blx	r3
		mqtt_publish(&mqtt_inst, topic, data_buffer, MAIN_CHAT_BUFFER_SIZE, 0, 0);
    5a42:	2300      	movs	r3, #0
    5a44:	9301      	str	r3, [sp, #4]
    5a46:	9300      	str	r3, [sp, #0]
    5a48:	330a      	adds	r3, #10
    5a4a:	4a51      	ldr	r2, [pc, #324]	; (5b90 <main+0x31c>)
    5a4c:	a903      	add	r1, sp, #12
    5a4e:	482d      	ldr	r0, [pc, #180]	; (5b04 <main+0x290>)
    5a50:	4f50      	ldr	r7, [pc, #320]	; (5b94 <main+0x320>)
    5a52:	47b8      	blx	r7
		printf("Data sent!\r\n");
    5a54:	4850      	ldr	r0, [pc, #320]	; (5b98 <main+0x324>)
    5a56:	4b24      	ldr	r3, [pc, #144]	; (5ae8 <main+0x274>)
    5a58:	4798      	blx	r3
			tick_counter_reset_timer(3000);
    5a5a:	4850      	ldr	r0, [pc, #320]	; (5b9c <main+0x328>)
    5a5c:	4b50      	ldr	r3, [pc, #320]	; (5ba0 <main+0x32c>)
    5a5e:	4798      	blx	r3
    5a60:	e7df      	b.n	5a22 <main+0x1ae>
			/* Yes, so turn LED on. */
			
			
			if (isLedOn==false)
    5a62:	4b50      	ldr	r3, [pc, #320]	; (5ba4 <main+0x330>)
    5a64:	781b      	ldrb	r3, [r3, #0]
    5a66:	2b00      	cmp	r3, #0
    5a68:	d10a      	bne.n	5a80 <main+0x20c>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    5a6a:	2280      	movs	r2, #128	; 0x80
    5a6c:	05d2      	lsls	r2, r2, #23
    5a6e:	4b4e      	ldr	r3, [pc, #312]	; (5ba8 <main+0x334>)
    5a70:	615a      	str	r2, [r3, #20]
			{
				port_pin_set_output_level(LED_0_PIN,	LED_0_ACTIVE);
				isLedOn=true;
    5a72:	2201      	movs	r2, #1
    5a74:	4b4b      	ldr	r3, [pc, #300]	; (5ba4 <main+0x330>)
    5a76:	701a      	strb	r2, [r3, #0]
				printf("LED ON\r\n");
    5a78:	484c      	ldr	r0, [pc, #304]	; (5bac <main+0x338>)
    5a7a:	4b1b      	ldr	r3, [pc, #108]	; (5ae8 <main+0x274>)
    5a7c:	4798      	blx	r3
    5a7e:	e7d4      	b.n	5a2a <main+0x1b6>
		port_base->OUTSET.reg = pin_mask;
    5a80:	2280      	movs	r2, #128	; 0x80
    5a82:	05d2      	lsls	r2, r2, #23
    5a84:	4b48      	ldr	r3, [pc, #288]	; (5ba8 <main+0x334>)
    5a86:	619a      	str	r2, [r3, #24]
			}
			
			else if (isLedOn=true)
			{
				port_pin_set_output_level(LED_0_PIN,	LED_0_INACTIVE);
				isLedOn=false;
    5a88:	2200      	movs	r2, #0
    5a8a:	4b46      	ldr	r3, [pc, #280]	; (5ba4 <main+0x330>)
    5a8c:	701a      	strb	r2, [r3, #0]
				printf("LED OFF\r\n");
    5a8e:	4848      	ldr	r0, [pc, #288]	; (5bb0 <main+0x33c>)
    5a90:	4b15      	ldr	r3, [pc, #84]	; (5ae8 <main+0x274>)
    5a92:	4798      	blx	r3
    5a94:	e7c9      	b.n	5a2a <main+0x1b6>
		printf("%s\r\n","SysTick configuration error");
    5a96:	4947      	ldr	r1, [pc, #284]	; (5bb4 <main+0x340>)
    5a98:	4847      	ldr	r0, [pc, #284]	; (5bb8 <main+0x344>)
    5a9a:	4b1f      	ldr	r3, [pc, #124]	; (5b18 <main+0x2a4>)
    5a9c:	4798      	blx	r3
    5a9e:	e7fe      	b.n	5a9e <main+0x22a>
    5aa0:	00004bc1 	.word	0x00004bc1
    5aa4:	00160002 	.word	0x00160002
    5aa8:	00170002 	.word	0x00170002
    5aac:	2000013c 	.word	0x2000013c
    5ab0:	2000042c 	.word	0x2000042c
    5ab4:	00005731 	.word	0x00005731
    5ab8:	20000428 	.word	0x20000428
    5abc:	00005705 	.word	0x00005705
    5ac0:	20000424 	.word	0x20000424
    5ac4:	42001400 	.word	0x42001400
    5ac8:	00003ec5 	.word	0x00003ec5
    5acc:	20000058 	.word	0x20000058
    5ad0:	00007069 	.word	0x00007069
    5ad4:	00005641 	.word	0x00005641
    5ad8:	000042a5 	.word	0x000042a5
    5adc:	00003999 	.word	0x00003999
    5ae0:	e000e100 	.word	0xe000e100
    5ae4:	00009170 	.word	0x00009170
    5ae8:	00007031 	.word	0x00007031
    5aec:	000054a5 	.word	0x000054a5
    5af0:	20000430 	.word	0x20000430
    5af4:	000054b1 	.word	0x000054b1
    5af8:	0000555d 	.word	0x0000555d
    5afc:	00005c6d 	.word	0x00005c6d
    5b00:	20000174 	.word	0x20000174
    5b04:	200001f4 	.word	0x200001f4
    5b08:	00005c91 	.word	0x00005c91
    5b0c:	00005749 	.word	0x00005749
    5b10:	00005d1d 	.word	0x00005d1d
    5b14:	00009210 	.word	0x00009210
    5b18:	00006f15 	.word	0x00006f15
    5b1c:	000091dc 	.word	0x000091dc
    5b20:	00000221 	.word	0x00000221
    5b24:	0000497d 	.word	0x0000497d
    5b28:	40000400 	.word	0x40000400
    5b2c:	000069e1 	.word	0x000069e1
    5b30:	00ffffff 	.word	0x00ffffff
    5b34:	e000e010 	.word	0xe000e010
    5b38:	e000ed00 	.word	0xe000ed00
    5b3c:	20000018 	.word	0x20000018
    5b40:	00009244 	.word	0x00009244
    5b44:	00009324 	.word	0x00009324
    5b48:	00009250 	.word	0x00009250
    5b4c:	000071d5 	.word	0x000071d5
    5b50:	00006db3 	.word	0x00006db3
    5b54:	0000566d 	.word	0x0000566d
    5b58:	00001159 	.word	0x00001159
    5b5c:	00002d85 	.word	0x00002d85
    5b60:	00005655 	.word	0x00005655
    5b64:	00005661 	.word	0x00005661
    5b68:	00002dc9 	.word	0x00002dc9
    5b6c:	000093fc 	.word	0x000093fc
    5b70:	00009408 	.word	0x00009408
    5b74:	00001529 	.word	0x00001529
    5b78:	0000128d 	.word	0x0000128d
    5b7c:	000055e5 	.word	0x000055e5
    5b80:	00009258 	.word	0x00009258
    5b84:	41004400 	.word	0x41004400
    5b88:	00000115 	.word	0x00000115
    5b8c:	00009280 	.word	0x00009280
    5b90:	2000000c 	.word	0x2000000c
    5b94:	00006145 	.word	0x00006145
    5b98:	0000928c 	.word	0x0000928c
    5b9c:	00000bb8 	.word	0x00000bb8
    5ba0:	0000012d 	.word	0x0000012d
    5ba4:	20000170 	.word	0x20000170
    5ba8:	41004480 	.word	0x41004480
    5bac:	00009298 	.word	0x00009298
    5bb0:	000092a0 	.word	0x000092a0
    5bb4:	000092ac 	.word	0x000092ac
    5bb8:	000092c8 	.word	0x000092c8

00005bbc <_hwerr_to_stderr>:
    5bbc:	1c03      	adds	r3, r0, #0
    5bbe:	300e      	adds	r0, #14
    5bc0:	b500      	push	{lr}
    5bc2:	280e      	cmp	r0, #14
    5bc4:	d819      	bhi.n	5bfa <_hwerr_to_stderr+0x3e>
    5bc6:	f000 ff01 	bl	69cc <__gnu_thumb1_case_uqi>
    5bca:	1416      	.short	0x1416
    5bcc:	1b181012 	.word	0x1b181012
    5bd0:	180c0e18 	.word	0x180c0e18
    5bd4:	1d0a0e0e 	.word	0x1d0a0e0e
    5bd8:	08          	.byte	0x08
    5bd9:	00          	.byte	0x00
    5bda:	2000      	movs	r0, #0
    5bdc:	e014      	b.n	5c08 <_hwerr_to_stderr+0x4c>
    5bde:	2070      	movs	r0, #112	; 0x70
    5be0:	e011      	b.n	5c06 <_hwerr_to_stderr+0x4a>
    5be2:	2016      	movs	r0, #22
    5be4:	e00f      	b.n	5c06 <_hwerr_to_stderr+0x4a>
    5be6:	200c      	movs	r0, #12
    5be8:	e00d      	b.n	5c06 <_hwerr_to_stderr+0x4a>
    5bea:	2079      	movs	r0, #121	; 0x79
    5bec:	e00b      	b.n	5c06 <_hwerr_to_stderr+0x4a>
    5bee:	2068      	movs	r0, #104	; 0x68
    5bf0:	e009      	b.n	5c06 <_hwerr_to_stderr+0x4a>
    5bf2:	200b      	movs	r0, #11
    5bf4:	e007      	b.n	5c06 <_hwerr_to_stderr+0x4a>
    5bf6:	2010      	movs	r0, #16
    5bf8:	e005      	b.n	5c06 <_hwerr_to_stderr+0x4a>
    5bfa:	2000      	movs	r0, #0
    5bfc:	4283      	cmp	r3, r0
    5bfe:	da03      	bge.n	5c08 <_hwerr_to_stderr+0x4c>
    5c00:	2005      	movs	r0, #5
    5c02:	e000      	b.n	5c06 <_hwerr_to_stderr+0x4a>
    5c04:	2002      	movs	r0, #2
    5c06:	4240      	negs	r0, r0
    5c08:	bd00      	pop	{pc}
	...

00005c0c <_mqtt_send_wait>:
    5c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c0e:	1c04      	adds	r4, r0, #0
    5c10:	3443      	adds	r4, #67	; 0x43
    5c12:	7823      	ldrb	r3, [r4, #0]
    5c14:	1c05      	adds	r5, r0, #0
    5c16:	07d8      	lsls	r0, r3, #31
    5c18:	d51c      	bpl.n	5c54 <_mqtt_send_wait+0x48>
    5c1a:	2604      	movs	r6, #4
    5c1c:	4333      	orrs	r3, r6
    5c1e:	7023      	strb	r3, [r4, #0]
    5c20:	2002      	movs	r0, #2
    5c22:	5628      	ldrsb	r0, [r5, r0]
    5c24:	b292      	uxth	r2, r2
    5c26:	2300      	movs	r3, #0
    5c28:	4f0c      	ldr	r7, [pc, #48]	; (5c5c <_mqtt_send_wait+0x50>)
    5c2a:	47b8      	blx	r7
    5c2c:	2800      	cmp	r0, #0
    5c2e:	da05      	bge.n	5c3c <_mqtt_send_wait+0x30>
    5c30:	7823      	ldrb	r3, [r4, #0]
    5c32:	43b3      	bics	r3, r6
    5c34:	7023      	strb	r3, [r4, #0]
    5c36:	4b0a      	ldr	r3, [pc, #40]	; (5c60 <_mqtt_send_wait+0x54>)
    5c38:	4798      	blx	r3
    5c3a:	e00d      	b.n	5c58 <_mqtt_send_wait+0x4c>
    5c3c:	7822      	ldrb	r2, [r4, #0]
    5c3e:	2314      	movs	r3, #20
    5c40:	4013      	ands	r3, r2
    5c42:	2000      	movs	r0, #0
    5c44:	2b04      	cmp	r3, #4
    5c46:	d107      	bne.n	5c58 <_mqtt_send_wait+0x4c>
    5c48:	4b06      	ldr	r3, [pc, #24]	; (5c64 <_mqtt_send_wait+0x58>)
    5c4a:	4798      	blx	r3
    5c4c:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    5c4e:	4b06      	ldr	r3, [pc, #24]	; (5c68 <_mqtt_send_wait+0x5c>)
    5c50:	4798      	blx	r3
    5c52:	e7f3      	b.n	5c3c <_mqtt_send_wait+0x30>
    5c54:	2001      	movs	r0, #1
    5c56:	4240      	negs	r0, r0
    5c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c5a:	46c0      	nop			; (mov r8, r8)
    5c5c:	00002ff1 	.word	0x00002ff1
    5c60:	00005bbd 	.word	0x00005bbd
    5c64:	0000128d 	.word	0x0000128d
    5c68:	000055e5 	.word	0x000055e5

00005c6c <mqtt_get_config_defaults>:
    5c6c:	4b07      	ldr	r3, [pc, #28]	; (5c8c <mqtt_get_config_defaults+0x20>)
    5c6e:	2240      	movs	r2, #64	; 0x40
    5c70:	8003      	strh	r3, [r0, #0]
    5c72:	2396      	movs	r3, #150	; 0x96
    5c74:	009b      	lsls	r3, r3, #2
    5c76:	8103      	strh	r3, [r0, #8]
    5c78:	6102      	str	r2, [r0, #16]
    5c7a:	2300      	movs	r3, #0
    5c7c:	2220      	movs	r2, #32
    5c7e:	7083      	strb	r3, [r0, #2]
    5c80:	6043      	str	r3, [r0, #4]
    5c82:	60c3      	str	r3, [r0, #12]
    5c84:	6142      	str	r2, [r0, #20]
    5c86:	7603      	strb	r3, [r0, #24]
    5c88:	4770      	bx	lr
    5c8a:	46c0      	nop			; (mov r8, r8)
    5c8c:	0000075b 	.word	0x0000075b

00005c90 <mqtt_init>:
    5c90:	b538      	push	{r3, r4, r5, lr}
    5c92:	1c04      	adds	r4, r0, #0
    5c94:	1c0d      	adds	r5, r1, #0
    5c96:	2800      	cmp	r0, #0
    5c98:	d030      	beq.n	5cfc <mqtt_init+0x6c>
    5c9a:	2900      	cmp	r1, #0
    5c9c:	d02e      	beq.n	5cfc <mqtt_init+0x6c>
    5c9e:	690b      	ldr	r3, [r1, #16]
    5ca0:	2b00      	cmp	r3, #0
    5ca2:	d02b      	beq.n	5cfc <mqtt_init+0x6c>
    5ca4:	684b      	ldr	r3, [r1, #4]
    5ca6:	2b00      	cmp	r3, #0
    5ca8:	d028      	beq.n	5cfc <mqtt_init+0x6c>
    5caa:	2100      	movs	r1, #0
    5cac:	2274      	movs	r2, #116	; 0x74
    5cae:	4b16      	ldr	r3, [pc, #88]	; (5d08 <mqtt_init+0x78>)
    5cb0:	4798      	blx	r3
    5cb2:	1c20      	adds	r0, r4, #0
    5cb4:	4b15      	ldr	r3, [pc, #84]	; (5d0c <mqtt_init+0x7c>)
    5cb6:	3058      	adds	r0, #88	; 0x58
    5cb8:	1c29      	adds	r1, r5, #0
    5cba:	221c      	movs	r2, #28
    5cbc:	4798      	blx	r3
    5cbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
    5cc0:	2b00      	cmp	r3, #0
    5cc2:	d10b      	bne.n	5cdc <mqtt_init+0x4c>
    5cc4:	6928      	ldr	r0, [r5, #16]
    5cc6:	4b12      	ldr	r3, [pc, #72]	; (5d10 <mqtt_init+0x80>)
    5cc8:	4798      	blx	r3
    5cca:	6660      	str	r0, [r4, #100]	; 0x64
    5ccc:	2800      	cmp	r0, #0
    5cce:	d017      	beq.n	5d00 <mqtt_init+0x70>
    5cd0:	1c23      	adds	r3, r4, #0
    5cd2:	3343      	adds	r3, #67	; 0x43
    5cd4:	781a      	ldrb	r2, [r3, #0]
    5cd6:	2120      	movs	r1, #32
    5cd8:	430a      	orrs	r2, r1
    5cda:	701a      	strb	r2, [r3, #0]
    5cdc:	892a      	ldrh	r2, [r5, #8]
    5cde:	23fa      	movs	r3, #250	; 0xfa
    5ce0:	005b      	lsls	r3, r3, #1
    5ce2:	4353      	muls	r3, r2
    5ce4:	6868      	ldr	r0, [r5, #4]
    5ce6:	490b      	ldr	r1, [pc, #44]	; (5d14 <mqtt_init+0x84>)
    5ce8:	1c22      	adds	r2, r4, #0
    5cea:	4d0b      	ldr	r5, [pc, #44]	; (5d18 <mqtt_init+0x88>)
    5cec:	47a8      	blx	r5
    5cee:	1c03      	adds	r3, r0, #0
    5cf0:	6520      	str	r0, [r4, #80]	; 0x50
    5cf2:	2000      	movs	r0, #0
    5cf4:	4283      	cmp	r3, r0
    5cf6:	da05      	bge.n	5d04 <mqtt_init+0x74>
    5cf8:	201c      	movs	r0, #28
    5cfa:	e002      	b.n	5d02 <mqtt_init+0x72>
    5cfc:	2016      	movs	r0, #22
    5cfe:	e000      	b.n	5d02 <mqtt_init+0x72>
    5d00:	200c      	movs	r0, #12
    5d02:	4240      	negs	r0, r0
    5d04:	bd38      	pop	{r3, r4, r5, pc}
    5d06:	46c0      	nop			; (mov r8, r8)
    5d08:	00006db3 	.word	0x00006db3
    5d0c:	00006d7d 	.word	0x00006d7d
    5d10:	00006d69 	.word	0x00006d69
    5d14:	00006499 	.word	0x00006499
    5d18:	00005571 	.word	0x00005571

00005d1c <mqtt_register_callback>:
    5d1c:	2800      	cmp	r0, #0
    5d1e:	d002      	beq.n	5d26 <mqtt_register_callback+0xa>
    5d20:	6541      	str	r1, [r0, #84]	; 0x54
    5d22:	2000      	movs	r0, #0
    5d24:	e001      	b.n	5d2a <mqtt_register_callback+0xe>
    5d26:	2016      	movs	r0, #22
    5d28:	4240      	negs	r0, r0
    5d2a:	4770      	bx	lr

00005d2c <mqtt_socket_resolve_handler>:
    5d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d2e:	1c06      	adds	r6, r0, #0
    5d30:	b085      	sub	sp, #20
    5d32:	1c0f      	adds	r7, r1, #0
    5d34:	2400      	movs	r4, #0
    5d36:	4b0f      	ldr	r3, [pc, #60]	; (5d74 <mqtt_socket_resolve_handler+0x48>)
    5d38:	58e5      	ldr	r5, [r4, r3]
    5d3a:	2d00      	cmp	r5, #0
    5d3c:	d015      	beq.n	5d6a <mqtt_socket_resolve_handler+0x3e>
    5d3e:	1ce9      	adds	r1, r5, #3
    5d40:	1c30      	adds	r0, r6, #0
    5d42:	4b0d      	ldr	r3, [pc, #52]	; (5d78 <mqtt_socket_resolve_handler+0x4c>)
    5d44:	4798      	blx	r3
    5d46:	2800      	cmp	r0, #0
    5d48:	d10f      	bne.n	5d6a <mqtt_socket_resolve_handler+0x3e>
    5d4a:	466a      	mov	r2, sp
    5d4c:	2302      	movs	r3, #2
    5d4e:	8013      	strh	r3, [r2, #0]
    5d50:	1c2b      	adds	r3, r5, #0
    5d52:	3358      	adds	r3, #88	; 0x58
    5d54:	881b      	ldrh	r3, [r3, #0]
    5d56:	9701      	str	r7, [sp, #4]
    5d58:	ba5b      	rev16	r3, r3
    5d5a:	8053      	strh	r3, [r2, #2]
    5d5c:	2002      	movs	r0, #2
    5d5e:	5628      	ldrsb	r0, [r5, r0]
    5d60:	4669      	mov	r1, sp
    5d62:	2210      	movs	r2, #16
    5d64:	4b05      	ldr	r3, [pc, #20]	; (5d7c <mqtt_socket_resolve_handler+0x50>)
    5d66:	4798      	blx	r3
    5d68:	e002      	b.n	5d70 <mqtt_socket_resolve_handler+0x44>
    5d6a:	3404      	adds	r4, #4
    5d6c:	2c1c      	cmp	r4, #28
    5d6e:	d1e2      	bne.n	5d36 <mqtt_socket_resolve_handler+0xa>
    5d70:	b005      	add	sp, #20
    5d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d74:	2000026c 	.word	0x2000026c
    5d78:	00007219 	.word	0x00007219
    5d7c:	00002f61 	.word	0x00002f61

00005d80 <mqtt_connect>:
    5d80:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d82:	1c04      	adds	r4, r0, #0
    5d84:	b089      	sub	sp, #36	; 0x24
    5d86:	1c0d      	adds	r5, r1, #0
    5d88:	2800      	cmp	r0, #0
    5d8a:	d051      	beq.n	5e30 <mqtt_connect+0xb0>
    5d8c:	2900      	cmp	r1, #0
    5d8e:	d04f      	beq.n	5e30 <mqtt_connect+0xb0>
    5d90:	1c08      	adds	r0, r1, #0
    5d92:	4b39      	ldr	r3, [pc, #228]	; (5e78 <mqtt_connect+0xf8>)
    5d94:	4798      	blx	r3
    5d96:	2840      	cmp	r0, #64	; 0x40
    5d98:	d84c      	bhi.n	5e34 <mqtt_connect+0xb4>
    5d9a:	1c21      	adds	r1, r4, #0
    5d9c:	3143      	adds	r1, #67	; 0x43
    5d9e:	780b      	ldrb	r3, [r1, #0]
    5da0:	9101      	str	r1, [sp, #4]
    5da2:	07db      	lsls	r3, r3, #31
    5da4:	0fd9      	lsrs	r1, r3, #31
    5da6:	466a      	mov	r2, sp
    5da8:	b2ce      	uxtb	r6, r1
    5daa:	1ce0      	adds	r0, r4, #3
    5dac:	7211      	strb	r1, [r2, #8]
    5dae:	2e00      	cmp	r6, #0
    5db0:	d142      	bne.n	5e38 <mqtt_connect+0xb8>
    5db2:	2701      	movs	r7, #1
    5db4:	1c29      	adds	r1, r5, #0
    5db6:	4b31      	ldr	r3, [pc, #196]	; (5e7c <mqtt_connect+0xfc>)
    5db8:	8027      	strh	r7, [r4, #0]
    5dba:	4798      	blx	r3
    5dbc:	9a01      	ldr	r2, [sp, #4]
    5dbe:	2002      	movs	r0, #2
    5dc0:	7813      	ldrb	r3, [r2, #0]
    5dc2:	9901      	ldr	r1, [sp, #4]
    5dc4:	43bb      	bics	r3, r7
    5dc6:	4383      	bics	r3, r0
    5dc8:	22e3      	movs	r2, #227	; 0xe3
    5dca:	4013      	ands	r3, r2
    5dcc:	466a      	mov	r2, sp
    5dce:	700b      	strb	r3, [r1, #0]
    5dd0:	7a12      	ldrb	r2, [r2, #8]
    5dd2:	1c23      	adds	r3, r4, #0
    5dd4:	3348      	adds	r3, #72	; 0x48
    5dd6:	6466      	str	r6, [r4, #68]	; 0x44
    5dd8:	701a      	strb	r2, [r3, #0]
    5dda:	7c9a      	ldrb	r2, [r3, #18]
    5ddc:	805e      	strh	r6, [r3, #2]
    5dde:	1e53      	subs	r3, r2, #1
    5de0:	419a      	sbcs	r2, r3
    5de2:	b2d2      	uxtb	r2, r2
    5de4:	1c39      	adds	r1, r7, #0
    5de6:	4b26      	ldr	r3, [pc, #152]	; (5e80 <mqtt_connect+0x100>)
    5de8:	4798      	blx	r3
    5dea:	70a0      	strb	r0, [r4, #2]
    5dec:	2800      	cmp	r0, #0
    5dee:	db25      	blt.n	5e3c <mqtt_connect+0xbc>
    5df0:	4b24      	ldr	r3, [pc, #144]	; (5e84 <mqtt_connect+0x104>)
    5df2:	0080      	lsls	r0, r0, #2
    5df4:	50c4      	str	r4, [r0, r3]
    5df6:	1c2b      	adds	r3, r5, #0
    5df8:	781f      	ldrb	r7, [r3, #0]
    5dfa:	2f00      	cmp	r7, #0
    5dfc:	d026      	beq.n	5e4c <mqtt_connect+0xcc>
    5dfe:	2220      	movs	r2, #32
    5e00:	1c39      	adds	r1, r7, #0
    5e02:	4391      	bics	r1, r2
    5e04:	1c0a      	adds	r2, r1, #0
    5e06:	3a41      	subs	r2, #65	; 0x41
    5e08:	b2d2      	uxtb	r2, r2
    5e0a:	3301      	adds	r3, #1
    5e0c:	2a05      	cmp	r2, #5
    5e0e:	d90d      	bls.n	5e2c <mqtt_connect+0xac>
    5e10:	2f3a      	cmp	r7, #58	; 0x3a
    5e12:	d00b      	beq.n	5e2c <mqtt_connect+0xac>
    5e14:	2f2f      	cmp	r7, #47	; 0x2f
    5e16:	d009      	beq.n	5e2c <mqtt_connect+0xac>
    5e18:	2f2e      	cmp	r7, #46	; 0x2e
    5e1a:	d102      	bne.n	5e22 <mqtt_connect+0xa2>
    5e1c:	2e00      	cmp	r6, #0
    5e1e:	d0eb      	beq.n	5df8 <mqtt_connect+0x78>
    5e20:	e00f      	b.n	5e42 <mqtt_connect+0xc2>
    5e22:	2230      	movs	r2, #48	; 0x30
    5e24:	4017      	ands	r7, r2
    5e26:	4297      	cmp	r7, r2
    5e28:	d0e6      	beq.n	5df8 <mqtt_connect+0x78>
    5e2a:	e00a      	b.n	5e42 <mqtt_connect+0xc2>
    5e2c:	2601      	movs	r6, #1
    5e2e:	e7e3      	b.n	5df8 <mqtt_connect+0x78>
    5e30:	2016      	movs	r0, #22
    5e32:	e004      	b.n	5e3e <mqtt_connect+0xbe>
    5e34:	205b      	movs	r0, #91	; 0x5b
    5e36:	e002      	b.n	5e3e <mqtt_connect+0xbe>
    5e38:	2078      	movs	r0, #120	; 0x78
    5e3a:	e000      	b.n	5e3e <mqtt_connect+0xbe>
    5e3c:	201c      	movs	r0, #28
    5e3e:	4240      	negs	r0, r0
    5e40:	e017      	b.n	5e72 <mqtt_connect+0xf2>
    5e42:	1c28      	adds	r0, r5, #0
    5e44:	4b10      	ldr	r3, [pc, #64]	; (5e88 <mqtt_connect+0x108>)
    5e46:	4798      	blx	r3
    5e48:	2000      	movs	r0, #0
    5e4a:	e012      	b.n	5e72 <mqtt_connect+0xf2>
    5e4c:	466a      	mov	r2, sp
    5e4e:	2302      	movs	r3, #2
    5e50:	8213      	strh	r3, [r2, #16]
    5e52:	1c23      	adds	r3, r4, #0
    5e54:	3358      	adds	r3, #88	; 0x58
    5e56:	881b      	ldrh	r3, [r3, #0]
    5e58:	1c28      	adds	r0, r5, #0
    5e5a:	ba5b      	rev16	r3, r3
    5e5c:	8253      	strh	r3, [r2, #18]
    5e5e:	4b0b      	ldr	r3, [pc, #44]	; (5e8c <mqtt_connect+0x10c>)
    5e60:	4798      	blx	r3
    5e62:	9005      	str	r0, [sp, #20]
    5e64:	2002      	movs	r0, #2
    5e66:	5620      	ldrsb	r0, [r4, r0]
    5e68:	a904      	add	r1, sp, #16
    5e6a:	2210      	movs	r2, #16
    5e6c:	4b08      	ldr	r3, [pc, #32]	; (5e90 <mqtt_connect+0x110>)
    5e6e:	4798      	blx	r3
    5e70:	1c38      	adds	r0, r7, #0
    5e72:	b009      	add	sp, #36	; 0x24
    5e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e76:	46c0      	nop			; (mov r8, r8)
    5e78:	0000723d 	.word	0x0000723d
    5e7c:	0000722d 	.word	0x0000722d
    5e80:	00002ddd 	.word	0x00002ddd
    5e84:	2000026c 	.word	0x2000026c
    5e88:	00003225 	.word	0x00003225
    5e8c:	000031b9 	.word	0x000031b9
    5e90:	00002f61 	.word	0x00002f61

00005e94 <mqtt_connect_broker>:
    5e94:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e96:	b095      	sub	sp, #84	; 0x54
    5e98:	af02      	add	r7, sp, #8
    5e9a:	617b      	str	r3, [r7, #20]
    5e9c:	1c3b      	adds	r3, r7, #0
    5e9e:	3370      	adds	r3, #112	; 0x70
    5ea0:	781b      	ldrb	r3, [r3, #0]
    5ea2:	1c05      	adds	r5, r0, #0
    5ea4:	60fb      	str	r3, [r7, #12]
    5ea6:	1c3b      	adds	r3, r7, #0
    5ea8:	3374      	adds	r3, #116	; 0x74
    5eaa:	781b      	ldrb	r3, [r3, #0]
    5eac:	6139      	str	r1, [r7, #16]
    5eae:	61fa      	str	r2, [r7, #28]
    5eb0:	60bb      	str	r3, [r7, #8]
    5eb2:	2800      	cmp	r0, #0
    5eb4:	d101      	bne.n	5eba <mqtt_connect_broker+0x26>
    5eb6:	2016      	movs	r0, #22
    5eb8:	e129      	b.n	610e <mqtt_connect_broker+0x27a>
    5eba:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    5ebc:	4668      	mov	r0, sp
    5ebe:	3307      	adds	r3, #7
    5ec0:	08db      	lsrs	r3, r3, #3
    5ec2:	00db      	lsls	r3, r3, #3
    5ec4:	1ac0      	subs	r0, r0, r3
    5ec6:	4685      	mov	sp, r0
    5ec8:	ac02      	add	r4, sp, #8
    5eca:	607c      	str	r4, [r7, #4]
    5ecc:	6e3c      	ldr	r4, [r7, #96]	; 0x60
    5ece:	2c00      	cmp	r4, #0
    5ed0:	d0f1      	beq.n	5eb6 <mqtt_connect_broker+0x22>
    5ed2:	1c2b      	adds	r3, r5, #0
    5ed4:	3343      	adds	r3, #67	; 0x43
    5ed6:	781b      	ldrb	r3, [r3, #0]
    5ed8:	07d8      	lsls	r0, r3, #31
    5eda:	d400      	bmi.n	5ede <mqtt_connect_broker+0x4a>
    5edc:	e112      	b.n	6104 <mqtt_connect_broker+0x270>
    5ede:	079a      	lsls	r2, r3, #30
    5ee0:	d500      	bpl.n	5ee4 <mqtt_connect_broker+0x50>
    5ee2:	e111      	b.n	6108 <mqtt_connect_broker+0x274>
    5ee4:	071c      	lsls	r4, r3, #28
    5ee6:	d40b      	bmi.n	5f00 <mqtt_connect_broker+0x6c>
    5ee8:	4e8b      	ldr	r6, [pc, #556]	; (6118 <mqtt_connect_broker+0x284>)
    5eea:	6e38      	ldr	r0, [r7, #96]	; 0x60
    5eec:	47b0      	blx	r6
    5eee:	1c03      	adds	r3, r0, #0
    5ef0:	61b8      	str	r0, [r7, #24]
    5ef2:	69f8      	ldr	r0, [r7, #28]
    5ef4:	330e      	adds	r3, #14
    5ef6:	1c34      	adds	r4, r6, #0
    5ef8:	2800      	cmp	r0, #0
    5efa:	d113      	bne.n	5f24 <mqtt_connect_broker+0x90>
    5efc:	1c1e      	adds	r6, r3, #0
    5efe:	e01d      	b.n	5f3c <mqtt_connect_broker+0xa8>
    5f00:	1c2b      	adds	r3, r5, #0
    5f02:	3370      	adds	r3, #112	; 0x70
    5f04:	781b      	ldrb	r3, [r3, #0]
    5f06:	2b00      	cmp	r3, #0
    5f08:	d000      	beq.n	5f0c <mqtt_connect_broker+0x78>
    5f0a:	e0ff      	b.n	610c <mqtt_connect_broker+0x278>
    5f0c:	1c2b      	adds	r3, r5, #0
    5f0e:	3343      	adds	r3, #67	; 0x43
    5f10:	781b      	ldrb	r3, [r3, #0]
    5f12:	071a      	lsls	r2, r3, #28
    5f14:	d5e8      	bpl.n	5ee8 <mqtt_connect_broker+0x54>
    5f16:	4b81      	ldr	r3, [pc, #516]	; (611c <mqtt_connect_broker+0x288>)
    5f18:	2000      	movs	r0, #0
    5f1a:	4798      	blx	r3
    5f1c:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    5f1e:	4b80      	ldr	r3, [pc, #512]	; (6120 <mqtt_connect_broker+0x28c>)
    5f20:	4798      	blx	r3
    5f22:	e7f3      	b.n	5f0c <mqtt_connect_broker+0x78>
    5f24:	69f8      	ldr	r0, [r7, #28]
    5f26:	47b0      	blx	r6
    5f28:	69be      	ldr	r6, [r7, #24]
    5f2a:	697b      	ldr	r3, [r7, #20]
    5f2c:	3610      	adds	r6, #16
    5f2e:	1836      	adds	r6, r6, r0
    5f30:	2b00      	cmp	r3, #0
    5f32:	d003      	beq.n	5f3c <mqtt_connect_broker+0xa8>
    5f34:	1c18      	adds	r0, r3, #0
    5f36:	47a0      	blx	r4
    5f38:	3602      	adds	r6, #2
    5f3a:	1836      	adds	r6, r6, r0
    5f3c:	6e78      	ldr	r0, [r7, #100]	; 0x64
    5f3e:	2800      	cmp	r0, #0
    5f40:	d007      	beq.n	5f52 <mqtt_connect_broker+0xbe>
    5f42:	47a0      	blx	r4
    5f44:	3602      	adds	r6, #2
    5f46:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    5f48:	1830      	adds	r0, r6, r0
    5f4a:	1906      	adds	r6, r0, r4
    5f4c:	2c00      	cmp	r4, #0
    5f4e:	d100      	bne.n	5f52 <mqtt_connect_broker+0xbe>
    5f50:	1c06      	adds	r6, r0, #0
    5f52:	69fc      	ldr	r4, [r7, #28]
    5f54:	2c00      	cmp	r4, #0
    5f56:	d006      	beq.n	5f66 <mqtt_connect_broker+0xd2>
    5f58:	24c0      	movs	r4, #192	; 0xc0
    5f5a:	61bc      	str	r4, [r7, #24]
    5f5c:	697c      	ldr	r4, [r7, #20]
    5f5e:	2c00      	cmp	r4, #0
    5f60:	d103      	bne.n	5f6a <mqtt_connect_broker+0xd6>
    5f62:	2480      	movs	r4, #128	; 0x80
    5f64:	e000      	b.n	5f68 <mqtt_connect_broker+0xd4>
    5f66:	69fc      	ldr	r4, [r7, #28]
    5f68:	61bc      	str	r4, [r7, #24]
    5f6a:	6e7c      	ldr	r4, [r7, #100]	; 0x64
    5f6c:	2c00      	cmp	r4, #0
    5f6e:	d00f      	beq.n	5f90 <mqtt_connect_broker+0xfc>
    5f70:	68bc      	ldr	r4, [r7, #8]
    5f72:	2c00      	cmp	r4, #0
    5f74:	d003      	beq.n	5f7e <mqtt_connect_broker+0xea>
    5f76:	69bc      	ldr	r4, [r7, #24]
    5f78:	2320      	movs	r3, #32
    5f7a:	431c      	orrs	r4, r3
    5f7c:	61bc      	str	r4, [r7, #24]
    5f7e:	68fc      	ldr	r4, [r7, #12]
    5f80:	2303      	movs	r3, #3
    5f82:	4023      	ands	r3, r4
    5f84:	00db      	lsls	r3, r3, #3
    5f86:	69bc      	ldr	r4, [r7, #24]
    5f88:	2204      	movs	r2, #4
    5f8a:	4313      	orrs	r3, r2
    5f8c:	431c      	orrs	r4, r3
    5f8e:	61bc      	str	r4, [r7, #24]
    5f90:	693c      	ldr	r4, [r7, #16]
    5f92:	2c00      	cmp	r4, #0
    5f94:	d003      	beq.n	5f9e <mqtt_connect_broker+0x10a>
    5f96:	69bc      	ldr	r4, [r7, #24]
    5f98:	2302      	movs	r3, #2
    5f9a:	431c      	orrs	r4, r3
    5f9c:	61bc      	str	r4, [r7, #24]
    5f9e:	1c2b      	adds	r3, r5, #0
    5fa0:	3343      	adds	r3, #67	; 0x43
    5fa2:	781a      	ldrb	r2, [r3, #0]
    5fa4:	2108      	movs	r1, #8
    5fa6:	430a      	orrs	r2, r1
    5fa8:	701a      	strb	r2, [r3, #0]
    5faa:	1c38      	adds	r0, r7, #0
    5fac:	9500      	str	r5, [sp, #0]
    5fae:	3020      	adds	r0, #32
    5fb0:	6879      	ldr	r1, [r7, #4]
    5fb2:	4b5c      	ldr	r3, [pc, #368]	; (6124 <mqtt_connect_broker+0x290>)
    5fb4:	6eea      	ldr	r2, [r5, #108]	; 0x6c
    5fb6:	4c5c      	ldr	r4, [pc, #368]	; (6128 <mqtt_connect_broker+0x294>)
    5fb8:	47a0      	blx	r4
    5fba:	1c38      	adds	r0, r7, #0
    5fbc:	3020      	adds	r0, #32
    5fbe:	2110      	movs	r1, #16
    5fc0:	4b5a      	ldr	r3, [pc, #360]	; (612c <mqtt_connect_broker+0x298>)
    5fc2:	4798      	blx	r3
    5fc4:	2e80      	cmp	r6, #128	; 0x80
    5fc6:	dd09      	ble.n	5fdc <mqtt_connect_broker+0x148>
    5fc8:	2180      	movs	r1, #128	; 0x80
    5fca:	4249      	negs	r1, r1
    5fcc:	4331      	orrs	r1, r6
    5fce:	1c38      	adds	r0, r7, #0
    5fd0:	b249      	sxtb	r1, r1
    5fd2:	3020      	adds	r0, #32
    5fd4:	4c55      	ldr	r4, [pc, #340]	; (612c <mqtt_connect_broker+0x298>)
    5fd6:	47a0      	blx	r4
    5fd8:	11f6      	asrs	r6, r6, #7
    5fda:	e7f3      	b.n	5fc4 <mqtt_connect_broker+0x130>
    5fdc:	4b54      	ldr	r3, [pc, #336]	; (6130 <mqtt_connect_broker+0x29c>)
    5fde:	401e      	ands	r6, r3
    5fe0:	d504      	bpl.n	5fec <mqtt_connect_broker+0x158>
    5fe2:	2380      	movs	r3, #128	; 0x80
    5fe4:	3e01      	subs	r6, #1
    5fe6:	425b      	negs	r3, r3
    5fe8:	431e      	orrs	r6, r3
    5fea:	3601      	adds	r6, #1
    5fec:	1c38      	adds	r0, r7, #0
    5fee:	b271      	sxtb	r1, r6
    5ff0:	3020      	adds	r0, #32
    5ff2:	4c4e      	ldr	r4, [pc, #312]	; (612c <mqtt_connect_broker+0x298>)
    5ff4:	47a0      	blx	r4
    5ff6:	1c38      	adds	r0, r7, #0
    5ff8:	4c4e      	ldr	r4, [pc, #312]	; (6134 <mqtt_connect_broker+0x2a0>)
    5ffa:	3020      	adds	r0, #32
    5ffc:	2106      	movs	r1, #6
    5ffe:	47a0      	blx	r4
    6000:	1c38      	adds	r0, r7, #0
    6002:	4b4d      	ldr	r3, [pc, #308]	; (6138 <mqtt_connect_broker+0x2a4>)
    6004:	3020      	adds	r0, #32
    6006:	494d      	ldr	r1, [pc, #308]	; (613c <mqtt_connect_broker+0x2a8>)
    6008:	2206      	movs	r2, #6
    600a:	4798      	blx	r3
    600c:	1c38      	adds	r0, r7, #0
    600e:	3020      	adds	r0, #32
    6010:	2103      	movs	r1, #3
    6012:	4a46      	ldr	r2, [pc, #280]	; (612c <mqtt_connect_broker+0x298>)
    6014:	4790      	blx	r2
    6016:	69bb      	ldr	r3, [r7, #24]
    6018:	1c38      	adds	r0, r7, #0
    601a:	4a44      	ldr	r2, [pc, #272]	; (612c <mqtt_connect_broker+0x298>)
    601c:	b259      	sxtb	r1, r3
    601e:	3020      	adds	r0, #32
    6020:	4790      	blx	r2
    6022:	1c2b      	adds	r3, r5, #0
    6024:	3360      	adds	r3, #96	; 0x60
    6026:	2000      	movs	r0, #0
    6028:	5e19      	ldrsh	r1, [r3, r0]
    602a:	1c38      	adds	r0, r7, #0
    602c:	3020      	adds	r0, #32
    602e:	47a0      	blx	r4
    6030:	4e39      	ldr	r6, [pc, #228]	; (6118 <mqtt_connect_broker+0x284>)
    6032:	6e38      	ldr	r0, [r7, #96]	; 0x60
    6034:	47b0      	blx	r6
    6036:	b201      	sxth	r1, r0
    6038:	1c38      	adds	r0, r7, #0
    603a:	3020      	adds	r0, #32
    603c:	47a0      	blx	r4
    603e:	6e38      	ldr	r0, [r7, #96]	; 0x60
    6040:	47b0      	blx	r6
    6042:	1c02      	adds	r2, r0, #0
    6044:	1c38      	adds	r0, r7, #0
    6046:	3020      	adds	r0, #32
    6048:	6e39      	ldr	r1, [r7, #96]	; 0x60
    604a:	4b3b      	ldr	r3, [pc, #236]	; (6138 <mqtt_connect_broker+0x2a4>)
    604c:	4798      	blx	r3
    604e:	6e78      	ldr	r0, [r7, #100]	; 0x64
    6050:	2800      	cmp	r0, #0
    6052:	d015      	beq.n	6080 <mqtt_connect_broker+0x1ec>
    6054:	47b0      	blx	r6
    6056:	b201      	sxth	r1, r0
    6058:	1c38      	adds	r0, r7, #0
    605a:	3020      	adds	r0, #32
    605c:	47a0      	blx	r4
    605e:	6e78      	ldr	r0, [r7, #100]	; 0x64
    6060:	47b0      	blx	r6
    6062:	1c02      	adds	r2, r0, #0
    6064:	1c38      	adds	r0, r7, #0
    6066:	4c34      	ldr	r4, [pc, #208]	; (6138 <mqtt_connect_broker+0x2a4>)
    6068:	3020      	adds	r0, #32
    606a:	6e79      	ldr	r1, [r7, #100]	; 0x64
    606c:	47a0      	blx	r4
    606e:	6ebc      	ldr	r4, [r7, #104]	; 0x68
    6070:	2c00      	cmp	r4, #0
    6072:	d005      	beq.n	6080 <mqtt_connect_broker+0x1ec>
    6074:	1c38      	adds	r0, r7, #0
    6076:	1c21      	adds	r1, r4, #0
    6078:	3020      	adds	r0, #32
    607a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    607c:	4c2e      	ldr	r4, [pc, #184]	; (6138 <mqtt_connect_broker+0x2a4>)
    607e:	47a0      	blx	r4
    6080:	69fc      	ldr	r4, [r7, #28]
    6082:	2c00      	cmp	r4, #0
    6084:	d01f      	beq.n	60c6 <mqtt_connect_broker+0x232>
    6086:	4e24      	ldr	r6, [pc, #144]	; (6118 <mqtt_connect_broker+0x284>)
    6088:	1c20      	adds	r0, r4, #0
    608a:	47b0      	blx	r6
    608c:	b201      	sxth	r1, r0
    608e:	1c38      	adds	r0, r7, #0
    6090:	3020      	adds	r0, #32
    6092:	4c28      	ldr	r4, [pc, #160]	; (6134 <mqtt_connect_broker+0x2a0>)
    6094:	47a0      	blx	r4
    6096:	69f8      	ldr	r0, [r7, #28]
    6098:	47b0      	blx	r6
    609a:	1c02      	adds	r2, r0, #0
    609c:	1c38      	adds	r0, r7, #0
    609e:	3020      	adds	r0, #32
    60a0:	69f9      	ldr	r1, [r7, #28]
    60a2:	4c25      	ldr	r4, [pc, #148]	; (6138 <mqtt_connect_broker+0x2a4>)
    60a4:	47a0      	blx	r4
    60a6:	6978      	ldr	r0, [r7, #20]
    60a8:	2800      	cmp	r0, #0
    60aa:	d00c      	beq.n	60c6 <mqtt_connect_broker+0x232>
    60ac:	47b0      	blx	r6
    60ae:	b201      	sxth	r1, r0
    60b0:	1c38      	adds	r0, r7, #0
    60b2:	4a20      	ldr	r2, [pc, #128]	; (6134 <mqtt_connect_broker+0x2a0>)
    60b4:	3020      	adds	r0, #32
    60b6:	4790      	blx	r2
    60b8:	6978      	ldr	r0, [r7, #20]
    60ba:	47b0      	blx	r6
    60bc:	1c02      	adds	r2, r0, #0
    60be:	1c38      	adds	r0, r7, #0
    60c0:	3020      	adds	r0, #32
    60c2:	6979      	ldr	r1, [r7, #20]
    60c4:	47a0      	blx	r4
    60c6:	1c38      	adds	r0, r7, #0
    60c8:	1c2c      	adds	r4, r5, #0
    60ca:	3020      	adds	r0, #32
    60cc:	4b1c      	ldr	r3, [pc, #112]	; (6140 <mqtt_connect_broker+0x2ac>)
    60ce:	3443      	adds	r4, #67	; 0x43
    60d0:	4798      	blx	r3
    60d2:	7821      	ldrb	r1, [r4, #0]
    60d4:	0789      	lsls	r1, r1, #30
    60d6:	0fc9      	lsrs	r1, r1, #31
    60d8:	2901      	cmp	r1, #1
    60da:	d10b      	bne.n	60f4 <mqtt_connect_broker+0x260>
    60dc:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    60de:	2a00      	cmp	r2, #0
    60e0:	d108      	bne.n	60f4 <mqtt_connect_broker+0x260>
    60e2:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    60e4:	2b00      	cmp	r3, #0
    60e6:	d005      	beq.n	60f4 <mqtt_connect_broker+0x260>
    60e8:	2034      	movs	r0, #52	; 0x34
    60ea:	55c2      	strb	r2, [r0, r7]
    60ec:	1c3a      	adds	r2, r7, #0
    60ee:	1c28      	adds	r0, r5, #0
    60f0:	3234      	adds	r2, #52	; 0x34
    60f2:	4798      	blx	r3
    60f4:	7823      	ldrb	r3, [r4, #0]
    60f6:	2202      	movs	r2, #2
    60f8:	4313      	orrs	r3, r2
    60fa:	2208      	movs	r2, #8
    60fc:	4393      	bics	r3, r2
    60fe:	7023      	strb	r3, [r4, #0]
    6100:	2000      	movs	r0, #0
    6102:	e005      	b.n	6110 <mqtt_connect_broker+0x27c>
    6104:	2080      	movs	r0, #128	; 0x80
    6106:	e002      	b.n	610e <mqtt_connect_broker+0x27a>
    6108:	2078      	movs	r0, #120	; 0x78
    610a:	e000      	b.n	610e <mqtt_connect_broker+0x27a>
    610c:	200b      	movs	r0, #11
    610e:	4240      	negs	r0, r0
    6110:	46bd      	mov	sp, r7
    6112:	b013      	add	sp, #76	; 0x4c
    6114:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6116:	46c0      	nop			; (mov r8, r8)
    6118:	0000723d 	.word	0x0000723d
    611c:	0000128d 	.word	0x0000128d
    6120:	000055e5 	.word	0x000055e5
    6124:	00005c0d 	.word	0x00005c0d
    6128:	00005405 	.word	0x00005405
    612c:	00005431 	.word	0x00005431
    6130:	8000007f 	.word	0x8000007f
    6134:	00005459 	.word	0x00005459
    6138:	00005471 	.word	0x00005471
    613c:	00009434 	.word	0x00009434
    6140:	00005415 	.word	0x00005415

00006144 <mqtt_publish>:
    6144:	b5f0      	push	{r4, r5, r6, r7, lr}
    6146:	b093      	sub	sp, #76	; 0x4c
    6148:	af02      	add	r7, sp, #8
    614a:	60fb      	str	r3, [r7, #12]
    614c:	1c3b      	adds	r3, r7, #0
    614e:	3358      	adds	r3, #88	; 0x58
    6150:	781b      	ldrb	r3, [r3, #0]
    6152:	1c04      	adds	r4, r0, #0
    6154:	613b      	str	r3, [r7, #16]
    6156:	1c3b      	adds	r3, r7, #0
    6158:	335c      	adds	r3, #92	; 0x5c
    615a:	781b      	ldrb	r3, [r3, #0]
    615c:	6179      	str	r1, [r7, #20]
    615e:	60ba      	str	r2, [r7, #8]
    6160:	607b      	str	r3, [r7, #4]
    6162:	2800      	cmp	r0, #0
    6164:	d101      	bne.n	616a <mqtt_publish+0x26>
    6166:	2516      	movs	r5, #22
    6168:	e0a7      	b.n	62ba <mqtt_publish+0x176>
    616a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    616c:	466a      	mov	r2, sp
    616e:	3307      	adds	r3, #7
    6170:	08db      	lsrs	r3, r3, #3
    6172:	00db      	lsls	r3, r3, #3
    6174:	1ad2      	subs	r2, r2, r3
    6176:	697b      	ldr	r3, [r7, #20]
    6178:	4695      	mov	sp, r2
    617a:	ae02      	add	r6, sp, #8
    617c:	2b00      	cmp	r3, #0
    617e:	d0f2      	beq.n	6166 <mqtt_publish+0x22>
    6180:	693a      	ldr	r2, [r7, #16]
    6182:	2a02      	cmp	r2, #2
    6184:	d8ef      	bhi.n	6166 <mqtt_publish+0x22>
    6186:	1c05      	adds	r5, r0, #0
    6188:	3543      	adds	r5, #67	; 0x43
    618a:	782b      	ldrb	r3, [r5, #0]
    618c:	079a      	lsls	r2, r3, #30
    618e:	d400      	bmi.n	6192 <mqtt_publish+0x4e>
    6190:	e090      	b.n	62b4 <mqtt_publish+0x170>
    6192:	071a      	lsls	r2, r3, #28
    6194:	d40a      	bmi.n	61ac <mqtt_publish+0x68>
    6196:	4b4b      	ldr	r3, [pc, #300]	; (62c4 <mqtt_publish+0x180>)
    6198:	6978      	ldr	r0, [r7, #20]
    619a:	4798      	blx	r3
    619c:	68fd      	ldr	r5, [r7, #12]
    619e:	693b      	ldr	r3, [r7, #16]
    61a0:	3502      	adds	r5, #2
    61a2:	182d      	adds	r5, r5, r0
    61a4:	2b00      	cmp	r3, #0
    61a6:	d011      	beq.n	61cc <mqtt_publish+0x88>
    61a8:	3502      	adds	r5, #2
    61aa:	e00f      	b.n	61cc <mqtt_publish+0x88>
    61ac:	1c03      	adds	r3, r0, #0
    61ae:	3370      	adds	r3, #112	; 0x70
    61b0:	781b      	ldrb	r3, [r3, #0]
    61b2:	2b00      	cmp	r3, #0
    61b4:	d000      	beq.n	61b8 <mqtt_publish+0x74>
    61b6:	e07f      	b.n	62b8 <mqtt_publish+0x174>
    61b8:	782b      	ldrb	r3, [r5, #0]
    61ba:	071a      	lsls	r2, r3, #28
    61bc:	d5eb      	bpl.n	6196 <mqtt_publish+0x52>
    61be:	4b42      	ldr	r3, [pc, #264]	; (62c8 <mqtt_publish+0x184>)
    61c0:	2000      	movs	r0, #0
    61c2:	4798      	blx	r3
    61c4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    61c6:	4b41      	ldr	r3, [pc, #260]	; (62cc <mqtt_publish+0x188>)
    61c8:	4798      	blx	r3
    61ca:	e7f5      	b.n	61b8 <mqtt_publish+0x74>
    61cc:	1c23      	adds	r3, r4, #0
    61ce:	3343      	adds	r3, #67	; 0x43
    61d0:	781a      	ldrb	r2, [r3, #0]
    61d2:	2108      	movs	r1, #8
    61d4:	430a      	orrs	r2, r1
    61d6:	701a      	strb	r2, [r3, #0]
    61d8:	1c38      	adds	r0, r7, #0
    61da:	9400      	str	r4, [sp, #0]
    61dc:	1c31      	adds	r1, r6, #0
    61de:	302c      	adds	r0, #44	; 0x2c
    61e0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    61e2:	4b3b      	ldr	r3, [pc, #236]	; (62d0 <mqtt_publish+0x18c>)
    61e4:	4e3b      	ldr	r6, [pc, #236]	; (62d4 <mqtt_publish+0x190>)
    61e6:	47b0      	blx	r6
    61e8:	687b      	ldr	r3, [r7, #4]
    61ea:	2101      	movs	r1, #1
    61ec:	4019      	ands	r1, r3
    61ee:	2330      	movs	r3, #48	; 0x30
    61f0:	4319      	orrs	r1, r3
    61f2:	693b      	ldr	r3, [r7, #16]
    61f4:	1c38      	adds	r0, r7, #0
    61f6:	005a      	lsls	r2, r3, #1
    61f8:	2306      	movs	r3, #6
    61fa:	4013      	ands	r3, r2
    61fc:	4319      	orrs	r1, r3
    61fe:	302c      	adds	r0, #44	; 0x2c
    6200:	4b35      	ldr	r3, [pc, #212]	; (62d8 <mqtt_publish+0x194>)
    6202:	4798      	blx	r3
    6204:	4b34      	ldr	r3, [pc, #208]	; (62d8 <mqtt_publish+0x194>)
    6206:	2d80      	cmp	r5, #128	; 0x80
    6208:	dd08      	ble.n	621c <mqtt_publish+0xd8>
    620a:	2180      	movs	r1, #128	; 0x80
    620c:	4249      	negs	r1, r1
    620e:	4329      	orrs	r1, r5
    6210:	1c38      	adds	r0, r7, #0
    6212:	b249      	sxtb	r1, r1
    6214:	302c      	adds	r0, #44	; 0x2c
    6216:	4798      	blx	r3
    6218:	11ed      	asrs	r5, r5, #7
    621a:	e7f3      	b.n	6204 <mqtt_publish+0xc0>
    621c:	4a2f      	ldr	r2, [pc, #188]	; (62dc <mqtt_publish+0x198>)
    621e:	4015      	ands	r5, r2
    6220:	d504      	bpl.n	622c <mqtt_publish+0xe8>
    6222:	2280      	movs	r2, #128	; 0x80
    6224:	3d01      	subs	r5, #1
    6226:	4252      	negs	r2, r2
    6228:	4315      	orrs	r5, r2
    622a:	3501      	adds	r5, #1
    622c:	1c38      	adds	r0, r7, #0
    622e:	b269      	sxtb	r1, r5
    6230:	302c      	adds	r0, #44	; 0x2c
    6232:	4798      	blx	r3
    6234:	4e23      	ldr	r6, [pc, #140]	; (62c4 <mqtt_publish+0x180>)
    6236:	6978      	ldr	r0, [r7, #20]
    6238:	47b0      	blx	r6
    623a:	b201      	sxth	r1, r0
    623c:	1c38      	adds	r0, r7, #0
    623e:	302c      	adds	r0, #44	; 0x2c
    6240:	4d27      	ldr	r5, [pc, #156]	; (62e0 <mqtt_publish+0x19c>)
    6242:	47a8      	blx	r5
    6244:	6978      	ldr	r0, [r7, #20]
    6246:	47b0      	blx	r6
    6248:	1c02      	adds	r2, r0, #0
    624a:	1c38      	adds	r0, r7, #0
    624c:	302c      	adds	r0, #44	; 0x2c
    624e:	6979      	ldr	r1, [r7, #20]
    6250:	4e24      	ldr	r6, [pc, #144]	; (62e4 <mqtt_publish+0x1a0>)
    6252:	47b0      	blx	r6
    6254:	693a      	ldr	r2, [r7, #16]
    6256:	2a00      	cmp	r2, #0
    6258:	d006      	beq.n	6268 <mqtt_publish+0x124>
    625a:	8821      	ldrh	r1, [r4, #0]
    625c:	1c38      	adds	r0, r7, #0
    625e:	1c4b      	adds	r3, r1, #1
    6260:	8023      	strh	r3, [r4, #0]
    6262:	b209      	sxth	r1, r1
    6264:	302c      	adds	r0, #44	; 0x2c
    6266:	47a8      	blx	r5
    6268:	8823      	ldrh	r3, [r4, #0]
    626a:	2b00      	cmp	r3, #0
    626c:	d101      	bne.n	6272 <mqtt_publish+0x12e>
    626e:	2301      	movs	r3, #1
    6270:	8023      	strh	r3, [r4, #0]
    6272:	68bb      	ldr	r3, [r7, #8]
    6274:	2b00      	cmp	r3, #0
    6276:	d006      	beq.n	6286 <mqtt_publish+0x142>
    6278:	68fa      	ldr	r2, [r7, #12]
    627a:	2a00      	cmp	r2, #0
    627c:	d003      	beq.n	6286 <mqtt_publish+0x142>
    627e:	1c38      	adds	r0, r7, #0
    6280:	302c      	adds	r0, #44	; 0x2c
    6282:	1c19      	adds	r1, r3, #0
    6284:	47b0      	blx	r6
    6286:	1c38      	adds	r0, r7, #0
    6288:	4b17      	ldr	r3, [pc, #92]	; (62e8 <mqtt_publish+0x1a4>)
    628a:	302c      	adds	r0, #44	; 0x2c
    628c:	4798      	blx	r3
    628e:	1c23      	adds	r3, r4, #0
    6290:	3343      	adds	r3, #67	; 0x43
    6292:	781a      	ldrb	r2, [r3, #0]
    6294:	2108      	movs	r1, #8
    6296:	438a      	bics	r2, r1
    6298:	701a      	strb	r2, [r3, #0]
    629a:	693b      	ldr	r3, [r7, #16]
    629c:	2500      	movs	r5, #0
    629e:	42ab      	cmp	r3, r5
    62a0:	d10c      	bne.n	62bc <mqtt_publish+0x178>
    62a2:	6d63      	ldr	r3, [r4, #84]	; 0x54
    62a4:	42ab      	cmp	r3, r5
    62a6:	d009      	beq.n	62bc <mqtt_publish+0x178>
    62a8:	1c3a      	adds	r2, r7, #0
    62aa:	1c20      	adds	r0, r4, #0
    62ac:	2102      	movs	r1, #2
    62ae:	3218      	adds	r2, #24
    62b0:	4798      	blx	r3
    62b2:	e003      	b.n	62bc <mqtt_publish+0x178>
    62b4:	2580      	movs	r5, #128	; 0x80
    62b6:	e000      	b.n	62ba <mqtt_publish+0x176>
    62b8:	250b      	movs	r5, #11
    62ba:	426d      	negs	r5, r5
    62bc:	1c28      	adds	r0, r5, #0
    62be:	46bd      	mov	sp, r7
    62c0:	b011      	add	sp, #68	; 0x44
    62c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    62c4:	0000723d 	.word	0x0000723d
    62c8:	0000128d 	.word	0x0000128d
    62cc:	000055e5 	.word	0x000055e5
    62d0:	00005c0d 	.word	0x00005c0d
    62d4:	00005405 	.word	0x00005405
    62d8:	00005431 	.word	0x00005431
    62dc:	8000007f 	.word	0x8000007f
    62e0:	00005459 	.word	0x00005459
    62e4:	00005471 	.word	0x00005471
    62e8:	00005415 	.word	0x00005415

000062ec <mqtt_subscribe>:
    62ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    62ee:	b08d      	sub	sp, #52	; 0x34
    62f0:	af02      	add	r7, sp, #8
    62f2:	1c04      	adds	r4, r0, #0
    62f4:	60b9      	str	r1, [r7, #8]
    62f6:	607a      	str	r2, [r7, #4]
    62f8:	d101      	bne.n	62fe <mqtt_subscribe+0x12>
    62fa:	2016      	movs	r0, #22
    62fc:	e086      	b.n	640c <mqtt_subscribe+0x120>
    62fe:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    6300:	466a      	mov	r2, sp
    6302:	3307      	adds	r3, #7
    6304:	08db      	lsrs	r3, r3, #3
    6306:	00db      	lsls	r3, r3, #3
    6308:	1ad2      	subs	r2, r2, r3
    630a:	4695      	mov	sp, r2
    630c:	ad02      	add	r5, sp, #8
    630e:	603d      	str	r5, [r7, #0]
    6310:	68bd      	ldr	r5, [r7, #8]
    6312:	2d00      	cmp	r5, #0
    6314:	d0f1      	beq.n	62fa <mqtt_subscribe+0xe>
    6316:	687d      	ldr	r5, [r7, #4]
    6318:	2d02      	cmp	r5, #2
    631a:	d8ee      	bhi.n	62fa <mqtt_subscribe+0xe>
    631c:	1c05      	adds	r5, r0, #0
    631e:	3543      	adds	r5, #67	; 0x43
    6320:	782b      	ldrb	r3, [r5, #0]
    6322:	079a      	lsls	r2, r3, #30
    6324:	d56f      	bpl.n	6406 <mqtt_subscribe+0x11a>
    6326:	071a      	lsls	r2, r3, #28
    6328:	d41a      	bmi.n	6360 <mqtt_subscribe+0x74>
    632a:	68b8      	ldr	r0, [r7, #8]
    632c:	4d39      	ldr	r5, [pc, #228]	; (6414 <mqtt_subscribe+0x128>)
    632e:	47a8      	blx	r5
    6330:	1c25      	adds	r5, r4, #0
    6332:	3543      	adds	r5, #67	; 0x43
    6334:	782b      	ldrb	r3, [r5, #0]
    6336:	2208      	movs	r2, #8
    6338:	4313      	orrs	r3, r2
    633a:	702b      	strb	r3, [r5, #0]
    633c:	60fd      	str	r5, [r7, #12]
    633e:	1d46      	adds	r6, r0, #5
    6340:	9400      	str	r4, [sp, #0]
    6342:	1c38      	adds	r0, r7, #0
    6344:	3014      	adds	r0, #20
    6346:	6839      	ldr	r1, [r7, #0]
    6348:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    634a:	4b33      	ldr	r3, [pc, #204]	; (6418 <mqtt_subscribe+0x12c>)
    634c:	4d33      	ldr	r5, [pc, #204]	; (641c <mqtt_subscribe+0x130>)
    634e:	47a8      	blx	r5
    6350:	1c38      	adds	r0, r7, #0
    6352:	217e      	movs	r1, #126	; 0x7e
    6354:	3014      	adds	r0, #20
    6356:	4249      	negs	r1, r1
    6358:	4b31      	ldr	r3, [pc, #196]	; (6420 <mqtt_subscribe+0x134>)
    635a:	4798      	blx	r3
    635c:	4d2d      	ldr	r5, [pc, #180]	; (6414 <mqtt_subscribe+0x128>)
    635e:	e00e      	b.n	637e <mqtt_subscribe+0x92>
    6360:	1c03      	adds	r3, r0, #0
    6362:	3370      	adds	r3, #112	; 0x70
    6364:	781b      	ldrb	r3, [r3, #0]
    6366:	2b00      	cmp	r3, #0
    6368:	d14f      	bne.n	640a <mqtt_subscribe+0x11e>
    636a:	782b      	ldrb	r3, [r5, #0]
    636c:	071a      	lsls	r2, r3, #28
    636e:	d5dc      	bpl.n	632a <mqtt_subscribe+0x3e>
    6370:	4b2c      	ldr	r3, [pc, #176]	; (6424 <mqtt_subscribe+0x138>)
    6372:	2000      	movs	r0, #0
    6374:	4798      	blx	r3
    6376:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    6378:	4b2b      	ldr	r3, [pc, #172]	; (6428 <mqtt_subscribe+0x13c>)
    637a:	4798      	blx	r3
    637c:	e7f5      	b.n	636a <mqtt_subscribe+0x7e>
    637e:	4b28      	ldr	r3, [pc, #160]	; (6420 <mqtt_subscribe+0x134>)
    6380:	2e80      	cmp	r6, #128	; 0x80
    6382:	dd08      	ble.n	6396 <mqtt_subscribe+0xaa>
    6384:	2180      	movs	r1, #128	; 0x80
    6386:	4249      	negs	r1, r1
    6388:	4331      	orrs	r1, r6
    638a:	1c38      	adds	r0, r7, #0
    638c:	b249      	sxtb	r1, r1
    638e:	3014      	adds	r0, #20
    6390:	4798      	blx	r3
    6392:	11f6      	asrs	r6, r6, #7
    6394:	e7f3      	b.n	637e <mqtt_subscribe+0x92>
    6396:	4925      	ldr	r1, [pc, #148]	; (642c <mqtt_subscribe+0x140>)
    6398:	4031      	ands	r1, r6
    639a:	d504      	bpl.n	63a6 <mqtt_subscribe+0xba>
    639c:	2280      	movs	r2, #128	; 0x80
    639e:	3901      	subs	r1, #1
    63a0:	4252      	negs	r2, r2
    63a2:	4311      	orrs	r1, r2
    63a4:	3101      	adds	r1, #1
    63a6:	1c38      	adds	r0, r7, #0
    63a8:	b249      	sxtb	r1, r1
    63aa:	3014      	adds	r0, #20
    63ac:	4798      	blx	r3
    63ae:	8821      	ldrh	r1, [r4, #0]
    63b0:	1c38      	adds	r0, r7, #0
    63b2:	1c4b      	adds	r3, r1, #1
    63b4:	8023      	strh	r3, [r4, #0]
    63b6:	b209      	sxth	r1, r1
    63b8:	3014      	adds	r0, #20
    63ba:	4e1d      	ldr	r6, [pc, #116]	; (6430 <mqtt_subscribe+0x144>)
    63bc:	47b0      	blx	r6
    63be:	8823      	ldrh	r3, [r4, #0]
    63c0:	2b00      	cmp	r3, #0
    63c2:	d101      	bne.n	63c8 <mqtt_subscribe+0xdc>
    63c4:	2301      	movs	r3, #1
    63c6:	8023      	strh	r3, [r4, #0]
    63c8:	68b8      	ldr	r0, [r7, #8]
    63ca:	47a8      	blx	r5
    63cc:	b201      	sxth	r1, r0
    63ce:	1c38      	adds	r0, r7, #0
    63d0:	3014      	adds	r0, #20
    63d2:	47b0      	blx	r6
    63d4:	68b8      	ldr	r0, [r7, #8]
    63d6:	47a8      	blx	r5
    63d8:	1c02      	adds	r2, r0, #0
    63da:	1c38      	adds	r0, r7, #0
    63dc:	3014      	adds	r0, #20
    63de:	68b9      	ldr	r1, [r7, #8]
    63e0:	4b14      	ldr	r3, [pc, #80]	; (6434 <mqtt_subscribe+0x148>)
    63e2:	4798      	blx	r3
    63e4:	687d      	ldr	r5, [r7, #4]
    63e6:	1c38      	adds	r0, r7, #0
    63e8:	b269      	sxtb	r1, r5
    63ea:	3014      	adds	r0, #20
    63ec:	4b0c      	ldr	r3, [pc, #48]	; (6420 <mqtt_subscribe+0x134>)
    63ee:	4798      	blx	r3
    63f0:	1c38      	adds	r0, r7, #0
    63f2:	3014      	adds	r0, #20
    63f4:	4b10      	ldr	r3, [pc, #64]	; (6438 <mqtt_subscribe+0x14c>)
    63f6:	4798      	blx	r3
    63f8:	68fd      	ldr	r5, [r7, #12]
    63fa:	2208      	movs	r2, #8
    63fc:	782b      	ldrb	r3, [r5, #0]
    63fe:	2000      	movs	r0, #0
    6400:	4393      	bics	r3, r2
    6402:	702b      	strb	r3, [r5, #0]
    6404:	e003      	b.n	640e <mqtt_subscribe+0x122>
    6406:	2080      	movs	r0, #128	; 0x80
    6408:	e000      	b.n	640c <mqtt_subscribe+0x120>
    640a:	200b      	movs	r0, #11
    640c:	4240      	negs	r0, r0
    640e:	46bd      	mov	sp, r7
    6410:	b00b      	add	sp, #44	; 0x2c
    6412:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6414:	0000723d 	.word	0x0000723d
    6418:	00005c0d 	.word	0x00005c0d
    641c:	00005405 	.word	0x00005405
    6420:	00005431 	.word	0x00005431
    6424:	0000128d 	.word	0x0000128d
    6428:	000055e5 	.word	0x000055e5
    642c:	8000007f 	.word	0x8000007f
    6430:	00005459 	.word	0x00005459
    6434:	00005471 	.word	0x00005471
    6438:	00005415 	.word	0x00005415

0000643c <_mqtt_ping>:
    643c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    643e:	23c0      	movs	r3, #192	; 0xc0
    6440:	a901      	add	r1, sp, #4
    6442:	2500      	movs	r5, #0
    6444:	700b      	strb	r3, [r1, #0]
    6446:	704d      	strb	r5, [r1, #1]
    6448:	42a8      	cmp	r0, r5
    644a:	d019      	beq.n	6480 <_mqtt_ping+0x44>
    644c:	1c04      	adds	r4, r0, #0
    644e:	3443      	adds	r4, #67	; 0x43
    6450:	7823      	ldrb	r3, [r4, #0]
    6452:	079a      	lsls	r2, r3, #30
    6454:	d516      	bpl.n	6484 <_mqtt_ping+0x48>
    6456:	071a      	lsls	r2, r3, #28
    6458:	d416      	bmi.n	6488 <_mqtt_ping+0x4c>
    645a:	2608      	movs	r6, #8
    645c:	4333      	orrs	r3, r6
    645e:	7023      	strb	r3, [r4, #0]
    6460:	7880      	ldrb	r0, [r0, #2]
    6462:	1c2b      	adds	r3, r5, #0
    6464:	b240      	sxtb	r0, r0
    6466:	2202      	movs	r2, #2
    6468:	4f09      	ldr	r7, [pc, #36]	; (6490 <_mqtt_ping+0x54>)
    646a:	47b8      	blx	r7
    646c:	1c2b      	adds	r3, r5, #0
    646e:	42a8      	cmp	r0, r5
    6470:	da0c      	bge.n	648c <_mqtt_ping+0x50>
    6472:	7823      	ldrb	r3, [r4, #0]
    6474:	43b3      	bics	r3, r6
    6476:	7023      	strb	r3, [r4, #0]
    6478:	4b06      	ldr	r3, [pc, #24]	; (6494 <_mqtt_ping+0x58>)
    647a:	4798      	blx	r3
    647c:	1c03      	adds	r3, r0, #0
    647e:	e005      	b.n	648c <_mqtt_ping+0x50>
    6480:	2316      	movs	r3, #22
    6482:	e002      	b.n	648a <_mqtt_ping+0x4e>
    6484:	2380      	movs	r3, #128	; 0x80
    6486:	e000      	b.n	648a <_mqtt_ping+0x4e>
    6488:	230b      	movs	r3, #11
    648a:	425b      	negs	r3, r3
    648c:	1c18      	adds	r0, r3, #0
    648e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6490:	00002ff1 	.word	0x00002ff1
    6494:	00005bbd 	.word	0x00005bbd

00006498 <mqtt_timer_callback>:
    6498:	b570      	push	{r4, r5, r6, lr}
    649a:	1c05      	adds	r5, r0, #0
    649c:	b086      	sub	sp, #24
    649e:	1c0e      	adds	r6, r1, #0
    64a0:	1c14      	adds	r4, r2, #0
    64a2:	2800      	cmp	r0, #0
    64a4:	d012      	beq.n	64cc <mqtt_timer_callback+0x34>
    64a6:	2a00      	cmp	r2, #0
    64a8:	d010      	beq.n	64cc <mqtt_timer_callback+0x34>
    64aa:	1c10      	adds	r0, r2, #0
    64ac:	4b08      	ldr	r3, [pc, #32]	; (64d0 <mqtt_timer_callback+0x38>)
    64ae:	4798      	blx	r3
    64b0:	2800      	cmp	r0, #0
    64b2:	da04      	bge.n	64be <mqtt_timer_callback+0x26>
    64b4:	1c28      	adds	r0, r5, #0
    64b6:	1c31      	adds	r1, r6, #0
    64b8:	2200      	movs	r2, #0
    64ba:	4b06      	ldr	r3, [pc, #24]	; (64d4 <mqtt_timer_callback+0x3c>)
    64bc:	e005      	b.n	64ca <mqtt_timer_callback+0x32>
    64be:	6d63      	ldr	r3, [r4, #84]	; 0x54
    64c0:	2b00      	cmp	r3, #0
    64c2:	d003      	beq.n	64cc <mqtt_timer_callback+0x34>
    64c4:	1c20      	adds	r0, r4, #0
    64c6:	2107      	movs	r1, #7
    64c8:	aa01      	add	r2, sp, #4
    64ca:	4798      	blx	r3
    64cc:	b006      	add	sp, #24
    64ce:	bd70      	pop	{r4, r5, r6, pc}
    64d0:	0000643d 	.word	0x0000643d
    64d4:	000055a9 	.word	0x000055a9

000064d8 <_mqtt_puback>:
    64d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    64da:	2302      	movs	r3, #2
    64dc:	ac01      	add	r4, sp, #4
    64de:	2700      	movs	r7, #0
    64e0:	7063      	strb	r3, [r4, #1]
    64e2:	42b8      	cmp	r0, r7
    64e4:	d01e      	beq.n	6524 <_mqtt_puback+0x4c>
    64e6:	1c05      	adds	r5, r0, #0
    64e8:	3543      	adds	r5, #67	; 0x43
    64ea:	782b      	ldrb	r3, [r5, #0]
    64ec:	079e      	lsls	r6, r3, #30
    64ee:	d51b      	bpl.n	6528 <_mqtt_puback+0x50>
    64f0:	071e      	lsls	r6, r3, #28
    64f2:	d41b      	bmi.n	652c <_mqtt_puback+0x54>
    64f4:	2608      	movs	r6, #8
    64f6:	4333      	orrs	r3, r6
    64f8:	702b      	strb	r3, [r5, #0]
    64fa:	7880      	ldrb	r0, [r0, #2]
    64fc:	7021      	strb	r1, [r4, #0]
    64fe:	0a11      	lsrs	r1, r2, #8
    6500:	70a1      	strb	r1, [r4, #2]
    6502:	70e2      	strb	r2, [r4, #3]
    6504:	1c21      	adds	r1, r4, #0
    6506:	1c3b      	adds	r3, r7, #0
    6508:	b240      	sxtb	r0, r0
    650a:	2204      	movs	r2, #4
    650c:	4c09      	ldr	r4, [pc, #36]	; (6534 <_mqtt_puback+0x5c>)
    650e:	47a0      	blx	r4
    6510:	1c3b      	adds	r3, r7, #0
    6512:	42b8      	cmp	r0, r7
    6514:	da0c      	bge.n	6530 <_mqtt_puback+0x58>
    6516:	782b      	ldrb	r3, [r5, #0]
    6518:	43b3      	bics	r3, r6
    651a:	702b      	strb	r3, [r5, #0]
    651c:	4b06      	ldr	r3, [pc, #24]	; (6538 <_mqtt_puback+0x60>)
    651e:	4798      	blx	r3
    6520:	1c03      	adds	r3, r0, #0
    6522:	e005      	b.n	6530 <_mqtt_puback+0x58>
    6524:	2316      	movs	r3, #22
    6526:	e002      	b.n	652e <_mqtt_puback+0x56>
    6528:	2380      	movs	r3, #128	; 0x80
    652a:	e000      	b.n	652e <_mqtt_puback+0x56>
    652c:	230b      	movs	r3, #11
    652e:	425b      	negs	r3, r3
    6530:	1c18      	adds	r0, r3, #0
    6532:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6534:	00002ff1 	.word	0x00002ff1
    6538:	00005bbd 	.word	0x00005bbd

0000653c <mqtt_clear_conn>:
    653c:	b530      	push	{r4, r5, lr}
    653e:	1c04      	adds	r4, r0, #0
    6540:	b087      	sub	sp, #28
    6542:	2800      	cmp	r0, #0
    6544:	d01c      	beq.n	6580 <mqtt_clear_conn+0x44>
    6546:	2002      	movs	r0, #2
    6548:	4b0e      	ldr	r3, [pc, #56]	; (6584 <mqtt_clear_conn+0x48>)
    654a:	5620      	ldrsb	r0, [r4, r0]
    654c:	4798      	blx	r3
    654e:	1c23      	adds	r3, r4, #0
    6550:	3343      	adds	r3, #67	; 0x43
    6552:	781a      	ldrb	r2, [r3, #0]
    6554:	21fc      	movs	r1, #252	; 0xfc
    6556:	0795      	lsls	r5, r2, #30
    6558:	400a      	ands	r2, r1
    655a:	701a      	strb	r2, [r3, #0]
    655c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    655e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    6560:	9301      	str	r3, [sp, #4]
    6562:	2300      	movs	r3, #0
    6564:	64e3      	str	r3, [r4, #76]	; 0x4c
    6566:	6d21      	ldr	r1, [r4, #80]	; 0x50
    6568:	4b07      	ldr	r3, [pc, #28]	; (6588 <mqtt_clear_conn+0x4c>)
    656a:	4798      	blx	r3
    656c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    656e:	0fed      	lsrs	r5, r5, #31
    6570:	2b00      	cmp	r3, #0
    6572:	d005      	beq.n	6580 <mqtt_clear_conn+0x44>
    6574:	2d00      	cmp	r5, #0
    6576:	d003      	beq.n	6580 <mqtt_clear_conn+0x44>
    6578:	1c20      	adds	r0, r4, #0
    657a:	2105      	movs	r1, #5
    657c:	aa01      	add	r2, sp, #4
    657e:	4798      	blx	r3
    6580:	b007      	add	sp, #28
    6582:	bd30      	pop	{r4, r5, pc}
    6584:	0000311d 	.word	0x0000311d
    6588:	000055d5 	.word	0x000055d5

0000658c <mqtt_disconnect>:
    658c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    658e:	23e0      	movs	r3, #224	; 0xe0
    6590:	ae01      	add	r6, sp, #4
    6592:	2700      	movs	r7, #0
    6594:	1c05      	adds	r5, r0, #0
    6596:	7033      	strb	r3, [r6, #0]
    6598:	7077      	strb	r7, [r6, #1]
    659a:	42b8      	cmp	r0, r7
    659c:	d036      	beq.n	660c <mqtt_disconnect+0x80>
    659e:	1c04      	adds	r4, r0, #0
    65a0:	3443      	adds	r4, #67	; 0x43
    65a2:	7823      	ldrb	r3, [r4, #0]
    65a4:	079a      	lsls	r2, r3, #30
    65a6:	d533      	bpl.n	6610 <mqtt_disconnect+0x84>
    65a8:	42b9      	cmp	r1, r7
    65aa:	d12b      	bne.n	6604 <mqtt_disconnect+0x78>
    65ac:	071a      	lsls	r2, r3, #28
    65ae:	d414      	bmi.n	65da <mqtt_disconnect+0x4e>
    65b0:	7823      	ldrb	r3, [r4, #0]
    65b2:	2210      	movs	r2, #16
    65b4:	4313      	orrs	r3, r2
    65b6:	2708      	movs	r7, #8
    65b8:	433b      	orrs	r3, r7
    65ba:	7023      	strb	r3, [r4, #0]
    65bc:	2002      	movs	r0, #2
    65be:	5628      	ldrsb	r0, [r5, r0]
    65c0:	1c31      	adds	r1, r6, #0
    65c2:	2202      	movs	r2, #2
    65c4:	2300      	movs	r3, #0
    65c6:	4d15      	ldr	r5, [pc, #84]	; (661c <mqtt_disconnect+0x90>)
    65c8:	47a8      	blx	r5
    65ca:	2800      	cmp	r0, #0
    65cc:	da14      	bge.n	65f8 <mqtt_disconnect+0x6c>
    65ce:	7823      	ldrb	r3, [r4, #0]
    65d0:	43bb      	bics	r3, r7
    65d2:	7023      	strb	r3, [r4, #0]
    65d4:	4b12      	ldr	r3, [pc, #72]	; (6620 <mqtt_disconnect+0x94>)
    65d6:	4798      	blx	r3
    65d8:	e01e      	b.n	6618 <mqtt_disconnect+0x8c>
    65da:	1c03      	adds	r3, r0, #0
    65dc:	3370      	adds	r3, #112	; 0x70
    65de:	781b      	ldrb	r3, [r3, #0]
    65e0:	2b00      	cmp	r3, #0
    65e2:	d117      	bne.n	6614 <mqtt_disconnect+0x88>
    65e4:	7823      	ldrb	r3, [r4, #0]
    65e6:	071a      	lsls	r2, r3, #28
    65e8:	d5e2      	bpl.n	65b0 <mqtt_disconnect+0x24>
    65ea:	4b0e      	ldr	r3, [pc, #56]	; (6624 <mqtt_disconnect+0x98>)
    65ec:	2000      	movs	r0, #0
    65ee:	4798      	blx	r3
    65f0:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    65f2:	4b0d      	ldr	r3, [pc, #52]	; (6628 <mqtt_disconnect+0x9c>)
    65f4:	4798      	blx	r3
    65f6:	e7f5      	b.n	65e4 <mqtt_disconnect+0x58>
    65f8:	7823      	ldrb	r3, [r4, #0]
    65fa:	2202      	movs	r2, #2
    65fc:	4393      	bics	r3, r2
    65fe:	7023      	strb	r3, [r4, #0]
    6600:	2000      	movs	r0, #0
    6602:	e009      	b.n	6618 <mqtt_disconnect+0x8c>
    6604:	4b09      	ldr	r3, [pc, #36]	; (662c <mqtt_disconnect+0xa0>)
    6606:	4798      	blx	r3
    6608:	1c38      	adds	r0, r7, #0
    660a:	e005      	b.n	6618 <mqtt_disconnect+0x8c>
    660c:	2016      	movs	r0, #22
    660e:	e002      	b.n	6616 <mqtt_disconnect+0x8a>
    6610:	2080      	movs	r0, #128	; 0x80
    6612:	e000      	b.n	6616 <mqtt_disconnect+0x8a>
    6614:	200b      	movs	r0, #11
    6616:	4240      	negs	r0, r0
    6618:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    661a:	46c0      	nop			; (mov r8, r8)
    661c:	00002ff1 	.word	0x00002ff1
    6620:	00005bbd 	.word	0x00005bbd
    6624:	0000128d 	.word	0x0000128d
    6628:	000055e5 	.word	0x000055e5
    662c:	0000653d 	.word	0x0000653d

00006630 <_mqtt_recv_handler>:
    6630:	b5f0      	push	{r4, r5, r6, r7, lr}
    6632:	1c04      	adds	r4, r0, #0
    6634:	6e40      	ldr	r0, [r0, #100]	; 0x64
    6636:	230f      	movs	r3, #15
    6638:	7802      	ldrb	r2, [r0, #0]
    663a:	b087      	sub	sp, #28
    663c:	1c15      	adds	r5, r2, #0
    663e:	439d      	bics	r5, r3
    6640:	2d50      	cmp	r5, #80	; 0x50
    6642:	d100      	bne.n	6646 <_mqtt_recv_handler+0x16>
    6644:	e098      	b.n	6778 <_mqtt_recv_handler+0x148>
    6646:	d808      	bhi.n	665a <_mqtt_recv_handler+0x2a>
    6648:	2d30      	cmp	r5, #48	; 0x30
    664a:	d03f      	beq.n	66cc <_mqtt_recv_handler+0x9c>
    664c:	2d40      	cmp	r5, #64	; 0x40
    664e:	d100      	bne.n	6652 <_mqtt_recv_handler+0x22>
    6650:	e0b3      	b.n	67ba <_mqtt_recv_handler+0x18a>
    6652:	2d20      	cmp	r5, #32
    6654:	d000      	beq.n	6658 <_mqtt_recv_handler+0x28>
    6656:	e0c3      	b.n	67e0 <_mqtt_recv_handler+0x1b0>
    6658:	e00e      	b.n	6678 <_mqtt_recv_handler+0x48>
    665a:	2d70      	cmp	r5, #112	; 0x70
    665c:	d100      	bne.n	6660 <_mqtt_recv_handler+0x30>
    665e:	e0ac      	b.n	67ba <_mqtt_recv_handler+0x18a>
    6660:	d803      	bhi.n	666a <_mqtt_recv_handler+0x3a>
    6662:	2d60      	cmp	r5, #96	; 0x60
    6664:	d100      	bne.n	6668 <_mqtt_recv_handler+0x38>
    6666:	e096      	b.n	6796 <_mqtt_recv_handler+0x166>
    6668:	e0ba      	b.n	67e0 <_mqtt_recv_handler+0x1b0>
    666a:	2d90      	cmp	r5, #144	; 0x90
    666c:	d100      	bne.n	6670 <_mqtt_recv_handler+0x40>
    666e:	e0aa      	b.n	67c6 <_mqtt_recv_handler+0x196>
    6670:	2db0      	cmp	r5, #176	; 0xb0
    6672:	d100      	bne.n	6676 <_mqtt_recv_handler+0x46>
    6674:	e0ad      	b.n	67d2 <_mqtt_recv_handler+0x1a2>
    6676:	e0b3      	b.n	67e0 <_mqtt_recv_handler+0x1b0>
    6678:	aa01      	add	r2, sp, #4
    667a:	2303      	movs	r3, #3
    667c:	2901      	cmp	r1, #1
    667e:	d900      	bls.n	6682 <_mqtt_recv_handler+0x52>
    6680:	78c3      	ldrb	r3, [r0, #3]
    6682:	7013      	strb	r3, [r2, #0]
    6684:	7813      	ldrb	r3, [r2, #0]
    6686:	2b00      	cmp	r3, #0
    6688:	d00d      	beq.n	66a6 <_mqtt_recv_handler+0x76>
    668a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    668c:	2b00      	cmp	r3, #0
    668e:	d002      	beq.n	6696 <_mqtt_recv_handler+0x66>
    6690:	1c20      	adds	r0, r4, #0
    6692:	2101      	movs	r1, #1
    6694:	4798      	blx	r3
    6696:	236f      	movs	r3, #111	; 0x6f
    6698:	425b      	negs	r3, r3
    669a:	64e3      	str	r3, [r4, #76]	; 0x4c
    669c:	1c20      	adds	r0, r4, #0
    669e:	2100      	movs	r1, #0
    66a0:	4b50      	ldr	r3, [pc, #320]	; (67e4 <_mqtt_recv_handler+0x1b4>)
    66a2:	4798      	blx	r3
    66a4:	e09c      	b.n	67e0 <_mqtt_recv_handler+0x1b0>
    66a6:	1c23      	adds	r3, r4, #0
    66a8:	3343      	adds	r3, #67	; 0x43
    66aa:	7819      	ldrb	r1, [r3, #0]
    66ac:	0789      	lsls	r1, r1, #30
    66ae:	0fc9      	lsrs	r1, r1, #31
    66b0:	d105      	bne.n	66be <_mqtt_recv_handler+0x8e>
    66b2:	781a      	ldrb	r2, [r3, #0]
    66b4:	64e1      	str	r1, [r4, #76]	; 0x4c
    66b6:	2102      	movs	r1, #2
    66b8:	430a      	orrs	r2, r1
    66ba:	701a      	strb	r2, [r3, #0]
    66bc:	e090      	b.n	67e0 <_mqtt_recv_handler+0x1b0>
    66be:	6d63      	ldr	r3, [r4, #84]	; 0x54
    66c0:	2b00      	cmp	r3, #0
    66c2:	d100      	bne.n	66c6 <_mqtt_recv_handler+0x96>
    66c4:	e08c      	b.n	67e0 <_mqtt_recv_handler+0x1b0>
    66c6:	1c20      	adds	r0, r4, #0
    66c8:	2101      	movs	r1, #1
    66ca:	e088      	b.n	67de <_mqtt_recv_handler+0x1ae>
    66cc:	ad01      	add	r5, sp, #4
    66ce:	0713      	lsls	r3, r2, #28
    66d0:	7c2a      	ldrb	r2, [r5, #16]
    66d2:	0fdb      	lsrs	r3, r3, #31
    66d4:	2604      	movs	r6, #4
    66d6:	009b      	lsls	r3, r3, #2
    66d8:	43b2      	bics	r2, r6
    66da:	431a      	orrs	r2, r3
    66dc:	742a      	strb	r2, [r5, #16]
    66de:	7807      	ldrb	r7, [r0, #0]
    66e0:	2303      	movs	r3, #3
    66e2:	b2d2      	uxtb	r2, r2
    66e4:	087f      	lsrs	r7, r7, #1
    66e6:	439a      	bics	r2, r3
    66e8:	401f      	ands	r7, r3
    66ea:	1c13      	adds	r3, r2, #0
    66ec:	433b      	orrs	r3, r7
    66ee:	742b      	strb	r3, [r5, #16]
    66f0:	1c43      	adds	r3, r0, #1
    66f2:	7818      	ldrb	r0, [r3, #0]
    66f4:	1c5a      	adds	r2, r3, #1
    66f6:	287f      	cmp	r0, #127	; 0x7f
    66f8:	d901      	bls.n	66fe <_mqtt_recv_handler+0xce>
    66fa:	1c13      	adds	r3, r2, #0
    66fc:	e7f9      	b.n	66f2 <_mqtt_recv_handler+0xc2>
    66fe:	7858      	ldrb	r0, [r3, #1]
    6700:	789e      	ldrb	r6, [r3, #2]
    6702:	0200      	lsls	r0, r0, #8
    6704:	4330      	orrs	r0, r6
    6706:	3303      	adds	r3, #3
    6708:	2600      	movs	r6, #0
    670a:	6068      	str	r0, [r5, #4]
    670c:	9301      	str	r3, [sp, #4]
    670e:	1818      	adds	r0, r3, r0
    6710:	42b7      	cmp	r7, r6
    6712:	d004      	beq.n	671e <_mqtt_recv_handler+0xee>
    6714:	7806      	ldrb	r6, [r0, #0]
    6716:	7843      	ldrb	r3, [r0, #1]
    6718:	0236      	lsls	r6, r6, #8
    671a:	431e      	orrs	r6, r3
    671c:	3002      	adds	r0, #2
    671e:	1851      	adds	r1, r2, r1
    6720:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6722:	60a8      	str	r0, [r5, #8]
    6724:	1a08      	subs	r0, r1, r0
    6726:	60e8      	str	r0, [r5, #12]
    6728:	2b00      	cmp	r3, #0
    672a:	d003      	beq.n	6734 <_mqtt_recv_handler+0x104>
    672c:	1c20      	adds	r0, r4, #0
    672e:	2106      	movs	r1, #6
    6730:	1c2a      	adds	r2, r5, #0
    6732:	4798      	blx	r3
    6734:	7c2b      	ldrb	r3, [r5, #16]
    6736:	079b      	lsls	r3, r3, #30
    6738:	0f9b      	lsrs	r3, r3, #30
    673a:	2b01      	cmp	r3, #1
    673c:	d10b      	bne.n	6756 <_mqtt_recv_handler+0x126>
    673e:	b2b6      	uxth	r6, r6
    6740:	1c20      	adds	r0, r4, #0
    6742:	2140      	movs	r1, #64	; 0x40
    6744:	1c32      	adds	r2, r6, #0
    6746:	4b28      	ldr	r3, [pc, #160]	; (67e8 <_mqtt_recv_handler+0x1b8>)
    6748:	4798      	blx	r3
    674a:	2800      	cmp	r0, #0
    674c:	d048      	beq.n	67e0 <_mqtt_recv_handler+0x1b0>
    674e:	1c23      	adds	r3, r4, #0
    6750:	3348      	adds	r3, #72	; 0x48
    6752:	2240      	movs	r2, #64	; 0x40
    6754:	e00c      	b.n	6770 <_mqtt_recv_handler+0x140>
    6756:	2b02      	cmp	r3, #2
    6758:	d142      	bne.n	67e0 <_mqtt_recv_handler+0x1b0>
    675a:	b2b6      	uxth	r6, r6
    675c:	1c20      	adds	r0, r4, #0
    675e:	2150      	movs	r1, #80	; 0x50
    6760:	1c32      	adds	r2, r6, #0
    6762:	4b21      	ldr	r3, [pc, #132]	; (67e8 <_mqtt_recv_handler+0x1b8>)
    6764:	4798      	blx	r3
    6766:	2800      	cmp	r0, #0
    6768:	d03a      	beq.n	67e0 <_mqtt_recv_handler+0x1b0>
    676a:	1c23      	adds	r3, r4, #0
    676c:	3348      	adds	r3, #72	; 0x48
    676e:	2250      	movs	r2, #80	; 0x50
    6770:	344a      	adds	r4, #74	; 0x4a
    6772:	701a      	strb	r2, [r3, #0]
    6774:	8026      	strh	r6, [r4, #0]
    6776:	e033      	b.n	67e0 <_mqtt_recv_handler+0x1b0>
    6778:	7885      	ldrb	r5, [r0, #2]
    677a:	78c3      	ldrb	r3, [r0, #3]
    677c:	022d      	lsls	r5, r5, #8
    677e:	431d      	orrs	r5, r3
    6780:	1c20      	adds	r0, r4, #0
    6782:	2162      	movs	r1, #98	; 0x62
    6784:	1c2a      	adds	r2, r5, #0
    6786:	4b18      	ldr	r3, [pc, #96]	; (67e8 <_mqtt_recv_handler+0x1b8>)
    6788:	4798      	blx	r3
    678a:	2800      	cmp	r0, #0
    678c:	d028      	beq.n	67e0 <_mqtt_recv_handler+0x1b0>
    678e:	1c23      	adds	r3, r4, #0
    6790:	3348      	adds	r3, #72	; 0x48
    6792:	2260      	movs	r2, #96	; 0x60
    6794:	e00d      	b.n	67b2 <_mqtt_recv_handler+0x182>
    6796:	7885      	ldrb	r5, [r0, #2]
    6798:	78c3      	ldrb	r3, [r0, #3]
    679a:	022d      	lsls	r5, r5, #8
    679c:	431d      	orrs	r5, r3
    679e:	1c20      	adds	r0, r4, #0
    67a0:	2170      	movs	r1, #112	; 0x70
    67a2:	1c2a      	adds	r2, r5, #0
    67a4:	4b10      	ldr	r3, [pc, #64]	; (67e8 <_mqtt_recv_handler+0x1b8>)
    67a6:	4798      	blx	r3
    67a8:	2800      	cmp	r0, #0
    67aa:	d019      	beq.n	67e0 <_mqtt_recv_handler+0x1b0>
    67ac:	1c23      	adds	r3, r4, #0
    67ae:	3348      	adds	r3, #72	; 0x48
    67b0:	2270      	movs	r2, #112	; 0x70
    67b2:	344a      	adds	r4, #74	; 0x4a
    67b4:	701a      	strb	r2, [r3, #0]
    67b6:	8025      	strh	r5, [r4, #0]
    67b8:	e012      	b.n	67e0 <_mqtt_recv_handler+0x1b0>
    67ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
    67bc:	2b00      	cmp	r3, #0
    67be:	d00f      	beq.n	67e0 <_mqtt_recv_handler+0x1b0>
    67c0:	1c20      	adds	r0, r4, #0
    67c2:	2102      	movs	r1, #2
    67c4:	e00a      	b.n	67dc <_mqtt_recv_handler+0x1ac>
    67c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    67c8:	2b00      	cmp	r3, #0
    67ca:	d009      	beq.n	67e0 <_mqtt_recv_handler+0x1b0>
    67cc:	1c20      	adds	r0, r4, #0
    67ce:	2103      	movs	r1, #3
    67d0:	e004      	b.n	67dc <_mqtt_recv_handler+0x1ac>
    67d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
    67d4:	2b00      	cmp	r3, #0
    67d6:	d003      	beq.n	67e0 <_mqtt_recv_handler+0x1b0>
    67d8:	1c20      	adds	r0, r4, #0
    67da:	2104      	movs	r1, #4
    67dc:	aa01      	add	r2, sp, #4
    67de:	4798      	blx	r3
    67e0:	b007      	add	sp, #28
    67e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    67e4:	0000658d 	.word	0x0000658d
    67e8:	000064d9 	.word	0x000064d9

000067ec <mqtt_recv_packet>:
    67ec:	b538      	push	{r3, r4, r5, lr}
    67ee:	1e04      	subs	r4, r0, #0
    67f0:	d017      	beq.n	6822 <mqtt_recv_packet+0x36>
    67f2:	6c42      	ldr	r2, [r0, #68]	; 0x44
    67f4:	6e83      	ldr	r3, [r0, #104]	; 0x68
    67f6:	429a      	cmp	r2, r3
    67f8:	d906      	bls.n	6808 <mqtt_recv_packet+0x1c>
    67fa:	238b      	movs	r3, #139	; 0x8b
    67fc:	425b      	negs	r3, r3
    67fe:	64c3      	str	r3, [r0, #76]	; 0x4c
    6800:	2100      	movs	r1, #0
    6802:	4b08      	ldr	r3, [pc, #32]	; (6824 <mqtt_recv_packet+0x38>)
    6804:	4798      	blx	r3
    6806:	e00c      	b.n	6822 <mqtt_recv_packet+0x36>
    6808:	6c62      	ldr	r2, [r4, #68]	; 0x44
    680a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    680c:	2002      	movs	r0, #2
    680e:	1899      	adds	r1, r3, r2
    6810:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    6812:	5620      	ldrsb	r0, [r4, r0]
    6814:	1a9a      	subs	r2, r3, r2
    6816:	b292      	uxth	r2, r2
    6818:	2300      	movs	r3, #0
    681a:	4d03      	ldr	r5, [pc, #12]	; (6828 <mqtt_recv_packet+0x3c>)
    681c:	47a8      	blx	r5
    681e:	2800      	cmp	r0, #0
    6820:	d1f2      	bne.n	6808 <mqtt_recv_packet+0x1c>
    6822:	bd38      	pop	{r3, r4, r5, pc}
    6824:	0000658d 	.word	0x0000658d
    6828:	00003089 	.word	0x00003089

0000682c <mqtt_recved_packet>:
    682c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    682e:	1e04      	subs	r4, r0, #0
    6830:	d042      	beq.n	68b8 <mqtt_recved_packet+0x8c>
    6832:	6c63      	ldr	r3, [r4, #68]	; 0x44
    6834:	6e67      	ldr	r7, [r4, #100]	; 0x64
    6836:	18ca      	adds	r2, r1, r3
    6838:	2301      	movs	r3, #1
    683a:	9701      	str	r7, [sp, #4]
    683c:	6462      	str	r2, [r4, #68]	; 0x44
    683e:	2600      	movs	r6, #0
    6840:	1c1d      	adds	r5, r3, #0
    6842:	42a9      	cmp	r1, r5
    6844:	dc03      	bgt.n	684e <mqtt_recved_packet+0x22>
    6846:	1c20      	adds	r0, r4, #0
    6848:	4b1c      	ldr	r3, [pc, #112]	; (68bc <mqtt_recved_packet+0x90>)
    684a:	4798      	blx	r3
    684c:	e034      	b.n	68b8 <mqtt_recved_packet+0x8c>
    684e:	9f01      	ldr	r7, [sp, #4]
    6850:	5d78      	ldrb	r0, [r7, r5]
    6852:	01df      	lsls	r7, r3, #7
    6854:	46bc      	mov	ip, r7
    6856:	2d03      	cmp	r5, #3
    6858:	d101      	bne.n	685e <mqtt_recved_packet+0x32>
    685a:	234d      	movs	r3, #77	; 0x4d
    685c:	e00e      	b.n	687c <mqtt_recved_packet+0x50>
    685e:	277f      	movs	r7, #127	; 0x7f
    6860:	4007      	ands	r7, r0
    6862:	437b      	muls	r3, r7
    6864:	b240      	sxtb	r0, r0
    6866:	3501      	adds	r5, #1
    6868:	18f6      	adds	r6, r6, r3
    686a:	2800      	cmp	r0, #0
    686c:	da01      	bge.n	6872 <mqtt_recved_packet+0x46>
    686e:	4663      	mov	r3, ip
    6870:	e7e7      	b.n	6842 <mqtt_recved_packet+0x16>
    6872:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    6874:	19af      	adds	r7, r5, r6
    6876:	429f      	cmp	r7, r3
    6878:	d907      	bls.n	688a <mqtt_recved_packet+0x5e>
    687a:	238b      	movs	r3, #139	; 0x8b
    687c:	425b      	negs	r3, r3
    687e:	64e3      	str	r3, [r4, #76]	; 0x4c
    6880:	1c20      	adds	r0, r4, #0
    6882:	2100      	movs	r1, #0
    6884:	4b0e      	ldr	r3, [pc, #56]	; (68c0 <mqtt_recved_packet+0x94>)
    6886:	4798      	blx	r3
    6888:	e016      	b.n	68b8 <mqtt_recved_packet+0x8c>
    688a:	42ba      	cmp	r2, r7
    688c:	d314      	bcc.n	68b8 <mqtt_recved_packet+0x8c>
    688e:	4b0d      	ldr	r3, [pc, #52]	; (68c4 <mqtt_recved_packet+0x98>)
    6890:	1c20      	adds	r0, r4, #0
    6892:	1c31      	adds	r1, r6, #0
    6894:	4798      	blx	r3
    6896:	6c63      	ldr	r3, [r4, #68]	; 0x44
    6898:	42bb      	cmp	r3, r7
    689a:	d102      	bne.n	68a2 <mqtt_recved_packet+0x76>
    689c:	2300      	movs	r3, #0
    689e:	6463      	str	r3, [r4, #68]	; 0x44
    68a0:	e00a      	b.n	68b8 <mqtt_recved_packet+0x8c>
    68a2:	1b9e      	subs	r6, r3, r6
    68a4:	9b01      	ldr	r3, [sp, #4]
    68a6:	1b75      	subs	r5, r6, r5
    68a8:	19d9      	adds	r1, r3, r7
    68aa:	1c18      	adds	r0, r3, #0
    68ac:	1c2a      	adds	r2, r5, #0
    68ae:	4b06      	ldr	r3, [pc, #24]	; (68c8 <mqtt_recved_packet+0x9c>)
    68b0:	4798      	blx	r3
    68b2:	6465      	str	r5, [r4, #68]	; 0x44
    68b4:	2100      	movs	r1, #0
    68b6:	e7bc      	b.n	6832 <mqtt_recved_packet+0x6>
    68b8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    68ba:	46c0      	nop			; (mov r8, r8)
    68bc:	000067ed 	.word	0x000067ed
    68c0:	0000658d 	.word	0x0000658d
    68c4:	00006631 	.word	0x00006631
    68c8:	00006d8f 	.word	0x00006d8f

000068cc <mqtt_socket_event_handler>:
    68cc:	b570      	push	{r4, r5, r6, lr}
    68ce:	4d37      	ldr	r5, [pc, #220]	; (69ac <mqtt_socket_event_handler+0xe0>)
    68d0:	0086      	lsls	r6, r0, #2
    68d2:	5974      	ldr	r4, [r6, r5]
    68d4:	b086      	sub	sp, #24
    68d6:	2c00      	cmp	r4, #0
    68d8:	d066      	beq.n	69a8 <mqtt_socket_event_handler+0xdc>
    68da:	2906      	cmp	r1, #6
    68dc:	d02b      	beq.n	6936 <mqtt_socket_event_handler+0x6a>
    68de:	2907      	cmp	r1, #7
    68e0:	d039      	beq.n	6956 <mqtt_socket_event_handler+0x8a>
    68e2:	2905      	cmp	r1, #5
    68e4:	d160      	bne.n	69a8 <mqtt_socket_event_handler+0xdc>
    68e6:	2001      	movs	r0, #1
    68e8:	5610      	ldrsb	r0, [r2, r0]
    68ea:	4b31      	ldr	r3, [pc, #196]	; (69b0 <mqtt_socket_event_handler+0xe4>)
    68ec:	4798      	blx	r3
    68ee:	9001      	str	r0, [sp, #4]
    68f0:	2800      	cmp	r0, #0
    68f2:	da06      	bge.n	6902 <mqtt_socket_event_handler+0x36>
    68f4:	2002      	movs	r0, #2
    68f6:	4b2f      	ldr	r3, [pc, #188]	; (69b4 <mqtt_socket_event_handler+0xe8>)
    68f8:	5620      	ldrsb	r0, [r4, r0]
    68fa:	4798      	blx	r3
    68fc:	2300      	movs	r3, #0
    68fe:	5173      	str	r3, [r6, r5]
    6900:	e011      	b.n	6926 <mqtt_socket_event_handler+0x5a>
    6902:	1c23      	adds	r3, r4, #0
    6904:	3343      	adds	r3, #67	; 0x43
    6906:	781a      	ldrb	r2, [r3, #0]
    6908:	2101      	movs	r1, #1
    690a:	430a      	orrs	r2, r1
    690c:	701a      	strb	r2, [r3, #0]
    690e:	331d      	adds	r3, #29
    6910:	881b      	ldrh	r3, [r3, #0]
    6912:	2b00      	cmp	r3, #0
    6914:	d004      	beq.n	6920 <mqtt_socket_event_handler+0x54>
    6916:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    6918:	6d21      	ldr	r1, [r4, #80]	; 0x50
    691a:	2200      	movs	r2, #0
    691c:	4b26      	ldr	r3, [pc, #152]	; (69b8 <mqtt_socket_event_handler+0xec>)
    691e:	4798      	blx	r3
    6920:	1c20      	adds	r0, r4, #0
    6922:	4b26      	ldr	r3, [pc, #152]	; (69bc <mqtt_socket_event_handler+0xf0>)
    6924:	4798      	blx	r3
    6926:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6928:	2b00      	cmp	r3, #0
    692a:	d03d      	beq.n	69a8 <mqtt_socket_event_handler+0xdc>
    692c:	1c20      	adds	r0, r4, #0
    692e:	2100      	movs	r1, #0
    6930:	aa01      	add	r2, sp, #4
    6932:	4798      	blx	r3
    6934:	e038      	b.n	69a8 <mqtt_socket_event_handler+0xdc>
    6936:	2304      	movs	r3, #4
    6938:	5ed1      	ldrsh	r1, [r2, r3]
    693a:	2900      	cmp	r1, #0
    693c:	dd03      	ble.n	6946 <mqtt_socket_event_handler+0x7a>
    693e:	1c20      	adds	r0, r4, #0
    6940:	4b1f      	ldr	r3, [pc, #124]	; (69c0 <mqtt_socket_event_handler+0xf4>)
    6942:	4798      	blx	r3
    6944:	e003      	b.n	694e <mqtt_socket_event_handler+0x82>
    6946:	1c0b      	adds	r3, r1, #0
    6948:	1c08      	adds	r0, r1, #0
    694a:	330d      	adds	r3, #13
    694c:	d11a      	bne.n	6984 <mqtt_socket_event_handler+0xb8>
    694e:	4b1b      	ldr	r3, [pc, #108]	; (69bc <mqtt_socket_event_handler+0xf0>)
    6950:	1c20      	adds	r0, r4, #0
    6952:	4798      	blx	r3
    6954:	e028      	b.n	69a8 <mqtt_socket_event_handler+0xdc>
    6956:	1c23      	adds	r3, r4, #0
    6958:	3343      	adds	r3, #67	; 0x43
    695a:	8810      	ldrh	r0, [r2, #0]
    695c:	781a      	ldrb	r2, [r3, #0]
    695e:	0751      	lsls	r1, r2, #29
    6960:	d402      	bmi.n	6968 <mqtt_socket_event_handler+0x9c>
    6962:	2108      	movs	r1, #8
    6964:	438a      	bics	r2, r1
    6966:	701a      	strb	r2, [r3, #0]
    6968:	781a      	ldrb	r2, [r3, #0]
    696a:	2104      	movs	r1, #4
    696c:	438a      	bics	r2, r1
    696e:	701a      	strb	r2, [r3, #0]
    6970:	06d3      	lsls	r3, r2, #27
    6972:	0fde      	lsrs	r6, r3, #31
    6974:	b200      	sxth	r0, r0
    6976:	2b00      	cmp	r3, #0
    6978:	db02      	blt.n	6980 <mqtt_socket_event_handler+0xb4>
    697a:	2800      	cmp	r0, #0
    697c:	da08      	bge.n	6990 <mqtt_socket_event_handler+0xc4>
    697e:	e001      	b.n	6984 <mqtt_socket_event_handler+0xb8>
    6980:	2800      	cmp	r0, #0
    6982:	da02      	bge.n	698a <mqtt_socket_event_handler+0xbe>
    6984:	4b0a      	ldr	r3, [pc, #40]	; (69b0 <mqtt_socket_event_handler+0xe4>)
    6986:	4798      	blx	r3
    6988:	64e0      	str	r0, [r4, #76]	; 0x4c
    698a:	1c20      	adds	r0, r4, #0
    698c:	4b0d      	ldr	r3, [pc, #52]	; (69c4 <mqtt_socket_event_handler+0xf8>)
    698e:	e7e0      	b.n	6952 <mqtt_socket_event_handler+0x86>
    6990:	1c25      	adds	r5, r4, #0
    6992:	3548      	adds	r5, #72	; 0x48
    6994:	7829      	ldrb	r1, [r5, #0]
    6996:	2900      	cmp	r1, #0
    6998:	d006      	beq.n	69a8 <mqtt_socket_event_handler+0xdc>
    699a:	1c23      	adds	r3, r4, #0
    699c:	334a      	adds	r3, #74	; 0x4a
    699e:	881a      	ldrh	r2, [r3, #0]
    69a0:	1c20      	adds	r0, r4, #0
    69a2:	4b09      	ldr	r3, [pc, #36]	; (69c8 <mqtt_socket_event_handler+0xfc>)
    69a4:	4798      	blx	r3
    69a6:	702e      	strb	r6, [r5, #0]
    69a8:	b006      	add	sp, #24
    69aa:	bd70      	pop	{r4, r5, r6, pc}
    69ac:	2000026c 	.word	0x2000026c
    69b0:	00005bbd 	.word	0x00005bbd
    69b4:	0000311d 	.word	0x0000311d
    69b8:	000055a9 	.word	0x000055a9
    69bc:	000067ed 	.word	0x000067ed
    69c0:	0000682d 	.word	0x0000682d
    69c4:	0000653d 	.word	0x0000653d
    69c8:	000064d9 	.word	0x000064d9

000069cc <__gnu_thumb1_case_uqi>:
    69cc:	b402      	push	{r1}
    69ce:	4671      	mov	r1, lr
    69d0:	0849      	lsrs	r1, r1, #1
    69d2:	0049      	lsls	r1, r1, #1
    69d4:	5c09      	ldrb	r1, [r1, r0]
    69d6:	0049      	lsls	r1, r1, #1
    69d8:	448e      	add	lr, r1
    69da:	bc02      	pop	{r1}
    69dc:	4770      	bx	lr
    69de:	46c0      	nop			; (mov r8, r8)

000069e0 <__udivsi3>:
    69e0:	2200      	movs	r2, #0
    69e2:	0843      	lsrs	r3, r0, #1
    69e4:	428b      	cmp	r3, r1
    69e6:	d374      	bcc.n	6ad2 <__udivsi3+0xf2>
    69e8:	0903      	lsrs	r3, r0, #4
    69ea:	428b      	cmp	r3, r1
    69ec:	d35f      	bcc.n	6aae <__udivsi3+0xce>
    69ee:	0a03      	lsrs	r3, r0, #8
    69f0:	428b      	cmp	r3, r1
    69f2:	d344      	bcc.n	6a7e <__udivsi3+0x9e>
    69f4:	0b03      	lsrs	r3, r0, #12
    69f6:	428b      	cmp	r3, r1
    69f8:	d328      	bcc.n	6a4c <__udivsi3+0x6c>
    69fa:	0c03      	lsrs	r3, r0, #16
    69fc:	428b      	cmp	r3, r1
    69fe:	d30d      	bcc.n	6a1c <__udivsi3+0x3c>
    6a00:	22ff      	movs	r2, #255	; 0xff
    6a02:	0209      	lsls	r1, r1, #8
    6a04:	ba12      	rev	r2, r2
    6a06:	0c03      	lsrs	r3, r0, #16
    6a08:	428b      	cmp	r3, r1
    6a0a:	d302      	bcc.n	6a12 <__udivsi3+0x32>
    6a0c:	1212      	asrs	r2, r2, #8
    6a0e:	0209      	lsls	r1, r1, #8
    6a10:	d065      	beq.n	6ade <__udivsi3+0xfe>
    6a12:	0b03      	lsrs	r3, r0, #12
    6a14:	428b      	cmp	r3, r1
    6a16:	d319      	bcc.n	6a4c <__udivsi3+0x6c>
    6a18:	e000      	b.n	6a1c <__udivsi3+0x3c>
    6a1a:	0a09      	lsrs	r1, r1, #8
    6a1c:	0bc3      	lsrs	r3, r0, #15
    6a1e:	428b      	cmp	r3, r1
    6a20:	d301      	bcc.n	6a26 <__udivsi3+0x46>
    6a22:	03cb      	lsls	r3, r1, #15
    6a24:	1ac0      	subs	r0, r0, r3
    6a26:	4152      	adcs	r2, r2
    6a28:	0b83      	lsrs	r3, r0, #14
    6a2a:	428b      	cmp	r3, r1
    6a2c:	d301      	bcc.n	6a32 <__udivsi3+0x52>
    6a2e:	038b      	lsls	r3, r1, #14
    6a30:	1ac0      	subs	r0, r0, r3
    6a32:	4152      	adcs	r2, r2
    6a34:	0b43      	lsrs	r3, r0, #13
    6a36:	428b      	cmp	r3, r1
    6a38:	d301      	bcc.n	6a3e <__udivsi3+0x5e>
    6a3a:	034b      	lsls	r3, r1, #13
    6a3c:	1ac0      	subs	r0, r0, r3
    6a3e:	4152      	adcs	r2, r2
    6a40:	0b03      	lsrs	r3, r0, #12
    6a42:	428b      	cmp	r3, r1
    6a44:	d301      	bcc.n	6a4a <__udivsi3+0x6a>
    6a46:	030b      	lsls	r3, r1, #12
    6a48:	1ac0      	subs	r0, r0, r3
    6a4a:	4152      	adcs	r2, r2
    6a4c:	0ac3      	lsrs	r3, r0, #11
    6a4e:	428b      	cmp	r3, r1
    6a50:	d301      	bcc.n	6a56 <__udivsi3+0x76>
    6a52:	02cb      	lsls	r3, r1, #11
    6a54:	1ac0      	subs	r0, r0, r3
    6a56:	4152      	adcs	r2, r2
    6a58:	0a83      	lsrs	r3, r0, #10
    6a5a:	428b      	cmp	r3, r1
    6a5c:	d301      	bcc.n	6a62 <__udivsi3+0x82>
    6a5e:	028b      	lsls	r3, r1, #10
    6a60:	1ac0      	subs	r0, r0, r3
    6a62:	4152      	adcs	r2, r2
    6a64:	0a43      	lsrs	r3, r0, #9
    6a66:	428b      	cmp	r3, r1
    6a68:	d301      	bcc.n	6a6e <__udivsi3+0x8e>
    6a6a:	024b      	lsls	r3, r1, #9
    6a6c:	1ac0      	subs	r0, r0, r3
    6a6e:	4152      	adcs	r2, r2
    6a70:	0a03      	lsrs	r3, r0, #8
    6a72:	428b      	cmp	r3, r1
    6a74:	d301      	bcc.n	6a7a <__udivsi3+0x9a>
    6a76:	020b      	lsls	r3, r1, #8
    6a78:	1ac0      	subs	r0, r0, r3
    6a7a:	4152      	adcs	r2, r2
    6a7c:	d2cd      	bcs.n	6a1a <__udivsi3+0x3a>
    6a7e:	09c3      	lsrs	r3, r0, #7
    6a80:	428b      	cmp	r3, r1
    6a82:	d301      	bcc.n	6a88 <__udivsi3+0xa8>
    6a84:	01cb      	lsls	r3, r1, #7
    6a86:	1ac0      	subs	r0, r0, r3
    6a88:	4152      	adcs	r2, r2
    6a8a:	0983      	lsrs	r3, r0, #6
    6a8c:	428b      	cmp	r3, r1
    6a8e:	d301      	bcc.n	6a94 <__udivsi3+0xb4>
    6a90:	018b      	lsls	r3, r1, #6
    6a92:	1ac0      	subs	r0, r0, r3
    6a94:	4152      	adcs	r2, r2
    6a96:	0943      	lsrs	r3, r0, #5
    6a98:	428b      	cmp	r3, r1
    6a9a:	d301      	bcc.n	6aa0 <__udivsi3+0xc0>
    6a9c:	014b      	lsls	r3, r1, #5
    6a9e:	1ac0      	subs	r0, r0, r3
    6aa0:	4152      	adcs	r2, r2
    6aa2:	0903      	lsrs	r3, r0, #4
    6aa4:	428b      	cmp	r3, r1
    6aa6:	d301      	bcc.n	6aac <__udivsi3+0xcc>
    6aa8:	010b      	lsls	r3, r1, #4
    6aaa:	1ac0      	subs	r0, r0, r3
    6aac:	4152      	adcs	r2, r2
    6aae:	08c3      	lsrs	r3, r0, #3
    6ab0:	428b      	cmp	r3, r1
    6ab2:	d301      	bcc.n	6ab8 <__udivsi3+0xd8>
    6ab4:	00cb      	lsls	r3, r1, #3
    6ab6:	1ac0      	subs	r0, r0, r3
    6ab8:	4152      	adcs	r2, r2
    6aba:	0883      	lsrs	r3, r0, #2
    6abc:	428b      	cmp	r3, r1
    6abe:	d301      	bcc.n	6ac4 <__udivsi3+0xe4>
    6ac0:	008b      	lsls	r3, r1, #2
    6ac2:	1ac0      	subs	r0, r0, r3
    6ac4:	4152      	adcs	r2, r2
    6ac6:	0843      	lsrs	r3, r0, #1
    6ac8:	428b      	cmp	r3, r1
    6aca:	d301      	bcc.n	6ad0 <__udivsi3+0xf0>
    6acc:	004b      	lsls	r3, r1, #1
    6ace:	1ac0      	subs	r0, r0, r3
    6ad0:	4152      	adcs	r2, r2
    6ad2:	1a41      	subs	r1, r0, r1
    6ad4:	d200      	bcs.n	6ad8 <__udivsi3+0xf8>
    6ad6:	4601      	mov	r1, r0
    6ad8:	4152      	adcs	r2, r2
    6ada:	4610      	mov	r0, r2
    6adc:	4770      	bx	lr
    6ade:	e7ff      	b.n	6ae0 <__udivsi3+0x100>
    6ae0:	b501      	push	{r0, lr}
    6ae2:	2000      	movs	r0, #0
    6ae4:	f000 f8f0 	bl	6cc8 <__aeabi_idiv0>
    6ae8:	bd02      	pop	{r1, pc}
    6aea:	46c0      	nop			; (mov r8, r8)

00006aec <__aeabi_uidivmod>:
    6aec:	2900      	cmp	r1, #0
    6aee:	d0f7      	beq.n	6ae0 <__udivsi3+0x100>
    6af0:	e776      	b.n	69e0 <__udivsi3>
    6af2:	4770      	bx	lr

00006af4 <__divsi3>:
    6af4:	4603      	mov	r3, r0
    6af6:	430b      	orrs	r3, r1
    6af8:	d47f      	bmi.n	6bfa <__divsi3+0x106>
    6afa:	2200      	movs	r2, #0
    6afc:	0843      	lsrs	r3, r0, #1
    6afe:	428b      	cmp	r3, r1
    6b00:	d374      	bcc.n	6bec <__divsi3+0xf8>
    6b02:	0903      	lsrs	r3, r0, #4
    6b04:	428b      	cmp	r3, r1
    6b06:	d35f      	bcc.n	6bc8 <__divsi3+0xd4>
    6b08:	0a03      	lsrs	r3, r0, #8
    6b0a:	428b      	cmp	r3, r1
    6b0c:	d344      	bcc.n	6b98 <__divsi3+0xa4>
    6b0e:	0b03      	lsrs	r3, r0, #12
    6b10:	428b      	cmp	r3, r1
    6b12:	d328      	bcc.n	6b66 <__divsi3+0x72>
    6b14:	0c03      	lsrs	r3, r0, #16
    6b16:	428b      	cmp	r3, r1
    6b18:	d30d      	bcc.n	6b36 <__divsi3+0x42>
    6b1a:	22ff      	movs	r2, #255	; 0xff
    6b1c:	0209      	lsls	r1, r1, #8
    6b1e:	ba12      	rev	r2, r2
    6b20:	0c03      	lsrs	r3, r0, #16
    6b22:	428b      	cmp	r3, r1
    6b24:	d302      	bcc.n	6b2c <__divsi3+0x38>
    6b26:	1212      	asrs	r2, r2, #8
    6b28:	0209      	lsls	r1, r1, #8
    6b2a:	d065      	beq.n	6bf8 <__divsi3+0x104>
    6b2c:	0b03      	lsrs	r3, r0, #12
    6b2e:	428b      	cmp	r3, r1
    6b30:	d319      	bcc.n	6b66 <__divsi3+0x72>
    6b32:	e000      	b.n	6b36 <__divsi3+0x42>
    6b34:	0a09      	lsrs	r1, r1, #8
    6b36:	0bc3      	lsrs	r3, r0, #15
    6b38:	428b      	cmp	r3, r1
    6b3a:	d301      	bcc.n	6b40 <__divsi3+0x4c>
    6b3c:	03cb      	lsls	r3, r1, #15
    6b3e:	1ac0      	subs	r0, r0, r3
    6b40:	4152      	adcs	r2, r2
    6b42:	0b83      	lsrs	r3, r0, #14
    6b44:	428b      	cmp	r3, r1
    6b46:	d301      	bcc.n	6b4c <__divsi3+0x58>
    6b48:	038b      	lsls	r3, r1, #14
    6b4a:	1ac0      	subs	r0, r0, r3
    6b4c:	4152      	adcs	r2, r2
    6b4e:	0b43      	lsrs	r3, r0, #13
    6b50:	428b      	cmp	r3, r1
    6b52:	d301      	bcc.n	6b58 <__divsi3+0x64>
    6b54:	034b      	lsls	r3, r1, #13
    6b56:	1ac0      	subs	r0, r0, r3
    6b58:	4152      	adcs	r2, r2
    6b5a:	0b03      	lsrs	r3, r0, #12
    6b5c:	428b      	cmp	r3, r1
    6b5e:	d301      	bcc.n	6b64 <__divsi3+0x70>
    6b60:	030b      	lsls	r3, r1, #12
    6b62:	1ac0      	subs	r0, r0, r3
    6b64:	4152      	adcs	r2, r2
    6b66:	0ac3      	lsrs	r3, r0, #11
    6b68:	428b      	cmp	r3, r1
    6b6a:	d301      	bcc.n	6b70 <__divsi3+0x7c>
    6b6c:	02cb      	lsls	r3, r1, #11
    6b6e:	1ac0      	subs	r0, r0, r3
    6b70:	4152      	adcs	r2, r2
    6b72:	0a83      	lsrs	r3, r0, #10
    6b74:	428b      	cmp	r3, r1
    6b76:	d301      	bcc.n	6b7c <__divsi3+0x88>
    6b78:	028b      	lsls	r3, r1, #10
    6b7a:	1ac0      	subs	r0, r0, r3
    6b7c:	4152      	adcs	r2, r2
    6b7e:	0a43      	lsrs	r3, r0, #9
    6b80:	428b      	cmp	r3, r1
    6b82:	d301      	bcc.n	6b88 <__divsi3+0x94>
    6b84:	024b      	lsls	r3, r1, #9
    6b86:	1ac0      	subs	r0, r0, r3
    6b88:	4152      	adcs	r2, r2
    6b8a:	0a03      	lsrs	r3, r0, #8
    6b8c:	428b      	cmp	r3, r1
    6b8e:	d301      	bcc.n	6b94 <__divsi3+0xa0>
    6b90:	020b      	lsls	r3, r1, #8
    6b92:	1ac0      	subs	r0, r0, r3
    6b94:	4152      	adcs	r2, r2
    6b96:	d2cd      	bcs.n	6b34 <__divsi3+0x40>
    6b98:	09c3      	lsrs	r3, r0, #7
    6b9a:	428b      	cmp	r3, r1
    6b9c:	d301      	bcc.n	6ba2 <__divsi3+0xae>
    6b9e:	01cb      	lsls	r3, r1, #7
    6ba0:	1ac0      	subs	r0, r0, r3
    6ba2:	4152      	adcs	r2, r2
    6ba4:	0983      	lsrs	r3, r0, #6
    6ba6:	428b      	cmp	r3, r1
    6ba8:	d301      	bcc.n	6bae <__divsi3+0xba>
    6baa:	018b      	lsls	r3, r1, #6
    6bac:	1ac0      	subs	r0, r0, r3
    6bae:	4152      	adcs	r2, r2
    6bb0:	0943      	lsrs	r3, r0, #5
    6bb2:	428b      	cmp	r3, r1
    6bb4:	d301      	bcc.n	6bba <__divsi3+0xc6>
    6bb6:	014b      	lsls	r3, r1, #5
    6bb8:	1ac0      	subs	r0, r0, r3
    6bba:	4152      	adcs	r2, r2
    6bbc:	0903      	lsrs	r3, r0, #4
    6bbe:	428b      	cmp	r3, r1
    6bc0:	d301      	bcc.n	6bc6 <__divsi3+0xd2>
    6bc2:	010b      	lsls	r3, r1, #4
    6bc4:	1ac0      	subs	r0, r0, r3
    6bc6:	4152      	adcs	r2, r2
    6bc8:	08c3      	lsrs	r3, r0, #3
    6bca:	428b      	cmp	r3, r1
    6bcc:	d301      	bcc.n	6bd2 <__divsi3+0xde>
    6bce:	00cb      	lsls	r3, r1, #3
    6bd0:	1ac0      	subs	r0, r0, r3
    6bd2:	4152      	adcs	r2, r2
    6bd4:	0883      	lsrs	r3, r0, #2
    6bd6:	428b      	cmp	r3, r1
    6bd8:	d301      	bcc.n	6bde <__divsi3+0xea>
    6bda:	008b      	lsls	r3, r1, #2
    6bdc:	1ac0      	subs	r0, r0, r3
    6bde:	4152      	adcs	r2, r2
    6be0:	0843      	lsrs	r3, r0, #1
    6be2:	428b      	cmp	r3, r1
    6be4:	d301      	bcc.n	6bea <__divsi3+0xf6>
    6be6:	004b      	lsls	r3, r1, #1
    6be8:	1ac0      	subs	r0, r0, r3
    6bea:	4152      	adcs	r2, r2
    6bec:	1a41      	subs	r1, r0, r1
    6bee:	d200      	bcs.n	6bf2 <__divsi3+0xfe>
    6bf0:	4601      	mov	r1, r0
    6bf2:	4152      	adcs	r2, r2
    6bf4:	4610      	mov	r0, r2
    6bf6:	4770      	bx	lr
    6bf8:	e05d      	b.n	6cb6 <__divsi3+0x1c2>
    6bfa:	0fca      	lsrs	r2, r1, #31
    6bfc:	d000      	beq.n	6c00 <__divsi3+0x10c>
    6bfe:	4249      	negs	r1, r1
    6c00:	1003      	asrs	r3, r0, #32
    6c02:	d300      	bcc.n	6c06 <__divsi3+0x112>
    6c04:	4240      	negs	r0, r0
    6c06:	4053      	eors	r3, r2
    6c08:	2200      	movs	r2, #0
    6c0a:	469c      	mov	ip, r3
    6c0c:	0903      	lsrs	r3, r0, #4
    6c0e:	428b      	cmp	r3, r1
    6c10:	d32d      	bcc.n	6c6e <__divsi3+0x17a>
    6c12:	0a03      	lsrs	r3, r0, #8
    6c14:	428b      	cmp	r3, r1
    6c16:	d312      	bcc.n	6c3e <__divsi3+0x14a>
    6c18:	22fc      	movs	r2, #252	; 0xfc
    6c1a:	0189      	lsls	r1, r1, #6
    6c1c:	ba12      	rev	r2, r2
    6c1e:	0a03      	lsrs	r3, r0, #8
    6c20:	428b      	cmp	r3, r1
    6c22:	d30c      	bcc.n	6c3e <__divsi3+0x14a>
    6c24:	0189      	lsls	r1, r1, #6
    6c26:	1192      	asrs	r2, r2, #6
    6c28:	428b      	cmp	r3, r1
    6c2a:	d308      	bcc.n	6c3e <__divsi3+0x14a>
    6c2c:	0189      	lsls	r1, r1, #6
    6c2e:	1192      	asrs	r2, r2, #6
    6c30:	428b      	cmp	r3, r1
    6c32:	d304      	bcc.n	6c3e <__divsi3+0x14a>
    6c34:	0189      	lsls	r1, r1, #6
    6c36:	d03a      	beq.n	6cae <__divsi3+0x1ba>
    6c38:	1192      	asrs	r2, r2, #6
    6c3a:	e000      	b.n	6c3e <__divsi3+0x14a>
    6c3c:	0989      	lsrs	r1, r1, #6
    6c3e:	09c3      	lsrs	r3, r0, #7
    6c40:	428b      	cmp	r3, r1
    6c42:	d301      	bcc.n	6c48 <__divsi3+0x154>
    6c44:	01cb      	lsls	r3, r1, #7
    6c46:	1ac0      	subs	r0, r0, r3
    6c48:	4152      	adcs	r2, r2
    6c4a:	0983      	lsrs	r3, r0, #6
    6c4c:	428b      	cmp	r3, r1
    6c4e:	d301      	bcc.n	6c54 <__divsi3+0x160>
    6c50:	018b      	lsls	r3, r1, #6
    6c52:	1ac0      	subs	r0, r0, r3
    6c54:	4152      	adcs	r2, r2
    6c56:	0943      	lsrs	r3, r0, #5
    6c58:	428b      	cmp	r3, r1
    6c5a:	d301      	bcc.n	6c60 <__divsi3+0x16c>
    6c5c:	014b      	lsls	r3, r1, #5
    6c5e:	1ac0      	subs	r0, r0, r3
    6c60:	4152      	adcs	r2, r2
    6c62:	0903      	lsrs	r3, r0, #4
    6c64:	428b      	cmp	r3, r1
    6c66:	d301      	bcc.n	6c6c <__divsi3+0x178>
    6c68:	010b      	lsls	r3, r1, #4
    6c6a:	1ac0      	subs	r0, r0, r3
    6c6c:	4152      	adcs	r2, r2
    6c6e:	08c3      	lsrs	r3, r0, #3
    6c70:	428b      	cmp	r3, r1
    6c72:	d301      	bcc.n	6c78 <__divsi3+0x184>
    6c74:	00cb      	lsls	r3, r1, #3
    6c76:	1ac0      	subs	r0, r0, r3
    6c78:	4152      	adcs	r2, r2
    6c7a:	0883      	lsrs	r3, r0, #2
    6c7c:	428b      	cmp	r3, r1
    6c7e:	d301      	bcc.n	6c84 <__divsi3+0x190>
    6c80:	008b      	lsls	r3, r1, #2
    6c82:	1ac0      	subs	r0, r0, r3
    6c84:	4152      	adcs	r2, r2
    6c86:	d2d9      	bcs.n	6c3c <__divsi3+0x148>
    6c88:	0843      	lsrs	r3, r0, #1
    6c8a:	428b      	cmp	r3, r1
    6c8c:	d301      	bcc.n	6c92 <__divsi3+0x19e>
    6c8e:	004b      	lsls	r3, r1, #1
    6c90:	1ac0      	subs	r0, r0, r3
    6c92:	4152      	adcs	r2, r2
    6c94:	1a41      	subs	r1, r0, r1
    6c96:	d200      	bcs.n	6c9a <__divsi3+0x1a6>
    6c98:	4601      	mov	r1, r0
    6c9a:	4663      	mov	r3, ip
    6c9c:	4152      	adcs	r2, r2
    6c9e:	105b      	asrs	r3, r3, #1
    6ca0:	4610      	mov	r0, r2
    6ca2:	d301      	bcc.n	6ca8 <__divsi3+0x1b4>
    6ca4:	4240      	negs	r0, r0
    6ca6:	2b00      	cmp	r3, #0
    6ca8:	d500      	bpl.n	6cac <__divsi3+0x1b8>
    6caa:	4249      	negs	r1, r1
    6cac:	4770      	bx	lr
    6cae:	4663      	mov	r3, ip
    6cb0:	105b      	asrs	r3, r3, #1
    6cb2:	d300      	bcc.n	6cb6 <__divsi3+0x1c2>
    6cb4:	4240      	negs	r0, r0
    6cb6:	b501      	push	{r0, lr}
    6cb8:	2000      	movs	r0, #0
    6cba:	f000 f805 	bl	6cc8 <__aeabi_idiv0>
    6cbe:	bd02      	pop	{r1, pc}

00006cc0 <__aeabi_idivmod>:
    6cc0:	2900      	cmp	r1, #0
    6cc2:	d0f8      	beq.n	6cb6 <__divsi3+0x1c2>
    6cc4:	e716      	b.n	6af4 <__divsi3>
    6cc6:	4770      	bx	lr

00006cc8 <__aeabi_idiv0>:
    6cc8:	4770      	bx	lr
    6cca:	46c0      	nop			; (mov r8, r8)

00006ccc <__aeabi_lmul>:
    6ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
    6cce:	46ce      	mov	lr, r9
    6cd0:	4647      	mov	r7, r8
    6cd2:	0415      	lsls	r5, r2, #16
    6cd4:	0c2d      	lsrs	r5, r5, #16
    6cd6:	002e      	movs	r6, r5
    6cd8:	b580      	push	{r7, lr}
    6cda:	0407      	lsls	r7, r0, #16
    6cdc:	0c14      	lsrs	r4, r2, #16
    6cde:	0c3f      	lsrs	r7, r7, #16
    6ce0:	4699      	mov	r9, r3
    6ce2:	0c03      	lsrs	r3, r0, #16
    6ce4:	437e      	muls	r6, r7
    6ce6:	435d      	muls	r5, r3
    6ce8:	4367      	muls	r7, r4
    6cea:	4363      	muls	r3, r4
    6cec:	197f      	adds	r7, r7, r5
    6cee:	0c34      	lsrs	r4, r6, #16
    6cf0:	19e4      	adds	r4, r4, r7
    6cf2:	469c      	mov	ip, r3
    6cf4:	42a5      	cmp	r5, r4
    6cf6:	d903      	bls.n	6d00 <__aeabi_lmul+0x34>
    6cf8:	2380      	movs	r3, #128	; 0x80
    6cfa:	025b      	lsls	r3, r3, #9
    6cfc:	4698      	mov	r8, r3
    6cfe:	44c4      	add	ip, r8
    6d00:	464b      	mov	r3, r9
    6d02:	4351      	muls	r1, r2
    6d04:	4343      	muls	r3, r0
    6d06:	0436      	lsls	r6, r6, #16
    6d08:	0c36      	lsrs	r6, r6, #16
    6d0a:	0c25      	lsrs	r5, r4, #16
    6d0c:	0424      	lsls	r4, r4, #16
    6d0e:	4465      	add	r5, ip
    6d10:	19a4      	adds	r4, r4, r6
    6d12:	1859      	adds	r1, r3, r1
    6d14:	1949      	adds	r1, r1, r5
    6d16:	0020      	movs	r0, r4
    6d18:	bc0c      	pop	{r2, r3}
    6d1a:	4690      	mov	r8, r2
    6d1c:	4699      	mov	r9, r3
    6d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006d20 <__libc_init_array>:
    6d20:	b570      	push	{r4, r5, r6, lr}
    6d22:	2600      	movs	r6, #0
    6d24:	4d0c      	ldr	r5, [pc, #48]	; (6d58 <__libc_init_array+0x38>)
    6d26:	4c0d      	ldr	r4, [pc, #52]	; (6d5c <__libc_init_array+0x3c>)
    6d28:	1b64      	subs	r4, r4, r5
    6d2a:	10a4      	asrs	r4, r4, #2
    6d2c:	42a6      	cmp	r6, r4
    6d2e:	d109      	bne.n	6d44 <__libc_init_array+0x24>
    6d30:	2600      	movs	r6, #0
    6d32:	f002 fbcf 	bl	94d4 <_init>
    6d36:	4d0a      	ldr	r5, [pc, #40]	; (6d60 <__libc_init_array+0x40>)
    6d38:	4c0a      	ldr	r4, [pc, #40]	; (6d64 <__libc_init_array+0x44>)
    6d3a:	1b64      	subs	r4, r4, r5
    6d3c:	10a4      	asrs	r4, r4, #2
    6d3e:	42a6      	cmp	r6, r4
    6d40:	d105      	bne.n	6d4e <__libc_init_array+0x2e>
    6d42:	bd70      	pop	{r4, r5, r6, pc}
    6d44:	00b3      	lsls	r3, r6, #2
    6d46:	58eb      	ldr	r3, [r5, r3]
    6d48:	4798      	blx	r3
    6d4a:	3601      	adds	r6, #1
    6d4c:	e7ee      	b.n	6d2c <__libc_init_array+0xc>
    6d4e:	00b3      	lsls	r3, r6, #2
    6d50:	58eb      	ldr	r3, [r5, r3]
    6d52:	4798      	blx	r3
    6d54:	3601      	adds	r6, #1
    6d56:	e7f2      	b.n	6d3e <__libc_init_array+0x1e>
    6d58:	000094e0 	.word	0x000094e0
    6d5c:	000094e0 	.word	0x000094e0
    6d60:	000094e0 	.word	0x000094e0
    6d64:	000094e4 	.word	0x000094e4

00006d68 <malloc>:
    6d68:	b510      	push	{r4, lr}
    6d6a:	4b03      	ldr	r3, [pc, #12]	; (6d78 <malloc+0x10>)
    6d6c:	0001      	movs	r1, r0
    6d6e:	6818      	ldr	r0, [r3, #0]
    6d70:	f000 f872 	bl	6e58 <_malloc_r>
    6d74:	bd10      	pop	{r4, pc}
    6d76:	46c0      	nop			; (mov r8, r8)
    6d78:	20000058 	.word	0x20000058

00006d7c <memcpy>:
    6d7c:	2300      	movs	r3, #0
    6d7e:	b510      	push	{r4, lr}
    6d80:	429a      	cmp	r2, r3
    6d82:	d100      	bne.n	6d86 <memcpy+0xa>
    6d84:	bd10      	pop	{r4, pc}
    6d86:	5ccc      	ldrb	r4, [r1, r3]
    6d88:	54c4      	strb	r4, [r0, r3]
    6d8a:	3301      	adds	r3, #1
    6d8c:	e7f8      	b.n	6d80 <memcpy+0x4>

00006d8e <memmove>:
    6d8e:	b510      	push	{r4, lr}
    6d90:	4288      	cmp	r0, r1
    6d92:	d902      	bls.n	6d9a <memmove+0xc>
    6d94:	188b      	adds	r3, r1, r2
    6d96:	4298      	cmp	r0, r3
    6d98:	d308      	bcc.n	6dac <memmove+0x1e>
    6d9a:	2300      	movs	r3, #0
    6d9c:	429a      	cmp	r2, r3
    6d9e:	d007      	beq.n	6db0 <memmove+0x22>
    6da0:	5ccc      	ldrb	r4, [r1, r3]
    6da2:	54c4      	strb	r4, [r0, r3]
    6da4:	3301      	adds	r3, #1
    6da6:	e7f9      	b.n	6d9c <memmove+0xe>
    6da8:	5c8b      	ldrb	r3, [r1, r2]
    6daa:	5483      	strb	r3, [r0, r2]
    6dac:	3a01      	subs	r2, #1
    6dae:	d2fb      	bcs.n	6da8 <memmove+0x1a>
    6db0:	bd10      	pop	{r4, pc}

00006db2 <memset>:
    6db2:	0003      	movs	r3, r0
    6db4:	1882      	adds	r2, r0, r2
    6db6:	4293      	cmp	r3, r2
    6db8:	d100      	bne.n	6dbc <memset+0xa>
    6dba:	4770      	bx	lr
    6dbc:	7019      	strb	r1, [r3, #0]
    6dbe:	3301      	adds	r3, #1
    6dc0:	e7f9      	b.n	6db6 <memset+0x4>
	...

00006dc4 <_free_r>:
    6dc4:	b570      	push	{r4, r5, r6, lr}
    6dc6:	0005      	movs	r5, r0
    6dc8:	2900      	cmp	r1, #0
    6dca:	d010      	beq.n	6dee <_free_r+0x2a>
    6dcc:	1f0c      	subs	r4, r1, #4
    6dce:	6823      	ldr	r3, [r4, #0]
    6dd0:	2b00      	cmp	r3, #0
    6dd2:	da00      	bge.n	6dd6 <_free_r+0x12>
    6dd4:	18e4      	adds	r4, r4, r3
    6dd6:	0028      	movs	r0, r5
    6dd8:	f000 fd08 	bl	77ec <__malloc_lock>
    6ddc:	4a1d      	ldr	r2, [pc, #116]	; (6e54 <_free_r+0x90>)
    6dde:	6813      	ldr	r3, [r2, #0]
    6de0:	2b00      	cmp	r3, #0
    6de2:	d105      	bne.n	6df0 <_free_r+0x2c>
    6de4:	6063      	str	r3, [r4, #4]
    6de6:	6014      	str	r4, [r2, #0]
    6de8:	0028      	movs	r0, r5
    6dea:	f000 fd00 	bl	77ee <__malloc_unlock>
    6dee:	bd70      	pop	{r4, r5, r6, pc}
    6df0:	42a3      	cmp	r3, r4
    6df2:	d909      	bls.n	6e08 <_free_r+0x44>
    6df4:	6821      	ldr	r1, [r4, #0]
    6df6:	1860      	adds	r0, r4, r1
    6df8:	4283      	cmp	r3, r0
    6dfa:	d1f3      	bne.n	6de4 <_free_r+0x20>
    6dfc:	6818      	ldr	r0, [r3, #0]
    6dfe:	685b      	ldr	r3, [r3, #4]
    6e00:	1841      	adds	r1, r0, r1
    6e02:	6021      	str	r1, [r4, #0]
    6e04:	e7ee      	b.n	6de4 <_free_r+0x20>
    6e06:	0013      	movs	r3, r2
    6e08:	685a      	ldr	r2, [r3, #4]
    6e0a:	2a00      	cmp	r2, #0
    6e0c:	d001      	beq.n	6e12 <_free_r+0x4e>
    6e0e:	42a2      	cmp	r2, r4
    6e10:	d9f9      	bls.n	6e06 <_free_r+0x42>
    6e12:	6819      	ldr	r1, [r3, #0]
    6e14:	1858      	adds	r0, r3, r1
    6e16:	42a0      	cmp	r0, r4
    6e18:	d10b      	bne.n	6e32 <_free_r+0x6e>
    6e1a:	6820      	ldr	r0, [r4, #0]
    6e1c:	1809      	adds	r1, r1, r0
    6e1e:	1858      	adds	r0, r3, r1
    6e20:	6019      	str	r1, [r3, #0]
    6e22:	4282      	cmp	r2, r0
    6e24:	d1e0      	bne.n	6de8 <_free_r+0x24>
    6e26:	6810      	ldr	r0, [r2, #0]
    6e28:	6852      	ldr	r2, [r2, #4]
    6e2a:	1841      	adds	r1, r0, r1
    6e2c:	6019      	str	r1, [r3, #0]
    6e2e:	605a      	str	r2, [r3, #4]
    6e30:	e7da      	b.n	6de8 <_free_r+0x24>
    6e32:	42a0      	cmp	r0, r4
    6e34:	d902      	bls.n	6e3c <_free_r+0x78>
    6e36:	230c      	movs	r3, #12
    6e38:	602b      	str	r3, [r5, #0]
    6e3a:	e7d5      	b.n	6de8 <_free_r+0x24>
    6e3c:	6821      	ldr	r1, [r4, #0]
    6e3e:	1860      	adds	r0, r4, r1
    6e40:	4282      	cmp	r2, r0
    6e42:	d103      	bne.n	6e4c <_free_r+0x88>
    6e44:	6810      	ldr	r0, [r2, #0]
    6e46:	6852      	ldr	r2, [r2, #4]
    6e48:	1841      	adds	r1, r0, r1
    6e4a:	6021      	str	r1, [r4, #0]
    6e4c:	6062      	str	r2, [r4, #4]
    6e4e:	605c      	str	r4, [r3, #4]
    6e50:	e7ca      	b.n	6de8 <_free_r+0x24>
    6e52:	46c0      	nop			; (mov r8, r8)
    6e54:	20000288 	.word	0x20000288

00006e58 <_malloc_r>:
    6e58:	2303      	movs	r3, #3
    6e5a:	b570      	push	{r4, r5, r6, lr}
    6e5c:	1ccd      	adds	r5, r1, #3
    6e5e:	439d      	bics	r5, r3
    6e60:	3508      	adds	r5, #8
    6e62:	0006      	movs	r6, r0
    6e64:	2d0c      	cmp	r5, #12
    6e66:	d21e      	bcs.n	6ea6 <_malloc_r+0x4e>
    6e68:	250c      	movs	r5, #12
    6e6a:	42a9      	cmp	r1, r5
    6e6c:	d81d      	bhi.n	6eaa <_malloc_r+0x52>
    6e6e:	0030      	movs	r0, r6
    6e70:	f000 fcbc 	bl	77ec <__malloc_lock>
    6e74:	4a25      	ldr	r2, [pc, #148]	; (6f0c <_malloc_r+0xb4>)
    6e76:	6814      	ldr	r4, [r2, #0]
    6e78:	0021      	movs	r1, r4
    6e7a:	2900      	cmp	r1, #0
    6e7c:	d119      	bne.n	6eb2 <_malloc_r+0x5a>
    6e7e:	4c24      	ldr	r4, [pc, #144]	; (6f10 <_malloc_r+0xb8>)
    6e80:	6823      	ldr	r3, [r4, #0]
    6e82:	2b00      	cmp	r3, #0
    6e84:	d103      	bne.n	6e8e <_malloc_r+0x36>
    6e86:	0030      	movs	r0, r6
    6e88:	f000 f8dc 	bl	7044 <_sbrk_r>
    6e8c:	6020      	str	r0, [r4, #0]
    6e8e:	0029      	movs	r1, r5
    6e90:	0030      	movs	r0, r6
    6e92:	f000 f8d7 	bl	7044 <_sbrk_r>
    6e96:	1c43      	adds	r3, r0, #1
    6e98:	d12c      	bne.n	6ef4 <_malloc_r+0x9c>
    6e9a:	230c      	movs	r3, #12
    6e9c:	0030      	movs	r0, r6
    6e9e:	6033      	str	r3, [r6, #0]
    6ea0:	f000 fca5 	bl	77ee <__malloc_unlock>
    6ea4:	e003      	b.n	6eae <_malloc_r+0x56>
    6ea6:	2d00      	cmp	r5, #0
    6ea8:	dadf      	bge.n	6e6a <_malloc_r+0x12>
    6eaa:	230c      	movs	r3, #12
    6eac:	6033      	str	r3, [r6, #0]
    6eae:	2000      	movs	r0, #0
    6eb0:	bd70      	pop	{r4, r5, r6, pc}
    6eb2:	680b      	ldr	r3, [r1, #0]
    6eb4:	1b5b      	subs	r3, r3, r5
    6eb6:	d41a      	bmi.n	6eee <_malloc_r+0x96>
    6eb8:	2b0b      	cmp	r3, #11
    6eba:	d903      	bls.n	6ec4 <_malloc_r+0x6c>
    6ebc:	600b      	str	r3, [r1, #0]
    6ebe:	18cc      	adds	r4, r1, r3
    6ec0:	6025      	str	r5, [r4, #0]
    6ec2:	e003      	b.n	6ecc <_malloc_r+0x74>
    6ec4:	428c      	cmp	r4, r1
    6ec6:	d10e      	bne.n	6ee6 <_malloc_r+0x8e>
    6ec8:	6863      	ldr	r3, [r4, #4]
    6eca:	6013      	str	r3, [r2, #0]
    6ecc:	0030      	movs	r0, r6
    6ece:	f000 fc8e 	bl	77ee <__malloc_unlock>
    6ed2:	0020      	movs	r0, r4
    6ed4:	2207      	movs	r2, #7
    6ed6:	300b      	adds	r0, #11
    6ed8:	1d23      	adds	r3, r4, #4
    6eda:	4390      	bics	r0, r2
    6edc:	1ac3      	subs	r3, r0, r3
    6ede:	d0e7      	beq.n	6eb0 <_malloc_r+0x58>
    6ee0:	425a      	negs	r2, r3
    6ee2:	50e2      	str	r2, [r4, r3]
    6ee4:	e7e4      	b.n	6eb0 <_malloc_r+0x58>
    6ee6:	684b      	ldr	r3, [r1, #4]
    6ee8:	6063      	str	r3, [r4, #4]
    6eea:	000c      	movs	r4, r1
    6eec:	e7ee      	b.n	6ecc <_malloc_r+0x74>
    6eee:	000c      	movs	r4, r1
    6ef0:	6849      	ldr	r1, [r1, #4]
    6ef2:	e7c2      	b.n	6e7a <_malloc_r+0x22>
    6ef4:	2303      	movs	r3, #3
    6ef6:	1cc4      	adds	r4, r0, #3
    6ef8:	439c      	bics	r4, r3
    6efa:	42a0      	cmp	r0, r4
    6efc:	d0e0      	beq.n	6ec0 <_malloc_r+0x68>
    6efe:	1a21      	subs	r1, r4, r0
    6f00:	0030      	movs	r0, r6
    6f02:	f000 f89f 	bl	7044 <_sbrk_r>
    6f06:	1c43      	adds	r3, r0, #1
    6f08:	d1da      	bne.n	6ec0 <_malloc_r+0x68>
    6f0a:	e7c6      	b.n	6e9a <_malloc_r+0x42>
    6f0c:	20000288 	.word	0x20000288
    6f10:	2000028c 	.word	0x2000028c

00006f14 <iprintf>:
    6f14:	b40f      	push	{r0, r1, r2, r3}
    6f16:	4b0b      	ldr	r3, [pc, #44]	; (6f44 <iprintf+0x30>)
    6f18:	b513      	push	{r0, r1, r4, lr}
    6f1a:	681c      	ldr	r4, [r3, #0]
    6f1c:	2c00      	cmp	r4, #0
    6f1e:	d005      	beq.n	6f2c <iprintf+0x18>
    6f20:	69a3      	ldr	r3, [r4, #24]
    6f22:	2b00      	cmp	r3, #0
    6f24:	d102      	bne.n	6f2c <iprintf+0x18>
    6f26:	0020      	movs	r0, r4
    6f28:	f000 fb64 	bl	75f4 <__sinit>
    6f2c:	ab05      	add	r3, sp, #20
    6f2e:	9a04      	ldr	r2, [sp, #16]
    6f30:	68a1      	ldr	r1, [r4, #8]
    6f32:	0020      	movs	r0, r4
    6f34:	9301      	str	r3, [sp, #4]
    6f36:	f000 fde9 	bl	7b0c <_vfiprintf_r>
    6f3a:	bc16      	pop	{r1, r2, r4}
    6f3c:	bc08      	pop	{r3}
    6f3e:	b004      	add	sp, #16
    6f40:	4718      	bx	r3
    6f42:	46c0      	nop			; (mov r8, r8)
    6f44:	20000058 	.word	0x20000058

00006f48 <putchar>:
    6f48:	4b08      	ldr	r3, [pc, #32]	; (6f6c <putchar+0x24>)
    6f4a:	b570      	push	{r4, r5, r6, lr}
    6f4c:	681c      	ldr	r4, [r3, #0]
    6f4e:	0005      	movs	r5, r0
    6f50:	2c00      	cmp	r4, #0
    6f52:	d005      	beq.n	6f60 <putchar+0x18>
    6f54:	69a3      	ldr	r3, [r4, #24]
    6f56:	2b00      	cmp	r3, #0
    6f58:	d102      	bne.n	6f60 <putchar+0x18>
    6f5a:	0020      	movs	r0, r4
    6f5c:	f000 fb4a 	bl	75f4 <__sinit>
    6f60:	0029      	movs	r1, r5
    6f62:	68a2      	ldr	r2, [r4, #8]
    6f64:	0020      	movs	r0, r4
    6f66:	f001 f875 	bl	8054 <_putc_r>
    6f6a:	bd70      	pop	{r4, r5, r6, pc}
    6f6c:	20000058 	.word	0x20000058

00006f70 <_puts_r>:
    6f70:	b570      	push	{r4, r5, r6, lr}
    6f72:	0005      	movs	r5, r0
    6f74:	000e      	movs	r6, r1
    6f76:	2800      	cmp	r0, #0
    6f78:	d004      	beq.n	6f84 <_puts_r+0x14>
    6f7a:	6983      	ldr	r3, [r0, #24]
    6f7c:	2b00      	cmp	r3, #0
    6f7e:	d101      	bne.n	6f84 <_puts_r+0x14>
    6f80:	f000 fb38 	bl	75f4 <__sinit>
    6f84:	69ab      	ldr	r3, [r5, #24]
    6f86:	68ac      	ldr	r4, [r5, #8]
    6f88:	2b00      	cmp	r3, #0
    6f8a:	d102      	bne.n	6f92 <_puts_r+0x22>
    6f8c:	0028      	movs	r0, r5
    6f8e:	f000 fb31 	bl	75f4 <__sinit>
    6f92:	4b24      	ldr	r3, [pc, #144]	; (7024 <_puts_r+0xb4>)
    6f94:	429c      	cmp	r4, r3
    6f96:	d10f      	bne.n	6fb8 <_puts_r+0x48>
    6f98:	686c      	ldr	r4, [r5, #4]
    6f9a:	89a3      	ldrh	r3, [r4, #12]
    6f9c:	071b      	lsls	r3, r3, #28
    6f9e:	d502      	bpl.n	6fa6 <_puts_r+0x36>
    6fa0:	6923      	ldr	r3, [r4, #16]
    6fa2:	2b00      	cmp	r3, #0
    6fa4:	d120      	bne.n	6fe8 <_puts_r+0x78>
    6fa6:	0021      	movs	r1, r4
    6fa8:	0028      	movs	r0, r5
    6faa:	f000 f9b5 	bl	7318 <__swsetup_r>
    6fae:	2800      	cmp	r0, #0
    6fb0:	d01a      	beq.n	6fe8 <_puts_r+0x78>
    6fb2:	2001      	movs	r0, #1
    6fb4:	4240      	negs	r0, r0
    6fb6:	bd70      	pop	{r4, r5, r6, pc}
    6fb8:	4b1b      	ldr	r3, [pc, #108]	; (7028 <_puts_r+0xb8>)
    6fba:	429c      	cmp	r4, r3
    6fbc:	d101      	bne.n	6fc2 <_puts_r+0x52>
    6fbe:	68ac      	ldr	r4, [r5, #8]
    6fc0:	e7eb      	b.n	6f9a <_puts_r+0x2a>
    6fc2:	4b1a      	ldr	r3, [pc, #104]	; (702c <_puts_r+0xbc>)
    6fc4:	429c      	cmp	r4, r3
    6fc6:	d1e8      	bne.n	6f9a <_puts_r+0x2a>
    6fc8:	68ec      	ldr	r4, [r5, #12]
    6fca:	e7e6      	b.n	6f9a <_puts_r+0x2a>
    6fcc:	3b01      	subs	r3, #1
    6fce:	3601      	adds	r6, #1
    6fd0:	60a3      	str	r3, [r4, #8]
    6fd2:	2b00      	cmp	r3, #0
    6fd4:	da04      	bge.n	6fe0 <_puts_r+0x70>
    6fd6:	69a2      	ldr	r2, [r4, #24]
    6fd8:	4293      	cmp	r3, r2
    6fda:	db16      	blt.n	700a <_puts_r+0x9a>
    6fdc:	290a      	cmp	r1, #10
    6fde:	d014      	beq.n	700a <_puts_r+0x9a>
    6fe0:	6823      	ldr	r3, [r4, #0]
    6fe2:	1c5a      	adds	r2, r3, #1
    6fe4:	6022      	str	r2, [r4, #0]
    6fe6:	7019      	strb	r1, [r3, #0]
    6fe8:	7831      	ldrb	r1, [r6, #0]
    6fea:	68a3      	ldr	r3, [r4, #8]
    6fec:	2900      	cmp	r1, #0
    6fee:	d1ed      	bne.n	6fcc <_puts_r+0x5c>
    6ff0:	3b01      	subs	r3, #1
    6ff2:	60a3      	str	r3, [r4, #8]
    6ff4:	2b00      	cmp	r3, #0
    6ff6:	da0f      	bge.n	7018 <_puts_r+0xa8>
    6ff8:	0022      	movs	r2, r4
    6ffa:	310a      	adds	r1, #10
    6ffc:	0028      	movs	r0, r5
    6ffe:	f000 f935 	bl	726c <__swbuf_r>
    7002:	1c43      	adds	r3, r0, #1
    7004:	d0d5      	beq.n	6fb2 <_puts_r+0x42>
    7006:	200a      	movs	r0, #10
    7008:	e7d5      	b.n	6fb6 <_puts_r+0x46>
    700a:	0022      	movs	r2, r4
    700c:	0028      	movs	r0, r5
    700e:	f000 f92d 	bl	726c <__swbuf_r>
    7012:	1c43      	adds	r3, r0, #1
    7014:	d1e8      	bne.n	6fe8 <_puts_r+0x78>
    7016:	e7cc      	b.n	6fb2 <_puts_r+0x42>
    7018:	200a      	movs	r0, #10
    701a:	6823      	ldr	r3, [r4, #0]
    701c:	1c5a      	adds	r2, r3, #1
    701e:	6022      	str	r2, [r4, #0]
    7020:	7018      	strb	r0, [r3, #0]
    7022:	e7c8      	b.n	6fb6 <_puts_r+0x46>
    7024:	00009460 	.word	0x00009460
    7028:	00009480 	.word	0x00009480
    702c:	00009440 	.word	0x00009440

00007030 <puts>:
    7030:	b510      	push	{r4, lr}
    7032:	4b03      	ldr	r3, [pc, #12]	; (7040 <puts+0x10>)
    7034:	0001      	movs	r1, r0
    7036:	6818      	ldr	r0, [r3, #0]
    7038:	f7ff ff9a 	bl	6f70 <_puts_r>
    703c:	bd10      	pop	{r4, pc}
    703e:	46c0      	nop			; (mov r8, r8)
    7040:	20000058 	.word	0x20000058

00007044 <_sbrk_r>:
    7044:	2300      	movs	r3, #0
    7046:	b570      	push	{r4, r5, r6, lr}
    7048:	4c06      	ldr	r4, [pc, #24]	; (7064 <_sbrk_r+0x20>)
    704a:	0005      	movs	r5, r0
    704c:	0008      	movs	r0, r1
    704e:	6023      	str	r3, [r4, #0]
    7050:	f7fe f9ba 	bl	53c8 <_sbrk>
    7054:	1c43      	adds	r3, r0, #1
    7056:	d103      	bne.n	7060 <_sbrk_r+0x1c>
    7058:	6823      	ldr	r3, [r4, #0]
    705a:	2b00      	cmp	r3, #0
    705c:	d000      	beq.n	7060 <_sbrk_r+0x1c>
    705e:	602b      	str	r3, [r5, #0]
    7060:	bd70      	pop	{r4, r5, r6, pc}
    7062:	46c0      	nop			; (mov r8, r8)
    7064:	20000488 	.word	0x20000488

00007068 <setbuf>:
    7068:	424a      	negs	r2, r1
    706a:	414a      	adcs	r2, r1
    706c:	2380      	movs	r3, #128	; 0x80
    706e:	b510      	push	{r4, lr}
    7070:	0052      	lsls	r2, r2, #1
    7072:	00db      	lsls	r3, r3, #3
    7074:	f000 f802 	bl	707c <setvbuf>
    7078:	bd10      	pop	{r4, pc}
	...

0000707c <setvbuf>:
    707c:	b5f0      	push	{r4, r5, r6, r7, lr}
    707e:	001d      	movs	r5, r3
    7080:	4b4f      	ldr	r3, [pc, #316]	; (71c0 <setvbuf+0x144>)
    7082:	b085      	sub	sp, #20
    7084:	681e      	ldr	r6, [r3, #0]
    7086:	0004      	movs	r4, r0
    7088:	000f      	movs	r7, r1
    708a:	9200      	str	r2, [sp, #0]
    708c:	2e00      	cmp	r6, #0
    708e:	d005      	beq.n	709c <setvbuf+0x20>
    7090:	69b3      	ldr	r3, [r6, #24]
    7092:	2b00      	cmp	r3, #0
    7094:	d102      	bne.n	709c <setvbuf+0x20>
    7096:	0030      	movs	r0, r6
    7098:	f000 faac 	bl	75f4 <__sinit>
    709c:	4b49      	ldr	r3, [pc, #292]	; (71c4 <setvbuf+0x148>)
    709e:	429c      	cmp	r4, r3
    70a0:	d150      	bne.n	7144 <setvbuf+0xc8>
    70a2:	6874      	ldr	r4, [r6, #4]
    70a4:	9b00      	ldr	r3, [sp, #0]
    70a6:	2b02      	cmp	r3, #2
    70a8:	d005      	beq.n	70b6 <setvbuf+0x3a>
    70aa:	2b01      	cmp	r3, #1
    70ac:	d900      	bls.n	70b0 <setvbuf+0x34>
    70ae:	e084      	b.n	71ba <setvbuf+0x13e>
    70b0:	2d00      	cmp	r5, #0
    70b2:	da00      	bge.n	70b6 <setvbuf+0x3a>
    70b4:	e081      	b.n	71ba <setvbuf+0x13e>
    70b6:	0021      	movs	r1, r4
    70b8:	0030      	movs	r0, r6
    70ba:	f000 fa2d 	bl	7518 <_fflush_r>
    70be:	6b61      	ldr	r1, [r4, #52]	; 0x34
    70c0:	2900      	cmp	r1, #0
    70c2:	d008      	beq.n	70d6 <setvbuf+0x5a>
    70c4:	0023      	movs	r3, r4
    70c6:	3344      	adds	r3, #68	; 0x44
    70c8:	4299      	cmp	r1, r3
    70ca:	d002      	beq.n	70d2 <setvbuf+0x56>
    70cc:	0030      	movs	r0, r6
    70ce:	f7ff fe79 	bl	6dc4 <_free_r>
    70d2:	2300      	movs	r3, #0
    70d4:	6363      	str	r3, [r4, #52]	; 0x34
    70d6:	2300      	movs	r3, #0
    70d8:	61a3      	str	r3, [r4, #24]
    70da:	6063      	str	r3, [r4, #4]
    70dc:	89a3      	ldrh	r3, [r4, #12]
    70de:	061b      	lsls	r3, r3, #24
    70e0:	d503      	bpl.n	70ea <setvbuf+0x6e>
    70e2:	6921      	ldr	r1, [r4, #16]
    70e4:	0030      	movs	r0, r6
    70e6:	f7ff fe6d 	bl	6dc4 <_free_r>
    70ea:	89a3      	ldrh	r3, [r4, #12]
    70ec:	4a36      	ldr	r2, [pc, #216]	; (71c8 <setvbuf+0x14c>)
    70ee:	4013      	ands	r3, r2
    70f0:	81a3      	strh	r3, [r4, #12]
    70f2:	9b00      	ldr	r3, [sp, #0]
    70f4:	2b02      	cmp	r3, #2
    70f6:	d05a      	beq.n	71ae <setvbuf+0x132>
    70f8:	ab03      	add	r3, sp, #12
    70fa:	aa02      	add	r2, sp, #8
    70fc:	0021      	movs	r1, r4
    70fe:	0030      	movs	r0, r6
    7100:	f000 fb0e 	bl	7720 <__swhatbuf_r>
    7104:	89a3      	ldrh	r3, [r4, #12]
    7106:	4318      	orrs	r0, r3
    7108:	81a0      	strh	r0, [r4, #12]
    710a:	2d00      	cmp	r5, #0
    710c:	d124      	bne.n	7158 <setvbuf+0xdc>
    710e:	9d02      	ldr	r5, [sp, #8]
    7110:	0028      	movs	r0, r5
    7112:	f7ff fe29 	bl	6d68 <malloc>
    7116:	9501      	str	r5, [sp, #4]
    7118:	1e07      	subs	r7, r0, #0
    711a:	d142      	bne.n	71a2 <setvbuf+0x126>
    711c:	9b02      	ldr	r3, [sp, #8]
    711e:	9301      	str	r3, [sp, #4]
    7120:	42ab      	cmp	r3, r5
    7122:	d139      	bne.n	7198 <setvbuf+0x11c>
    7124:	2001      	movs	r0, #1
    7126:	4240      	negs	r0, r0
    7128:	2302      	movs	r3, #2
    712a:	89a2      	ldrh	r2, [r4, #12]
    712c:	4313      	orrs	r3, r2
    712e:	81a3      	strh	r3, [r4, #12]
    7130:	2300      	movs	r3, #0
    7132:	60a3      	str	r3, [r4, #8]
    7134:	0023      	movs	r3, r4
    7136:	3347      	adds	r3, #71	; 0x47
    7138:	6023      	str	r3, [r4, #0]
    713a:	6123      	str	r3, [r4, #16]
    713c:	2301      	movs	r3, #1
    713e:	6163      	str	r3, [r4, #20]
    7140:	b005      	add	sp, #20
    7142:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7144:	4b21      	ldr	r3, [pc, #132]	; (71cc <setvbuf+0x150>)
    7146:	429c      	cmp	r4, r3
    7148:	d101      	bne.n	714e <setvbuf+0xd2>
    714a:	68b4      	ldr	r4, [r6, #8]
    714c:	e7aa      	b.n	70a4 <setvbuf+0x28>
    714e:	4b20      	ldr	r3, [pc, #128]	; (71d0 <setvbuf+0x154>)
    7150:	429c      	cmp	r4, r3
    7152:	d1a7      	bne.n	70a4 <setvbuf+0x28>
    7154:	68f4      	ldr	r4, [r6, #12]
    7156:	e7a5      	b.n	70a4 <setvbuf+0x28>
    7158:	2f00      	cmp	r7, #0
    715a:	d0d9      	beq.n	7110 <setvbuf+0x94>
    715c:	69b3      	ldr	r3, [r6, #24]
    715e:	2b00      	cmp	r3, #0
    7160:	d102      	bne.n	7168 <setvbuf+0xec>
    7162:	0030      	movs	r0, r6
    7164:	f000 fa46 	bl	75f4 <__sinit>
    7168:	9b00      	ldr	r3, [sp, #0]
    716a:	2b01      	cmp	r3, #1
    716c:	d103      	bne.n	7176 <setvbuf+0xfa>
    716e:	89a3      	ldrh	r3, [r4, #12]
    7170:	9a00      	ldr	r2, [sp, #0]
    7172:	431a      	orrs	r2, r3
    7174:	81a2      	strh	r2, [r4, #12]
    7176:	2008      	movs	r0, #8
    7178:	89a3      	ldrh	r3, [r4, #12]
    717a:	6027      	str	r7, [r4, #0]
    717c:	6127      	str	r7, [r4, #16]
    717e:	6165      	str	r5, [r4, #20]
    7180:	4018      	ands	r0, r3
    7182:	d018      	beq.n	71b6 <setvbuf+0x13a>
    7184:	2001      	movs	r0, #1
    7186:	4018      	ands	r0, r3
    7188:	2300      	movs	r3, #0
    718a:	4298      	cmp	r0, r3
    718c:	d011      	beq.n	71b2 <setvbuf+0x136>
    718e:	426d      	negs	r5, r5
    7190:	60a3      	str	r3, [r4, #8]
    7192:	61a5      	str	r5, [r4, #24]
    7194:	0018      	movs	r0, r3
    7196:	e7d3      	b.n	7140 <setvbuf+0xc4>
    7198:	9801      	ldr	r0, [sp, #4]
    719a:	f7ff fde5 	bl	6d68 <malloc>
    719e:	1e07      	subs	r7, r0, #0
    71a0:	d0c0      	beq.n	7124 <setvbuf+0xa8>
    71a2:	2380      	movs	r3, #128	; 0x80
    71a4:	89a2      	ldrh	r2, [r4, #12]
    71a6:	9d01      	ldr	r5, [sp, #4]
    71a8:	4313      	orrs	r3, r2
    71aa:	81a3      	strh	r3, [r4, #12]
    71ac:	e7d6      	b.n	715c <setvbuf+0xe0>
    71ae:	2000      	movs	r0, #0
    71b0:	e7ba      	b.n	7128 <setvbuf+0xac>
    71b2:	60a5      	str	r5, [r4, #8]
    71b4:	e7c4      	b.n	7140 <setvbuf+0xc4>
    71b6:	60a0      	str	r0, [r4, #8]
    71b8:	e7c2      	b.n	7140 <setvbuf+0xc4>
    71ba:	2001      	movs	r0, #1
    71bc:	4240      	negs	r0, r0
    71be:	e7bf      	b.n	7140 <setvbuf+0xc4>
    71c0:	20000058 	.word	0x20000058
    71c4:	00009460 	.word	0x00009460
    71c8:	fffff35c 	.word	0xfffff35c
    71cc:	00009480 	.word	0x00009480
    71d0:	00009440 	.word	0x00009440

000071d4 <siprintf>:
    71d4:	b40e      	push	{r1, r2, r3}
    71d6:	b510      	push	{r4, lr}
    71d8:	b09d      	sub	sp, #116	; 0x74
    71da:	a902      	add	r1, sp, #8
    71dc:	9002      	str	r0, [sp, #8]
    71de:	6108      	str	r0, [r1, #16]
    71e0:	480b      	ldr	r0, [pc, #44]	; (7210 <siprintf+0x3c>)
    71e2:	2482      	movs	r4, #130	; 0x82
    71e4:	6088      	str	r0, [r1, #8]
    71e6:	6148      	str	r0, [r1, #20]
    71e8:	2001      	movs	r0, #1
    71ea:	4240      	negs	r0, r0
    71ec:	ab1f      	add	r3, sp, #124	; 0x7c
    71ee:	81c8      	strh	r0, [r1, #14]
    71f0:	4808      	ldr	r0, [pc, #32]	; (7214 <siprintf+0x40>)
    71f2:	cb04      	ldmia	r3!, {r2}
    71f4:	00a4      	lsls	r4, r4, #2
    71f6:	6800      	ldr	r0, [r0, #0]
    71f8:	9301      	str	r3, [sp, #4]
    71fa:	818c      	strh	r4, [r1, #12]
    71fc:	f000 fb5a 	bl	78b4 <_svfiprintf_r>
    7200:	2300      	movs	r3, #0
    7202:	9a02      	ldr	r2, [sp, #8]
    7204:	7013      	strb	r3, [r2, #0]
    7206:	b01d      	add	sp, #116	; 0x74
    7208:	bc10      	pop	{r4}
    720a:	bc08      	pop	{r3}
    720c:	b003      	add	sp, #12
    720e:	4718      	bx	r3
    7210:	7fffffff 	.word	0x7fffffff
    7214:	20000058 	.word	0x20000058

00007218 <strcmp>:
    7218:	7802      	ldrb	r2, [r0, #0]
    721a:	780b      	ldrb	r3, [r1, #0]
    721c:	2a00      	cmp	r2, #0
    721e:	d003      	beq.n	7228 <strcmp+0x10>
    7220:	3001      	adds	r0, #1
    7222:	3101      	adds	r1, #1
    7224:	429a      	cmp	r2, r3
    7226:	d0f7      	beq.n	7218 <strcmp>
    7228:	1ad0      	subs	r0, r2, r3
    722a:	4770      	bx	lr

0000722c <strcpy>:
    722c:	1c03      	adds	r3, r0, #0
    722e:	780a      	ldrb	r2, [r1, #0]
    7230:	3101      	adds	r1, #1
    7232:	701a      	strb	r2, [r3, #0]
    7234:	3301      	adds	r3, #1
    7236:	2a00      	cmp	r2, #0
    7238:	d1f9      	bne.n	722e <strcpy+0x2>
    723a:	4770      	bx	lr

0000723c <strlen>:
    723c:	2300      	movs	r3, #0
    723e:	5cc2      	ldrb	r2, [r0, r3]
    7240:	3301      	adds	r3, #1
    7242:	2a00      	cmp	r2, #0
    7244:	d1fb      	bne.n	723e <strlen+0x2>
    7246:	1e58      	subs	r0, r3, #1
    7248:	4770      	bx	lr

0000724a <strncmp>:
    724a:	2300      	movs	r3, #0
    724c:	b530      	push	{r4, r5, lr}
    724e:	429a      	cmp	r2, r3
    7250:	d00a      	beq.n	7268 <strncmp+0x1e>
    7252:	3a01      	subs	r2, #1
    7254:	5cc4      	ldrb	r4, [r0, r3]
    7256:	5ccd      	ldrb	r5, [r1, r3]
    7258:	42ac      	cmp	r4, r5
    725a:	d104      	bne.n	7266 <strncmp+0x1c>
    725c:	429a      	cmp	r2, r3
    725e:	d002      	beq.n	7266 <strncmp+0x1c>
    7260:	3301      	adds	r3, #1
    7262:	2c00      	cmp	r4, #0
    7264:	d1f6      	bne.n	7254 <strncmp+0xa>
    7266:	1b63      	subs	r3, r4, r5
    7268:	0018      	movs	r0, r3
    726a:	bd30      	pop	{r4, r5, pc}

0000726c <__swbuf_r>:
    726c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    726e:	0005      	movs	r5, r0
    7270:	000e      	movs	r6, r1
    7272:	0014      	movs	r4, r2
    7274:	2800      	cmp	r0, #0
    7276:	d004      	beq.n	7282 <__swbuf_r+0x16>
    7278:	6983      	ldr	r3, [r0, #24]
    727a:	2b00      	cmp	r3, #0
    727c:	d101      	bne.n	7282 <__swbuf_r+0x16>
    727e:	f000 f9b9 	bl	75f4 <__sinit>
    7282:	4b22      	ldr	r3, [pc, #136]	; (730c <__swbuf_r+0xa0>)
    7284:	429c      	cmp	r4, r3
    7286:	d12d      	bne.n	72e4 <__swbuf_r+0x78>
    7288:	686c      	ldr	r4, [r5, #4]
    728a:	69a3      	ldr	r3, [r4, #24]
    728c:	60a3      	str	r3, [r4, #8]
    728e:	89a3      	ldrh	r3, [r4, #12]
    7290:	071b      	lsls	r3, r3, #28
    7292:	d531      	bpl.n	72f8 <__swbuf_r+0x8c>
    7294:	6923      	ldr	r3, [r4, #16]
    7296:	2b00      	cmp	r3, #0
    7298:	d02e      	beq.n	72f8 <__swbuf_r+0x8c>
    729a:	6823      	ldr	r3, [r4, #0]
    729c:	6922      	ldr	r2, [r4, #16]
    729e:	b2f7      	uxtb	r7, r6
    72a0:	1a98      	subs	r0, r3, r2
    72a2:	6963      	ldr	r3, [r4, #20]
    72a4:	b2f6      	uxtb	r6, r6
    72a6:	4298      	cmp	r0, r3
    72a8:	db05      	blt.n	72b6 <__swbuf_r+0x4a>
    72aa:	0021      	movs	r1, r4
    72ac:	0028      	movs	r0, r5
    72ae:	f000 f933 	bl	7518 <_fflush_r>
    72b2:	2800      	cmp	r0, #0
    72b4:	d126      	bne.n	7304 <__swbuf_r+0x98>
    72b6:	68a3      	ldr	r3, [r4, #8]
    72b8:	3001      	adds	r0, #1
    72ba:	3b01      	subs	r3, #1
    72bc:	60a3      	str	r3, [r4, #8]
    72be:	6823      	ldr	r3, [r4, #0]
    72c0:	1c5a      	adds	r2, r3, #1
    72c2:	6022      	str	r2, [r4, #0]
    72c4:	701f      	strb	r7, [r3, #0]
    72c6:	6963      	ldr	r3, [r4, #20]
    72c8:	4298      	cmp	r0, r3
    72ca:	d004      	beq.n	72d6 <__swbuf_r+0x6a>
    72cc:	89a3      	ldrh	r3, [r4, #12]
    72ce:	07db      	lsls	r3, r3, #31
    72d0:	d51a      	bpl.n	7308 <__swbuf_r+0x9c>
    72d2:	2e0a      	cmp	r6, #10
    72d4:	d118      	bne.n	7308 <__swbuf_r+0x9c>
    72d6:	0021      	movs	r1, r4
    72d8:	0028      	movs	r0, r5
    72da:	f000 f91d 	bl	7518 <_fflush_r>
    72de:	2800      	cmp	r0, #0
    72e0:	d012      	beq.n	7308 <__swbuf_r+0x9c>
    72e2:	e00f      	b.n	7304 <__swbuf_r+0x98>
    72e4:	4b0a      	ldr	r3, [pc, #40]	; (7310 <__swbuf_r+0xa4>)
    72e6:	429c      	cmp	r4, r3
    72e8:	d101      	bne.n	72ee <__swbuf_r+0x82>
    72ea:	68ac      	ldr	r4, [r5, #8]
    72ec:	e7cd      	b.n	728a <__swbuf_r+0x1e>
    72ee:	4b09      	ldr	r3, [pc, #36]	; (7314 <__swbuf_r+0xa8>)
    72f0:	429c      	cmp	r4, r3
    72f2:	d1ca      	bne.n	728a <__swbuf_r+0x1e>
    72f4:	68ec      	ldr	r4, [r5, #12]
    72f6:	e7c8      	b.n	728a <__swbuf_r+0x1e>
    72f8:	0021      	movs	r1, r4
    72fa:	0028      	movs	r0, r5
    72fc:	f000 f80c 	bl	7318 <__swsetup_r>
    7300:	2800      	cmp	r0, #0
    7302:	d0ca      	beq.n	729a <__swbuf_r+0x2e>
    7304:	2601      	movs	r6, #1
    7306:	4276      	negs	r6, r6
    7308:	0030      	movs	r0, r6
    730a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    730c:	00009460 	.word	0x00009460
    7310:	00009480 	.word	0x00009480
    7314:	00009440 	.word	0x00009440

00007318 <__swsetup_r>:
    7318:	4b36      	ldr	r3, [pc, #216]	; (73f4 <__swsetup_r+0xdc>)
    731a:	b570      	push	{r4, r5, r6, lr}
    731c:	681d      	ldr	r5, [r3, #0]
    731e:	0006      	movs	r6, r0
    7320:	000c      	movs	r4, r1
    7322:	2d00      	cmp	r5, #0
    7324:	d005      	beq.n	7332 <__swsetup_r+0x1a>
    7326:	69ab      	ldr	r3, [r5, #24]
    7328:	2b00      	cmp	r3, #0
    732a:	d102      	bne.n	7332 <__swsetup_r+0x1a>
    732c:	0028      	movs	r0, r5
    732e:	f000 f961 	bl	75f4 <__sinit>
    7332:	4b31      	ldr	r3, [pc, #196]	; (73f8 <__swsetup_r+0xe0>)
    7334:	429c      	cmp	r4, r3
    7336:	d10f      	bne.n	7358 <__swsetup_r+0x40>
    7338:	686c      	ldr	r4, [r5, #4]
    733a:	230c      	movs	r3, #12
    733c:	5ee2      	ldrsh	r2, [r4, r3]
    733e:	b293      	uxth	r3, r2
    7340:	0719      	lsls	r1, r3, #28
    7342:	d42d      	bmi.n	73a0 <__swsetup_r+0x88>
    7344:	06d9      	lsls	r1, r3, #27
    7346:	d411      	bmi.n	736c <__swsetup_r+0x54>
    7348:	2309      	movs	r3, #9
    734a:	2001      	movs	r0, #1
    734c:	6033      	str	r3, [r6, #0]
    734e:	3337      	adds	r3, #55	; 0x37
    7350:	4313      	orrs	r3, r2
    7352:	81a3      	strh	r3, [r4, #12]
    7354:	4240      	negs	r0, r0
    7356:	bd70      	pop	{r4, r5, r6, pc}
    7358:	4b28      	ldr	r3, [pc, #160]	; (73fc <__swsetup_r+0xe4>)
    735a:	429c      	cmp	r4, r3
    735c:	d101      	bne.n	7362 <__swsetup_r+0x4a>
    735e:	68ac      	ldr	r4, [r5, #8]
    7360:	e7eb      	b.n	733a <__swsetup_r+0x22>
    7362:	4b27      	ldr	r3, [pc, #156]	; (7400 <__swsetup_r+0xe8>)
    7364:	429c      	cmp	r4, r3
    7366:	d1e8      	bne.n	733a <__swsetup_r+0x22>
    7368:	68ec      	ldr	r4, [r5, #12]
    736a:	e7e6      	b.n	733a <__swsetup_r+0x22>
    736c:	075b      	lsls	r3, r3, #29
    736e:	d513      	bpl.n	7398 <__swsetup_r+0x80>
    7370:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7372:	2900      	cmp	r1, #0
    7374:	d008      	beq.n	7388 <__swsetup_r+0x70>
    7376:	0023      	movs	r3, r4
    7378:	3344      	adds	r3, #68	; 0x44
    737a:	4299      	cmp	r1, r3
    737c:	d002      	beq.n	7384 <__swsetup_r+0x6c>
    737e:	0030      	movs	r0, r6
    7380:	f7ff fd20 	bl	6dc4 <_free_r>
    7384:	2300      	movs	r3, #0
    7386:	6363      	str	r3, [r4, #52]	; 0x34
    7388:	2224      	movs	r2, #36	; 0x24
    738a:	89a3      	ldrh	r3, [r4, #12]
    738c:	4393      	bics	r3, r2
    738e:	81a3      	strh	r3, [r4, #12]
    7390:	2300      	movs	r3, #0
    7392:	6063      	str	r3, [r4, #4]
    7394:	6923      	ldr	r3, [r4, #16]
    7396:	6023      	str	r3, [r4, #0]
    7398:	2308      	movs	r3, #8
    739a:	89a2      	ldrh	r2, [r4, #12]
    739c:	4313      	orrs	r3, r2
    739e:	81a3      	strh	r3, [r4, #12]
    73a0:	6923      	ldr	r3, [r4, #16]
    73a2:	2b00      	cmp	r3, #0
    73a4:	d10b      	bne.n	73be <__swsetup_r+0xa6>
    73a6:	21a0      	movs	r1, #160	; 0xa0
    73a8:	2280      	movs	r2, #128	; 0x80
    73aa:	89a3      	ldrh	r3, [r4, #12]
    73ac:	0089      	lsls	r1, r1, #2
    73ae:	0092      	lsls	r2, r2, #2
    73b0:	400b      	ands	r3, r1
    73b2:	4293      	cmp	r3, r2
    73b4:	d003      	beq.n	73be <__swsetup_r+0xa6>
    73b6:	0021      	movs	r1, r4
    73b8:	0030      	movs	r0, r6
    73ba:	f000 f9d9 	bl	7770 <__smakebuf_r>
    73be:	2301      	movs	r3, #1
    73c0:	89a2      	ldrh	r2, [r4, #12]
    73c2:	4013      	ands	r3, r2
    73c4:	d011      	beq.n	73ea <__swsetup_r+0xd2>
    73c6:	2300      	movs	r3, #0
    73c8:	60a3      	str	r3, [r4, #8]
    73ca:	6963      	ldr	r3, [r4, #20]
    73cc:	425b      	negs	r3, r3
    73ce:	61a3      	str	r3, [r4, #24]
    73d0:	2000      	movs	r0, #0
    73d2:	6923      	ldr	r3, [r4, #16]
    73d4:	4283      	cmp	r3, r0
    73d6:	d1be      	bne.n	7356 <__swsetup_r+0x3e>
    73d8:	230c      	movs	r3, #12
    73da:	5ee2      	ldrsh	r2, [r4, r3]
    73dc:	0613      	lsls	r3, r2, #24
    73de:	d5ba      	bpl.n	7356 <__swsetup_r+0x3e>
    73e0:	2340      	movs	r3, #64	; 0x40
    73e2:	4313      	orrs	r3, r2
    73e4:	81a3      	strh	r3, [r4, #12]
    73e6:	3801      	subs	r0, #1
    73e8:	e7b5      	b.n	7356 <__swsetup_r+0x3e>
    73ea:	0792      	lsls	r2, r2, #30
    73ec:	d400      	bmi.n	73f0 <__swsetup_r+0xd8>
    73ee:	6963      	ldr	r3, [r4, #20]
    73f0:	60a3      	str	r3, [r4, #8]
    73f2:	e7ed      	b.n	73d0 <__swsetup_r+0xb8>
    73f4:	20000058 	.word	0x20000058
    73f8:	00009460 	.word	0x00009460
    73fc:	00009480 	.word	0x00009480
    7400:	00009440 	.word	0x00009440

00007404 <__sflush_r>:
    7404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7406:	898a      	ldrh	r2, [r1, #12]
    7408:	0005      	movs	r5, r0
    740a:	000c      	movs	r4, r1
    740c:	0713      	lsls	r3, r2, #28
    740e:	d460      	bmi.n	74d2 <__sflush_r+0xce>
    7410:	684b      	ldr	r3, [r1, #4]
    7412:	2b00      	cmp	r3, #0
    7414:	dc04      	bgt.n	7420 <__sflush_r+0x1c>
    7416:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    7418:	2b00      	cmp	r3, #0
    741a:	dc01      	bgt.n	7420 <__sflush_r+0x1c>
    741c:	2000      	movs	r0, #0
    741e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7420:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    7422:	2f00      	cmp	r7, #0
    7424:	d0fa      	beq.n	741c <__sflush_r+0x18>
    7426:	2300      	movs	r3, #0
    7428:	682e      	ldr	r6, [r5, #0]
    742a:	602b      	str	r3, [r5, #0]
    742c:	2380      	movs	r3, #128	; 0x80
    742e:	015b      	lsls	r3, r3, #5
    7430:	401a      	ands	r2, r3
    7432:	d034      	beq.n	749e <__sflush_r+0x9a>
    7434:	6d60      	ldr	r0, [r4, #84]	; 0x54
    7436:	89a3      	ldrh	r3, [r4, #12]
    7438:	075b      	lsls	r3, r3, #29
    743a:	d506      	bpl.n	744a <__sflush_r+0x46>
    743c:	6863      	ldr	r3, [r4, #4]
    743e:	1ac0      	subs	r0, r0, r3
    7440:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7442:	2b00      	cmp	r3, #0
    7444:	d001      	beq.n	744a <__sflush_r+0x46>
    7446:	6c23      	ldr	r3, [r4, #64]	; 0x40
    7448:	1ac0      	subs	r0, r0, r3
    744a:	0002      	movs	r2, r0
    744c:	6a21      	ldr	r1, [r4, #32]
    744e:	2300      	movs	r3, #0
    7450:	0028      	movs	r0, r5
    7452:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    7454:	47b8      	blx	r7
    7456:	89a1      	ldrh	r1, [r4, #12]
    7458:	1c43      	adds	r3, r0, #1
    745a:	d106      	bne.n	746a <__sflush_r+0x66>
    745c:	682b      	ldr	r3, [r5, #0]
    745e:	2b1d      	cmp	r3, #29
    7460:	d831      	bhi.n	74c6 <__sflush_r+0xc2>
    7462:	4a2c      	ldr	r2, [pc, #176]	; (7514 <__sflush_r+0x110>)
    7464:	40da      	lsrs	r2, r3
    7466:	07d3      	lsls	r3, r2, #31
    7468:	d52d      	bpl.n	74c6 <__sflush_r+0xc2>
    746a:	2300      	movs	r3, #0
    746c:	6063      	str	r3, [r4, #4]
    746e:	6923      	ldr	r3, [r4, #16]
    7470:	6023      	str	r3, [r4, #0]
    7472:	04cb      	lsls	r3, r1, #19
    7474:	d505      	bpl.n	7482 <__sflush_r+0x7e>
    7476:	1c43      	adds	r3, r0, #1
    7478:	d102      	bne.n	7480 <__sflush_r+0x7c>
    747a:	682b      	ldr	r3, [r5, #0]
    747c:	2b00      	cmp	r3, #0
    747e:	d100      	bne.n	7482 <__sflush_r+0x7e>
    7480:	6560      	str	r0, [r4, #84]	; 0x54
    7482:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7484:	602e      	str	r6, [r5, #0]
    7486:	2900      	cmp	r1, #0
    7488:	d0c8      	beq.n	741c <__sflush_r+0x18>
    748a:	0023      	movs	r3, r4
    748c:	3344      	adds	r3, #68	; 0x44
    748e:	4299      	cmp	r1, r3
    7490:	d002      	beq.n	7498 <__sflush_r+0x94>
    7492:	0028      	movs	r0, r5
    7494:	f7ff fc96 	bl	6dc4 <_free_r>
    7498:	2000      	movs	r0, #0
    749a:	6360      	str	r0, [r4, #52]	; 0x34
    749c:	e7bf      	b.n	741e <__sflush_r+0x1a>
    749e:	2301      	movs	r3, #1
    74a0:	6a21      	ldr	r1, [r4, #32]
    74a2:	0028      	movs	r0, r5
    74a4:	47b8      	blx	r7
    74a6:	1c43      	adds	r3, r0, #1
    74a8:	d1c5      	bne.n	7436 <__sflush_r+0x32>
    74aa:	682b      	ldr	r3, [r5, #0]
    74ac:	2b00      	cmp	r3, #0
    74ae:	d0c2      	beq.n	7436 <__sflush_r+0x32>
    74b0:	2b1d      	cmp	r3, #29
    74b2:	d001      	beq.n	74b8 <__sflush_r+0xb4>
    74b4:	2b16      	cmp	r3, #22
    74b6:	d101      	bne.n	74bc <__sflush_r+0xb8>
    74b8:	602e      	str	r6, [r5, #0]
    74ba:	e7af      	b.n	741c <__sflush_r+0x18>
    74bc:	2340      	movs	r3, #64	; 0x40
    74be:	89a2      	ldrh	r2, [r4, #12]
    74c0:	4313      	orrs	r3, r2
    74c2:	81a3      	strh	r3, [r4, #12]
    74c4:	e7ab      	b.n	741e <__sflush_r+0x1a>
    74c6:	2340      	movs	r3, #64	; 0x40
    74c8:	430b      	orrs	r3, r1
    74ca:	2001      	movs	r0, #1
    74cc:	81a3      	strh	r3, [r4, #12]
    74ce:	4240      	negs	r0, r0
    74d0:	e7a5      	b.n	741e <__sflush_r+0x1a>
    74d2:	690f      	ldr	r7, [r1, #16]
    74d4:	2f00      	cmp	r7, #0
    74d6:	d0a1      	beq.n	741c <__sflush_r+0x18>
    74d8:	680b      	ldr	r3, [r1, #0]
    74da:	600f      	str	r7, [r1, #0]
    74dc:	1bdb      	subs	r3, r3, r7
    74de:	9301      	str	r3, [sp, #4]
    74e0:	2300      	movs	r3, #0
    74e2:	0792      	lsls	r2, r2, #30
    74e4:	d100      	bne.n	74e8 <__sflush_r+0xe4>
    74e6:	694b      	ldr	r3, [r1, #20]
    74e8:	60a3      	str	r3, [r4, #8]
    74ea:	9b01      	ldr	r3, [sp, #4]
    74ec:	2b00      	cmp	r3, #0
    74ee:	dc00      	bgt.n	74f2 <__sflush_r+0xee>
    74f0:	e794      	b.n	741c <__sflush_r+0x18>
    74f2:	9b01      	ldr	r3, [sp, #4]
    74f4:	003a      	movs	r2, r7
    74f6:	6a21      	ldr	r1, [r4, #32]
    74f8:	0028      	movs	r0, r5
    74fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    74fc:	47b0      	blx	r6
    74fe:	2800      	cmp	r0, #0
    7500:	dc03      	bgt.n	750a <__sflush_r+0x106>
    7502:	2340      	movs	r3, #64	; 0x40
    7504:	89a2      	ldrh	r2, [r4, #12]
    7506:	4313      	orrs	r3, r2
    7508:	e7df      	b.n	74ca <__sflush_r+0xc6>
    750a:	9b01      	ldr	r3, [sp, #4]
    750c:	183f      	adds	r7, r7, r0
    750e:	1a1b      	subs	r3, r3, r0
    7510:	9301      	str	r3, [sp, #4]
    7512:	e7ea      	b.n	74ea <__sflush_r+0xe6>
    7514:	20400001 	.word	0x20400001

00007518 <_fflush_r>:
    7518:	690b      	ldr	r3, [r1, #16]
    751a:	b570      	push	{r4, r5, r6, lr}
    751c:	0005      	movs	r5, r0
    751e:	000c      	movs	r4, r1
    7520:	2b00      	cmp	r3, #0
    7522:	d101      	bne.n	7528 <_fflush_r+0x10>
    7524:	2000      	movs	r0, #0
    7526:	bd70      	pop	{r4, r5, r6, pc}
    7528:	2800      	cmp	r0, #0
    752a:	d004      	beq.n	7536 <_fflush_r+0x1e>
    752c:	6983      	ldr	r3, [r0, #24]
    752e:	2b00      	cmp	r3, #0
    7530:	d101      	bne.n	7536 <_fflush_r+0x1e>
    7532:	f000 f85f 	bl	75f4 <__sinit>
    7536:	4b0b      	ldr	r3, [pc, #44]	; (7564 <_fflush_r+0x4c>)
    7538:	429c      	cmp	r4, r3
    753a:	d109      	bne.n	7550 <_fflush_r+0x38>
    753c:	686c      	ldr	r4, [r5, #4]
    753e:	220c      	movs	r2, #12
    7540:	5ea3      	ldrsh	r3, [r4, r2]
    7542:	2b00      	cmp	r3, #0
    7544:	d0ee      	beq.n	7524 <_fflush_r+0xc>
    7546:	0021      	movs	r1, r4
    7548:	0028      	movs	r0, r5
    754a:	f7ff ff5b 	bl	7404 <__sflush_r>
    754e:	e7ea      	b.n	7526 <_fflush_r+0xe>
    7550:	4b05      	ldr	r3, [pc, #20]	; (7568 <_fflush_r+0x50>)
    7552:	429c      	cmp	r4, r3
    7554:	d101      	bne.n	755a <_fflush_r+0x42>
    7556:	68ac      	ldr	r4, [r5, #8]
    7558:	e7f1      	b.n	753e <_fflush_r+0x26>
    755a:	4b04      	ldr	r3, [pc, #16]	; (756c <_fflush_r+0x54>)
    755c:	429c      	cmp	r4, r3
    755e:	d1ee      	bne.n	753e <_fflush_r+0x26>
    7560:	68ec      	ldr	r4, [r5, #12]
    7562:	e7ec      	b.n	753e <_fflush_r+0x26>
    7564:	00009460 	.word	0x00009460
    7568:	00009480 	.word	0x00009480
    756c:	00009440 	.word	0x00009440

00007570 <_cleanup_r>:
    7570:	b510      	push	{r4, lr}
    7572:	4902      	ldr	r1, [pc, #8]	; (757c <_cleanup_r+0xc>)
    7574:	f000 f8b2 	bl	76dc <_fwalk_reent>
    7578:	bd10      	pop	{r4, pc}
    757a:	46c0      	nop			; (mov r8, r8)
    757c:	00007519 	.word	0x00007519

00007580 <std.isra.0>:
    7580:	2300      	movs	r3, #0
    7582:	b510      	push	{r4, lr}
    7584:	0004      	movs	r4, r0
    7586:	6003      	str	r3, [r0, #0]
    7588:	6043      	str	r3, [r0, #4]
    758a:	6083      	str	r3, [r0, #8]
    758c:	8181      	strh	r1, [r0, #12]
    758e:	6643      	str	r3, [r0, #100]	; 0x64
    7590:	81c2      	strh	r2, [r0, #14]
    7592:	6103      	str	r3, [r0, #16]
    7594:	6143      	str	r3, [r0, #20]
    7596:	6183      	str	r3, [r0, #24]
    7598:	0019      	movs	r1, r3
    759a:	2208      	movs	r2, #8
    759c:	305c      	adds	r0, #92	; 0x5c
    759e:	f7ff fc08 	bl	6db2 <memset>
    75a2:	4b05      	ldr	r3, [pc, #20]	; (75b8 <std.isra.0+0x38>)
    75a4:	6224      	str	r4, [r4, #32]
    75a6:	6263      	str	r3, [r4, #36]	; 0x24
    75a8:	4b04      	ldr	r3, [pc, #16]	; (75bc <std.isra.0+0x3c>)
    75aa:	62a3      	str	r3, [r4, #40]	; 0x28
    75ac:	4b04      	ldr	r3, [pc, #16]	; (75c0 <std.isra.0+0x40>)
    75ae:	62e3      	str	r3, [r4, #44]	; 0x2c
    75b0:	4b04      	ldr	r3, [pc, #16]	; (75c4 <std.isra.0+0x44>)
    75b2:	6323      	str	r3, [r4, #48]	; 0x30
    75b4:	bd10      	pop	{r4, pc}
    75b6:	46c0      	nop			; (mov r8, r8)
    75b8:	000080c1 	.word	0x000080c1
    75bc:	000080e9 	.word	0x000080e9
    75c0:	00008121 	.word	0x00008121
    75c4:	0000814d 	.word	0x0000814d

000075c8 <__sfmoreglue>:
    75c8:	b570      	push	{r4, r5, r6, lr}
    75ca:	2568      	movs	r5, #104	; 0x68
    75cc:	1e4a      	subs	r2, r1, #1
    75ce:	4355      	muls	r5, r2
    75d0:	000e      	movs	r6, r1
    75d2:	0029      	movs	r1, r5
    75d4:	3174      	adds	r1, #116	; 0x74
    75d6:	f7ff fc3f 	bl	6e58 <_malloc_r>
    75da:	1e04      	subs	r4, r0, #0
    75dc:	d008      	beq.n	75f0 <__sfmoreglue+0x28>
    75de:	2100      	movs	r1, #0
    75e0:	002a      	movs	r2, r5
    75e2:	6001      	str	r1, [r0, #0]
    75e4:	6046      	str	r6, [r0, #4]
    75e6:	300c      	adds	r0, #12
    75e8:	60a0      	str	r0, [r4, #8]
    75ea:	3268      	adds	r2, #104	; 0x68
    75ec:	f7ff fbe1 	bl	6db2 <memset>
    75f0:	0020      	movs	r0, r4
    75f2:	bd70      	pop	{r4, r5, r6, pc}

000075f4 <__sinit>:
    75f4:	6983      	ldr	r3, [r0, #24]
    75f6:	b513      	push	{r0, r1, r4, lr}
    75f8:	0004      	movs	r4, r0
    75fa:	2b00      	cmp	r3, #0
    75fc:	d128      	bne.n	7650 <__sinit+0x5c>
    75fe:	6483      	str	r3, [r0, #72]	; 0x48
    7600:	64c3      	str	r3, [r0, #76]	; 0x4c
    7602:	6503      	str	r3, [r0, #80]	; 0x50
    7604:	4b13      	ldr	r3, [pc, #76]	; (7654 <__sinit+0x60>)
    7606:	4a14      	ldr	r2, [pc, #80]	; (7658 <__sinit+0x64>)
    7608:	681b      	ldr	r3, [r3, #0]
    760a:	6282      	str	r2, [r0, #40]	; 0x28
    760c:	9301      	str	r3, [sp, #4]
    760e:	4298      	cmp	r0, r3
    7610:	d101      	bne.n	7616 <__sinit+0x22>
    7612:	2301      	movs	r3, #1
    7614:	6183      	str	r3, [r0, #24]
    7616:	0020      	movs	r0, r4
    7618:	f000 f820 	bl	765c <__sfp>
    761c:	6060      	str	r0, [r4, #4]
    761e:	0020      	movs	r0, r4
    7620:	f000 f81c 	bl	765c <__sfp>
    7624:	60a0      	str	r0, [r4, #8]
    7626:	0020      	movs	r0, r4
    7628:	f000 f818 	bl	765c <__sfp>
    762c:	2200      	movs	r2, #0
    762e:	60e0      	str	r0, [r4, #12]
    7630:	2104      	movs	r1, #4
    7632:	6860      	ldr	r0, [r4, #4]
    7634:	f7ff ffa4 	bl	7580 <std.isra.0>
    7638:	2201      	movs	r2, #1
    763a:	2109      	movs	r1, #9
    763c:	68a0      	ldr	r0, [r4, #8]
    763e:	f7ff ff9f 	bl	7580 <std.isra.0>
    7642:	2202      	movs	r2, #2
    7644:	2112      	movs	r1, #18
    7646:	68e0      	ldr	r0, [r4, #12]
    7648:	f7ff ff9a 	bl	7580 <std.isra.0>
    764c:	2301      	movs	r3, #1
    764e:	61a3      	str	r3, [r4, #24]
    7650:	bd13      	pop	{r0, r1, r4, pc}
    7652:	46c0      	nop			; (mov r8, r8)
    7654:	0000943c 	.word	0x0000943c
    7658:	00007571 	.word	0x00007571

0000765c <__sfp>:
    765c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    765e:	4b1e      	ldr	r3, [pc, #120]	; (76d8 <__sfp+0x7c>)
    7660:	0007      	movs	r7, r0
    7662:	681e      	ldr	r6, [r3, #0]
    7664:	69b3      	ldr	r3, [r6, #24]
    7666:	2b00      	cmp	r3, #0
    7668:	d102      	bne.n	7670 <__sfp+0x14>
    766a:	0030      	movs	r0, r6
    766c:	f7ff ffc2 	bl	75f4 <__sinit>
    7670:	3648      	adds	r6, #72	; 0x48
    7672:	68b4      	ldr	r4, [r6, #8]
    7674:	6873      	ldr	r3, [r6, #4]
    7676:	3b01      	subs	r3, #1
    7678:	d504      	bpl.n	7684 <__sfp+0x28>
    767a:	6833      	ldr	r3, [r6, #0]
    767c:	2b00      	cmp	r3, #0
    767e:	d007      	beq.n	7690 <__sfp+0x34>
    7680:	6836      	ldr	r6, [r6, #0]
    7682:	e7f6      	b.n	7672 <__sfp+0x16>
    7684:	220c      	movs	r2, #12
    7686:	5ea5      	ldrsh	r5, [r4, r2]
    7688:	2d00      	cmp	r5, #0
    768a:	d00d      	beq.n	76a8 <__sfp+0x4c>
    768c:	3468      	adds	r4, #104	; 0x68
    768e:	e7f2      	b.n	7676 <__sfp+0x1a>
    7690:	2104      	movs	r1, #4
    7692:	0038      	movs	r0, r7
    7694:	f7ff ff98 	bl	75c8 <__sfmoreglue>
    7698:	6030      	str	r0, [r6, #0]
    769a:	2800      	cmp	r0, #0
    769c:	d1f0      	bne.n	7680 <__sfp+0x24>
    769e:	230c      	movs	r3, #12
    76a0:	0004      	movs	r4, r0
    76a2:	603b      	str	r3, [r7, #0]
    76a4:	0020      	movs	r0, r4
    76a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    76a8:	2301      	movs	r3, #1
    76aa:	0020      	movs	r0, r4
    76ac:	425b      	negs	r3, r3
    76ae:	81e3      	strh	r3, [r4, #14]
    76b0:	3302      	adds	r3, #2
    76b2:	81a3      	strh	r3, [r4, #12]
    76b4:	6665      	str	r5, [r4, #100]	; 0x64
    76b6:	6025      	str	r5, [r4, #0]
    76b8:	60a5      	str	r5, [r4, #8]
    76ba:	6065      	str	r5, [r4, #4]
    76bc:	6125      	str	r5, [r4, #16]
    76be:	6165      	str	r5, [r4, #20]
    76c0:	61a5      	str	r5, [r4, #24]
    76c2:	2208      	movs	r2, #8
    76c4:	0029      	movs	r1, r5
    76c6:	305c      	adds	r0, #92	; 0x5c
    76c8:	f7ff fb73 	bl	6db2 <memset>
    76cc:	6365      	str	r5, [r4, #52]	; 0x34
    76ce:	63a5      	str	r5, [r4, #56]	; 0x38
    76d0:	64a5      	str	r5, [r4, #72]	; 0x48
    76d2:	64e5      	str	r5, [r4, #76]	; 0x4c
    76d4:	e7e6      	b.n	76a4 <__sfp+0x48>
    76d6:	46c0      	nop			; (mov r8, r8)
    76d8:	0000943c 	.word	0x0000943c

000076dc <_fwalk_reent>:
    76dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    76de:	0004      	movs	r4, r0
    76e0:	0007      	movs	r7, r0
    76e2:	2600      	movs	r6, #0
    76e4:	9101      	str	r1, [sp, #4]
    76e6:	3448      	adds	r4, #72	; 0x48
    76e8:	2c00      	cmp	r4, #0
    76ea:	d101      	bne.n	76f0 <_fwalk_reent+0x14>
    76ec:	0030      	movs	r0, r6
    76ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    76f0:	6863      	ldr	r3, [r4, #4]
    76f2:	68a5      	ldr	r5, [r4, #8]
    76f4:	9300      	str	r3, [sp, #0]
    76f6:	9b00      	ldr	r3, [sp, #0]
    76f8:	3b01      	subs	r3, #1
    76fa:	9300      	str	r3, [sp, #0]
    76fc:	d501      	bpl.n	7702 <_fwalk_reent+0x26>
    76fe:	6824      	ldr	r4, [r4, #0]
    7700:	e7f2      	b.n	76e8 <_fwalk_reent+0xc>
    7702:	89ab      	ldrh	r3, [r5, #12]
    7704:	2b01      	cmp	r3, #1
    7706:	d908      	bls.n	771a <_fwalk_reent+0x3e>
    7708:	220e      	movs	r2, #14
    770a:	5eab      	ldrsh	r3, [r5, r2]
    770c:	3301      	adds	r3, #1
    770e:	d004      	beq.n	771a <_fwalk_reent+0x3e>
    7710:	0029      	movs	r1, r5
    7712:	0038      	movs	r0, r7
    7714:	9b01      	ldr	r3, [sp, #4]
    7716:	4798      	blx	r3
    7718:	4306      	orrs	r6, r0
    771a:	3568      	adds	r5, #104	; 0x68
    771c:	e7eb      	b.n	76f6 <_fwalk_reent+0x1a>
	...

00007720 <__swhatbuf_r>:
    7720:	b570      	push	{r4, r5, r6, lr}
    7722:	000e      	movs	r6, r1
    7724:	001d      	movs	r5, r3
    7726:	230e      	movs	r3, #14
    7728:	5ec9      	ldrsh	r1, [r1, r3]
    772a:	b090      	sub	sp, #64	; 0x40
    772c:	0014      	movs	r4, r2
    772e:	2900      	cmp	r1, #0
    7730:	da07      	bge.n	7742 <__swhatbuf_r+0x22>
    7732:	2300      	movs	r3, #0
    7734:	602b      	str	r3, [r5, #0]
    7736:	89b3      	ldrh	r3, [r6, #12]
    7738:	061b      	lsls	r3, r3, #24
    773a:	d411      	bmi.n	7760 <__swhatbuf_r+0x40>
    773c:	2380      	movs	r3, #128	; 0x80
    773e:	00db      	lsls	r3, r3, #3
    7740:	e00f      	b.n	7762 <__swhatbuf_r+0x42>
    7742:	aa01      	add	r2, sp, #4
    7744:	f000 fd2e 	bl	81a4 <_fstat_r>
    7748:	2800      	cmp	r0, #0
    774a:	dbf2      	blt.n	7732 <__swhatbuf_r+0x12>
    774c:	22f0      	movs	r2, #240	; 0xf0
    774e:	9b02      	ldr	r3, [sp, #8]
    7750:	0212      	lsls	r2, r2, #8
    7752:	4013      	ands	r3, r2
    7754:	4a05      	ldr	r2, [pc, #20]	; (776c <__swhatbuf_r+0x4c>)
    7756:	189b      	adds	r3, r3, r2
    7758:	425a      	negs	r2, r3
    775a:	4153      	adcs	r3, r2
    775c:	602b      	str	r3, [r5, #0]
    775e:	e7ed      	b.n	773c <__swhatbuf_r+0x1c>
    7760:	2340      	movs	r3, #64	; 0x40
    7762:	2000      	movs	r0, #0
    7764:	6023      	str	r3, [r4, #0]
    7766:	b010      	add	sp, #64	; 0x40
    7768:	bd70      	pop	{r4, r5, r6, pc}
    776a:	46c0      	nop			; (mov r8, r8)
    776c:	ffffe000 	.word	0xffffe000

00007770 <__smakebuf_r>:
    7770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7772:	2602      	movs	r6, #2
    7774:	898b      	ldrh	r3, [r1, #12]
    7776:	0005      	movs	r5, r0
    7778:	000c      	movs	r4, r1
    777a:	4233      	tst	r3, r6
    777c:	d006      	beq.n	778c <__smakebuf_r+0x1c>
    777e:	0023      	movs	r3, r4
    7780:	3347      	adds	r3, #71	; 0x47
    7782:	6023      	str	r3, [r4, #0]
    7784:	6123      	str	r3, [r4, #16]
    7786:	2301      	movs	r3, #1
    7788:	6163      	str	r3, [r4, #20]
    778a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    778c:	ab01      	add	r3, sp, #4
    778e:	466a      	mov	r2, sp
    7790:	f7ff ffc6 	bl	7720 <__swhatbuf_r>
    7794:	9900      	ldr	r1, [sp, #0]
    7796:	0007      	movs	r7, r0
    7798:	0028      	movs	r0, r5
    779a:	f7ff fb5d 	bl	6e58 <_malloc_r>
    779e:	2800      	cmp	r0, #0
    77a0:	d106      	bne.n	77b0 <__smakebuf_r+0x40>
    77a2:	220c      	movs	r2, #12
    77a4:	5ea3      	ldrsh	r3, [r4, r2]
    77a6:	059a      	lsls	r2, r3, #22
    77a8:	d4ef      	bmi.n	778a <__smakebuf_r+0x1a>
    77aa:	431e      	orrs	r6, r3
    77ac:	81a6      	strh	r6, [r4, #12]
    77ae:	e7e6      	b.n	777e <__smakebuf_r+0xe>
    77b0:	4b0d      	ldr	r3, [pc, #52]	; (77e8 <__smakebuf_r+0x78>)
    77b2:	62ab      	str	r3, [r5, #40]	; 0x28
    77b4:	2380      	movs	r3, #128	; 0x80
    77b6:	89a2      	ldrh	r2, [r4, #12]
    77b8:	6020      	str	r0, [r4, #0]
    77ba:	4313      	orrs	r3, r2
    77bc:	81a3      	strh	r3, [r4, #12]
    77be:	9b00      	ldr	r3, [sp, #0]
    77c0:	6120      	str	r0, [r4, #16]
    77c2:	6163      	str	r3, [r4, #20]
    77c4:	9b01      	ldr	r3, [sp, #4]
    77c6:	2b00      	cmp	r3, #0
    77c8:	d00a      	beq.n	77e0 <__smakebuf_r+0x70>
    77ca:	230e      	movs	r3, #14
    77cc:	5ee1      	ldrsh	r1, [r4, r3]
    77ce:	0028      	movs	r0, r5
    77d0:	f000 fcfa 	bl	81c8 <_isatty_r>
    77d4:	2800      	cmp	r0, #0
    77d6:	d003      	beq.n	77e0 <__smakebuf_r+0x70>
    77d8:	2301      	movs	r3, #1
    77da:	89a2      	ldrh	r2, [r4, #12]
    77dc:	4313      	orrs	r3, r2
    77de:	81a3      	strh	r3, [r4, #12]
    77e0:	89a0      	ldrh	r0, [r4, #12]
    77e2:	4338      	orrs	r0, r7
    77e4:	81a0      	strh	r0, [r4, #12]
    77e6:	e7d0      	b.n	778a <__smakebuf_r+0x1a>
    77e8:	00007571 	.word	0x00007571

000077ec <__malloc_lock>:
    77ec:	4770      	bx	lr

000077ee <__malloc_unlock>:
    77ee:	4770      	bx	lr

000077f0 <__ssputs_r>:
    77f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    77f2:	688e      	ldr	r6, [r1, #8]
    77f4:	b085      	sub	sp, #20
    77f6:	0007      	movs	r7, r0
    77f8:	000c      	movs	r4, r1
    77fa:	9203      	str	r2, [sp, #12]
    77fc:	9301      	str	r3, [sp, #4]
    77fe:	429e      	cmp	r6, r3
    7800:	d839      	bhi.n	7876 <__ssputs_r+0x86>
    7802:	2390      	movs	r3, #144	; 0x90
    7804:	898a      	ldrh	r2, [r1, #12]
    7806:	00db      	lsls	r3, r3, #3
    7808:	421a      	tst	r2, r3
    780a:	d034      	beq.n	7876 <__ssputs_r+0x86>
    780c:	2503      	movs	r5, #3
    780e:	6909      	ldr	r1, [r1, #16]
    7810:	6823      	ldr	r3, [r4, #0]
    7812:	1a5b      	subs	r3, r3, r1
    7814:	9302      	str	r3, [sp, #8]
    7816:	6963      	ldr	r3, [r4, #20]
    7818:	9802      	ldr	r0, [sp, #8]
    781a:	435d      	muls	r5, r3
    781c:	0feb      	lsrs	r3, r5, #31
    781e:	195d      	adds	r5, r3, r5
    7820:	9b01      	ldr	r3, [sp, #4]
    7822:	106d      	asrs	r5, r5, #1
    7824:	3301      	adds	r3, #1
    7826:	181b      	adds	r3, r3, r0
    7828:	42ab      	cmp	r3, r5
    782a:	d900      	bls.n	782e <__ssputs_r+0x3e>
    782c:	001d      	movs	r5, r3
    782e:	0553      	lsls	r3, r2, #21
    7830:	d532      	bpl.n	7898 <__ssputs_r+0xa8>
    7832:	0029      	movs	r1, r5
    7834:	0038      	movs	r0, r7
    7836:	f7ff fb0f 	bl	6e58 <_malloc_r>
    783a:	1e06      	subs	r6, r0, #0
    783c:	d109      	bne.n	7852 <__ssputs_r+0x62>
    783e:	230c      	movs	r3, #12
    7840:	603b      	str	r3, [r7, #0]
    7842:	2340      	movs	r3, #64	; 0x40
    7844:	2001      	movs	r0, #1
    7846:	89a2      	ldrh	r2, [r4, #12]
    7848:	4240      	negs	r0, r0
    784a:	4313      	orrs	r3, r2
    784c:	81a3      	strh	r3, [r4, #12]
    784e:	b005      	add	sp, #20
    7850:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7852:	9a02      	ldr	r2, [sp, #8]
    7854:	6921      	ldr	r1, [r4, #16]
    7856:	f7ff fa91 	bl	6d7c <memcpy>
    785a:	89a3      	ldrh	r3, [r4, #12]
    785c:	4a14      	ldr	r2, [pc, #80]	; (78b0 <__ssputs_r+0xc0>)
    785e:	401a      	ands	r2, r3
    7860:	2380      	movs	r3, #128	; 0x80
    7862:	4313      	orrs	r3, r2
    7864:	81a3      	strh	r3, [r4, #12]
    7866:	9b02      	ldr	r3, [sp, #8]
    7868:	6126      	str	r6, [r4, #16]
    786a:	18f6      	adds	r6, r6, r3
    786c:	6026      	str	r6, [r4, #0]
    786e:	6165      	str	r5, [r4, #20]
    7870:	9e01      	ldr	r6, [sp, #4]
    7872:	1aed      	subs	r5, r5, r3
    7874:	60a5      	str	r5, [r4, #8]
    7876:	9b01      	ldr	r3, [sp, #4]
    7878:	42b3      	cmp	r3, r6
    787a:	d200      	bcs.n	787e <__ssputs_r+0x8e>
    787c:	001e      	movs	r6, r3
    787e:	0032      	movs	r2, r6
    7880:	9903      	ldr	r1, [sp, #12]
    7882:	6820      	ldr	r0, [r4, #0]
    7884:	f7ff fa83 	bl	6d8e <memmove>
    7888:	68a3      	ldr	r3, [r4, #8]
    788a:	2000      	movs	r0, #0
    788c:	1b9b      	subs	r3, r3, r6
    788e:	60a3      	str	r3, [r4, #8]
    7890:	6823      	ldr	r3, [r4, #0]
    7892:	199e      	adds	r6, r3, r6
    7894:	6026      	str	r6, [r4, #0]
    7896:	e7da      	b.n	784e <__ssputs_r+0x5e>
    7898:	002a      	movs	r2, r5
    789a:	0038      	movs	r0, r7
    789c:	f000 fcc5 	bl	822a <_realloc_r>
    78a0:	1e06      	subs	r6, r0, #0
    78a2:	d1e0      	bne.n	7866 <__ssputs_r+0x76>
    78a4:	6921      	ldr	r1, [r4, #16]
    78a6:	0038      	movs	r0, r7
    78a8:	f7ff fa8c 	bl	6dc4 <_free_r>
    78ac:	e7c7      	b.n	783e <__ssputs_r+0x4e>
    78ae:	46c0      	nop			; (mov r8, r8)
    78b0:	fffffb7f 	.word	0xfffffb7f

000078b4 <_svfiprintf_r>:
    78b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    78b6:	b09f      	sub	sp, #124	; 0x7c
    78b8:	9002      	str	r0, [sp, #8]
    78ba:	9305      	str	r3, [sp, #20]
    78bc:	898b      	ldrh	r3, [r1, #12]
    78be:	000f      	movs	r7, r1
    78c0:	0016      	movs	r6, r2
    78c2:	061b      	lsls	r3, r3, #24
    78c4:	d511      	bpl.n	78ea <_svfiprintf_r+0x36>
    78c6:	690b      	ldr	r3, [r1, #16]
    78c8:	2b00      	cmp	r3, #0
    78ca:	d10e      	bne.n	78ea <_svfiprintf_r+0x36>
    78cc:	2140      	movs	r1, #64	; 0x40
    78ce:	f7ff fac3 	bl	6e58 <_malloc_r>
    78d2:	6038      	str	r0, [r7, #0]
    78d4:	6138      	str	r0, [r7, #16]
    78d6:	2800      	cmp	r0, #0
    78d8:	d105      	bne.n	78e6 <_svfiprintf_r+0x32>
    78da:	230c      	movs	r3, #12
    78dc:	9a02      	ldr	r2, [sp, #8]
    78de:	3801      	subs	r0, #1
    78e0:	6013      	str	r3, [r2, #0]
    78e2:	b01f      	add	sp, #124	; 0x7c
    78e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    78e6:	2340      	movs	r3, #64	; 0x40
    78e8:	617b      	str	r3, [r7, #20]
    78ea:	2300      	movs	r3, #0
    78ec:	ad06      	add	r5, sp, #24
    78ee:	616b      	str	r3, [r5, #20]
    78f0:	3320      	adds	r3, #32
    78f2:	766b      	strb	r3, [r5, #25]
    78f4:	3310      	adds	r3, #16
    78f6:	76ab      	strb	r3, [r5, #26]
    78f8:	0034      	movs	r4, r6
    78fa:	7823      	ldrb	r3, [r4, #0]
    78fc:	2b00      	cmp	r3, #0
    78fe:	d147      	bne.n	7990 <_svfiprintf_r+0xdc>
    7900:	1ba3      	subs	r3, r4, r6
    7902:	9304      	str	r3, [sp, #16]
    7904:	d00d      	beq.n	7922 <_svfiprintf_r+0x6e>
    7906:	1ba3      	subs	r3, r4, r6
    7908:	0032      	movs	r2, r6
    790a:	0039      	movs	r1, r7
    790c:	9802      	ldr	r0, [sp, #8]
    790e:	f7ff ff6f 	bl	77f0 <__ssputs_r>
    7912:	1c43      	adds	r3, r0, #1
    7914:	d100      	bne.n	7918 <_svfiprintf_r+0x64>
    7916:	e0b5      	b.n	7a84 <_svfiprintf_r+0x1d0>
    7918:	696a      	ldr	r2, [r5, #20]
    791a:	9b04      	ldr	r3, [sp, #16]
    791c:	4694      	mov	ip, r2
    791e:	4463      	add	r3, ip
    7920:	616b      	str	r3, [r5, #20]
    7922:	7823      	ldrb	r3, [r4, #0]
    7924:	2b00      	cmp	r3, #0
    7926:	d100      	bne.n	792a <_svfiprintf_r+0x76>
    7928:	e0ac      	b.n	7a84 <_svfiprintf_r+0x1d0>
    792a:	2201      	movs	r2, #1
    792c:	2300      	movs	r3, #0
    792e:	4252      	negs	r2, r2
    7930:	606a      	str	r2, [r5, #4]
    7932:	a902      	add	r1, sp, #8
    7934:	3254      	adds	r2, #84	; 0x54
    7936:	1852      	adds	r2, r2, r1
    7938:	3401      	adds	r4, #1
    793a:	602b      	str	r3, [r5, #0]
    793c:	60eb      	str	r3, [r5, #12]
    793e:	60ab      	str	r3, [r5, #8]
    7940:	7013      	strb	r3, [r2, #0]
    7942:	65ab      	str	r3, [r5, #88]	; 0x58
    7944:	4e58      	ldr	r6, [pc, #352]	; (7aa8 <_svfiprintf_r+0x1f4>)
    7946:	2205      	movs	r2, #5
    7948:	7821      	ldrb	r1, [r4, #0]
    794a:	0030      	movs	r0, r6
    794c:	f000 fc62 	bl	8214 <memchr>
    7950:	1c62      	adds	r2, r4, #1
    7952:	2800      	cmp	r0, #0
    7954:	d120      	bne.n	7998 <_svfiprintf_r+0xe4>
    7956:	6829      	ldr	r1, [r5, #0]
    7958:	06cb      	lsls	r3, r1, #27
    795a:	d504      	bpl.n	7966 <_svfiprintf_r+0xb2>
    795c:	2353      	movs	r3, #83	; 0x53
    795e:	ae02      	add	r6, sp, #8
    7960:	3020      	adds	r0, #32
    7962:	199b      	adds	r3, r3, r6
    7964:	7018      	strb	r0, [r3, #0]
    7966:	070b      	lsls	r3, r1, #28
    7968:	d504      	bpl.n	7974 <_svfiprintf_r+0xc0>
    796a:	2353      	movs	r3, #83	; 0x53
    796c:	202b      	movs	r0, #43	; 0x2b
    796e:	ae02      	add	r6, sp, #8
    7970:	199b      	adds	r3, r3, r6
    7972:	7018      	strb	r0, [r3, #0]
    7974:	7823      	ldrb	r3, [r4, #0]
    7976:	2b2a      	cmp	r3, #42	; 0x2a
    7978:	d016      	beq.n	79a8 <_svfiprintf_r+0xf4>
    797a:	2000      	movs	r0, #0
    797c:	210a      	movs	r1, #10
    797e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7980:	7822      	ldrb	r2, [r4, #0]
    7982:	3a30      	subs	r2, #48	; 0x30
    7984:	2a09      	cmp	r2, #9
    7986:	d955      	bls.n	7a34 <_svfiprintf_r+0x180>
    7988:	2800      	cmp	r0, #0
    798a:	d015      	beq.n	79b8 <_svfiprintf_r+0x104>
    798c:	9309      	str	r3, [sp, #36]	; 0x24
    798e:	e013      	b.n	79b8 <_svfiprintf_r+0x104>
    7990:	2b25      	cmp	r3, #37	; 0x25
    7992:	d0b5      	beq.n	7900 <_svfiprintf_r+0x4c>
    7994:	3401      	adds	r4, #1
    7996:	e7b0      	b.n	78fa <_svfiprintf_r+0x46>
    7998:	2301      	movs	r3, #1
    799a:	1b80      	subs	r0, r0, r6
    799c:	4083      	lsls	r3, r0
    799e:	6829      	ldr	r1, [r5, #0]
    79a0:	0014      	movs	r4, r2
    79a2:	430b      	orrs	r3, r1
    79a4:	602b      	str	r3, [r5, #0]
    79a6:	e7cd      	b.n	7944 <_svfiprintf_r+0x90>
    79a8:	9b05      	ldr	r3, [sp, #20]
    79aa:	1d18      	adds	r0, r3, #4
    79ac:	681b      	ldr	r3, [r3, #0]
    79ae:	9005      	str	r0, [sp, #20]
    79b0:	2b00      	cmp	r3, #0
    79b2:	db39      	blt.n	7a28 <_svfiprintf_r+0x174>
    79b4:	9309      	str	r3, [sp, #36]	; 0x24
    79b6:	0014      	movs	r4, r2
    79b8:	7823      	ldrb	r3, [r4, #0]
    79ba:	2b2e      	cmp	r3, #46	; 0x2e
    79bc:	d10b      	bne.n	79d6 <_svfiprintf_r+0x122>
    79be:	7863      	ldrb	r3, [r4, #1]
    79c0:	1c62      	adds	r2, r4, #1
    79c2:	2b2a      	cmp	r3, #42	; 0x2a
    79c4:	d13e      	bne.n	7a44 <_svfiprintf_r+0x190>
    79c6:	9b05      	ldr	r3, [sp, #20]
    79c8:	3402      	adds	r4, #2
    79ca:	1d1a      	adds	r2, r3, #4
    79cc:	681b      	ldr	r3, [r3, #0]
    79ce:	9205      	str	r2, [sp, #20]
    79d0:	2b00      	cmp	r3, #0
    79d2:	db34      	blt.n	7a3e <_svfiprintf_r+0x18a>
    79d4:	9307      	str	r3, [sp, #28]
    79d6:	4e35      	ldr	r6, [pc, #212]	; (7aac <_svfiprintf_r+0x1f8>)
    79d8:	7821      	ldrb	r1, [r4, #0]
    79da:	2203      	movs	r2, #3
    79dc:	0030      	movs	r0, r6
    79de:	f000 fc19 	bl	8214 <memchr>
    79e2:	2800      	cmp	r0, #0
    79e4:	d006      	beq.n	79f4 <_svfiprintf_r+0x140>
    79e6:	2340      	movs	r3, #64	; 0x40
    79e8:	1b80      	subs	r0, r0, r6
    79ea:	4083      	lsls	r3, r0
    79ec:	682a      	ldr	r2, [r5, #0]
    79ee:	3401      	adds	r4, #1
    79f0:	4313      	orrs	r3, r2
    79f2:	602b      	str	r3, [r5, #0]
    79f4:	7821      	ldrb	r1, [r4, #0]
    79f6:	2206      	movs	r2, #6
    79f8:	482d      	ldr	r0, [pc, #180]	; (7ab0 <_svfiprintf_r+0x1fc>)
    79fa:	1c66      	adds	r6, r4, #1
    79fc:	7629      	strb	r1, [r5, #24]
    79fe:	f000 fc09 	bl	8214 <memchr>
    7a02:	2800      	cmp	r0, #0
    7a04:	d046      	beq.n	7a94 <_svfiprintf_r+0x1e0>
    7a06:	4b2b      	ldr	r3, [pc, #172]	; (7ab4 <_svfiprintf_r+0x200>)
    7a08:	2b00      	cmp	r3, #0
    7a0a:	d12f      	bne.n	7a6c <_svfiprintf_r+0x1b8>
    7a0c:	6829      	ldr	r1, [r5, #0]
    7a0e:	9b05      	ldr	r3, [sp, #20]
    7a10:	2207      	movs	r2, #7
    7a12:	05c9      	lsls	r1, r1, #23
    7a14:	d528      	bpl.n	7a68 <_svfiprintf_r+0x1b4>
    7a16:	189b      	adds	r3, r3, r2
    7a18:	4393      	bics	r3, r2
    7a1a:	3308      	adds	r3, #8
    7a1c:	9305      	str	r3, [sp, #20]
    7a1e:	696b      	ldr	r3, [r5, #20]
    7a20:	9a03      	ldr	r2, [sp, #12]
    7a22:	189b      	adds	r3, r3, r2
    7a24:	616b      	str	r3, [r5, #20]
    7a26:	e767      	b.n	78f8 <_svfiprintf_r+0x44>
    7a28:	425b      	negs	r3, r3
    7a2a:	60eb      	str	r3, [r5, #12]
    7a2c:	2302      	movs	r3, #2
    7a2e:	430b      	orrs	r3, r1
    7a30:	602b      	str	r3, [r5, #0]
    7a32:	e7c0      	b.n	79b6 <_svfiprintf_r+0x102>
    7a34:	434b      	muls	r3, r1
    7a36:	3401      	adds	r4, #1
    7a38:	189b      	adds	r3, r3, r2
    7a3a:	2001      	movs	r0, #1
    7a3c:	e7a0      	b.n	7980 <_svfiprintf_r+0xcc>
    7a3e:	2301      	movs	r3, #1
    7a40:	425b      	negs	r3, r3
    7a42:	e7c7      	b.n	79d4 <_svfiprintf_r+0x120>
    7a44:	2300      	movs	r3, #0
    7a46:	0014      	movs	r4, r2
    7a48:	200a      	movs	r0, #10
    7a4a:	001a      	movs	r2, r3
    7a4c:	606b      	str	r3, [r5, #4]
    7a4e:	7821      	ldrb	r1, [r4, #0]
    7a50:	3930      	subs	r1, #48	; 0x30
    7a52:	2909      	cmp	r1, #9
    7a54:	d903      	bls.n	7a5e <_svfiprintf_r+0x1aa>
    7a56:	2b00      	cmp	r3, #0
    7a58:	d0bd      	beq.n	79d6 <_svfiprintf_r+0x122>
    7a5a:	9207      	str	r2, [sp, #28]
    7a5c:	e7bb      	b.n	79d6 <_svfiprintf_r+0x122>
    7a5e:	4342      	muls	r2, r0
    7a60:	3401      	adds	r4, #1
    7a62:	1852      	adds	r2, r2, r1
    7a64:	2301      	movs	r3, #1
    7a66:	e7f2      	b.n	7a4e <_svfiprintf_r+0x19a>
    7a68:	3307      	adds	r3, #7
    7a6a:	e7d5      	b.n	7a18 <_svfiprintf_r+0x164>
    7a6c:	ab05      	add	r3, sp, #20
    7a6e:	9300      	str	r3, [sp, #0]
    7a70:	003a      	movs	r2, r7
    7a72:	4b11      	ldr	r3, [pc, #68]	; (7ab8 <_svfiprintf_r+0x204>)
    7a74:	0029      	movs	r1, r5
    7a76:	9802      	ldr	r0, [sp, #8]
    7a78:	e000      	b.n	7a7c <_svfiprintf_r+0x1c8>
    7a7a:	bf00      	nop
    7a7c:	9003      	str	r0, [sp, #12]
    7a7e:	9b03      	ldr	r3, [sp, #12]
    7a80:	3301      	adds	r3, #1
    7a82:	d1cc      	bne.n	7a1e <_svfiprintf_r+0x16a>
    7a84:	89bb      	ldrh	r3, [r7, #12]
    7a86:	980b      	ldr	r0, [sp, #44]	; 0x2c
    7a88:	065b      	lsls	r3, r3, #25
    7a8a:	d400      	bmi.n	7a8e <_svfiprintf_r+0x1da>
    7a8c:	e729      	b.n	78e2 <_svfiprintf_r+0x2e>
    7a8e:	2001      	movs	r0, #1
    7a90:	4240      	negs	r0, r0
    7a92:	e726      	b.n	78e2 <_svfiprintf_r+0x2e>
    7a94:	ab05      	add	r3, sp, #20
    7a96:	9300      	str	r3, [sp, #0]
    7a98:	003a      	movs	r2, r7
    7a9a:	4b07      	ldr	r3, [pc, #28]	; (7ab8 <_svfiprintf_r+0x204>)
    7a9c:	0029      	movs	r1, r5
    7a9e:	9802      	ldr	r0, [sp, #8]
    7aa0:	f000 f9be 	bl	7e20 <_printf_i>
    7aa4:	e7ea      	b.n	7a7c <_svfiprintf_r+0x1c8>
    7aa6:	46c0      	nop			; (mov r8, r8)
    7aa8:	000094a0 	.word	0x000094a0
    7aac:	000094a6 	.word	0x000094a6
    7ab0:	000094aa 	.word	0x000094aa
    7ab4:	00000000 	.word	0x00000000
    7ab8:	000077f1 	.word	0x000077f1

00007abc <__sfputc_r>:
    7abc:	6893      	ldr	r3, [r2, #8]
    7abe:	b510      	push	{r4, lr}
    7ac0:	3b01      	subs	r3, #1
    7ac2:	6093      	str	r3, [r2, #8]
    7ac4:	2b00      	cmp	r3, #0
    7ac6:	da05      	bge.n	7ad4 <__sfputc_r+0x18>
    7ac8:	6994      	ldr	r4, [r2, #24]
    7aca:	42a3      	cmp	r3, r4
    7acc:	db08      	blt.n	7ae0 <__sfputc_r+0x24>
    7ace:	b2cb      	uxtb	r3, r1
    7ad0:	2b0a      	cmp	r3, #10
    7ad2:	d005      	beq.n	7ae0 <__sfputc_r+0x24>
    7ad4:	6813      	ldr	r3, [r2, #0]
    7ad6:	1c58      	adds	r0, r3, #1
    7ad8:	6010      	str	r0, [r2, #0]
    7ada:	7019      	strb	r1, [r3, #0]
    7adc:	b2c8      	uxtb	r0, r1
    7ade:	bd10      	pop	{r4, pc}
    7ae0:	f7ff fbc4 	bl	726c <__swbuf_r>
    7ae4:	e7fb      	b.n	7ade <__sfputc_r+0x22>

00007ae6 <__sfputs_r>:
    7ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7ae8:	0006      	movs	r6, r0
    7aea:	000f      	movs	r7, r1
    7aec:	0014      	movs	r4, r2
    7aee:	18d5      	adds	r5, r2, r3
    7af0:	42ac      	cmp	r4, r5
    7af2:	d101      	bne.n	7af8 <__sfputs_r+0x12>
    7af4:	2000      	movs	r0, #0
    7af6:	e007      	b.n	7b08 <__sfputs_r+0x22>
    7af8:	7821      	ldrb	r1, [r4, #0]
    7afa:	003a      	movs	r2, r7
    7afc:	0030      	movs	r0, r6
    7afe:	f7ff ffdd 	bl	7abc <__sfputc_r>
    7b02:	3401      	adds	r4, #1
    7b04:	1c43      	adds	r3, r0, #1
    7b06:	d1f3      	bne.n	7af0 <__sfputs_r+0xa>
    7b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00007b0c <_vfiprintf_r>:
    7b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b0e:	b09f      	sub	sp, #124	; 0x7c
    7b10:	0006      	movs	r6, r0
    7b12:	000f      	movs	r7, r1
    7b14:	0014      	movs	r4, r2
    7b16:	9305      	str	r3, [sp, #20]
    7b18:	2800      	cmp	r0, #0
    7b1a:	d004      	beq.n	7b26 <_vfiprintf_r+0x1a>
    7b1c:	6983      	ldr	r3, [r0, #24]
    7b1e:	2b00      	cmp	r3, #0
    7b20:	d101      	bne.n	7b26 <_vfiprintf_r+0x1a>
    7b22:	f7ff fd67 	bl	75f4 <__sinit>
    7b26:	4b7f      	ldr	r3, [pc, #508]	; (7d24 <_vfiprintf_r+0x218>)
    7b28:	429f      	cmp	r7, r3
    7b2a:	d15c      	bne.n	7be6 <_vfiprintf_r+0xda>
    7b2c:	6877      	ldr	r7, [r6, #4]
    7b2e:	89bb      	ldrh	r3, [r7, #12]
    7b30:	071b      	lsls	r3, r3, #28
    7b32:	d562      	bpl.n	7bfa <_vfiprintf_r+0xee>
    7b34:	693b      	ldr	r3, [r7, #16]
    7b36:	2b00      	cmp	r3, #0
    7b38:	d05f      	beq.n	7bfa <_vfiprintf_r+0xee>
    7b3a:	2300      	movs	r3, #0
    7b3c:	ad06      	add	r5, sp, #24
    7b3e:	616b      	str	r3, [r5, #20]
    7b40:	3320      	adds	r3, #32
    7b42:	766b      	strb	r3, [r5, #25]
    7b44:	3310      	adds	r3, #16
    7b46:	76ab      	strb	r3, [r5, #26]
    7b48:	9402      	str	r4, [sp, #8]
    7b4a:	9c02      	ldr	r4, [sp, #8]
    7b4c:	7823      	ldrb	r3, [r4, #0]
    7b4e:	2b00      	cmp	r3, #0
    7b50:	d15d      	bne.n	7c0e <_vfiprintf_r+0x102>
    7b52:	9b02      	ldr	r3, [sp, #8]
    7b54:	1ae3      	subs	r3, r4, r3
    7b56:	9304      	str	r3, [sp, #16]
    7b58:	d00d      	beq.n	7b76 <_vfiprintf_r+0x6a>
    7b5a:	9b04      	ldr	r3, [sp, #16]
    7b5c:	9a02      	ldr	r2, [sp, #8]
    7b5e:	0039      	movs	r1, r7
    7b60:	0030      	movs	r0, r6
    7b62:	f7ff ffc0 	bl	7ae6 <__sfputs_r>
    7b66:	1c43      	adds	r3, r0, #1
    7b68:	d100      	bne.n	7b6c <_vfiprintf_r+0x60>
    7b6a:	e0cc      	b.n	7d06 <_vfiprintf_r+0x1fa>
    7b6c:	696a      	ldr	r2, [r5, #20]
    7b6e:	9b04      	ldr	r3, [sp, #16]
    7b70:	4694      	mov	ip, r2
    7b72:	4463      	add	r3, ip
    7b74:	616b      	str	r3, [r5, #20]
    7b76:	7823      	ldrb	r3, [r4, #0]
    7b78:	2b00      	cmp	r3, #0
    7b7a:	d100      	bne.n	7b7e <_vfiprintf_r+0x72>
    7b7c:	e0c3      	b.n	7d06 <_vfiprintf_r+0x1fa>
    7b7e:	2201      	movs	r2, #1
    7b80:	2300      	movs	r3, #0
    7b82:	4252      	negs	r2, r2
    7b84:	606a      	str	r2, [r5, #4]
    7b86:	a902      	add	r1, sp, #8
    7b88:	3254      	adds	r2, #84	; 0x54
    7b8a:	1852      	adds	r2, r2, r1
    7b8c:	3401      	adds	r4, #1
    7b8e:	602b      	str	r3, [r5, #0]
    7b90:	60eb      	str	r3, [r5, #12]
    7b92:	60ab      	str	r3, [r5, #8]
    7b94:	7013      	strb	r3, [r2, #0]
    7b96:	65ab      	str	r3, [r5, #88]	; 0x58
    7b98:	7821      	ldrb	r1, [r4, #0]
    7b9a:	2205      	movs	r2, #5
    7b9c:	4862      	ldr	r0, [pc, #392]	; (7d28 <_vfiprintf_r+0x21c>)
    7b9e:	f000 fb39 	bl	8214 <memchr>
    7ba2:	1c63      	adds	r3, r4, #1
    7ba4:	469c      	mov	ip, r3
    7ba6:	2800      	cmp	r0, #0
    7ba8:	d135      	bne.n	7c16 <_vfiprintf_r+0x10a>
    7baa:	6829      	ldr	r1, [r5, #0]
    7bac:	06cb      	lsls	r3, r1, #27
    7bae:	d504      	bpl.n	7bba <_vfiprintf_r+0xae>
    7bb0:	2353      	movs	r3, #83	; 0x53
    7bb2:	aa02      	add	r2, sp, #8
    7bb4:	3020      	adds	r0, #32
    7bb6:	189b      	adds	r3, r3, r2
    7bb8:	7018      	strb	r0, [r3, #0]
    7bba:	070b      	lsls	r3, r1, #28
    7bbc:	d504      	bpl.n	7bc8 <_vfiprintf_r+0xbc>
    7bbe:	2353      	movs	r3, #83	; 0x53
    7bc0:	202b      	movs	r0, #43	; 0x2b
    7bc2:	aa02      	add	r2, sp, #8
    7bc4:	189b      	adds	r3, r3, r2
    7bc6:	7018      	strb	r0, [r3, #0]
    7bc8:	7823      	ldrb	r3, [r4, #0]
    7bca:	2b2a      	cmp	r3, #42	; 0x2a
    7bcc:	d02c      	beq.n	7c28 <_vfiprintf_r+0x11c>
    7bce:	2000      	movs	r0, #0
    7bd0:	210a      	movs	r1, #10
    7bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7bd4:	7822      	ldrb	r2, [r4, #0]
    7bd6:	3a30      	subs	r2, #48	; 0x30
    7bd8:	2a09      	cmp	r2, #9
    7bda:	d800      	bhi.n	7bde <_vfiprintf_r+0xd2>
    7bdc:	e06b      	b.n	7cb6 <_vfiprintf_r+0x1aa>
    7bde:	2800      	cmp	r0, #0
    7be0:	d02a      	beq.n	7c38 <_vfiprintf_r+0x12c>
    7be2:	9309      	str	r3, [sp, #36]	; 0x24
    7be4:	e028      	b.n	7c38 <_vfiprintf_r+0x12c>
    7be6:	4b51      	ldr	r3, [pc, #324]	; (7d2c <_vfiprintf_r+0x220>)
    7be8:	429f      	cmp	r7, r3
    7bea:	d101      	bne.n	7bf0 <_vfiprintf_r+0xe4>
    7bec:	68b7      	ldr	r7, [r6, #8]
    7bee:	e79e      	b.n	7b2e <_vfiprintf_r+0x22>
    7bf0:	4b4f      	ldr	r3, [pc, #316]	; (7d30 <_vfiprintf_r+0x224>)
    7bf2:	429f      	cmp	r7, r3
    7bf4:	d19b      	bne.n	7b2e <_vfiprintf_r+0x22>
    7bf6:	68f7      	ldr	r7, [r6, #12]
    7bf8:	e799      	b.n	7b2e <_vfiprintf_r+0x22>
    7bfa:	0039      	movs	r1, r7
    7bfc:	0030      	movs	r0, r6
    7bfe:	f7ff fb8b 	bl	7318 <__swsetup_r>
    7c02:	2800      	cmp	r0, #0
    7c04:	d099      	beq.n	7b3a <_vfiprintf_r+0x2e>
    7c06:	2001      	movs	r0, #1
    7c08:	4240      	negs	r0, r0
    7c0a:	b01f      	add	sp, #124	; 0x7c
    7c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7c0e:	2b25      	cmp	r3, #37	; 0x25
    7c10:	d09f      	beq.n	7b52 <_vfiprintf_r+0x46>
    7c12:	3401      	adds	r4, #1
    7c14:	e79a      	b.n	7b4c <_vfiprintf_r+0x40>
    7c16:	4b44      	ldr	r3, [pc, #272]	; (7d28 <_vfiprintf_r+0x21c>)
    7c18:	6829      	ldr	r1, [r5, #0]
    7c1a:	1ac0      	subs	r0, r0, r3
    7c1c:	2301      	movs	r3, #1
    7c1e:	4083      	lsls	r3, r0
    7c20:	430b      	orrs	r3, r1
    7c22:	602b      	str	r3, [r5, #0]
    7c24:	4664      	mov	r4, ip
    7c26:	e7b7      	b.n	7b98 <_vfiprintf_r+0x8c>
    7c28:	9b05      	ldr	r3, [sp, #20]
    7c2a:	1d18      	adds	r0, r3, #4
    7c2c:	681b      	ldr	r3, [r3, #0]
    7c2e:	9005      	str	r0, [sp, #20]
    7c30:	2b00      	cmp	r3, #0
    7c32:	db3a      	blt.n	7caa <_vfiprintf_r+0x19e>
    7c34:	9309      	str	r3, [sp, #36]	; 0x24
    7c36:	4664      	mov	r4, ip
    7c38:	7823      	ldrb	r3, [r4, #0]
    7c3a:	2b2e      	cmp	r3, #46	; 0x2e
    7c3c:	d10b      	bne.n	7c56 <_vfiprintf_r+0x14a>
    7c3e:	7863      	ldrb	r3, [r4, #1]
    7c40:	1c62      	adds	r2, r4, #1
    7c42:	2b2a      	cmp	r3, #42	; 0x2a
    7c44:	d13f      	bne.n	7cc6 <_vfiprintf_r+0x1ba>
    7c46:	9b05      	ldr	r3, [sp, #20]
    7c48:	3402      	adds	r4, #2
    7c4a:	1d1a      	adds	r2, r3, #4
    7c4c:	681b      	ldr	r3, [r3, #0]
    7c4e:	9205      	str	r2, [sp, #20]
    7c50:	2b00      	cmp	r3, #0
    7c52:	db35      	blt.n	7cc0 <_vfiprintf_r+0x1b4>
    7c54:	9307      	str	r3, [sp, #28]
    7c56:	7821      	ldrb	r1, [r4, #0]
    7c58:	2203      	movs	r2, #3
    7c5a:	4836      	ldr	r0, [pc, #216]	; (7d34 <_vfiprintf_r+0x228>)
    7c5c:	f000 fada 	bl	8214 <memchr>
    7c60:	2800      	cmp	r0, #0
    7c62:	d007      	beq.n	7c74 <_vfiprintf_r+0x168>
    7c64:	4b33      	ldr	r3, [pc, #204]	; (7d34 <_vfiprintf_r+0x228>)
    7c66:	682a      	ldr	r2, [r5, #0]
    7c68:	1ac0      	subs	r0, r0, r3
    7c6a:	2340      	movs	r3, #64	; 0x40
    7c6c:	4083      	lsls	r3, r0
    7c6e:	4313      	orrs	r3, r2
    7c70:	602b      	str	r3, [r5, #0]
    7c72:	3401      	adds	r4, #1
    7c74:	7821      	ldrb	r1, [r4, #0]
    7c76:	1c63      	adds	r3, r4, #1
    7c78:	2206      	movs	r2, #6
    7c7a:	482f      	ldr	r0, [pc, #188]	; (7d38 <_vfiprintf_r+0x22c>)
    7c7c:	9302      	str	r3, [sp, #8]
    7c7e:	7629      	strb	r1, [r5, #24]
    7c80:	f000 fac8 	bl	8214 <memchr>
    7c84:	2800      	cmp	r0, #0
    7c86:	d044      	beq.n	7d12 <_vfiprintf_r+0x206>
    7c88:	4b2c      	ldr	r3, [pc, #176]	; (7d3c <_vfiprintf_r+0x230>)
    7c8a:	2b00      	cmp	r3, #0
    7c8c:	d12f      	bne.n	7cee <_vfiprintf_r+0x1e2>
    7c8e:	6829      	ldr	r1, [r5, #0]
    7c90:	9b05      	ldr	r3, [sp, #20]
    7c92:	2207      	movs	r2, #7
    7c94:	05c9      	lsls	r1, r1, #23
    7c96:	d528      	bpl.n	7cea <_vfiprintf_r+0x1de>
    7c98:	189b      	adds	r3, r3, r2
    7c9a:	4393      	bics	r3, r2
    7c9c:	3308      	adds	r3, #8
    7c9e:	9305      	str	r3, [sp, #20]
    7ca0:	696b      	ldr	r3, [r5, #20]
    7ca2:	9a03      	ldr	r2, [sp, #12]
    7ca4:	189b      	adds	r3, r3, r2
    7ca6:	616b      	str	r3, [r5, #20]
    7ca8:	e74f      	b.n	7b4a <_vfiprintf_r+0x3e>
    7caa:	425b      	negs	r3, r3
    7cac:	60eb      	str	r3, [r5, #12]
    7cae:	2302      	movs	r3, #2
    7cb0:	430b      	orrs	r3, r1
    7cb2:	602b      	str	r3, [r5, #0]
    7cb4:	e7bf      	b.n	7c36 <_vfiprintf_r+0x12a>
    7cb6:	434b      	muls	r3, r1
    7cb8:	3401      	adds	r4, #1
    7cba:	189b      	adds	r3, r3, r2
    7cbc:	2001      	movs	r0, #1
    7cbe:	e789      	b.n	7bd4 <_vfiprintf_r+0xc8>
    7cc0:	2301      	movs	r3, #1
    7cc2:	425b      	negs	r3, r3
    7cc4:	e7c6      	b.n	7c54 <_vfiprintf_r+0x148>
    7cc6:	2300      	movs	r3, #0
    7cc8:	0014      	movs	r4, r2
    7cca:	200a      	movs	r0, #10
    7ccc:	001a      	movs	r2, r3
    7cce:	606b      	str	r3, [r5, #4]
    7cd0:	7821      	ldrb	r1, [r4, #0]
    7cd2:	3930      	subs	r1, #48	; 0x30
    7cd4:	2909      	cmp	r1, #9
    7cd6:	d903      	bls.n	7ce0 <_vfiprintf_r+0x1d4>
    7cd8:	2b00      	cmp	r3, #0
    7cda:	d0bc      	beq.n	7c56 <_vfiprintf_r+0x14a>
    7cdc:	9207      	str	r2, [sp, #28]
    7cde:	e7ba      	b.n	7c56 <_vfiprintf_r+0x14a>
    7ce0:	4342      	muls	r2, r0
    7ce2:	3401      	adds	r4, #1
    7ce4:	1852      	adds	r2, r2, r1
    7ce6:	2301      	movs	r3, #1
    7ce8:	e7f2      	b.n	7cd0 <_vfiprintf_r+0x1c4>
    7cea:	3307      	adds	r3, #7
    7cec:	e7d5      	b.n	7c9a <_vfiprintf_r+0x18e>
    7cee:	ab05      	add	r3, sp, #20
    7cf0:	9300      	str	r3, [sp, #0]
    7cf2:	003a      	movs	r2, r7
    7cf4:	4b12      	ldr	r3, [pc, #72]	; (7d40 <_vfiprintf_r+0x234>)
    7cf6:	0029      	movs	r1, r5
    7cf8:	0030      	movs	r0, r6
    7cfa:	e000      	b.n	7cfe <_vfiprintf_r+0x1f2>
    7cfc:	bf00      	nop
    7cfe:	9003      	str	r0, [sp, #12]
    7d00:	9b03      	ldr	r3, [sp, #12]
    7d02:	3301      	adds	r3, #1
    7d04:	d1cc      	bne.n	7ca0 <_vfiprintf_r+0x194>
    7d06:	89bb      	ldrh	r3, [r7, #12]
    7d08:	065b      	lsls	r3, r3, #25
    7d0a:	d500      	bpl.n	7d0e <_vfiprintf_r+0x202>
    7d0c:	e77b      	b.n	7c06 <_vfiprintf_r+0xfa>
    7d0e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    7d10:	e77b      	b.n	7c0a <_vfiprintf_r+0xfe>
    7d12:	ab05      	add	r3, sp, #20
    7d14:	9300      	str	r3, [sp, #0]
    7d16:	003a      	movs	r2, r7
    7d18:	4b09      	ldr	r3, [pc, #36]	; (7d40 <_vfiprintf_r+0x234>)
    7d1a:	0029      	movs	r1, r5
    7d1c:	0030      	movs	r0, r6
    7d1e:	f000 f87f 	bl	7e20 <_printf_i>
    7d22:	e7ec      	b.n	7cfe <_vfiprintf_r+0x1f2>
    7d24:	00009460 	.word	0x00009460
    7d28:	000094a0 	.word	0x000094a0
    7d2c:	00009480 	.word	0x00009480
    7d30:	00009440 	.word	0x00009440
    7d34:	000094a6 	.word	0x000094a6
    7d38:	000094aa 	.word	0x000094aa
    7d3c:	00000000 	.word	0x00000000
    7d40:	00007ae7 	.word	0x00007ae7

00007d44 <_printf_common>:
    7d44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7d46:	0015      	movs	r5, r2
    7d48:	9301      	str	r3, [sp, #4]
    7d4a:	688a      	ldr	r2, [r1, #8]
    7d4c:	690b      	ldr	r3, [r1, #16]
    7d4e:	9000      	str	r0, [sp, #0]
    7d50:	000c      	movs	r4, r1
    7d52:	4293      	cmp	r3, r2
    7d54:	da00      	bge.n	7d58 <_printf_common+0x14>
    7d56:	0013      	movs	r3, r2
    7d58:	0022      	movs	r2, r4
    7d5a:	602b      	str	r3, [r5, #0]
    7d5c:	3243      	adds	r2, #67	; 0x43
    7d5e:	7812      	ldrb	r2, [r2, #0]
    7d60:	2a00      	cmp	r2, #0
    7d62:	d001      	beq.n	7d68 <_printf_common+0x24>
    7d64:	3301      	adds	r3, #1
    7d66:	602b      	str	r3, [r5, #0]
    7d68:	6823      	ldr	r3, [r4, #0]
    7d6a:	069b      	lsls	r3, r3, #26
    7d6c:	d502      	bpl.n	7d74 <_printf_common+0x30>
    7d6e:	682b      	ldr	r3, [r5, #0]
    7d70:	3302      	adds	r3, #2
    7d72:	602b      	str	r3, [r5, #0]
    7d74:	2706      	movs	r7, #6
    7d76:	6823      	ldr	r3, [r4, #0]
    7d78:	401f      	ands	r7, r3
    7d7a:	d027      	beq.n	7dcc <_printf_common+0x88>
    7d7c:	0023      	movs	r3, r4
    7d7e:	3343      	adds	r3, #67	; 0x43
    7d80:	781b      	ldrb	r3, [r3, #0]
    7d82:	1e5a      	subs	r2, r3, #1
    7d84:	4193      	sbcs	r3, r2
    7d86:	6822      	ldr	r2, [r4, #0]
    7d88:	0692      	lsls	r2, r2, #26
    7d8a:	d430      	bmi.n	7dee <_printf_common+0xaa>
    7d8c:	0022      	movs	r2, r4
    7d8e:	9901      	ldr	r1, [sp, #4]
    7d90:	3243      	adds	r2, #67	; 0x43
    7d92:	9800      	ldr	r0, [sp, #0]
    7d94:	9e08      	ldr	r6, [sp, #32]
    7d96:	47b0      	blx	r6
    7d98:	1c43      	adds	r3, r0, #1
    7d9a:	d025      	beq.n	7de8 <_printf_common+0xa4>
    7d9c:	2306      	movs	r3, #6
    7d9e:	6820      	ldr	r0, [r4, #0]
    7da0:	682a      	ldr	r2, [r5, #0]
    7da2:	68e1      	ldr	r1, [r4, #12]
    7da4:	4003      	ands	r3, r0
    7da6:	2500      	movs	r5, #0
    7da8:	2b04      	cmp	r3, #4
    7daa:	d103      	bne.n	7db4 <_printf_common+0x70>
    7dac:	1a8d      	subs	r5, r1, r2
    7dae:	43eb      	mvns	r3, r5
    7db0:	17db      	asrs	r3, r3, #31
    7db2:	401d      	ands	r5, r3
    7db4:	68a3      	ldr	r3, [r4, #8]
    7db6:	6922      	ldr	r2, [r4, #16]
    7db8:	4293      	cmp	r3, r2
    7dba:	dd01      	ble.n	7dc0 <_printf_common+0x7c>
    7dbc:	1a9b      	subs	r3, r3, r2
    7dbe:	18ed      	adds	r5, r5, r3
    7dc0:	2700      	movs	r7, #0
    7dc2:	42bd      	cmp	r5, r7
    7dc4:	d120      	bne.n	7e08 <_printf_common+0xc4>
    7dc6:	2000      	movs	r0, #0
    7dc8:	e010      	b.n	7dec <_printf_common+0xa8>
    7dca:	3701      	adds	r7, #1
    7dcc:	68e3      	ldr	r3, [r4, #12]
    7dce:	682a      	ldr	r2, [r5, #0]
    7dd0:	1a9b      	subs	r3, r3, r2
    7dd2:	429f      	cmp	r7, r3
    7dd4:	dad2      	bge.n	7d7c <_printf_common+0x38>
    7dd6:	0022      	movs	r2, r4
    7dd8:	2301      	movs	r3, #1
    7dda:	3219      	adds	r2, #25
    7ddc:	9901      	ldr	r1, [sp, #4]
    7dde:	9800      	ldr	r0, [sp, #0]
    7de0:	9e08      	ldr	r6, [sp, #32]
    7de2:	47b0      	blx	r6
    7de4:	1c43      	adds	r3, r0, #1
    7de6:	d1f0      	bne.n	7dca <_printf_common+0x86>
    7de8:	2001      	movs	r0, #1
    7dea:	4240      	negs	r0, r0
    7dec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7dee:	2030      	movs	r0, #48	; 0x30
    7df0:	18e1      	adds	r1, r4, r3
    7df2:	3143      	adds	r1, #67	; 0x43
    7df4:	7008      	strb	r0, [r1, #0]
    7df6:	0021      	movs	r1, r4
    7df8:	1c5a      	adds	r2, r3, #1
    7dfa:	3145      	adds	r1, #69	; 0x45
    7dfc:	7809      	ldrb	r1, [r1, #0]
    7dfe:	18a2      	adds	r2, r4, r2
    7e00:	3243      	adds	r2, #67	; 0x43
    7e02:	3302      	adds	r3, #2
    7e04:	7011      	strb	r1, [r2, #0]
    7e06:	e7c1      	b.n	7d8c <_printf_common+0x48>
    7e08:	0022      	movs	r2, r4
    7e0a:	2301      	movs	r3, #1
    7e0c:	321a      	adds	r2, #26
    7e0e:	9901      	ldr	r1, [sp, #4]
    7e10:	9800      	ldr	r0, [sp, #0]
    7e12:	9e08      	ldr	r6, [sp, #32]
    7e14:	47b0      	blx	r6
    7e16:	1c43      	adds	r3, r0, #1
    7e18:	d0e6      	beq.n	7de8 <_printf_common+0xa4>
    7e1a:	3701      	adds	r7, #1
    7e1c:	e7d1      	b.n	7dc2 <_printf_common+0x7e>
	...

00007e20 <_printf_i>:
    7e20:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e22:	b08b      	sub	sp, #44	; 0x2c
    7e24:	9206      	str	r2, [sp, #24]
    7e26:	000a      	movs	r2, r1
    7e28:	3243      	adds	r2, #67	; 0x43
    7e2a:	9307      	str	r3, [sp, #28]
    7e2c:	9005      	str	r0, [sp, #20]
    7e2e:	9204      	str	r2, [sp, #16]
    7e30:	7e0a      	ldrb	r2, [r1, #24]
    7e32:	000c      	movs	r4, r1
    7e34:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7e36:	2a6e      	cmp	r2, #110	; 0x6e
    7e38:	d100      	bne.n	7e3c <_printf_i+0x1c>
    7e3a:	e08f      	b.n	7f5c <_printf_i+0x13c>
    7e3c:	d817      	bhi.n	7e6e <_printf_i+0x4e>
    7e3e:	2a63      	cmp	r2, #99	; 0x63
    7e40:	d02c      	beq.n	7e9c <_printf_i+0x7c>
    7e42:	d808      	bhi.n	7e56 <_printf_i+0x36>
    7e44:	2a00      	cmp	r2, #0
    7e46:	d100      	bne.n	7e4a <_printf_i+0x2a>
    7e48:	e099      	b.n	7f7e <_printf_i+0x15e>
    7e4a:	2a58      	cmp	r2, #88	; 0x58
    7e4c:	d054      	beq.n	7ef8 <_printf_i+0xd8>
    7e4e:	0026      	movs	r6, r4
    7e50:	3642      	adds	r6, #66	; 0x42
    7e52:	7032      	strb	r2, [r6, #0]
    7e54:	e029      	b.n	7eaa <_printf_i+0x8a>
    7e56:	2a64      	cmp	r2, #100	; 0x64
    7e58:	d001      	beq.n	7e5e <_printf_i+0x3e>
    7e5a:	2a69      	cmp	r2, #105	; 0x69
    7e5c:	d1f7      	bne.n	7e4e <_printf_i+0x2e>
    7e5e:	6821      	ldr	r1, [r4, #0]
    7e60:	681a      	ldr	r2, [r3, #0]
    7e62:	0608      	lsls	r0, r1, #24
    7e64:	d523      	bpl.n	7eae <_printf_i+0x8e>
    7e66:	1d11      	adds	r1, r2, #4
    7e68:	6019      	str	r1, [r3, #0]
    7e6a:	6815      	ldr	r5, [r2, #0]
    7e6c:	e025      	b.n	7eba <_printf_i+0x9a>
    7e6e:	2a73      	cmp	r2, #115	; 0x73
    7e70:	d100      	bne.n	7e74 <_printf_i+0x54>
    7e72:	e088      	b.n	7f86 <_printf_i+0x166>
    7e74:	d808      	bhi.n	7e88 <_printf_i+0x68>
    7e76:	2a6f      	cmp	r2, #111	; 0x6f
    7e78:	d029      	beq.n	7ece <_printf_i+0xae>
    7e7a:	2a70      	cmp	r2, #112	; 0x70
    7e7c:	d1e7      	bne.n	7e4e <_printf_i+0x2e>
    7e7e:	2220      	movs	r2, #32
    7e80:	6809      	ldr	r1, [r1, #0]
    7e82:	430a      	orrs	r2, r1
    7e84:	6022      	str	r2, [r4, #0]
    7e86:	e003      	b.n	7e90 <_printf_i+0x70>
    7e88:	2a75      	cmp	r2, #117	; 0x75
    7e8a:	d020      	beq.n	7ece <_printf_i+0xae>
    7e8c:	2a78      	cmp	r2, #120	; 0x78
    7e8e:	d1de      	bne.n	7e4e <_printf_i+0x2e>
    7e90:	0022      	movs	r2, r4
    7e92:	2178      	movs	r1, #120	; 0x78
    7e94:	3245      	adds	r2, #69	; 0x45
    7e96:	7011      	strb	r1, [r2, #0]
    7e98:	4a6c      	ldr	r2, [pc, #432]	; (804c <_printf_i+0x22c>)
    7e9a:	e030      	b.n	7efe <_printf_i+0xde>
    7e9c:	000e      	movs	r6, r1
    7e9e:	681a      	ldr	r2, [r3, #0]
    7ea0:	3642      	adds	r6, #66	; 0x42
    7ea2:	1d11      	adds	r1, r2, #4
    7ea4:	6019      	str	r1, [r3, #0]
    7ea6:	6813      	ldr	r3, [r2, #0]
    7ea8:	7033      	strb	r3, [r6, #0]
    7eaa:	2301      	movs	r3, #1
    7eac:	e079      	b.n	7fa2 <_printf_i+0x182>
    7eae:	0649      	lsls	r1, r1, #25
    7eb0:	d5d9      	bpl.n	7e66 <_printf_i+0x46>
    7eb2:	1d11      	adds	r1, r2, #4
    7eb4:	6019      	str	r1, [r3, #0]
    7eb6:	2300      	movs	r3, #0
    7eb8:	5ed5      	ldrsh	r5, [r2, r3]
    7eba:	2d00      	cmp	r5, #0
    7ebc:	da03      	bge.n	7ec6 <_printf_i+0xa6>
    7ebe:	232d      	movs	r3, #45	; 0x2d
    7ec0:	9a04      	ldr	r2, [sp, #16]
    7ec2:	426d      	negs	r5, r5
    7ec4:	7013      	strb	r3, [r2, #0]
    7ec6:	4b62      	ldr	r3, [pc, #392]	; (8050 <_printf_i+0x230>)
    7ec8:	270a      	movs	r7, #10
    7eca:	9303      	str	r3, [sp, #12]
    7ecc:	e02f      	b.n	7f2e <_printf_i+0x10e>
    7ece:	6820      	ldr	r0, [r4, #0]
    7ed0:	6819      	ldr	r1, [r3, #0]
    7ed2:	0605      	lsls	r5, r0, #24
    7ed4:	d503      	bpl.n	7ede <_printf_i+0xbe>
    7ed6:	1d08      	adds	r0, r1, #4
    7ed8:	6018      	str	r0, [r3, #0]
    7eda:	680d      	ldr	r5, [r1, #0]
    7edc:	e005      	b.n	7eea <_printf_i+0xca>
    7ede:	0640      	lsls	r0, r0, #25
    7ee0:	d5f9      	bpl.n	7ed6 <_printf_i+0xb6>
    7ee2:	680d      	ldr	r5, [r1, #0]
    7ee4:	1d08      	adds	r0, r1, #4
    7ee6:	6018      	str	r0, [r3, #0]
    7ee8:	b2ad      	uxth	r5, r5
    7eea:	4b59      	ldr	r3, [pc, #356]	; (8050 <_printf_i+0x230>)
    7eec:	2708      	movs	r7, #8
    7eee:	9303      	str	r3, [sp, #12]
    7ef0:	2a6f      	cmp	r2, #111	; 0x6f
    7ef2:	d018      	beq.n	7f26 <_printf_i+0x106>
    7ef4:	270a      	movs	r7, #10
    7ef6:	e016      	b.n	7f26 <_printf_i+0x106>
    7ef8:	3145      	adds	r1, #69	; 0x45
    7efa:	700a      	strb	r2, [r1, #0]
    7efc:	4a54      	ldr	r2, [pc, #336]	; (8050 <_printf_i+0x230>)
    7efe:	9203      	str	r2, [sp, #12]
    7f00:	681a      	ldr	r2, [r3, #0]
    7f02:	6821      	ldr	r1, [r4, #0]
    7f04:	1d10      	adds	r0, r2, #4
    7f06:	6018      	str	r0, [r3, #0]
    7f08:	6815      	ldr	r5, [r2, #0]
    7f0a:	0608      	lsls	r0, r1, #24
    7f0c:	d522      	bpl.n	7f54 <_printf_i+0x134>
    7f0e:	07cb      	lsls	r3, r1, #31
    7f10:	d502      	bpl.n	7f18 <_printf_i+0xf8>
    7f12:	2320      	movs	r3, #32
    7f14:	4319      	orrs	r1, r3
    7f16:	6021      	str	r1, [r4, #0]
    7f18:	2710      	movs	r7, #16
    7f1a:	2d00      	cmp	r5, #0
    7f1c:	d103      	bne.n	7f26 <_printf_i+0x106>
    7f1e:	2320      	movs	r3, #32
    7f20:	6822      	ldr	r2, [r4, #0]
    7f22:	439a      	bics	r2, r3
    7f24:	6022      	str	r2, [r4, #0]
    7f26:	0023      	movs	r3, r4
    7f28:	2200      	movs	r2, #0
    7f2a:	3343      	adds	r3, #67	; 0x43
    7f2c:	701a      	strb	r2, [r3, #0]
    7f2e:	6863      	ldr	r3, [r4, #4]
    7f30:	60a3      	str	r3, [r4, #8]
    7f32:	2b00      	cmp	r3, #0
    7f34:	db5c      	blt.n	7ff0 <_printf_i+0x1d0>
    7f36:	2204      	movs	r2, #4
    7f38:	6821      	ldr	r1, [r4, #0]
    7f3a:	4391      	bics	r1, r2
    7f3c:	6021      	str	r1, [r4, #0]
    7f3e:	2d00      	cmp	r5, #0
    7f40:	d158      	bne.n	7ff4 <_printf_i+0x1d4>
    7f42:	9e04      	ldr	r6, [sp, #16]
    7f44:	2b00      	cmp	r3, #0
    7f46:	d064      	beq.n	8012 <_printf_i+0x1f2>
    7f48:	0026      	movs	r6, r4
    7f4a:	9b03      	ldr	r3, [sp, #12]
    7f4c:	3642      	adds	r6, #66	; 0x42
    7f4e:	781b      	ldrb	r3, [r3, #0]
    7f50:	7033      	strb	r3, [r6, #0]
    7f52:	e05e      	b.n	8012 <_printf_i+0x1f2>
    7f54:	0648      	lsls	r0, r1, #25
    7f56:	d5da      	bpl.n	7f0e <_printf_i+0xee>
    7f58:	b2ad      	uxth	r5, r5
    7f5a:	e7d8      	b.n	7f0e <_printf_i+0xee>
    7f5c:	6809      	ldr	r1, [r1, #0]
    7f5e:	681a      	ldr	r2, [r3, #0]
    7f60:	0608      	lsls	r0, r1, #24
    7f62:	d505      	bpl.n	7f70 <_printf_i+0x150>
    7f64:	1d11      	adds	r1, r2, #4
    7f66:	6019      	str	r1, [r3, #0]
    7f68:	6813      	ldr	r3, [r2, #0]
    7f6a:	6962      	ldr	r2, [r4, #20]
    7f6c:	601a      	str	r2, [r3, #0]
    7f6e:	e006      	b.n	7f7e <_printf_i+0x15e>
    7f70:	0649      	lsls	r1, r1, #25
    7f72:	d5f7      	bpl.n	7f64 <_printf_i+0x144>
    7f74:	1d11      	adds	r1, r2, #4
    7f76:	6019      	str	r1, [r3, #0]
    7f78:	6813      	ldr	r3, [r2, #0]
    7f7a:	8aa2      	ldrh	r2, [r4, #20]
    7f7c:	801a      	strh	r2, [r3, #0]
    7f7e:	2300      	movs	r3, #0
    7f80:	9e04      	ldr	r6, [sp, #16]
    7f82:	6123      	str	r3, [r4, #16]
    7f84:	e054      	b.n	8030 <_printf_i+0x210>
    7f86:	681a      	ldr	r2, [r3, #0]
    7f88:	1d11      	adds	r1, r2, #4
    7f8a:	6019      	str	r1, [r3, #0]
    7f8c:	6816      	ldr	r6, [r2, #0]
    7f8e:	2100      	movs	r1, #0
    7f90:	6862      	ldr	r2, [r4, #4]
    7f92:	0030      	movs	r0, r6
    7f94:	f000 f93e 	bl	8214 <memchr>
    7f98:	2800      	cmp	r0, #0
    7f9a:	d001      	beq.n	7fa0 <_printf_i+0x180>
    7f9c:	1b80      	subs	r0, r0, r6
    7f9e:	6060      	str	r0, [r4, #4]
    7fa0:	6863      	ldr	r3, [r4, #4]
    7fa2:	6123      	str	r3, [r4, #16]
    7fa4:	2300      	movs	r3, #0
    7fa6:	9a04      	ldr	r2, [sp, #16]
    7fa8:	7013      	strb	r3, [r2, #0]
    7faa:	e041      	b.n	8030 <_printf_i+0x210>
    7fac:	6923      	ldr	r3, [r4, #16]
    7fae:	0032      	movs	r2, r6
    7fb0:	9906      	ldr	r1, [sp, #24]
    7fb2:	9805      	ldr	r0, [sp, #20]
    7fb4:	9d07      	ldr	r5, [sp, #28]
    7fb6:	47a8      	blx	r5
    7fb8:	1c43      	adds	r3, r0, #1
    7fba:	d043      	beq.n	8044 <_printf_i+0x224>
    7fbc:	6823      	ldr	r3, [r4, #0]
    7fbe:	2500      	movs	r5, #0
    7fc0:	079b      	lsls	r3, r3, #30
    7fc2:	d40f      	bmi.n	7fe4 <_printf_i+0x1c4>
    7fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7fc6:	68e0      	ldr	r0, [r4, #12]
    7fc8:	4298      	cmp	r0, r3
    7fca:	da3d      	bge.n	8048 <_printf_i+0x228>
    7fcc:	0018      	movs	r0, r3
    7fce:	e03b      	b.n	8048 <_printf_i+0x228>
    7fd0:	0022      	movs	r2, r4
    7fd2:	2301      	movs	r3, #1
    7fd4:	3219      	adds	r2, #25
    7fd6:	9906      	ldr	r1, [sp, #24]
    7fd8:	9805      	ldr	r0, [sp, #20]
    7fda:	9e07      	ldr	r6, [sp, #28]
    7fdc:	47b0      	blx	r6
    7fde:	1c43      	adds	r3, r0, #1
    7fe0:	d030      	beq.n	8044 <_printf_i+0x224>
    7fe2:	3501      	adds	r5, #1
    7fe4:	68e3      	ldr	r3, [r4, #12]
    7fe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7fe8:	1a9b      	subs	r3, r3, r2
    7fea:	429d      	cmp	r5, r3
    7fec:	dbf0      	blt.n	7fd0 <_printf_i+0x1b0>
    7fee:	e7e9      	b.n	7fc4 <_printf_i+0x1a4>
    7ff0:	2d00      	cmp	r5, #0
    7ff2:	d0a9      	beq.n	7f48 <_printf_i+0x128>
    7ff4:	9e04      	ldr	r6, [sp, #16]
    7ff6:	0028      	movs	r0, r5
    7ff8:	0039      	movs	r1, r7
    7ffa:	f7fe fd77 	bl	6aec <__aeabi_uidivmod>
    7ffe:	9b03      	ldr	r3, [sp, #12]
    8000:	3e01      	subs	r6, #1
    8002:	5c5b      	ldrb	r3, [r3, r1]
    8004:	0028      	movs	r0, r5
    8006:	7033      	strb	r3, [r6, #0]
    8008:	0039      	movs	r1, r7
    800a:	f7fe fce9 	bl	69e0 <__udivsi3>
    800e:	1e05      	subs	r5, r0, #0
    8010:	d1f1      	bne.n	7ff6 <_printf_i+0x1d6>
    8012:	2f08      	cmp	r7, #8
    8014:	d109      	bne.n	802a <_printf_i+0x20a>
    8016:	6823      	ldr	r3, [r4, #0]
    8018:	07db      	lsls	r3, r3, #31
    801a:	d506      	bpl.n	802a <_printf_i+0x20a>
    801c:	6863      	ldr	r3, [r4, #4]
    801e:	6922      	ldr	r2, [r4, #16]
    8020:	4293      	cmp	r3, r2
    8022:	dc02      	bgt.n	802a <_printf_i+0x20a>
    8024:	2330      	movs	r3, #48	; 0x30
    8026:	3e01      	subs	r6, #1
    8028:	7033      	strb	r3, [r6, #0]
    802a:	9b04      	ldr	r3, [sp, #16]
    802c:	1b9b      	subs	r3, r3, r6
    802e:	6123      	str	r3, [r4, #16]
    8030:	9b07      	ldr	r3, [sp, #28]
    8032:	aa09      	add	r2, sp, #36	; 0x24
    8034:	9300      	str	r3, [sp, #0]
    8036:	0021      	movs	r1, r4
    8038:	9b06      	ldr	r3, [sp, #24]
    803a:	9805      	ldr	r0, [sp, #20]
    803c:	f7ff fe82 	bl	7d44 <_printf_common>
    8040:	1c43      	adds	r3, r0, #1
    8042:	d1b3      	bne.n	7fac <_printf_i+0x18c>
    8044:	2001      	movs	r0, #1
    8046:	4240      	negs	r0, r0
    8048:	b00b      	add	sp, #44	; 0x2c
    804a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    804c:	000094c2 	.word	0x000094c2
    8050:	000094b1 	.word	0x000094b1

00008054 <_putc_r>:
    8054:	b570      	push	{r4, r5, r6, lr}
    8056:	0006      	movs	r6, r0
    8058:	000d      	movs	r5, r1
    805a:	0014      	movs	r4, r2
    805c:	2800      	cmp	r0, #0
    805e:	d004      	beq.n	806a <_putc_r+0x16>
    8060:	6983      	ldr	r3, [r0, #24]
    8062:	2b00      	cmp	r3, #0
    8064:	d101      	bne.n	806a <_putc_r+0x16>
    8066:	f7ff fac5 	bl	75f4 <__sinit>
    806a:	4b12      	ldr	r3, [pc, #72]	; (80b4 <_putc_r+0x60>)
    806c:	429c      	cmp	r4, r3
    806e:	d111      	bne.n	8094 <_putc_r+0x40>
    8070:	6874      	ldr	r4, [r6, #4]
    8072:	68a3      	ldr	r3, [r4, #8]
    8074:	3b01      	subs	r3, #1
    8076:	60a3      	str	r3, [r4, #8]
    8078:	2b00      	cmp	r3, #0
    807a:	da05      	bge.n	8088 <_putc_r+0x34>
    807c:	69a2      	ldr	r2, [r4, #24]
    807e:	4293      	cmp	r3, r2
    8080:	db12      	blt.n	80a8 <_putc_r+0x54>
    8082:	b2eb      	uxtb	r3, r5
    8084:	2b0a      	cmp	r3, #10
    8086:	d00f      	beq.n	80a8 <_putc_r+0x54>
    8088:	6823      	ldr	r3, [r4, #0]
    808a:	b2e8      	uxtb	r0, r5
    808c:	1c5a      	adds	r2, r3, #1
    808e:	6022      	str	r2, [r4, #0]
    8090:	701d      	strb	r5, [r3, #0]
    8092:	bd70      	pop	{r4, r5, r6, pc}
    8094:	4b08      	ldr	r3, [pc, #32]	; (80b8 <_putc_r+0x64>)
    8096:	429c      	cmp	r4, r3
    8098:	d101      	bne.n	809e <_putc_r+0x4a>
    809a:	68b4      	ldr	r4, [r6, #8]
    809c:	e7e9      	b.n	8072 <_putc_r+0x1e>
    809e:	4b07      	ldr	r3, [pc, #28]	; (80bc <_putc_r+0x68>)
    80a0:	429c      	cmp	r4, r3
    80a2:	d1e6      	bne.n	8072 <_putc_r+0x1e>
    80a4:	68f4      	ldr	r4, [r6, #12]
    80a6:	e7e4      	b.n	8072 <_putc_r+0x1e>
    80a8:	0022      	movs	r2, r4
    80aa:	0029      	movs	r1, r5
    80ac:	0030      	movs	r0, r6
    80ae:	f7ff f8dd 	bl	726c <__swbuf_r>
    80b2:	e7ee      	b.n	8092 <_putc_r+0x3e>
    80b4:	00009460 	.word	0x00009460
    80b8:	00009480 	.word	0x00009480
    80bc:	00009440 	.word	0x00009440

000080c0 <__sread>:
    80c0:	b570      	push	{r4, r5, r6, lr}
    80c2:	000c      	movs	r4, r1
    80c4:	250e      	movs	r5, #14
    80c6:	5f49      	ldrsh	r1, [r1, r5]
    80c8:	f000 f8d6 	bl	8278 <_read_r>
    80cc:	2800      	cmp	r0, #0
    80ce:	db03      	blt.n	80d8 <__sread+0x18>
    80d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    80d2:	181b      	adds	r3, r3, r0
    80d4:	6563      	str	r3, [r4, #84]	; 0x54
    80d6:	bd70      	pop	{r4, r5, r6, pc}
    80d8:	89a3      	ldrh	r3, [r4, #12]
    80da:	4a02      	ldr	r2, [pc, #8]	; (80e4 <__sread+0x24>)
    80dc:	4013      	ands	r3, r2
    80de:	81a3      	strh	r3, [r4, #12]
    80e0:	e7f9      	b.n	80d6 <__sread+0x16>
    80e2:	46c0      	nop			; (mov r8, r8)
    80e4:	ffffefff 	.word	0xffffefff

000080e8 <__swrite>:
    80e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    80ea:	001f      	movs	r7, r3
    80ec:	898b      	ldrh	r3, [r1, #12]
    80ee:	0005      	movs	r5, r0
    80f0:	000c      	movs	r4, r1
    80f2:	0016      	movs	r6, r2
    80f4:	05db      	lsls	r3, r3, #23
    80f6:	d505      	bpl.n	8104 <__swrite+0x1c>
    80f8:	230e      	movs	r3, #14
    80fa:	5ec9      	ldrsh	r1, [r1, r3]
    80fc:	2200      	movs	r2, #0
    80fe:	2302      	movs	r3, #2
    8100:	f000 f874 	bl	81ec <_lseek_r>
    8104:	89a3      	ldrh	r3, [r4, #12]
    8106:	4a05      	ldr	r2, [pc, #20]	; (811c <__swrite+0x34>)
    8108:	0028      	movs	r0, r5
    810a:	4013      	ands	r3, r2
    810c:	81a3      	strh	r3, [r4, #12]
    810e:	0032      	movs	r2, r6
    8110:	230e      	movs	r3, #14
    8112:	5ee1      	ldrsh	r1, [r4, r3]
    8114:	003b      	movs	r3, r7
    8116:	f000 f81f 	bl	8158 <_write_r>
    811a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    811c:	ffffefff 	.word	0xffffefff

00008120 <__sseek>:
    8120:	b570      	push	{r4, r5, r6, lr}
    8122:	000c      	movs	r4, r1
    8124:	250e      	movs	r5, #14
    8126:	5f49      	ldrsh	r1, [r1, r5]
    8128:	f000 f860 	bl	81ec <_lseek_r>
    812c:	89a3      	ldrh	r3, [r4, #12]
    812e:	1c42      	adds	r2, r0, #1
    8130:	d103      	bne.n	813a <__sseek+0x1a>
    8132:	4a05      	ldr	r2, [pc, #20]	; (8148 <__sseek+0x28>)
    8134:	4013      	ands	r3, r2
    8136:	81a3      	strh	r3, [r4, #12]
    8138:	bd70      	pop	{r4, r5, r6, pc}
    813a:	2280      	movs	r2, #128	; 0x80
    813c:	0152      	lsls	r2, r2, #5
    813e:	4313      	orrs	r3, r2
    8140:	81a3      	strh	r3, [r4, #12]
    8142:	6560      	str	r0, [r4, #84]	; 0x54
    8144:	e7f8      	b.n	8138 <__sseek+0x18>
    8146:	46c0      	nop			; (mov r8, r8)
    8148:	ffffefff 	.word	0xffffefff

0000814c <__sclose>:
    814c:	b510      	push	{r4, lr}
    814e:	230e      	movs	r3, #14
    8150:	5ec9      	ldrsh	r1, [r1, r3]
    8152:	f000 f815 	bl	8180 <_close_r>
    8156:	bd10      	pop	{r4, pc}

00008158 <_write_r>:
    8158:	b570      	push	{r4, r5, r6, lr}
    815a:	0005      	movs	r5, r0
    815c:	0008      	movs	r0, r1
    815e:	0011      	movs	r1, r2
    8160:	2200      	movs	r2, #0
    8162:	4c06      	ldr	r4, [pc, #24]	; (817c <_write_r+0x24>)
    8164:	6022      	str	r2, [r4, #0]
    8166:	001a      	movs	r2, r3
    8168:	f7fd f906 	bl	5378 <_write>
    816c:	1c43      	adds	r3, r0, #1
    816e:	d103      	bne.n	8178 <_write_r+0x20>
    8170:	6823      	ldr	r3, [r4, #0]
    8172:	2b00      	cmp	r3, #0
    8174:	d000      	beq.n	8178 <_write_r+0x20>
    8176:	602b      	str	r3, [r5, #0]
    8178:	bd70      	pop	{r4, r5, r6, pc}
    817a:	46c0      	nop			; (mov r8, r8)
    817c:	20000488 	.word	0x20000488

00008180 <_close_r>:
    8180:	2300      	movs	r3, #0
    8182:	b570      	push	{r4, r5, r6, lr}
    8184:	4c06      	ldr	r4, [pc, #24]	; (81a0 <_close_r+0x20>)
    8186:	0005      	movs	r5, r0
    8188:	0008      	movs	r0, r1
    818a:	6023      	str	r3, [r4, #0]
    818c:	f7fd f92e 	bl	53ec <_close>
    8190:	1c43      	adds	r3, r0, #1
    8192:	d103      	bne.n	819c <_close_r+0x1c>
    8194:	6823      	ldr	r3, [r4, #0]
    8196:	2b00      	cmp	r3, #0
    8198:	d000      	beq.n	819c <_close_r+0x1c>
    819a:	602b      	str	r3, [r5, #0]
    819c:	bd70      	pop	{r4, r5, r6, pc}
    819e:	46c0      	nop			; (mov r8, r8)
    81a0:	20000488 	.word	0x20000488

000081a4 <_fstat_r>:
    81a4:	2300      	movs	r3, #0
    81a6:	b570      	push	{r4, r5, r6, lr}
    81a8:	4c06      	ldr	r4, [pc, #24]	; (81c4 <_fstat_r+0x20>)
    81aa:	0005      	movs	r5, r0
    81ac:	0008      	movs	r0, r1
    81ae:	0011      	movs	r1, r2
    81b0:	6023      	str	r3, [r4, #0]
    81b2:	f7fd f91e 	bl	53f2 <_fstat>
    81b6:	1c43      	adds	r3, r0, #1
    81b8:	d103      	bne.n	81c2 <_fstat_r+0x1e>
    81ba:	6823      	ldr	r3, [r4, #0]
    81bc:	2b00      	cmp	r3, #0
    81be:	d000      	beq.n	81c2 <_fstat_r+0x1e>
    81c0:	602b      	str	r3, [r5, #0]
    81c2:	bd70      	pop	{r4, r5, r6, pc}
    81c4:	20000488 	.word	0x20000488

000081c8 <_isatty_r>:
    81c8:	2300      	movs	r3, #0
    81ca:	b570      	push	{r4, r5, r6, lr}
    81cc:	4c06      	ldr	r4, [pc, #24]	; (81e8 <_isatty_r+0x20>)
    81ce:	0005      	movs	r5, r0
    81d0:	0008      	movs	r0, r1
    81d2:	6023      	str	r3, [r4, #0]
    81d4:	f7fd f912 	bl	53fc <_isatty>
    81d8:	1c43      	adds	r3, r0, #1
    81da:	d103      	bne.n	81e4 <_isatty_r+0x1c>
    81dc:	6823      	ldr	r3, [r4, #0]
    81de:	2b00      	cmp	r3, #0
    81e0:	d000      	beq.n	81e4 <_isatty_r+0x1c>
    81e2:	602b      	str	r3, [r5, #0]
    81e4:	bd70      	pop	{r4, r5, r6, pc}
    81e6:	46c0      	nop			; (mov r8, r8)
    81e8:	20000488 	.word	0x20000488

000081ec <_lseek_r>:
    81ec:	b570      	push	{r4, r5, r6, lr}
    81ee:	0005      	movs	r5, r0
    81f0:	0008      	movs	r0, r1
    81f2:	0011      	movs	r1, r2
    81f4:	2200      	movs	r2, #0
    81f6:	4c06      	ldr	r4, [pc, #24]	; (8210 <_lseek_r+0x24>)
    81f8:	6022      	str	r2, [r4, #0]
    81fa:	001a      	movs	r2, r3
    81fc:	f7fd f900 	bl	5400 <_lseek>
    8200:	1c43      	adds	r3, r0, #1
    8202:	d103      	bne.n	820c <_lseek_r+0x20>
    8204:	6823      	ldr	r3, [r4, #0]
    8206:	2b00      	cmp	r3, #0
    8208:	d000      	beq.n	820c <_lseek_r+0x20>
    820a:	602b      	str	r3, [r5, #0]
    820c:	bd70      	pop	{r4, r5, r6, pc}
    820e:	46c0      	nop			; (mov r8, r8)
    8210:	20000488 	.word	0x20000488

00008214 <memchr>:
    8214:	b2c9      	uxtb	r1, r1
    8216:	1882      	adds	r2, r0, r2
    8218:	4290      	cmp	r0, r2
    821a:	d101      	bne.n	8220 <memchr+0xc>
    821c:	2000      	movs	r0, #0
    821e:	4770      	bx	lr
    8220:	7803      	ldrb	r3, [r0, #0]
    8222:	428b      	cmp	r3, r1
    8224:	d0fb      	beq.n	821e <memchr+0xa>
    8226:	3001      	adds	r0, #1
    8228:	e7f6      	b.n	8218 <memchr+0x4>

0000822a <_realloc_r>:
    822a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    822c:	0007      	movs	r7, r0
    822e:	000d      	movs	r5, r1
    8230:	0016      	movs	r6, r2
    8232:	2900      	cmp	r1, #0
    8234:	d105      	bne.n	8242 <_realloc_r+0x18>
    8236:	0011      	movs	r1, r2
    8238:	f7fe fe0e 	bl	6e58 <_malloc_r>
    823c:	0004      	movs	r4, r0
    823e:	0020      	movs	r0, r4
    8240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8242:	2a00      	cmp	r2, #0
    8244:	d103      	bne.n	824e <_realloc_r+0x24>
    8246:	f7fe fdbd 	bl	6dc4 <_free_r>
    824a:	0034      	movs	r4, r6
    824c:	e7f7      	b.n	823e <_realloc_r+0x14>
    824e:	f000 f827 	bl	82a0 <_malloc_usable_size_r>
    8252:	002c      	movs	r4, r5
    8254:	4286      	cmp	r6, r0
    8256:	d9f2      	bls.n	823e <_realloc_r+0x14>
    8258:	0031      	movs	r1, r6
    825a:	0038      	movs	r0, r7
    825c:	f7fe fdfc 	bl	6e58 <_malloc_r>
    8260:	1e04      	subs	r4, r0, #0
    8262:	d0ec      	beq.n	823e <_realloc_r+0x14>
    8264:	0029      	movs	r1, r5
    8266:	0032      	movs	r2, r6
    8268:	f7fe fd88 	bl	6d7c <memcpy>
    826c:	0029      	movs	r1, r5
    826e:	0038      	movs	r0, r7
    8270:	f7fe fda8 	bl	6dc4 <_free_r>
    8274:	e7e3      	b.n	823e <_realloc_r+0x14>
	...

00008278 <_read_r>:
    8278:	b570      	push	{r4, r5, r6, lr}
    827a:	0005      	movs	r5, r0
    827c:	0008      	movs	r0, r1
    827e:	0011      	movs	r1, r2
    8280:	2200      	movs	r2, #0
    8282:	4c06      	ldr	r4, [pc, #24]	; (829c <_read_r+0x24>)
    8284:	6022      	str	r2, [r4, #0]
    8286:	001a      	movs	r2, r3
    8288:	f7fd f854 	bl	5334 <_read>
    828c:	1c43      	adds	r3, r0, #1
    828e:	d103      	bne.n	8298 <_read_r+0x20>
    8290:	6823      	ldr	r3, [r4, #0]
    8292:	2b00      	cmp	r3, #0
    8294:	d000      	beq.n	8298 <_read_r+0x20>
    8296:	602b      	str	r3, [r5, #0]
    8298:	bd70      	pop	{r4, r5, r6, pc}
    829a:	46c0      	nop			; (mov r8, r8)
    829c:	20000488 	.word	0x20000488

000082a0 <_malloc_usable_size_r>:
    82a0:	1f0b      	subs	r3, r1, #4
    82a2:	681b      	ldr	r3, [r3, #0]
    82a4:	1f18      	subs	r0, r3, #4
    82a6:	2b00      	cmp	r3, #0
    82a8:	da01      	bge.n	82ae <_malloc_usable_size_r+0xe>
    82aa:	580b      	ldr	r3, [r1, r0]
    82ac:	18c0      	adds	r0, r0, r3
    82ae:	4770      	bx	lr
    82b0:	656d6954 	.word	0x656d6954
    82b4:	65722072 	.word	0x65722072
    82b8:	0d746573 	.word	0x0d746573
    82bc:	00000000 	.word	0x00000000

000082c0 <__FUNCTION__.14014>:
    82c0:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
    82d0:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    82e0:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
    82f0:	6320746c 0000646d 00000e38 00000e08     lt cmd..8.......
    8300:	00000e00 00000e18 00000e10 00000e30     ............0...
    8310:	00000e20 00000e28                        ...(...

00008318 <__FUNCTION__.13064>:
    8318:	5f666968 646e6573 00000000              hif_send....

00008324 <__FUNCTION__.13074>:
    8324:	5f666968 00727369                       hif_isr.

0000832c <__FUNCTION__.13080>:
    832c:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0000833c <__FUNCTION__.13092>:
    833c:	5f666968 65636572 00657669              hif_receive.

00008348 <__FUNCTION__.13108>:
    8348:	5f666968 69676572 72657473 0062635f     hif_register_cb.
    8358:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
    8368:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
    8378:	006c6961 66696828 64612029 73657264     ail.(hif) addres
    8388:	75622073 61662073 00006c69 66696828     s bus fail..(hif
    8398:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
    83a8:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
    83b8:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
    83c8:	25203d20 3e583230 0000000a 49464957      = %02X>....WIFI
    83d8:	6c616320 6361626c 7369206b 746f6e20      callback is not
    83e8:	67657220 65747369 00646572 6b6f6353      registered.Scok
    83f8:	63207465 626c6c61 206b6361 6e207369     et callback is n
    8408:	7220746f 73696765 65726574 00000064     ot registered...
    8418:	2061744f 6c6c6163 6b636162 20736920     Ota callback is 
    8428:	20746f6e 69676572 72657473 00006465     not registered..
    8438:	70797243 63206f74 626c6c61 206b6361     Crypto callback 
    8448:	6e207369 7220746f 73696765 65726574     is not registere
    8458:	00000064 6d676953 61632061 61626c6c     d...Sigma callba
    8468:	69206b63 6f6e2073 65722074 74736967     ck is not regist
    8478:	64657265 00000000 66696828 6e692029     ered....(hif) in
    8488:	696c6176 72672064 2070756f 00004449     valid group ID..
    8498:	66696828 6f682029 61207473 64207070     (hif) host app d
    84a8:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
    84b8:	253c2065 253c3e75 000a3e58 66696828     e <%u><%X>..(hif
    84c8:	72572029 20676e6f 657a6953 00000000     ) Wrong Size....
    84d8:	66696828 61462029 2065736c 65746e69     (hif) False inte
    84e8:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
    84f8:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
    8508:	7265746e 74707572 67657220 00000000     nterrupt reg....
    8518:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
    8528:	656c646e 746e6920 75727265 25207470     ndle interrupt %
    8538:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
    8548:	66696820 6365725f 65766965 6e49203a      hif_receive: In
    8558:	696c6176 72612064 656d7567 0000746e     valid argument..
    8568:	20505041 75716552 65747365 69532064     APP Requested Si
    8578:	6920657a 616c2073 72656772 61687420     ze is larger tha
    8588:	6874206e 65722065 65766963 75622064     n the recived bu
    8598:	72656666 7a697320 253c2065 253c3e75     ffer size <%u><%
    85a8:	0a3e756c 00000000 20505041 75716552     lu>.....APP Requ
    85b8:	65747365 64412064 73657264 65622073     ested Address be
    85c8:	646e6f79 65687420 63657220 64657669     yond the recived
    85d8:	66756220 20726566 72646461 20737365      buffer address 
    85e8:	20646e61 676e656c 00006874 20705247     and length..GRp 
    85f8:	6425203f 0000000a 50504128 4e492829     ? %d....(APP)(IN
    8608:	00294f46 776f6c53 20676e69 6e776f64     FO).Slowing down
    8618:	002e2e2e 46494828 69614629 6f74206c     ....(HIF)Fail to
    8628:	6b617720 74207075 63206568 00706968      wakup the chip.

00008638 <__FUNCTION__.13043>:
    8638:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

00008644 <__FUNCTION__.13072>:
    8644:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

00008654 <__FUNCTION__.13100>:
    8654:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
    8664:	0063735f 666e6f43 7463696c 49206465     _sc.Conflicted I
    8674:	20222050 252e7525 75252e75 2075252e     P " %u.%u.%u.%u 
    8684:	000a2022 20514552 20746f4e 69666564     " ..REQ Not defi
    8694:	2064656e 000a6425 2079654b 6e207369     ned %d..Key is n
    86a4:	7620746f 64696c61 00000000 61766e49     ot valid....Inva
    86b4:	2064696c 0079654b 44495353 4e454c20     lid Key.SSID LEN
    86c4:	564e4920 44494c41 00000000 49204843      INVALID....CH I
    86d4:	4c41564e 00004449 61766e49 2064696c     NVALID..Invalid 
    86e4:	20706557 2079656b 65646e69 64252078     Wep key index %d
    86f4:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
    8704:	2079656b 676e656c 25206874 00000a64     key length %d...
    8714:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
    8724:	656c2079 6874676e 00000000 65646e75     y length....unde
    8734:	656e6966 65732064 79742063 00006570     fined sec type..
    8744:	6d726946 65726177 72657620 3a202020     Firmware ver   :
    8754:	2e752520 252e7525 76532075 7665726e      %u.%u.%u Svnrev
    8764:	0a752520 00000000 6d726946 65726177      %u.....Firmware
    8774:	69754220 2520646c 69542073 2520656d      Build %s Time %
    8784:	00000a73 6d726946 65726177 6e694d20     s...Firmware Min
    8794:	69726420 20726576 20726576 7525203a      driver ver : %u
    87a4:	2e75252e 000a7525 76697244 76207265     .%u.%u..Driver v
    87b4:	203a7265 252e7525 75252e75 0000000a     er: %u.%u.%u....
    87c4:	313a3731 34333a38 00000000 2072614d     17:18:34....Mar 
    87d4:	32203520 00383130 76697244 62207265      5 2018.Driver b
    87e4:	746c6975 20746120 25097325 00000a73     uilt at %s.%s...
    87f4:	6d73694d 68637461 72694620 7277616d     Mismatch Firmawr
    8804:	65562065 6f697372 0000006e              e Version...

00008810 <__FUNCTION__.12906>:
    8810:	70696863 6b61775f 00000065              chip_wake...

0000881c <__FUNCTION__.12955>:
    881c:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
    882c:	74206465 6564206f 696e692d 6c616974     ed to de-initial
    883c:	00657a69 20737542 6f727265 35282072     ize.Bus error (5
    884c:	64252e29 786c2520 0000000a 6c696146     ).%d %lx....Fail
    885c:	74206465 6177206f 2070756b 20656874     ed to wakup the 
    886c:	70696863 00000000 76697244 65567265     chip....DriverVe
    887c:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..

0000888c <__FUNCTION__.12953>:
    888c:	645f6d6e 695f7672 0074696e              nm_drv_init.

00008898 <__FUNCTION__.12960>:
    8898:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
    88a8:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
    88b8:	6965645f 2074696e 6c696166 00000000     _deinit fail....
    88c8:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
    88d8:	73616c66 69642068 6c626173 61662065     flash disable fa
    88e8:	00006c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
    88f8:	6c696166 696e6920 75622074 00000073     fail init bus...
    8908:	6c696166 74206465 6e65206f 656c6261     failed to enable
    8918:	746e6920 75727265 2e737470 0000002e      interrupts.....
    8928:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
    8938:	6e69206c 62207469 00007375 70696843     l init bus..Chip
    8948:	20444920 0a786c25 00000000 00001e18      ID %lx.........
    8958:	00001e18 00001e48 00001dca 00001dee     ....H...........
    8968:	00001dfc 00001e2e 00001e2e 00001e76     ............v...
    8978:	00001dae 00001eb0 00001eb0 00001eb0     ................
    8988:	00001eb0 00001e0a cac4c9c3              ............

00008994 <__FUNCTION__.12259>:
    8994:	5f697073 00646d63                       spi_cmd.

0000899c <__FUNCTION__.12266>:
    899c:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

000089ac <__FUNCTION__.12275>:
    89ac:	5f697073 5f646d63 00707372              spi_cmd_rsp.

000089b8 <__FUNCTION__.12291>:
    89b8:	5f697073 61746164 6165725f 00000064     spi_data_read...

000089c8 <__FUNCTION__.12306>:
    89c8:	5f697073 61746164 6972775f 00006574     spi_data_write..

000089d8 <__FUNCTION__.12318>:
    89d8:	5f697073 74697277 65725f65 00000067     spi_write_reg...

000089e8 <__FUNCTION__.12329>:
    89e8:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

000089f8 <__FUNCTION__.12341>:
    89f8:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00008a08 <__FUNCTION__.12354>:
    8a08:	735f6d6e 725f6970 00646165              nm_spi_read.

00008a14 <__FUNCTION__.12375>:
    8a14:	735f6d6e 695f6970 0074696e              nm_spi_init.

00008a20 <crc7_syndrome_table>:
    8a20:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
    8a30:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
    8a40:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
    8a50:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
    8a60:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
    8a70:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
    8a80:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
    8a90:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
    8aa0:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
    8ab0:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
    8ac0:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
    8ad0:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
    8ae0:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
    8af0:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
    8b00:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
    8b10:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
    8b20:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    8b30:	6e692064 6e726574 72206c61 20646165     d internal read 
    8b40:	746f7270 6c6f636f 74697720 52432068     protocol with CR
    8b50:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
    8b60:	20687469 20435243 2e66666f 00002e2e     ith CRC off.....
    8b70:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    8b80:	6e692064 6e726574 72206c61 20646165     d internal read 
    8b90:	746f7270 6c6f636f 002e2e2e 696d6e5b     protocol....[nmi
    8ba0:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
    8bb0:	6e726574 77206c61 65746972 6f727020     ternal write pro
    8bc0:	6f636f74 6572206c 2e2e2e67 00000000     tocol reg.......
    8bd0:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
    8be0:	20646d63 64616572 69686320 64692070     cmd read chip id
    8bf0:	002e2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    8c00:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
    8c10:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
    8c20:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    8c30:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
    8c40:	202c6573 64616572 6f6c6220 28206b63     se, read block (
    8c50:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
    8c60:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    8c70:	206b636f 61746164 61657220 2e2e2e64     ock data read...
    8c80:	00000000 65736552 6e612074 65722064     ....Reset and re
    8c90:	20797274 25206425 2520786c 00000a64     try %d %lx %d...
    8ca0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    8cb0:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
    8cc0:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
    8cd0:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
    8ce0:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
    8cf0:	69727720 62206574 6b636f6c 30252820      write block (%0
    8d00:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
    8d10:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    8d20:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
    8d30:	20737562 6f727265 2e2e2e72 00000000     bus error.......
    8d40:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    8d50:	61642064 62206174 6b636f6c 69727720     d data block wri
    8d60:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
    8d70:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    8d80:	656c6961 61642064 62206174 6b636f6c     ailed data block
    8d90:	63726320 69727720 202c6574 20737562      crc write, bus 
    8da0:	6f727265 2e2e2e72 00000000 696d6e5b     error.......[nmi
    8db0:	69707320 46203a5d 656c6961 75622064      spi]: Failed bu
    8dc0:	72652073 2e726f72 00002e2e 696d6e5b     s error.....[nmi
    8dd0:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    8de0:	72206174 6f707365 2065736e 64616572     ta response read
    8df0:	7825202c 20782520 000a7825 696d6e5b     , %x %x %x..[nmi
    8e00:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    8e10:	206b636f 61746164 69727720 2e2e6574     ock data write..
    8e20:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    8e30:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
    8e40:	73756220 72726520 2e2e726f 0000002e      bus error......
    8e50:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    8e60:	6d632064 65722064 6e6f7073 72206573     d cmd response r
    8e70:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
    8e80:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    8e90:	656c6961 61642064 72206174 6f707365     ailed data respo
    8ea0:	2065736e 64616572 7562202c 72652073     nse read, bus er
    8eb0:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
    8ec0:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
    8ed0:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
    8ee0:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
    8ef0:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    8f00:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
    8f10:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
    8f20:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    8f30:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
    8f40:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
    8f50:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    8f60:	72202c64 20646165 20676572 38302528     d, read reg (%08
    8f70:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
    8f80:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
    8f90:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
    8fa0:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    8fb0:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    8fc0:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
    8fd0:	6e612074 65722064 20797274 25206425     t and retry %d %
    8fe0:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
    8ff0:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
    9000:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
    9010:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    9020:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
    9030:	74697277 65722065 25282067 29783830     write reg (%08x)
    9040:	0a2e2e2e 00000000 65736552 6e612074     ........Reset an
    9050:	65722064 20797274 25206425 2520786c     d retry %d %lx %
    9060:	000a786c 52524528 75432952 6e657272     lx..(ERRR)Curren
    9070:	253c2074 000a3e64 6b636f53 206f7420     t <%d>..Sock to 
    9080:	656c6564 3c206574 0a3e6425 00000000     delete <%d>.....
    9090:	6b636f53 25207465 65732064 6f697373     Socket %d sessio
    90a0:	4449206e 25203d20 000a0d64 42000800     n ID = %d......B
    90b0:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    90c0:	42001c00 00004462 0000445e 0000445e     ...BbD..^D..^D..
    90d0:	000044c0 000044c0 00004476 00004468     .D...D..vD..hD..
    90e0:	0000447c 000044ae 00004680 00004660     |D...D...F..`F..
    90f0:	00004660 000046ec 00004672 0000468e     `F...F..rF...F..
    9100:	00004664 0000469c 000046dc              dF...F...F..

0000910c <_tcc_apbcmasks>:
    910c:	00000100 00000200 00000400              ............

00009118 <_tcc_cc_nums>:
    9118:	00020204                                ....

0000911c <_tcc_gclk_ids>:
    911c:	001b1a1a                                ....

00009120 <_tcc_maxs>:
    9120:	00ffffff 00ffffff 0000ffff              ............

0000912c <_tcc_ow_nums>:
    912c:	00020408                                ....

00009130 <_tcc_intflag>:
    9130:	00000001 00000002 00000004 00000008     ................
    9140:	00001000 00002000 00004000 00008000     ..... ...@......
    9150:	00010000 00020000 00040000 00080000     ................

00009160 <tcc_interrupt_vectors.12442>:
    9160:	0011100f 42002000 42002400 42002800     ..... .B.$.B.(.B
    9170:	57202d2d 31434e49 20303035 462d6957     -- WINC1500 Wi-F
    9180:	514d2069 63205454 20746168 6d617865     i MQTT chat exam
    9190:	20656c70 0a0d2d2d 53202d2d 32444d41     ple --..-- SAMD2
    91a0:	50585f31 4e49414c 505f4445 2d204f52     1_XPLAINED_PRO -
    91b0:	2d0a0d2d 6f43202d 6c69706d 203a6465     -..-- Compiled: 
    91c0:	2072614d 32203231 20383130 343a3931     Mar 12 2018 19:4
    91d0:	32343a32 0d2d2d20 00000000 5454514d     2:42 --.....MQTT
    91e0:	696e6920 6c616974 74617a69 206e6f69      initialization 
    91f0:	6c696166 202e6465 6f727245 6f632072     failed. Error co
    9200:	69206564 25282073 0a0d2964 00000000     de is (%d)......
    9210:	5454514d 67657220 65747369 61632072     MQTT register ca
    9220:	61626c6c 66206b63 656c6961 45202e64     llback failed. E
    9230:	726f7272 646f6320 73692065 64252820     rror code is (%d
    9240:	000a0d29 72657355 25203a20 000a0d73     )...User : %s...
    9250:	73257325 00000000 6e69616d 326d203a     %s%s....main: m2
    9260:	69775f6d 695f6966 2074696e 6c6c6163     m_wifi_init call
    9270:	72726520 2821726f 0d296425 0000000a      error!(%d).....
    9280:	706d6554 6425203a 00000a0d 61746144     Temp: %d....Data
    9290:	6e657320 000d2174 2044454c 000d4e4f      sent!..LED ON..
    92a0:	2044454c 0d46464f 00000000 54737953     LED OFF.....SysT
    92b0:	206b6369 666e6f63 72756769 6f697461     ick configuratio
    92c0:	7265206e 00726f72 0a0d7325 00000000     n error.%s......

000092d0 <main_mqtt_broker>:
    92d0:	2e323831 2e333631 2e323131 00373032     182.163.112.207.
    92e0:	6e6e6f43 20746365 6c696166 206f7420     Connect fail to 
    92f0:	76726573 25287265 20212973 72746572     server(%s)! retr
    9300:	74692079 74756120 74616d6f 6c616369     y it automatical
    9310:	0d2e796c 0000000a 786f6264 7461642f     ly......dbox/dat
    9320:	00232f61 786f6264 7461642f 00002f61     a/#.dbox/data/..
    9330:	73627553 62697263 74206465 6874206f     Subscribed to th
    9340:	6f742065 3a636970 0d732520 0000000a     e topic: %s.....
    9350:	70657250 74617261 206e6f69 7420666f     Preparation of t
    9360:	63206568 20746168 20736168 6e656562     he chat has been
    9370:	6d6f6320 74656c70 0d2e6465 00000000      completed......
    9380:	5454514d 6f726220 2072656b 6c636564     MQTT broker decl
    9390:	20656e69 72756f79 63636120 21737365     ine your access!
    93a0:	72726520 6320726f 2065646f 0a0d6425      error code %d..
    93b0:	00000000 203e3e20 00000000 0000000d     .... >> ........
    93c0:	5454514d 73696420 6e6e6f63 65746365     MQTT disconnecte
    93d0:	00000d64 462d6957 6f632069 63656e6e     d...Wi-Fi connec
    93e0:	0d646574 00000000 462d6957 69642069     ted.....Wi-Fi di
    93f0:	6e6f6373 7463656e 000d6465 70707573     sconnected..supp
    9400:	3174726f 00003332 61746144 74666f53     ort123..DataSoft
    9410:	4669575f 00000069 462d6957 50492069     _WiFi...Wi-Fi IP
    9420:	20736920 252e7525 75252e75 0d75252e      is %u.%u.%u.%u.
    9430:	0000000a 7349514d 00007064              ....MQIsdp..

0000943c <_global_impure_ptr>:
    943c:	2000005c                                \.. 

00009440 <__sf_fake_stderr>:
	...

00009460 <__sf_fake_stdin>:
	...

00009480 <__sf_fake_stdout>:
	...
    94a0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    94b0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    94c0:	31300046 35343332 39383736 64636261     F.0123456789abcd
    94d0:	00006665                                ef..

000094d4 <_init>:
    94d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    94d6:	46c0      	nop			; (mov r8, r8)
    94d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    94da:	bc08      	pop	{r3}
    94dc:	469e      	mov	lr, r3
    94de:	4770      	bx	lr

000094e0 <__init_array_start>:
    94e0:	000000dd 	.word	0x000000dd

000094e4 <_fini>:
    94e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    94e6:	46c0      	nop			; (mov r8, r8)
    94e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    94ea:	bc08      	pop	{r3}
    94ec:	469e      	mov	lr, r3
    94ee:	4770      	bx	lr

000094f0 <__fini_array_start>:
    94f0:	000000b5 	.word	0x000000b5
