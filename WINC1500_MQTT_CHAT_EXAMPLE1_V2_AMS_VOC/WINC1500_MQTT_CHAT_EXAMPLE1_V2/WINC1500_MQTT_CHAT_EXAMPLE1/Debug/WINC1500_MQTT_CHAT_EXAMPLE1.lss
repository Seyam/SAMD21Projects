
WINC1500_MQTT_CHAT_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000bd60  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  0000bd60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000460  20000070  0000bdd0  00020070  2**2
                  ALLOC
  3 .stack        00002000  200004d0  0000c230  00020070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  5 .comment      000000ca  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  6 .debug_info   00068be3  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00008f86  00000000  00000000  00088d45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00014644  00000000  00000000  00091ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000f88  00000000  00000000  000a630f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001530  00000000  00000000  000a7297  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000250db  00000000  00000000  000a87c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001fcfa  00000000  00000000  000cd8a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00099ad6  00000000  00000000  000ed59c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000035fc  00000000  00000000  00187074  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d0 24 00 20 55 5d 00 00 51 5d 00 00 51 5d 00 00     .$. U]..Q]..Q]..
	...
      2c:	51 5d 00 00 00 00 00 00 00 00 00 00 51 5d 00 00     Q]..........Q]..
      3c:	51 5d 00 00 51 5d 00 00 51 5d 00 00 51 5d 00 00     Q]..Q]..Q]..Q]..
      4c:	51 5d 00 00 61 3f 00 00 51 5d 00 00 51 5d 00 00     Q]..a?..Q]..Q]..
      5c:	51 5d 00 00 51 5d 00 00 cd 44 00 00 dd 44 00 00     Q]..Q]...D...D..
      6c:	ed 44 00 00 fd 44 00 00 0d 45 00 00 1d 45 00 00     .D...D...E...E..
      7c:	21 5d 00 00 31 5d 00 00 41 5d 00 00 51 5d 00 00     !]..1]..A]..Q]..
      8c:	51 5d 00 00 51 5d 00 00 51 5d 00 00 51 5d 00 00     Q]..Q]..Q]..Q]..
      9c:	51 5d 00 00 51 5d 00 00 51 5d 00 00 51 5d 00 00     Q]..Q]..Q]..Q]..
      ac:	51 5d 00 00 00 00 00 00                             Q]......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	0000bd60 	.word	0x0000bd60

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000074 	.word	0x20000074
     108:	0000bd60 	.word	0x0000bd60
     10c:	0000bd60 	.word	0x0000bd60
     110:	00000000 	.word	0x00000000

00000114 <ams_sensor_read>:
#include "i2c_master.h"

const uint8_t AMS_ADDRESS_AND_READ  = 0x5a;

enum status_code ams_sensor_read(struct i2c_master_module *i2c_master_instance_ptr, int *voc, int *co2)
{
     114:	b570      	push	{r4, r5, r6, lr}
     116:	b086      	sub	sp, #24
     118:	0004      	movs	r4, r0
     11a:	000d      	movs	r5, r1
     11c:	0016      	movs	r6, r2
    uint8_t data[9];
    struct i2c_master_packet packet = {
     11e:	220c      	movs	r2, #12
     120:	2100      	movs	r1, #0
     122:	4668      	mov	r0, sp
     124:	4b12      	ldr	r3, [pc, #72]	; (170 <ams_sensor_read+0x5c>)
     126:	4798      	blx	r3
     128:	235a      	movs	r3, #90	; 0x5a
     12a:	466a      	mov	r2, sp
     12c:	8013      	strh	r3, [r2, #0]
     12e:	3b51      	subs	r3, #81	; 0x51
     130:	8053      	strh	r3, [r2, #2]
     132:	ab03      	add	r3, sp, #12
     134:	9301      	str	r3, [sp, #4]
	    .data = data,
	    .ten_bit_address = false,
	    .high_speed = false,
    };
    // stop and nack enabled
	enum status_code ret = i2c_master_read_packet_wait(i2c_master_instance_ptr, &packet);
     136:	4669      	mov	r1, sp
     138:	0020      	movs	r0, r4
     13a:	4b0e      	ldr	r3, [pc, #56]	; (174 <ams_sensor_read+0x60>)
     13c:	4798      	blx	r3
    //print_to_terminal("ret in  shtc1_read_async_result = 0x%x\n", ret);
    
    if (ret)
     13e:	2800      	cmp	r0, #0
     140:	d10e      	bne.n	160 <ams_sensor_read+0x4c>
		return ret;
    if (data[2])
     142:	ab03      	add	r3, sp, #12
     144:	7899      	ldrb	r1, [r3, #2]
     146:	2900      	cmp	r1, #0
     148:	d10c      	bne.n	164 <ams_sensor_read+0x50>
	{
		printf("data[2] status = 0x%x\n", data[2]);	
		return STATUS_ERR_BAD_DATA;
	}
    
	*co2 = (data[0] << 8) + data[1] ;
     14a:	aa03      	add	r2, sp, #12
     14c:	7813      	ldrb	r3, [r2, #0]
     14e:	021b      	lsls	r3, r3, #8
     150:	7851      	ldrb	r1, [r2, #1]
     152:	185b      	adds	r3, r3, r1
     154:	6033      	str	r3, [r6, #0]
	*voc = (data[7] << 8) + data[8] ;
     156:	79d3      	ldrb	r3, [r2, #7]
     158:	021b      	lsls	r3, r3, #8
     15a:	7a12      	ldrb	r2, [r2, #8]
     15c:	189b      	adds	r3, r3, r2
     15e:	602b      	str	r3, [r5, #0]

    return STATUS_OK;	
	
};
     160:	b006      	add	sp, #24
     162:	bd70      	pop	{r4, r5, r6, pc}
		printf("data[2] status = 0x%x\n", data[2]);	
     164:	4804      	ldr	r0, [pc, #16]	; (178 <ams_sensor_read+0x64>)
     166:	4b05      	ldr	r3, [pc, #20]	; (17c <ams_sensor_read+0x68>)
     168:	4798      	blx	r3
		return STATUS_ERR_BAD_DATA;
     16a:	2013      	movs	r0, #19
     16c:	e7f8      	b.n	160 <ams_sensor_read+0x4c>
     16e:	46c0      	nop			; (mov r8, r8)
     170:	00009483 	.word	0x00009483
     174:	00000795 	.word	0x00000795
     178:	0000a980 	.word	0x0000a980
     17c:	000095e5 	.word	0x000095e5

00000180 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     180:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     182:	2207      	movs	r2, #7
     184:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     186:	421a      	tst	r2, r3
     188:	d1fc      	bne.n	184 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     18a:	4770      	bx	lr

0000018c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     18c:	b5f0      	push	{r4, r5, r6, r7, lr}
     18e:	46d6      	mov	lr, sl
     190:	464f      	mov	r7, r9
     192:	4646      	mov	r6, r8
     194:	b5c0      	push	{r6, r7, lr}
     196:	b08a      	sub	sp, #40	; 0x28
     198:	0006      	movs	r6, r0
     19a:	000f      	movs	r7, r1
     19c:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     19e:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     1a0:	0008      	movs	r0, r1
     1a2:	4ba0      	ldr	r3, [pc, #640]	; (424 <i2c_master_init+0x298>)
     1a4:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     1a6:	4aa0      	ldr	r2, [pc, #640]	; (428 <i2c_master_init+0x29c>)
     1a8:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     1aa:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     1ac:	2301      	movs	r3, #1
     1ae:	40ab      	lsls	r3, r5
     1b0:	430b      	orrs	r3, r1
     1b2:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     1b4:	a909      	add	r1, sp, #36	; 0x24
     1b6:	7b23      	ldrb	r3, [r4, #12]
     1b8:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     1ba:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     1bc:	b2c5      	uxtb	r5, r0
     1be:	0028      	movs	r0, r5
     1c0:	4b9a      	ldr	r3, [pc, #616]	; (42c <i2c_master_init+0x2a0>)
     1c2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     1c4:	0028      	movs	r0, r5
     1c6:	4b9a      	ldr	r3, [pc, #616]	; (430 <i2c_master_init+0x2a4>)
     1c8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     1ca:	7b20      	ldrb	r0, [r4, #12]
     1cc:	2100      	movs	r1, #0
     1ce:	4b99      	ldr	r3, [pc, #612]	; (434 <i2c_master_init+0x2a8>)
     1d0:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     1d2:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     1d4:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     1d6:	079b      	lsls	r3, r3, #30
     1d8:	d505      	bpl.n	1e6 <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     1da:	b00a      	add	sp, #40	; 0x28
     1dc:	bc1c      	pop	{r2, r3, r4}
     1de:	4690      	mov	r8, r2
     1e0:	4699      	mov	r9, r3
     1e2:	46a2      	mov	sl, r4
     1e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     1e6:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     1e8:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     1ea:	07db      	lsls	r3, r3, #31
     1ec:	d4f5      	bmi.n	1da <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     1ee:	6830      	ldr	r0, [r6, #0]
     1f0:	4b8c      	ldr	r3, [pc, #560]	; (424 <i2c_master_init+0x298>)
     1f2:	4699      	mov	r9, r3
     1f4:	4798      	blx	r3
     1f6:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     1f8:	498f      	ldr	r1, [pc, #572]	; (438 <i2c_master_init+0x2ac>)
     1fa:	4b90      	ldr	r3, [pc, #576]	; (43c <i2c_master_init+0x2b0>)
     1fc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     1fe:	00ad      	lsls	r5, r5, #2
     200:	4b8f      	ldr	r3, [pc, #572]	; (440 <i2c_master_init+0x2b4>)
     202:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
     204:	2300      	movs	r3, #0
     206:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
     208:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
     20a:	2500      	movs	r5, #0
     20c:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
     20e:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
     210:	2225      	movs	r2, #37	; 0x25
     212:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
     214:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     216:	3314      	adds	r3, #20
     218:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     21a:	6833      	ldr	r3, [r6, #0]
     21c:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     21e:	0018      	movs	r0, r3
     220:	47c8      	blx	r9
     222:	4681      	mov	r9, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     224:	2380      	movs	r3, #128	; 0x80
     226:	aa08      	add	r2, sp, #32
     228:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     22a:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     22c:	2301      	movs	r3, #1
     22e:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     230:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     232:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     234:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     236:	2800      	cmp	r0, #0
     238:	d100      	bne.n	23c <i2c_master_init+0xb0>
     23a:	e0af      	b.n	39c <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
     23c:	ab08      	add	r3, sp, #32
     23e:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     240:	2302      	movs	r3, #2
     242:	aa08      	add	r2, sp, #32
     244:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     246:	0c00      	lsrs	r0, r0, #16
     248:	b2c0      	uxtb	r0, r0
     24a:	0011      	movs	r1, r2
     24c:	4b7d      	ldr	r3, [pc, #500]	; (444 <i2c_master_init+0x2b8>)
     24e:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     250:	2f00      	cmp	r7, #0
     252:	d100      	bne.n	256 <i2c_master_init+0xca>
     254:	e0a7      	b.n	3a6 <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
     256:	ab08      	add	r3, sp, #32
     258:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     25a:	2302      	movs	r3, #2
     25c:	aa08      	add	r2, sp, #32
     25e:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     260:	0c3f      	lsrs	r7, r7, #16
     262:	b2f8      	uxtb	r0, r7
     264:	0011      	movs	r1, r2
     266:	4b77      	ldr	r3, [pc, #476]	; (444 <i2c_master_init+0x2b8>)
     268:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     26a:	8aa3      	ldrh	r3, [r4, #20]
     26c:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     26e:	8ae3      	ldrh	r3, [r4, #22]
     270:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     272:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     274:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     276:	2b00      	cmp	r3, #0
     278:	d104      	bne.n	284 <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     27a:	4b73      	ldr	r3, [pc, #460]	; (448 <i2c_master_init+0x2bc>)
     27c:	789b      	ldrb	r3, [r3, #2]
     27e:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     280:	0fdb      	lsrs	r3, r3, #31
     282:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     284:	68a1      	ldr	r1, [r4, #8]
     286:	6923      	ldr	r3, [r4, #16]
     288:	430b      	orrs	r3, r1
     28a:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     28c:	2224      	movs	r2, #36	; 0x24
     28e:	5ca2      	ldrb	r2, [r4, r2]
     290:	2a00      	cmp	r2, #0
     292:	d002      	beq.n	29a <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     294:	2280      	movs	r2, #128	; 0x80
     296:	05d2      	lsls	r2, r2, #23
     298:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     29a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     29c:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     29e:	222c      	movs	r2, #44	; 0x2c
     2a0:	5ca2      	ldrb	r2, [r4, r2]
     2a2:	2a00      	cmp	r2, #0
     2a4:	d103      	bne.n	2ae <i2c_master_init+0x122>
     2a6:	2280      	movs	r2, #128	; 0x80
     2a8:	0492      	lsls	r2, r2, #18
     2aa:	4291      	cmp	r1, r2
     2ac:	d102      	bne.n	2b4 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     2ae:	2280      	movs	r2, #128	; 0x80
     2b0:	0512      	lsls	r2, r2, #20
     2b2:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     2b4:	222d      	movs	r2, #45	; 0x2d
     2b6:	5ca2      	ldrb	r2, [r4, r2]
     2b8:	2a00      	cmp	r2, #0
     2ba:	d002      	beq.n	2c2 <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     2bc:	2280      	movs	r2, #128	; 0x80
     2be:	0412      	lsls	r2, r2, #16
     2c0:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     2c2:	222e      	movs	r2, #46	; 0x2e
     2c4:	5ca2      	ldrb	r2, [r4, r2]
     2c6:	2a00      	cmp	r2, #0
     2c8:	d002      	beq.n	2d0 <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     2ca:	2280      	movs	r2, #128	; 0x80
     2cc:	03d2      	lsls	r2, r2, #15
     2ce:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     2d0:	4642      	mov	r2, r8
     2d2:	6812      	ldr	r2, [r2, #0]
     2d4:	4313      	orrs	r3, r2
     2d6:	4642      	mov	r2, r8
     2d8:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     2da:	2380      	movs	r3, #128	; 0x80
     2dc:	005b      	lsls	r3, r3, #1
     2de:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     2e0:	4648      	mov	r0, r9
     2e2:	3014      	adds	r0, #20
     2e4:	b2c0      	uxtb	r0, r0
     2e6:	4b59      	ldr	r3, [pc, #356]	; (44c <i2c_master_init+0x2c0>)
     2e8:	4798      	blx	r3
     2ea:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     2ec:	23fa      	movs	r3, #250	; 0xfa
     2ee:	009b      	lsls	r3, r3, #2
     2f0:	6822      	ldr	r2, [r4, #0]
     2f2:	435a      	muls	r2, r3
     2f4:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     2f6:	6863      	ldr	r3, [r4, #4]
     2f8:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     2fa:	4d55      	ldr	r5, [pc, #340]	; (450 <i2c_master_init+0x2c4>)
     2fc:	47a8      	blx	r5
     2fe:	9000      	str	r0, [sp, #0]
     300:	9101      	str	r1, [sp, #4]
     302:	464b      	mov	r3, r9
     304:	0058      	lsls	r0, r3, #1
     306:	47a8      	blx	r5
     308:	9002      	str	r0, [sp, #8]
     30a:	9103      	str	r1, [sp, #12]
     30c:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     30e:	47a8      	blx	r5
     310:	9004      	str	r0, [sp, #16]
     312:	9105      	str	r1, [sp, #20]
     314:	4f4f      	ldr	r7, [pc, #316]	; (454 <i2c_master_init+0x2c8>)
     316:	4a50      	ldr	r2, [pc, #320]	; (458 <i2c_master_init+0x2cc>)
     318:	4b50      	ldr	r3, [pc, #320]	; (45c <i2c_master_init+0x2d0>)
     31a:	9800      	ldr	r0, [sp, #0]
     31c:	9901      	ldr	r1, [sp, #4]
     31e:	47b8      	blx	r7
     320:	0002      	movs	r2, r0
     322:	000b      	movs	r3, r1
     324:	9804      	ldr	r0, [sp, #16]
     326:	9905      	ldr	r1, [sp, #20]
     328:	47b8      	blx	r7
     32a:	4e4d      	ldr	r6, [pc, #308]	; (460 <i2c_master_init+0x2d4>)
     32c:	2200      	movs	r2, #0
     32e:	4b4d      	ldr	r3, [pc, #308]	; (464 <i2c_master_init+0x2d8>)
     330:	47b0      	blx	r6
     332:	9004      	str	r0, [sp, #16]
     334:	9105      	str	r1, [sp, #20]
     336:	4648      	mov	r0, r9
     338:	47a8      	blx	r5
     33a:	0002      	movs	r2, r0
     33c:	000b      	movs	r3, r1
     33e:	9804      	ldr	r0, [sp, #16]
     340:	9905      	ldr	r1, [sp, #20]
     342:	47b8      	blx	r7
     344:	0002      	movs	r2, r0
     346:	000b      	movs	r3, r1
     348:	4d47      	ldr	r5, [pc, #284]	; (468 <i2c_master_init+0x2dc>)
     34a:	9800      	ldr	r0, [sp, #0]
     34c:	9901      	ldr	r1, [sp, #4]
     34e:	47a8      	blx	r5
     350:	9a02      	ldr	r2, [sp, #8]
     352:	9b03      	ldr	r3, [sp, #12]
     354:	47b0      	blx	r6
     356:	2200      	movs	r2, #0
     358:	4b44      	ldr	r3, [pc, #272]	; (46c <i2c_master_init+0x2e0>)
     35a:	47a8      	blx	r5
     35c:	9a02      	ldr	r2, [sp, #8]
     35e:	9b03      	ldr	r3, [sp, #12]
     360:	4d43      	ldr	r5, [pc, #268]	; (470 <i2c_master_init+0x2e4>)
     362:	47a8      	blx	r5
     364:	4b43      	ldr	r3, [pc, #268]	; (474 <i2c_master_init+0x2e8>)
     366:	4798      	blx	r3
     368:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     36a:	2380      	movs	r3, #128	; 0x80
     36c:	049b      	lsls	r3, r3, #18
     36e:	68a2      	ldr	r2, [r4, #8]
     370:	429a      	cmp	r2, r3
     372:	d01e      	beq.n	3b2 <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     374:	0003      	movs	r3, r0
     376:	2040      	movs	r0, #64	; 0x40
     378:	2dff      	cmp	r5, #255	; 0xff
     37a:	d900      	bls.n	37e <i2c_master_init+0x1f2>
     37c:	e72d      	b.n	1da <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     37e:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     380:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     382:	25ff      	movs	r5, #255	; 0xff
     384:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     386:	0624      	lsls	r4, r4, #24
     388:	4325      	orrs	r5, r4
     38a:	0400      	lsls	r0, r0, #16
     38c:	23ff      	movs	r3, #255	; 0xff
     38e:	041b      	lsls	r3, r3, #16
     390:	4018      	ands	r0, r3
     392:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     394:	4643      	mov	r3, r8
     396:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     398:	2000      	movs	r0, #0
     39a:	e71e      	b.n	1da <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     39c:	2100      	movs	r1, #0
     39e:	4640      	mov	r0, r8
     3a0:	4b35      	ldr	r3, [pc, #212]	; (478 <i2c_master_init+0x2ec>)
     3a2:	4798      	blx	r3
     3a4:	e74a      	b.n	23c <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     3a6:	2101      	movs	r1, #1
     3a8:	4640      	mov	r0, r8
     3aa:	4b33      	ldr	r3, [pc, #204]	; (478 <i2c_master_init+0x2ec>)
     3ac:	4798      	blx	r3
     3ae:	0007      	movs	r7, r0
     3b0:	e751      	b.n	256 <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     3b2:	26fa      	movs	r6, #250	; 0xfa
     3b4:	00b6      	lsls	r6, r6, #2
     3b6:	4653      	mov	r3, sl
     3b8:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     3ba:	9800      	ldr	r0, [sp, #0]
     3bc:	9901      	ldr	r1, [sp, #4]
     3be:	0002      	movs	r2, r0
     3c0:	000b      	movs	r3, r1
     3c2:	4c27      	ldr	r4, [pc, #156]	; (460 <i2c_master_init+0x2d4>)
     3c4:	47a0      	blx	r4
     3c6:	9000      	str	r0, [sp, #0]
     3c8:	9101      	str	r1, [sp, #4]
     3ca:	0030      	movs	r0, r6
     3cc:	4b20      	ldr	r3, [pc, #128]	; (450 <i2c_master_init+0x2c4>)
     3ce:	4798      	blx	r3
     3d0:	2200      	movs	r2, #0
     3d2:	4b2a      	ldr	r3, [pc, #168]	; (47c <i2c_master_init+0x2f0>)
     3d4:	47b8      	blx	r7
     3d6:	0002      	movs	r2, r0
     3d8:	000b      	movs	r3, r1
     3da:	9800      	ldr	r0, [sp, #0]
     3dc:	9901      	ldr	r1, [sp, #4]
     3de:	4c24      	ldr	r4, [pc, #144]	; (470 <i2c_master_init+0x2e4>)
     3e0:	47a0      	blx	r4
     3e2:	2200      	movs	r2, #0
     3e4:	4b21      	ldr	r3, [pc, #132]	; (46c <i2c_master_init+0x2e0>)
     3e6:	4c20      	ldr	r4, [pc, #128]	; (468 <i2c_master_init+0x2dc>)
     3e8:	47a0      	blx	r4
     3ea:	4b22      	ldr	r3, [pc, #136]	; (474 <i2c_master_init+0x2e8>)
     3ec:	4798      	blx	r3
     3ee:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     3f0:	d00c      	beq.n	40c <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     3f2:	0031      	movs	r1, r6
     3f4:	9807      	ldr	r0, [sp, #28]
     3f6:	4b22      	ldr	r3, [pc, #136]	; (480 <i2c_master_init+0x2f4>)
     3f8:	4798      	blx	r3
     3fa:	3802      	subs	r0, #2
     3fc:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     3fe:	002b      	movs	r3, r5
     400:	2dff      	cmp	r5, #255	; 0xff
     402:	d80c      	bhi.n	41e <i2c_master_init+0x292>
     404:	28ff      	cmp	r0, #255	; 0xff
     406:	d9bc      	bls.n	382 <i2c_master_init+0x1f6>
     408:	2040      	movs	r0, #64	; 0x40
     40a:	e6e6      	b.n	1da <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     40c:	0071      	lsls	r1, r6, #1
     40e:	1e48      	subs	r0, r1, #1
     410:	9b07      	ldr	r3, [sp, #28]
     412:	469c      	mov	ip, r3
     414:	4460      	add	r0, ip
     416:	4b1a      	ldr	r3, [pc, #104]	; (480 <i2c_master_init+0x2f4>)
     418:	4798      	blx	r3
     41a:	3801      	subs	r0, #1
     41c:	e7ef      	b.n	3fe <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     41e:	2040      	movs	r0, #64	; 0x40
     420:	e6db      	b.n	1da <i2c_master_init+0x4e>
     422:	46c0      	nop			; (mov r8, r8)
     424:	00004425 	.word	0x00004425
     428:	40000400 	.word	0x40000400
     42c:	00005599 	.word	0x00005599
     430:	0000550d 	.word	0x0000550d
     434:	00004261 	.word	0x00004261
     438:	000008ad 	.word	0x000008ad
     43c:	00004461 	.word	0x00004461
     440:	200003e4 	.word	0x200003e4
     444:	00005691 	.word	0x00005691
     448:	41002000 	.word	0x41002000
     44c:	000055b5 	.word	0x000055b5
     450:	000092a1 	.word	0x000092a1
     454:	0000870d 	.word	0x0000870d
     458:	e826d695 	.word	0xe826d695
     45c:	3e112e0b 	.word	0x3e112e0b
     460:	00007a85 	.word	0x00007a85
     464:	40240000 	.word	0x40240000
     468:	00008c0d 	.word	0x00008c0d
     46c:	3ff00000 	.word	0x3ff00000
     470:	000080a5 	.word	0x000080a5
     474:	00009239 	.word	0x00009239
     478:	000042ad 	.word	0x000042ad
     47c:	40080000 	.word	0x40080000
     480:	00007415 	.word	0x00007415

00000484 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     484:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     486:	7e1a      	ldrb	r2, [r3, #24]
     488:	0792      	lsls	r2, r2, #30
     48a:	d507      	bpl.n	49c <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     48c:	2202      	movs	r2, #2
     48e:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     490:	8b5b      	ldrh	r3, [r3, #26]
     492:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     494:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     496:	17db      	asrs	r3, r3, #31
     498:	4018      	ands	r0, r3
}
     49a:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     49c:	8b5a      	ldrh	r2, [r3, #26]
     49e:	0752      	lsls	r2, r2, #29
     4a0:	d506      	bpl.n	4b0 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     4a2:	6859      	ldr	r1, [r3, #4]
     4a4:	22c0      	movs	r2, #192	; 0xc0
     4a6:	0292      	lsls	r2, r2, #10
     4a8:	430a      	orrs	r2, r1
     4aa:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     4ac:	2018      	movs	r0, #24
     4ae:	e7f4      	b.n	49a <_i2c_master_address_response+0x16>
	return STATUS_OK;
     4b0:	2000      	movs	r0, #0
     4b2:	e7f2      	b.n	49a <_i2c_master_address_response+0x16>

000004b4 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     4b4:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     4b6:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     4b8:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     4ba:	2401      	movs	r4, #1
     4bc:	2502      	movs	r5, #2
     4be:	7e11      	ldrb	r1, [r2, #24]
     4c0:	4221      	tst	r1, r4
     4c2:	d10b      	bne.n	4dc <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     4c4:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     4c6:	4229      	tst	r1, r5
     4c8:	d106      	bne.n	4d8 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     4ca:	3301      	adds	r3, #1
     4cc:	b29b      	uxth	r3, r3
     4ce:	8901      	ldrh	r1, [r0, #8]
     4d0:	4299      	cmp	r1, r3
     4d2:	d8f4      	bhi.n	4be <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     4d4:	2012      	movs	r0, #18
     4d6:	e002      	b.n	4de <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     4d8:	2000      	movs	r0, #0
     4da:	e000      	b.n	4de <_i2c_master_wait_for_bus+0x2a>
     4dc:	2000      	movs	r0, #0
}
     4de:	bd30      	pop	{r4, r5, pc}

000004e0 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     4e0:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     4e2:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     4e4:	6862      	ldr	r2, [r4, #4]
     4e6:	2380      	movs	r3, #128	; 0x80
     4e8:	02db      	lsls	r3, r3, #11
     4ea:	4313      	orrs	r3, r2
     4ec:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     4ee:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     4f0:	4b02      	ldr	r3, [pc, #8]	; (4fc <_i2c_master_send_hs_master_code+0x1c>)
     4f2:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     4f4:	2301      	movs	r3, #1
     4f6:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     4f8:	bd10      	pop	{r4, pc}
     4fa:	46c0      	nop			; (mov r8, r8)
     4fc:	000004b5 	.word	0x000004b5

00000500 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     500:	b5f0      	push	{r4, r5, r6, r7, lr}
     502:	46de      	mov	lr, fp
     504:	4657      	mov	r7, sl
     506:	464e      	mov	r6, r9
     508:	4645      	mov	r5, r8
     50a:	b5e0      	push	{r5, r6, r7, lr}
     50c:	b083      	sub	sp, #12
     50e:	0006      	movs	r6, r0
     510:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     512:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     514:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     516:	682b      	ldr	r3, [r5, #0]
     518:	011b      	lsls	r3, r3, #4
     51a:	0fdb      	lsrs	r3, r3, #31
     51c:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     51e:	7a4b      	ldrb	r3, [r1, #9]
     520:	2b00      	cmp	r3, #0
     522:	d12b      	bne.n	57c <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     524:	686b      	ldr	r3, [r5, #4]
     526:	4a58      	ldr	r2, [pc, #352]	; (688 <_i2c_master_read_packet+0x188>)
     528:	4013      	ands	r3, r2
     52a:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     52c:	464b      	mov	r3, r9
     52e:	7a1b      	ldrb	r3, [r3, #8]
     530:	2b00      	cmp	r3, #0
     532:	d127      	bne.n	584 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     534:	464b      	mov	r3, r9
     536:	881b      	ldrh	r3, [r3, #0]
     538:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     53a:	464a      	mov	r2, r9
     53c:	7a52      	ldrb	r2, [r2, #9]
     53e:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     540:	4313      	orrs	r3, r2
     542:	2201      	movs	r2, #1
     544:	4313      	orrs	r3, r2
     546:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     548:	0030      	movs	r0, r6
     54a:	4b50      	ldr	r3, [pc, #320]	; (68c <_i2c_master_read_packet+0x18c>)
     54c:	4798      	blx	r3
     54e:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     550:	4653      	mov	r3, sl
     552:	2b00      	cmp	r3, #0
     554:	d003      	beq.n	55e <_i2c_master_read_packet+0x5e>
     556:	464b      	mov	r3, r9
     558:	885b      	ldrh	r3, [r3, #2]
     55a:	2b01      	cmp	r3, #1
     55c:	d03b      	beq.n	5d6 <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
     55e:	686b      	ldr	r3, [r5, #4]
     560:	4a49      	ldr	r2, [pc, #292]	; (688 <_i2c_master_read_packet+0x188>)
     562:	4013      	ands	r3, r2
     564:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     566:	9b01      	ldr	r3, [sp, #4]
     568:	2b00      	cmp	r3, #0
     56a:	d03a      	beq.n	5e2 <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     56c:	9801      	ldr	r0, [sp, #4]
     56e:	b003      	add	sp, #12
     570:	bc3c      	pop	{r2, r3, r4, r5}
     572:	4690      	mov	r8, r2
     574:	4699      	mov	r9, r3
     576:	46a2      	mov	sl, r4
     578:	46ab      	mov	fp, r5
     57a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     57c:	7a89      	ldrb	r1, [r1, #10]
     57e:	4b44      	ldr	r3, [pc, #272]	; (690 <_i2c_master_read_packet+0x190>)
     580:	4798      	blx	r3
     582:	e7cf      	b.n	524 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
     584:	464b      	mov	r3, r9
     586:	881b      	ldrh	r3, [r3, #0]
     588:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     58a:	464a      	mov	r2, r9
     58c:	7a52      	ldrb	r2, [r2, #9]
     58e:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     590:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     592:	2280      	movs	r2, #128	; 0x80
     594:	0212      	lsls	r2, r2, #8
     596:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     598:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     59a:	0030      	movs	r0, r6
     59c:	4b3b      	ldr	r3, [pc, #236]	; (68c <_i2c_master_read_packet+0x18c>)
     59e:	4798      	blx	r3
     5a0:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     5a2:	686b      	ldr	r3, [r5, #4]
     5a4:	4a38      	ldr	r2, [pc, #224]	; (688 <_i2c_master_read_packet+0x188>)
     5a6:	4013      	ands	r3, r2
     5a8:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
     5aa:	2800      	cmp	r0, #0
     5ac:	d1de      	bne.n	56c <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
     5ae:	0030      	movs	r0, r6
     5b0:	4b38      	ldr	r3, [pc, #224]	; (694 <_i2c_master_read_packet+0x194>)
     5b2:	4798      	blx	r3
     5b4:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
     5b6:	2800      	cmp	r0, #0
     5b8:	d1d8      	bne.n	56c <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     5ba:	464b      	mov	r3, r9
     5bc:	881b      	ldrh	r3, [r3, #0]
     5be:	0a1b      	lsrs	r3, r3, #8
     5c0:	2278      	movs	r2, #120	; 0x78
     5c2:	4313      	orrs	r3, r2
     5c4:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     5c6:	464a      	mov	r2, r9
     5c8:	7a52      	ldrb	r2, [r2, #9]
     5ca:	0392      	lsls	r2, r2, #14
     5cc:	2101      	movs	r1, #1
     5ce:	430a      	orrs	r2, r1
     5d0:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     5d2:	626b      	str	r3, [r5, #36]	; 0x24
     5d4:	e7b8      	b.n	548 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     5d6:	686a      	ldr	r2, [r5, #4]
     5d8:	2380      	movs	r3, #128	; 0x80
     5da:	02db      	lsls	r3, r3, #11
     5dc:	4313      	orrs	r3, r2
     5de:	606b      	str	r3, [r5, #4]
     5e0:	e7c1      	b.n	566 <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
     5e2:	0030      	movs	r0, r6
     5e4:	4b2b      	ldr	r3, [pc, #172]	; (694 <_i2c_master_read_packet+0x194>)
     5e6:	4798      	blx	r3
     5e8:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     5ea:	2800      	cmp	r0, #0
     5ec:	d1be      	bne.n	56c <_i2c_master_read_packet+0x6c>
     5ee:	3c01      	subs	r4, #1
     5f0:	b2a4      	uxth	r4, r4
     5f2:	4680      	mov	r8, r0
		while (tmp_data_length--) {
     5f4:	4b28      	ldr	r3, [pc, #160]	; (698 <_i2c_master_read_packet+0x198>)
     5f6:	469b      	mov	fp, r3
     5f8:	e015      	b.n	626 <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     5fa:	2c01      	cmp	r4, #1
     5fc:	d020      	beq.n	640 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
     5fe:	0030      	movs	r0, r6
     600:	4b26      	ldr	r3, [pc, #152]	; (69c <_i2c_master_read_packet+0x19c>)
     602:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     604:	4643      	mov	r3, r8
     606:	1c5f      	adds	r7, r3, #1
     608:	b2bf      	uxth	r7, r7
     60a:	2328      	movs	r3, #40	; 0x28
     60c:	5ceb      	ldrb	r3, [r5, r3]
     60e:	464a      	mov	r2, r9
     610:	6852      	ldr	r2, [r2, #4]
     612:	4641      	mov	r1, r8
     614:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
     616:	0030      	movs	r0, r6
     618:	4b1c      	ldr	r3, [pc, #112]	; (68c <_i2c_master_read_packet+0x18c>)
     61a:	4798      	blx	r3
     61c:	3c01      	subs	r4, #1
     61e:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
     620:	2800      	cmp	r0, #0
     622:	d115      	bne.n	650 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
     624:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
     626:	455c      	cmp	r4, fp
     628:	d014      	beq.n	654 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     62a:	8b6b      	ldrh	r3, [r5, #26]
     62c:	069b      	lsls	r3, r3, #26
     62e:	d527      	bpl.n	680 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     630:	7af3      	ldrb	r3, [r6, #11]
     632:	2b00      	cmp	r3, #0
     634:	d0e3      	beq.n	5fe <_i2c_master_read_packet+0xfe>
     636:	4653      	mov	r3, sl
     638:	2b00      	cmp	r3, #0
     63a:	d1de      	bne.n	5fa <_i2c_master_read_packet+0xfa>
     63c:	2c00      	cmp	r4, #0
     63e:	d1de      	bne.n	5fe <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     640:	686a      	ldr	r2, [r5, #4]
     642:	2380      	movs	r3, #128	; 0x80
     644:	02db      	lsls	r3, r3, #11
     646:	4313      	orrs	r3, r2
     648:	606b      	str	r3, [r5, #4]
     64a:	3c01      	subs	r4, #1
     64c:	b2a4      	uxth	r4, r4
     64e:	e7ea      	b.n	626 <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
     650:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
     652:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     654:	7ab3      	ldrb	r3, [r6, #10]
     656:	2b00      	cmp	r3, #0
     658:	d109      	bne.n	66e <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
     65a:	0030      	movs	r0, r6
     65c:	4b0f      	ldr	r3, [pc, #60]	; (69c <_i2c_master_read_packet+0x19c>)
     65e:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     660:	2328      	movs	r3, #40	; 0x28
     662:	5cea      	ldrb	r2, [r5, r3]
     664:	464b      	mov	r3, r9
     666:	685b      	ldr	r3, [r3, #4]
     668:	4641      	mov	r1, r8
     66a:	545a      	strb	r2, [r3, r1]
     66c:	e77e      	b.n	56c <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
     66e:	0030      	movs	r0, r6
     670:	4b0a      	ldr	r3, [pc, #40]	; (69c <_i2c_master_read_packet+0x19c>)
     672:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     674:	686a      	ldr	r2, [r5, #4]
     676:	23c0      	movs	r3, #192	; 0xc0
     678:	029b      	lsls	r3, r3, #10
     67a:	4313      	orrs	r3, r2
     67c:	606b      	str	r3, [r5, #4]
     67e:	e7ec      	b.n	65a <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
     680:	2341      	movs	r3, #65	; 0x41
     682:	9301      	str	r3, [sp, #4]
     684:	e772      	b.n	56c <_i2c_master_read_packet+0x6c>
     686:	46c0      	nop			; (mov r8, r8)
     688:	fffbffff 	.word	0xfffbffff
     68c:	000004b5 	.word	0x000004b5
     690:	000004e1 	.word	0x000004e1
     694:	00000485 	.word	0x00000485
     698:	0000ffff 	.word	0x0000ffff
     69c:	00000181 	.word	0x00000181

000006a0 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
     6a2:	46de      	mov	lr, fp
     6a4:	4657      	mov	r7, sl
     6a6:	464e      	mov	r6, r9
     6a8:	4645      	mov	r5, r8
     6aa:	b5e0      	push	{r5, r6, r7, lr}
     6ac:	b083      	sub	sp, #12
     6ae:	0006      	movs	r6, r0
     6b0:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     6b2:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     6b4:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     6b6:	4b32      	ldr	r3, [pc, #200]	; (780 <_i2c_master_write_packet+0xe0>)
     6b8:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     6ba:	7a7b      	ldrb	r3, [r7, #9]
     6bc:	2b00      	cmp	r3, #0
     6be:	d11d      	bne.n	6fc <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     6c0:	686b      	ldr	r3, [r5, #4]
     6c2:	4a30      	ldr	r2, [pc, #192]	; (784 <_i2c_master_write_packet+0xe4>)
     6c4:	4013      	ands	r3, r2
     6c6:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     6c8:	7a3b      	ldrb	r3, [r7, #8]
     6ca:	2b00      	cmp	r3, #0
     6cc:	d01b      	beq.n	706 <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     6ce:	883b      	ldrh	r3, [r7, #0]
     6d0:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     6d2:	7a7a      	ldrb	r2, [r7, #9]
     6d4:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     6d6:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     6d8:	2280      	movs	r2, #128	; 0x80
     6da:	0212      	lsls	r2, r2, #8
     6dc:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     6de:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     6e0:	0030      	movs	r0, r6
     6e2:	4b29      	ldr	r3, [pc, #164]	; (788 <_i2c_master_write_packet+0xe8>)
     6e4:	4798      	blx	r3
     6e6:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     6e8:	2800      	cmp	r0, #0
     6ea:	d013      	beq.n	714 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     6ec:	9801      	ldr	r0, [sp, #4]
     6ee:	b003      	add	sp, #12
     6f0:	bc3c      	pop	{r2, r3, r4, r5}
     6f2:	4690      	mov	r8, r2
     6f4:	4699      	mov	r9, r3
     6f6:	46a2      	mov	sl, r4
     6f8:	46ab      	mov	fp, r5
     6fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     6fc:	7ab9      	ldrb	r1, [r7, #10]
     6fe:	0030      	movs	r0, r6
     700:	4b22      	ldr	r3, [pc, #136]	; (78c <_i2c_master_write_packet+0xec>)
     702:	4798      	blx	r3
     704:	e7dc      	b.n	6c0 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     706:	883b      	ldrh	r3, [r7, #0]
     708:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     70a:	7a7a      	ldrb	r2, [r7, #9]
     70c:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     70e:	4313      	orrs	r3, r2
     710:	626b      	str	r3, [r5, #36]	; 0x24
     712:	e7e5      	b.n	6e0 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
     714:	0030      	movs	r0, r6
     716:	4b1e      	ldr	r3, [pc, #120]	; (790 <_i2c_master_write_packet+0xf0>)
     718:	4798      	blx	r3
     71a:	1e03      	subs	r3, r0, #0
     71c:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     71e:	d1e5      	bne.n	6ec <_i2c_master_write_packet+0x4c>
     720:	46a0      	mov	r8, r4
     722:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     724:	3320      	adds	r3, #32
     726:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
     728:	4b15      	ldr	r3, [pc, #84]	; (780 <_i2c_master_write_packet+0xe0>)
     72a:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
     72c:	4b16      	ldr	r3, [pc, #88]	; (788 <_i2c_master_write_packet+0xe8>)
     72e:	469a      	mov	sl, r3
		while (tmp_data_length--) {
     730:	4544      	cmp	r4, r8
     732:	d015      	beq.n	760 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     734:	8b6b      	ldrh	r3, [r5, #26]
     736:	464a      	mov	r2, r9
     738:	4213      	tst	r3, r2
     73a:	d01d      	beq.n	778 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
     73c:	0030      	movs	r0, r6
     73e:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     740:	687b      	ldr	r3, [r7, #4]
     742:	5d1a      	ldrb	r2, [r3, r4]
     744:	2328      	movs	r3, #40	; 0x28
     746:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
     748:	0030      	movs	r0, r6
     74a:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
     74c:	2800      	cmp	r0, #0
     74e:	d106      	bne.n	75e <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     750:	8b6b      	ldrh	r3, [r5, #26]
     752:	3401      	adds	r4, #1
     754:	075b      	lsls	r3, r3, #29
     756:	d5eb      	bpl.n	730 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
     758:	231e      	movs	r3, #30
     75a:	9301      	str	r3, [sp, #4]
     75c:	e000      	b.n	760 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
     75e:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     760:	7ab3      	ldrb	r3, [r6, #10]
     762:	2b00      	cmp	r3, #0
     764:	d0c2      	beq.n	6ec <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
     766:	0030      	movs	r0, r6
     768:	4b05      	ldr	r3, [pc, #20]	; (780 <_i2c_master_write_packet+0xe0>)
     76a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     76c:	686a      	ldr	r2, [r5, #4]
     76e:	23c0      	movs	r3, #192	; 0xc0
     770:	029b      	lsls	r3, r3, #10
     772:	4313      	orrs	r3, r2
     774:	606b      	str	r3, [r5, #4]
     776:	e7b9      	b.n	6ec <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
     778:	2341      	movs	r3, #65	; 0x41
     77a:	9301      	str	r3, [sp, #4]
     77c:	e7b6      	b.n	6ec <_i2c_master_write_packet+0x4c>
     77e:	46c0      	nop			; (mov r8, r8)
     780:	00000181 	.word	0x00000181
     784:	fffbffff 	.word	0xfffbffff
     788:	000004b5 	.word	0x000004b5
     78c:	000004e1 	.word	0x000004e1
     790:	00000485 	.word	0x00000485

00000794 <i2c_master_read_packet_wait>:
{
     794:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
     796:	8b83      	ldrh	r3, [r0, #28]
     798:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     79a:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     79c:	2b00      	cmp	r3, #0
     79e:	d001      	beq.n	7a4 <i2c_master_read_packet_wait+0x10>
}
     7a0:	0010      	movs	r0, r2
     7a2:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     7a4:	3301      	adds	r3, #1
     7a6:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     7a8:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     7aa:	4b02      	ldr	r3, [pc, #8]	; (7b4 <i2c_master_read_packet_wait+0x20>)
     7ac:	4798      	blx	r3
     7ae:	0002      	movs	r2, r0
     7b0:	e7f6      	b.n	7a0 <i2c_master_read_packet_wait+0xc>
     7b2:	46c0      	nop			; (mov r8, r8)
     7b4:	00000501 	.word	0x00000501

000007b8 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     7b8:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     7ba:	8b83      	ldrh	r3, [r0, #28]
     7bc:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     7be:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     7c0:	2b00      	cmp	r3, #0
     7c2:	d001      	beq.n	7c8 <i2c_master_write_packet_wait_no_stop+0x10>

	module->send_stop = false;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
     7c4:	0010      	movs	r0, r2
     7c6:	bd10      	pop	{r4, pc}
	module->send_stop = false;
     7c8:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     7ca:	3301      	adds	r3, #1
     7cc:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     7ce:	4b02      	ldr	r3, [pc, #8]	; (7d8 <i2c_master_write_packet_wait_no_stop+0x20>)
     7d0:	4798      	blx	r3
     7d2:	0002      	movs	r2, r0
     7d4:	e7f6      	b.n	7c4 <i2c_master_write_packet_wait_no_stop+0xc>
     7d6:	46c0      	nop			; (mov r8, r8)
     7d8:	000006a1 	.word	0x000006a1

000007dc <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     7dc:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     7de:	2207      	movs	r2, #7
     7e0:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
     7e2:	421a      	tst	r2, r3
     7e4:	d1fc      	bne.n	7e0 <_i2c_master_wait_for_sync+0x4>
}
     7e6:	4770      	bx	lr

000007e8 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     7e8:	b570      	push	{r4, r5, r6, lr}
     7ea:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     7ec:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     7ee:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     7f0:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     7f2:	8b83      	ldrh	r3, [r0, #28]
     7f4:	1aed      	subs	r5, r5, r3
     7f6:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     7f8:	8b83      	ldrh	r3, [r0, #28]
     7fa:	3b01      	subs	r3, #1
     7fc:	b29b      	uxth	r3, r3
     7fe:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     800:	0113      	lsls	r3, r2, #4
     802:	d51d      	bpl.n	840 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     804:	7ac3      	ldrb	r3, [r0, #11]
     806:	2b00      	cmp	r3, #0
     808:	d003      	beq.n	812 <_i2c_master_read+0x2a>
     80a:	8b83      	ldrh	r3, [r0, #28]
     80c:	b29b      	uxth	r3, r3
     80e:	2b01      	cmp	r3, #1
     810:	d010      	beq.n	834 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     812:	8ba3      	ldrh	r3, [r4, #28]
     814:	b29b      	uxth	r3, r3
     816:	2b00      	cmp	r3, #0
     818:	d102      	bne.n	820 <_i2c_master_read+0x38>
		if (module->send_stop) {
     81a:	7aa3      	ldrb	r3, [r4, #10]
     81c:	2b00      	cmp	r3, #0
     81e:	d11c      	bne.n	85a <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     820:	0020      	movs	r0, r4
     822:	4b12      	ldr	r3, [pc, #72]	; (86c <_i2c_master_read+0x84>)
     824:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     826:	6a23      	ldr	r3, [r4, #32]
     828:	195d      	adds	r5, r3, r5
     82a:	2328      	movs	r3, #40	; 0x28
     82c:	5cf3      	ldrb	r3, [r6, r3]
     82e:	b2db      	uxtb	r3, r3
     830:	702b      	strb	r3, [r5, #0]
}
     832:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     834:	6872      	ldr	r2, [r6, #4]
     836:	2380      	movs	r3, #128	; 0x80
     838:	02db      	lsls	r3, r3, #11
     83a:	4313      	orrs	r3, r2
     83c:	6073      	str	r3, [r6, #4]
     83e:	e7e8      	b.n	812 <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     840:	7ac3      	ldrb	r3, [r0, #11]
     842:	2b00      	cmp	r3, #0
     844:	d0e5      	beq.n	812 <_i2c_master_read+0x2a>
     846:	8b83      	ldrh	r3, [r0, #28]
     848:	b29b      	uxth	r3, r3
     84a:	2b00      	cmp	r3, #0
     84c:	d1e1      	bne.n	812 <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     84e:	6872      	ldr	r2, [r6, #4]
     850:	2380      	movs	r3, #128	; 0x80
     852:	02db      	lsls	r3, r3, #11
     854:	4313      	orrs	r3, r2
     856:	6073      	str	r3, [r6, #4]
     858:	e7db      	b.n	812 <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     85a:	0020      	movs	r0, r4
     85c:	4b03      	ldr	r3, [pc, #12]	; (86c <_i2c_master_read+0x84>)
     85e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     860:	6872      	ldr	r2, [r6, #4]
     862:	23c0      	movs	r3, #192	; 0xc0
     864:	029b      	lsls	r3, r3, #10
     866:	4313      	orrs	r3, r2
     868:	6073      	str	r3, [r6, #4]
     86a:	e7d9      	b.n	820 <_i2c_master_read+0x38>
     86c:	000007dd 	.word	0x000007dd

00000870 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     870:	b570      	push	{r4, r5, r6, lr}
     872:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     874:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     876:	8b6b      	ldrh	r3, [r5, #26]
     878:	075b      	lsls	r3, r3, #29
     87a:	d503      	bpl.n	884 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     87c:	221e      	movs	r2, #30
     87e:	2325      	movs	r3, #37	; 0x25
     880:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     882:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     884:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     886:	8b83      	ldrh	r3, [r0, #28]
     888:	1af6      	subs	r6, r6, r3
     88a:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     88c:	8b83      	ldrh	r3, [r0, #28]
     88e:	3b01      	subs	r3, #1
     890:	b29b      	uxth	r3, r3
     892:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     894:	4b04      	ldr	r3, [pc, #16]	; (8a8 <_i2c_master_write+0x38>)
     896:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     898:	6a23      	ldr	r3, [r4, #32]
     89a:	199e      	adds	r6, r3, r6
     89c:	7833      	ldrb	r3, [r6, #0]
     89e:	b2db      	uxtb	r3, r3
     8a0:	2228      	movs	r2, #40	; 0x28
     8a2:	54ab      	strb	r3, [r5, r2]
     8a4:	e7ed      	b.n	882 <_i2c_master_write+0x12>
     8a6:	46c0      	nop			; (mov r8, r8)
     8a8:	000007dd 	.word	0x000007dd

000008ac <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     8ac:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     8ae:	0080      	lsls	r0, r0, #2
     8b0:	4b75      	ldr	r3, [pc, #468]	; (a88 <_i2c_master_interrupt_handler+0x1dc>)
     8b2:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     8b4:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     8b6:	682b      	ldr	r3, [r5, #0]
     8b8:	011b      	lsls	r3, r3, #4
     8ba:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     8bc:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     8be:	7e26      	ldrb	r6, [r4, #24]
     8c0:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     8c2:	8b63      	ldrh	r3, [r4, #26]
     8c4:	b29b      	uxth	r3, r3
     8c6:	2b00      	cmp	r3, #0
     8c8:	d103      	bne.n	8d2 <_i2c_master_interrupt_handler+0x26>
     8ca:	8ba3      	ldrh	r3, [r4, #28]
     8cc:	b29b      	uxth	r3, r3
     8ce:	2b00      	cmp	r3, #0
     8d0:	d123      	bne.n	91a <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     8d2:	8b63      	ldrh	r3, [r4, #26]
     8d4:	b29b      	uxth	r3, r3
     8d6:	2b00      	cmp	r3, #0
     8d8:	d008      	beq.n	8ec <_i2c_master_interrupt_handler+0x40>
     8da:	8ba3      	ldrh	r3, [r4, #28]
     8dc:	b29b      	uxth	r3, r3
     8de:	2b00      	cmp	r3, #0
     8e0:	d104      	bne.n	8ec <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
     8e2:	3325      	adds	r3, #37	; 0x25
     8e4:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     8e6:	2b05      	cmp	r3, #5
     8e8:	d100      	bne.n	8ec <_i2c_master_interrupt_handler+0x40>
     8ea:	e06d      	b.n	9c8 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     8ec:	8b63      	ldrh	r3, [r4, #26]
     8ee:	b29b      	uxth	r3, r3
     8f0:	2b00      	cmp	r3, #0
     8f2:	d024      	beq.n	93e <_i2c_master_interrupt_handler+0x92>
     8f4:	8ba3      	ldrh	r3, [r4, #28]
     8f6:	b29b      	uxth	r3, r3
     8f8:	2b00      	cmp	r3, #0
     8fa:	d020      	beq.n	93e <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     8fc:	8b6b      	ldrh	r3, [r5, #26]
     8fe:	069b      	lsls	r3, r3, #26
     900:	d500      	bpl.n	904 <_i2c_master_interrupt_handler+0x58>
     902:	e081      	b.n	a08 <_i2c_master_interrupt_handler+0x15c>
     904:	2a00      	cmp	r2, #0
     906:	d004      	beq.n	912 <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     908:	8ba3      	ldrh	r3, [r4, #28]
     90a:	b29b      	uxth	r3, r3
     90c:	2b01      	cmp	r3, #1
     90e:	d100      	bne.n	912 <_i2c_master_interrupt_handler+0x66>
     910:	e07a      	b.n	a08 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     912:	2241      	movs	r2, #65	; 0x41
     914:	2325      	movs	r3, #37	; 0x25
     916:	54e2      	strb	r2, [r4, r3]
     918:	e011      	b.n	93e <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     91a:	7e2b      	ldrb	r3, [r5, #24]
     91c:	07db      	lsls	r3, r3, #31
     91e:	d507      	bpl.n	930 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     920:	2301      	movs	r3, #1
     922:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     924:	8b6b      	ldrh	r3, [r5, #26]
     926:	079b      	lsls	r3, r3, #30
     928:	d52e      	bpl.n	988 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     92a:	2241      	movs	r2, #65	; 0x41
     92c:	2325      	movs	r3, #37	; 0x25
     92e:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     930:	8ba3      	ldrh	r3, [r4, #28]
     932:	b29b      	uxth	r3, r3
     934:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     936:	2325      	movs	r3, #37	; 0x25
     938:	5ce3      	ldrb	r3, [r4, r3]
     93a:	2b05      	cmp	r3, #5
     93c:	d038      	beq.n	9b0 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     93e:	8b63      	ldrh	r3, [r4, #26]
     940:	b29b      	uxth	r3, r3
     942:	2b00      	cmp	r3, #0
     944:	d007      	beq.n	956 <_i2c_master_interrupt_handler+0xaa>
     946:	8ba3      	ldrh	r3, [r4, #28]
     948:	b29b      	uxth	r3, r3
     94a:	2b00      	cmp	r3, #0
     94c:	d103      	bne.n	956 <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     94e:	3325      	adds	r3, #37	; 0x25
     950:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     952:	2b05      	cmp	r3, #5
     954:	d064      	beq.n	a20 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     956:	2325      	movs	r3, #37	; 0x25
     958:	5ce3      	ldrb	r3, [r4, r3]
     95a:	2b05      	cmp	r3, #5
     95c:	d013      	beq.n	986 <_i2c_master_interrupt_handler+0xda>
     95e:	2325      	movs	r3, #37	; 0x25
     960:	5ce3      	ldrb	r3, [r4, r3]
     962:	2b00      	cmp	r3, #0
     964:	d00f      	beq.n	986 <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     966:	2303      	movs	r3, #3
     968:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     96a:	2300      	movs	r3, #0
     96c:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     96e:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     970:	3325      	adds	r3, #37	; 0x25
     972:	5ce3      	ldrb	r3, [r4, r3]
     974:	2b41      	cmp	r3, #65	; 0x41
     976:	d003      	beq.n	980 <_i2c_master_interrupt_handler+0xd4>
     978:	7aa3      	ldrb	r3, [r4, #10]
     97a:	2b00      	cmp	r3, #0
     97c:	d000      	beq.n	980 <_i2c_master_interrupt_handler+0xd4>
     97e:	e075      	b.n	a6c <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     980:	0773      	lsls	r3, r6, #29
     982:	d500      	bpl.n	986 <_i2c_master_interrupt_handler+0xda>
     984:	e07b      	b.n	a7e <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     986:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     988:	8b6b      	ldrh	r3, [r5, #26]
     98a:	075b      	lsls	r3, r3, #29
     98c:	d5d0      	bpl.n	930 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     98e:	2218      	movs	r2, #24
     990:	2325      	movs	r3, #37	; 0x25
     992:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     994:	2300      	movs	r3, #0
     996:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     998:	7aa3      	ldrb	r3, [r4, #10]
     99a:	2b00      	cmp	r3, #0
     99c:	d0c8      	beq.n	930 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     99e:	0020      	movs	r0, r4
     9a0:	4b3a      	ldr	r3, [pc, #232]	; (a8c <_i2c_master_interrupt_handler+0x1e0>)
     9a2:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     9a4:	686a      	ldr	r2, [r5, #4]
     9a6:	23c0      	movs	r3, #192	; 0xc0
     9a8:	029b      	lsls	r3, r3, #10
     9aa:	4313      	orrs	r3, r2
     9ac:	606b      	str	r3, [r5, #4]
     9ae:	e7bf      	b.n	930 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     9b0:	331f      	adds	r3, #31
     9b2:	5ce3      	ldrb	r3, [r4, r3]
     9b4:	2b00      	cmp	r3, #0
     9b6:	d003      	beq.n	9c0 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     9b8:	0020      	movs	r0, r4
     9ba:	4b35      	ldr	r3, [pc, #212]	; (a90 <_i2c_master_interrupt_handler+0x1e4>)
     9bc:	4798      	blx	r3
     9be:	e7be      	b.n	93e <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     9c0:	0020      	movs	r0, r4
     9c2:	4b34      	ldr	r3, [pc, #208]	; (a94 <_i2c_master_interrupt_handler+0x1e8>)
     9c4:	4798      	blx	r3
     9c6:	e7ba      	b.n	93e <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     9c8:	331f      	adds	r3, #31
     9ca:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     9cc:	2b00      	cmp	r3, #0
     9ce:	d000      	beq.n	9d2 <_i2c_master_interrupt_handler+0x126>
     9d0:	e78c      	b.n	8ec <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
     9d2:	3303      	adds	r3, #3
     9d4:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     9d6:	2300      	movs	r3, #0
     9d8:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     9da:	3325      	adds	r3, #37	; 0x25
     9dc:	2200      	movs	r2, #0
     9de:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     9e0:	7aa3      	ldrb	r3, [r4, #10]
     9e2:	2b00      	cmp	r3, #0
     9e4:	d107      	bne.n	9f6 <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     9e6:	2301      	movs	r3, #1
     9e8:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     9ea:	07f3      	lsls	r3, r6, #31
     9ec:	d5a7      	bpl.n	93e <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     9ee:	68e3      	ldr	r3, [r4, #12]
     9f0:	0020      	movs	r0, r4
     9f2:	4798      	blx	r3
     9f4:	e7a3      	b.n	93e <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     9f6:	0020      	movs	r0, r4
     9f8:	4b24      	ldr	r3, [pc, #144]	; (a8c <_i2c_master_interrupt_handler+0x1e0>)
     9fa:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     9fc:	686a      	ldr	r2, [r5, #4]
     9fe:	23c0      	movs	r3, #192	; 0xc0
     a00:	029b      	lsls	r3, r3, #10
     a02:	4313      	orrs	r3, r2
     a04:	606b      	str	r3, [r5, #4]
     a06:	e7f0      	b.n	9ea <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     a08:	2324      	movs	r3, #36	; 0x24
     a0a:	5ce3      	ldrb	r3, [r4, r3]
     a0c:	2b00      	cmp	r3, #0
     a0e:	d103      	bne.n	a18 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     a10:	0020      	movs	r0, r4
     a12:	4b20      	ldr	r3, [pc, #128]	; (a94 <_i2c_master_interrupt_handler+0x1e8>)
     a14:	4798      	blx	r3
     a16:	e792      	b.n	93e <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     a18:	0020      	movs	r0, r4
     a1a:	4b1d      	ldr	r3, [pc, #116]	; (a90 <_i2c_master_interrupt_handler+0x1e4>)
     a1c:	4798      	blx	r3
     a1e:	e78e      	b.n	93e <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     a20:	331f      	adds	r3, #31
     a22:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     a24:	2b01      	cmp	r3, #1
     a26:	d196      	bne.n	956 <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     a28:	7e2b      	ldrb	r3, [r5, #24]
     a2a:	079b      	lsls	r3, r3, #30
     a2c:	d501      	bpl.n	a32 <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     a2e:	2302      	movs	r3, #2
     a30:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     a32:	2303      	movs	r3, #3
     a34:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     a36:	2300      	movs	r3, #0
     a38:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     a3a:	3325      	adds	r3, #37	; 0x25
     a3c:	2200      	movs	r2, #0
     a3e:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     a40:	07b3      	lsls	r3, r6, #30
     a42:	d503      	bpl.n	a4c <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     a44:	2324      	movs	r3, #36	; 0x24
     a46:	5ce3      	ldrb	r3, [r4, r3]
     a48:	2b01      	cmp	r3, #1
     a4a:	d00b      	beq.n	a64 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     a4c:	07f3      	lsls	r3, r6, #31
     a4e:	d400      	bmi.n	a52 <_i2c_master_interrupt_handler+0x1a6>
     a50:	e781      	b.n	956 <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     a52:	2324      	movs	r3, #36	; 0x24
     a54:	5ce3      	ldrb	r3, [r4, r3]
     a56:	2b00      	cmp	r3, #0
     a58:	d000      	beq.n	a5c <_i2c_master_interrupt_handler+0x1b0>
     a5a:	e77c      	b.n	956 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     a5c:	68e3      	ldr	r3, [r4, #12]
     a5e:	0020      	movs	r0, r4
     a60:	4798      	blx	r3
     a62:	e778      	b.n	956 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     a64:	6923      	ldr	r3, [r4, #16]
     a66:	0020      	movs	r0, r4
     a68:	4798      	blx	r3
     a6a:	e774      	b.n	956 <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     a6c:	0020      	movs	r0, r4
     a6e:	4b07      	ldr	r3, [pc, #28]	; (a8c <_i2c_master_interrupt_handler+0x1e0>)
     a70:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     a72:	686a      	ldr	r2, [r5, #4]
     a74:	23e0      	movs	r3, #224	; 0xe0
     a76:	02db      	lsls	r3, r3, #11
     a78:	4313      	orrs	r3, r2
     a7a:	606b      	str	r3, [r5, #4]
     a7c:	e780      	b.n	980 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     a7e:	6963      	ldr	r3, [r4, #20]
     a80:	0020      	movs	r0, r4
     a82:	4798      	blx	r3
}
     a84:	e77f      	b.n	986 <_i2c_master_interrupt_handler+0xda>
     a86:	46c0      	nop			; (mov r8, r8)
     a88:	200003e4 	.word	0x200003e4
     a8c:	000007dd 	.word	0x000007dd
     a90:	000007e9 	.word	0x000007e9
     a94:	00000871 	.word	0x00000871

00000a98 <shtc1_check_crc>:
static const uint8_t ID_REG_MASK       = 0x1f;
static const uint8_t CRC_POLYNOMIAL    = 0x31;
static const uint8_t CRC_INIT          = 0xff;

static bool shtc1_check_crc(uint8_t *data, uint8_t data_length, uint8_t checksum)
{
     a98:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t crc = CRC_INIT;
    uint8_t current_byte;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < data_length; ++current_byte)
     a9a:	2900      	cmp	r1, #0
     a9c:	d01c      	beq.n	ad8 <shtc1_check_crc+0x40>
     a9e:	0006      	movs	r6, r0
     aa0:	3901      	subs	r1, #1
     aa2:	b2c9      	uxtb	r1, r1
     aa4:	3101      	adds	r1, #1
     aa6:	1840      	adds	r0, r0, r1
     aa8:	23ff      	movs	r3, #255	; 0xff
    {
        crc ^= (data[current_byte]);
     aaa:	2508      	movs	r5, #8
        for (uint8_t bit = 8; bit > 0; --bit)
        {
            if (crc & 0x80)
                crc = (crc << 1) ^ CRC_POLYNOMIAL;
     aac:	2731      	movs	r7, #49	; 0x31
     aae:	e00f      	b.n	ad0 <shtc1_check_crc+0x38>
     ab0:	005b      	lsls	r3, r3, #1
     ab2:	407b      	eors	r3, r7
     ab4:	b2db      	uxtb	r3, r3
     ab6:	3901      	subs	r1, #1
     ab8:	b2c9      	uxtb	r1, r1
        for (uint8_t bit = 8; bit > 0; --bit)
     aba:	2900      	cmp	r1, #0
     abc:	d005      	beq.n	aca <shtc1_check_crc+0x32>
            if (crc & 0x80)
     abe:	b25c      	sxtb	r4, r3
     ac0:	2c00      	cmp	r4, #0
     ac2:	dbf5      	blt.n	ab0 <shtc1_check_crc+0x18>
            else
                crc = (crc << 1);
     ac4:	005b      	lsls	r3, r3, #1
     ac6:	b2db      	uxtb	r3, r3
     ac8:	e7f5      	b.n	ab6 <shtc1_check_crc+0x1e>
     aca:	3601      	adds	r6, #1
    for (current_byte = 0; current_byte < data_length; ++current_byte)
     acc:	4286      	cmp	r6, r0
     ace:	d004      	beq.n	ada <shtc1_check_crc+0x42>
        crc ^= (data[current_byte]);
     ad0:	7831      	ldrb	r1, [r6, #0]
     ad2:	404b      	eors	r3, r1
     ad4:	0029      	movs	r1, r5
     ad6:	e7f2      	b.n	abe <shtc1_check_crc+0x26>
    uint8_t crc = CRC_INIT;
     ad8:	23ff      	movs	r3, #255	; 0xff
        }
    }
    return crc == checksum;
     ada:	1ad2      	subs	r2, r2, r3
     adc:	4250      	negs	r0, r2
     ade:	4150      	adcs	r0, r2
     ae0:	b2c0      	uxtb	r0, r0
}
     ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000ae4 <shtc1_read_async_result>:

enum status_code shtc1_read_async_result(struct i2c_master_module *i2c_master_instance_ptr,
        int *temp, int *rh)
{
     ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ae6:	b087      	sub	sp, #28
     ae8:	0005      	movs	r5, r0
     aea:	000f      	movs	r7, r1
     aec:	0016      	movs	r6, r2
    uint8_t data[6];
    struct i2c_master_packet packet = {
     aee:	ac01      	add	r4, sp, #4
     af0:	220c      	movs	r2, #12
     af2:	2100      	movs	r1, #0
     af4:	0020      	movs	r0, r4
     af6:	4b1e      	ldr	r3, [pc, #120]	; (b70 <shtc1_read_async_result+0x8c>)
     af8:	4798      	blx	r3
     afa:	2370      	movs	r3, #112	; 0x70
     afc:	8023      	strh	r3, [r4, #0]
     afe:	3b6a      	subs	r3, #106	; 0x6a
     b00:	8063      	strh	r3, [r4, #2]
     b02:	ab04      	add	r3, sp, #16
     b04:	6063      	str	r3, [r4, #4]
            .data_length = sizeof(data),
            .data = data,
			.ten_bit_address = false,
			.high_speed = false,
    };
    enum status_code ret = i2c_master_read_packet_wait(i2c_master_instance_ptr, &packet);
     b06:	0021      	movs	r1, r4
     b08:	0028      	movs	r0, r5
     b0a:	4b1a      	ldr	r3, [pc, #104]	; (b74 <shtc1_read_async_result+0x90>)
     b0c:	4798      	blx	r3
     b0e:	1e04      	subs	r4, r0, #0
    if (ret)
     b10:	d107      	bne.n	b22 <shtc1_read_async_result+0x3e>
        return ret;
    if (!shtc1_check_crc(data, 2, data[2]) || !shtc1_check_crc(data + 3, 2, data[5]))
     b12:	a804      	add	r0, sp, #16
     b14:	7882      	ldrb	r2, [r0, #2]
     b16:	2102      	movs	r1, #2
     b18:	4b17      	ldr	r3, [pc, #92]	; (b78 <shtc1_read_async_result+0x94>)
     b1a:	4798      	blx	r3
     b1c:	2800      	cmp	r0, #0
     b1e:	d103      	bne.n	b28 <shtc1_read_async_result+0x44>
        return STATUS_ERR_BAD_DATA;
     b20:	2413      	movs	r4, #19
    *rh = (data[4] & 0xff) | (data[3] << 8);
    *temp = ((21875 * *temp) >> 13) - 45000;
    *rh = ((12500 * *rh) >> 13);

    return STATUS_OK;
}
     b22:	0020      	movs	r0, r4
     b24:	b007      	add	sp, #28
     b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!shtc1_check_crc(data, 2, data[2]) || !shtc1_check_crc(data + 3, 2, data[5]))
     b28:	ab04      	add	r3, sp, #16
     b2a:	795a      	ldrb	r2, [r3, #5]
     b2c:	2102      	movs	r1, #2
     b2e:	2013      	movs	r0, #19
     b30:	4468      	add	r0, sp
     b32:	4b11      	ldr	r3, [pc, #68]	; (b78 <shtc1_read_async_result+0x94>)
     b34:	4798      	blx	r3
     b36:	2800      	cmp	r0, #0
     b38:	d101      	bne.n	b3e <shtc1_read_async_result+0x5a>
        return STATUS_ERR_BAD_DATA;
     b3a:	2413      	movs	r4, #19
     b3c:	e7f1      	b.n	b22 <shtc1_read_async_result+0x3e>
    *temp = (data[1] & 0xff) | (data[0] << 8);
     b3e:	aa04      	add	r2, sp, #16
     b40:	7813      	ldrb	r3, [r2, #0]
     b42:	021b      	lsls	r3, r3, #8
     b44:	7851      	ldrb	r1, [r2, #1]
     b46:	430b      	orrs	r3, r1
     b48:	603b      	str	r3, [r7, #0]
    *rh = (data[4] & 0xff) | (data[3] << 8);
     b4a:	78d3      	ldrb	r3, [r2, #3]
     b4c:	021b      	lsls	r3, r3, #8
     b4e:	7912      	ldrb	r2, [r2, #4]
     b50:	4313      	orrs	r3, r2
     b52:	6033      	str	r3, [r6, #0]
    *temp = ((21875 * *temp) >> 13) - 45000;
     b54:	4b09      	ldr	r3, [pc, #36]	; (b7c <shtc1_read_async_result+0x98>)
     b56:	683a      	ldr	r2, [r7, #0]
     b58:	4353      	muls	r3, r2
     b5a:	135b      	asrs	r3, r3, #13
     b5c:	4a08      	ldr	r2, [pc, #32]	; (b80 <shtc1_read_async_result+0x9c>)
     b5e:	4694      	mov	ip, r2
     b60:	4463      	add	r3, ip
     b62:	603b      	str	r3, [r7, #0]
    *rh = ((12500 * *rh) >> 13);
     b64:	4b07      	ldr	r3, [pc, #28]	; (b84 <shtc1_read_async_result+0xa0>)
     b66:	6832      	ldr	r2, [r6, #0]
     b68:	4353      	muls	r3, r2
     b6a:	135b      	asrs	r3, r3, #13
     b6c:	6033      	str	r3, [r6, #0]
    return STATUS_OK;
     b6e:	e7d8      	b.n	b22 <shtc1_read_async_result+0x3e>
     b70:	00009483 	.word	0x00009483
     b74:	00000795 	.word	0x00000795
     b78:	00000a99 	.word	0x00000a99
     b7c:	00005573 	.word	0x00005573
     b80:	ffff5038 	.word	0xffff5038
     b84:	000030d4 	.word	0x000030d4

00000b88 <shtc1_read_sync>:

static enum status_code shtc1_read_sync(struct i2c_master_module *i2c_master_instance_ptr,
        const uint8_t command[], int *temp, int *rh)
{
     b88:	b5f0      	push	{r4, r5, r6, r7, lr}
     b8a:	b087      	sub	sp, #28
     b8c:	0004      	movs	r4, r0
     b8e:	000d      	movs	r5, r1
     b90:	9201      	str	r2, [sp, #4]
     b92:	001e      	movs	r6, r3
    enum status_code ret;
    struct i2c_master_packet packet = {
     b94:	af03      	add	r7, sp, #12
     b96:	220c      	movs	r2, #12
     b98:	2100      	movs	r1, #0
     b9a:	0038      	movs	r0, r7
     b9c:	4b0a      	ldr	r3, [pc, #40]	; (bc8 <shtc1_read_sync+0x40>)
     b9e:	4798      	blx	r3
     ba0:	2370      	movs	r3, #112	; 0x70
     ba2:	803b      	strh	r3, [r7, #0]
     ba4:	3b6e      	subs	r3, #110	; 0x6e
     ba6:	807b      	strh	r3, [r7, #2]
     ba8:	607d      	str	r5, [r7, #4]
            .data_length = COMMAND_SIZE,
            .data = (uint8_t *)command,
			.ten_bit_address = false,
			.high_speed = false,
    };
    ret = i2c_master_write_packet_wait_no_stop(i2c_master_instance_ptr, &packet);
     baa:	0039      	movs	r1, r7
     bac:	0020      	movs	r0, r4
     bae:	4b07      	ldr	r3, [pc, #28]	; (bcc <shtc1_read_sync+0x44>)
     bb0:	4798      	blx	r3
    if (ret)
     bb2:	2800      	cmp	r0, #0
     bb4:	d001      	beq.n	bba <shtc1_read_sync+0x32>
        return ret;
    return shtc1_read_async_result(i2c_master_instance_ptr, temp, rh);
}
     bb6:	b007      	add	sp, #28
     bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return shtc1_read_async_result(i2c_master_instance_ptr, temp, rh);
     bba:	0032      	movs	r2, r6
     bbc:	9901      	ldr	r1, [sp, #4]
     bbe:	0020      	movs	r0, r4
     bc0:	4b03      	ldr	r3, [pc, #12]	; (bd0 <shtc1_read_sync+0x48>)
     bc2:	4798      	blx	r3
     bc4:	e7f7      	b.n	bb6 <shtc1_read_sync+0x2e>
     bc6:	46c0      	nop			; (mov r8, r8)
     bc8:	00009483 	.word	0x00009483
     bcc:	000007b9 	.word	0x000007b9
     bd0:	00000ae5 	.word	0x00000ae5

00000bd4 <shtc1_read_lpm_sync>:

enum status_code shtc1_read_lpm_sync(struct i2c_master_module *i2c_master_instance_ptr,
        int *temp, int *rh)
{
     bd4:	b510      	push	{r4, lr}
     bd6:	0013      	movs	r3, r2
    return shtc1_read_sync(i2c_master_instance_ptr, CMD_MEASURE_LPM_CS, temp, rh);
     bd8:	000a      	movs	r2, r1
     bda:	4902      	ldr	r1, [pc, #8]	; (be4 <shtc1_read_lpm_sync+0x10>)
     bdc:	4c02      	ldr	r4, [pc, #8]	; (be8 <shtc1_read_lpm_sync+0x14>)
     bde:	47a0      	blx	r4
}
     be0:	bd10      	pop	{r4, pc}
     be2:	46c0      	nop			; (mov r8, r8)
     be4:	0000a998 	.word	0x0000a998
     be8:	00000b89 	.word	0x00000b89

00000bec <shtc1_probe>:
    };
    return i2c_master_write_packet_wait(i2c_master_instance_ptr, &packet);
}

bool shtc1_probe(struct i2c_master_module *i2c_master_instance_ptr)
{
     bec:	b510      	push	{r4, lr}
     bee:	b084      	sub	sp, #16
     bf0:	0004      	movs	r4, r0
    uint8_t data[3];
    struct i2c_master_packet packet = {
     bf2:	220c      	movs	r2, #12
     bf4:	2100      	movs	r1, #0
     bf6:	4668      	mov	r0, sp
     bf8:	4b15      	ldr	r3, [pc, #84]	; (c50 <shtc1_probe+0x64>)
     bfa:	4798      	blx	r3
     bfc:	2370      	movs	r3, #112	; 0x70
     bfe:	466a      	mov	r2, sp
     c00:	8013      	strh	r3, [r2, #0]
     c02:	3b6e      	subs	r3, #110	; 0x6e
     c04:	8053      	strh	r3, [r2, #2]
     c06:	4b13      	ldr	r3, [pc, #76]	; (c54 <shtc1_probe+0x68>)
     c08:	9301      	str	r3, [sp, #4]
            .data_length = COMMAND_SIZE,
            .data = (uint8_t *)CMD_READ_ID_REG,
			.ten_bit_address = false,
			.high_speed = false,
    };
    i2c_master_write_packet_wait_no_stop(i2c_master_instance_ptr, &packet);
     c0a:	4669      	mov	r1, sp
     c0c:	0020      	movs	r0, r4
     c0e:	4b12      	ldr	r3, [pc, #72]	; (c58 <shtc1_probe+0x6c>)
     c10:	4798      	blx	r3
    packet.data_length = sizeof(data);
     c12:	2303      	movs	r3, #3
     c14:	466a      	mov	r2, sp
     c16:	8053      	strh	r3, [r2, #2]
    packet.data = data;
     c18:	ab03      	add	r3, sp, #12
     c1a:	9301      	str	r3, [sp, #4]
    enum status_code ret = i2c_master_read_packet_wait(i2c_master_instance_ptr, &packet);
     c1c:	4669      	mov	r1, sp
     c1e:	0020      	movs	r0, r4
     c20:	4b0e      	ldr	r3, [pc, #56]	; (c5c <shtc1_probe+0x70>)
     c22:	4798      	blx	r3
     c24:	0003      	movs	r3, r0

    if (ret)
        return false;
     c26:	2000      	movs	r0, #0
    if (ret)
     c28:	2b00      	cmp	r3, #0
     c2a:	d10e      	bne.n	c4a <shtc1_probe+0x5e>
    if (!shtc1_check_crc(data, 2, data[2]))
     c2c:	a803      	add	r0, sp, #12
     c2e:	7882      	ldrb	r2, [r0, #2]
     c30:	2102      	movs	r1, #2
     c32:	4b0b      	ldr	r3, [pc, #44]	; (c60 <shtc1_probe+0x74>)
     c34:	4798      	blx	r3
     c36:	2800      	cmp	r0, #0
     c38:	d007      	beq.n	c4a <shtc1_probe+0x5e>
        return false;
    return (data[1] & ID_REG_MASK) == ID_REG_CONTENT;
     c3a:	ab03      	add	r3, sp, #12
     c3c:	785b      	ldrb	r3, [r3, #1]
     c3e:	201f      	movs	r0, #31
     c40:	4018      	ands	r0, r3
     c42:	3807      	subs	r0, #7
     c44:	4243      	negs	r3, r0
     c46:	4158      	adcs	r0, r3
     c48:	b2c0      	uxtb	r0, r0
}
     c4a:	b004      	add	sp, #16
     c4c:	bd10      	pop	{r4, pc}
     c4e:	46c0      	nop			; (mov r8, r8)
     c50:	00009483 	.word	0x00009483
     c54:	0000a99c 	.word	0x0000a99c
     c58:	000007b9 	.word	0x000007b9
     c5c:	00000795 	.word	0x00000795
     c60:	00000a99 	.word	0x00000a99

00000c64 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     c64:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     c66:	2000      	movs	r0, #0
     c68:	4b08      	ldr	r3, [pc, #32]	; (c8c <delay_init+0x28>)
     c6a:	4798      	blx	r3
     c6c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     c6e:	4c08      	ldr	r4, [pc, #32]	; (c90 <delay_init+0x2c>)
     c70:	21fa      	movs	r1, #250	; 0xfa
     c72:	0089      	lsls	r1, r1, #2
     c74:	47a0      	blx	r4
     c76:	4b07      	ldr	r3, [pc, #28]	; (c94 <delay_init+0x30>)
     c78:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     c7a:	4907      	ldr	r1, [pc, #28]	; (c98 <delay_init+0x34>)
     c7c:	0028      	movs	r0, r5
     c7e:	47a0      	blx	r4
     c80:	4b06      	ldr	r3, [pc, #24]	; (c9c <delay_init+0x38>)
     c82:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     c84:	2205      	movs	r2, #5
     c86:	4b06      	ldr	r3, [pc, #24]	; (ca0 <delay_init+0x3c>)
     c88:	601a      	str	r2, [r3, #0]
}
     c8a:	bd70      	pop	{r4, r5, r6, pc}
     c8c:	00005481 	.word	0x00005481
     c90:	00007415 	.word	0x00007415
     c94:	20000000 	.word	0x20000000
     c98:	000f4240 	.word	0x000f4240
     c9c:	20000004 	.word	0x20000004
     ca0:	e000e010 	.word	0xe000e010

00000ca4 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     ca4:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     ca6:	4b08      	ldr	r3, [pc, #32]	; (cc8 <delay_cycles_ms+0x24>)
     ca8:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     caa:	4a08      	ldr	r2, [pc, #32]	; (ccc <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     cac:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     cae:	2180      	movs	r1, #128	; 0x80
     cb0:	0249      	lsls	r1, r1, #9
	while (n--) {
     cb2:	3801      	subs	r0, #1
     cb4:	d307      	bcc.n	cc6 <delay_cycles_ms+0x22>
	if (n > 0) {
     cb6:	2c00      	cmp	r4, #0
     cb8:	d0fb      	beq.n	cb2 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     cba:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     cbc:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     cbe:	6813      	ldr	r3, [r2, #0]
     cc0:	420b      	tst	r3, r1
     cc2:	d0fc      	beq.n	cbe <delay_cycles_ms+0x1a>
     cc4:	e7f5      	b.n	cb2 <delay_cycles_ms+0xe>
	}
}
     cc6:	bd30      	pop	{r4, r5, pc}
     cc8:	20000000 	.word	0x20000000
     ccc:	e000e010 	.word	0xe000e010

00000cd0 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
     cd0:	b510      	push	{r4, lr}
	if (gpfIsr) {
     cd2:	4b03      	ldr	r3, [pc, #12]	; (ce0 <chip_isr+0x10>)
     cd4:	681b      	ldr	r3, [r3, #0]
     cd6:	2b00      	cmp	r3, #0
     cd8:	d000      	beq.n	cdc <chip_isr+0xc>
		gpfIsr();
     cda:	4798      	blx	r3
	}
}
     cdc:	bd10      	pop	{r4, pc}
     cde:	46c0      	nop			; (mov r8, r8)
     ce0:	2000008c 	.word	0x2000008c

00000ce4 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     ce4:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
     ce6:	1e44      	subs	r4, r0, #1
     ce8:	2800      	cmp	r0, #0
     cea:	d004      	beq.n	cf6 <nm_bsp_sleep+0x12>
		delay_ms(1);
     cec:	4d02      	ldr	r5, [pc, #8]	; (cf8 <nm_bsp_sleep+0x14>)
     cee:	2001      	movs	r0, #1
     cf0:	47a8      	blx	r5
	while (u32TimeMsec--) {
     cf2:	3c01      	subs	r4, #1
     cf4:	d2fb      	bcs.n	cee <nm_bsp_sleep+0xa>
	}
}
     cf6:	bd70      	pop	{r4, r5, r6, pc}
     cf8:	00000ca5 	.word	0x00000ca5

00000cfc <nm_bsp_reset>:
{
     cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     cfe:	4c07      	ldr	r4, [pc, #28]	; (d1c <nm_bsp_reset+0x20>)
     d00:	2720      	movs	r7, #32
     d02:	6167      	str	r7, [r4, #20]
     d04:	2640      	movs	r6, #64	; 0x40
     d06:	6166      	str	r6, [r4, #20]
	nm_bsp_sleep(100);
     d08:	2064      	movs	r0, #100	; 0x64
     d0a:	4d05      	ldr	r5, [pc, #20]	; (d20 <nm_bsp_reset+0x24>)
     d0c:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
     d0e:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(100);
     d10:	2064      	movs	r0, #100	; 0x64
     d12:	47a8      	blx	r5
     d14:	61a6      	str	r6, [r4, #24]
	nm_bsp_sleep(100);
     d16:	2064      	movs	r0, #100	; 0x64
     d18:	47a8      	blx	r5
}
     d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d1c:	41004480 	.word	0x41004480
     d20:	00000ce5 	.word	0x00000ce5

00000d24 <nm_bsp_init>:
{
     d24:	b570      	push	{r4, r5, r6, lr}
     d26:	b082      	sub	sp, #8
	gpfIsr = NULL;
     d28:	2300      	movs	r3, #0
     d2a:	4a15      	ldr	r2, [pc, #84]	; (d80 <nm_bsp_init+0x5c>)
     d2c:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     d2e:	ac01      	add	r4, sp, #4
     d30:	2501      	movs	r5, #1
     d32:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     d34:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     d36:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
     d38:	0021      	movs	r1, r4
     d3a:	2026      	movs	r0, #38	; 0x26
     d3c:	4e11      	ldr	r6, [pc, #68]	; (d84 <nm_bsp_init+0x60>)
     d3e:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
     d40:	0021      	movs	r1, r4
     d42:	2025      	movs	r0, #37	; 0x25
     d44:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
     d46:	0021      	movs	r1, r4
     d48:	2027      	movs	r0, #39	; 0x27
     d4a:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
     d4c:	4b0e      	ldr	r3, [pc, #56]	; (d88 <nm_bsp_init+0x64>)
     d4e:	2220      	movs	r2, #32
     d50:	615a      	str	r2, [r3, #20]
     d52:	3220      	adds	r2, #32
     d54:	615a      	str	r2, [r3, #20]
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
     d56:	4b0d      	ldr	r3, [pc, #52]	; (d8c <nm_bsp_init+0x68>)
     d58:	681b      	ldr	r3, [r3, #0]
     d5a:	421d      	tst	r5, r3
     d5c:	d003      	beq.n	d66 <nm_bsp_init+0x42>
     d5e:	4b0b      	ldr	r3, [pc, #44]	; (d8c <nm_bsp_init+0x68>)
     d60:	681b      	ldr	r3, [r3, #0]
     d62:	079b      	lsls	r3, r3, #30
     d64:	d401      	bmi.n	d6a <nm_bsp_init+0x46>
	    delay_init();
     d66:	4b0a      	ldr	r3, [pc, #40]	; (d90 <nm_bsp_init+0x6c>)
     d68:	4798      	blx	r3
	nm_bsp_reset();
     d6a:	4b0a      	ldr	r3, [pc, #40]	; (d94 <nm_bsp_init+0x70>)
     d6c:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
     d6e:	2201      	movs	r2, #1
     d70:	4b09      	ldr	r3, [pc, #36]	; (d98 <nm_bsp_init+0x74>)
     d72:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     d74:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     d78:	b662      	cpsie	i
}
     d7a:	2000      	movs	r0, #0
     d7c:	b002      	add	sp, #8
     d7e:	bd70      	pop	{r4, r5, r6, pc}
     d80:	2000008c 	.word	0x2000008c
     d84:	000040c5 	.word	0x000040c5
     d88:	41004480 	.word	0x41004480
     d8c:	e000e010 	.word	0xe000e010
     d90:	00000c65 	.word	0x00000c65
     d94:	00000cfd 	.word	0x00000cfd
     d98:	2000000a 	.word	0x2000000a

00000d9c <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
     d9c:	b510      	push	{r4, lr}
     d9e:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
     da0:	4b0e      	ldr	r3, [pc, #56]	; (ddc <nm_bsp_register_isr+0x40>)
     da2:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
     da4:	ac01      	add	r4, sp, #4
     da6:	0020      	movs	r0, r4
     da8:	4b0d      	ldr	r3, [pc, #52]	; (de0 <nm_bsp_register_isr+0x44>)
     daa:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
     dac:	2324      	movs	r3, #36	; 0x24
     dae:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
     db0:	2300      	movs	r3, #0
     db2:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
     db4:	3301      	adds	r3, #1
     db6:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     db8:	3301      	adds	r3, #1
     dba:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
     dbc:	0021      	movs	r1, r4
     dbe:	2004      	movs	r0, #4
     dc0:	4b08      	ldr	r3, [pc, #32]	; (de4 <nm_bsp_register_isr+0x48>)
     dc2:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
     dc4:	2200      	movs	r2, #0
     dc6:	2104      	movs	r1, #4
     dc8:	4807      	ldr	r0, [pc, #28]	; (de8 <nm_bsp_register_isr+0x4c>)
     dca:	4b08      	ldr	r3, [pc, #32]	; (dec <nm_bsp_register_isr+0x50>)
     dcc:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     dce:	2100      	movs	r1, #0
     dd0:	2004      	movs	r0, #4
     dd2:	4b07      	ldr	r3, [pc, #28]	; (df0 <nm_bsp_register_isr+0x54>)
     dd4:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
     dd6:	b004      	add	sp, #16
     dd8:	bd10      	pop	{r4, pc}
     dda:	46c0      	nop			; (mov r8, r8)
     ddc:	2000008c 	.word	0x2000008c
     de0:	00004039 	.word	0x00004039
     de4:	0000404d 	.word	0x0000404d
     de8:	00000cd1 	.word	0x00000cd1
     dec:	00003ef5 	.word	0x00003ef5
     df0:	00003f21 	.word	0x00003f21

00000df4 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
     df4:	b510      	push	{r4, lr}
	if (u8Enable) {
     df6:	2800      	cmp	r0, #0
     df8:	d104      	bne.n	e04 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
     dfa:	2100      	movs	r1, #0
     dfc:	2004      	movs	r0, #4
     dfe:	4b04      	ldr	r3, [pc, #16]	; (e10 <nm_bsp_interrupt_ctrl+0x1c>)
     e00:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     e02:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     e04:	2100      	movs	r1, #0
     e06:	2004      	movs	r0, #4
     e08:	4b02      	ldr	r3, [pc, #8]	; (e14 <nm_bsp_interrupt_ctrl+0x20>)
     e0a:	4798      	blx	r3
     e0c:	e7f9      	b.n	e02 <nm_bsp_interrupt_ctrl+0xe>
     e0e:	46c0      	nop			; (mov r8, r8)
     e10:	00003f41 	.word	0x00003f41
     e14:	00003f21 	.word	0x00003f21

00000e18 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
     e18:	b530      	push	{r4, r5, lr}
     e1a:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     e1c:	4c30      	ldr	r4, [pc, #192]	; (ee0 <nm_bus_init+0xc8>)
     e1e:	2305      	movs	r3, #5
     e20:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     e22:	2300      	movs	r3, #0
     e24:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     e26:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
     e28:	a901      	add	r1, sp, #4
     e2a:	2201      	movs	r2, #1
     e2c:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     e2e:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     e30:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     e32:	2005      	movs	r0, #5
     e34:	4b2b      	ldr	r3, [pc, #172]	; (ee4 <nm_bus_init+0xcc>)
     e36:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     e38:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     e3a:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     e3c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     e3e:	2900      	cmp	r1, #0
     e40:	d104      	bne.n	e4c <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
     e42:	0953      	lsrs	r3, r2, #5
     e44:	01db      	lsls	r3, r3, #7
     e46:	4928      	ldr	r1, [pc, #160]	; (ee8 <nm_bus_init+0xd0>)
     e48:	468c      	mov	ip, r1
     e4a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     e4c:	211f      	movs	r1, #31
     e4e:	4011      	ands	r1, r2
     e50:	2201      	movs	r2, #1
     e52:	0010      	movs	r0, r2
     e54:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
     e56:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
     e58:	ac02      	add	r4, sp, #8
     e5a:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     e5c:	2300      	movs	r3, #0
     e5e:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     e60:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     e62:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     e64:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     e66:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
     e68:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
     e6a:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
     e6c:	3223      	adds	r2, #35	; 0x23
     e6e:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     e70:	3a18      	subs	r2, #24
     e72:	2100      	movs	r1, #0
     e74:	a808      	add	r0, sp, #32
     e76:	4b1d      	ldr	r3, [pc, #116]	; (eec <nm_bus_init+0xd4>)
     e78:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
     e7a:	2380      	movs	r3, #128	; 0x80
     e7c:	025b      	lsls	r3, r3, #9
     e7e:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
     e80:	4b1b      	ldr	r3, [pc, #108]	; (ef0 <nm_bus_init+0xd8>)
     e82:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
     e84:	2301      	movs	r3, #1
     e86:	425b      	negs	r3, r3
     e88:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
     e8a:	4b1a      	ldr	r3, [pc, #104]	; (ef4 <nm_bus_init+0xdc>)
     e8c:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
     e8e:	4b1a      	ldr	r3, [pc, #104]	; (ef8 <nm_bus_init+0xe0>)
     e90:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
     e92:	4b1a      	ldr	r3, [pc, #104]	; (efc <nm_bus_init+0xe4>)
     e94:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
     e96:	0022      	movs	r2, r4
     e98:	4919      	ldr	r1, [pc, #100]	; (f00 <nm_bus_init+0xe8>)
     e9a:	481a      	ldr	r0, [pc, #104]	; (f04 <nm_bus_init+0xec>)
     e9c:	4b1a      	ldr	r3, [pc, #104]	; (f08 <nm_bus_init+0xf0>)
     e9e:	4798      	blx	r3
     ea0:	2800      	cmp	r0, #0
     ea2:	d11a      	bne.n	eda <nm_bus_init+0xc2>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     ea4:	4d17      	ldr	r5, [pc, #92]	; (f04 <nm_bus_init+0xec>)
     ea6:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     ea8:	0020      	movs	r0, r4
     eaa:	4b18      	ldr	r3, [pc, #96]	; (f0c <nm_bus_init+0xf4>)
     eac:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     eae:	231f      	movs	r3, #31
     eb0:	4018      	ands	r0, r3
     eb2:	3b1e      	subs	r3, #30
     eb4:	4083      	lsls	r3, r0
     eb6:	4a16      	ldr	r2, [pc, #88]	; (f10 <nm_bus_init+0xf8>)
     eb8:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     eba:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     ebc:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
     ebe:	2b00      	cmp	r3, #0
     ec0:	d1fc      	bne.n	ebc <nm_bus_init+0xa4>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     ec2:	6823      	ldr	r3, [r4, #0]
     ec4:	2202      	movs	r2, #2
     ec6:	4313      	orrs	r3, r2
     ec8:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
     eca:	4b12      	ldr	r3, [pc, #72]	; (f14 <nm_bus_init+0xfc>)
     ecc:	4798      	blx	r3
	nm_bsp_sleep(1);
     ece:	2001      	movs	r0, #1
     ed0:	4b11      	ldr	r3, [pc, #68]	; (f18 <nm_bus_init+0x100>)
     ed2:	4798      	blx	r3
#endif
	return result;
     ed4:	2000      	movs	r0, #0
}
     ed6:	b011      	add	sp, #68	; 0x44
     ed8:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
     eda:	2006      	movs	r0, #6
     edc:	4240      	negs	r0, r0
     ede:	e7fa      	b.n	ed6 <nm_bus_init+0xbe>
     ee0:	20000278 	.word	0x20000278
     ee4:	000040c5 	.word	0x000040c5
     ee8:	41004400 	.word	0x41004400
     eec:	00009483 	.word	0x00009483
     ef0:	00040003 	.word	0x00040003
     ef4:	00060003 	.word	0x00060003
     ef8:	00070003 	.word	0x00070003
     efc:	00b71b00 	.word	0x00b71b00
     f00:	42000800 	.word	0x42000800
     f04:	2000027c 	.word	0x2000027c
     f08:	0000452d 	.word	0x0000452d
     f0c:	0000449d 	.word	0x0000449d
     f10:	e000e100 	.word	0xe000e100
     f14:	00000cfd 	.word	0x00000cfd
     f18:	00000ce5 	.word	0x00000ce5

00000f1c <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
     f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
     f1e:	46de      	mov	lr, fp
     f20:	4657      	mov	r7, sl
     f22:	464e      	mov	r6, r9
     f24:	4645      	mov	r5, r8
     f26:	b5e0      	push	{r5, r6, r7, lr}
     f28:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
     f2a:	2803      	cmp	r0, #3
     f2c:	d000      	beq.n	f30 <nm_bus_ioctl+0x14>
     f2e:	e075      	b.n	101c <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
     f30:	680e      	ldr	r6, [r1, #0]
     f32:	684d      	ldr	r5, [r1, #4]
     f34:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
     f36:	2200      	movs	r2, #0
     f38:	466b      	mov	r3, sp
     f3a:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
     f3c:	2d00      	cmp	r5, #0
     f3e:	d027      	beq.n	f90 <nm_bus_ioctl+0x74>
     f40:	2c00      	cmp	r4, #0
     f42:	d065      	beq.n	1010 <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
     f44:	2e00      	cmp	r6, #0
     f46:	d100      	bne.n	f4a <nm_bus_ioctl+0x2e>
     f48:	e077      	b.n	103a <nm_bus_ioctl+0x11e>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     f4a:	2300      	movs	r3, #0
     f4c:	4698      	mov	r8, r3
     f4e:	2300      	movs	r3, #0
     f50:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
     f52:	2201      	movs	r2, #1
     f54:	493b      	ldr	r1, [pc, #236]	; (1044 <nm_bus_ioctl+0x128>)
     f56:	483c      	ldr	r0, [pc, #240]	; (1048 <nm_bus_ioctl+0x12c>)
     f58:	4b3c      	ldr	r3, [pc, #240]	; (104c <nm_bus_ioctl+0x130>)
     f5a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     f5c:	4b3a      	ldr	r3, [pc, #232]	; (1048 <nm_bus_ioctl+0x12c>)
     f5e:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
     f60:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
     f62:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f64:	4699      	mov	r9, r3
			pu8Miso++;
     f66:	4659      	mov	r1, fp
     f68:	424b      	negs	r3, r1
     f6a:	4159      	adcs	r1, r3
     f6c:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
     f6e:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     f70:	4653      	mov	r3, sl
     f72:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     f74:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
     f76:	4239      	tst	r1, r7
     f78:	d0fc      	beq.n	f74 <nm_bus_ioctl+0x58>
     f7a:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     f7c:	4239      	tst	r1, r7
     f7e:	d0fc      	beq.n	f7a <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     f80:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     f82:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
     f84:	4211      	tst	r1, r2
     f86:	d0fc      	beq.n	f82 <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f88:	4649      	mov	r1, r9
     f8a:	7989      	ldrb	r1, [r1, #6]
     f8c:	468c      	mov	ip, r1
     f8e:	e011      	b.n	fb4 <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
     f90:	2e00      	cmp	r6, #0
     f92:	d03a      	beq.n	100a <nm_bus_ioctl+0xee>
     f94:	2c00      	cmp	r4, #0
     f96:	d03e      	beq.n	1016 <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     f98:	2300      	movs	r3, #0
     f9a:	4698      	mov	r8, r3
		u8SkipMiso = 1;
     f9c:	3301      	adds	r3, #1
     f9e:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
     fa0:	466b      	mov	r3, sp
     fa2:	1ddd      	adds	r5, r3, #7
     fa4:	e7d5      	b.n	f52 <nm_bus_ioctl+0x36>
     fa6:	4660      	mov	r0, ip
     fa8:	2801      	cmp	r0, #1
     faa:	d00d      	beq.n	fc8 <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     fac:	6a98      	ldr	r0, [r3, #40]	; 0x28
     fae:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
     fb0:	2900      	cmp	r1, #0
     fb2:	d00d      	beq.n	fd0 <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     fb4:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     fb6:	4211      	tst	r1, r2
     fb8:	d0fc      	beq.n	fb4 <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     fba:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
     fbc:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     fbe:	4210      	tst	r0, r2
     fc0:	d0f1      	beq.n	fa6 <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     fc2:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
     fc4:	311e      	adds	r1, #30
     fc6:	e7ee      	b.n	fa6 <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     fc8:	6a98      	ldr	r0, [r3, #40]	; 0x28
     fca:	05c0      	lsls	r0, r0, #23
     fcc:	0dc0      	lsrs	r0, r0, #23
     fce:	e7ef      	b.n	fb0 <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
     fd0:	7028      	strb	r0, [r5, #0]
		u16Sz--;
     fd2:	3c01      	subs	r4, #1
     fd4:	b2a4      	uxth	r4, r4
			pu8Miso++;
     fd6:	445d      	add	r5, fp
			pu8Mosi++;
     fd8:	4643      	mov	r3, r8
     fda:	4259      	negs	r1, r3
     fdc:	414b      	adcs	r3, r1
     fde:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
     fe0:	2c00      	cmp	r4, #0
     fe2:	d1c4      	bne.n	f6e <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
     fe4:	4b18      	ldr	r3, [pc, #96]	; (1048 <nm_bus_ioctl+0x12c>)
     fe6:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
     fe8:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     fea:	7e0b      	ldrb	r3, [r1, #24]
     fec:	4213      	tst	r3, r2
     fee:	d0fc      	beq.n	fea <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
     ff0:	2200      	movs	r2, #0
     ff2:	4914      	ldr	r1, [pc, #80]	; (1044 <nm_bus_ioctl+0x128>)
     ff4:	4814      	ldr	r0, [pc, #80]	; (1048 <nm_bus_ioctl+0x12c>)
     ff6:	4b15      	ldr	r3, [pc, #84]	; (104c <nm_bus_ioctl+0x130>)
     ff8:	4798      	blx	r3
	return M2M_SUCCESS;
     ffa:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
     ffc:	b003      	add	sp, #12
     ffe:	bc3c      	pop	{r2, r3, r4, r5}
    1000:	4690      	mov	r8, r2
    1002:	4699      	mov	r9, r3
    1004:	46a2      	mov	sl, r4
    1006:	46ab      	mov	fp, r5
    1008:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
    100a:	200f      	movs	r0, #15
    100c:	4240      	negs	r0, r0
    100e:	e7f5      	b.n	ffc <nm_bus_ioctl+0xe0>
    1010:	200f      	movs	r0, #15
    1012:	4240      	negs	r0, r0
    1014:	e7f2      	b.n	ffc <nm_bus_ioctl+0xe0>
    1016:	200f      	movs	r0, #15
    1018:	4240      	negs	r0, r0
		break;
    101a:	e7ef      	b.n	ffc <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
    101c:	220e      	movs	r2, #14
    101e:	32ff      	adds	r2, #255	; 0xff
    1020:	490b      	ldr	r1, [pc, #44]	; (1050 <nm_bus_ioctl+0x134>)
    1022:	480c      	ldr	r0, [pc, #48]	; (1054 <nm_bus_ioctl+0x138>)
    1024:	4b0c      	ldr	r3, [pc, #48]	; (1058 <nm_bus_ioctl+0x13c>)
    1026:	4798      	blx	r3
    1028:	480c      	ldr	r0, [pc, #48]	; (105c <nm_bus_ioctl+0x140>)
    102a:	4b0d      	ldr	r3, [pc, #52]	; (1060 <nm_bus_ioctl+0x144>)
    102c:	4798      	blx	r3
    102e:	200d      	movs	r0, #13
    1030:	4b0c      	ldr	r3, [pc, #48]	; (1064 <nm_bus_ioctl+0x148>)
    1032:	4798      	blx	r3
			s8Ret = -1;
    1034:	2001      	movs	r0, #1
    1036:	4240      	negs	r0, r0
	return s8Ret;
    1038:	e7e0      	b.n	ffc <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
    103a:	2301      	movs	r3, #1
    103c:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
    103e:	466b      	mov	r3, sp
    1040:	1dde      	adds	r6, r3, #7
    1042:	e784      	b.n	f4e <nm_bus_ioctl+0x32>
    1044:	20000278 	.word	0x20000278
    1048:	2000027c 	.word	0x2000027c
    104c:	00004705 	.word	0x00004705
    1050:	0000a9a0 	.word	0x0000a9a0
    1054:	0000a9b0 	.word	0x0000a9b0
    1058:	000095e5 	.word	0x000095e5
    105c:	0000a9c4 	.word	0x0000a9c4
    1060:	00009701 	.word	0x00009701
    1064:	00009619 	.word	0x00009619

00001068 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    1068:	b530      	push	{r4, r5, lr}
    106a:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    106c:	ab01      	add	r3, sp, #4
    106e:	2200      	movs	r2, #0
    1070:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
    1072:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    1074:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1076:	4d13      	ldr	r5, [pc, #76]	; (10c4 <nm_bus_deinit+0x5c>)
    1078:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    107a:	0020      	movs	r0, r4
    107c:	4b12      	ldr	r3, [pc, #72]	; (10c8 <nm_bus_deinit+0x60>)
    107e:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1080:	231f      	movs	r3, #31
    1082:	4018      	ands	r0, r3
    1084:	3b1e      	subs	r3, #30
    1086:	4083      	lsls	r3, r0
    1088:	2280      	movs	r2, #128	; 0x80
    108a:	4910      	ldr	r1, [pc, #64]	; (10cc <nm_bus_deinit+0x64>)
    108c:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    108e:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1090:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    1092:	2b00      	cmp	r3, #0
    1094:	d1fc      	bne.n	1090 <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    1096:	338f      	adds	r3, #143	; 0x8f
    1098:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    109a:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    109c:	6823      	ldr	r3, [r4, #0]
    109e:	2202      	movs	r2, #2
    10a0:	4393      	bics	r3, r2
    10a2:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    10a4:	a901      	add	r1, sp, #4
    10a6:	2006      	movs	r0, #6
    10a8:	4c09      	ldr	r4, [pc, #36]	; (10d0 <nm_bus_deinit+0x68>)
    10aa:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    10ac:	a901      	add	r1, sp, #4
    10ae:	2004      	movs	r0, #4
    10b0:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    10b2:	a901      	add	r1, sp, #4
    10b4:	2007      	movs	r0, #7
    10b6:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    10b8:	a901      	add	r1, sp, #4
    10ba:	2005      	movs	r0, #5
    10bc:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    10be:	2000      	movs	r0, #0
    10c0:	b003      	add	sp, #12
    10c2:	bd30      	pop	{r4, r5, pc}
    10c4:	2000027c 	.word	0x2000027c
    10c8:	0000449d 	.word	0x0000449d
    10cc:	e000e100 	.word	0xe000e100
    10d0:	000040c5 	.word	0x000040c5

000010d4 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    10d4:	2a00      	cmp	r2, #0
    10d6:	d006      	beq.n	10e6 <m2m_memcpy+0x12>
    10d8:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
    10da:	780b      	ldrb	r3, [r1, #0]
    10dc:	7003      	strb	r3, [r0, #0]
		pDst++;
    10de:	3001      	adds	r0, #1
		pSrc++;
    10e0:	3101      	adds	r1, #1
	}while(--sz);
    10e2:	4290      	cmp	r0, r2
    10e4:	d1f9      	bne.n	10da <m2m_memcpy+0x6>
}
    10e6:	4770      	bx	lr

000010e8 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    10e8:	2a00      	cmp	r2, #0
    10ea:	d004      	beq.n	10f6 <m2m_memset+0xe>
    10ec:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
    10ee:	7001      	strb	r1, [r0, #0]
		pBuf++;
    10f0:	3001      	adds	r0, #1
	}while(--sz);
    10f2:	4290      	cmp	r0, r2
    10f4:	d1fb      	bne.n	10ee <m2m_memset+0x6>
}
    10f6:	4770      	bx	lr

000010f8 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    10f8:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
    10fa:	7802      	ldrb	r2, [r0, #0]
    10fc:	2a00      	cmp	r2, #0
    10fe:	d007      	beq.n	1110 <m2m_strlen+0x18>
    1100:	2000      	movs	r0, #0
	{
		u16StrLen ++;
    1102:	3001      	adds	r0, #1
    1104:	b280      	uxth	r0, r0
		pcStr++;
    1106:	3301      	adds	r3, #1
	while(*pcStr)
    1108:	781a      	ldrb	r2, [r3, #0]
    110a:	2a00      	cmp	r2, #0
    110c:	d1f9      	bne.n	1102 <m2m_strlen+0xa>
	}
	return u16StrLen;
}
    110e:	4770      	bx	lr
	uint16	u16StrLen = 0;
    1110:	2000      	movs	r0, #0
    1112:	e7fc      	b.n	110e <m2m_strlen+0x16>

00001114 <isr>:

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
    1114:	4a02      	ldr	r2, [pc, #8]	; (1120 <isr+0xc>)
    1116:	78d3      	ldrb	r3, [r2, #3]
    1118:	3301      	adds	r3, #1
    111a:	b2db      	uxtb	r3, r3
    111c:	70d3      	strb	r3, [r2, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
    111e:	4770      	bx	lr
    1120:	200002b8 	.word	0x200002b8

00001124 <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    1124:	4770      	bx	lr
	...

00001128 <hif_set_rx_done>:
{
    1128:	b500      	push	{lr}
    112a:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
    112c:	2200      	movs	r2, #0
    112e:	4b0a      	ldr	r3, [pc, #40]	; (1158 <hif_set_rx_done+0x30>)
    1130:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
    1132:	2001      	movs	r0, #1
    1134:	4b09      	ldr	r3, [pc, #36]	; (115c <hif_set_rx_done+0x34>)
    1136:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    1138:	a901      	add	r1, sp, #4
    113a:	4809      	ldr	r0, [pc, #36]	; (1160 <hif_set_rx_done+0x38>)
    113c:	4b09      	ldr	r3, [pc, #36]	; (1164 <hif_set_rx_done+0x3c>)
    113e:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    1140:	2800      	cmp	r0, #0
    1142:	d001      	beq.n	1148 <hif_set_rx_done+0x20>
}
    1144:	b003      	add	sp, #12
    1146:	bd00      	pop	{pc}
	reg |= NBIT1;
    1148:	2102      	movs	r1, #2
    114a:	9b01      	ldr	r3, [sp, #4]
    114c:	4319      	orrs	r1, r3
    114e:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    1150:	4803      	ldr	r0, [pc, #12]	; (1160 <hif_set_rx_done+0x38>)
    1152:	4b05      	ldr	r3, [pc, #20]	; (1168 <hif_set_rx_done+0x40>)
    1154:	4798      	blx	r3
    1156:	e7f5      	b.n	1144 <hif_set_rx_done+0x1c>
    1158:	200002b8 	.word	0x200002b8
    115c:	00000df5 	.word	0x00000df5
    1160:	00001070 	.word	0x00001070
    1164:	00002531 	.word	0x00002531
    1168:	0000253d 	.word	0x0000253d

0000116c <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    116c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
    116e:	4b0c      	ldr	r3, [pc, #48]	; (11a0 <hif_chip_wake+0x34>)
    1170:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    1172:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
    1174:	2b00      	cmp	r3, #0
    1176:	d10d      	bne.n	1194 <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    1178:	4b09      	ldr	r3, [pc, #36]	; (11a0 <hif_chip_wake+0x34>)
    117a:	785b      	ldrb	r3, [r3, #1]
    117c:	2b00      	cmp	r3, #0
    117e:	d103      	bne.n	1188 <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    1180:	4b07      	ldr	r3, [pc, #28]	; (11a0 <hif_chip_wake+0x34>)
    1182:	781b      	ldrb	r3, [r3, #0]
    1184:	2b00      	cmp	r3, #0
    1186:	d106      	bne.n	1196 <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    1188:	4a05      	ldr	r2, [pc, #20]	; (11a0 <hif_chip_wake+0x34>)
    118a:	7853      	ldrb	r3, [r2, #1]
    118c:	3301      	adds	r3, #1
    118e:	b2db      	uxtb	r3, r3
    1190:	7053      	strb	r3, [r2, #1]
    1192:	2000      	movs	r0, #0
ERR1:
	return ret;
}
    1194:	bd10      	pop	{r4, pc}
			ret = chip_wake();
    1196:	4b03      	ldr	r3, [pc, #12]	; (11a4 <hif_chip_wake+0x38>)
    1198:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    119a:	2800      	cmp	r0, #0
    119c:	d0f4      	beq.n	1188 <hif_chip_wake+0x1c>
    119e:	e7f9      	b.n	1194 <hif_chip_wake+0x28>
    11a0:	200002b8 	.word	0x200002b8
    11a4:	00002219 	.word	0x00002219

000011a8 <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
    11a8:	4b05      	ldr	r3, [pc, #20]	; (11c0 <hif_chip_sleep_sc+0x18>)
    11aa:	785b      	ldrb	r3, [r3, #1]
    11ac:	2b00      	cmp	r3, #0
    11ae:	d004      	beq.n	11ba <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
    11b0:	4a03      	ldr	r2, [pc, #12]	; (11c0 <hif_chip_sleep_sc+0x18>)
    11b2:	7853      	ldrb	r3, [r2, #1]
    11b4:	3b01      	subs	r3, #1
    11b6:	b2db      	uxtb	r3, r3
    11b8:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
    11ba:	2000      	movs	r0, #0
    11bc:	4770      	bx	lr
    11be:	46c0      	nop			; (mov r8, r8)
    11c0:	200002b8 	.word	0x200002b8

000011c4 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    11c4:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
    11c6:	4b0b      	ldr	r3, [pc, #44]	; (11f4 <hif_chip_sleep+0x30>)
    11c8:	785b      	ldrb	r3, [r3, #1]
    11ca:	2b00      	cmp	r3, #0
    11cc:	d004      	beq.n	11d8 <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
    11ce:	4a09      	ldr	r2, [pc, #36]	; (11f4 <hif_chip_sleep+0x30>)
    11d0:	7853      	ldrb	r3, [r2, #1]
    11d2:	3b01      	subs	r3, #1
    11d4:	b2db      	uxtb	r3, r3
    11d6:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    11d8:	4b06      	ldr	r3, [pc, #24]	; (11f4 <hif_chip_sleep+0x30>)
    11da:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
    11dc:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
    11de:	2b00      	cmp	r3, #0
    11e0:	d103      	bne.n	11ea <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    11e2:	4b04      	ldr	r3, [pc, #16]	; (11f4 <hif_chip_sleep+0x30>)
    11e4:	781b      	ldrb	r3, [r3, #0]
    11e6:	2b00      	cmp	r3, #0
    11e8:	d100      	bne.n	11ec <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
    11ea:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
    11ec:	4b02      	ldr	r3, [pc, #8]	; (11f8 <hif_chip_sleep+0x34>)
    11ee:	4798      	blx	r3
    11f0:	e7fb      	b.n	11ea <hif_chip_sleep+0x26>
    11f2:	46c0      	nop			; (mov r8, r8)
    11f4:	200002b8 	.word	0x200002b8
    11f8:	000021b1 	.word	0x000021b1

000011fc <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    11fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    11fe:	46de      	mov	lr, fp
    1200:	4657      	mov	r7, sl
    1202:	b580      	push	{r7, lr}
    1204:	b089      	sub	sp, #36	; 0x24
    1206:	4683      	mov	fp, r0
    1208:	468a      	mov	sl, r1
    120a:	9201      	str	r2, [sp, #4]
    120c:	9300      	str	r3, [sp, #0]
    120e:	ab10      	add	r3, sp, #64	; 0x40
    1210:	cb80      	ldmia	r3!, {r7}
    1212:	881e      	ldrh	r6, [r3, #0]
    1214:	ab12      	add	r3, sp, #72	; 0x48
    1216:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    1218:	227f      	movs	r2, #127	; 0x7f
    121a:	400a      	ands	r2, r1
    121c:	ab07      	add	r3, sp, #28
    121e:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    1220:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    1222:	2208      	movs	r2, #8
    1224:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    1226:	2f00      	cmp	r7, #0
    1228:	d03d      	beq.n	12a6 <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    122a:	885a      	ldrh	r2, [r3, #2]
    122c:	1992      	adds	r2, r2, r6
    122e:	18aa      	adds	r2, r5, r2
    1230:	b292      	uxth	r2, r2
    1232:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
    1234:	4b69      	ldr	r3, [pc, #420]	; (13dc <hif_send+0x1e0>)
    1236:	4798      	blx	r3
    1238:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    123a:	d000      	beq.n	123e <hif_send+0x42>
    123c:	e0c1      	b.n	13c2 <hif_send+0x1c6>
	{
		volatile uint32 reg, dma_addr = 0;
    123e:	2300      	movs	r3, #0
    1240:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
    1242:	aa02      	add	r2, sp, #8
    1244:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    1246:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
    1248:	9b04      	ldr	r3, [sp, #16]
    124a:	465a      	mov	r2, fp
    124c:	431a      	orrs	r2, r3
    124e:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
    1250:	9a04      	ldr	r2, [sp, #16]
    1252:	4653      	mov	r3, sl
    1254:	021b      	lsls	r3, r3, #8
    1256:	4313      	orrs	r3, r2
    1258:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
    125a:	ab07      	add	r3, sp, #28
    125c:	885b      	ldrh	r3, [r3, #2]
    125e:	9a04      	ldr	r2, [sp, #16]
    1260:	041b      	lsls	r3, r3, #16
    1262:	4313      	orrs	r3, r2
    1264:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    1266:	9904      	ldr	r1, [sp, #16]
    1268:	485d      	ldr	r0, [pc, #372]	; (13e0 <hif_send+0x1e4>)
    126a:	4b5e      	ldr	r3, [pc, #376]	; (13e4 <hif_send+0x1e8>)
    126c:	4798      	blx	r3
    126e:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    1270:	d157      	bne.n	1322 <hif_send+0x126>

		reg = 0UL;
    1272:	2300      	movs	r3, #0
    1274:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
    1276:	9b04      	ldr	r3, [sp, #16]
    1278:	2202      	movs	r2, #2
    127a:	4313      	orrs	r3, r2
    127c:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    127e:	9904      	ldr	r1, [sp, #16]
    1280:	4859      	ldr	r0, [pc, #356]	; (13e8 <hif_send+0x1ec>)
    1282:	4b58      	ldr	r3, [pc, #352]	; (13e4 <hif_send+0x1e8>)
    1284:	4798      	blx	r3
    1286:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    1288:	d14b      	bne.n	1322 <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    128a:	2200      	movs	r2, #0
    128c:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    128e:	ab02      	add	r3, sp, #8
    1290:	80da      	strh	r2, [r3, #6]
    1292:	3306      	adds	r3, #6
    1294:	881b      	ldrh	r3, [r3, #0]
    1296:	b29b      	uxth	r3, r3
    1298:	4a54      	ldr	r2, [pc, #336]	; (13ec <hif_send+0x1f0>)
    129a:	4293      	cmp	r3, r2
    129c:	d849      	bhi.n	1332 <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    129e:	4c54      	ldr	r4, [pc, #336]	; (13f0 <hif_send+0x1f4>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    12a0:	4b54      	ldr	r3, [pc, #336]	; (13f4 <hif_send+0x1f8>)
    12a2:	469a      	mov	sl, r3
    12a4:	e017      	b.n	12d6 <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
    12a6:	ab07      	add	r3, sp, #28
    12a8:	885a      	ldrh	r2, [r3, #2]
    12aa:	9900      	ldr	r1, [sp, #0]
    12ac:	468c      	mov	ip, r1
    12ae:	4462      	add	r2, ip
    12b0:	b292      	uxth	r2, r2
    12b2:	805a      	strh	r2, [r3, #2]
    12b4:	e7be      	b.n	1234 <hif_send+0x38>
				nm_bsp_sleep(1);
    12b6:	2001      	movs	r0, #1
    12b8:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
    12ba:	9b04      	ldr	r3, [sp, #16]
    12bc:	079b      	lsls	r3, r3, #30
    12be:	d528      	bpl.n	1312 <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
    12c0:	ab02      	add	r3, sp, #8
    12c2:	88da      	ldrh	r2, [r3, #6]
    12c4:	3201      	adds	r2, #1
    12c6:	b292      	uxth	r2, r2
    12c8:	80da      	strh	r2, [r3, #6]
    12ca:	3306      	adds	r3, #6
    12cc:	881b      	ldrh	r3, [r3, #0]
    12ce:	b29b      	uxth	r3, r3
    12d0:	4a46      	ldr	r2, [pc, #280]	; (13ec <hif_send+0x1f0>)
    12d2:	4293      	cmp	r3, r2
    12d4:	d82d      	bhi.n	1332 <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    12d6:	a904      	add	r1, sp, #16
    12d8:	4843      	ldr	r0, [pc, #268]	; (13e8 <hif_send+0x1ec>)
    12da:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
    12dc:	2800      	cmp	r0, #0
    12de:	d128      	bne.n	1332 <hif_send+0x136>
			if(cnt >= 500) {
    12e0:	ab02      	add	r3, sp, #8
    12e2:	3306      	adds	r3, #6
    12e4:	881b      	ldrh	r3, [r3, #0]
    12e6:	b29b      	uxth	r3, r3
    12e8:	22f4      	movs	r2, #244	; 0xf4
    12ea:	32ff      	adds	r2, #255	; 0xff
    12ec:	4293      	cmp	r3, r2
    12ee:	d9e4      	bls.n	12ba <hif_send+0xbe>
				if(cnt < 501) {
    12f0:	ab02      	add	r3, sp, #8
    12f2:	3306      	adds	r3, #6
    12f4:	881b      	ldrh	r3, [r3, #0]
    12f6:	b29b      	uxth	r3, r3
    12f8:	3201      	adds	r2, #1
    12fa:	4293      	cmp	r3, r2
    12fc:	d8db      	bhi.n	12b6 <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
    12fe:	483e      	ldr	r0, [pc, #248]	; (13f8 <hif_send+0x1fc>)
    1300:	4b3e      	ldr	r3, [pc, #248]	; (13fc <hif_send+0x200>)
    1302:	4798      	blx	r3
    1304:	483e      	ldr	r0, [pc, #248]	; (1400 <hif_send+0x204>)
    1306:	4b3f      	ldr	r3, [pc, #252]	; (1404 <hif_send+0x208>)
    1308:	4798      	blx	r3
    130a:	200d      	movs	r0, #13
    130c:	4b3e      	ldr	r3, [pc, #248]	; (1408 <hif_send+0x20c>)
    130e:	4798      	blx	r3
    1310:	e7d1      	b.n	12b6 <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    1312:	a905      	add	r1, sp, #20
    1314:	483d      	ldr	r0, [pc, #244]	; (140c <hif_send+0x210>)
    1316:	4b36      	ldr	r3, [pc, #216]	; (13f0 <hif_send+0x1f4>)
    1318:	4798      	blx	r3
    131a:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
    131c:	d009      	beq.n	1332 <hif_send+0x136>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    131e:	2300      	movs	r3, #0
    1320:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    1322:	4b3b      	ldr	r3, [pc, #236]	; (1410 <hif_send+0x214>)
    1324:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
    1326:	0020      	movs	r0, r4
    1328:	b009      	add	sp, #36	; 0x24
    132a:	bc0c      	pop	{r2, r3}
    132c:	4692      	mov	sl, r2
    132e:	469b      	mov	fp, r3
    1330:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
    1332:	9b05      	ldr	r3, [sp, #20]
    1334:	2b00      	cmp	r3, #0
    1336:	d03f      	beq.n	13b8 <hif_send+0x1bc>
			u32CurrAddr = dma_addr;
    1338:	9b05      	ldr	r3, [sp, #20]
    133a:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    133c:	a907      	add	r1, sp, #28
    133e:	884b      	ldrh	r3, [r1, #2]
    1340:	b29b      	uxth	r3, r3
    1342:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    1344:	9806      	ldr	r0, [sp, #24]
    1346:	2208      	movs	r2, #8
    1348:	4b32      	ldr	r3, [pc, #200]	; (1414 <hif_send+0x218>)
    134a:	4798      	blx	r3
    134c:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    134e:	d1e8      	bne.n	1322 <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    1350:	9b06      	ldr	r3, [sp, #24]
    1352:	3308      	adds	r3, #8
    1354:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
    1356:	9b01      	ldr	r3, [sp, #4]
    1358:	2b00      	cmp	r3, #0
    135a:	d00b      	beq.n	1374 <hif_send+0x178>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    135c:	9806      	ldr	r0, [sp, #24]
    135e:	9a00      	ldr	r2, [sp, #0]
    1360:	0019      	movs	r1, r3
    1362:	4b2c      	ldr	r3, [pc, #176]	; (1414 <hif_send+0x218>)
    1364:	4798      	blx	r3
    1366:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    1368:	d1db      	bne.n	1322 <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
    136a:	9b06      	ldr	r3, [sp, #24]
    136c:	9a00      	ldr	r2, [sp, #0]
    136e:	4694      	mov	ip, r2
    1370:	4463      	add	r3, ip
    1372:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
    1374:	2f00      	cmp	r7, #0
    1376:	d00e      	beq.n	1396 <hif_send+0x19a>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    1378:	9b06      	ldr	r3, [sp, #24]
    137a:	9a00      	ldr	r2, [sp, #0]
    137c:	1aad      	subs	r5, r5, r2
    137e:	18ed      	adds	r5, r5, r3
    1380:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    1382:	9806      	ldr	r0, [sp, #24]
    1384:	0032      	movs	r2, r6
    1386:	0039      	movs	r1, r7
    1388:	4b22      	ldr	r3, [pc, #136]	; (1414 <hif_send+0x218>)
    138a:	4798      	blx	r3
    138c:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    138e:	d1c8      	bne.n	1322 <hif_send+0x126>
				u32CurrAddr += u16DataSize;
    1390:	9b06      	ldr	r3, [sp, #24]
    1392:	18f3      	adds	r3, r6, r3
    1394:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
    1396:	9b05      	ldr	r3, [sp, #20]
    1398:	009b      	lsls	r3, r3, #2
    139a:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
    139c:	9b04      	ldr	r3, [sp, #16]
    139e:	2202      	movs	r2, #2
    13a0:	4313      	orrs	r3, r2
    13a2:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    13a4:	9904      	ldr	r1, [sp, #16]
    13a6:	481c      	ldr	r0, [pc, #112]	; (1418 <hif_send+0x21c>)
    13a8:	4b0e      	ldr	r3, [pc, #56]	; (13e4 <hif_send+0x1e8>)
    13aa:	4798      	blx	r3
    13ac:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    13ae:	d1b8      	bne.n	1322 <hif_send+0x126>
 	ret = hif_chip_sleep();
    13b0:	4b1a      	ldr	r3, [pc, #104]	; (141c <hif_send+0x220>)
    13b2:	4798      	blx	r3
    13b4:	0004      	movs	r4, r0
	return ret;
    13b6:	e7b6      	b.n	1326 <hif_send+0x12a>
			ret = hif_chip_sleep();
    13b8:	4b18      	ldr	r3, [pc, #96]	; (141c <hif_send+0x220>)
    13ba:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
    13bc:	2403      	movs	r4, #3
    13be:	4264      	negs	r4, r4
			goto ERR2;
    13c0:	e7b1      	b.n	1326 <hif_send+0x12a>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    13c2:	22cb      	movs	r2, #203	; 0xcb
    13c4:	0052      	lsls	r2, r2, #1
    13c6:	4916      	ldr	r1, [pc, #88]	; (1420 <hif_send+0x224>)
    13c8:	4816      	ldr	r0, [pc, #88]	; (1424 <hif_send+0x228>)
    13ca:	4b0c      	ldr	r3, [pc, #48]	; (13fc <hif_send+0x200>)
    13cc:	4798      	blx	r3
    13ce:	4816      	ldr	r0, [pc, #88]	; (1428 <hif_send+0x22c>)
    13d0:	4b0c      	ldr	r3, [pc, #48]	; (1404 <hif_send+0x208>)
    13d2:	4798      	blx	r3
    13d4:	200d      	movs	r0, #13
    13d6:	4b0c      	ldr	r3, [pc, #48]	; (1408 <hif_send+0x20c>)
    13d8:	4798      	blx	r3
		goto ERR2;
    13da:	e7a4      	b.n	1326 <hif_send+0x12a>
    13dc:	0000116d 	.word	0x0000116d
    13e0:	0000108c 	.word	0x0000108c
    13e4:	0000253d 	.word	0x0000253d
    13e8:	00001078 	.word	0x00001078
    13ec:	000003e7 	.word	0x000003e7
    13f0:	00002531 	.word	0x00002531
    13f4:	00000ce5 	.word	0x00000ce5
    13f8:	0000ace0 	.word	0x0000ace0
    13fc:	000095e5 	.word	0x000095e5
    1400:	0000acec 	.word	0x0000acec
    1404:	00009701 	.word	0x00009701
    1408:	00009619 	.word	0x00009619
    140c:	00150400 	.word	0x00150400
    1410:	000011a9 	.word	0x000011a9
    1414:	000025b1 	.word	0x000025b1
    1418:	0000106c 	.word	0x0000106c
    141c:	000011c5 	.word	0x000011c5
    1420:	0000a9f8 	.word	0x0000a9f8
    1424:	0000a9b0 	.word	0x0000a9b0
    1428:	0000acfc 	.word	0x0000acfc

0000142c <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    142c:	b5f0      	push	{r4, r5, r6, r7, lr}
    142e:	46ce      	mov	lr, r9
    1430:	4647      	mov	r7, r8
    1432:	b580      	push	{r7, lr}
    1434:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	while (gstrHifCxt.u8Interrupt) {
    1436:	4bcf      	ldr	r3, [pc, #828]	; (1774 <hif_handle_isr+0x348>)
    1438:	4698      	mov	r8, r3
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    143a:	4699      	mov	r9, r3
	while (gstrHifCxt.u8Interrupt) {
    143c:	e080      	b.n	1540 <hif_handle_isr+0x114>
				gstrHifCxt.u32RxAddr = address;
    143e:	4bcd      	ldr	r3, [pc, #820]	; (1774 <hif_handle_isr+0x348>)
    1440:	9a05      	ldr	r2, [sp, #20]
    1442:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
    1444:	609d      	str	r5, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    1446:	af04      	add	r7, sp, #16
    1448:	2204      	movs	r2, #4
    144a:	0039      	movs	r1, r7
    144c:	9805      	ldr	r0, [sp, #20]
    144e:	4bca      	ldr	r3, [pc, #808]	; (1778 <hif_handle_isr+0x34c>)
    1450:	4798      	blx	r3
    1452:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    1454:	887b      	ldrh	r3, [r7, #2]
    1456:	b29b      	uxth	r3, r3
    1458:	807b      	strh	r3, [r7, #2]
				if(M2M_SUCCESS != ret)
    145a:	2800      	cmp	r0, #0
    145c:	d133      	bne.n	14c6 <hif_handle_isr+0x9a>
				if(strHif.u16Length != size)
    145e:	ab04      	add	r3, sp, #16
    1460:	885b      	ldrh	r3, [r3, #2]
    1462:	b29b      	uxth	r3, r3
    1464:	429d      	cmp	r5, r3
    1466:	d004      	beq.n	1472 <hif_handle_isr+0x46>
					if((size - strHif.u16Length) > 4)
    1468:	ab04      	add	r3, sp, #16
    146a:	885b      	ldrh	r3, [r3, #2]
    146c:	1aeb      	subs	r3, r5, r3
    146e:	2b04      	cmp	r3, #4
    1470:	dc39      	bgt.n	14e6 <hif_handle_isr+0xba>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    1472:	ab04      	add	r3, sp, #16
    1474:	781b      	ldrb	r3, [r3, #0]
    1476:	2b01      	cmp	r3, #1
    1478:	d04e      	beq.n	1518 <hif_handle_isr+0xec>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    147a:	ab04      	add	r3, sp, #16
    147c:	781b      	ldrb	r3, [r3, #0]
    147e:	2b02      	cmp	r3, #2
    1480:	d078      	beq.n	1574 <hif_handle_isr+0x148>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    1482:	ab04      	add	r3, sp, #16
    1484:	781b      	ldrb	r3, [r3, #0]
    1486:	2b04      	cmp	r3, #4
    1488:	d100      	bne.n	148c <hif_handle_isr+0x60>
    148a:	e090      	b.n	15ae <hif_handle_isr+0x182>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    148c:	ab04      	add	r3, sp, #16
    148e:	781b      	ldrb	r3, [r3, #0]
    1490:	2b06      	cmp	r3, #6
    1492:	d100      	bne.n	1496 <hif_handle_isr+0x6a>
    1494:	e0a8      	b.n	15e8 <hif_handle_isr+0x1bc>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    1496:	ab04      	add	r3, sp, #16
    1498:	781b      	ldrb	r3, [r3, #0]
    149a:	2b07      	cmp	r3, #7
    149c:	d100      	bne.n	14a0 <hif_handle_isr+0x74>
    149e:	e0bf      	b.n	1620 <hif_handle_isr+0x1f4>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    14a0:	ab04      	add	r3, sp, #16
    14a2:	781b      	ldrb	r3, [r3, #0]
    14a4:	2b05      	cmp	r3, #5
    14a6:	d100      	bne.n	14aa <hif_handle_isr+0x7e>
    14a8:	e0d6      	b.n	1658 <hif_handle_isr+0x22c>
					M2M_ERR("(hif) invalid group ID\n");
    14aa:	4ab4      	ldr	r2, [pc, #720]	; (177c <hif_handle_isr+0x350>)
    14ac:	49b4      	ldr	r1, [pc, #720]	; (1780 <hif_handle_isr+0x354>)
    14ae:	48b5      	ldr	r0, [pc, #724]	; (1784 <hif_handle_isr+0x358>)
    14b0:	4bb5      	ldr	r3, [pc, #724]	; (1788 <hif_handle_isr+0x35c>)
    14b2:	4798      	blx	r3
    14b4:	48b5      	ldr	r0, [pc, #724]	; (178c <hif_handle_isr+0x360>)
    14b6:	4bb6      	ldr	r3, [pc, #728]	; (1790 <hif_handle_isr+0x364>)
    14b8:	4798      	blx	r3
    14ba:	200d      	movs	r0, #13
    14bc:	4bb5      	ldr	r3, [pc, #724]	; (1794 <hif_handle_isr+0x368>)
    14be:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    14c0:	2406      	movs	r4, #6
    14c2:	4264      	negs	r4, r4
    14c4:	e116      	b.n	16f4 <hif_handle_isr+0x2c8>
					M2M_ERR("(hif) address bus fail\n");
    14c6:	22d2      	movs	r2, #210	; 0xd2
    14c8:	32ff      	adds	r2, #255	; 0xff
    14ca:	49ad      	ldr	r1, [pc, #692]	; (1780 <hif_handle_isr+0x354>)
    14cc:	48ad      	ldr	r0, [pc, #692]	; (1784 <hif_handle_isr+0x358>)
    14ce:	4bae      	ldr	r3, [pc, #696]	; (1788 <hif_handle_isr+0x35c>)
    14d0:	4798      	blx	r3
    14d2:	48b1      	ldr	r0, [pc, #708]	; (1798 <hif_handle_isr+0x36c>)
    14d4:	4bae      	ldr	r3, [pc, #696]	; (1790 <hif_handle_isr+0x364>)
    14d6:	4798      	blx	r3
    14d8:	200d      	movs	r0, #13
    14da:	4bae      	ldr	r3, [pc, #696]	; (1794 <hif_handle_isr+0x368>)
    14dc:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    14de:	2001      	movs	r0, #1
    14e0:	4bae      	ldr	r3, [pc, #696]	; (179c <hif_handle_isr+0x370>)
    14e2:	4798      	blx	r3
    14e4:	e106      	b.n	16f4 <hif_handle_isr+0x2c8>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    14e6:	22ed      	movs	r2, #237	; 0xed
    14e8:	0052      	lsls	r2, r2, #1
    14ea:	49a5      	ldr	r1, [pc, #660]	; (1780 <hif_handle_isr+0x354>)
    14ec:	48a5      	ldr	r0, [pc, #660]	; (1784 <hif_handle_isr+0x358>)
    14ee:	4ca6      	ldr	r4, [pc, #664]	; (1788 <hif_handle_isr+0x35c>)
    14f0:	47a0      	blx	r4
    14f2:	a904      	add	r1, sp, #16
    14f4:	884a      	ldrh	r2, [r1, #2]
    14f6:	b292      	uxth	r2, r2
    14f8:	780b      	ldrb	r3, [r1, #0]
    14fa:	b2db      	uxtb	r3, r3
    14fc:	7849      	ldrb	r1, [r1, #1]
    14fe:	9100      	str	r1, [sp, #0]
    1500:	0029      	movs	r1, r5
    1502:	48a7      	ldr	r0, [pc, #668]	; (17a0 <hif_handle_isr+0x374>)
    1504:	47a0      	blx	r4
    1506:	200d      	movs	r0, #13
    1508:	4ba2      	ldr	r3, [pc, #648]	; (1794 <hif_handle_isr+0x368>)
    150a:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    150c:	2001      	movs	r0, #1
    150e:	4ba3      	ldr	r3, [pc, #652]	; (179c <hif_handle_isr+0x370>)
    1510:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    1512:	2406      	movs	r4, #6
    1514:	4264      	negs	r4, r4
    1516:	e0ed      	b.n	16f4 <hif_handle_isr+0x2c8>
					if(gstrHifCxt.pfWifiCb)
    1518:	4b96      	ldr	r3, [pc, #600]	; (1774 <hif_handle_isr+0x348>)
    151a:	68db      	ldr	r3, [r3, #12]
    151c:	2b00      	cmp	r3, #0
    151e:	d01c      	beq.n	155a <hif_handle_isr+0x12e>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1520:	4b94      	ldr	r3, [pc, #592]	; (1774 <hif_handle_isr+0x348>)
    1522:	68db      	ldr	r3, [r3, #12]
    1524:	aa04      	add	r2, sp, #16
    1526:	7850      	ldrb	r0, [r2, #1]
    1528:	b2c0      	uxtb	r0, r0
    152a:	8851      	ldrh	r1, [r2, #2]
    152c:	9a05      	ldr	r2, [sp, #20]
    152e:	3208      	adds	r2, #8
    1530:	3908      	subs	r1, #8
    1532:	b289      	uxth	r1, r1
    1534:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
    1536:	4b8f      	ldr	r3, [pc, #572]	; (1774 <hif_handle_isr+0x348>)
    1538:	789b      	ldrb	r3, [r3, #2]
    153a:	2b00      	cmp	r3, #0
    153c:	d000      	beq.n	1540 <hif_handle_isr+0x114>
    153e:	e09c      	b.n	167a <hif_handle_isr+0x24e>
	while (gstrHifCxt.u8Interrupt) {
    1540:	4643      	mov	r3, r8
    1542:	78db      	ldrb	r3, [r3, #3]
    1544:	2b00      	cmp	r3, #0
    1546:	d100      	bne.n	154a <hif_handle_isr+0x11e>
    1548:	e158      	b.n	17fc <hif_handle_isr+0x3d0>
		gstrHifCxt.u8Interrupt--;
    154a:	464b      	mov	r3, r9
    154c:	78db      	ldrb	r3, [r3, #3]
    154e:	3b01      	subs	r3, #1
    1550:	b2db      	uxtb	r3, r3
    1552:	464a      	mov	r2, r9
    1554:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    1556:	4e93      	ldr	r6, [pc, #588]	; (17a4 <hif_handle_isr+0x378>)
    1558:	e0d7      	b.n	170a <hif_handle_isr+0x2de>
						M2M_ERR("WIFI callback is not registered\n");
    155a:	22f3      	movs	r2, #243	; 0xf3
    155c:	0052      	lsls	r2, r2, #1
    155e:	4988      	ldr	r1, [pc, #544]	; (1780 <hif_handle_isr+0x354>)
    1560:	4888      	ldr	r0, [pc, #544]	; (1784 <hif_handle_isr+0x358>)
    1562:	4b89      	ldr	r3, [pc, #548]	; (1788 <hif_handle_isr+0x35c>)
    1564:	4798      	blx	r3
    1566:	4890      	ldr	r0, [pc, #576]	; (17a8 <hif_handle_isr+0x37c>)
    1568:	4b89      	ldr	r3, [pc, #548]	; (1790 <hif_handle_isr+0x364>)
    156a:	4798      	blx	r3
    156c:	200d      	movs	r0, #13
    156e:	4b89      	ldr	r3, [pc, #548]	; (1794 <hif_handle_isr+0x368>)
    1570:	4798      	blx	r3
    1572:	e7e0      	b.n	1536 <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfIpCb)
    1574:	4b7f      	ldr	r3, [pc, #508]	; (1774 <hif_handle_isr+0x348>)
    1576:	691b      	ldr	r3, [r3, #16]
    1578:	2b00      	cmp	r3, #0
    157a:	d00b      	beq.n	1594 <hif_handle_isr+0x168>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    157c:	4b7d      	ldr	r3, [pc, #500]	; (1774 <hif_handle_isr+0x348>)
    157e:	691b      	ldr	r3, [r3, #16]
    1580:	aa04      	add	r2, sp, #16
    1582:	7850      	ldrb	r0, [r2, #1]
    1584:	b2c0      	uxtb	r0, r0
    1586:	8851      	ldrh	r1, [r2, #2]
    1588:	9a05      	ldr	r2, [sp, #20]
    158a:	3208      	adds	r2, #8
    158c:	3908      	subs	r1, #8
    158e:	b289      	uxth	r1, r1
    1590:	4798      	blx	r3
    1592:	e7d0      	b.n	1536 <hif_handle_isr+0x10a>
						M2M_ERR("Scoket callback is not registered\n");
    1594:	22f7      	movs	r2, #247	; 0xf7
    1596:	0052      	lsls	r2, r2, #1
    1598:	4979      	ldr	r1, [pc, #484]	; (1780 <hif_handle_isr+0x354>)
    159a:	487a      	ldr	r0, [pc, #488]	; (1784 <hif_handle_isr+0x358>)
    159c:	4b7a      	ldr	r3, [pc, #488]	; (1788 <hif_handle_isr+0x35c>)
    159e:	4798      	blx	r3
    15a0:	4882      	ldr	r0, [pc, #520]	; (17ac <hif_handle_isr+0x380>)
    15a2:	4b7b      	ldr	r3, [pc, #492]	; (1790 <hif_handle_isr+0x364>)
    15a4:	4798      	blx	r3
    15a6:	200d      	movs	r0, #13
    15a8:	4b7a      	ldr	r3, [pc, #488]	; (1794 <hif_handle_isr+0x368>)
    15aa:	4798      	blx	r3
    15ac:	e7c3      	b.n	1536 <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfOtaCb)
    15ae:	4b71      	ldr	r3, [pc, #452]	; (1774 <hif_handle_isr+0x348>)
    15b0:	695b      	ldr	r3, [r3, #20]
    15b2:	2b00      	cmp	r3, #0
    15b4:	d00b      	beq.n	15ce <hif_handle_isr+0x1a2>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    15b6:	4b6f      	ldr	r3, [pc, #444]	; (1774 <hif_handle_isr+0x348>)
    15b8:	695b      	ldr	r3, [r3, #20]
    15ba:	aa04      	add	r2, sp, #16
    15bc:	7850      	ldrb	r0, [r2, #1]
    15be:	b2c0      	uxtb	r0, r0
    15c0:	8851      	ldrh	r1, [r2, #2]
    15c2:	9a05      	ldr	r2, [sp, #20]
    15c4:	3208      	adds	r2, #8
    15c6:	3908      	subs	r1, #8
    15c8:	b289      	uxth	r1, r1
    15ca:	4798      	blx	r3
    15cc:	e7b3      	b.n	1536 <hif_handle_isr+0x10a>
						M2M_ERR("Ota callback is not registered\n");
    15ce:	22fb      	movs	r2, #251	; 0xfb
    15d0:	0052      	lsls	r2, r2, #1
    15d2:	496b      	ldr	r1, [pc, #428]	; (1780 <hif_handle_isr+0x354>)
    15d4:	486b      	ldr	r0, [pc, #428]	; (1784 <hif_handle_isr+0x358>)
    15d6:	4b6c      	ldr	r3, [pc, #432]	; (1788 <hif_handle_isr+0x35c>)
    15d8:	4798      	blx	r3
    15da:	4875      	ldr	r0, [pc, #468]	; (17b0 <hif_handle_isr+0x384>)
    15dc:	4b6c      	ldr	r3, [pc, #432]	; (1790 <hif_handle_isr+0x364>)
    15de:	4798      	blx	r3
    15e0:	200d      	movs	r0, #13
    15e2:	4b6c      	ldr	r3, [pc, #432]	; (1794 <hif_handle_isr+0x368>)
    15e4:	4798      	blx	r3
    15e6:	e7a6      	b.n	1536 <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfCryptoCb)
    15e8:	4b62      	ldr	r3, [pc, #392]	; (1774 <hif_handle_isr+0x348>)
    15ea:	6a1b      	ldr	r3, [r3, #32]
    15ec:	2b00      	cmp	r3, #0
    15ee:	d00b      	beq.n	1608 <hif_handle_isr+0x1dc>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    15f0:	4b60      	ldr	r3, [pc, #384]	; (1774 <hif_handle_isr+0x348>)
    15f2:	6a1b      	ldr	r3, [r3, #32]
    15f4:	aa04      	add	r2, sp, #16
    15f6:	7850      	ldrb	r0, [r2, #1]
    15f8:	b2c0      	uxtb	r0, r0
    15fa:	8851      	ldrh	r1, [r2, #2]
    15fc:	9a05      	ldr	r2, [sp, #20]
    15fe:	3208      	adds	r2, #8
    1600:	3908      	subs	r1, #8
    1602:	b289      	uxth	r1, r1
    1604:	4798      	blx	r3
    1606:	e796      	b.n	1536 <hif_handle_isr+0x10a>
						M2M_ERR("Crypto callback is not registered\n");
    1608:	4a6a      	ldr	r2, [pc, #424]	; (17b4 <hif_handle_isr+0x388>)
    160a:	495d      	ldr	r1, [pc, #372]	; (1780 <hif_handle_isr+0x354>)
    160c:	485d      	ldr	r0, [pc, #372]	; (1784 <hif_handle_isr+0x358>)
    160e:	4b5e      	ldr	r3, [pc, #376]	; (1788 <hif_handle_isr+0x35c>)
    1610:	4798      	blx	r3
    1612:	4869      	ldr	r0, [pc, #420]	; (17b8 <hif_handle_isr+0x38c>)
    1614:	4b5e      	ldr	r3, [pc, #376]	; (1790 <hif_handle_isr+0x364>)
    1616:	4798      	blx	r3
    1618:	200d      	movs	r0, #13
    161a:	4b5e      	ldr	r3, [pc, #376]	; (1794 <hif_handle_isr+0x368>)
    161c:	4798      	blx	r3
    161e:	e78a      	b.n	1536 <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfSigmaCb)
    1620:	4b54      	ldr	r3, [pc, #336]	; (1774 <hif_handle_isr+0x348>)
    1622:	699b      	ldr	r3, [r3, #24]
    1624:	2b00      	cmp	r3, #0
    1626:	d00b      	beq.n	1640 <hif_handle_isr+0x214>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1628:	4b52      	ldr	r3, [pc, #328]	; (1774 <hif_handle_isr+0x348>)
    162a:	699b      	ldr	r3, [r3, #24]
    162c:	aa04      	add	r2, sp, #16
    162e:	7850      	ldrb	r0, [r2, #1]
    1630:	b2c0      	uxtb	r0, r0
    1632:	8851      	ldrh	r1, [r2, #2]
    1634:	9a05      	ldr	r2, [sp, #20]
    1636:	3208      	adds	r2, #8
    1638:	3908      	subs	r1, #8
    163a:	b289      	uxth	r1, r1
    163c:	4798      	blx	r3
    163e:	e77a      	b.n	1536 <hif_handle_isr+0x10a>
						M2M_ERR("Sigma callback is not registered\n");
    1640:	4a5e      	ldr	r2, [pc, #376]	; (17bc <hif_handle_isr+0x390>)
    1642:	494f      	ldr	r1, [pc, #316]	; (1780 <hif_handle_isr+0x354>)
    1644:	484f      	ldr	r0, [pc, #316]	; (1784 <hif_handle_isr+0x358>)
    1646:	4b50      	ldr	r3, [pc, #320]	; (1788 <hif_handle_isr+0x35c>)
    1648:	4798      	blx	r3
    164a:	485d      	ldr	r0, [pc, #372]	; (17c0 <hif_handle_isr+0x394>)
    164c:	4b50      	ldr	r3, [pc, #320]	; (1790 <hif_handle_isr+0x364>)
    164e:	4798      	blx	r3
    1650:	200d      	movs	r0, #13
    1652:	4b50      	ldr	r3, [pc, #320]	; (1794 <hif_handle_isr+0x368>)
    1654:	4798      	blx	r3
    1656:	e76e      	b.n	1536 <hif_handle_isr+0x10a>
				    if(gstrHifCxt.pfSslCb)
    1658:	4b46      	ldr	r3, [pc, #280]	; (1774 <hif_handle_isr+0x348>)
    165a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    165c:	2b00      	cmp	r3, #0
    165e:	d100      	bne.n	1662 <hif_handle_isr+0x236>
    1660:	e769      	b.n	1536 <hif_handle_isr+0x10a>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1662:	4b44      	ldr	r3, [pc, #272]	; (1774 <hif_handle_isr+0x348>)
    1664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1666:	aa04      	add	r2, sp, #16
    1668:	7850      	ldrb	r0, [r2, #1]
    166a:	b2c0      	uxtb	r0, r0
    166c:	8851      	ldrh	r1, [r2, #2]
    166e:	9a05      	ldr	r2, [sp, #20]
    1670:	3208      	adds	r2, #8
    1672:	3908      	subs	r1, #8
    1674:	b289      	uxth	r1, r1
    1676:	4798      	blx	r3
    1678:	e75d      	b.n	1536 <hif_handle_isr+0x10a>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    167a:	4a52      	ldr	r2, [pc, #328]	; (17c4 <hif_handle_isr+0x398>)
    167c:	4940      	ldr	r1, [pc, #256]	; (1780 <hif_handle_isr+0x354>)
    167e:	4841      	ldr	r0, [pc, #260]	; (1784 <hif_handle_isr+0x358>)
    1680:	4c41      	ldr	r4, [pc, #260]	; (1788 <hif_handle_isr+0x35c>)
    1682:	47a0      	blx	r4
    1684:	ab04      	add	r3, sp, #16
    1686:	7819      	ldrb	r1, [r3, #0]
    1688:	b2c9      	uxtb	r1, r1
    168a:	785a      	ldrb	r2, [r3, #1]
    168c:	b2d2      	uxtb	r2, r2
    168e:	484e      	ldr	r0, [pc, #312]	; (17c8 <hif_handle_isr+0x39c>)
    1690:	47a0      	blx	r4
    1692:	200d      	movs	r0, #13
    1694:	4b3f      	ldr	r3, [pc, #252]	; (1794 <hif_handle_isr+0x368>)
    1696:	4798      	blx	r3
					ret = hif_set_rx_done();
    1698:	4b4c      	ldr	r3, [pc, #304]	; (17cc <hif_handle_isr+0x3a0>)
    169a:	4798      	blx	r3
    169c:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
    169e:	d129      	bne.n	16f4 <hif_handle_isr+0x2c8>
    16a0:	e74e      	b.n	1540 <hif_handle_isr+0x114>
				M2M_ERR("(hif) Wrong Size\n");
    16a2:	2287      	movs	r2, #135	; 0x87
    16a4:	0092      	lsls	r2, r2, #2
    16a6:	4936      	ldr	r1, [pc, #216]	; (1780 <hif_handle_isr+0x354>)
    16a8:	4836      	ldr	r0, [pc, #216]	; (1784 <hif_handle_isr+0x358>)
    16aa:	4b37      	ldr	r3, [pc, #220]	; (1788 <hif_handle_isr+0x35c>)
    16ac:	4798      	blx	r3
    16ae:	4848      	ldr	r0, [pc, #288]	; (17d0 <hif_handle_isr+0x3a4>)
    16b0:	4b37      	ldr	r3, [pc, #220]	; (1790 <hif_handle_isr+0x364>)
    16b2:	4798      	blx	r3
    16b4:	200d      	movs	r0, #13
    16b6:	4b37      	ldr	r3, [pc, #220]	; (1794 <hif_handle_isr+0x368>)
    16b8:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    16ba:	2402      	movs	r4, #2
    16bc:	4264      	negs	r4, r4
    16be:	e019      	b.n	16f4 <hif_handle_isr+0x2c8>
			M2M_ERR("(hif) False interrupt %lx",reg);
    16c0:	2289      	movs	r2, #137	; 0x89
    16c2:	0092      	lsls	r2, r2, #2
    16c4:	492e      	ldr	r1, [pc, #184]	; (1780 <hif_handle_isr+0x354>)
    16c6:	482f      	ldr	r0, [pc, #188]	; (1784 <hif_handle_isr+0x358>)
    16c8:	4c2f      	ldr	r4, [pc, #188]	; (1788 <hif_handle_isr+0x35c>)
    16ca:	47a0      	blx	r4
    16cc:	9903      	ldr	r1, [sp, #12]
    16ce:	4841      	ldr	r0, [pc, #260]	; (17d4 <hif_handle_isr+0x3a8>)
    16d0:	47a0      	blx	r4
    16d2:	200d      	movs	r0, #13
    16d4:	4b2f      	ldr	r3, [pc, #188]	; (1794 <hif_handle_isr+0x368>)
    16d6:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    16d8:	240c      	movs	r4, #12
    16da:	4264      	negs	r4, r4
    16dc:	e00a      	b.n	16f4 <hif_handle_isr+0x2c8>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    16de:	4a3e      	ldr	r2, [pc, #248]	; (17d8 <hif_handle_isr+0x3ac>)
    16e0:	4927      	ldr	r1, [pc, #156]	; (1780 <hif_handle_isr+0x354>)
    16e2:	4828      	ldr	r0, [pc, #160]	; (1784 <hif_handle_isr+0x358>)
    16e4:	4b28      	ldr	r3, [pc, #160]	; (1788 <hif_handle_isr+0x35c>)
    16e6:	4798      	blx	r3
    16e8:	483c      	ldr	r0, [pc, #240]	; (17dc <hif_handle_isr+0x3b0>)
    16ea:	4b29      	ldr	r3, [pc, #164]	; (1790 <hif_handle_isr+0x364>)
    16ec:	4798      	blx	r3
    16ee:	200d      	movs	r0, #13
    16f0:	4b28      	ldr	r3, [pc, #160]	; (1794 <hif_handle_isr+0x368>)
    16f2:	4798      	blx	r3
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    16f4:	4a3a      	ldr	r2, [pc, #232]	; (17e0 <hif_handle_isr+0x3b4>)
    16f6:	493b      	ldr	r1, [pc, #236]	; (17e4 <hif_handle_isr+0x3b8>)
    16f8:	4822      	ldr	r0, [pc, #136]	; (1784 <hif_handle_isr+0x358>)
    16fa:	4f23      	ldr	r7, [pc, #140]	; (1788 <hif_handle_isr+0x35c>)
    16fc:	47b8      	blx	r7
    16fe:	0021      	movs	r1, r4
    1700:	4839      	ldr	r0, [pc, #228]	; (17e8 <hif_handle_isr+0x3bc>)
    1702:	47b8      	blx	r7
    1704:	200d      	movs	r0, #13
    1706:	4b23      	ldr	r3, [pc, #140]	; (1794 <hif_handle_isr+0x368>)
    1708:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    170a:	a903      	add	r1, sp, #12
    170c:	4837      	ldr	r0, [pc, #220]	; (17ec <hif_handle_isr+0x3c0>)
    170e:	47b0      	blx	r6
    1710:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
    1712:	d1e4      	bne.n	16de <hif_handle_isr+0x2b2>
		if(reg & 0x1)	/* New interrupt has been received */
    1714:	9b03      	ldr	r3, [sp, #12]
    1716:	07db      	lsls	r3, r3, #31
    1718:	d5d2      	bpl.n	16c0 <hif_handle_isr+0x294>
			nm_bsp_interrupt_ctrl(0);
    171a:	2000      	movs	r0, #0
    171c:	4b1f      	ldr	r3, [pc, #124]	; (179c <hif_handle_isr+0x370>)
    171e:	4798      	blx	r3
			reg &= ~NBIT0;
    1720:	2301      	movs	r3, #1
    1722:	9903      	ldr	r1, [sp, #12]
    1724:	4399      	bics	r1, r3
    1726:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    1728:	4830      	ldr	r0, [pc, #192]	; (17ec <hif_handle_isr+0x3c0>)
    172a:	4b31      	ldr	r3, [pc, #196]	; (17f0 <hif_handle_isr+0x3c4>)
    172c:	4798      	blx	r3
    172e:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
    1730:	d1e0      	bne.n	16f4 <hif_handle_isr+0x2c8>
			gstrHifCxt.u8HifRXDone = 1;
    1732:	2201      	movs	r2, #1
    1734:	4b0f      	ldr	r3, [pc, #60]	; (1774 <hif_handle_isr+0x348>)
    1736:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    1738:	9b03      	ldr	r3, [sp, #12]
    173a:	049d      	lsls	r5, r3, #18
    173c:	0d2d      	lsrs	r5, r5, #20
			if (size > 0) {
    173e:	d0b0      	beq.n	16a2 <hif_handle_isr+0x276>
				uint32 address = 0;
    1740:	2300      	movs	r3, #0
    1742:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    1744:	a905      	add	r1, sp, #20
    1746:	482b      	ldr	r0, [pc, #172]	; (17f4 <hif_handle_isr+0x3c8>)
    1748:	4b16      	ldr	r3, [pc, #88]	; (17a4 <hif_handle_isr+0x378>)
    174a:	4798      	blx	r3
    174c:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    174e:	d100      	bne.n	1752 <hif_handle_isr+0x326>
    1750:	e675      	b.n	143e <hif_handle_isr+0x12>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    1752:	22c8      	movs	r2, #200	; 0xc8
    1754:	32ff      	adds	r2, #255	; 0xff
    1756:	490a      	ldr	r1, [pc, #40]	; (1780 <hif_handle_isr+0x354>)
    1758:	480a      	ldr	r0, [pc, #40]	; (1784 <hif_handle_isr+0x358>)
    175a:	4b0b      	ldr	r3, [pc, #44]	; (1788 <hif_handle_isr+0x35c>)
    175c:	4798      	blx	r3
    175e:	4826      	ldr	r0, [pc, #152]	; (17f8 <hif_handle_isr+0x3cc>)
    1760:	4b0b      	ldr	r3, [pc, #44]	; (1790 <hif_handle_isr+0x364>)
    1762:	4798      	blx	r3
    1764:	200d      	movs	r0, #13
    1766:	4b0b      	ldr	r3, [pc, #44]	; (1794 <hif_handle_isr+0x368>)
    1768:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    176a:	2001      	movs	r0, #1
    176c:	4b0b      	ldr	r3, [pc, #44]	; (179c <hif_handle_isr+0x370>)
    176e:	4798      	blx	r3
    1770:	e7c0      	b.n	16f4 <hif_handle_isr+0x2c8>
    1772:	46c0      	nop			; (mov r8, r8)
    1774:	200002b8 	.word	0x200002b8
    1778:	00002549 	.word	0x00002549
    177c:	0000020f 	.word	0x0000020f
    1780:	0000aa04 	.word	0x0000aa04
    1784:	0000a9b0 	.word	0x0000a9b0
    1788:	000095e5 	.word	0x000095e5
    178c:	0000ab60 	.word	0x0000ab60
    1790:	00009701 	.word	0x00009701
    1794:	00009619 	.word	0x00009619
    1798:	0000aa5c 	.word	0x0000aa5c
    179c:	00000df5 	.word	0x00000df5
    17a0:	0000aa74 	.word	0x0000aa74
    17a4:	00002531 	.word	0x00002531
    17a8:	0000aab4 	.word	0x0000aab4
    17ac:	0000aad4 	.word	0x0000aad4
    17b0:	0000aaf8 	.word	0x0000aaf8
    17b4:	000001ff 	.word	0x000001ff
    17b8:	0000ab18 	.word	0x0000ab18
    17bc:	00000206 	.word	0x00000206
    17c0:	0000ab3c 	.word	0x0000ab3c
    17c4:	00000215 	.word	0x00000215
    17c8:	0000ab78 	.word	0x0000ab78
    17cc:	00001129 	.word	0x00001129
    17d0:	0000aba4 	.word	0x0000aba4
    17d4:	0000abb8 	.word	0x0000abb8
    17d8:	0000022d 	.word	0x0000022d
    17dc:	0000abd4 	.word	0x0000abd4
    17e0:	0000024a 	.word	0x0000024a
    17e4:	0000aa0c 	.word	0x0000aa0c
    17e8:	0000abf8 	.word	0x0000abf8
    17ec:	00001070 	.word	0x00001070
    17f0:	0000253d 	.word	0x0000253d
    17f4:	00001084 	.word	0x00001084
    17f8:	0000aa38 	.word	0x0000aa38
			}
		}
	}

	return ret;
}
    17fc:	2000      	movs	r0, #0
    17fe:	b007      	add	sp, #28
    1800:	bc0c      	pop	{r2, r3}
    1802:	4690      	mov	r8, r2
    1804:	4699      	mov	r9, r3
    1806:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001808 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    1808:	b570      	push	{r4, r5, r6, lr}
    180a:	0014      	movs	r4, r2
    180c:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    180e:	2800      	cmp	r0, #0
    1810:	d003      	beq.n	181a <hif_receive+0x12>
    1812:	2900      	cmp	r1, #0
    1814:	d001      	beq.n	181a <hif_receive+0x12>
    1816:	2a00      	cmp	r2, #0
    1818:	d112      	bne.n	1840 <hif_receive+0x38>
	{
		if(isDone)
    181a:	2d00      	cmp	r5, #0
    181c:	d002      	beq.n	1824 <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    181e:	4b27      	ldr	r3, [pc, #156]	; (18bc <hif_receive+0xb4>)
    1820:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    1822:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
    1824:	4a26      	ldr	r2, [pc, #152]	; (18c0 <hif_receive+0xb8>)
    1826:	4927      	ldr	r1, [pc, #156]	; (18c4 <hif_receive+0xbc>)
    1828:	4827      	ldr	r0, [pc, #156]	; (18c8 <hif_receive+0xc0>)
    182a:	4b28      	ldr	r3, [pc, #160]	; (18cc <hif_receive+0xc4>)
    182c:	4798      	blx	r3
    182e:	4828      	ldr	r0, [pc, #160]	; (18d0 <hif_receive+0xc8>)
    1830:	4b28      	ldr	r3, [pc, #160]	; (18d4 <hif_receive+0xcc>)
    1832:	4798      	blx	r3
    1834:	200d      	movs	r0, #13
    1836:	4b28      	ldr	r3, [pc, #160]	; (18d8 <hif_receive+0xd0>)
    1838:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    183a:	200c      	movs	r0, #12
    183c:	4240      	negs	r0, r0
    183e:	e7f0      	b.n	1822 <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
    1840:	4b26      	ldr	r3, [pc, #152]	; (18dc <hif_receive+0xd4>)
    1842:	689b      	ldr	r3, [r3, #8]
    1844:	429a      	cmp	r2, r3
    1846:	d81a      	bhi.n	187e <hif_receive+0x76>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    1848:	4b24      	ldr	r3, [pc, #144]	; (18dc <hif_receive+0xd4>)
    184a:	685b      	ldr	r3, [r3, #4]
    184c:	4298      	cmp	r0, r3
    184e:	d326      	bcc.n	189e <hif_receive+0x96>
    1850:	1886      	adds	r6, r0, r2
    1852:	4a22      	ldr	r2, [pc, #136]	; (18dc <hif_receive+0xd4>)
    1854:	6853      	ldr	r3, [r2, #4]
    1856:	6892      	ldr	r2, [r2, #8]
    1858:	189b      	adds	r3, r3, r2
    185a:	429e      	cmp	r6, r3
    185c:	d81f      	bhi.n	189e <hif_receive+0x96>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    185e:	0022      	movs	r2, r4
    1860:	4b1f      	ldr	r3, [pc, #124]	; (18e0 <hif_receive+0xd8>)
    1862:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    1864:	2800      	cmp	r0, #0
    1866:	d1dc      	bne.n	1822 <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    1868:	4a1c      	ldr	r2, [pc, #112]	; (18dc <hif_receive+0xd4>)
    186a:	6853      	ldr	r3, [r2, #4]
    186c:	6892      	ldr	r2, [r2, #8]
    186e:	189b      	adds	r3, r3, r2
    1870:	429e      	cmp	r6, r3
    1872:	d001      	beq.n	1878 <hif_receive+0x70>
    1874:	2d00      	cmp	r5, #0
    1876:	d0d4      	beq.n	1822 <hif_receive+0x1a>
		ret = hif_set_rx_done();
    1878:	4b10      	ldr	r3, [pc, #64]	; (18bc <hif_receive+0xb4>)
    187a:	4798      	blx	r3
    187c:	e7d1      	b.n	1822 <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    187e:	4a19      	ldr	r2, [pc, #100]	; (18e4 <hif_receive+0xdc>)
    1880:	4910      	ldr	r1, [pc, #64]	; (18c4 <hif_receive+0xbc>)
    1882:	4811      	ldr	r0, [pc, #68]	; (18c8 <hif_receive+0xc0>)
    1884:	4d11      	ldr	r5, [pc, #68]	; (18cc <hif_receive+0xc4>)
    1886:	47a8      	blx	r5
    1888:	4b14      	ldr	r3, [pc, #80]	; (18dc <hif_receive+0xd4>)
    188a:	689a      	ldr	r2, [r3, #8]
    188c:	0021      	movs	r1, r4
    188e:	4816      	ldr	r0, [pc, #88]	; (18e8 <hif_receive+0xe0>)
    1890:	47a8      	blx	r5
    1892:	200d      	movs	r0, #13
    1894:	4b10      	ldr	r3, [pc, #64]	; (18d8 <hif_receive+0xd0>)
    1896:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1898:	200c      	movs	r0, #12
    189a:	4240      	negs	r0, r0
		goto ERR1;
    189c:	e7c1      	b.n	1822 <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    189e:	4a13      	ldr	r2, [pc, #76]	; (18ec <hif_receive+0xe4>)
    18a0:	4908      	ldr	r1, [pc, #32]	; (18c4 <hif_receive+0xbc>)
    18a2:	4809      	ldr	r0, [pc, #36]	; (18c8 <hif_receive+0xc0>)
    18a4:	4b09      	ldr	r3, [pc, #36]	; (18cc <hif_receive+0xc4>)
    18a6:	4798      	blx	r3
    18a8:	4811      	ldr	r0, [pc, #68]	; (18f0 <hif_receive+0xe8>)
    18aa:	4b0a      	ldr	r3, [pc, #40]	; (18d4 <hif_receive+0xcc>)
    18ac:	4798      	blx	r3
    18ae:	200d      	movs	r0, #13
    18b0:	4b09      	ldr	r3, [pc, #36]	; (18d8 <hif_receive+0xd0>)
    18b2:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    18b4:	200c      	movs	r0, #12
    18b6:	4240      	negs	r0, r0
		goto ERR1;
    18b8:	e7b3      	b.n	1822 <hif_receive+0x1a>
    18ba:	46c0      	nop			; (mov r8, r8)
    18bc:	00001129 	.word	0x00001129
    18c0:	0000026b 	.word	0x0000026b
    18c4:	0000aa1c 	.word	0x0000aa1c
    18c8:	0000a9b0 	.word	0x0000a9b0
    18cc:	000095e5 	.word	0x000095e5
    18d0:	0000ac28 	.word	0x0000ac28
    18d4:	00009701 	.word	0x00009701
    18d8:	00009619 	.word	0x00009619
    18dc:	200002b8 	.word	0x200002b8
    18e0:	00002549 	.word	0x00002549
    18e4:	00000273 	.word	0x00000273
    18e8:	0000ac48 	.word	0x0000ac48
    18ec:	00000279 	.word	0x00000279
    18f0:	0000ac90 	.word	0x0000ac90

000018f4 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    18f4:	b570      	push	{r4, r5, r6, lr}
    18f6:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    18f8:	2807      	cmp	r0, #7
    18fa:	d81f      	bhi.n	193c <hif_register_cb+0x48>
    18fc:	0083      	lsls	r3, r0, #2
    18fe:	4a16      	ldr	r2, [pc, #88]	; (1958 <hif_register_cb+0x64>)
    1900:	58d3      	ldr	r3, [r2, r3]
    1902:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    1904:	4b15      	ldr	r3, [pc, #84]	; (195c <hif_register_cb+0x68>)
    1906:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
    1908:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
    190a:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
    190c:	4b13      	ldr	r3, [pc, #76]	; (195c <hif_register_cb+0x68>)
    190e:	60d9      	str	r1, [r3, #12]
	sint8 ret = M2M_SUCCESS;
    1910:	2000      	movs	r0, #0
			break;
    1912:	e7fa      	b.n	190a <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
    1914:	4b11      	ldr	r3, [pc, #68]	; (195c <hif_register_cb+0x68>)
    1916:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
    1918:	2000      	movs	r0, #0
			break;
    191a:	e7f6      	b.n	190a <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
    191c:	4b0f      	ldr	r3, [pc, #60]	; (195c <hif_register_cb+0x68>)
    191e:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
    1920:	2000      	movs	r0, #0
			break;
    1922:	e7f2      	b.n	190a <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
    1924:	4b0d      	ldr	r3, [pc, #52]	; (195c <hif_register_cb+0x68>)
    1926:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
    1928:	2000      	movs	r0, #0
			break;
    192a:	e7ee      	b.n	190a <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
    192c:	4b0b      	ldr	r3, [pc, #44]	; (195c <hif_register_cb+0x68>)
    192e:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
    1930:	2000      	movs	r0, #0
			break;
    1932:	e7ea      	b.n	190a <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
    1934:	4b09      	ldr	r3, [pc, #36]	; (195c <hif_register_cb+0x68>)
    1936:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
    1938:	2000      	movs	r0, #0
			break;
    193a:	e7e6      	b.n	190a <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
    193c:	4a08      	ldr	r2, [pc, #32]	; (1960 <hif_register_cb+0x6c>)
    193e:	4909      	ldr	r1, [pc, #36]	; (1964 <hif_register_cb+0x70>)
    1940:	4809      	ldr	r0, [pc, #36]	; (1968 <hif_register_cb+0x74>)
    1942:	4d0a      	ldr	r5, [pc, #40]	; (196c <hif_register_cb+0x78>)
    1944:	47a8      	blx	r5
    1946:	0021      	movs	r1, r4
    1948:	4809      	ldr	r0, [pc, #36]	; (1970 <hif_register_cb+0x7c>)
    194a:	47a8      	blx	r5
    194c:	200d      	movs	r0, #13
    194e:	4b09      	ldr	r3, [pc, #36]	; (1974 <hif_register_cb+0x80>)
    1950:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1952:	200c      	movs	r0, #12
    1954:	4240      	negs	r0, r0
			break;
    1956:	e7d8      	b.n	190a <hif_register_cb+0x16>
    1958:	0000a9d8 	.word	0x0000a9d8
    195c:	200002b8 	.word	0x200002b8
    1960:	000002b1 	.word	0x000002b1
    1964:	0000aa28 	.word	0x0000aa28
    1968:	0000a9b0 	.word	0x0000a9b0
    196c:	000095e5 	.word	0x000095e5
    1970:	0000acd4 	.word	0x0000acd4
    1974:	00009619 	.word	0x00009619

00001978 <hif_init>:
{
    1978:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    197a:	2228      	movs	r2, #40	; 0x28
    197c:	2100      	movs	r1, #0
    197e:	4806      	ldr	r0, [pc, #24]	; (1998 <hif_init+0x20>)
    1980:	4b06      	ldr	r3, [pc, #24]	; (199c <hif_init+0x24>)
    1982:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    1984:	4806      	ldr	r0, [pc, #24]	; (19a0 <hif_init+0x28>)
    1986:	4b07      	ldr	r3, [pc, #28]	; (19a4 <hif_init+0x2c>)
    1988:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    198a:	4907      	ldr	r1, [pc, #28]	; (19a8 <hif_init+0x30>)
    198c:	2003      	movs	r0, #3
    198e:	4b07      	ldr	r3, [pc, #28]	; (19ac <hif_init+0x34>)
    1990:	4798      	blx	r3
}
    1992:	2000      	movs	r0, #0
    1994:	bd10      	pop	{r4, pc}
    1996:	46c0      	nop			; (mov r8, r8)
    1998:	200002b8 	.word	0x200002b8
    199c:	000010e9 	.word	0x000010e9
    19a0:	00001115 	.word	0x00001115
    19a4:	00000d9d 	.word	0x00000d9d
    19a8:	00001125 	.word	0x00001125
    19ac:	000018f5 	.word	0x000018f5

000019b0 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    19b0:	b530      	push	{r4, r5, lr}
    19b2:	b09f      	sub	sp, #124	; 0x7c
    19b4:	0004      	movs	r4, r0
    19b6:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    19b8:	282c      	cmp	r0, #44	; 0x2c
    19ba:	d02f      	beq.n	1a1c <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    19bc:	281b      	cmp	r0, #27
    19be:	d03d      	beq.n	1a3c <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    19c0:	2806      	cmp	r0, #6
    19c2:	d04b      	beq.n	1a5c <m2m_wifi_cb+0xac>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    19c4:	280e      	cmp	r0, #14
    19c6:	d027      	beq.n	1a18 <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    19c8:	2832      	cmp	r0, #50	; 0x32
    19ca:	d057      	beq.n	1a7c <m2m_wifi_cb+0xcc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    19cc:	282f      	cmp	r0, #47	; 0x2f
    19ce:	d065      	beq.n	1a9c <m2m_wifi_cb+0xec>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    19d0:	2834      	cmp	r0, #52	; 0x34
    19d2:	d100      	bne.n	19d6 <m2m_wifi_cb+0x26>
    19d4:	e077      	b.n	1ac6 <m2m_wifi_cb+0x116>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    19d6:	2811      	cmp	r0, #17
    19d8:	d100      	bne.n	19dc <m2m_wifi_cb+0x2c>
    19da:	e096      	b.n	1b0a <m2m_wifi_cb+0x15a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    19dc:	2813      	cmp	r0, #19
    19de:	d100      	bne.n	19e2 <m2m_wifi_cb+0x32>
    19e0:	e0ac      	b.n	1b3c <m2m_wifi_cb+0x18c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    19e2:	2804      	cmp	r0, #4
    19e4:	d100      	bne.n	19e8 <m2m_wifi_cb+0x38>
    19e6:	e0bb      	b.n	1b60 <m2m_wifi_cb+0x1b0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    19e8:	2865      	cmp	r0, #101	; 0x65
    19ea:	d100      	bne.n	19ee <m2m_wifi_cb+0x3e>
    19ec:	e0ca      	b.n	1b84 <m2m_wifi_cb+0x1d4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    19ee:	2809      	cmp	r0, #9
    19f0:	d100      	bne.n	19f4 <m2m_wifi_cb+0x44>
    19f2:	e0d9      	b.n	1ba8 <m2m_wifi_cb+0x1f8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    19f4:	282a      	cmp	r0, #42	; 0x2a
    19f6:	d100      	bne.n	19fa <m2m_wifi_cb+0x4a>
    19f8:	e0e8      	b.n	1bcc <m2m_wifi_cb+0x21c>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    19fa:	2820      	cmp	r0, #32
    19fc:	d100      	bne.n	1a00 <m2m_wifi_cb+0x50>
    19fe:	e0f7      	b.n	1bf0 <m2m_wifi_cb+0x240>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    1a00:	2292      	movs	r2, #146	; 0x92
    1a02:	0052      	lsls	r2, r2, #1
    1a04:	4989      	ldr	r1, [pc, #548]	; (1c2c <m2m_wifi_cb+0x27c>)
    1a06:	488a      	ldr	r0, [pc, #552]	; (1c30 <m2m_wifi_cb+0x280>)
    1a08:	4d8a      	ldr	r5, [pc, #552]	; (1c34 <m2m_wifi_cb+0x284>)
    1a0a:	47a8      	blx	r5
    1a0c:	0021      	movs	r1, r4
    1a0e:	488a      	ldr	r0, [pc, #552]	; (1c38 <m2m_wifi_cb+0x288>)
    1a10:	47a8      	blx	r5
    1a12:	200d      	movs	r0, #13
    1a14:	4b89      	ldr	r3, [pc, #548]	; (1c3c <m2m_wifi_cb+0x28c>)
    1a16:	4798      	blx	r3
	}
}
    1a18:	b01f      	add	sp, #124	; 0x7c
    1a1a:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    1a1c:	2300      	movs	r3, #0
    1a1e:	2204      	movs	r2, #4
    1a20:	a903      	add	r1, sp, #12
    1a22:	0028      	movs	r0, r5
    1a24:	4c86      	ldr	r4, [pc, #536]	; (1c40 <m2m_wifi_cb+0x290>)
    1a26:	47a0      	blx	r4
    1a28:	2800      	cmp	r0, #0
    1a2a:	d1f5      	bne.n	1a18 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1a2c:	4b85      	ldr	r3, [pc, #532]	; (1c44 <m2m_wifi_cb+0x294>)
    1a2e:	681b      	ldr	r3, [r3, #0]
    1a30:	2b00      	cmp	r3, #0
    1a32:	d0f1      	beq.n	1a18 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    1a34:	a903      	add	r1, sp, #12
    1a36:	302c      	adds	r0, #44	; 0x2c
    1a38:	4798      	blx	r3
    1a3a:	e7ed      	b.n	1a18 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    1a3c:	2300      	movs	r3, #0
    1a3e:	2208      	movs	r2, #8
    1a40:	a903      	add	r1, sp, #12
    1a42:	0028      	movs	r0, r5
    1a44:	4c7e      	ldr	r4, [pc, #504]	; (1c40 <m2m_wifi_cb+0x290>)
    1a46:	47a0      	blx	r4
    1a48:	2800      	cmp	r0, #0
    1a4a:	d1e5      	bne.n	1a18 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1a4c:	4b7d      	ldr	r3, [pc, #500]	; (1c44 <m2m_wifi_cb+0x294>)
    1a4e:	681b      	ldr	r3, [r3, #0]
    1a50:	2b00      	cmp	r3, #0
    1a52:	d0e1      	beq.n	1a18 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    1a54:	a903      	add	r1, sp, #12
    1a56:	301b      	adds	r0, #27
    1a58:	4798      	blx	r3
    1a5a:	e7dd      	b.n	1a18 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    1a5c:	2301      	movs	r3, #1
    1a5e:	2230      	movs	r2, #48	; 0x30
    1a60:	a903      	add	r1, sp, #12
    1a62:	0028      	movs	r0, r5
    1a64:	4c76      	ldr	r4, [pc, #472]	; (1c40 <m2m_wifi_cb+0x290>)
    1a66:	47a0      	blx	r4
    1a68:	2800      	cmp	r0, #0
    1a6a:	d1d5      	bne.n	1a18 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    1a6c:	4b75      	ldr	r3, [pc, #468]	; (1c44 <m2m_wifi_cb+0x294>)
    1a6e:	681b      	ldr	r3, [r3, #0]
    1a70:	2b00      	cmp	r3, #0
    1a72:	d0d1      	beq.n	1a18 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    1a74:	a903      	add	r1, sp, #12
    1a76:	3006      	adds	r0, #6
    1a78:	4798      	blx	r3
    1a7a:	e7cd      	b.n	1a18 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    1a7c:	2300      	movs	r3, #0
    1a7e:	2214      	movs	r2, #20
    1a80:	a903      	add	r1, sp, #12
    1a82:	0028      	movs	r0, r5
    1a84:	4c6e      	ldr	r4, [pc, #440]	; (1c40 <m2m_wifi_cb+0x290>)
    1a86:	47a0      	blx	r4
    1a88:	2800      	cmp	r0, #0
    1a8a:	d1c5      	bne.n	1a18 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1a8c:	4b6d      	ldr	r3, [pc, #436]	; (1c44 <m2m_wifi_cb+0x294>)
    1a8e:	681b      	ldr	r3, [r3, #0]
    1a90:	2b00      	cmp	r3, #0
    1a92:	d0c1      	beq.n	1a18 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    1a94:	a903      	add	r1, sp, #12
    1a96:	3032      	adds	r0, #50	; 0x32
    1a98:	4798      	blx	r3
    1a9a:	e7bd      	b.n	1a18 <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    1a9c:	2264      	movs	r2, #100	; 0x64
    1a9e:	2100      	movs	r1, #0
    1aa0:	a803      	add	r0, sp, #12
    1aa2:	4b69      	ldr	r3, [pc, #420]	; (1c48 <m2m_wifi_cb+0x298>)
    1aa4:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    1aa6:	2300      	movs	r3, #0
    1aa8:	2264      	movs	r2, #100	; 0x64
    1aaa:	a903      	add	r1, sp, #12
    1aac:	0028      	movs	r0, r5
    1aae:	4c64      	ldr	r4, [pc, #400]	; (1c40 <m2m_wifi_cb+0x290>)
    1ab0:	47a0      	blx	r4
    1ab2:	2800      	cmp	r0, #0
    1ab4:	d1b0      	bne.n	1a18 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1ab6:	4b63      	ldr	r3, [pc, #396]	; (1c44 <m2m_wifi_cb+0x294>)
    1ab8:	681b      	ldr	r3, [r3, #0]
    1aba:	2b00      	cmp	r3, #0
    1abc:	d0ac      	beq.n	1a18 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    1abe:	a903      	add	r1, sp, #12
    1ac0:	302f      	adds	r0, #47	; 0x2f
    1ac2:	4798      	blx	r3
    1ac4:	e7a8      	b.n	1a18 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    1ac6:	2300      	movs	r3, #0
    1ac8:	2204      	movs	r2, #4
    1aca:	a903      	add	r1, sp, #12
    1acc:	0028      	movs	r0, r5
    1ace:	4c5c      	ldr	r4, [pc, #368]	; (1c40 <m2m_wifi_cb+0x290>)
    1ad0:	47a0      	blx	r4
    1ad2:	2800      	cmp	r0, #0
    1ad4:	d1a0      	bne.n	1a18 <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    1ad6:	485d      	ldr	r0, [pc, #372]	; (1c4c <m2m_wifi_cb+0x29c>)
    1ad8:	4d56      	ldr	r5, [pc, #344]	; (1c34 <m2m_wifi_cb+0x284>)
    1ada:	47a8      	blx	r5
    1adc:	9c03      	ldr	r4, [sp, #12]
    1ade:	0a23      	lsrs	r3, r4, #8
    1ae0:	20ff      	movs	r0, #255	; 0xff
    1ae2:	4003      	ands	r3, r0
    1ae4:	0c22      	lsrs	r2, r4, #16
    1ae6:	4002      	ands	r2, r0
    1ae8:	0e21      	lsrs	r1, r4, #24
    1aea:	4020      	ands	r0, r4
    1aec:	9000      	str	r0, [sp, #0]
    1aee:	4858      	ldr	r0, [pc, #352]	; (1c50 <m2m_wifi_cb+0x2a0>)
    1af0:	47a8      	blx	r5
    1af2:	200d      	movs	r0, #13
    1af4:	4b51      	ldr	r3, [pc, #324]	; (1c3c <m2m_wifi_cb+0x28c>)
    1af6:	4798      	blx	r3
			if (gpfAppWifiCb)
    1af8:	4b52      	ldr	r3, [pc, #328]	; (1c44 <m2m_wifi_cb+0x294>)
    1afa:	681b      	ldr	r3, [r3, #0]
    1afc:	2b00      	cmp	r3, #0
    1afe:	d100      	bne.n	1b02 <m2m_wifi_cb+0x152>
    1b00:	e78a      	b.n	1a18 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    1b02:	2100      	movs	r1, #0
    1b04:	2034      	movs	r0, #52	; 0x34
    1b06:	4798      	blx	r3
    1b08:	e786      	b.n	1a18 <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
    1b0a:	2200      	movs	r2, #0
    1b0c:	4b51      	ldr	r3, [pc, #324]	; (1c54 <m2m_wifi_cb+0x2a4>)
    1b0e:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    1b10:	2300      	movs	r3, #0
    1b12:	3204      	adds	r2, #4
    1b14:	a903      	add	r1, sp, #12
    1b16:	0028      	movs	r0, r5
    1b18:	4c49      	ldr	r4, [pc, #292]	; (1c40 <m2m_wifi_cb+0x290>)
    1b1a:	47a0      	blx	r4
    1b1c:	2800      	cmp	r0, #0
    1b1e:	d000      	beq.n	1b22 <m2m_wifi_cb+0x172>
    1b20:	e77a      	b.n	1a18 <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
    1b22:	ab03      	add	r3, sp, #12
    1b24:	781a      	ldrb	r2, [r3, #0]
    1b26:	4b4c      	ldr	r3, [pc, #304]	; (1c58 <m2m_wifi_cb+0x2a8>)
    1b28:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    1b2a:	4b46      	ldr	r3, [pc, #280]	; (1c44 <m2m_wifi_cb+0x294>)
    1b2c:	681b      	ldr	r3, [r3, #0]
    1b2e:	2b00      	cmp	r3, #0
    1b30:	d100      	bne.n	1b34 <m2m_wifi_cb+0x184>
    1b32:	e771      	b.n	1a18 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    1b34:	a903      	add	r1, sp, #12
    1b36:	3011      	adds	r0, #17
    1b38:	4798      	blx	r3
    1b3a:	e76d      	b.n	1a18 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    1b3c:	2300      	movs	r3, #0
    1b3e:	222c      	movs	r2, #44	; 0x2c
    1b40:	a903      	add	r1, sp, #12
    1b42:	0028      	movs	r0, r5
    1b44:	4c3e      	ldr	r4, [pc, #248]	; (1c40 <m2m_wifi_cb+0x290>)
    1b46:	47a0      	blx	r4
    1b48:	2800      	cmp	r0, #0
    1b4a:	d000      	beq.n	1b4e <m2m_wifi_cb+0x19e>
    1b4c:	e764      	b.n	1a18 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1b4e:	4b3d      	ldr	r3, [pc, #244]	; (1c44 <m2m_wifi_cb+0x294>)
    1b50:	681b      	ldr	r3, [r3, #0]
    1b52:	2b00      	cmp	r3, #0
    1b54:	d100      	bne.n	1b58 <m2m_wifi_cb+0x1a8>
    1b56:	e75f      	b.n	1a18 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    1b58:	a903      	add	r1, sp, #12
    1b5a:	3013      	adds	r0, #19
    1b5c:	4798      	blx	r3
    1b5e:	e75b      	b.n	1a18 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1b60:	2300      	movs	r3, #0
    1b62:	2204      	movs	r2, #4
    1b64:	a91c      	add	r1, sp, #112	; 0x70
    1b66:	0028      	movs	r0, r5
    1b68:	4c35      	ldr	r4, [pc, #212]	; (1c40 <m2m_wifi_cb+0x290>)
    1b6a:	47a0      	blx	r4
    1b6c:	2800      	cmp	r0, #0
    1b6e:	d000      	beq.n	1b72 <m2m_wifi_cb+0x1c2>
    1b70:	e752      	b.n	1a18 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1b72:	4b34      	ldr	r3, [pc, #208]	; (1c44 <m2m_wifi_cb+0x294>)
    1b74:	681b      	ldr	r3, [r3, #0]
    1b76:	2b00      	cmp	r3, #0
    1b78:	d100      	bne.n	1b7c <m2m_wifi_cb+0x1cc>
    1b7a:	e74d      	b.n	1a18 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    1b7c:	a91c      	add	r1, sp, #112	; 0x70
    1b7e:	3004      	adds	r0, #4
    1b80:	4798      	blx	r3
    1b82:	e749      	b.n	1a18 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1b84:	2300      	movs	r3, #0
    1b86:	2204      	movs	r2, #4
    1b88:	a91c      	add	r1, sp, #112	; 0x70
    1b8a:	0028      	movs	r0, r5
    1b8c:	4c2c      	ldr	r4, [pc, #176]	; (1c40 <m2m_wifi_cb+0x290>)
    1b8e:	47a0      	blx	r4
    1b90:	2800      	cmp	r0, #0
    1b92:	d000      	beq.n	1b96 <m2m_wifi_cb+0x1e6>
    1b94:	e740      	b.n	1a18 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1b96:	4b2b      	ldr	r3, [pc, #172]	; (1c44 <m2m_wifi_cb+0x294>)
    1b98:	681b      	ldr	r3, [r3, #0]
    1b9a:	2b00      	cmp	r3, #0
    1b9c:	d100      	bne.n	1ba0 <m2m_wifi_cb+0x1f0>
    1b9e:	e73b      	b.n	1a18 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    1ba0:	a91c      	add	r1, sp, #112	; 0x70
    1ba2:	3065      	adds	r0, #101	; 0x65
    1ba4:	4798      	blx	r3
    1ba6:	e737      	b.n	1a18 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    1ba8:	2301      	movs	r3, #1
    1baa:	2264      	movs	r2, #100	; 0x64
    1bac:	a903      	add	r1, sp, #12
    1bae:	0028      	movs	r0, r5
    1bb0:	4c23      	ldr	r4, [pc, #140]	; (1c40 <m2m_wifi_cb+0x290>)
    1bb2:	47a0      	blx	r4
    1bb4:	2800      	cmp	r0, #0
    1bb6:	d000      	beq.n	1bba <m2m_wifi_cb+0x20a>
    1bb8:	e72e      	b.n	1a18 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    1bba:	4b22      	ldr	r3, [pc, #136]	; (1c44 <m2m_wifi_cb+0x294>)
    1bbc:	681b      	ldr	r3, [r3, #0]
    1bbe:	2b00      	cmp	r3, #0
    1bc0:	d100      	bne.n	1bc4 <m2m_wifi_cb+0x214>
    1bc2:	e729      	b.n	1a18 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    1bc4:	a903      	add	r1, sp, #12
    1bc6:	3009      	adds	r0, #9
    1bc8:	4798      	blx	r3
    1bca:	e725      	b.n	1a18 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    1bcc:	2301      	movs	r3, #1
    1bce:	2204      	movs	r2, #4
    1bd0:	a903      	add	r1, sp, #12
    1bd2:	0028      	movs	r0, r5
    1bd4:	4c1a      	ldr	r4, [pc, #104]	; (1c40 <m2m_wifi_cb+0x290>)
    1bd6:	47a0      	blx	r4
    1bd8:	2800      	cmp	r0, #0
    1bda:	d000      	beq.n	1bde <m2m_wifi_cb+0x22e>
    1bdc:	e71c      	b.n	1a18 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    1bde:	4b19      	ldr	r3, [pc, #100]	; (1c44 <m2m_wifi_cb+0x294>)
    1be0:	681b      	ldr	r3, [r3, #0]
    1be2:	2b00      	cmp	r3, #0
    1be4:	d100      	bne.n	1be8 <m2m_wifi_cb+0x238>
    1be6:	e717      	b.n	1a18 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    1be8:	a903      	add	r1, sp, #12
    1bea:	302a      	adds	r0, #42	; 0x2a
    1bec:	4798      	blx	r3
    1bee:	e713      	b.n	1a18 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    1bf0:	2300      	movs	r3, #0
    1bf2:	2208      	movs	r2, #8
    1bf4:	a903      	add	r1, sp, #12
    1bf6:	0028      	movs	r0, r5
    1bf8:	4c11      	ldr	r4, [pc, #68]	; (1c40 <m2m_wifi_cb+0x290>)
    1bfa:	47a0      	blx	r4
    1bfc:	2800      	cmp	r0, #0
    1bfe:	d000      	beq.n	1c02 <m2m_wifi_cb+0x252>
    1c00:	e70a      	b.n	1a18 <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    1c02:	ab03      	add	r3, sp, #12
    1c04:	889a      	ldrh	r2, [r3, #4]
    1c06:	0028      	movs	r0, r5
    1c08:	3008      	adds	r0, #8
    1c0a:	2301      	movs	r3, #1
    1c0c:	9903      	ldr	r1, [sp, #12]
    1c0e:	4c0c      	ldr	r4, [pc, #48]	; (1c40 <m2m_wifi_cb+0x290>)
    1c10:	47a0      	blx	r4
    1c12:	2800      	cmp	r0, #0
    1c14:	d000      	beq.n	1c18 <m2m_wifi_cb+0x268>
    1c16:	e6ff      	b.n	1a18 <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    1c18:	4b0a      	ldr	r3, [pc, #40]	; (1c44 <m2m_wifi_cb+0x294>)
    1c1a:	681b      	ldr	r3, [r3, #0]
    1c1c:	2b00      	cmp	r3, #0
    1c1e:	d100      	bne.n	1c22 <m2m_wifi_cb+0x272>
    1c20:	e6fa      	b.n	1a18 <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    1c22:	a903      	add	r1, sp, #12
    1c24:	3020      	adds	r0, #32
    1c26:	4798      	blx	r3
    1c28:	e6f6      	b.n	1a18 <m2m_wifi_cb+0x68>
    1c2a:	46c0      	nop			; (mov r8, r8)
    1c2c:	0000ad18 	.word	0x0000ad18
    1c30:	0000a9b0 	.word	0x0000a9b0
    1c34:	000095e5 	.word	0x000095e5
    1c38:	0000ad68 	.word	0x0000ad68
    1c3c:	00009619 	.word	0x00009619
    1c40:	00001809 	.word	0x00001809
    1c44:	20000090 	.word	0x20000090
    1c48:	000010e9 	.word	0x000010e9
    1c4c:	0000ace0 	.word	0x0000ace0
    1c50:	0000ad48 	.word	0x0000ad48
    1c54:	20000095 	.word	0x20000095
    1c58:	20000094 	.word	0x20000094

00001c5c <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    1c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c5e:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    1c60:	2201      	movs	r2, #1
    1c62:	230f      	movs	r3, #15
    1c64:	446b      	add	r3, sp
    1c66:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    1c68:	2800      	cmp	r0, #0
    1c6a:	d061      	beq.n	1d30 <m2m_wifi_init+0xd4>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    1c6c:	6802      	ldr	r2, [r0, #0]
    1c6e:	4b32      	ldr	r3, [pc, #200]	; (1d38 <m2m_wifi_init+0xdc>)
    1c70:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    1c72:	2200      	movs	r2, #0
    1c74:	4b31      	ldr	r3, [pc, #196]	; (1d3c <m2m_wifi_init+0xe0>)
    1c76:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    1c78:	200f      	movs	r0, #15
    1c7a:	4468      	add	r0, sp
    1c7c:	4b30      	ldr	r3, [pc, #192]	; (1d40 <m2m_wifi_init+0xe4>)
    1c7e:	4798      	blx	r3
    1c80:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    1c82:	d002      	beq.n	1c8a <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    1c84:	0020      	movs	r0, r4
    1c86:	b00f      	add	sp, #60	; 0x3c
    1c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    1c8a:	2000      	movs	r0, #0
    1c8c:	4b2d      	ldr	r3, [pc, #180]	; (1d44 <m2m_wifi_init+0xe8>)
    1c8e:	4798      	blx	r3
    1c90:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    1c92:	d149      	bne.n	1d28 <m2m_wifi_init+0xcc>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    1c94:	492c      	ldr	r1, [pc, #176]	; (1d48 <m2m_wifi_init+0xec>)
    1c96:	2001      	movs	r0, #1
    1c98:	4b2c      	ldr	r3, [pc, #176]	; (1d4c <m2m_wifi_init+0xf0>)
    1c9a:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    1c9c:	ae04      	add	r6, sp, #16
    1c9e:	0030      	movs	r0, r6
    1ca0:	4b2b      	ldr	r3, [pc, #172]	; (1d50 <m2m_wifi_init+0xf4>)
    1ca2:	4798      	blx	r3
    1ca4:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    1ca6:	482b      	ldr	r0, [pc, #172]	; (1d54 <m2m_wifi_init+0xf8>)
    1ca8:	4d2b      	ldr	r5, [pc, #172]	; (1d58 <m2m_wifi_init+0xfc>)
    1caa:	47a8      	blx	r5
    1cac:	79b3      	ldrb	r3, [r6, #6]
    1cae:	7972      	ldrb	r2, [r6, #5]
    1cb0:	7931      	ldrb	r1, [r6, #4]
    1cb2:	8c30      	ldrh	r0, [r6, #32]
    1cb4:	9000      	str	r0, [sp, #0]
    1cb6:	4829      	ldr	r0, [pc, #164]	; (1d5c <m2m_wifi_init+0x100>)
    1cb8:	47a8      	blx	r5
    1cba:	200d      	movs	r0, #13
    1cbc:	4f28      	ldr	r7, [pc, #160]	; (1d60 <m2m_wifi_init+0x104>)
    1cbe:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    1cc0:	4824      	ldr	r0, [pc, #144]	; (1d54 <m2m_wifi_init+0xf8>)
    1cc2:	47a8      	blx	r5
    1cc4:	2226      	movs	r2, #38	; 0x26
    1cc6:	446a      	add	r2, sp
    1cc8:	211a      	movs	r1, #26
    1cca:	4469      	add	r1, sp
    1ccc:	4825      	ldr	r0, [pc, #148]	; (1d64 <m2m_wifi_init+0x108>)
    1cce:	47a8      	blx	r5
    1cd0:	200d      	movs	r0, #13
    1cd2:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    1cd4:	481f      	ldr	r0, [pc, #124]	; (1d54 <m2m_wifi_init+0xf8>)
    1cd6:	47a8      	blx	r5
    1cd8:	7a73      	ldrb	r3, [r6, #9]
    1cda:	7a32      	ldrb	r2, [r6, #8]
    1cdc:	79f1      	ldrb	r1, [r6, #7]
    1cde:	4822      	ldr	r0, [pc, #136]	; (1d68 <m2m_wifi_init+0x10c>)
    1ce0:	47a8      	blx	r5
    1ce2:	200d      	movs	r0, #13
    1ce4:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    1ce6:	481b      	ldr	r0, [pc, #108]	; (1d54 <m2m_wifi_init+0xf8>)
    1ce8:	47a8      	blx	r5
    1cea:	2302      	movs	r3, #2
    1cec:	2205      	movs	r2, #5
    1cee:	2113      	movs	r1, #19
    1cf0:	481e      	ldr	r0, [pc, #120]	; (1d6c <m2m_wifi_init+0x110>)
    1cf2:	47a8      	blx	r5
    1cf4:	200d      	movs	r0, #13
    1cf6:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    1cf8:	4816      	ldr	r0, [pc, #88]	; (1d54 <m2m_wifi_init+0xf8>)
    1cfa:	47a8      	blx	r5
    1cfc:	4a1c      	ldr	r2, [pc, #112]	; (1d70 <m2m_wifi_init+0x114>)
    1cfe:	491d      	ldr	r1, [pc, #116]	; (1d74 <m2m_wifi_init+0x118>)
    1d00:	481d      	ldr	r0, [pc, #116]	; (1d78 <m2m_wifi_init+0x11c>)
    1d02:	47a8      	blx	r5
    1d04:	200d      	movs	r0, #13
    1d06:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    1d08:	0023      	movs	r3, r4
    1d0a:	330d      	adds	r3, #13
    1d0c:	d1ba      	bne.n	1c84 <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    1d0e:	22e8      	movs	r2, #232	; 0xe8
    1d10:	32ff      	adds	r2, #255	; 0xff
    1d12:	491a      	ldr	r1, [pc, #104]	; (1d7c <m2m_wifi_init+0x120>)
    1d14:	481a      	ldr	r0, [pc, #104]	; (1d80 <m2m_wifi_init+0x124>)
    1d16:	4b10      	ldr	r3, [pc, #64]	; (1d58 <m2m_wifi_init+0xfc>)
    1d18:	4798      	blx	r3
    1d1a:	481a      	ldr	r0, [pc, #104]	; (1d84 <m2m_wifi_init+0x128>)
    1d1c:	4b1a      	ldr	r3, [pc, #104]	; (1d88 <m2m_wifi_init+0x12c>)
    1d1e:	4798      	blx	r3
    1d20:	200d      	movs	r0, #13
    1d22:	4b0f      	ldr	r3, [pc, #60]	; (1d60 <m2m_wifi_init+0x104>)
    1d24:	4798      	blx	r3
    1d26:	e7ad      	b.n	1c84 <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    1d28:	2000      	movs	r0, #0
    1d2a:	4b18      	ldr	r3, [pc, #96]	; (1d8c <m2m_wifi_init+0x130>)
    1d2c:	4798      	blx	r3
    1d2e:	e7a9      	b.n	1c84 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    1d30:	240c      	movs	r4, #12
    1d32:	4264      	negs	r4, r4
    1d34:	e7a6      	b.n	1c84 <m2m_wifi_init+0x28>
    1d36:	46c0      	nop			; (mov r8, r8)
    1d38:	20000090 	.word	0x20000090
    1d3c:	20000095 	.word	0x20000095
    1d40:	000026fd 	.word	0x000026fd
    1d44:	00001979 	.word	0x00001979
    1d48:	000019b1 	.word	0x000019b1
    1d4c:	000018f5 	.word	0x000018f5
    1d50:	00002619 	.word	0x00002619
    1d54:	0000ace0 	.word	0x0000ace0
    1d58:	000095e5 	.word	0x000095e5
    1d5c:	0000ae24 	.word	0x0000ae24
    1d60:	00009619 	.word	0x00009619
    1d64:	0000ae4c 	.word	0x0000ae4c
    1d68:	0000ae68 	.word	0x0000ae68
    1d6c:	0000ae8c 	.word	0x0000ae8c
    1d70:	0000aea4 	.word	0x0000aea4
    1d74:	0000aeb0 	.word	0x0000aeb0
    1d78:	0000aebc 	.word	0x0000aebc
    1d7c:	0000ad24 	.word	0x0000ad24
    1d80:	0000a9b0 	.word	0x0000a9b0
    1d84:	0000aed4 	.word	0x0000aed4
    1d88:	00009701 	.word	0x00009701
    1d8c:	000027d1 	.word	0x000027d1

00001d90 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    1d90:	b510      	push	{r4, lr}
	return hif_handle_isr();
    1d92:	4b01      	ldr	r3, [pc, #4]	; (1d98 <m2m_wifi_handle_events+0x8>)
    1d94:	4798      	blx	r3
}
    1d96:	bd10      	pop	{r4, pc}
    1d98:	0000142d 	.word	0x0000142d

00001d9c <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    1d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d9e:	46ce      	mov	lr, r9
    1da0:	4647      	mov	r7, r8
    1da2:	b580      	push	{r7, lr}
    1da4:	b0a3      	sub	sp, #140	; 0x8c
    1da6:	9005      	str	r0, [sp, #20]
    1da8:	000c      	movs	r4, r1
    1daa:	0015      	movs	r5, r2
    1dac:	001f      	movs	r7, r3
    1dae:	ab2a      	add	r3, sp, #168	; 0xa8
    1db0:	881b      	ldrh	r3, [r3, #0]
    1db2:	4699      	mov	r9, r3
    1db4:	ab2b      	add	r3, sp, #172	; 0xac
    1db6:	781b      	ldrb	r3, [r3, #0]
    1db8:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    1dba:	2a01      	cmp	r2, #1
    1dbc:	d003      	beq.n	1dc6 <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    1dbe:	2f00      	cmp	r7, #0
    1dc0:	d040      	beq.n	1e44 <m2m_wifi_connect_sc+0xa8>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    1dc2:	2a02      	cmp	r2, #2
    1dc4:	d04c      	beq.n	1e60 <m2m_wifi_connect_sc+0xc4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    1dc6:	1e63      	subs	r3, r4, #1
    1dc8:	2b1f      	cmp	r3, #31
    1dca:	d900      	bls.n	1dce <m2m_wifi_connect_sc+0x32>
    1dcc:	e078      	b.n	1ec0 <m2m_wifi_connect_sc+0x124>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    1dce:	464b      	mov	r3, r9
    1dd0:	3b01      	subs	r3, #1
    1dd2:	b29b      	uxth	r3, r3
    1dd4:	2b0d      	cmp	r3, #13
    1dd6:	d903      	bls.n	1de0 <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    1dd8:	464b      	mov	r3, r9
    1dda:	2bff      	cmp	r3, #255	; 0xff
    1ddc:	d000      	beq.n	1de0 <m2m_wifi_connect_sc+0x44>
    1dde:	e07d      	b.n	1edc <m2m_wifi_connect_sc+0x140>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    1de0:	ae07      	add	r6, sp, #28
    1de2:	0022      	movs	r2, r4
    1de4:	9905      	ldr	r1, [sp, #20]
    1de6:	205a      	movs	r0, #90	; 0x5a
    1de8:	ab02      	add	r3, sp, #8
    1dea:	469c      	mov	ip, r3
    1dec:	4460      	add	r0, ip
    1dee:	4b78      	ldr	r3, [pc, #480]	; (1fd0 <m2m_wifi_connect_sc+0x234>)
    1df0:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    1df2:	1934      	adds	r4, r6, r4
    1df4:	3446      	adds	r4, #70	; 0x46
    1df6:	2300      	movs	r3, #0
    1df8:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    1dfa:	3344      	adds	r3, #68	; 0x44
    1dfc:	464a      	mov	r2, r9
    1dfe:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    1e00:	4643      	mov	r3, r8
    1e02:	1e5a      	subs	r2, r3, #1
    1e04:	4193      	sbcs	r3, r2
    1e06:	2267      	movs	r2, #103	; 0x67
    1e08:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    1e0a:	2341      	movs	r3, #65	; 0x41
    1e0c:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    1e0e:	2d03      	cmp	r5, #3
    1e10:	d100      	bne.n	1e14 <m2m_wifi_connect_sc+0x78>
    1e12:	e072      	b.n	1efa <m2m_wifi_connect_sc+0x15e>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    1e14:	2d02      	cmp	r5, #2
    1e16:	d100      	bne.n	1e1a <m2m_wifi_connect_sc+0x7e>
    1e18:	e0ab      	b.n	1f72 <m2m_wifi_connect_sc+0x1d6>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    1e1a:	2d04      	cmp	r5, #4
    1e1c:	d100      	bne.n	1e20 <m2m_wifi_connect_sc+0x84>
    1e1e:	e0c3      	b.n	1fa8 <m2m_wifi_connect_sc+0x20c>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    1e20:	2d01      	cmp	r5, #1
    1e22:	d000      	beq.n	1e26 <m2m_wifi_connect_sc+0x8a>
    1e24:	e0c6      	b.n	1fb4 <m2m_wifi_connect_sc+0x218>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    1e26:	2300      	movs	r3, #0
    1e28:	9302      	str	r3, [sp, #8]
    1e2a:	9301      	str	r3, [sp, #4]
    1e2c:	9300      	str	r3, [sp, #0]
    1e2e:	336c      	adds	r3, #108	; 0x6c
    1e30:	aa07      	add	r2, sp, #28
    1e32:	2128      	movs	r1, #40	; 0x28
    1e34:	2001      	movs	r0, #1
    1e36:	4c67      	ldr	r4, [pc, #412]	; (1fd4 <m2m_wifi_connect_sc+0x238>)
    1e38:	47a0      	blx	r4

ERR1:
	return ret;
}
    1e3a:	b023      	add	sp, #140	; 0x8c
    1e3c:	bc0c      	pop	{r2, r3}
    1e3e:	4690      	mov	r8, r2
    1e40:	4699      	mov	r9, r3
    1e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    1e44:	4a64      	ldr	r2, [pc, #400]	; (1fd8 <m2m_wifi_connect_sc+0x23c>)
    1e46:	4965      	ldr	r1, [pc, #404]	; (1fdc <m2m_wifi_connect_sc+0x240>)
    1e48:	4865      	ldr	r0, [pc, #404]	; (1fe0 <m2m_wifi_connect_sc+0x244>)
    1e4a:	4b66      	ldr	r3, [pc, #408]	; (1fe4 <m2m_wifi_connect_sc+0x248>)
    1e4c:	4798      	blx	r3
    1e4e:	4866      	ldr	r0, [pc, #408]	; (1fe8 <m2m_wifi_connect_sc+0x24c>)
    1e50:	4b66      	ldr	r3, [pc, #408]	; (1fec <m2m_wifi_connect_sc+0x250>)
    1e52:	4798      	blx	r3
    1e54:	200d      	movs	r0, #13
    1e56:	4b66      	ldr	r3, [pc, #408]	; (1ff0 <m2m_wifi_connect_sc+0x254>)
    1e58:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1e5a:	200c      	movs	r0, #12
    1e5c:	4240      	negs	r0, r0
			goto ERR1;
    1e5e:	e7ec      	b.n	1e3a <m2m_wifi_connect_sc+0x9e>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    1e60:	0038      	movs	r0, r7
    1e62:	4b64      	ldr	r3, [pc, #400]	; (1ff4 <m2m_wifi_connect_sc+0x258>)
    1e64:	4798      	blx	r3
    1e66:	2840      	cmp	r0, #64	; 0x40
    1e68:	d1ad      	bne.n	1dc6 <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    1e6a:	783b      	ldrb	r3, [r7, #0]
    1e6c:	001a      	movs	r2, r3
    1e6e:	3a30      	subs	r2, #48	; 0x30
    1e70:	2a36      	cmp	r2, #54	; 0x36
    1e72:	d817      	bhi.n	1ea4 <m2m_wifi_connect_sc+0x108>
    1e74:	3a0a      	subs	r2, #10
    1e76:	2a06      	cmp	r2, #6
    1e78:	d914      	bls.n	1ea4 <m2m_wifi_connect_sc+0x108>
    1e7a:	3b47      	subs	r3, #71	; 0x47
    1e7c:	2b19      	cmp	r3, #25
    1e7e:	d911      	bls.n	1ea4 <m2m_wifi_connect_sc+0x108>
    1e80:	1c7a      	adds	r2, r7, #1
    1e82:	0038      	movs	r0, r7
    1e84:	3040      	adds	r0, #64	; 0x40
    1e86:	7813      	ldrb	r3, [r2, #0]
    1e88:	0019      	movs	r1, r3
    1e8a:	3930      	subs	r1, #48	; 0x30
    1e8c:	2936      	cmp	r1, #54	; 0x36
    1e8e:	d809      	bhi.n	1ea4 <m2m_wifi_connect_sc+0x108>
    1e90:	390a      	subs	r1, #10
    1e92:	2906      	cmp	r1, #6
    1e94:	d906      	bls.n	1ea4 <m2m_wifi_connect_sc+0x108>
    1e96:	3b47      	subs	r3, #71	; 0x47
    1e98:	2b19      	cmp	r3, #25
    1e9a:	d903      	bls.n	1ea4 <m2m_wifi_connect_sc+0x108>
    1e9c:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    1e9e:	4282      	cmp	r2, r0
    1ea0:	d1f1      	bne.n	1e86 <m2m_wifi_connect_sc+0xea>
    1ea2:	e790      	b.n	1dc6 <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    1ea4:	4a54      	ldr	r2, [pc, #336]	; (1ff8 <m2m_wifi_connect_sc+0x25c>)
    1ea6:	494d      	ldr	r1, [pc, #308]	; (1fdc <m2m_wifi_connect_sc+0x240>)
    1ea8:	484d      	ldr	r0, [pc, #308]	; (1fe0 <m2m_wifi_connect_sc+0x244>)
    1eaa:	4b4e      	ldr	r3, [pc, #312]	; (1fe4 <m2m_wifi_connect_sc+0x248>)
    1eac:	4798      	blx	r3
    1eae:	4853      	ldr	r0, [pc, #332]	; (1ffc <m2m_wifi_connect_sc+0x260>)
    1eb0:	4b4e      	ldr	r3, [pc, #312]	; (1fec <m2m_wifi_connect_sc+0x250>)
    1eb2:	4798      	blx	r3
    1eb4:	200d      	movs	r0, #13
    1eb6:	4b4e      	ldr	r3, [pc, #312]	; (1ff0 <m2m_wifi_connect_sc+0x254>)
    1eb8:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    1eba:	200c      	movs	r0, #12
    1ebc:	4240      	negs	r0, r0
					goto ERR1;
    1ebe:	e7bc      	b.n	1e3a <m2m_wifi_connect_sc+0x9e>
		M2M_ERR("SSID LEN INVALID\n");
    1ec0:	4a4f      	ldr	r2, [pc, #316]	; (2000 <STACK_SIZE>)
    1ec2:	4946      	ldr	r1, [pc, #280]	; (1fdc <m2m_wifi_connect_sc+0x240>)
    1ec4:	4846      	ldr	r0, [pc, #280]	; (1fe0 <m2m_wifi_connect_sc+0x244>)
    1ec6:	4b47      	ldr	r3, [pc, #284]	; (1fe4 <m2m_wifi_connect_sc+0x248>)
    1ec8:	4798      	blx	r3
    1eca:	484e      	ldr	r0, [pc, #312]	; (2004 <STACK_SIZE+0x4>)
    1ecc:	4b47      	ldr	r3, [pc, #284]	; (1fec <m2m_wifi_connect_sc+0x250>)
    1ece:	4798      	blx	r3
    1ed0:	200d      	movs	r0, #13
    1ed2:	4b47      	ldr	r3, [pc, #284]	; (1ff0 <m2m_wifi_connect_sc+0x254>)
    1ed4:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1ed6:	200c      	movs	r0, #12
    1ed8:	4240      	negs	r0, r0
		goto ERR1;
    1eda:	e7ae      	b.n	1e3a <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("CH INVALID\n");
    1edc:	228d      	movs	r2, #141	; 0x8d
    1ede:	0092      	lsls	r2, r2, #2
    1ee0:	493e      	ldr	r1, [pc, #248]	; (1fdc <m2m_wifi_connect_sc+0x240>)
    1ee2:	483f      	ldr	r0, [pc, #252]	; (1fe0 <m2m_wifi_connect_sc+0x244>)
    1ee4:	4b3f      	ldr	r3, [pc, #252]	; (1fe4 <m2m_wifi_connect_sc+0x248>)
    1ee6:	4798      	blx	r3
    1ee8:	4847      	ldr	r0, [pc, #284]	; (2008 <STACK_SIZE+0x8>)
    1eea:	4b40      	ldr	r3, [pc, #256]	; (1fec <m2m_wifi_connect_sc+0x250>)
    1eec:	4798      	blx	r3
    1eee:	200d      	movs	r0, #13
    1ef0:	4b3f      	ldr	r3, [pc, #252]	; (1ff0 <m2m_wifi_connect_sc+0x254>)
    1ef2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1ef4:	200c      	movs	r0, #12
    1ef6:	4240      	negs	r0, r0
			goto ERR1;
    1ef8:	e79f      	b.n	1e3a <m2m_wifi_connect_sc+0x9e>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    1efa:	783b      	ldrb	r3, [r7, #0]
    1efc:	3b01      	subs	r3, #1
    1efe:	b2db      	uxtb	r3, r3
    1f00:	aa07      	add	r2, sp, #28
    1f02:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    1f04:	2b03      	cmp	r3, #3
    1f06:	d817      	bhi.n	1f38 <m2m_wifi_connect_sc+0x19c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    1f08:	787a      	ldrb	r2, [r7, #1]
    1f0a:	1e51      	subs	r1, r2, #1
    1f0c:	ab07      	add	r3, sp, #28
    1f0e:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    1f10:	2310      	movs	r3, #16
    1f12:	0011      	movs	r1, r2
    1f14:	4399      	bics	r1, r3
    1f16:	290b      	cmp	r1, #11
    1f18:	d01d      	beq.n	1f56 <m2m_wifi_connect_sc+0x1ba>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    1f1a:	4a3c      	ldr	r2, [pc, #240]	; (200c <STACK_SIZE+0xc>)
    1f1c:	492f      	ldr	r1, [pc, #188]	; (1fdc <m2m_wifi_connect_sc+0x240>)
    1f1e:	4830      	ldr	r0, [pc, #192]	; (1fe0 <m2m_wifi_connect_sc+0x244>)
    1f20:	4c30      	ldr	r4, [pc, #192]	; (1fe4 <m2m_wifi_connect_sc+0x248>)
    1f22:	47a0      	blx	r4
    1f24:	ab07      	add	r3, sp, #28
    1f26:	7859      	ldrb	r1, [r3, #1]
    1f28:	4839      	ldr	r0, [pc, #228]	; (2010 <STACK_SIZE+0x10>)
    1f2a:	47a0      	blx	r4
    1f2c:	200d      	movs	r0, #13
    1f2e:	4b30      	ldr	r3, [pc, #192]	; (1ff0 <m2m_wifi_connect_sc+0x254>)
    1f30:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1f32:	200c      	movs	r0, #12
    1f34:	4240      	negs	r0, r0
			goto ERR1;
    1f36:	e780      	b.n	1e3a <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    1f38:	4a36      	ldr	r2, [pc, #216]	; (2014 <STACK_SIZE+0x14>)
    1f3a:	4928      	ldr	r1, [pc, #160]	; (1fdc <m2m_wifi_connect_sc+0x240>)
    1f3c:	4828      	ldr	r0, [pc, #160]	; (1fe0 <m2m_wifi_connect_sc+0x244>)
    1f3e:	4c29      	ldr	r4, [pc, #164]	; (1fe4 <m2m_wifi_connect_sc+0x248>)
    1f40:	47a0      	blx	r4
    1f42:	ab07      	add	r3, sp, #28
    1f44:	7819      	ldrb	r1, [r3, #0]
    1f46:	4834      	ldr	r0, [pc, #208]	; (2018 <STACK_SIZE+0x18>)
    1f48:	47a0      	blx	r4
    1f4a:	200d      	movs	r0, #13
    1f4c:	4b28      	ldr	r3, [pc, #160]	; (1ff0 <m2m_wifi_connect_sc+0x254>)
    1f4e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1f50:	200c      	movs	r0, #12
    1f52:	4240      	negs	r0, r0
			goto ERR1;
    1f54:	e771      	b.n	1e3a <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    1f56:	1cb9      	adds	r1, r7, #2
    1f58:	2016      	movs	r0, #22
    1f5a:	ab02      	add	r3, sp, #8
    1f5c:	469c      	mov	ip, r3
    1f5e:	4460      	add	r0, ip
    1f60:	4b1b      	ldr	r3, [pc, #108]	; (1fd0 <m2m_wifi_connect_sc+0x234>)
    1f62:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    1f64:	787b      	ldrb	r3, [r7, #1]
    1f66:	aa07      	add	r2, sp, #28
    1f68:	4694      	mov	ip, r2
    1f6a:	4463      	add	r3, ip
    1f6c:	2200      	movs	r2, #0
    1f6e:	709a      	strb	r2, [r3, #2]
    1f70:	e759      	b.n	1e26 <m2m_wifi_connect_sc+0x8a>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    1f72:	0038      	movs	r0, r7
    1f74:	4b1f      	ldr	r3, [pc, #124]	; (1ff4 <m2m_wifi_connect_sc+0x258>)
    1f76:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    1f78:	1e43      	subs	r3, r0, #1
    1f7a:	b29b      	uxth	r3, r3
    1f7c:	2b3f      	cmp	r3, #63	; 0x3f
    1f7e:	d805      	bhi.n	1f8c <m2m_wifi_connect_sc+0x1f0>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    1f80:	1c42      	adds	r2, r0, #1
    1f82:	0039      	movs	r1, r7
    1f84:	a807      	add	r0, sp, #28
    1f86:	4b12      	ldr	r3, [pc, #72]	; (1fd0 <m2m_wifi_connect_sc+0x234>)
    1f88:	4798      	blx	r3
    1f8a:	e74c      	b.n	1e26 <m2m_wifi_connect_sc+0x8a>
			M2M_ERR("Incorrect PSK key length\n");
    1f8c:	4a23      	ldr	r2, [pc, #140]	; (201c <STACK_SIZE+0x1c>)
    1f8e:	4913      	ldr	r1, [pc, #76]	; (1fdc <m2m_wifi_connect_sc+0x240>)
    1f90:	4813      	ldr	r0, [pc, #76]	; (1fe0 <m2m_wifi_connect_sc+0x244>)
    1f92:	4b14      	ldr	r3, [pc, #80]	; (1fe4 <m2m_wifi_connect_sc+0x248>)
    1f94:	4798      	blx	r3
    1f96:	4822      	ldr	r0, [pc, #136]	; (2020 <STACK_SIZE+0x20>)
    1f98:	4b14      	ldr	r3, [pc, #80]	; (1fec <m2m_wifi_connect_sc+0x250>)
    1f9a:	4798      	blx	r3
    1f9c:	200d      	movs	r0, #13
    1f9e:	4b14      	ldr	r3, [pc, #80]	; (1ff0 <m2m_wifi_connect_sc+0x254>)
    1fa0:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1fa2:	200c      	movs	r0, #12
    1fa4:	4240      	negs	r0, r0
			goto ERR1;
    1fa6:	e748      	b.n	1e3a <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    1fa8:	223e      	movs	r2, #62	; 0x3e
    1faa:	0039      	movs	r1, r7
    1fac:	a807      	add	r0, sp, #28
    1fae:	4b08      	ldr	r3, [pc, #32]	; (1fd0 <m2m_wifi_connect_sc+0x234>)
    1fb0:	4798      	blx	r3
    1fb2:	e738      	b.n	1e26 <m2m_wifi_connect_sc+0x8a>
		M2M_ERR("undefined sec type\n");
    1fb4:	4a1b      	ldr	r2, [pc, #108]	; (2024 <STACK_SIZE+0x24>)
    1fb6:	4909      	ldr	r1, [pc, #36]	; (1fdc <m2m_wifi_connect_sc+0x240>)
    1fb8:	4809      	ldr	r0, [pc, #36]	; (1fe0 <m2m_wifi_connect_sc+0x244>)
    1fba:	4b0a      	ldr	r3, [pc, #40]	; (1fe4 <m2m_wifi_connect_sc+0x248>)
    1fbc:	4798      	blx	r3
    1fbe:	481a      	ldr	r0, [pc, #104]	; (2028 <STACK_SIZE+0x28>)
    1fc0:	4b0a      	ldr	r3, [pc, #40]	; (1fec <m2m_wifi_connect_sc+0x250>)
    1fc2:	4798      	blx	r3
    1fc4:	200d      	movs	r0, #13
    1fc6:	4b0a      	ldr	r3, [pc, #40]	; (1ff0 <m2m_wifi_connect_sc+0x254>)
    1fc8:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1fca:	200c      	movs	r0, #12
    1fcc:	4240      	negs	r0, r0
		goto ERR1;
    1fce:	e734      	b.n	1e3a <m2m_wifi_connect_sc+0x9e>
    1fd0:	000010d5 	.word	0x000010d5
    1fd4:	000011fd 	.word	0x000011fd
    1fd8:	00000215 	.word	0x00000215
    1fdc:	0000ad34 	.word	0x0000ad34
    1fe0:	0000a9b0 	.word	0x0000a9b0
    1fe4:	000095e5 	.word	0x000095e5
    1fe8:	0000ad7c 	.word	0x0000ad7c
    1fec:	00009701 	.word	0x00009701
    1ff0:	00009619 	.word	0x00009619
    1ff4:	000010f9 	.word	0x000010f9
    1ff8:	00000221 	.word	0x00000221
    1ffc:	0000ad90 	.word	0x0000ad90
    2000:	0000022b 	.word	0x0000022b
    2004:	0000ad9c 	.word	0x0000ad9c
    2008:	0000adb0 	.word	0x0000adb0
    200c:	00000252 	.word	0x00000252
    2010:	0000add8 	.word	0x0000add8
    2014:	0000024b 	.word	0x0000024b
    2018:	0000adbc 	.word	0x0000adbc
    201c:	00000261 	.word	0x00000261
    2020:	0000adf4 	.word	0x0000adf4
    2024:	00000271 	.word	0x00000271
    2028:	0000ae10 	.word	0x0000ae10

0000202c <m2m_wifi_connect>:
{
    202c:	b530      	push	{r4, r5, lr}
    202e:	b083      	sub	sp, #12
    2030:	ac06      	add	r4, sp, #24
    2032:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    2034:	2500      	movs	r5, #0
    2036:	9501      	str	r5, [sp, #4]
    2038:	9400      	str	r4, [sp, #0]
    203a:	4c02      	ldr	r4, [pc, #8]	; (2044 <m2m_wifi_connect+0x18>)
    203c:	47a0      	blx	r4
}
    203e:	b003      	add	sp, #12
    2040:	bd30      	pop	{r4, r5, pc}
    2042:	46c0      	nop			; (mov r8, r8)
    2044:	00001d9d 	.word	0x00001d9d

00002048 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    2048:	2000      	movs	r0, #0
    204a:	4770      	bx	lr

0000204c <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    204c:	b5f0      	push	{r4, r5, r6, r7, lr}
    204e:	b083      	sub	sp, #12
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    2050:	2580      	movs	r5, #128	; 0x80
    2052:	006d      	lsls	r5, r5, #1
    2054:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    2056:	24a5      	movs	r4, #165	; 0xa5
    2058:	0164      	lsls	r4, r4, #5
    205a:	4f08      	ldr	r7, [pc, #32]	; (207c <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    205c:	4e08      	ldr	r6, [pc, #32]	; (2080 <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    205e:	0029      	movs	r1, r5
    2060:	0020      	movs	r0, r4
    2062:	47b8      	blx	r7
			uint32 reg = 0;
    2064:	2300      	movs	r3, #0
    2066:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    2068:	a901      	add	r1, sp, #4
    206a:	0020      	movs	r0, r4
    206c:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    206e:	2800      	cmp	r0, #0
    2070:	d1f5      	bne.n	205e <chip_apply_conf+0x12>
				if(reg == val32)
    2072:	9b01      	ldr	r3, [sp, #4]
    2074:	429d      	cmp	r5, r3
    2076:	d1f2      	bne.n	205e <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    2078:	b003      	add	sp, #12
    207a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    207c:	0000253d 	.word	0x0000253d
    2080:	00002531 	.word	0x00002531

00002084 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    2084:	b500      	push	{lr}
    2086:	b083      	sub	sp, #12
	uint32 reg = 0;
    2088:	2300      	movs	r3, #0
    208a:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    208c:	a901      	add	r1, sp, #4
    208e:	4811      	ldr	r0, [pc, #68]	; (20d4 <enable_interrupts+0x50>)
    2090:	4b11      	ldr	r3, [pc, #68]	; (20d8 <enable_interrupts+0x54>)
    2092:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    2094:	2800      	cmp	r0, #0
    2096:	d001      	beq.n	209c <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    2098:	b003      	add	sp, #12
    209a:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    209c:	2180      	movs	r1, #128	; 0x80
    209e:	0049      	lsls	r1, r1, #1
    20a0:	9b01      	ldr	r3, [sp, #4]
    20a2:	4319      	orrs	r1, r3
    20a4:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    20a6:	480b      	ldr	r0, [pc, #44]	; (20d4 <enable_interrupts+0x50>)
    20a8:	4b0c      	ldr	r3, [pc, #48]	; (20dc <enable_interrupts+0x58>)
    20aa:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    20ac:	2800      	cmp	r0, #0
    20ae:	d1f3      	bne.n	2098 <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    20b0:	a901      	add	r1, sp, #4
    20b2:	20d0      	movs	r0, #208	; 0xd0
    20b4:	0140      	lsls	r0, r0, #5
    20b6:	4b08      	ldr	r3, [pc, #32]	; (20d8 <enable_interrupts+0x54>)
    20b8:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    20ba:	2800      	cmp	r0, #0
    20bc:	d1ec      	bne.n	2098 <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    20be:	2180      	movs	r1, #128	; 0x80
    20c0:	0249      	lsls	r1, r1, #9
    20c2:	9b01      	ldr	r3, [sp, #4]
    20c4:	4319      	orrs	r1, r3
    20c6:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    20c8:	20d0      	movs	r0, #208	; 0xd0
    20ca:	0140      	lsls	r0, r0, #5
    20cc:	4b03      	ldr	r3, [pc, #12]	; (20dc <enable_interrupts+0x58>)
    20ce:	4798      	blx	r3
    20d0:	e7e2      	b.n	2098 <enable_interrupts+0x14>
    20d2:	46c0      	nop			; (mov r8, r8)
    20d4:	00001408 	.word	0x00001408
    20d8:	00002531 	.word	0x00002531
    20dc:	0000253d 	.word	0x0000253d

000020e0 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    20e0:	b510      	push	{r4, lr}
    20e2:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    20e4:	4b28      	ldr	r3, [pc, #160]	; (2188 <nmi_get_chipid+0xa8>)
    20e6:	681c      	ldr	r4, [r3, #0]
    20e8:	2c00      	cmp	r4, #0
    20ea:	d004      	beq.n	20f6 <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    20ec:	4b26      	ldr	r3, [pc, #152]	; (2188 <nmi_get_chipid+0xa8>)
    20ee:	681c      	ldr	r4, [r3, #0]
}
    20f0:	0020      	movs	r0, r4
    20f2:	b002      	add	sp, #8
    20f4:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    20f6:	0019      	movs	r1, r3
    20f8:	2080      	movs	r0, #128	; 0x80
    20fa:	0140      	lsls	r0, r0, #5
    20fc:	4b23      	ldr	r3, [pc, #140]	; (218c <nmi_get_chipid+0xac>)
    20fe:	4798      	blx	r3
    2100:	2800      	cmp	r0, #0
    2102:	d003      	beq.n	210c <nmi_get_chipid+0x2c>
			chipid = 0;
    2104:	2200      	movs	r2, #0
    2106:	4b20      	ldr	r3, [pc, #128]	; (2188 <nmi_get_chipid+0xa8>)
    2108:	601a      	str	r2, [r3, #0]
			return 0;
    210a:	e7f1      	b.n	20f0 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    210c:	a901      	add	r1, sp, #4
    210e:	4820      	ldr	r0, [pc, #128]	; (2190 <nmi_get_chipid+0xb0>)
    2110:	4b1e      	ldr	r3, [pc, #120]	; (218c <nmi_get_chipid+0xac>)
    2112:	4798      	blx	r3
    2114:	2800      	cmp	r0, #0
    2116:	d003      	beq.n	2120 <nmi_get_chipid+0x40>
			chipid = 0;
    2118:	2200      	movs	r2, #0
    211a:	4b1b      	ldr	r3, [pc, #108]	; (2188 <nmi_get_chipid+0xa8>)
    211c:	601a      	str	r2, [r3, #0]
			return 0;
    211e:	e7e7      	b.n	20f0 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    2120:	4b19      	ldr	r3, [pc, #100]	; (2188 <nmi_get_chipid+0xa8>)
    2122:	681b      	ldr	r3, [r3, #0]
    2124:	4a1b      	ldr	r2, [pc, #108]	; (2194 <nmi_get_chipid+0xb4>)
    2126:	4293      	cmp	r3, r2
    2128:	d00e      	beq.n	2148 <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    212a:	4a1b      	ldr	r2, [pc, #108]	; (2198 <nmi_get_chipid+0xb8>)
    212c:	4293      	cmp	r3, r2
    212e:	d012      	beq.n	2156 <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    2130:	4a1a      	ldr	r2, [pc, #104]	; (219c <nmi_get_chipid+0xbc>)
    2132:	4293      	cmp	r3, r2
    2134:	d01c      	beq.n	2170 <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    2136:	4914      	ldr	r1, [pc, #80]	; (2188 <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    2138:	4a19      	ldr	r2, [pc, #100]	; (21a0 <nmi_get_chipid+0xc0>)
    213a:	680b      	ldr	r3, [r1, #0]
    213c:	401a      	ands	r2, r3
		chipid |= 0x050000;
    213e:	23a0      	movs	r3, #160	; 0xa0
    2140:	02db      	lsls	r3, r3, #11
    2142:	4313      	orrs	r3, r2
    2144:	600b      	str	r3, [r1, #0]
    2146:	e7d1      	b.n	20ec <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    2148:	9b01      	ldr	r3, [sp, #4]
    214a:	2b01      	cmp	r3, #1
    214c:	d0f3      	beq.n	2136 <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    214e:	4a15      	ldr	r2, [pc, #84]	; (21a4 <nmi_get_chipid+0xc4>)
    2150:	4b0d      	ldr	r3, [pc, #52]	; (2188 <nmi_get_chipid+0xa8>)
    2152:	601a      	str	r2, [r3, #0]
    2154:	e7ef      	b.n	2136 <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    2156:	9b01      	ldr	r3, [sp, #4]
    2158:	2b03      	cmp	r3, #3
    215a:	d0ec      	beq.n	2136 <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    215c:	2b04      	cmp	r3, #4
    215e:	d003      	beq.n	2168 <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    2160:	4a11      	ldr	r2, [pc, #68]	; (21a8 <nmi_get_chipid+0xc8>)
    2162:	4b09      	ldr	r3, [pc, #36]	; (2188 <nmi_get_chipid+0xa8>)
    2164:	601a      	str	r2, [r3, #0]
    2166:	e7e6      	b.n	2136 <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    2168:	4a10      	ldr	r2, [pc, #64]	; (21ac <nmi_get_chipid+0xcc>)
    216a:	4b07      	ldr	r3, [pc, #28]	; (2188 <nmi_get_chipid+0xa8>)
    216c:	601a      	str	r2, [r3, #0]
    216e:	e7e2      	b.n	2136 <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    2170:	4905      	ldr	r1, [pc, #20]	; (2188 <nmi_get_chipid+0xa8>)
    2172:	20ec      	movs	r0, #236	; 0xec
    2174:	0380      	lsls	r0, r0, #14
    2176:	4b05      	ldr	r3, [pc, #20]	; (218c <nmi_get_chipid+0xac>)
    2178:	4798      	blx	r3
    217a:	2800      	cmp	r0, #0
    217c:	d0db      	beq.n	2136 <nmi_get_chipid+0x56>
			chipid = 0;
    217e:	2200      	movs	r2, #0
    2180:	4b01      	ldr	r3, [pc, #4]	; (2188 <nmi_get_chipid+0xa8>)
    2182:	601a      	str	r2, [r3, #0]
			return 0;
    2184:	e7b4      	b.n	20f0 <nmi_get_chipid+0x10>
    2186:	46c0      	nop			; (mov r8, r8)
    2188:	20000098 	.word	0x20000098
    218c:	00002531 	.word	0x00002531
    2190:	000013f4 	.word	0x000013f4
    2194:	001002a0 	.word	0x001002a0
    2198:	001002b0 	.word	0x001002b0
    219c:	001000f0 	.word	0x001000f0
    21a0:	fff0ffff 	.word	0xfff0ffff
    21a4:	001002a1 	.word	0x001002a1
    21a8:	001002b2 	.word	0x001002b2
    21ac:	001002b1 	.word	0x001002b1

000021b0 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    21b0:	b530      	push	{r4, r5, lr}
    21b2:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    21b4:	4c16      	ldr	r4, [pc, #88]	; (2210 <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    21b6:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    21b8:	a901      	add	r1, sp, #4
    21ba:	2010      	movs	r0, #16
    21bc:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    21be:	2800      	cmp	r0, #0
    21c0:	d11c      	bne.n	21fc <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    21c2:	9b01      	ldr	r3, [sp, #4]
    21c4:	422b      	tst	r3, r5
    21c6:	d1f7      	bne.n	21b8 <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    21c8:	a901      	add	r1, sp, #4
    21ca:	3001      	adds	r0, #1
    21cc:	4b10      	ldr	r3, [pc, #64]	; (2210 <chip_sleep+0x60>)
    21ce:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    21d0:	2800      	cmp	r0, #0
    21d2:	d113      	bne.n	21fc <chip_sleep+0x4c>
	if(reg & NBIT1)
    21d4:	9901      	ldr	r1, [sp, #4]
    21d6:	078b      	lsls	r3, r1, #30
    21d8:	d507      	bpl.n	21ea <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    21da:	2302      	movs	r3, #2
    21dc:	4399      	bics	r1, r3
    21de:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    21e0:	3001      	adds	r0, #1
    21e2:	4b0c      	ldr	r3, [pc, #48]	; (2214 <chip_sleep+0x64>)
    21e4:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    21e6:	2800      	cmp	r0, #0
    21e8:	d108      	bne.n	21fc <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    21ea:	a901      	add	r1, sp, #4
    21ec:	200b      	movs	r0, #11
    21ee:	4b08      	ldr	r3, [pc, #32]	; (2210 <chip_sleep+0x60>)
    21f0:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    21f2:	2800      	cmp	r0, #0
    21f4:	d102      	bne.n	21fc <chip_sleep+0x4c>
	if(reg & NBIT0)
    21f6:	9901      	ldr	r1, [sp, #4]
    21f8:	07cb      	lsls	r3, r1, #31
    21fa:	d401      	bmi.n	2200 <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    21fc:	b003      	add	sp, #12
    21fe:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    2200:	2301      	movs	r3, #1
    2202:	4399      	bics	r1, r3
    2204:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    2206:	300b      	adds	r0, #11
    2208:	4b02      	ldr	r3, [pc, #8]	; (2214 <chip_sleep+0x64>)
    220a:	4798      	blx	r3
    220c:	e7f6      	b.n	21fc <chip_sleep+0x4c>
    220e:	46c0      	nop			; (mov r8, r8)
    2210:	00002531 	.word	0x00002531
    2214:	0000253d 	.word	0x0000253d

00002218 <chip_wake>:
sint8 chip_wake(void)
{
    2218:	b5f0      	push	{r4, r5, r6, r7, lr}
    221a:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    221c:	2300      	movs	r3, #0
    221e:	9301      	str	r3, [sp, #4]
    2220:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    2222:	a901      	add	r1, sp, #4
    2224:	200b      	movs	r0, #11
    2226:	4b28      	ldr	r3, [pc, #160]	; (22c8 <chip_wake+0xb0>)
    2228:	4798      	blx	r3
    222a:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    222c:	d130      	bne.n	2290 <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    222e:	9901      	ldr	r1, [sp, #4]
    2230:	07cb      	lsls	r3, r1, #31
    2232:	d406      	bmi.n	2242 <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    2234:	2301      	movs	r3, #1
    2236:	4319      	orrs	r1, r3
    2238:	200b      	movs	r0, #11
    223a:	4b24      	ldr	r3, [pc, #144]	; (22cc <chip_wake+0xb4>)
    223c:	4798      	blx	r3
    223e:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2240:	d126      	bne.n	2290 <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    2242:	a901      	add	r1, sp, #4
    2244:	2001      	movs	r0, #1
    2246:	4b20      	ldr	r3, [pc, #128]	; (22c8 <chip_wake+0xb0>)
    2248:	4798      	blx	r3
    224a:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    224c:	d120      	bne.n	2290 <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    224e:	9901      	ldr	r1, [sp, #4]
    2250:	078b      	lsls	r3, r1, #30
    2252:	d520      	bpl.n	2296 <chip_wake+0x7e>
{
    2254:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    2256:	4f1c      	ldr	r7, [pc, #112]	; (22c8 <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    2258:	4e1d      	ldr	r6, [pc, #116]	; (22d0 <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    225a:	4669      	mov	r1, sp
    225c:	200f      	movs	r0, #15
    225e:	47b8      	blx	r7
    2260:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    2262:	d120      	bne.n	22a6 <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    2264:	9b00      	ldr	r3, [sp, #0]
    2266:	075b      	lsls	r3, r3, #29
    2268:	d42b      	bmi.n	22c2 <chip_wake+0xaa>
		nm_bsp_sleep(2);
    226a:	2002      	movs	r0, #2
    226c:	47b0      	blx	r6
    226e:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    2270:	2d00      	cmp	r5, #0
    2272:	d1f2      	bne.n	225a <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    2274:	22af      	movs	r2, #175	; 0xaf
    2276:	0052      	lsls	r2, r2, #1
    2278:	4916      	ldr	r1, [pc, #88]	; (22d4 <chip_wake+0xbc>)
    227a:	4817      	ldr	r0, [pc, #92]	; (22d8 <chip_wake+0xc0>)
    227c:	4b17      	ldr	r3, [pc, #92]	; (22dc <chip_wake+0xc4>)
    227e:	4798      	blx	r3
    2280:	4817      	ldr	r0, [pc, #92]	; (22e0 <chip_wake+0xc8>)
    2282:	4b18      	ldr	r3, [pc, #96]	; (22e4 <chip_wake+0xcc>)
    2284:	4798      	blx	r3
    2286:	200d      	movs	r0, #13
    2288:	4b17      	ldr	r3, [pc, #92]	; (22e8 <chip_wake+0xd0>)
    228a:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    228c:	2404      	movs	r4, #4
    228e:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    2290:	0020      	movs	r0, r4
    2292:	b003      	add	sp, #12
    2294:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    2296:	2302      	movs	r3, #2
    2298:	4319      	orrs	r1, r3
    229a:	2001      	movs	r0, #1
    229c:	4b0b      	ldr	r3, [pc, #44]	; (22cc <chip_wake+0xb4>)
    229e:	4798      	blx	r3
    22a0:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    22a2:	d0d7      	beq.n	2254 <chip_wake+0x3c>
    22a4:	e7f4      	b.n	2290 <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    22a6:	22aa      	movs	r2, #170	; 0xaa
    22a8:	0052      	lsls	r2, r2, #1
    22aa:	490a      	ldr	r1, [pc, #40]	; (22d4 <chip_wake+0xbc>)
    22ac:	480a      	ldr	r0, [pc, #40]	; (22d8 <chip_wake+0xc0>)
    22ae:	4d0b      	ldr	r5, [pc, #44]	; (22dc <chip_wake+0xc4>)
    22b0:	47a8      	blx	r5
    22b2:	9a00      	ldr	r2, [sp, #0]
    22b4:	0021      	movs	r1, r4
    22b6:	480d      	ldr	r0, [pc, #52]	; (22ec <chip_wake+0xd4>)
    22b8:	47a8      	blx	r5
    22ba:	200d      	movs	r0, #13
    22bc:	4b0a      	ldr	r3, [pc, #40]	; (22e8 <chip_wake+0xd0>)
    22be:	4798      	blx	r3
			goto _WAKE_EXIT;
    22c0:	e7e6      	b.n	2290 <chip_wake+0x78>
	nm_bus_reset();
    22c2:	4b0b      	ldr	r3, [pc, #44]	; (22f0 <chip_wake+0xd8>)
    22c4:	4798      	blx	r3
    22c6:	e7e3      	b.n	2290 <chip_wake+0x78>
    22c8:	00002531 	.word	0x00002531
    22cc:	0000253d 	.word	0x0000253d
    22d0:	00000ce5 	.word	0x00000ce5
    22d4:	0000aef0 	.word	0x0000aef0
    22d8:	0000a9b0 	.word	0x0000a9b0
    22dc:	000095e5 	.word	0x000095e5
    22e0:	0000af38 	.word	0x0000af38
    22e4:	00009701 	.word	0x00009701
    22e8:	00009619 	.word	0x00009619
    22ec:	0000af20 	.word	0x0000af20
    22f0:	00002519 	.word	0x00002519

000022f4 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    22f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22f6:	0007      	movs	r7, r0
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    22f8:	4d2d      	ldr	r5, [pc, #180]	; (23b0 <wait_for_bootrom+0xbc>)
    22fa:	4c2e      	ldr	r4, [pc, #184]	; (23b4 <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    22fc:	4e2e      	ldr	r6, [pc, #184]	; (23b8 <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    22fe:	0028      	movs	r0, r5
    2300:	47a0      	blx	r4
		if (reg & 0x80000000) {
    2302:	2800      	cmp	r0, #0
    2304:	db02      	blt.n	230c <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    2306:	2001      	movs	r0, #1
    2308:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    230a:	e7f8      	b.n	22fe <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    230c:	482b      	ldr	r0, [pc, #172]	; (23bc <wait_for_bootrom+0xc8>)
    230e:	4b29      	ldr	r3, [pc, #164]	; (23b4 <wait_for_bootrom+0xc0>)
    2310:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    2312:	07c3      	lsls	r3, r0, #31
    2314:	d409      	bmi.n	232a <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    2316:	4e28      	ldr	r6, [pc, #160]	; (23b8 <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
    2318:	4c29      	ldr	r4, [pc, #164]	; (23c0 <wait_for_bootrom+0xcc>)
    231a:	4d26      	ldr	r5, [pc, #152]	; (23b4 <wait_for_bootrom+0xc0>)
			nm_bsp_sleep(1);
    231c:	2001      	movs	r0, #1
    231e:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    2320:	0020      	movs	r0, r4
    2322:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    2324:	4b27      	ldr	r3, [pc, #156]	; (23c4 <wait_for_bootrom+0xd0>)
    2326:	4298      	cmp	r0, r3
    2328:	d1f8      	bne.n	231c <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    232a:	2f02      	cmp	r7, #2
    232c:	d021      	beq.n	2372 <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    232e:	2f03      	cmp	r7, #3
    2330:	d029      	beq.n	2386 <wait_for_bootrom+0x92>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    2332:	2f04      	cmp	r7, #4
    2334:	d030      	beq.n	2398 <wait_for_bootrom+0xa4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    2336:	4924      	ldr	r1, [pc, #144]	; (23c8 <wait_for_bootrom+0xd4>)
    2338:	4824      	ldr	r0, [pc, #144]	; (23cc <wait_for_bootrom+0xd8>)
    233a:	4b25      	ldr	r3, [pc, #148]	; (23d0 <wait_for_bootrom+0xdc>)
    233c:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    233e:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    2340:	4b24      	ldr	r3, [pc, #144]	; (23d4 <wait_for_bootrom+0xe0>)
    2342:	4798      	blx	r3
    2344:	0500      	lsls	r0, r0, #20
    2346:	0d00      	lsrs	r0, r0, #20
    2348:	4b23      	ldr	r3, [pc, #140]	; (23d8 <wait_for_bootrom+0xe4>)
    234a:	4298      	cmp	r0, r3
    234c:	d82a      	bhi.n	23a4 <wait_for_bootrom+0xb0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    234e:	0020      	movs	r0, r4
    2350:	4b22      	ldr	r3, [pc, #136]	; (23dc <wait_for_bootrom+0xe8>)
    2352:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    2354:	4822      	ldr	r0, [pc, #136]	; (23e0 <wait_for_bootrom+0xec>)
    2356:	4c23      	ldr	r4, [pc, #140]	; (23e4 <wait_for_bootrom+0xf0>)
    2358:	47a0      	blx	r4
    235a:	491b      	ldr	r1, [pc, #108]	; (23c8 <wait_for_bootrom+0xd4>)
    235c:	4822      	ldr	r0, [pc, #136]	; (23e8 <wait_for_bootrom+0xf4>)
    235e:	47a0      	blx	r4
    2360:	200d      	movs	r0, #13
    2362:	4b22      	ldr	r3, [pc, #136]	; (23ec <wait_for_bootrom+0xf8>)
    2364:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    2366:	4922      	ldr	r1, [pc, #136]	; (23f0 <wait_for_bootrom+0xfc>)
    2368:	4815      	ldr	r0, [pc, #84]	; (23c0 <wait_for_bootrom+0xcc>)
    236a:	4b19      	ldr	r3, [pc, #100]	; (23d0 <wait_for_bootrom+0xdc>)
    236c:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    236e:	2000      	movs	r0, #0
    2370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    2372:	4920      	ldr	r1, [pc, #128]	; (23f4 <wait_for_bootrom+0x100>)
    2374:	4820      	ldr	r0, [pc, #128]	; (23f8 <wait_for_bootrom+0x104>)
    2376:	4c16      	ldr	r4, [pc, #88]	; (23d0 <wait_for_bootrom+0xdc>)
    2378:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    237a:	2180      	movs	r1, #128	; 0x80
    237c:	0349      	lsls	r1, r1, #13
    237e:	4813      	ldr	r0, [pc, #76]	; (23cc <wait_for_bootrom+0xd8>)
    2380:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    2382:	2400      	movs	r4, #0
    2384:	e7dc      	b.n	2340 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    2386:	491b      	ldr	r1, [pc, #108]	; (23f4 <wait_for_bootrom+0x100>)
    2388:	481b      	ldr	r0, [pc, #108]	; (23f8 <wait_for_bootrom+0x104>)
    238a:	4c11      	ldr	r4, [pc, #68]	; (23d0 <wait_for_bootrom+0xdc>)
    238c:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    238e:	2100      	movs	r1, #0
    2390:	480e      	ldr	r0, [pc, #56]	; (23cc <wait_for_bootrom+0xd8>)
    2392:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    2394:	2400      	movs	r4, #0
    2396:	e7d3      	b.n	2340 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    2398:	490b      	ldr	r1, [pc, #44]	; (23c8 <wait_for_bootrom+0xd4>)
    239a:	480c      	ldr	r0, [pc, #48]	; (23cc <wait_for_bootrom+0xd8>)
    239c:	4b0c      	ldr	r3, [pc, #48]	; (23d0 <wait_for_bootrom+0xdc>)
    239e:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    23a0:	2480      	movs	r4, #128	; 0x80
    23a2:	e7cd      	b.n	2340 <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    23a4:	2002      	movs	r0, #2
    23a6:	4320      	orrs	r0, r4
    23a8:	4b0c      	ldr	r3, [pc, #48]	; (23dc <wait_for_bootrom+0xe8>)
    23aa:	4798      	blx	r3
    23ac:	e7d2      	b.n	2354 <wait_for_bootrom+0x60>
    23ae:	46c0      	nop			; (mov r8, r8)
    23b0:	00001014 	.word	0x00001014
    23b4:	00002525 	.word	0x00002525
    23b8:	00000ce5 	.word	0x00000ce5
    23bc:	000207bc 	.word	0x000207bc
    23c0:	000c000c 	.word	0x000c000c
    23c4:	10add09e 	.word	0x10add09e
    23c8:	13521352 	.word	0x13521352
    23cc:	0000108c 	.word	0x0000108c
    23d0:	0000253d 	.word	0x0000253d
    23d4:	000020e1 	.word	0x000020e1
    23d8:	0000039f 	.word	0x0000039f
    23dc:	0000204d 	.word	0x0000204d
    23e0:	0000ace0 	.word	0x0000ace0
    23e4:	000095e5 	.word	0x000095e5
    23e8:	0000af54 	.word	0x0000af54
    23ec:	00009619 	.word	0x00009619
    23f0:	ef522f61 	.word	0xef522f61
    23f4:	3c1cd57d 	.word	0x3c1cd57d
    23f8:	000207ac 	.word	0x000207ac

000023fc <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    23fc:	b570      	push	{r4, r5, r6, lr}
    23fe:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    2400:	4b15      	ldr	r3, [pc, #84]	; (2458 <wait_for_firmware_start+0x5c>)
    2402:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    2404:	4b15      	ldr	r3, [pc, #84]	; (245c <wait_for_firmware_start+0x60>)
    2406:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    2408:	3802      	subs	r0, #2
    240a:	2801      	cmp	r0, #1
    240c:	d911      	bls.n	2432 <wait_for_firmware_start+0x36>
{
    240e:	2401      	movs	r4, #1
    2410:	4264      	negs	r4, r4
    2412:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    2414:	4e12      	ldr	r6, [pc, #72]	; (2460 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    2416:	4d13      	ldr	r5, [pc, #76]	; (2464 <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    2418:	9b00      	ldr	r3, [sp, #0]
    241a:	4298      	cmp	r0, r3
    241c:	d00e      	beq.n	243c <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    241e:	2002      	movs	r0, #2
    2420:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    2422:	9801      	ldr	r0, [sp, #4]
    2424:	47a8      	blx	r5
    2426:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    2428:	2c00      	cmp	r4, #0
    242a:	d1f5      	bne.n	2418 <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    242c:	2005      	movs	r0, #5
    242e:	4240      	negs	r0, r0
    2430:	e009      	b.n	2446 <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    2432:	4b0d      	ldr	r3, [pc, #52]	; (2468 <wait_for_firmware_start+0x6c>)
    2434:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    2436:	4b0d      	ldr	r3, [pc, #52]	; (246c <wait_for_firmware_start+0x70>)
    2438:	9300      	str	r3, [sp, #0]
    243a:	e7e8      	b.n	240e <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    243c:	9a00      	ldr	r2, [sp, #0]
    243e:	4b07      	ldr	r3, [pc, #28]	; (245c <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    2440:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    2442:	429a      	cmp	r2, r3
    2444:	d001      	beq.n	244a <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    2446:	b002      	add	sp, #8
    2448:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    244a:	2100      	movs	r1, #0
    244c:	4802      	ldr	r0, [pc, #8]	; (2458 <wait_for_firmware_start+0x5c>)
    244e:	4b08      	ldr	r3, [pc, #32]	; (2470 <wait_for_firmware_start+0x74>)
    2450:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    2452:	2000      	movs	r0, #0
    2454:	e7f7      	b.n	2446 <wait_for_firmware_start+0x4a>
    2456:	46c0      	nop			; (mov r8, r8)
    2458:	0000108c 	.word	0x0000108c
    245c:	02532636 	.word	0x02532636
    2460:	00000ce5 	.word	0x00000ce5
    2464:	00002525 	.word	0x00002525
    2468:	000207ac 	.word	0x000207ac
    246c:	d75dc1c3 	.word	0xd75dc1c3
    2470:	0000253d 	.word	0x0000253d

00002474 <chip_deinit>:

sint8 chip_deinit(void)
{
    2474:	b510      	push	{r4, lr}
    2476:	b082      	sub	sp, #8
	uint32 reg = 0;
    2478:	2300      	movs	r3, #0
    247a:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    247c:	a901      	add	r1, sp, #4
    247e:	20a0      	movs	r0, #160	; 0xa0
    2480:	0140      	lsls	r0, r0, #5
    2482:	4b14      	ldr	r3, [pc, #80]	; (24d4 <chip_deinit+0x60>)
    2484:	4798      	blx	r3
    2486:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    2488:	d115      	bne.n	24b6 <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    248a:	4913      	ldr	r1, [pc, #76]	; (24d8 <chip_deinit+0x64>)
    248c:	9b01      	ldr	r3, [sp, #4]
    248e:	4019      	ands	r1, r3
    2490:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    2492:	20a0      	movs	r0, #160	; 0xa0
    2494:	0140      	lsls	r0, r0, #5
    2496:	4b11      	ldr	r3, [pc, #68]	; (24dc <chip_deinit+0x68>)
    2498:	4798      	blx	r3
    249a:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    249c:	d016      	beq.n	24cc <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    249e:	4a10      	ldr	r2, [pc, #64]	; (24e0 <chip_deinit+0x6c>)
    24a0:	4910      	ldr	r1, [pc, #64]	; (24e4 <chip_deinit+0x70>)
    24a2:	4811      	ldr	r0, [pc, #68]	; (24e8 <chip_deinit+0x74>)
    24a4:	4b11      	ldr	r3, [pc, #68]	; (24ec <chip_deinit+0x78>)
    24a6:	4798      	blx	r3
    24a8:	4811      	ldr	r0, [pc, #68]	; (24f0 <chip_deinit+0x7c>)
    24aa:	4b12      	ldr	r3, [pc, #72]	; (24f4 <chip_deinit+0x80>)
    24ac:	4798      	blx	r3
    24ae:	200d      	movs	r0, #13
    24b0:	4b11      	ldr	r3, [pc, #68]	; (24f8 <chip_deinit+0x84>)
    24b2:	4798      	blx	r3
		goto ERR1;
    24b4:	e00a      	b.n	24cc <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    24b6:	4a11      	ldr	r2, [pc, #68]	; (24fc <chip_deinit+0x88>)
    24b8:	490a      	ldr	r1, [pc, #40]	; (24e4 <chip_deinit+0x70>)
    24ba:	480b      	ldr	r0, [pc, #44]	; (24e8 <chip_deinit+0x74>)
    24bc:	4b0b      	ldr	r3, [pc, #44]	; (24ec <chip_deinit+0x78>)
    24be:	4798      	blx	r3
    24c0:	480b      	ldr	r0, [pc, #44]	; (24f0 <chip_deinit+0x7c>)
    24c2:	4b0c      	ldr	r3, [pc, #48]	; (24f4 <chip_deinit+0x80>)
    24c4:	4798      	blx	r3
    24c6:	200d      	movs	r0, #13
    24c8:	4b0b      	ldr	r3, [pc, #44]	; (24f8 <chip_deinit+0x84>)
    24ca:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    24cc:	0020      	movs	r0, r4
    24ce:	b002      	add	sp, #8
    24d0:	bd10      	pop	{r4, pc}
    24d2:	46c0      	nop			; (mov r8, r8)
    24d4:	00002531 	.word	0x00002531
    24d8:	fffffbff 	.word	0xfffffbff
    24dc:	0000253d 	.word	0x0000253d
    24e0:	0000020b 	.word	0x0000020b
    24e4:	0000aefc 	.word	0x0000aefc
    24e8:	0000a9b0 	.word	0x0000a9b0
    24ec:	000095e5 	.word	0x000095e5
    24f0:	0000af08 	.word	0x0000af08
    24f4:	00009701 	.word	0x00009701
    24f8:	00009619 	.word	0x00009619
    24fc:	00000205 	.word	0x00000205

00002500 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    2500:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    2502:	4b01      	ldr	r3, [pc, #4]	; (2508 <nm_bus_iface_init+0x8>)
    2504:	4798      	blx	r3
	return ret;
}
    2506:	bd10      	pop	{r4, pc}
    2508:	00000e19 	.word	0x00000e19

0000250c <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    250c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    250e:	4b01      	ldr	r3, [pc, #4]	; (2514 <nm_bus_iface_deinit+0x8>)
    2510:	4798      	blx	r3

	return ret;
}
    2512:	bd10      	pop	{r4, pc}
    2514:	00001069 	.word	0x00001069

00002518 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    2518:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    251a:	4b01      	ldr	r3, [pc, #4]	; (2520 <nm_bus_reset+0x8>)
    251c:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    251e:	bd10      	pop	{r4, pc}
    2520:	00002ec9 	.word	0x00002ec9

00002524 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    2524:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    2526:	4b01      	ldr	r3, [pc, #4]	; (252c <nm_read_reg+0x8>)
    2528:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    252a:	bd10      	pop	{r4, pc}
    252c:	00002f01 	.word	0x00002f01

00002530 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    2530:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    2532:	4b01      	ldr	r3, [pc, #4]	; (2538 <nm_read_reg_with_ret+0x8>)
    2534:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    2536:	bd10      	pop	{r4, pc}
    2538:	00002f15 	.word	0x00002f15

0000253c <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    253c:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    253e:	4b01      	ldr	r3, [pc, #4]	; (2544 <nm_write_reg+0x8>)
    2540:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    2542:	bd10      	pop	{r4, pc}
    2544:	00002f2d 	.word	0x00002f2d

00002548 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    2548:	b5f0      	push	{r4, r5, r6, r7, lr}
    254a:	46d6      	mov	lr, sl
    254c:	464f      	mov	r7, r9
    254e:	4646      	mov	r6, r8
    2550:	b5c0      	push	{r6, r7, lr}
    2552:	b082      	sub	sp, #8
    2554:	4680      	mov	r8, r0
    2556:	4689      	mov	r9, r1
    2558:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    255a:	4b13      	ldr	r3, [pc, #76]	; (25a8 <nm_read_block+0x60>)
    255c:	881f      	ldrh	r7, [r3, #0]
    255e:	3f08      	subs	r7, #8
    2560:	b2bb      	uxth	r3, r7
    2562:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2564:	001e      	movs	r6, r3
    2566:	0004      	movs	r4, r0
    2568:	429a      	cmp	r2, r3
    256a:	d91a      	bls.n	25a2 <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    256c:	4b0f      	ldr	r3, [pc, #60]	; (25ac <nm_read_block+0x64>)
    256e:	469a      	mov	sl, r3
    2570:	1a37      	subs	r7, r6, r0
    2572:	4643      	mov	r3, r8
    2574:	1ae1      	subs	r1, r4, r3
    2576:	4449      	add	r1, r9
    2578:	9a01      	ldr	r2, [sp, #4]
    257a:	0020      	movs	r0, r4
    257c:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    257e:	2800      	cmp	r0, #0
    2580:	d109      	bne.n	2596 <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    2582:	1bad      	subs	r5, r5, r6
    2584:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    2586:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    2588:	42b5      	cmp	r5, r6
    258a:	d8f2      	bhi.n	2572 <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    258c:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    258e:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2590:	0020      	movs	r0, r4
    2592:	4b06      	ldr	r3, [pc, #24]	; (25ac <nm_read_block+0x64>)
    2594:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    2596:	b002      	add	sp, #8
    2598:	bc1c      	pop	{r2, r3, r4}
    259a:	4690      	mov	r8, r2
    259c:	4699      	mov	r9, r3
    259e:	46a2      	mov	sl, r4
    25a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    25a2:	2100      	movs	r1, #0
    25a4:	e7f2      	b.n	258c <nm_read_block+0x44>
    25a6:	46c0      	nop			; (mov r8, r8)
    25a8:	20000008 	.word	0x20000008
    25ac:	00003071 	.word	0x00003071

000025b0 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    25b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    25b2:	46d6      	mov	lr, sl
    25b4:	464f      	mov	r7, r9
    25b6:	4646      	mov	r6, r8
    25b8:	b5c0      	push	{r6, r7, lr}
    25ba:	b082      	sub	sp, #8
    25bc:	4680      	mov	r8, r0
    25be:	4689      	mov	r9, r1
    25c0:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    25c2:	4b13      	ldr	r3, [pc, #76]	; (2610 <nm_write_block+0x60>)
    25c4:	881f      	ldrh	r7, [r3, #0]
    25c6:	3f08      	subs	r7, #8
    25c8:	b2bb      	uxth	r3, r7
    25ca:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    25cc:	001e      	movs	r6, r3
    25ce:	0004      	movs	r4, r0
    25d0:	429a      	cmp	r2, r3
    25d2:	d91a      	bls.n	260a <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    25d4:	4b0f      	ldr	r3, [pc, #60]	; (2614 <nm_write_block+0x64>)
    25d6:	469a      	mov	sl, r3
    25d8:	1a37      	subs	r7, r6, r0
    25da:	4643      	mov	r3, r8
    25dc:	1ae1      	subs	r1, r4, r3
    25de:	4449      	add	r1, r9
    25e0:	9a01      	ldr	r2, [sp, #4]
    25e2:	0020      	movs	r0, r4
    25e4:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    25e6:	2800      	cmp	r0, #0
    25e8:	d109      	bne.n	25fe <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    25ea:	1bad      	subs	r5, r5, r6
    25ec:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    25ee:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    25f0:	42b5      	cmp	r5, r6
    25f2:	d8f2      	bhi.n	25da <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    25f4:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    25f6:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    25f8:	0020      	movs	r0, r4
    25fa:	4b06      	ldr	r3, [pc, #24]	; (2614 <nm_write_block+0x64>)
    25fc:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    25fe:	b002      	add	sp, #8
    2600:	bc1c      	pop	{r2, r3, r4}
    2602:	4690      	mov	r8, r2
    2604:	4699      	mov	r9, r3
    2606:	46a2      	mov	sl, r4
    2608:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    260a:	2100      	movs	r1, #0
    260c:	e7f2      	b.n	25f4 <nm_write_block+0x44>
    260e:	46c0      	nop			; (mov r8, r8)
    2610:	20000008 	.word	0x20000008
    2614:	000031cd 	.word	0x000031cd

00002618 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    2618:	b570      	push	{r4, r5, r6, lr}
    261a:	b084      	sub	sp, #16
    261c:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    261e:	2300      	movs	r3, #0
    2620:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    2622:	2208      	movs	r2, #8
    2624:	2100      	movs	r1, #0
    2626:	a801      	add	r0, sp, #4
    2628:	4b2d      	ldr	r3, [pc, #180]	; (26e0 <nm_get_firmware_full_info+0xc8>)
    262a:	4798      	blx	r3
	if (pstrRev != NULL)
    262c:	2c00      	cmp	r4, #0
    262e:	d044      	beq.n	26ba <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    2630:	2228      	movs	r2, #40	; 0x28
    2632:	2100      	movs	r1, #0
    2634:	0020      	movs	r0, r4
    2636:	4b2b      	ldr	r3, [pc, #172]	; (26e4 <nm_get_firmware_full_info+0xcc>)
    2638:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    263a:	a903      	add	r1, sp, #12
    263c:	482a      	ldr	r0, [pc, #168]	; (26e8 <nm_get_firmware_full_info+0xd0>)
    263e:	4b2b      	ldr	r3, [pc, #172]	; (26ec <nm_get_firmware_full_info+0xd4>)
    2640:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    2642:	2800      	cmp	r0, #0
    2644:	d13a      	bne.n	26bc <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    2646:	9b03      	ldr	r3, [sp, #12]
    2648:	2b00      	cmp	r3, #0
    264a:	d039      	beq.n	26c0 <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    264c:	20c0      	movs	r0, #192	; 0xc0
    264e:	0280      	lsls	r0, r0, #10
    2650:	4318      	orrs	r0, r3
    2652:	2208      	movs	r2, #8
    2654:	a901      	add	r1, sp, #4
    2656:	4b26      	ldr	r3, [pc, #152]	; (26f0 <nm_get_firmware_full_info+0xd8>)
    2658:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    265a:	2800      	cmp	r0, #0
    265c:	d12e      	bne.n	26bc <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    265e:	9b02      	ldr	r3, [sp, #8]
    2660:	0418      	lsls	r0, r3, #16
    2662:	0c00      	lsrs	r0, r0, #16
    2664:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    2666:	d02e      	beq.n	26c6 <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    2668:	23c0      	movs	r3, #192	; 0xc0
    266a:	029b      	lsls	r3, r3, #10
    266c:	4318      	orrs	r0, r3
    266e:	2228      	movs	r2, #40	; 0x28
    2670:	0021      	movs	r1, r4
    2672:	4b1f      	ldr	r3, [pc, #124]	; (26f0 <nm_get_firmware_full_info+0xd8>)
    2674:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    2676:	2800      	cmp	r0, #0
    2678:	d120      	bne.n	26bc <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    267a:	7921      	ldrb	r1, [r4, #4]
    267c:	0209      	lsls	r1, r1, #8
    267e:	79a2      	ldrb	r2, [r4, #6]
    2680:	230f      	movs	r3, #15
    2682:	401a      	ands	r2, r3
    2684:	430a      	orrs	r2, r1
    2686:	7961      	ldrb	r1, [r4, #5]
    2688:	0109      	lsls	r1, r1, #4
    268a:	25ff      	movs	r5, #255	; 0xff
    268c:	4029      	ands	r1, r5
    268e:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    2690:	79e1      	ldrb	r1, [r4, #7]
    2692:	0209      	lsls	r1, r1, #8
    2694:	7a66      	ldrb	r6, [r4, #9]
    2696:	4033      	ands	r3, r6
    2698:	430b      	orrs	r3, r1
    269a:	7a21      	ldrb	r1, [r4, #8]
    269c:	0109      	lsls	r1, r1, #4
    269e:	400d      	ands	r5, r1
    26a0:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    26a2:	2a00      	cmp	r2, #0
    26a4:	d012      	beq.n	26cc <nm_get_firmware_full_info+0xb4>
    26a6:	2b00      	cmp	r3, #0
    26a8:	d013      	beq.n	26d2 <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    26aa:	4912      	ldr	r1, [pc, #72]	; (26f4 <nm_get_firmware_full_info+0xdc>)
    26ac:	428b      	cmp	r3, r1
    26ae:	d813      	bhi.n	26d8 <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    26b0:	4b11      	ldr	r3, [pc, #68]	; (26f8 <nm_get_firmware_full_info+0xe0>)
    26b2:	429a      	cmp	r2, r3
    26b4:	d802      	bhi.n	26bc <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    26b6:	380d      	subs	r0, #13
    26b8:	e000      	b.n	26bc <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    26ba:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    26bc:	b004      	add	sp, #16
    26be:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    26c0:	200c      	movs	r0, #12
    26c2:	4240      	negs	r0, r0
    26c4:	e7fa      	b.n	26bc <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    26c6:	200c      	movs	r0, #12
    26c8:	4240      	negs	r0, r0
    26ca:	e7f7      	b.n	26bc <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    26cc:	200c      	movs	r0, #12
    26ce:	4240      	negs	r0, r0
    26d0:	e7f4      	b.n	26bc <nm_get_firmware_full_info+0xa4>
    26d2:	200c      	movs	r0, #12
    26d4:	4240      	negs	r0, r0
    26d6:	e7f1      	b.n	26bc <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    26d8:	200d      	movs	r0, #13
    26da:	4240      	negs	r0, r0
    26dc:	e7ee      	b.n	26bc <nm_get_firmware_full_info+0xa4>
    26de:	46c0      	nop			; (mov r8, r8)
    26e0:	00009483 	.word	0x00009483
    26e4:	000010e9 	.word	0x000010e9
    26e8:	000c0008 	.word	0x000c0008
    26ec:	00002531 	.word	0x00002531
    26f0:	00002549 	.word	0x00002549
    26f4:	00001352 	.word	0x00001352
    26f8:	00001351 	.word	0x00001351

000026fc <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    26fc:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    26fe:	2800      	cmp	r0, #0
    2700:	d037      	beq.n	2772 <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
    2702:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    2704:	1e6b      	subs	r3, r5, #1
    2706:	2b03      	cmp	r3, #3
    2708:	d900      	bls.n	270c <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    270a:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    270c:	2000      	movs	r0, #0
    270e:	4b20      	ldr	r3, [pc, #128]	; (2790 <nm_drv_init+0x94>)
    2710:	4798      	blx	r3
    2712:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2714:	d12f      	bne.n	2776 <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    2716:	481f      	ldr	r0, [pc, #124]	; (2794 <nm_drv_init+0x98>)
    2718:	4c1f      	ldr	r4, [pc, #124]	; (2798 <nm_drv_init+0x9c>)
    271a:	47a0      	blx	r4
    271c:	4b1f      	ldr	r3, [pc, #124]	; (279c <nm_drv_init+0xa0>)
    271e:	4798      	blx	r3
    2720:	0001      	movs	r1, r0
    2722:	481f      	ldr	r0, [pc, #124]	; (27a0 <nm_drv_init+0xa4>)
    2724:	47a0      	blx	r4
    2726:	200d      	movs	r0, #13
    2728:	4b1e      	ldr	r3, [pc, #120]	; (27a4 <nm_drv_init+0xa8>)
    272a:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    272c:	4b1e      	ldr	r3, [pc, #120]	; (27a8 <nm_drv_init+0xac>)
    272e:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    2730:	0028      	movs	r0, r5
    2732:	4b1e      	ldr	r3, [pc, #120]	; (27ac <nm_drv_init+0xb0>)
    2734:	4798      	blx	r3
    2736:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2738:	d117      	bne.n	276a <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    273a:	0028      	movs	r0, r5
    273c:	4b1c      	ldr	r3, [pc, #112]	; (27b0 <nm_drv_init+0xb4>)
    273e:	4798      	blx	r3
    2740:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2742:	d112      	bne.n	276a <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    2744:	3d02      	subs	r5, #2
    2746:	2d01      	cmp	r5, #1
    2748:	d911      	bls.n	276e <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    274a:	4b1a      	ldr	r3, [pc, #104]	; (27b4 <nm_drv_init+0xb8>)
    274c:	4798      	blx	r3
    274e:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2750:	d00d      	beq.n	276e <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
    2752:	2256      	movs	r2, #86	; 0x56
    2754:	32ff      	adds	r2, #255	; 0xff
    2756:	4918      	ldr	r1, [pc, #96]	; (27b8 <nm_drv_init+0xbc>)
    2758:	4818      	ldr	r0, [pc, #96]	; (27bc <nm_drv_init+0xc0>)
    275a:	4b0f      	ldr	r3, [pc, #60]	; (2798 <nm_drv_init+0x9c>)
    275c:	4798      	blx	r3
    275e:	4818      	ldr	r0, [pc, #96]	; (27c0 <nm_drv_init+0xc4>)
    2760:	4b18      	ldr	r3, [pc, #96]	; (27c4 <nm_drv_init+0xc8>)
    2762:	4798      	blx	r3
    2764:	200d      	movs	r0, #13
    2766:	4b0f      	ldr	r3, [pc, #60]	; (27a4 <nm_drv_init+0xa8>)
    2768:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    276a:	4b17      	ldr	r3, [pc, #92]	; (27c8 <nm_drv_init+0xcc>)
    276c:	4798      	blx	r3
ERR1:
	return ret;
}
    276e:	0020      	movs	r0, r4
    2770:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    2772:	2501      	movs	r5, #1
    2774:	e7ca      	b.n	270c <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    2776:	2228      	movs	r2, #40	; 0x28
    2778:	32ff      	adds	r2, #255	; 0xff
    277a:	490f      	ldr	r1, [pc, #60]	; (27b8 <nm_drv_init+0xbc>)
    277c:	480f      	ldr	r0, [pc, #60]	; (27bc <nm_drv_init+0xc0>)
    277e:	4b06      	ldr	r3, [pc, #24]	; (2798 <nm_drv_init+0x9c>)
    2780:	4798      	blx	r3
    2782:	4812      	ldr	r0, [pc, #72]	; (27cc <nm_drv_init+0xd0>)
    2784:	4b0f      	ldr	r3, [pc, #60]	; (27c4 <nm_drv_init+0xc8>)
    2786:	4798      	blx	r3
    2788:	200d      	movs	r0, #13
    278a:	4b06      	ldr	r3, [pc, #24]	; (27a4 <nm_drv_init+0xa8>)
    278c:	4798      	blx	r3
		goto ERR1;
    278e:	e7ee      	b.n	276e <nm_drv_init+0x72>
    2790:	00002501 	.word	0x00002501
    2794:	0000ace0 	.word	0x0000ace0
    2798:	000095e5 	.word	0x000095e5
    279c:	000020e1 	.word	0x000020e1
    27a0:	0000b024 	.word	0x0000b024
    27a4:	00009619 	.word	0x00009619
    27a8:	00002f45 	.word	0x00002f45
    27ac:	000022f5 	.word	0x000022f5
    27b0:	000023fd 	.word	0x000023fd
    27b4:	00002085 	.word	0x00002085
    27b8:	0000af6c 	.word	0x0000af6c
    27bc:	0000a9b0 	.word	0x0000a9b0
    27c0:	0000afe8 	.word	0x0000afe8
    27c4:	00009701 	.word	0x00009701
    27c8:	0000250d 	.word	0x0000250d
    27cc:	0000b008 	.word	0x0000b008

000027d0 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    27d0:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    27d2:	4b1c      	ldr	r3, [pc, #112]	; (2844 <nm_drv_deinit+0x74>)
    27d4:	4798      	blx	r3
    27d6:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    27d8:	d10b      	bne.n	27f2 <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    27da:	2000      	movs	r0, #0
    27dc:	4b1a      	ldr	r3, [pc, #104]	; (2848 <nm_drv_deinit+0x78>)
    27de:	4798      	blx	r3
    27e0:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    27e2:	d114      	bne.n	280e <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    27e4:	4b19      	ldr	r3, [pc, #100]	; (284c <nm_drv_deinit+0x7c>)
    27e6:	4798      	blx	r3
    27e8:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    27ea:	d11d      	bne.n	2828 <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    27ec:	4b18      	ldr	r3, [pc, #96]	; (2850 <nm_drv_deinit+0x80>)
    27ee:	4798      	blx	r3
    27f0:	e00b      	b.n	280a <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    27f2:	22b6      	movs	r2, #182	; 0xb6
    27f4:	0052      	lsls	r2, r2, #1
    27f6:	4917      	ldr	r1, [pc, #92]	; (2854 <nm_drv_deinit+0x84>)
    27f8:	4817      	ldr	r0, [pc, #92]	; (2858 <nm_drv_deinit+0x88>)
    27fa:	4b18      	ldr	r3, [pc, #96]	; (285c <nm_drv_deinit+0x8c>)
    27fc:	4798      	blx	r3
    27fe:	4818      	ldr	r0, [pc, #96]	; (2860 <nm_drv_deinit+0x90>)
    2800:	4b18      	ldr	r3, [pc, #96]	; (2864 <nm_drv_deinit+0x94>)
    2802:	4798      	blx	r3
    2804:	200d      	movs	r0, #13
    2806:	4b18      	ldr	r3, [pc, #96]	; (2868 <nm_drv_deinit+0x98>)
    2808:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    280a:	0020      	movs	r0, r4
    280c:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    280e:	2274      	movs	r2, #116	; 0x74
    2810:	32ff      	adds	r2, #255	; 0xff
    2812:	4910      	ldr	r1, [pc, #64]	; (2854 <nm_drv_deinit+0x84>)
    2814:	4810      	ldr	r0, [pc, #64]	; (2858 <nm_drv_deinit+0x88>)
    2816:	4b11      	ldr	r3, [pc, #68]	; (285c <nm_drv_deinit+0x8c>)
    2818:	4798      	blx	r3
    281a:	4814      	ldr	r0, [pc, #80]	; (286c <nm_drv_deinit+0x9c>)
    281c:	4b11      	ldr	r3, [pc, #68]	; (2864 <nm_drv_deinit+0x94>)
    281e:	4798      	blx	r3
    2820:	200d      	movs	r0, #13
    2822:	4b11      	ldr	r3, [pc, #68]	; (2868 <nm_drv_deinit+0x98>)
    2824:	4798      	blx	r3
		goto ERR1;
    2826:	e7f0      	b.n	280a <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    2828:	227a      	movs	r2, #122	; 0x7a
    282a:	32ff      	adds	r2, #255	; 0xff
    282c:	4909      	ldr	r1, [pc, #36]	; (2854 <nm_drv_deinit+0x84>)
    282e:	480a      	ldr	r0, [pc, #40]	; (2858 <nm_drv_deinit+0x88>)
    2830:	4b0a      	ldr	r3, [pc, #40]	; (285c <nm_drv_deinit+0x8c>)
    2832:	4798      	blx	r3
    2834:	480e      	ldr	r0, [pc, #56]	; (2870 <nm_drv_deinit+0xa0>)
    2836:	4b0b      	ldr	r3, [pc, #44]	; (2864 <nm_drv_deinit+0x94>)
    2838:	4798      	blx	r3
    283a:	200d      	movs	r0, #13
    283c:	4b0a      	ldr	r3, [pc, #40]	; (2868 <nm_drv_deinit+0x98>)
    283e:	4798      	blx	r3
		goto ERR1;
    2840:	e7e3      	b.n	280a <nm_drv_deinit+0x3a>
    2842:	46c0      	nop			; (mov r8, r8)
    2844:	00002475 	.word	0x00002475
    2848:	00003d65 	.word	0x00003d65
    284c:	0000250d 	.word	0x0000250d
    2850:	00002ef1 	.word	0x00002ef1
    2854:	0000af78 	.word	0x0000af78
    2858:	0000a9b0 	.word	0x0000a9b0
    285c:	000095e5 	.word	0x000095e5
    2860:	0000af88 	.word	0x0000af88
    2864:	00009701 	.word	0x00009701
    2868:	00009619 	.word	0x00009619
    286c:	0000afa8 	.word	0x0000afa8
    2870:	0000afcc 	.word	0x0000afcc

00002874 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    2874:	b500      	push	{lr}
    2876:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    2878:	ab01      	add	r3, sp, #4
    287a:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    287c:	2200      	movs	r2, #0
    287e:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    2880:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    2882:	0019      	movs	r1, r3
    2884:	2003      	movs	r0, #3
    2886:	4b02      	ldr	r3, [pc, #8]	; (2890 <nmi_spi_write+0x1c>)
    2888:	4798      	blx	r3
}
    288a:	b005      	add	sp, #20
    288c:	bd00      	pop	{pc}
    288e:	46c0      	nop			; (mov r8, r8)
    2890:	00000f1d 	.word	0x00000f1d

00002894 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    2894:	b570      	push	{r4, r5, r6, lr}
    2896:	b084      	sub	sp, #16
    2898:	ac08      	add	r4, sp, #32
    289a:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    289c:	ac01      	add	r4, sp, #4
    289e:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    28a0:	303f      	adds	r0, #63	; 0x3f
    28a2:	b2c4      	uxtb	r4, r0
    28a4:	2c0e      	cmp	r4, #14
    28a6:	d900      	bls.n	28aa <spi_cmd+0x16>
    28a8:	e084      	b.n	29b4 <spi_cmd+0x120>
    28aa:	00a0      	lsls	r0, r4, #2
    28ac:	4c4f      	ldr	r4, [pc, #316]	; (29ec <spi_cmd+0x158>)
    28ae:	5820      	ldr	r0, [r4, r0]
    28b0:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    28b2:	ab01      	add	r3, sp, #4
    28b4:	0c0a      	lsrs	r2, r1, #16
    28b6:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    28b8:	0a0a      	lsrs	r2, r1, #8
    28ba:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    28bc:	70d9      	strb	r1, [r3, #3]
		len = 5;
    28be:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    28c0:	4b4b      	ldr	r3, [pc, #300]	; (29f0 <spi_cmd+0x15c>)
    28c2:	781b      	ldrb	r3, [r3, #0]
    28c4:	2b00      	cmp	r3, #0
    28c6:	d077      	beq.n	29b8 <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    28c8:	3901      	subs	r1, #1
    28ca:	b2c9      	uxtb	r1, r1
    28cc:	e083      	b.n	29d6 <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
    28ce:	0a0b      	lsrs	r3, r1, #8
    28d0:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    28d2:	2d00      	cmp	r5, #0
    28d4:	d107      	bne.n	28e6 <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    28d6:	aa01      	add	r2, sp, #4
    28d8:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    28da:	ab01      	add	r3, sp, #4
    28dc:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    28de:	2200      	movs	r2, #0
    28e0:	70da      	strb	r2, [r3, #3]
		len = 5;
    28e2:	2105      	movs	r1, #5
		break;
    28e4:	e7ec      	b.n	28c0 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    28e6:	2280      	movs	r2, #128	; 0x80
    28e8:	4252      	negs	r2, r2
    28ea:	4313      	orrs	r3, r2
    28ec:	aa01      	add	r2, sp, #4
    28ee:	7053      	strb	r3, [r2, #1]
    28f0:	e7f3      	b.n	28da <spi_cmd+0x46>
		bc[1] = 0x00;
    28f2:	ab01      	add	r3, sp, #4
    28f4:	2200      	movs	r2, #0
    28f6:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    28f8:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    28fa:	70da      	strb	r2, [r3, #3]
		len = 5;
    28fc:	2105      	movs	r1, #5
		break;
    28fe:	e7df      	b.n	28c0 <spi_cmd+0x2c>
		bc[1] = 0x00;
    2900:	ab01      	add	r3, sp, #4
    2902:	2200      	movs	r2, #0
    2904:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    2906:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    2908:	70da      	strb	r2, [r3, #3]
		len = 5;
    290a:	2105      	movs	r1, #5
		break;
    290c:	e7d8      	b.n	28c0 <spi_cmd+0x2c>
		bc[1] = 0xff;
    290e:	ab01      	add	r3, sp, #4
    2910:	22ff      	movs	r2, #255	; 0xff
    2912:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    2914:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    2916:	70da      	strb	r2, [r3, #3]
		len = 5;
    2918:	2105      	movs	r1, #5
		break;
    291a:	e7d1      	b.n	28c0 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    291c:	aa01      	add	r2, sp, #4
    291e:	0c08      	lsrs	r0, r1, #16
    2920:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    2922:	0a08      	lsrs	r0, r1, #8
    2924:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    2926:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    2928:	0a19      	lsrs	r1, r3, #8
    292a:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    292c:	7153      	strb	r3, [r2, #5]
		len = 7;
    292e:	2107      	movs	r1, #7
		break;
    2930:	e7c6      	b.n	28c0 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    2932:	aa01      	add	r2, sp, #4
    2934:	0c08      	lsrs	r0, r1, #16
    2936:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    2938:	0a08      	lsrs	r0, r1, #8
    293a:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    293c:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    293e:	0c19      	lsrs	r1, r3, #16
    2940:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    2942:	0a19      	lsrs	r1, r3, #8
    2944:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    2946:	7193      	strb	r3, [r2, #6]
		len = 8;
    2948:	2108      	movs	r1, #8
		break;
    294a:	e7b9      	b.n	28c0 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    294c:	0a0b      	lsrs	r3, r1, #8
    294e:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    2950:	2d00      	cmp	r5, #0
    2952:	d10c      	bne.n	296e <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    2954:	a801      	add	r0, sp, #4
    2956:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    2958:	ab01      	add	r3, sp, #4
    295a:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    295c:	0e11      	lsrs	r1, r2, #24
    295e:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    2960:	0c11      	lsrs	r1, r2, #16
    2962:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    2964:	0a11      	lsrs	r1, r2, #8
    2966:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    2968:	719a      	strb	r2, [r3, #6]
		len = 8;
    296a:	2108      	movs	r1, #8
		break;
    296c:	e7a8      	b.n	28c0 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    296e:	2080      	movs	r0, #128	; 0x80
    2970:	4240      	negs	r0, r0
    2972:	4303      	orrs	r3, r0
    2974:	a801      	add	r0, sp, #4
    2976:	7043      	strb	r3, [r0, #1]
    2978:	e7ee      	b.n	2958 <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    297a:	ab01      	add	r3, sp, #4
    297c:	0c08      	lsrs	r0, r1, #16
    297e:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    2980:	0a08      	lsrs	r0, r1, #8
    2982:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    2984:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    2986:	0e11      	lsrs	r1, r2, #24
    2988:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    298a:	0c11      	lsrs	r1, r2, #16
    298c:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    298e:	0a11      	lsrs	r1, r2, #8
    2990:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    2992:	71da      	strb	r2, [r3, #7]
		len = 9;
    2994:	2109      	movs	r1, #9
		break;
    2996:	e793      	b.n	28c0 <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    2998:	2228      	movs	r2, #40	; 0x28
    299a:	32ff      	adds	r2, #255	; 0xff
    299c:	4915      	ldr	r1, [pc, #84]	; (29f4 <spi_cmd+0x160>)
    299e:	4816      	ldr	r0, [pc, #88]	; (29f8 <spi_cmd+0x164>)
    29a0:	4b16      	ldr	r3, [pc, #88]	; (29fc <spi_cmd+0x168>)
    29a2:	4798      	blx	r3
    29a4:	4816      	ldr	r0, [pc, #88]	; (2a00 <spi_cmd+0x16c>)
    29a6:	4b17      	ldr	r3, [pc, #92]	; (2a04 <spi_cmd+0x170>)
    29a8:	4798      	blx	r3
    29aa:	200d      	movs	r0, #13
    29ac:	4b16      	ldr	r3, [pc, #88]	; (2a08 <spi_cmd+0x174>)
    29ae:	4798      	blx	r3
			result = N_FAIL;
    29b0:	2300      	movs	r3, #0
    29b2:	e017      	b.n	29e4 <spi_cmd+0x150>
	switch (cmd) {
    29b4:	2300      	movs	r3, #0
    29b6:	e015      	b.n	29e4 <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    29b8:	1e4e      	subs	r6, r1, #1
    29ba:	aa01      	add	r2, sp, #4
    29bc:	1995      	adds	r5, r2, r6
    29be:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    29c0:	4c12      	ldr	r4, [pc, #72]	; (2a0c <spi_cmd+0x178>)
    29c2:	005b      	lsls	r3, r3, #1
    29c4:	7810      	ldrb	r0, [r2, #0]
    29c6:	4043      	eors	r3, r0
    29c8:	5ce3      	ldrb	r3, [r4, r3]
    29ca:	3201      	adds	r2, #1
	while (len--)
    29cc:	42aa      	cmp	r2, r5
    29ce:	d1f8      	bne.n	29c2 <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    29d0:	005b      	lsls	r3, r3, #1
    29d2:	aa01      	add	r2, sp, #4
    29d4:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    29d6:	b289      	uxth	r1, r1
    29d8:	a801      	add	r0, sp, #4
    29da:	4b0d      	ldr	r3, [pc, #52]	; (2a10 <spi_cmd+0x17c>)
    29dc:	4798      	blx	r3
    29de:	2301      	movs	r3, #1
    29e0:	2800      	cmp	r0, #0
    29e2:	d1d9      	bne.n	2998 <spi_cmd+0x104>
		}
	}

	return result;
}
    29e4:	0018      	movs	r0, r3
    29e6:	b004      	add	sp, #16
    29e8:	bd70      	pop	{r4, r5, r6, pc}
    29ea:	46c0      	nop			; (mov r8, r8)
    29ec:	0000b034 	.word	0x0000b034
    29f0:	2000009c 	.word	0x2000009c
    29f4:	0000b074 	.word	0x0000b074
    29f8:	0000a9b0 	.word	0x0000a9b0
    29fc:	000095e5 	.word	0x000095e5
    2a00:	0000b504 	.word	0x0000b504
    2a04:	00009701 	.word	0x00009701
    2a08:	00009619 	.word	0x00009619
    2a0c:	0000b100 	.word	0x0000b100
    2a10:	00002875 	.word	0x00002875

00002a14 <nmi_spi_read>:
{
    2a14:	b500      	push	{lr}
    2a16:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    2a18:	ab01      	add	r3, sp, #4
    2a1a:	2200      	movs	r2, #0
    2a1c:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    2a1e:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    2a20:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    2a22:	0019      	movs	r1, r3
    2a24:	2003      	movs	r0, #3
    2a26:	4b02      	ldr	r3, [pc, #8]	; (2a30 <nmi_spi_read+0x1c>)
    2a28:	4798      	blx	r3
}
    2a2a:	b005      	add	sp, #20
    2a2c:	bd00      	pop	{pc}
    2a2e:	46c0      	nop			; (mov r8, r8)
    2a30:	00000f1d 	.word	0x00000f1d

00002a34 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    2a34:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a36:	46c6      	mov	lr, r8
    2a38:	b500      	push	{lr}
    2a3a:	b082      	sub	sp, #8
    2a3c:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    2a3e:	28cf      	cmp	r0, #207	; 0xcf
    2a40:	d02b      	beq.n	2a9a <spi_cmd_rsp+0x66>
    2a42:	0003      	movs	r3, r0
    2a44:	333b      	adds	r3, #59	; 0x3b
    2a46:	b2db      	uxtb	r3, r3
    2a48:	2b01      	cmp	r3, #1
    2a4a:	d926      	bls.n	2a9a <spi_cmd_rsp+0x66>
{
    2a4c:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2a4e:	466b      	mov	r3, sp
    2a50:	1dde      	adds	r6, r3, #7
    2a52:	4b26      	ldr	r3, [pc, #152]	; (2aec <spi_cmd_rsp+0xb8>)
    2a54:	4698      	mov	r8, r3
    2a56:	2101      	movs	r1, #1
    2a58:	0030      	movs	r0, r6
    2a5a:	47c0      	blx	r8
    2a5c:	1e05      	subs	r5, r0, #0
    2a5e:	d125      	bne.n	2aac <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    2a60:	7833      	ldrb	r3, [r6, #0]
    2a62:	42bb      	cmp	r3, r7
    2a64:	d030      	beq.n	2ac8 <spi_cmd_rsp+0x94>
    2a66:	3c01      	subs	r4, #1
    2a68:	b2e4      	uxtb	r4, r4
    2a6a:	2c00      	cmp	r4, #0
    2a6c:	d1f3      	bne.n	2a56 <spi_cmd_rsp+0x22>
    2a6e:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2a70:	466b      	mov	r3, sp
    2a72:	1dde      	adds	r6, r3, #7
    2a74:	4f1d      	ldr	r7, [pc, #116]	; (2aec <spi_cmd_rsp+0xb8>)
    2a76:	2101      	movs	r1, #1
    2a78:	0030      	movs	r0, r6
    2a7a:	47b8      	blx	r7
    2a7c:	2800      	cmp	r0, #0
    2a7e:	d125      	bne.n	2acc <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    2a80:	7833      	ldrb	r3, [r6, #0]
    2a82:	2b00      	cmp	r3, #0
    2a84:	d02f      	beq.n	2ae6 <spi_cmd_rsp+0xb2>
    2a86:	3c01      	subs	r4, #1
    2a88:	b2e4      	uxtb	r4, r4
    2a8a:	2c00      	cmp	r4, #0
    2a8c:	d1f3      	bne.n	2a76 <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    2a8e:	2501      	movs	r5, #1

_fail_:

	return result;
}
    2a90:	0028      	movs	r0, r5
    2a92:	b002      	add	sp, #8
    2a94:	bc04      	pop	{r2}
    2a96:	4690      	mov	r8, r2
    2a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2a9a:	2101      	movs	r1, #1
    2a9c:	466b      	mov	r3, sp
    2a9e:	1dd8      	adds	r0, r3, #7
    2aa0:	4b12      	ldr	r3, [pc, #72]	; (2aec <spi_cmd_rsp+0xb8>)
    2aa2:	4798      	blx	r3
			result = N_FAIL;
    2aa4:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2aa6:	2800      	cmp	r0, #0
    2aa8:	d0d0      	beq.n	2a4c <spi_cmd_rsp+0x18>
    2aaa:	e7f1      	b.n	2a90 <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    2aac:	22b1      	movs	r2, #177	; 0xb1
    2aae:	0052      	lsls	r2, r2, #1
    2ab0:	490f      	ldr	r1, [pc, #60]	; (2af0 <spi_cmd_rsp+0xbc>)
    2ab2:	4810      	ldr	r0, [pc, #64]	; (2af4 <spi_cmd_rsp+0xc0>)
    2ab4:	4b10      	ldr	r3, [pc, #64]	; (2af8 <spi_cmd_rsp+0xc4>)
    2ab6:	4798      	blx	r3
    2ab8:	4810      	ldr	r0, [pc, #64]	; (2afc <spi_cmd_rsp+0xc8>)
    2aba:	4b11      	ldr	r3, [pc, #68]	; (2b00 <spi_cmd_rsp+0xcc>)
    2abc:	4798      	blx	r3
    2abe:	200d      	movs	r0, #13
    2ac0:	4b10      	ldr	r3, [pc, #64]	; (2b04 <spi_cmd_rsp+0xd0>)
    2ac2:	4798      	blx	r3
			result = N_FAIL;
    2ac4:	2500      	movs	r5, #0
			goto _fail_;
    2ac6:	e7e3      	b.n	2a90 <spi_cmd_rsp+0x5c>
    2ac8:	240b      	movs	r4, #11
    2aca:	e7d1      	b.n	2a70 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    2acc:	22b8      	movs	r2, #184	; 0xb8
    2ace:	0052      	lsls	r2, r2, #1
    2ad0:	4907      	ldr	r1, [pc, #28]	; (2af0 <spi_cmd_rsp+0xbc>)
    2ad2:	4808      	ldr	r0, [pc, #32]	; (2af4 <spi_cmd_rsp+0xc0>)
    2ad4:	4b08      	ldr	r3, [pc, #32]	; (2af8 <spi_cmd_rsp+0xc4>)
    2ad6:	4798      	blx	r3
    2ad8:	4808      	ldr	r0, [pc, #32]	; (2afc <spi_cmd_rsp+0xc8>)
    2ada:	4b09      	ldr	r3, [pc, #36]	; (2b00 <spi_cmd_rsp+0xcc>)
    2adc:	4798      	blx	r3
    2ade:	200d      	movs	r0, #13
    2ae0:	4b08      	ldr	r3, [pc, #32]	; (2b04 <spi_cmd_rsp+0xd0>)
    2ae2:	4798      	blx	r3
			goto _fail_;
    2ae4:	e7d4      	b.n	2a90 <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    2ae6:	2501      	movs	r5, #1
    2ae8:	e7d2      	b.n	2a90 <spi_cmd_rsp+0x5c>
    2aea:	46c0      	nop			; (mov r8, r8)
    2aec:	00002a15 	.word	0x00002a15
    2af0:	0000b08c 	.word	0x0000b08c
    2af4:	0000a9b0 	.word	0x0000a9b0
    2af8:	000095e5 	.word	0x000095e5
    2afc:	0000b530 	.word	0x0000b530
    2b00:	00009701 	.word	0x00009701
    2b04:	00009619 	.word	0x00009619

00002b08 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    2b08:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b0a:	46de      	mov	lr, fp
    2b0c:	4657      	mov	r7, sl
    2b0e:	464e      	mov	r6, r9
    2b10:	4645      	mov	r5, r8
    2b12:	b5e0      	push	{r5, r6, r7, lr}
    2b14:	b087      	sub	sp, #28
    2b16:	9001      	str	r0, [sp, #4]
    2b18:	4689      	mov	r9, r1
    2b1a:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    2b1c:	2300      	movs	r3, #0
    2b1e:	469a      	mov	sl, r3
    2b20:	2380      	movs	r3, #128	; 0x80
    2b22:	019b      	lsls	r3, r3, #6
    2b24:	469b      	mov	fp, r3
    2b26:	466a      	mov	r2, sp
    2b28:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2b2a:	4b3b      	ldr	r3, [pc, #236]	; (2c18 <spi_data_read+0x110>)
    2b2c:	4698      	mov	r8, r3
    2b2e:	e02e      	b.n	2b8e <spi_data_read+0x86>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    2b30:	4a3a      	ldr	r2, [pc, #232]	; (2c1c <spi_data_read+0x114>)
    2b32:	493b      	ldr	r1, [pc, #236]	; (2c20 <spi_data_read+0x118>)
    2b34:	483b      	ldr	r0, [pc, #236]	; (2c24 <spi_data_read+0x11c>)
    2b36:	4b3c      	ldr	r3, [pc, #240]	; (2c28 <spi_data_read+0x120>)
    2b38:	4798      	blx	r3
    2b3a:	483c      	ldr	r0, [pc, #240]	; (2c2c <spi_data_read+0x124>)
    2b3c:	4b3c      	ldr	r3, [pc, #240]	; (2c30 <spi_data_read+0x128>)
    2b3e:	4798      	blx	r3
    2b40:	200d      	movs	r0, #13
    2b42:	4b3c      	ldr	r3, [pc, #240]	; (2c34 <spi_data_read+0x12c>)
    2b44:	4798      	blx	r3
    2b46:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    2b48:	0028      	movs	r0, r5
    2b4a:	b007      	add	sp, #28
    2b4c:	bc3c      	pop	{r2, r3, r4, r5}
    2b4e:	4690      	mov	r8, r2
    2b50:	4699      	mov	r9, r3
    2b52:	46a2      	mov	sl, r4
    2b54:	46ab      	mov	fp, r5
    2b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    2b58:	2c00      	cmp	r4, #0
    2b5a:	dd2e      	ble.n	2bba <spi_data_read+0xb2>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    2b5c:	9b01      	ldr	r3, [sp, #4]
    2b5e:	4453      	add	r3, sl
    2b60:	0018      	movs	r0, r3
    2b62:	0039      	movs	r1, r7
    2b64:	4b2c      	ldr	r3, [pc, #176]	; (2c18 <spi_data_read+0x110>)
    2b66:	4798      	blx	r3
    2b68:	1e04      	subs	r4, r0, #0
    2b6a:	d133      	bne.n	2bd4 <spi_data_read+0xcc>
		if(!clockless)
    2b6c:	9b02      	ldr	r3, [sp, #8]
    2b6e:	2b00      	cmp	r3, #0
    2b70:	d103      	bne.n	2b7a <spi_data_read+0x72>
			if (!gu8Crc_off) {
    2b72:	4b31      	ldr	r3, [pc, #196]	; (2c38 <spi_data_read+0x130>)
    2b74:	781b      	ldrb	r3, [r3, #0]
    2b76:	2b00      	cmp	r3, #0
    2b78:	d039      	beq.n	2bee <spi_data_read+0xe6>
		ix += nbytes;
    2b7a:	4653      	mov	r3, sl
    2b7c:	18fb      	adds	r3, r7, r3
    2b7e:	b21b      	sxth	r3, r3
    2b80:	469a      	mov	sl, r3
		sz -= nbytes;
    2b82:	464b      	mov	r3, r9
    2b84:	1bdf      	subs	r7, r3, r7
    2b86:	b2bb      	uxth	r3, r7
    2b88:	4699      	mov	r9, r3
	} while (sz);
    2b8a:	2b00      	cmp	r3, #0
    2b8c:	d042      	beq.n	2c14 <spi_data_read+0x10c>
    2b8e:	464f      	mov	r7, r9
    2b90:	45d9      	cmp	r9, fp
    2b92:	d901      	bls.n	2b98 <spi_data_read+0x90>
    2b94:	466b      	mov	r3, sp
    2b96:	89df      	ldrh	r7, [r3, #14]
    2b98:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    2b9a:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2b9c:	ab04      	add	r3, sp, #16
    2b9e:	1cde      	adds	r6, r3, #3
    2ba0:	2101      	movs	r1, #1
    2ba2:	0030      	movs	r0, r6
    2ba4:	47c0      	blx	r8
    2ba6:	1e05      	subs	r5, r0, #0
    2ba8:	d1c2      	bne.n	2b30 <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    2baa:	7833      	ldrb	r3, [r6, #0]
    2bac:	091b      	lsrs	r3, r3, #4
    2bae:	2b0f      	cmp	r3, #15
    2bb0:	d0d2      	beq.n	2b58 <spi_data_read+0x50>
    2bb2:	3c01      	subs	r4, #1
    2bb4:	b224      	sxth	r4, r4
		} while (retry--);
    2bb6:	1c63      	adds	r3, r4, #1
    2bb8:	d1f2      	bne.n	2ba0 <spi_data_read+0x98>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    2bba:	4a20      	ldr	r2, [pc, #128]	; (2c3c <spi_data_read+0x134>)
    2bbc:	4918      	ldr	r1, [pc, #96]	; (2c20 <spi_data_read+0x118>)
    2bbe:	4819      	ldr	r0, [pc, #100]	; (2c24 <spi_data_read+0x11c>)
    2bc0:	4c19      	ldr	r4, [pc, #100]	; (2c28 <spi_data_read+0x120>)
    2bc2:	47a0      	blx	r4
    2bc4:	ab04      	add	r3, sp, #16
    2bc6:	78d9      	ldrb	r1, [r3, #3]
    2bc8:	481d      	ldr	r0, [pc, #116]	; (2c40 <spi_data_read+0x138>)
    2bca:	47a0      	blx	r4
    2bcc:	200d      	movs	r0, #13
    2bce:	4b19      	ldr	r3, [pc, #100]	; (2c34 <spi_data_read+0x12c>)
    2bd0:	4798      	blx	r3
			break;
    2bd2:	e7b9      	b.n	2b48 <spi_data_read+0x40>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    2bd4:	22c5      	movs	r2, #197	; 0xc5
    2bd6:	0092      	lsls	r2, r2, #2
    2bd8:	4911      	ldr	r1, [pc, #68]	; (2c20 <spi_data_read+0x118>)
    2bda:	4812      	ldr	r0, [pc, #72]	; (2c24 <spi_data_read+0x11c>)
    2bdc:	4b12      	ldr	r3, [pc, #72]	; (2c28 <spi_data_read+0x120>)
    2bde:	4798      	blx	r3
    2be0:	4818      	ldr	r0, [pc, #96]	; (2c44 <spi_data_read+0x13c>)
    2be2:	4b13      	ldr	r3, [pc, #76]	; (2c30 <spi_data_read+0x128>)
    2be4:	4798      	blx	r3
    2be6:	200d      	movs	r0, #13
    2be8:	4b12      	ldr	r3, [pc, #72]	; (2c34 <spi_data_read+0x12c>)
    2bea:	4798      	blx	r3
			break;
    2bec:	e7ac      	b.n	2b48 <spi_data_read+0x40>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    2bee:	2102      	movs	r1, #2
    2bf0:	a805      	add	r0, sp, #20
    2bf2:	4b09      	ldr	r3, [pc, #36]	; (2c18 <spi_data_read+0x110>)
    2bf4:	4798      	blx	r3
    2bf6:	2800      	cmp	r0, #0
    2bf8:	d0bf      	beq.n	2b7a <spi_data_read+0x72>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    2bfa:	4a13      	ldr	r2, [pc, #76]	; (2c48 <spi_data_read+0x140>)
    2bfc:	4908      	ldr	r1, [pc, #32]	; (2c20 <spi_data_read+0x118>)
    2bfe:	4809      	ldr	r0, [pc, #36]	; (2c24 <spi_data_read+0x11c>)
    2c00:	4b09      	ldr	r3, [pc, #36]	; (2c28 <spi_data_read+0x120>)
    2c02:	4798      	blx	r3
    2c04:	4811      	ldr	r0, [pc, #68]	; (2c4c <spi_data_read+0x144>)
    2c06:	4b0a      	ldr	r3, [pc, #40]	; (2c30 <spi_data_read+0x128>)
    2c08:	4798      	blx	r3
    2c0a:	200d      	movs	r0, #13
    2c0c:	4b09      	ldr	r3, [pc, #36]	; (2c34 <spi_data_read+0x12c>)
    2c0e:	4798      	blx	r3
					result = N_FAIL;
    2c10:	0025      	movs	r5, r4
					break;
    2c12:	e799      	b.n	2b48 <spi_data_read+0x40>
    2c14:	2501      	movs	r5, #1
    2c16:	e797      	b.n	2b48 <spi_data_read+0x40>
    2c18:	00002a15 	.word	0x00002a15
    2c1c:	000002ff 	.word	0x000002ff
    2c20:	0000b098 	.word	0x0000b098
    2c24:	0000a9b0 	.word	0x0000a9b0
    2c28:	000095e5 	.word	0x000095e5
    2c2c:	0000b564 	.word	0x0000b564
    2c30:	00009701 	.word	0x00009701
    2c34:	00009619 	.word	0x00009619
    2c38:	2000009c 	.word	0x2000009c
    2c3c:	0000030b 	.word	0x0000030b
    2c40:	0000b598 	.word	0x0000b598
    2c44:	0000b5c8 	.word	0x0000b5c8
    2c48:	0000031f 	.word	0x0000031f
    2c4c:	0000b5f8 	.word	0x0000b5f8

00002c50 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    2c50:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c52:	46d6      	mov	lr, sl
    2c54:	464f      	mov	r7, r9
    2c56:	4646      	mov	r6, r8
    2c58:	b5c0      	push	{r6, r7, lr}
    2c5a:	b086      	sub	sp, #24
    2c5c:	9003      	str	r0, [sp, #12]
    2c5e:	9104      	str	r1, [sp, #16]
    2c60:	2830      	cmp	r0, #48	; 0x30
    2c62:	d80f      	bhi.n	2c84 <spi_write_reg+0x34>
    2c64:	4b30      	ldr	r3, [pc, #192]	; (2d28 <spi_write_reg+0xd8>)
    2c66:	781f      	ldrb	r7, [r3, #0]
    2c68:	b2fb      	uxtb	r3, r7
    2c6a:	9305      	str	r3, [sp, #20]
    2c6c:	2300      	movs	r3, #0
    2c6e:	2230      	movs	r2, #48	; 0x30
    2c70:	9903      	ldr	r1, [sp, #12]
    2c72:	428a      	cmp	r2, r1
    2c74:	415b      	adcs	r3, r3
    2c76:	b2db      	uxtb	r3, r3
    2c78:	469a      	mov	sl, r3
    2c7a:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    2c7c:	4b2b      	ldr	r3, [pc, #172]	; (2d2c <spi_write_reg+0xdc>)
    2c7e:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    2c80:	46d1      	mov	r9, sl
    2c82:	e033      	b.n	2cec <spi_write_reg+0x9c>
    2c84:	4b2a      	ldr	r3, [pc, #168]	; (2d30 <spi_write_reg+0xe0>)
    2c86:	781f      	ldrb	r7, [r3, #0]
    2c88:	e7ee      	b.n	2c68 <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    2c8a:	9805      	ldr	r0, [sp, #20]
    2c8c:	4b29      	ldr	r3, [pc, #164]	; (2d34 <spi_write_reg+0xe4>)
    2c8e:	4798      	blx	r3
    2c90:	0004      	movs	r4, r0
	if (result != N_OK) {
    2c92:	2801      	cmp	r0, #1
    2c94:	d041      	beq.n	2d1a <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    2c96:	22e7      	movs	r2, #231	; 0xe7
    2c98:	0092      	lsls	r2, r2, #2
    2c9a:	4927      	ldr	r1, [pc, #156]	; (2d38 <spi_write_reg+0xe8>)
    2c9c:	4827      	ldr	r0, [pc, #156]	; (2d3c <spi_write_reg+0xec>)
    2c9e:	4e28      	ldr	r6, [pc, #160]	; (2d40 <spi_write_reg+0xf0>)
    2ca0:	47b0      	blx	r6
    2ca2:	9903      	ldr	r1, [sp, #12]
    2ca4:	4827      	ldr	r0, [pc, #156]	; (2d44 <spi_write_reg+0xf4>)
    2ca6:	47b0      	blx	r6
    2ca8:	200d      	movs	r0, #13
    2caa:	4b27      	ldr	r3, [pc, #156]	; (2d48 <spi_write_reg+0xf8>)
    2cac:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    2cae:	2001      	movs	r0, #1
    2cb0:	4e26      	ldr	r6, [pc, #152]	; (2d4c <spi_write_reg+0xfc>)
    2cb2:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2cb4:	2300      	movs	r3, #0
    2cb6:	9300      	str	r3, [sp, #0]
    2cb8:	2200      	movs	r2, #0
    2cba:	2100      	movs	r1, #0
    2cbc:	20cf      	movs	r0, #207	; 0xcf
    2cbe:	4f1b      	ldr	r7, [pc, #108]	; (2d2c <spi_write_reg+0xdc>)
    2cc0:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    2cc2:	20cf      	movs	r0, #207	; 0xcf
    2cc4:	4b1b      	ldr	r3, [pc, #108]	; (2d34 <spi_write_reg+0xe4>)
    2cc6:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    2cc8:	4a21      	ldr	r2, [pc, #132]	; (2d50 <spi_write_reg+0x100>)
    2cca:	491b      	ldr	r1, [pc, #108]	; (2d38 <spi_write_reg+0xe8>)
    2ccc:	481b      	ldr	r0, [pc, #108]	; (2d3c <spi_write_reg+0xec>)
    2cce:	4f1c      	ldr	r7, [pc, #112]	; (2d40 <spi_write_reg+0xf0>)
    2cd0:	47b8      	blx	r7
    2cd2:	9b04      	ldr	r3, [sp, #16]
    2cd4:	9a03      	ldr	r2, [sp, #12]
    2cd6:	0029      	movs	r1, r5
    2cd8:	481e      	ldr	r0, [pc, #120]	; (2d54 <spi_write_reg+0x104>)
    2cda:	47b8      	blx	r7
    2cdc:	200d      	movs	r0, #13
    2cde:	4b1a      	ldr	r3, [pc, #104]	; (2d48 <spi_write_reg+0xf8>)
    2ce0:	4798      	blx	r3
		nm_bsp_sleep(1);
    2ce2:	2001      	movs	r0, #1
    2ce4:	47b0      	blx	r6
    2ce6:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    2ce8:	2d00      	cmp	r5, #0
    2cea:	d016      	beq.n	2d1a <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    2cec:	464b      	mov	r3, r9
    2cee:	9300      	str	r3, [sp, #0]
    2cf0:	2304      	movs	r3, #4
    2cf2:	9a04      	ldr	r2, [sp, #16]
    2cf4:	9f03      	ldr	r7, [sp, #12]
    2cf6:	0039      	movs	r1, r7
    2cf8:	9805      	ldr	r0, [sp, #20]
    2cfa:	47c0      	blx	r8
    2cfc:	0004      	movs	r4, r0
	if (result != N_OK) {
    2cfe:	2801      	cmp	r0, #1
    2d00:	d0c3      	beq.n	2c8a <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    2d02:	4a15      	ldr	r2, [pc, #84]	; (2d58 <spi_write_reg+0x108>)
    2d04:	490c      	ldr	r1, [pc, #48]	; (2d38 <spi_write_reg+0xe8>)
    2d06:	480d      	ldr	r0, [pc, #52]	; (2d3c <spi_write_reg+0xec>)
    2d08:	4e0d      	ldr	r6, [pc, #52]	; (2d40 <spi_write_reg+0xf0>)
    2d0a:	47b0      	blx	r6
    2d0c:	0039      	movs	r1, r7
    2d0e:	4813      	ldr	r0, [pc, #76]	; (2d5c <spi_write_reg+0x10c>)
    2d10:	47b0      	blx	r6
    2d12:	200d      	movs	r0, #13
    2d14:	4b0c      	ldr	r3, [pc, #48]	; (2d48 <spi_write_reg+0xf8>)
    2d16:	4798      	blx	r3
		goto _FAIL_;
    2d18:	e7c9      	b.n	2cae <spi_write_reg+0x5e>
	}

	return result;
}
    2d1a:	0020      	movs	r0, r4
    2d1c:	b006      	add	sp, #24
    2d1e:	bc1c      	pop	{r2, r3, r4}
    2d20:	4690      	mov	r8, r2
    2d22:	4699      	mov	r9, r3
    2d24:	46a2      	mov	sl, r4
    2d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d28:	0000b070 	.word	0x0000b070
    2d2c:	00002895 	.word	0x00002895
    2d30:	0000b071 	.word	0x0000b071
    2d34:	00002a35 	.word	0x00002a35
    2d38:	0000b0b8 	.word	0x0000b0b8
    2d3c:	0000a9b0 	.word	0x0000a9b0
    2d40:	000095e5 	.word	0x000095e5
    2d44:	0000b6f0 	.word	0x0000b6f0
    2d48:	00009619 	.word	0x00009619
    2d4c:	00000ce5 	.word	0x00000ce5
    2d50:	000003af 	.word	0x000003af
    2d54:	0000b728 	.word	0x0000b728
    2d58:	00000396 	.word	0x00000396
    2d5c:	0000b6c4 	.word	0x0000b6c4

00002d60 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    2d60:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d62:	46de      	mov	lr, fp
    2d64:	4657      	mov	r7, sl
    2d66:	464e      	mov	r6, r9
    2d68:	4645      	mov	r5, r8
    2d6a:	b5e0      	push	{r5, r6, r7, lr}
    2d6c:	b087      	sub	sp, #28
    2d6e:	9002      	str	r0, [sp, #8]
    2d70:	468b      	mov	fp, r1
    2d72:	28ff      	cmp	r0, #255	; 0xff
    2d74:	d80f      	bhi.n	2d96 <spi_read_reg+0x36>
    2d76:	4b41      	ldr	r3, [pc, #260]	; (2e7c <spi_read_reg+0x11c>)
    2d78:	781f      	ldrb	r7, [r3, #0]
    2d7a:	b2fb      	uxtb	r3, r7
    2d7c:	9303      	str	r3, [sp, #12]
    2d7e:	2300      	movs	r3, #0
    2d80:	22ff      	movs	r2, #255	; 0xff
    2d82:	9902      	ldr	r1, [sp, #8]
    2d84:	428a      	cmp	r2, r1
    2d86:	415b      	adcs	r3, r3
    2d88:	b2db      	uxtb	r3, r3
    2d8a:	469a      	mov	sl, r3
    2d8c:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    2d8e:	4b3c      	ldr	r3, [pc, #240]	; (2e80 <spi_read_reg+0x120>)
    2d90:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    2d92:	46d1      	mov	r9, sl
    2d94:	e031      	b.n	2dfa <spi_read_reg+0x9a>
    2d96:	4b3b      	ldr	r3, [pc, #236]	; (2e84 <spi_read_reg+0x124>)
    2d98:	781f      	ldrb	r7, [r3, #0]
    2d9a:	e7ee      	b.n	2d7a <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    2d9c:	9803      	ldr	r0, [sp, #12]
    2d9e:	4b3a      	ldr	r3, [pc, #232]	; (2e88 <spi_read_reg+0x128>)
    2da0:	4798      	blx	r3
    2da2:	0004      	movs	r4, r0
	if (result != N_OK) {
    2da4:	2801      	cmp	r0, #1
    2da6:	d03f      	beq.n	2e28 <spi_read_reg+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    2da8:	4a38      	ldr	r2, [pc, #224]	; (2e8c <spi_read_reg+0x12c>)
    2daa:	4939      	ldr	r1, [pc, #228]	; (2e90 <spi_read_reg+0x130>)
    2dac:	4839      	ldr	r0, [pc, #228]	; (2e94 <spi_read_reg+0x134>)
    2dae:	4e3a      	ldr	r6, [pc, #232]	; (2e98 <spi_read_reg+0x138>)
    2db0:	47b0      	blx	r6
    2db2:	9902      	ldr	r1, [sp, #8]
    2db4:	4839      	ldr	r0, [pc, #228]	; (2e9c <spi_read_reg+0x13c>)
    2db6:	47b0      	blx	r6
    2db8:	200d      	movs	r0, #13
    2dba:	4b39      	ldr	r3, [pc, #228]	; (2ea0 <spi_read_reg+0x140>)
    2dbc:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    2dbe:	2001      	movs	r0, #1
    2dc0:	4e38      	ldr	r6, [pc, #224]	; (2ea4 <spi_read_reg+0x144>)
    2dc2:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2dc4:	2300      	movs	r3, #0
    2dc6:	9300      	str	r3, [sp, #0]
    2dc8:	2200      	movs	r2, #0
    2dca:	2100      	movs	r1, #0
    2dcc:	20cf      	movs	r0, #207	; 0xcf
    2dce:	4f2c      	ldr	r7, [pc, #176]	; (2e80 <spi_read_reg+0x120>)
    2dd0:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    2dd2:	20cf      	movs	r0, #207	; 0xcf
    2dd4:	4b2c      	ldr	r3, [pc, #176]	; (2e88 <spi_read_reg+0x128>)
    2dd6:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    2dd8:	4a33      	ldr	r2, [pc, #204]	; (2ea8 <spi_read_reg+0x148>)
    2dda:	492d      	ldr	r1, [pc, #180]	; (2e90 <spi_read_reg+0x130>)
    2ddc:	482d      	ldr	r0, [pc, #180]	; (2e94 <spi_read_reg+0x134>)
    2dde:	4f2e      	ldr	r7, [pc, #184]	; (2e98 <spi_read_reg+0x138>)
    2de0:	47b8      	blx	r7
    2de2:	9a02      	ldr	r2, [sp, #8]
    2de4:	0029      	movs	r1, r5
    2de6:	4831      	ldr	r0, [pc, #196]	; (2eac <spi_read_reg+0x14c>)
    2de8:	47b8      	blx	r7
    2dea:	200d      	movs	r0, #13
    2dec:	4b2c      	ldr	r3, [pc, #176]	; (2ea0 <spi_read_reg+0x140>)
    2dee:	4798      	blx	r3
		nm_bsp_sleep(1);
    2df0:	2001      	movs	r0, #1
    2df2:	47b0      	blx	r6
    2df4:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    2df6:	2d00      	cmp	r5, #0
    2df8:	d037      	beq.n	2e6a <spi_read_reg+0x10a>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    2dfa:	464b      	mov	r3, r9
    2dfc:	9300      	str	r3, [sp, #0]
    2dfe:	2304      	movs	r3, #4
    2e00:	2200      	movs	r2, #0
    2e02:	9f02      	ldr	r7, [sp, #8]
    2e04:	0039      	movs	r1, r7
    2e06:	9803      	ldr	r0, [sp, #12]
    2e08:	47c0      	blx	r8
    2e0a:	0004      	movs	r4, r0
	if (result != N_OK) {
    2e0c:	2801      	cmp	r0, #1
    2e0e:	d0c5      	beq.n	2d9c <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    2e10:	4a27      	ldr	r2, [pc, #156]	; (2eb0 <spi_read_reg+0x150>)
    2e12:	491f      	ldr	r1, [pc, #124]	; (2e90 <spi_read_reg+0x130>)
    2e14:	481f      	ldr	r0, [pc, #124]	; (2e94 <spi_read_reg+0x134>)
    2e16:	4e20      	ldr	r6, [pc, #128]	; (2e98 <spi_read_reg+0x138>)
    2e18:	47b0      	blx	r6
    2e1a:	0039      	movs	r1, r7
    2e1c:	4825      	ldr	r0, [pc, #148]	; (2eb4 <spi_read_reg+0x154>)
    2e1e:	47b0      	blx	r6
    2e20:	200d      	movs	r0, #13
    2e22:	4b1f      	ldr	r3, [pc, #124]	; (2ea0 <spi_read_reg+0x140>)
    2e24:	4798      	blx	r3
		goto _FAIL_;
    2e26:	e7ca      	b.n	2dbe <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
    2e28:	464a      	mov	r2, r9
    2e2a:	2104      	movs	r1, #4
    2e2c:	a805      	add	r0, sp, #20
    2e2e:	4b22      	ldr	r3, [pc, #136]	; (2eb8 <spi_read_reg+0x158>)
    2e30:	4798      	blx	r3
    2e32:	0004      	movs	r4, r0
	if (result != N_OK) {
    2e34:	2801      	cmp	r0, #1
    2e36:	d00b      	beq.n	2e50 <spi_read_reg+0xf0>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    2e38:	4a20      	ldr	r2, [pc, #128]	; (2ebc <spi_read_reg+0x15c>)
    2e3a:	4915      	ldr	r1, [pc, #84]	; (2e90 <spi_read_reg+0x130>)
    2e3c:	4815      	ldr	r0, [pc, #84]	; (2e94 <spi_read_reg+0x134>)
    2e3e:	4b16      	ldr	r3, [pc, #88]	; (2e98 <spi_read_reg+0x138>)
    2e40:	4798      	blx	r3
    2e42:	481f      	ldr	r0, [pc, #124]	; (2ec0 <spi_read_reg+0x160>)
    2e44:	4b1f      	ldr	r3, [pc, #124]	; (2ec4 <spi_read_reg+0x164>)
    2e46:	4798      	blx	r3
    2e48:	200d      	movs	r0, #13
    2e4a:	4b15      	ldr	r3, [pc, #84]	; (2ea0 <spi_read_reg+0x140>)
    2e4c:	4798      	blx	r3
		goto _FAIL_;
    2e4e:	e7b6      	b.n	2dbe <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
    2e50:	aa05      	add	r2, sp, #20
    2e52:	7853      	ldrb	r3, [r2, #1]
    2e54:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    2e56:	7891      	ldrb	r1, [r2, #2]
    2e58:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    2e5a:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    2e5c:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    2e5e:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    2e60:	78d2      	ldrb	r2, [r2, #3]
    2e62:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    2e64:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    2e66:	465a      	mov	r2, fp
    2e68:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    2e6a:	0020      	movs	r0, r4
    2e6c:	b007      	add	sp, #28
    2e6e:	bc3c      	pop	{r2, r3, r4, r5}
    2e70:	4690      	mov	r8, r2
    2e72:	4699      	mov	r9, r3
    2e74:	46a2      	mov	sl, r4
    2e76:	46ab      	mov	fp, r5
    2e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e7a:	46c0      	nop			; (mov r8, r8)
    2e7c:	0000b072 	.word	0x0000b072
    2e80:	00002895 	.word	0x00002895
    2e84:	0000b073 	.word	0x0000b073
    2e88:	00002a35 	.word	0x00002a35
    2e8c:	0000041d 	.word	0x0000041d
    2e90:	0000b0d8 	.word	0x0000b0d8
    2e94:	0000a9b0 	.word	0x0000a9b0
    2e98:	000095e5 	.word	0x000095e5
    2e9c:	0000b658 	.word	0x0000b658
    2ea0:	00009619 	.word	0x00009619
    2ea4:	00000ce5 	.word	0x00000ce5
    2ea8:	0000043c 	.word	0x0000043c
    2eac:	0000b6ac 	.word	0x0000b6ac
    2eb0:	00000417 	.word	0x00000417
    2eb4:	0000b62c 	.word	0x0000b62c
    2eb8:	00002b09 	.word	0x00002b09
    2ebc:	00000424 	.word	0x00000424
    2ec0:	0000b68c 	.word	0x0000b68c
    2ec4:	00009701 	.word	0x00009701

00002ec8 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    2ec8:	b510      	push	{r4, lr}
    2eca:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2ecc:	2300      	movs	r3, #0
    2ece:	9300      	str	r3, [sp, #0]
    2ed0:	2200      	movs	r2, #0
    2ed2:	2100      	movs	r1, #0
    2ed4:	20cf      	movs	r0, #207	; 0xcf
    2ed6:	4c04      	ldr	r4, [pc, #16]	; (2ee8 <nm_spi_reset+0x20>)
    2ed8:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    2eda:	20cf      	movs	r0, #207	; 0xcf
    2edc:	4b03      	ldr	r3, [pc, #12]	; (2eec <nm_spi_reset+0x24>)
    2ede:	4798      	blx	r3
	return M2M_SUCCESS;
}
    2ee0:	2000      	movs	r0, #0
    2ee2:	b002      	add	sp, #8
    2ee4:	bd10      	pop	{r4, pc}
    2ee6:	46c0      	nop			; (mov r8, r8)
    2ee8:	00002895 	.word	0x00002895
    2eec:	00002a35 	.word	0x00002a35

00002ef0 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    2ef0:	2200      	movs	r2, #0
    2ef2:	4b02      	ldr	r3, [pc, #8]	; (2efc <nm_spi_deinit+0xc>)
    2ef4:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    2ef6:	2000      	movs	r0, #0
    2ef8:	4770      	bx	lr
    2efa:	46c0      	nop			; (mov r8, r8)
    2efc:	2000009c 	.word	0x2000009c

00002f00 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    2f00:	b500      	push	{lr}
    2f02:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    2f04:	a901      	add	r1, sp, #4
    2f06:	4b02      	ldr	r3, [pc, #8]	; (2f10 <nm_spi_read_reg+0x10>)
    2f08:	4798      	blx	r3

	return u32Val;
}
    2f0a:	9801      	ldr	r0, [sp, #4]
    2f0c:	b003      	add	sp, #12
    2f0e:	bd00      	pop	{pc}
    2f10:	00002d61 	.word	0x00002d61

00002f14 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    2f14:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    2f16:	4b04      	ldr	r3, [pc, #16]	; (2f28 <nm_spi_read_reg_with_ret+0x14>)
    2f18:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2f1a:	2300      	movs	r3, #0
    2f1c:	2801      	cmp	r0, #1
    2f1e:	d101      	bne.n	2f24 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    2f20:	0018      	movs	r0, r3
    2f22:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    2f24:	3b06      	subs	r3, #6
    2f26:	e7fb      	b.n	2f20 <nm_spi_read_reg_with_ret+0xc>
    2f28:	00002d61 	.word	0x00002d61

00002f2c <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    2f2c:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    2f2e:	4b04      	ldr	r3, [pc, #16]	; (2f40 <nm_spi_write_reg+0x14>)
    2f30:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2f32:	2300      	movs	r3, #0
    2f34:	2801      	cmp	r0, #1
    2f36:	d101      	bne.n	2f3c <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    2f38:	0018      	movs	r0, r3
    2f3a:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    2f3c:	3b06      	subs	r3, #6
    2f3e:	e7fb      	b.n	2f38 <nm_spi_write_reg+0xc>
    2f40:	00002c51 	.word	0x00002c51

00002f44 <nm_spi_init>:
{
    2f44:	b510      	push	{r4, lr}
    2f46:	b082      	sub	sp, #8
	uint32 reg = 0;
    2f48:	2300      	movs	r3, #0
    2f4a:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    2f4c:	4a35      	ldr	r2, [pc, #212]	; (3024 <nm_spi_init+0xe0>)
    2f4e:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    2f50:	4669      	mov	r1, sp
    2f52:	4835      	ldr	r0, [pc, #212]	; (3028 <nm_spi_init+0xe4>)
    2f54:	4b35      	ldr	r3, [pc, #212]	; (302c <nm_spi_init+0xe8>)
    2f56:	4798      	blx	r3
    2f58:	2800      	cmp	r0, #0
    2f5a:	d028      	beq.n	2fae <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    2f5c:	4b31      	ldr	r3, [pc, #196]	; (3024 <nm_spi_init+0xe0>)
    2f5e:	781b      	ldrb	r3, [r3, #0]
    2f60:	2b00      	cmp	r3, #0
    2f62:	d10d      	bne.n	2f80 <nm_spi_init+0x3c>
		reg &= ~0x70;
    2f64:	337c      	adds	r3, #124	; 0x7c
    2f66:	9900      	ldr	r1, [sp, #0]
    2f68:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    2f6a:	3b2c      	subs	r3, #44	; 0x2c
    2f6c:	4319      	orrs	r1, r3
    2f6e:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    2f70:	482d      	ldr	r0, [pc, #180]	; (3028 <nm_spi_init+0xe4>)
    2f72:	4b2f      	ldr	r3, [pc, #188]	; (3030 <nm_spi_init+0xec>)
    2f74:	4798      	blx	r3
    2f76:	1e04      	subs	r4, r0, #0
    2f78:	d039      	beq.n	2fee <nm_spi_init+0xaa>
		gu8Crc_off = 1;
    2f7a:	2201      	movs	r2, #1
    2f7c:	4b29      	ldr	r3, [pc, #164]	; (3024 <nm_spi_init+0xe0>)
    2f7e:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    2f80:	a901      	add	r1, sp, #4
    2f82:	2080      	movs	r0, #128	; 0x80
    2f84:	0140      	lsls	r0, r0, #5
    2f86:	4b29      	ldr	r3, [pc, #164]	; (302c <nm_spi_init+0xe8>)
    2f88:	4798      	blx	r3
    2f8a:	2800      	cmp	r0, #0
    2f8c:	d03b      	beq.n	3006 <nm_spi_init+0xc2>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    2f8e:	4c26      	ldr	r4, [pc, #152]	; (3028 <nm_spi_init+0xe4>)
    2f90:	0020      	movs	r0, r4
    2f92:	4b28      	ldr	r3, [pc, #160]	; (3034 <nm_spi_init+0xf0>)
    2f94:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    2f96:	2370      	movs	r3, #112	; 0x70
    2f98:	0001      	movs	r1, r0
    2f9a:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    2f9c:	2050      	movs	r0, #80	; 0x50
    2f9e:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    2fa0:	0020      	movs	r0, r4
    2fa2:	4b25      	ldr	r3, [pc, #148]	; (3038 <nm_spi_init+0xf4>)
    2fa4:	4798      	blx	r3
	return M2M_SUCCESS;
    2fa6:	2400      	movs	r4, #0
}
    2fa8:	0020      	movs	r0, r4
    2faa:	b002      	add	sp, #8
    2fac:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    2fae:	2201      	movs	r2, #1
    2fb0:	4b1c      	ldr	r3, [pc, #112]	; (3024 <nm_spi_init+0xe0>)
    2fb2:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    2fb4:	4a21      	ldr	r2, [pc, #132]	; (303c <nm_spi_init+0xf8>)
    2fb6:	4922      	ldr	r1, [pc, #136]	; (3040 <nm_spi_init+0xfc>)
    2fb8:	4822      	ldr	r0, [pc, #136]	; (3044 <nm_spi_init+0x100>)
    2fba:	4b23      	ldr	r3, [pc, #140]	; (3048 <nm_spi_init+0x104>)
    2fbc:	4798      	blx	r3
    2fbe:	4823      	ldr	r0, [pc, #140]	; (304c <nm_spi_init+0x108>)
    2fc0:	4b23      	ldr	r3, [pc, #140]	; (3050 <nm_spi_init+0x10c>)
    2fc2:	4798      	blx	r3
    2fc4:	200d      	movs	r0, #13
    2fc6:	4b23      	ldr	r3, [pc, #140]	; (3054 <nm_spi_init+0x110>)
    2fc8:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    2fca:	4669      	mov	r1, sp
    2fcc:	4816      	ldr	r0, [pc, #88]	; (3028 <nm_spi_init+0xe4>)
    2fce:	4b17      	ldr	r3, [pc, #92]	; (302c <nm_spi_init+0xe8>)
    2fd0:	4798      	blx	r3
    2fd2:	1e04      	subs	r4, r0, #0
    2fd4:	d1c2      	bne.n	2f5c <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    2fd6:	4a20      	ldr	r2, [pc, #128]	; (3058 <nm_spi_init+0x114>)
    2fd8:	4919      	ldr	r1, [pc, #100]	; (3040 <nm_spi_init+0xfc>)
    2fda:	481a      	ldr	r0, [pc, #104]	; (3044 <nm_spi_init+0x100>)
    2fdc:	4b1a      	ldr	r3, [pc, #104]	; (3048 <nm_spi_init+0x104>)
    2fde:	4798      	blx	r3
    2fe0:	481e      	ldr	r0, [pc, #120]	; (305c <nm_spi_init+0x118>)
    2fe2:	4b1b      	ldr	r3, [pc, #108]	; (3050 <nm_spi_init+0x10c>)
    2fe4:	4798      	blx	r3
    2fe6:	200d      	movs	r0, #13
    2fe8:	4b1a      	ldr	r3, [pc, #104]	; (3054 <nm_spi_init+0x110>)
    2fea:	4798      	blx	r3
			return 0;
    2fec:	e7dc      	b.n	2fa8 <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    2fee:	4a1c      	ldr	r2, [pc, #112]	; (3060 <nm_spi_init+0x11c>)
    2ff0:	4913      	ldr	r1, [pc, #76]	; (3040 <nm_spi_init+0xfc>)
    2ff2:	4814      	ldr	r0, [pc, #80]	; (3044 <nm_spi_init+0x100>)
    2ff4:	4b14      	ldr	r3, [pc, #80]	; (3048 <nm_spi_init+0x104>)
    2ff6:	4798      	blx	r3
    2ff8:	481a      	ldr	r0, [pc, #104]	; (3064 <nm_spi_init+0x120>)
    2ffa:	4b15      	ldr	r3, [pc, #84]	; (3050 <nm_spi_init+0x10c>)
    2ffc:	4798      	blx	r3
    2ffe:	200d      	movs	r0, #13
    3000:	4b14      	ldr	r3, [pc, #80]	; (3054 <nm_spi_init+0x110>)
    3002:	4798      	blx	r3
			return 0;
    3004:	e7d0      	b.n	2fa8 <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    3006:	4a18      	ldr	r2, [pc, #96]	; (3068 <nm_spi_init+0x124>)
    3008:	490d      	ldr	r1, [pc, #52]	; (3040 <nm_spi_init+0xfc>)
    300a:	480e      	ldr	r0, [pc, #56]	; (3044 <nm_spi_init+0x100>)
    300c:	4b0e      	ldr	r3, [pc, #56]	; (3048 <nm_spi_init+0x104>)
    300e:	4798      	blx	r3
    3010:	4816      	ldr	r0, [pc, #88]	; (306c <nm_spi_init+0x128>)
    3012:	4b0f      	ldr	r3, [pc, #60]	; (3050 <nm_spi_init+0x10c>)
    3014:	4798      	blx	r3
    3016:	200d      	movs	r0, #13
    3018:	4b0e      	ldr	r3, [pc, #56]	; (3054 <nm_spi_init+0x110>)
    301a:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    301c:	2406      	movs	r4, #6
    301e:	4264      	negs	r4, r4
    3020:	e7c2      	b.n	2fa8 <nm_spi_init+0x64>
    3022:	46c0      	nop			; (mov r8, r8)
    3024:	2000009c 	.word	0x2000009c
    3028:	0000e824 	.word	0x0000e824
    302c:	00002d61 	.word	0x00002d61
    3030:	00002c51 	.word	0x00002c51
    3034:	00002f01 	.word	0x00002f01
    3038:	00002f2d 	.word	0x00002f2d
    303c:	000004c7 	.word	0x000004c7
    3040:	0000b0f4 	.word	0x0000b0f4
    3044:	0000a9b0 	.word	0x0000a9b0
    3048:	000095e5 	.word	0x000095e5
    304c:	0000b200 	.word	0x0000b200
    3050:	00009701 	.word	0x00009701
    3054:	00009619 	.word	0x00009619
    3058:	000004ca 	.word	0x000004ca
    305c:	0000b250 	.word	0x0000b250
    3060:	000004d4 	.word	0x000004d4
    3064:	0000b27c 	.word	0x0000b27c
    3068:	000004de 	.word	0x000004de
    306c:	0000b2b0 	.word	0x0000b2b0

00003070 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    3070:	b5f0      	push	{r4, r5, r6, r7, lr}
    3072:	46de      	mov	lr, fp
    3074:	4657      	mov	r7, sl
    3076:	464e      	mov	r6, r9
    3078:	4645      	mov	r5, r8
    307a:	b5e0      	push	{r5, r6, r7, lr}
    307c:	b087      	sub	sp, #28
    307e:	9002      	str	r0, [sp, #8]
    3080:	9103      	str	r1, [sp, #12]
    3082:	0016      	movs	r6, r2
    3084:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    3086:	2300      	movs	r3, #0
    3088:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    308a:	2400      	movs	r4, #0
    308c:	4b3e      	ldr	r3, [pc, #248]	; (3188 <nm_spi_read_block+0x118>)
    308e:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    3090:	46a9      	mov	r9, r5
    3092:	e037      	b.n	3104 <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    3094:	2301      	movs	r3, #1
    3096:	469b      	mov	fp, r3
		size = 2;
    3098:	3601      	adds	r6, #1
    309a:	e035      	b.n	3108 <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    309c:	20c8      	movs	r0, #200	; 0xc8
    309e:	4b3b      	ldr	r3, [pc, #236]	; (318c <nm_spi_read_block+0x11c>)
    30a0:	4798      	blx	r3
	if (result != N_OK) {
    30a2:	2801      	cmp	r0, #1
    30a4:	d045      	beq.n	3132 <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    30a6:	4a3a      	ldr	r2, [pc, #232]	; (3190 <nm_spi_read_block+0x120>)
    30a8:	493a      	ldr	r1, [pc, #232]	; (3194 <nm_spi_read_block+0x124>)
    30aa:	483b      	ldr	r0, [pc, #236]	; (3198 <nm_spi_read_block+0x128>)
    30ac:	4f3b      	ldr	r7, [pc, #236]	; (319c <nm_spi_read_block+0x12c>)
    30ae:	47b8      	blx	r7
    30b0:	9902      	ldr	r1, [sp, #8]
    30b2:	483b      	ldr	r0, [pc, #236]	; (31a0 <nm_spi_read_block+0x130>)
    30b4:	47b8      	blx	r7
    30b6:	200d      	movs	r0, #13
    30b8:	4b3a      	ldr	r3, [pc, #232]	; (31a4 <nm_spi_read_block+0x134>)
    30ba:	4798      	blx	r3
		nm_bsp_sleep(1);
    30bc:	2001      	movs	r0, #1
    30be:	4f3a      	ldr	r7, [pc, #232]	; (31a8 <nm_spi_read_block+0x138>)
    30c0:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    30c2:	9400      	str	r4, [sp, #0]
    30c4:	0023      	movs	r3, r4
    30c6:	0022      	movs	r2, r4
    30c8:	0021      	movs	r1, r4
    30ca:	20cf      	movs	r0, #207	; 0xcf
    30cc:	4d2e      	ldr	r5, [pc, #184]	; (3188 <nm_spi_read_block+0x118>)
    30ce:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    30d0:	20cf      	movs	r0, #207	; 0xcf
    30d2:	4b2e      	ldr	r3, [pc, #184]	; (318c <nm_spi_read_block+0x11c>)
    30d4:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    30d6:	4a35      	ldr	r2, [pc, #212]	; (31ac <nm_spi_read_block+0x13c>)
    30d8:	492e      	ldr	r1, [pc, #184]	; (3194 <nm_spi_read_block+0x124>)
    30da:	482f      	ldr	r0, [pc, #188]	; (3198 <nm_spi_read_block+0x128>)
    30dc:	4b2f      	ldr	r3, [pc, #188]	; (319c <nm_spi_read_block+0x12c>)
    30de:	469a      	mov	sl, r3
    30e0:	4798      	blx	r3
    30e2:	0033      	movs	r3, r6
    30e4:	9a02      	ldr	r2, [sp, #8]
    30e6:	4649      	mov	r1, r9
    30e8:	4831      	ldr	r0, [pc, #196]	; (31b0 <nm_spi_read_block+0x140>)
    30ea:	47d0      	blx	sl
    30ec:	200d      	movs	r0, #13
    30ee:	4b2d      	ldr	r3, [pc, #180]	; (31a4 <nm_spi_read_block+0x134>)
    30f0:	4798      	blx	r3
		nm_bsp_sleep(1);
    30f2:	2001      	movs	r0, #1
    30f4:	47b8      	blx	r7
    30f6:	2301      	movs	r3, #1
    30f8:	425b      	negs	r3, r3
    30fa:	469c      	mov	ip, r3
    30fc:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    30fe:	464b      	mov	r3, r9
    3100:	2b00      	cmp	r3, #0
    3102:	d038      	beq.n	3176 <nm_spi_read_block+0x106>
	if (size == 1)
    3104:	2e01      	cmp	r6, #1
    3106:	d0c5      	beq.n	3094 <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    3108:	9400      	str	r4, [sp, #0]
    310a:	0033      	movs	r3, r6
    310c:	0022      	movs	r2, r4
    310e:	9d02      	ldr	r5, [sp, #8]
    3110:	0029      	movs	r1, r5
    3112:	20c8      	movs	r0, #200	; 0xc8
    3114:	47c0      	blx	r8
	if (result != N_OK) {
    3116:	2801      	cmp	r0, #1
    3118:	d0c0      	beq.n	309c <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    311a:	4a26      	ldr	r2, [pc, #152]	; (31b4 <nm_spi_read_block+0x144>)
    311c:	491d      	ldr	r1, [pc, #116]	; (3194 <nm_spi_read_block+0x124>)
    311e:	481e      	ldr	r0, [pc, #120]	; (3198 <nm_spi_read_block+0x128>)
    3120:	4f1e      	ldr	r7, [pc, #120]	; (319c <nm_spi_read_block+0x12c>)
    3122:	47b8      	blx	r7
    3124:	0029      	movs	r1, r5
    3126:	4824      	ldr	r0, [pc, #144]	; (31b8 <nm_spi_read_block+0x148>)
    3128:	47b8      	blx	r7
    312a:	200d      	movs	r0, #13
    312c:	4b1d      	ldr	r3, [pc, #116]	; (31a4 <nm_spi_read_block+0x134>)
    312e:	4798      	blx	r3
    3130:	e7c4      	b.n	30bc <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    3132:	465b      	mov	r3, fp
    3134:	2b00      	cmp	r3, #0
    3136:	d016      	beq.n	3166 <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    3138:	af05      	add	r7, sp, #20
    313a:	0022      	movs	r2, r4
    313c:	0031      	movs	r1, r6
    313e:	0038      	movs	r0, r7
    3140:	4b1e      	ldr	r3, [pc, #120]	; (31bc <nm_spi_read_block+0x14c>)
    3142:	4798      	blx	r3
		buf[0] = tmp[0];
    3144:	783b      	ldrb	r3, [r7, #0]
    3146:	9a03      	ldr	r2, [sp, #12]
    3148:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    314a:	2801      	cmp	r0, #1
    314c:	d011      	beq.n	3172 <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    314e:	4a1c      	ldr	r2, [pc, #112]	; (31c0 <nm_spi_read_block+0x150>)
    3150:	4910      	ldr	r1, [pc, #64]	; (3194 <nm_spi_read_block+0x124>)
    3152:	4811      	ldr	r0, [pc, #68]	; (3198 <nm_spi_read_block+0x128>)
    3154:	4b11      	ldr	r3, [pc, #68]	; (319c <nm_spi_read_block+0x12c>)
    3156:	4798      	blx	r3
    3158:	481a      	ldr	r0, [pc, #104]	; (31c4 <nm_spi_read_block+0x154>)
    315a:	4b1b      	ldr	r3, [pc, #108]	; (31c8 <nm_spi_read_block+0x158>)
    315c:	4798      	blx	r3
    315e:	200d      	movs	r0, #13
    3160:	4b10      	ldr	r3, [pc, #64]	; (31a4 <nm_spi_read_block+0x134>)
    3162:	4798      	blx	r3
    3164:	e7aa      	b.n	30bc <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    3166:	0022      	movs	r2, r4
    3168:	0031      	movs	r1, r6
    316a:	9803      	ldr	r0, [sp, #12]
    316c:	4b13      	ldr	r3, [pc, #76]	; (31bc <nm_spi_read_block+0x14c>)
    316e:	4798      	blx	r3
    3170:	e7eb      	b.n	314a <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    3172:	2000      	movs	r0, #0
    3174:	e001      	b.n	317a <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    3176:	2006      	movs	r0, #6
    3178:	4240      	negs	r0, r0

	return s8Ret;
}
    317a:	b007      	add	sp, #28
    317c:	bc3c      	pop	{r2, r3, r4, r5}
    317e:	4690      	mov	r8, r2
    3180:	4699      	mov	r9, r3
    3182:	46a2      	mov	sl, r4
    3184:	46ab      	mov	fp, r5
    3186:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3188:	00002895 	.word	0x00002895
    318c:	00002a35 	.word	0x00002a35
    3190:	00000463 	.word	0x00000463
    3194:	0000b0e8 	.word	0x0000b0e8
    3198:	0000a9b0 	.word	0x0000a9b0
    319c:	000095e5 	.word	0x000095e5
    31a0:	0000b304 	.word	0x0000b304
    31a4:	00009619 	.word	0x00009619
    31a8:	00000ce5 	.word	0x00000ce5
    31ac:	00000484 	.word	0x00000484
    31b0:	0000b364 	.word	0x0000b364
    31b4:	0000045d 	.word	0x0000045d
    31b8:	0000b2d4 	.word	0x0000b2d4
    31bc:	00002b09 	.word	0x00002b09
    31c0:	00000473 	.word	0x00000473
    31c4:	0000b33c 	.word	0x0000b33c
    31c8:	00009701 	.word	0x00009701

000031cc <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    31cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    31ce:	46de      	mov	lr, fp
    31d0:	4647      	mov	r7, r8
    31d2:	b580      	push	{r7, lr}
    31d4:	b089      	sub	sp, #36	; 0x24
    31d6:	9004      	str	r0, [sp, #16]
    31d8:	468b      	mov	fp, r1
    31da:	9203      	str	r2, [sp, #12]
    31dc:	260a      	movs	r6, #10
    31de:	2780      	movs	r7, #128	; 0x80
    31e0:	01bf      	lsls	r7, r7, #6
    31e2:	466b      	mov	r3, sp
    31e4:	82df      	strh	r7, [r3, #22]
    31e6:	0035      	movs	r5, r6
    31e8:	e02d      	b.n	3246 <nm_spi_write_block+0x7a>
		size = 2;
    31ea:	3301      	adds	r3, #1
    31ec:	9303      	str	r3, [sp, #12]
    31ee:	e02d      	b.n	324c <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    31f0:	4a83      	ldr	r2, [pc, #524]	; (3400 <nm_spi_write_block+0x234>)
    31f2:	4984      	ldr	r1, [pc, #528]	; (3404 <nm_spi_write_block+0x238>)
    31f4:	4884      	ldr	r0, [pc, #528]	; (3408 <nm_spi_write_block+0x23c>)
    31f6:	4c85      	ldr	r4, [pc, #532]	; (340c <nm_spi_write_block+0x240>)
    31f8:	47a0      	blx	r4
    31fa:	0031      	movs	r1, r6
    31fc:	4884      	ldr	r0, [pc, #528]	; (3410 <nm_spi_write_block+0x244>)
    31fe:	47a0      	blx	r4
    3200:	200d      	movs	r0, #13
    3202:	4b84      	ldr	r3, [pc, #528]	; (3414 <nm_spi_write_block+0x248>)
    3204:	4798      	blx	r3
		nm_bsp_sleep(1);
    3206:	2001      	movs	r0, #1
    3208:	4c83      	ldr	r4, [pc, #524]	; (3418 <nm_spi_write_block+0x24c>)
    320a:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    320c:	2300      	movs	r3, #0
    320e:	9300      	str	r3, [sp, #0]
    3210:	2200      	movs	r2, #0
    3212:	2100      	movs	r1, #0
    3214:	20cf      	movs	r0, #207	; 0xcf
    3216:	4e81      	ldr	r6, [pc, #516]	; (341c <nm_spi_write_block+0x250>)
    3218:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    321a:	20cf      	movs	r0, #207	; 0xcf
    321c:	4b80      	ldr	r3, [pc, #512]	; (3420 <nm_spi_write_block+0x254>)
    321e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    3220:	4a80      	ldr	r2, [pc, #512]	; (3424 <nm_spi_write_block+0x258>)
    3222:	4978      	ldr	r1, [pc, #480]	; (3404 <nm_spi_write_block+0x238>)
    3224:	4878      	ldr	r0, [pc, #480]	; (3408 <nm_spi_write_block+0x23c>)
    3226:	4e79      	ldr	r6, [pc, #484]	; (340c <nm_spi_write_block+0x240>)
    3228:	47b0      	blx	r6
    322a:	9b03      	ldr	r3, [sp, #12]
    322c:	9a04      	ldr	r2, [sp, #16]
    322e:	0029      	movs	r1, r5
    3230:	487d      	ldr	r0, [pc, #500]	; (3428 <nm_spi_write_block+0x25c>)
    3232:	47b0      	blx	r6
    3234:	200d      	movs	r0, #13
    3236:	4b77      	ldr	r3, [pc, #476]	; (3414 <nm_spi_write_block+0x248>)
    3238:	4798      	blx	r3
		nm_bsp_sleep(1);
    323a:	2001      	movs	r0, #1
    323c:	47a0      	blx	r4
    323e:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    3240:	2d00      	cmp	r5, #0
    3242:	d100      	bne.n	3246 <nm_spi_write_block+0x7a>
    3244:	e0d5      	b.n	33f2 <nm_spi_write_block+0x226>
	if (size == 1)
    3246:	9b03      	ldr	r3, [sp, #12]
    3248:	2b01      	cmp	r3, #1
    324a:	d0ce      	beq.n	31ea <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    324c:	2300      	movs	r3, #0
    324e:	9300      	str	r3, [sp, #0]
    3250:	9b03      	ldr	r3, [sp, #12]
    3252:	2200      	movs	r2, #0
    3254:	9e04      	ldr	r6, [sp, #16]
    3256:	0031      	movs	r1, r6
    3258:	20c7      	movs	r0, #199	; 0xc7
    325a:	4c70      	ldr	r4, [pc, #448]	; (341c <nm_spi_write_block+0x250>)
    325c:	47a0      	blx	r4
	if (result != N_OK) {
    325e:	2801      	cmp	r0, #1
    3260:	d1c6      	bne.n	31f0 <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    3262:	20c7      	movs	r0, #199	; 0xc7
    3264:	4b6e      	ldr	r3, [pc, #440]	; (3420 <nm_spi_write_block+0x254>)
    3266:	4798      	blx	r3
	if (result != N_OK) {
    3268:	2801      	cmp	r0, #1
    326a:	d00c      	beq.n	3286 <nm_spi_write_block+0xba>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    326c:	22f4      	movs	r2, #244	; 0xf4
    326e:	0092      	lsls	r2, r2, #2
    3270:	4964      	ldr	r1, [pc, #400]	; (3404 <nm_spi_write_block+0x238>)
    3272:	4865      	ldr	r0, [pc, #404]	; (3408 <nm_spi_write_block+0x23c>)
    3274:	4c65      	ldr	r4, [pc, #404]	; (340c <nm_spi_write_block+0x240>)
    3276:	47a0      	blx	r4
    3278:	9904      	ldr	r1, [sp, #16]
    327a:	486c      	ldr	r0, [pc, #432]	; (342c <nm_spi_write_block+0x260>)
    327c:	47a0      	blx	r4
    327e:	200d      	movs	r0, #13
    3280:	4b64      	ldr	r3, [pc, #400]	; (3414 <nm_spi_write_block+0x248>)
    3282:	4798      	blx	r3
    3284:	e7bf      	b.n	3206 <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    3286:	2200      	movs	r2, #0
    3288:	ab07      	add	r3, sp, #28
    328a:	801a      	strh	r2, [r3, #0]
    328c:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    328e:	2600      	movs	r6, #0
				order = 0x1;
    3290:	46a8      	mov	r8, r5
    3292:	0035      	movs	r5, r6
    3294:	0026      	movs	r6, r4
    3296:	e021      	b.n	32dc <nm_spi_write_block+0x110>
				order = 0x2;
    3298:	2300      	movs	r3, #0
    329a:	42b7      	cmp	r7, r6
    329c:	415b      	adcs	r3, r3
    329e:	3302      	adds	r3, #2
		cmd |= order;
    32a0:	200b      	movs	r0, #11
    32a2:	aa04      	add	r2, sp, #16
    32a4:	4694      	mov	ip, r2
    32a6:	4460      	add	r0, ip
    32a8:	2210      	movs	r2, #16
    32aa:	4252      	negs	r2, r2
    32ac:	4313      	orrs	r3, r2
    32ae:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    32b0:	2101      	movs	r1, #1
    32b2:	4b5f      	ldr	r3, [pc, #380]	; (3430 <nm_spi_write_block+0x264>)
    32b4:	4798      	blx	r3
    32b6:	2800      	cmp	r0, #0
    32b8:	d11d      	bne.n	32f6 <nm_spi_write_block+0x12a>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    32ba:	465b      	mov	r3, fp
    32bc:	1958      	adds	r0, r3, r5
    32be:	0021      	movs	r1, r4
    32c0:	4b5b      	ldr	r3, [pc, #364]	; (3430 <nm_spi_write_block+0x264>)
    32c2:	4798      	blx	r3
    32c4:	2800      	cmp	r0, #0
    32c6:	d130      	bne.n	332a <nm_spi_write_block+0x15e>
		if (!gu8Crc_off) {
    32c8:	4b5a      	ldr	r3, [pc, #360]	; (3434 <nm_spi_write_block+0x268>)
    32ca:	781b      	ldrb	r3, [r3, #0]
    32cc:	2b00      	cmp	r3, #0
    32ce:	d039      	beq.n	3344 <nm_spi_write_block+0x178>
		ix += nbytes;
    32d0:	1965      	adds	r5, r4, r5
    32d2:	b22d      	sxth	r5, r5
		sz -= nbytes;
    32d4:	1b36      	subs	r6, r6, r4
    32d6:	b2b6      	uxth	r6, r6
	} while (sz);
    32d8:	2e00      	cmp	r6, #0
    32da:	d053      	beq.n	3384 <nm_spi_write_block+0x1b8>
    32dc:	1c34      	adds	r4, r6, #0
    32de:	42be      	cmp	r6, r7
    32e0:	d901      	bls.n	32e6 <nm_spi_write_block+0x11a>
    32e2:	466b      	mov	r3, sp
    32e4:	8adc      	ldrh	r4, [r3, #22]
    32e6:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    32e8:	2d00      	cmp	r5, #0
    32ea:	d1d5      	bne.n	3298 <nm_spi_write_block+0xcc>
				order = 0x3;
    32ec:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    32ee:	42be      	cmp	r6, r7
    32f0:	d9d6      	bls.n	32a0 <nm_spi_write_block+0xd4>
				order = 0x1;
    32f2:	3b02      	subs	r3, #2
    32f4:	e7d4      	b.n	32a0 <nm_spi_write_block+0xd4>
    32f6:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    32f8:	22d4      	movs	r2, #212	; 0xd4
    32fa:	0092      	lsls	r2, r2, #2
    32fc:	494e      	ldr	r1, [pc, #312]	; (3438 <nm_spi_write_block+0x26c>)
    32fe:	4842      	ldr	r0, [pc, #264]	; (3408 <nm_spi_write_block+0x23c>)
    3300:	4b42      	ldr	r3, [pc, #264]	; (340c <nm_spi_write_block+0x240>)
    3302:	4798      	blx	r3
    3304:	484d      	ldr	r0, [pc, #308]	; (343c <nm_spi_write_block+0x270>)
    3306:	4b4e      	ldr	r3, [pc, #312]	; (3440 <nm_spi_write_block+0x274>)
    3308:	4798      	blx	r3
    330a:	200d      	movs	r0, #13
    330c:	4b41      	ldr	r3, [pc, #260]	; (3414 <nm_spi_write_block+0x248>)
    330e:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    3310:	22f8      	movs	r2, #248	; 0xf8
    3312:	0092      	lsls	r2, r2, #2
    3314:	493b      	ldr	r1, [pc, #236]	; (3404 <nm_spi_write_block+0x238>)
    3316:	483c      	ldr	r0, [pc, #240]	; (3408 <nm_spi_write_block+0x23c>)
    3318:	4b3c      	ldr	r3, [pc, #240]	; (340c <nm_spi_write_block+0x240>)
    331a:	4798      	blx	r3
    331c:	4849      	ldr	r0, [pc, #292]	; (3444 <nm_spi_write_block+0x278>)
    331e:	4b48      	ldr	r3, [pc, #288]	; (3440 <nm_spi_write_block+0x274>)
    3320:	4798      	blx	r3
    3322:	200d      	movs	r0, #13
    3324:	4b3b      	ldr	r3, [pc, #236]	; (3414 <nm_spi_write_block+0x248>)
    3326:	4798      	blx	r3
    3328:	e76d      	b.n	3206 <nm_spi_write_block+0x3a>
    332a:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    332c:	4a46      	ldr	r2, [pc, #280]	; (3448 <nm_spi_write_block+0x27c>)
    332e:	4942      	ldr	r1, [pc, #264]	; (3438 <nm_spi_write_block+0x26c>)
    3330:	4835      	ldr	r0, [pc, #212]	; (3408 <nm_spi_write_block+0x23c>)
    3332:	4b36      	ldr	r3, [pc, #216]	; (340c <nm_spi_write_block+0x240>)
    3334:	4798      	blx	r3
    3336:	4845      	ldr	r0, [pc, #276]	; (344c <nm_spi_write_block+0x280>)
    3338:	4b41      	ldr	r3, [pc, #260]	; (3440 <nm_spi_write_block+0x274>)
    333a:	4798      	blx	r3
    333c:	200d      	movs	r0, #13
    333e:	4b35      	ldr	r3, [pc, #212]	; (3414 <nm_spi_write_block+0x248>)
    3340:	4798      	blx	r3
    3342:	e7e5      	b.n	3310 <nm_spi_write_block+0x144>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    3344:	2102      	movs	r1, #2
    3346:	a807      	add	r0, sp, #28
    3348:	4b39      	ldr	r3, [pc, #228]	; (3430 <nm_spi_write_block+0x264>)
    334a:	4798      	blx	r3
    334c:	2800      	cmp	r0, #0
    334e:	d0bf      	beq.n	32d0 <nm_spi_write_block+0x104>
    3350:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    3352:	4a3f      	ldr	r2, [pc, #252]	; (3450 <nm_spi_write_block+0x284>)
    3354:	4938      	ldr	r1, [pc, #224]	; (3438 <nm_spi_write_block+0x26c>)
    3356:	482c      	ldr	r0, [pc, #176]	; (3408 <nm_spi_write_block+0x23c>)
    3358:	4b2c      	ldr	r3, [pc, #176]	; (340c <nm_spi_write_block+0x240>)
    335a:	4798      	blx	r3
    335c:	483d      	ldr	r0, [pc, #244]	; (3454 <nm_spi_write_block+0x288>)
    335e:	4b38      	ldr	r3, [pc, #224]	; (3440 <nm_spi_write_block+0x274>)
    3360:	4798      	blx	r3
    3362:	200d      	movs	r0, #13
    3364:	4b2b      	ldr	r3, [pc, #172]	; (3414 <nm_spi_write_block+0x248>)
    3366:	4798      	blx	r3
    3368:	e7d2      	b.n	3310 <nm_spi_write_block+0x144>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    336a:	223c      	movs	r2, #60	; 0x3c
    336c:	32ff      	adds	r2, #255	; 0xff
    336e:	493a      	ldr	r1, [pc, #232]	; (3458 <nm_spi_write_block+0x28c>)
    3370:	4825      	ldr	r0, [pc, #148]	; (3408 <nm_spi_write_block+0x23c>)
    3372:	4b26      	ldr	r3, [pc, #152]	; (340c <nm_spi_write_block+0x240>)
    3374:	4798      	blx	r3
    3376:	4839      	ldr	r0, [pc, #228]	; (345c <nm_spi_write_block+0x290>)
    3378:	4b31      	ldr	r3, [pc, #196]	; (3440 <nm_spi_write_block+0x274>)
    337a:	4798      	blx	r3
    337c:	200d      	movs	r0, #13
    337e:	4b25      	ldr	r3, [pc, #148]	; (3414 <nm_spi_write_block+0x248>)
    3380:	4798      	blx	r3
    3382:	e027      	b.n	33d4 <nm_spi_write_block+0x208>
    3384:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    3386:	4b2b      	ldr	r3, [pc, #172]	; (3434 <nm_spi_write_block+0x268>)
    3388:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    338a:	1e63      	subs	r3, r4, #1
    338c:	419c      	sbcs	r4, r3
    338e:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    3390:	b2a1      	uxth	r1, r4
    3392:	a807      	add	r0, sp, #28
    3394:	4b32      	ldr	r3, [pc, #200]	; (3460 <nm_spi_write_block+0x294>)
    3396:	4798      	blx	r3
    3398:	2800      	cmp	r0, #0
    339a:	d1e6      	bne.n	336a <nm_spi_write_block+0x19e>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    339c:	ab08      	add	r3, sp, #32
    339e:	191b      	adds	r3, r3, r4
    33a0:	3b05      	subs	r3, #5
    33a2:	781b      	ldrb	r3, [r3, #0]
    33a4:	2b00      	cmp	r3, #0
    33a6:	d106      	bne.n	33b6 <nm_spi_write_block+0x1ea>
    33a8:	ab08      	add	r3, sp, #32
    33aa:	469c      	mov	ip, r3
    33ac:	4464      	add	r4, ip
    33ae:	3c06      	subs	r4, #6
    33b0:	7823      	ldrb	r3, [r4, #0]
    33b2:	2bc3      	cmp	r3, #195	; 0xc3
    33b4:	d01b      	beq.n	33ee <nm_spi_write_block+0x222>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    33b6:	22a1      	movs	r2, #161	; 0xa1
    33b8:	0052      	lsls	r2, r2, #1
    33ba:	4927      	ldr	r1, [pc, #156]	; (3458 <nm_spi_write_block+0x28c>)
    33bc:	4812      	ldr	r0, [pc, #72]	; (3408 <nm_spi_write_block+0x23c>)
    33be:	4c13      	ldr	r4, [pc, #76]	; (340c <nm_spi_write_block+0x240>)
    33c0:	47a0      	blx	r4
    33c2:	a907      	add	r1, sp, #28
    33c4:	788b      	ldrb	r3, [r1, #2]
    33c6:	784a      	ldrb	r2, [r1, #1]
    33c8:	7809      	ldrb	r1, [r1, #0]
    33ca:	4826      	ldr	r0, [pc, #152]	; (3464 <nm_spi_write_block+0x298>)
    33cc:	47a0      	blx	r4
    33ce:	200d      	movs	r0, #13
    33d0:	4b10      	ldr	r3, [pc, #64]	; (3414 <nm_spi_write_block+0x248>)
    33d2:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    33d4:	22fa      	movs	r2, #250	; 0xfa
    33d6:	0092      	lsls	r2, r2, #2
    33d8:	490a      	ldr	r1, [pc, #40]	; (3404 <nm_spi_write_block+0x238>)
    33da:	480b      	ldr	r0, [pc, #44]	; (3408 <nm_spi_write_block+0x23c>)
    33dc:	4b0b      	ldr	r3, [pc, #44]	; (340c <nm_spi_write_block+0x240>)
    33de:	4798      	blx	r3
    33e0:	4818      	ldr	r0, [pc, #96]	; (3444 <nm_spi_write_block+0x278>)
    33e2:	4b17      	ldr	r3, [pc, #92]	; (3440 <nm_spi_write_block+0x274>)
    33e4:	4798      	blx	r3
    33e6:	200d      	movs	r0, #13
    33e8:	4b0a      	ldr	r3, [pc, #40]	; (3414 <nm_spi_write_block+0x248>)
    33ea:	4798      	blx	r3
    33ec:	e70b      	b.n	3206 <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    33ee:	2000      	movs	r0, #0
    33f0:	e001      	b.n	33f6 <nm_spi_write_block+0x22a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    33f2:	2006      	movs	r0, #6
    33f4:	4240      	negs	r0, r0

	return s8Ret;
}
    33f6:	b009      	add	sp, #36	; 0x24
    33f8:	bc0c      	pop	{r2, r3}
    33fa:	4690      	mov	r8, r2
    33fc:	469b      	mov	fp, r3
    33fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3400:	000003ca 	.word	0x000003ca
    3404:	0000b0c8 	.word	0x0000b0c8
    3408:	0000a9b0 	.word	0x0000a9b0
    340c:	000095e5 	.word	0x000095e5
    3410:	0000b380 	.word	0x0000b380
    3414:	00009619 	.word	0x00009619
    3418:	00000ce5 	.word	0x00000ce5
    341c:	00002895 	.word	0x00002895
    3420:	00002a35 	.word	0x00002a35
    3424:	000003f2 	.word	0x000003f2
    3428:	0000b364 	.word	0x0000b364
    342c:	0000b3b0 	.word	0x0000b3b0
    3430:	00002875 	.word	0x00002875
    3434:	2000009c 	.word	0x2000009c
    3438:	0000b0a8 	.word	0x0000b0a8
    343c:	0000b3e8 	.word	0x0000b3e8
    3440:	00009701 	.word	0x00009701
    3444:	0000b4dc 	.word	0x0000b4dc
    3448:	00000359 	.word	0x00000359
    344c:	0000b420 	.word	0x0000b420
    3450:	00000363 	.word	0x00000363
    3454:	0000b454 	.word	0x0000b454
    3458:	0000b07c 	.word	0x0000b07c
    345c:	0000b48c 	.word	0x0000b48c
    3460:	00002a15 	.word	0x00002a15
    3464:	0000b4ac 	.word	0x0000b4ac

00003468 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    3468:	b5f0      	push	{r4, r5, r6, r7, lr}
    346a:	46de      	mov	lr, fp
    346c:	4657      	mov	r7, sl
    346e:	464e      	mov	r6, r9
    3470:	4645      	mov	r5, r8
    3472:	b5e0      	push	{r5, r6, r7, lr}
    3474:	b085      	sub	sp, #20
    3476:	9001      	str	r0, [sp, #4]
    3478:	000e      	movs	r6, r1
    347a:	9202      	str	r2, [sp, #8]
    347c:	001d      	movs	r5, r3
    347e:	ab0e      	add	r3, sp, #56	; 0x38
    3480:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    3482:	2c00      	cmp	r4, #0
    3484:	d064      	beq.n	3550 <Socket_ReadSocketData+0xe8>
    3486:	0103      	lsls	r3, r0, #4
    3488:	4935      	ldr	r1, [pc, #212]	; (3560 <Socket_ReadSocketData+0xf8>)
    348a:	585b      	ldr	r3, [r3, r1]
    348c:	2b00      	cmp	r3, #0
    348e:	d05f      	beq.n	3550 <Socket_ReadSocketData+0xe8>
    3490:	0101      	lsls	r1, r0, #4
    3492:	4b33      	ldr	r3, [pc, #204]	; (3560 <Socket_ReadSocketData+0xf8>)
    3494:	185b      	adds	r3, r3, r1
    3496:	889b      	ldrh	r3, [r3, #4]
    3498:	b29b      	uxth	r3, r3
    349a:	2b00      	cmp	r3, #0
    349c:	d058      	beq.n	3550 <Socket_ReadSocketData+0xe8>
    349e:	4b30      	ldr	r3, [pc, #192]	; (3560 <Socket_ReadSocketData+0xf8>)
    34a0:	185b      	adds	r3, r3, r1
    34a2:	7a9b      	ldrb	r3, [r3, #10]
    34a4:	2b01      	cmp	r3, #1
    34a6:	d153      	bne.n	3550 <Socket_ReadSocketData+0xe8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    34a8:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    34aa:	4b2d      	ldr	r3, [pc, #180]	; (3560 <Socket_ReadSocketData+0xf8>)
    34ac:	469b      	mov	fp, r3
    34ae:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    34b0:	465b      	mov	r3, fp
    34b2:	220a      	movs	r2, #10
    34b4:	4690      	mov	r8, r2
    34b6:	44d8      	add	r8, fp
    34b8:	468a      	mov	sl, r1
    34ba:	9500      	str	r5, [sp, #0]
    34bc:	9303      	str	r3, [sp, #12]
    34be:	e015      	b.n	34ec <Socket_ReadSocketData+0x84>
    34c0:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    34c2:	2301      	movs	r3, #1
    34c4:	e01c      	b.n	3500 <Socket_ReadSocketData+0x98>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    34c6:	3301      	adds	r3, #1
    34c8:	2200      	movs	r2, #0
    34ca:	2100      	movs	r1, #0
    34cc:	2000      	movs	r0, #0
    34ce:	4c25      	ldr	r4, [pc, #148]	; (3564 <Socket_ReadSocketData+0xfc>)
    34d0:	47a0      	blx	r4
    34d2:	e03d      	b.n	3550 <Socket_ReadSocketData+0xe8>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    34d4:	4824      	ldr	r0, [pc, #144]	; (3568 <Socket_ReadSocketData+0x100>)
    34d6:	4d25      	ldr	r5, [pc, #148]	; (356c <Socket_ReadSocketData+0x104>)
    34d8:	47a8      	blx	r5
    34da:	0021      	movs	r1, r4
    34dc:	4824      	ldr	r0, [pc, #144]	; (3570 <Socket_ReadSocketData+0x108>)
    34de:	47a8      	blx	r5
    34e0:	200d      	movs	r0, #13
    34e2:	4b24      	ldr	r3, [pc, #144]	; (3574 <Socket_ReadSocketData+0x10c>)
    34e4:	4798      	blx	r3
				break;
    34e6:	e033      	b.n	3550 <Socket_ReadSocketData+0xe8>
			}
		}while(u16ReadCount != 0);
    34e8:	2c00      	cmp	r4, #0
    34ea:	d031      	beq.n	3550 <Socket_ReadSocketData+0xe8>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    34ec:	465b      	mov	r3, fp
    34ee:	889b      	ldrh	r3, [r3, #4]
    34f0:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    34f2:	b21b      	sxth	r3, r3
    34f4:	2b00      	cmp	r3, #0
    34f6:	dde3      	ble.n	34c0 <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    34f8:	9b03      	ldr	r3, [sp, #12]
    34fa:	889d      	ldrh	r5, [r3, #4]
    34fc:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    34fe:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    3500:	4a17      	ldr	r2, [pc, #92]	; (3560 <Socket_ReadSocketData+0xf8>)
    3502:	4651      	mov	r1, sl
    3504:	5889      	ldr	r1, [r1, r2]
    3506:	002a      	movs	r2, r5
    3508:	9800      	ldr	r0, [sp, #0]
    350a:	4f16      	ldr	r7, [pc, #88]	; (3564 <Socket_ReadSocketData+0xfc>)
    350c:	47b8      	blx	r7
    350e:	2800      	cmp	r0, #0
    3510:	d1e0      	bne.n	34d4 <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    3512:	4b13      	ldr	r3, [pc, #76]	; (3560 <Socket_ReadSocketData+0xf8>)
    3514:	4652      	mov	r2, sl
    3516:	58d3      	ldr	r3, [r2, r3]
    3518:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    351a:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    351c:	88f3      	ldrh	r3, [r6, #6]
    351e:	1b5b      	subs	r3, r3, r5
    3520:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    3522:	4b15      	ldr	r3, [pc, #84]	; (3578 <Socket_ReadSocketData+0x110>)
    3524:	681b      	ldr	r3, [r3, #0]
    3526:	2b00      	cmp	r3, #0
    3528:	d005      	beq.n	3536 <Socket_ReadSocketData+0xce>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    352a:	4b13      	ldr	r3, [pc, #76]	; (3578 <Socket_ReadSocketData+0x110>)
    352c:	681b      	ldr	r3, [r3, #0]
    352e:	0032      	movs	r2, r6
    3530:	9902      	ldr	r1, [sp, #8]
    3532:	9801      	ldr	r0, [sp, #4]
    3534:	4798      	blx	r3
				u16ReadCount -= u16Read;
    3536:	1b64      	subs	r4, r4, r5
    3538:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    353a:	9b00      	ldr	r3, [sp, #0]
    353c:	469c      	mov	ip, r3
    353e:	44ac      	add	ip, r5
    3540:	4663      	mov	r3, ip
    3542:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    3544:	4643      	mov	r3, r8
    3546:	781b      	ldrb	r3, [r3, #0]
    3548:	2b00      	cmp	r3, #0
    354a:	d1cd      	bne.n	34e8 <Socket_ReadSocketData+0x80>
    354c:	2c00      	cmp	r4, #0
    354e:	d1ba      	bne.n	34c6 <Socket_ReadSocketData+0x5e>
	}
}
    3550:	b005      	add	sp, #20
    3552:	bc3c      	pop	{r2, r3, r4, r5}
    3554:	4690      	mov	r8, r2
    3556:	4699      	mov	r9, r3
    3558:	46a2      	mov	sl, r4
    355a:	46ab      	mov	fp, r5
    355c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    355e:	46c0      	nop			; (mov r8, r8)
    3560:	200002e4 	.word	0x200002e4
    3564:	00001809 	.word	0x00001809
    3568:	0000ace0 	.word	0x0000ace0
    356c:	000095e5 	.word	0x000095e5
    3570:	0000b744 	.word	0x0000b744
    3574:	00009619 	.word	0x00009619
    3578:	20000394 	.word	0x20000394

0000357c <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    357c:	b5f0      	push	{r4, r5, r6, r7, lr}
    357e:	46d6      	mov	lr, sl
    3580:	464f      	mov	r7, r9
    3582:	4646      	mov	r6, r8
    3584:	b5c0      	push	{r6, r7, lr}
    3586:	b09a      	sub	sp, #104	; 0x68
    3588:	000d      	movs	r5, r1
    358a:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    358c:	2841      	cmp	r0, #65	; 0x41
    358e:	d039      	beq.n	3604 <m2m_ip_cb+0x88>
    3590:	2854      	cmp	r0, #84	; 0x54
    3592:	d037      	beq.n	3604 <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    3594:	2842      	cmp	r0, #66	; 0x42
    3596:	d053      	beq.n	3640 <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    3598:	2843      	cmp	r0, #67	; 0x43
    359a:	d06a      	beq.n	3672 <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    359c:	2844      	cmp	r0, #68	; 0x44
    359e:	d100      	bne.n	35a2 <m2m_ip_cb+0x26>
    35a0:	e0af      	b.n	3702 <m2m_ip_cb+0x186>
    35a2:	284b      	cmp	r0, #75	; 0x4b
    35a4:	d100      	bne.n	35a8 <m2m_ip_cb+0x2c>
    35a6:	e0ac      	b.n	3702 <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    35a8:	284a      	cmp	r0, #74	; 0x4a
    35aa:	d100      	bne.n	35ae <m2m_ip_cb+0x32>
    35ac:	e0cf      	b.n	374e <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    35ae:	2846      	cmp	r0, #70	; 0x46
    35b0:	d100      	bne.n	35b4 <m2m_ip_cb+0x38>
    35b2:	e0e5      	b.n	3780 <m2m_ip_cb+0x204>
    35b4:	2848      	cmp	r0, #72	; 0x48
    35b6:	d100      	bne.n	35ba <m2m_ip_cb+0x3e>
    35b8:	e10e      	b.n	37d8 <m2m_ip_cb+0x25c>
    35ba:	284d      	cmp	r0, #77	; 0x4d
    35bc:	d100      	bne.n	35c0 <m2m_ip_cb+0x44>
    35be:	e0dc      	b.n	377a <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    35c0:	2845      	cmp	r0, #69	; 0x45
    35c2:	d100      	bne.n	35c6 <m2m_ip_cb+0x4a>
    35c4:	e12c      	b.n	3820 <m2m_ip_cb+0x2a4>
    35c6:	2847      	cmp	r0, #71	; 0x47
    35c8:	d100      	bne.n	35cc <m2m_ip_cb+0x50>
    35ca:	e14d      	b.n	3868 <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    35cc:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    35ce:	284c      	cmp	r0, #76	; 0x4c
    35d0:	d100      	bne.n	35d4 <m2m_ip_cb+0x58>
    35d2:	e126      	b.n	3822 <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    35d4:	2852      	cmp	r0, #82	; 0x52
    35d6:	d12d      	bne.n	3634 <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    35d8:	2301      	movs	r3, #1
    35da:	2214      	movs	r2, #20
    35dc:	a909      	add	r1, sp, #36	; 0x24
    35de:	0020      	movs	r0, r4
    35e0:	4ca2      	ldr	r4, [pc, #648]	; (386c <m2m_ip_cb+0x2f0>)
    35e2:	47a0      	blx	r4
    35e4:	2800      	cmp	r0, #0
    35e6:	d125      	bne.n	3634 <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    35e8:	4ba1      	ldr	r3, [pc, #644]	; (3870 <m2m_ip_cb+0x2f4>)
    35ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    35ec:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    35ee:	681b      	ldr	r3, [r3, #0]
    35f0:	2b00      	cmp	r3, #0
    35f2:	d01f      	beq.n	3634 <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    35f4:	4b9e      	ldr	r3, [pc, #632]	; (3870 <m2m_ip_cb+0x2f4>)
    35f6:	681c      	ldr	r4, [r3, #0]
    35f8:	ab09      	add	r3, sp, #36	; 0x24
    35fa:	7c1a      	ldrb	r2, [r3, #16]
    35fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
    35fe:	9809      	ldr	r0, [sp, #36]	; 0x24
    3600:	47a0      	blx	r4
			}
		}
	}
}
    3602:	e017      	b.n	3634 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    3604:	2300      	movs	r3, #0
    3606:	2204      	movs	r2, #4
    3608:	a909      	add	r1, sp, #36	; 0x24
    360a:	0020      	movs	r0, r4
    360c:	4c97      	ldr	r4, [pc, #604]	; (386c <m2m_ip_cb+0x2f0>)
    360e:	47a0      	blx	r4
    3610:	2800      	cmp	r0, #0
    3612:	d10f      	bne.n	3634 <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    3614:	ab09      	add	r3, sp, #36	; 0x24
    3616:	785a      	ldrb	r2, [r3, #1]
    3618:	ab05      	add	r3, sp, #20
    361a:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    361c:	4b95      	ldr	r3, [pc, #596]	; (3874 <m2m_ip_cb+0x2f8>)
    361e:	681b      	ldr	r3, [r3, #0]
    3620:	2b00      	cmp	r3, #0
    3622:	d007      	beq.n	3634 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    3624:	4b93      	ldr	r3, [pc, #588]	; (3874 <m2m_ip_cb+0x2f8>)
    3626:	681b      	ldr	r3, [r3, #0]
    3628:	aa09      	add	r2, sp, #36	; 0x24
    362a:	2000      	movs	r0, #0
    362c:	5610      	ldrsb	r0, [r2, r0]
    362e:	aa05      	add	r2, sp, #20
    3630:	2101      	movs	r1, #1
    3632:	4798      	blx	r3
}
    3634:	b01a      	add	sp, #104	; 0x68
    3636:	bc1c      	pop	{r2, r3, r4}
    3638:	4690      	mov	r8, r2
    363a:	4699      	mov	r9, r3
    363c:	46a2      	mov	sl, r4
    363e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    3640:	2300      	movs	r3, #0
    3642:	2204      	movs	r2, #4
    3644:	a909      	add	r1, sp, #36	; 0x24
    3646:	0020      	movs	r0, r4
    3648:	4c88      	ldr	r4, [pc, #544]	; (386c <m2m_ip_cb+0x2f0>)
    364a:	47a0      	blx	r4
    364c:	2800      	cmp	r0, #0
    364e:	d1f1      	bne.n	3634 <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    3650:	ab09      	add	r3, sp, #36	; 0x24
    3652:	785a      	ldrb	r2, [r3, #1]
    3654:	ab05      	add	r3, sp, #20
    3656:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    3658:	4b86      	ldr	r3, [pc, #536]	; (3874 <m2m_ip_cb+0x2f8>)
    365a:	681b      	ldr	r3, [r3, #0]
    365c:	2b00      	cmp	r3, #0
    365e:	d0e9      	beq.n	3634 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    3660:	4b84      	ldr	r3, [pc, #528]	; (3874 <m2m_ip_cb+0x2f8>)
    3662:	681b      	ldr	r3, [r3, #0]
    3664:	aa09      	add	r2, sp, #36	; 0x24
    3666:	2000      	movs	r0, #0
    3668:	5610      	ldrsb	r0, [r2, r0]
    366a:	aa05      	add	r2, sp, #20
    366c:	2102      	movs	r1, #2
    366e:	4798      	blx	r3
    3670:	e7e0      	b.n	3634 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    3672:	2300      	movs	r3, #0
    3674:	220c      	movs	r2, #12
    3676:	a905      	add	r1, sp, #20
    3678:	0020      	movs	r0, r4
    367a:	4c7c      	ldr	r4, [pc, #496]	; (386c <m2m_ip_cb+0x2f0>)
    367c:	47a0      	blx	r4
    367e:	2800      	cmp	r0, #0
    3680:	d1d8      	bne.n	3634 <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    3682:	ab05      	add	r3, sp, #20
    3684:	2209      	movs	r2, #9
    3686:	569a      	ldrsb	r2, [r3, r2]
    3688:	2a00      	cmp	r2, #0
    368a:	db24      	blt.n	36d6 <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    368c:	0018      	movs	r0, r3
    368e:	2108      	movs	r1, #8
    3690:	5659      	ldrsb	r1, [r3, r1]
    3692:	4b79      	ldr	r3, [pc, #484]	; (3878 <m2m_ip_cb+0x2fc>)
    3694:	0109      	lsls	r1, r1, #4
    3696:	1859      	adds	r1, r3, r1
    3698:	7ac9      	ldrb	r1, [r1, #11]
    369a:	b2c9      	uxtb	r1, r1
    369c:	0114      	lsls	r4, r2, #4
    369e:	191b      	adds	r3, r3, r4
    36a0:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    36a2:	2101      	movs	r1, #1
    36a4:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    36a6:	8941      	ldrh	r1, [r0, #10]
    36a8:	3908      	subs	r1, #8
    36aa:	b289      	uxth	r1, r1
    36ac:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    36ae:	4973      	ldr	r1, [pc, #460]	; (387c <m2m_ip_cb+0x300>)
    36b0:	880b      	ldrh	r3, [r1, #0]
    36b2:	3301      	adds	r3, #1
    36b4:	b29b      	uxth	r3, r3
    36b6:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    36b8:	880b      	ldrh	r3, [r1, #0]
    36ba:	b29b      	uxth	r3, r3
    36bc:	2b00      	cmp	r3, #0
    36be:	d103      	bne.n	36c8 <m2m_ip_cb+0x14c>
					++gu16SessionID;
    36c0:	880b      	ldrh	r3, [r1, #0]
    36c2:	3301      	adds	r3, #1
    36c4:	b29b      	uxth	r3, r3
    36c6:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    36c8:	4b6c      	ldr	r3, [pc, #432]	; (387c <m2m_ip_cb+0x300>)
    36ca:	8819      	ldrh	r1, [r3, #0]
    36cc:	b289      	uxth	r1, r1
    36ce:	0110      	lsls	r0, r2, #4
    36d0:	4b69      	ldr	r3, [pc, #420]	; (3878 <m2m_ip_cb+0x2fc>)
    36d2:	181b      	adds	r3, r3, r0
    36d4:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    36d6:	ab09      	add	r3, sp, #36	; 0x24
    36d8:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    36da:	2202      	movs	r2, #2
    36dc:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    36de:	aa05      	add	r2, sp, #20
    36e0:	8851      	ldrh	r1, [r2, #2]
    36e2:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    36e4:	9a06      	ldr	r2, [sp, #24]
    36e6:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    36e8:	4b62      	ldr	r3, [pc, #392]	; (3874 <m2m_ip_cb+0x2f8>)
    36ea:	681b      	ldr	r3, [r3, #0]
    36ec:	2b00      	cmp	r3, #0
    36ee:	d0a1      	beq.n	3634 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    36f0:	4b60      	ldr	r3, [pc, #384]	; (3874 <m2m_ip_cb+0x2f8>)
    36f2:	681b      	ldr	r3, [r3, #0]
    36f4:	aa05      	add	r2, sp, #20
    36f6:	2008      	movs	r0, #8
    36f8:	5610      	ldrsb	r0, [r2, r0]
    36fa:	aa09      	add	r2, sp, #36	; 0x24
    36fc:	2104      	movs	r1, #4
    36fe:	4798      	blx	r3
    3700:	e798      	b.n	3634 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    3702:	2300      	movs	r3, #0
    3704:	2204      	movs	r2, #4
    3706:	a909      	add	r1, sp, #36	; 0x24
    3708:	0020      	movs	r0, r4
    370a:	4c58      	ldr	r4, [pc, #352]	; (386c <m2m_ip_cb+0x2f0>)
    370c:	47a0      	blx	r4
    370e:	2800      	cmp	r0, #0
    3710:	d000      	beq.n	3714 <m2m_ip_cb+0x198>
    3712:	e78f      	b.n	3634 <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    3714:	ab09      	add	r3, sp, #36	; 0x24
    3716:	2000      	movs	r0, #0
    3718:	5618      	ldrsb	r0, [r3, r0]
    371a:	aa05      	add	r2, sp, #20
    371c:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    371e:	785b      	ldrb	r3, [r3, #1]
    3720:	b25b      	sxtb	r3, r3
    3722:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    3724:	2b00      	cmp	r3, #0
    3726:	d107      	bne.n	3738 <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    3728:	ab09      	add	r3, sp, #36	; 0x24
    372a:	885b      	ldrh	r3, [r3, #2]
    372c:	3b08      	subs	r3, #8
    372e:	b29b      	uxth	r3, r3
    3730:	0101      	lsls	r1, r0, #4
    3732:	4a51      	ldr	r2, [pc, #324]	; (3878 <m2m_ip_cb+0x2fc>)
    3734:	1852      	adds	r2, r2, r1
    3736:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    3738:	4b4e      	ldr	r3, [pc, #312]	; (3874 <m2m_ip_cb+0x2f8>)
    373a:	681b      	ldr	r3, [r3, #0]
    373c:	2b00      	cmp	r3, #0
    373e:	d100      	bne.n	3742 <m2m_ip_cb+0x1c6>
    3740:	e778      	b.n	3634 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    3742:	4b4c      	ldr	r3, [pc, #304]	; (3874 <m2m_ip_cb+0x2f8>)
    3744:	681b      	ldr	r3, [r3, #0]
    3746:	aa05      	add	r2, sp, #20
    3748:	2105      	movs	r1, #5
    374a:	4798      	blx	r3
	{
    374c:	e772      	b.n	3634 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    374e:	2300      	movs	r3, #0
    3750:	2244      	movs	r2, #68	; 0x44
    3752:	a909      	add	r1, sp, #36	; 0x24
    3754:	0020      	movs	r0, r4
    3756:	4c45      	ldr	r4, [pc, #276]	; (386c <m2m_ip_cb+0x2f0>)
    3758:	47a0      	blx	r4
    375a:	2800      	cmp	r0, #0
    375c:	d000      	beq.n	3760 <m2m_ip_cb+0x1e4>
    375e:	e769      	b.n	3634 <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    3760:	4b47      	ldr	r3, [pc, #284]	; (3880 <m2m_ip_cb+0x304>)
    3762:	681b      	ldr	r3, [r3, #0]
    3764:	2b00      	cmp	r3, #0
    3766:	d100      	bne.n	376a <m2m_ip_cb+0x1ee>
    3768:	e764      	b.n	3634 <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    376a:	4b45      	ldr	r3, [pc, #276]	; (3880 <m2m_ip_cb+0x304>)
    376c:	681b      	ldr	r3, [r3, #0]
    376e:	9a19      	ldr	r2, [sp, #100]	; 0x64
    3770:	9203      	str	r2, [sp, #12]
    3772:	0011      	movs	r1, r2
    3774:	a809      	add	r0, sp, #36	; 0x24
    3776:	4798      	blx	r3
    3778:	e75c      	b.n	3634 <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    377a:	2306      	movs	r3, #6
    377c:	469a      	mov	sl, r3
    377e:	e001      	b.n	3784 <m2m_ip_cb+0x208>
    3780:	2306      	movs	r3, #6
    3782:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    3784:	2300      	movs	r3, #0
    3786:	2210      	movs	r2, #16
    3788:	a905      	add	r1, sp, #20
    378a:	0020      	movs	r0, r4
    378c:	4f37      	ldr	r7, [pc, #220]	; (386c <m2m_ip_cb+0x2f0>)
    378e:	47b8      	blx	r7
    3790:	2800      	cmp	r0, #0
    3792:	d000      	beq.n	3796 <m2m_ip_cb+0x21a>
    3794:	e74e      	b.n	3634 <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    3796:	aa05      	add	r2, sp, #20
    3798:	200c      	movs	r0, #12
    379a:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    379c:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    379e:	0107      	lsls	r7, r0, #4
    37a0:	4935      	ldr	r1, [pc, #212]	; (3878 <m2m_ip_cb+0x2fc>)
    37a2:	19c9      	adds	r1, r1, r7
    37a4:	2700      	movs	r7, #0
    37a6:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    37a8:	2608      	movs	r6, #8
    37aa:	5f97      	ldrsh	r7, [r2, r6]
    37ac:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    37ae:	8957      	ldrh	r7, [r2, #10]
    37b0:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    37b2:	af09      	add	r7, sp, #36	; 0x24
    37b4:	8856      	ldrh	r6, [r2, #2]
    37b6:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    37b8:	9a06      	ldr	r2, [sp, #24]
    37ba:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    37bc:	88ca      	ldrh	r2, [r1, #6]
    37be:	b292      	uxth	r2, r2
    37c0:	4293      	cmp	r3, r2
    37c2:	d00c      	beq.n	37de <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    37c4:	2d10      	cmp	r5, #16
    37c6:	d800      	bhi.n	37ca <m2m_ip_cb+0x24e>
    37c8:	e734      	b.n	3634 <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    37ca:	2301      	movs	r3, #1
    37cc:	2200      	movs	r2, #0
    37ce:	2100      	movs	r1, #0
    37d0:	2000      	movs	r0, #0
    37d2:	4c26      	ldr	r4, [pc, #152]	; (386c <m2m_ip_cb+0x2f0>)
    37d4:	47a0      	blx	r4
	{
    37d6:	e72d      	b.n	3634 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    37d8:	2309      	movs	r3, #9
    37da:	469a      	mov	sl, r3
    37dc:	e7d2      	b.n	3784 <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    37de:	4643      	mov	r3, r8
    37e0:	2b00      	cmp	r3, #0
    37e2:	dd01      	ble.n	37e8 <m2m_ip_cb+0x26c>
    37e4:	45a8      	cmp	r8, r5
    37e6:	db0f      	blt.n	3808 <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    37e8:	ab09      	add	r3, sp, #36	; 0x24
    37ea:	4642      	mov	r2, r8
    37ec:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    37ee:	2300      	movs	r3, #0
    37f0:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    37f2:	4b20      	ldr	r3, [pc, #128]	; (3874 <m2m_ip_cb+0x2f8>)
    37f4:	681b      	ldr	r3, [r3, #0]
    37f6:	2b00      	cmp	r3, #0
    37f8:	d100      	bne.n	37fc <m2m_ip_cb+0x280>
    37fa:	e71b      	b.n	3634 <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    37fc:	4b1d      	ldr	r3, [pc, #116]	; (3874 <m2m_ip_cb+0x2f8>)
    37fe:	681b      	ldr	r3, [r3, #0]
    3800:	aa09      	add	r2, sp, #36	; 0x24
    3802:	4651      	mov	r1, sl
    3804:	4798      	blx	r3
    3806:	e715      	b.n	3634 <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    3808:	0023      	movs	r3, r4
    380a:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    380c:	4642      	mov	r2, r8
    380e:	4669      	mov	r1, sp
    3810:	818a      	strh	r2, [r1, #12]
    3812:	898a      	ldrh	r2, [r1, #12]
    3814:	9200      	str	r2, [sp, #0]
    3816:	4652      	mov	r2, sl
    3818:	0039      	movs	r1, r7
    381a:	4c1a      	ldr	r4, [pc, #104]	; (3884 <m2m_ip_cb+0x308>)
    381c:	47a0      	blx	r4
    381e:	e709      	b.n	3634 <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    3820:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    3822:	2300      	movs	r3, #0
    3824:	2208      	movs	r2, #8
    3826:	a909      	add	r1, sp, #36	; 0x24
    3828:	0020      	movs	r0, r4
    382a:	4c10      	ldr	r4, [pc, #64]	; (386c <m2m_ip_cb+0x2f0>)
    382c:	47a0      	blx	r4
    382e:	2800      	cmp	r0, #0
    3830:	d000      	beq.n	3834 <m2m_ip_cb+0x2b8>
    3832:	e6ff      	b.n	3634 <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    3834:	ab09      	add	r3, sp, #36	; 0x24
    3836:	2000      	movs	r0, #0
    3838:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    383a:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    383c:	8859      	ldrh	r1, [r3, #2]
    383e:	ab05      	add	r3, sp, #20
    3840:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    3842:	0101      	lsls	r1, r0, #4
    3844:	4b0c      	ldr	r3, [pc, #48]	; (3878 <m2m_ip_cb+0x2fc>)
    3846:	185b      	adds	r3, r3, r1
    3848:	88db      	ldrh	r3, [r3, #6]
    384a:	b29b      	uxth	r3, r3
    384c:	429a      	cmp	r2, r3
    384e:	d000      	beq.n	3852 <m2m_ip_cb+0x2d6>
    3850:	e6f0      	b.n	3634 <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    3852:	4b08      	ldr	r3, [pc, #32]	; (3874 <m2m_ip_cb+0x2f8>)
    3854:	681b      	ldr	r3, [r3, #0]
    3856:	2b00      	cmp	r3, #0
    3858:	d100      	bne.n	385c <m2m_ip_cb+0x2e0>
    385a:	e6eb      	b.n	3634 <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    385c:	4b05      	ldr	r3, [pc, #20]	; (3874 <m2m_ip_cb+0x2f8>)
    385e:	681b      	ldr	r3, [r3, #0]
    3860:	aa05      	add	r2, sp, #20
    3862:	0029      	movs	r1, r5
    3864:	4798      	blx	r3
	{
    3866:	e6e5      	b.n	3634 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    3868:	2508      	movs	r5, #8
    386a:	e7da      	b.n	3822 <m2m_ip_cb+0x2a6>
    386c:	00001809 	.word	0x00001809
    3870:	20000398 	.word	0x20000398
    3874:	20000394 	.word	0x20000394
    3878:	200002e4 	.word	0x200002e4
    387c:	2000009e 	.word	0x2000009e
    3880:	2000039c 	.word	0x2000039c
    3884:	00003469 	.word	0x00003469

00003888 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    3888:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    388a:	4b0a      	ldr	r3, [pc, #40]	; (38b4 <socketInit+0x2c>)
    388c:	781b      	ldrb	r3, [r3, #0]
    388e:	2b00      	cmp	r3, #0
    3890:	d000      	beq.n	3894 <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    3892:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    3894:	22b0      	movs	r2, #176	; 0xb0
    3896:	2100      	movs	r1, #0
    3898:	4807      	ldr	r0, [pc, #28]	; (38b8 <socketInit+0x30>)
    389a:	4b08      	ldr	r3, [pc, #32]	; (38bc <socketInit+0x34>)
    389c:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    389e:	4908      	ldr	r1, [pc, #32]	; (38c0 <socketInit+0x38>)
    38a0:	2002      	movs	r0, #2
    38a2:	4b08      	ldr	r3, [pc, #32]	; (38c4 <socketInit+0x3c>)
    38a4:	4798      	blx	r3
		gbSocketInit	= 1;
    38a6:	2201      	movs	r2, #1
    38a8:	4b02      	ldr	r3, [pc, #8]	; (38b4 <socketInit+0x2c>)
    38aa:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    38ac:	2200      	movs	r2, #0
    38ae:	4b06      	ldr	r3, [pc, #24]	; (38c8 <socketInit+0x40>)
    38b0:	801a      	strh	r2, [r3, #0]
}
    38b2:	e7ee      	b.n	3892 <socketInit+0xa>
    38b4:	2000009d 	.word	0x2000009d
    38b8:	200002e4 	.word	0x200002e4
    38bc:	000010e9 	.word	0x000010e9
    38c0:	0000357d 	.word	0x0000357d
    38c4:	000018f5 	.word	0x000018f5
    38c8:	2000009e 	.word	0x2000009e

000038cc <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    38cc:	4b02      	ldr	r3, [pc, #8]	; (38d8 <registerSocketCallback+0xc>)
    38ce:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    38d0:	4b02      	ldr	r3, [pc, #8]	; (38dc <registerSocketCallback+0x10>)
    38d2:	6019      	str	r1, [r3, #0]
}
    38d4:	4770      	bx	lr
    38d6:	46c0      	nop			; (mov r8, r8)
    38d8:	20000394 	.word	0x20000394
    38dc:	2000039c 	.word	0x2000039c

000038e0 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    38e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    38e2:	46d6      	mov	lr, sl
    38e4:	4647      	mov	r7, r8
    38e6:	b580      	push	{r7, lr}
    38e8:	b089      	sub	sp, #36	; 0x24
    38ea:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    38ec:	2802      	cmp	r0, #2
    38ee:	d000      	beq.n	38f2 <socket+0x12>
    38f0:	e09c      	b.n	3a2c <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    38f2:	2901      	cmp	r1, #1
    38f4:	d00a      	beq.n	390c <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    38f6:	2902      	cmp	r1, #2
    38f8:	d100      	bne.n	38fc <socket+0x1c>
    38fa:	e070      	b.n	39de <socket+0xfe>
	SOCKET					sock = -1;
    38fc:	2501      	movs	r5, #1
    38fe:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    3900:	0028      	movs	r0, r5
    3902:	b009      	add	sp, #36	; 0x24
    3904:	bc0c      	pop	{r2, r3}
    3906:	4690      	mov	r8, r2
    3908:	469a      	mov	sl, r3
    390a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    390c:	4c49      	ldr	r4, [pc, #292]	; (3a34 <socket+0x154>)
    390e:	7827      	ldrb	r7, [r4, #0]
    3910:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    3912:	7826      	ldrb	r6, [r4, #0]
    3914:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    3916:	7820      	ldrb	r0, [r4, #0]
    3918:	3001      	adds	r0, #1
    391a:	3106      	adds	r1, #6
    391c:	4b46      	ldr	r3, [pc, #280]	; (3a38 <socket+0x158>)
    391e:	4798      	blx	r3
    3920:	b2c9      	uxtb	r1, r1
    3922:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    3924:	0132      	lsls	r2, r6, #4
    3926:	4b45      	ldr	r3, [pc, #276]	; (3a3c <socket+0x15c>)
    3928:	189b      	adds	r3, r3, r2
    392a:	7a9b      	ldrb	r3, [r3, #10]
    392c:	2506      	movs	r5, #6
    392e:	2b00      	cmp	r3, #0
    3930:	d018      	beq.n	3964 <socket+0x84>
				u8SockID	= u8NextTcpSock;
    3932:	4e40      	ldr	r6, [pc, #256]	; (3a34 <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    3934:	4b40      	ldr	r3, [pc, #256]	; (3a38 <socket+0x158>)
    3936:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    3938:	4b40      	ldr	r3, [pc, #256]	; (3a3c <socket+0x15c>)
    393a:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    393c:	7837      	ldrb	r7, [r6, #0]
    393e:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    3940:	7834      	ldrb	r4, [r6, #0]
    3942:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    3944:	7830      	ldrb	r0, [r6, #0]
    3946:	3001      	adds	r0, #1
    3948:	2107      	movs	r1, #7
    394a:	47d0      	blx	sl
    394c:	b2c9      	uxtb	r1, r1
    394e:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    3950:	0123      	lsls	r3, r4, #4
    3952:	4443      	add	r3, r8
    3954:	7a9b      	ldrb	r3, [r3, #10]
    3956:	2b00      	cmp	r3, #0
    3958:	d007      	beq.n	396a <socket+0x8a>
    395a:	3d01      	subs	r5, #1
    395c:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    395e:	2d00      	cmp	r5, #0
    3960:	d1ec      	bne.n	393c <socket+0x5c>
    3962:	e7cb      	b.n	38fc <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    3964:	4b35      	ldr	r3, [pc, #212]	; (3a3c <socket+0x15c>)
    3966:	18d4      	adds	r4, r2, r3
    3968:	e002      	b.n	3970 <socket+0x90>
    396a:	0124      	lsls	r4, r4, #4
    396c:	4b33      	ldr	r3, [pc, #204]	; (3a3c <socket+0x15c>)
    396e:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    3970:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    3972:	2d00      	cmp	r5, #0
    3974:	dbc4      	blt.n	3900 <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    3976:	2210      	movs	r2, #16
    3978:	2100      	movs	r1, #0
    397a:	0020      	movs	r0, r4
    397c:	4b30      	ldr	r3, [pc, #192]	; (3a40 <socket+0x160>)
    397e:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    3980:	2301      	movs	r3, #1
    3982:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    3984:	4a2f      	ldr	r2, [pc, #188]	; (3a44 <socket+0x164>)
    3986:	8813      	ldrh	r3, [r2, #0]
    3988:	3301      	adds	r3, #1
    398a:	b29b      	uxth	r3, r3
    398c:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    398e:	8813      	ldrh	r3, [r2, #0]
    3990:	b29b      	uxth	r3, r3
    3992:	2b00      	cmp	r3, #0
    3994:	d103      	bne.n	399e <socket+0xbe>
				++gu16SessionID;
    3996:	8813      	ldrh	r3, [r2, #0]
    3998:	3301      	adds	r3, #1
    399a:	b29b      	uxth	r3, r3
    399c:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    399e:	4e29      	ldr	r6, [pc, #164]	; (3a44 <socket+0x164>)
    39a0:	8833      	ldrh	r3, [r6, #0]
    39a2:	b29b      	uxth	r3, r3
    39a4:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    39a6:	4828      	ldr	r0, [pc, #160]	; (3a48 <socket+0x168>)
    39a8:	4f28      	ldr	r7, [pc, #160]	; (3a4c <socket+0x16c>)
    39aa:	47b8      	blx	r7
    39ac:	8832      	ldrh	r2, [r6, #0]
    39ae:	b292      	uxth	r2, r2
    39b0:	0029      	movs	r1, r5
    39b2:	4827      	ldr	r0, [pc, #156]	; (3a50 <socket+0x170>)
    39b4:	47b8      	blx	r7
    39b6:	200d      	movs	r0, #13
    39b8:	4b26      	ldr	r3, [pc, #152]	; (3a54 <socket+0x174>)
    39ba:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    39bc:	9b05      	ldr	r3, [sp, #20]
    39be:	07db      	lsls	r3, r3, #31
    39c0:	d59e      	bpl.n	3900 <socket+0x20>
				strSSLCreate.sslSock = sock;
    39c2:	aa07      	add	r2, sp, #28
    39c4:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    39c6:	2321      	movs	r3, #33	; 0x21
    39c8:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    39ca:	2300      	movs	r3, #0
    39cc:	9302      	str	r3, [sp, #8]
    39ce:	9301      	str	r3, [sp, #4]
    39d0:	9300      	str	r3, [sp, #0]
    39d2:	3304      	adds	r3, #4
    39d4:	2150      	movs	r1, #80	; 0x50
    39d6:	2002      	movs	r0, #2
    39d8:	4c1f      	ldr	r4, [pc, #124]	; (3a58 <socket+0x178>)
    39da:	47a0      	blx	r4
    39dc:	e790      	b.n	3900 <socket+0x20>
				u8SockID		= u8NextUdpSock;
    39de:	4b1f      	ldr	r3, [pc, #124]	; (3a5c <socket+0x17c>)
    39e0:	781d      	ldrb	r5, [r3, #0]
    39e2:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    39e4:	781c      	ldrb	r4, [r3, #0]
    39e6:	0124      	lsls	r4, r4, #4
    39e8:	4a1d      	ldr	r2, [pc, #116]	; (3a60 <socket+0x180>)
    39ea:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    39ec:	7819      	ldrb	r1, [r3, #0]
    39ee:	3101      	adds	r1, #1
    39f0:	2203      	movs	r2, #3
    39f2:	400a      	ands	r2, r1
    39f4:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    39f6:	7aa3      	ldrb	r3, [r4, #10]
    39f8:	2b00      	cmp	r3, #0
    39fa:	d014      	beq.n	3a26 <socket+0x146>
    39fc:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    39fe:	4917      	ldr	r1, [pc, #92]	; (3a5c <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    3a00:	4f17      	ldr	r7, [pc, #92]	; (3a60 <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    3a02:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    3a04:	780d      	ldrb	r5, [r1, #0]
    3a06:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    3a08:	780c      	ldrb	r4, [r1, #0]
    3a0a:	0124      	lsls	r4, r4, #4
    3a0c:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    3a0e:	780b      	ldrb	r3, [r1, #0]
    3a10:	3301      	adds	r3, #1
    3a12:	4003      	ands	r3, r0
    3a14:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    3a16:	7aa3      	ldrb	r3, [r4, #10]
    3a18:	2b00      	cmp	r3, #0
    3a1a:	d004      	beq.n	3a26 <socket+0x146>
    3a1c:	3a01      	subs	r2, #1
    3a1e:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    3a20:	2a00      	cmp	r2, #0
    3a22:	d1ef      	bne.n	3a04 <socket+0x124>
    3a24:	e76a      	b.n	38fc <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    3a26:	3507      	adds	r5, #7
    3a28:	b26d      	sxtb	r5, r5
					break;
    3a2a:	e7a2      	b.n	3972 <socket+0x92>
	SOCKET					sock = -1;
    3a2c:	2501      	movs	r5, #1
    3a2e:	426d      	negs	r5, r5
    3a30:	e766      	b.n	3900 <socket+0x20>
    3a32:	46c0      	nop			; (mov r8, r8)
    3a34:	200000a0 	.word	0x200000a0
    3a38:	000076f5 	.word	0x000076f5
    3a3c:	200002e4 	.word	0x200002e4
    3a40:	000010e9 	.word	0x000010e9
    3a44:	2000009e 	.word	0x2000009e
    3a48:	0000ace0 	.word	0x0000ace0
    3a4c:	000095e5 	.word	0x000095e5
    3a50:	0000b770 	.word	0x0000b770
    3a54:	00009619 	.word	0x00009619
    3a58:	000011fd 	.word	0x000011fd
    3a5c:	200000a1 	.word	0x200000a1
    3a60:	20000354 	.word	0x20000354

00003a64 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    3a64:	b570      	push	{r4, r5, r6, lr}
    3a66:	b088      	sub	sp, #32
    3a68:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    3a6a:	db30      	blt.n	3ace <connect+0x6a>
    3a6c:	2900      	cmp	r1, #0
    3a6e:	d031      	beq.n	3ad4 <connect+0x70>
    3a70:	0100      	lsls	r0, r0, #4
    3a72:	4b1d      	ldr	r3, [pc, #116]	; (3ae8 <connect+0x84>)
    3a74:	181b      	adds	r3, r3, r0
    3a76:	7a9b      	ldrb	r3, [r3, #10]
    3a78:	2b01      	cmp	r3, #1
    3a7a:	d12e      	bne.n	3ada <connect+0x76>
    3a7c:	2a00      	cmp	r2, #0
    3a7e:	d02f      	beq.n	3ae0 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    3a80:	4b19      	ldr	r3, [pc, #100]	; (3ae8 <connect+0x84>)
    3a82:	181b      	adds	r3, r3, r0
    3a84:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    3a86:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    3a88:	07db      	lsls	r3, r3, #31
    3a8a:	d505      	bpl.n	3a98 <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    3a8c:	4b16      	ldr	r3, [pc, #88]	; (3ae8 <connect+0x84>)
    3a8e:	181b      	adds	r3, r3, r0
    3a90:	7ada      	ldrb	r2, [r3, #11]
    3a92:	ab05      	add	r3, sp, #20
    3a94:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    3a96:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
    3a98:	ad05      	add	r5, sp, #20
    3a9a:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    3a9c:	2208      	movs	r2, #8
    3a9e:	0028      	movs	r0, r5
    3aa0:	4b12      	ldr	r3, [pc, #72]	; (3aec <connect+0x88>)
    3aa2:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    3aa4:	0124      	lsls	r4, r4, #4
    3aa6:	4b10      	ldr	r3, [pc, #64]	; (3ae8 <connect+0x84>)
    3aa8:	191c      	adds	r4, r3, r4
    3aaa:	88e3      	ldrh	r3, [r4, #6]
    3aac:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    3aae:	2300      	movs	r3, #0
    3ab0:	9302      	str	r3, [sp, #8]
    3ab2:	9301      	str	r3, [sp, #4]
    3ab4:	9300      	str	r3, [sp, #0]
    3ab6:	330c      	adds	r3, #12
    3ab8:	002a      	movs	r2, r5
    3aba:	0031      	movs	r1, r6
    3abc:	2002      	movs	r0, #2
    3abe:	4c0c      	ldr	r4, [pc, #48]	; (3af0 <connect+0x8c>)
    3ac0:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    3ac2:	2800      	cmp	r0, #0
    3ac4:	d001      	beq.n	3aca <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    3ac6:	2009      	movs	r0, #9
    3ac8:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    3aca:	b008      	add	sp, #32
    3acc:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    3ace:	2006      	movs	r0, #6
    3ad0:	4240      	negs	r0, r0
    3ad2:	e7fa      	b.n	3aca <connect+0x66>
    3ad4:	2006      	movs	r0, #6
    3ad6:	4240      	negs	r0, r0
    3ad8:	e7f7      	b.n	3aca <connect+0x66>
    3ada:	2006      	movs	r0, #6
    3adc:	4240      	negs	r0, r0
    3ade:	e7f4      	b.n	3aca <connect+0x66>
    3ae0:	2006      	movs	r0, #6
    3ae2:	4240      	negs	r0, r0
    3ae4:	e7f1      	b.n	3aca <connect+0x66>
    3ae6:	46c0      	nop			; (mov r8, r8)
    3ae8:	200002e4 	.word	0x200002e4
    3aec:	000010d5 	.word	0x000010d5
    3af0:	000011fd 	.word	0x000011fd

00003af4 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    3af4:	b530      	push	{r4, r5, lr}
    3af6:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    3af8:	2800      	cmp	r0, #0
    3afa:	db36      	blt.n	3b6a <send+0x76>
    3afc:	2900      	cmp	r1, #0
    3afe:	d037      	beq.n	3b70 <send+0x7c>
    3b00:	23af      	movs	r3, #175	; 0xaf
    3b02:	00db      	lsls	r3, r3, #3
    3b04:	429a      	cmp	r2, r3
    3b06:	d836      	bhi.n	3b76 <send+0x82>
    3b08:	0104      	lsls	r4, r0, #4
    3b0a:	4b1e      	ldr	r3, [pc, #120]	; (3b84 <send+0x90>)
    3b0c:	191b      	adds	r3, r3, r4
    3b0e:	7a9b      	ldrb	r3, [r3, #10]
    3b10:	2b01      	cmp	r3, #1
    3b12:	d133      	bne.n	3b7c <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    3b14:	ab04      	add	r3, sp, #16
    3b16:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    3b18:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    3b1a:	0025      	movs	r5, r4
    3b1c:	4c19      	ldr	r4, [pc, #100]	; (3b84 <send+0x90>)
    3b1e:	1964      	adds	r4, r4, r5
    3b20:	88e4      	ldrh	r4, [r4, #6]
    3b22:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    3b24:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    3b26:	2806      	cmp	r0, #6
    3b28:	dd00      	ble.n	3b2c <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    3b2a:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3b2c:	0104      	lsls	r4, r0, #4
    3b2e:	4b15      	ldr	r3, [pc, #84]	; (3b84 <send+0x90>)
    3b30:	191b      	adds	r3, r3, r4
    3b32:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    3b34:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3b36:	07e4      	lsls	r4, r4, #31
    3b38:	d505      	bpl.n	3b46 <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    3b3a:	0100      	lsls	r0, r0, #4
    3b3c:	4b11      	ldr	r3, [pc, #68]	; (3b84 <send+0x90>)
    3b3e:	1818      	adds	r0, r3, r0
    3b40:	8905      	ldrh	r5, [r0, #8]
    3b42:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    3b44:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    3b46:	2080      	movs	r0, #128	; 0x80
    3b48:	4318      	orrs	r0, r3
    3b4a:	9502      	str	r5, [sp, #8]
    3b4c:	9201      	str	r2, [sp, #4]
    3b4e:	9100      	str	r1, [sp, #0]
    3b50:	2310      	movs	r3, #16
    3b52:	aa04      	add	r2, sp, #16
    3b54:	0001      	movs	r1, r0
    3b56:	2002      	movs	r0, #2
    3b58:	4c0b      	ldr	r4, [pc, #44]	; (3b88 <send+0x94>)
    3b5a:	47a0      	blx	r4
    3b5c:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    3b5e:	2800      	cmp	r0, #0
    3b60:	d000      	beq.n	3b64 <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    3b62:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    3b64:	0018      	movs	r0, r3
    3b66:	b009      	add	sp, #36	; 0x24
    3b68:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    3b6a:	2306      	movs	r3, #6
    3b6c:	425b      	negs	r3, r3
    3b6e:	e7f9      	b.n	3b64 <send+0x70>
    3b70:	2306      	movs	r3, #6
    3b72:	425b      	negs	r3, r3
    3b74:	e7f6      	b.n	3b64 <send+0x70>
    3b76:	2306      	movs	r3, #6
    3b78:	425b      	negs	r3, r3
    3b7a:	e7f3      	b.n	3b64 <send+0x70>
    3b7c:	2306      	movs	r3, #6
    3b7e:	425b      	negs	r3, r3
    3b80:	e7f0      	b.n	3b64 <send+0x70>
    3b82:	46c0      	nop			; (mov r8, r8)
    3b84:	200002e4 	.word	0x200002e4
    3b88:	000011fd 	.word	0x000011fd

00003b8c <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    3b8c:	b530      	push	{r4, r5, lr}
    3b8e:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    3b90:	2800      	cmp	r0, #0
    3b92:	db34      	blt.n	3bfe <recv+0x72>
    3b94:	2900      	cmp	r1, #0
    3b96:	d035      	beq.n	3c04 <recv+0x78>
    3b98:	2a00      	cmp	r2, #0
    3b9a:	d036      	beq.n	3c0a <recv+0x7e>
    3b9c:	0105      	lsls	r5, r0, #4
    3b9e:	4c1e      	ldr	r4, [pc, #120]	; (3c18 <recv+0x8c>)
    3ba0:	1964      	adds	r4, r4, r5
    3ba2:	7aa4      	ldrb	r4, [r4, #10]
    3ba4:	2c01      	cmp	r4, #1
    3ba6:	d133      	bne.n	3c10 <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    3ba8:	4c1b      	ldr	r4, [pc, #108]	; (3c18 <recv+0x8c>)
    3baa:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    3bac:	1964      	adds	r4, r4, r5
    3bae:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    3bb0:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    3bb2:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    3bb4:	2900      	cmp	r1, #0
    3bb6:	d11d      	bne.n	3bf4 <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    3bb8:	2101      	movs	r1, #1
    3bba:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3bbc:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    3bbe:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3bc0:	07d2      	lsls	r2, r2, #31
    3bc2:	d500      	bpl.n	3bc6 <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    3bc4:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    3bc6:	2b00      	cmp	r3, #0
    3bc8:	d117      	bne.n	3bfa <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    3bca:	3b01      	subs	r3, #1
    3bcc:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    3bce:	aa04      	add	r2, sp, #16
    3bd0:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    3bd2:	0100      	lsls	r0, r0, #4
    3bd4:	4b10      	ldr	r3, [pc, #64]	; (3c18 <recv+0x8c>)
    3bd6:	1818      	adds	r0, r3, r0
    3bd8:	88c3      	ldrh	r3, [r0, #6]
    3bda:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    3bdc:	2300      	movs	r3, #0
    3bde:	9302      	str	r3, [sp, #8]
    3be0:	9301      	str	r3, [sp, #4]
    3be2:	9300      	str	r3, [sp, #0]
    3be4:	3308      	adds	r3, #8
    3be6:	2002      	movs	r0, #2
    3be8:	4c0c      	ldr	r4, [pc, #48]	; (3c1c <recv+0x90>)
    3bea:	47a0      	blx	r4
    3bec:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    3bee:	2800      	cmp	r0, #0
    3bf0:	d000      	beq.n	3bf4 <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    3bf2:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    3bf4:	0010      	movs	r0, r2
    3bf6:	b007      	add	sp, #28
    3bf8:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    3bfa:	9304      	str	r3, [sp, #16]
    3bfc:	e7e7      	b.n	3bce <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    3bfe:	2206      	movs	r2, #6
    3c00:	4252      	negs	r2, r2
    3c02:	e7f7      	b.n	3bf4 <recv+0x68>
    3c04:	2206      	movs	r2, #6
    3c06:	4252      	negs	r2, r2
    3c08:	e7f4      	b.n	3bf4 <recv+0x68>
    3c0a:	2206      	movs	r2, #6
    3c0c:	4252      	negs	r2, r2
    3c0e:	e7f1      	b.n	3bf4 <recv+0x68>
    3c10:	2206      	movs	r2, #6
    3c12:	4252      	negs	r2, r2
    3c14:	e7ee      	b.n	3bf4 <recv+0x68>
    3c16:	46c0      	nop			; (mov r8, r8)
    3c18:	200002e4 	.word	0x200002e4
    3c1c:	000011fd 	.word	0x000011fd

00003c20 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    3c20:	b530      	push	{r4, r5, lr}
    3c22:	b087      	sub	sp, #28
    3c24:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    3c26:	481e      	ldr	r0, [pc, #120]	; (3ca0 <close+0x80>)
    3c28:	4d1e      	ldr	r5, [pc, #120]	; (3ca4 <close+0x84>)
    3c2a:	47a8      	blx	r5
    3c2c:	0021      	movs	r1, r4
    3c2e:	481e      	ldr	r0, [pc, #120]	; (3ca8 <close+0x88>)
    3c30:	47a8      	blx	r5
    3c32:	200d      	movs	r0, #13
    3c34:	4b1d      	ldr	r3, [pc, #116]	; (3cac <close+0x8c>)
    3c36:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    3c38:	2c00      	cmp	r4, #0
    3c3a:	db2a      	blt.n	3c92 <close+0x72>
    3c3c:	0122      	lsls	r2, r4, #4
    3c3e:	4b1c      	ldr	r3, [pc, #112]	; (3cb0 <close+0x90>)
    3c40:	189b      	adds	r3, r3, r2
    3c42:	7a9b      	ldrb	r3, [r3, #10]
    3c44:	2b01      	cmp	r3, #1
    3c46:	d127      	bne.n	3c98 <close+0x78>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    3c48:	a905      	add	r1, sp, #20
    3c4a:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    3c4c:	4b18      	ldr	r3, [pc, #96]	; (3cb0 <close+0x90>)
    3c4e:	189b      	adds	r3, r3, r2
    3c50:	88da      	ldrh	r2, [r3, #6]
    3c52:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    3c54:	2200      	movs	r2, #0
    3c56:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    3c58:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3c5a:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    3c5c:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3c5e:	07db      	lsls	r3, r3, #31
    3c60:	d500      	bpl.n	3c64 <close+0x44>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    3c62:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    3c64:	2300      	movs	r3, #0
    3c66:	9302      	str	r3, [sp, #8]
    3c68:	9301      	str	r3, [sp, #4]
    3c6a:	9300      	str	r3, [sp, #0]
    3c6c:	3304      	adds	r3, #4
    3c6e:	aa05      	add	r2, sp, #20
    3c70:	2002      	movs	r0, #2
    3c72:	4d10      	ldr	r5, [pc, #64]	; (3cb4 <close+0x94>)
    3c74:	47a8      	blx	r5
    3c76:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    3c78:	d001      	beq.n	3c7e <close+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    3c7a:	2509      	movs	r5, #9
    3c7c:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    3c7e:	0124      	lsls	r4, r4, #4
    3c80:	480b      	ldr	r0, [pc, #44]	; (3cb0 <close+0x90>)
    3c82:	1820      	adds	r0, r4, r0
    3c84:	2210      	movs	r2, #16
    3c86:	2100      	movs	r1, #0
    3c88:	4b0b      	ldr	r3, [pc, #44]	; (3cb8 <close+0x98>)
    3c8a:	4798      	blx	r3
	}
	return s8Ret;
}
    3c8c:	0028      	movs	r0, r5
    3c8e:	b007      	add	sp, #28
    3c90:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    3c92:	2506      	movs	r5, #6
    3c94:	426d      	negs	r5, r5
    3c96:	e7f9      	b.n	3c8c <close+0x6c>
    3c98:	2506      	movs	r5, #6
    3c9a:	426d      	negs	r5, r5
    3c9c:	e7f6      	b.n	3c8c <close+0x6c>
    3c9e:	46c0      	nop			; (mov r8, r8)
    3ca0:	0000ace0 	.word	0x0000ace0
    3ca4:	000095e5 	.word	0x000095e5
    3ca8:	0000b758 	.word	0x0000b758
    3cac:	00009619 	.word	0x00009619
    3cb0:	200002e4 	.word	0x200002e4
    3cb4:	000011fd 	.word	0x000011fd
    3cb8:	000010e9 	.word	0x000010e9

00003cbc <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    3cbc:	b570      	push	{r4, r5, r6, lr}
    3cbe:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
    3cc0:	2300      	movs	r3, #0
    3cc2:	9301      	str	r3, [sp, #4]
    3cc4:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
    3cc6:	2100      	movs	r1, #0
    3cc8:	7802      	ldrb	r2, [r0, #0]
    3cca:	1c44      	adds	r4, r0, #1
    3ccc:	3005      	adds	r0, #5
    3cce:	000b      	movs	r3, r1
    3cd0:	e009      	b.n	3ce6 <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
    3cd2:	009d      	lsls	r5, r3, #2
    3cd4:	195b      	adds	r3, r3, r5
    3cd6:	005b      	lsls	r3, r3, #1
    3cd8:	189b      	adds	r3, r3, r2
    3cda:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
    3cdc:	0022      	movs	r2, r4
    3cde:	3401      	adds	r4, #1
			if(j > 4)
    3ce0:	42a0      	cmp	r0, r4
    3ce2:	d00a      	beq.n	3cfa <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
    3ce4:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
    3ce6:	2a2e      	cmp	r2, #46	; 0x2e
    3ce8:	d00a      	beq.n	3d00 <nmi_inet_addr+0x44>
    3cea:	2a00      	cmp	r2, #0
    3cec:	d00c      	beq.n	3d08 <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
    3cee:	3a30      	subs	r2, #48	; 0x30
    3cf0:	b2d2      	uxtb	r2, r2
    3cf2:	2a09      	cmp	r2, #9
    3cf4:	d9ed      	bls.n	3cd2 <nmi_inet_addr+0x16>
				return 0;
    3cf6:	2000      	movs	r0, #0
    3cf8:	e000      	b.n	3cfc <nmi_inet_addr+0x40>
				return 0;
    3cfa:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
    3cfc:	b002      	add	sp, #8
    3cfe:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
    3d00:	466a      	mov	r2, sp
    3d02:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    3d04:	0020      	movs	r0, r4
    3d06:	e002      	b.n	3d0e <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
    3d08:	466a      	mov	r2, sp
    3d0a:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    3d0c:	0020      	movs	r0, r4
    3d0e:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
    3d10:	2e04      	cmp	r6, #4
    3d12:	d1d9      	bne.n	3cc8 <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    3d14:	2204      	movs	r2, #4
    3d16:	4669      	mov	r1, sp
    3d18:	a801      	add	r0, sp, #4
    3d1a:	4b02      	ldr	r3, [pc, #8]	; (3d24 <nmi_inet_addr+0x68>)
    3d1c:	4798      	blx	r3
	return u32IP;
    3d1e:	9801      	ldr	r0, [sp, #4]
    3d20:	e7ec      	b.n	3cfc <nmi_inet_addr+0x40>
    3d22:	46c0      	nop			; (mov r8, r8)
    3d24:	000010d5 	.word	0x000010d5

00003d28 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    3d28:	b510      	push	{r4, lr}
    3d2a:	b084      	sub	sp, #16
    3d2c:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    3d2e:	4b0b      	ldr	r3, [pc, #44]	; (3d5c <gethostbyname+0x34>)
    3d30:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    3d32:	b2c3      	uxtb	r3, r0
    3d34:	2b40      	cmp	r3, #64	; 0x40
    3d36:	d80d      	bhi.n	3d54 <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    3d38:	23ff      	movs	r3, #255	; 0xff
    3d3a:	4003      	ands	r3, r0
    3d3c:	3301      	adds	r3, #1
    3d3e:	2200      	movs	r2, #0
    3d40:	9202      	str	r2, [sp, #8]
    3d42:	9201      	str	r2, [sp, #4]
    3d44:	9200      	str	r2, [sp, #0]
    3d46:	0022      	movs	r2, r4
    3d48:	214a      	movs	r1, #74	; 0x4a
    3d4a:	2002      	movs	r0, #2
    3d4c:	4c04      	ldr	r4, [pc, #16]	; (3d60 <gethostbyname+0x38>)
    3d4e:	47a0      	blx	r4
	}
	return s8Err;
}
    3d50:	b004      	add	sp, #16
    3d52:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    3d54:	2006      	movs	r0, #6
    3d56:	4240      	negs	r0, r0
    3d58:	e7fa      	b.n	3d50 <gethostbyname+0x28>
    3d5a:	46c0      	nop			; (mov r8, r8)
    3d5c:	000010f9 	.word	0x000010f9
    3d60:	000011fd 	.word	0x000011fd

00003d64 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    3d64:	b570      	push	{r4, r5, r6, lr}
    3d66:	b082      	sub	sp, #8
    3d68:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    3d6a:	4b2a      	ldr	r3, [pc, #168]	; (3e14 <spi_flash_enable+0xb0>)
    3d6c:	4798      	blx	r3
    3d6e:	0500      	lsls	r0, r0, #20
    3d70:	0d00      	lsrs	r0, r0, #20
    3d72:	4b29      	ldr	r3, [pc, #164]	; (3e18 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    3d74:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    3d76:	4298      	cmp	r0, r3
    3d78:	d802      	bhi.n	3d80 <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    3d7a:	0028      	movs	r0, r5
    3d7c:	b002      	add	sp, #8
    3d7e:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    3d80:	a901      	add	r1, sp, #4
    3d82:	4826      	ldr	r0, [pc, #152]	; (3e1c <spi_flash_enable+0xb8>)
    3d84:	4b26      	ldr	r3, [pc, #152]	; (3e20 <spi_flash_enable+0xbc>)
    3d86:	4798      	blx	r3
    3d88:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    3d8a:	d1f6      	bne.n	3d7a <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    3d8c:	4b25      	ldr	r3, [pc, #148]	; (3e24 <spi_flash_enable+0xc0>)
    3d8e:	9a01      	ldr	r2, [sp, #4]
    3d90:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    3d92:	4925      	ldr	r1, [pc, #148]	; (3e28 <spi_flash_enable+0xc4>)
    3d94:	4319      	orrs	r1, r3
    3d96:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    3d98:	4820      	ldr	r0, [pc, #128]	; (3e1c <spi_flash_enable+0xb8>)
    3d9a:	4b24      	ldr	r3, [pc, #144]	; (3e2c <spi_flash_enable+0xc8>)
    3d9c:	4798      	blx	r3
		if(enable) {
    3d9e:	2c00      	cmp	r4, #0
    3da0:	d020      	beq.n	3de4 <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    3da2:	2100      	movs	r1, #0
    3da4:	4822      	ldr	r0, [pc, #136]	; (3e30 <spi_flash_enable+0xcc>)
    3da6:	4c21      	ldr	r4, [pc, #132]	; (3e2c <spi_flash_enable+0xc8>)
    3da8:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    3daa:	21ab      	movs	r1, #171	; 0xab
    3dac:	4821      	ldr	r0, [pc, #132]	; (3e34 <spi_flash_enable+0xd0>)
    3dae:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    3db0:	2101      	movs	r1, #1
    3db2:	4821      	ldr	r0, [pc, #132]	; (3e38 <spi_flash_enable+0xd4>)
    3db4:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    3db6:	2100      	movs	r1, #0
    3db8:	4820      	ldr	r0, [pc, #128]	; (3e3c <spi_flash_enable+0xd8>)
    3dba:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    3dbc:	2181      	movs	r1, #129	; 0x81
    3dbe:	4820      	ldr	r0, [pc, #128]	; (3e40 <spi_flash_enable+0xdc>)
    3dc0:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    3dc2:	4e20      	ldr	r6, [pc, #128]	; (3e44 <spi_flash_enable+0xe0>)
    3dc4:	4c20      	ldr	r4, [pc, #128]	; (3e48 <spi_flash_enable+0xe4>)
    3dc6:	0030      	movs	r0, r6
    3dc8:	47a0      	blx	r4
    3dca:	2801      	cmp	r0, #1
    3dcc:	d1fb      	bne.n	3dc6 <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    3dce:	4b15      	ldr	r3, [pc, #84]	; (3e24 <spi_flash_enable+0xc0>)
    3dd0:	9a01      	ldr	r2, [sp, #4]
    3dd2:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    3dd4:	2180      	movs	r1, #128	; 0x80
    3dd6:	0249      	lsls	r1, r1, #9
    3dd8:	4319      	orrs	r1, r3
    3dda:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    3ddc:	480f      	ldr	r0, [pc, #60]	; (3e1c <spi_flash_enable+0xb8>)
    3dde:	4b13      	ldr	r3, [pc, #76]	; (3e2c <spi_flash_enable+0xc8>)
    3de0:	4798      	blx	r3
    3de2:	e7ca      	b.n	3d7a <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    3de4:	2100      	movs	r1, #0
    3de6:	4812      	ldr	r0, [pc, #72]	; (3e30 <spi_flash_enable+0xcc>)
    3de8:	4c10      	ldr	r4, [pc, #64]	; (3e2c <spi_flash_enable+0xc8>)
    3dea:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    3dec:	21b9      	movs	r1, #185	; 0xb9
    3dee:	4811      	ldr	r0, [pc, #68]	; (3e34 <spi_flash_enable+0xd0>)
    3df0:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    3df2:	2101      	movs	r1, #1
    3df4:	4810      	ldr	r0, [pc, #64]	; (3e38 <spi_flash_enable+0xd4>)
    3df6:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    3df8:	2100      	movs	r1, #0
    3dfa:	4810      	ldr	r0, [pc, #64]	; (3e3c <spi_flash_enable+0xd8>)
    3dfc:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    3dfe:	2181      	movs	r1, #129	; 0x81
    3e00:	480f      	ldr	r0, [pc, #60]	; (3e40 <spi_flash_enable+0xdc>)
    3e02:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    3e04:	4e0f      	ldr	r6, [pc, #60]	; (3e44 <spi_flash_enable+0xe0>)
    3e06:	4c10      	ldr	r4, [pc, #64]	; (3e48 <spi_flash_enable+0xe4>)
    3e08:	0030      	movs	r0, r6
    3e0a:	47a0      	blx	r4
    3e0c:	2801      	cmp	r0, #1
    3e0e:	d1fb      	bne.n	3e08 <spi_flash_enable+0xa4>
    3e10:	e7dd      	b.n	3dce <spi_flash_enable+0x6a>
    3e12:	46c0      	nop			; (mov r8, r8)
    3e14:	000020e1 	.word	0x000020e1
    3e18:	0000039f 	.word	0x0000039f
    3e1c:	00001410 	.word	0x00001410
    3e20:	00002531 	.word	0x00002531
    3e24:	f8888fff 	.word	0xf8888fff
    3e28:	01111000 	.word	0x01111000
    3e2c:	0000253d 	.word	0x0000253d
    3e30:	00010208 	.word	0x00010208
    3e34:	0001020c 	.word	0x0001020c
    3e38:	00010214 	.word	0x00010214
    3e3c:	0001021c 	.word	0x0001021c
    3e40:	00010204 	.word	0x00010204
    3e44:	00010218 	.word	0x00010218
    3e48:	00002525 	.word	0x00002525

00003e4c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    3e4c:	4b0c      	ldr	r3, [pc, #48]	; (3e80 <cpu_irq_enter_critical+0x34>)
    3e4e:	681b      	ldr	r3, [r3, #0]
    3e50:	2b00      	cmp	r3, #0
    3e52:	d106      	bne.n	3e62 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3e54:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    3e58:	2b00      	cmp	r3, #0
    3e5a:	d007      	beq.n	3e6c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    3e5c:	2200      	movs	r2, #0
    3e5e:	4b09      	ldr	r3, [pc, #36]	; (3e84 <cpu_irq_enter_critical+0x38>)
    3e60:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    3e62:	4a07      	ldr	r2, [pc, #28]	; (3e80 <cpu_irq_enter_critical+0x34>)
    3e64:	6813      	ldr	r3, [r2, #0]
    3e66:	3301      	adds	r3, #1
    3e68:	6013      	str	r3, [r2, #0]
}
    3e6a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    3e6c:	b672      	cpsid	i
    3e6e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    3e72:	2200      	movs	r2, #0
    3e74:	4b04      	ldr	r3, [pc, #16]	; (3e88 <cpu_irq_enter_critical+0x3c>)
    3e76:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    3e78:	3201      	adds	r2, #1
    3e7a:	4b02      	ldr	r3, [pc, #8]	; (3e84 <cpu_irq_enter_critical+0x38>)
    3e7c:	701a      	strb	r2, [r3, #0]
    3e7e:	e7f0      	b.n	3e62 <cpu_irq_enter_critical+0x16>
    3e80:	200000a4 	.word	0x200000a4
    3e84:	200000a8 	.word	0x200000a8
    3e88:	2000000a 	.word	0x2000000a

00003e8c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    3e8c:	4b08      	ldr	r3, [pc, #32]	; (3eb0 <cpu_irq_leave_critical+0x24>)
    3e8e:	681a      	ldr	r2, [r3, #0]
    3e90:	3a01      	subs	r2, #1
    3e92:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    3e94:	681b      	ldr	r3, [r3, #0]
    3e96:	2b00      	cmp	r3, #0
    3e98:	d109      	bne.n	3eae <cpu_irq_leave_critical+0x22>
    3e9a:	4b06      	ldr	r3, [pc, #24]	; (3eb4 <cpu_irq_leave_critical+0x28>)
    3e9c:	781b      	ldrb	r3, [r3, #0]
    3e9e:	2b00      	cmp	r3, #0
    3ea0:	d005      	beq.n	3eae <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    3ea2:	2201      	movs	r2, #1
    3ea4:	4b04      	ldr	r3, [pc, #16]	; (3eb8 <cpu_irq_leave_critical+0x2c>)
    3ea6:	701a      	strb	r2, [r3, #0]
    3ea8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3eac:	b662      	cpsie	i
	}
}
    3eae:	4770      	bx	lr
    3eb0:	200000a4 	.word	0x200000a4
    3eb4:	200000a8 	.word	0x200000a8
    3eb8:	2000000a 	.word	0x2000000a

00003ebc <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    3ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ebe:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    3ec0:	ac01      	add	r4, sp, #4
    3ec2:	2501      	movs	r5, #1
    3ec4:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    3ec6:	2700      	movs	r7, #0
    3ec8:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    3eca:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    3ecc:	0021      	movs	r1, r4
    3ece:	203e      	movs	r0, #62	; 0x3e
    3ed0:	4e06      	ldr	r6, [pc, #24]	; (3eec <system_board_init+0x30>)
    3ed2:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    3ed4:	2280      	movs	r2, #128	; 0x80
    3ed6:	05d2      	lsls	r2, r2, #23
    3ed8:	4b05      	ldr	r3, [pc, #20]	; (3ef0 <system_board_init+0x34>)
    3eda:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    3edc:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    3ede:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    3ee0:	0021      	movs	r1, r4
    3ee2:	200f      	movs	r0, #15
    3ee4:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    3ee6:	b003      	add	sp, #12
    3ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3eea:	46c0      	nop			; (mov r8, r8)
    3eec:	000040c5 	.word	0x000040c5
    3ef0:	41004480 	.word	0x41004480

00003ef4 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3ef4:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    3ef6:	2a00      	cmp	r2, #0
    3ef8:	d001      	beq.n	3efe <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    3efa:	0018      	movs	r0, r3
    3efc:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    3efe:	008b      	lsls	r3, r1, #2
    3f00:	4a06      	ldr	r2, [pc, #24]	; (3f1c <extint_register_callback+0x28>)
    3f02:	589b      	ldr	r3, [r3, r2]
    3f04:	2b00      	cmp	r3, #0
    3f06:	d003      	beq.n	3f10 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    3f08:	4283      	cmp	r3, r0
    3f0a:	d005      	beq.n	3f18 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    3f0c:	231d      	movs	r3, #29
    3f0e:	e7f4      	b.n	3efa <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    3f10:	0089      	lsls	r1, r1, #2
    3f12:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    3f14:	2300      	movs	r3, #0
    3f16:	e7f0      	b.n	3efa <extint_register_callback+0x6>
		return STATUS_OK;
    3f18:	2300      	movs	r3, #0
    3f1a:	e7ee      	b.n	3efa <extint_register_callback+0x6>
    3f1c:	200003a4 	.word	0x200003a4

00003f20 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3f20:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    3f22:	2900      	cmp	r1, #0
    3f24:	d001      	beq.n	3f2a <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    3f26:	0018      	movs	r0, r3
    3f28:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    3f2a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    3f2c:	281f      	cmp	r0, #31
    3f2e:	d800      	bhi.n	3f32 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    3f30:	4a02      	ldr	r2, [pc, #8]	; (3f3c <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    3f32:	2301      	movs	r3, #1
    3f34:	4083      	lsls	r3, r0
    3f36:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    3f38:	2300      	movs	r3, #0
    3f3a:	e7f4      	b.n	3f26 <extint_chan_enable_callback+0x6>
    3f3c:	40001800 	.word	0x40001800

00003f40 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3f40:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    3f42:	2900      	cmp	r1, #0
    3f44:	d001      	beq.n	3f4a <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    3f46:	0018      	movs	r0, r3
    3f48:	4770      	bx	lr
		return NULL;
    3f4a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    3f4c:	281f      	cmp	r0, #31
    3f4e:	d800      	bhi.n	3f52 <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    3f50:	4a02      	ldr	r2, [pc, #8]	; (3f5c <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    3f52:	2301      	movs	r3, #1
    3f54:	4083      	lsls	r3, r0
    3f56:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    3f58:	2300      	movs	r3, #0
    3f5a:	e7f4      	b.n	3f46 <extint_chan_disable_callback+0x6>
    3f5c:	40001800 	.word	0x40001800

00003f60 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    3f60:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    3f62:	2200      	movs	r2, #0
    3f64:	4b10      	ldr	r3, [pc, #64]	; (3fa8 <EIC_Handler+0x48>)
    3f66:	701a      	strb	r2, [r3, #0]
    3f68:	2300      	movs	r3, #0
    3f6a:	4910      	ldr	r1, [pc, #64]	; (3fac <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    3f6c:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    3f6e:	4e10      	ldr	r6, [pc, #64]	; (3fb0 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    3f70:	4c0d      	ldr	r4, [pc, #52]	; (3fa8 <EIC_Handler+0x48>)
    3f72:	e00a      	b.n	3f8a <EIC_Handler+0x2a>
		return eics[eic_index];
    3f74:	490d      	ldr	r1, [pc, #52]	; (3fac <EIC_Handler+0x4c>)
    3f76:	e008      	b.n	3f8a <EIC_Handler+0x2a>
    3f78:	7823      	ldrb	r3, [r4, #0]
    3f7a:	3301      	adds	r3, #1
    3f7c:	b2db      	uxtb	r3, r3
    3f7e:	7023      	strb	r3, [r4, #0]
    3f80:	2b0f      	cmp	r3, #15
    3f82:	d810      	bhi.n	3fa6 <EIC_Handler+0x46>
		return NULL;
    3f84:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    3f86:	2b1f      	cmp	r3, #31
    3f88:	d9f4      	bls.n	3f74 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    3f8a:	0028      	movs	r0, r5
    3f8c:	4018      	ands	r0, r3
    3f8e:	2201      	movs	r2, #1
    3f90:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    3f92:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    3f94:	4210      	tst	r0, r2
    3f96:	d0ef      	beq.n	3f78 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    3f98:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    3f9a:	009b      	lsls	r3, r3, #2
    3f9c:	599b      	ldr	r3, [r3, r6]
    3f9e:	2b00      	cmp	r3, #0
    3fa0:	d0ea      	beq.n	3f78 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    3fa2:	4798      	blx	r3
    3fa4:	e7e8      	b.n	3f78 <EIC_Handler+0x18>
			}
		}
	}
}
    3fa6:	bd70      	pop	{r4, r5, r6, pc}
    3fa8:	200003a0 	.word	0x200003a0
    3fac:	40001800 	.word	0x40001800
    3fb0:	200003a4 	.word	0x200003a4

00003fb4 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    3fb4:	4a04      	ldr	r2, [pc, #16]	; (3fc8 <_extint_enable+0x14>)
    3fb6:	7813      	ldrb	r3, [r2, #0]
    3fb8:	2102      	movs	r1, #2
    3fba:	430b      	orrs	r3, r1
    3fbc:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    3fbe:	7853      	ldrb	r3, [r2, #1]
    3fc0:	b25b      	sxtb	r3, r3
    3fc2:	2b00      	cmp	r3, #0
    3fc4:	dbfb      	blt.n	3fbe <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    3fc6:	4770      	bx	lr
    3fc8:	40001800 	.word	0x40001800

00003fcc <_system_extint_init>:
{
    3fcc:	b500      	push	{lr}
    3fce:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    3fd0:	4a12      	ldr	r2, [pc, #72]	; (401c <_system_extint_init+0x50>)
    3fd2:	6993      	ldr	r3, [r2, #24]
    3fd4:	2140      	movs	r1, #64	; 0x40
    3fd6:	430b      	orrs	r3, r1
    3fd8:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    3fda:	a901      	add	r1, sp, #4
    3fdc:	2300      	movs	r3, #0
    3fde:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    3fe0:	2005      	movs	r0, #5
    3fe2:	4b0f      	ldr	r3, [pc, #60]	; (4020 <_system_extint_init+0x54>)
    3fe4:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    3fe6:	2005      	movs	r0, #5
    3fe8:	4b0e      	ldr	r3, [pc, #56]	; (4024 <_system_extint_init+0x58>)
    3fea:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    3fec:	4a0e      	ldr	r2, [pc, #56]	; (4028 <_system_extint_init+0x5c>)
    3fee:	7813      	ldrb	r3, [r2, #0]
    3ff0:	2101      	movs	r1, #1
    3ff2:	430b      	orrs	r3, r1
    3ff4:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    3ff6:	7853      	ldrb	r3, [r2, #1]
    3ff8:	b25b      	sxtb	r3, r3
    3ffa:	2b00      	cmp	r3, #0
    3ffc:	dbfb      	blt.n	3ff6 <_system_extint_init+0x2a>
    3ffe:	4b0b      	ldr	r3, [pc, #44]	; (402c <_system_extint_init+0x60>)
    4000:	0019      	movs	r1, r3
    4002:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    4004:	2200      	movs	r2, #0
    4006:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4008:	4299      	cmp	r1, r3
    400a:	d1fc      	bne.n	4006 <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    400c:	2210      	movs	r2, #16
    400e:	4b08      	ldr	r3, [pc, #32]	; (4030 <_system_extint_init+0x64>)
    4010:	601a      	str	r2, [r3, #0]
	_extint_enable();
    4012:	4b08      	ldr	r3, [pc, #32]	; (4034 <_system_extint_init+0x68>)
    4014:	4798      	blx	r3
}
    4016:	b003      	add	sp, #12
    4018:	bd00      	pop	{pc}
    401a:	46c0      	nop			; (mov r8, r8)
    401c:	40000400 	.word	0x40000400
    4020:	00005599 	.word	0x00005599
    4024:	0000550d 	.word	0x0000550d
    4028:	40001800 	.word	0x40001800
    402c:	200003a4 	.word	0x200003a4
    4030:	e000e100 	.word	0xe000e100
    4034:	00003fb5 	.word	0x00003fb5

00004038 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    4038:	2300      	movs	r3, #0
    403a:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    403c:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    403e:	2201      	movs	r2, #1
    4040:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    4042:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    4044:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    4046:	3302      	adds	r3, #2
    4048:	72c3      	strb	r3, [r0, #11]
}
    404a:	4770      	bx	lr

0000404c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    404c:	b5f0      	push	{r4, r5, r6, r7, lr}
    404e:	b083      	sub	sp, #12
    4050:	0005      	movs	r5, r0
    4052:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4054:	a901      	add	r1, sp, #4
    4056:	2300      	movs	r3, #0
    4058:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    405a:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    405c:	7923      	ldrb	r3, [r4, #4]
    405e:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    4060:	7a23      	ldrb	r3, [r4, #8]
    4062:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    4064:	7820      	ldrb	r0, [r4, #0]
    4066:	4b15      	ldr	r3, [pc, #84]	; (40bc <extint_chan_set_config+0x70>)
    4068:	4798      	blx	r3
		return NULL;
    406a:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    406c:	2d1f      	cmp	r5, #31
    406e:	d800      	bhi.n	4072 <extint_chan_set_config+0x26>
		return eics[eic_index];
    4070:	4813      	ldr	r0, [pc, #76]	; (40c0 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    4072:	2207      	movs	r2, #7
    4074:	402a      	ands	r2, r5
    4076:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    4078:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    407a:	7aa3      	ldrb	r3, [r4, #10]
    407c:	2b00      	cmp	r3, #0
    407e:	d001      	beq.n	4084 <extint_chan_set_config+0x38>
    4080:	2308      	movs	r3, #8
    4082:	431f      	orrs	r7, r3
    4084:	08eb      	lsrs	r3, r5, #3
    4086:	009b      	lsls	r3, r3, #2
    4088:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    408a:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    408c:	260f      	movs	r6, #15
    408e:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    4090:	43b1      	bics	r1, r6
			(new_config << config_pos);
    4092:	4097      	lsls	r7, r2
    4094:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4096:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    4098:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    409a:	7a63      	ldrb	r3, [r4, #9]
    409c:	2b00      	cmp	r3, #0
    409e:	d106      	bne.n	40ae <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    40a0:	6943      	ldr	r3, [r0, #20]
    40a2:	2201      	movs	r2, #1
    40a4:	40aa      	lsls	r2, r5
    40a6:	4393      	bics	r3, r2
    40a8:	6143      	str	r3, [r0, #20]
	}
}
    40aa:	b003      	add	sp, #12
    40ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    40ae:	6942      	ldr	r2, [r0, #20]
    40b0:	2301      	movs	r3, #1
    40b2:	40ab      	lsls	r3, r5
    40b4:	4313      	orrs	r3, r2
    40b6:	6143      	str	r3, [r0, #20]
    40b8:	e7f7      	b.n	40aa <extint_chan_set_config+0x5e>
    40ba:	46c0      	nop			; (mov r8, r8)
    40bc:	00005691 	.word	0x00005691
    40c0:	40001800 	.word	0x40001800

000040c4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    40c4:	b500      	push	{lr}
    40c6:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    40c8:	ab01      	add	r3, sp, #4
    40ca:	2280      	movs	r2, #128	; 0x80
    40cc:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    40ce:	780a      	ldrb	r2, [r1, #0]
    40d0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    40d2:	784a      	ldrb	r2, [r1, #1]
    40d4:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    40d6:	788a      	ldrb	r2, [r1, #2]
    40d8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    40da:	0019      	movs	r1, r3
    40dc:	4b01      	ldr	r3, [pc, #4]	; (40e4 <port_pin_set_config+0x20>)
    40de:	4798      	blx	r3
}
    40e0:	b003      	add	sp, #12
    40e2:	bd00      	pop	{pc}
    40e4:	00005691 	.word	0x00005691

000040e8 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    40e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    40ea:	46de      	mov	lr, fp
    40ec:	4657      	mov	r7, sl
    40ee:	464e      	mov	r6, r9
    40f0:	4645      	mov	r5, r8
    40f2:	b5e0      	push	{r5, r6, r7, lr}
    40f4:	b087      	sub	sp, #28
    40f6:	4680      	mov	r8, r0
    40f8:	9104      	str	r1, [sp, #16]
    40fa:	0016      	movs	r6, r2
    40fc:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    40fe:	2200      	movs	r2, #0
    4100:	2300      	movs	r3, #0
    4102:	2100      	movs	r1, #0
    4104:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    4106:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    4108:	2001      	movs	r0, #1
    410a:	0021      	movs	r1, r4
    410c:	9600      	str	r6, [sp, #0]
    410e:	9701      	str	r7, [sp, #4]
    4110:	465c      	mov	r4, fp
    4112:	9403      	str	r4, [sp, #12]
    4114:	4644      	mov	r4, r8
    4116:	9405      	str	r4, [sp, #20]
    4118:	e013      	b.n	4142 <long_division+0x5a>
    411a:	2420      	movs	r4, #32
    411c:	1a64      	subs	r4, r4, r1
    411e:	0005      	movs	r5, r0
    4120:	40e5      	lsrs	r5, r4
    4122:	46a8      	mov	r8, r5
    4124:	e014      	b.n	4150 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    4126:	9c00      	ldr	r4, [sp, #0]
    4128:	9d01      	ldr	r5, [sp, #4]
    412a:	1b12      	subs	r2, r2, r4
    412c:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    412e:	465c      	mov	r4, fp
    4130:	464d      	mov	r5, r9
    4132:	432c      	orrs	r4, r5
    4134:	46a3      	mov	fp, r4
    4136:	9c03      	ldr	r4, [sp, #12]
    4138:	4645      	mov	r5, r8
    413a:	432c      	orrs	r4, r5
    413c:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    413e:	3901      	subs	r1, #1
    4140:	d325      	bcc.n	418e <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    4142:	2420      	movs	r4, #32
    4144:	4264      	negs	r4, r4
    4146:	190c      	adds	r4, r1, r4
    4148:	d4e7      	bmi.n	411a <long_division+0x32>
    414a:	0005      	movs	r5, r0
    414c:	40a5      	lsls	r5, r4
    414e:	46a8      	mov	r8, r5
    4150:	0004      	movs	r4, r0
    4152:	408c      	lsls	r4, r1
    4154:	46a1      	mov	r9, r4
		r = r << 1;
    4156:	1892      	adds	r2, r2, r2
    4158:	415b      	adcs	r3, r3
    415a:	0014      	movs	r4, r2
    415c:	001d      	movs	r5, r3
		if (n & bit_shift) {
    415e:	9e05      	ldr	r6, [sp, #20]
    4160:	464f      	mov	r7, r9
    4162:	403e      	ands	r6, r7
    4164:	46b4      	mov	ip, r6
    4166:	9e04      	ldr	r6, [sp, #16]
    4168:	4647      	mov	r7, r8
    416a:	403e      	ands	r6, r7
    416c:	46b2      	mov	sl, r6
    416e:	4666      	mov	r6, ip
    4170:	4657      	mov	r7, sl
    4172:	433e      	orrs	r6, r7
    4174:	d003      	beq.n	417e <long_division+0x96>
			r |= 0x01;
    4176:	0006      	movs	r6, r0
    4178:	4326      	orrs	r6, r4
    417a:	0032      	movs	r2, r6
    417c:	002b      	movs	r3, r5
		if (r >= d) {
    417e:	9c00      	ldr	r4, [sp, #0]
    4180:	9d01      	ldr	r5, [sp, #4]
    4182:	429d      	cmp	r5, r3
    4184:	d8db      	bhi.n	413e <long_division+0x56>
    4186:	d1ce      	bne.n	4126 <long_division+0x3e>
    4188:	4294      	cmp	r4, r2
    418a:	d8d8      	bhi.n	413e <long_division+0x56>
    418c:	e7cb      	b.n	4126 <long_division+0x3e>
    418e:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    4190:	4658      	mov	r0, fp
    4192:	0019      	movs	r1, r3
    4194:	b007      	add	sp, #28
    4196:	bc3c      	pop	{r2, r3, r4, r5}
    4198:	4690      	mov	r8, r2
    419a:	4699      	mov	r9, r3
    419c:	46a2      	mov	sl, r4
    419e:	46ab      	mov	fp, r5
    41a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000041a2 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    41a2:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    41a4:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    41a6:	2340      	movs	r3, #64	; 0x40
    41a8:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    41aa:	4281      	cmp	r1, r0
    41ac:	d202      	bcs.n	41b4 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    41ae:	0018      	movs	r0, r3
    41b0:	bd10      	pop	{r4, pc}
		baud_calculated++;
    41b2:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    41b4:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    41b6:	1c63      	adds	r3, r4, #1
    41b8:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    41ba:	4288      	cmp	r0, r1
    41bc:	d9f9      	bls.n	41b2 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    41be:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    41c0:	2cff      	cmp	r4, #255	; 0xff
    41c2:	d8f4      	bhi.n	41ae <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    41c4:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    41c6:	2300      	movs	r3, #0
    41c8:	e7f1      	b.n	41ae <_sercom_get_sync_baud_val+0xc>
	...

000041cc <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    41cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    41ce:	b083      	sub	sp, #12
    41d0:	000f      	movs	r7, r1
    41d2:	0016      	movs	r6, r2
    41d4:	aa08      	add	r2, sp, #32
    41d6:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    41d8:	0004      	movs	r4, r0
    41da:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    41dc:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    41de:	42bc      	cmp	r4, r7
    41e0:	d902      	bls.n	41e8 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    41e2:	0010      	movs	r0, r2
    41e4:	b003      	add	sp, #12
    41e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    41e8:	2b00      	cmp	r3, #0
    41ea:	d114      	bne.n	4216 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    41ec:	0002      	movs	r2, r0
    41ee:	0008      	movs	r0, r1
    41f0:	2100      	movs	r1, #0
    41f2:	4c19      	ldr	r4, [pc, #100]	; (4258 <_sercom_get_async_baud_val+0x8c>)
    41f4:	47a0      	blx	r4
    41f6:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    41f8:	003a      	movs	r2, r7
    41fa:	2300      	movs	r3, #0
    41fc:	2000      	movs	r0, #0
    41fe:	4c17      	ldr	r4, [pc, #92]	; (425c <_sercom_get_async_baud_val+0x90>)
    4200:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    4202:	2200      	movs	r2, #0
    4204:	2301      	movs	r3, #1
    4206:	1a12      	subs	r2, r2, r0
    4208:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    420a:	0c12      	lsrs	r2, r2, #16
    420c:	041b      	lsls	r3, r3, #16
    420e:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    4210:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    4212:	2200      	movs	r2, #0
    4214:	e7e5      	b.n	41e2 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    4216:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    4218:	2b01      	cmp	r3, #1
    421a:	d1f9      	bne.n	4210 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    421c:	000a      	movs	r2, r1
    421e:	2300      	movs	r3, #0
    4220:	2100      	movs	r1, #0
    4222:	4c0d      	ldr	r4, [pc, #52]	; (4258 <_sercom_get_async_baud_val+0x8c>)
    4224:	47a0      	blx	r4
    4226:	0002      	movs	r2, r0
    4228:	000b      	movs	r3, r1
    422a:	9200      	str	r2, [sp, #0]
    422c:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    422e:	0038      	movs	r0, r7
    4230:	2100      	movs	r1, #0
    4232:	4c0a      	ldr	r4, [pc, #40]	; (425c <_sercom_get_async_baud_val+0x90>)
    4234:	47a0      	blx	r4
    4236:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    4238:	2380      	movs	r3, #128	; 0x80
    423a:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    423c:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    423e:	4298      	cmp	r0, r3
    4240:	d8cf      	bhi.n	41e2 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    4242:	0f79      	lsrs	r1, r7, #29
    4244:	00f8      	lsls	r0, r7, #3
    4246:	9a00      	ldr	r2, [sp, #0]
    4248:	9b01      	ldr	r3, [sp, #4]
    424a:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    424c:	00ea      	lsls	r2, r5, #3
    424e:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    4250:	b2d2      	uxtb	r2, r2
    4252:	0352      	lsls	r2, r2, #13
    4254:	432a      	orrs	r2, r5
    4256:	e7db      	b.n	4210 <_sercom_get_async_baud_val+0x44>
    4258:	00007701 	.word	0x00007701
    425c:	000040e9 	.word	0x000040e9

00004260 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    4260:	b510      	push	{r4, lr}
    4262:	b082      	sub	sp, #8
    4264:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    4266:	4b0e      	ldr	r3, [pc, #56]	; (42a0 <sercom_set_gclk_generator+0x40>)
    4268:	781b      	ldrb	r3, [r3, #0]
    426a:	2b00      	cmp	r3, #0
    426c:	d007      	beq.n	427e <sercom_set_gclk_generator+0x1e>
    426e:	2900      	cmp	r1, #0
    4270:	d105      	bne.n	427e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    4272:	4b0b      	ldr	r3, [pc, #44]	; (42a0 <sercom_set_gclk_generator+0x40>)
    4274:	785b      	ldrb	r3, [r3, #1]
    4276:	4283      	cmp	r3, r0
    4278:	d010      	beq.n	429c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    427a:	201d      	movs	r0, #29
    427c:	e00c      	b.n	4298 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    427e:	a901      	add	r1, sp, #4
    4280:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    4282:	2013      	movs	r0, #19
    4284:	4b07      	ldr	r3, [pc, #28]	; (42a4 <sercom_set_gclk_generator+0x44>)
    4286:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    4288:	2013      	movs	r0, #19
    428a:	4b07      	ldr	r3, [pc, #28]	; (42a8 <sercom_set_gclk_generator+0x48>)
    428c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    428e:	4b04      	ldr	r3, [pc, #16]	; (42a0 <sercom_set_gclk_generator+0x40>)
    4290:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    4292:	2201      	movs	r2, #1
    4294:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    4296:	2000      	movs	r0, #0
}
    4298:	b002      	add	sp, #8
    429a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    429c:	2000      	movs	r0, #0
    429e:	e7fb      	b.n	4298 <sercom_set_gclk_generator+0x38>
    42a0:	200000ac 	.word	0x200000ac
    42a4:	00005599 	.word	0x00005599
    42a8:	0000550d 	.word	0x0000550d

000042ac <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    42ac:	4b40      	ldr	r3, [pc, #256]	; (43b0 <_sercom_get_default_pad+0x104>)
    42ae:	4298      	cmp	r0, r3
    42b0:	d031      	beq.n	4316 <_sercom_get_default_pad+0x6a>
    42b2:	d90a      	bls.n	42ca <_sercom_get_default_pad+0x1e>
    42b4:	4b3f      	ldr	r3, [pc, #252]	; (43b4 <_sercom_get_default_pad+0x108>)
    42b6:	4298      	cmp	r0, r3
    42b8:	d04d      	beq.n	4356 <_sercom_get_default_pad+0xaa>
    42ba:	4b3f      	ldr	r3, [pc, #252]	; (43b8 <_sercom_get_default_pad+0x10c>)
    42bc:	4298      	cmp	r0, r3
    42be:	d05a      	beq.n	4376 <_sercom_get_default_pad+0xca>
    42c0:	4b3e      	ldr	r3, [pc, #248]	; (43bc <_sercom_get_default_pad+0x110>)
    42c2:	4298      	cmp	r0, r3
    42c4:	d037      	beq.n	4336 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    42c6:	2000      	movs	r0, #0
}
    42c8:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    42ca:	4b3d      	ldr	r3, [pc, #244]	; (43c0 <_sercom_get_default_pad+0x114>)
    42cc:	4298      	cmp	r0, r3
    42ce:	d00c      	beq.n	42ea <_sercom_get_default_pad+0x3e>
    42d0:	4b3c      	ldr	r3, [pc, #240]	; (43c4 <_sercom_get_default_pad+0x118>)
    42d2:	4298      	cmp	r0, r3
    42d4:	d1f7      	bne.n	42c6 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    42d6:	2901      	cmp	r1, #1
    42d8:	d017      	beq.n	430a <_sercom_get_default_pad+0x5e>
    42da:	2900      	cmp	r1, #0
    42dc:	d05d      	beq.n	439a <_sercom_get_default_pad+0xee>
    42de:	2902      	cmp	r1, #2
    42e0:	d015      	beq.n	430e <_sercom_get_default_pad+0x62>
    42e2:	2903      	cmp	r1, #3
    42e4:	d015      	beq.n	4312 <_sercom_get_default_pad+0x66>
	return 0;
    42e6:	2000      	movs	r0, #0
    42e8:	e7ee      	b.n	42c8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    42ea:	2901      	cmp	r1, #1
    42ec:	d007      	beq.n	42fe <_sercom_get_default_pad+0x52>
    42ee:	2900      	cmp	r1, #0
    42f0:	d051      	beq.n	4396 <_sercom_get_default_pad+0xea>
    42f2:	2902      	cmp	r1, #2
    42f4:	d005      	beq.n	4302 <_sercom_get_default_pad+0x56>
    42f6:	2903      	cmp	r1, #3
    42f8:	d005      	beq.n	4306 <_sercom_get_default_pad+0x5a>
	return 0;
    42fa:	2000      	movs	r0, #0
    42fc:	e7e4      	b.n	42c8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    42fe:	4832      	ldr	r0, [pc, #200]	; (43c8 <_sercom_get_default_pad+0x11c>)
    4300:	e7e2      	b.n	42c8 <_sercom_get_default_pad+0x1c>
    4302:	4832      	ldr	r0, [pc, #200]	; (43cc <_sercom_get_default_pad+0x120>)
    4304:	e7e0      	b.n	42c8 <_sercom_get_default_pad+0x1c>
    4306:	4832      	ldr	r0, [pc, #200]	; (43d0 <_sercom_get_default_pad+0x124>)
    4308:	e7de      	b.n	42c8 <_sercom_get_default_pad+0x1c>
    430a:	4832      	ldr	r0, [pc, #200]	; (43d4 <_sercom_get_default_pad+0x128>)
    430c:	e7dc      	b.n	42c8 <_sercom_get_default_pad+0x1c>
    430e:	4832      	ldr	r0, [pc, #200]	; (43d8 <_sercom_get_default_pad+0x12c>)
    4310:	e7da      	b.n	42c8 <_sercom_get_default_pad+0x1c>
    4312:	4832      	ldr	r0, [pc, #200]	; (43dc <_sercom_get_default_pad+0x130>)
    4314:	e7d8      	b.n	42c8 <_sercom_get_default_pad+0x1c>
    4316:	2901      	cmp	r1, #1
    4318:	d007      	beq.n	432a <_sercom_get_default_pad+0x7e>
    431a:	2900      	cmp	r1, #0
    431c:	d03f      	beq.n	439e <_sercom_get_default_pad+0xf2>
    431e:	2902      	cmp	r1, #2
    4320:	d005      	beq.n	432e <_sercom_get_default_pad+0x82>
    4322:	2903      	cmp	r1, #3
    4324:	d005      	beq.n	4332 <_sercom_get_default_pad+0x86>
	return 0;
    4326:	2000      	movs	r0, #0
    4328:	e7ce      	b.n	42c8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    432a:	482d      	ldr	r0, [pc, #180]	; (43e0 <_sercom_get_default_pad+0x134>)
    432c:	e7cc      	b.n	42c8 <_sercom_get_default_pad+0x1c>
    432e:	482d      	ldr	r0, [pc, #180]	; (43e4 <_sercom_get_default_pad+0x138>)
    4330:	e7ca      	b.n	42c8 <_sercom_get_default_pad+0x1c>
    4332:	482d      	ldr	r0, [pc, #180]	; (43e8 <_sercom_get_default_pad+0x13c>)
    4334:	e7c8      	b.n	42c8 <_sercom_get_default_pad+0x1c>
    4336:	2901      	cmp	r1, #1
    4338:	d007      	beq.n	434a <_sercom_get_default_pad+0x9e>
    433a:	2900      	cmp	r1, #0
    433c:	d031      	beq.n	43a2 <_sercom_get_default_pad+0xf6>
    433e:	2902      	cmp	r1, #2
    4340:	d005      	beq.n	434e <_sercom_get_default_pad+0xa2>
    4342:	2903      	cmp	r1, #3
    4344:	d005      	beq.n	4352 <_sercom_get_default_pad+0xa6>
	return 0;
    4346:	2000      	movs	r0, #0
    4348:	e7be      	b.n	42c8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    434a:	4828      	ldr	r0, [pc, #160]	; (43ec <_sercom_get_default_pad+0x140>)
    434c:	e7bc      	b.n	42c8 <_sercom_get_default_pad+0x1c>
    434e:	4828      	ldr	r0, [pc, #160]	; (43f0 <_sercom_get_default_pad+0x144>)
    4350:	e7ba      	b.n	42c8 <_sercom_get_default_pad+0x1c>
    4352:	4828      	ldr	r0, [pc, #160]	; (43f4 <_sercom_get_default_pad+0x148>)
    4354:	e7b8      	b.n	42c8 <_sercom_get_default_pad+0x1c>
    4356:	2901      	cmp	r1, #1
    4358:	d007      	beq.n	436a <_sercom_get_default_pad+0xbe>
    435a:	2900      	cmp	r1, #0
    435c:	d023      	beq.n	43a6 <_sercom_get_default_pad+0xfa>
    435e:	2902      	cmp	r1, #2
    4360:	d005      	beq.n	436e <_sercom_get_default_pad+0xc2>
    4362:	2903      	cmp	r1, #3
    4364:	d005      	beq.n	4372 <_sercom_get_default_pad+0xc6>
	return 0;
    4366:	2000      	movs	r0, #0
    4368:	e7ae      	b.n	42c8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    436a:	4823      	ldr	r0, [pc, #140]	; (43f8 <_sercom_get_default_pad+0x14c>)
    436c:	e7ac      	b.n	42c8 <_sercom_get_default_pad+0x1c>
    436e:	4823      	ldr	r0, [pc, #140]	; (43fc <_sercom_get_default_pad+0x150>)
    4370:	e7aa      	b.n	42c8 <_sercom_get_default_pad+0x1c>
    4372:	4823      	ldr	r0, [pc, #140]	; (4400 <_sercom_get_default_pad+0x154>)
    4374:	e7a8      	b.n	42c8 <_sercom_get_default_pad+0x1c>
    4376:	2901      	cmp	r1, #1
    4378:	d007      	beq.n	438a <_sercom_get_default_pad+0xde>
    437a:	2900      	cmp	r1, #0
    437c:	d015      	beq.n	43aa <_sercom_get_default_pad+0xfe>
    437e:	2902      	cmp	r1, #2
    4380:	d005      	beq.n	438e <_sercom_get_default_pad+0xe2>
    4382:	2903      	cmp	r1, #3
    4384:	d005      	beq.n	4392 <_sercom_get_default_pad+0xe6>
	return 0;
    4386:	2000      	movs	r0, #0
    4388:	e79e      	b.n	42c8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    438a:	481e      	ldr	r0, [pc, #120]	; (4404 <_sercom_get_default_pad+0x158>)
    438c:	e79c      	b.n	42c8 <_sercom_get_default_pad+0x1c>
    438e:	481e      	ldr	r0, [pc, #120]	; (4408 <_sercom_get_default_pad+0x15c>)
    4390:	e79a      	b.n	42c8 <_sercom_get_default_pad+0x1c>
    4392:	481e      	ldr	r0, [pc, #120]	; (440c <_sercom_get_default_pad+0x160>)
    4394:	e798      	b.n	42c8 <_sercom_get_default_pad+0x1c>
    4396:	481e      	ldr	r0, [pc, #120]	; (4410 <_sercom_get_default_pad+0x164>)
    4398:	e796      	b.n	42c8 <_sercom_get_default_pad+0x1c>
    439a:	2003      	movs	r0, #3
    439c:	e794      	b.n	42c8 <_sercom_get_default_pad+0x1c>
    439e:	481d      	ldr	r0, [pc, #116]	; (4414 <_sercom_get_default_pad+0x168>)
    43a0:	e792      	b.n	42c8 <_sercom_get_default_pad+0x1c>
    43a2:	481d      	ldr	r0, [pc, #116]	; (4418 <_sercom_get_default_pad+0x16c>)
    43a4:	e790      	b.n	42c8 <_sercom_get_default_pad+0x1c>
    43a6:	481d      	ldr	r0, [pc, #116]	; (441c <_sercom_get_default_pad+0x170>)
    43a8:	e78e      	b.n	42c8 <_sercom_get_default_pad+0x1c>
    43aa:	481d      	ldr	r0, [pc, #116]	; (4420 <_sercom_get_default_pad+0x174>)
    43ac:	e78c      	b.n	42c8 <_sercom_get_default_pad+0x1c>
    43ae:	46c0      	nop			; (mov r8, r8)
    43b0:	42001000 	.word	0x42001000
    43b4:	42001800 	.word	0x42001800
    43b8:	42001c00 	.word	0x42001c00
    43bc:	42001400 	.word	0x42001400
    43c0:	42000800 	.word	0x42000800
    43c4:	42000c00 	.word	0x42000c00
    43c8:	00050003 	.word	0x00050003
    43cc:	00060003 	.word	0x00060003
    43d0:	00070003 	.word	0x00070003
    43d4:	00010003 	.word	0x00010003
    43d8:	001e0003 	.word	0x001e0003
    43dc:	001f0003 	.word	0x001f0003
    43e0:	00090003 	.word	0x00090003
    43e4:	000a0003 	.word	0x000a0003
    43e8:	000b0003 	.word	0x000b0003
    43ec:	00110003 	.word	0x00110003
    43f0:	00120003 	.word	0x00120003
    43f4:	00130003 	.word	0x00130003
    43f8:	000d0003 	.word	0x000d0003
    43fc:	000e0003 	.word	0x000e0003
    4400:	000f0003 	.word	0x000f0003
    4404:	00170003 	.word	0x00170003
    4408:	00180003 	.word	0x00180003
    440c:	00190003 	.word	0x00190003
    4410:	00040003 	.word	0x00040003
    4414:	00080003 	.word	0x00080003
    4418:	00100003 	.word	0x00100003
    441c:	000c0003 	.word	0x000c0003
    4420:	00160003 	.word	0x00160003

00004424 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    4424:	b530      	push	{r4, r5, lr}
    4426:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    4428:	4b0b      	ldr	r3, [pc, #44]	; (4458 <_sercom_get_sercom_inst_index+0x34>)
    442a:	466a      	mov	r2, sp
    442c:	cb32      	ldmia	r3!, {r1, r4, r5}
    442e:	c232      	stmia	r2!, {r1, r4, r5}
    4430:	cb32      	ldmia	r3!, {r1, r4, r5}
    4432:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    4434:	9b00      	ldr	r3, [sp, #0]
    4436:	4283      	cmp	r3, r0
    4438:	d00b      	beq.n	4452 <_sercom_get_sercom_inst_index+0x2e>
    443a:	2301      	movs	r3, #1
    443c:	009a      	lsls	r2, r3, #2
    443e:	4669      	mov	r1, sp
    4440:	5852      	ldr	r2, [r2, r1]
    4442:	4282      	cmp	r2, r0
    4444:	d006      	beq.n	4454 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4446:	3301      	adds	r3, #1
    4448:	2b06      	cmp	r3, #6
    444a:	d1f7      	bne.n	443c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    444c:	2000      	movs	r0, #0
}
    444e:	b007      	add	sp, #28
    4450:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4452:	2300      	movs	r3, #0
			return i;
    4454:	b2d8      	uxtb	r0, r3
    4456:	e7fa      	b.n	444e <_sercom_get_sercom_inst_index+0x2a>
    4458:	0000b78c 	.word	0x0000b78c

0000445c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    445c:	4770      	bx	lr
	...

00004460 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    4460:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    4462:	4b0a      	ldr	r3, [pc, #40]	; (448c <_sercom_set_handler+0x2c>)
    4464:	781b      	ldrb	r3, [r3, #0]
    4466:	2b00      	cmp	r3, #0
    4468:	d10c      	bne.n	4484 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    446a:	4f09      	ldr	r7, [pc, #36]	; (4490 <_sercom_set_handler+0x30>)
    446c:	4e09      	ldr	r6, [pc, #36]	; (4494 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    446e:	4d0a      	ldr	r5, [pc, #40]	; (4498 <_sercom_set_handler+0x38>)
    4470:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    4472:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    4474:	195a      	adds	r2, r3, r5
    4476:	6014      	str	r4, [r2, #0]
    4478:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    447a:	2b18      	cmp	r3, #24
    447c:	d1f9      	bne.n	4472 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    447e:	2201      	movs	r2, #1
    4480:	4b02      	ldr	r3, [pc, #8]	; (448c <_sercom_set_handler+0x2c>)
    4482:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    4484:	0080      	lsls	r0, r0, #2
    4486:	4b02      	ldr	r3, [pc, #8]	; (4490 <_sercom_set_handler+0x30>)
    4488:	50c1      	str	r1, [r0, r3]
}
    448a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    448c:	200000ae 	.word	0x200000ae
    4490:	200000b0 	.word	0x200000b0
    4494:	0000445d 	.word	0x0000445d
    4498:	200003e4 	.word	0x200003e4

0000449c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    449c:	b500      	push	{lr}
    449e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    44a0:	2309      	movs	r3, #9
    44a2:	466a      	mov	r2, sp
    44a4:	7013      	strb	r3, [r2, #0]
    44a6:	3301      	adds	r3, #1
    44a8:	7053      	strb	r3, [r2, #1]
    44aa:	3301      	adds	r3, #1
    44ac:	7093      	strb	r3, [r2, #2]
    44ae:	3301      	adds	r3, #1
    44b0:	70d3      	strb	r3, [r2, #3]
    44b2:	3301      	adds	r3, #1
    44b4:	7113      	strb	r3, [r2, #4]
    44b6:	3301      	adds	r3, #1
    44b8:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    44ba:	4b03      	ldr	r3, [pc, #12]	; (44c8 <_sercom_get_interrupt_vector+0x2c>)
    44bc:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    44be:	466b      	mov	r3, sp
    44c0:	5618      	ldrsb	r0, [r3, r0]
}
    44c2:	b003      	add	sp, #12
    44c4:	bd00      	pop	{pc}
    44c6:	46c0      	nop			; (mov r8, r8)
    44c8:	00004425 	.word	0x00004425

000044cc <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    44cc:	b510      	push	{r4, lr}
    44ce:	4b02      	ldr	r3, [pc, #8]	; (44d8 <SERCOM0_Handler+0xc>)
    44d0:	681b      	ldr	r3, [r3, #0]
    44d2:	2000      	movs	r0, #0
    44d4:	4798      	blx	r3
    44d6:	bd10      	pop	{r4, pc}
    44d8:	200000b0 	.word	0x200000b0

000044dc <SERCOM1_Handler>:
    44dc:	b510      	push	{r4, lr}
    44de:	4b02      	ldr	r3, [pc, #8]	; (44e8 <SERCOM1_Handler+0xc>)
    44e0:	685b      	ldr	r3, [r3, #4]
    44e2:	2001      	movs	r0, #1
    44e4:	4798      	blx	r3
    44e6:	bd10      	pop	{r4, pc}
    44e8:	200000b0 	.word	0x200000b0

000044ec <SERCOM2_Handler>:
    44ec:	b510      	push	{r4, lr}
    44ee:	4b02      	ldr	r3, [pc, #8]	; (44f8 <SERCOM2_Handler+0xc>)
    44f0:	689b      	ldr	r3, [r3, #8]
    44f2:	2002      	movs	r0, #2
    44f4:	4798      	blx	r3
    44f6:	bd10      	pop	{r4, pc}
    44f8:	200000b0 	.word	0x200000b0

000044fc <SERCOM3_Handler>:
    44fc:	b510      	push	{r4, lr}
    44fe:	4b02      	ldr	r3, [pc, #8]	; (4508 <SERCOM3_Handler+0xc>)
    4500:	68db      	ldr	r3, [r3, #12]
    4502:	2003      	movs	r0, #3
    4504:	4798      	blx	r3
    4506:	bd10      	pop	{r4, pc}
    4508:	200000b0 	.word	0x200000b0

0000450c <SERCOM4_Handler>:
    450c:	b510      	push	{r4, lr}
    450e:	4b02      	ldr	r3, [pc, #8]	; (4518 <SERCOM4_Handler+0xc>)
    4510:	691b      	ldr	r3, [r3, #16]
    4512:	2004      	movs	r0, #4
    4514:	4798      	blx	r3
    4516:	bd10      	pop	{r4, pc}
    4518:	200000b0 	.word	0x200000b0

0000451c <SERCOM5_Handler>:
    451c:	b510      	push	{r4, lr}
    451e:	4b02      	ldr	r3, [pc, #8]	; (4528 <SERCOM5_Handler+0xc>)
    4520:	695b      	ldr	r3, [r3, #20]
    4522:	2005      	movs	r0, #5
    4524:	4798      	blx	r3
    4526:	bd10      	pop	{r4, pc}
    4528:	200000b0 	.word	0x200000b0

0000452c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    452c:	b5f0      	push	{r4, r5, r6, r7, lr}
    452e:	b08b      	sub	sp, #44	; 0x2c
    4530:	0005      	movs	r5, r0
    4532:	000c      	movs	r4, r1
    4534:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    4536:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    4538:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    453a:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    453c:	079b      	lsls	r3, r3, #30
    453e:	d501      	bpl.n	4544 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    4540:	b00b      	add	sp, #44	; 0x2c
    4542:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    4544:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    4546:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    4548:	07db      	lsls	r3, r3, #31
    454a:	d4f9      	bmi.n	4540 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    454c:	0008      	movs	r0, r1
    454e:	4b60      	ldr	r3, [pc, #384]	; (46d0 <spi_init+0x1a4>)
    4550:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    4552:	4a60      	ldr	r2, [pc, #384]	; (46d4 <spi_init+0x1a8>)
    4554:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    4556:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4558:	2301      	movs	r3, #1
    455a:	40bb      	lsls	r3, r7
    455c:	430b      	orrs	r3, r1
    455e:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    4560:	a909      	add	r1, sp, #36	; 0x24
    4562:	2724      	movs	r7, #36	; 0x24
    4564:	5df3      	ldrb	r3, [r6, r7]
    4566:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4568:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    456a:	b2c3      	uxtb	r3, r0
    456c:	9301      	str	r3, [sp, #4]
    456e:	0018      	movs	r0, r3
    4570:	4b59      	ldr	r3, [pc, #356]	; (46d8 <spi_init+0x1ac>)
    4572:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4574:	9801      	ldr	r0, [sp, #4]
    4576:	4b59      	ldr	r3, [pc, #356]	; (46dc <spi_init+0x1b0>)
    4578:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    457a:	5df0      	ldrb	r0, [r6, r7]
    457c:	2100      	movs	r1, #0
    457e:	4b58      	ldr	r3, [pc, #352]	; (46e0 <spi_init+0x1b4>)
    4580:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    4582:	7833      	ldrb	r3, [r6, #0]
    4584:	2b01      	cmp	r3, #1
    4586:	d038      	beq.n	45fa <spi_init+0xce>
    4588:	002b      	movs	r3, r5
    458a:	330c      	adds	r3, #12
    458c:	0029      	movs	r1, r5
    458e:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    4590:	2200      	movs	r2, #0
    4592:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    4594:	428b      	cmp	r3, r1
    4596:	d1fc      	bne.n	4592 <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    4598:	2300      	movs	r3, #0
    459a:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    459c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    459e:	2400      	movs	r4, #0
    45a0:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    45a2:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    45a4:	3336      	adds	r3, #54	; 0x36
    45a6:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    45a8:	3301      	adds	r3, #1
    45aa:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    45ac:	3301      	adds	r3, #1
    45ae:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    45b0:	3b35      	subs	r3, #53	; 0x35
    45b2:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    45b4:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    45b6:	6828      	ldr	r0, [r5, #0]
    45b8:	4b45      	ldr	r3, [pc, #276]	; (46d0 <spi_init+0x1a4>)
    45ba:	4798      	blx	r3
    45bc:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    45be:	4949      	ldr	r1, [pc, #292]	; (46e4 <spi_init+0x1b8>)
    45c0:	4b49      	ldr	r3, [pc, #292]	; (46e8 <spi_init+0x1bc>)
    45c2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    45c4:	00bf      	lsls	r7, r7, #2
    45c6:	4b49      	ldr	r3, [pc, #292]	; (46ec <spi_init+0x1c0>)
    45c8:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    45ca:	682f      	ldr	r7, [r5, #0]
    45cc:	ab04      	add	r3, sp, #16
    45ce:	2280      	movs	r2, #128	; 0x80
    45d0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    45d2:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    45d4:	3a7f      	subs	r2, #127	; 0x7f
    45d6:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    45d8:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    45da:	7833      	ldrb	r3, [r6, #0]
    45dc:	2b00      	cmp	r3, #0
    45de:	d102      	bne.n	45e6 <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    45e0:	2200      	movs	r2, #0
    45e2:	ab04      	add	r3, sp, #16
    45e4:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    45e6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    45e8:	9305      	str	r3, [sp, #20]
    45ea:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    45ec:	9306      	str	r3, [sp, #24]
    45ee:	6b33      	ldr	r3, [r6, #48]	; 0x30
    45f0:	9307      	str	r3, [sp, #28]
    45f2:	6b73      	ldr	r3, [r6, #52]	; 0x34
    45f4:	9308      	str	r3, [sp, #32]
    45f6:	2400      	movs	r4, #0
    45f8:	e00b      	b.n	4612 <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    45fa:	6823      	ldr	r3, [r4, #0]
    45fc:	220c      	movs	r2, #12
    45fe:	4313      	orrs	r3, r2
    4600:	6023      	str	r3, [r4, #0]
    4602:	e7c1      	b.n	4588 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4604:	0038      	movs	r0, r7
    4606:	4b3a      	ldr	r3, [pc, #232]	; (46f0 <spi_init+0x1c4>)
    4608:	4798      	blx	r3
    460a:	e00a      	b.n	4622 <spi_init+0xf6>
    460c:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    460e:	2c04      	cmp	r4, #4
    4610:	d010      	beq.n	4634 <spi_init+0x108>
    4612:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4614:	00a3      	lsls	r3, r4, #2
    4616:	aa02      	add	r2, sp, #8
    4618:	200c      	movs	r0, #12
    461a:	1812      	adds	r2, r2, r0
    461c:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    461e:	2800      	cmp	r0, #0
    4620:	d0f0      	beq.n	4604 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    4622:	1c43      	adds	r3, r0, #1
    4624:	d0f2      	beq.n	460c <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4626:	a904      	add	r1, sp, #16
    4628:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    462a:	0c00      	lsrs	r0, r0, #16
    462c:	b2c0      	uxtb	r0, r0
    462e:	4b31      	ldr	r3, [pc, #196]	; (46f4 <spi_init+0x1c8>)
    4630:	4798      	blx	r3
    4632:	e7eb      	b.n	460c <spi_init+0xe0>
	module->mode             = config->mode;
    4634:	7833      	ldrb	r3, [r6, #0]
    4636:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    4638:	7c33      	ldrb	r3, [r6, #16]
    463a:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    463c:	7cb3      	ldrb	r3, [r6, #18]
    463e:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    4640:	7d33      	ldrb	r3, [r6, #20]
    4642:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    4644:	2200      	movs	r2, #0
    4646:	ab02      	add	r3, sp, #8
    4648:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    464a:	7833      	ldrb	r3, [r6, #0]
    464c:	2b01      	cmp	r3, #1
    464e:	d028      	beq.n	46a2 <spi_init+0x176>
	ctrla |= config->transfer_mode;
    4650:	6873      	ldr	r3, [r6, #4]
    4652:	68b2      	ldr	r2, [r6, #8]
    4654:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    4656:	68f2      	ldr	r2, [r6, #12]
    4658:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    465a:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    465c:	7c72      	ldrb	r2, [r6, #17]
    465e:	2a00      	cmp	r2, #0
    4660:	d103      	bne.n	466a <spi_init+0x13e>
    4662:	4a25      	ldr	r2, [pc, #148]	; (46f8 <spi_init+0x1cc>)
    4664:	7892      	ldrb	r2, [r2, #2]
    4666:	0792      	lsls	r2, r2, #30
    4668:	d501      	bpl.n	466e <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    466a:	2280      	movs	r2, #128	; 0x80
    466c:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    466e:	7cb2      	ldrb	r2, [r6, #18]
    4670:	2a00      	cmp	r2, #0
    4672:	d002      	beq.n	467a <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    4674:	2280      	movs	r2, #128	; 0x80
    4676:	0292      	lsls	r2, r2, #10
    4678:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    467a:	7cf2      	ldrb	r2, [r6, #19]
    467c:	2a00      	cmp	r2, #0
    467e:	d002      	beq.n	4686 <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    4680:	2280      	movs	r2, #128	; 0x80
    4682:	0092      	lsls	r2, r2, #2
    4684:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    4686:	7d32      	ldrb	r2, [r6, #20]
    4688:	2a00      	cmp	r2, #0
    468a:	d002      	beq.n	4692 <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    468c:	2280      	movs	r2, #128	; 0x80
    468e:	0192      	lsls	r2, r2, #6
    4690:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    4692:	683a      	ldr	r2, [r7, #0]
    4694:	4313      	orrs	r3, r2
    4696:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    4698:	687b      	ldr	r3, [r7, #4]
    469a:	430b      	orrs	r3, r1
    469c:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    469e:	2000      	movs	r0, #0
    46a0:	e74e      	b.n	4540 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    46a2:	6828      	ldr	r0, [r5, #0]
    46a4:	4b0a      	ldr	r3, [pc, #40]	; (46d0 <spi_init+0x1a4>)
    46a6:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    46a8:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    46aa:	b2c0      	uxtb	r0, r0
    46ac:	4b13      	ldr	r3, [pc, #76]	; (46fc <spi_init+0x1d0>)
    46ae:	4798      	blx	r3
    46b0:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    46b2:	ab02      	add	r3, sp, #8
    46b4:	1d9a      	adds	r2, r3, #6
    46b6:	69b0      	ldr	r0, [r6, #24]
    46b8:	4b11      	ldr	r3, [pc, #68]	; (4700 <spi_init+0x1d4>)
    46ba:	4798      	blx	r3
    46bc:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    46be:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    46c0:	2b00      	cmp	r3, #0
    46c2:	d000      	beq.n	46c6 <spi_init+0x19a>
    46c4:	e73c      	b.n	4540 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    46c6:	ab02      	add	r3, sp, #8
    46c8:	3306      	adds	r3, #6
    46ca:	781b      	ldrb	r3, [r3, #0]
    46cc:	733b      	strb	r3, [r7, #12]
    46ce:	e7bf      	b.n	4650 <spi_init+0x124>
    46d0:	00004425 	.word	0x00004425
    46d4:	40000400 	.word	0x40000400
    46d8:	00005599 	.word	0x00005599
    46dc:	0000550d 	.word	0x0000550d
    46e0:	00004261 	.word	0x00004261
    46e4:	000047f9 	.word	0x000047f9
    46e8:	00004461 	.word	0x00004461
    46ec:	200003e4 	.word	0x200003e4
    46f0:	000042ad 	.word	0x000042ad
    46f4:	00005691 	.word	0x00005691
    46f8:	41002000 	.word	0x41002000
    46fc:	000055b5 	.word	0x000055b5
    4700:	000041a3 	.word	0x000041a3

00004704 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    4704:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    4706:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    4708:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    470a:	2c01      	cmp	r4, #1
    470c:	d001      	beq.n	4712 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    470e:	0018      	movs	r0, r3
    4710:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    4712:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    4714:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    4716:	2c00      	cmp	r4, #0
    4718:	d1f9      	bne.n	470e <spi_select_slave+0xa>
		if (select) {
    471a:	2a00      	cmp	r2, #0
    471c:	d058      	beq.n	47d0 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    471e:	784b      	ldrb	r3, [r1, #1]
    4720:	2b00      	cmp	r3, #0
    4722:	d044      	beq.n	47ae <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4724:	6803      	ldr	r3, [r0, #0]
    4726:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    4728:	07db      	lsls	r3, r3, #31
    472a:	d410      	bmi.n	474e <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    472c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    472e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    4730:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4732:	2900      	cmp	r1, #0
    4734:	d104      	bne.n	4740 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    4736:	0953      	lsrs	r3, r2, #5
    4738:	01db      	lsls	r3, r3, #7
    473a:	492e      	ldr	r1, [pc, #184]	; (47f4 <spi_select_slave+0xf0>)
    473c:	468c      	mov	ip, r1
    473e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4740:	211f      	movs	r1, #31
    4742:	4011      	ands	r1, r2
    4744:	2201      	movs	r2, #1
    4746:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    4748:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    474a:	2305      	movs	r3, #5
    474c:	e7df      	b.n	470e <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    474e:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    4750:	09d4      	lsrs	r4, r2, #7
		return NULL;
    4752:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4754:	2c00      	cmp	r4, #0
    4756:	d104      	bne.n	4762 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    4758:	0953      	lsrs	r3, r2, #5
    475a:	01db      	lsls	r3, r3, #7
    475c:	4c25      	ldr	r4, [pc, #148]	; (47f4 <spi_select_slave+0xf0>)
    475e:	46a4      	mov	ip, r4
    4760:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4762:	241f      	movs	r4, #31
    4764:	4014      	ands	r4, r2
    4766:	2201      	movs	r2, #1
    4768:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    476a:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    476c:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    476e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4770:	07d2      	lsls	r2, r2, #31
    4772:	d501      	bpl.n	4778 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4774:	788a      	ldrb	r2, [r1, #2]
    4776:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    4778:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    477a:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    477c:	2a00      	cmp	r2, #0
    477e:	d1c6      	bne.n	470e <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    4780:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    4782:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4784:	7e13      	ldrb	r3, [r2, #24]
    4786:	420b      	tst	r3, r1
    4788:	d0fc      	beq.n	4784 <spi_select_slave+0x80>
    478a:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    478c:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    478e:	0749      	lsls	r1, r1, #29
    4790:	d5bd      	bpl.n	470e <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4792:	8b53      	ldrh	r3, [r2, #26]
    4794:	075b      	lsls	r3, r3, #29
    4796:	d501      	bpl.n	479c <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4798:	2304      	movs	r3, #4
    479a:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    479c:	7983      	ldrb	r3, [r0, #6]
    479e:	2b01      	cmp	r3, #1
    47a0:	d002      	beq.n	47a8 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    47a2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    47a4:	2300      	movs	r3, #0
    47a6:	e7b2      	b.n	470e <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    47a8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    47aa:	2300      	movs	r3, #0
    47ac:	e7af      	b.n	470e <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    47ae:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    47b0:	09d1      	lsrs	r1, r2, #7
		return NULL;
    47b2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    47b4:	2900      	cmp	r1, #0
    47b6:	d104      	bne.n	47c2 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    47b8:	0953      	lsrs	r3, r2, #5
    47ba:	01db      	lsls	r3, r3, #7
    47bc:	490d      	ldr	r1, [pc, #52]	; (47f4 <spi_select_slave+0xf0>)
    47be:	468c      	mov	ip, r1
    47c0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    47c2:	211f      	movs	r1, #31
    47c4:	4011      	ands	r1, r2
    47c6:	2201      	movs	r2, #1
    47c8:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    47ca:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    47cc:	2300      	movs	r3, #0
    47ce:	e79e      	b.n	470e <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    47d0:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    47d2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    47d4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    47d6:	2900      	cmp	r1, #0
    47d8:	d104      	bne.n	47e4 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    47da:	0953      	lsrs	r3, r2, #5
    47dc:	01db      	lsls	r3, r3, #7
    47de:	4905      	ldr	r1, [pc, #20]	; (47f4 <spi_select_slave+0xf0>)
    47e0:	468c      	mov	ip, r1
    47e2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    47e4:	211f      	movs	r1, #31
    47e6:	4011      	ands	r1, r2
    47e8:	2201      	movs	r2, #1
    47ea:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    47ec:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    47ee:	2300      	movs	r3, #0
    47f0:	e78d      	b.n	470e <spi_select_slave+0xa>
    47f2:	46c0      	nop			; (mov r8, r8)
    47f4:	41004400 	.word	0x41004400

000047f8 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    47f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    47fa:	0080      	lsls	r0, r0, #2
    47fc:	4b70      	ldr	r3, [pc, #448]	; (49c0 <_spi_interrupt_handler+0x1c8>)
    47fe:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4800:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    4802:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    4804:	5ce7      	ldrb	r7, [r4, r3]
    4806:	2236      	movs	r2, #54	; 0x36
    4808:	5ca2      	ldrb	r2, [r4, r2]
    480a:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    480c:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    480e:	7db5      	ldrb	r5, [r6, #22]
    4810:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    4812:	07eb      	lsls	r3, r5, #31
    4814:	d502      	bpl.n	481c <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4816:	7963      	ldrb	r3, [r4, #5]
    4818:	2b01      	cmp	r3, #1
    481a:	d01e      	beq.n	485a <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    481c:	076b      	lsls	r3, r5, #29
    481e:	d511      	bpl.n	4844 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4820:	8b73      	ldrh	r3, [r6, #26]
    4822:	075b      	lsls	r3, r3, #29
    4824:	d55a      	bpl.n	48dc <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    4826:	7a63      	ldrb	r3, [r4, #9]
    4828:	2b01      	cmp	r3, #1
    482a:	d008      	beq.n	483e <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    482c:	221e      	movs	r2, #30
    482e:	2338      	movs	r3, #56	; 0x38
    4830:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    4832:	3b35      	subs	r3, #53	; 0x35
    4834:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    4836:	3302      	adds	r3, #2
    4838:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    483a:	073b      	lsls	r3, r7, #28
    483c:	d44a      	bmi.n	48d4 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    483e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4840:	2304      	movs	r3, #4
    4842:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    4844:	07ab      	lsls	r3, r5, #30
    4846:	d503      	bpl.n	4850 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4848:	7963      	ldrb	r3, [r4, #5]
    484a:	2b01      	cmp	r3, #1
    484c:	d100      	bne.n	4850 <_spi_interrupt_handler+0x58>
    484e:	e097      	b.n	4980 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    4850:	b26d      	sxtb	r5, r5
    4852:	2d00      	cmp	r5, #0
    4854:	da00      	bge.n	4858 <_spi_interrupt_handler+0x60>
    4856:	e0a9      	b.n	49ac <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    4858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    485a:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    485c:	2b00      	cmp	r3, #0
    485e:	d022      	beq.n	48a6 <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    4860:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    4862:	2b00      	cmp	r3, #0
    4864:	d0da      	beq.n	481c <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4866:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    4868:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    486a:	7813      	ldrb	r3, [r2, #0]
    486c:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    486e:	1c50      	adds	r0, r2, #1
    4870:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4872:	79a0      	ldrb	r0, [r4, #6]
    4874:	2801      	cmp	r0, #1
    4876:	d027      	beq.n	48c8 <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    4878:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    487a:	05db      	lsls	r3, r3, #23
    487c:	0ddb      	lsrs	r3, r3, #23
    487e:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    4880:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    4882:	3b01      	subs	r3, #1
    4884:	b29b      	uxth	r3, r3
    4886:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    4888:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    488a:	b29b      	uxth	r3, r3
    488c:	2b00      	cmp	r3, #0
    488e:	d1c5      	bne.n	481c <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4890:	3301      	adds	r3, #1
    4892:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    4894:	7a63      	ldrb	r3, [r4, #9]
    4896:	2b01      	cmp	r3, #1
    4898:	d1c0      	bne.n	481c <_spi_interrupt_handler+0x24>
    489a:	79e3      	ldrb	r3, [r4, #7]
    489c:	2b00      	cmp	r3, #0
    489e:	d1bd      	bne.n	481c <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    48a0:	3302      	adds	r3, #2
    48a2:	75b3      	strb	r3, [r6, #22]
    48a4:	e7ba      	b.n	481c <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    48a6:	4b47      	ldr	r3, [pc, #284]	; (49c4 <_spi_interrupt_handler+0x1cc>)
    48a8:	881b      	ldrh	r3, [r3, #0]
    48aa:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    48ac:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    48ae:	3b01      	subs	r3, #1
    48b0:	b29b      	uxth	r3, r3
    48b2:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    48b4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    48b6:	b29b      	uxth	r3, r3
    48b8:	2b00      	cmp	r3, #0
    48ba:	d101      	bne.n	48c0 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    48bc:	3301      	adds	r3, #1
    48be:	7533      	strb	r3, [r6, #20]
		if (0
    48c0:	7963      	ldrb	r3, [r4, #5]
    48c2:	2b01      	cmp	r3, #1
    48c4:	d0cc      	beq.n	4860 <_spi_interrupt_handler+0x68>
    48c6:	e7a9      	b.n	481c <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    48c8:	7850      	ldrb	r0, [r2, #1]
    48ca:	0200      	lsls	r0, r0, #8
    48cc:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    48ce:	3202      	adds	r2, #2
    48d0:	62e2      	str	r2, [r4, #44]	; 0x2c
    48d2:	e7d2      	b.n	487a <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    48d4:	0020      	movs	r0, r4
    48d6:	69a3      	ldr	r3, [r4, #24]
    48d8:	4798      	blx	r3
    48da:	e7b0      	b.n	483e <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    48dc:	7a63      	ldrb	r3, [r4, #9]
    48de:	2b01      	cmp	r3, #1
    48e0:	d028      	beq.n	4934 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    48e2:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    48e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    48e6:	05db      	lsls	r3, r3, #23
    48e8:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    48ea:	b2da      	uxtb	r2, r3
    48ec:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    48ee:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    48f0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    48f2:	1c51      	adds	r1, r2, #1
    48f4:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    48f6:	79a1      	ldrb	r1, [r4, #6]
    48f8:	2901      	cmp	r1, #1
    48fa:	d034      	beq.n	4966 <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    48fc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    48fe:	3b01      	subs	r3, #1
    4900:	b29b      	uxth	r3, r3
    4902:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    4904:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    4906:	b29b      	uxth	r3, r3
    4908:	2b00      	cmp	r3, #0
    490a:	d000      	beq.n	490e <_spi_interrupt_handler+0x116>
    490c:	e79a      	b.n	4844 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    490e:	2200      	movs	r2, #0
    4910:	3338      	adds	r3, #56	; 0x38
    4912:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4914:	3b34      	subs	r3, #52	; 0x34
    4916:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    4918:	7a63      	ldrb	r3, [r4, #9]
    491a:	2b02      	cmp	r3, #2
    491c:	d029      	beq.n	4972 <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    491e:	7a63      	ldrb	r3, [r4, #9]
    4920:	2b00      	cmp	r3, #0
    4922:	d000      	beq.n	4926 <_spi_interrupt_handler+0x12e>
    4924:	e78e      	b.n	4844 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    4926:	07bb      	lsls	r3, r7, #30
    4928:	d400      	bmi.n	492c <_spi_interrupt_handler+0x134>
    492a:	e78b      	b.n	4844 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    492c:	0020      	movs	r0, r4
    492e:	6923      	ldr	r3, [r4, #16]
    4930:	4798      	blx	r3
    4932:	e787      	b.n	4844 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4934:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    4936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    4938:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    493a:	3b01      	subs	r3, #1
    493c:	b29b      	uxth	r3, r3
    493e:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    4940:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4942:	b29b      	uxth	r3, r3
    4944:	2b00      	cmp	r3, #0
    4946:	d000      	beq.n	494a <_spi_interrupt_handler+0x152>
    4948:	e77c      	b.n	4844 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    494a:	3304      	adds	r3, #4
    494c:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    494e:	2200      	movs	r2, #0
    4950:	3334      	adds	r3, #52	; 0x34
    4952:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    4954:	3b35      	subs	r3, #53	; 0x35
    4956:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    4958:	07fb      	lsls	r3, r7, #31
    495a:	d400      	bmi.n	495e <_spi_interrupt_handler+0x166>
    495c:	e772      	b.n	4844 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    495e:	0020      	movs	r0, r4
    4960:	68e3      	ldr	r3, [r4, #12]
    4962:	4798      	blx	r3
    4964:	e76e      	b.n	4844 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    4966:	0a1b      	lsrs	r3, r3, #8
    4968:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    496a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    496c:	3301      	adds	r3, #1
    496e:	62a3      	str	r3, [r4, #40]	; 0x28
    4970:	e7c4      	b.n	48fc <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    4972:	077b      	lsls	r3, r7, #29
    4974:	d400      	bmi.n	4978 <_spi_interrupt_handler+0x180>
    4976:	e765      	b.n	4844 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    4978:	0020      	movs	r0, r4
    497a:	6963      	ldr	r3, [r4, #20]
    497c:	4798      	blx	r3
    497e:	e761      	b.n	4844 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4980:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    4982:	2b01      	cmp	r3, #1
    4984:	d000      	beq.n	4988 <_spi_interrupt_handler+0x190>
    4986:	e763      	b.n	4850 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4988:	79e3      	ldrb	r3, [r4, #7]
    498a:	2b00      	cmp	r3, #0
    498c:	d000      	beq.n	4990 <_spi_interrupt_handler+0x198>
    498e:	e75f      	b.n	4850 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4990:	3302      	adds	r3, #2
    4992:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    4994:	3301      	adds	r3, #1
    4996:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    4998:	2200      	movs	r2, #0
    499a:	3335      	adds	r3, #53	; 0x35
    499c:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    499e:	07fb      	lsls	r3, r7, #31
    49a0:	d400      	bmi.n	49a4 <_spi_interrupt_handler+0x1ac>
    49a2:	e755      	b.n	4850 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    49a4:	0020      	movs	r0, r4
    49a6:	68e3      	ldr	r3, [r4, #12]
    49a8:	4798      	blx	r3
    49aa:	e751      	b.n	4850 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    49ac:	2380      	movs	r3, #128	; 0x80
    49ae:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    49b0:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    49b2:	067b      	lsls	r3, r7, #25
    49b4:	d400      	bmi.n	49b8 <_spi_interrupt_handler+0x1c0>
    49b6:	e74f      	b.n	4858 <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    49b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    49ba:	0020      	movs	r0, r4
    49bc:	4798      	blx	r3
}
    49be:	e74b      	b.n	4858 <_spi_interrupt_handler+0x60>
    49c0:	200003e4 	.word	0x200003e4
    49c4:	200003fc 	.word	0x200003fc

000049c8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    49c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    49ca:	46de      	mov	lr, fp
    49cc:	4657      	mov	r7, sl
    49ce:	464e      	mov	r6, r9
    49d0:	4645      	mov	r5, r8
    49d2:	b5e0      	push	{r5, r6, r7, lr}
    49d4:	b091      	sub	sp, #68	; 0x44
    49d6:	0005      	movs	r5, r0
    49d8:	000c      	movs	r4, r1
    49da:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    49dc:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    49de:	0008      	movs	r0, r1
    49e0:	4bbc      	ldr	r3, [pc, #752]	; (4cd4 <usart_init+0x30c>)
    49e2:	4798      	blx	r3
    49e4:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    49e6:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    49e8:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    49ea:	07db      	lsls	r3, r3, #31
    49ec:	d506      	bpl.n	49fc <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    49ee:	b011      	add	sp, #68	; 0x44
    49f0:	bc3c      	pop	{r2, r3, r4, r5}
    49f2:	4690      	mov	r8, r2
    49f4:	4699      	mov	r9, r3
    49f6:	46a2      	mov	sl, r4
    49f8:	46ab      	mov	fp, r5
    49fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    49fc:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    49fe:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    4a00:	079b      	lsls	r3, r3, #30
    4a02:	d4f4      	bmi.n	49ee <usart_init+0x26>
    4a04:	49b4      	ldr	r1, [pc, #720]	; (4cd8 <usart_init+0x310>)
    4a06:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    4a08:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4a0a:	2301      	movs	r3, #1
    4a0c:	40bb      	lsls	r3, r7
    4a0e:	4303      	orrs	r3, r0
    4a10:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    4a12:	a90f      	add	r1, sp, #60	; 0x3c
    4a14:	272d      	movs	r7, #45	; 0x2d
    4a16:	5df3      	ldrb	r3, [r6, r7]
    4a18:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4a1a:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4a1c:	b2d3      	uxtb	r3, r2
    4a1e:	9302      	str	r3, [sp, #8]
    4a20:	0018      	movs	r0, r3
    4a22:	4bae      	ldr	r3, [pc, #696]	; (4cdc <usart_init+0x314>)
    4a24:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4a26:	9802      	ldr	r0, [sp, #8]
    4a28:	4bad      	ldr	r3, [pc, #692]	; (4ce0 <usart_init+0x318>)
    4a2a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4a2c:	5df0      	ldrb	r0, [r6, r7]
    4a2e:	2100      	movs	r1, #0
    4a30:	4bac      	ldr	r3, [pc, #688]	; (4ce4 <usart_init+0x31c>)
    4a32:	4798      	blx	r3
	module->character_size = config->character_size;
    4a34:	7af3      	ldrb	r3, [r6, #11]
    4a36:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    4a38:	2324      	movs	r3, #36	; 0x24
    4a3a:	5cf3      	ldrb	r3, [r6, r3]
    4a3c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    4a3e:	2325      	movs	r3, #37	; 0x25
    4a40:	5cf3      	ldrb	r3, [r6, r3]
    4a42:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    4a44:	7ef3      	ldrb	r3, [r6, #27]
    4a46:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    4a48:	7f33      	ldrb	r3, [r6, #28]
    4a4a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4a4c:	682b      	ldr	r3, [r5, #0]
    4a4e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4a50:	0018      	movs	r0, r3
    4a52:	4ba0      	ldr	r3, [pc, #640]	; (4cd4 <usart_init+0x30c>)
    4a54:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4a56:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    4a58:	2200      	movs	r2, #0
    4a5a:	230e      	movs	r3, #14
    4a5c:	a906      	add	r1, sp, #24
    4a5e:	468c      	mov	ip, r1
    4a60:	4463      	add	r3, ip
    4a62:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    4a64:	8a32      	ldrh	r2, [r6, #16]
    4a66:	9202      	str	r2, [sp, #8]
    4a68:	2380      	movs	r3, #128	; 0x80
    4a6a:	01db      	lsls	r3, r3, #7
    4a6c:	429a      	cmp	r2, r3
    4a6e:	d100      	bne.n	4a72 <usart_init+0xaa>
    4a70:	e09e      	b.n	4bb0 <usart_init+0x1e8>
    4a72:	d90f      	bls.n	4a94 <usart_init+0xcc>
    4a74:	23c0      	movs	r3, #192	; 0xc0
    4a76:	01db      	lsls	r3, r3, #7
    4a78:	9a02      	ldr	r2, [sp, #8]
    4a7a:	429a      	cmp	r2, r3
    4a7c:	d100      	bne.n	4a80 <usart_init+0xb8>
    4a7e:	e092      	b.n	4ba6 <usart_init+0x1de>
    4a80:	2380      	movs	r3, #128	; 0x80
    4a82:	021b      	lsls	r3, r3, #8
    4a84:	429a      	cmp	r2, r3
    4a86:	d000      	beq.n	4a8a <usart_init+0xc2>
    4a88:	e11f      	b.n	4cca <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    4a8a:	2303      	movs	r3, #3
    4a8c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4a8e:	2300      	movs	r3, #0
    4a90:	9307      	str	r3, [sp, #28]
    4a92:	e008      	b.n	4aa6 <usart_init+0xde>
	switch (config->sample_rate) {
    4a94:	2380      	movs	r3, #128	; 0x80
    4a96:	019b      	lsls	r3, r3, #6
    4a98:	429a      	cmp	r2, r3
    4a9a:	d000      	beq.n	4a9e <usart_init+0xd6>
    4a9c:	e115      	b.n	4cca <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4a9e:	2310      	movs	r3, #16
    4aa0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4aa2:	3b0f      	subs	r3, #15
    4aa4:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    4aa6:	6833      	ldr	r3, [r6, #0]
    4aa8:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    4aaa:	68f3      	ldr	r3, [r6, #12]
    4aac:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    4aae:	6973      	ldr	r3, [r6, #20]
    4ab0:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4ab2:	7e33      	ldrb	r3, [r6, #24]
    4ab4:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4ab6:	2326      	movs	r3, #38	; 0x26
    4ab8:	5cf3      	ldrb	r3, [r6, r3]
    4aba:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    4abc:	6873      	ldr	r3, [r6, #4]
    4abe:	4699      	mov	r9, r3
	switch (transfer_mode)
    4ac0:	2b00      	cmp	r3, #0
    4ac2:	d100      	bne.n	4ac6 <usart_init+0xfe>
    4ac4:	e0a0      	b.n	4c08 <usart_init+0x240>
    4ac6:	2380      	movs	r3, #128	; 0x80
    4ac8:	055b      	lsls	r3, r3, #21
    4aca:	4599      	cmp	r9, r3
    4acc:	d100      	bne.n	4ad0 <usart_init+0x108>
    4ace:	e084      	b.n	4bda <usart_init+0x212>
	if(config->encoding_format_enable) {
    4ad0:	7e73      	ldrb	r3, [r6, #25]
    4ad2:	2b00      	cmp	r3, #0
    4ad4:	d002      	beq.n	4adc <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    4ad6:	7eb3      	ldrb	r3, [r6, #26]
    4ad8:	4642      	mov	r2, r8
    4ada:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4adc:	682a      	ldr	r2, [r5, #0]
    4ade:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4ae0:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    4ae2:	2b00      	cmp	r3, #0
    4ae4:	d1fc      	bne.n	4ae0 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    4ae6:	330e      	adds	r3, #14
    4ae8:	aa06      	add	r2, sp, #24
    4aea:	4694      	mov	ip, r2
    4aec:	4463      	add	r3, ip
    4aee:	881b      	ldrh	r3, [r3, #0]
    4af0:	4642      	mov	r2, r8
    4af2:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    4af4:	9b05      	ldr	r3, [sp, #20]
    4af6:	9a03      	ldr	r2, [sp, #12]
    4af8:	4313      	orrs	r3, r2
    4afa:	9a04      	ldr	r2, [sp, #16]
    4afc:	4313      	orrs	r3, r2
    4afe:	464a      	mov	r2, r9
    4b00:	4313      	orrs	r3, r2
    4b02:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4b04:	465b      	mov	r3, fp
    4b06:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    4b08:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4b0a:	4653      	mov	r3, sl
    4b0c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    4b0e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    4b10:	2327      	movs	r3, #39	; 0x27
    4b12:	5cf3      	ldrb	r3, [r6, r3]
    4b14:	2b00      	cmp	r3, #0
    4b16:	d101      	bne.n	4b1c <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    4b18:	3304      	adds	r3, #4
    4b1a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4b1c:	7e73      	ldrb	r3, [r6, #25]
    4b1e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4b20:	7f32      	ldrb	r2, [r6, #28]
    4b22:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4b24:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    4b26:	7f72      	ldrb	r2, [r6, #29]
    4b28:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4b2a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4b2c:	2224      	movs	r2, #36	; 0x24
    4b2e:	5cb2      	ldrb	r2, [r6, r2]
    4b30:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    4b32:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    4b34:	2225      	movs	r2, #37	; 0x25
    4b36:	5cb2      	ldrb	r2, [r6, r2]
    4b38:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4b3a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    4b3c:	7ab1      	ldrb	r1, [r6, #10]
    4b3e:	7af2      	ldrb	r2, [r6, #11]
    4b40:	4311      	orrs	r1, r2
    4b42:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    4b44:	8933      	ldrh	r3, [r6, #8]
    4b46:	2bff      	cmp	r3, #255	; 0xff
    4b48:	d100      	bne.n	4b4c <usart_init+0x184>
    4b4a:	e081      	b.n	4c50 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    4b4c:	2280      	movs	r2, #128	; 0x80
    4b4e:	0452      	lsls	r2, r2, #17
    4b50:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    4b52:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    4b54:	232c      	movs	r3, #44	; 0x2c
    4b56:	5cf3      	ldrb	r3, [r6, r3]
    4b58:	2b00      	cmp	r3, #0
    4b5a:	d103      	bne.n	4b64 <usart_init+0x19c>
    4b5c:	4b62      	ldr	r3, [pc, #392]	; (4ce8 <usart_init+0x320>)
    4b5e:	789b      	ldrb	r3, [r3, #2]
    4b60:	079b      	lsls	r3, r3, #30
    4b62:	d501      	bpl.n	4b68 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    4b64:	2380      	movs	r3, #128	; 0x80
    4b66:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    4b68:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    4b6a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4b6c:	2b00      	cmp	r3, #0
    4b6e:	d1fc      	bne.n	4b6a <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    4b70:	4643      	mov	r3, r8
    4b72:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4b74:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    4b76:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4b78:	2b00      	cmp	r3, #0
    4b7a:	d1fc      	bne.n	4b76 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    4b7c:	4643      	mov	r3, r8
    4b7e:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4b80:	ab0e      	add	r3, sp, #56	; 0x38
    4b82:	2280      	movs	r2, #128	; 0x80
    4b84:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4b86:	2200      	movs	r2, #0
    4b88:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    4b8a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4b8c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    4b8e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    4b90:	930a      	str	r3, [sp, #40]	; 0x28
    4b92:	6b73      	ldr	r3, [r6, #52]	; 0x34
    4b94:	930b      	str	r3, [sp, #44]	; 0x2c
    4b96:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    4b98:	930c      	str	r3, [sp, #48]	; 0x30
    4b9a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    4b9c:	9302      	str	r3, [sp, #8]
    4b9e:	930d      	str	r3, [sp, #52]	; 0x34
    4ba0:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4ba2:	ae0a      	add	r6, sp, #40	; 0x28
    4ba4:	e063      	b.n	4c6e <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4ba6:	2308      	movs	r3, #8
    4ba8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4baa:	3b07      	subs	r3, #7
    4bac:	9307      	str	r3, [sp, #28]
    4bae:	e77a      	b.n	4aa6 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    4bb0:	6833      	ldr	r3, [r6, #0]
    4bb2:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    4bb4:	68f3      	ldr	r3, [r6, #12]
    4bb6:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    4bb8:	6973      	ldr	r3, [r6, #20]
    4bba:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4bbc:	7e33      	ldrb	r3, [r6, #24]
    4bbe:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4bc0:	2326      	movs	r3, #38	; 0x26
    4bc2:	5cf3      	ldrb	r3, [r6, r3]
    4bc4:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    4bc6:	6873      	ldr	r3, [r6, #4]
    4bc8:	4699      	mov	r9, r3
	switch (transfer_mode)
    4bca:	2b00      	cmp	r3, #0
    4bcc:	d018      	beq.n	4c00 <usart_init+0x238>
    4bce:	2380      	movs	r3, #128	; 0x80
    4bd0:	055b      	lsls	r3, r3, #21
    4bd2:	4599      	cmp	r9, r3
    4bd4:	d001      	beq.n	4bda <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    4bd6:	2000      	movs	r0, #0
    4bd8:	e025      	b.n	4c26 <usart_init+0x25e>
			if (!config->use_external_clock) {
    4bda:	2327      	movs	r3, #39	; 0x27
    4bdc:	5cf3      	ldrb	r3, [r6, r3]
    4bde:	2b00      	cmp	r3, #0
    4be0:	d000      	beq.n	4be4 <usart_init+0x21c>
    4be2:	e775      	b.n	4ad0 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    4be4:	6a33      	ldr	r3, [r6, #32]
    4be6:	001f      	movs	r7, r3
    4be8:	b2c0      	uxtb	r0, r0
    4bea:	4b40      	ldr	r3, [pc, #256]	; (4cec <usart_init+0x324>)
    4bec:	4798      	blx	r3
    4bee:	0001      	movs	r1, r0
    4bf0:	220e      	movs	r2, #14
    4bf2:	ab06      	add	r3, sp, #24
    4bf4:	469c      	mov	ip, r3
    4bf6:	4462      	add	r2, ip
    4bf8:	0038      	movs	r0, r7
    4bfa:	4b3d      	ldr	r3, [pc, #244]	; (4cf0 <usart_init+0x328>)
    4bfc:	4798      	blx	r3
    4bfe:	e012      	b.n	4c26 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4c00:	2308      	movs	r3, #8
    4c02:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4c04:	2300      	movs	r3, #0
    4c06:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    4c08:	2327      	movs	r3, #39	; 0x27
    4c0a:	5cf3      	ldrb	r3, [r6, r3]
    4c0c:	2b00      	cmp	r3, #0
    4c0e:	d00e      	beq.n	4c2e <usart_init+0x266>
				status_code =
    4c10:	9b06      	ldr	r3, [sp, #24]
    4c12:	9300      	str	r3, [sp, #0]
    4c14:	9b07      	ldr	r3, [sp, #28]
    4c16:	220e      	movs	r2, #14
    4c18:	a906      	add	r1, sp, #24
    4c1a:	468c      	mov	ip, r1
    4c1c:	4462      	add	r2, ip
    4c1e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    4c20:	6a30      	ldr	r0, [r6, #32]
    4c22:	4f34      	ldr	r7, [pc, #208]	; (4cf4 <usart_init+0x32c>)
    4c24:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    4c26:	2800      	cmp	r0, #0
    4c28:	d000      	beq.n	4c2c <usart_init+0x264>
    4c2a:	e6e0      	b.n	49ee <usart_init+0x26>
    4c2c:	e750      	b.n	4ad0 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    4c2e:	6a33      	ldr	r3, [r6, #32]
    4c30:	001f      	movs	r7, r3
    4c32:	b2c0      	uxtb	r0, r0
    4c34:	4b2d      	ldr	r3, [pc, #180]	; (4cec <usart_init+0x324>)
    4c36:	4798      	blx	r3
    4c38:	0001      	movs	r1, r0
				status_code =
    4c3a:	9b06      	ldr	r3, [sp, #24]
    4c3c:	9300      	str	r3, [sp, #0]
    4c3e:	9b07      	ldr	r3, [sp, #28]
    4c40:	220e      	movs	r2, #14
    4c42:	a806      	add	r0, sp, #24
    4c44:	4684      	mov	ip, r0
    4c46:	4462      	add	r2, ip
    4c48:	0038      	movs	r0, r7
    4c4a:	4f2a      	ldr	r7, [pc, #168]	; (4cf4 <usart_init+0x32c>)
    4c4c:	47b8      	blx	r7
    4c4e:	e7ea      	b.n	4c26 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    4c50:	7ef3      	ldrb	r3, [r6, #27]
    4c52:	2b00      	cmp	r3, #0
    4c54:	d100      	bne.n	4c58 <usart_init+0x290>
    4c56:	e77d      	b.n	4b54 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    4c58:	2380      	movs	r3, #128	; 0x80
    4c5a:	04db      	lsls	r3, r3, #19
    4c5c:	431f      	orrs	r7, r3
    4c5e:	e779      	b.n	4b54 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4c60:	0020      	movs	r0, r4
    4c62:	4b25      	ldr	r3, [pc, #148]	; (4cf8 <usart_init+0x330>)
    4c64:	4798      	blx	r3
    4c66:	e007      	b.n	4c78 <usart_init+0x2b0>
    4c68:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    4c6a:	2f04      	cmp	r7, #4
    4c6c:	d00d      	beq.n	4c8a <usart_init+0x2c2>
    4c6e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4c70:	00bb      	lsls	r3, r7, #2
    4c72:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    4c74:	2800      	cmp	r0, #0
    4c76:	d0f3      	beq.n	4c60 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    4c78:	1c43      	adds	r3, r0, #1
    4c7a:	d0f5      	beq.n	4c68 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4c7c:	a90e      	add	r1, sp, #56	; 0x38
    4c7e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4c80:	0c00      	lsrs	r0, r0, #16
    4c82:	b2c0      	uxtb	r0, r0
    4c84:	4b1d      	ldr	r3, [pc, #116]	; (4cfc <usart_init+0x334>)
    4c86:	4798      	blx	r3
    4c88:	e7ee      	b.n	4c68 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    4c8a:	2300      	movs	r3, #0
    4c8c:	60eb      	str	r3, [r5, #12]
    4c8e:	612b      	str	r3, [r5, #16]
    4c90:	616b      	str	r3, [r5, #20]
    4c92:	61ab      	str	r3, [r5, #24]
    4c94:	61eb      	str	r3, [r5, #28]
    4c96:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    4c98:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    4c9a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    4c9c:	2200      	movs	r2, #0
    4c9e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    4ca0:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    4ca2:	3330      	adds	r3, #48	; 0x30
    4ca4:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    4ca6:	3301      	adds	r3, #1
    4ca8:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    4caa:	3301      	adds	r3, #1
    4cac:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    4cae:	3301      	adds	r3, #1
    4cb0:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    4cb2:	6828      	ldr	r0, [r5, #0]
    4cb4:	4b07      	ldr	r3, [pc, #28]	; (4cd4 <usart_init+0x30c>)
    4cb6:	4798      	blx	r3
    4cb8:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    4cba:	4911      	ldr	r1, [pc, #68]	; (4d00 <usart_init+0x338>)
    4cbc:	4b11      	ldr	r3, [pc, #68]	; (4d04 <usart_init+0x33c>)
    4cbe:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4cc0:	00a4      	lsls	r4, r4, #2
    4cc2:	4b11      	ldr	r3, [pc, #68]	; (4d08 <usart_init+0x340>)
    4cc4:	50e5      	str	r5, [r4, r3]
	return status_code;
    4cc6:	2000      	movs	r0, #0
    4cc8:	e691      	b.n	49ee <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4cca:	2310      	movs	r3, #16
    4ccc:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4cce:	2300      	movs	r3, #0
    4cd0:	9307      	str	r3, [sp, #28]
    4cd2:	e6e8      	b.n	4aa6 <usart_init+0xde>
    4cd4:	00004425 	.word	0x00004425
    4cd8:	40000400 	.word	0x40000400
    4cdc:	00005599 	.word	0x00005599
    4ce0:	0000550d 	.word	0x0000550d
    4ce4:	00004261 	.word	0x00004261
    4ce8:	41002000 	.word	0x41002000
    4cec:	000055b5 	.word	0x000055b5
    4cf0:	000041a3 	.word	0x000041a3
    4cf4:	000041cd 	.word	0x000041cd
    4cf8:	000042ad 	.word	0x000042ad
    4cfc:	00005691 	.word	0x00005691
    4d00:	00004dc1 	.word	0x00004dc1
    4d04:	00004461 	.word	0x00004461
    4d08:	200003e4 	.word	0x200003e4

00004d0c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    4d0c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    4d0e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    4d10:	2a00      	cmp	r2, #0
    4d12:	d101      	bne.n	4d18 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    4d14:	0018      	movs	r0, r3
    4d16:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    4d18:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    4d1a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    4d1c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    4d1e:	2a00      	cmp	r2, #0
    4d20:	d1f8      	bne.n	4d14 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    4d22:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    4d24:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    4d26:	2a00      	cmp	r2, #0
    4d28:	d1fc      	bne.n	4d24 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    4d2a:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    4d2c:	2102      	movs	r1, #2
    4d2e:	7e1a      	ldrb	r2, [r3, #24]
    4d30:	420a      	tst	r2, r1
    4d32:	d0fc      	beq.n	4d2e <usart_write_wait+0x22>
	return STATUS_OK;
    4d34:	2300      	movs	r3, #0
    4d36:	e7ed      	b.n	4d14 <usart_write_wait+0x8>

00004d38 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    4d38:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    4d3a:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    4d3c:	2a00      	cmp	r2, #0
    4d3e:	d101      	bne.n	4d44 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    4d40:	0018      	movs	r0, r3
    4d42:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    4d44:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    4d46:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    4d48:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    4d4a:	2a00      	cmp	r2, #0
    4d4c:	d1f8      	bne.n	4d40 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    4d4e:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    4d50:	7e10      	ldrb	r0, [r2, #24]
    4d52:	0740      	lsls	r0, r0, #29
    4d54:	d5f4      	bpl.n	4d40 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    4d56:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4d58:	2b00      	cmp	r3, #0
    4d5a:	d1fc      	bne.n	4d56 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4d5c:	8b53      	ldrh	r3, [r2, #26]
    4d5e:	b2db      	uxtb	r3, r3
	if (error_code) {
    4d60:	0698      	lsls	r0, r3, #26
    4d62:	d01d      	beq.n	4da0 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    4d64:	0798      	lsls	r0, r3, #30
    4d66:	d503      	bpl.n	4d70 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    4d68:	2302      	movs	r3, #2
    4d6a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    4d6c:	3318      	adds	r3, #24
    4d6e:	e7e7      	b.n	4d40 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    4d70:	0758      	lsls	r0, r3, #29
    4d72:	d503      	bpl.n	4d7c <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    4d74:	2304      	movs	r3, #4
    4d76:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    4d78:	331a      	adds	r3, #26
    4d7a:	e7e1      	b.n	4d40 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    4d7c:	07d8      	lsls	r0, r3, #31
    4d7e:	d503      	bpl.n	4d88 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    4d80:	2301      	movs	r3, #1
    4d82:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    4d84:	3312      	adds	r3, #18
    4d86:	e7db      	b.n	4d40 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    4d88:	06d8      	lsls	r0, r3, #27
    4d8a:	d503      	bpl.n	4d94 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    4d8c:	2310      	movs	r3, #16
    4d8e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    4d90:	3332      	adds	r3, #50	; 0x32
    4d92:	e7d5      	b.n	4d40 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    4d94:	069b      	lsls	r3, r3, #26
    4d96:	d503      	bpl.n	4da0 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    4d98:	2320      	movs	r3, #32
    4d9a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    4d9c:	3321      	adds	r3, #33	; 0x21
    4d9e:	e7cf      	b.n	4d40 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    4da0:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    4da2:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    4da4:	2300      	movs	r3, #0
    4da6:	e7cb      	b.n	4d40 <usart_read_wait+0x8>

00004da8 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    4da8:	1c93      	adds	r3, r2, #2
    4daa:	009b      	lsls	r3, r3, #2
    4dac:	18c3      	adds	r3, r0, r3
    4dae:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    4db0:	2130      	movs	r1, #48	; 0x30
    4db2:	2301      	movs	r3, #1
    4db4:	4093      	lsls	r3, r2
    4db6:	001a      	movs	r2, r3
    4db8:	5c43      	ldrb	r3, [r0, r1]
    4dba:	4313      	orrs	r3, r2
    4dbc:	5443      	strb	r3, [r0, r1]
}
    4dbe:	4770      	bx	lr

00004dc0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    4dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    4dc2:	0080      	lsls	r0, r0, #2
    4dc4:	4b62      	ldr	r3, [pc, #392]	; (4f50 <_usart_interrupt_handler+0x190>)
    4dc6:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    4dc8:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    4dca:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    4dcc:	2b00      	cmp	r3, #0
    4dce:	d1fc      	bne.n	4dca <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    4dd0:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    4dd2:	7da6      	ldrb	r6, [r4, #22]
    4dd4:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    4dd6:	2330      	movs	r3, #48	; 0x30
    4dd8:	5ceb      	ldrb	r3, [r5, r3]
    4dda:	2231      	movs	r2, #49	; 0x31
    4ddc:	5caf      	ldrb	r7, [r5, r2]
    4dde:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    4de0:	07f3      	lsls	r3, r6, #31
    4de2:	d522      	bpl.n	4e2a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    4de4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    4de6:	b29b      	uxth	r3, r3
    4de8:	2b00      	cmp	r3, #0
    4dea:	d01c      	beq.n	4e26 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    4dec:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    4dee:	7813      	ldrb	r3, [r2, #0]
    4df0:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    4df2:	1c51      	adds	r1, r2, #1
    4df4:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4df6:	7969      	ldrb	r1, [r5, #5]
    4df8:	2901      	cmp	r1, #1
    4dfa:	d00e      	beq.n	4e1a <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    4dfc:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    4dfe:	05db      	lsls	r3, r3, #23
    4e00:	0ddb      	lsrs	r3, r3, #23
    4e02:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    4e04:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    4e06:	3b01      	subs	r3, #1
    4e08:	b29b      	uxth	r3, r3
    4e0a:	85eb      	strh	r3, [r5, #46]	; 0x2e
    4e0c:	2b00      	cmp	r3, #0
    4e0e:	d10c      	bne.n	4e2a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4e10:	3301      	adds	r3, #1
    4e12:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    4e14:	3301      	adds	r3, #1
    4e16:	75a3      	strb	r3, [r4, #22]
    4e18:	e007      	b.n	4e2a <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    4e1a:	7851      	ldrb	r1, [r2, #1]
    4e1c:	0209      	lsls	r1, r1, #8
    4e1e:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    4e20:	3202      	adds	r2, #2
    4e22:	62aa      	str	r2, [r5, #40]	; 0x28
    4e24:	e7eb      	b.n	4dfe <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4e26:	2301      	movs	r3, #1
    4e28:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    4e2a:	07b3      	lsls	r3, r6, #30
    4e2c:	d506      	bpl.n	4e3c <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    4e2e:	2302      	movs	r3, #2
    4e30:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    4e32:	2200      	movs	r2, #0
    4e34:	3331      	adds	r3, #49	; 0x31
    4e36:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    4e38:	07fb      	lsls	r3, r7, #31
    4e3a:	d41a      	bmi.n	4e72 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    4e3c:	0773      	lsls	r3, r6, #29
    4e3e:	d565      	bpl.n	4f0c <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    4e40:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    4e42:	b29b      	uxth	r3, r3
    4e44:	2b00      	cmp	r3, #0
    4e46:	d05f      	beq.n	4f08 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4e48:	8b63      	ldrh	r3, [r4, #26]
    4e4a:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    4e4c:	071a      	lsls	r2, r3, #28
    4e4e:	d414      	bmi.n	4e7a <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4e50:	223f      	movs	r2, #63	; 0x3f
    4e52:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    4e54:	2b00      	cmp	r3, #0
    4e56:	d034      	beq.n	4ec2 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    4e58:	079a      	lsls	r2, r3, #30
    4e5a:	d511      	bpl.n	4e80 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    4e5c:	221a      	movs	r2, #26
    4e5e:	2332      	movs	r3, #50	; 0x32
    4e60:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    4e62:	3b30      	subs	r3, #48	; 0x30
    4e64:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    4e66:	077b      	lsls	r3, r7, #29
    4e68:	d550      	bpl.n	4f0c <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    4e6a:	0028      	movs	r0, r5
    4e6c:	696b      	ldr	r3, [r5, #20]
    4e6e:	4798      	blx	r3
    4e70:	e04c      	b.n	4f0c <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    4e72:	0028      	movs	r0, r5
    4e74:	68eb      	ldr	r3, [r5, #12]
    4e76:	4798      	blx	r3
    4e78:	e7e0      	b.n	4e3c <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    4e7a:	2237      	movs	r2, #55	; 0x37
    4e7c:	4013      	ands	r3, r2
    4e7e:	e7e9      	b.n	4e54 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    4e80:	075a      	lsls	r2, r3, #29
    4e82:	d505      	bpl.n	4e90 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    4e84:	221e      	movs	r2, #30
    4e86:	2332      	movs	r3, #50	; 0x32
    4e88:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    4e8a:	3b2e      	subs	r3, #46	; 0x2e
    4e8c:	8363      	strh	r3, [r4, #26]
    4e8e:	e7ea      	b.n	4e66 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    4e90:	07da      	lsls	r2, r3, #31
    4e92:	d505      	bpl.n	4ea0 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    4e94:	2213      	movs	r2, #19
    4e96:	2332      	movs	r3, #50	; 0x32
    4e98:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    4e9a:	3b31      	subs	r3, #49	; 0x31
    4e9c:	8363      	strh	r3, [r4, #26]
    4e9e:	e7e2      	b.n	4e66 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    4ea0:	06da      	lsls	r2, r3, #27
    4ea2:	d505      	bpl.n	4eb0 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    4ea4:	2242      	movs	r2, #66	; 0x42
    4ea6:	2332      	movs	r3, #50	; 0x32
    4ea8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    4eaa:	3b22      	subs	r3, #34	; 0x22
    4eac:	8363      	strh	r3, [r4, #26]
    4eae:	e7da      	b.n	4e66 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    4eb0:	2220      	movs	r2, #32
    4eb2:	421a      	tst	r2, r3
    4eb4:	d0d7      	beq.n	4e66 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    4eb6:	3221      	adds	r2, #33	; 0x21
    4eb8:	2332      	movs	r3, #50	; 0x32
    4eba:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    4ebc:	3b12      	subs	r3, #18
    4ebe:	8363      	strh	r3, [r4, #26]
    4ec0:	e7d1      	b.n	4e66 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    4ec2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    4ec4:	05db      	lsls	r3, r3, #23
    4ec6:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    4ec8:	b2da      	uxtb	r2, r3
    4eca:	6a69      	ldr	r1, [r5, #36]	; 0x24
    4ecc:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    4ece:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    4ed0:	1c51      	adds	r1, r2, #1
    4ed2:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4ed4:	7969      	ldrb	r1, [r5, #5]
    4ed6:	2901      	cmp	r1, #1
    4ed8:	d010      	beq.n	4efc <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    4eda:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    4edc:	3b01      	subs	r3, #1
    4ede:	b29b      	uxth	r3, r3
    4ee0:	85ab      	strh	r3, [r5, #44]	; 0x2c
    4ee2:	2b00      	cmp	r3, #0
    4ee4:	d112      	bne.n	4f0c <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    4ee6:	3304      	adds	r3, #4
    4ee8:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    4eea:	2200      	movs	r2, #0
    4eec:	332e      	adds	r3, #46	; 0x2e
    4eee:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    4ef0:	07bb      	lsls	r3, r7, #30
    4ef2:	d50b      	bpl.n	4f0c <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    4ef4:	0028      	movs	r0, r5
    4ef6:	692b      	ldr	r3, [r5, #16]
    4ef8:	4798      	blx	r3
    4efa:	e007      	b.n	4f0c <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    4efc:	0a1b      	lsrs	r3, r3, #8
    4efe:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    4f00:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4f02:	3301      	adds	r3, #1
    4f04:	626b      	str	r3, [r5, #36]	; 0x24
    4f06:	e7e8      	b.n	4eda <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    4f08:	2304      	movs	r3, #4
    4f0a:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    4f0c:	06f3      	lsls	r3, r6, #27
    4f0e:	d504      	bpl.n	4f1a <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    4f10:	2310      	movs	r3, #16
    4f12:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    4f14:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    4f16:	06fb      	lsls	r3, r7, #27
    4f18:	d40e      	bmi.n	4f38 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    4f1a:	06b3      	lsls	r3, r6, #26
    4f1c:	d504      	bpl.n	4f28 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    4f1e:	2320      	movs	r3, #32
    4f20:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    4f22:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    4f24:	073b      	lsls	r3, r7, #28
    4f26:	d40b      	bmi.n	4f40 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    4f28:	0733      	lsls	r3, r6, #28
    4f2a:	d504      	bpl.n	4f36 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    4f2c:	2308      	movs	r3, #8
    4f2e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    4f30:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    4f32:	06bb      	lsls	r3, r7, #26
    4f34:	d408      	bmi.n	4f48 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    4f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    4f38:	0028      	movs	r0, r5
    4f3a:	69eb      	ldr	r3, [r5, #28]
    4f3c:	4798      	blx	r3
    4f3e:	e7ec      	b.n	4f1a <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    4f40:	0028      	movs	r0, r5
    4f42:	69ab      	ldr	r3, [r5, #24]
    4f44:	4798      	blx	r3
    4f46:	e7ef      	b.n	4f28 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    4f48:	6a2b      	ldr	r3, [r5, #32]
    4f4a:	0028      	movs	r0, r5
    4f4c:	4798      	blx	r3
}
    4f4e:	e7f2      	b.n	4f36 <_usart_interrupt_handler+0x176>
    4f50:	200003e4 	.word	0x200003e4

00004f54 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    4f54:	b510      	push	{r4, lr}
	switch (clock_source) {
    4f56:	2808      	cmp	r0, #8
    4f58:	d803      	bhi.n	4f62 <system_clock_source_get_hz+0xe>
    4f5a:	0080      	lsls	r0, r0, #2
    4f5c:	4b1b      	ldr	r3, [pc, #108]	; (4fcc <system_clock_source_get_hz+0x78>)
    4f5e:	581b      	ldr	r3, [r3, r0]
    4f60:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    4f62:	2000      	movs	r0, #0
    4f64:	e030      	b.n	4fc8 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    4f66:	4b1a      	ldr	r3, [pc, #104]	; (4fd0 <system_clock_source_get_hz+0x7c>)
    4f68:	6918      	ldr	r0, [r3, #16]
    4f6a:	e02d      	b.n	4fc8 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    4f6c:	4b19      	ldr	r3, [pc, #100]	; (4fd4 <system_clock_source_get_hz+0x80>)
    4f6e:	6a1b      	ldr	r3, [r3, #32]
    4f70:	059b      	lsls	r3, r3, #22
    4f72:	0f9b      	lsrs	r3, r3, #30
    4f74:	4818      	ldr	r0, [pc, #96]	; (4fd8 <system_clock_source_get_hz+0x84>)
    4f76:	40d8      	lsrs	r0, r3
    4f78:	e026      	b.n	4fc8 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    4f7a:	4b15      	ldr	r3, [pc, #84]	; (4fd0 <system_clock_source_get_hz+0x7c>)
    4f7c:	6958      	ldr	r0, [r3, #20]
    4f7e:	e023      	b.n	4fc8 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4f80:	4b13      	ldr	r3, [pc, #76]	; (4fd0 <system_clock_source_get_hz+0x7c>)
    4f82:	681b      	ldr	r3, [r3, #0]
			return 0;
    4f84:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4f86:	079b      	lsls	r3, r3, #30
    4f88:	d51e      	bpl.n	4fc8 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4f8a:	4912      	ldr	r1, [pc, #72]	; (4fd4 <system_clock_source_get_hz+0x80>)
    4f8c:	2210      	movs	r2, #16
    4f8e:	68cb      	ldr	r3, [r1, #12]
    4f90:	421a      	tst	r2, r3
    4f92:	d0fc      	beq.n	4f8e <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    4f94:	4b0e      	ldr	r3, [pc, #56]	; (4fd0 <system_clock_source_get_hz+0x7c>)
    4f96:	681b      	ldr	r3, [r3, #0]
    4f98:	075b      	lsls	r3, r3, #29
    4f9a:	d401      	bmi.n	4fa0 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    4f9c:	480f      	ldr	r0, [pc, #60]	; (4fdc <system_clock_source_get_hz+0x88>)
    4f9e:	e013      	b.n	4fc8 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4fa0:	2000      	movs	r0, #0
    4fa2:	4b0f      	ldr	r3, [pc, #60]	; (4fe0 <system_clock_source_get_hz+0x8c>)
    4fa4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    4fa6:	4b0a      	ldr	r3, [pc, #40]	; (4fd0 <system_clock_source_get_hz+0x7c>)
    4fa8:	689b      	ldr	r3, [r3, #8]
    4faa:	041b      	lsls	r3, r3, #16
    4fac:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4fae:	4358      	muls	r0, r3
    4fb0:	e00a      	b.n	4fc8 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4fb2:	2350      	movs	r3, #80	; 0x50
    4fb4:	4a07      	ldr	r2, [pc, #28]	; (4fd4 <system_clock_source_get_hz+0x80>)
    4fb6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    4fb8:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4fba:	075b      	lsls	r3, r3, #29
    4fbc:	d504      	bpl.n	4fc8 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    4fbe:	4b04      	ldr	r3, [pc, #16]	; (4fd0 <system_clock_source_get_hz+0x7c>)
    4fc0:	68d8      	ldr	r0, [r3, #12]
    4fc2:	e001      	b.n	4fc8 <system_clock_source_get_hz+0x74>
		return 32768UL;
    4fc4:	2080      	movs	r0, #128	; 0x80
    4fc6:	0200      	lsls	r0, r0, #8
	}
}
    4fc8:	bd10      	pop	{r4, pc}
    4fca:	46c0      	nop			; (mov r8, r8)
    4fcc:	0000b7a4 	.word	0x0000b7a4
    4fd0:	200000c8 	.word	0x200000c8
    4fd4:	40000800 	.word	0x40000800
    4fd8:	007a1200 	.word	0x007a1200
    4fdc:	02dc6c00 	.word	0x02dc6c00
    4fe0:	000055b5 	.word	0x000055b5

00004fe4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    4fe4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    4fe6:	490c      	ldr	r1, [pc, #48]	; (5018 <system_clock_source_osc8m_set_config+0x34>)
    4fe8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    4fea:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4fec:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    4fee:	7840      	ldrb	r0, [r0, #1]
    4ff0:	2201      	movs	r2, #1
    4ff2:	4010      	ands	r0, r2
    4ff4:	0180      	lsls	r0, r0, #6
    4ff6:	2640      	movs	r6, #64	; 0x40
    4ff8:	43b3      	bics	r3, r6
    4ffa:	4303      	orrs	r3, r0
    4ffc:	402a      	ands	r2, r5
    4ffe:	01d2      	lsls	r2, r2, #7
    5000:	2080      	movs	r0, #128	; 0x80
    5002:	4383      	bics	r3, r0
    5004:	4313      	orrs	r3, r2
    5006:	2203      	movs	r2, #3
    5008:	4022      	ands	r2, r4
    500a:	0212      	lsls	r2, r2, #8
    500c:	4803      	ldr	r0, [pc, #12]	; (501c <system_clock_source_osc8m_set_config+0x38>)
    500e:	4003      	ands	r3, r0
    5010:	4313      	orrs	r3, r2
    5012:	620b      	str	r3, [r1, #32]
}
    5014:	bd70      	pop	{r4, r5, r6, pc}
    5016:	46c0      	nop			; (mov r8, r8)
    5018:	40000800 	.word	0x40000800
    501c:	fffffcff 	.word	0xfffffcff

00005020 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    5020:	b5f0      	push	{r4, r5, r6, r7, lr}
    5022:	46de      	mov	lr, fp
    5024:	4657      	mov	r7, sl
    5026:	464e      	mov	r6, r9
    5028:	4645      	mov	r5, r8
    502a:	b5e0      	push	{r5, r6, r7, lr}
    502c:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    502e:	4b26      	ldr	r3, [pc, #152]	; (50c8 <system_clock_source_xosc32k_set_config+0xa8>)
    5030:	469b      	mov	fp, r3
    5032:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    5034:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    5036:	7800      	ldrb	r0, [r0, #0]
    5038:	4242      	negs	r2, r0
    503a:	4142      	adcs	r2, r0
    503c:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    503e:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    5040:	78ca      	ldrb	r2, [r1, #3]
    5042:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    5044:	790a      	ldrb	r2, [r1, #4]
    5046:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    5048:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    504a:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    504c:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    504e:	688a      	ldr	r2, [r1, #8]
    5050:	491e      	ldr	r1, [pc, #120]	; (50cc <system_clock_source_xosc32k_set_config+0xac>)
    5052:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    5054:	2101      	movs	r1, #1
    5056:	464a      	mov	r2, r9
    5058:	0092      	lsls	r2, r2, #2
    505a:	4691      	mov	r9, r2
    505c:	2204      	movs	r2, #4
    505e:	4393      	bics	r3, r2
    5060:	464a      	mov	r2, r9
    5062:	4313      	orrs	r3, r2
    5064:	4642      	mov	r2, r8
    5066:	400a      	ands	r2, r1
    5068:	00d2      	lsls	r2, r2, #3
    506a:	4690      	mov	r8, r2
    506c:	2208      	movs	r2, #8
    506e:	4393      	bics	r3, r2
    5070:	4642      	mov	r2, r8
    5072:	4313      	orrs	r3, r2
    5074:	4662      	mov	r2, ip
    5076:	400a      	ands	r2, r1
    5078:	0112      	lsls	r2, r2, #4
    507a:	4694      	mov	ip, r2
    507c:	2210      	movs	r2, #16
    507e:	4393      	bics	r3, r2
    5080:	4662      	mov	r2, ip
    5082:	4313      	orrs	r3, r2
    5084:	4008      	ands	r0, r1
    5086:	0140      	lsls	r0, r0, #5
    5088:	2220      	movs	r2, #32
    508a:	4393      	bics	r3, r2
    508c:	4303      	orrs	r3, r0
    508e:	400f      	ands	r7, r1
    5090:	01bf      	lsls	r7, r7, #6
    5092:	2040      	movs	r0, #64	; 0x40
    5094:	4383      	bics	r3, r0
    5096:	433b      	orrs	r3, r7
    5098:	400e      	ands	r6, r1
    509a:	01f6      	lsls	r6, r6, #7
    509c:	3040      	adds	r0, #64	; 0x40
    509e:	4383      	bics	r3, r0
    50a0:	4333      	orrs	r3, r6
    50a2:	3879      	subs	r0, #121	; 0x79
    50a4:	4005      	ands	r5, r0
    50a6:	022d      	lsls	r5, r5, #8
    50a8:	4809      	ldr	r0, [pc, #36]	; (50d0 <system_clock_source_xosc32k_set_config+0xb0>)
    50aa:	4003      	ands	r3, r0
    50ac:	432b      	orrs	r3, r5
    50ae:	4021      	ands	r1, r4
    50b0:	0309      	lsls	r1, r1, #12
    50b2:	4808      	ldr	r0, [pc, #32]	; (50d4 <system_clock_source_xosc32k_set_config+0xb4>)
    50b4:	4003      	ands	r3, r0
    50b6:	430b      	orrs	r3, r1
    50b8:	465a      	mov	r2, fp
    50ba:	8293      	strh	r3, [r2, #20]
}
    50bc:	bc3c      	pop	{r2, r3, r4, r5}
    50be:	4690      	mov	r8, r2
    50c0:	4699      	mov	r9, r3
    50c2:	46a2      	mov	sl, r4
    50c4:	46ab      	mov	fp, r5
    50c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    50c8:	40000800 	.word	0x40000800
    50cc:	200000c8 	.word	0x200000c8
    50d0:	fffff8ff 	.word	0xfffff8ff
    50d4:	ffffefff 	.word	0xffffefff

000050d8 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    50d8:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    50da:	7a03      	ldrb	r3, [r0, #8]
    50dc:	069b      	lsls	r3, r3, #26
    50de:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    50e0:	8942      	ldrh	r2, [r0, #10]
    50e2:	0592      	lsls	r2, r2, #22
    50e4:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    50e6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    50e8:	4918      	ldr	r1, [pc, #96]	; (514c <system_clock_source_dfll_set_config+0x74>)
    50ea:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    50ec:	7983      	ldrb	r3, [r0, #6]
    50ee:	79c2      	ldrb	r2, [r0, #7]
    50f0:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    50f2:	8842      	ldrh	r2, [r0, #2]
    50f4:	8884      	ldrh	r4, [r0, #4]
    50f6:	4322      	orrs	r2, r4
    50f8:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    50fa:	7842      	ldrb	r2, [r0, #1]
    50fc:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    50fe:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    5100:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    5102:	7803      	ldrb	r3, [r0, #0]
    5104:	2b04      	cmp	r3, #4
    5106:	d011      	beq.n	512c <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    5108:	2b20      	cmp	r3, #32
    510a:	d10e      	bne.n	512a <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    510c:	7b03      	ldrb	r3, [r0, #12]
    510e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    5110:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5112:	4313      	orrs	r3, r2
    5114:	89c2      	ldrh	r2, [r0, #14]
    5116:	0412      	lsls	r2, r2, #16
    5118:	490d      	ldr	r1, [pc, #52]	; (5150 <system_clock_source_dfll_set_config+0x78>)
    511a:	400a      	ands	r2, r1
    511c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    511e:	4a0b      	ldr	r2, [pc, #44]	; (514c <system_clock_source_dfll_set_config+0x74>)
    5120:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    5122:	6811      	ldr	r1, [r2, #0]
    5124:	4b0b      	ldr	r3, [pc, #44]	; (5154 <system_clock_source_dfll_set_config+0x7c>)
    5126:	430b      	orrs	r3, r1
    5128:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    512a:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    512c:	7b03      	ldrb	r3, [r0, #12]
    512e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    5130:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5132:	4313      	orrs	r3, r2
    5134:	89c2      	ldrh	r2, [r0, #14]
    5136:	0412      	lsls	r2, r2, #16
    5138:	4905      	ldr	r1, [pc, #20]	; (5150 <system_clock_source_dfll_set_config+0x78>)
    513a:	400a      	ands	r2, r1
    513c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    513e:	4a03      	ldr	r2, [pc, #12]	; (514c <system_clock_source_dfll_set_config+0x74>)
    5140:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    5142:	6813      	ldr	r3, [r2, #0]
    5144:	2104      	movs	r1, #4
    5146:	430b      	orrs	r3, r1
    5148:	6013      	str	r3, [r2, #0]
    514a:	e7ee      	b.n	512a <system_clock_source_dfll_set_config+0x52>
    514c:	200000c8 	.word	0x200000c8
    5150:	03ff0000 	.word	0x03ff0000
    5154:	00000424 	.word	0x00000424

00005158 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    5158:	2808      	cmp	r0, #8
    515a:	d803      	bhi.n	5164 <system_clock_source_enable+0xc>
    515c:	0080      	lsls	r0, r0, #2
    515e:	4b25      	ldr	r3, [pc, #148]	; (51f4 <system_clock_source_enable+0x9c>)
    5160:	581b      	ldr	r3, [r3, r0]
    5162:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5164:	2017      	movs	r0, #23
    5166:	e044      	b.n	51f2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    5168:	4a23      	ldr	r2, [pc, #140]	; (51f8 <system_clock_source_enable+0xa0>)
    516a:	6a13      	ldr	r3, [r2, #32]
    516c:	2102      	movs	r1, #2
    516e:	430b      	orrs	r3, r1
    5170:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    5172:	2000      	movs	r0, #0
    5174:	e03d      	b.n	51f2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    5176:	4a20      	ldr	r2, [pc, #128]	; (51f8 <system_clock_source_enable+0xa0>)
    5178:	6993      	ldr	r3, [r2, #24]
    517a:	2102      	movs	r1, #2
    517c:	430b      	orrs	r3, r1
    517e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    5180:	2000      	movs	r0, #0
		break;
    5182:	e036      	b.n	51f2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    5184:	4a1c      	ldr	r2, [pc, #112]	; (51f8 <system_clock_source_enable+0xa0>)
    5186:	8a13      	ldrh	r3, [r2, #16]
    5188:	2102      	movs	r1, #2
    518a:	430b      	orrs	r3, r1
    518c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    518e:	2000      	movs	r0, #0
		break;
    5190:	e02f      	b.n	51f2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    5192:	4a19      	ldr	r2, [pc, #100]	; (51f8 <system_clock_source_enable+0xa0>)
    5194:	8a93      	ldrh	r3, [r2, #20]
    5196:	2102      	movs	r1, #2
    5198:	430b      	orrs	r3, r1
    519a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    519c:	2000      	movs	r0, #0
		break;
    519e:	e028      	b.n	51f2 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    51a0:	4916      	ldr	r1, [pc, #88]	; (51fc <system_clock_source_enable+0xa4>)
    51a2:	680b      	ldr	r3, [r1, #0]
    51a4:	2202      	movs	r2, #2
    51a6:	4313      	orrs	r3, r2
    51a8:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    51aa:	4b13      	ldr	r3, [pc, #76]	; (51f8 <system_clock_source_enable+0xa0>)
    51ac:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    51ae:	0019      	movs	r1, r3
    51b0:	320e      	adds	r2, #14
    51b2:	68cb      	ldr	r3, [r1, #12]
    51b4:	421a      	tst	r2, r3
    51b6:	d0fc      	beq.n	51b2 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    51b8:	4a10      	ldr	r2, [pc, #64]	; (51fc <system_clock_source_enable+0xa4>)
    51ba:	6891      	ldr	r1, [r2, #8]
    51bc:	4b0e      	ldr	r3, [pc, #56]	; (51f8 <system_clock_source_enable+0xa0>)
    51be:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    51c0:	6852      	ldr	r2, [r2, #4]
    51c2:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    51c4:	2200      	movs	r2, #0
    51c6:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    51c8:	0019      	movs	r1, r3
    51ca:	3210      	adds	r2, #16
    51cc:	68cb      	ldr	r3, [r1, #12]
    51ce:	421a      	tst	r2, r3
    51d0:	d0fc      	beq.n	51cc <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    51d2:	4b0a      	ldr	r3, [pc, #40]	; (51fc <system_clock_source_enable+0xa4>)
    51d4:	681b      	ldr	r3, [r3, #0]
    51d6:	b29b      	uxth	r3, r3
    51d8:	4a07      	ldr	r2, [pc, #28]	; (51f8 <system_clock_source_enable+0xa0>)
    51da:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    51dc:	2000      	movs	r0, #0
    51de:	e008      	b.n	51f2 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    51e0:	4905      	ldr	r1, [pc, #20]	; (51f8 <system_clock_source_enable+0xa0>)
    51e2:	2244      	movs	r2, #68	; 0x44
    51e4:	5c8b      	ldrb	r3, [r1, r2]
    51e6:	2002      	movs	r0, #2
    51e8:	4303      	orrs	r3, r0
    51ea:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    51ec:	2000      	movs	r0, #0
		break;
    51ee:	e000      	b.n	51f2 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    51f0:	2000      	movs	r0, #0
}
    51f2:	4770      	bx	lr
    51f4:	0000b7c8 	.word	0x0000b7c8
    51f8:	40000800 	.word	0x40000800
    51fc:	200000c8 	.word	0x200000c8

00005200 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    5200:	b5f0      	push	{r4, r5, r6, r7, lr}
    5202:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    5204:	22c2      	movs	r2, #194	; 0xc2
    5206:	00d2      	lsls	r2, r2, #3
    5208:	4b47      	ldr	r3, [pc, #284]	; (5328 <system_clock_init+0x128>)
    520a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    520c:	4a47      	ldr	r2, [pc, #284]	; (532c <system_clock_init+0x12c>)
    520e:	6853      	ldr	r3, [r2, #4]
    5210:	211e      	movs	r1, #30
    5212:	438b      	bics	r3, r1
    5214:	391a      	subs	r1, #26
    5216:	430b      	orrs	r3, r1
    5218:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    521a:	2202      	movs	r2, #2
    521c:	ab01      	add	r3, sp, #4
    521e:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    5220:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    5222:	4d43      	ldr	r5, [pc, #268]	; (5330 <system_clock_init+0x130>)
    5224:	b2e0      	uxtb	r0, r4
    5226:	a901      	add	r1, sp, #4
    5228:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    522a:	3401      	adds	r4, #1
    522c:	2c25      	cmp	r4, #37	; 0x25
    522e:	d1f9      	bne.n	5224 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    5230:	a80a      	add	r0, sp, #40	; 0x28
    5232:	2300      	movs	r3, #0
    5234:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    5236:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    5238:	2280      	movs	r2, #128	; 0x80
    523a:	0212      	lsls	r2, r2, #8
    523c:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    523e:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    5240:	2201      	movs	r2, #1
    5242:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    5244:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    5246:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    5248:	3202      	adds	r2, #2
    524a:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    524c:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    524e:	4b39      	ldr	r3, [pc, #228]	; (5334 <system_clock_init+0x134>)
    5250:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    5252:	2005      	movs	r0, #5
    5254:	4b38      	ldr	r3, [pc, #224]	; (5338 <system_clock_init+0x138>)
    5256:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    5258:	4933      	ldr	r1, [pc, #204]	; (5328 <system_clock_init+0x128>)
    525a:	2202      	movs	r2, #2
    525c:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    525e:	421a      	tst	r2, r3
    5260:	d0fc      	beq.n	525c <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    5262:	4a31      	ldr	r2, [pc, #196]	; (5328 <system_clock_init+0x128>)
    5264:	8a93      	ldrh	r3, [r2, #20]
    5266:	2180      	movs	r1, #128	; 0x80
    5268:	430b      	orrs	r3, r1
    526a:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    526c:	ab05      	add	r3, sp, #20
    526e:	2100      	movs	r1, #0
    5270:	2200      	movs	r2, #0
    5272:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    5274:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    5276:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    5278:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    527a:	313f      	adds	r1, #63	; 0x3f
    527c:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    527e:	393b      	subs	r1, #59	; 0x3b
    5280:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    5282:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    5284:	4b2d      	ldr	r3, [pc, #180]	; (533c <system_clock_init+0x13c>)
    5286:	681b      	ldr	r3, [r3, #0]
    5288:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    528a:	2b3f      	cmp	r3, #63	; 0x3f
    528c:	d04a      	beq.n	5324 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    528e:	a805      	add	r0, sp, #20
    5290:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    5292:	4b2b      	ldr	r3, [pc, #172]	; (5340 <system_clock_init+0x140>)
    5294:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    5296:	2307      	movs	r3, #7
    5298:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    529a:	3338      	adds	r3, #56	; 0x38
    529c:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    529e:	4b29      	ldr	r3, [pc, #164]	; (5344 <system_clock_init+0x144>)
    52a0:	4798      	blx	r3
	config->run_in_standby  = false;
    52a2:	a804      	add	r0, sp, #16
    52a4:	2500      	movs	r5, #0
    52a6:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    52a8:	2601      	movs	r6, #1
    52aa:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    52ac:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    52ae:	4b26      	ldr	r3, [pc, #152]	; (5348 <system_clock_init+0x148>)
    52b0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    52b2:	2006      	movs	r0, #6
    52b4:	4f20      	ldr	r7, [pc, #128]	; (5338 <system_clock_init+0x138>)
    52b6:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    52b8:	4b24      	ldr	r3, [pc, #144]	; (534c <system_clock_init+0x14c>)
    52ba:	4798      	blx	r3
	config->division_factor    = 1;
    52bc:	ac01      	add	r4, sp, #4
    52be:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    52c0:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    52c2:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    52c4:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    52c6:	2305      	movs	r3, #5
    52c8:	7023      	strb	r3, [r4, #0]
    52ca:	0021      	movs	r1, r4
    52cc:	2001      	movs	r0, #1
    52ce:	4b20      	ldr	r3, [pc, #128]	; (5350 <system_clock_init+0x150>)
    52d0:	4798      	blx	r3
    52d2:	2001      	movs	r0, #1
    52d4:	4b1f      	ldr	r3, [pc, #124]	; (5354 <system_clock_init+0x154>)
    52d6:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    52d8:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    52da:	0021      	movs	r1, r4
    52dc:	2000      	movs	r0, #0
    52de:	4b14      	ldr	r3, [pc, #80]	; (5330 <system_clock_init+0x130>)
    52e0:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    52e2:	2000      	movs	r0, #0
    52e4:	4b1c      	ldr	r3, [pc, #112]	; (5358 <system_clock_init+0x158>)
    52e6:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    52e8:	2007      	movs	r0, #7
    52ea:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    52ec:	490e      	ldr	r1, [pc, #56]	; (5328 <system_clock_init+0x128>)
    52ee:	22d0      	movs	r2, #208	; 0xd0
    52f0:	68cb      	ldr	r3, [r1, #12]
    52f2:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    52f4:	2bd0      	cmp	r3, #208	; 0xd0
    52f6:	d1fb      	bne.n	52f0 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    52f8:	4a18      	ldr	r2, [pc, #96]	; (535c <system_clock_init+0x15c>)
    52fa:	2300      	movs	r3, #0
    52fc:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    52fe:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    5300:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    5302:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    5304:	a901      	add	r1, sp, #4
    5306:	2201      	movs	r2, #1
    5308:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    530a:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    530c:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    530e:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    5310:	3307      	adds	r3, #7
    5312:	700b      	strb	r3, [r1, #0]
    5314:	2000      	movs	r0, #0
    5316:	4b0e      	ldr	r3, [pc, #56]	; (5350 <system_clock_init+0x150>)
    5318:	4798      	blx	r3
    531a:	2000      	movs	r0, #0
    531c:	4b0d      	ldr	r3, [pc, #52]	; (5354 <system_clock_init+0x154>)
    531e:	4798      	blx	r3
#endif
}
    5320:	b00f      	add	sp, #60	; 0x3c
    5322:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    5324:	3b20      	subs	r3, #32
    5326:	e7b2      	b.n	528e <system_clock_init+0x8e>
    5328:	40000800 	.word	0x40000800
    532c:	41004000 	.word	0x41004000
    5330:	00005599 	.word	0x00005599
    5334:	00005021 	.word	0x00005021
    5338:	00005159 	.word	0x00005159
    533c:	00806024 	.word	0x00806024
    5340:	000005b9 	.word	0x000005b9
    5344:	000050d9 	.word	0x000050d9
    5348:	00004fe5 	.word	0x00004fe5
    534c:	00005361 	.word	0x00005361
    5350:	00005385 	.word	0x00005385
    5354:	0000543d 	.word	0x0000543d
    5358:	0000550d 	.word	0x0000550d
    535c:	40000400 	.word	0x40000400

00005360 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    5360:	4a06      	ldr	r2, [pc, #24]	; (537c <system_gclk_init+0x1c>)
    5362:	6993      	ldr	r3, [r2, #24]
    5364:	2108      	movs	r1, #8
    5366:	430b      	orrs	r3, r1
    5368:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    536a:	2201      	movs	r2, #1
    536c:	4b04      	ldr	r3, [pc, #16]	; (5380 <system_gclk_init+0x20>)
    536e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    5370:	0019      	movs	r1, r3
    5372:	780b      	ldrb	r3, [r1, #0]
    5374:	4213      	tst	r3, r2
    5376:	d1fc      	bne.n	5372 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    5378:	4770      	bx	lr
    537a:	46c0      	nop			; (mov r8, r8)
    537c:	40000400 	.word	0x40000400
    5380:	40000c00 	.word	0x40000c00

00005384 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    5384:	b570      	push	{r4, r5, r6, lr}
    5386:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    5388:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    538a:	780d      	ldrb	r5, [r1, #0]
    538c:	022d      	lsls	r5, r5, #8
    538e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    5390:	784b      	ldrb	r3, [r1, #1]
    5392:	2b00      	cmp	r3, #0
    5394:	d002      	beq.n	539c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    5396:	2380      	movs	r3, #128	; 0x80
    5398:	02db      	lsls	r3, r3, #11
    539a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    539c:	7a4b      	ldrb	r3, [r1, #9]
    539e:	2b00      	cmp	r3, #0
    53a0:	d002      	beq.n	53a8 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    53a2:	2380      	movs	r3, #128	; 0x80
    53a4:	031b      	lsls	r3, r3, #12
    53a6:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    53a8:	6848      	ldr	r0, [r1, #4]
    53aa:	2801      	cmp	r0, #1
    53ac:	d910      	bls.n	53d0 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    53ae:	1e43      	subs	r3, r0, #1
    53b0:	4218      	tst	r0, r3
    53b2:	d134      	bne.n	541e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    53b4:	2802      	cmp	r0, #2
    53b6:	d930      	bls.n	541a <system_gclk_gen_set_config+0x96>
    53b8:	2302      	movs	r3, #2
    53ba:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    53bc:	3201      	adds	r2, #1
						mask <<= 1) {
    53be:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    53c0:	4298      	cmp	r0, r3
    53c2:	d8fb      	bhi.n	53bc <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    53c4:	0212      	lsls	r2, r2, #8
    53c6:	4332      	orrs	r2, r6
    53c8:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    53ca:	2380      	movs	r3, #128	; 0x80
    53cc:	035b      	lsls	r3, r3, #13
    53ce:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    53d0:	7a0b      	ldrb	r3, [r1, #8]
    53d2:	2b00      	cmp	r3, #0
    53d4:	d002      	beq.n	53dc <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    53d6:	2380      	movs	r3, #128	; 0x80
    53d8:	039b      	lsls	r3, r3, #14
    53da:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    53dc:	4a13      	ldr	r2, [pc, #76]	; (542c <system_gclk_gen_set_config+0xa8>)
    53de:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    53e0:	b25b      	sxtb	r3, r3
    53e2:	2b00      	cmp	r3, #0
    53e4:	dbfb      	blt.n	53de <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    53e6:	4b12      	ldr	r3, [pc, #72]	; (5430 <system_gclk_gen_set_config+0xac>)
    53e8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    53ea:	4b12      	ldr	r3, [pc, #72]	; (5434 <system_gclk_gen_set_config+0xb0>)
    53ec:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    53ee:	4a0f      	ldr	r2, [pc, #60]	; (542c <system_gclk_gen_set_config+0xa8>)
    53f0:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    53f2:	b25b      	sxtb	r3, r3
    53f4:	2b00      	cmp	r3, #0
    53f6:	dbfb      	blt.n	53f0 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    53f8:	4b0c      	ldr	r3, [pc, #48]	; (542c <system_gclk_gen_set_config+0xa8>)
    53fa:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    53fc:	001a      	movs	r2, r3
    53fe:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    5400:	b25b      	sxtb	r3, r3
    5402:	2b00      	cmp	r3, #0
    5404:	dbfb      	blt.n	53fe <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    5406:	4a09      	ldr	r2, [pc, #36]	; (542c <system_gclk_gen_set_config+0xa8>)
    5408:	6853      	ldr	r3, [r2, #4]
    540a:	2180      	movs	r1, #128	; 0x80
    540c:	0249      	lsls	r1, r1, #9
    540e:	400b      	ands	r3, r1
    5410:	431d      	orrs	r5, r3
    5412:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    5414:	4b08      	ldr	r3, [pc, #32]	; (5438 <system_gclk_gen_set_config+0xb4>)
    5416:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5418:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    541a:	2200      	movs	r2, #0
    541c:	e7d2      	b.n	53c4 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    541e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    5420:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    5422:	2380      	movs	r3, #128	; 0x80
    5424:	029b      	lsls	r3, r3, #10
    5426:	431d      	orrs	r5, r3
    5428:	e7d2      	b.n	53d0 <system_gclk_gen_set_config+0x4c>
    542a:	46c0      	nop			; (mov r8, r8)
    542c:	40000c00 	.word	0x40000c00
    5430:	00003e4d 	.word	0x00003e4d
    5434:	40000c08 	.word	0x40000c08
    5438:	00003e8d 	.word	0x00003e8d

0000543c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    543c:	b510      	push	{r4, lr}
    543e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5440:	4a0b      	ldr	r2, [pc, #44]	; (5470 <system_gclk_gen_enable+0x34>)
    5442:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5444:	b25b      	sxtb	r3, r3
    5446:	2b00      	cmp	r3, #0
    5448:	dbfb      	blt.n	5442 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    544a:	4b0a      	ldr	r3, [pc, #40]	; (5474 <system_gclk_gen_enable+0x38>)
    544c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    544e:	4b0a      	ldr	r3, [pc, #40]	; (5478 <system_gclk_gen_enable+0x3c>)
    5450:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5452:	4a07      	ldr	r2, [pc, #28]	; (5470 <system_gclk_gen_enable+0x34>)
    5454:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5456:	b25b      	sxtb	r3, r3
    5458:	2b00      	cmp	r3, #0
    545a:	dbfb      	blt.n	5454 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    545c:	4a04      	ldr	r2, [pc, #16]	; (5470 <system_gclk_gen_enable+0x34>)
    545e:	6851      	ldr	r1, [r2, #4]
    5460:	2380      	movs	r3, #128	; 0x80
    5462:	025b      	lsls	r3, r3, #9
    5464:	430b      	orrs	r3, r1
    5466:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    5468:	4b04      	ldr	r3, [pc, #16]	; (547c <system_gclk_gen_enable+0x40>)
    546a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    546c:	bd10      	pop	{r4, pc}
    546e:	46c0      	nop			; (mov r8, r8)
    5470:	40000c00 	.word	0x40000c00
    5474:	00003e4d 	.word	0x00003e4d
    5478:	40000c04 	.word	0x40000c04
    547c:	00003e8d 	.word	0x00003e8d

00005480 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    5480:	b570      	push	{r4, r5, r6, lr}
    5482:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5484:	4a1a      	ldr	r2, [pc, #104]	; (54f0 <system_gclk_gen_get_hz+0x70>)
    5486:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5488:	b25b      	sxtb	r3, r3
    548a:	2b00      	cmp	r3, #0
    548c:	dbfb      	blt.n	5486 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    548e:	4b19      	ldr	r3, [pc, #100]	; (54f4 <system_gclk_gen_get_hz+0x74>)
    5490:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5492:	4b19      	ldr	r3, [pc, #100]	; (54f8 <system_gclk_gen_get_hz+0x78>)
    5494:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5496:	4a16      	ldr	r2, [pc, #88]	; (54f0 <system_gclk_gen_get_hz+0x70>)
    5498:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    549a:	b25b      	sxtb	r3, r3
    549c:	2b00      	cmp	r3, #0
    549e:	dbfb      	blt.n	5498 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    54a0:	4e13      	ldr	r6, [pc, #76]	; (54f0 <system_gclk_gen_get_hz+0x70>)
    54a2:	6870      	ldr	r0, [r6, #4]
    54a4:	04c0      	lsls	r0, r0, #19
    54a6:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    54a8:	4b14      	ldr	r3, [pc, #80]	; (54fc <system_gclk_gen_get_hz+0x7c>)
    54aa:	4798      	blx	r3
    54ac:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    54ae:	4b12      	ldr	r3, [pc, #72]	; (54f8 <system_gclk_gen_get_hz+0x78>)
    54b0:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    54b2:	6876      	ldr	r6, [r6, #4]
    54b4:	02f6      	lsls	r6, r6, #11
    54b6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    54b8:	4b11      	ldr	r3, [pc, #68]	; (5500 <system_gclk_gen_get_hz+0x80>)
    54ba:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    54bc:	4a0c      	ldr	r2, [pc, #48]	; (54f0 <system_gclk_gen_get_hz+0x70>)
    54be:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    54c0:	b25b      	sxtb	r3, r3
    54c2:	2b00      	cmp	r3, #0
    54c4:	dbfb      	blt.n	54be <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    54c6:	4b0a      	ldr	r3, [pc, #40]	; (54f0 <system_gclk_gen_get_hz+0x70>)
    54c8:	689c      	ldr	r4, [r3, #8]
    54ca:	0224      	lsls	r4, r4, #8
    54cc:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    54ce:	4b0d      	ldr	r3, [pc, #52]	; (5504 <system_gclk_gen_get_hz+0x84>)
    54d0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    54d2:	2e00      	cmp	r6, #0
    54d4:	d107      	bne.n	54e6 <system_gclk_gen_get_hz+0x66>
    54d6:	2c01      	cmp	r4, #1
    54d8:	d907      	bls.n	54ea <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    54da:	0021      	movs	r1, r4
    54dc:	0028      	movs	r0, r5
    54de:	4b0a      	ldr	r3, [pc, #40]	; (5508 <system_gclk_gen_get_hz+0x88>)
    54e0:	4798      	blx	r3
    54e2:	0005      	movs	r5, r0
    54e4:	e001      	b.n	54ea <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    54e6:	3401      	adds	r4, #1
    54e8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    54ea:	0028      	movs	r0, r5
    54ec:	bd70      	pop	{r4, r5, r6, pc}
    54ee:	46c0      	nop			; (mov r8, r8)
    54f0:	40000c00 	.word	0x40000c00
    54f4:	00003e4d 	.word	0x00003e4d
    54f8:	40000c04 	.word	0x40000c04
    54fc:	00004f55 	.word	0x00004f55
    5500:	40000c08 	.word	0x40000c08
    5504:	00003e8d 	.word	0x00003e8d
    5508:	00007415 	.word	0x00007415

0000550c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    550c:	b510      	push	{r4, lr}
    550e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    5510:	4b06      	ldr	r3, [pc, #24]	; (552c <system_gclk_chan_enable+0x20>)
    5512:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5514:	4b06      	ldr	r3, [pc, #24]	; (5530 <system_gclk_chan_enable+0x24>)
    5516:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    5518:	4a06      	ldr	r2, [pc, #24]	; (5534 <system_gclk_chan_enable+0x28>)
    551a:	8853      	ldrh	r3, [r2, #2]
    551c:	2180      	movs	r1, #128	; 0x80
    551e:	01c9      	lsls	r1, r1, #7
    5520:	430b      	orrs	r3, r1
    5522:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    5524:	4b04      	ldr	r3, [pc, #16]	; (5538 <system_gclk_chan_enable+0x2c>)
    5526:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5528:	bd10      	pop	{r4, pc}
    552a:	46c0      	nop			; (mov r8, r8)
    552c:	00003e4d 	.word	0x00003e4d
    5530:	40000c02 	.word	0x40000c02
    5534:	40000c00 	.word	0x40000c00
    5538:	00003e8d 	.word	0x00003e8d

0000553c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    553c:	b510      	push	{r4, lr}
    553e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    5540:	4b0f      	ldr	r3, [pc, #60]	; (5580 <system_gclk_chan_disable+0x44>)
    5542:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5544:	4b0f      	ldr	r3, [pc, #60]	; (5584 <system_gclk_chan_disable+0x48>)
    5546:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    5548:	4a0f      	ldr	r2, [pc, #60]	; (5588 <system_gclk_chan_disable+0x4c>)
    554a:	8853      	ldrh	r3, [r2, #2]
    554c:	051b      	lsls	r3, r3, #20
    554e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    5550:	8853      	ldrh	r3, [r2, #2]
    5552:	490e      	ldr	r1, [pc, #56]	; (558c <system_gclk_chan_disable+0x50>)
    5554:	400b      	ands	r3, r1
    5556:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    5558:	8853      	ldrh	r3, [r2, #2]
    555a:	490d      	ldr	r1, [pc, #52]	; (5590 <system_gclk_chan_disable+0x54>)
    555c:	400b      	ands	r3, r1
    555e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    5560:	0011      	movs	r1, r2
    5562:	2280      	movs	r2, #128	; 0x80
    5564:	01d2      	lsls	r2, r2, #7
    5566:	884b      	ldrh	r3, [r1, #2]
    5568:	4213      	tst	r3, r2
    556a:	d1fc      	bne.n	5566 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    556c:	4906      	ldr	r1, [pc, #24]	; (5588 <system_gclk_chan_disable+0x4c>)
    556e:	884a      	ldrh	r2, [r1, #2]
    5570:	0203      	lsls	r3, r0, #8
    5572:	4806      	ldr	r0, [pc, #24]	; (558c <system_gclk_chan_disable+0x50>)
    5574:	4002      	ands	r2, r0
    5576:	4313      	orrs	r3, r2
    5578:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    557a:	4b06      	ldr	r3, [pc, #24]	; (5594 <system_gclk_chan_disable+0x58>)
    557c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    557e:	bd10      	pop	{r4, pc}
    5580:	00003e4d 	.word	0x00003e4d
    5584:	40000c02 	.word	0x40000c02
    5588:	40000c00 	.word	0x40000c00
    558c:	fffff0ff 	.word	0xfffff0ff
    5590:	ffffbfff 	.word	0xffffbfff
    5594:	00003e8d 	.word	0x00003e8d

00005598 <system_gclk_chan_set_config>:
{
    5598:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    559a:	780c      	ldrb	r4, [r1, #0]
    559c:	0224      	lsls	r4, r4, #8
    559e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    55a0:	4b02      	ldr	r3, [pc, #8]	; (55ac <system_gclk_chan_set_config+0x14>)
    55a2:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    55a4:	b2a4      	uxth	r4, r4
    55a6:	4b02      	ldr	r3, [pc, #8]	; (55b0 <system_gclk_chan_set_config+0x18>)
    55a8:	805c      	strh	r4, [r3, #2]
}
    55aa:	bd10      	pop	{r4, pc}
    55ac:	0000553d 	.word	0x0000553d
    55b0:	40000c00 	.word	0x40000c00

000055b4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    55b4:	b510      	push	{r4, lr}
    55b6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    55b8:	4b06      	ldr	r3, [pc, #24]	; (55d4 <system_gclk_chan_get_hz+0x20>)
    55ba:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    55bc:	4b06      	ldr	r3, [pc, #24]	; (55d8 <system_gclk_chan_get_hz+0x24>)
    55be:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    55c0:	4b06      	ldr	r3, [pc, #24]	; (55dc <system_gclk_chan_get_hz+0x28>)
    55c2:	885c      	ldrh	r4, [r3, #2]
    55c4:	0524      	lsls	r4, r4, #20
    55c6:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    55c8:	4b05      	ldr	r3, [pc, #20]	; (55e0 <system_gclk_chan_get_hz+0x2c>)
    55ca:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    55cc:	0020      	movs	r0, r4
    55ce:	4b05      	ldr	r3, [pc, #20]	; (55e4 <system_gclk_chan_get_hz+0x30>)
    55d0:	4798      	blx	r3
}
    55d2:	bd10      	pop	{r4, pc}
    55d4:	00003e4d 	.word	0x00003e4d
    55d8:	40000c02 	.word	0x40000c02
    55dc:	40000c00 	.word	0x40000c00
    55e0:	00003e8d 	.word	0x00003e8d
    55e4:	00005481 	.word	0x00005481

000055e8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    55e8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    55ea:	78d3      	ldrb	r3, [r2, #3]
    55ec:	2b00      	cmp	r3, #0
    55ee:	d135      	bne.n	565c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    55f0:	7813      	ldrb	r3, [r2, #0]
    55f2:	2b80      	cmp	r3, #128	; 0x80
    55f4:	d029      	beq.n	564a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    55f6:	061b      	lsls	r3, r3, #24
    55f8:	2480      	movs	r4, #128	; 0x80
    55fa:	0264      	lsls	r4, r4, #9
    55fc:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    55fe:	7854      	ldrb	r4, [r2, #1]
    5600:	2502      	movs	r5, #2
    5602:	43ac      	bics	r4, r5
    5604:	d106      	bne.n	5614 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    5606:	7894      	ldrb	r4, [r2, #2]
    5608:	2c00      	cmp	r4, #0
    560a:	d120      	bne.n	564e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    560c:	2480      	movs	r4, #128	; 0x80
    560e:	02a4      	lsls	r4, r4, #10
    5610:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    5612:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5614:	7854      	ldrb	r4, [r2, #1]
    5616:	3c01      	subs	r4, #1
    5618:	2c01      	cmp	r4, #1
    561a:	d91c      	bls.n	5656 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    561c:	040d      	lsls	r5, r1, #16
    561e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    5620:	24a0      	movs	r4, #160	; 0xa0
    5622:	05e4      	lsls	r4, r4, #23
    5624:	432c      	orrs	r4, r5
    5626:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5628:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    562a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    562c:	24d0      	movs	r4, #208	; 0xd0
    562e:	0624      	lsls	r4, r4, #24
    5630:	432c      	orrs	r4, r5
    5632:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5634:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    5636:	78d4      	ldrb	r4, [r2, #3]
    5638:	2c00      	cmp	r4, #0
    563a:	d122      	bne.n	5682 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    563c:	035b      	lsls	r3, r3, #13
    563e:	d51c      	bpl.n	567a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    5640:	7893      	ldrb	r3, [r2, #2]
    5642:	2b01      	cmp	r3, #1
    5644:	d01e      	beq.n	5684 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    5646:	6141      	str	r1, [r0, #20]
    5648:	e017      	b.n	567a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    564a:	2300      	movs	r3, #0
    564c:	e7d7      	b.n	55fe <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    564e:	24c0      	movs	r4, #192	; 0xc0
    5650:	02e4      	lsls	r4, r4, #11
    5652:	4323      	orrs	r3, r4
    5654:	e7dd      	b.n	5612 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    5656:	4c0d      	ldr	r4, [pc, #52]	; (568c <_system_pinmux_config+0xa4>)
    5658:	4023      	ands	r3, r4
    565a:	e7df      	b.n	561c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    565c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    565e:	040c      	lsls	r4, r1, #16
    5660:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    5662:	23a0      	movs	r3, #160	; 0xa0
    5664:	05db      	lsls	r3, r3, #23
    5666:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5668:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    566a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    566c:	23d0      	movs	r3, #208	; 0xd0
    566e:	061b      	lsls	r3, r3, #24
    5670:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5672:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    5674:	78d3      	ldrb	r3, [r2, #3]
    5676:	2b00      	cmp	r3, #0
    5678:	d103      	bne.n	5682 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    567a:	7853      	ldrb	r3, [r2, #1]
    567c:	3b01      	subs	r3, #1
    567e:	2b01      	cmp	r3, #1
    5680:	d902      	bls.n	5688 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    5682:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    5684:	6181      	str	r1, [r0, #24]
    5686:	e7f8      	b.n	567a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    5688:	6081      	str	r1, [r0, #8]
}
    568a:	e7fa      	b.n	5682 <_system_pinmux_config+0x9a>
    568c:	fffbffff 	.word	0xfffbffff

00005690 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    5690:	b510      	push	{r4, lr}
    5692:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    5694:	09c1      	lsrs	r1, r0, #7
		return NULL;
    5696:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5698:	2900      	cmp	r1, #0
    569a:	d104      	bne.n	56a6 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    569c:	0943      	lsrs	r3, r0, #5
    569e:	01db      	lsls	r3, r3, #7
    56a0:	4905      	ldr	r1, [pc, #20]	; (56b8 <system_pinmux_pin_set_config+0x28>)
    56a2:	468c      	mov	ip, r1
    56a4:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    56a6:	241f      	movs	r4, #31
    56a8:	4020      	ands	r0, r4
    56aa:	2101      	movs	r1, #1
    56ac:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    56ae:	0018      	movs	r0, r3
    56b0:	4b02      	ldr	r3, [pc, #8]	; (56bc <system_pinmux_pin_set_config+0x2c>)
    56b2:	4798      	blx	r3
}
    56b4:	bd10      	pop	{r4, pc}
    56b6:	46c0      	nop			; (mov r8, r8)
    56b8:	41004400 	.word	0x41004400
    56bc:	000055e9 	.word	0x000055e9

000056c0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    56c0:	4770      	bx	lr
	...

000056c4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    56c4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    56c6:	4b05      	ldr	r3, [pc, #20]	; (56dc <system_init+0x18>)
    56c8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    56ca:	4b05      	ldr	r3, [pc, #20]	; (56e0 <system_init+0x1c>)
    56cc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    56ce:	4b05      	ldr	r3, [pc, #20]	; (56e4 <system_init+0x20>)
    56d0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    56d2:	4b05      	ldr	r3, [pc, #20]	; (56e8 <system_init+0x24>)
    56d4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    56d6:	4b05      	ldr	r3, [pc, #20]	; (56ec <system_init+0x28>)
    56d8:	4798      	blx	r3
}
    56da:	bd10      	pop	{r4, pc}
    56dc:	00005201 	.word	0x00005201
    56e0:	00003ebd 	.word	0x00003ebd
    56e4:	000056c1 	.word	0x000056c1
    56e8:	00003fcd 	.word	0x00003fcd
    56ec:	000056c1 	.word	0x000056c1

000056f0 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    56f0:	4b09      	ldr	r3, [pc, #36]	; (5718 <_tcc_get_inst_index+0x28>)
    56f2:	4298      	cmp	r0, r3
    56f4:	d00c      	beq.n	5710 <_tcc_get_inst_index+0x20>
    56f6:	4b09      	ldr	r3, [pc, #36]	; (571c <_tcc_get_inst_index+0x2c>)
    56f8:	4298      	cmp	r0, r3
    56fa:	d007      	beq.n	570c <_tcc_get_inst_index+0x1c>
    56fc:	4a08      	ldr	r2, [pc, #32]	; (5720 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    56fe:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
    5700:	4290      	cmp	r0, r2
    5702:	d001      	beq.n	5708 <_tcc_get_inst_index+0x18>
}
    5704:	0018      	movs	r0, r3
    5706:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    5708:	3302      	adds	r3, #2
    570a:	e002      	b.n	5712 <_tcc_get_inst_index+0x22>
    570c:	2301      	movs	r3, #1
    570e:	e000      	b.n	5712 <_tcc_get_inst_index+0x22>
    5710:	2300      	movs	r3, #0
			return i;
    5712:	b2db      	uxtb	r3, r3
    5714:	e7f6      	b.n	5704 <_tcc_get_inst_index+0x14>
    5716:	46c0      	nop			; (mov r8, r8)
    5718:	42002000 	.word	0x42002000
    571c:	42002400 	.word	0x42002400
    5720:	42002800 	.word	0x42002800

00005724 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    5724:	b510      	push	{r4, lr}
    5726:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    5728:	0008      	movs	r0, r1
    572a:	4b4f      	ldr	r3, [pc, #316]	; (5868 <tcc_get_config_defaults+0x144>)
    572c:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
    572e:	2300      	movs	r3, #0
    5730:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    5732:	0080      	lsls	r0, r0, #2
    5734:	4a4d      	ldr	r2, [pc, #308]	; (586c <tcc_get_config_defaults+0x148>)
    5736:	5882      	ldr	r2, [r0, r2]
    5738:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    573a:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    573c:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    573e:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    5740:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    5742:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    5744:	61e3      	str	r3, [r4, #28]
    5746:	6223      	str	r3, [r4, #32]
    5748:	6263      	str	r3, [r4, #36]	; 0x24
    574a:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    574c:	7523      	strb	r3, [r4, #20]
    574e:	7563      	strb	r3, [r4, #21]
    5750:	75a3      	strb	r3, [r4, #22]
    5752:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    5754:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    5756:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    5758:	7423      	strb	r3, [r4, #16]
    575a:	7463      	strb	r3, [r4, #17]
    575c:	74a3      	strb	r3, [r4, #18]
    575e:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    5760:	222c      	movs	r2, #44	; 0x2c
    5762:	54a3      	strb	r3, [r4, r2]
    5764:	3201      	adds	r2, #1
    5766:	54a3      	strb	r3, [r4, r2]
    5768:	3201      	adds	r2, #1
    576a:	54a3      	strb	r3, [r4, r2]
    576c:	3201      	adds	r2, #1
    576e:	54a3      	strb	r3, [r4, r2]
    5770:	3201      	adds	r2, #1
    5772:	54a3      	strb	r3, [r4, r2]
    5774:	3201      	adds	r2, #1
    5776:	54a3      	strb	r3, [r4, r2]
    5778:	3201      	adds	r2, #1
    577a:	54a3      	strb	r3, [r4, r2]
    577c:	3201      	adds	r2, #1
    577e:	54a3      	strb	r3, [r4, r2]
    5780:	3201      	adds	r2, #1
    5782:	54a3      	strb	r3, [r4, r2]
    5784:	3201      	adds	r2, #1
    5786:	54a3      	strb	r3, [r4, r2]
    5788:	3201      	adds	r2, #1
    578a:	54a3      	strb	r3, [r4, r2]
    578c:	3201      	adds	r2, #1
    578e:	54a3      	strb	r3, [r4, r2]
    5790:	3201      	adds	r2, #1
    5792:	54a3      	strb	r3, [r4, r2]
    5794:	3201      	adds	r2, #1
    5796:	54a3      	strb	r3, [r4, r2]
    5798:	3201      	adds	r2, #1
    579a:	54a3      	strb	r3, [r4, r2]
    579c:	3201      	adds	r2, #1
    579e:	54a3      	strb	r3, [r4, r2]
    57a0:	3201      	adds	r2, #1
    57a2:	54a3      	strb	r3, [r4, r2]
    57a4:	3201      	adds	r2, #1
    57a6:	54a3      	strb	r3, [r4, r2]
    57a8:	3201      	adds	r2, #1
    57aa:	54a3      	strb	r3, [r4, r2]
    57ac:	3201      	adds	r2, #1
    57ae:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    57b0:	3201      	adds	r2, #1
    57b2:	54a3      	strb	r3, [r4, r2]
    57b4:	3201      	adds	r2, #1
    57b6:	54a3      	strb	r3, [r4, r2]
    57b8:	3201      	adds	r2, #1
    57ba:	54a3      	strb	r3, [r4, r2]
    57bc:	3201      	adds	r2, #1
    57be:	54a3      	strb	r3, [r4, r2]
    57c0:	3201      	adds	r2, #1
    57c2:	54a3      	strb	r3, [r4, r2]
    57c4:	3201      	adds	r2, #1
    57c6:	54a3      	strb	r3, [r4, r2]
    57c8:	3201      	adds	r2, #1
    57ca:	54a3      	strb	r3, [r4, r2]
    57cc:	3201      	adds	r2, #1
    57ce:	54a3      	strb	r3, [r4, r2]
    57d0:	3201      	adds	r2, #1
    57d2:	54a3      	strb	r3, [r4, r2]
    57d4:	3201      	adds	r2, #1
    57d6:	54a3      	strb	r3, [r4, r2]
    57d8:	3201      	adds	r2, #1
    57da:	54a3      	strb	r3, [r4, r2]
    57dc:	3201      	adds	r2, #1
    57de:	54a3      	strb	r3, [r4, r2]
    57e0:	3201      	adds	r2, #1
    57e2:	54a3      	strb	r3, [r4, r2]
    57e4:	3201      	adds	r2, #1
    57e6:	54a3      	strb	r3, [r4, r2]
    57e8:	3201      	adds	r2, #1
    57ea:	54a3      	strb	r3, [r4, r2]
    57ec:	3201      	adds	r2, #1
    57ee:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    57f0:	3201      	adds	r2, #1
    57f2:	54a3      	strb	r3, [r4, r2]
    57f4:	3201      	adds	r2, #1
    57f6:	54a3      	strb	r3, [r4, r2]
    57f8:	3201      	adds	r2, #1
    57fa:	54a3      	strb	r3, [r4, r2]
    57fc:	3201      	adds	r2, #1
    57fe:	54a3      	strb	r3, [r4, r2]
    5800:	3201      	adds	r2, #1
    5802:	54a3      	strb	r3, [r4, r2]
    5804:	3201      	adds	r2, #1
    5806:	54a3      	strb	r3, [r4, r2]
    5808:	3201      	adds	r2, #1
    580a:	54a3      	strb	r3, [r4, r2]
    580c:	3201      	adds	r2, #1
    580e:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    5810:	3241      	adds	r2, #65	; 0x41
    5812:	54a3      	strb	r3, [r4, r2]
    5814:	65a3      	str	r3, [r4, #88]	; 0x58
    5816:	67a3      	str	r3, [r4, #120]	; 0x78
    5818:	3201      	adds	r2, #1
    581a:	54a3      	strb	r3, [r4, r2]
    581c:	65e3      	str	r3, [r4, #92]	; 0x5c
    581e:	67e3      	str	r3, [r4, #124]	; 0x7c
    5820:	3201      	adds	r2, #1
    5822:	54a3      	strb	r3, [r4, r2]
    5824:	6623      	str	r3, [r4, #96]	; 0x60
    5826:	3a1a      	subs	r2, #26
    5828:	50a3      	str	r3, [r4, r2]
    582a:	321b      	adds	r2, #27
    582c:	54a3      	strb	r3, [r4, r2]
    582e:	6663      	str	r3, [r4, #100]	; 0x64
    5830:	3a17      	subs	r2, #23
    5832:	50a3      	str	r3, [r4, r2]
    5834:	3218      	adds	r2, #24
    5836:	54a3      	strb	r3, [r4, r2]
    5838:	66a3      	str	r3, [r4, #104]	; 0x68
    583a:	3a14      	subs	r2, #20
    583c:	50a3      	str	r3, [r4, r2]
    583e:	3215      	adds	r2, #21
    5840:	54a3      	strb	r3, [r4, r2]
    5842:	66e3      	str	r3, [r4, #108]	; 0x6c
    5844:	3a11      	subs	r2, #17
    5846:	50a3      	str	r3, [r4, r2]
    5848:	3212      	adds	r2, #18
    584a:	54a3      	strb	r3, [r4, r2]
    584c:	6723      	str	r3, [r4, #112]	; 0x70
    584e:	3a0e      	subs	r2, #14
    5850:	50a3      	str	r3, [r4, r2]
    5852:	320f      	adds	r2, #15
    5854:	54a3      	strb	r3, [r4, r2]
    5856:	6763      	str	r3, [r4, #116]	; 0x74
    5858:	3a0b      	subs	r2, #11
    585a:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    585c:	2101      	movs	r1, #1
    585e:	320c      	adds	r2, #12
    5860:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    5862:	3201      	adds	r2, #1
    5864:	54a3      	strb	r3, [r4, r2]
}
    5866:	bd10      	pop	{r4, pc}
    5868:	000056f1 	.word	0x000056f1
    586c:	0000b800 	.word	0x0000b800

00005870 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    5870:	b5f0      	push	{r4, r5, r6, r7, lr}
    5872:	46de      	mov	lr, fp
    5874:	4657      	mov	r7, sl
    5876:	464e      	mov	r6, r9
    5878:	4645      	mov	r5, r8
    587a:	b5e0      	push	{r5, r6, r7, lr}
    587c:	b091      	sub	sp, #68	; 0x44
    587e:	9001      	str	r0, [sp, #4]
    5880:	000c      	movs	r4, r1
    5882:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    5884:	0008      	movs	r0, r1
    5886:	4bc3      	ldr	r3, [pc, #780]	; (5b94 <tcc_init+0x324>)
    5888:	4798      	blx	r3
    588a:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    588c:	0001      	movs	r1, r0
			PM->APBCMASK.reg |= mask;
    588e:	48c2      	ldr	r0, [pc, #776]	; (5b98 <tcc_init+0x328>)
    5890:	6a02      	ldr	r2, [r0, #32]
    5892:	009e      	lsls	r6, r3, #2
    5894:	4fc1      	ldr	r7, [pc, #772]	; (5b9c <tcc_init+0x32c>)
    5896:	59f7      	ldr	r7, [r6, r7]
    5898:	433a      	orrs	r2, r7
    589a:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    589c:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    589e:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    58a0:	0792      	lsls	r2, r2, #30
    58a2:	d506      	bpl.n	58b2 <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    58a4:	b011      	add	sp, #68	; 0x44
    58a6:	bc3c      	pop	{r2, r3, r4, r5}
    58a8:	4690      	mov	r8, r2
    58aa:	4699      	mov	r9, r3
    58ac:	46a2      	mov	sl, r4
    58ae:	46ab      	mov	fp, r5
    58b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    58b2:	6822      	ldr	r2, [r4, #0]
    58b4:	2701      	movs	r7, #1
    58b6:	4017      	ands	r7, r2
    58b8:	d1f4      	bne.n	58a4 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
    58ba:	48b9      	ldr	r0, [pc, #740]	; (5ba0 <tcc_init+0x330>)
    58bc:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
    58be:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
    58c0:	682e      	ldr	r6, [r5, #0]
    58c2:	42b2      	cmp	r2, r6
    58c4:	d3ee      	bcc.n	58a4 <tcc_init+0x34>
		|| (config->counter.period > count_max)
    58c6:	686e      	ldr	r6, [r5, #4]
    58c8:	42b2      	cmp	r2, r6
    58ca:	d3eb      	bcc.n	58a4 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
    58cc:	69e8      	ldr	r0, [r5, #28]
    58ce:	4282      	cmp	r2, r0
    58d0:	d200      	bcs.n	58d4 <tcc_init+0x64>
    58d2:	e1b9      	b.n	5c48 <tcc_init+0x3d8>
    58d4:	6a28      	ldr	r0, [r5, #32]
    58d6:	4282      	cmp	r2, r0
    58d8:	d200      	bcs.n	58dc <tcc_init+0x6c>
    58da:	e1b7      	b.n	5c4c <tcc_init+0x3dc>
    58dc:	6a68      	ldr	r0, [r5, #36]	; 0x24
    58de:	4282      	cmp	r2, r0
    58e0:	d200      	bcs.n	58e4 <tcc_init+0x74>
    58e2:	e1b5      	b.n	5c50 <tcc_init+0x3e0>
    58e4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    58e6:	4282      	cmp	r2, r0
    58e8:	d200      	bcs.n	58ec <tcc_init+0x7c>
    58ea:	e1b3      	b.n	5c54 <tcc_init+0x3e4>
    58ec:	2298      	movs	r2, #152	; 0x98
    58ee:	4694      	mov	ip, r2
    58f0:	44ac      	add	ip, r5
    58f2:	4662      	mov	r2, ip
    58f4:	9208      	str	r2, [sp, #32]
    58f6:	2000      	movs	r0, #0
    58f8:	e003      	b.n	5902 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    58fa:	3001      	adds	r0, #1
    58fc:	3201      	adds	r2, #1
    58fe:	2808      	cmp	r0, #8
    5900:	d008      	beq.n	5914 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
    5902:	7816      	ldrb	r6, [r2, #0]
    5904:	2e00      	cmp	r6, #0
    5906:	d0f8      	beq.n	58fa <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
    5908:	4ea6      	ldr	r6, [pc, #664]	; (5ba4 <tcc_init+0x334>)
    590a:	5c76      	ldrb	r6, [r6, r1]
    590c:	4286      	cmp	r6, r0
    590e:	dcf4      	bgt.n	58fa <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
    5910:	2017      	movs	r0, #23
    5912:	e7c7      	b.n	58a4 <tcc_init+0x34>
    5914:	2200      	movs	r2, #0
    5916:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    5918:	2080      	movs	r0, #128	; 0x80
    591a:	0440      	lsls	r0, r0, #17
    591c:	4684      	mov	ip, r0
    591e:	e002      	b.n	5926 <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    5920:	3201      	adds	r2, #1
    5922:	2a04      	cmp	r2, #4
    5924:	d00e      	beq.n	5944 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
    5926:	18a8      	adds	r0, r5, r2
    5928:	7c00      	ldrb	r0, [r0, #16]
    592a:	2801      	cmp	r0, #1
    592c:	d1f8      	bne.n	5920 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
    592e:	489e      	ldr	r0, [pc, #632]	; (5ba8 <tcc_init+0x338>)
    5930:	5c40      	ldrb	r0, [r0, r1]
    5932:	4290      	cmp	r0, r2
    5934:	da00      	bge.n	5938 <tcc_init+0xc8>
    5936:	e18f      	b.n	5c58 <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    5938:	4660      	mov	r0, ip
    593a:	4090      	lsls	r0, r2
    593c:	9e02      	ldr	r6, [sp, #8]
    593e:	4306      	orrs	r6, r0
    5940:	9602      	str	r6, [sp, #8]
    5942:	e7ed      	b.n	5920 <tcc_init+0xb0>
	if (config->run_in_standby) {
    5944:	329d      	adds	r2, #157	; 0x9d
    5946:	5caa      	ldrb	r2, [r5, r2]
    5948:	2a00      	cmp	r2, #0
    594a:	d004      	beq.n	5956 <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    594c:	2280      	movs	r2, #128	; 0x80
    594e:	0112      	lsls	r2, r2, #4
    5950:	9902      	ldr	r1, [sp, #8]
    5952:	4311      	orrs	r1, r2
    5954:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    5956:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    5958:	1e51      	subs	r1, r2, #1
    595a:	418a      	sbcs	r2, r1
    595c:	0092      	lsls	r2, r2, #2
    595e:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    5960:	7a6a      	ldrb	r2, [r5, #9]
    5962:	2a01      	cmp	r2, #1
    5964:	d022      	beq.n	59ac <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
    5966:	4a90      	ldr	r2, [pc, #576]	; (5ba8 <tcc_init+0x338>)
    5968:	5cd2      	ldrb	r2, [r2, r3]
    596a:	0011      	movs	r1, r2
    596c:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
    596e:	2235      	movs	r2, #53	; 0x35
    5970:	5caa      	ldrb	r2, [r5, r2]
    5972:	428a      	cmp	r2, r1
    5974:	d300      	bcc.n	5978 <tcc_init+0x108>
    5976:	e179      	b.n	5c6c <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    5978:	212c      	movs	r1, #44	; 0x2c
    597a:	5c69      	ldrb	r1, [r5, r1]
    597c:	290f      	cmp	r1, #15
    597e:	d900      	bls.n	5982 <tcc_init+0x112>
    5980:	e174      	b.n	5c6c <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    5982:	7b28      	ldrb	r0, [r5, #12]
    5984:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    5986:	7ae8      	ldrb	r0, [r5, #11]
    5988:	900b      	str	r0, [sp, #44]	; 0x2c
    598a:	202d      	movs	r0, #45	; 0x2d
    598c:	4682      	mov	sl, r0
    598e:	44aa      	add	sl, r5
    5990:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    5992:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
    5994:	ae0e      	add	r6, sp, #56	; 0x38
    5996:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    5998:	26c0      	movs	r6, #192	; 0xc0
    599a:	0136      	lsls	r6, r6, #4
    599c:	46b1      	mov	r9, r6
    599e:	4684      	mov	ip, r0
    59a0:	46a0      	mov	r8, r4
    59a2:	0028      	movs	r0, r5
    59a4:	4655      	mov	r5, sl
    59a6:	9309      	str	r3, [sp, #36]	; 0x24
    59a8:	4682      	mov	sl, r0
    59aa:	e035      	b.n	5a18 <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
    59ac:	9906      	ldr	r1, [sp, #24]
    59ae:	4311      	orrs	r1, r2
    59b0:	9106      	str	r1, [sp, #24]
    59b2:	e7d8      	b.n	5966 <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    59b4:	0292      	lsls	r2, r2, #10
    59b6:	464f      	mov	r7, r9
    59b8:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    59ba:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
    59bc:	7919      	ldrb	r1, [r3, #4]
    59be:	468b      	mov	fp, r1
    59c0:	2103      	movs	r1, #3
    59c2:	465f      	mov	r7, fp
    59c4:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    59c6:	430a      	orrs	r2, r1
    59c8:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
    59ca:	795a      	ldrb	r2, [r3, #5]
    59cc:	0152      	lsls	r2, r2, #5
    59ce:	2160      	movs	r1, #96	; 0x60
    59d0:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    59d2:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
    59d4:	7999      	ldrb	r1, [r3, #6]
    59d6:	0209      	lsls	r1, r1, #8
    59d8:	26c0      	movs	r6, #192	; 0xc0
    59da:	00b6      	lsls	r6, r6, #2
    59dc:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    59de:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    59e0:	79da      	ldrb	r2, [r3, #7]
    59e2:	0312      	lsls	r2, r2, #12
    59e4:	21e0      	movs	r1, #224	; 0xe0
    59e6:	01c9      	lsls	r1, r1, #7
    59e8:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    59ea:	4316      	orrs	r6, r2
    59ec:	4334      	orrs	r4, r6
    59ee:	9a03      	ldr	r2, [sp, #12]
    59f0:	4314      	orrs	r4, r2
    59f2:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
    59f4:	4662      	mov	r2, ip
    59f6:	9907      	ldr	r1, [sp, #28]
    59f8:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    59fa:	2a04      	cmp	r2, #4
    59fc:	d02a      	beq.n	5a54 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
    59fe:	7c9a      	ldrb	r2, [r3, #18]
    5a00:	9905      	ldr	r1, [sp, #20]
    5a02:	4291      	cmp	r1, r2
    5a04:	d800      	bhi.n	5a08 <tcc_init+0x198>
    5a06:	e131      	b.n	5c6c <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    5a08:	7a59      	ldrb	r1, [r3, #9]
    5a0a:	350a      	adds	r5, #10
    5a0c:	2304      	movs	r3, #4
    5a0e:	469b      	mov	fp, r3
    5a10:	44dc      	add	ip, fp
    5a12:	290f      	cmp	r1, #15
    5a14:	d900      	bls.n	5a18 <tcc_init+0x1a8>
    5a16:	e129      	b.n	5c6c <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    5a18:	0609      	lsls	r1, r1, #24
    5a1a:	23f0      	movs	r3, #240	; 0xf0
    5a1c:	051b      	lsls	r3, r3, #20
    5a1e:	4019      	ands	r1, r3
    5a20:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    5a22:	782e      	ldrb	r6, [r5, #0]
    5a24:	0436      	lsls	r6, r6, #16
    5a26:	20ff      	movs	r0, #255	; 0xff
    5a28:	0400      	lsls	r0, r0, #16
    5a2a:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    5a2c:	7868      	ldrb	r0, [r5, #1]
    5a2e:	2480      	movs	r4, #128	; 0x80
    5a30:	2800      	cmp	r0, #0
    5a32:	d100      	bne.n	5a36 <tcc_init+0x1c6>
    5a34:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    5a36:	7898      	ldrb	r0, [r3, #2]
    5a38:	2708      	movs	r7, #8
    5a3a:	9703      	str	r7, [sp, #12]
    5a3c:	2800      	cmp	r0, #0
    5a3e:	d101      	bne.n	5a44 <tcc_init+0x1d4>
    5a40:	9804      	ldr	r0, [sp, #16]
    5a42:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    5a44:	78d8      	ldrb	r0, [r3, #3]
    5a46:	4683      	mov	fp, r0
    5a48:	2010      	movs	r0, #16
    5a4a:	465f      	mov	r7, fp
    5a4c:	2f00      	cmp	r7, #0
    5a4e:	d1b1      	bne.n	59b4 <tcc_init+0x144>
    5a50:	9804      	ldr	r0, [sp, #16]
    5a52:	e7af      	b.n	59b4 <tcc_init+0x144>
    5a54:	4644      	mov	r4, r8
    5a56:	4655      	mov	r5, sl
    5a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
    5a5a:	4a52      	ldr	r2, [pc, #328]	; (5ba4 <tcc_init+0x334>)
    5a5c:	5cd2      	ldrb	r2, [r2, r3]
    5a5e:	4691      	mov	r9, r2
    5a60:	4651      	mov	r1, sl
    5a62:	3150      	adds	r1, #80	; 0x50
    5a64:	4650      	mov	r0, sl
    5a66:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
    5a68:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    5a6a:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    5a6c:	2601      	movs	r6, #1
    5a6e:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    5a70:	2602      	movs	r6, #2
    5a72:	36ff      	adds	r6, #255	; 0xff
    5a74:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    5a76:	2680      	movs	r6, #128	; 0x80
    5a78:	0276      	lsls	r6, r6, #9
    5a7a:	46b0      	mov	r8, r6
    5a7c:	46a4      	mov	ip, r4
    5a7e:	001c      	movs	r4, r3
    5a80:	464b      	mov	r3, r9
    5a82:	e00f      	b.n	5aa4 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
    5a84:	7806      	ldrb	r6, [r0, #0]
    5a86:	2e00      	cmp	r6, #0
    5a88:	d007      	beq.n	5a9a <tcc_init+0x22a>
			if (i >= ow_num) {
    5a8a:	4293      	cmp	r3, r2
    5a8c:	d800      	bhi.n	5a90 <tcc_init+0x220>
    5a8e:	e0e7      	b.n	5c60 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    5a90:	2e02      	cmp	r6, #2
    5a92:	d014      	beq.n	5abe <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    5a94:	4656      	mov	r6, sl
    5a96:	4096      	lsls	r6, r2
    5a98:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    5a9a:	3201      	adds	r2, #1
    5a9c:	3101      	adds	r1, #1
    5a9e:	3002      	adds	r0, #2
    5aa0:	2a08      	cmp	r2, #8
    5aa2:	d010      	beq.n	5ac6 <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
    5aa4:	780e      	ldrb	r6, [r1, #0]
    5aa6:	2e00      	cmp	r6, #0
    5aa8:	d0ec      	beq.n	5a84 <tcc_init+0x214>
			if (i >= ow_num) {
    5aaa:	4293      	cmp	r3, r2
    5aac:	d800      	bhi.n	5ab0 <tcc_init+0x240>
    5aae:	e0d5      	b.n	5c5c <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    5ab0:	4646      	mov	r6, r8
    5ab2:	4096      	lsls	r6, r2
    5ab4:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
    5ab6:	7806      	ldrb	r6, [r0, #0]
    5ab8:	2e00      	cmp	r6, #0
    5aba:	d1e9      	bne.n	5a90 <tcc_init+0x220>
    5abc:	e7ed      	b.n	5a9a <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    5abe:	465e      	mov	r6, fp
    5ac0:	4096      	lsls	r6, r2
    5ac2:	4337      	orrs	r7, r6
    5ac4:	e7e9      	b.n	5a9a <tcc_init+0x22a>
    5ac6:	4699      	mov	r9, r3
    5ac8:	0023      	movs	r3, r4
    5aca:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    5acc:	7e6a      	ldrb	r2, [r5, #25]
    5ace:	0112      	lsls	r2, r2, #4
    5ad0:	2130      	movs	r1, #48	; 0x30
    5ad2:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    5ad4:	7e28      	ldrb	r0, [r5, #24]
    5ad6:	2207      	movs	r2, #7
    5ad8:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    5ada:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    5adc:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    5ade:	2080      	movs	r0, #128	; 0x80
    5ae0:	0240      	lsls	r0, r0, #9
    5ae2:	000e      	movs	r6, r1
    5ae4:	e002      	b.n	5aec <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    5ae6:	3201      	adds	r2, #1
    5ae8:	2a04      	cmp	r2, #4
    5aea:	d00b      	beq.n	5b04 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
    5aec:	18a9      	adds	r1, r5, r2
    5aee:	7d09      	ldrb	r1, [r1, #20]
    5af0:	2900      	cmp	r1, #0
    5af2:	d0f8      	beq.n	5ae6 <tcc_init+0x276>
			if (n >= cc_num) {
    5af4:	9905      	ldr	r1, [sp, #20]
    5af6:	4291      	cmp	r1, r2
    5af8:	dc00      	bgt.n	5afc <tcc_init+0x28c>
    5afa:	e0b3      	b.n	5c64 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
    5afc:	0001      	movs	r1, r0
    5afe:	4091      	lsls	r1, r2
    5b00:	430e      	orrs	r6, r1
    5b02:	e7f0      	b.n	5ae6 <tcc_init+0x276>
    5b04:	46b2      	mov	sl, r6
    5b06:	9801      	ldr	r0, [sp, #4]
    5b08:	0002      	movs	r2, r0
    5b0a:	3204      	adds	r2, #4
    5b0c:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    5b0e:	2100      	movs	r1, #0
    5b10:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    5b12:	4282      	cmp	r2, r0
    5b14:	d1fc      	bne.n	5b10 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
    5b16:	2200      	movs	r2, #0
    5b18:	9801      	ldr	r0, [sp, #4]
    5b1a:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    5b1c:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    5b1e:	0099      	lsls	r1, r3, #2
    5b20:	4a22      	ldr	r2, [pc, #136]	; (5bac <tcc_init+0x33c>)
    5b22:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
    5b24:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    5b26:	22a0      	movs	r2, #160	; 0xa0
    5b28:	5ca9      	ldrb	r1, [r5, r2]
    5b2a:	3a64      	subs	r2, #100	; 0x64
    5b2c:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
    5b2e:	a90d      	add	r1, sp, #52	; 0x34
    5b30:	7aaa      	ldrb	r2, [r5, #10]
    5b32:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    5b34:	4a1e      	ldr	r2, [pc, #120]	; (5bb0 <tcc_init+0x340>)
    5b36:	5cd6      	ldrb	r6, [r2, r3]
    5b38:	0030      	movs	r0, r6
    5b3a:	4b1e      	ldr	r3, [pc, #120]	; (5bb4 <tcc_init+0x344>)
    5b3c:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    5b3e:	0030      	movs	r0, r6
    5b40:	4b1d      	ldr	r3, [pc, #116]	; (5bb8 <tcc_init+0x348>)
    5b42:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    5b44:	464b      	mov	r3, r9
    5b46:	2b00      	cmp	r3, #0
    5b48:	dd3c      	ble.n	5bc4 <tcc_init+0x354>
    5b4a:	002e      	movs	r6, r5
    5b4c:	3658      	adds	r6, #88	; 0x58
    5b4e:	3398      	adds	r3, #152	; 0x98
    5b50:	4698      	mov	r8, r3
    5b52:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5b54:	2301      	movs	r3, #1
    5b56:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
    5b58:	46ab      	mov	fp, r5
    5b5a:	4645      	mov	r5, r8
    5b5c:	46a0      	mov	r8, r4
    5b5e:	9c08      	ldr	r4, [sp, #32]
    5b60:	e003      	b.n	5b6a <tcc_init+0x2fa>
    5b62:	3401      	adds	r4, #1
    5b64:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    5b66:	42ac      	cmp	r4, r5
    5b68:	d02a      	beq.n	5bc0 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
    5b6a:	7823      	ldrb	r3, [r4, #0]
    5b6c:	2b00      	cmp	r3, #0
    5b6e:	d0f8      	beq.n	5b62 <tcc_init+0x2f2>
    5b70:	ab0c      	add	r3, sp, #48	; 0x30
    5b72:	464a      	mov	r2, r9
    5b74:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    5b76:	2300      	movs	r3, #0
    5b78:	aa0c      	add	r2, sp, #48	; 0x30
    5b7a:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    5b7c:	0013      	movs	r3, r2
    5b7e:	2220      	movs	r2, #32
    5b80:	18b2      	adds	r2, r6, r2
    5b82:	7812      	ldrb	r2, [r2, #0]
    5b84:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    5b86:	464a      	mov	r2, r9
    5b88:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    5b8a:	7830      	ldrb	r0, [r6, #0]
    5b8c:	0019      	movs	r1, r3
    5b8e:	4b0b      	ldr	r3, [pc, #44]	; (5bbc <tcc_init+0x34c>)
    5b90:	4798      	blx	r3
    5b92:	e7e6      	b.n	5b62 <tcc_init+0x2f2>
    5b94:	000056f1 	.word	0x000056f1
    5b98:	40000400 	.word	0x40000400
    5b9c:	0000b7ec 	.word	0x0000b7ec
    5ba0:	0000b800 	.word	0x0000b800
    5ba4:	0000b80c 	.word	0x0000b80c
    5ba8:	0000b7f8 	.word	0x0000b7f8
    5bac:	20000400 	.word	0x20000400
    5bb0:	0000b7fc 	.word	0x0000b7fc
    5bb4:	00005599 	.word	0x00005599
    5bb8:	0000550d 	.word	0x0000550d
    5bbc:	00005691 	.word	0x00005691
    5bc0:	4644      	mov	r4, r8
    5bc2:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    5bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5bc6:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    5bc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5bca:	0212      	lsls	r2, r2, #8
    5bcc:	4313      	orrs	r3, r2
    5bce:	9a02      	ldr	r2, [sp, #8]
    5bd0:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    5bd2:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    5bd4:	2204      	movs	r2, #4
    5bd6:	68a3      	ldr	r3, [r4, #8]
    5bd8:	421a      	tst	r2, r3
    5bda:	d1fc      	bne.n	5bd6 <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
    5bdc:	23ff      	movs	r3, #255	; 0xff
    5bde:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    5be0:	2204      	movs	r2, #4
    5be2:	68a3      	ldr	r3, [r4, #8]
    5be4:	421a      	tst	r2, r3
    5be6:	d1fc      	bne.n	5be2 <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
    5be8:	466b      	mov	r3, sp
    5bea:	7e1b      	ldrb	r3, [r3, #24]
    5bec:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    5bee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5bf0:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    5bf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5bf4:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    5bf6:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    5bf8:	4a1d      	ldr	r2, [pc, #116]	; (5c70 <tcc_init+0x400>)
    5bfa:	68a3      	ldr	r3, [r4, #8]
    5bfc:	4213      	tst	r3, r2
    5bfe:	d1fc      	bne.n	5bfa <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
    5c00:	4653      	mov	r3, sl
    5c02:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    5c04:	2210      	movs	r2, #16
    5c06:	68a3      	ldr	r3, [r4, #8]
    5c08:	421a      	tst	r2, r3
    5c0a:	d1fc      	bne.n	5c06 <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
    5c0c:	682b      	ldr	r3, [r5, #0]
    5c0e:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    5c10:	4a18      	ldr	r2, [pc, #96]	; (5c74 <tcc_init+0x404>)
    5c12:	68a3      	ldr	r3, [r4, #8]
    5c14:	4213      	tst	r3, r2
    5c16:	d1fc      	bne.n	5c12 <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
    5c18:	686b      	ldr	r3, [r5, #4]
    5c1a:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    5c1c:	9805      	ldr	r0, [sp, #20]
    5c1e:	2800      	cmp	r0, #0
    5c20:	dd22      	ble.n	5c68 <tcc_init+0x3f8>
    5c22:	351c      	adds	r5, #28
    5c24:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    5c26:	4e14      	ldr	r6, [pc, #80]	; (5c78 <tcc_init+0x408>)
    5c28:	0032      	movs	r2, r6
    5c2a:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    5c2c:	68a3      	ldr	r3, [r4, #8]
    5c2e:	421a      	tst	r2, r3
    5c30:	d1fc      	bne.n	5c2c <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
    5c32:	cd04      	ldmia	r5!, {r2}
    5c34:	000b      	movs	r3, r1
    5c36:	3310      	adds	r3, #16
    5c38:	009b      	lsls	r3, r3, #2
    5c3a:	18e3      	adds	r3, r4, r3
    5c3c:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    5c3e:	3101      	adds	r1, #1
    5c40:	4288      	cmp	r0, r1
    5c42:	dcf1      	bgt.n	5c28 <tcc_init+0x3b8>
	return STATUS_OK;
    5c44:	2000      	movs	r0, #0
    5c46:	e62d      	b.n	58a4 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
    5c48:	2017      	movs	r0, #23
    5c4a:	e62b      	b.n	58a4 <tcc_init+0x34>
    5c4c:	2017      	movs	r0, #23
    5c4e:	e629      	b.n	58a4 <tcc_init+0x34>
    5c50:	2017      	movs	r0, #23
    5c52:	e627      	b.n	58a4 <tcc_init+0x34>
    5c54:	2017      	movs	r0, #23
    5c56:	e625      	b.n	58a4 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    5c58:	2017      	movs	r0, #23
    5c5a:	e623      	b.n	58a4 <tcc_init+0x34>
			if (i >= ow_num) {
    5c5c:	2017      	movs	r0, #23
    5c5e:	e621      	b.n	58a4 <tcc_init+0x34>
			if (i >= ow_num) {
    5c60:	2017      	movs	r0, #23
    5c62:	e61f      	b.n	58a4 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    5c64:	2017      	movs	r0, #23
    5c66:	e61d      	b.n	58a4 <tcc_init+0x34>
	return STATUS_OK;
    5c68:	2000      	movs	r0, #0
    5c6a:	e61b      	b.n	58a4 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    5c6c:	2017      	movs	r0, #23
    5c6e:	e619      	b.n	58a4 <tcc_init+0x34>
    5c70:	00020040 	.word	0x00020040
    5c74:	00040080 	.word	0x00040080
    5c78:	00080100 	.word	0x00080100

00005c7c <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    5c7c:	0092      	lsls	r2, r2, #2
    5c7e:	1883      	adds	r3, r0, r2
    5c80:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    5c82:	4b03      	ldr	r3, [pc, #12]	; (5c90 <tcc_register_callback+0x14>)
    5c84:	58d3      	ldr	r3, [r2, r3]
    5c86:	6b42      	ldr	r2, [r0, #52]	; 0x34
    5c88:	4313      	orrs	r3, r2
    5c8a:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
    5c8c:	2000      	movs	r0, #0
    5c8e:	4770      	bx	lr
    5c90:	0000b810 	.word	0x0000b810

00005c94 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    5c94:	b570      	push	{r4, r5, r6, lr}
    5c96:	0004      	movs	r4, r0
    5c98:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    5c9a:	6800      	ldr	r0, [r0, #0]
    5c9c:	4b09      	ldr	r3, [pc, #36]	; (5cc4 <tcc_enable_callback+0x30>)
    5c9e:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    5ca0:	4b09      	ldr	r3, [pc, #36]	; (5cc8 <tcc_enable_callback+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5ca2:	5c1b      	ldrb	r3, [r3, r0]
    5ca4:	221f      	movs	r2, #31
    5ca6:	401a      	ands	r2, r3
    5ca8:	2301      	movs	r3, #1
    5caa:	4093      	lsls	r3, r2
    5cac:	4a07      	ldr	r2, [pc, #28]	; (5ccc <tcc_enable_callback+0x38>)
    5cae:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    5cb0:	00ad      	lsls	r5, r5, #2
    5cb2:	4b07      	ldr	r3, [pc, #28]	; (5cd0 <tcc_enable_callback+0x3c>)
    5cb4:	58ea      	ldr	r2, [r5, r3]
    5cb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5cb8:	4313      	orrs	r3, r2
    5cba:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    5cbc:	6823      	ldr	r3, [r4, #0]
    5cbe:	629a      	str	r2, [r3, #40]	; 0x28
}
    5cc0:	bd70      	pop	{r4, r5, r6, pc}
    5cc2:	46c0      	nop			; (mov r8, r8)
    5cc4:	000056f1 	.word	0x000056f1
    5cc8:	0000b840 	.word	0x0000b840
    5ccc:	e000e100 	.word	0xe000e100
    5cd0:	0000b810 	.word	0x0000b810

00005cd4 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    5cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5cd6:	46c6      	mov	lr, r8
    5cd8:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    5cda:	0080      	lsls	r0, r0, #2
    5cdc:	4b0e      	ldr	r3, [pc, #56]	; (5d18 <_tcc_interrupt_handler+0x44>)
    5cde:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    5ce0:	683b      	ldr	r3, [r7, #0]
    5ce2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    5ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5ce6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    5ce8:	4013      	ands	r3, r2
    5cea:	401e      	ands	r6, r3
    5cec:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    5cee:	4b0b      	ldr	r3, [pc, #44]	; (5d1c <_tcc_interrupt_handler+0x48>)
    5cf0:	4698      	mov	r8, r3
    5cf2:	e002      	b.n	5cfa <_tcc_interrupt_handler+0x26>
    5cf4:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    5cf6:	2c30      	cmp	r4, #48	; 0x30
    5cf8:	d00a      	beq.n	5d10 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    5cfa:	4643      	mov	r3, r8
    5cfc:	58e5      	ldr	r5, [r4, r3]
    5cfe:	4235      	tst	r5, r6
    5d00:	d0f8      	beq.n	5cf4 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    5d02:	193b      	adds	r3, r7, r4
    5d04:	685b      	ldr	r3, [r3, #4]
    5d06:	0038      	movs	r0, r7
    5d08:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    5d0a:	683b      	ldr	r3, [r7, #0]
    5d0c:	62dd      	str	r5, [r3, #44]	; 0x2c
    5d0e:	e7f1      	b.n	5cf4 <_tcc_interrupt_handler+0x20>
		}
	}
}
    5d10:	bc04      	pop	{r2}
    5d12:	4690      	mov	r8, r2
    5d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d16:	46c0      	nop			; (mov r8, r8)
    5d18:	20000400 	.word	0x20000400
    5d1c:	0000b810 	.word	0x0000b810

00005d20 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    5d20:	b510      	push	{r4, lr}
    5d22:	2000      	movs	r0, #0
    5d24:	4b01      	ldr	r3, [pc, #4]	; (5d2c <TCC0_Handler+0xc>)
    5d26:	4798      	blx	r3
    5d28:	bd10      	pop	{r4, pc}
    5d2a:	46c0      	nop			; (mov r8, r8)
    5d2c:	00005cd5 	.word	0x00005cd5

00005d30 <TCC1_Handler>:
    5d30:	b510      	push	{r4, lr}
    5d32:	2001      	movs	r0, #1
    5d34:	4b01      	ldr	r3, [pc, #4]	; (5d3c <TCC1_Handler+0xc>)
    5d36:	4798      	blx	r3
    5d38:	bd10      	pop	{r4, pc}
    5d3a:	46c0      	nop			; (mov r8, r8)
    5d3c:	00005cd5 	.word	0x00005cd5

00005d40 <TCC2_Handler>:
    5d40:	b510      	push	{r4, lr}
    5d42:	2002      	movs	r0, #2
    5d44:	4b01      	ldr	r3, [pc, #4]	; (5d4c <TCC2_Handler+0xc>)
    5d46:	4798      	blx	r3
    5d48:	bd10      	pop	{r4, pc}
    5d4a:	46c0      	nop			; (mov r8, r8)
    5d4c:	00005cd5 	.word	0x00005cd5

00005d50 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    5d50:	e7fe      	b.n	5d50 <Dummy_Handler>
	...

00005d54 <Reset_Handler>:
{
    5d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    5d56:	4a2a      	ldr	r2, [pc, #168]	; (5e00 <Reset_Handler+0xac>)
    5d58:	4b2a      	ldr	r3, [pc, #168]	; (5e04 <Reset_Handler+0xb0>)
    5d5a:	429a      	cmp	r2, r3
    5d5c:	d011      	beq.n	5d82 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    5d5e:	001a      	movs	r2, r3
    5d60:	4b29      	ldr	r3, [pc, #164]	; (5e08 <Reset_Handler+0xb4>)
    5d62:	429a      	cmp	r2, r3
    5d64:	d20d      	bcs.n	5d82 <Reset_Handler+0x2e>
    5d66:	4a29      	ldr	r2, [pc, #164]	; (5e0c <Reset_Handler+0xb8>)
    5d68:	3303      	adds	r3, #3
    5d6a:	1a9b      	subs	r3, r3, r2
    5d6c:	089b      	lsrs	r3, r3, #2
    5d6e:	3301      	adds	r3, #1
    5d70:	009b      	lsls	r3, r3, #2
    5d72:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    5d74:	4823      	ldr	r0, [pc, #140]	; (5e04 <Reset_Handler+0xb0>)
    5d76:	4922      	ldr	r1, [pc, #136]	; (5e00 <Reset_Handler+0xac>)
    5d78:	588c      	ldr	r4, [r1, r2]
    5d7a:	5084      	str	r4, [r0, r2]
    5d7c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    5d7e:	429a      	cmp	r2, r3
    5d80:	d1fa      	bne.n	5d78 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    5d82:	4a23      	ldr	r2, [pc, #140]	; (5e10 <Reset_Handler+0xbc>)
    5d84:	4b23      	ldr	r3, [pc, #140]	; (5e14 <Reset_Handler+0xc0>)
    5d86:	429a      	cmp	r2, r3
    5d88:	d20a      	bcs.n	5da0 <Reset_Handler+0x4c>
    5d8a:	43d3      	mvns	r3, r2
    5d8c:	4921      	ldr	r1, [pc, #132]	; (5e14 <Reset_Handler+0xc0>)
    5d8e:	185b      	adds	r3, r3, r1
    5d90:	2103      	movs	r1, #3
    5d92:	438b      	bics	r3, r1
    5d94:	3304      	adds	r3, #4
    5d96:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    5d98:	2100      	movs	r1, #0
    5d9a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    5d9c:	4293      	cmp	r3, r2
    5d9e:	d1fc      	bne.n	5d9a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    5da0:	4a1d      	ldr	r2, [pc, #116]	; (5e18 <Reset_Handler+0xc4>)
    5da2:	21ff      	movs	r1, #255	; 0xff
    5da4:	4b1d      	ldr	r3, [pc, #116]	; (5e1c <Reset_Handler+0xc8>)
    5da6:	438b      	bics	r3, r1
    5da8:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    5daa:	39fd      	subs	r1, #253	; 0xfd
    5dac:	2390      	movs	r3, #144	; 0x90
    5dae:	005b      	lsls	r3, r3, #1
    5db0:	4a1b      	ldr	r2, [pc, #108]	; (5e20 <Reset_Handler+0xcc>)
    5db2:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    5db4:	4a1b      	ldr	r2, [pc, #108]	; (5e24 <Reset_Handler+0xd0>)
    5db6:	78d3      	ldrb	r3, [r2, #3]
    5db8:	2503      	movs	r5, #3
    5dba:	43ab      	bics	r3, r5
    5dbc:	2402      	movs	r4, #2
    5dbe:	4323      	orrs	r3, r4
    5dc0:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    5dc2:	78d3      	ldrb	r3, [r2, #3]
    5dc4:	270c      	movs	r7, #12
    5dc6:	43bb      	bics	r3, r7
    5dc8:	2608      	movs	r6, #8
    5dca:	4333      	orrs	r3, r6
    5dcc:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    5dce:	4b16      	ldr	r3, [pc, #88]	; (5e28 <Reset_Handler+0xd4>)
    5dd0:	7b98      	ldrb	r0, [r3, #14]
    5dd2:	2230      	movs	r2, #48	; 0x30
    5dd4:	4390      	bics	r0, r2
    5dd6:	2220      	movs	r2, #32
    5dd8:	4310      	orrs	r0, r2
    5dda:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    5ddc:	7b99      	ldrb	r1, [r3, #14]
    5dde:	43b9      	bics	r1, r7
    5de0:	4331      	orrs	r1, r6
    5de2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    5de4:	7b9a      	ldrb	r2, [r3, #14]
    5de6:	43aa      	bics	r2, r5
    5de8:	4322      	orrs	r2, r4
    5dea:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    5dec:	4a0f      	ldr	r2, [pc, #60]	; (5e2c <Reset_Handler+0xd8>)
    5dee:	6853      	ldr	r3, [r2, #4]
    5df0:	2180      	movs	r1, #128	; 0x80
    5df2:	430b      	orrs	r3, r1
    5df4:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    5df6:	4b0e      	ldr	r3, [pc, #56]	; (5e30 <Reset_Handler+0xdc>)
    5df8:	4798      	blx	r3
        main();
    5dfa:	4b0e      	ldr	r3, [pc, #56]	; (5e34 <Reset_Handler+0xe0>)
    5dfc:	4798      	blx	r3
    5dfe:	e7fe      	b.n	5dfe <Reset_Handler+0xaa>
    5e00:	0000bd60 	.word	0x0000bd60
    5e04:	20000000 	.word	0x20000000
    5e08:	20000070 	.word	0x20000070
    5e0c:	20000004 	.word	0x20000004
    5e10:	20000070 	.word	0x20000070
    5e14:	200004d0 	.word	0x200004d0
    5e18:	e000ed00 	.word	0xe000ed00
    5e1c:	00000000 	.word	0x00000000
    5e20:	41007000 	.word	0x41007000
    5e24:	41005000 	.word	0x41005000
    5e28:	41004800 	.word	0x41004800
    5e2c:	41004000 	.word	0x41004000
    5e30:	000093f1 	.word	0x000093f1
    5e34:	0000642d 	.word	0x0000642d

00005e38 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    5e38:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e3a:	46c6      	mov	lr, r8
    5e3c:	b500      	push	{lr}
    5e3e:	000c      	movs	r4, r1
    5e40:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    5e42:	2800      	cmp	r0, #0
    5e44:	d10f      	bne.n	5e66 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    5e46:	2a00      	cmp	r2, #0
    5e48:	dd11      	ble.n	5e6e <_read+0x36>
    5e4a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    5e4c:	4e09      	ldr	r6, [pc, #36]	; (5e74 <_read+0x3c>)
    5e4e:	4d0a      	ldr	r5, [pc, #40]	; (5e78 <_read+0x40>)
    5e50:	6830      	ldr	r0, [r6, #0]
    5e52:	0021      	movs	r1, r4
    5e54:	682b      	ldr	r3, [r5, #0]
    5e56:	4798      	blx	r3
		ptr++;
    5e58:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    5e5a:	42bc      	cmp	r4, r7
    5e5c:	d1f8      	bne.n	5e50 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    5e5e:	4640      	mov	r0, r8
    5e60:	bc04      	pop	{r2}
    5e62:	4690      	mov	r8, r2
    5e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    5e66:	2301      	movs	r3, #1
    5e68:	425b      	negs	r3, r3
    5e6a:	4698      	mov	r8, r3
    5e6c:	e7f7      	b.n	5e5e <_read+0x26>
	for (; len > 0; --len) {
    5e6e:	4680      	mov	r8, r0
    5e70:	e7f5      	b.n	5e5e <_read+0x26>
    5e72:	46c0      	nop			; (mov r8, r8)
    5e74:	20000414 	.word	0x20000414
    5e78:	2000040c 	.word	0x2000040c

00005e7c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    5e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e7e:	46c6      	mov	lr, r8
    5e80:	b500      	push	{lr}
    5e82:	000e      	movs	r6, r1
    5e84:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    5e86:	3801      	subs	r0, #1
    5e88:	2802      	cmp	r0, #2
    5e8a:	d810      	bhi.n	5eae <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    5e8c:	2a00      	cmp	r2, #0
    5e8e:	d011      	beq.n	5eb4 <_write+0x38>
    5e90:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    5e92:	4b0c      	ldr	r3, [pc, #48]	; (5ec4 <_write+0x48>)
    5e94:	4698      	mov	r8, r3
    5e96:	4f0c      	ldr	r7, [pc, #48]	; (5ec8 <_write+0x4c>)
    5e98:	4643      	mov	r3, r8
    5e9a:	6818      	ldr	r0, [r3, #0]
    5e9c:	5d31      	ldrb	r1, [r6, r4]
    5e9e:	683b      	ldr	r3, [r7, #0]
    5ea0:	4798      	blx	r3
    5ea2:	2800      	cmp	r0, #0
    5ea4:	db08      	blt.n	5eb8 <_write+0x3c>
			return -1;
		}
		++nChars;
    5ea6:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    5ea8:	42a5      	cmp	r5, r4
    5eaa:	d1f5      	bne.n	5e98 <_write+0x1c>
    5eac:	e006      	b.n	5ebc <_write+0x40>
		return -1;
    5eae:	2401      	movs	r4, #1
    5eb0:	4264      	negs	r4, r4
    5eb2:	e003      	b.n	5ebc <_write+0x40>
	for (; len != 0; --len) {
    5eb4:	0014      	movs	r4, r2
    5eb6:	e001      	b.n	5ebc <_write+0x40>
			return -1;
    5eb8:	2401      	movs	r4, #1
    5eba:	4264      	negs	r4, r4
	}
	return nChars;
}
    5ebc:	0020      	movs	r0, r4
    5ebe:	bc04      	pop	{r2}
    5ec0:	4690      	mov	r8, r2
    5ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ec4:	20000414 	.word	0x20000414
    5ec8:	20000410 	.word	0x20000410

00005ecc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    5ecc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    5ece:	4a06      	ldr	r2, [pc, #24]	; (5ee8 <_sbrk+0x1c>)
    5ed0:	6812      	ldr	r2, [r2, #0]
    5ed2:	2a00      	cmp	r2, #0
    5ed4:	d004      	beq.n	5ee0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    5ed6:	4a04      	ldr	r2, [pc, #16]	; (5ee8 <_sbrk+0x1c>)
    5ed8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    5eda:	18c3      	adds	r3, r0, r3
    5edc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    5ede:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    5ee0:	4902      	ldr	r1, [pc, #8]	; (5eec <_sbrk+0x20>)
    5ee2:	4a01      	ldr	r2, [pc, #4]	; (5ee8 <_sbrk+0x1c>)
    5ee4:	6011      	str	r1, [r2, #0]
    5ee6:	e7f6      	b.n	5ed6 <_sbrk+0xa>
    5ee8:	200000e0 	.word	0x200000e0
    5eec:	200024d0 	.word	0x200024d0

00005ef0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    5ef0:	2001      	movs	r0, #1
    5ef2:	4240      	negs	r0, r0
    5ef4:	4770      	bx	lr

00005ef6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    5ef6:	2380      	movs	r3, #128	; 0x80
    5ef8:	019b      	lsls	r3, r3, #6
    5efa:	604b      	str	r3, [r1, #4]

	return 0;
}
    5efc:	2000      	movs	r0, #0
    5efe:	4770      	bx	lr

00005f00 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    5f00:	2001      	movs	r0, #1
    5f02:	4770      	bx	lr

00005f04 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    5f04:	2000      	movs	r0, #0
    5f06:	4770      	bx	lr

00005f08 <configure_i2c_master>:

/* used to init I2C software module. */
struct i2c_master_module i2c_master_instance;

void configure_i2c_master(void)
{
    5f08:	b530      	push	{r4, r5, lr}
    5f0a:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    5f0c:	aa01      	add	r2, sp, #4
    5f0e:	2364      	movs	r3, #100	; 0x64
    5f10:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    5f12:	4b20      	ldr	r3, [pc, #128]	; (5f94 <configure_i2c_master+0x8c>)
    5f14:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    5f16:	2300      	movs	r3, #0
    5f18:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    5f1a:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    5f1c:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    5f1e:	2180      	movs	r1, #128	; 0x80
    5f20:	0389      	lsls	r1, r1, #14
    5f22:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    5f24:	2101      	movs	r1, #1
    5f26:	4249      	negs	r1, r1
    5f28:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    5f2a:	61d3      	str	r3, [r2, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    5f2c:	6213      	str	r3, [r2, #32]
	config->scl_low_timeout  = false;
    5f2e:	3125      	adds	r1, #37	; 0x25
    5f30:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    5f32:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    5f34:	3108      	adds	r1, #8
    5f36:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    5f38:	3101      	adds	r1, #1
    5f3a:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    5f3c:	3101      	adds	r1, #1
    5f3e:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    5f40:	33d7      	adds	r3, #215	; 0xd7
    5f42:	8613      	strh	r3, [r2, #48]	; 0x30
    /* initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);

    /* change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 10000;
    5f44:	4b14      	ldr	r3, [pc, #80]	; (5f98 <configure_i2c_master+0x90>)
    5f46:	82d3      	strh	r3, [r2, #22]

    /* initialize and enable device with config. */
    i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master);
    5f48:	4c14      	ldr	r4, [pc, #80]	; (5f9c <configure_i2c_master+0x94>)
    5f4a:	4915      	ldr	r1, [pc, #84]	; (5fa0 <configure_i2c_master+0x98>)
    5f4c:	0020      	movs	r0, r4
    5f4e:	4b15      	ldr	r3, [pc, #84]	; (5fa4 <configure_i2c_master+0x9c>)
    5f50:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5f52:	6824      	ldr	r4, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    5f54:	2207      	movs	r2, #7
    5f56:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    5f58:	421a      	tst	r2, r3
    5f5a:	d1fc      	bne.n	5f56 <configure_i2c_master+0x4e>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    5f5c:	6823      	ldr	r3, [r4, #0]
    5f5e:	2202      	movs	r2, #2
    5f60:	4313      	orrs	r3, r2
    5f62:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    5f64:	4d0d      	ldr	r5, [pc, #52]	; (5f9c <configure_i2c_master+0x94>)
    5f66:	6828      	ldr	r0, [r5, #0]
    5f68:	4b0f      	ldr	r3, [pc, #60]	; (5fa8 <configure_i2c_master+0xa0>)
    5f6a:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5f6c:	231f      	movs	r3, #31
    5f6e:	4018      	ands	r0, r3
    5f70:	3b1e      	subs	r3, #30
    5f72:	4083      	lsls	r3, r0
    5f74:	4a0d      	ldr	r2, [pc, #52]	; (5fac <configure_i2c_master+0xa4>)
    5f76:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    5f78:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    5f7a:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    5f7c:	2110      	movs	r1, #16
    5f7e:	8b62      	ldrh	r2, [r4, #26]
    5f80:	420a      	tst	r2, r1
    5f82:	d104      	bne.n	5f8e <configure_i2c_master+0x86>
		timeout_counter++;
    5f84:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    5f86:	4283      	cmp	r3, r0
    5f88:	d3f9      	bcc.n	5f7e <configure_i2c_master+0x76>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    5f8a:	2310      	movs	r3, #16
    5f8c:	8363      	strh	r3, [r4, #26]
    i2c_master_enable(&i2c_master_instance);
}
    5f8e:	b00f      	add	sp, #60	; 0x3c
    5f90:	bd30      	pop	{r4, r5, pc}
    5f92:	46c0      	nop			; (mov r8, r8)
    5f94:	00000d48 	.word	0x00000d48
    5f98:	00002710 	.word	0x00002710
    5f9c:	2000044c 	.word	0x2000044c
    5fa0:	42001000 	.word	0x42001000
    5fa4:	0000018d 	.word	0x0000018d
    5fa8:	0000449d 	.word	0x0000449d
    5fac:	e000e100 	.word	0xe000e100

00005fb0 <shtc1_demo_init>:




void shtc1_demo_init()
{
    5fb0:	b510      	push	{r4, lr}
    //delay_init();
    //configure_port_pins();
    //configure_usart();
    configure_i2c_master();
    5fb2:	4b01      	ldr	r3, [pc, #4]	; (5fb8 <shtc1_demo_init+0x8>)
    5fb4:	4798      	blx	r3
}
    5fb6:	bd10      	pop	{r4, pc}
    5fb8:	00005f09 	.word	0x00005f09

00005fbc <stream_writer_init>:
#include <string.h>
#include <asf.h>

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
    5fbc:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
    5fbe:	6101      	str	r1, [r0, #16]
	writer->written = 0;
    5fc0:	2200      	movs	r2, #0
    5fc2:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
    5fc4:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
    5fc6:	9b00      	ldr	r3, [sp, #0]
    5fc8:	60c3      	str	r3, [r0, #12]
}
    5fca:	4770      	bx	lr

00005fcc <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
    5fcc:	b510      	push	{r4, lr}
    5fce:	0004      	movs	r4, r0
	if(writer->written > 0) {
    5fd0:	6842      	ldr	r2, [r0, #4]
    5fd2:	2a00      	cmp	r2, #0
    5fd4:	d100      	bne.n	5fd8 <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
    5fd6:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    5fd8:	6901      	ldr	r1, [r0, #16]
    5fda:	68c0      	ldr	r0, [r0, #12]
    5fdc:	68a3      	ldr	r3, [r4, #8]
    5fde:	4798      	blx	r3
		writer->written = 0;
    5fe0:	2300      	movs	r3, #0
    5fe2:	6063      	str	r3, [r4, #4]
}
    5fe4:	e7f7      	b.n	5fd6 <stream_writer_send_remain+0xa>
	...

00005fe8 <stream_writer_send_8>:
{
    5fe8:	b570      	push	{r4, r5, r6, lr}
    5fea:	0004      	movs	r4, r0
    5fec:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
    5fee:	6803      	ldr	r3, [r0, #0]
    5ff0:	6842      	ldr	r2, [r0, #4]
    5ff2:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
    5ff4:	2b00      	cmp	r3, #0
    5ff6:	dd05      	ble.n	6004 <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
    5ff8:	6922      	ldr	r2, [r4, #16]
    5ffa:	6863      	ldr	r3, [r4, #4]
    5ffc:	1c59      	adds	r1, r3, #1
    5ffe:	6061      	str	r1, [r4, #4]
    6000:	54d5      	strb	r5, [r2, r3]
}
    6002:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
    6004:	4b01      	ldr	r3, [pc, #4]	; (600c <stream_writer_send_8+0x24>)
    6006:	4798      	blx	r3
    6008:	e7f6      	b.n	5ff8 <stream_writer_send_8+0x10>
    600a:	46c0      	nop			; (mov r8, r8)
    600c:	00005fcd 	.word	0x00005fcd

00006010 <stream_writer_send_16BE>:
{
    6010:	b570      	push	{r4, r5, r6, lr}
    6012:	0006      	movs	r6, r0
    6014:	000c      	movs	r4, r1
	stream_writer_send_8(writer, (value >> 8) & 0xFF);
    6016:	1209      	asrs	r1, r1, #8
    6018:	4d02      	ldr	r5, [pc, #8]	; (6024 <stream_writer_send_16BE+0x14>)
    601a:	47a8      	blx	r5
	stream_writer_send_8(writer, value & 0xFF);
    601c:	b261      	sxtb	r1, r4
    601e:	0030      	movs	r0, r6
    6020:	47a8      	blx	r5
}
    6022:	bd70      	pop	{r4, r5, r6, pc}
    6024:	00005fe9 	.word	0x00005fe9

00006028 <stream_writer_send_buffer>:
{
    6028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    602a:	0006      	movs	r6, r0
    602c:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
    602e:	2a00      	cmp	r2, #0
    6030:	d008      	beq.n	6044 <stream_writer_send_buffer+0x1c>
    6032:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
    6034:	4f04      	ldr	r7, [pc, #16]	; (6048 <stream_writer_send_buffer+0x20>)
    6036:	2100      	movs	r1, #0
    6038:	5661      	ldrsb	r1, [r4, r1]
    603a:	0030      	movs	r0, r6
    603c:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
    603e:	3401      	adds	r4, #1
    6040:	42a5      	cmp	r5, r4
    6042:	d1f8      	bne.n	6036 <stream_writer_send_buffer+0xe>
}
    6044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6046:	46c0      	nop			; (mov r8, r8)
    6048:	00005fe9 	.word	0x00005fe9

0000604c <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
    604c:	4a02      	ldr	r2, [pc, #8]	; (6058 <sw_timer_tcc_callback+0xc>)
    604e:	6813      	ldr	r3, [r2, #0]
    6050:	3301      	adds	r3, #1
    6052:	6013      	str	r3, [r2, #0]
}
    6054:	4770      	bx	lr
    6056:	46c0      	nop			; (mov r8, r8)
    6058:	200000e4 	.word	0x200000e4

0000605c <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
    605c:	2364      	movs	r3, #100	; 0x64
    605e:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
    6060:	2300      	movs	r3, #0
    6062:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
    6064:	7043      	strb	r3, [r0, #1]
}
    6066:	4770      	bx	lr

00006068 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    6068:	b5f0      	push	{r4, r5, r6, r7, lr}
    606a:	46c6      	mov	lr, r8
    606c:	b500      	push	{lr}
    606e:	b0ac      	sub	sp, #176	; 0xb0
    6070:	000d      	movs	r5, r1
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    6072:	466e      	mov	r6, sp
    6074:	4b1d      	ldr	r3, [pc, #116]	; (60ec <sw_timer_init+0x84>)
    6076:	466a      	mov	r2, sp
    6078:	cb92      	ldmia	r3!, {r1, r4, r7}
    607a:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    607c:	886b      	ldrh	r3, [r5, #2]
    607e:	6543      	str	r3, [r0, #84]	; 0x54

	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    6080:	3014      	adds	r0, #20
    6082:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    6084:	782b      	ldrb	r3, [r5, #0]
    6086:	009b      	lsls	r3, r3, #2
    6088:	5999      	ldr	r1, [r3, r6]
    608a:	0017      	movs	r7, r2
    608c:	0010      	movs	r0, r2
    608e:	4b18      	ldr	r3, [pc, #96]	; (60f0 <sw_timer_init+0x88>)
    6090:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    6092:	2000      	movs	r0, #0
    6094:	4b17      	ldr	r3, [pc, #92]	; (60f4 <sw_timer_init+0x8c>)
    6096:	4798      	blx	r3
    6098:	4b17      	ldr	r3, [pc, #92]	; (60f8 <sw_timer_init+0x90>)
    609a:	7a1b      	ldrb	r3, [r3, #8]
    609c:	b2db      	uxtb	r3, r3
    609e:	40d8      	lsrs	r0, r3
    60a0:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    60a2:	8869      	ldrh	r1, [r5, #2]
    60a4:	20fa      	movs	r0, #250	; 0xfa
    60a6:	0200      	lsls	r0, r0, #8
    60a8:	4b14      	ldr	r3, [pc, #80]	; (60fc <sw_timer_init+0x94>)
    60aa:	4798      	blx	r3
    60ac:	0001      	movs	r1, r0
    60ae:	4640      	mov	r0, r8
    60b0:	4b13      	ldr	r3, [pc, #76]	; (6100 <sw_timer_init+0x98>)
    60b2:	4798      	blx	r3
    60b4:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    60b6:	2305      	movs	r3, #5
    60b8:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    60ba:	782b      	ldrb	r3, [r5, #0]
    60bc:	009b      	lsls	r3, r3, #2
    60be:	5999      	ldr	r1, [r3, r6]
    60c0:	003a      	movs	r2, r7
    60c2:	0020      	movs	r0, r4
    60c4:	4b0f      	ldr	r3, [pc, #60]	; (6104 <sw_timer_init+0x9c>)
    60c6:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    60c8:	786a      	ldrb	r2, [r5, #1]
    60ca:	3208      	adds	r2, #8
    60cc:	b2d2      	uxtb	r2, r2
    60ce:	490e      	ldr	r1, [pc, #56]	; (6108 <sw_timer_init+0xa0>)
    60d0:	0020      	movs	r0, r4
    60d2:	4b0e      	ldr	r3, [pc, #56]	; (610c <sw_timer_init+0xa4>)
    60d4:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    60d6:	7869      	ldrb	r1, [r5, #1]
    60d8:	3108      	adds	r1, #8
    60da:	b2c9      	uxtb	r1, r1
    60dc:	0020      	movs	r0, r4
    60de:	4b0c      	ldr	r3, [pc, #48]	; (6110 <sw_timer_init+0xa8>)
    60e0:	4798      	blx	r3
}
    60e2:	b02c      	add	sp, #176	; 0xb0
    60e4:	bc04      	pop	{r2}
    60e6:	4690      	mov	r8, r2
    60e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    60ea:	46c0      	nop			; (mov r8, r8)
    60ec:	0000b844 	.word	0x0000b844
    60f0:	00005725 	.word	0x00005725
    60f4:	00005481 	.word	0x00005481
    60f8:	40000400 	.word	0x40000400
    60fc:	00007529 	.word	0x00007529
    6100:	00007415 	.word	0x00007415
    6104:	00005871 	.word	0x00005871
    6108:	0000604d 	.word	0x0000604d
    610c:	00005c7d 	.word	0x00005c7d
    6110:	00005c95 	.word	0x00005c95

00006114 <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    6114:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    6116:	2102      	movs	r1, #2
    6118:	6893      	ldr	r3, [r2, #8]
    611a:	4219      	tst	r1, r3
    611c:	d1fc      	bne.n	6118 <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    611e:	6813      	ldr	r3, [r2, #0]
    6120:	2102      	movs	r1, #2
    6122:	430b      	orrs	r3, r1
    6124:	6013      	str	r3, [r2, #0]
	Assert(module_inst);

	tcc_module = &module_inst->tcc_inst;

	tcc_enable(tcc_module);
}
    6126:	4770      	bx	lr

00006128 <sw_timer_register_callback>:
	tcc_disable(tcc_module);
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
	sw_timer_callback_t callback, void *context, uint32_t period)
{
    6128:	b570      	push	{r4, r5, r6, lr}
    612a:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
    612c:	7805      	ldrb	r5, [r0, #0]
    612e:	07e8      	lsls	r0, r5, #31
    6130:	d502      	bpl.n	6138 <sw_timer_register_callback+0x10>
			handler->used = 1;
			return index;
		}
	}

	return -1;
    6132:	2001      	movs	r0, #1
    6134:	4240      	negs	r0, r0
}
    6136:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
    6138:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
    613a:	0029      	movs	r1, r5
    613c:	2002      	movs	r0, #2
    613e:	4381      	bics	r1, r0
    6140:	7021      	strb	r1, [r4, #0]
			handler->context = context;
    6142:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
    6144:	6d61      	ldr	r1, [r4, #84]	; 0x54
    6146:	0018      	movs	r0, r3
    6148:	4b04      	ldr	r3, [pc, #16]	; (615c <sw_timer_register_callback+0x34>)
    614a:	4798      	blx	r3
    614c:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
    614e:	7823      	ldrb	r3, [r4, #0]
    6150:	2201      	movs	r2, #1
    6152:	4313      	orrs	r3, r2
    6154:	7023      	strb	r3, [r4, #0]
			return index;
    6156:	2000      	movs	r0, #0
    6158:	e7ed      	b.n	6136 <sw_timer_register_callback+0xe>
    615a:	46c0      	nop			; (mov r8, r8)
    615c:	00007415 	.word	0x00007415

00006160 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    6160:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
    6162:	008b      	lsls	r3, r1, #2
    6164:	185d      	adds	r5, r3, r1
    6166:	00ad      	lsls	r5, r5, #2
    6168:	5c29      	ldrb	r1, [r5, r0]
    616a:	2602      	movs	r6, #2
    616c:	4331      	orrs	r1, r6
    616e:	5429      	strb	r1, [r5, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    6170:	1944      	adds	r4, r0, r5
    6172:	6d41      	ldr	r1, [r0, #84]	; 0x54
    6174:	0010      	movs	r0, r2
    6176:	4b03      	ldr	r3, [pc, #12]	; (6184 <sw_timer_enable_callback+0x24>)
    6178:	4798      	blx	r3
    617a:	4b03      	ldr	r3, [pc, #12]	; (6188 <sw_timer_enable_callback+0x28>)
    617c:	681b      	ldr	r3, [r3, #0]
    617e:	18c0      	adds	r0, r0, r3
    6180:	6120      	str	r0, [r4, #16]
}
    6182:	bd70      	pop	{r4, r5, r6, pc}
    6184:	00007415 	.word	0x00007415
    6188:	200000e4 	.word	0x200000e4

0000618c <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
    618c:	008b      	lsls	r3, r1, #2
    618e:	1859      	adds	r1, r3, r1
    6190:	0089      	lsls	r1, r1, #2
    6192:	5c0b      	ldrb	r3, [r1, r0]
    6194:	2202      	movs	r2, #2
    6196:	4393      	bics	r3, r2
    6198:	540b      	strb	r3, [r1, r0]
}
    619a:	4770      	bx	lr

0000619c <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    619c:	b570      	push	{r4, r5, r6, lr}
    619e:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    61a0:	7803      	ldrb	r3, [r0, #0]
    61a2:	07db      	lsls	r3, r3, #31
    61a4:	d507      	bpl.n	61b6 <sw_timer_task+0x1a>
    61a6:	7803      	ldrb	r3, [r0, #0]
    61a8:	079b      	lsls	r3, r3, #30
    61aa:	d504      	bpl.n	61b6 <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    61ac:	4b11      	ldr	r3, [pc, #68]	; (61f4 <sw_timer_task+0x58>)
    61ae:	681b      	ldr	r3, [r3, #0]
    61b0:	6902      	ldr	r2, [r0, #16]
    61b2:	1ad3      	subs	r3, r2, r3
    61b4:	d400      	bmi.n	61b8 <sw_timer_task+0x1c>
				handler->busy = 0;
			}
		}
	}

}
    61b6:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    61b8:	7803      	ldrb	r3, [r0, #0]
    61ba:	075b      	lsls	r3, r3, #29
    61bc:	d4fb      	bmi.n	61b6 <sw_timer_task+0x1a>
				handler->busy = 1;
    61be:	7803      	ldrb	r3, [r0, #0]
    61c0:	2204      	movs	r2, #4
    61c2:	4313      	orrs	r3, r2
    61c4:	7003      	strb	r3, [r0, #0]
				handler->callback(module_inst, index, handler->context, handler->period);
    61c6:	68c3      	ldr	r3, [r0, #12]
    61c8:	6882      	ldr	r2, [r0, #8]
    61ca:	2100      	movs	r1, #0
    61cc:	6845      	ldr	r5, [r0, #4]
    61ce:	47a8      	blx	r5
				if (handler->period > 0) {
    61d0:	68e3      	ldr	r3, [r4, #12]
    61d2:	2b00      	cmp	r3, #0
    61d4:	d008      	beq.n	61e8 <sw_timer_task+0x4c>
					handler->expire_time = sw_timer_tick + handler->period;
    61d6:	4a07      	ldr	r2, [pc, #28]	; (61f4 <sw_timer_task+0x58>)
    61d8:	6812      	ldr	r2, [r2, #0]
    61da:	18d3      	adds	r3, r2, r3
    61dc:	6123      	str	r3, [r4, #16]
				handler->busy = 0;
    61de:	7823      	ldrb	r3, [r4, #0]
    61e0:	2204      	movs	r2, #4
    61e2:	4393      	bics	r3, r2
    61e4:	7023      	strb	r3, [r4, #0]
}
    61e6:	e7e6      	b.n	61b6 <sw_timer_task+0x1a>
					handler->callback_enable = 0;
    61e8:	7823      	ldrb	r3, [r4, #0]
    61ea:	2202      	movs	r2, #2
    61ec:	4393      	bics	r3, r2
    61ee:	7023      	strb	r3, [r4, #0]
    61f0:	e7f5      	b.n	61de <sw_timer_task+0x42>
    61f2:	46c0      	nop			; (mov r8, r8)
    61f4:	200000e4 	.word	0x200000e4

000061f8 <uart_callback>:
 * \param[in] module USART module structure.
 */
static void uart_callback(const struct usart_module *const module)
{
	/* If input string is bigger than buffer size limit, ignore the excess part. */
	if (uart_buffer_written < MAIN_CHAT_BUFFER_SIZE) {
    61f8:	4b03      	ldr	r3, [pc, #12]	; (6208 <uart_callback+0x10>)
    61fa:	681b      	ldr	r3, [r3, #0]
    61fc:	2b3f      	cmp	r3, #63	; 0x3f
    61fe:	dc02      	bgt.n	6206 <uart_callback+0xe>
		uart_buffer[uart_buffer_written++] = uart_ch_buffer & 0xFF;
    6200:	3301      	adds	r3, #1
    6202:	4a01      	ldr	r2, [pc, #4]	; (6208 <uart_callback+0x10>)
    6204:	6013      	str	r3, [r2, #0]
	}
}
    6206:	4770      	bx	lr
    6208:	20000250 	.word	0x20000250

0000620c <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
    620c:	b510      	push	{r4, lr}
	mqtt_socket_resolve_handler(doamin_name, server_ip);
    620e:	4b01      	ldr	r3, [pc, #4]	; (6214 <socket_resolve_handler+0x8>)
    6210:	4798      	blx	r3
}
    6212:	bd10      	pop	{r4, pc}
    6214:	00006909 	.word	0x00006909

00006218 <socket_event_handler>:
{
    6218:	b510      	push	{r4, lr}
	mqtt_socket_event_handler(sock, msg_type, msg_data);
    621a:	4b01      	ldr	r3, [pc, #4]	; (6220 <socket_event_handler+0x8>)
    621c:	4798      	blx	r3
}
    621e:	bd10      	pop	{r4, pc}
    6220:	00007301 	.word	0x00007301

00006224 <wifi_callback>:
{
    6224:	b510      	push	{r4, lr}
    6226:	b082      	sub	sp, #8
	switch (msg_type) {
    6228:	282c      	cmp	r0, #44	; 0x2c
    622a:	d003      	beq.n	6234 <wifi_callback+0x10>
    622c:	2832      	cmp	r0, #50	; 0x32
    622e:	d01c      	beq.n	626a <wifi_callback+0x46>
}
    6230:	b002      	add	sp, #8
    6232:	bd10      	pop	{r4, pc}
		if (msg_wifi_state->u8CurrState == M2M_WIFI_CONNECTED) {
    6234:	780b      	ldrb	r3, [r1, #0]
    6236:	2b01      	cmp	r3, #1
    6238:	d011      	beq.n	625e <wifi_callback+0x3a>
		} else if (msg_wifi_state->u8CurrState == M2M_WIFI_DISCONNECTED) {
    623a:	2b00      	cmp	r3, #0
    623c:	d1f8      	bne.n	6230 <wifi_callback+0xc>
			printf("Wi-Fi disconnected\r\n");
    623e:	4812      	ldr	r0, [pc, #72]	; (6288 <wifi_callback+0x64>)
    6240:	4b12      	ldr	r3, [pc, #72]	; (628c <wifi_callback+0x68>)
    6242:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    6244:	23ff      	movs	r3, #255	; 0xff
    6246:	9300      	str	r3, [sp, #0]
    6248:	4b11      	ldr	r3, [pc, #68]	; (6290 <wifi_callback+0x6c>)
    624a:	2202      	movs	r2, #2
    624c:	210e      	movs	r1, #14
    624e:	4811      	ldr	r0, [pc, #68]	; (6294 <wifi_callback+0x70>)
    6250:	4c11      	ldr	r4, [pc, #68]	; (6298 <wifi_callback+0x74>)
    6252:	47a0      	blx	r4
			mqtt_disconnect(&mqtt_inst, 1);
    6254:	2101      	movs	r1, #1
    6256:	4811      	ldr	r0, [pc, #68]	; (629c <wifi_callback+0x78>)
    6258:	4b11      	ldr	r3, [pc, #68]	; (62a0 <wifi_callback+0x7c>)
    625a:	4798      	blx	r3
    625c:	e7e8      	b.n	6230 <wifi_callback+0xc>
			printf("Wi-Fi connected\r\n");
    625e:	4811      	ldr	r0, [pc, #68]	; (62a4 <wifi_callback+0x80>)
    6260:	4b0a      	ldr	r3, [pc, #40]	; (628c <wifi_callback+0x68>)
    6262:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    6264:	4b10      	ldr	r3, [pc, #64]	; (62a8 <wifi_callback+0x84>)
    6266:	4798      	blx	r3
    6268:	e7e2      	b.n	6230 <wifi_callback+0xc>
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    626a:	788b      	ldrb	r3, [r1, #2]
    626c:	784a      	ldrb	r2, [r1, #1]
    626e:	7808      	ldrb	r0, [r1, #0]
    6270:	78c9      	ldrb	r1, [r1, #3]
    6272:	9100      	str	r1, [sp, #0]
    6274:	0001      	movs	r1, r0
    6276:	480d      	ldr	r0, [pc, #52]	; (62ac <wifi_callback+0x88>)
    6278:	4c0d      	ldr	r4, [pc, #52]	; (62b0 <wifi_callback+0x8c>)
    627a:	47a0      	blx	r4
		mqtt_connect(&mqtt_inst, main_mqtt_broker);
    627c:	490d      	ldr	r1, [pc, #52]	; (62b4 <wifi_callback+0x90>)
    627e:	4807      	ldr	r0, [pc, #28]	; (629c <wifi_callback+0x78>)
    6280:	4b0d      	ldr	r3, [pc, #52]	; (62b8 <wifi_callback+0x94>)
    6282:	4798      	blx	r3
}
    6284:	e7d4      	b.n	6230 <wifi_callback+0xc>
    6286:	46c0      	nop			; (mov r8, r8)
    6288:	0000bb54 	.word	0x0000bb54
    628c:	00009701 	.word	0x00009701
    6290:	0000bb68 	.word	0x0000bb68
    6294:	0000bb74 	.word	0x0000bb74
    6298:	0000202d 	.word	0x0000202d
    629c:	2000019c 	.word	0x2000019c
    62a0:	00006fc1 	.word	0x00006fc1
    62a4:	0000bb40 	.word	0x0000bb40
    62a8:	00002049 	.word	0x00002049
    62ac:	0000bb84 	.word	0x0000bb84
    62b0:	000095e5 	.word	0x000095e5
    62b4:	0000ba5c 	.word	0x0000ba5c
    62b8:	0000695d 	.word	0x0000695d

000062bc <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    62bc:	b570      	push	{r4, r5, r6, lr}
    62be:	b082      	sub	sp, #8
    62c0:	0005      	movs	r5, r0
    62c2:	000e      	movs	r6, r1
	uint16_t temp = 0;
    62c4:	2200      	movs	r2, #0
    62c6:	466b      	mov	r3, sp
    62c8:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    62ca:	4c06      	ldr	r4, [pc, #24]	; (62e4 <usart_serial_getchar+0x28>)
    62cc:	466b      	mov	r3, sp
    62ce:	1d99      	adds	r1, r3, #6
    62d0:	0028      	movs	r0, r5
    62d2:	47a0      	blx	r4
    62d4:	2800      	cmp	r0, #0
    62d6:	d1f9      	bne.n	62cc <usart_serial_getchar+0x10>

	*c = temp;
    62d8:	466b      	mov	r3, sp
    62da:	3306      	adds	r3, #6
    62dc:	881b      	ldrh	r3, [r3, #0]
    62de:	7033      	strb	r3, [r6, #0]
}
    62e0:	b002      	add	sp, #8
    62e2:	bd70      	pop	{r4, r5, r6, pc}
    62e4:	00004d39 	.word	0x00004d39

000062e8 <usart_serial_putchar>:
{
    62e8:	b570      	push	{r4, r5, r6, lr}
    62ea:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    62ec:	b28c      	uxth	r4, r1
    62ee:	4e03      	ldr	r6, [pc, #12]	; (62fc <usart_serial_putchar+0x14>)
    62f0:	0021      	movs	r1, r4
    62f2:	0028      	movs	r0, r5
    62f4:	47b0      	blx	r6
    62f6:	2800      	cmp	r0, #0
    62f8:	d1fa      	bne.n	62f0 <usart_serial_putchar+0x8>
}
    62fa:	bd70      	pop	{r4, r5, r6, pc}
    62fc:	00004d0d 	.word	0x00004d0d

00006300 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
    6300:	b5f0      	push	{r4, r5, r6, r7, lr}
    6302:	b087      	sub	sp, #28
    6304:	0005      	movs	r5, r0
    6306:	0014      	movs	r4, r2
	switch (type) {
    6308:	2901      	cmp	r1, #1
    630a:	d04b      	beq.n	63a4 <mqtt_callback+0xa4>
    630c:	dd2d      	ble.n	636a <mqtt_callback+0x6a>
    630e:	2905      	cmp	r1, #5
    6310:	d05d      	beq.n	63ce <mqtt_callback+0xce>
    6312:	2906      	cmp	r1, #6
    6314:	d164      	bne.n	63e0 <mqtt_callback+0xe0>

		break;

	case MQTT_CALLBACK_RECV_PUBLISH:
		/* You received publish message which you had subscribed. */
		if (data->recv_publish.topic != NULL && data->recv_publish.msg != NULL) {
    6316:	6810      	ldr	r0, [r2, #0]
    6318:	2800      	cmp	r0, #0
    631a:	d061      	beq.n	63e0 <mqtt_callback+0xe0>
    631c:	6893      	ldr	r3, [r2, #8]
    631e:	2b00      	cmp	r3, #0
    6320:	d05e      	beq.n	63e0 <mqtt_callback+0xe0>
			if (!strncmp(data->recv_publish.topic, MAIN_CHAT_TOPIC, strlen(MAIN_CHAT_TOPIC))) {
    6322:	220a      	movs	r2, #10
    6324:	492f      	ldr	r1, [pc, #188]	; (63e4 <mqtt_callback+0xe4>)
    6326:	4b30      	ldr	r3, [pc, #192]	; (63e8 <mqtt_callback+0xe8>)
    6328:	4798      	blx	r3
    632a:	1e05      	subs	r5, r0, #0
    632c:	d158      	bne.n	63e0 <mqtt_callback+0xe0>
				/* Print user name and message */
				for (int i = strlen(MAIN_CHAT_TOPIC); i < data->recv_publish.topic_size; i++) {
    632e:	6863      	ldr	r3, [r4, #4]
    6330:	2b0a      	cmp	r3, #10
    6332:	dd08      	ble.n	6346 <mqtt_callback+0x46>
    6334:	260a      	movs	r6, #10
				//for (int i = 0; i < data->recv_publish.topic_size; i++) {
					printf("%c", data->recv_publish.topic[i]);
    6336:	4f2d      	ldr	r7, [pc, #180]	; (63ec <mqtt_callback+0xec>)
    6338:	6823      	ldr	r3, [r4, #0]
    633a:	5d98      	ldrb	r0, [r3, r6]
    633c:	47b8      	blx	r7
				for (int i = strlen(MAIN_CHAT_TOPIC); i < data->recv_publish.topic_size; i++) {
    633e:	3601      	adds	r6, #1
    6340:	6863      	ldr	r3, [r4, #4]
    6342:	42b3      	cmp	r3, r6
    6344:	dcf8      	bgt.n	6338 <mqtt_callback+0x38>
				}
				printf(" >> ");
    6346:	482a      	ldr	r0, [pc, #168]	; (63f0 <mqtt_callback+0xf0>)
    6348:	4b2a      	ldr	r3, [pc, #168]	; (63f4 <mqtt_callback+0xf4>)
    634a:	4798      	blx	r3
				for (int i = 0; i < data->recv_publish.msg_size; i++) {
    634c:	68e3      	ldr	r3, [r4, #12]
    634e:	2b00      	cmp	r3, #0
    6350:	dd07      	ble.n	6362 <mqtt_callback+0x62>
					printf("%c", data->recv_publish.msg[i]);
    6352:	4e26      	ldr	r6, [pc, #152]	; (63ec <mqtt_callback+0xec>)
    6354:	68a3      	ldr	r3, [r4, #8]
    6356:	5d58      	ldrb	r0, [r3, r5]
    6358:	47b0      	blx	r6
				for (int i = 0; i < data->recv_publish.msg_size; i++) {
    635a:	3501      	adds	r5, #1
    635c:	68e3      	ldr	r3, [r4, #12]
    635e:	42ab      	cmp	r3, r5
    6360:	dcf8      	bgt.n	6354 <mqtt_callback+0x54>
				}
				printf("\r\n");
    6362:	4825      	ldr	r0, [pc, #148]	; (63f8 <mqtt_callback+0xf8>)
    6364:	4b25      	ldr	r3, [pc, #148]	; (63fc <mqtt_callback+0xfc>)
    6366:	4798      	blx	r3
    6368:	e03a      	b.n	63e0 <mqtt_callback+0xe0>
	switch (type) {
    636a:	2900      	cmp	r1, #0
    636c:	d138      	bne.n	63e0 <mqtt_callback+0xe0>
		if (data->sock_connected.result >= 0) {
    636e:	6813      	ldr	r3, [r2, #0]
    6370:	2b00      	cmp	r3, #0
    6372:	db0d      	blt.n	6390 <mqtt_callback+0x90>
			mqtt_connect_broker(module_inst, 1, NULL, NULL, mqtt_user, NULL, NULL, 0, 0, 0);
    6374:	2300      	movs	r3, #0
    6376:	9305      	str	r3, [sp, #20]
    6378:	9304      	str	r3, [sp, #16]
    637a:	9303      	str	r3, [sp, #12]
    637c:	9302      	str	r3, [sp, #8]
    637e:	9301      	str	r3, [sp, #4]
    6380:	4b1f      	ldr	r3, [pc, #124]	; (6400 <mqtt_callback+0x100>)
    6382:	9300      	str	r3, [sp, #0]
    6384:	2300      	movs	r3, #0
    6386:	2200      	movs	r2, #0
    6388:	2101      	movs	r1, #1
    638a:	4c1e      	ldr	r4, [pc, #120]	; (6404 <mqtt_callback+0x104>)
    638c:	47a0      	blx	r4
    638e:	e027      	b.n	63e0 <mqtt_callback+0xe0>
			printf("Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
    6390:	4c1d      	ldr	r4, [pc, #116]	; (6408 <mqtt_callback+0x108>)
    6392:	0021      	movs	r1, r4
    6394:	481d      	ldr	r0, [pc, #116]	; (640c <mqtt_callback+0x10c>)
    6396:	4b17      	ldr	r3, [pc, #92]	; (63f4 <mqtt_callback+0xf4>)
    6398:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
    639a:	0021      	movs	r1, r4
    639c:	0028      	movs	r0, r5
    639e:	4b1c      	ldr	r3, [pc, #112]	; (6410 <mqtt_callback+0x110>)
    63a0:	4798      	blx	r3
    63a2:	e01d      	b.n	63e0 <mqtt_callback+0xe0>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
    63a4:	7811      	ldrb	r1, [r2, #0]
    63a6:	2900      	cmp	r1, #0
    63a8:	d10d      	bne.n	63c6 <mqtt_callback+0xc6>
			mqtt_subscribe(module_inst, MAIN_CHAT_TOPIC "#", 0);
    63aa:	2200      	movs	r2, #0
    63ac:	4919      	ldr	r1, [pc, #100]	; (6414 <mqtt_callback+0x114>)
    63ae:	4b1a      	ldr	r3, [pc, #104]	; (6418 <mqtt_callback+0x118>)
    63b0:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    63b2:	491a      	ldr	r1, [pc, #104]	; (641c <mqtt_callback+0x11c>)
    63b4:	2231      	movs	r2, #49	; 0x31
    63b6:	5c8b      	ldrb	r3, [r1, r2]
    63b8:	2002      	movs	r0, #2
    63ba:	4303      	orrs	r3, r0
    63bc:	548b      	strb	r3, [r1, r2]
			printf("Preparation of the chat has been completed.\r\n");
    63be:	4818      	ldr	r0, [pc, #96]	; (6420 <mqtt_callback+0x120>)
    63c0:	4b0e      	ldr	r3, [pc, #56]	; (63fc <mqtt_callback+0xfc>)
    63c2:	4798      	blx	r3
    63c4:	e00c      	b.n	63e0 <mqtt_callback+0xe0>
			printf("MQTT broker decline your access! error code %d\r\n", data->connected.result);
    63c6:	4817      	ldr	r0, [pc, #92]	; (6424 <mqtt_callback+0x124>)
    63c8:	4b0a      	ldr	r3, [pc, #40]	; (63f4 <mqtt_callback+0xf4>)
    63ca:	4798      	blx	r3
    63cc:	e008      	b.n	63e0 <mqtt_callback+0xe0>

		break;

	case MQTT_CALLBACK_DISCONNECTED:
		/* Stop timer and USART callback. */
		printf("MQTT disconnected\r\n");
    63ce:	4816      	ldr	r0, [pc, #88]	; (6428 <mqtt_callback+0x128>)
    63d0:	4b0a      	ldr	r3, [pc, #40]	; (63fc <mqtt_callback+0xfc>)
    63d2:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
    63d4:	4911      	ldr	r1, [pc, #68]	; (641c <mqtt_callback+0x11c>)
    63d6:	2231      	movs	r2, #49	; 0x31
    63d8:	5c8b      	ldrb	r3, [r1, r2]
    63da:	2002      	movs	r0, #2
    63dc:	4383      	bics	r3, r0
    63de:	548b      	strb	r3, [r1, r2]
		usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
		break;
	}
}
    63e0:	b007      	add	sp, #28
    63e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    63e4:	0000bb14 	.word	0x0000bb14
    63e8:	0000991b 	.word	0x0000991b
    63ec:	00009619 	.word	0x00009619
    63f0:	0000bb20 	.word	0x0000bb20
    63f4:	000095e5 	.word	0x000095e5
    63f8:	0000bb28 	.word	0x0000bb28
    63fc:	00009701 	.word	0x00009701
    6400:	20000210 	.word	0x20000210
    6404:	00006a71 	.word	0x00006a71
    6408:	0000ba5c 	.word	0x0000ba5c
    640c:	0000ba6c 	.word	0x0000ba6c
    6410:	0000695d 	.word	0x0000695d
    6414:	0000baa4 	.word	0x0000baa4
    6418:	00006d21 	.word	0x00006d21
    641c:	200000e8 	.word	0x200000e8
    6420:	0000bab0 	.word	0x0000bab0
    6424:	0000bae0 	.word	0x0000bae0
    6428:	0000bb2c 	.word	0x0000bb2c

0000642c <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
    642c:	b5f0      	push	{r4, r5, r6, r7, lr}
    642e:	b0bb      	sub	sp, #236	; 0xec
	int8_t ret;
	char topic[strlen(MAIN_CHAT_TOPIC) + MAIN_CHAT_USER_NAME_SIZE + 1];
	char topic2[64];
	char msgBuff[32];
	char dt[] = "FU";
	char mqtt_user[]="seyam";
    6430:	4b90      	ldr	r3, [pc, #576]	; (6674 <main+0x248>)
    6432:	681a      	ldr	r2, [r3, #0]
    6434:	921a      	str	r2, [sp, #104]	; 0x68
    6436:	889a      	ldrh	r2, [r3, #4]
    6438:	ab1a      	add	r3, sp, #104	; 0x68
    643a:	809a      	strh	r2, [r3, #4]
	

	/* Initialize the board. */
	system_init();
    643c:	4b8e      	ldr	r3, [pc, #568]	; (6678 <main+0x24c>)
    643e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    6440:	aa03      	add	r2, sp, #12
    6442:	2380      	movs	r3, #128	; 0x80
    6444:	05db      	lsls	r3, r3, #23
    6446:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    6448:	2300      	movs	r3, #0
    644a:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    644c:	21ff      	movs	r1, #255	; 0xff
    644e:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    6450:	2100      	movs	r1, #0
    6452:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    6454:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
    6456:	2096      	movs	r0, #150	; 0x96
    6458:	0180      	lsls	r0, r0, #6
    645a:	6210      	str	r0, [r2, #32]
	config->receiver_enable  = true;
    645c:	2501      	movs	r5, #1
    645e:	2024      	movs	r0, #36	; 0x24
    6460:	5415      	strb	r5, [r2, r0]
	config->transmitter_enable = true;
    6462:	3001      	adds	r0, #1
    6464:	5415      	strb	r5, [r2, r0]
	config->clock_polarity_inverted = false;
    6466:	3001      	adds	r0, #1
    6468:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
    646a:	3001      	adds	r0, #1
    646c:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
    646e:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    6470:	3005      	adds	r0, #5
    6472:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
    6474:	3001      	adds	r0, #1
    6476:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    6478:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    647a:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    647c:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    647e:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    6480:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    6482:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
    6484:	2313      	movs	r3, #19
    6486:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    6488:	7751      	strb	r1, [r2, #29]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    648a:	2380      	movs	r3, #128	; 0x80
    648c:	035b      	lsls	r3, r3, #13
    648e:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    6490:	4b7a      	ldr	r3, [pc, #488]	; (667c <main+0x250>)
    6492:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    6494:	4b7a      	ldr	r3, [pc, #488]	; (6680 <main+0x254>)
    6496:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    6498:	2301      	movs	r3, #1
    649a:	425b      	negs	r3, r3
    649c:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    649e:	63d3      	str	r3, [r2, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    64a0:	4c78      	ldr	r4, [pc, #480]	; (6684 <main+0x258>)
    64a2:	4b79      	ldr	r3, [pc, #484]	; (6688 <main+0x25c>)
    64a4:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    64a6:	4979      	ldr	r1, [pc, #484]	; (668c <main+0x260>)
    64a8:	4b79      	ldr	r3, [pc, #484]	; (6690 <main+0x264>)
    64aa:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    64ac:	4979      	ldr	r1, [pc, #484]	; (6694 <main+0x268>)
    64ae:	4b7a      	ldr	r3, [pc, #488]	; (6698 <main+0x26c>)
    64b0:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    64b2:	497a      	ldr	r1, [pc, #488]	; (669c <main+0x270>)
    64b4:	0020      	movs	r0, r4
    64b6:	4b7a      	ldr	r3, [pc, #488]	; (66a0 <main+0x274>)
    64b8:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    64ba:	4f7a      	ldr	r7, [pc, #488]	; (66a4 <main+0x278>)
    64bc:	683b      	ldr	r3, [r7, #0]
    64be:	6898      	ldr	r0, [r3, #8]
    64c0:	2100      	movs	r1, #0
    64c2:	4e79      	ldr	r6, [pc, #484]	; (66a8 <main+0x27c>)
    64c4:	47b0      	blx	r6
	setbuf(stdin, NULL);
    64c6:	683b      	ldr	r3, [r7, #0]
    64c8:	6858      	ldr	r0, [r3, #4]
    64ca:	2100      	movs	r1, #0
    64cc:	47b0      	blx	r6
	usart_register_callback(&cdc_uart_module, (usart_callback_t)uart_callback, USART_CALLBACK_BUFFER_RECEIVED);
    64ce:	2201      	movs	r2, #1
    64d0:	4976      	ldr	r1, [pc, #472]	; (66ac <main+0x280>)
    64d2:	0020      	movs	r0, r4
    64d4:	4b76      	ldr	r3, [pc, #472]	; (66b0 <main+0x284>)
    64d6:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    64d8:	6826      	ldr	r6, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    64da:	0030      	movs	r0, r6
    64dc:	4b75      	ldr	r3, [pc, #468]	; (66b4 <main+0x288>)
    64de:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    64e0:	231f      	movs	r3, #31
    64e2:	4018      	ands	r0, r3
    64e4:	4085      	lsls	r5, r0
    64e6:	4b74      	ldr	r3, [pc, #464]	; (66b8 <main+0x28c>)
    64e8:	601d      	str	r5, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    64ea:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    64ec:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    64ee:	2b00      	cmp	r3, #0
    64f0:	d1fc      	bne.n	64ec <main+0xc0>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    64f2:	6833      	ldr	r3, [r6, #0]
    64f4:	2202      	movs	r2, #2
    64f6:	4313      	orrs	r3, r2
    64f8:	6033      	str	r3, [r6, #0]
	configure_console();
	
	

	/* Output example information */
	printf(STRING_HEADER);
    64fa:	4870      	ldr	r0, [pc, #448]	; (66bc <main+0x290>)
    64fc:	4b70      	ldr	r3, [pc, #448]	; (66c0 <main+0x294>)
    64fe:	4798      	blx	r3
	sw_timer_get_config_defaults(&swt_conf);
    6500:	a803      	add	r0, sp, #12
    6502:	4b70      	ldr	r3, [pc, #448]	; (66c4 <main+0x298>)
    6504:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
    6506:	4c70      	ldr	r4, [pc, #448]	; (66c8 <main+0x29c>)
    6508:	a903      	add	r1, sp, #12
    650a:	0020      	movs	r0, r4
    650c:	4b6f      	ldr	r3, [pc, #444]	; (66cc <main+0x2a0>)
    650e:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    6510:	0020      	movs	r0, r4
    6512:	4b6f      	ldr	r3, [pc, #444]	; (66d0 <main+0x2a4>)
    6514:	4798      	blx	r3
	mqtt_get_config_defaults(&mqtt_conf);
    6516:	a803      	add	r0, sp, #12
    6518:	4b6e      	ldr	r3, [pc, #440]	; (66d4 <main+0x2a8>)
    651a:	4798      	blx	r3
	mqtt_conf.timer_inst = &swt_module_inst;
    651c:	9404      	str	r4, [sp, #16]
	mqtt_conf.recv_buffer = mqtt_buffer;
    651e:	4b6e      	ldr	r3, [pc, #440]	; (66d8 <main+0x2ac>)
    6520:	9306      	str	r3, [sp, #24]
	mqtt_conf.recv_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    6522:	2380      	movs	r3, #128	; 0x80
    6524:	9307      	str	r3, [sp, #28]
	result = mqtt_init(&mqtt_inst, &mqtt_conf);
    6526:	a903      	add	r1, sp, #12
    6528:	486c      	ldr	r0, [pc, #432]	; (66dc <main+0x2b0>)
    652a:	4b6d      	ldr	r3, [pc, #436]	; (66e0 <main+0x2b4>)
    652c:	4798      	blx	r3
    652e:	1e01      	subs	r1, r0, #0
	if (result < 0) {
    6530:	db2a      	blt.n	6588 <main+0x15c>
	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
    6532:	496c      	ldr	r1, [pc, #432]	; (66e4 <main+0x2b8>)
    6534:	4869      	ldr	r0, [pc, #420]	; (66dc <main+0x2b0>)
    6536:	4b6c      	ldr	r3, [pc, #432]	; (66e8 <main+0x2bc>)
    6538:	4798      	blx	r3
    653a:	1e01      	subs	r1, r0, #0
	if (result < 0) {
    653c:	db28      	blt.n	6590 <main+0x164>

	/* Initialize the MQTT service. */
	configure_mqtt();

	/* Initialize the BSP. */
	nm_bsp_init();
    653e:	4b6b      	ldr	r3, [pc, #428]	; (66ec <main+0x2c0>)
    6540:	4798      	blx	r3
	
	
		/* Setup user name first */
	printf("Enter the user name (Max %d characters)\r\n", MAIN_CHAT_USER_NAME_SIZE);
    6542:	2140      	movs	r1, #64	; 0x40
    6544:	486a      	ldr	r0, [pc, #424]	; (66f0 <main+0x2c4>)
    6546:	4c6b      	ldr	r4, [pc, #428]	; (66f4 <main+0x2c8>)
    6548:	47a0      	blx	r4
	//scanf("%64s", mqtt_user);
	printf("User : %s\r\n", mqtt_user); // Add new line after printing mqtt_user
    654a:	a91a      	add	r1, sp, #104	; 0x68
    654c:	486a      	ldr	r0, [pc, #424]	; (66f8 <main+0x2cc>)
    654e:	47a0      	blx	r4
	sprintf(topic, "%s%s", MAIN_CHAT_TOPIC, mqtt_user); //save 'MAIN_CHAT_TOPIC' data to the 'topic' char array
    6550:	4d6a      	ldr	r5, [pc, #424]	; (66fc <main+0x2d0>)
    6552:	ab1a      	add	r3, sp, #104	; 0x68
    6554:	4a6a      	ldr	r2, [pc, #424]	; (6700 <main+0x2d4>)
    6556:	0029      	movs	r1, r5
    6558:	a803      	add	r0, sp, #12
    655a:	4c6a      	ldr	r4, [pc, #424]	; (6704 <main+0x2d8>)
    655c:	47a0      	blx	r4
	sprintf(topic2, "%s%s", DATA_TOPIC, mqtt_user); //save 'MAIN_CHAT_TOPIC' data to the 'topic' char array  
    655e:	ab1a      	add	r3, sp, #104	; 0x68
    6560:	4a69      	ldr	r2, [pc, #420]	; (6708 <main+0x2dc>)
    6562:	0029      	movs	r1, r5
    6564:	a824      	add	r0, sp, #144	; 0x90
    6566:	47a0      	blx	r4

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    6568:	2218      	movs	r2, #24
    656a:	2100      	movs	r1, #0
    656c:	a834      	add	r0, sp, #208	; 0xd0
    656e:	4b67      	ldr	r3, [pc, #412]	; (670c <main+0x2e0>)
    6570:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_callback; /* Set Wi-Fi event callback. */
    6572:	4b67      	ldr	r3, [pc, #412]	; (6710 <main+0x2e4>)
    6574:	9334      	str	r3, [sp, #208]	; 0xd0
	ret = m2m_wifi_init(&param);
    6576:	a834      	add	r0, sp, #208	; 0xd0
    6578:	4b66      	ldr	r3, [pc, #408]	; (6714 <main+0x2e8>)
    657a:	4798      	blx	r3
    657c:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) {
    657e:	d00b      	beq.n	6598 <main+0x16c>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
    6580:	4865      	ldr	r0, [pc, #404]	; (6718 <main+0x2ec>)
    6582:	4b5c      	ldr	r3, [pc, #368]	; (66f4 <main+0x2c8>)
    6584:	4798      	blx	r3
    6586:	e7fe      	b.n	6586 <main+0x15a>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
    6588:	4864      	ldr	r0, [pc, #400]	; (671c <main+0x2f0>)
    658a:	4b5a      	ldr	r3, [pc, #360]	; (66f4 <main+0x2c8>)
    658c:	4798      	blx	r3
    658e:	e7fe      	b.n	658e <main+0x162>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
    6590:	4863      	ldr	r0, [pc, #396]	; (6720 <main+0x2f4>)
    6592:	4b58      	ldr	r3, [pc, #352]	; (66f4 <main+0x2c8>)
    6594:	4798      	blx	r3
    6596:	e7fe      	b.n	6596 <main+0x16a>
		while (1) { /* Loop forever. */
		}
	}

	/* Initialize socket interface. */
	socketInit();
    6598:	4b62      	ldr	r3, [pc, #392]	; (6724 <main+0x2f8>)
    659a:	4798      	blx	r3
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
    659c:	4962      	ldr	r1, [pc, #392]	; (6728 <main+0x2fc>)
    659e:	4863      	ldr	r0, [pc, #396]	; (672c <main+0x300>)
    65a0:	4b63      	ldr	r3, [pc, #396]	; (6730 <main+0x304>)
    65a2:	4798      	blx	r3

	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    65a4:	23ff      	movs	r3, #255	; 0xff
    65a6:	9300      	str	r3, [sp, #0]
    65a8:	4b62      	ldr	r3, [pc, #392]	; (6734 <main+0x308>)
    65aa:	2202      	movs	r2, #2
    65ac:	210e      	movs	r1, #14
    65ae:	4862      	ldr	r0, [pc, #392]	; (6738 <main+0x30c>)
    65b0:	4c62      	ldr	r4, [pc, #392]	; (673c <main+0x310>)
    65b2:	47a0      	blx	r4
    enum status_code shtc1_connected;
    enum status_code shtc1_read_status;
	enum status_code ams_read_status;
	
	/* Initialize the I2C console. */
	shtc1_demo_init();
    65b4:	4b62      	ldr	r3, [pc, #392]	; (6740 <main+0x314>)
    65b6:	4798      	blx	r3

    delay_s(1);
    65b8:	20fa      	movs	r0, #250	; 0xfa
    65ba:	0080      	lsls	r0, r0, #2
    65bc:	4b61      	ldr	r3, [pc, #388]	; (6744 <main+0x318>)
    65be:	4798      	blx	r3

    printf("\r\nstarting...\r\n");
    65c0:	4861      	ldr	r0, [pc, #388]	; (6748 <main+0x31c>)
    65c2:	4b3f      	ldr	r3, [pc, #252]	; (66c0 <main+0x294>)
    65c4:	4798      	blx	r3

    /* test if sensor is connected */
    shtc1_connected = shtc1_probe(&i2c_master_instance);
    65c6:	4861      	ldr	r0, [pc, #388]	; (674c <main+0x320>)
    65c8:	4b61      	ldr	r3, [pc, #388]	; (6750 <main+0x324>)
    65ca:	4798      	blx	r3
    printf("sensor is %s\r\n",
    65cc:	4961      	ldr	r1, [pc, #388]	; (6754 <main+0x328>)
    65ce:	2800      	cmp	r0, #0
    65d0:	d100      	bne.n	65d4 <main+0x1a8>
    65d2:	4961      	ldr	r1, [pc, #388]	; (6758 <main+0x32c>)
    65d4:	4861      	ldr	r0, [pc, #388]	; (675c <main+0x330>)
    65d6:	4b47      	ldr	r3, [pc, #284]	; (66f4 <main+0x2c8>)
    65d8:	4798      	blx	r3



	while (1) {
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
    65da:	4e61      	ldr	r6, [pc, #388]	; (6760 <main+0x334>)
		/* Try to read user input from USART. */
		//usart_read_job(&cdc_uart_module, &uart_ch_buffer);
		/* Checks the timer timeout. */
		sw_timer_task(&swt_module_inst);
    65dc:	4d3a      	ldr	r5, [pc, #232]	; (66c8 <main+0x29c>)
    65de:	e00a      	b.n	65f6 <main+0x1ca>
            else
                port_pin_set_output_level(LED_0_PIN, true);*/
        }
        else
        {
            printf("Measurement failed. Extension-board disconnected?\n");
    65e0:	4860      	ldr	r0, [pc, #384]	; (6764 <main+0x338>)
    65e2:	4b37      	ldr	r3, [pc, #220]	; (66c0 <main+0x294>)
    65e4:	4798      	blx	r3
    65e6:	e02f      	b.n	6648 <main+0x21c>
					printf("CO2 = (%d)  ppm\r\n",co2);
					
				}
				else
				{
					printf("Measurement failed. Plugged it in?\n");
    65e8:	485f      	ldr	r0, [pc, #380]	; (6768 <main+0x33c>)
    65ea:	4b35      	ldr	r3, [pc, #212]	; (66c0 <main+0x294>)
    65ec:	4798      	blx	r3
		
		


        /* delay until the next iteration */
        delay_ms(MEASUREMENT_INTERVAL_MS);
    65ee:	20fa      	movs	r0, #250	; 0xfa
    65f0:	00c0      	lsls	r0, r0, #3
    65f2:	4b54      	ldr	r3, [pc, #336]	; (6744 <main+0x318>)
    65f4:	4798      	blx	r3
		m2m_wifi_handle_events(NULL);
    65f6:	2000      	movs	r0, #0
    65f8:	47b0      	blx	r6
		sw_timer_task(&swt_module_inst);
    65fa:	0028      	movs	r0, r5
    65fc:	4b5b      	ldr	r3, [pc, #364]	; (676c <main+0x340>)
    65fe:	4798      	blx	r3
		delay_s(1);
    6600:	20fa      	movs	r0, #250	; 0xfa
    6602:	0080      	lsls	r0, r0, #2
    6604:	4c4f      	ldr	r4, [pc, #316]	; (6744 <main+0x318>)
    6606:	47a0      	blx	r4
        shtc1_read_status = shtc1_read_lpm_sync(&i2c_master_instance, &temp, &rh); //read into the temp and rh variables
    6608:	aa18      	add	r2, sp, #96	; 0x60
    660a:	a919      	add	r1, sp, #100	; 0x64
    660c:	484f      	ldr	r0, [pc, #316]	; (674c <main+0x320>)
    660e:	4b58      	ldr	r3, [pc, #352]	; (6770 <main+0x344>)
    6610:	4798      	blx	r3
    6612:	0007      	movs	r7, r0
		delay_ms(100);
    6614:	2064      	movs	r0, #100	; 0x64
    6616:	47a0      	blx	r4
        if (shtc1_read_status == STATUS_OK)
    6618:	2f00      	cmp	r7, #0
    661a:	d1e1      	bne.n	65e0 <main+0x1b4>
			printf("% d\r\n",temp);
    661c:	4c55      	ldr	r4, [pc, #340]	; (6774 <main+0x348>)
    661e:	9919      	ldr	r1, [sp, #100]	; 0x64
    6620:	0020      	movs	r0, r4
    6622:	4f34      	ldr	r7, [pc, #208]	; (66f4 <main+0x2c8>)
    6624:	47b8      	blx	r7
			printf("% d\r\n",rh);
    6626:	9918      	ldr	r1, [sp, #96]	; 0x60
    6628:	0020      	movs	r0, r4
    662a:	47b8      	blx	r7
            temp_f = (float)temp / 1000;
    662c:	9819      	ldr	r0, [sp, #100]	; 0x64
    662e:	4b52      	ldr	r3, [pc, #328]	; (6778 <main+0x34c>)
    6630:	4798      	blx	r3
    6632:	4952      	ldr	r1, [pc, #328]	; (677c <main+0x350>)
    6634:	4b52      	ldr	r3, [pc, #328]	; (6780 <main+0x354>)
    6636:	4798      	blx	r3
			sprintf(msgBuff,"%.2f",temp_f); //converts and stores float to char array
    6638:	4b52      	ldr	r3, [pc, #328]	; (6784 <main+0x358>)
    663a:	4798      	blx	r3
    663c:	0002      	movs	r2, r0
    663e:	000b      	movs	r3, r1
    6640:	4951      	ldr	r1, [pc, #324]	; (6788 <main+0x35c>)
    6642:	a81c      	add	r0, sp, #112	; 0x70
    6644:	4c2f      	ldr	r4, [pc, #188]	; (6704 <main+0x2d8>)
    6646:	47a0      	blx	r4
				delay_s(1);
    6648:	20fa      	movs	r0, #250	; 0xfa
    664a:	0080      	lsls	r0, r0, #2
    664c:	4c3d      	ldr	r4, [pc, #244]	; (6744 <main+0x318>)
    664e:	47a0      	blx	r4
				ams_read_status = ams_sensor_read(&i2c_master_instance, &voc, &co2); //read into the variable voc and co2
    6650:	aa16      	add	r2, sp, #88	; 0x58
    6652:	a917      	add	r1, sp, #92	; 0x5c
    6654:	483d      	ldr	r0, [pc, #244]	; (674c <main+0x320>)
    6656:	4b4d      	ldr	r3, [pc, #308]	; (678c <main+0x360>)
    6658:	4798      	blx	r3
    665a:	0007      	movs	r7, r0
				delay_ms(100);
    665c:	2064      	movs	r0, #100	; 0x64
    665e:	47a0      	blx	r4
				if (ams_read_status==STATUS_OK)
    6660:	2f00      	cmp	r7, #0
    6662:	d1c1      	bne.n	65e8 <main+0x1bc>
					printf("VOC = (%d)  ppb\r\n",voc);
    6664:	9917      	ldr	r1, [sp, #92]	; 0x5c
    6666:	484a      	ldr	r0, [pc, #296]	; (6790 <main+0x364>)
    6668:	4c22      	ldr	r4, [pc, #136]	; (66f4 <main+0x2c8>)
    666a:	47a0      	blx	r4
					printf("CO2 = (%d)  ppm\r\n",co2);
    666c:	9916      	ldr	r1, [sp, #88]	; 0x58
    666e:	4849      	ldr	r0, [pc, #292]	; (6794 <main+0x368>)
    6670:	47a0      	blx	r4
    6672:	e7bc      	b.n	65ee <main+0x1c2>
    6674:	0000ba54 	.word	0x0000ba54
    6678:	000056c5 	.word	0x000056c5
    667c:	00160002 	.word	0x00160002
    6680:	00170002 	.word	0x00170002
    6684:	200000e8 	.word	0x200000e8
    6688:	20000414 	.word	0x20000414
    668c:	000062e9 	.word	0x000062e9
    6690:	20000410 	.word	0x20000410
    6694:	000062bd 	.word	0x000062bd
    6698:	2000040c 	.word	0x2000040c
    669c:	42001400 	.word	0x42001400
    66a0:	000049c9 	.word	0x000049c9
    66a4:	2000000c 	.word	0x2000000c
    66a8:	00009739 	.word	0x00009739
    66ac:	000061f9 	.word	0x000061f9
    66b0:	00004da9 	.word	0x00004da9
    66b4:	0000449d 	.word	0x0000449d
    66b8:	e000e100 	.word	0xe000e100
    66bc:	0000b85c 	.word	0x0000b85c
    66c0:	00009701 	.word	0x00009701
    66c4:	0000605d 	.word	0x0000605d
    66c8:	20000474 	.word	0x20000474
    66cc:	00006069 	.word	0x00006069
    66d0:	00006115 	.word	0x00006115
    66d4:	00006849 	.word	0x00006849
    66d8:	2000011c 	.word	0x2000011c
    66dc:	2000019c 	.word	0x2000019c
    66e0:	0000686d 	.word	0x0000686d
    66e4:	00006301 	.word	0x00006301
    66e8:	000068f9 	.word	0x000068f9
    66ec:	00000d25 	.word	0x00000d25
    66f0:	0000b930 	.word	0x0000b930
    66f4:	000095e5 	.word	0x000095e5
    66f8:	0000b95c 	.word	0x0000b95c
    66fc:	0000b968 	.word	0x0000b968
    6700:	0000bb14 	.word	0x0000bb14
    6704:	000098a5 	.word	0x000098a5
    6708:	0000b970 	.word	0x0000b970
    670c:	00009483 	.word	0x00009483
    6710:	00006225 	.word	0x00006225
    6714:	00001c5d 	.word	0x00001c5d
    6718:	0000b97c 	.word	0x0000b97c
    671c:	0000b8c8 	.word	0x0000b8c8
    6720:	0000b8fc 	.word	0x0000b8fc
    6724:	00003889 	.word	0x00003889
    6728:	0000620d 	.word	0x0000620d
    672c:	00006219 	.word	0x00006219
    6730:	000038cd 	.word	0x000038cd
    6734:	0000bb68 	.word	0x0000bb68
    6738:	0000bb74 	.word	0x0000bb74
    673c:	0000202d 	.word	0x0000202d
    6740:	00005fb1 	.word	0x00005fb1
    6744:	00000ca5 	.word	0x00000ca5
    6748:	0000b9a4 	.word	0x0000b9a4
    674c:	2000044c 	.word	0x2000044c
    6750:	00000bed 	.word	0x00000bed
    6754:	0000b854 	.word	0x0000b854
    6758:	0000b850 	.word	0x0000b850
    675c:	0000b9b4 	.word	0x0000b9b4
    6760:	00001d91 	.word	0x00001d91
    6764:	0000b9d4 	.word	0x0000b9d4
    6768:	0000ba30 	.word	0x0000ba30
    676c:	0000619d 	.word	0x0000619d
    6770:	00000bd5 	.word	0x00000bd5
    6774:	0000b9c4 	.word	0x0000b9c4
    6778:	000079e5 	.word	0x000079e5
    677c:	447a0000 	.word	0x447a0000
    6780:	00007755 	.word	0x00007755
    6784:	00009311 	.word	0x00009311
    6788:	0000b9cc 	.word	0x0000b9cc
    678c:	00000115 	.word	0x00000115
    6790:	0000ba08 	.word	0x0000ba08
    6794:	0000ba1c 	.word	0x0000ba1c

00006798 <_hwerr_to_stderr>:
    6798:	1c03      	adds	r3, r0, #0
    679a:	300e      	adds	r0, #14
    679c:	b500      	push	{lr}
    679e:	280e      	cmp	r0, #14
    67a0:	d819      	bhi.n	67d6 <_hwerr_to_stderr+0x3e>
    67a2:	f000 fe2d 	bl	7400 <__gnu_thumb1_case_uqi>
    67a6:	1416      	.short	0x1416
    67a8:	1b181012 	.word	0x1b181012
    67ac:	180c0e18 	.word	0x180c0e18
    67b0:	1d0a0e0e 	.word	0x1d0a0e0e
    67b4:	08          	.byte	0x08
    67b5:	00          	.byte	0x00
    67b6:	2000      	movs	r0, #0
    67b8:	e014      	b.n	67e4 <_hwerr_to_stderr+0x4c>
    67ba:	2070      	movs	r0, #112	; 0x70
    67bc:	e011      	b.n	67e2 <_hwerr_to_stderr+0x4a>
    67be:	2016      	movs	r0, #22
    67c0:	e00f      	b.n	67e2 <_hwerr_to_stderr+0x4a>
    67c2:	200c      	movs	r0, #12
    67c4:	e00d      	b.n	67e2 <_hwerr_to_stderr+0x4a>
    67c6:	2079      	movs	r0, #121	; 0x79
    67c8:	e00b      	b.n	67e2 <_hwerr_to_stderr+0x4a>
    67ca:	2068      	movs	r0, #104	; 0x68
    67cc:	e009      	b.n	67e2 <_hwerr_to_stderr+0x4a>
    67ce:	200b      	movs	r0, #11
    67d0:	e007      	b.n	67e2 <_hwerr_to_stderr+0x4a>
    67d2:	2010      	movs	r0, #16
    67d4:	e005      	b.n	67e2 <_hwerr_to_stderr+0x4a>
    67d6:	2000      	movs	r0, #0
    67d8:	4283      	cmp	r3, r0
    67da:	da03      	bge.n	67e4 <_hwerr_to_stderr+0x4c>
    67dc:	2005      	movs	r0, #5
    67de:	e000      	b.n	67e2 <_hwerr_to_stderr+0x4a>
    67e0:	2002      	movs	r0, #2
    67e2:	4240      	negs	r0, r0
    67e4:	bd00      	pop	{pc}
	...

000067e8 <_mqtt_send_wait>:
    67e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    67ea:	1c04      	adds	r4, r0, #0
    67ec:	3443      	adds	r4, #67	; 0x43
    67ee:	7823      	ldrb	r3, [r4, #0]
    67f0:	1c05      	adds	r5, r0, #0
    67f2:	07d8      	lsls	r0, r3, #31
    67f4:	d51c      	bpl.n	6830 <_mqtt_send_wait+0x48>
    67f6:	2604      	movs	r6, #4
    67f8:	4333      	orrs	r3, r6
    67fa:	7023      	strb	r3, [r4, #0]
    67fc:	2002      	movs	r0, #2
    67fe:	5628      	ldrsb	r0, [r5, r0]
    6800:	b292      	uxth	r2, r2
    6802:	2300      	movs	r3, #0
    6804:	4f0c      	ldr	r7, [pc, #48]	; (6838 <_mqtt_send_wait+0x50>)
    6806:	47b8      	blx	r7
    6808:	2800      	cmp	r0, #0
    680a:	da05      	bge.n	6818 <_mqtt_send_wait+0x30>
    680c:	7823      	ldrb	r3, [r4, #0]
    680e:	43b3      	bics	r3, r6
    6810:	7023      	strb	r3, [r4, #0]
    6812:	4b0a      	ldr	r3, [pc, #40]	; (683c <_mqtt_send_wait+0x54>)
    6814:	4798      	blx	r3
    6816:	e00d      	b.n	6834 <_mqtt_send_wait+0x4c>
    6818:	7822      	ldrb	r2, [r4, #0]
    681a:	2314      	movs	r3, #20
    681c:	4013      	ands	r3, r2
    681e:	2000      	movs	r0, #0
    6820:	2b04      	cmp	r3, #4
    6822:	d107      	bne.n	6834 <_mqtt_send_wait+0x4c>
    6824:	4b06      	ldr	r3, [pc, #24]	; (6840 <_mqtt_send_wait+0x58>)
    6826:	4798      	blx	r3
    6828:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    682a:	4b06      	ldr	r3, [pc, #24]	; (6844 <_mqtt_send_wait+0x5c>)
    682c:	4798      	blx	r3
    682e:	e7f3      	b.n	6818 <_mqtt_send_wait+0x30>
    6830:	2001      	movs	r0, #1
    6832:	4240      	negs	r0, r0
    6834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6836:	46c0      	nop			; (mov r8, r8)
    6838:	00003af5 	.word	0x00003af5
    683c:	00006799 	.word	0x00006799
    6840:	00001d91 	.word	0x00001d91
    6844:	0000619d 	.word	0x0000619d

00006848 <mqtt_get_config_defaults>:
    6848:	4b07      	ldr	r3, [pc, #28]	; (6868 <mqtt_get_config_defaults+0x20>)
    684a:	2240      	movs	r2, #64	; 0x40
    684c:	8003      	strh	r3, [r0, #0]
    684e:	2396      	movs	r3, #150	; 0x96
    6850:	009b      	lsls	r3, r3, #2
    6852:	8103      	strh	r3, [r0, #8]
    6854:	6102      	str	r2, [r0, #16]
    6856:	2300      	movs	r3, #0
    6858:	2220      	movs	r2, #32
    685a:	7083      	strb	r3, [r0, #2]
    685c:	6043      	str	r3, [r0, #4]
    685e:	60c3      	str	r3, [r0, #12]
    6860:	6142      	str	r2, [r0, #20]
    6862:	7603      	strb	r3, [r0, #24]
    6864:	4770      	bx	lr
    6866:	46c0      	nop			; (mov r8, r8)
    6868:	0000075b 	.word	0x0000075b

0000686c <mqtt_init>:
    686c:	b538      	push	{r3, r4, r5, lr}
    686e:	1c04      	adds	r4, r0, #0
    6870:	1c0d      	adds	r5, r1, #0
    6872:	2800      	cmp	r0, #0
    6874:	d030      	beq.n	68d8 <mqtt_init+0x6c>
    6876:	2900      	cmp	r1, #0
    6878:	d02e      	beq.n	68d8 <mqtt_init+0x6c>
    687a:	690b      	ldr	r3, [r1, #16]
    687c:	2b00      	cmp	r3, #0
    687e:	d02b      	beq.n	68d8 <mqtt_init+0x6c>
    6880:	684b      	ldr	r3, [r1, #4]
    6882:	2b00      	cmp	r3, #0
    6884:	d028      	beq.n	68d8 <mqtt_init+0x6c>
    6886:	2100      	movs	r1, #0
    6888:	2274      	movs	r2, #116	; 0x74
    688a:	4b16      	ldr	r3, [pc, #88]	; (68e4 <mqtt_init+0x78>)
    688c:	4798      	blx	r3
    688e:	1c20      	adds	r0, r4, #0
    6890:	4b15      	ldr	r3, [pc, #84]	; (68e8 <mqtt_init+0x7c>)
    6892:	3058      	adds	r0, #88	; 0x58
    6894:	1c29      	adds	r1, r5, #0
    6896:	221c      	movs	r2, #28
    6898:	4798      	blx	r3
    689a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    689c:	2b00      	cmp	r3, #0
    689e:	d10b      	bne.n	68b8 <mqtt_init+0x4c>
    68a0:	6928      	ldr	r0, [r5, #16]
    68a2:	4b12      	ldr	r3, [pc, #72]	; (68ec <mqtt_init+0x80>)
    68a4:	4798      	blx	r3
    68a6:	6660      	str	r0, [r4, #100]	; 0x64
    68a8:	2800      	cmp	r0, #0
    68aa:	d017      	beq.n	68dc <mqtt_init+0x70>
    68ac:	1c23      	adds	r3, r4, #0
    68ae:	3343      	adds	r3, #67	; 0x43
    68b0:	781a      	ldrb	r2, [r3, #0]
    68b2:	2120      	movs	r1, #32
    68b4:	430a      	orrs	r2, r1
    68b6:	701a      	strb	r2, [r3, #0]
    68b8:	892a      	ldrh	r2, [r5, #8]
    68ba:	23fa      	movs	r3, #250	; 0xfa
    68bc:	005b      	lsls	r3, r3, #1
    68be:	4353      	muls	r3, r2
    68c0:	6868      	ldr	r0, [r5, #4]
    68c2:	490b      	ldr	r1, [pc, #44]	; (68f0 <mqtt_init+0x84>)
    68c4:	1c22      	adds	r2, r4, #0
    68c6:	4d0b      	ldr	r5, [pc, #44]	; (68f4 <mqtt_init+0x88>)
    68c8:	47a8      	blx	r5
    68ca:	1c03      	adds	r3, r0, #0
    68cc:	6520      	str	r0, [r4, #80]	; 0x50
    68ce:	2000      	movs	r0, #0
    68d0:	4283      	cmp	r3, r0
    68d2:	da05      	bge.n	68e0 <mqtt_init+0x74>
    68d4:	201c      	movs	r0, #28
    68d6:	e002      	b.n	68de <mqtt_init+0x72>
    68d8:	2016      	movs	r0, #22
    68da:	e000      	b.n	68de <mqtt_init+0x72>
    68dc:	200c      	movs	r0, #12
    68de:	4240      	negs	r0, r0
    68e0:	bd38      	pop	{r3, r4, r5, pc}
    68e2:	46c0      	nop			; (mov r8, r8)
    68e4:	00009483 	.word	0x00009483
    68e8:	0000944d 	.word	0x0000944d
    68ec:	00009439 	.word	0x00009439
    68f0:	00006ecd 	.word	0x00006ecd
    68f4:	00006129 	.word	0x00006129

000068f8 <mqtt_register_callback>:
    68f8:	2800      	cmp	r0, #0
    68fa:	d002      	beq.n	6902 <mqtt_register_callback+0xa>
    68fc:	6541      	str	r1, [r0, #84]	; 0x54
    68fe:	2000      	movs	r0, #0
    6900:	e001      	b.n	6906 <mqtt_register_callback+0xe>
    6902:	2016      	movs	r0, #22
    6904:	4240      	negs	r0, r0
    6906:	4770      	bx	lr

00006908 <mqtt_socket_resolve_handler>:
    6908:	b5f0      	push	{r4, r5, r6, r7, lr}
    690a:	1c06      	adds	r6, r0, #0
    690c:	b085      	sub	sp, #20
    690e:	1c0f      	adds	r7, r1, #0
    6910:	2400      	movs	r4, #0
    6912:	4b0f      	ldr	r3, [pc, #60]	; (6950 <mqtt_socket_resolve_handler+0x48>)
    6914:	58e5      	ldr	r5, [r4, r3]
    6916:	2d00      	cmp	r5, #0
    6918:	d015      	beq.n	6946 <mqtt_socket_resolve_handler+0x3e>
    691a:	1ce9      	adds	r1, r5, #3
    691c:	1c30      	adds	r0, r6, #0
    691e:	4b0d      	ldr	r3, [pc, #52]	; (6954 <mqtt_socket_resolve_handler+0x4c>)
    6920:	4798      	blx	r3
    6922:	2800      	cmp	r0, #0
    6924:	d10f      	bne.n	6946 <mqtt_socket_resolve_handler+0x3e>
    6926:	466a      	mov	r2, sp
    6928:	2302      	movs	r3, #2
    692a:	8013      	strh	r3, [r2, #0]
    692c:	1c2b      	adds	r3, r5, #0
    692e:	3358      	adds	r3, #88	; 0x58
    6930:	881b      	ldrh	r3, [r3, #0]
    6932:	9701      	str	r7, [sp, #4]
    6934:	ba5b      	rev16	r3, r3
    6936:	8053      	strh	r3, [r2, #2]
    6938:	2002      	movs	r0, #2
    693a:	5628      	ldrsb	r0, [r5, r0]
    693c:	4669      	mov	r1, sp
    693e:	2210      	movs	r2, #16
    6940:	4b05      	ldr	r3, [pc, #20]	; (6958 <mqtt_socket_resolve_handler+0x50>)
    6942:	4798      	blx	r3
    6944:	e002      	b.n	694c <mqtt_socket_resolve_handler+0x44>
    6946:	3404      	adds	r4, #4
    6948:	2c1c      	cmp	r4, #28
    694a:	d1e2      	bne.n	6912 <mqtt_socket_resolve_handler+0xa>
    694c:	b005      	add	sp, #20
    694e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6950:	20000254 	.word	0x20000254
    6954:	000098e9 	.word	0x000098e9
    6958:	00003a65 	.word	0x00003a65

0000695c <mqtt_connect>:
    695c:	b5f0      	push	{r4, r5, r6, r7, lr}
    695e:	1c04      	adds	r4, r0, #0
    6960:	b089      	sub	sp, #36	; 0x24
    6962:	1c0d      	adds	r5, r1, #0
    6964:	2800      	cmp	r0, #0
    6966:	d051      	beq.n	6a0c <mqtt_connect+0xb0>
    6968:	2900      	cmp	r1, #0
    696a:	d04f      	beq.n	6a0c <mqtt_connect+0xb0>
    696c:	1c08      	adds	r0, r1, #0
    696e:	4b39      	ldr	r3, [pc, #228]	; (6a54 <mqtt_connect+0xf8>)
    6970:	4798      	blx	r3
    6972:	2840      	cmp	r0, #64	; 0x40
    6974:	d84c      	bhi.n	6a10 <mqtt_connect+0xb4>
    6976:	1c21      	adds	r1, r4, #0
    6978:	3143      	adds	r1, #67	; 0x43
    697a:	780b      	ldrb	r3, [r1, #0]
    697c:	9101      	str	r1, [sp, #4]
    697e:	07db      	lsls	r3, r3, #31
    6980:	0fd9      	lsrs	r1, r3, #31
    6982:	466a      	mov	r2, sp
    6984:	b2ce      	uxtb	r6, r1
    6986:	1ce0      	adds	r0, r4, #3
    6988:	7211      	strb	r1, [r2, #8]
    698a:	2e00      	cmp	r6, #0
    698c:	d142      	bne.n	6a14 <mqtt_connect+0xb8>
    698e:	2701      	movs	r7, #1
    6990:	1c29      	adds	r1, r5, #0
    6992:	4b31      	ldr	r3, [pc, #196]	; (6a58 <mqtt_connect+0xfc>)
    6994:	8027      	strh	r7, [r4, #0]
    6996:	4798      	blx	r3
    6998:	9a01      	ldr	r2, [sp, #4]
    699a:	2002      	movs	r0, #2
    699c:	7813      	ldrb	r3, [r2, #0]
    699e:	9901      	ldr	r1, [sp, #4]
    69a0:	43bb      	bics	r3, r7
    69a2:	4383      	bics	r3, r0
    69a4:	22e3      	movs	r2, #227	; 0xe3
    69a6:	4013      	ands	r3, r2
    69a8:	466a      	mov	r2, sp
    69aa:	700b      	strb	r3, [r1, #0]
    69ac:	7a12      	ldrb	r2, [r2, #8]
    69ae:	1c23      	adds	r3, r4, #0
    69b0:	3348      	adds	r3, #72	; 0x48
    69b2:	6466      	str	r6, [r4, #68]	; 0x44
    69b4:	701a      	strb	r2, [r3, #0]
    69b6:	7c9a      	ldrb	r2, [r3, #18]
    69b8:	805e      	strh	r6, [r3, #2]
    69ba:	1e53      	subs	r3, r2, #1
    69bc:	419a      	sbcs	r2, r3
    69be:	b2d2      	uxtb	r2, r2
    69c0:	1c39      	adds	r1, r7, #0
    69c2:	4b26      	ldr	r3, [pc, #152]	; (6a5c <mqtt_connect+0x100>)
    69c4:	4798      	blx	r3
    69c6:	70a0      	strb	r0, [r4, #2]
    69c8:	2800      	cmp	r0, #0
    69ca:	db25      	blt.n	6a18 <mqtt_connect+0xbc>
    69cc:	4b24      	ldr	r3, [pc, #144]	; (6a60 <mqtt_connect+0x104>)
    69ce:	0080      	lsls	r0, r0, #2
    69d0:	50c4      	str	r4, [r0, r3]
    69d2:	1c2b      	adds	r3, r5, #0
    69d4:	781f      	ldrb	r7, [r3, #0]
    69d6:	2f00      	cmp	r7, #0
    69d8:	d026      	beq.n	6a28 <mqtt_connect+0xcc>
    69da:	2220      	movs	r2, #32
    69dc:	1c39      	adds	r1, r7, #0
    69de:	4391      	bics	r1, r2
    69e0:	1c0a      	adds	r2, r1, #0
    69e2:	3a41      	subs	r2, #65	; 0x41
    69e4:	b2d2      	uxtb	r2, r2
    69e6:	3301      	adds	r3, #1
    69e8:	2a05      	cmp	r2, #5
    69ea:	d90d      	bls.n	6a08 <mqtt_connect+0xac>
    69ec:	2f3a      	cmp	r7, #58	; 0x3a
    69ee:	d00b      	beq.n	6a08 <mqtt_connect+0xac>
    69f0:	2f2f      	cmp	r7, #47	; 0x2f
    69f2:	d009      	beq.n	6a08 <mqtt_connect+0xac>
    69f4:	2f2e      	cmp	r7, #46	; 0x2e
    69f6:	d102      	bne.n	69fe <mqtt_connect+0xa2>
    69f8:	2e00      	cmp	r6, #0
    69fa:	d0eb      	beq.n	69d4 <mqtt_connect+0x78>
    69fc:	e00f      	b.n	6a1e <mqtt_connect+0xc2>
    69fe:	2230      	movs	r2, #48	; 0x30
    6a00:	4017      	ands	r7, r2
    6a02:	4297      	cmp	r7, r2
    6a04:	d0e6      	beq.n	69d4 <mqtt_connect+0x78>
    6a06:	e00a      	b.n	6a1e <mqtt_connect+0xc2>
    6a08:	2601      	movs	r6, #1
    6a0a:	e7e3      	b.n	69d4 <mqtt_connect+0x78>
    6a0c:	2016      	movs	r0, #22
    6a0e:	e004      	b.n	6a1a <mqtt_connect+0xbe>
    6a10:	205b      	movs	r0, #91	; 0x5b
    6a12:	e002      	b.n	6a1a <mqtt_connect+0xbe>
    6a14:	2078      	movs	r0, #120	; 0x78
    6a16:	e000      	b.n	6a1a <mqtt_connect+0xbe>
    6a18:	201c      	movs	r0, #28
    6a1a:	4240      	negs	r0, r0
    6a1c:	e017      	b.n	6a4e <mqtt_connect+0xf2>
    6a1e:	1c28      	adds	r0, r5, #0
    6a20:	4b10      	ldr	r3, [pc, #64]	; (6a64 <mqtt_connect+0x108>)
    6a22:	4798      	blx	r3
    6a24:	2000      	movs	r0, #0
    6a26:	e012      	b.n	6a4e <mqtt_connect+0xf2>
    6a28:	466a      	mov	r2, sp
    6a2a:	2302      	movs	r3, #2
    6a2c:	8213      	strh	r3, [r2, #16]
    6a2e:	1c23      	adds	r3, r4, #0
    6a30:	3358      	adds	r3, #88	; 0x58
    6a32:	881b      	ldrh	r3, [r3, #0]
    6a34:	1c28      	adds	r0, r5, #0
    6a36:	ba5b      	rev16	r3, r3
    6a38:	8253      	strh	r3, [r2, #18]
    6a3a:	4b0b      	ldr	r3, [pc, #44]	; (6a68 <mqtt_connect+0x10c>)
    6a3c:	4798      	blx	r3
    6a3e:	9005      	str	r0, [sp, #20]
    6a40:	2002      	movs	r0, #2
    6a42:	5620      	ldrsb	r0, [r4, r0]
    6a44:	a904      	add	r1, sp, #16
    6a46:	2210      	movs	r2, #16
    6a48:	4b08      	ldr	r3, [pc, #32]	; (6a6c <mqtt_connect+0x110>)
    6a4a:	4798      	blx	r3
    6a4c:	1c38      	adds	r0, r7, #0
    6a4e:	b009      	add	sp, #36	; 0x24
    6a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a52:	46c0      	nop			; (mov r8, r8)
    6a54:	0000990d 	.word	0x0000990d
    6a58:	000098fd 	.word	0x000098fd
    6a5c:	000038e1 	.word	0x000038e1
    6a60:	20000254 	.word	0x20000254
    6a64:	00003d29 	.word	0x00003d29
    6a68:	00003cbd 	.word	0x00003cbd
    6a6c:	00003a65 	.word	0x00003a65

00006a70 <mqtt_connect_broker>:
    6a70:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a72:	b095      	sub	sp, #84	; 0x54
    6a74:	af02      	add	r7, sp, #8
    6a76:	617b      	str	r3, [r7, #20]
    6a78:	1c3b      	adds	r3, r7, #0
    6a7a:	3370      	adds	r3, #112	; 0x70
    6a7c:	781b      	ldrb	r3, [r3, #0]
    6a7e:	1c05      	adds	r5, r0, #0
    6a80:	60fb      	str	r3, [r7, #12]
    6a82:	1c3b      	adds	r3, r7, #0
    6a84:	3374      	adds	r3, #116	; 0x74
    6a86:	781b      	ldrb	r3, [r3, #0]
    6a88:	6139      	str	r1, [r7, #16]
    6a8a:	61fa      	str	r2, [r7, #28]
    6a8c:	60bb      	str	r3, [r7, #8]
    6a8e:	2800      	cmp	r0, #0
    6a90:	d101      	bne.n	6a96 <mqtt_connect_broker+0x26>
    6a92:	2016      	movs	r0, #22
    6a94:	e129      	b.n	6cea <mqtt_connect_broker+0x27a>
    6a96:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    6a98:	4668      	mov	r0, sp
    6a9a:	3307      	adds	r3, #7
    6a9c:	08db      	lsrs	r3, r3, #3
    6a9e:	00db      	lsls	r3, r3, #3
    6aa0:	1ac0      	subs	r0, r0, r3
    6aa2:	4685      	mov	sp, r0
    6aa4:	ac02      	add	r4, sp, #8
    6aa6:	607c      	str	r4, [r7, #4]
    6aa8:	6e3c      	ldr	r4, [r7, #96]	; 0x60
    6aaa:	2c00      	cmp	r4, #0
    6aac:	d0f1      	beq.n	6a92 <mqtt_connect_broker+0x22>
    6aae:	1c2b      	adds	r3, r5, #0
    6ab0:	3343      	adds	r3, #67	; 0x43
    6ab2:	781b      	ldrb	r3, [r3, #0]
    6ab4:	07d8      	lsls	r0, r3, #31
    6ab6:	d400      	bmi.n	6aba <mqtt_connect_broker+0x4a>
    6ab8:	e112      	b.n	6ce0 <mqtt_connect_broker+0x270>
    6aba:	079a      	lsls	r2, r3, #30
    6abc:	d500      	bpl.n	6ac0 <mqtt_connect_broker+0x50>
    6abe:	e111      	b.n	6ce4 <mqtt_connect_broker+0x274>
    6ac0:	071c      	lsls	r4, r3, #28
    6ac2:	d40b      	bmi.n	6adc <mqtt_connect_broker+0x6c>
    6ac4:	4e8b      	ldr	r6, [pc, #556]	; (6cf4 <mqtt_connect_broker+0x284>)
    6ac6:	6e38      	ldr	r0, [r7, #96]	; 0x60
    6ac8:	47b0      	blx	r6
    6aca:	1c03      	adds	r3, r0, #0
    6acc:	61b8      	str	r0, [r7, #24]
    6ace:	69f8      	ldr	r0, [r7, #28]
    6ad0:	330e      	adds	r3, #14
    6ad2:	1c34      	adds	r4, r6, #0
    6ad4:	2800      	cmp	r0, #0
    6ad6:	d113      	bne.n	6b00 <mqtt_connect_broker+0x90>
    6ad8:	1c1e      	adds	r6, r3, #0
    6ada:	e01d      	b.n	6b18 <mqtt_connect_broker+0xa8>
    6adc:	1c2b      	adds	r3, r5, #0
    6ade:	3370      	adds	r3, #112	; 0x70
    6ae0:	781b      	ldrb	r3, [r3, #0]
    6ae2:	2b00      	cmp	r3, #0
    6ae4:	d000      	beq.n	6ae8 <mqtt_connect_broker+0x78>
    6ae6:	e0ff      	b.n	6ce8 <mqtt_connect_broker+0x278>
    6ae8:	1c2b      	adds	r3, r5, #0
    6aea:	3343      	adds	r3, #67	; 0x43
    6aec:	781b      	ldrb	r3, [r3, #0]
    6aee:	071a      	lsls	r2, r3, #28
    6af0:	d5e8      	bpl.n	6ac4 <mqtt_connect_broker+0x54>
    6af2:	4b81      	ldr	r3, [pc, #516]	; (6cf8 <mqtt_connect_broker+0x288>)
    6af4:	2000      	movs	r0, #0
    6af6:	4798      	blx	r3
    6af8:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    6afa:	4b80      	ldr	r3, [pc, #512]	; (6cfc <mqtt_connect_broker+0x28c>)
    6afc:	4798      	blx	r3
    6afe:	e7f3      	b.n	6ae8 <mqtt_connect_broker+0x78>
    6b00:	69f8      	ldr	r0, [r7, #28]
    6b02:	47b0      	blx	r6
    6b04:	69be      	ldr	r6, [r7, #24]
    6b06:	697b      	ldr	r3, [r7, #20]
    6b08:	3610      	adds	r6, #16
    6b0a:	1836      	adds	r6, r6, r0
    6b0c:	2b00      	cmp	r3, #0
    6b0e:	d003      	beq.n	6b18 <mqtt_connect_broker+0xa8>
    6b10:	1c18      	adds	r0, r3, #0
    6b12:	47a0      	blx	r4
    6b14:	3602      	adds	r6, #2
    6b16:	1836      	adds	r6, r6, r0
    6b18:	6e78      	ldr	r0, [r7, #100]	; 0x64
    6b1a:	2800      	cmp	r0, #0
    6b1c:	d007      	beq.n	6b2e <mqtt_connect_broker+0xbe>
    6b1e:	47a0      	blx	r4
    6b20:	3602      	adds	r6, #2
    6b22:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    6b24:	1830      	adds	r0, r6, r0
    6b26:	1906      	adds	r6, r0, r4
    6b28:	2c00      	cmp	r4, #0
    6b2a:	d100      	bne.n	6b2e <mqtt_connect_broker+0xbe>
    6b2c:	1c06      	adds	r6, r0, #0
    6b2e:	69fc      	ldr	r4, [r7, #28]
    6b30:	2c00      	cmp	r4, #0
    6b32:	d006      	beq.n	6b42 <mqtt_connect_broker+0xd2>
    6b34:	24c0      	movs	r4, #192	; 0xc0
    6b36:	61bc      	str	r4, [r7, #24]
    6b38:	697c      	ldr	r4, [r7, #20]
    6b3a:	2c00      	cmp	r4, #0
    6b3c:	d103      	bne.n	6b46 <mqtt_connect_broker+0xd6>
    6b3e:	2480      	movs	r4, #128	; 0x80
    6b40:	e000      	b.n	6b44 <mqtt_connect_broker+0xd4>
    6b42:	69fc      	ldr	r4, [r7, #28]
    6b44:	61bc      	str	r4, [r7, #24]
    6b46:	6e7c      	ldr	r4, [r7, #100]	; 0x64
    6b48:	2c00      	cmp	r4, #0
    6b4a:	d00f      	beq.n	6b6c <mqtt_connect_broker+0xfc>
    6b4c:	68bc      	ldr	r4, [r7, #8]
    6b4e:	2c00      	cmp	r4, #0
    6b50:	d003      	beq.n	6b5a <mqtt_connect_broker+0xea>
    6b52:	69bc      	ldr	r4, [r7, #24]
    6b54:	2320      	movs	r3, #32
    6b56:	431c      	orrs	r4, r3
    6b58:	61bc      	str	r4, [r7, #24]
    6b5a:	68fc      	ldr	r4, [r7, #12]
    6b5c:	2303      	movs	r3, #3
    6b5e:	4023      	ands	r3, r4
    6b60:	00db      	lsls	r3, r3, #3
    6b62:	69bc      	ldr	r4, [r7, #24]
    6b64:	2204      	movs	r2, #4
    6b66:	4313      	orrs	r3, r2
    6b68:	431c      	orrs	r4, r3
    6b6a:	61bc      	str	r4, [r7, #24]
    6b6c:	693c      	ldr	r4, [r7, #16]
    6b6e:	2c00      	cmp	r4, #0
    6b70:	d003      	beq.n	6b7a <mqtt_connect_broker+0x10a>
    6b72:	69bc      	ldr	r4, [r7, #24]
    6b74:	2302      	movs	r3, #2
    6b76:	431c      	orrs	r4, r3
    6b78:	61bc      	str	r4, [r7, #24]
    6b7a:	1c2b      	adds	r3, r5, #0
    6b7c:	3343      	adds	r3, #67	; 0x43
    6b7e:	781a      	ldrb	r2, [r3, #0]
    6b80:	2108      	movs	r1, #8
    6b82:	430a      	orrs	r2, r1
    6b84:	701a      	strb	r2, [r3, #0]
    6b86:	1c38      	adds	r0, r7, #0
    6b88:	9500      	str	r5, [sp, #0]
    6b8a:	3020      	adds	r0, #32
    6b8c:	6879      	ldr	r1, [r7, #4]
    6b8e:	4b5c      	ldr	r3, [pc, #368]	; (6d00 <mqtt_connect_broker+0x290>)
    6b90:	6eea      	ldr	r2, [r5, #108]	; 0x6c
    6b92:	4c5c      	ldr	r4, [pc, #368]	; (6d04 <mqtt_connect_broker+0x294>)
    6b94:	47a0      	blx	r4
    6b96:	1c38      	adds	r0, r7, #0
    6b98:	3020      	adds	r0, #32
    6b9a:	2110      	movs	r1, #16
    6b9c:	4b5a      	ldr	r3, [pc, #360]	; (6d08 <mqtt_connect_broker+0x298>)
    6b9e:	4798      	blx	r3
    6ba0:	2e80      	cmp	r6, #128	; 0x80
    6ba2:	dd09      	ble.n	6bb8 <mqtt_connect_broker+0x148>
    6ba4:	2180      	movs	r1, #128	; 0x80
    6ba6:	4249      	negs	r1, r1
    6ba8:	4331      	orrs	r1, r6
    6baa:	1c38      	adds	r0, r7, #0
    6bac:	b249      	sxtb	r1, r1
    6bae:	3020      	adds	r0, #32
    6bb0:	4c55      	ldr	r4, [pc, #340]	; (6d08 <mqtt_connect_broker+0x298>)
    6bb2:	47a0      	blx	r4
    6bb4:	11f6      	asrs	r6, r6, #7
    6bb6:	e7f3      	b.n	6ba0 <mqtt_connect_broker+0x130>
    6bb8:	4b54      	ldr	r3, [pc, #336]	; (6d0c <mqtt_connect_broker+0x29c>)
    6bba:	401e      	ands	r6, r3
    6bbc:	d504      	bpl.n	6bc8 <mqtt_connect_broker+0x158>
    6bbe:	2380      	movs	r3, #128	; 0x80
    6bc0:	3e01      	subs	r6, #1
    6bc2:	425b      	negs	r3, r3
    6bc4:	431e      	orrs	r6, r3
    6bc6:	3601      	adds	r6, #1
    6bc8:	1c38      	adds	r0, r7, #0
    6bca:	b271      	sxtb	r1, r6
    6bcc:	3020      	adds	r0, #32
    6bce:	4c4e      	ldr	r4, [pc, #312]	; (6d08 <mqtt_connect_broker+0x298>)
    6bd0:	47a0      	blx	r4
    6bd2:	1c38      	adds	r0, r7, #0
    6bd4:	4c4e      	ldr	r4, [pc, #312]	; (6d10 <mqtt_connect_broker+0x2a0>)
    6bd6:	3020      	adds	r0, #32
    6bd8:	2106      	movs	r1, #6
    6bda:	47a0      	blx	r4
    6bdc:	1c38      	adds	r0, r7, #0
    6bde:	4b4d      	ldr	r3, [pc, #308]	; (6d14 <mqtt_connect_broker+0x2a4>)
    6be0:	3020      	adds	r0, #32
    6be2:	494d      	ldr	r1, [pc, #308]	; (6d18 <mqtt_connect_broker+0x2a8>)
    6be4:	2206      	movs	r2, #6
    6be6:	4798      	blx	r3
    6be8:	1c38      	adds	r0, r7, #0
    6bea:	3020      	adds	r0, #32
    6bec:	2103      	movs	r1, #3
    6bee:	4a46      	ldr	r2, [pc, #280]	; (6d08 <mqtt_connect_broker+0x298>)
    6bf0:	4790      	blx	r2
    6bf2:	69bb      	ldr	r3, [r7, #24]
    6bf4:	1c38      	adds	r0, r7, #0
    6bf6:	4a44      	ldr	r2, [pc, #272]	; (6d08 <mqtt_connect_broker+0x298>)
    6bf8:	b259      	sxtb	r1, r3
    6bfa:	3020      	adds	r0, #32
    6bfc:	4790      	blx	r2
    6bfe:	1c2b      	adds	r3, r5, #0
    6c00:	3360      	adds	r3, #96	; 0x60
    6c02:	2000      	movs	r0, #0
    6c04:	5e19      	ldrsh	r1, [r3, r0]
    6c06:	1c38      	adds	r0, r7, #0
    6c08:	3020      	adds	r0, #32
    6c0a:	47a0      	blx	r4
    6c0c:	4e39      	ldr	r6, [pc, #228]	; (6cf4 <mqtt_connect_broker+0x284>)
    6c0e:	6e38      	ldr	r0, [r7, #96]	; 0x60
    6c10:	47b0      	blx	r6
    6c12:	b201      	sxth	r1, r0
    6c14:	1c38      	adds	r0, r7, #0
    6c16:	3020      	adds	r0, #32
    6c18:	47a0      	blx	r4
    6c1a:	6e38      	ldr	r0, [r7, #96]	; 0x60
    6c1c:	47b0      	blx	r6
    6c1e:	1c02      	adds	r2, r0, #0
    6c20:	1c38      	adds	r0, r7, #0
    6c22:	3020      	adds	r0, #32
    6c24:	6e39      	ldr	r1, [r7, #96]	; 0x60
    6c26:	4b3b      	ldr	r3, [pc, #236]	; (6d14 <mqtt_connect_broker+0x2a4>)
    6c28:	4798      	blx	r3
    6c2a:	6e78      	ldr	r0, [r7, #100]	; 0x64
    6c2c:	2800      	cmp	r0, #0
    6c2e:	d015      	beq.n	6c5c <mqtt_connect_broker+0x1ec>
    6c30:	47b0      	blx	r6
    6c32:	b201      	sxth	r1, r0
    6c34:	1c38      	adds	r0, r7, #0
    6c36:	3020      	adds	r0, #32
    6c38:	47a0      	blx	r4
    6c3a:	6e78      	ldr	r0, [r7, #100]	; 0x64
    6c3c:	47b0      	blx	r6
    6c3e:	1c02      	adds	r2, r0, #0
    6c40:	1c38      	adds	r0, r7, #0
    6c42:	4c34      	ldr	r4, [pc, #208]	; (6d14 <mqtt_connect_broker+0x2a4>)
    6c44:	3020      	adds	r0, #32
    6c46:	6e79      	ldr	r1, [r7, #100]	; 0x64
    6c48:	47a0      	blx	r4
    6c4a:	6ebc      	ldr	r4, [r7, #104]	; 0x68
    6c4c:	2c00      	cmp	r4, #0
    6c4e:	d005      	beq.n	6c5c <mqtt_connect_broker+0x1ec>
    6c50:	1c38      	adds	r0, r7, #0
    6c52:	1c21      	adds	r1, r4, #0
    6c54:	3020      	adds	r0, #32
    6c56:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    6c58:	4c2e      	ldr	r4, [pc, #184]	; (6d14 <mqtt_connect_broker+0x2a4>)
    6c5a:	47a0      	blx	r4
    6c5c:	69fc      	ldr	r4, [r7, #28]
    6c5e:	2c00      	cmp	r4, #0
    6c60:	d01f      	beq.n	6ca2 <mqtt_connect_broker+0x232>
    6c62:	4e24      	ldr	r6, [pc, #144]	; (6cf4 <mqtt_connect_broker+0x284>)
    6c64:	1c20      	adds	r0, r4, #0
    6c66:	47b0      	blx	r6
    6c68:	b201      	sxth	r1, r0
    6c6a:	1c38      	adds	r0, r7, #0
    6c6c:	3020      	adds	r0, #32
    6c6e:	4c28      	ldr	r4, [pc, #160]	; (6d10 <mqtt_connect_broker+0x2a0>)
    6c70:	47a0      	blx	r4
    6c72:	69f8      	ldr	r0, [r7, #28]
    6c74:	47b0      	blx	r6
    6c76:	1c02      	adds	r2, r0, #0
    6c78:	1c38      	adds	r0, r7, #0
    6c7a:	3020      	adds	r0, #32
    6c7c:	69f9      	ldr	r1, [r7, #28]
    6c7e:	4c25      	ldr	r4, [pc, #148]	; (6d14 <mqtt_connect_broker+0x2a4>)
    6c80:	47a0      	blx	r4
    6c82:	6978      	ldr	r0, [r7, #20]
    6c84:	2800      	cmp	r0, #0
    6c86:	d00c      	beq.n	6ca2 <mqtt_connect_broker+0x232>
    6c88:	47b0      	blx	r6
    6c8a:	b201      	sxth	r1, r0
    6c8c:	1c38      	adds	r0, r7, #0
    6c8e:	4a20      	ldr	r2, [pc, #128]	; (6d10 <mqtt_connect_broker+0x2a0>)
    6c90:	3020      	adds	r0, #32
    6c92:	4790      	blx	r2
    6c94:	6978      	ldr	r0, [r7, #20]
    6c96:	47b0      	blx	r6
    6c98:	1c02      	adds	r2, r0, #0
    6c9a:	1c38      	adds	r0, r7, #0
    6c9c:	3020      	adds	r0, #32
    6c9e:	6979      	ldr	r1, [r7, #20]
    6ca0:	47a0      	blx	r4
    6ca2:	1c38      	adds	r0, r7, #0
    6ca4:	1c2c      	adds	r4, r5, #0
    6ca6:	3020      	adds	r0, #32
    6ca8:	4b1c      	ldr	r3, [pc, #112]	; (6d1c <mqtt_connect_broker+0x2ac>)
    6caa:	3443      	adds	r4, #67	; 0x43
    6cac:	4798      	blx	r3
    6cae:	7821      	ldrb	r1, [r4, #0]
    6cb0:	0789      	lsls	r1, r1, #30
    6cb2:	0fc9      	lsrs	r1, r1, #31
    6cb4:	2901      	cmp	r1, #1
    6cb6:	d10b      	bne.n	6cd0 <mqtt_connect_broker+0x260>
    6cb8:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    6cba:	2a00      	cmp	r2, #0
    6cbc:	d108      	bne.n	6cd0 <mqtt_connect_broker+0x260>
    6cbe:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    6cc0:	2b00      	cmp	r3, #0
    6cc2:	d005      	beq.n	6cd0 <mqtt_connect_broker+0x260>
    6cc4:	2034      	movs	r0, #52	; 0x34
    6cc6:	55c2      	strb	r2, [r0, r7]
    6cc8:	1c3a      	adds	r2, r7, #0
    6cca:	1c28      	adds	r0, r5, #0
    6ccc:	3234      	adds	r2, #52	; 0x34
    6cce:	4798      	blx	r3
    6cd0:	7823      	ldrb	r3, [r4, #0]
    6cd2:	2202      	movs	r2, #2
    6cd4:	4313      	orrs	r3, r2
    6cd6:	2208      	movs	r2, #8
    6cd8:	4393      	bics	r3, r2
    6cda:	7023      	strb	r3, [r4, #0]
    6cdc:	2000      	movs	r0, #0
    6cde:	e005      	b.n	6cec <mqtt_connect_broker+0x27c>
    6ce0:	2080      	movs	r0, #128	; 0x80
    6ce2:	e002      	b.n	6cea <mqtt_connect_broker+0x27a>
    6ce4:	2078      	movs	r0, #120	; 0x78
    6ce6:	e000      	b.n	6cea <mqtt_connect_broker+0x27a>
    6ce8:	200b      	movs	r0, #11
    6cea:	4240      	negs	r0, r0
    6cec:	46bd      	mov	sp, r7
    6cee:	b013      	add	sp, #76	; 0x4c
    6cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6cf2:	46c0      	nop			; (mov r8, r8)
    6cf4:	0000990d 	.word	0x0000990d
    6cf8:	00001d91 	.word	0x00001d91
    6cfc:	0000619d 	.word	0x0000619d
    6d00:	000067e9 	.word	0x000067e9
    6d04:	00005fbd 	.word	0x00005fbd
    6d08:	00005fe9 	.word	0x00005fe9
    6d0c:	8000007f 	.word	0x8000007f
    6d10:	00006011 	.word	0x00006011
    6d14:	00006029 	.word	0x00006029
    6d18:	0000bba0 	.word	0x0000bba0
    6d1c:	00005fcd 	.word	0x00005fcd

00006d20 <mqtt_subscribe>:
    6d20:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d22:	b08d      	sub	sp, #52	; 0x34
    6d24:	af02      	add	r7, sp, #8
    6d26:	1c04      	adds	r4, r0, #0
    6d28:	60b9      	str	r1, [r7, #8]
    6d2a:	607a      	str	r2, [r7, #4]
    6d2c:	d101      	bne.n	6d32 <mqtt_subscribe+0x12>
    6d2e:	2016      	movs	r0, #22
    6d30:	e086      	b.n	6e40 <mqtt_subscribe+0x120>
    6d32:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    6d34:	466a      	mov	r2, sp
    6d36:	3307      	adds	r3, #7
    6d38:	08db      	lsrs	r3, r3, #3
    6d3a:	00db      	lsls	r3, r3, #3
    6d3c:	1ad2      	subs	r2, r2, r3
    6d3e:	4695      	mov	sp, r2
    6d40:	ad02      	add	r5, sp, #8
    6d42:	603d      	str	r5, [r7, #0]
    6d44:	68bd      	ldr	r5, [r7, #8]
    6d46:	2d00      	cmp	r5, #0
    6d48:	d0f1      	beq.n	6d2e <mqtt_subscribe+0xe>
    6d4a:	687d      	ldr	r5, [r7, #4]
    6d4c:	2d02      	cmp	r5, #2
    6d4e:	d8ee      	bhi.n	6d2e <mqtt_subscribe+0xe>
    6d50:	1c05      	adds	r5, r0, #0
    6d52:	3543      	adds	r5, #67	; 0x43
    6d54:	782b      	ldrb	r3, [r5, #0]
    6d56:	079a      	lsls	r2, r3, #30
    6d58:	d56f      	bpl.n	6e3a <mqtt_subscribe+0x11a>
    6d5a:	071a      	lsls	r2, r3, #28
    6d5c:	d41a      	bmi.n	6d94 <mqtt_subscribe+0x74>
    6d5e:	68b8      	ldr	r0, [r7, #8]
    6d60:	4d39      	ldr	r5, [pc, #228]	; (6e48 <mqtt_subscribe+0x128>)
    6d62:	47a8      	blx	r5
    6d64:	1c25      	adds	r5, r4, #0
    6d66:	3543      	adds	r5, #67	; 0x43
    6d68:	782b      	ldrb	r3, [r5, #0]
    6d6a:	2208      	movs	r2, #8
    6d6c:	4313      	orrs	r3, r2
    6d6e:	702b      	strb	r3, [r5, #0]
    6d70:	60fd      	str	r5, [r7, #12]
    6d72:	1d46      	adds	r6, r0, #5
    6d74:	9400      	str	r4, [sp, #0]
    6d76:	1c38      	adds	r0, r7, #0
    6d78:	3014      	adds	r0, #20
    6d7a:	6839      	ldr	r1, [r7, #0]
    6d7c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    6d7e:	4b33      	ldr	r3, [pc, #204]	; (6e4c <mqtt_subscribe+0x12c>)
    6d80:	4d33      	ldr	r5, [pc, #204]	; (6e50 <mqtt_subscribe+0x130>)
    6d82:	47a8      	blx	r5
    6d84:	1c38      	adds	r0, r7, #0
    6d86:	217e      	movs	r1, #126	; 0x7e
    6d88:	3014      	adds	r0, #20
    6d8a:	4249      	negs	r1, r1
    6d8c:	4b31      	ldr	r3, [pc, #196]	; (6e54 <mqtt_subscribe+0x134>)
    6d8e:	4798      	blx	r3
    6d90:	4d2d      	ldr	r5, [pc, #180]	; (6e48 <mqtt_subscribe+0x128>)
    6d92:	e00e      	b.n	6db2 <mqtt_subscribe+0x92>
    6d94:	1c03      	adds	r3, r0, #0
    6d96:	3370      	adds	r3, #112	; 0x70
    6d98:	781b      	ldrb	r3, [r3, #0]
    6d9a:	2b00      	cmp	r3, #0
    6d9c:	d14f      	bne.n	6e3e <mqtt_subscribe+0x11e>
    6d9e:	782b      	ldrb	r3, [r5, #0]
    6da0:	071a      	lsls	r2, r3, #28
    6da2:	d5dc      	bpl.n	6d5e <mqtt_subscribe+0x3e>
    6da4:	4b2c      	ldr	r3, [pc, #176]	; (6e58 <mqtt_subscribe+0x138>)
    6da6:	2000      	movs	r0, #0
    6da8:	4798      	blx	r3
    6daa:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    6dac:	4b2b      	ldr	r3, [pc, #172]	; (6e5c <mqtt_subscribe+0x13c>)
    6dae:	4798      	blx	r3
    6db0:	e7f5      	b.n	6d9e <mqtt_subscribe+0x7e>
    6db2:	4b28      	ldr	r3, [pc, #160]	; (6e54 <mqtt_subscribe+0x134>)
    6db4:	2e80      	cmp	r6, #128	; 0x80
    6db6:	dd08      	ble.n	6dca <mqtt_subscribe+0xaa>
    6db8:	2180      	movs	r1, #128	; 0x80
    6dba:	4249      	negs	r1, r1
    6dbc:	4331      	orrs	r1, r6
    6dbe:	1c38      	adds	r0, r7, #0
    6dc0:	b249      	sxtb	r1, r1
    6dc2:	3014      	adds	r0, #20
    6dc4:	4798      	blx	r3
    6dc6:	11f6      	asrs	r6, r6, #7
    6dc8:	e7f3      	b.n	6db2 <mqtt_subscribe+0x92>
    6dca:	4925      	ldr	r1, [pc, #148]	; (6e60 <mqtt_subscribe+0x140>)
    6dcc:	4031      	ands	r1, r6
    6dce:	d504      	bpl.n	6dda <mqtt_subscribe+0xba>
    6dd0:	2280      	movs	r2, #128	; 0x80
    6dd2:	3901      	subs	r1, #1
    6dd4:	4252      	negs	r2, r2
    6dd6:	4311      	orrs	r1, r2
    6dd8:	3101      	adds	r1, #1
    6dda:	1c38      	adds	r0, r7, #0
    6ddc:	b249      	sxtb	r1, r1
    6dde:	3014      	adds	r0, #20
    6de0:	4798      	blx	r3
    6de2:	8821      	ldrh	r1, [r4, #0]
    6de4:	1c38      	adds	r0, r7, #0
    6de6:	1c4b      	adds	r3, r1, #1
    6de8:	8023      	strh	r3, [r4, #0]
    6dea:	b209      	sxth	r1, r1
    6dec:	3014      	adds	r0, #20
    6dee:	4e1d      	ldr	r6, [pc, #116]	; (6e64 <mqtt_subscribe+0x144>)
    6df0:	47b0      	blx	r6
    6df2:	8823      	ldrh	r3, [r4, #0]
    6df4:	2b00      	cmp	r3, #0
    6df6:	d101      	bne.n	6dfc <mqtt_subscribe+0xdc>
    6df8:	2301      	movs	r3, #1
    6dfa:	8023      	strh	r3, [r4, #0]
    6dfc:	68b8      	ldr	r0, [r7, #8]
    6dfe:	47a8      	blx	r5
    6e00:	b201      	sxth	r1, r0
    6e02:	1c38      	adds	r0, r7, #0
    6e04:	3014      	adds	r0, #20
    6e06:	47b0      	blx	r6
    6e08:	68b8      	ldr	r0, [r7, #8]
    6e0a:	47a8      	blx	r5
    6e0c:	1c02      	adds	r2, r0, #0
    6e0e:	1c38      	adds	r0, r7, #0
    6e10:	3014      	adds	r0, #20
    6e12:	68b9      	ldr	r1, [r7, #8]
    6e14:	4b14      	ldr	r3, [pc, #80]	; (6e68 <mqtt_subscribe+0x148>)
    6e16:	4798      	blx	r3
    6e18:	687d      	ldr	r5, [r7, #4]
    6e1a:	1c38      	adds	r0, r7, #0
    6e1c:	b269      	sxtb	r1, r5
    6e1e:	3014      	adds	r0, #20
    6e20:	4b0c      	ldr	r3, [pc, #48]	; (6e54 <mqtt_subscribe+0x134>)
    6e22:	4798      	blx	r3
    6e24:	1c38      	adds	r0, r7, #0
    6e26:	3014      	adds	r0, #20
    6e28:	4b10      	ldr	r3, [pc, #64]	; (6e6c <mqtt_subscribe+0x14c>)
    6e2a:	4798      	blx	r3
    6e2c:	68fd      	ldr	r5, [r7, #12]
    6e2e:	2208      	movs	r2, #8
    6e30:	782b      	ldrb	r3, [r5, #0]
    6e32:	2000      	movs	r0, #0
    6e34:	4393      	bics	r3, r2
    6e36:	702b      	strb	r3, [r5, #0]
    6e38:	e003      	b.n	6e42 <mqtt_subscribe+0x122>
    6e3a:	2080      	movs	r0, #128	; 0x80
    6e3c:	e000      	b.n	6e40 <mqtt_subscribe+0x120>
    6e3e:	200b      	movs	r0, #11
    6e40:	4240      	negs	r0, r0
    6e42:	46bd      	mov	sp, r7
    6e44:	b00b      	add	sp, #44	; 0x2c
    6e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6e48:	0000990d 	.word	0x0000990d
    6e4c:	000067e9 	.word	0x000067e9
    6e50:	00005fbd 	.word	0x00005fbd
    6e54:	00005fe9 	.word	0x00005fe9
    6e58:	00001d91 	.word	0x00001d91
    6e5c:	0000619d 	.word	0x0000619d
    6e60:	8000007f 	.word	0x8000007f
    6e64:	00006011 	.word	0x00006011
    6e68:	00006029 	.word	0x00006029
    6e6c:	00005fcd 	.word	0x00005fcd

00006e70 <_mqtt_ping>:
    6e70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6e72:	23c0      	movs	r3, #192	; 0xc0
    6e74:	a901      	add	r1, sp, #4
    6e76:	2500      	movs	r5, #0
    6e78:	700b      	strb	r3, [r1, #0]
    6e7a:	704d      	strb	r5, [r1, #1]
    6e7c:	42a8      	cmp	r0, r5
    6e7e:	d019      	beq.n	6eb4 <_mqtt_ping+0x44>
    6e80:	1c04      	adds	r4, r0, #0
    6e82:	3443      	adds	r4, #67	; 0x43
    6e84:	7823      	ldrb	r3, [r4, #0]
    6e86:	079a      	lsls	r2, r3, #30
    6e88:	d516      	bpl.n	6eb8 <_mqtt_ping+0x48>
    6e8a:	071a      	lsls	r2, r3, #28
    6e8c:	d416      	bmi.n	6ebc <_mqtt_ping+0x4c>
    6e8e:	2608      	movs	r6, #8
    6e90:	4333      	orrs	r3, r6
    6e92:	7023      	strb	r3, [r4, #0]
    6e94:	7880      	ldrb	r0, [r0, #2]
    6e96:	1c2b      	adds	r3, r5, #0
    6e98:	b240      	sxtb	r0, r0
    6e9a:	2202      	movs	r2, #2
    6e9c:	4f09      	ldr	r7, [pc, #36]	; (6ec4 <_mqtt_ping+0x54>)
    6e9e:	47b8      	blx	r7
    6ea0:	1c2b      	adds	r3, r5, #0
    6ea2:	42a8      	cmp	r0, r5
    6ea4:	da0c      	bge.n	6ec0 <_mqtt_ping+0x50>
    6ea6:	7823      	ldrb	r3, [r4, #0]
    6ea8:	43b3      	bics	r3, r6
    6eaa:	7023      	strb	r3, [r4, #0]
    6eac:	4b06      	ldr	r3, [pc, #24]	; (6ec8 <_mqtt_ping+0x58>)
    6eae:	4798      	blx	r3
    6eb0:	1c03      	adds	r3, r0, #0
    6eb2:	e005      	b.n	6ec0 <_mqtt_ping+0x50>
    6eb4:	2316      	movs	r3, #22
    6eb6:	e002      	b.n	6ebe <_mqtt_ping+0x4e>
    6eb8:	2380      	movs	r3, #128	; 0x80
    6eba:	e000      	b.n	6ebe <_mqtt_ping+0x4e>
    6ebc:	230b      	movs	r3, #11
    6ebe:	425b      	negs	r3, r3
    6ec0:	1c18      	adds	r0, r3, #0
    6ec2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6ec4:	00003af5 	.word	0x00003af5
    6ec8:	00006799 	.word	0x00006799

00006ecc <mqtt_timer_callback>:
    6ecc:	b570      	push	{r4, r5, r6, lr}
    6ece:	1c05      	adds	r5, r0, #0
    6ed0:	b086      	sub	sp, #24
    6ed2:	1c0e      	adds	r6, r1, #0
    6ed4:	1c14      	adds	r4, r2, #0
    6ed6:	2800      	cmp	r0, #0
    6ed8:	d012      	beq.n	6f00 <mqtt_timer_callback+0x34>
    6eda:	2a00      	cmp	r2, #0
    6edc:	d010      	beq.n	6f00 <mqtt_timer_callback+0x34>
    6ede:	1c10      	adds	r0, r2, #0
    6ee0:	4b08      	ldr	r3, [pc, #32]	; (6f04 <mqtt_timer_callback+0x38>)
    6ee2:	4798      	blx	r3
    6ee4:	2800      	cmp	r0, #0
    6ee6:	da04      	bge.n	6ef2 <mqtt_timer_callback+0x26>
    6ee8:	1c28      	adds	r0, r5, #0
    6eea:	1c31      	adds	r1, r6, #0
    6eec:	2200      	movs	r2, #0
    6eee:	4b06      	ldr	r3, [pc, #24]	; (6f08 <mqtt_timer_callback+0x3c>)
    6ef0:	e005      	b.n	6efe <mqtt_timer_callback+0x32>
    6ef2:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6ef4:	2b00      	cmp	r3, #0
    6ef6:	d003      	beq.n	6f00 <mqtt_timer_callback+0x34>
    6ef8:	1c20      	adds	r0, r4, #0
    6efa:	2107      	movs	r1, #7
    6efc:	aa01      	add	r2, sp, #4
    6efe:	4798      	blx	r3
    6f00:	b006      	add	sp, #24
    6f02:	bd70      	pop	{r4, r5, r6, pc}
    6f04:	00006e71 	.word	0x00006e71
    6f08:	00006161 	.word	0x00006161

00006f0c <_mqtt_puback>:
    6f0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6f0e:	2302      	movs	r3, #2
    6f10:	ac01      	add	r4, sp, #4
    6f12:	2700      	movs	r7, #0
    6f14:	7063      	strb	r3, [r4, #1]
    6f16:	42b8      	cmp	r0, r7
    6f18:	d01e      	beq.n	6f58 <_mqtt_puback+0x4c>
    6f1a:	1c05      	adds	r5, r0, #0
    6f1c:	3543      	adds	r5, #67	; 0x43
    6f1e:	782b      	ldrb	r3, [r5, #0]
    6f20:	079e      	lsls	r6, r3, #30
    6f22:	d51b      	bpl.n	6f5c <_mqtt_puback+0x50>
    6f24:	071e      	lsls	r6, r3, #28
    6f26:	d41b      	bmi.n	6f60 <_mqtt_puback+0x54>
    6f28:	2608      	movs	r6, #8
    6f2a:	4333      	orrs	r3, r6
    6f2c:	702b      	strb	r3, [r5, #0]
    6f2e:	7880      	ldrb	r0, [r0, #2]
    6f30:	7021      	strb	r1, [r4, #0]
    6f32:	0a11      	lsrs	r1, r2, #8
    6f34:	70a1      	strb	r1, [r4, #2]
    6f36:	70e2      	strb	r2, [r4, #3]
    6f38:	1c21      	adds	r1, r4, #0
    6f3a:	1c3b      	adds	r3, r7, #0
    6f3c:	b240      	sxtb	r0, r0
    6f3e:	2204      	movs	r2, #4
    6f40:	4c09      	ldr	r4, [pc, #36]	; (6f68 <_mqtt_puback+0x5c>)
    6f42:	47a0      	blx	r4
    6f44:	1c3b      	adds	r3, r7, #0
    6f46:	42b8      	cmp	r0, r7
    6f48:	da0c      	bge.n	6f64 <_mqtt_puback+0x58>
    6f4a:	782b      	ldrb	r3, [r5, #0]
    6f4c:	43b3      	bics	r3, r6
    6f4e:	702b      	strb	r3, [r5, #0]
    6f50:	4b06      	ldr	r3, [pc, #24]	; (6f6c <_mqtt_puback+0x60>)
    6f52:	4798      	blx	r3
    6f54:	1c03      	adds	r3, r0, #0
    6f56:	e005      	b.n	6f64 <_mqtt_puback+0x58>
    6f58:	2316      	movs	r3, #22
    6f5a:	e002      	b.n	6f62 <_mqtt_puback+0x56>
    6f5c:	2380      	movs	r3, #128	; 0x80
    6f5e:	e000      	b.n	6f62 <_mqtt_puback+0x56>
    6f60:	230b      	movs	r3, #11
    6f62:	425b      	negs	r3, r3
    6f64:	1c18      	adds	r0, r3, #0
    6f66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6f68:	00003af5 	.word	0x00003af5
    6f6c:	00006799 	.word	0x00006799

00006f70 <mqtt_clear_conn>:
    6f70:	b530      	push	{r4, r5, lr}
    6f72:	1c04      	adds	r4, r0, #0
    6f74:	b087      	sub	sp, #28
    6f76:	2800      	cmp	r0, #0
    6f78:	d01c      	beq.n	6fb4 <mqtt_clear_conn+0x44>
    6f7a:	2002      	movs	r0, #2
    6f7c:	4b0e      	ldr	r3, [pc, #56]	; (6fb8 <mqtt_clear_conn+0x48>)
    6f7e:	5620      	ldrsb	r0, [r4, r0]
    6f80:	4798      	blx	r3
    6f82:	1c23      	adds	r3, r4, #0
    6f84:	3343      	adds	r3, #67	; 0x43
    6f86:	781a      	ldrb	r2, [r3, #0]
    6f88:	21fc      	movs	r1, #252	; 0xfc
    6f8a:	0795      	lsls	r5, r2, #30
    6f8c:	400a      	ands	r2, r1
    6f8e:	701a      	strb	r2, [r3, #0]
    6f90:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    6f92:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    6f94:	9301      	str	r3, [sp, #4]
    6f96:	2300      	movs	r3, #0
    6f98:	64e3      	str	r3, [r4, #76]	; 0x4c
    6f9a:	6d21      	ldr	r1, [r4, #80]	; 0x50
    6f9c:	4b07      	ldr	r3, [pc, #28]	; (6fbc <mqtt_clear_conn+0x4c>)
    6f9e:	4798      	blx	r3
    6fa0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6fa2:	0fed      	lsrs	r5, r5, #31
    6fa4:	2b00      	cmp	r3, #0
    6fa6:	d005      	beq.n	6fb4 <mqtt_clear_conn+0x44>
    6fa8:	2d00      	cmp	r5, #0
    6faa:	d003      	beq.n	6fb4 <mqtt_clear_conn+0x44>
    6fac:	1c20      	adds	r0, r4, #0
    6fae:	2105      	movs	r1, #5
    6fb0:	aa01      	add	r2, sp, #4
    6fb2:	4798      	blx	r3
    6fb4:	b007      	add	sp, #28
    6fb6:	bd30      	pop	{r4, r5, pc}
    6fb8:	00003c21 	.word	0x00003c21
    6fbc:	0000618d 	.word	0x0000618d

00006fc0 <mqtt_disconnect>:
    6fc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6fc2:	23e0      	movs	r3, #224	; 0xe0
    6fc4:	ae01      	add	r6, sp, #4
    6fc6:	2700      	movs	r7, #0
    6fc8:	1c05      	adds	r5, r0, #0
    6fca:	7033      	strb	r3, [r6, #0]
    6fcc:	7077      	strb	r7, [r6, #1]
    6fce:	42b8      	cmp	r0, r7
    6fd0:	d036      	beq.n	7040 <mqtt_disconnect+0x80>
    6fd2:	1c04      	adds	r4, r0, #0
    6fd4:	3443      	adds	r4, #67	; 0x43
    6fd6:	7823      	ldrb	r3, [r4, #0]
    6fd8:	079a      	lsls	r2, r3, #30
    6fda:	d533      	bpl.n	7044 <mqtt_disconnect+0x84>
    6fdc:	42b9      	cmp	r1, r7
    6fde:	d12b      	bne.n	7038 <mqtt_disconnect+0x78>
    6fe0:	071a      	lsls	r2, r3, #28
    6fe2:	d414      	bmi.n	700e <mqtt_disconnect+0x4e>
    6fe4:	7823      	ldrb	r3, [r4, #0]
    6fe6:	2210      	movs	r2, #16
    6fe8:	4313      	orrs	r3, r2
    6fea:	2708      	movs	r7, #8
    6fec:	433b      	orrs	r3, r7
    6fee:	7023      	strb	r3, [r4, #0]
    6ff0:	2002      	movs	r0, #2
    6ff2:	5628      	ldrsb	r0, [r5, r0]
    6ff4:	1c31      	adds	r1, r6, #0
    6ff6:	2202      	movs	r2, #2
    6ff8:	2300      	movs	r3, #0
    6ffa:	4d15      	ldr	r5, [pc, #84]	; (7050 <mqtt_disconnect+0x90>)
    6ffc:	47a8      	blx	r5
    6ffe:	2800      	cmp	r0, #0
    7000:	da14      	bge.n	702c <mqtt_disconnect+0x6c>
    7002:	7823      	ldrb	r3, [r4, #0]
    7004:	43bb      	bics	r3, r7
    7006:	7023      	strb	r3, [r4, #0]
    7008:	4b12      	ldr	r3, [pc, #72]	; (7054 <mqtt_disconnect+0x94>)
    700a:	4798      	blx	r3
    700c:	e01e      	b.n	704c <mqtt_disconnect+0x8c>
    700e:	1c03      	adds	r3, r0, #0
    7010:	3370      	adds	r3, #112	; 0x70
    7012:	781b      	ldrb	r3, [r3, #0]
    7014:	2b00      	cmp	r3, #0
    7016:	d117      	bne.n	7048 <mqtt_disconnect+0x88>
    7018:	7823      	ldrb	r3, [r4, #0]
    701a:	071a      	lsls	r2, r3, #28
    701c:	d5e2      	bpl.n	6fe4 <mqtt_disconnect+0x24>
    701e:	4b0e      	ldr	r3, [pc, #56]	; (7058 <mqtt_disconnect+0x98>)
    7020:	2000      	movs	r0, #0
    7022:	4798      	blx	r3
    7024:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    7026:	4b0d      	ldr	r3, [pc, #52]	; (705c <mqtt_disconnect+0x9c>)
    7028:	4798      	blx	r3
    702a:	e7f5      	b.n	7018 <mqtt_disconnect+0x58>
    702c:	7823      	ldrb	r3, [r4, #0]
    702e:	2202      	movs	r2, #2
    7030:	4393      	bics	r3, r2
    7032:	7023      	strb	r3, [r4, #0]
    7034:	2000      	movs	r0, #0
    7036:	e009      	b.n	704c <mqtt_disconnect+0x8c>
    7038:	4b09      	ldr	r3, [pc, #36]	; (7060 <mqtt_disconnect+0xa0>)
    703a:	4798      	blx	r3
    703c:	1c38      	adds	r0, r7, #0
    703e:	e005      	b.n	704c <mqtt_disconnect+0x8c>
    7040:	2016      	movs	r0, #22
    7042:	e002      	b.n	704a <mqtt_disconnect+0x8a>
    7044:	2080      	movs	r0, #128	; 0x80
    7046:	e000      	b.n	704a <mqtt_disconnect+0x8a>
    7048:	200b      	movs	r0, #11
    704a:	4240      	negs	r0, r0
    704c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    704e:	46c0      	nop			; (mov r8, r8)
    7050:	00003af5 	.word	0x00003af5
    7054:	00006799 	.word	0x00006799
    7058:	00001d91 	.word	0x00001d91
    705c:	0000619d 	.word	0x0000619d
    7060:	00006f71 	.word	0x00006f71

00007064 <_mqtt_recv_handler>:
    7064:	b5f0      	push	{r4, r5, r6, r7, lr}
    7066:	1c04      	adds	r4, r0, #0
    7068:	6e40      	ldr	r0, [r0, #100]	; 0x64
    706a:	230f      	movs	r3, #15
    706c:	7802      	ldrb	r2, [r0, #0]
    706e:	b087      	sub	sp, #28
    7070:	1c15      	adds	r5, r2, #0
    7072:	439d      	bics	r5, r3
    7074:	2d50      	cmp	r5, #80	; 0x50
    7076:	d100      	bne.n	707a <_mqtt_recv_handler+0x16>
    7078:	e098      	b.n	71ac <_mqtt_recv_handler+0x148>
    707a:	d808      	bhi.n	708e <_mqtt_recv_handler+0x2a>
    707c:	2d30      	cmp	r5, #48	; 0x30
    707e:	d03f      	beq.n	7100 <_mqtt_recv_handler+0x9c>
    7080:	2d40      	cmp	r5, #64	; 0x40
    7082:	d100      	bne.n	7086 <_mqtt_recv_handler+0x22>
    7084:	e0b3      	b.n	71ee <_mqtt_recv_handler+0x18a>
    7086:	2d20      	cmp	r5, #32
    7088:	d000      	beq.n	708c <_mqtt_recv_handler+0x28>
    708a:	e0c3      	b.n	7214 <_mqtt_recv_handler+0x1b0>
    708c:	e00e      	b.n	70ac <_mqtt_recv_handler+0x48>
    708e:	2d70      	cmp	r5, #112	; 0x70
    7090:	d100      	bne.n	7094 <_mqtt_recv_handler+0x30>
    7092:	e0ac      	b.n	71ee <_mqtt_recv_handler+0x18a>
    7094:	d803      	bhi.n	709e <_mqtt_recv_handler+0x3a>
    7096:	2d60      	cmp	r5, #96	; 0x60
    7098:	d100      	bne.n	709c <_mqtt_recv_handler+0x38>
    709a:	e096      	b.n	71ca <_mqtt_recv_handler+0x166>
    709c:	e0ba      	b.n	7214 <_mqtt_recv_handler+0x1b0>
    709e:	2d90      	cmp	r5, #144	; 0x90
    70a0:	d100      	bne.n	70a4 <_mqtt_recv_handler+0x40>
    70a2:	e0aa      	b.n	71fa <_mqtt_recv_handler+0x196>
    70a4:	2db0      	cmp	r5, #176	; 0xb0
    70a6:	d100      	bne.n	70aa <_mqtt_recv_handler+0x46>
    70a8:	e0ad      	b.n	7206 <_mqtt_recv_handler+0x1a2>
    70aa:	e0b3      	b.n	7214 <_mqtt_recv_handler+0x1b0>
    70ac:	aa01      	add	r2, sp, #4
    70ae:	2303      	movs	r3, #3
    70b0:	2901      	cmp	r1, #1
    70b2:	d900      	bls.n	70b6 <_mqtt_recv_handler+0x52>
    70b4:	78c3      	ldrb	r3, [r0, #3]
    70b6:	7013      	strb	r3, [r2, #0]
    70b8:	7813      	ldrb	r3, [r2, #0]
    70ba:	2b00      	cmp	r3, #0
    70bc:	d00d      	beq.n	70da <_mqtt_recv_handler+0x76>
    70be:	6d63      	ldr	r3, [r4, #84]	; 0x54
    70c0:	2b00      	cmp	r3, #0
    70c2:	d002      	beq.n	70ca <_mqtt_recv_handler+0x66>
    70c4:	1c20      	adds	r0, r4, #0
    70c6:	2101      	movs	r1, #1
    70c8:	4798      	blx	r3
    70ca:	236f      	movs	r3, #111	; 0x6f
    70cc:	425b      	negs	r3, r3
    70ce:	64e3      	str	r3, [r4, #76]	; 0x4c
    70d0:	1c20      	adds	r0, r4, #0
    70d2:	2100      	movs	r1, #0
    70d4:	4b50      	ldr	r3, [pc, #320]	; (7218 <_mqtt_recv_handler+0x1b4>)
    70d6:	4798      	blx	r3
    70d8:	e09c      	b.n	7214 <_mqtt_recv_handler+0x1b0>
    70da:	1c23      	adds	r3, r4, #0
    70dc:	3343      	adds	r3, #67	; 0x43
    70de:	7819      	ldrb	r1, [r3, #0]
    70e0:	0789      	lsls	r1, r1, #30
    70e2:	0fc9      	lsrs	r1, r1, #31
    70e4:	d105      	bne.n	70f2 <_mqtt_recv_handler+0x8e>
    70e6:	781a      	ldrb	r2, [r3, #0]
    70e8:	64e1      	str	r1, [r4, #76]	; 0x4c
    70ea:	2102      	movs	r1, #2
    70ec:	430a      	orrs	r2, r1
    70ee:	701a      	strb	r2, [r3, #0]
    70f0:	e090      	b.n	7214 <_mqtt_recv_handler+0x1b0>
    70f2:	6d63      	ldr	r3, [r4, #84]	; 0x54
    70f4:	2b00      	cmp	r3, #0
    70f6:	d100      	bne.n	70fa <_mqtt_recv_handler+0x96>
    70f8:	e08c      	b.n	7214 <_mqtt_recv_handler+0x1b0>
    70fa:	1c20      	adds	r0, r4, #0
    70fc:	2101      	movs	r1, #1
    70fe:	e088      	b.n	7212 <_mqtt_recv_handler+0x1ae>
    7100:	ad01      	add	r5, sp, #4
    7102:	0713      	lsls	r3, r2, #28
    7104:	7c2a      	ldrb	r2, [r5, #16]
    7106:	0fdb      	lsrs	r3, r3, #31
    7108:	2604      	movs	r6, #4
    710a:	009b      	lsls	r3, r3, #2
    710c:	43b2      	bics	r2, r6
    710e:	431a      	orrs	r2, r3
    7110:	742a      	strb	r2, [r5, #16]
    7112:	7807      	ldrb	r7, [r0, #0]
    7114:	2303      	movs	r3, #3
    7116:	b2d2      	uxtb	r2, r2
    7118:	087f      	lsrs	r7, r7, #1
    711a:	439a      	bics	r2, r3
    711c:	401f      	ands	r7, r3
    711e:	1c13      	adds	r3, r2, #0
    7120:	433b      	orrs	r3, r7
    7122:	742b      	strb	r3, [r5, #16]
    7124:	1c43      	adds	r3, r0, #1
    7126:	7818      	ldrb	r0, [r3, #0]
    7128:	1c5a      	adds	r2, r3, #1
    712a:	287f      	cmp	r0, #127	; 0x7f
    712c:	d901      	bls.n	7132 <_mqtt_recv_handler+0xce>
    712e:	1c13      	adds	r3, r2, #0
    7130:	e7f9      	b.n	7126 <_mqtt_recv_handler+0xc2>
    7132:	7858      	ldrb	r0, [r3, #1]
    7134:	789e      	ldrb	r6, [r3, #2]
    7136:	0200      	lsls	r0, r0, #8
    7138:	4330      	orrs	r0, r6
    713a:	3303      	adds	r3, #3
    713c:	2600      	movs	r6, #0
    713e:	6068      	str	r0, [r5, #4]
    7140:	9301      	str	r3, [sp, #4]
    7142:	1818      	adds	r0, r3, r0
    7144:	42b7      	cmp	r7, r6
    7146:	d004      	beq.n	7152 <_mqtt_recv_handler+0xee>
    7148:	7806      	ldrb	r6, [r0, #0]
    714a:	7843      	ldrb	r3, [r0, #1]
    714c:	0236      	lsls	r6, r6, #8
    714e:	431e      	orrs	r6, r3
    7150:	3002      	adds	r0, #2
    7152:	1851      	adds	r1, r2, r1
    7154:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7156:	60a8      	str	r0, [r5, #8]
    7158:	1a08      	subs	r0, r1, r0
    715a:	60e8      	str	r0, [r5, #12]
    715c:	2b00      	cmp	r3, #0
    715e:	d003      	beq.n	7168 <_mqtt_recv_handler+0x104>
    7160:	1c20      	adds	r0, r4, #0
    7162:	2106      	movs	r1, #6
    7164:	1c2a      	adds	r2, r5, #0
    7166:	4798      	blx	r3
    7168:	7c2b      	ldrb	r3, [r5, #16]
    716a:	079b      	lsls	r3, r3, #30
    716c:	0f9b      	lsrs	r3, r3, #30
    716e:	2b01      	cmp	r3, #1
    7170:	d10b      	bne.n	718a <_mqtt_recv_handler+0x126>
    7172:	b2b6      	uxth	r6, r6
    7174:	1c20      	adds	r0, r4, #0
    7176:	2140      	movs	r1, #64	; 0x40
    7178:	1c32      	adds	r2, r6, #0
    717a:	4b28      	ldr	r3, [pc, #160]	; (721c <_mqtt_recv_handler+0x1b8>)
    717c:	4798      	blx	r3
    717e:	2800      	cmp	r0, #0
    7180:	d048      	beq.n	7214 <_mqtt_recv_handler+0x1b0>
    7182:	1c23      	adds	r3, r4, #0
    7184:	3348      	adds	r3, #72	; 0x48
    7186:	2240      	movs	r2, #64	; 0x40
    7188:	e00c      	b.n	71a4 <_mqtt_recv_handler+0x140>
    718a:	2b02      	cmp	r3, #2
    718c:	d142      	bne.n	7214 <_mqtt_recv_handler+0x1b0>
    718e:	b2b6      	uxth	r6, r6
    7190:	1c20      	adds	r0, r4, #0
    7192:	2150      	movs	r1, #80	; 0x50
    7194:	1c32      	adds	r2, r6, #0
    7196:	4b21      	ldr	r3, [pc, #132]	; (721c <_mqtt_recv_handler+0x1b8>)
    7198:	4798      	blx	r3
    719a:	2800      	cmp	r0, #0
    719c:	d03a      	beq.n	7214 <_mqtt_recv_handler+0x1b0>
    719e:	1c23      	adds	r3, r4, #0
    71a0:	3348      	adds	r3, #72	; 0x48
    71a2:	2250      	movs	r2, #80	; 0x50
    71a4:	344a      	adds	r4, #74	; 0x4a
    71a6:	701a      	strb	r2, [r3, #0]
    71a8:	8026      	strh	r6, [r4, #0]
    71aa:	e033      	b.n	7214 <_mqtt_recv_handler+0x1b0>
    71ac:	7885      	ldrb	r5, [r0, #2]
    71ae:	78c3      	ldrb	r3, [r0, #3]
    71b0:	022d      	lsls	r5, r5, #8
    71b2:	431d      	orrs	r5, r3
    71b4:	1c20      	adds	r0, r4, #0
    71b6:	2162      	movs	r1, #98	; 0x62
    71b8:	1c2a      	adds	r2, r5, #0
    71ba:	4b18      	ldr	r3, [pc, #96]	; (721c <_mqtt_recv_handler+0x1b8>)
    71bc:	4798      	blx	r3
    71be:	2800      	cmp	r0, #0
    71c0:	d028      	beq.n	7214 <_mqtt_recv_handler+0x1b0>
    71c2:	1c23      	adds	r3, r4, #0
    71c4:	3348      	adds	r3, #72	; 0x48
    71c6:	2260      	movs	r2, #96	; 0x60
    71c8:	e00d      	b.n	71e6 <_mqtt_recv_handler+0x182>
    71ca:	7885      	ldrb	r5, [r0, #2]
    71cc:	78c3      	ldrb	r3, [r0, #3]
    71ce:	022d      	lsls	r5, r5, #8
    71d0:	431d      	orrs	r5, r3
    71d2:	1c20      	adds	r0, r4, #0
    71d4:	2170      	movs	r1, #112	; 0x70
    71d6:	1c2a      	adds	r2, r5, #0
    71d8:	4b10      	ldr	r3, [pc, #64]	; (721c <_mqtt_recv_handler+0x1b8>)
    71da:	4798      	blx	r3
    71dc:	2800      	cmp	r0, #0
    71de:	d019      	beq.n	7214 <_mqtt_recv_handler+0x1b0>
    71e0:	1c23      	adds	r3, r4, #0
    71e2:	3348      	adds	r3, #72	; 0x48
    71e4:	2270      	movs	r2, #112	; 0x70
    71e6:	344a      	adds	r4, #74	; 0x4a
    71e8:	701a      	strb	r2, [r3, #0]
    71ea:	8025      	strh	r5, [r4, #0]
    71ec:	e012      	b.n	7214 <_mqtt_recv_handler+0x1b0>
    71ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
    71f0:	2b00      	cmp	r3, #0
    71f2:	d00f      	beq.n	7214 <_mqtt_recv_handler+0x1b0>
    71f4:	1c20      	adds	r0, r4, #0
    71f6:	2102      	movs	r1, #2
    71f8:	e00a      	b.n	7210 <_mqtt_recv_handler+0x1ac>
    71fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
    71fc:	2b00      	cmp	r3, #0
    71fe:	d009      	beq.n	7214 <_mqtt_recv_handler+0x1b0>
    7200:	1c20      	adds	r0, r4, #0
    7202:	2103      	movs	r1, #3
    7204:	e004      	b.n	7210 <_mqtt_recv_handler+0x1ac>
    7206:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7208:	2b00      	cmp	r3, #0
    720a:	d003      	beq.n	7214 <_mqtt_recv_handler+0x1b0>
    720c:	1c20      	adds	r0, r4, #0
    720e:	2104      	movs	r1, #4
    7210:	aa01      	add	r2, sp, #4
    7212:	4798      	blx	r3
    7214:	b007      	add	sp, #28
    7216:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7218:	00006fc1 	.word	0x00006fc1
    721c:	00006f0d 	.word	0x00006f0d

00007220 <mqtt_recv_packet>:
    7220:	b538      	push	{r3, r4, r5, lr}
    7222:	1e04      	subs	r4, r0, #0
    7224:	d017      	beq.n	7256 <mqtt_recv_packet+0x36>
    7226:	6c42      	ldr	r2, [r0, #68]	; 0x44
    7228:	6e83      	ldr	r3, [r0, #104]	; 0x68
    722a:	429a      	cmp	r2, r3
    722c:	d906      	bls.n	723c <mqtt_recv_packet+0x1c>
    722e:	238b      	movs	r3, #139	; 0x8b
    7230:	425b      	negs	r3, r3
    7232:	64c3      	str	r3, [r0, #76]	; 0x4c
    7234:	2100      	movs	r1, #0
    7236:	4b08      	ldr	r3, [pc, #32]	; (7258 <mqtt_recv_packet+0x38>)
    7238:	4798      	blx	r3
    723a:	e00c      	b.n	7256 <mqtt_recv_packet+0x36>
    723c:	6c62      	ldr	r2, [r4, #68]	; 0x44
    723e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    7240:	2002      	movs	r0, #2
    7242:	1899      	adds	r1, r3, r2
    7244:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    7246:	5620      	ldrsb	r0, [r4, r0]
    7248:	1a9a      	subs	r2, r3, r2
    724a:	b292      	uxth	r2, r2
    724c:	2300      	movs	r3, #0
    724e:	4d03      	ldr	r5, [pc, #12]	; (725c <mqtt_recv_packet+0x3c>)
    7250:	47a8      	blx	r5
    7252:	2800      	cmp	r0, #0
    7254:	d1f2      	bne.n	723c <mqtt_recv_packet+0x1c>
    7256:	bd38      	pop	{r3, r4, r5, pc}
    7258:	00006fc1 	.word	0x00006fc1
    725c:	00003b8d 	.word	0x00003b8d

00007260 <mqtt_recved_packet>:
    7260:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7262:	1e04      	subs	r4, r0, #0
    7264:	d042      	beq.n	72ec <mqtt_recved_packet+0x8c>
    7266:	6c63      	ldr	r3, [r4, #68]	; 0x44
    7268:	6e67      	ldr	r7, [r4, #100]	; 0x64
    726a:	18ca      	adds	r2, r1, r3
    726c:	2301      	movs	r3, #1
    726e:	9701      	str	r7, [sp, #4]
    7270:	6462      	str	r2, [r4, #68]	; 0x44
    7272:	2600      	movs	r6, #0
    7274:	1c1d      	adds	r5, r3, #0
    7276:	42a9      	cmp	r1, r5
    7278:	dc03      	bgt.n	7282 <mqtt_recved_packet+0x22>
    727a:	1c20      	adds	r0, r4, #0
    727c:	4b1c      	ldr	r3, [pc, #112]	; (72f0 <mqtt_recved_packet+0x90>)
    727e:	4798      	blx	r3
    7280:	e034      	b.n	72ec <mqtt_recved_packet+0x8c>
    7282:	9f01      	ldr	r7, [sp, #4]
    7284:	5d78      	ldrb	r0, [r7, r5]
    7286:	01df      	lsls	r7, r3, #7
    7288:	46bc      	mov	ip, r7
    728a:	2d03      	cmp	r5, #3
    728c:	d101      	bne.n	7292 <mqtt_recved_packet+0x32>
    728e:	234d      	movs	r3, #77	; 0x4d
    7290:	e00e      	b.n	72b0 <mqtt_recved_packet+0x50>
    7292:	277f      	movs	r7, #127	; 0x7f
    7294:	4007      	ands	r7, r0
    7296:	437b      	muls	r3, r7
    7298:	b240      	sxtb	r0, r0
    729a:	3501      	adds	r5, #1
    729c:	18f6      	adds	r6, r6, r3
    729e:	2800      	cmp	r0, #0
    72a0:	da01      	bge.n	72a6 <mqtt_recved_packet+0x46>
    72a2:	4663      	mov	r3, ip
    72a4:	e7e7      	b.n	7276 <mqtt_recved_packet+0x16>
    72a6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    72a8:	19af      	adds	r7, r5, r6
    72aa:	429f      	cmp	r7, r3
    72ac:	d907      	bls.n	72be <mqtt_recved_packet+0x5e>
    72ae:	238b      	movs	r3, #139	; 0x8b
    72b0:	425b      	negs	r3, r3
    72b2:	64e3      	str	r3, [r4, #76]	; 0x4c
    72b4:	1c20      	adds	r0, r4, #0
    72b6:	2100      	movs	r1, #0
    72b8:	4b0e      	ldr	r3, [pc, #56]	; (72f4 <mqtt_recved_packet+0x94>)
    72ba:	4798      	blx	r3
    72bc:	e016      	b.n	72ec <mqtt_recved_packet+0x8c>
    72be:	42ba      	cmp	r2, r7
    72c0:	d314      	bcc.n	72ec <mqtt_recved_packet+0x8c>
    72c2:	4b0d      	ldr	r3, [pc, #52]	; (72f8 <mqtt_recved_packet+0x98>)
    72c4:	1c20      	adds	r0, r4, #0
    72c6:	1c31      	adds	r1, r6, #0
    72c8:	4798      	blx	r3
    72ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
    72cc:	42bb      	cmp	r3, r7
    72ce:	d102      	bne.n	72d6 <mqtt_recved_packet+0x76>
    72d0:	2300      	movs	r3, #0
    72d2:	6463      	str	r3, [r4, #68]	; 0x44
    72d4:	e00a      	b.n	72ec <mqtt_recved_packet+0x8c>
    72d6:	1b9e      	subs	r6, r3, r6
    72d8:	9b01      	ldr	r3, [sp, #4]
    72da:	1b75      	subs	r5, r6, r5
    72dc:	19d9      	adds	r1, r3, r7
    72de:	1c18      	adds	r0, r3, #0
    72e0:	1c2a      	adds	r2, r5, #0
    72e2:	4b06      	ldr	r3, [pc, #24]	; (72fc <mqtt_recved_packet+0x9c>)
    72e4:	4798      	blx	r3
    72e6:	6465      	str	r5, [r4, #68]	; 0x44
    72e8:	2100      	movs	r1, #0
    72ea:	e7bc      	b.n	7266 <mqtt_recved_packet+0x6>
    72ec:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    72ee:	46c0      	nop			; (mov r8, r8)
    72f0:	00007221 	.word	0x00007221
    72f4:	00006fc1 	.word	0x00006fc1
    72f8:	00007065 	.word	0x00007065
    72fc:	0000945f 	.word	0x0000945f

00007300 <mqtt_socket_event_handler>:
    7300:	b570      	push	{r4, r5, r6, lr}
    7302:	4d37      	ldr	r5, [pc, #220]	; (73e0 <mqtt_socket_event_handler+0xe0>)
    7304:	0086      	lsls	r6, r0, #2
    7306:	5974      	ldr	r4, [r6, r5]
    7308:	b086      	sub	sp, #24
    730a:	2c00      	cmp	r4, #0
    730c:	d066      	beq.n	73dc <mqtt_socket_event_handler+0xdc>
    730e:	2906      	cmp	r1, #6
    7310:	d02b      	beq.n	736a <mqtt_socket_event_handler+0x6a>
    7312:	2907      	cmp	r1, #7
    7314:	d039      	beq.n	738a <mqtt_socket_event_handler+0x8a>
    7316:	2905      	cmp	r1, #5
    7318:	d160      	bne.n	73dc <mqtt_socket_event_handler+0xdc>
    731a:	2001      	movs	r0, #1
    731c:	5610      	ldrsb	r0, [r2, r0]
    731e:	4b31      	ldr	r3, [pc, #196]	; (73e4 <mqtt_socket_event_handler+0xe4>)
    7320:	4798      	blx	r3
    7322:	9001      	str	r0, [sp, #4]
    7324:	2800      	cmp	r0, #0
    7326:	da06      	bge.n	7336 <mqtt_socket_event_handler+0x36>
    7328:	2002      	movs	r0, #2
    732a:	4b2f      	ldr	r3, [pc, #188]	; (73e8 <mqtt_socket_event_handler+0xe8>)
    732c:	5620      	ldrsb	r0, [r4, r0]
    732e:	4798      	blx	r3
    7330:	2300      	movs	r3, #0
    7332:	5173      	str	r3, [r6, r5]
    7334:	e011      	b.n	735a <mqtt_socket_event_handler+0x5a>
    7336:	1c23      	adds	r3, r4, #0
    7338:	3343      	adds	r3, #67	; 0x43
    733a:	781a      	ldrb	r2, [r3, #0]
    733c:	2101      	movs	r1, #1
    733e:	430a      	orrs	r2, r1
    7340:	701a      	strb	r2, [r3, #0]
    7342:	331d      	adds	r3, #29
    7344:	881b      	ldrh	r3, [r3, #0]
    7346:	2b00      	cmp	r3, #0
    7348:	d004      	beq.n	7354 <mqtt_socket_event_handler+0x54>
    734a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    734c:	6d21      	ldr	r1, [r4, #80]	; 0x50
    734e:	2200      	movs	r2, #0
    7350:	4b26      	ldr	r3, [pc, #152]	; (73ec <mqtt_socket_event_handler+0xec>)
    7352:	4798      	blx	r3
    7354:	1c20      	adds	r0, r4, #0
    7356:	4b26      	ldr	r3, [pc, #152]	; (73f0 <mqtt_socket_event_handler+0xf0>)
    7358:	4798      	blx	r3
    735a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    735c:	2b00      	cmp	r3, #0
    735e:	d03d      	beq.n	73dc <mqtt_socket_event_handler+0xdc>
    7360:	1c20      	adds	r0, r4, #0
    7362:	2100      	movs	r1, #0
    7364:	aa01      	add	r2, sp, #4
    7366:	4798      	blx	r3
    7368:	e038      	b.n	73dc <mqtt_socket_event_handler+0xdc>
    736a:	2304      	movs	r3, #4
    736c:	5ed1      	ldrsh	r1, [r2, r3]
    736e:	2900      	cmp	r1, #0
    7370:	dd03      	ble.n	737a <mqtt_socket_event_handler+0x7a>
    7372:	1c20      	adds	r0, r4, #0
    7374:	4b1f      	ldr	r3, [pc, #124]	; (73f4 <mqtt_socket_event_handler+0xf4>)
    7376:	4798      	blx	r3
    7378:	e003      	b.n	7382 <mqtt_socket_event_handler+0x82>
    737a:	1c0b      	adds	r3, r1, #0
    737c:	1c08      	adds	r0, r1, #0
    737e:	330d      	adds	r3, #13
    7380:	d11a      	bne.n	73b8 <mqtt_socket_event_handler+0xb8>
    7382:	4b1b      	ldr	r3, [pc, #108]	; (73f0 <mqtt_socket_event_handler+0xf0>)
    7384:	1c20      	adds	r0, r4, #0
    7386:	4798      	blx	r3
    7388:	e028      	b.n	73dc <mqtt_socket_event_handler+0xdc>
    738a:	1c23      	adds	r3, r4, #0
    738c:	3343      	adds	r3, #67	; 0x43
    738e:	8810      	ldrh	r0, [r2, #0]
    7390:	781a      	ldrb	r2, [r3, #0]
    7392:	0751      	lsls	r1, r2, #29
    7394:	d402      	bmi.n	739c <mqtt_socket_event_handler+0x9c>
    7396:	2108      	movs	r1, #8
    7398:	438a      	bics	r2, r1
    739a:	701a      	strb	r2, [r3, #0]
    739c:	781a      	ldrb	r2, [r3, #0]
    739e:	2104      	movs	r1, #4
    73a0:	438a      	bics	r2, r1
    73a2:	701a      	strb	r2, [r3, #0]
    73a4:	06d3      	lsls	r3, r2, #27
    73a6:	0fde      	lsrs	r6, r3, #31
    73a8:	b200      	sxth	r0, r0
    73aa:	2b00      	cmp	r3, #0
    73ac:	db02      	blt.n	73b4 <mqtt_socket_event_handler+0xb4>
    73ae:	2800      	cmp	r0, #0
    73b0:	da08      	bge.n	73c4 <mqtt_socket_event_handler+0xc4>
    73b2:	e001      	b.n	73b8 <mqtt_socket_event_handler+0xb8>
    73b4:	2800      	cmp	r0, #0
    73b6:	da02      	bge.n	73be <mqtt_socket_event_handler+0xbe>
    73b8:	4b0a      	ldr	r3, [pc, #40]	; (73e4 <mqtt_socket_event_handler+0xe4>)
    73ba:	4798      	blx	r3
    73bc:	64e0      	str	r0, [r4, #76]	; 0x4c
    73be:	1c20      	adds	r0, r4, #0
    73c0:	4b0d      	ldr	r3, [pc, #52]	; (73f8 <mqtt_socket_event_handler+0xf8>)
    73c2:	e7e0      	b.n	7386 <mqtt_socket_event_handler+0x86>
    73c4:	1c25      	adds	r5, r4, #0
    73c6:	3548      	adds	r5, #72	; 0x48
    73c8:	7829      	ldrb	r1, [r5, #0]
    73ca:	2900      	cmp	r1, #0
    73cc:	d006      	beq.n	73dc <mqtt_socket_event_handler+0xdc>
    73ce:	1c23      	adds	r3, r4, #0
    73d0:	334a      	adds	r3, #74	; 0x4a
    73d2:	881a      	ldrh	r2, [r3, #0]
    73d4:	1c20      	adds	r0, r4, #0
    73d6:	4b09      	ldr	r3, [pc, #36]	; (73fc <mqtt_socket_event_handler+0xfc>)
    73d8:	4798      	blx	r3
    73da:	702e      	strb	r6, [r5, #0]
    73dc:	b006      	add	sp, #24
    73de:	bd70      	pop	{r4, r5, r6, pc}
    73e0:	20000254 	.word	0x20000254
    73e4:	00006799 	.word	0x00006799
    73e8:	00003c21 	.word	0x00003c21
    73ec:	00006161 	.word	0x00006161
    73f0:	00007221 	.word	0x00007221
    73f4:	00007261 	.word	0x00007261
    73f8:	00006f71 	.word	0x00006f71
    73fc:	00006f0d 	.word	0x00006f0d

00007400 <__gnu_thumb1_case_uqi>:
    7400:	b402      	push	{r1}
    7402:	4671      	mov	r1, lr
    7404:	0849      	lsrs	r1, r1, #1
    7406:	0049      	lsls	r1, r1, #1
    7408:	5c09      	ldrb	r1, [r1, r0]
    740a:	0049      	lsls	r1, r1, #1
    740c:	448e      	add	lr, r1
    740e:	bc02      	pop	{r1}
    7410:	4770      	bx	lr
    7412:	46c0      	nop			; (mov r8, r8)

00007414 <__udivsi3>:
    7414:	2200      	movs	r2, #0
    7416:	0843      	lsrs	r3, r0, #1
    7418:	428b      	cmp	r3, r1
    741a:	d374      	bcc.n	7506 <__udivsi3+0xf2>
    741c:	0903      	lsrs	r3, r0, #4
    741e:	428b      	cmp	r3, r1
    7420:	d35f      	bcc.n	74e2 <__udivsi3+0xce>
    7422:	0a03      	lsrs	r3, r0, #8
    7424:	428b      	cmp	r3, r1
    7426:	d344      	bcc.n	74b2 <__udivsi3+0x9e>
    7428:	0b03      	lsrs	r3, r0, #12
    742a:	428b      	cmp	r3, r1
    742c:	d328      	bcc.n	7480 <__udivsi3+0x6c>
    742e:	0c03      	lsrs	r3, r0, #16
    7430:	428b      	cmp	r3, r1
    7432:	d30d      	bcc.n	7450 <__udivsi3+0x3c>
    7434:	22ff      	movs	r2, #255	; 0xff
    7436:	0209      	lsls	r1, r1, #8
    7438:	ba12      	rev	r2, r2
    743a:	0c03      	lsrs	r3, r0, #16
    743c:	428b      	cmp	r3, r1
    743e:	d302      	bcc.n	7446 <__udivsi3+0x32>
    7440:	1212      	asrs	r2, r2, #8
    7442:	0209      	lsls	r1, r1, #8
    7444:	d065      	beq.n	7512 <__udivsi3+0xfe>
    7446:	0b03      	lsrs	r3, r0, #12
    7448:	428b      	cmp	r3, r1
    744a:	d319      	bcc.n	7480 <__udivsi3+0x6c>
    744c:	e000      	b.n	7450 <__udivsi3+0x3c>
    744e:	0a09      	lsrs	r1, r1, #8
    7450:	0bc3      	lsrs	r3, r0, #15
    7452:	428b      	cmp	r3, r1
    7454:	d301      	bcc.n	745a <__udivsi3+0x46>
    7456:	03cb      	lsls	r3, r1, #15
    7458:	1ac0      	subs	r0, r0, r3
    745a:	4152      	adcs	r2, r2
    745c:	0b83      	lsrs	r3, r0, #14
    745e:	428b      	cmp	r3, r1
    7460:	d301      	bcc.n	7466 <__udivsi3+0x52>
    7462:	038b      	lsls	r3, r1, #14
    7464:	1ac0      	subs	r0, r0, r3
    7466:	4152      	adcs	r2, r2
    7468:	0b43      	lsrs	r3, r0, #13
    746a:	428b      	cmp	r3, r1
    746c:	d301      	bcc.n	7472 <__udivsi3+0x5e>
    746e:	034b      	lsls	r3, r1, #13
    7470:	1ac0      	subs	r0, r0, r3
    7472:	4152      	adcs	r2, r2
    7474:	0b03      	lsrs	r3, r0, #12
    7476:	428b      	cmp	r3, r1
    7478:	d301      	bcc.n	747e <__udivsi3+0x6a>
    747a:	030b      	lsls	r3, r1, #12
    747c:	1ac0      	subs	r0, r0, r3
    747e:	4152      	adcs	r2, r2
    7480:	0ac3      	lsrs	r3, r0, #11
    7482:	428b      	cmp	r3, r1
    7484:	d301      	bcc.n	748a <__udivsi3+0x76>
    7486:	02cb      	lsls	r3, r1, #11
    7488:	1ac0      	subs	r0, r0, r3
    748a:	4152      	adcs	r2, r2
    748c:	0a83      	lsrs	r3, r0, #10
    748e:	428b      	cmp	r3, r1
    7490:	d301      	bcc.n	7496 <__udivsi3+0x82>
    7492:	028b      	lsls	r3, r1, #10
    7494:	1ac0      	subs	r0, r0, r3
    7496:	4152      	adcs	r2, r2
    7498:	0a43      	lsrs	r3, r0, #9
    749a:	428b      	cmp	r3, r1
    749c:	d301      	bcc.n	74a2 <__udivsi3+0x8e>
    749e:	024b      	lsls	r3, r1, #9
    74a0:	1ac0      	subs	r0, r0, r3
    74a2:	4152      	adcs	r2, r2
    74a4:	0a03      	lsrs	r3, r0, #8
    74a6:	428b      	cmp	r3, r1
    74a8:	d301      	bcc.n	74ae <__udivsi3+0x9a>
    74aa:	020b      	lsls	r3, r1, #8
    74ac:	1ac0      	subs	r0, r0, r3
    74ae:	4152      	adcs	r2, r2
    74b0:	d2cd      	bcs.n	744e <__udivsi3+0x3a>
    74b2:	09c3      	lsrs	r3, r0, #7
    74b4:	428b      	cmp	r3, r1
    74b6:	d301      	bcc.n	74bc <__udivsi3+0xa8>
    74b8:	01cb      	lsls	r3, r1, #7
    74ba:	1ac0      	subs	r0, r0, r3
    74bc:	4152      	adcs	r2, r2
    74be:	0983      	lsrs	r3, r0, #6
    74c0:	428b      	cmp	r3, r1
    74c2:	d301      	bcc.n	74c8 <__udivsi3+0xb4>
    74c4:	018b      	lsls	r3, r1, #6
    74c6:	1ac0      	subs	r0, r0, r3
    74c8:	4152      	adcs	r2, r2
    74ca:	0943      	lsrs	r3, r0, #5
    74cc:	428b      	cmp	r3, r1
    74ce:	d301      	bcc.n	74d4 <__udivsi3+0xc0>
    74d0:	014b      	lsls	r3, r1, #5
    74d2:	1ac0      	subs	r0, r0, r3
    74d4:	4152      	adcs	r2, r2
    74d6:	0903      	lsrs	r3, r0, #4
    74d8:	428b      	cmp	r3, r1
    74da:	d301      	bcc.n	74e0 <__udivsi3+0xcc>
    74dc:	010b      	lsls	r3, r1, #4
    74de:	1ac0      	subs	r0, r0, r3
    74e0:	4152      	adcs	r2, r2
    74e2:	08c3      	lsrs	r3, r0, #3
    74e4:	428b      	cmp	r3, r1
    74e6:	d301      	bcc.n	74ec <__udivsi3+0xd8>
    74e8:	00cb      	lsls	r3, r1, #3
    74ea:	1ac0      	subs	r0, r0, r3
    74ec:	4152      	adcs	r2, r2
    74ee:	0883      	lsrs	r3, r0, #2
    74f0:	428b      	cmp	r3, r1
    74f2:	d301      	bcc.n	74f8 <__udivsi3+0xe4>
    74f4:	008b      	lsls	r3, r1, #2
    74f6:	1ac0      	subs	r0, r0, r3
    74f8:	4152      	adcs	r2, r2
    74fa:	0843      	lsrs	r3, r0, #1
    74fc:	428b      	cmp	r3, r1
    74fe:	d301      	bcc.n	7504 <__udivsi3+0xf0>
    7500:	004b      	lsls	r3, r1, #1
    7502:	1ac0      	subs	r0, r0, r3
    7504:	4152      	adcs	r2, r2
    7506:	1a41      	subs	r1, r0, r1
    7508:	d200      	bcs.n	750c <__udivsi3+0xf8>
    750a:	4601      	mov	r1, r0
    750c:	4152      	adcs	r2, r2
    750e:	4610      	mov	r0, r2
    7510:	4770      	bx	lr
    7512:	e7ff      	b.n	7514 <__udivsi3+0x100>
    7514:	b501      	push	{r0, lr}
    7516:	2000      	movs	r0, #0
    7518:	f000 f8f0 	bl	76fc <__aeabi_idiv0>
    751c:	bd02      	pop	{r1, pc}
    751e:	46c0      	nop			; (mov r8, r8)

00007520 <__aeabi_uidivmod>:
    7520:	2900      	cmp	r1, #0
    7522:	d0f7      	beq.n	7514 <__udivsi3+0x100>
    7524:	e776      	b.n	7414 <__udivsi3>
    7526:	4770      	bx	lr

00007528 <__divsi3>:
    7528:	4603      	mov	r3, r0
    752a:	430b      	orrs	r3, r1
    752c:	d47f      	bmi.n	762e <__divsi3+0x106>
    752e:	2200      	movs	r2, #0
    7530:	0843      	lsrs	r3, r0, #1
    7532:	428b      	cmp	r3, r1
    7534:	d374      	bcc.n	7620 <__divsi3+0xf8>
    7536:	0903      	lsrs	r3, r0, #4
    7538:	428b      	cmp	r3, r1
    753a:	d35f      	bcc.n	75fc <__divsi3+0xd4>
    753c:	0a03      	lsrs	r3, r0, #8
    753e:	428b      	cmp	r3, r1
    7540:	d344      	bcc.n	75cc <__divsi3+0xa4>
    7542:	0b03      	lsrs	r3, r0, #12
    7544:	428b      	cmp	r3, r1
    7546:	d328      	bcc.n	759a <__divsi3+0x72>
    7548:	0c03      	lsrs	r3, r0, #16
    754a:	428b      	cmp	r3, r1
    754c:	d30d      	bcc.n	756a <__divsi3+0x42>
    754e:	22ff      	movs	r2, #255	; 0xff
    7550:	0209      	lsls	r1, r1, #8
    7552:	ba12      	rev	r2, r2
    7554:	0c03      	lsrs	r3, r0, #16
    7556:	428b      	cmp	r3, r1
    7558:	d302      	bcc.n	7560 <__divsi3+0x38>
    755a:	1212      	asrs	r2, r2, #8
    755c:	0209      	lsls	r1, r1, #8
    755e:	d065      	beq.n	762c <__divsi3+0x104>
    7560:	0b03      	lsrs	r3, r0, #12
    7562:	428b      	cmp	r3, r1
    7564:	d319      	bcc.n	759a <__divsi3+0x72>
    7566:	e000      	b.n	756a <__divsi3+0x42>
    7568:	0a09      	lsrs	r1, r1, #8
    756a:	0bc3      	lsrs	r3, r0, #15
    756c:	428b      	cmp	r3, r1
    756e:	d301      	bcc.n	7574 <__divsi3+0x4c>
    7570:	03cb      	lsls	r3, r1, #15
    7572:	1ac0      	subs	r0, r0, r3
    7574:	4152      	adcs	r2, r2
    7576:	0b83      	lsrs	r3, r0, #14
    7578:	428b      	cmp	r3, r1
    757a:	d301      	bcc.n	7580 <__divsi3+0x58>
    757c:	038b      	lsls	r3, r1, #14
    757e:	1ac0      	subs	r0, r0, r3
    7580:	4152      	adcs	r2, r2
    7582:	0b43      	lsrs	r3, r0, #13
    7584:	428b      	cmp	r3, r1
    7586:	d301      	bcc.n	758c <__divsi3+0x64>
    7588:	034b      	lsls	r3, r1, #13
    758a:	1ac0      	subs	r0, r0, r3
    758c:	4152      	adcs	r2, r2
    758e:	0b03      	lsrs	r3, r0, #12
    7590:	428b      	cmp	r3, r1
    7592:	d301      	bcc.n	7598 <__divsi3+0x70>
    7594:	030b      	lsls	r3, r1, #12
    7596:	1ac0      	subs	r0, r0, r3
    7598:	4152      	adcs	r2, r2
    759a:	0ac3      	lsrs	r3, r0, #11
    759c:	428b      	cmp	r3, r1
    759e:	d301      	bcc.n	75a4 <__divsi3+0x7c>
    75a0:	02cb      	lsls	r3, r1, #11
    75a2:	1ac0      	subs	r0, r0, r3
    75a4:	4152      	adcs	r2, r2
    75a6:	0a83      	lsrs	r3, r0, #10
    75a8:	428b      	cmp	r3, r1
    75aa:	d301      	bcc.n	75b0 <__divsi3+0x88>
    75ac:	028b      	lsls	r3, r1, #10
    75ae:	1ac0      	subs	r0, r0, r3
    75b0:	4152      	adcs	r2, r2
    75b2:	0a43      	lsrs	r3, r0, #9
    75b4:	428b      	cmp	r3, r1
    75b6:	d301      	bcc.n	75bc <__divsi3+0x94>
    75b8:	024b      	lsls	r3, r1, #9
    75ba:	1ac0      	subs	r0, r0, r3
    75bc:	4152      	adcs	r2, r2
    75be:	0a03      	lsrs	r3, r0, #8
    75c0:	428b      	cmp	r3, r1
    75c2:	d301      	bcc.n	75c8 <__divsi3+0xa0>
    75c4:	020b      	lsls	r3, r1, #8
    75c6:	1ac0      	subs	r0, r0, r3
    75c8:	4152      	adcs	r2, r2
    75ca:	d2cd      	bcs.n	7568 <__divsi3+0x40>
    75cc:	09c3      	lsrs	r3, r0, #7
    75ce:	428b      	cmp	r3, r1
    75d0:	d301      	bcc.n	75d6 <__divsi3+0xae>
    75d2:	01cb      	lsls	r3, r1, #7
    75d4:	1ac0      	subs	r0, r0, r3
    75d6:	4152      	adcs	r2, r2
    75d8:	0983      	lsrs	r3, r0, #6
    75da:	428b      	cmp	r3, r1
    75dc:	d301      	bcc.n	75e2 <__divsi3+0xba>
    75de:	018b      	lsls	r3, r1, #6
    75e0:	1ac0      	subs	r0, r0, r3
    75e2:	4152      	adcs	r2, r2
    75e4:	0943      	lsrs	r3, r0, #5
    75e6:	428b      	cmp	r3, r1
    75e8:	d301      	bcc.n	75ee <__divsi3+0xc6>
    75ea:	014b      	lsls	r3, r1, #5
    75ec:	1ac0      	subs	r0, r0, r3
    75ee:	4152      	adcs	r2, r2
    75f0:	0903      	lsrs	r3, r0, #4
    75f2:	428b      	cmp	r3, r1
    75f4:	d301      	bcc.n	75fa <__divsi3+0xd2>
    75f6:	010b      	lsls	r3, r1, #4
    75f8:	1ac0      	subs	r0, r0, r3
    75fa:	4152      	adcs	r2, r2
    75fc:	08c3      	lsrs	r3, r0, #3
    75fe:	428b      	cmp	r3, r1
    7600:	d301      	bcc.n	7606 <__divsi3+0xde>
    7602:	00cb      	lsls	r3, r1, #3
    7604:	1ac0      	subs	r0, r0, r3
    7606:	4152      	adcs	r2, r2
    7608:	0883      	lsrs	r3, r0, #2
    760a:	428b      	cmp	r3, r1
    760c:	d301      	bcc.n	7612 <__divsi3+0xea>
    760e:	008b      	lsls	r3, r1, #2
    7610:	1ac0      	subs	r0, r0, r3
    7612:	4152      	adcs	r2, r2
    7614:	0843      	lsrs	r3, r0, #1
    7616:	428b      	cmp	r3, r1
    7618:	d301      	bcc.n	761e <__divsi3+0xf6>
    761a:	004b      	lsls	r3, r1, #1
    761c:	1ac0      	subs	r0, r0, r3
    761e:	4152      	adcs	r2, r2
    7620:	1a41      	subs	r1, r0, r1
    7622:	d200      	bcs.n	7626 <__divsi3+0xfe>
    7624:	4601      	mov	r1, r0
    7626:	4152      	adcs	r2, r2
    7628:	4610      	mov	r0, r2
    762a:	4770      	bx	lr
    762c:	e05d      	b.n	76ea <__divsi3+0x1c2>
    762e:	0fca      	lsrs	r2, r1, #31
    7630:	d000      	beq.n	7634 <__divsi3+0x10c>
    7632:	4249      	negs	r1, r1
    7634:	1003      	asrs	r3, r0, #32
    7636:	d300      	bcc.n	763a <__divsi3+0x112>
    7638:	4240      	negs	r0, r0
    763a:	4053      	eors	r3, r2
    763c:	2200      	movs	r2, #0
    763e:	469c      	mov	ip, r3
    7640:	0903      	lsrs	r3, r0, #4
    7642:	428b      	cmp	r3, r1
    7644:	d32d      	bcc.n	76a2 <__divsi3+0x17a>
    7646:	0a03      	lsrs	r3, r0, #8
    7648:	428b      	cmp	r3, r1
    764a:	d312      	bcc.n	7672 <__divsi3+0x14a>
    764c:	22fc      	movs	r2, #252	; 0xfc
    764e:	0189      	lsls	r1, r1, #6
    7650:	ba12      	rev	r2, r2
    7652:	0a03      	lsrs	r3, r0, #8
    7654:	428b      	cmp	r3, r1
    7656:	d30c      	bcc.n	7672 <__divsi3+0x14a>
    7658:	0189      	lsls	r1, r1, #6
    765a:	1192      	asrs	r2, r2, #6
    765c:	428b      	cmp	r3, r1
    765e:	d308      	bcc.n	7672 <__divsi3+0x14a>
    7660:	0189      	lsls	r1, r1, #6
    7662:	1192      	asrs	r2, r2, #6
    7664:	428b      	cmp	r3, r1
    7666:	d304      	bcc.n	7672 <__divsi3+0x14a>
    7668:	0189      	lsls	r1, r1, #6
    766a:	d03a      	beq.n	76e2 <__divsi3+0x1ba>
    766c:	1192      	asrs	r2, r2, #6
    766e:	e000      	b.n	7672 <__divsi3+0x14a>
    7670:	0989      	lsrs	r1, r1, #6
    7672:	09c3      	lsrs	r3, r0, #7
    7674:	428b      	cmp	r3, r1
    7676:	d301      	bcc.n	767c <__divsi3+0x154>
    7678:	01cb      	lsls	r3, r1, #7
    767a:	1ac0      	subs	r0, r0, r3
    767c:	4152      	adcs	r2, r2
    767e:	0983      	lsrs	r3, r0, #6
    7680:	428b      	cmp	r3, r1
    7682:	d301      	bcc.n	7688 <__divsi3+0x160>
    7684:	018b      	lsls	r3, r1, #6
    7686:	1ac0      	subs	r0, r0, r3
    7688:	4152      	adcs	r2, r2
    768a:	0943      	lsrs	r3, r0, #5
    768c:	428b      	cmp	r3, r1
    768e:	d301      	bcc.n	7694 <__divsi3+0x16c>
    7690:	014b      	lsls	r3, r1, #5
    7692:	1ac0      	subs	r0, r0, r3
    7694:	4152      	adcs	r2, r2
    7696:	0903      	lsrs	r3, r0, #4
    7698:	428b      	cmp	r3, r1
    769a:	d301      	bcc.n	76a0 <__divsi3+0x178>
    769c:	010b      	lsls	r3, r1, #4
    769e:	1ac0      	subs	r0, r0, r3
    76a0:	4152      	adcs	r2, r2
    76a2:	08c3      	lsrs	r3, r0, #3
    76a4:	428b      	cmp	r3, r1
    76a6:	d301      	bcc.n	76ac <__divsi3+0x184>
    76a8:	00cb      	lsls	r3, r1, #3
    76aa:	1ac0      	subs	r0, r0, r3
    76ac:	4152      	adcs	r2, r2
    76ae:	0883      	lsrs	r3, r0, #2
    76b0:	428b      	cmp	r3, r1
    76b2:	d301      	bcc.n	76b8 <__divsi3+0x190>
    76b4:	008b      	lsls	r3, r1, #2
    76b6:	1ac0      	subs	r0, r0, r3
    76b8:	4152      	adcs	r2, r2
    76ba:	d2d9      	bcs.n	7670 <__divsi3+0x148>
    76bc:	0843      	lsrs	r3, r0, #1
    76be:	428b      	cmp	r3, r1
    76c0:	d301      	bcc.n	76c6 <__divsi3+0x19e>
    76c2:	004b      	lsls	r3, r1, #1
    76c4:	1ac0      	subs	r0, r0, r3
    76c6:	4152      	adcs	r2, r2
    76c8:	1a41      	subs	r1, r0, r1
    76ca:	d200      	bcs.n	76ce <__divsi3+0x1a6>
    76cc:	4601      	mov	r1, r0
    76ce:	4663      	mov	r3, ip
    76d0:	4152      	adcs	r2, r2
    76d2:	105b      	asrs	r3, r3, #1
    76d4:	4610      	mov	r0, r2
    76d6:	d301      	bcc.n	76dc <__divsi3+0x1b4>
    76d8:	4240      	negs	r0, r0
    76da:	2b00      	cmp	r3, #0
    76dc:	d500      	bpl.n	76e0 <__divsi3+0x1b8>
    76de:	4249      	negs	r1, r1
    76e0:	4770      	bx	lr
    76e2:	4663      	mov	r3, ip
    76e4:	105b      	asrs	r3, r3, #1
    76e6:	d300      	bcc.n	76ea <__divsi3+0x1c2>
    76e8:	4240      	negs	r0, r0
    76ea:	b501      	push	{r0, lr}
    76ec:	2000      	movs	r0, #0
    76ee:	f000 f805 	bl	76fc <__aeabi_idiv0>
    76f2:	bd02      	pop	{r1, pc}

000076f4 <__aeabi_idivmod>:
    76f4:	2900      	cmp	r1, #0
    76f6:	d0f8      	beq.n	76ea <__divsi3+0x1c2>
    76f8:	e716      	b.n	7528 <__divsi3>
    76fa:	4770      	bx	lr

000076fc <__aeabi_idiv0>:
    76fc:	4770      	bx	lr
    76fe:	46c0      	nop			; (mov r8, r8)

00007700 <__aeabi_lmul>:
    7700:	b5f0      	push	{r4, r5, r6, r7, lr}
    7702:	46ce      	mov	lr, r9
    7704:	4647      	mov	r7, r8
    7706:	0415      	lsls	r5, r2, #16
    7708:	0c2d      	lsrs	r5, r5, #16
    770a:	002e      	movs	r6, r5
    770c:	b580      	push	{r7, lr}
    770e:	0407      	lsls	r7, r0, #16
    7710:	0c14      	lsrs	r4, r2, #16
    7712:	0c3f      	lsrs	r7, r7, #16
    7714:	4699      	mov	r9, r3
    7716:	0c03      	lsrs	r3, r0, #16
    7718:	437e      	muls	r6, r7
    771a:	435d      	muls	r5, r3
    771c:	4367      	muls	r7, r4
    771e:	4363      	muls	r3, r4
    7720:	197f      	adds	r7, r7, r5
    7722:	0c34      	lsrs	r4, r6, #16
    7724:	19e4      	adds	r4, r4, r7
    7726:	469c      	mov	ip, r3
    7728:	42a5      	cmp	r5, r4
    772a:	d903      	bls.n	7734 <__aeabi_lmul+0x34>
    772c:	2380      	movs	r3, #128	; 0x80
    772e:	025b      	lsls	r3, r3, #9
    7730:	4698      	mov	r8, r3
    7732:	44c4      	add	ip, r8
    7734:	464b      	mov	r3, r9
    7736:	4351      	muls	r1, r2
    7738:	4343      	muls	r3, r0
    773a:	0436      	lsls	r6, r6, #16
    773c:	0c36      	lsrs	r6, r6, #16
    773e:	0c25      	lsrs	r5, r4, #16
    7740:	0424      	lsls	r4, r4, #16
    7742:	4465      	add	r5, ip
    7744:	19a4      	adds	r4, r4, r6
    7746:	1859      	adds	r1, r3, r1
    7748:	1949      	adds	r1, r1, r5
    774a:	0020      	movs	r0, r4
    774c:	bc0c      	pop	{r2, r3}
    774e:	4690      	mov	r8, r2
    7750:	4699      	mov	r9, r3
    7752:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007754 <__aeabi_fdiv>:
    7754:	b5f0      	push	{r4, r5, r6, r7, lr}
    7756:	4657      	mov	r7, sl
    7758:	464e      	mov	r6, r9
    775a:	46de      	mov	lr, fp
    775c:	4645      	mov	r5, r8
    775e:	b5e0      	push	{r5, r6, r7, lr}
    7760:	0244      	lsls	r4, r0, #9
    7762:	0043      	lsls	r3, r0, #1
    7764:	0fc6      	lsrs	r6, r0, #31
    7766:	b083      	sub	sp, #12
    7768:	1c0f      	adds	r7, r1, #0
    776a:	0a64      	lsrs	r4, r4, #9
    776c:	0e1b      	lsrs	r3, r3, #24
    776e:	46b2      	mov	sl, r6
    7770:	d053      	beq.n	781a <__aeabi_fdiv+0xc6>
    7772:	2bff      	cmp	r3, #255	; 0xff
    7774:	d027      	beq.n	77c6 <__aeabi_fdiv+0x72>
    7776:	2280      	movs	r2, #128	; 0x80
    7778:	00e4      	lsls	r4, r4, #3
    777a:	04d2      	lsls	r2, r2, #19
    777c:	4314      	orrs	r4, r2
    777e:	227f      	movs	r2, #127	; 0x7f
    7780:	4252      	negs	r2, r2
    7782:	4690      	mov	r8, r2
    7784:	4498      	add	r8, r3
    7786:	2300      	movs	r3, #0
    7788:	4699      	mov	r9, r3
    778a:	469b      	mov	fp, r3
    778c:	027d      	lsls	r5, r7, #9
    778e:	0078      	lsls	r0, r7, #1
    7790:	0ffb      	lsrs	r3, r7, #31
    7792:	0a6d      	lsrs	r5, r5, #9
    7794:	0e00      	lsrs	r0, r0, #24
    7796:	9300      	str	r3, [sp, #0]
    7798:	d024      	beq.n	77e4 <__aeabi_fdiv+0x90>
    779a:	28ff      	cmp	r0, #255	; 0xff
    779c:	d046      	beq.n	782c <__aeabi_fdiv+0xd8>
    779e:	2380      	movs	r3, #128	; 0x80
    77a0:	2100      	movs	r1, #0
    77a2:	00ed      	lsls	r5, r5, #3
    77a4:	04db      	lsls	r3, r3, #19
    77a6:	431d      	orrs	r5, r3
    77a8:	387f      	subs	r0, #127	; 0x7f
    77aa:	4647      	mov	r7, r8
    77ac:	1a38      	subs	r0, r7, r0
    77ae:	464f      	mov	r7, r9
    77b0:	430f      	orrs	r7, r1
    77b2:	00bf      	lsls	r7, r7, #2
    77b4:	46b9      	mov	r9, r7
    77b6:	0033      	movs	r3, r6
    77b8:	9a00      	ldr	r2, [sp, #0]
    77ba:	4f87      	ldr	r7, [pc, #540]	; (79d8 <__aeabi_fdiv+0x284>)
    77bc:	4053      	eors	r3, r2
    77be:	464a      	mov	r2, r9
    77c0:	58ba      	ldr	r2, [r7, r2]
    77c2:	9301      	str	r3, [sp, #4]
    77c4:	4697      	mov	pc, r2
    77c6:	2c00      	cmp	r4, #0
    77c8:	d14e      	bne.n	7868 <__aeabi_fdiv+0x114>
    77ca:	2308      	movs	r3, #8
    77cc:	4699      	mov	r9, r3
    77ce:	33f7      	adds	r3, #247	; 0xf7
    77d0:	4698      	mov	r8, r3
    77d2:	3bfd      	subs	r3, #253	; 0xfd
    77d4:	469b      	mov	fp, r3
    77d6:	027d      	lsls	r5, r7, #9
    77d8:	0078      	lsls	r0, r7, #1
    77da:	0ffb      	lsrs	r3, r7, #31
    77dc:	0a6d      	lsrs	r5, r5, #9
    77de:	0e00      	lsrs	r0, r0, #24
    77e0:	9300      	str	r3, [sp, #0]
    77e2:	d1da      	bne.n	779a <__aeabi_fdiv+0x46>
    77e4:	2d00      	cmp	r5, #0
    77e6:	d126      	bne.n	7836 <__aeabi_fdiv+0xe2>
    77e8:	2000      	movs	r0, #0
    77ea:	2101      	movs	r1, #1
    77ec:	0033      	movs	r3, r6
    77ee:	9a00      	ldr	r2, [sp, #0]
    77f0:	4f7a      	ldr	r7, [pc, #488]	; (79dc <__aeabi_fdiv+0x288>)
    77f2:	4053      	eors	r3, r2
    77f4:	4642      	mov	r2, r8
    77f6:	1a10      	subs	r0, r2, r0
    77f8:	464a      	mov	r2, r9
    77fa:	430a      	orrs	r2, r1
    77fc:	0092      	lsls	r2, r2, #2
    77fe:	58ba      	ldr	r2, [r7, r2]
    7800:	001d      	movs	r5, r3
    7802:	4697      	mov	pc, r2
    7804:	9b00      	ldr	r3, [sp, #0]
    7806:	002c      	movs	r4, r5
    7808:	469a      	mov	sl, r3
    780a:	468b      	mov	fp, r1
    780c:	465b      	mov	r3, fp
    780e:	2b02      	cmp	r3, #2
    7810:	d131      	bne.n	7876 <__aeabi_fdiv+0x122>
    7812:	4653      	mov	r3, sl
    7814:	21ff      	movs	r1, #255	; 0xff
    7816:	2400      	movs	r4, #0
    7818:	e038      	b.n	788c <__aeabi_fdiv+0x138>
    781a:	2c00      	cmp	r4, #0
    781c:	d117      	bne.n	784e <__aeabi_fdiv+0xfa>
    781e:	2304      	movs	r3, #4
    7820:	4699      	mov	r9, r3
    7822:	2300      	movs	r3, #0
    7824:	4698      	mov	r8, r3
    7826:	3301      	adds	r3, #1
    7828:	469b      	mov	fp, r3
    782a:	e7af      	b.n	778c <__aeabi_fdiv+0x38>
    782c:	20ff      	movs	r0, #255	; 0xff
    782e:	2d00      	cmp	r5, #0
    7830:	d10b      	bne.n	784a <__aeabi_fdiv+0xf6>
    7832:	2102      	movs	r1, #2
    7834:	e7da      	b.n	77ec <__aeabi_fdiv+0x98>
    7836:	0028      	movs	r0, r5
    7838:	f001 fdbc 	bl	93b4 <__clzsi2>
    783c:	1f43      	subs	r3, r0, #5
    783e:	409d      	lsls	r5, r3
    7840:	2376      	movs	r3, #118	; 0x76
    7842:	425b      	negs	r3, r3
    7844:	1a18      	subs	r0, r3, r0
    7846:	2100      	movs	r1, #0
    7848:	e7af      	b.n	77aa <__aeabi_fdiv+0x56>
    784a:	2103      	movs	r1, #3
    784c:	e7ad      	b.n	77aa <__aeabi_fdiv+0x56>
    784e:	0020      	movs	r0, r4
    7850:	f001 fdb0 	bl	93b4 <__clzsi2>
    7854:	1f43      	subs	r3, r0, #5
    7856:	409c      	lsls	r4, r3
    7858:	2376      	movs	r3, #118	; 0x76
    785a:	425b      	negs	r3, r3
    785c:	1a1b      	subs	r3, r3, r0
    785e:	4698      	mov	r8, r3
    7860:	2300      	movs	r3, #0
    7862:	4699      	mov	r9, r3
    7864:	469b      	mov	fp, r3
    7866:	e791      	b.n	778c <__aeabi_fdiv+0x38>
    7868:	230c      	movs	r3, #12
    786a:	4699      	mov	r9, r3
    786c:	33f3      	adds	r3, #243	; 0xf3
    786e:	4698      	mov	r8, r3
    7870:	3bfc      	subs	r3, #252	; 0xfc
    7872:	469b      	mov	fp, r3
    7874:	e78a      	b.n	778c <__aeabi_fdiv+0x38>
    7876:	2b03      	cmp	r3, #3
    7878:	d100      	bne.n	787c <__aeabi_fdiv+0x128>
    787a:	e0a5      	b.n	79c8 <__aeabi_fdiv+0x274>
    787c:	4655      	mov	r5, sl
    787e:	2b01      	cmp	r3, #1
    7880:	d000      	beq.n	7884 <__aeabi_fdiv+0x130>
    7882:	e081      	b.n	7988 <__aeabi_fdiv+0x234>
    7884:	2301      	movs	r3, #1
    7886:	2100      	movs	r1, #0
    7888:	2400      	movs	r4, #0
    788a:	402b      	ands	r3, r5
    788c:	0264      	lsls	r4, r4, #9
    788e:	05c9      	lsls	r1, r1, #23
    7890:	0a60      	lsrs	r0, r4, #9
    7892:	07db      	lsls	r3, r3, #31
    7894:	4308      	orrs	r0, r1
    7896:	4318      	orrs	r0, r3
    7898:	b003      	add	sp, #12
    789a:	bc3c      	pop	{r2, r3, r4, r5}
    789c:	4690      	mov	r8, r2
    789e:	4699      	mov	r9, r3
    78a0:	46a2      	mov	sl, r4
    78a2:	46ab      	mov	fp, r5
    78a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    78a6:	2480      	movs	r4, #128	; 0x80
    78a8:	2300      	movs	r3, #0
    78aa:	03e4      	lsls	r4, r4, #15
    78ac:	21ff      	movs	r1, #255	; 0xff
    78ae:	e7ed      	b.n	788c <__aeabi_fdiv+0x138>
    78b0:	21ff      	movs	r1, #255	; 0xff
    78b2:	2400      	movs	r4, #0
    78b4:	e7ea      	b.n	788c <__aeabi_fdiv+0x138>
    78b6:	2301      	movs	r3, #1
    78b8:	1a59      	subs	r1, r3, r1
    78ba:	291b      	cmp	r1, #27
    78bc:	dd66      	ble.n	798c <__aeabi_fdiv+0x238>
    78be:	9a01      	ldr	r2, [sp, #4]
    78c0:	4013      	ands	r3, r2
    78c2:	2100      	movs	r1, #0
    78c4:	2400      	movs	r4, #0
    78c6:	e7e1      	b.n	788c <__aeabi_fdiv+0x138>
    78c8:	2380      	movs	r3, #128	; 0x80
    78ca:	03db      	lsls	r3, r3, #15
    78cc:	421c      	tst	r4, r3
    78ce:	d038      	beq.n	7942 <__aeabi_fdiv+0x1ee>
    78d0:	421d      	tst	r5, r3
    78d2:	d051      	beq.n	7978 <__aeabi_fdiv+0x224>
    78d4:	431c      	orrs	r4, r3
    78d6:	0264      	lsls	r4, r4, #9
    78d8:	0a64      	lsrs	r4, r4, #9
    78da:	0033      	movs	r3, r6
    78dc:	21ff      	movs	r1, #255	; 0xff
    78de:	e7d5      	b.n	788c <__aeabi_fdiv+0x138>
    78e0:	0163      	lsls	r3, r4, #5
    78e2:	016c      	lsls	r4, r5, #5
    78e4:	42a3      	cmp	r3, r4
    78e6:	d23b      	bcs.n	7960 <__aeabi_fdiv+0x20c>
    78e8:	261b      	movs	r6, #27
    78ea:	2100      	movs	r1, #0
    78ec:	3801      	subs	r0, #1
    78ee:	2501      	movs	r5, #1
    78f0:	001f      	movs	r7, r3
    78f2:	0049      	lsls	r1, r1, #1
    78f4:	005b      	lsls	r3, r3, #1
    78f6:	2f00      	cmp	r7, #0
    78f8:	db01      	blt.n	78fe <__aeabi_fdiv+0x1aa>
    78fa:	429c      	cmp	r4, r3
    78fc:	d801      	bhi.n	7902 <__aeabi_fdiv+0x1ae>
    78fe:	1b1b      	subs	r3, r3, r4
    7900:	4329      	orrs	r1, r5
    7902:	3e01      	subs	r6, #1
    7904:	2e00      	cmp	r6, #0
    7906:	d1f3      	bne.n	78f0 <__aeabi_fdiv+0x19c>
    7908:	001c      	movs	r4, r3
    790a:	1e63      	subs	r3, r4, #1
    790c:	419c      	sbcs	r4, r3
    790e:	430c      	orrs	r4, r1
    7910:	0001      	movs	r1, r0
    7912:	317f      	adds	r1, #127	; 0x7f
    7914:	2900      	cmp	r1, #0
    7916:	ddce      	ble.n	78b6 <__aeabi_fdiv+0x162>
    7918:	0763      	lsls	r3, r4, #29
    791a:	d004      	beq.n	7926 <__aeabi_fdiv+0x1d2>
    791c:	230f      	movs	r3, #15
    791e:	4023      	ands	r3, r4
    7920:	2b04      	cmp	r3, #4
    7922:	d000      	beq.n	7926 <__aeabi_fdiv+0x1d2>
    7924:	3404      	adds	r4, #4
    7926:	0123      	lsls	r3, r4, #4
    7928:	d503      	bpl.n	7932 <__aeabi_fdiv+0x1de>
    792a:	0001      	movs	r1, r0
    792c:	4b2c      	ldr	r3, [pc, #176]	; (79e0 <__aeabi_fdiv+0x28c>)
    792e:	3180      	adds	r1, #128	; 0x80
    7930:	401c      	ands	r4, r3
    7932:	29fe      	cmp	r1, #254	; 0xfe
    7934:	dd0d      	ble.n	7952 <__aeabi_fdiv+0x1fe>
    7936:	2301      	movs	r3, #1
    7938:	9a01      	ldr	r2, [sp, #4]
    793a:	21ff      	movs	r1, #255	; 0xff
    793c:	4013      	ands	r3, r2
    793e:	2400      	movs	r4, #0
    7940:	e7a4      	b.n	788c <__aeabi_fdiv+0x138>
    7942:	2380      	movs	r3, #128	; 0x80
    7944:	03db      	lsls	r3, r3, #15
    7946:	431c      	orrs	r4, r3
    7948:	0264      	lsls	r4, r4, #9
    794a:	0a64      	lsrs	r4, r4, #9
    794c:	0033      	movs	r3, r6
    794e:	21ff      	movs	r1, #255	; 0xff
    7950:	e79c      	b.n	788c <__aeabi_fdiv+0x138>
    7952:	2301      	movs	r3, #1
    7954:	9a01      	ldr	r2, [sp, #4]
    7956:	01a4      	lsls	r4, r4, #6
    7958:	0a64      	lsrs	r4, r4, #9
    795a:	b2c9      	uxtb	r1, r1
    795c:	4013      	ands	r3, r2
    795e:	e795      	b.n	788c <__aeabi_fdiv+0x138>
    7960:	1b1b      	subs	r3, r3, r4
    7962:	261a      	movs	r6, #26
    7964:	2101      	movs	r1, #1
    7966:	e7c2      	b.n	78ee <__aeabi_fdiv+0x19a>
    7968:	9b00      	ldr	r3, [sp, #0]
    796a:	468b      	mov	fp, r1
    796c:	469a      	mov	sl, r3
    796e:	2400      	movs	r4, #0
    7970:	e74c      	b.n	780c <__aeabi_fdiv+0xb8>
    7972:	0263      	lsls	r3, r4, #9
    7974:	d5e5      	bpl.n	7942 <__aeabi_fdiv+0x1ee>
    7976:	2500      	movs	r5, #0
    7978:	2480      	movs	r4, #128	; 0x80
    797a:	03e4      	lsls	r4, r4, #15
    797c:	432c      	orrs	r4, r5
    797e:	0264      	lsls	r4, r4, #9
    7980:	0a64      	lsrs	r4, r4, #9
    7982:	9b00      	ldr	r3, [sp, #0]
    7984:	21ff      	movs	r1, #255	; 0xff
    7986:	e781      	b.n	788c <__aeabi_fdiv+0x138>
    7988:	9501      	str	r5, [sp, #4]
    798a:	e7c1      	b.n	7910 <__aeabi_fdiv+0x1bc>
    798c:	0023      	movs	r3, r4
    798e:	2020      	movs	r0, #32
    7990:	40cb      	lsrs	r3, r1
    7992:	1a41      	subs	r1, r0, r1
    7994:	408c      	lsls	r4, r1
    7996:	1e61      	subs	r1, r4, #1
    7998:	418c      	sbcs	r4, r1
    799a:	431c      	orrs	r4, r3
    799c:	0763      	lsls	r3, r4, #29
    799e:	d004      	beq.n	79aa <__aeabi_fdiv+0x256>
    79a0:	230f      	movs	r3, #15
    79a2:	4023      	ands	r3, r4
    79a4:	2b04      	cmp	r3, #4
    79a6:	d000      	beq.n	79aa <__aeabi_fdiv+0x256>
    79a8:	3404      	adds	r4, #4
    79aa:	0163      	lsls	r3, r4, #5
    79ac:	d505      	bpl.n	79ba <__aeabi_fdiv+0x266>
    79ae:	2301      	movs	r3, #1
    79b0:	9a01      	ldr	r2, [sp, #4]
    79b2:	2101      	movs	r1, #1
    79b4:	4013      	ands	r3, r2
    79b6:	2400      	movs	r4, #0
    79b8:	e768      	b.n	788c <__aeabi_fdiv+0x138>
    79ba:	2301      	movs	r3, #1
    79bc:	9a01      	ldr	r2, [sp, #4]
    79be:	01a4      	lsls	r4, r4, #6
    79c0:	0a64      	lsrs	r4, r4, #9
    79c2:	4013      	ands	r3, r2
    79c4:	2100      	movs	r1, #0
    79c6:	e761      	b.n	788c <__aeabi_fdiv+0x138>
    79c8:	2380      	movs	r3, #128	; 0x80
    79ca:	03db      	lsls	r3, r3, #15
    79cc:	431c      	orrs	r4, r3
    79ce:	0264      	lsls	r4, r4, #9
    79d0:	0a64      	lsrs	r4, r4, #9
    79d2:	4653      	mov	r3, sl
    79d4:	21ff      	movs	r1, #255	; 0xff
    79d6:	e759      	b.n	788c <__aeabi_fdiv+0x138>
    79d8:	0000bba8 	.word	0x0000bba8
    79dc:	0000bbe8 	.word	0x0000bbe8
    79e0:	f7ffffff 	.word	0xf7ffffff

000079e4 <__aeabi_i2f>:
    79e4:	b570      	push	{r4, r5, r6, lr}
    79e6:	2800      	cmp	r0, #0
    79e8:	d030      	beq.n	7a4c <__aeabi_i2f+0x68>
    79ea:	17c3      	asrs	r3, r0, #31
    79ec:	18c4      	adds	r4, r0, r3
    79ee:	405c      	eors	r4, r3
    79f0:	0fc5      	lsrs	r5, r0, #31
    79f2:	0020      	movs	r0, r4
    79f4:	f001 fcde 	bl	93b4 <__clzsi2>
    79f8:	239e      	movs	r3, #158	; 0x9e
    79fa:	1a1b      	subs	r3, r3, r0
    79fc:	2b96      	cmp	r3, #150	; 0x96
    79fe:	dc0d      	bgt.n	7a1c <__aeabi_i2f+0x38>
    7a00:	2296      	movs	r2, #150	; 0x96
    7a02:	1ad2      	subs	r2, r2, r3
    7a04:	4094      	lsls	r4, r2
    7a06:	002a      	movs	r2, r5
    7a08:	0264      	lsls	r4, r4, #9
    7a0a:	0a64      	lsrs	r4, r4, #9
    7a0c:	b2db      	uxtb	r3, r3
    7a0e:	0264      	lsls	r4, r4, #9
    7a10:	05db      	lsls	r3, r3, #23
    7a12:	0a60      	lsrs	r0, r4, #9
    7a14:	07d2      	lsls	r2, r2, #31
    7a16:	4318      	orrs	r0, r3
    7a18:	4310      	orrs	r0, r2
    7a1a:	bd70      	pop	{r4, r5, r6, pc}
    7a1c:	2b99      	cmp	r3, #153	; 0x99
    7a1e:	dc19      	bgt.n	7a54 <__aeabi_i2f+0x70>
    7a20:	2299      	movs	r2, #153	; 0x99
    7a22:	1ad2      	subs	r2, r2, r3
    7a24:	2a00      	cmp	r2, #0
    7a26:	dd29      	ble.n	7a7c <__aeabi_i2f+0x98>
    7a28:	4094      	lsls	r4, r2
    7a2a:	0022      	movs	r2, r4
    7a2c:	4c14      	ldr	r4, [pc, #80]	; (7a80 <__aeabi_i2f+0x9c>)
    7a2e:	4014      	ands	r4, r2
    7a30:	0751      	lsls	r1, r2, #29
    7a32:	d004      	beq.n	7a3e <__aeabi_i2f+0x5a>
    7a34:	210f      	movs	r1, #15
    7a36:	400a      	ands	r2, r1
    7a38:	2a04      	cmp	r2, #4
    7a3a:	d000      	beq.n	7a3e <__aeabi_i2f+0x5a>
    7a3c:	3404      	adds	r4, #4
    7a3e:	0162      	lsls	r2, r4, #5
    7a40:	d413      	bmi.n	7a6a <__aeabi_i2f+0x86>
    7a42:	01a4      	lsls	r4, r4, #6
    7a44:	0a64      	lsrs	r4, r4, #9
    7a46:	b2db      	uxtb	r3, r3
    7a48:	002a      	movs	r2, r5
    7a4a:	e7e0      	b.n	7a0e <__aeabi_i2f+0x2a>
    7a4c:	2200      	movs	r2, #0
    7a4e:	2300      	movs	r3, #0
    7a50:	2400      	movs	r4, #0
    7a52:	e7dc      	b.n	7a0e <__aeabi_i2f+0x2a>
    7a54:	2205      	movs	r2, #5
    7a56:	0021      	movs	r1, r4
    7a58:	1a12      	subs	r2, r2, r0
    7a5a:	40d1      	lsrs	r1, r2
    7a5c:	22b9      	movs	r2, #185	; 0xb9
    7a5e:	1ad2      	subs	r2, r2, r3
    7a60:	4094      	lsls	r4, r2
    7a62:	1e62      	subs	r2, r4, #1
    7a64:	4194      	sbcs	r4, r2
    7a66:	430c      	orrs	r4, r1
    7a68:	e7da      	b.n	7a20 <__aeabi_i2f+0x3c>
    7a6a:	4b05      	ldr	r3, [pc, #20]	; (7a80 <__aeabi_i2f+0x9c>)
    7a6c:	002a      	movs	r2, r5
    7a6e:	401c      	ands	r4, r3
    7a70:	239f      	movs	r3, #159	; 0x9f
    7a72:	01a4      	lsls	r4, r4, #6
    7a74:	1a1b      	subs	r3, r3, r0
    7a76:	0a64      	lsrs	r4, r4, #9
    7a78:	b2db      	uxtb	r3, r3
    7a7a:	e7c8      	b.n	7a0e <__aeabi_i2f+0x2a>
    7a7c:	0022      	movs	r2, r4
    7a7e:	e7d5      	b.n	7a2c <__aeabi_i2f+0x48>
    7a80:	fbffffff 	.word	0xfbffffff

00007a84 <__aeabi_dadd>:
    7a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7a86:	4645      	mov	r5, r8
    7a88:	46de      	mov	lr, fp
    7a8a:	4657      	mov	r7, sl
    7a8c:	464e      	mov	r6, r9
    7a8e:	030c      	lsls	r4, r1, #12
    7a90:	b5e0      	push	{r5, r6, r7, lr}
    7a92:	004e      	lsls	r6, r1, #1
    7a94:	0fc9      	lsrs	r1, r1, #31
    7a96:	4688      	mov	r8, r1
    7a98:	000d      	movs	r5, r1
    7a9a:	0a61      	lsrs	r1, r4, #9
    7a9c:	0f44      	lsrs	r4, r0, #29
    7a9e:	430c      	orrs	r4, r1
    7aa0:	00c7      	lsls	r7, r0, #3
    7aa2:	0319      	lsls	r1, r3, #12
    7aa4:	0058      	lsls	r0, r3, #1
    7aa6:	0fdb      	lsrs	r3, r3, #31
    7aa8:	469b      	mov	fp, r3
    7aaa:	0a4b      	lsrs	r3, r1, #9
    7aac:	0f51      	lsrs	r1, r2, #29
    7aae:	430b      	orrs	r3, r1
    7ab0:	0d76      	lsrs	r6, r6, #21
    7ab2:	0d40      	lsrs	r0, r0, #21
    7ab4:	0019      	movs	r1, r3
    7ab6:	00d2      	lsls	r2, r2, #3
    7ab8:	45d8      	cmp	r8, fp
    7aba:	d100      	bne.n	7abe <__aeabi_dadd+0x3a>
    7abc:	e0ae      	b.n	7c1c <__aeabi_dadd+0x198>
    7abe:	1a35      	subs	r5, r6, r0
    7ac0:	2d00      	cmp	r5, #0
    7ac2:	dc00      	bgt.n	7ac6 <__aeabi_dadd+0x42>
    7ac4:	e0f6      	b.n	7cb4 <__aeabi_dadd+0x230>
    7ac6:	2800      	cmp	r0, #0
    7ac8:	d10f      	bne.n	7aea <__aeabi_dadd+0x66>
    7aca:	4313      	orrs	r3, r2
    7acc:	d100      	bne.n	7ad0 <__aeabi_dadd+0x4c>
    7ace:	e0db      	b.n	7c88 <__aeabi_dadd+0x204>
    7ad0:	1e6b      	subs	r3, r5, #1
    7ad2:	2b00      	cmp	r3, #0
    7ad4:	d000      	beq.n	7ad8 <__aeabi_dadd+0x54>
    7ad6:	e137      	b.n	7d48 <__aeabi_dadd+0x2c4>
    7ad8:	1aba      	subs	r2, r7, r2
    7ada:	4297      	cmp	r7, r2
    7adc:	41bf      	sbcs	r7, r7
    7ade:	1a64      	subs	r4, r4, r1
    7ae0:	427f      	negs	r7, r7
    7ae2:	1be4      	subs	r4, r4, r7
    7ae4:	2601      	movs	r6, #1
    7ae6:	0017      	movs	r7, r2
    7ae8:	e024      	b.n	7b34 <__aeabi_dadd+0xb0>
    7aea:	4bc6      	ldr	r3, [pc, #792]	; (7e04 <__aeabi_dadd+0x380>)
    7aec:	429e      	cmp	r6, r3
    7aee:	d04d      	beq.n	7b8c <__aeabi_dadd+0x108>
    7af0:	2380      	movs	r3, #128	; 0x80
    7af2:	041b      	lsls	r3, r3, #16
    7af4:	4319      	orrs	r1, r3
    7af6:	2d38      	cmp	r5, #56	; 0x38
    7af8:	dd00      	ble.n	7afc <__aeabi_dadd+0x78>
    7afa:	e107      	b.n	7d0c <__aeabi_dadd+0x288>
    7afc:	2d1f      	cmp	r5, #31
    7afe:	dd00      	ble.n	7b02 <__aeabi_dadd+0x7e>
    7b00:	e138      	b.n	7d74 <__aeabi_dadd+0x2f0>
    7b02:	2020      	movs	r0, #32
    7b04:	1b43      	subs	r3, r0, r5
    7b06:	469a      	mov	sl, r3
    7b08:	000b      	movs	r3, r1
    7b0a:	4650      	mov	r0, sl
    7b0c:	4083      	lsls	r3, r0
    7b0e:	4699      	mov	r9, r3
    7b10:	0013      	movs	r3, r2
    7b12:	4648      	mov	r0, r9
    7b14:	40eb      	lsrs	r3, r5
    7b16:	4318      	orrs	r0, r3
    7b18:	0003      	movs	r3, r0
    7b1a:	4650      	mov	r0, sl
    7b1c:	4082      	lsls	r2, r0
    7b1e:	1e50      	subs	r0, r2, #1
    7b20:	4182      	sbcs	r2, r0
    7b22:	40e9      	lsrs	r1, r5
    7b24:	431a      	orrs	r2, r3
    7b26:	1aba      	subs	r2, r7, r2
    7b28:	1a61      	subs	r1, r4, r1
    7b2a:	4297      	cmp	r7, r2
    7b2c:	41a4      	sbcs	r4, r4
    7b2e:	0017      	movs	r7, r2
    7b30:	4264      	negs	r4, r4
    7b32:	1b0c      	subs	r4, r1, r4
    7b34:	0223      	lsls	r3, r4, #8
    7b36:	d562      	bpl.n	7bfe <__aeabi_dadd+0x17a>
    7b38:	0264      	lsls	r4, r4, #9
    7b3a:	0a65      	lsrs	r5, r4, #9
    7b3c:	2d00      	cmp	r5, #0
    7b3e:	d100      	bne.n	7b42 <__aeabi_dadd+0xbe>
    7b40:	e0df      	b.n	7d02 <__aeabi_dadd+0x27e>
    7b42:	0028      	movs	r0, r5
    7b44:	f001 fc36 	bl	93b4 <__clzsi2>
    7b48:	0003      	movs	r3, r0
    7b4a:	3b08      	subs	r3, #8
    7b4c:	2b1f      	cmp	r3, #31
    7b4e:	dd00      	ble.n	7b52 <__aeabi_dadd+0xce>
    7b50:	e0d2      	b.n	7cf8 <__aeabi_dadd+0x274>
    7b52:	2220      	movs	r2, #32
    7b54:	003c      	movs	r4, r7
    7b56:	1ad2      	subs	r2, r2, r3
    7b58:	409d      	lsls	r5, r3
    7b5a:	40d4      	lsrs	r4, r2
    7b5c:	409f      	lsls	r7, r3
    7b5e:	4325      	orrs	r5, r4
    7b60:	429e      	cmp	r6, r3
    7b62:	dd00      	ble.n	7b66 <__aeabi_dadd+0xe2>
    7b64:	e0c4      	b.n	7cf0 <__aeabi_dadd+0x26c>
    7b66:	1b9e      	subs	r6, r3, r6
    7b68:	1c73      	adds	r3, r6, #1
    7b6a:	2b1f      	cmp	r3, #31
    7b6c:	dd00      	ble.n	7b70 <__aeabi_dadd+0xec>
    7b6e:	e0f1      	b.n	7d54 <__aeabi_dadd+0x2d0>
    7b70:	2220      	movs	r2, #32
    7b72:	0038      	movs	r0, r7
    7b74:	0029      	movs	r1, r5
    7b76:	1ad2      	subs	r2, r2, r3
    7b78:	40d8      	lsrs	r0, r3
    7b7a:	4091      	lsls	r1, r2
    7b7c:	4097      	lsls	r7, r2
    7b7e:	002c      	movs	r4, r5
    7b80:	4301      	orrs	r1, r0
    7b82:	1e78      	subs	r0, r7, #1
    7b84:	4187      	sbcs	r7, r0
    7b86:	40dc      	lsrs	r4, r3
    7b88:	2600      	movs	r6, #0
    7b8a:	430f      	orrs	r7, r1
    7b8c:	077b      	lsls	r3, r7, #29
    7b8e:	d009      	beq.n	7ba4 <__aeabi_dadd+0x120>
    7b90:	230f      	movs	r3, #15
    7b92:	403b      	ands	r3, r7
    7b94:	2b04      	cmp	r3, #4
    7b96:	d005      	beq.n	7ba4 <__aeabi_dadd+0x120>
    7b98:	1d3b      	adds	r3, r7, #4
    7b9a:	42bb      	cmp	r3, r7
    7b9c:	41bf      	sbcs	r7, r7
    7b9e:	427f      	negs	r7, r7
    7ba0:	19e4      	adds	r4, r4, r7
    7ba2:	001f      	movs	r7, r3
    7ba4:	0223      	lsls	r3, r4, #8
    7ba6:	d52c      	bpl.n	7c02 <__aeabi_dadd+0x17e>
    7ba8:	4b96      	ldr	r3, [pc, #600]	; (7e04 <__aeabi_dadd+0x380>)
    7baa:	3601      	adds	r6, #1
    7bac:	429e      	cmp	r6, r3
    7bae:	d100      	bne.n	7bb2 <__aeabi_dadd+0x12e>
    7bb0:	e09a      	b.n	7ce8 <__aeabi_dadd+0x264>
    7bb2:	4645      	mov	r5, r8
    7bb4:	4b94      	ldr	r3, [pc, #592]	; (7e08 <__aeabi_dadd+0x384>)
    7bb6:	08ff      	lsrs	r7, r7, #3
    7bb8:	401c      	ands	r4, r3
    7bba:	0760      	lsls	r0, r4, #29
    7bbc:	0576      	lsls	r6, r6, #21
    7bbe:	0264      	lsls	r4, r4, #9
    7bc0:	4307      	orrs	r7, r0
    7bc2:	0b24      	lsrs	r4, r4, #12
    7bc4:	0d76      	lsrs	r6, r6, #21
    7bc6:	2100      	movs	r1, #0
    7bc8:	0324      	lsls	r4, r4, #12
    7bca:	0b23      	lsrs	r3, r4, #12
    7bcc:	0d0c      	lsrs	r4, r1, #20
    7bce:	4a8f      	ldr	r2, [pc, #572]	; (7e0c <__aeabi_dadd+0x388>)
    7bd0:	0524      	lsls	r4, r4, #20
    7bd2:	431c      	orrs	r4, r3
    7bd4:	4014      	ands	r4, r2
    7bd6:	0533      	lsls	r3, r6, #20
    7bd8:	4323      	orrs	r3, r4
    7bda:	005b      	lsls	r3, r3, #1
    7bdc:	07ed      	lsls	r5, r5, #31
    7bde:	085b      	lsrs	r3, r3, #1
    7be0:	432b      	orrs	r3, r5
    7be2:	0038      	movs	r0, r7
    7be4:	0019      	movs	r1, r3
    7be6:	bc3c      	pop	{r2, r3, r4, r5}
    7be8:	4690      	mov	r8, r2
    7bea:	4699      	mov	r9, r3
    7bec:	46a2      	mov	sl, r4
    7bee:	46ab      	mov	fp, r5
    7bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7bf2:	4664      	mov	r4, ip
    7bf4:	4304      	orrs	r4, r0
    7bf6:	d100      	bne.n	7bfa <__aeabi_dadd+0x176>
    7bf8:	e211      	b.n	801e <__aeabi_dadd+0x59a>
    7bfa:	0004      	movs	r4, r0
    7bfc:	4667      	mov	r7, ip
    7bfe:	077b      	lsls	r3, r7, #29
    7c00:	d1c6      	bne.n	7b90 <__aeabi_dadd+0x10c>
    7c02:	4645      	mov	r5, r8
    7c04:	0760      	lsls	r0, r4, #29
    7c06:	08ff      	lsrs	r7, r7, #3
    7c08:	4307      	orrs	r7, r0
    7c0a:	08e4      	lsrs	r4, r4, #3
    7c0c:	4b7d      	ldr	r3, [pc, #500]	; (7e04 <__aeabi_dadd+0x380>)
    7c0e:	429e      	cmp	r6, r3
    7c10:	d030      	beq.n	7c74 <__aeabi_dadd+0x1f0>
    7c12:	0324      	lsls	r4, r4, #12
    7c14:	0576      	lsls	r6, r6, #21
    7c16:	0b24      	lsrs	r4, r4, #12
    7c18:	0d76      	lsrs	r6, r6, #21
    7c1a:	e7d4      	b.n	7bc6 <__aeabi_dadd+0x142>
    7c1c:	1a33      	subs	r3, r6, r0
    7c1e:	469a      	mov	sl, r3
    7c20:	2b00      	cmp	r3, #0
    7c22:	dd78      	ble.n	7d16 <__aeabi_dadd+0x292>
    7c24:	2800      	cmp	r0, #0
    7c26:	d031      	beq.n	7c8c <__aeabi_dadd+0x208>
    7c28:	4876      	ldr	r0, [pc, #472]	; (7e04 <__aeabi_dadd+0x380>)
    7c2a:	4286      	cmp	r6, r0
    7c2c:	d0ae      	beq.n	7b8c <__aeabi_dadd+0x108>
    7c2e:	2080      	movs	r0, #128	; 0x80
    7c30:	0400      	lsls	r0, r0, #16
    7c32:	4301      	orrs	r1, r0
    7c34:	4653      	mov	r3, sl
    7c36:	2b38      	cmp	r3, #56	; 0x38
    7c38:	dc00      	bgt.n	7c3c <__aeabi_dadd+0x1b8>
    7c3a:	e0e9      	b.n	7e10 <__aeabi_dadd+0x38c>
    7c3c:	430a      	orrs	r2, r1
    7c3e:	1e51      	subs	r1, r2, #1
    7c40:	418a      	sbcs	r2, r1
    7c42:	2100      	movs	r1, #0
    7c44:	19d2      	adds	r2, r2, r7
    7c46:	42ba      	cmp	r2, r7
    7c48:	41bf      	sbcs	r7, r7
    7c4a:	1909      	adds	r1, r1, r4
    7c4c:	427c      	negs	r4, r7
    7c4e:	0017      	movs	r7, r2
    7c50:	190c      	adds	r4, r1, r4
    7c52:	0223      	lsls	r3, r4, #8
    7c54:	d5d3      	bpl.n	7bfe <__aeabi_dadd+0x17a>
    7c56:	4b6b      	ldr	r3, [pc, #428]	; (7e04 <__aeabi_dadd+0x380>)
    7c58:	3601      	adds	r6, #1
    7c5a:	429e      	cmp	r6, r3
    7c5c:	d100      	bne.n	7c60 <__aeabi_dadd+0x1dc>
    7c5e:	e13a      	b.n	7ed6 <__aeabi_dadd+0x452>
    7c60:	2001      	movs	r0, #1
    7c62:	4b69      	ldr	r3, [pc, #420]	; (7e08 <__aeabi_dadd+0x384>)
    7c64:	401c      	ands	r4, r3
    7c66:	087b      	lsrs	r3, r7, #1
    7c68:	4007      	ands	r7, r0
    7c6a:	431f      	orrs	r7, r3
    7c6c:	07e0      	lsls	r0, r4, #31
    7c6e:	4307      	orrs	r7, r0
    7c70:	0864      	lsrs	r4, r4, #1
    7c72:	e78b      	b.n	7b8c <__aeabi_dadd+0x108>
    7c74:	0023      	movs	r3, r4
    7c76:	433b      	orrs	r3, r7
    7c78:	d100      	bne.n	7c7c <__aeabi_dadd+0x1f8>
    7c7a:	e1cb      	b.n	8014 <__aeabi_dadd+0x590>
    7c7c:	2280      	movs	r2, #128	; 0x80
    7c7e:	0312      	lsls	r2, r2, #12
    7c80:	4314      	orrs	r4, r2
    7c82:	0324      	lsls	r4, r4, #12
    7c84:	0b24      	lsrs	r4, r4, #12
    7c86:	e79e      	b.n	7bc6 <__aeabi_dadd+0x142>
    7c88:	002e      	movs	r6, r5
    7c8a:	e77f      	b.n	7b8c <__aeabi_dadd+0x108>
    7c8c:	0008      	movs	r0, r1
    7c8e:	4310      	orrs	r0, r2
    7c90:	d100      	bne.n	7c94 <__aeabi_dadd+0x210>
    7c92:	e0b4      	b.n	7dfe <__aeabi_dadd+0x37a>
    7c94:	1e58      	subs	r0, r3, #1
    7c96:	2800      	cmp	r0, #0
    7c98:	d000      	beq.n	7c9c <__aeabi_dadd+0x218>
    7c9a:	e0de      	b.n	7e5a <__aeabi_dadd+0x3d6>
    7c9c:	18ba      	adds	r2, r7, r2
    7c9e:	42ba      	cmp	r2, r7
    7ca0:	419b      	sbcs	r3, r3
    7ca2:	1864      	adds	r4, r4, r1
    7ca4:	425b      	negs	r3, r3
    7ca6:	18e4      	adds	r4, r4, r3
    7ca8:	0017      	movs	r7, r2
    7caa:	2601      	movs	r6, #1
    7cac:	0223      	lsls	r3, r4, #8
    7cae:	d5a6      	bpl.n	7bfe <__aeabi_dadd+0x17a>
    7cb0:	2602      	movs	r6, #2
    7cb2:	e7d5      	b.n	7c60 <__aeabi_dadd+0x1dc>
    7cb4:	2d00      	cmp	r5, #0
    7cb6:	d16e      	bne.n	7d96 <__aeabi_dadd+0x312>
    7cb8:	1c70      	adds	r0, r6, #1
    7cba:	0540      	lsls	r0, r0, #21
    7cbc:	0d40      	lsrs	r0, r0, #21
    7cbe:	2801      	cmp	r0, #1
    7cc0:	dc00      	bgt.n	7cc4 <__aeabi_dadd+0x240>
    7cc2:	e0f9      	b.n	7eb8 <__aeabi_dadd+0x434>
    7cc4:	1ab8      	subs	r0, r7, r2
    7cc6:	4684      	mov	ip, r0
    7cc8:	4287      	cmp	r7, r0
    7cca:	4180      	sbcs	r0, r0
    7ccc:	1ae5      	subs	r5, r4, r3
    7cce:	4240      	negs	r0, r0
    7cd0:	1a2d      	subs	r5, r5, r0
    7cd2:	0228      	lsls	r0, r5, #8
    7cd4:	d400      	bmi.n	7cd8 <__aeabi_dadd+0x254>
    7cd6:	e089      	b.n	7dec <__aeabi_dadd+0x368>
    7cd8:	1bd7      	subs	r7, r2, r7
    7cda:	42ba      	cmp	r2, r7
    7cdc:	4192      	sbcs	r2, r2
    7cde:	1b1c      	subs	r4, r3, r4
    7ce0:	4252      	negs	r2, r2
    7ce2:	1aa5      	subs	r5, r4, r2
    7ce4:	46d8      	mov	r8, fp
    7ce6:	e729      	b.n	7b3c <__aeabi_dadd+0xb8>
    7ce8:	4645      	mov	r5, r8
    7cea:	2400      	movs	r4, #0
    7cec:	2700      	movs	r7, #0
    7cee:	e76a      	b.n	7bc6 <__aeabi_dadd+0x142>
    7cf0:	4c45      	ldr	r4, [pc, #276]	; (7e08 <__aeabi_dadd+0x384>)
    7cf2:	1af6      	subs	r6, r6, r3
    7cf4:	402c      	ands	r4, r5
    7cf6:	e749      	b.n	7b8c <__aeabi_dadd+0x108>
    7cf8:	003d      	movs	r5, r7
    7cfa:	3828      	subs	r0, #40	; 0x28
    7cfc:	4085      	lsls	r5, r0
    7cfe:	2700      	movs	r7, #0
    7d00:	e72e      	b.n	7b60 <__aeabi_dadd+0xdc>
    7d02:	0038      	movs	r0, r7
    7d04:	f001 fb56 	bl	93b4 <__clzsi2>
    7d08:	3020      	adds	r0, #32
    7d0a:	e71d      	b.n	7b48 <__aeabi_dadd+0xc4>
    7d0c:	430a      	orrs	r2, r1
    7d0e:	1e51      	subs	r1, r2, #1
    7d10:	418a      	sbcs	r2, r1
    7d12:	2100      	movs	r1, #0
    7d14:	e707      	b.n	7b26 <__aeabi_dadd+0xa2>
    7d16:	2b00      	cmp	r3, #0
    7d18:	d000      	beq.n	7d1c <__aeabi_dadd+0x298>
    7d1a:	e0f3      	b.n	7f04 <__aeabi_dadd+0x480>
    7d1c:	1c70      	adds	r0, r6, #1
    7d1e:	0543      	lsls	r3, r0, #21
    7d20:	0d5b      	lsrs	r3, r3, #21
    7d22:	2b01      	cmp	r3, #1
    7d24:	dc00      	bgt.n	7d28 <__aeabi_dadd+0x2a4>
    7d26:	e0ad      	b.n	7e84 <__aeabi_dadd+0x400>
    7d28:	4b36      	ldr	r3, [pc, #216]	; (7e04 <__aeabi_dadd+0x380>)
    7d2a:	4298      	cmp	r0, r3
    7d2c:	d100      	bne.n	7d30 <__aeabi_dadd+0x2ac>
    7d2e:	e0d1      	b.n	7ed4 <__aeabi_dadd+0x450>
    7d30:	18ba      	adds	r2, r7, r2
    7d32:	42ba      	cmp	r2, r7
    7d34:	41bf      	sbcs	r7, r7
    7d36:	1864      	adds	r4, r4, r1
    7d38:	427f      	negs	r7, r7
    7d3a:	19e4      	adds	r4, r4, r7
    7d3c:	07e7      	lsls	r7, r4, #31
    7d3e:	0852      	lsrs	r2, r2, #1
    7d40:	4317      	orrs	r7, r2
    7d42:	0864      	lsrs	r4, r4, #1
    7d44:	0006      	movs	r6, r0
    7d46:	e721      	b.n	7b8c <__aeabi_dadd+0x108>
    7d48:	482e      	ldr	r0, [pc, #184]	; (7e04 <__aeabi_dadd+0x380>)
    7d4a:	4285      	cmp	r5, r0
    7d4c:	d100      	bne.n	7d50 <__aeabi_dadd+0x2cc>
    7d4e:	e093      	b.n	7e78 <__aeabi_dadd+0x3f4>
    7d50:	001d      	movs	r5, r3
    7d52:	e6d0      	b.n	7af6 <__aeabi_dadd+0x72>
    7d54:	0029      	movs	r1, r5
    7d56:	3e1f      	subs	r6, #31
    7d58:	40f1      	lsrs	r1, r6
    7d5a:	2b20      	cmp	r3, #32
    7d5c:	d100      	bne.n	7d60 <__aeabi_dadd+0x2dc>
    7d5e:	e08d      	b.n	7e7c <__aeabi_dadd+0x3f8>
    7d60:	2240      	movs	r2, #64	; 0x40
    7d62:	1ad3      	subs	r3, r2, r3
    7d64:	409d      	lsls	r5, r3
    7d66:	432f      	orrs	r7, r5
    7d68:	1e7d      	subs	r5, r7, #1
    7d6a:	41af      	sbcs	r7, r5
    7d6c:	2400      	movs	r4, #0
    7d6e:	430f      	orrs	r7, r1
    7d70:	2600      	movs	r6, #0
    7d72:	e744      	b.n	7bfe <__aeabi_dadd+0x17a>
    7d74:	002b      	movs	r3, r5
    7d76:	0008      	movs	r0, r1
    7d78:	3b20      	subs	r3, #32
    7d7a:	40d8      	lsrs	r0, r3
    7d7c:	0003      	movs	r3, r0
    7d7e:	2d20      	cmp	r5, #32
    7d80:	d100      	bne.n	7d84 <__aeabi_dadd+0x300>
    7d82:	e07d      	b.n	7e80 <__aeabi_dadd+0x3fc>
    7d84:	2040      	movs	r0, #64	; 0x40
    7d86:	1b45      	subs	r5, r0, r5
    7d88:	40a9      	lsls	r1, r5
    7d8a:	430a      	orrs	r2, r1
    7d8c:	1e51      	subs	r1, r2, #1
    7d8e:	418a      	sbcs	r2, r1
    7d90:	2100      	movs	r1, #0
    7d92:	431a      	orrs	r2, r3
    7d94:	e6c7      	b.n	7b26 <__aeabi_dadd+0xa2>
    7d96:	2e00      	cmp	r6, #0
    7d98:	d050      	beq.n	7e3c <__aeabi_dadd+0x3b8>
    7d9a:	4e1a      	ldr	r6, [pc, #104]	; (7e04 <__aeabi_dadd+0x380>)
    7d9c:	42b0      	cmp	r0, r6
    7d9e:	d057      	beq.n	7e50 <__aeabi_dadd+0x3cc>
    7da0:	2680      	movs	r6, #128	; 0x80
    7da2:	426b      	negs	r3, r5
    7da4:	4699      	mov	r9, r3
    7da6:	0436      	lsls	r6, r6, #16
    7da8:	4334      	orrs	r4, r6
    7daa:	464b      	mov	r3, r9
    7dac:	2b38      	cmp	r3, #56	; 0x38
    7dae:	dd00      	ble.n	7db2 <__aeabi_dadd+0x32e>
    7db0:	e0d6      	b.n	7f60 <__aeabi_dadd+0x4dc>
    7db2:	2b1f      	cmp	r3, #31
    7db4:	dd00      	ble.n	7db8 <__aeabi_dadd+0x334>
    7db6:	e135      	b.n	8024 <__aeabi_dadd+0x5a0>
    7db8:	2620      	movs	r6, #32
    7dba:	1af5      	subs	r5, r6, r3
    7dbc:	0026      	movs	r6, r4
    7dbe:	40ae      	lsls	r6, r5
    7dc0:	46b2      	mov	sl, r6
    7dc2:	003e      	movs	r6, r7
    7dc4:	40de      	lsrs	r6, r3
    7dc6:	46ac      	mov	ip, r5
    7dc8:	0035      	movs	r5, r6
    7dca:	4656      	mov	r6, sl
    7dcc:	432e      	orrs	r6, r5
    7dce:	4665      	mov	r5, ip
    7dd0:	40af      	lsls	r7, r5
    7dd2:	1e7d      	subs	r5, r7, #1
    7dd4:	41af      	sbcs	r7, r5
    7dd6:	40dc      	lsrs	r4, r3
    7dd8:	4337      	orrs	r7, r6
    7dda:	1bd7      	subs	r7, r2, r7
    7ddc:	42ba      	cmp	r2, r7
    7dde:	4192      	sbcs	r2, r2
    7de0:	1b0c      	subs	r4, r1, r4
    7de2:	4252      	negs	r2, r2
    7de4:	1aa4      	subs	r4, r4, r2
    7de6:	0006      	movs	r6, r0
    7de8:	46d8      	mov	r8, fp
    7dea:	e6a3      	b.n	7b34 <__aeabi_dadd+0xb0>
    7dec:	4664      	mov	r4, ip
    7dee:	4667      	mov	r7, ip
    7df0:	432c      	orrs	r4, r5
    7df2:	d000      	beq.n	7df6 <__aeabi_dadd+0x372>
    7df4:	e6a2      	b.n	7b3c <__aeabi_dadd+0xb8>
    7df6:	2500      	movs	r5, #0
    7df8:	2600      	movs	r6, #0
    7dfa:	2700      	movs	r7, #0
    7dfc:	e706      	b.n	7c0c <__aeabi_dadd+0x188>
    7dfe:	001e      	movs	r6, r3
    7e00:	e6c4      	b.n	7b8c <__aeabi_dadd+0x108>
    7e02:	46c0      	nop			; (mov r8, r8)
    7e04:	000007ff 	.word	0x000007ff
    7e08:	ff7fffff 	.word	0xff7fffff
    7e0c:	800fffff 	.word	0x800fffff
    7e10:	2b1f      	cmp	r3, #31
    7e12:	dc63      	bgt.n	7edc <__aeabi_dadd+0x458>
    7e14:	2020      	movs	r0, #32
    7e16:	1ac3      	subs	r3, r0, r3
    7e18:	0008      	movs	r0, r1
    7e1a:	4098      	lsls	r0, r3
    7e1c:	469c      	mov	ip, r3
    7e1e:	4683      	mov	fp, r0
    7e20:	4653      	mov	r3, sl
    7e22:	0010      	movs	r0, r2
    7e24:	40d8      	lsrs	r0, r3
    7e26:	0003      	movs	r3, r0
    7e28:	4658      	mov	r0, fp
    7e2a:	4318      	orrs	r0, r3
    7e2c:	4663      	mov	r3, ip
    7e2e:	409a      	lsls	r2, r3
    7e30:	1e53      	subs	r3, r2, #1
    7e32:	419a      	sbcs	r2, r3
    7e34:	4653      	mov	r3, sl
    7e36:	4302      	orrs	r2, r0
    7e38:	40d9      	lsrs	r1, r3
    7e3a:	e703      	b.n	7c44 <__aeabi_dadd+0x1c0>
    7e3c:	0026      	movs	r6, r4
    7e3e:	433e      	orrs	r6, r7
    7e40:	d006      	beq.n	7e50 <__aeabi_dadd+0x3cc>
    7e42:	43eb      	mvns	r3, r5
    7e44:	4699      	mov	r9, r3
    7e46:	2b00      	cmp	r3, #0
    7e48:	d0c7      	beq.n	7dda <__aeabi_dadd+0x356>
    7e4a:	4e94      	ldr	r6, [pc, #592]	; (809c <__aeabi_dadd+0x618>)
    7e4c:	42b0      	cmp	r0, r6
    7e4e:	d1ac      	bne.n	7daa <__aeabi_dadd+0x326>
    7e50:	000c      	movs	r4, r1
    7e52:	0017      	movs	r7, r2
    7e54:	0006      	movs	r6, r0
    7e56:	46d8      	mov	r8, fp
    7e58:	e698      	b.n	7b8c <__aeabi_dadd+0x108>
    7e5a:	4b90      	ldr	r3, [pc, #576]	; (809c <__aeabi_dadd+0x618>)
    7e5c:	459a      	cmp	sl, r3
    7e5e:	d00b      	beq.n	7e78 <__aeabi_dadd+0x3f4>
    7e60:	4682      	mov	sl, r0
    7e62:	e6e7      	b.n	7c34 <__aeabi_dadd+0x1b0>
    7e64:	2800      	cmp	r0, #0
    7e66:	d000      	beq.n	7e6a <__aeabi_dadd+0x3e6>
    7e68:	e09e      	b.n	7fa8 <__aeabi_dadd+0x524>
    7e6a:	0018      	movs	r0, r3
    7e6c:	4310      	orrs	r0, r2
    7e6e:	d100      	bne.n	7e72 <__aeabi_dadd+0x3ee>
    7e70:	e0e9      	b.n	8046 <__aeabi_dadd+0x5c2>
    7e72:	001c      	movs	r4, r3
    7e74:	0017      	movs	r7, r2
    7e76:	46d8      	mov	r8, fp
    7e78:	4e88      	ldr	r6, [pc, #544]	; (809c <__aeabi_dadd+0x618>)
    7e7a:	e687      	b.n	7b8c <__aeabi_dadd+0x108>
    7e7c:	2500      	movs	r5, #0
    7e7e:	e772      	b.n	7d66 <__aeabi_dadd+0x2e2>
    7e80:	2100      	movs	r1, #0
    7e82:	e782      	b.n	7d8a <__aeabi_dadd+0x306>
    7e84:	0023      	movs	r3, r4
    7e86:	433b      	orrs	r3, r7
    7e88:	2e00      	cmp	r6, #0
    7e8a:	d000      	beq.n	7e8e <__aeabi_dadd+0x40a>
    7e8c:	e0ab      	b.n	7fe6 <__aeabi_dadd+0x562>
    7e8e:	2b00      	cmp	r3, #0
    7e90:	d100      	bne.n	7e94 <__aeabi_dadd+0x410>
    7e92:	e0e7      	b.n	8064 <__aeabi_dadd+0x5e0>
    7e94:	000b      	movs	r3, r1
    7e96:	4313      	orrs	r3, r2
    7e98:	d100      	bne.n	7e9c <__aeabi_dadd+0x418>
    7e9a:	e677      	b.n	7b8c <__aeabi_dadd+0x108>
    7e9c:	18ba      	adds	r2, r7, r2
    7e9e:	42ba      	cmp	r2, r7
    7ea0:	41bf      	sbcs	r7, r7
    7ea2:	1864      	adds	r4, r4, r1
    7ea4:	427f      	negs	r7, r7
    7ea6:	19e4      	adds	r4, r4, r7
    7ea8:	0223      	lsls	r3, r4, #8
    7eaa:	d400      	bmi.n	7eae <__aeabi_dadd+0x42a>
    7eac:	e0f2      	b.n	8094 <__aeabi_dadd+0x610>
    7eae:	4b7c      	ldr	r3, [pc, #496]	; (80a0 <__aeabi_dadd+0x61c>)
    7eb0:	0017      	movs	r7, r2
    7eb2:	401c      	ands	r4, r3
    7eb4:	0006      	movs	r6, r0
    7eb6:	e669      	b.n	7b8c <__aeabi_dadd+0x108>
    7eb8:	0020      	movs	r0, r4
    7eba:	4338      	orrs	r0, r7
    7ebc:	2e00      	cmp	r6, #0
    7ebe:	d1d1      	bne.n	7e64 <__aeabi_dadd+0x3e0>
    7ec0:	2800      	cmp	r0, #0
    7ec2:	d15b      	bne.n	7f7c <__aeabi_dadd+0x4f8>
    7ec4:	001c      	movs	r4, r3
    7ec6:	4314      	orrs	r4, r2
    7ec8:	d100      	bne.n	7ecc <__aeabi_dadd+0x448>
    7eca:	e0a8      	b.n	801e <__aeabi_dadd+0x59a>
    7ecc:	001c      	movs	r4, r3
    7ece:	0017      	movs	r7, r2
    7ed0:	46d8      	mov	r8, fp
    7ed2:	e65b      	b.n	7b8c <__aeabi_dadd+0x108>
    7ed4:	0006      	movs	r6, r0
    7ed6:	2400      	movs	r4, #0
    7ed8:	2700      	movs	r7, #0
    7eda:	e697      	b.n	7c0c <__aeabi_dadd+0x188>
    7edc:	4650      	mov	r0, sl
    7ede:	000b      	movs	r3, r1
    7ee0:	3820      	subs	r0, #32
    7ee2:	40c3      	lsrs	r3, r0
    7ee4:	4699      	mov	r9, r3
    7ee6:	4653      	mov	r3, sl
    7ee8:	2b20      	cmp	r3, #32
    7eea:	d100      	bne.n	7eee <__aeabi_dadd+0x46a>
    7eec:	e095      	b.n	801a <__aeabi_dadd+0x596>
    7eee:	2340      	movs	r3, #64	; 0x40
    7ef0:	4650      	mov	r0, sl
    7ef2:	1a1b      	subs	r3, r3, r0
    7ef4:	4099      	lsls	r1, r3
    7ef6:	430a      	orrs	r2, r1
    7ef8:	1e51      	subs	r1, r2, #1
    7efa:	418a      	sbcs	r2, r1
    7efc:	464b      	mov	r3, r9
    7efe:	2100      	movs	r1, #0
    7f00:	431a      	orrs	r2, r3
    7f02:	e69f      	b.n	7c44 <__aeabi_dadd+0x1c0>
    7f04:	2e00      	cmp	r6, #0
    7f06:	d130      	bne.n	7f6a <__aeabi_dadd+0x4e6>
    7f08:	0026      	movs	r6, r4
    7f0a:	433e      	orrs	r6, r7
    7f0c:	d067      	beq.n	7fde <__aeabi_dadd+0x55a>
    7f0e:	43db      	mvns	r3, r3
    7f10:	469a      	mov	sl, r3
    7f12:	2b00      	cmp	r3, #0
    7f14:	d01c      	beq.n	7f50 <__aeabi_dadd+0x4cc>
    7f16:	4e61      	ldr	r6, [pc, #388]	; (809c <__aeabi_dadd+0x618>)
    7f18:	42b0      	cmp	r0, r6
    7f1a:	d060      	beq.n	7fde <__aeabi_dadd+0x55a>
    7f1c:	4653      	mov	r3, sl
    7f1e:	2b38      	cmp	r3, #56	; 0x38
    7f20:	dd00      	ble.n	7f24 <__aeabi_dadd+0x4a0>
    7f22:	e096      	b.n	8052 <__aeabi_dadd+0x5ce>
    7f24:	2b1f      	cmp	r3, #31
    7f26:	dd00      	ble.n	7f2a <__aeabi_dadd+0x4a6>
    7f28:	e09f      	b.n	806a <__aeabi_dadd+0x5e6>
    7f2a:	2620      	movs	r6, #32
    7f2c:	1af3      	subs	r3, r6, r3
    7f2e:	0026      	movs	r6, r4
    7f30:	409e      	lsls	r6, r3
    7f32:	469c      	mov	ip, r3
    7f34:	46b3      	mov	fp, r6
    7f36:	4653      	mov	r3, sl
    7f38:	003e      	movs	r6, r7
    7f3a:	40de      	lsrs	r6, r3
    7f3c:	0033      	movs	r3, r6
    7f3e:	465e      	mov	r6, fp
    7f40:	431e      	orrs	r6, r3
    7f42:	4663      	mov	r3, ip
    7f44:	409f      	lsls	r7, r3
    7f46:	1e7b      	subs	r3, r7, #1
    7f48:	419f      	sbcs	r7, r3
    7f4a:	4653      	mov	r3, sl
    7f4c:	40dc      	lsrs	r4, r3
    7f4e:	4337      	orrs	r7, r6
    7f50:	18bf      	adds	r7, r7, r2
    7f52:	4297      	cmp	r7, r2
    7f54:	4192      	sbcs	r2, r2
    7f56:	1864      	adds	r4, r4, r1
    7f58:	4252      	negs	r2, r2
    7f5a:	18a4      	adds	r4, r4, r2
    7f5c:	0006      	movs	r6, r0
    7f5e:	e678      	b.n	7c52 <__aeabi_dadd+0x1ce>
    7f60:	4327      	orrs	r7, r4
    7f62:	1e7c      	subs	r4, r7, #1
    7f64:	41a7      	sbcs	r7, r4
    7f66:	2400      	movs	r4, #0
    7f68:	e737      	b.n	7dda <__aeabi_dadd+0x356>
    7f6a:	4e4c      	ldr	r6, [pc, #304]	; (809c <__aeabi_dadd+0x618>)
    7f6c:	42b0      	cmp	r0, r6
    7f6e:	d036      	beq.n	7fde <__aeabi_dadd+0x55a>
    7f70:	2680      	movs	r6, #128	; 0x80
    7f72:	425b      	negs	r3, r3
    7f74:	0436      	lsls	r6, r6, #16
    7f76:	469a      	mov	sl, r3
    7f78:	4334      	orrs	r4, r6
    7f7a:	e7cf      	b.n	7f1c <__aeabi_dadd+0x498>
    7f7c:	0018      	movs	r0, r3
    7f7e:	4310      	orrs	r0, r2
    7f80:	d100      	bne.n	7f84 <__aeabi_dadd+0x500>
    7f82:	e603      	b.n	7b8c <__aeabi_dadd+0x108>
    7f84:	1ab8      	subs	r0, r7, r2
    7f86:	4684      	mov	ip, r0
    7f88:	4567      	cmp	r7, ip
    7f8a:	41ad      	sbcs	r5, r5
    7f8c:	1ae0      	subs	r0, r4, r3
    7f8e:	426d      	negs	r5, r5
    7f90:	1b40      	subs	r0, r0, r5
    7f92:	0205      	lsls	r5, r0, #8
    7f94:	d400      	bmi.n	7f98 <__aeabi_dadd+0x514>
    7f96:	e62c      	b.n	7bf2 <__aeabi_dadd+0x16e>
    7f98:	1bd7      	subs	r7, r2, r7
    7f9a:	42ba      	cmp	r2, r7
    7f9c:	4192      	sbcs	r2, r2
    7f9e:	1b1c      	subs	r4, r3, r4
    7fa0:	4252      	negs	r2, r2
    7fa2:	1aa4      	subs	r4, r4, r2
    7fa4:	46d8      	mov	r8, fp
    7fa6:	e5f1      	b.n	7b8c <__aeabi_dadd+0x108>
    7fa8:	0018      	movs	r0, r3
    7faa:	4310      	orrs	r0, r2
    7fac:	d100      	bne.n	7fb0 <__aeabi_dadd+0x52c>
    7fae:	e763      	b.n	7e78 <__aeabi_dadd+0x3f4>
    7fb0:	08f8      	lsrs	r0, r7, #3
    7fb2:	0767      	lsls	r7, r4, #29
    7fb4:	4307      	orrs	r7, r0
    7fb6:	2080      	movs	r0, #128	; 0x80
    7fb8:	08e4      	lsrs	r4, r4, #3
    7fba:	0300      	lsls	r0, r0, #12
    7fbc:	4204      	tst	r4, r0
    7fbe:	d008      	beq.n	7fd2 <__aeabi_dadd+0x54e>
    7fc0:	08dd      	lsrs	r5, r3, #3
    7fc2:	4205      	tst	r5, r0
    7fc4:	d105      	bne.n	7fd2 <__aeabi_dadd+0x54e>
    7fc6:	08d2      	lsrs	r2, r2, #3
    7fc8:	0759      	lsls	r1, r3, #29
    7fca:	4311      	orrs	r1, r2
    7fcc:	000f      	movs	r7, r1
    7fce:	002c      	movs	r4, r5
    7fd0:	46d8      	mov	r8, fp
    7fd2:	0f7b      	lsrs	r3, r7, #29
    7fd4:	00e4      	lsls	r4, r4, #3
    7fd6:	431c      	orrs	r4, r3
    7fd8:	00ff      	lsls	r7, r7, #3
    7fda:	4e30      	ldr	r6, [pc, #192]	; (809c <__aeabi_dadd+0x618>)
    7fdc:	e5d6      	b.n	7b8c <__aeabi_dadd+0x108>
    7fde:	000c      	movs	r4, r1
    7fe0:	0017      	movs	r7, r2
    7fe2:	0006      	movs	r6, r0
    7fe4:	e5d2      	b.n	7b8c <__aeabi_dadd+0x108>
    7fe6:	2b00      	cmp	r3, #0
    7fe8:	d038      	beq.n	805c <__aeabi_dadd+0x5d8>
    7fea:	000b      	movs	r3, r1
    7fec:	4313      	orrs	r3, r2
    7fee:	d100      	bne.n	7ff2 <__aeabi_dadd+0x56e>
    7ff0:	e742      	b.n	7e78 <__aeabi_dadd+0x3f4>
    7ff2:	08f8      	lsrs	r0, r7, #3
    7ff4:	0767      	lsls	r7, r4, #29
    7ff6:	4307      	orrs	r7, r0
    7ff8:	2080      	movs	r0, #128	; 0x80
    7ffa:	08e4      	lsrs	r4, r4, #3
    7ffc:	0300      	lsls	r0, r0, #12
    7ffe:	4204      	tst	r4, r0
    8000:	d0e7      	beq.n	7fd2 <__aeabi_dadd+0x54e>
    8002:	08cb      	lsrs	r3, r1, #3
    8004:	4203      	tst	r3, r0
    8006:	d1e4      	bne.n	7fd2 <__aeabi_dadd+0x54e>
    8008:	08d2      	lsrs	r2, r2, #3
    800a:	0749      	lsls	r1, r1, #29
    800c:	4311      	orrs	r1, r2
    800e:	000f      	movs	r7, r1
    8010:	001c      	movs	r4, r3
    8012:	e7de      	b.n	7fd2 <__aeabi_dadd+0x54e>
    8014:	2700      	movs	r7, #0
    8016:	2400      	movs	r4, #0
    8018:	e5d5      	b.n	7bc6 <__aeabi_dadd+0x142>
    801a:	2100      	movs	r1, #0
    801c:	e76b      	b.n	7ef6 <__aeabi_dadd+0x472>
    801e:	2500      	movs	r5, #0
    8020:	2700      	movs	r7, #0
    8022:	e5f3      	b.n	7c0c <__aeabi_dadd+0x188>
    8024:	464e      	mov	r6, r9
    8026:	0025      	movs	r5, r4
    8028:	3e20      	subs	r6, #32
    802a:	40f5      	lsrs	r5, r6
    802c:	464b      	mov	r3, r9
    802e:	002e      	movs	r6, r5
    8030:	2b20      	cmp	r3, #32
    8032:	d02d      	beq.n	8090 <__aeabi_dadd+0x60c>
    8034:	2540      	movs	r5, #64	; 0x40
    8036:	1aed      	subs	r5, r5, r3
    8038:	40ac      	lsls	r4, r5
    803a:	4327      	orrs	r7, r4
    803c:	1e7c      	subs	r4, r7, #1
    803e:	41a7      	sbcs	r7, r4
    8040:	2400      	movs	r4, #0
    8042:	4337      	orrs	r7, r6
    8044:	e6c9      	b.n	7dda <__aeabi_dadd+0x356>
    8046:	2480      	movs	r4, #128	; 0x80
    8048:	2500      	movs	r5, #0
    804a:	0324      	lsls	r4, r4, #12
    804c:	4e13      	ldr	r6, [pc, #76]	; (809c <__aeabi_dadd+0x618>)
    804e:	2700      	movs	r7, #0
    8050:	e5dc      	b.n	7c0c <__aeabi_dadd+0x188>
    8052:	4327      	orrs	r7, r4
    8054:	1e7c      	subs	r4, r7, #1
    8056:	41a7      	sbcs	r7, r4
    8058:	2400      	movs	r4, #0
    805a:	e779      	b.n	7f50 <__aeabi_dadd+0x4cc>
    805c:	000c      	movs	r4, r1
    805e:	0017      	movs	r7, r2
    8060:	4e0e      	ldr	r6, [pc, #56]	; (809c <__aeabi_dadd+0x618>)
    8062:	e593      	b.n	7b8c <__aeabi_dadd+0x108>
    8064:	000c      	movs	r4, r1
    8066:	0017      	movs	r7, r2
    8068:	e590      	b.n	7b8c <__aeabi_dadd+0x108>
    806a:	4656      	mov	r6, sl
    806c:	0023      	movs	r3, r4
    806e:	3e20      	subs	r6, #32
    8070:	40f3      	lsrs	r3, r6
    8072:	4699      	mov	r9, r3
    8074:	4653      	mov	r3, sl
    8076:	2b20      	cmp	r3, #32
    8078:	d00e      	beq.n	8098 <__aeabi_dadd+0x614>
    807a:	2340      	movs	r3, #64	; 0x40
    807c:	4656      	mov	r6, sl
    807e:	1b9b      	subs	r3, r3, r6
    8080:	409c      	lsls	r4, r3
    8082:	4327      	orrs	r7, r4
    8084:	1e7c      	subs	r4, r7, #1
    8086:	41a7      	sbcs	r7, r4
    8088:	464b      	mov	r3, r9
    808a:	2400      	movs	r4, #0
    808c:	431f      	orrs	r7, r3
    808e:	e75f      	b.n	7f50 <__aeabi_dadd+0x4cc>
    8090:	2400      	movs	r4, #0
    8092:	e7d2      	b.n	803a <__aeabi_dadd+0x5b6>
    8094:	0017      	movs	r7, r2
    8096:	e5b2      	b.n	7bfe <__aeabi_dadd+0x17a>
    8098:	2400      	movs	r4, #0
    809a:	e7f2      	b.n	8082 <__aeabi_dadd+0x5fe>
    809c:	000007ff 	.word	0x000007ff
    80a0:	ff7fffff 	.word	0xff7fffff

000080a4 <__aeabi_ddiv>:
    80a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    80a6:	4657      	mov	r7, sl
    80a8:	4645      	mov	r5, r8
    80aa:	46de      	mov	lr, fp
    80ac:	464e      	mov	r6, r9
    80ae:	b5e0      	push	{r5, r6, r7, lr}
    80b0:	004c      	lsls	r4, r1, #1
    80b2:	030e      	lsls	r6, r1, #12
    80b4:	b087      	sub	sp, #28
    80b6:	4683      	mov	fp, r0
    80b8:	4692      	mov	sl, r2
    80ba:	001d      	movs	r5, r3
    80bc:	4680      	mov	r8, r0
    80be:	0b36      	lsrs	r6, r6, #12
    80c0:	0d64      	lsrs	r4, r4, #21
    80c2:	0fcf      	lsrs	r7, r1, #31
    80c4:	2c00      	cmp	r4, #0
    80c6:	d04f      	beq.n	8168 <__aeabi_ddiv+0xc4>
    80c8:	4b6f      	ldr	r3, [pc, #444]	; (8288 <__aeabi_ddiv+0x1e4>)
    80ca:	429c      	cmp	r4, r3
    80cc:	d035      	beq.n	813a <__aeabi_ddiv+0x96>
    80ce:	2380      	movs	r3, #128	; 0x80
    80d0:	0f42      	lsrs	r2, r0, #29
    80d2:	041b      	lsls	r3, r3, #16
    80d4:	00f6      	lsls	r6, r6, #3
    80d6:	4313      	orrs	r3, r2
    80d8:	4333      	orrs	r3, r6
    80da:	4699      	mov	r9, r3
    80dc:	00c3      	lsls	r3, r0, #3
    80de:	4698      	mov	r8, r3
    80e0:	4b6a      	ldr	r3, [pc, #424]	; (828c <__aeabi_ddiv+0x1e8>)
    80e2:	2600      	movs	r6, #0
    80e4:	469c      	mov	ip, r3
    80e6:	2300      	movs	r3, #0
    80e8:	4464      	add	r4, ip
    80ea:	9303      	str	r3, [sp, #12]
    80ec:	032b      	lsls	r3, r5, #12
    80ee:	0b1b      	lsrs	r3, r3, #12
    80f0:	469b      	mov	fp, r3
    80f2:	006b      	lsls	r3, r5, #1
    80f4:	0fed      	lsrs	r5, r5, #31
    80f6:	4650      	mov	r0, sl
    80f8:	0d5b      	lsrs	r3, r3, #21
    80fa:	9501      	str	r5, [sp, #4]
    80fc:	d05e      	beq.n	81bc <__aeabi_ddiv+0x118>
    80fe:	4a62      	ldr	r2, [pc, #392]	; (8288 <__aeabi_ddiv+0x1e4>)
    8100:	4293      	cmp	r3, r2
    8102:	d053      	beq.n	81ac <__aeabi_ddiv+0x108>
    8104:	465a      	mov	r2, fp
    8106:	00d1      	lsls	r1, r2, #3
    8108:	2280      	movs	r2, #128	; 0x80
    810a:	0f40      	lsrs	r0, r0, #29
    810c:	0412      	lsls	r2, r2, #16
    810e:	4302      	orrs	r2, r0
    8110:	430a      	orrs	r2, r1
    8112:	4693      	mov	fp, r2
    8114:	4652      	mov	r2, sl
    8116:	00d1      	lsls	r1, r2, #3
    8118:	4a5c      	ldr	r2, [pc, #368]	; (828c <__aeabi_ddiv+0x1e8>)
    811a:	4694      	mov	ip, r2
    811c:	2200      	movs	r2, #0
    811e:	4463      	add	r3, ip
    8120:	0038      	movs	r0, r7
    8122:	4068      	eors	r0, r5
    8124:	4684      	mov	ip, r0
    8126:	9002      	str	r0, [sp, #8]
    8128:	1ae4      	subs	r4, r4, r3
    812a:	4316      	orrs	r6, r2
    812c:	2e0f      	cmp	r6, #15
    812e:	d900      	bls.n	8132 <__aeabi_ddiv+0x8e>
    8130:	e0b4      	b.n	829c <__aeabi_ddiv+0x1f8>
    8132:	4b57      	ldr	r3, [pc, #348]	; (8290 <__aeabi_ddiv+0x1ec>)
    8134:	00b6      	lsls	r6, r6, #2
    8136:	599b      	ldr	r3, [r3, r6]
    8138:	469f      	mov	pc, r3
    813a:	0003      	movs	r3, r0
    813c:	4333      	orrs	r3, r6
    813e:	4699      	mov	r9, r3
    8140:	d16c      	bne.n	821c <__aeabi_ddiv+0x178>
    8142:	2300      	movs	r3, #0
    8144:	4698      	mov	r8, r3
    8146:	3302      	adds	r3, #2
    8148:	2608      	movs	r6, #8
    814a:	9303      	str	r3, [sp, #12]
    814c:	e7ce      	b.n	80ec <__aeabi_ddiv+0x48>
    814e:	46cb      	mov	fp, r9
    8150:	4641      	mov	r1, r8
    8152:	9a03      	ldr	r2, [sp, #12]
    8154:	9701      	str	r7, [sp, #4]
    8156:	2a02      	cmp	r2, #2
    8158:	d165      	bne.n	8226 <__aeabi_ddiv+0x182>
    815a:	9b01      	ldr	r3, [sp, #4]
    815c:	4c4a      	ldr	r4, [pc, #296]	; (8288 <__aeabi_ddiv+0x1e4>)
    815e:	469c      	mov	ip, r3
    8160:	2300      	movs	r3, #0
    8162:	2200      	movs	r2, #0
    8164:	4698      	mov	r8, r3
    8166:	e06b      	b.n	8240 <__aeabi_ddiv+0x19c>
    8168:	0003      	movs	r3, r0
    816a:	4333      	orrs	r3, r6
    816c:	4699      	mov	r9, r3
    816e:	d04e      	beq.n	820e <__aeabi_ddiv+0x16a>
    8170:	2e00      	cmp	r6, #0
    8172:	d100      	bne.n	8176 <__aeabi_ddiv+0xd2>
    8174:	e1bc      	b.n	84f0 <__aeabi_ddiv+0x44c>
    8176:	0030      	movs	r0, r6
    8178:	f001 f91c 	bl	93b4 <__clzsi2>
    817c:	0003      	movs	r3, r0
    817e:	3b0b      	subs	r3, #11
    8180:	2b1c      	cmp	r3, #28
    8182:	dd00      	ble.n	8186 <__aeabi_ddiv+0xe2>
    8184:	e1ac      	b.n	84e0 <__aeabi_ddiv+0x43c>
    8186:	221d      	movs	r2, #29
    8188:	1ad3      	subs	r3, r2, r3
    818a:	465a      	mov	r2, fp
    818c:	0001      	movs	r1, r0
    818e:	40da      	lsrs	r2, r3
    8190:	3908      	subs	r1, #8
    8192:	408e      	lsls	r6, r1
    8194:	0013      	movs	r3, r2
    8196:	4333      	orrs	r3, r6
    8198:	4699      	mov	r9, r3
    819a:	465b      	mov	r3, fp
    819c:	408b      	lsls	r3, r1
    819e:	4698      	mov	r8, r3
    81a0:	2300      	movs	r3, #0
    81a2:	4c3c      	ldr	r4, [pc, #240]	; (8294 <__aeabi_ddiv+0x1f0>)
    81a4:	2600      	movs	r6, #0
    81a6:	1a24      	subs	r4, r4, r0
    81a8:	9303      	str	r3, [sp, #12]
    81aa:	e79f      	b.n	80ec <__aeabi_ddiv+0x48>
    81ac:	4651      	mov	r1, sl
    81ae:	465a      	mov	r2, fp
    81b0:	4311      	orrs	r1, r2
    81b2:	d129      	bne.n	8208 <__aeabi_ddiv+0x164>
    81b4:	2200      	movs	r2, #0
    81b6:	4693      	mov	fp, r2
    81b8:	3202      	adds	r2, #2
    81ba:	e7b1      	b.n	8120 <__aeabi_ddiv+0x7c>
    81bc:	4659      	mov	r1, fp
    81be:	4301      	orrs	r1, r0
    81c0:	d01e      	beq.n	8200 <__aeabi_ddiv+0x15c>
    81c2:	465b      	mov	r3, fp
    81c4:	2b00      	cmp	r3, #0
    81c6:	d100      	bne.n	81ca <__aeabi_ddiv+0x126>
    81c8:	e19e      	b.n	8508 <__aeabi_ddiv+0x464>
    81ca:	4658      	mov	r0, fp
    81cc:	f001 f8f2 	bl	93b4 <__clzsi2>
    81d0:	0003      	movs	r3, r0
    81d2:	3b0b      	subs	r3, #11
    81d4:	2b1c      	cmp	r3, #28
    81d6:	dd00      	ble.n	81da <__aeabi_ddiv+0x136>
    81d8:	e18f      	b.n	84fa <__aeabi_ddiv+0x456>
    81da:	0002      	movs	r2, r0
    81dc:	4659      	mov	r1, fp
    81de:	3a08      	subs	r2, #8
    81e0:	4091      	lsls	r1, r2
    81e2:	468b      	mov	fp, r1
    81e4:	211d      	movs	r1, #29
    81e6:	1acb      	subs	r3, r1, r3
    81e8:	4651      	mov	r1, sl
    81ea:	40d9      	lsrs	r1, r3
    81ec:	000b      	movs	r3, r1
    81ee:	4659      	mov	r1, fp
    81f0:	430b      	orrs	r3, r1
    81f2:	4651      	mov	r1, sl
    81f4:	469b      	mov	fp, r3
    81f6:	4091      	lsls	r1, r2
    81f8:	4b26      	ldr	r3, [pc, #152]	; (8294 <__aeabi_ddiv+0x1f0>)
    81fa:	2200      	movs	r2, #0
    81fc:	1a1b      	subs	r3, r3, r0
    81fe:	e78f      	b.n	8120 <__aeabi_ddiv+0x7c>
    8200:	2300      	movs	r3, #0
    8202:	2201      	movs	r2, #1
    8204:	469b      	mov	fp, r3
    8206:	e78b      	b.n	8120 <__aeabi_ddiv+0x7c>
    8208:	4651      	mov	r1, sl
    820a:	2203      	movs	r2, #3
    820c:	e788      	b.n	8120 <__aeabi_ddiv+0x7c>
    820e:	2300      	movs	r3, #0
    8210:	4698      	mov	r8, r3
    8212:	3301      	adds	r3, #1
    8214:	2604      	movs	r6, #4
    8216:	2400      	movs	r4, #0
    8218:	9303      	str	r3, [sp, #12]
    821a:	e767      	b.n	80ec <__aeabi_ddiv+0x48>
    821c:	2303      	movs	r3, #3
    821e:	46b1      	mov	r9, r6
    8220:	9303      	str	r3, [sp, #12]
    8222:	260c      	movs	r6, #12
    8224:	e762      	b.n	80ec <__aeabi_ddiv+0x48>
    8226:	2a03      	cmp	r2, #3
    8228:	d100      	bne.n	822c <__aeabi_ddiv+0x188>
    822a:	e25c      	b.n	86e6 <__aeabi_ddiv+0x642>
    822c:	9b01      	ldr	r3, [sp, #4]
    822e:	2a01      	cmp	r2, #1
    8230:	d000      	beq.n	8234 <__aeabi_ddiv+0x190>
    8232:	e1e4      	b.n	85fe <__aeabi_ddiv+0x55a>
    8234:	4013      	ands	r3, r2
    8236:	469c      	mov	ip, r3
    8238:	2300      	movs	r3, #0
    823a:	2400      	movs	r4, #0
    823c:	2200      	movs	r2, #0
    823e:	4698      	mov	r8, r3
    8240:	2100      	movs	r1, #0
    8242:	0312      	lsls	r2, r2, #12
    8244:	0b13      	lsrs	r3, r2, #12
    8246:	0d0a      	lsrs	r2, r1, #20
    8248:	0512      	lsls	r2, r2, #20
    824a:	431a      	orrs	r2, r3
    824c:	0523      	lsls	r3, r4, #20
    824e:	4c12      	ldr	r4, [pc, #72]	; (8298 <__aeabi_ddiv+0x1f4>)
    8250:	4640      	mov	r0, r8
    8252:	4022      	ands	r2, r4
    8254:	4313      	orrs	r3, r2
    8256:	4662      	mov	r2, ip
    8258:	005b      	lsls	r3, r3, #1
    825a:	07d2      	lsls	r2, r2, #31
    825c:	085b      	lsrs	r3, r3, #1
    825e:	4313      	orrs	r3, r2
    8260:	0019      	movs	r1, r3
    8262:	b007      	add	sp, #28
    8264:	bc3c      	pop	{r2, r3, r4, r5}
    8266:	4690      	mov	r8, r2
    8268:	4699      	mov	r9, r3
    826a:	46a2      	mov	sl, r4
    826c:	46ab      	mov	fp, r5
    826e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8270:	2300      	movs	r3, #0
    8272:	2280      	movs	r2, #128	; 0x80
    8274:	469c      	mov	ip, r3
    8276:	0312      	lsls	r2, r2, #12
    8278:	4698      	mov	r8, r3
    827a:	4c03      	ldr	r4, [pc, #12]	; (8288 <__aeabi_ddiv+0x1e4>)
    827c:	e7e0      	b.n	8240 <__aeabi_ddiv+0x19c>
    827e:	2300      	movs	r3, #0
    8280:	4c01      	ldr	r4, [pc, #4]	; (8288 <__aeabi_ddiv+0x1e4>)
    8282:	2200      	movs	r2, #0
    8284:	4698      	mov	r8, r3
    8286:	e7db      	b.n	8240 <__aeabi_ddiv+0x19c>
    8288:	000007ff 	.word	0x000007ff
    828c:	fffffc01 	.word	0xfffffc01
    8290:	0000bc28 	.word	0x0000bc28
    8294:	fffffc0d 	.word	0xfffffc0d
    8298:	800fffff 	.word	0x800fffff
    829c:	45d9      	cmp	r9, fp
    829e:	d900      	bls.n	82a2 <__aeabi_ddiv+0x1fe>
    82a0:	e139      	b.n	8516 <__aeabi_ddiv+0x472>
    82a2:	d100      	bne.n	82a6 <__aeabi_ddiv+0x202>
    82a4:	e134      	b.n	8510 <__aeabi_ddiv+0x46c>
    82a6:	2300      	movs	r3, #0
    82a8:	4646      	mov	r6, r8
    82aa:	464d      	mov	r5, r9
    82ac:	469a      	mov	sl, r3
    82ae:	3c01      	subs	r4, #1
    82b0:	465b      	mov	r3, fp
    82b2:	0e0a      	lsrs	r2, r1, #24
    82b4:	021b      	lsls	r3, r3, #8
    82b6:	431a      	orrs	r2, r3
    82b8:	020b      	lsls	r3, r1, #8
    82ba:	0c17      	lsrs	r7, r2, #16
    82bc:	9303      	str	r3, [sp, #12]
    82be:	0413      	lsls	r3, r2, #16
    82c0:	0c1b      	lsrs	r3, r3, #16
    82c2:	0039      	movs	r1, r7
    82c4:	0028      	movs	r0, r5
    82c6:	4690      	mov	r8, r2
    82c8:	9301      	str	r3, [sp, #4]
    82ca:	f7ff f8a3 	bl	7414 <__udivsi3>
    82ce:	0002      	movs	r2, r0
    82d0:	9b01      	ldr	r3, [sp, #4]
    82d2:	4683      	mov	fp, r0
    82d4:	435a      	muls	r2, r3
    82d6:	0028      	movs	r0, r5
    82d8:	0039      	movs	r1, r7
    82da:	4691      	mov	r9, r2
    82dc:	f7ff f920 	bl	7520 <__aeabi_uidivmod>
    82e0:	0c35      	lsrs	r5, r6, #16
    82e2:	0409      	lsls	r1, r1, #16
    82e4:	430d      	orrs	r5, r1
    82e6:	45a9      	cmp	r9, r5
    82e8:	d90d      	bls.n	8306 <__aeabi_ddiv+0x262>
    82ea:	465b      	mov	r3, fp
    82ec:	4445      	add	r5, r8
    82ee:	3b01      	subs	r3, #1
    82f0:	45a8      	cmp	r8, r5
    82f2:	d900      	bls.n	82f6 <__aeabi_ddiv+0x252>
    82f4:	e13a      	b.n	856c <__aeabi_ddiv+0x4c8>
    82f6:	45a9      	cmp	r9, r5
    82f8:	d800      	bhi.n	82fc <__aeabi_ddiv+0x258>
    82fa:	e137      	b.n	856c <__aeabi_ddiv+0x4c8>
    82fc:	2302      	movs	r3, #2
    82fe:	425b      	negs	r3, r3
    8300:	469c      	mov	ip, r3
    8302:	4445      	add	r5, r8
    8304:	44e3      	add	fp, ip
    8306:	464b      	mov	r3, r9
    8308:	1aeb      	subs	r3, r5, r3
    830a:	0039      	movs	r1, r7
    830c:	0018      	movs	r0, r3
    830e:	9304      	str	r3, [sp, #16]
    8310:	f7ff f880 	bl	7414 <__udivsi3>
    8314:	9b01      	ldr	r3, [sp, #4]
    8316:	0005      	movs	r5, r0
    8318:	4343      	muls	r3, r0
    831a:	0039      	movs	r1, r7
    831c:	9804      	ldr	r0, [sp, #16]
    831e:	4699      	mov	r9, r3
    8320:	f7ff f8fe 	bl	7520 <__aeabi_uidivmod>
    8324:	0433      	lsls	r3, r6, #16
    8326:	0409      	lsls	r1, r1, #16
    8328:	0c1b      	lsrs	r3, r3, #16
    832a:	430b      	orrs	r3, r1
    832c:	4599      	cmp	r9, r3
    832e:	d909      	bls.n	8344 <__aeabi_ddiv+0x2a0>
    8330:	4443      	add	r3, r8
    8332:	1e6a      	subs	r2, r5, #1
    8334:	4598      	cmp	r8, r3
    8336:	d900      	bls.n	833a <__aeabi_ddiv+0x296>
    8338:	e11a      	b.n	8570 <__aeabi_ddiv+0x4cc>
    833a:	4599      	cmp	r9, r3
    833c:	d800      	bhi.n	8340 <__aeabi_ddiv+0x29c>
    833e:	e117      	b.n	8570 <__aeabi_ddiv+0x4cc>
    8340:	3d02      	subs	r5, #2
    8342:	4443      	add	r3, r8
    8344:	464a      	mov	r2, r9
    8346:	1a9b      	subs	r3, r3, r2
    8348:	465a      	mov	r2, fp
    834a:	0412      	lsls	r2, r2, #16
    834c:	432a      	orrs	r2, r5
    834e:	9903      	ldr	r1, [sp, #12]
    8350:	4693      	mov	fp, r2
    8352:	0c10      	lsrs	r0, r2, #16
    8354:	0c0a      	lsrs	r2, r1, #16
    8356:	4691      	mov	r9, r2
    8358:	0409      	lsls	r1, r1, #16
    835a:	465a      	mov	r2, fp
    835c:	0c09      	lsrs	r1, r1, #16
    835e:	464e      	mov	r6, r9
    8360:	000d      	movs	r5, r1
    8362:	0412      	lsls	r2, r2, #16
    8364:	0c12      	lsrs	r2, r2, #16
    8366:	4345      	muls	r5, r0
    8368:	9105      	str	r1, [sp, #20]
    836a:	4351      	muls	r1, r2
    836c:	4372      	muls	r2, r6
    836e:	4370      	muls	r0, r6
    8370:	1952      	adds	r2, r2, r5
    8372:	0c0e      	lsrs	r6, r1, #16
    8374:	18b2      	adds	r2, r6, r2
    8376:	4295      	cmp	r5, r2
    8378:	d903      	bls.n	8382 <__aeabi_ddiv+0x2de>
    837a:	2580      	movs	r5, #128	; 0x80
    837c:	026d      	lsls	r5, r5, #9
    837e:	46ac      	mov	ip, r5
    8380:	4460      	add	r0, ip
    8382:	0c15      	lsrs	r5, r2, #16
    8384:	0409      	lsls	r1, r1, #16
    8386:	0412      	lsls	r2, r2, #16
    8388:	0c09      	lsrs	r1, r1, #16
    838a:	1828      	adds	r0, r5, r0
    838c:	1852      	adds	r2, r2, r1
    838e:	4283      	cmp	r3, r0
    8390:	d200      	bcs.n	8394 <__aeabi_ddiv+0x2f0>
    8392:	e0ce      	b.n	8532 <__aeabi_ddiv+0x48e>
    8394:	d100      	bne.n	8398 <__aeabi_ddiv+0x2f4>
    8396:	e0c8      	b.n	852a <__aeabi_ddiv+0x486>
    8398:	1a1d      	subs	r5, r3, r0
    839a:	4653      	mov	r3, sl
    839c:	1a9e      	subs	r6, r3, r2
    839e:	45b2      	cmp	sl, r6
    83a0:	4192      	sbcs	r2, r2
    83a2:	4252      	negs	r2, r2
    83a4:	1aab      	subs	r3, r5, r2
    83a6:	469a      	mov	sl, r3
    83a8:	4598      	cmp	r8, r3
    83aa:	d100      	bne.n	83ae <__aeabi_ddiv+0x30a>
    83ac:	e117      	b.n	85de <__aeabi_ddiv+0x53a>
    83ae:	0039      	movs	r1, r7
    83b0:	0018      	movs	r0, r3
    83b2:	f7ff f82f 	bl	7414 <__udivsi3>
    83b6:	9b01      	ldr	r3, [sp, #4]
    83b8:	0005      	movs	r5, r0
    83ba:	4343      	muls	r3, r0
    83bc:	0039      	movs	r1, r7
    83be:	4650      	mov	r0, sl
    83c0:	9304      	str	r3, [sp, #16]
    83c2:	f7ff f8ad 	bl	7520 <__aeabi_uidivmod>
    83c6:	9804      	ldr	r0, [sp, #16]
    83c8:	040b      	lsls	r3, r1, #16
    83ca:	0c31      	lsrs	r1, r6, #16
    83cc:	4319      	orrs	r1, r3
    83ce:	4288      	cmp	r0, r1
    83d0:	d909      	bls.n	83e6 <__aeabi_ddiv+0x342>
    83d2:	4441      	add	r1, r8
    83d4:	1e6b      	subs	r3, r5, #1
    83d6:	4588      	cmp	r8, r1
    83d8:	d900      	bls.n	83dc <__aeabi_ddiv+0x338>
    83da:	e107      	b.n	85ec <__aeabi_ddiv+0x548>
    83dc:	4288      	cmp	r0, r1
    83de:	d800      	bhi.n	83e2 <__aeabi_ddiv+0x33e>
    83e0:	e104      	b.n	85ec <__aeabi_ddiv+0x548>
    83e2:	3d02      	subs	r5, #2
    83e4:	4441      	add	r1, r8
    83e6:	9b04      	ldr	r3, [sp, #16]
    83e8:	1acb      	subs	r3, r1, r3
    83ea:	0018      	movs	r0, r3
    83ec:	0039      	movs	r1, r7
    83ee:	9304      	str	r3, [sp, #16]
    83f0:	f7ff f810 	bl	7414 <__udivsi3>
    83f4:	9b01      	ldr	r3, [sp, #4]
    83f6:	4682      	mov	sl, r0
    83f8:	4343      	muls	r3, r0
    83fa:	0039      	movs	r1, r7
    83fc:	9804      	ldr	r0, [sp, #16]
    83fe:	9301      	str	r3, [sp, #4]
    8400:	f7ff f88e 	bl	7520 <__aeabi_uidivmod>
    8404:	9801      	ldr	r0, [sp, #4]
    8406:	040b      	lsls	r3, r1, #16
    8408:	0431      	lsls	r1, r6, #16
    840a:	0c09      	lsrs	r1, r1, #16
    840c:	4319      	orrs	r1, r3
    840e:	4288      	cmp	r0, r1
    8410:	d90d      	bls.n	842e <__aeabi_ddiv+0x38a>
    8412:	4653      	mov	r3, sl
    8414:	4441      	add	r1, r8
    8416:	3b01      	subs	r3, #1
    8418:	4588      	cmp	r8, r1
    841a:	d900      	bls.n	841e <__aeabi_ddiv+0x37a>
    841c:	e0e8      	b.n	85f0 <__aeabi_ddiv+0x54c>
    841e:	4288      	cmp	r0, r1
    8420:	d800      	bhi.n	8424 <__aeabi_ddiv+0x380>
    8422:	e0e5      	b.n	85f0 <__aeabi_ddiv+0x54c>
    8424:	2302      	movs	r3, #2
    8426:	425b      	negs	r3, r3
    8428:	469c      	mov	ip, r3
    842a:	4441      	add	r1, r8
    842c:	44e2      	add	sl, ip
    842e:	9b01      	ldr	r3, [sp, #4]
    8430:	042d      	lsls	r5, r5, #16
    8432:	1ace      	subs	r6, r1, r3
    8434:	4651      	mov	r1, sl
    8436:	4329      	orrs	r1, r5
    8438:	9d05      	ldr	r5, [sp, #20]
    843a:	464f      	mov	r7, r9
    843c:	002a      	movs	r2, r5
    843e:	040b      	lsls	r3, r1, #16
    8440:	0c08      	lsrs	r0, r1, #16
    8442:	0c1b      	lsrs	r3, r3, #16
    8444:	435a      	muls	r2, r3
    8446:	4345      	muls	r5, r0
    8448:	437b      	muls	r3, r7
    844a:	4378      	muls	r0, r7
    844c:	195b      	adds	r3, r3, r5
    844e:	0c17      	lsrs	r7, r2, #16
    8450:	18fb      	adds	r3, r7, r3
    8452:	429d      	cmp	r5, r3
    8454:	d903      	bls.n	845e <__aeabi_ddiv+0x3ba>
    8456:	2580      	movs	r5, #128	; 0x80
    8458:	026d      	lsls	r5, r5, #9
    845a:	46ac      	mov	ip, r5
    845c:	4460      	add	r0, ip
    845e:	0c1d      	lsrs	r5, r3, #16
    8460:	0412      	lsls	r2, r2, #16
    8462:	041b      	lsls	r3, r3, #16
    8464:	0c12      	lsrs	r2, r2, #16
    8466:	1828      	adds	r0, r5, r0
    8468:	189b      	adds	r3, r3, r2
    846a:	4286      	cmp	r6, r0
    846c:	d200      	bcs.n	8470 <__aeabi_ddiv+0x3cc>
    846e:	e093      	b.n	8598 <__aeabi_ddiv+0x4f4>
    8470:	d100      	bne.n	8474 <__aeabi_ddiv+0x3d0>
    8472:	e08e      	b.n	8592 <__aeabi_ddiv+0x4ee>
    8474:	2301      	movs	r3, #1
    8476:	4319      	orrs	r1, r3
    8478:	4ba0      	ldr	r3, [pc, #640]	; (86fc <__aeabi_ddiv+0x658>)
    847a:	18e3      	adds	r3, r4, r3
    847c:	2b00      	cmp	r3, #0
    847e:	dc00      	bgt.n	8482 <__aeabi_ddiv+0x3de>
    8480:	e099      	b.n	85b6 <__aeabi_ddiv+0x512>
    8482:	074a      	lsls	r2, r1, #29
    8484:	d000      	beq.n	8488 <__aeabi_ddiv+0x3e4>
    8486:	e09e      	b.n	85c6 <__aeabi_ddiv+0x522>
    8488:	465a      	mov	r2, fp
    848a:	01d2      	lsls	r2, r2, #7
    848c:	d506      	bpl.n	849c <__aeabi_ddiv+0x3f8>
    848e:	465a      	mov	r2, fp
    8490:	4b9b      	ldr	r3, [pc, #620]	; (8700 <__aeabi_ddiv+0x65c>)
    8492:	401a      	ands	r2, r3
    8494:	2380      	movs	r3, #128	; 0x80
    8496:	4693      	mov	fp, r2
    8498:	00db      	lsls	r3, r3, #3
    849a:	18e3      	adds	r3, r4, r3
    849c:	4a99      	ldr	r2, [pc, #612]	; (8704 <__aeabi_ddiv+0x660>)
    849e:	4293      	cmp	r3, r2
    84a0:	dd68      	ble.n	8574 <__aeabi_ddiv+0x4d0>
    84a2:	2301      	movs	r3, #1
    84a4:	9a02      	ldr	r2, [sp, #8]
    84a6:	4c98      	ldr	r4, [pc, #608]	; (8708 <__aeabi_ddiv+0x664>)
    84a8:	401a      	ands	r2, r3
    84aa:	2300      	movs	r3, #0
    84ac:	4694      	mov	ip, r2
    84ae:	4698      	mov	r8, r3
    84b0:	2200      	movs	r2, #0
    84b2:	e6c5      	b.n	8240 <__aeabi_ddiv+0x19c>
    84b4:	2280      	movs	r2, #128	; 0x80
    84b6:	464b      	mov	r3, r9
    84b8:	0312      	lsls	r2, r2, #12
    84ba:	4213      	tst	r3, r2
    84bc:	d00a      	beq.n	84d4 <__aeabi_ddiv+0x430>
    84be:	465b      	mov	r3, fp
    84c0:	4213      	tst	r3, r2
    84c2:	d106      	bne.n	84d2 <__aeabi_ddiv+0x42e>
    84c4:	431a      	orrs	r2, r3
    84c6:	0312      	lsls	r2, r2, #12
    84c8:	0b12      	lsrs	r2, r2, #12
    84ca:	46ac      	mov	ip, r5
    84cc:	4688      	mov	r8, r1
    84ce:	4c8e      	ldr	r4, [pc, #568]	; (8708 <__aeabi_ddiv+0x664>)
    84d0:	e6b6      	b.n	8240 <__aeabi_ddiv+0x19c>
    84d2:	464b      	mov	r3, r9
    84d4:	431a      	orrs	r2, r3
    84d6:	0312      	lsls	r2, r2, #12
    84d8:	0b12      	lsrs	r2, r2, #12
    84da:	46bc      	mov	ip, r7
    84dc:	4c8a      	ldr	r4, [pc, #552]	; (8708 <__aeabi_ddiv+0x664>)
    84de:	e6af      	b.n	8240 <__aeabi_ddiv+0x19c>
    84e0:	0003      	movs	r3, r0
    84e2:	465a      	mov	r2, fp
    84e4:	3b28      	subs	r3, #40	; 0x28
    84e6:	409a      	lsls	r2, r3
    84e8:	2300      	movs	r3, #0
    84ea:	4691      	mov	r9, r2
    84ec:	4698      	mov	r8, r3
    84ee:	e657      	b.n	81a0 <__aeabi_ddiv+0xfc>
    84f0:	4658      	mov	r0, fp
    84f2:	f000 ff5f 	bl	93b4 <__clzsi2>
    84f6:	3020      	adds	r0, #32
    84f8:	e640      	b.n	817c <__aeabi_ddiv+0xd8>
    84fa:	0003      	movs	r3, r0
    84fc:	4652      	mov	r2, sl
    84fe:	3b28      	subs	r3, #40	; 0x28
    8500:	409a      	lsls	r2, r3
    8502:	2100      	movs	r1, #0
    8504:	4693      	mov	fp, r2
    8506:	e677      	b.n	81f8 <__aeabi_ddiv+0x154>
    8508:	f000 ff54 	bl	93b4 <__clzsi2>
    850c:	3020      	adds	r0, #32
    850e:	e65f      	b.n	81d0 <__aeabi_ddiv+0x12c>
    8510:	4588      	cmp	r8, r1
    8512:	d200      	bcs.n	8516 <__aeabi_ddiv+0x472>
    8514:	e6c7      	b.n	82a6 <__aeabi_ddiv+0x202>
    8516:	464b      	mov	r3, r9
    8518:	07de      	lsls	r6, r3, #31
    851a:	085d      	lsrs	r5, r3, #1
    851c:	4643      	mov	r3, r8
    851e:	085b      	lsrs	r3, r3, #1
    8520:	431e      	orrs	r6, r3
    8522:	4643      	mov	r3, r8
    8524:	07db      	lsls	r3, r3, #31
    8526:	469a      	mov	sl, r3
    8528:	e6c2      	b.n	82b0 <__aeabi_ddiv+0x20c>
    852a:	2500      	movs	r5, #0
    852c:	4592      	cmp	sl, r2
    852e:	d300      	bcc.n	8532 <__aeabi_ddiv+0x48e>
    8530:	e733      	b.n	839a <__aeabi_ddiv+0x2f6>
    8532:	9e03      	ldr	r6, [sp, #12]
    8534:	4659      	mov	r1, fp
    8536:	46b4      	mov	ip, r6
    8538:	44e2      	add	sl, ip
    853a:	45b2      	cmp	sl, r6
    853c:	41ad      	sbcs	r5, r5
    853e:	426d      	negs	r5, r5
    8540:	4445      	add	r5, r8
    8542:	18eb      	adds	r3, r5, r3
    8544:	3901      	subs	r1, #1
    8546:	4598      	cmp	r8, r3
    8548:	d207      	bcs.n	855a <__aeabi_ddiv+0x4b6>
    854a:	4298      	cmp	r0, r3
    854c:	d900      	bls.n	8550 <__aeabi_ddiv+0x4ac>
    854e:	e07f      	b.n	8650 <__aeabi_ddiv+0x5ac>
    8550:	d100      	bne.n	8554 <__aeabi_ddiv+0x4b0>
    8552:	e0bc      	b.n	86ce <__aeabi_ddiv+0x62a>
    8554:	1a1d      	subs	r5, r3, r0
    8556:	468b      	mov	fp, r1
    8558:	e71f      	b.n	839a <__aeabi_ddiv+0x2f6>
    855a:	4598      	cmp	r8, r3
    855c:	d1fa      	bne.n	8554 <__aeabi_ddiv+0x4b0>
    855e:	9d03      	ldr	r5, [sp, #12]
    8560:	4555      	cmp	r5, sl
    8562:	d9f2      	bls.n	854a <__aeabi_ddiv+0x4a6>
    8564:	4643      	mov	r3, r8
    8566:	468b      	mov	fp, r1
    8568:	1a1d      	subs	r5, r3, r0
    856a:	e716      	b.n	839a <__aeabi_ddiv+0x2f6>
    856c:	469b      	mov	fp, r3
    856e:	e6ca      	b.n	8306 <__aeabi_ddiv+0x262>
    8570:	0015      	movs	r5, r2
    8572:	e6e7      	b.n	8344 <__aeabi_ddiv+0x2a0>
    8574:	465a      	mov	r2, fp
    8576:	08c9      	lsrs	r1, r1, #3
    8578:	0752      	lsls	r2, r2, #29
    857a:	430a      	orrs	r2, r1
    857c:	055b      	lsls	r3, r3, #21
    857e:	4690      	mov	r8, r2
    8580:	0d5c      	lsrs	r4, r3, #21
    8582:	465a      	mov	r2, fp
    8584:	2301      	movs	r3, #1
    8586:	9902      	ldr	r1, [sp, #8]
    8588:	0252      	lsls	r2, r2, #9
    858a:	4019      	ands	r1, r3
    858c:	0b12      	lsrs	r2, r2, #12
    858e:	468c      	mov	ip, r1
    8590:	e656      	b.n	8240 <__aeabi_ddiv+0x19c>
    8592:	2b00      	cmp	r3, #0
    8594:	d100      	bne.n	8598 <__aeabi_ddiv+0x4f4>
    8596:	e76f      	b.n	8478 <__aeabi_ddiv+0x3d4>
    8598:	4446      	add	r6, r8
    859a:	1e4a      	subs	r2, r1, #1
    859c:	45b0      	cmp	r8, r6
    859e:	d929      	bls.n	85f4 <__aeabi_ddiv+0x550>
    85a0:	0011      	movs	r1, r2
    85a2:	4286      	cmp	r6, r0
    85a4:	d000      	beq.n	85a8 <__aeabi_ddiv+0x504>
    85a6:	e765      	b.n	8474 <__aeabi_ddiv+0x3d0>
    85a8:	9a03      	ldr	r2, [sp, #12]
    85aa:	4293      	cmp	r3, r2
    85ac:	d000      	beq.n	85b0 <__aeabi_ddiv+0x50c>
    85ae:	e761      	b.n	8474 <__aeabi_ddiv+0x3d0>
    85b0:	e762      	b.n	8478 <__aeabi_ddiv+0x3d4>
    85b2:	2101      	movs	r1, #1
    85b4:	4249      	negs	r1, r1
    85b6:	2001      	movs	r0, #1
    85b8:	1ac2      	subs	r2, r0, r3
    85ba:	2a38      	cmp	r2, #56	; 0x38
    85bc:	dd21      	ble.n	8602 <__aeabi_ddiv+0x55e>
    85be:	9b02      	ldr	r3, [sp, #8]
    85c0:	4003      	ands	r3, r0
    85c2:	469c      	mov	ip, r3
    85c4:	e638      	b.n	8238 <__aeabi_ddiv+0x194>
    85c6:	220f      	movs	r2, #15
    85c8:	400a      	ands	r2, r1
    85ca:	2a04      	cmp	r2, #4
    85cc:	d100      	bne.n	85d0 <__aeabi_ddiv+0x52c>
    85ce:	e75b      	b.n	8488 <__aeabi_ddiv+0x3e4>
    85d0:	000a      	movs	r2, r1
    85d2:	1d11      	adds	r1, r2, #4
    85d4:	4291      	cmp	r1, r2
    85d6:	4192      	sbcs	r2, r2
    85d8:	4252      	negs	r2, r2
    85da:	4493      	add	fp, r2
    85dc:	e754      	b.n	8488 <__aeabi_ddiv+0x3e4>
    85de:	4b47      	ldr	r3, [pc, #284]	; (86fc <__aeabi_ddiv+0x658>)
    85e0:	18e3      	adds	r3, r4, r3
    85e2:	2b00      	cmp	r3, #0
    85e4:	dde5      	ble.n	85b2 <__aeabi_ddiv+0x50e>
    85e6:	2201      	movs	r2, #1
    85e8:	4252      	negs	r2, r2
    85ea:	e7f2      	b.n	85d2 <__aeabi_ddiv+0x52e>
    85ec:	001d      	movs	r5, r3
    85ee:	e6fa      	b.n	83e6 <__aeabi_ddiv+0x342>
    85f0:	469a      	mov	sl, r3
    85f2:	e71c      	b.n	842e <__aeabi_ddiv+0x38a>
    85f4:	42b0      	cmp	r0, r6
    85f6:	d839      	bhi.n	866c <__aeabi_ddiv+0x5c8>
    85f8:	d06e      	beq.n	86d8 <__aeabi_ddiv+0x634>
    85fa:	0011      	movs	r1, r2
    85fc:	e73a      	b.n	8474 <__aeabi_ddiv+0x3d0>
    85fe:	9302      	str	r3, [sp, #8]
    8600:	e73a      	b.n	8478 <__aeabi_ddiv+0x3d4>
    8602:	2a1f      	cmp	r2, #31
    8604:	dc3c      	bgt.n	8680 <__aeabi_ddiv+0x5dc>
    8606:	2320      	movs	r3, #32
    8608:	1a9b      	subs	r3, r3, r2
    860a:	000c      	movs	r4, r1
    860c:	4658      	mov	r0, fp
    860e:	4099      	lsls	r1, r3
    8610:	4098      	lsls	r0, r3
    8612:	1e4b      	subs	r3, r1, #1
    8614:	4199      	sbcs	r1, r3
    8616:	465b      	mov	r3, fp
    8618:	40d4      	lsrs	r4, r2
    861a:	40d3      	lsrs	r3, r2
    861c:	4320      	orrs	r0, r4
    861e:	4308      	orrs	r0, r1
    8620:	001a      	movs	r2, r3
    8622:	0743      	lsls	r3, r0, #29
    8624:	d009      	beq.n	863a <__aeabi_ddiv+0x596>
    8626:	230f      	movs	r3, #15
    8628:	4003      	ands	r3, r0
    862a:	2b04      	cmp	r3, #4
    862c:	d005      	beq.n	863a <__aeabi_ddiv+0x596>
    862e:	0001      	movs	r1, r0
    8630:	1d08      	adds	r0, r1, #4
    8632:	4288      	cmp	r0, r1
    8634:	419b      	sbcs	r3, r3
    8636:	425b      	negs	r3, r3
    8638:	18d2      	adds	r2, r2, r3
    863a:	0213      	lsls	r3, r2, #8
    863c:	d53a      	bpl.n	86b4 <__aeabi_ddiv+0x610>
    863e:	2301      	movs	r3, #1
    8640:	9a02      	ldr	r2, [sp, #8]
    8642:	2401      	movs	r4, #1
    8644:	401a      	ands	r2, r3
    8646:	2300      	movs	r3, #0
    8648:	4694      	mov	ip, r2
    864a:	4698      	mov	r8, r3
    864c:	2200      	movs	r2, #0
    864e:	e5f7      	b.n	8240 <__aeabi_ddiv+0x19c>
    8650:	2102      	movs	r1, #2
    8652:	4249      	negs	r1, r1
    8654:	468c      	mov	ip, r1
    8656:	9d03      	ldr	r5, [sp, #12]
    8658:	44e3      	add	fp, ip
    865a:	46ac      	mov	ip, r5
    865c:	44e2      	add	sl, ip
    865e:	45aa      	cmp	sl, r5
    8660:	41ad      	sbcs	r5, r5
    8662:	426d      	negs	r5, r5
    8664:	4445      	add	r5, r8
    8666:	18ed      	adds	r5, r5, r3
    8668:	1a2d      	subs	r5, r5, r0
    866a:	e696      	b.n	839a <__aeabi_ddiv+0x2f6>
    866c:	1e8a      	subs	r2, r1, #2
    866e:	9903      	ldr	r1, [sp, #12]
    8670:	004d      	lsls	r5, r1, #1
    8672:	428d      	cmp	r5, r1
    8674:	4189      	sbcs	r1, r1
    8676:	4249      	negs	r1, r1
    8678:	4441      	add	r1, r8
    867a:	1876      	adds	r6, r6, r1
    867c:	9503      	str	r5, [sp, #12]
    867e:	e78f      	b.n	85a0 <__aeabi_ddiv+0x4fc>
    8680:	201f      	movs	r0, #31
    8682:	4240      	negs	r0, r0
    8684:	1ac3      	subs	r3, r0, r3
    8686:	4658      	mov	r0, fp
    8688:	40d8      	lsrs	r0, r3
    868a:	0003      	movs	r3, r0
    868c:	2a20      	cmp	r2, #32
    868e:	d028      	beq.n	86e2 <__aeabi_ddiv+0x63e>
    8690:	2040      	movs	r0, #64	; 0x40
    8692:	465d      	mov	r5, fp
    8694:	1a82      	subs	r2, r0, r2
    8696:	4095      	lsls	r5, r2
    8698:	4329      	orrs	r1, r5
    869a:	1e4a      	subs	r2, r1, #1
    869c:	4191      	sbcs	r1, r2
    869e:	4319      	orrs	r1, r3
    86a0:	2307      	movs	r3, #7
    86a2:	2200      	movs	r2, #0
    86a4:	400b      	ands	r3, r1
    86a6:	d009      	beq.n	86bc <__aeabi_ddiv+0x618>
    86a8:	230f      	movs	r3, #15
    86aa:	2200      	movs	r2, #0
    86ac:	400b      	ands	r3, r1
    86ae:	0008      	movs	r0, r1
    86b0:	2b04      	cmp	r3, #4
    86b2:	d1bd      	bne.n	8630 <__aeabi_ddiv+0x58c>
    86b4:	0001      	movs	r1, r0
    86b6:	0753      	lsls	r3, r2, #29
    86b8:	0252      	lsls	r2, r2, #9
    86ba:	0b12      	lsrs	r2, r2, #12
    86bc:	08c9      	lsrs	r1, r1, #3
    86be:	4319      	orrs	r1, r3
    86c0:	2301      	movs	r3, #1
    86c2:	4688      	mov	r8, r1
    86c4:	9902      	ldr	r1, [sp, #8]
    86c6:	2400      	movs	r4, #0
    86c8:	4019      	ands	r1, r3
    86ca:	468c      	mov	ip, r1
    86cc:	e5b8      	b.n	8240 <__aeabi_ddiv+0x19c>
    86ce:	4552      	cmp	r2, sl
    86d0:	d8be      	bhi.n	8650 <__aeabi_ddiv+0x5ac>
    86d2:	468b      	mov	fp, r1
    86d4:	2500      	movs	r5, #0
    86d6:	e660      	b.n	839a <__aeabi_ddiv+0x2f6>
    86d8:	9d03      	ldr	r5, [sp, #12]
    86da:	429d      	cmp	r5, r3
    86dc:	d3c6      	bcc.n	866c <__aeabi_ddiv+0x5c8>
    86de:	0011      	movs	r1, r2
    86e0:	e762      	b.n	85a8 <__aeabi_ddiv+0x504>
    86e2:	2500      	movs	r5, #0
    86e4:	e7d8      	b.n	8698 <__aeabi_ddiv+0x5f4>
    86e6:	2280      	movs	r2, #128	; 0x80
    86e8:	465b      	mov	r3, fp
    86ea:	0312      	lsls	r2, r2, #12
    86ec:	431a      	orrs	r2, r3
    86ee:	9b01      	ldr	r3, [sp, #4]
    86f0:	0312      	lsls	r2, r2, #12
    86f2:	0b12      	lsrs	r2, r2, #12
    86f4:	469c      	mov	ip, r3
    86f6:	4688      	mov	r8, r1
    86f8:	4c03      	ldr	r4, [pc, #12]	; (8708 <__aeabi_ddiv+0x664>)
    86fa:	e5a1      	b.n	8240 <__aeabi_ddiv+0x19c>
    86fc:	000003ff 	.word	0x000003ff
    8700:	feffffff 	.word	0xfeffffff
    8704:	000007fe 	.word	0x000007fe
    8708:	000007ff 	.word	0x000007ff

0000870c <__aeabi_dmul>:
    870c:	b5f0      	push	{r4, r5, r6, r7, lr}
    870e:	4657      	mov	r7, sl
    8710:	4645      	mov	r5, r8
    8712:	46de      	mov	lr, fp
    8714:	464e      	mov	r6, r9
    8716:	b5e0      	push	{r5, r6, r7, lr}
    8718:	030c      	lsls	r4, r1, #12
    871a:	4698      	mov	r8, r3
    871c:	004e      	lsls	r6, r1, #1
    871e:	0b23      	lsrs	r3, r4, #12
    8720:	b087      	sub	sp, #28
    8722:	0007      	movs	r7, r0
    8724:	4692      	mov	sl, r2
    8726:	469b      	mov	fp, r3
    8728:	0d76      	lsrs	r6, r6, #21
    872a:	0fcd      	lsrs	r5, r1, #31
    872c:	2e00      	cmp	r6, #0
    872e:	d06b      	beq.n	8808 <__aeabi_dmul+0xfc>
    8730:	4b6d      	ldr	r3, [pc, #436]	; (88e8 <__aeabi_dmul+0x1dc>)
    8732:	429e      	cmp	r6, r3
    8734:	d035      	beq.n	87a2 <__aeabi_dmul+0x96>
    8736:	2480      	movs	r4, #128	; 0x80
    8738:	465b      	mov	r3, fp
    873a:	0f42      	lsrs	r2, r0, #29
    873c:	0424      	lsls	r4, r4, #16
    873e:	00db      	lsls	r3, r3, #3
    8740:	4314      	orrs	r4, r2
    8742:	431c      	orrs	r4, r3
    8744:	00c3      	lsls	r3, r0, #3
    8746:	4699      	mov	r9, r3
    8748:	4b68      	ldr	r3, [pc, #416]	; (88ec <__aeabi_dmul+0x1e0>)
    874a:	46a3      	mov	fp, r4
    874c:	469c      	mov	ip, r3
    874e:	2300      	movs	r3, #0
    8750:	2700      	movs	r7, #0
    8752:	4466      	add	r6, ip
    8754:	9302      	str	r3, [sp, #8]
    8756:	4643      	mov	r3, r8
    8758:	031c      	lsls	r4, r3, #12
    875a:	005a      	lsls	r2, r3, #1
    875c:	0fdb      	lsrs	r3, r3, #31
    875e:	4650      	mov	r0, sl
    8760:	0b24      	lsrs	r4, r4, #12
    8762:	0d52      	lsrs	r2, r2, #21
    8764:	4698      	mov	r8, r3
    8766:	d100      	bne.n	876a <__aeabi_dmul+0x5e>
    8768:	e076      	b.n	8858 <__aeabi_dmul+0x14c>
    876a:	4b5f      	ldr	r3, [pc, #380]	; (88e8 <__aeabi_dmul+0x1dc>)
    876c:	429a      	cmp	r2, r3
    876e:	d06d      	beq.n	884c <__aeabi_dmul+0x140>
    8770:	2380      	movs	r3, #128	; 0x80
    8772:	0f41      	lsrs	r1, r0, #29
    8774:	041b      	lsls	r3, r3, #16
    8776:	430b      	orrs	r3, r1
    8778:	495c      	ldr	r1, [pc, #368]	; (88ec <__aeabi_dmul+0x1e0>)
    877a:	00e4      	lsls	r4, r4, #3
    877c:	468c      	mov	ip, r1
    877e:	431c      	orrs	r4, r3
    8780:	00c3      	lsls	r3, r0, #3
    8782:	2000      	movs	r0, #0
    8784:	4462      	add	r2, ip
    8786:	4641      	mov	r1, r8
    8788:	18b6      	adds	r6, r6, r2
    878a:	4069      	eors	r1, r5
    878c:	1c72      	adds	r2, r6, #1
    878e:	9101      	str	r1, [sp, #4]
    8790:	4694      	mov	ip, r2
    8792:	4307      	orrs	r7, r0
    8794:	2f0f      	cmp	r7, #15
    8796:	d900      	bls.n	879a <__aeabi_dmul+0x8e>
    8798:	e0b0      	b.n	88fc <__aeabi_dmul+0x1f0>
    879a:	4a55      	ldr	r2, [pc, #340]	; (88f0 <__aeabi_dmul+0x1e4>)
    879c:	00bf      	lsls	r7, r7, #2
    879e:	59d2      	ldr	r2, [r2, r7]
    87a0:	4697      	mov	pc, r2
    87a2:	465b      	mov	r3, fp
    87a4:	4303      	orrs	r3, r0
    87a6:	4699      	mov	r9, r3
    87a8:	d000      	beq.n	87ac <__aeabi_dmul+0xa0>
    87aa:	e087      	b.n	88bc <__aeabi_dmul+0x1b0>
    87ac:	2300      	movs	r3, #0
    87ae:	469b      	mov	fp, r3
    87b0:	3302      	adds	r3, #2
    87b2:	2708      	movs	r7, #8
    87b4:	9302      	str	r3, [sp, #8]
    87b6:	e7ce      	b.n	8756 <__aeabi_dmul+0x4a>
    87b8:	4642      	mov	r2, r8
    87ba:	9201      	str	r2, [sp, #4]
    87bc:	2802      	cmp	r0, #2
    87be:	d067      	beq.n	8890 <__aeabi_dmul+0x184>
    87c0:	2803      	cmp	r0, #3
    87c2:	d100      	bne.n	87c6 <__aeabi_dmul+0xba>
    87c4:	e20e      	b.n	8be4 <__aeabi_dmul+0x4d8>
    87c6:	2801      	cmp	r0, #1
    87c8:	d000      	beq.n	87cc <__aeabi_dmul+0xc0>
    87ca:	e162      	b.n	8a92 <__aeabi_dmul+0x386>
    87cc:	2300      	movs	r3, #0
    87ce:	2400      	movs	r4, #0
    87d0:	2200      	movs	r2, #0
    87d2:	4699      	mov	r9, r3
    87d4:	9901      	ldr	r1, [sp, #4]
    87d6:	4001      	ands	r1, r0
    87d8:	b2cd      	uxtb	r5, r1
    87da:	2100      	movs	r1, #0
    87dc:	0312      	lsls	r2, r2, #12
    87de:	0d0b      	lsrs	r3, r1, #20
    87e0:	0b12      	lsrs	r2, r2, #12
    87e2:	051b      	lsls	r3, r3, #20
    87e4:	4313      	orrs	r3, r2
    87e6:	4a43      	ldr	r2, [pc, #268]	; (88f4 <__aeabi_dmul+0x1e8>)
    87e8:	0524      	lsls	r4, r4, #20
    87ea:	4013      	ands	r3, r2
    87ec:	431c      	orrs	r4, r3
    87ee:	0064      	lsls	r4, r4, #1
    87f0:	07ed      	lsls	r5, r5, #31
    87f2:	0864      	lsrs	r4, r4, #1
    87f4:	432c      	orrs	r4, r5
    87f6:	4648      	mov	r0, r9
    87f8:	0021      	movs	r1, r4
    87fa:	b007      	add	sp, #28
    87fc:	bc3c      	pop	{r2, r3, r4, r5}
    87fe:	4690      	mov	r8, r2
    8800:	4699      	mov	r9, r3
    8802:	46a2      	mov	sl, r4
    8804:	46ab      	mov	fp, r5
    8806:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8808:	4303      	orrs	r3, r0
    880a:	4699      	mov	r9, r3
    880c:	d04f      	beq.n	88ae <__aeabi_dmul+0x1a2>
    880e:	465b      	mov	r3, fp
    8810:	2b00      	cmp	r3, #0
    8812:	d100      	bne.n	8816 <__aeabi_dmul+0x10a>
    8814:	e189      	b.n	8b2a <__aeabi_dmul+0x41e>
    8816:	4658      	mov	r0, fp
    8818:	f000 fdcc 	bl	93b4 <__clzsi2>
    881c:	0003      	movs	r3, r0
    881e:	3b0b      	subs	r3, #11
    8820:	2b1c      	cmp	r3, #28
    8822:	dd00      	ble.n	8826 <__aeabi_dmul+0x11a>
    8824:	e17a      	b.n	8b1c <__aeabi_dmul+0x410>
    8826:	221d      	movs	r2, #29
    8828:	1ad3      	subs	r3, r2, r3
    882a:	003a      	movs	r2, r7
    882c:	0001      	movs	r1, r0
    882e:	465c      	mov	r4, fp
    8830:	40da      	lsrs	r2, r3
    8832:	3908      	subs	r1, #8
    8834:	408c      	lsls	r4, r1
    8836:	0013      	movs	r3, r2
    8838:	408f      	lsls	r7, r1
    883a:	4323      	orrs	r3, r4
    883c:	469b      	mov	fp, r3
    883e:	46b9      	mov	r9, r7
    8840:	2300      	movs	r3, #0
    8842:	4e2d      	ldr	r6, [pc, #180]	; (88f8 <__aeabi_dmul+0x1ec>)
    8844:	2700      	movs	r7, #0
    8846:	1a36      	subs	r6, r6, r0
    8848:	9302      	str	r3, [sp, #8]
    884a:	e784      	b.n	8756 <__aeabi_dmul+0x4a>
    884c:	4653      	mov	r3, sl
    884e:	4323      	orrs	r3, r4
    8850:	d12a      	bne.n	88a8 <__aeabi_dmul+0x19c>
    8852:	2400      	movs	r4, #0
    8854:	2002      	movs	r0, #2
    8856:	e796      	b.n	8786 <__aeabi_dmul+0x7a>
    8858:	4653      	mov	r3, sl
    885a:	4323      	orrs	r3, r4
    885c:	d020      	beq.n	88a0 <__aeabi_dmul+0x194>
    885e:	2c00      	cmp	r4, #0
    8860:	d100      	bne.n	8864 <__aeabi_dmul+0x158>
    8862:	e157      	b.n	8b14 <__aeabi_dmul+0x408>
    8864:	0020      	movs	r0, r4
    8866:	f000 fda5 	bl	93b4 <__clzsi2>
    886a:	0003      	movs	r3, r0
    886c:	3b0b      	subs	r3, #11
    886e:	2b1c      	cmp	r3, #28
    8870:	dd00      	ble.n	8874 <__aeabi_dmul+0x168>
    8872:	e149      	b.n	8b08 <__aeabi_dmul+0x3fc>
    8874:	211d      	movs	r1, #29
    8876:	1acb      	subs	r3, r1, r3
    8878:	4651      	mov	r1, sl
    887a:	0002      	movs	r2, r0
    887c:	40d9      	lsrs	r1, r3
    887e:	4653      	mov	r3, sl
    8880:	3a08      	subs	r2, #8
    8882:	4094      	lsls	r4, r2
    8884:	4093      	lsls	r3, r2
    8886:	430c      	orrs	r4, r1
    8888:	4a1b      	ldr	r2, [pc, #108]	; (88f8 <__aeabi_dmul+0x1ec>)
    888a:	1a12      	subs	r2, r2, r0
    888c:	2000      	movs	r0, #0
    888e:	e77a      	b.n	8786 <__aeabi_dmul+0x7a>
    8890:	2501      	movs	r5, #1
    8892:	9b01      	ldr	r3, [sp, #4]
    8894:	4c14      	ldr	r4, [pc, #80]	; (88e8 <__aeabi_dmul+0x1dc>)
    8896:	401d      	ands	r5, r3
    8898:	2300      	movs	r3, #0
    889a:	2200      	movs	r2, #0
    889c:	4699      	mov	r9, r3
    889e:	e79c      	b.n	87da <__aeabi_dmul+0xce>
    88a0:	2400      	movs	r4, #0
    88a2:	2200      	movs	r2, #0
    88a4:	2001      	movs	r0, #1
    88a6:	e76e      	b.n	8786 <__aeabi_dmul+0x7a>
    88a8:	4653      	mov	r3, sl
    88aa:	2003      	movs	r0, #3
    88ac:	e76b      	b.n	8786 <__aeabi_dmul+0x7a>
    88ae:	2300      	movs	r3, #0
    88b0:	469b      	mov	fp, r3
    88b2:	3301      	adds	r3, #1
    88b4:	2704      	movs	r7, #4
    88b6:	2600      	movs	r6, #0
    88b8:	9302      	str	r3, [sp, #8]
    88ba:	e74c      	b.n	8756 <__aeabi_dmul+0x4a>
    88bc:	2303      	movs	r3, #3
    88be:	4681      	mov	r9, r0
    88c0:	270c      	movs	r7, #12
    88c2:	9302      	str	r3, [sp, #8]
    88c4:	e747      	b.n	8756 <__aeabi_dmul+0x4a>
    88c6:	2280      	movs	r2, #128	; 0x80
    88c8:	2300      	movs	r3, #0
    88ca:	2500      	movs	r5, #0
    88cc:	0312      	lsls	r2, r2, #12
    88ce:	4699      	mov	r9, r3
    88d0:	4c05      	ldr	r4, [pc, #20]	; (88e8 <__aeabi_dmul+0x1dc>)
    88d2:	e782      	b.n	87da <__aeabi_dmul+0xce>
    88d4:	465c      	mov	r4, fp
    88d6:	464b      	mov	r3, r9
    88d8:	9802      	ldr	r0, [sp, #8]
    88da:	e76f      	b.n	87bc <__aeabi_dmul+0xb0>
    88dc:	465c      	mov	r4, fp
    88de:	464b      	mov	r3, r9
    88e0:	9501      	str	r5, [sp, #4]
    88e2:	9802      	ldr	r0, [sp, #8]
    88e4:	e76a      	b.n	87bc <__aeabi_dmul+0xb0>
    88e6:	46c0      	nop			; (mov r8, r8)
    88e8:	000007ff 	.word	0x000007ff
    88ec:	fffffc01 	.word	0xfffffc01
    88f0:	0000bc68 	.word	0x0000bc68
    88f4:	800fffff 	.word	0x800fffff
    88f8:	fffffc0d 	.word	0xfffffc0d
    88fc:	464a      	mov	r2, r9
    88fe:	4649      	mov	r1, r9
    8900:	0c17      	lsrs	r7, r2, #16
    8902:	0c1a      	lsrs	r2, r3, #16
    8904:	041b      	lsls	r3, r3, #16
    8906:	0c1b      	lsrs	r3, r3, #16
    8908:	0408      	lsls	r0, r1, #16
    890a:	0019      	movs	r1, r3
    890c:	0c00      	lsrs	r0, r0, #16
    890e:	4341      	muls	r1, r0
    8910:	0015      	movs	r5, r2
    8912:	4688      	mov	r8, r1
    8914:	0019      	movs	r1, r3
    8916:	437d      	muls	r5, r7
    8918:	4379      	muls	r1, r7
    891a:	9503      	str	r5, [sp, #12]
    891c:	4689      	mov	r9, r1
    891e:	0029      	movs	r1, r5
    8920:	0015      	movs	r5, r2
    8922:	4345      	muls	r5, r0
    8924:	444d      	add	r5, r9
    8926:	9502      	str	r5, [sp, #8]
    8928:	4645      	mov	r5, r8
    892a:	0c2d      	lsrs	r5, r5, #16
    892c:	46aa      	mov	sl, r5
    892e:	9d02      	ldr	r5, [sp, #8]
    8930:	4455      	add	r5, sl
    8932:	45a9      	cmp	r9, r5
    8934:	d906      	bls.n	8944 <__aeabi_dmul+0x238>
    8936:	468a      	mov	sl, r1
    8938:	2180      	movs	r1, #128	; 0x80
    893a:	0249      	lsls	r1, r1, #9
    893c:	4689      	mov	r9, r1
    893e:	44ca      	add	sl, r9
    8940:	4651      	mov	r1, sl
    8942:	9103      	str	r1, [sp, #12]
    8944:	0c29      	lsrs	r1, r5, #16
    8946:	9104      	str	r1, [sp, #16]
    8948:	4641      	mov	r1, r8
    894a:	0409      	lsls	r1, r1, #16
    894c:	042d      	lsls	r5, r5, #16
    894e:	0c09      	lsrs	r1, r1, #16
    8950:	4688      	mov	r8, r1
    8952:	0029      	movs	r1, r5
    8954:	0c25      	lsrs	r5, r4, #16
    8956:	0424      	lsls	r4, r4, #16
    8958:	4441      	add	r1, r8
    895a:	0c24      	lsrs	r4, r4, #16
    895c:	9105      	str	r1, [sp, #20]
    895e:	0021      	movs	r1, r4
    8960:	4341      	muls	r1, r0
    8962:	4688      	mov	r8, r1
    8964:	0021      	movs	r1, r4
    8966:	4379      	muls	r1, r7
    8968:	468a      	mov	sl, r1
    896a:	4368      	muls	r0, r5
    896c:	4641      	mov	r1, r8
    896e:	4450      	add	r0, sl
    8970:	4681      	mov	r9, r0
    8972:	0c08      	lsrs	r0, r1, #16
    8974:	4448      	add	r0, r9
    8976:	436f      	muls	r7, r5
    8978:	4582      	cmp	sl, r0
    897a:	d903      	bls.n	8984 <__aeabi_dmul+0x278>
    897c:	2180      	movs	r1, #128	; 0x80
    897e:	0249      	lsls	r1, r1, #9
    8980:	4689      	mov	r9, r1
    8982:	444f      	add	r7, r9
    8984:	0c01      	lsrs	r1, r0, #16
    8986:	4689      	mov	r9, r1
    8988:	0039      	movs	r1, r7
    898a:	4449      	add	r1, r9
    898c:	9102      	str	r1, [sp, #8]
    898e:	4641      	mov	r1, r8
    8990:	040f      	lsls	r7, r1, #16
    8992:	9904      	ldr	r1, [sp, #16]
    8994:	0c3f      	lsrs	r7, r7, #16
    8996:	4688      	mov	r8, r1
    8998:	0400      	lsls	r0, r0, #16
    899a:	19c0      	adds	r0, r0, r7
    899c:	4480      	add	r8, r0
    899e:	4641      	mov	r1, r8
    89a0:	9104      	str	r1, [sp, #16]
    89a2:	4659      	mov	r1, fp
    89a4:	0c0f      	lsrs	r7, r1, #16
    89a6:	0409      	lsls	r1, r1, #16
    89a8:	0c09      	lsrs	r1, r1, #16
    89aa:	4688      	mov	r8, r1
    89ac:	4359      	muls	r1, r3
    89ae:	468a      	mov	sl, r1
    89b0:	0039      	movs	r1, r7
    89b2:	4351      	muls	r1, r2
    89b4:	4689      	mov	r9, r1
    89b6:	4641      	mov	r1, r8
    89b8:	434a      	muls	r2, r1
    89ba:	4651      	mov	r1, sl
    89bc:	0c09      	lsrs	r1, r1, #16
    89be:	468b      	mov	fp, r1
    89c0:	437b      	muls	r3, r7
    89c2:	18d2      	adds	r2, r2, r3
    89c4:	445a      	add	r2, fp
    89c6:	4293      	cmp	r3, r2
    89c8:	d903      	bls.n	89d2 <__aeabi_dmul+0x2c6>
    89ca:	2380      	movs	r3, #128	; 0x80
    89cc:	025b      	lsls	r3, r3, #9
    89ce:	469b      	mov	fp, r3
    89d0:	44d9      	add	r9, fp
    89d2:	4651      	mov	r1, sl
    89d4:	0409      	lsls	r1, r1, #16
    89d6:	0c09      	lsrs	r1, r1, #16
    89d8:	468a      	mov	sl, r1
    89da:	4641      	mov	r1, r8
    89dc:	4361      	muls	r1, r4
    89de:	437c      	muls	r4, r7
    89e0:	0c13      	lsrs	r3, r2, #16
    89e2:	0412      	lsls	r2, r2, #16
    89e4:	444b      	add	r3, r9
    89e6:	4452      	add	r2, sl
    89e8:	46a1      	mov	r9, r4
    89ea:	468a      	mov	sl, r1
    89ec:	003c      	movs	r4, r7
    89ee:	4641      	mov	r1, r8
    89f0:	436c      	muls	r4, r5
    89f2:	434d      	muls	r5, r1
    89f4:	4651      	mov	r1, sl
    89f6:	444d      	add	r5, r9
    89f8:	0c0f      	lsrs	r7, r1, #16
    89fa:	197d      	adds	r5, r7, r5
    89fc:	45a9      	cmp	r9, r5
    89fe:	d903      	bls.n	8a08 <__aeabi_dmul+0x2fc>
    8a00:	2180      	movs	r1, #128	; 0x80
    8a02:	0249      	lsls	r1, r1, #9
    8a04:	4688      	mov	r8, r1
    8a06:	4444      	add	r4, r8
    8a08:	9f04      	ldr	r7, [sp, #16]
    8a0a:	9903      	ldr	r1, [sp, #12]
    8a0c:	46b8      	mov	r8, r7
    8a0e:	4441      	add	r1, r8
    8a10:	468b      	mov	fp, r1
    8a12:	4583      	cmp	fp, r0
    8a14:	4180      	sbcs	r0, r0
    8a16:	4241      	negs	r1, r0
    8a18:	4688      	mov	r8, r1
    8a1a:	4651      	mov	r1, sl
    8a1c:	0408      	lsls	r0, r1, #16
    8a1e:	042f      	lsls	r7, r5, #16
    8a20:	0c00      	lsrs	r0, r0, #16
    8a22:	183f      	adds	r7, r7, r0
    8a24:	4658      	mov	r0, fp
    8a26:	9902      	ldr	r1, [sp, #8]
    8a28:	1810      	adds	r0, r2, r0
    8a2a:	4689      	mov	r9, r1
    8a2c:	4290      	cmp	r0, r2
    8a2e:	4192      	sbcs	r2, r2
    8a30:	444f      	add	r7, r9
    8a32:	46ba      	mov	sl, r7
    8a34:	4252      	negs	r2, r2
    8a36:	4699      	mov	r9, r3
    8a38:	4693      	mov	fp, r2
    8a3a:	44c2      	add	sl, r8
    8a3c:	44d1      	add	r9, sl
    8a3e:	44cb      	add	fp, r9
    8a40:	428f      	cmp	r7, r1
    8a42:	41bf      	sbcs	r7, r7
    8a44:	45c2      	cmp	sl, r8
    8a46:	4189      	sbcs	r1, r1
    8a48:	4599      	cmp	r9, r3
    8a4a:	419b      	sbcs	r3, r3
    8a4c:	4593      	cmp	fp, r2
    8a4e:	4192      	sbcs	r2, r2
    8a50:	427f      	negs	r7, r7
    8a52:	4249      	negs	r1, r1
    8a54:	0c2d      	lsrs	r5, r5, #16
    8a56:	4252      	negs	r2, r2
    8a58:	430f      	orrs	r7, r1
    8a5a:	425b      	negs	r3, r3
    8a5c:	4313      	orrs	r3, r2
    8a5e:	197f      	adds	r7, r7, r5
    8a60:	18ff      	adds	r7, r7, r3
    8a62:	465b      	mov	r3, fp
    8a64:	193c      	adds	r4, r7, r4
    8a66:	0ddb      	lsrs	r3, r3, #23
    8a68:	9a05      	ldr	r2, [sp, #20]
    8a6a:	0264      	lsls	r4, r4, #9
    8a6c:	431c      	orrs	r4, r3
    8a6e:	0243      	lsls	r3, r0, #9
    8a70:	4313      	orrs	r3, r2
    8a72:	1e5d      	subs	r5, r3, #1
    8a74:	41ab      	sbcs	r3, r5
    8a76:	465a      	mov	r2, fp
    8a78:	0dc0      	lsrs	r0, r0, #23
    8a7a:	4303      	orrs	r3, r0
    8a7c:	0252      	lsls	r2, r2, #9
    8a7e:	4313      	orrs	r3, r2
    8a80:	01e2      	lsls	r2, r4, #7
    8a82:	d556      	bpl.n	8b32 <__aeabi_dmul+0x426>
    8a84:	2001      	movs	r0, #1
    8a86:	085a      	lsrs	r2, r3, #1
    8a88:	4003      	ands	r3, r0
    8a8a:	4313      	orrs	r3, r2
    8a8c:	07e2      	lsls	r2, r4, #31
    8a8e:	4313      	orrs	r3, r2
    8a90:	0864      	lsrs	r4, r4, #1
    8a92:	485a      	ldr	r0, [pc, #360]	; (8bfc <__aeabi_dmul+0x4f0>)
    8a94:	4460      	add	r0, ip
    8a96:	2800      	cmp	r0, #0
    8a98:	dd4d      	ble.n	8b36 <__aeabi_dmul+0x42a>
    8a9a:	075a      	lsls	r2, r3, #29
    8a9c:	d009      	beq.n	8ab2 <__aeabi_dmul+0x3a6>
    8a9e:	220f      	movs	r2, #15
    8aa0:	401a      	ands	r2, r3
    8aa2:	2a04      	cmp	r2, #4
    8aa4:	d005      	beq.n	8ab2 <__aeabi_dmul+0x3a6>
    8aa6:	1d1a      	adds	r2, r3, #4
    8aa8:	429a      	cmp	r2, r3
    8aaa:	419b      	sbcs	r3, r3
    8aac:	425b      	negs	r3, r3
    8aae:	18e4      	adds	r4, r4, r3
    8ab0:	0013      	movs	r3, r2
    8ab2:	01e2      	lsls	r2, r4, #7
    8ab4:	d504      	bpl.n	8ac0 <__aeabi_dmul+0x3b4>
    8ab6:	2080      	movs	r0, #128	; 0x80
    8ab8:	4a51      	ldr	r2, [pc, #324]	; (8c00 <__aeabi_dmul+0x4f4>)
    8aba:	00c0      	lsls	r0, r0, #3
    8abc:	4014      	ands	r4, r2
    8abe:	4460      	add	r0, ip
    8ac0:	4a50      	ldr	r2, [pc, #320]	; (8c04 <__aeabi_dmul+0x4f8>)
    8ac2:	4290      	cmp	r0, r2
    8ac4:	dd00      	ble.n	8ac8 <__aeabi_dmul+0x3bc>
    8ac6:	e6e3      	b.n	8890 <__aeabi_dmul+0x184>
    8ac8:	2501      	movs	r5, #1
    8aca:	08db      	lsrs	r3, r3, #3
    8acc:	0762      	lsls	r2, r4, #29
    8ace:	431a      	orrs	r2, r3
    8ad0:	0264      	lsls	r4, r4, #9
    8ad2:	9b01      	ldr	r3, [sp, #4]
    8ad4:	4691      	mov	r9, r2
    8ad6:	0b22      	lsrs	r2, r4, #12
    8ad8:	0544      	lsls	r4, r0, #21
    8ada:	0d64      	lsrs	r4, r4, #21
    8adc:	401d      	ands	r5, r3
    8ade:	e67c      	b.n	87da <__aeabi_dmul+0xce>
    8ae0:	2280      	movs	r2, #128	; 0x80
    8ae2:	4659      	mov	r1, fp
    8ae4:	0312      	lsls	r2, r2, #12
    8ae6:	4211      	tst	r1, r2
    8ae8:	d008      	beq.n	8afc <__aeabi_dmul+0x3f0>
    8aea:	4214      	tst	r4, r2
    8aec:	d106      	bne.n	8afc <__aeabi_dmul+0x3f0>
    8aee:	4322      	orrs	r2, r4
    8af0:	0312      	lsls	r2, r2, #12
    8af2:	0b12      	lsrs	r2, r2, #12
    8af4:	4645      	mov	r5, r8
    8af6:	4699      	mov	r9, r3
    8af8:	4c43      	ldr	r4, [pc, #268]	; (8c08 <__aeabi_dmul+0x4fc>)
    8afa:	e66e      	b.n	87da <__aeabi_dmul+0xce>
    8afc:	465b      	mov	r3, fp
    8afe:	431a      	orrs	r2, r3
    8b00:	0312      	lsls	r2, r2, #12
    8b02:	0b12      	lsrs	r2, r2, #12
    8b04:	4c40      	ldr	r4, [pc, #256]	; (8c08 <__aeabi_dmul+0x4fc>)
    8b06:	e668      	b.n	87da <__aeabi_dmul+0xce>
    8b08:	0003      	movs	r3, r0
    8b0a:	4654      	mov	r4, sl
    8b0c:	3b28      	subs	r3, #40	; 0x28
    8b0e:	409c      	lsls	r4, r3
    8b10:	2300      	movs	r3, #0
    8b12:	e6b9      	b.n	8888 <__aeabi_dmul+0x17c>
    8b14:	f000 fc4e 	bl	93b4 <__clzsi2>
    8b18:	3020      	adds	r0, #32
    8b1a:	e6a6      	b.n	886a <__aeabi_dmul+0x15e>
    8b1c:	0003      	movs	r3, r0
    8b1e:	3b28      	subs	r3, #40	; 0x28
    8b20:	409f      	lsls	r7, r3
    8b22:	2300      	movs	r3, #0
    8b24:	46bb      	mov	fp, r7
    8b26:	4699      	mov	r9, r3
    8b28:	e68a      	b.n	8840 <__aeabi_dmul+0x134>
    8b2a:	f000 fc43 	bl	93b4 <__clzsi2>
    8b2e:	3020      	adds	r0, #32
    8b30:	e674      	b.n	881c <__aeabi_dmul+0x110>
    8b32:	46b4      	mov	ip, r6
    8b34:	e7ad      	b.n	8a92 <__aeabi_dmul+0x386>
    8b36:	2501      	movs	r5, #1
    8b38:	1a2a      	subs	r2, r5, r0
    8b3a:	2a38      	cmp	r2, #56	; 0x38
    8b3c:	dd06      	ble.n	8b4c <__aeabi_dmul+0x440>
    8b3e:	9b01      	ldr	r3, [sp, #4]
    8b40:	2400      	movs	r4, #0
    8b42:	401d      	ands	r5, r3
    8b44:	2300      	movs	r3, #0
    8b46:	2200      	movs	r2, #0
    8b48:	4699      	mov	r9, r3
    8b4a:	e646      	b.n	87da <__aeabi_dmul+0xce>
    8b4c:	2a1f      	cmp	r2, #31
    8b4e:	dc21      	bgt.n	8b94 <__aeabi_dmul+0x488>
    8b50:	2520      	movs	r5, #32
    8b52:	0020      	movs	r0, r4
    8b54:	1aad      	subs	r5, r5, r2
    8b56:	001e      	movs	r6, r3
    8b58:	40ab      	lsls	r3, r5
    8b5a:	40a8      	lsls	r0, r5
    8b5c:	40d6      	lsrs	r6, r2
    8b5e:	1e5d      	subs	r5, r3, #1
    8b60:	41ab      	sbcs	r3, r5
    8b62:	4330      	orrs	r0, r6
    8b64:	4318      	orrs	r0, r3
    8b66:	40d4      	lsrs	r4, r2
    8b68:	0743      	lsls	r3, r0, #29
    8b6a:	d009      	beq.n	8b80 <__aeabi_dmul+0x474>
    8b6c:	230f      	movs	r3, #15
    8b6e:	4003      	ands	r3, r0
    8b70:	2b04      	cmp	r3, #4
    8b72:	d005      	beq.n	8b80 <__aeabi_dmul+0x474>
    8b74:	0003      	movs	r3, r0
    8b76:	1d18      	adds	r0, r3, #4
    8b78:	4298      	cmp	r0, r3
    8b7a:	419b      	sbcs	r3, r3
    8b7c:	425b      	negs	r3, r3
    8b7e:	18e4      	adds	r4, r4, r3
    8b80:	0223      	lsls	r3, r4, #8
    8b82:	d521      	bpl.n	8bc8 <__aeabi_dmul+0x4bc>
    8b84:	2501      	movs	r5, #1
    8b86:	9b01      	ldr	r3, [sp, #4]
    8b88:	2401      	movs	r4, #1
    8b8a:	401d      	ands	r5, r3
    8b8c:	2300      	movs	r3, #0
    8b8e:	2200      	movs	r2, #0
    8b90:	4699      	mov	r9, r3
    8b92:	e622      	b.n	87da <__aeabi_dmul+0xce>
    8b94:	251f      	movs	r5, #31
    8b96:	0021      	movs	r1, r4
    8b98:	426d      	negs	r5, r5
    8b9a:	1a28      	subs	r0, r5, r0
    8b9c:	40c1      	lsrs	r1, r0
    8b9e:	0008      	movs	r0, r1
    8ba0:	2a20      	cmp	r2, #32
    8ba2:	d01d      	beq.n	8be0 <__aeabi_dmul+0x4d4>
    8ba4:	355f      	adds	r5, #95	; 0x5f
    8ba6:	1aaa      	subs	r2, r5, r2
    8ba8:	4094      	lsls	r4, r2
    8baa:	4323      	orrs	r3, r4
    8bac:	1e5c      	subs	r4, r3, #1
    8bae:	41a3      	sbcs	r3, r4
    8bb0:	2507      	movs	r5, #7
    8bb2:	4303      	orrs	r3, r0
    8bb4:	401d      	ands	r5, r3
    8bb6:	2200      	movs	r2, #0
    8bb8:	2d00      	cmp	r5, #0
    8bba:	d009      	beq.n	8bd0 <__aeabi_dmul+0x4c4>
    8bbc:	220f      	movs	r2, #15
    8bbe:	2400      	movs	r4, #0
    8bc0:	401a      	ands	r2, r3
    8bc2:	0018      	movs	r0, r3
    8bc4:	2a04      	cmp	r2, #4
    8bc6:	d1d6      	bne.n	8b76 <__aeabi_dmul+0x46a>
    8bc8:	0003      	movs	r3, r0
    8bca:	0765      	lsls	r5, r4, #29
    8bcc:	0264      	lsls	r4, r4, #9
    8bce:	0b22      	lsrs	r2, r4, #12
    8bd0:	08db      	lsrs	r3, r3, #3
    8bd2:	432b      	orrs	r3, r5
    8bd4:	2501      	movs	r5, #1
    8bd6:	4699      	mov	r9, r3
    8bd8:	9b01      	ldr	r3, [sp, #4]
    8bda:	2400      	movs	r4, #0
    8bdc:	401d      	ands	r5, r3
    8bde:	e5fc      	b.n	87da <__aeabi_dmul+0xce>
    8be0:	2400      	movs	r4, #0
    8be2:	e7e2      	b.n	8baa <__aeabi_dmul+0x49e>
    8be4:	2280      	movs	r2, #128	; 0x80
    8be6:	2501      	movs	r5, #1
    8be8:	0312      	lsls	r2, r2, #12
    8bea:	4322      	orrs	r2, r4
    8bec:	9901      	ldr	r1, [sp, #4]
    8bee:	0312      	lsls	r2, r2, #12
    8bf0:	0b12      	lsrs	r2, r2, #12
    8bf2:	400d      	ands	r5, r1
    8bf4:	4699      	mov	r9, r3
    8bf6:	4c04      	ldr	r4, [pc, #16]	; (8c08 <__aeabi_dmul+0x4fc>)
    8bf8:	e5ef      	b.n	87da <__aeabi_dmul+0xce>
    8bfa:	46c0      	nop			; (mov r8, r8)
    8bfc:	000003ff 	.word	0x000003ff
    8c00:	feffffff 	.word	0xfeffffff
    8c04:	000007fe 	.word	0x000007fe
    8c08:	000007ff 	.word	0x000007ff

00008c0c <__aeabi_dsub>:
    8c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c0e:	4646      	mov	r6, r8
    8c10:	46d6      	mov	lr, sl
    8c12:	464f      	mov	r7, r9
    8c14:	030c      	lsls	r4, r1, #12
    8c16:	b5c0      	push	{r6, r7, lr}
    8c18:	0fcd      	lsrs	r5, r1, #31
    8c1a:	004e      	lsls	r6, r1, #1
    8c1c:	0a61      	lsrs	r1, r4, #9
    8c1e:	0f44      	lsrs	r4, r0, #29
    8c20:	430c      	orrs	r4, r1
    8c22:	00c1      	lsls	r1, r0, #3
    8c24:	0058      	lsls	r0, r3, #1
    8c26:	0d40      	lsrs	r0, r0, #21
    8c28:	4684      	mov	ip, r0
    8c2a:	468a      	mov	sl, r1
    8c2c:	000f      	movs	r7, r1
    8c2e:	0319      	lsls	r1, r3, #12
    8c30:	0f50      	lsrs	r0, r2, #29
    8c32:	0a49      	lsrs	r1, r1, #9
    8c34:	4301      	orrs	r1, r0
    8c36:	48c6      	ldr	r0, [pc, #792]	; (8f50 <__aeabi_dsub+0x344>)
    8c38:	0d76      	lsrs	r6, r6, #21
    8c3a:	46a8      	mov	r8, r5
    8c3c:	0fdb      	lsrs	r3, r3, #31
    8c3e:	00d2      	lsls	r2, r2, #3
    8c40:	4584      	cmp	ip, r0
    8c42:	d100      	bne.n	8c46 <__aeabi_dsub+0x3a>
    8c44:	e0d8      	b.n	8df8 <__aeabi_dsub+0x1ec>
    8c46:	2001      	movs	r0, #1
    8c48:	4043      	eors	r3, r0
    8c4a:	42ab      	cmp	r3, r5
    8c4c:	d100      	bne.n	8c50 <__aeabi_dsub+0x44>
    8c4e:	e0a6      	b.n	8d9e <__aeabi_dsub+0x192>
    8c50:	4660      	mov	r0, ip
    8c52:	1a35      	subs	r5, r6, r0
    8c54:	2d00      	cmp	r5, #0
    8c56:	dc00      	bgt.n	8c5a <__aeabi_dsub+0x4e>
    8c58:	e105      	b.n	8e66 <__aeabi_dsub+0x25a>
    8c5a:	2800      	cmp	r0, #0
    8c5c:	d110      	bne.n	8c80 <__aeabi_dsub+0x74>
    8c5e:	000b      	movs	r3, r1
    8c60:	4313      	orrs	r3, r2
    8c62:	d100      	bne.n	8c66 <__aeabi_dsub+0x5a>
    8c64:	e0d7      	b.n	8e16 <__aeabi_dsub+0x20a>
    8c66:	1e6b      	subs	r3, r5, #1
    8c68:	2b00      	cmp	r3, #0
    8c6a:	d000      	beq.n	8c6e <__aeabi_dsub+0x62>
    8c6c:	e14b      	b.n	8f06 <__aeabi_dsub+0x2fa>
    8c6e:	4653      	mov	r3, sl
    8c70:	1a9f      	subs	r7, r3, r2
    8c72:	45ba      	cmp	sl, r7
    8c74:	4180      	sbcs	r0, r0
    8c76:	1a64      	subs	r4, r4, r1
    8c78:	4240      	negs	r0, r0
    8c7a:	1a24      	subs	r4, r4, r0
    8c7c:	2601      	movs	r6, #1
    8c7e:	e01e      	b.n	8cbe <__aeabi_dsub+0xb2>
    8c80:	4bb3      	ldr	r3, [pc, #716]	; (8f50 <__aeabi_dsub+0x344>)
    8c82:	429e      	cmp	r6, r3
    8c84:	d048      	beq.n	8d18 <__aeabi_dsub+0x10c>
    8c86:	2380      	movs	r3, #128	; 0x80
    8c88:	041b      	lsls	r3, r3, #16
    8c8a:	4319      	orrs	r1, r3
    8c8c:	2d38      	cmp	r5, #56	; 0x38
    8c8e:	dd00      	ble.n	8c92 <__aeabi_dsub+0x86>
    8c90:	e119      	b.n	8ec6 <__aeabi_dsub+0x2ba>
    8c92:	2d1f      	cmp	r5, #31
    8c94:	dd00      	ble.n	8c98 <__aeabi_dsub+0x8c>
    8c96:	e14c      	b.n	8f32 <__aeabi_dsub+0x326>
    8c98:	2320      	movs	r3, #32
    8c9a:	000f      	movs	r7, r1
    8c9c:	1b5b      	subs	r3, r3, r5
    8c9e:	0010      	movs	r0, r2
    8ca0:	409a      	lsls	r2, r3
    8ca2:	409f      	lsls	r7, r3
    8ca4:	40e8      	lsrs	r0, r5
    8ca6:	1e53      	subs	r3, r2, #1
    8ca8:	419a      	sbcs	r2, r3
    8caa:	40e9      	lsrs	r1, r5
    8cac:	4307      	orrs	r7, r0
    8cae:	4317      	orrs	r7, r2
    8cb0:	4653      	mov	r3, sl
    8cb2:	1bdf      	subs	r7, r3, r7
    8cb4:	1a61      	subs	r1, r4, r1
    8cb6:	45ba      	cmp	sl, r7
    8cb8:	41a4      	sbcs	r4, r4
    8cba:	4264      	negs	r4, r4
    8cbc:	1b0c      	subs	r4, r1, r4
    8cbe:	0223      	lsls	r3, r4, #8
    8cc0:	d400      	bmi.n	8cc4 <__aeabi_dsub+0xb8>
    8cc2:	e0c5      	b.n	8e50 <__aeabi_dsub+0x244>
    8cc4:	0264      	lsls	r4, r4, #9
    8cc6:	0a65      	lsrs	r5, r4, #9
    8cc8:	2d00      	cmp	r5, #0
    8cca:	d100      	bne.n	8cce <__aeabi_dsub+0xc2>
    8ccc:	e0f6      	b.n	8ebc <__aeabi_dsub+0x2b0>
    8cce:	0028      	movs	r0, r5
    8cd0:	f000 fb70 	bl	93b4 <__clzsi2>
    8cd4:	0003      	movs	r3, r0
    8cd6:	3b08      	subs	r3, #8
    8cd8:	2b1f      	cmp	r3, #31
    8cda:	dd00      	ble.n	8cde <__aeabi_dsub+0xd2>
    8cdc:	e0e9      	b.n	8eb2 <__aeabi_dsub+0x2a6>
    8cde:	2220      	movs	r2, #32
    8ce0:	003c      	movs	r4, r7
    8ce2:	1ad2      	subs	r2, r2, r3
    8ce4:	409d      	lsls	r5, r3
    8ce6:	40d4      	lsrs	r4, r2
    8ce8:	409f      	lsls	r7, r3
    8cea:	4325      	orrs	r5, r4
    8cec:	429e      	cmp	r6, r3
    8cee:	dd00      	ble.n	8cf2 <__aeabi_dsub+0xe6>
    8cf0:	e0db      	b.n	8eaa <__aeabi_dsub+0x29e>
    8cf2:	1b9e      	subs	r6, r3, r6
    8cf4:	1c73      	adds	r3, r6, #1
    8cf6:	2b1f      	cmp	r3, #31
    8cf8:	dd00      	ble.n	8cfc <__aeabi_dsub+0xf0>
    8cfa:	e10a      	b.n	8f12 <__aeabi_dsub+0x306>
    8cfc:	2220      	movs	r2, #32
    8cfe:	0038      	movs	r0, r7
    8d00:	1ad2      	subs	r2, r2, r3
    8d02:	0029      	movs	r1, r5
    8d04:	4097      	lsls	r7, r2
    8d06:	002c      	movs	r4, r5
    8d08:	4091      	lsls	r1, r2
    8d0a:	40d8      	lsrs	r0, r3
    8d0c:	1e7a      	subs	r2, r7, #1
    8d0e:	4197      	sbcs	r7, r2
    8d10:	40dc      	lsrs	r4, r3
    8d12:	2600      	movs	r6, #0
    8d14:	4301      	orrs	r1, r0
    8d16:	430f      	orrs	r7, r1
    8d18:	077b      	lsls	r3, r7, #29
    8d1a:	d009      	beq.n	8d30 <__aeabi_dsub+0x124>
    8d1c:	230f      	movs	r3, #15
    8d1e:	403b      	ands	r3, r7
    8d20:	2b04      	cmp	r3, #4
    8d22:	d005      	beq.n	8d30 <__aeabi_dsub+0x124>
    8d24:	1d3b      	adds	r3, r7, #4
    8d26:	42bb      	cmp	r3, r7
    8d28:	41bf      	sbcs	r7, r7
    8d2a:	427f      	negs	r7, r7
    8d2c:	19e4      	adds	r4, r4, r7
    8d2e:	001f      	movs	r7, r3
    8d30:	0223      	lsls	r3, r4, #8
    8d32:	d525      	bpl.n	8d80 <__aeabi_dsub+0x174>
    8d34:	4b86      	ldr	r3, [pc, #536]	; (8f50 <__aeabi_dsub+0x344>)
    8d36:	3601      	adds	r6, #1
    8d38:	429e      	cmp	r6, r3
    8d3a:	d100      	bne.n	8d3e <__aeabi_dsub+0x132>
    8d3c:	e0af      	b.n	8e9e <__aeabi_dsub+0x292>
    8d3e:	4b85      	ldr	r3, [pc, #532]	; (8f54 <__aeabi_dsub+0x348>)
    8d40:	2501      	movs	r5, #1
    8d42:	401c      	ands	r4, r3
    8d44:	4643      	mov	r3, r8
    8d46:	0762      	lsls	r2, r4, #29
    8d48:	08ff      	lsrs	r7, r7, #3
    8d4a:	0264      	lsls	r4, r4, #9
    8d4c:	0576      	lsls	r6, r6, #21
    8d4e:	4317      	orrs	r7, r2
    8d50:	0b24      	lsrs	r4, r4, #12
    8d52:	0d76      	lsrs	r6, r6, #21
    8d54:	401d      	ands	r5, r3
    8d56:	2100      	movs	r1, #0
    8d58:	0324      	lsls	r4, r4, #12
    8d5a:	0b23      	lsrs	r3, r4, #12
    8d5c:	0d0c      	lsrs	r4, r1, #20
    8d5e:	4a7e      	ldr	r2, [pc, #504]	; (8f58 <__aeabi_dsub+0x34c>)
    8d60:	0524      	lsls	r4, r4, #20
    8d62:	431c      	orrs	r4, r3
    8d64:	4014      	ands	r4, r2
    8d66:	0533      	lsls	r3, r6, #20
    8d68:	4323      	orrs	r3, r4
    8d6a:	005b      	lsls	r3, r3, #1
    8d6c:	07ed      	lsls	r5, r5, #31
    8d6e:	085b      	lsrs	r3, r3, #1
    8d70:	432b      	orrs	r3, r5
    8d72:	0038      	movs	r0, r7
    8d74:	0019      	movs	r1, r3
    8d76:	bc1c      	pop	{r2, r3, r4}
    8d78:	4690      	mov	r8, r2
    8d7a:	4699      	mov	r9, r3
    8d7c:	46a2      	mov	sl, r4
    8d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8d80:	2501      	movs	r5, #1
    8d82:	4643      	mov	r3, r8
    8d84:	0762      	lsls	r2, r4, #29
    8d86:	08ff      	lsrs	r7, r7, #3
    8d88:	4317      	orrs	r7, r2
    8d8a:	08e4      	lsrs	r4, r4, #3
    8d8c:	401d      	ands	r5, r3
    8d8e:	4b70      	ldr	r3, [pc, #448]	; (8f50 <__aeabi_dsub+0x344>)
    8d90:	429e      	cmp	r6, r3
    8d92:	d036      	beq.n	8e02 <__aeabi_dsub+0x1f6>
    8d94:	0324      	lsls	r4, r4, #12
    8d96:	0576      	lsls	r6, r6, #21
    8d98:	0b24      	lsrs	r4, r4, #12
    8d9a:	0d76      	lsrs	r6, r6, #21
    8d9c:	e7db      	b.n	8d56 <__aeabi_dsub+0x14a>
    8d9e:	4663      	mov	r3, ip
    8da0:	1af3      	subs	r3, r6, r3
    8da2:	2b00      	cmp	r3, #0
    8da4:	dc00      	bgt.n	8da8 <__aeabi_dsub+0x19c>
    8da6:	e094      	b.n	8ed2 <__aeabi_dsub+0x2c6>
    8da8:	4660      	mov	r0, ip
    8daa:	2800      	cmp	r0, #0
    8dac:	d035      	beq.n	8e1a <__aeabi_dsub+0x20e>
    8dae:	4868      	ldr	r0, [pc, #416]	; (8f50 <__aeabi_dsub+0x344>)
    8db0:	4286      	cmp	r6, r0
    8db2:	d0b1      	beq.n	8d18 <__aeabi_dsub+0x10c>
    8db4:	2780      	movs	r7, #128	; 0x80
    8db6:	043f      	lsls	r7, r7, #16
    8db8:	4339      	orrs	r1, r7
    8dba:	2b38      	cmp	r3, #56	; 0x38
    8dbc:	dc00      	bgt.n	8dc0 <__aeabi_dsub+0x1b4>
    8dbe:	e0fd      	b.n	8fbc <__aeabi_dsub+0x3b0>
    8dc0:	430a      	orrs	r2, r1
    8dc2:	0017      	movs	r7, r2
    8dc4:	2100      	movs	r1, #0
    8dc6:	1e7a      	subs	r2, r7, #1
    8dc8:	4197      	sbcs	r7, r2
    8dca:	4457      	add	r7, sl
    8dcc:	4557      	cmp	r7, sl
    8dce:	4180      	sbcs	r0, r0
    8dd0:	1909      	adds	r1, r1, r4
    8dd2:	4244      	negs	r4, r0
    8dd4:	190c      	adds	r4, r1, r4
    8dd6:	0223      	lsls	r3, r4, #8
    8dd8:	d53a      	bpl.n	8e50 <__aeabi_dsub+0x244>
    8dda:	4b5d      	ldr	r3, [pc, #372]	; (8f50 <__aeabi_dsub+0x344>)
    8ddc:	3601      	adds	r6, #1
    8dde:	429e      	cmp	r6, r3
    8de0:	d100      	bne.n	8de4 <__aeabi_dsub+0x1d8>
    8de2:	e14b      	b.n	907c <__aeabi_dsub+0x470>
    8de4:	2201      	movs	r2, #1
    8de6:	4b5b      	ldr	r3, [pc, #364]	; (8f54 <__aeabi_dsub+0x348>)
    8de8:	401c      	ands	r4, r3
    8dea:	087b      	lsrs	r3, r7, #1
    8dec:	4017      	ands	r7, r2
    8dee:	431f      	orrs	r7, r3
    8df0:	07e2      	lsls	r2, r4, #31
    8df2:	4317      	orrs	r7, r2
    8df4:	0864      	lsrs	r4, r4, #1
    8df6:	e78f      	b.n	8d18 <__aeabi_dsub+0x10c>
    8df8:	0008      	movs	r0, r1
    8dfa:	4310      	orrs	r0, r2
    8dfc:	d000      	beq.n	8e00 <__aeabi_dsub+0x1f4>
    8dfe:	e724      	b.n	8c4a <__aeabi_dsub+0x3e>
    8e00:	e721      	b.n	8c46 <__aeabi_dsub+0x3a>
    8e02:	0023      	movs	r3, r4
    8e04:	433b      	orrs	r3, r7
    8e06:	d100      	bne.n	8e0a <__aeabi_dsub+0x1fe>
    8e08:	e1b9      	b.n	917e <__aeabi_dsub+0x572>
    8e0a:	2280      	movs	r2, #128	; 0x80
    8e0c:	0312      	lsls	r2, r2, #12
    8e0e:	4314      	orrs	r4, r2
    8e10:	0324      	lsls	r4, r4, #12
    8e12:	0b24      	lsrs	r4, r4, #12
    8e14:	e79f      	b.n	8d56 <__aeabi_dsub+0x14a>
    8e16:	002e      	movs	r6, r5
    8e18:	e77e      	b.n	8d18 <__aeabi_dsub+0x10c>
    8e1a:	0008      	movs	r0, r1
    8e1c:	4310      	orrs	r0, r2
    8e1e:	d100      	bne.n	8e22 <__aeabi_dsub+0x216>
    8e20:	e0ca      	b.n	8fb8 <__aeabi_dsub+0x3ac>
    8e22:	1e58      	subs	r0, r3, #1
    8e24:	4684      	mov	ip, r0
    8e26:	2800      	cmp	r0, #0
    8e28:	d000      	beq.n	8e2c <__aeabi_dsub+0x220>
    8e2a:	e0e7      	b.n	8ffc <__aeabi_dsub+0x3f0>
    8e2c:	4452      	add	r2, sl
    8e2e:	4552      	cmp	r2, sl
    8e30:	4180      	sbcs	r0, r0
    8e32:	1864      	adds	r4, r4, r1
    8e34:	4240      	negs	r0, r0
    8e36:	1824      	adds	r4, r4, r0
    8e38:	0017      	movs	r7, r2
    8e3a:	2601      	movs	r6, #1
    8e3c:	0223      	lsls	r3, r4, #8
    8e3e:	d507      	bpl.n	8e50 <__aeabi_dsub+0x244>
    8e40:	2602      	movs	r6, #2
    8e42:	e7cf      	b.n	8de4 <__aeabi_dsub+0x1d8>
    8e44:	4664      	mov	r4, ip
    8e46:	432c      	orrs	r4, r5
    8e48:	d100      	bne.n	8e4c <__aeabi_dsub+0x240>
    8e4a:	e1b3      	b.n	91b4 <__aeabi_dsub+0x5a8>
    8e4c:	002c      	movs	r4, r5
    8e4e:	4667      	mov	r7, ip
    8e50:	077b      	lsls	r3, r7, #29
    8e52:	d000      	beq.n	8e56 <__aeabi_dsub+0x24a>
    8e54:	e762      	b.n	8d1c <__aeabi_dsub+0x110>
    8e56:	0763      	lsls	r3, r4, #29
    8e58:	08ff      	lsrs	r7, r7, #3
    8e5a:	431f      	orrs	r7, r3
    8e5c:	2501      	movs	r5, #1
    8e5e:	4643      	mov	r3, r8
    8e60:	08e4      	lsrs	r4, r4, #3
    8e62:	401d      	ands	r5, r3
    8e64:	e793      	b.n	8d8e <__aeabi_dsub+0x182>
    8e66:	2d00      	cmp	r5, #0
    8e68:	d178      	bne.n	8f5c <__aeabi_dsub+0x350>
    8e6a:	1c75      	adds	r5, r6, #1
    8e6c:	056d      	lsls	r5, r5, #21
    8e6e:	0d6d      	lsrs	r5, r5, #21
    8e70:	2d01      	cmp	r5, #1
    8e72:	dc00      	bgt.n	8e76 <__aeabi_dsub+0x26a>
    8e74:	e0f2      	b.n	905c <__aeabi_dsub+0x450>
    8e76:	4650      	mov	r0, sl
    8e78:	1a80      	subs	r0, r0, r2
    8e7a:	4582      	cmp	sl, r0
    8e7c:	41bf      	sbcs	r7, r7
    8e7e:	1a65      	subs	r5, r4, r1
    8e80:	427f      	negs	r7, r7
    8e82:	1bed      	subs	r5, r5, r7
    8e84:	4684      	mov	ip, r0
    8e86:	0228      	lsls	r0, r5, #8
    8e88:	d400      	bmi.n	8e8c <__aeabi_dsub+0x280>
    8e8a:	e08c      	b.n	8fa6 <__aeabi_dsub+0x39a>
    8e8c:	4650      	mov	r0, sl
    8e8e:	1a17      	subs	r7, r2, r0
    8e90:	42ba      	cmp	r2, r7
    8e92:	4192      	sbcs	r2, r2
    8e94:	1b0c      	subs	r4, r1, r4
    8e96:	4255      	negs	r5, r2
    8e98:	1b65      	subs	r5, r4, r5
    8e9a:	4698      	mov	r8, r3
    8e9c:	e714      	b.n	8cc8 <__aeabi_dsub+0xbc>
    8e9e:	2501      	movs	r5, #1
    8ea0:	4643      	mov	r3, r8
    8ea2:	2400      	movs	r4, #0
    8ea4:	401d      	ands	r5, r3
    8ea6:	2700      	movs	r7, #0
    8ea8:	e755      	b.n	8d56 <__aeabi_dsub+0x14a>
    8eaa:	4c2a      	ldr	r4, [pc, #168]	; (8f54 <__aeabi_dsub+0x348>)
    8eac:	1af6      	subs	r6, r6, r3
    8eae:	402c      	ands	r4, r5
    8eb0:	e732      	b.n	8d18 <__aeabi_dsub+0x10c>
    8eb2:	003d      	movs	r5, r7
    8eb4:	3828      	subs	r0, #40	; 0x28
    8eb6:	4085      	lsls	r5, r0
    8eb8:	2700      	movs	r7, #0
    8eba:	e717      	b.n	8cec <__aeabi_dsub+0xe0>
    8ebc:	0038      	movs	r0, r7
    8ebe:	f000 fa79 	bl	93b4 <__clzsi2>
    8ec2:	3020      	adds	r0, #32
    8ec4:	e706      	b.n	8cd4 <__aeabi_dsub+0xc8>
    8ec6:	430a      	orrs	r2, r1
    8ec8:	0017      	movs	r7, r2
    8eca:	2100      	movs	r1, #0
    8ecc:	1e7a      	subs	r2, r7, #1
    8ece:	4197      	sbcs	r7, r2
    8ed0:	e6ee      	b.n	8cb0 <__aeabi_dsub+0xa4>
    8ed2:	2b00      	cmp	r3, #0
    8ed4:	d000      	beq.n	8ed8 <__aeabi_dsub+0x2cc>
    8ed6:	e0e5      	b.n	90a4 <__aeabi_dsub+0x498>
    8ed8:	1c73      	adds	r3, r6, #1
    8eda:	469c      	mov	ip, r3
    8edc:	055b      	lsls	r3, r3, #21
    8ede:	0d5b      	lsrs	r3, r3, #21
    8ee0:	2b01      	cmp	r3, #1
    8ee2:	dc00      	bgt.n	8ee6 <__aeabi_dsub+0x2da>
    8ee4:	e09f      	b.n	9026 <__aeabi_dsub+0x41a>
    8ee6:	4b1a      	ldr	r3, [pc, #104]	; (8f50 <__aeabi_dsub+0x344>)
    8ee8:	459c      	cmp	ip, r3
    8eea:	d100      	bne.n	8eee <__aeabi_dsub+0x2e2>
    8eec:	e0c5      	b.n	907a <__aeabi_dsub+0x46e>
    8eee:	4452      	add	r2, sl
    8ef0:	4552      	cmp	r2, sl
    8ef2:	4180      	sbcs	r0, r0
    8ef4:	1864      	adds	r4, r4, r1
    8ef6:	4240      	negs	r0, r0
    8ef8:	1824      	adds	r4, r4, r0
    8efa:	07e7      	lsls	r7, r4, #31
    8efc:	0852      	lsrs	r2, r2, #1
    8efe:	4317      	orrs	r7, r2
    8f00:	0864      	lsrs	r4, r4, #1
    8f02:	4666      	mov	r6, ip
    8f04:	e708      	b.n	8d18 <__aeabi_dsub+0x10c>
    8f06:	4812      	ldr	r0, [pc, #72]	; (8f50 <__aeabi_dsub+0x344>)
    8f08:	4285      	cmp	r5, r0
    8f0a:	d100      	bne.n	8f0e <__aeabi_dsub+0x302>
    8f0c:	e085      	b.n	901a <__aeabi_dsub+0x40e>
    8f0e:	001d      	movs	r5, r3
    8f10:	e6bc      	b.n	8c8c <__aeabi_dsub+0x80>
    8f12:	0029      	movs	r1, r5
    8f14:	3e1f      	subs	r6, #31
    8f16:	40f1      	lsrs	r1, r6
    8f18:	2b20      	cmp	r3, #32
    8f1a:	d100      	bne.n	8f1e <__aeabi_dsub+0x312>
    8f1c:	e07f      	b.n	901e <__aeabi_dsub+0x412>
    8f1e:	2240      	movs	r2, #64	; 0x40
    8f20:	1ad3      	subs	r3, r2, r3
    8f22:	409d      	lsls	r5, r3
    8f24:	432f      	orrs	r7, r5
    8f26:	1e7d      	subs	r5, r7, #1
    8f28:	41af      	sbcs	r7, r5
    8f2a:	2400      	movs	r4, #0
    8f2c:	430f      	orrs	r7, r1
    8f2e:	2600      	movs	r6, #0
    8f30:	e78e      	b.n	8e50 <__aeabi_dsub+0x244>
    8f32:	002b      	movs	r3, r5
    8f34:	000f      	movs	r7, r1
    8f36:	3b20      	subs	r3, #32
    8f38:	40df      	lsrs	r7, r3
    8f3a:	2d20      	cmp	r5, #32
    8f3c:	d071      	beq.n	9022 <__aeabi_dsub+0x416>
    8f3e:	2340      	movs	r3, #64	; 0x40
    8f40:	1b5d      	subs	r5, r3, r5
    8f42:	40a9      	lsls	r1, r5
    8f44:	430a      	orrs	r2, r1
    8f46:	1e51      	subs	r1, r2, #1
    8f48:	418a      	sbcs	r2, r1
    8f4a:	2100      	movs	r1, #0
    8f4c:	4317      	orrs	r7, r2
    8f4e:	e6af      	b.n	8cb0 <__aeabi_dsub+0xa4>
    8f50:	000007ff 	.word	0x000007ff
    8f54:	ff7fffff 	.word	0xff7fffff
    8f58:	800fffff 	.word	0x800fffff
    8f5c:	2e00      	cmp	r6, #0
    8f5e:	d03e      	beq.n	8fde <__aeabi_dsub+0x3d2>
    8f60:	4eb3      	ldr	r6, [pc, #716]	; (9230 <__aeabi_dsub+0x624>)
    8f62:	45b4      	cmp	ip, r6
    8f64:	d045      	beq.n	8ff2 <__aeabi_dsub+0x3e6>
    8f66:	2680      	movs	r6, #128	; 0x80
    8f68:	0436      	lsls	r6, r6, #16
    8f6a:	426d      	negs	r5, r5
    8f6c:	4334      	orrs	r4, r6
    8f6e:	2d38      	cmp	r5, #56	; 0x38
    8f70:	dd00      	ble.n	8f74 <__aeabi_dsub+0x368>
    8f72:	e0a8      	b.n	90c6 <__aeabi_dsub+0x4ba>
    8f74:	2d1f      	cmp	r5, #31
    8f76:	dd00      	ble.n	8f7a <__aeabi_dsub+0x36e>
    8f78:	e11f      	b.n	91ba <__aeabi_dsub+0x5ae>
    8f7a:	2620      	movs	r6, #32
    8f7c:	0027      	movs	r7, r4
    8f7e:	4650      	mov	r0, sl
    8f80:	1b76      	subs	r6, r6, r5
    8f82:	40b7      	lsls	r7, r6
    8f84:	40e8      	lsrs	r0, r5
    8f86:	4307      	orrs	r7, r0
    8f88:	4650      	mov	r0, sl
    8f8a:	40b0      	lsls	r0, r6
    8f8c:	1e46      	subs	r6, r0, #1
    8f8e:	41b0      	sbcs	r0, r6
    8f90:	40ec      	lsrs	r4, r5
    8f92:	4338      	orrs	r0, r7
    8f94:	1a17      	subs	r7, r2, r0
    8f96:	42ba      	cmp	r2, r7
    8f98:	4192      	sbcs	r2, r2
    8f9a:	1b0c      	subs	r4, r1, r4
    8f9c:	4252      	negs	r2, r2
    8f9e:	1aa4      	subs	r4, r4, r2
    8fa0:	4666      	mov	r6, ip
    8fa2:	4698      	mov	r8, r3
    8fa4:	e68b      	b.n	8cbe <__aeabi_dsub+0xb2>
    8fa6:	4664      	mov	r4, ip
    8fa8:	4667      	mov	r7, ip
    8faa:	432c      	orrs	r4, r5
    8fac:	d000      	beq.n	8fb0 <__aeabi_dsub+0x3a4>
    8fae:	e68b      	b.n	8cc8 <__aeabi_dsub+0xbc>
    8fb0:	2500      	movs	r5, #0
    8fb2:	2600      	movs	r6, #0
    8fb4:	2700      	movs	r7, #0
    8fb6:	e6ea      	b.n	8d8e <__aeabi_dsub+0x182>
    8fb8:	001e      	movs	r6, r3
    8fba:	e6ad      	b.n	8d18 <__aeabi_dsub+0x10c>
    8fbc:	2b1f      	cmp	r3, #31
    8fbe:	dc60      	bgt.n	9082 <__aeabi_dsub+0x476>
    8fc0:	2720      	movs	r7, #32
    8fc2:	1af8      	subs	r0, r7, r3
    8fc4:	000f      	movs	r7, r1
    8fc6:	4684      	mov	ip, r0
    8fc8:	4087      	lsls	r7, r0
    8fca:	0010      	movs	r0, r2
    8fcc:	40d8      	lsrs	r0, r3
    8fce:	4307      	orrs	r7, r0
    8fd0:	4660      	mov	r0, ip
    8fd2:	4082      	lsls	r2, r0
    8fd4:	1e50      	subs	r0, r2, #1
    8fd6:	4182      	sbcs	r2, r0
    8fd8:	40d9      	lsrs	r1, r3
    8fda:	4317      	orrs	r7, r2
    8fdc:	e6f5      	b.n	8dca <__aeabi_dsub+0x1be>
    8fde:	0026      	movs	r6, r4
    8fe0:	4650      	mov	r0, sl
    8fe2:	4306      	orrs	r6, r0
    8fe4:	d005      	beq.n	8ff2 <__aeabi_dsub+0x3e6>
    8fe6:	43ed      	mvns	r5, r5
    8fe8:	2d00      	cmp	r5, #0
    8fea:	d0d3      	beq.n	8f94 <__aeabi_dsub+0x388>
    8fec:	4e90      	ldr	r6, [pc, #576]	; (9230 <__aeabi_dsub+0x624>)
    8fee:	45b4      	cmp	ip, r6
    8ff0:	d1bd      	bne.n	8f6e <__aeabi_dsub+0x362>
    8ff2:	000c      	movs	r4, r1
    8ff4:	0017      	movs	r7, r2
    8ff6:	4666      	mov	r6, ip
    8ff8:	4698      	mov	r8, r3
    8ffa:	e68d      	b.n	8d18 <__aeabi_dsub+0x10c>
    8ffc:	488c      	ldr	r0, [pc, #560]	; (9230 <__aeabi_dsub+0x624>)
    8ffe:	4283      	cmp	r3, r0
    9000:	d00b      	beq.n	901a <__aeabi_dsub+0x40e>
    9002:	4663      	mov	r3, ip
    9004:	e6d9      	b.n	8dba <__aeabi_dsub+0x1ae>
    9006:	2d00      	cmp	r5, #0
    9008:	d000      	beq.n	900c <__aeabi_dsub+0x400>
    900a:	e096      	b.n	913a <__aeabi_dsub+0x52e>
    900c:	0008      	movs	r0, r1
    900e:	4310      	orrs	r0, r2
    9010:	d100      	bne.n	9014 <__aeabi_dsub+0x408>
    9012:	e0e2      	b.n	91da <__aeabi_dsub+0x5ce>
    9014:	000c      	movs	r4, r1
    9016:	0017      	movs	r7, r2
    9018:	4698      	mov	r8, r3
    901a:	4e85      	ldr	r6, [pc, #532]	; (9230 <__aeabi_dsub+0x624>)
    901c:	e67c      	b.n	8d18 <__aeabi_dsub+0x10c>
    901e:	2500      	movs	r5, #0
    9020:	e780      	b.n	8f24 <__aeabi_dsub+0x318>
    9022:	2100      	movs	r1, #0
    9024:	e78e      	b.n	8f44 <__aeabi_dsub+0x338>
    9026:	0023      	movs	r3, r4
    9028:	4650      	mov	r0, sl
    902a:	4303      	orrs	r3, r0
    902c:	2e00      	cmp	r6, #0
    902e:	d000      	beq.n	9032 <__aeabi_dsub+0x426>
    9030:	e0a8      	b.n	9184 <__aeabi_dsub+0x578>
    9032:	2b00      	cmp	r3, #0
    9034:	d100      	bne.n	9038 <__aeabi_dsub+0x42c>
    9036:	e0de      	b.n	91f6 <__aeabi_dsub+0x5ea>
    9038:	000b      	movs	r3, r1
    903a:	4313      	orrs	r3, r2
    903c:	d100      	bne.n	9040 <__aeabi_dsub+0x434>
    903e:	e66b      	b.n	8d18 <__aeabi_dsub+0x10c>
    9040:	4452      	add	r2, sl
    9042:	4552      	cmp	r2, sl
    9044:	4180      	sbcs	r0, r0
    9046:	1864      	adds	r4, r4, r1
    9048:	4240      	negs	r0, r0
    904a:	1824      	adds	r4, r4, r0
    904c:	0017      	movs	r7, r2
    904e:	0223      	lsls	r3, r4, #8
    9050:	d400      	bmi.n	9054 <__aeabi_dsub+0x448>
    9052:	e6fd      	b.n	8e50 <__aeabi_dsub+0x244>
    9054:	4b77      	ldr	r3, [pc, #476]	; (9234 <__aeabi_dsub+0x628>)
    9056:	4666      	mov	r6, ip
    9058:	401c      	ands	r4, r3
    905a:	e65d      	b.n	8d18 <__aeabi_dsub+0x10c>
    905c:	0025      	movs	r5, r4
    905e:	4650      	mov	r0, sl
    9060:	4305      	orrs	r5, r0
    9062:	2e00      	cmp	r6, #0
    9064:	d1cf      	bne.n	9006 <__aeabi_dsub+0x3fa>
    9066:	2d00      	cmp	r5, #0
    9068:	d14f      	bne.n	910a <__aeabi_dsub+0x4fe>
    906a:	000c      	movs	r4, r1
    906c:	4314      	orrs	r4, r2
    906e:	d100      	bne.n	9072 <__aeabi_dsub+0x466>
    9070:	e0a0      	b.n	91b4 <__aeabi_dsub+0x5a8>
    9072:	000c      	movs	r4, r1
    9074:	0017      	movs	r7, r2
    9076:	4698      	mov	r8, r3
    9078:	e64e      	b.n	8d18 <__aeabi_dsub+0x10c>
    907a:	4666      	mov	r6, ip
    907c:	2400      	movs	r4, #0
    907e:	2700      	movs	r7, #0
    9080:	e685      	b.n	8d8e <__aeabi_dsub+0x182>
    9082:	001f      	movs	r7, r3
    9084:	0008      	movs	r0, r1
    9086:	3f20      	subs	r7, #32
    9088:	40f8      	lsrs	r0, r7
    908a:	0007      	movs	r7, r0
    908c:	2b20      	cmp	r3, #32
    908e:	d100      	bne.n	9092 <__aeabi_dsub+0x486>
    9090:	e08e      	b.n	91b0 <__aeabi_dsub+0x5a4>
    9092:	2040      	movs	r0, #64	; 0x40
    9094:	1ac3      	subs	r3, r0, r3
    9096:	4099      	lsls	r1, r3
    9098:	430a      	orrs	r2, r1
    909a:	1e51      	subs	r1, r2, #1
    909c:	418a      	sbcs	r2, r1
    909e:	2100      	movs	r1, #0
    90a0:	4317      	orrs	r7, r2
    90a2:	e692      	b.n	8dca <__aeabi_dsub+0x1be>
    90a4:	2e00      	cmp	r6, #0
    90a6:	d114      	bne.n	90d2 <__aeabi_dsub+0x4c6>
    90a8:	0026      	movs	r6, r4
    90aa:	4650      	mov	r0, sl
    90ac:	4306      	orrs	r6, r0
    90ae:	d062      	beq.n	9176 <__aeabi_dsub+0x56a>
    90b0:	43db      	mvns	r3, r3
    90b2:	2b00      	cmp	r3, #0
    90b4:	d15c      	bne.n	9170 <__aeabi_dsub+0x564>
    90b6:	1887      	adds	r7, r0, r2
    90b8:	4297      	cmp	r7, r2
    90ba:	4192      	sbcs	r2, r2
    90bc:	1864      	adds	r4, r4, r1
    90be:	4252      	negs	r2, r2
    90c0:	18a4      	adds	r4, r4, r2
    90c2:	4666      	mov	r6, ip
    90c4:	e687      	b.n	8dd6 <__aeabi_dsub+0x1ca>
    90c6:	4650      	mov	r0, sl
    90c8:	4320      	orrs	r0, r4
    90ca:	1e44      	subs	r4, r0, #1
    90cc:	41a0      	sbcs	r0, r4
    90ce:	2400      	movs	r4, #0
    90d0:	e760      	b.n	8f94 <__aeabi_dsub+0x388>
    90d2:	4e57      	ldr	r6, [pc, #348]	; (9230 <__aeabi_dsub+0x624>)
    90d4:	45b4      	cmp	ip, r6
    90d6:	d04e      	beq.n	9176 <__aeabi_dsub+0x56a>
    90d8:	2680      	movs	r6, #128	; 0x80
    90da:	0436      	lsls	r6, r6, #16
    90dc:	425b      	negs	r3, r3
    90de:	4334      	orrs	r4, r6
    90e0:	2b38      	cmp	r3, #56	; 0x38
    90e2:	dd00      	ble.n	90e6 <__aeabi_dsub+0x4da>
    90e4:	e07f      	b.n	91e6 <__aeabi_dsub+0x5da>
    90e6:	2b1f      	cmp	r3, #31
    90e8:	dd00      	ble.n	90ec <__aeabi_dsub+0x4e0>
    90ea:	e08b      	b.n	9204 <__aeabi_dsub+0x5f8>
    90ec:	2620      	movs	r6, #32
    90ee:	0027      	movs	r7, r4
    90f0:	4650      	mov	r0, sl
    90f2:	1af6      	subs	r6, r6, r3
    90f4:	40b7      	lsls	r7, r6
    90f6:	40d8      	lsrs	r0, r3
    90f8:	4307      	orrs	r7, r0
    90fa:	4650      	mov	r0, sl
    90fc:	40b0      	lsls	r0, r6
    90fe:	1e46      	subs	r6, r0, #1
    9100:	41b0      	sbcs	r0, r6
    9102:	4307      	orrs	r7, r0
    9104:	40dc      	lsrs	r4, r3
    9106:	18bf      	adds	r7, r7, r2
    9108:	e7d6      	b.n	90b8 <__aeabi_dsub+0x4ac>
    910a:	000d      	movs	r5, r1
    910c:	4315      	orrs	r5, r2
    910e:	d100      	bne.n	9112 <__aeabi_dsub+0x506>
    9110:	e602      	b.n	8d18 <__aeabi_dsub+0x10c>
    9112:	4650      	mov	r0, sl
    9114:	1a80      	subs	r0, r0, r2
    9116:	4582      	cmp	sl, r0
    9118:	41bf      	sbcs	r7, r7
    911a:	1a65      	subs	r5, r4, r1
    911c:	427f      	negs	r7, r7
    911e:	1bed      	subs	r5, r5, r7
    9120:	4684      	mov	ip, r0
    9122:	0228      	lsls	r0, r5, #8
    9124:	d400      	bmi.n	9128 <__aeabi_dsub+0x51c>
    9126:	e68d      	b.n	8e44 <__aeabi_dsub+0x238>
    9128:	4650      	mov	r0, sl
    912a:	1a17      	subs	r7, r2, r0
    912c:	42ba      	cmp	r2, r7
    912e:	4192      	sbcs	r2, r2
    9130:	1b0c      	subs	r4, r1, r4
    9132:	4252      	negs	r2, r2
    9134:	1aa4      	subs	r4, r4, r2
    9136:	4698      	mov	r8, r3
    9138:	e5ee      	b.n	8d18 <__aeabi_dsub+0x10c>
    913a:	000d      	movs	r5, r1
    913c:	4315      	orrs	r5, r2
    913e:	d100      	bne.n	9142 <__aeabi_dsub+0x536>
    9140:	e76b      	b.n	901a <__aeabi_dsub+0x40e>
    9142:	4650      	mov	r0, sl
    9144:	0767      	lsls	r7, r4, #29
    9146:	08c0      	lsrs	r0, r0, #3
    9148:	4307      	orrs	r7, r0
    914a:	2080      	movs	r0, #128	; 0x80
    914c:	08e4      	lsrs	r4, r4, #3
    914e:	0300      	lsls	r0, r0, #12
    9150:	4204      	tst	r4, r0
    9152:	d007      	beq.n	9164 <__aeabi_dsub+0x558>
    9154:	08cd      	lsrs	r5, r1, #3
    9156:	4205      	tst	r5, r0
    9158:	d104      	bne.n	9164 <__aeabi_dsub+0x558>
    915a:	002c      	movs	r4, r5
    915c:	4698      	mov	r8, r3
    915e:	08d7      	lsrs	r7, r2, #3
    9160:	0749      	lsls	r1, r1, #29
    9162:	430f      	orrs	r7, r1
    9164:	0f7b      	lsrs	r3, r7, #29
    9166:	00e4      	lsls	r4, r4, #3
    9168:	431c      	orrs	r4, r3
    916a:	00ff      	lsls	r7, r7, #3
    916c:	4e30      	ldr	r6, [pc, #192]	; (9230 <__aeabi_dsub+0x624>)
    916e:	e5d3      	b.n	8d18 <__aeabi_dsub+0x10c>
    9170:	4e2f      	ldr	r6, [pc, #188]	; (9230 <__aeabi_dsub+0x624>)
    9172:	45b4      	cmp	ip, r6
    9174:	d1b4      	bne.n	90e0 <__aeabi_dsub+0x4d4>
    9176:	000c      	movs	r4, r1
    9178:	0017      	movs	r7, r2
    917a:	4666      	mov	r6, ip
    917c:	e5cc      	b.n	8d18 <__aeabi_dsub+0x10c>
    917e:	2700      	movs	r7, #0
    9180:	2400      	movs	r4, #0
    9182:	e5e8      	b.n	8d56 <__aeabi_dsub+0x14a>
    9184:	2b00      	cmp	r3, #0
    9186:	d039      	beq.n	91fc <__aeabi_dsub+0x5f0>
    9188:	000b      	movs	r3, r1
    918a:	4313      	orrs	r3, r2
    918c:	d100      	bne.n	9190 <__aeabi_dsub+0x584>
    918e:	e744      	b.n	901a <__aeabi_dsub+0x40e>
    9190:	08c0      	lsrs	r0, r0, #3
    9192:	0767      	lsls	r7, r4, #29
    9194:	4307      	orrs	r7, r0
    9196:	2080      	movs	r0, #128	; 0x80
    9198:	08e4      	lsrs	r4, r4, #3
    919a:	0300      	lsls	r0, r0, #12
    919c:	4204      	tst	r4, r0
    919e:	d0e1      	beq.n	9164 <__aeabi_dsub+0x558>
    91a0:	08cb      	lsrs	r3, r1, #3
    91a2:	4203      	tst	r3, r0
    91a4:	d1de      	bne.n	9164 <__aeabi_dsub+0x558>
    91a6:	08d7      	lsrs	r7, r2, #3
    91a8:	0749      	lsls	r1, r1, #29
    91aa:	430f      	orrs	r7, r1
    91ac:	001c      	movs	r4, r3
    91ae:	e7d9      	b.n	9164 <__aeabi_dsub+0x558>
    91b0:	2100      	movs	r1, #0
    91b2:	e771      	b.n	9098 <__aeabi_dsub+0x48c>
    91b4:	2500      	movs	r5, #0
    91b6:	2700      	movs	r7, #0
    91b8:	e5e9      	b.n	8d8e <__aeabi_dsub+0x182>
    91ba:	002e      	movs	r6, r5
    91bc:	0027      	movs	r7, r4
    91be:	3e20      	subs	r6, #32
    91c0:	40f7      	lsrs	r7, r6
    91c2:	2d20      	cmp	r5, #32
    91c4:	d02f      	beq.n	9226 <__aeabi_dsub+0x61a>
    91c6:	2640      	movs	r6, #64	; 0x40
    91c8:	1b75      	subs	r5, r6, r5
    91ca:	40ac      	lsls	r4, r5
    91cc:	4650      	mov	r0, sl
    91ce:	4320      	orrs	r0, r4
    91d0:	1e44      	subs	r4, r0, #1
    91d2:	41a0      	sbcs	r0, r4
    91d4:	2400      	movs	r4, #0
    91d6:	4338      	orrs	r0, r7
    91d8:	e6dc      	b.n	8f94 <__aeabi_dsub+0x388>
    91da:	2480      	movs	r4, #128	; 0x80
    91dc:	2500      	movs	r5, #0
    91de:	0324      	lsls	r4, r4, #12
    91e0:	4e13      	ldr	r6, [pc, #76]	; (9230 <__aeabi_dsub+0x624>)
    91e2:	2700      	movs	r7, #0
    91e4:	e5d3      	b.n	8d8e <__aeabi_dsub+0x182>
    91e6:	4650      	mov	r0, sl
    91e8:	4320      	orrs	r0, r4
    91ea:	0007      	movs	r7, r0
    91ec:	1e78      	subs	r0, r7, #1
    91ee:	4187      	sbcs	r7, r0
    91f0:	2400      	movs	r4, #0
    91f2:	18bf      	adds	r7, r7, r2
    91f4:	e760      	b.n	90b8 <__aeabi_dsub+0x4ac>
    91f6:	000c      	movs	r4, r1
    91f8:	0017      	movs	r7, r2
    91fa:	e58d      	b.n	8d18 <__aeabi_dsub+0x10c>
    91fc:	000c      	movs	r4, r1
    91fe:	0017      	movs	r7, r2
    9200:	4e0b      	ldr	r6, [pc, #44]	; (9230 <__aeabi_dsub+0x624>)
    9202:	e589      	b.n	8d18 <__aeabi_dsub+0x10c>
    9204:	001e      	movs	r6, r3
    9206:	0027      	movs	r7, r4
    9208:	3e20      	subs	r6, #32
    920a:	40f7      	lsrs	r7, r6
    920c:	2b20      	cmp	r3, #32
    920e:	d00c      	beq.n	922a <__aeabi_dsub+0x61e>
    9210:	2640      	movs	r6, #64	; 0x40
    9212:	1af3      	subs	r3, r6, r3
    9214:	409c      	lsls	r4, r3
    9216:	4650      	mov	r0, sl
    9218:	4320      	orrs	r0, r4
    921a:	1e44      	subs	r4, r0, #1
    921c:	41a0      	sbcs	r0, r4
    921e:	4307      	orrs	r7, r0
    9220:	2400      	movs	r4, #0
    9222:	18bf      	adds	r7, r7, r2
    9224:	e748      	b.n	90b8 <__aeabi_dsub+0x4ac>
    9226:	2400      	movs	r4, #0
    9228:	e7d0      	b.n	91cc <__aeabi_dsub+0x5c0>
    922a:	2400      	movs	r4, #0
    922c:	e7f3      	b.n	9216 <__aeabi_dsub+0x60a>
    922e:	46c0      	nop			; (mov r8, r8)
    9230:	000007ff 	.word	0x000007ff
    9234:	ff7fffff 	.word	0xff7fffff

00009238 <__aeabi_d2iz>:
    9238:	b530      	push	{r4, r5, lr}
    923a:	4d13      	ldr	r5, [pc, #76]	; (9288 <__aeabi_d2iz+0x50>)
    923c:	030a      	lsls	r2, r1, #12
    923e:	004b      	lsls	r3, r1, #1
    9240:	0b12      	lsrs	r2, r2, #12
    9242:	0d5b      	lsrs	r3, r3, #21
    9244:	0fc9      	lsrs	r1, r1, #31
    9246:	2400      	movs	r4, #0
    9248:	42ab      	cmp	r3, r5
    924a:	dd10      	ble.n	926e <__aeabi_d2iz+0x36>
    924c:	4c0f      	ldr	r4, [pc, #60]	; (928c <__aeabi_d2iz+0x54>)
    924e:	42a3      	cmp	r3, r4
    9250:	dc0f      	bgt.n	9272 <__aeabi_d2iz+0x3a>
    9252:	2480      	movs	r4, #128	; 0x80
    9254:	4d0e      	ldr	r5, [pc, #56]	; (9290 <__aeabi_d2iz+0x58>)
    9256:	0364      	lsls	r4, r4, #13
    9258:	4322      	orrs	r2, r4
    925a:	1aed      	subs	r5, r5, r3
    925c:	2d1f      	cmp	r5, #31
    925e:	dd0b      	ble.n	9278 <__aeabi_d2iz+0x40>
    9260:	480c      	ldr	r0, [pc, #48]	; (9294 <__aeabi_d2iz+0x5c>)
    9262:	1ac3      	subs	r3, r0, r3
    9264:	40da      	lsrs	r2, r3
    9266:	4254      	negs	r4, r2
    9268:	2900      	cmp	r1, #0
    926a:	d100      	bne.n	926e <__aeabi_d2iz+0x36>
    926c:	0014      	movs	r4, r2
    926e:	0020      	movs	r0, r4
    9270:	bd30      	pop	{r4, r5, pc}
    9272:	4b09      	ldr	r3, [pc, #36]	; (9298 <__aeabi_d2iz+0x60>)
    9274:	18cc      	adds	r4, r1, r3
    9276:	e7fa      	b.n	926e <__aeabi_d2iz+0x36>
    9278:	4c08      	ldr	r4, [pc, #32]	; (929c <__aeabi_d2iz+0x64>)
    927a:	40e8      	lsrs	r0, r5
    927c:	46a4      	mov	ip, r4
    927e:	4463      	add	r3, ip
    9280:	409a      	lsls	r2, r3
    9282:	4302      	orrs	r2, r0
    9284:	e7ef      	b.n	9266 <__aeabi_d2iz+0x2e>
    9286:	46c0      	nop			; (mov r8, r8)
    9288:	000003fe 	.word	0x000003fe
    928c:	0000041d 	.word	0x0000041d
    9290:	00000433 	.word	0x00000433
    9294:	00000413 	.word	0x00000413
    9298:	7fffffff 	.word	0x7fffffff
    929c:	fffffbed 	.word	0xfffffbed

000092a0 <__aeabi_ui2d>:
    92a0:	b510      	push	{r4, lr}
    92a2:	1e04      	subs	r4, r0, #0
    92a4:	d028      	beq.n	92f8 <__aeabi_ui2d+0x58>
    92a6:	f000 f885 	bl	93b4 <__clzsi2>
    92aa:	4b15      	ldr	r3, [pc, #84]	; (9300 <__aeabi_ui2d+0x60>)
    92ac:	4a15      	ldr	r2, [pc, #84]	; (9304 <__aeabi_ui2d+0x64>)
    92ae:	1a1b      	subs	r3, r3, r0
    92b0:	1ad2      	subs	r2, r2, r3
    92b2:	2a1f      	cmp	r2, #31
    92b4:	dd15      	ble.n	92e2 <__aeabi_ui2d+0x42>
    92b6:	4a14      	ldr	r2, [pc, #80]	; (9308 <__aeabi_ui2d+0x68>)
    92b8:	1ad2      	subs	r2, r2, r3
    92ba:	4094      	lsls	r4, r2
    92bc:	2200      	movs	r2, #0
    92be:	0324      	lsls	r4, r4, #12
    92c0:	055b      	lsls	r3, r3, #21
    92c2:	0b24      	lsrs	r4, r4, #12
    92c4:	0d5b      	lsrs	r3, r3, #21
    92c6:	2100      	movs	r1, #0
    92c8:	0010      	movs	r0, r2
    92ca:	0324      	lsls	r4, r4, #12
    92cc:	0d0a      	lsrs	r2, r1, #20
    92ce:	0b24      	lsrs	r4, r4, #12
    92d0:	0512      	lsls	r2, r2, #20
    92d2:	4322      	orrs	r2, r4
    92d4:	4c0d      	ldr	r4, [pc, #52]	; (930c <__aeabi_ui2d+0x6c>)
    92d6:	051b      	lsls	r3, r3, #20
    92d8:	4022      	ands	r2, r4
    92da:	4313      	orrs	r3, r2
    92dc:	005b      	lsls	r3, r3, #1
    92de:	0859      	lsrs	r1, r3, #1
    92e0:	bd10      	pop	{r4, pc}
    92e2:	0021      	movs	r1, r4
    92e4:	4091      	lsls	r1, r2
    92e6:	000a      	movs	r2, r1
    92e8:	210b      	movs	r1, #11
    92ea:	1a08      	subs	r0, r1, r0
    92ec:	40c4      	lsrs	r4, r0
    92ee:	055b      	lsls	r3, r3, #21
    92f0:	0324      	lsls	r4, r4, #12
    92f2:	0b24      	lsrs	r4, r4, #12
    92f4:	0d5b      	lsrs	r3, r3, #21
    92f6:	e7e6      	b.n	92c6 <__aeabi_ui2d+0x26>
    92f8:	2300      	movs	r3, #0
    92fa:	2400      	movs	r4, #0
    92fc:	2200      	movs	r2, #0
    92fe:	e7e2      	b.n	92c6 <__aeabi_ui2d+0x26>
    9300:	0000041e 	.word	0x0000041e
    9304:	00000433 	.word	0x00000433
    9308:	00000413 	.word	0x00000413
    930c:	800fffff 	.word	0x800fffff

00009310 <__aeabi_f2d>:
    9310:	0041      	lsls	r1, r0, #1
    9312:	0e09      	lsrs	r1, r1, #24
    9314:	1c4b      	adds	r3, r1, #1
    9316:	b570      	push	{r4, r5, r6, lr}
    9318:	b2db      	uxtb	r3, r3
    931a:	0246      	lsls	r6, r0, #9
    931c:	0a75      	lsrs	r5, r6, #9
    931e:	0fc4      	lsrs	r4, r0, #31
    9320:	2b01      	cmp	r3, #1
    9322:	dd14      	ble.n	934e <__aeabi_f2d+0x3e>
    9324:	23e0      	movs	r3, #224	; 0xe0
    9326:	009b      	lsls	r3, r3, #2
    9328:	076d      	lsls	r5, r5, #29
    932a:	0b36      	lsrs	r6, r6, #12
    932c:	18cb      	adds	r3, r1, r3
    932e:	2100      	movs	r1, #0
    9330:	0d0a      	lsrs	r2, r1, #20
    9332:	0028      	movs	r0, r5
    9334:	0512      	lsls	r2, r2, #20
    9336:	4d1c      	ldr	r5, [pc, #112]	; (93a8 <__aeabi_f2d+0x98>)
    9338:	4332      	orrs	r2, r6
    933a:	055b      	lsls	r3, r3, #21
    933c:	402a      	ands	r2, r5
    933e:	085b      	lsrs	r3, r3, #1
    9340:	4313      	orrs	r3, r2
    9342:	005b      	lsls	r3, r3, #1
    9344:	07e4      	lsls	r4, r4, #31
    9346:	085b      	lsrs	r3, r3, #1
    9348:	4323      	orrs	r3, r4
    934a:	0019      	movs	r1, r3
    934c:	bd70      	pop	{r4, r5, r6, pc}
    934e:	2900      	cmp	r1, #0
    9350:	d114      	bne.n	937c <__aeabi_f2d+0x6c>
    9352:	2d00      	cmp	r5, #0
    9354:	d01e      	beq.n	9394 <__aeabi_f2d+0x84>
    9356:	0028      	movs	r0, r5
    9358:	f000 f82c 	bl	93b4 <__clzsi2>
    935c:	280a      	cmp	r0, #10
    935e:	dc1c      	bgt.n	939a <__aeabi_f2d+0x8a>
    9360:	230b      	movs	r3, #11
    9362:	002a      	movs	r2, r5
    9364:	1a1b      	subs	r3, r3, r0
    9366:	40da      	lsrs	r2, r3
    9368:	0003      	movs	r3, r0
    936a:	3315      	adds	r3, #21
    936c:	409d      	lsls	r5, r3
    936e:	4b0f      	ldr	r3, [pc, #60]	; (93ac <__aeabi_f2d+0x9c>)
    9370:	0312      	lsls	r2, r2, #12
    9372:	1a1b      	subs	r3, r3, r0
    9374:	055b      	lsls	r3, r3, #21
    9376:	0b16      	lsrs	r6, r2, #12
    9378:	0d5b      	lsrs	r3, r3, #21
    937a:	e7d8      	b.n	932e <__aeabi_f2d+0x1e>
    937c:	2d00      	cmp	r5, #0
    937e:	d006      	beq.n	938e <__aeabi_f2d+0x7e>
    9380:	0b32      	lsrs	r2, r6, #12
    9382:	2680      	movs	r6, #128	; 0x80
    9384:	0336      	lsls	r6, r6, #12
    9386:	076d      	lsls	r5, r5, #29
    9388:	4316      	orrs	r6, r2
    938a:	4b09      	ldr	r3, [pc, #36]	; (93b0 <__aeabi_f2d+0xa0>)
    938c:	e7cf      	b.n	932e <__aeabi_f2d+0x1e>
    938e:	4b08      	ldr	r3, [pc, #32]	; (93b0 <__aeabi_f2d+0xa0>)
    9390:	2600      	movs	r6, #0
    9392:	e7cc      	b.n	932e <__aeabi_f2d+0x1e>
    9394:	2300      	movs	r3, #0
    9396:	2600      	movs	r6, #0
    9398:	e7c9      	b.n	932e <__aeabi_f2d+0x1e>
    939a:	0003      	movs	r3, r0
    939c:	002a      	movs	r2, r5
    939e:	3b0b      	subs	r3, #11
    93a0:	409a      	lsls	r2, r3
    93a2:	2500      	movs	r5, #0
    93a4:	e7e3      	b.n	936e <__aeabi_f2d+0x5e>
    93a6:	46c0      	nop			; (mov r8, r8)
    93a8:	800fffff 	.word	0x800fffff
    93ac:	00000389 	.word	0x00000389
    93b0:	000007ff 	.word	0x000007ff

000093b4 <__clzsi2>:
    93b4:	211c      	movs	r1, #28
    93b6:	2301      	movs	r3, #1
    93b8:	041b      	lsls	r3, r3, #16
    93ba:	4298      	cmp	r0, r3
    93bc:	d301      	bcc.n	93c2 <__clzsi2+0xe>
    93be:	0c00      	lsrs	r0, r0, #16
    93c0:	3910      	subs	r1, #16
    93c2:	0a1b      	lsrs	r3, r3, #8
    93c4:	4298      	cmp	r0, r3
    93c6:	d301      	bcc.n	93cc <__clzsi2+0x18>
    93c8:	0a00      	lsrs	r0, r0, #8
    93ca:	3908      	subs	r1, #8
    93cc:	091b      	lsrs	r3, r3, #4
    93ce:	4298      	cmp	r0, r3
    93d0:	d301      	bcc.n	93d6 <__clzsi2+0x22>
    93d2:	0900      	lsrs	r0, r0, #4
    93d4:	3904      	subs	r1, #4
    93d6:	a202      	add	r2, pc, #8	; (adr r2, 93e0 <__clzsi2+0x2c>)
    93d8:	5c10      	ldrb	r0, [r2, r0]
    93da:	1840      	adds	r0, r0, r1
    93dc:	4770      	bx	lr
    93de:	46c0      	nop			; (mov r8, r8)
    93e0:	02020304 	.word	0x02020304
    93e4:	01010101 	.word	0x01010101
	...

000093f0 <__libc_init_array>:
    93f0:	b570      	push	{r4, r5, r6, lr}
    93f2:	2600      	movs	r6, #0
    93f4:	4d0c      	ldr	r5, [pc, #48]	; (9428 <__libc_init_array+0x38>)
    93f6:	4c0d      	ldr	r4, [pc, #52]	; (942c <__libc_init_array+0x3c>)
    93f8:	1b64      	subs	r4, r4, r5
    93fa:	10a4      	asrs	r4, r4, #2
    93fc:	42a6      	cmp	r6, r4
    93fe:	d109      	bne.n	9414 <__libc_init_array+0x24>
    9400:	2600      	movs	r6, #0
    9402:	f002 fc9d 	bl	bd40 <_init>
    9406:	4d0a      	ldr	r5, [pc, #40]	; (9430 <__libc_init_array+0x40>)
    9408:	4c0a      	ldr	r4, [pc, #40]	; (9434 <__libc_init_array+0x44>)
    940a:	1b64      	subs	r4, r4, r5
    940c:	10a4      	asrs	r4, r4, #2
    940e:	42a6      	cmp	r6, r4
    9410:	d105      	bne.n	941e <__libc_init_array+0x2e>
    9412:	bd70      	pop	{r4, r5, r6, pc}
    9414:	00b3      	lsls	r3, r6, #2
    9416:	58eb      	ldr	r3, [r5, r3]
    9418:	4798      	blx	r3
    941a:	3601      	adds	r6, #1
    941c:	e7ee      	b.n	93fc <__libc_init_array+0xc>
    941e:	00b3      	lsls	r3, r6, #2
    9420:	58eb      	ldr	r3, [r5, r3]
    9422:	4798      	blx	r3
    9424:	3601      	adds	r6, #1
    9426:	e7f2      	b.n	940e <__libc_init_array+0x1e>
    9428:	0000bd4c 	.word	0x0000bd4c
    942c:	0000bd4c 	.word	0x0000bd4c
    9430:	0000bd4c 	.word	0x0000bd4c
    9434:	0000bd50 	.word	0x0000bd50

00009438 <malloc>:
    9438:	b510      	push	{r4, lr}
    943a:	4b03      	ldr	r3, [pc, #12]	; (9448 <malloc+0x10>)
    943c:	0001      	movs	r1, r0
    943e:	6818      	ldr	r0, [r3, #0]
    9440:	f000 f872 	bl	9528 <_malloc_r>
    9444:	bd10      	pop	{r4, pc}
    9446:	46c0      	nop			; (mov r8, r8)
    9448:	2000000c 	.word	0x2000000c

0000944c <memcpy>:
    944c:	2300      	movs	r3, #0
    944e:	b510      	push	{r4, lr}
    9450:	429a      	cmp	r2, r3
    9452:	d100      	bne.n	9456 <memcpy+0xa>
    9454:	bd10      	pop	{r4, pc}
    9456:	5ccc      	ldrb	r4, [r1, r3]
    9458:	54c4      	strb	r4, [r0, r3]
    945a:	3301      	adds	r3, #1
    945c:	e7f8      	b.n	9450 <memcpy+0x4>

0000945e <memmove>:
    945e:	b510      	push	{r4, lr}
    9460:	4288      	cmp	r0, r1
    9462:	d902      	bls.n	946a <memmove+0xc>
    9464:	188b      	adds	r3, r1, r2
    9466:	4298      	cmp	r0, r3
    9468:	d308      	bcc.n	947c <memmove+0x1e>
    946a:	2300      	movs	r3, #0
    946c:	429a      	cmp	r2, r3
    946e:	d007      	beq.n	9480 <memmove+0x22>
    9470:	5ccc      	ldrb	r4, [r1, r3]
    9472:	54c4      	strb	r4, [r0, r3]
    9474:	3301      	adds	r3, #1
    9476:	e7f9      	b.n	946c <memmove+0xe>
    9478:	5c8b      	ldrb	r3, [r1, r2]
    947a:	5483      	strb	r3, [r0, r2]
    947c:	3a01      	subs	r2, #1
    947e:	d2fb      	bcs.n	9478 <memmove+0x1a>
    9480:	bd10      	pop	{r4, pc}

00009482 <memset>:
    9482:	0003      	movs	r3, r0
    9484:	1882      	adds	r2, r0, r2
    9486:	4293      	cmp	r3, r2
    9488:	d100      	bne.n	948c <memset+0xa>
    948a:	4770      	bx	lr
    948c:	7019      	strb	r1, [r3, #0]
    948e:	3301      	adds	r3, #1
    9490:	e7f9      	b.n	9486 <memset+0x4>
	...

00009494 <_free_r>:
    9494:	b570      	push	{r4, r5, r6, lr}
    9496:	0005      	movs	r5, r0
    9498:	2900      	cmp	r1, #0
    949a:	d010      	beq.n	94be <_free_r+0x2a>
    949c:	1f0c      	subs	r4, r1, #4
    949e:	6823      	ldr	r3, [r4, #0]
    94a0:	2b00      	cmp	r3, #0
    94a2:	da00      	bge.n	94a6 <_free_r+0x12>
    94a4:	18e4      	adds	r4, r4, r3
    94a6:	0028      	movs	r0, r5
    94a8:	f000 fd08 	bl	9ebc <__malloc_lock>
    94ac:	4a1d      	ldr	r2, [pc, #116]	; (9524 <_free_r+0x90>)
    94ae:	6813      	ldr	r3, [r2, #0]
    94b0:	2b00      	cmp	r3, #0
    94b2:	d105      	bne.n	94c0 <_free_r+0x2c>
    94b4:	6063      	str	r3, [r4, #4]
    94b6:	6014      	str	r4, [r2, #0]
    94b8:	0028      	movs	r0, r5
    94ba:	f000 fd00 	bl	9ebe <__malloc_unlock>
    94be:	bd70      	pop	{r4, r5, r6, pc}
    94c0:	42a3      	cmp	r3, r4
    94c2:	d909      	bls.n	94d8 <_free_r+0x44>
    94c4:	6821      	ldr	r1, [r4, #0]
    94c6:	1860      	adds	r0, r4, r1
    94c8:	4283      	cmp	r3, r0
    94ca:	d1f3      	bne.n	94b4 <_free_r+0x20>
    94cc:	6818      	ldr	r0, [r3, #0]
    94ce:	685b      	ldr	r3, [r3, #4]
    94d0:	1841      	adds	r1, r0, r1
    94d2:	6021      	str	r1, [r4, #0]
    94d4:	e7ee      	b.n	94b4 <_free_r+0x20>
    94d6:	0013      	movs	r3, r2
    94d8:	685a      	ldr	r2, [r3, #4]
    94da:	2a00      	cmp	r2, #0
    94dc:	d001      	beq.n	94e2 <_free_r+0x4e>
    94de:	42a2      	cmp	r2, r4
    94e0:	d9f9      	bls.n	94d6 <_free_r+0x42>
    94e2:	6819      	ldr	r1, [r3, #0]
    94e4:	1858      	adds	r0, r3, r1
    94e6:	42a0      	cmp	r0, r4
    94e8:	d10b      	bne.n	9502 <_free_r+0x6e>
    94ea:	6820      	ldr	r0, [r4, #0]
    94ec:	1809      	adds	r1, r1, r0
    94ee:	1858      	adds	r0, r3, r1
    94f0:	6019      	str	r1, [r3, #0]
    94f2:	4282      	cmp	r2, r0
    94f4:	d1e0      	bne.n	94b8 <_free_r+0x24>
    94f6:	6810      	ldr	r0, [r2, #0]
    94f8:	6852      	ldr	r2, [r2, #4]
    94fa:	1841      	adds	r1, r0, r1
    94fc:	6019      	str	r1, [r3, #0]
    94fe:	605a      	str	r2, [r3, #4]
    9500:	e7da      	b.n	94b8 <_free_r+0x24>
    9502:	42a0      	cmp	r0, r4
    9504:	d902      	bls.n	950c <_free_r+0x78>
    9506:	230c      	movs	r3, #12
    9508:	602b      	str	r3, [r5, #0]
    950a:	e7d5      	b.n	94b8 <_free_r+0x24>
    950c:	6821      	ldr	r1, [r4, #0]
    950e:	1860      	adds	r0, r4, r1
    9510:	4282      	cmp	r2, r0
    9512:	d103      	bne.n	951c <_free_r+0x88>
    9514:	6810      	ldr	r0, [r2, #0]
    9516:	6852      	ldr	r2, [r2, #4]
    9518:	1841      	adds	r1, r0, r1
    951a:	6021      	str	r1, [r4, #0]
    951c:	6062      	str	r2, [r4, #4]
    951e:	605c      	str	r4, [r3, #4]
    9520:	e7ca      	b.n	94b8 <_free_r+0x24>
    9522:	46c0      	nop			; (mov r8, r8)
    9524:	20000270 	.word	0x20000270

00009528 <_malloc_r>:
    9528:	2303      	movs	r3, #3
    952a:	b570      	push	{r4, r5, r6, lr}
    952c:	1ccd      	adds	r5, r1, #3
    952e:	439d      	bics	r5, r3
    9530:	3508      	adds	r5, #8
    9532:	0006      	movs	r6, r0
    9534:	2d0c      	cmp	r5, #12
    9536:	d21e      	bcs.n	9576 <_malloc_r+0x4e>
    9538:	250c      	movs	r5, #12
    953a:	42a9      	cmp	r1, r5
    953c:	d81d      	bhi.n	957a <_malloc_r+0x52>
    953e:	0030      	movs	r0, r6
    9540:	f000 fcbc 	bl	9ebc <__malloc_lock>
    9544:	4a25      	ldr	r2, [pc, #148]	; (95dc <_malloc_r+0xb4>)
    9546:	6814      	ldr	r4, [r2, #0]
    9548:	0021      	movs	r1, r4
    954a:	2900      	cmp	r1, #0
    954c:	d119      	bne.n	9582 <_malloc_r+0x5a>
    954e:	4c24      	ldr	r4, [pc, #144]	; (95e0 <_malloc_r+0xb8>)
    9550:	6823      	ldr	r3, [r4, #0]
    9552:	2b00      	cmp	r3, #0
    9554:	d103      	bne.n	955e <_malloc_r+0x36>
    9556:	0030      	movs	r0, r6
    9558:	f000 f8dc 	bl	9714 <_sbrk_r>
    955c:	6020      	str	r0, [r4, #0]
    955e:	0029      	movs	r1, r5
    9560:	0030      	movs	r0, r6
    9562:	f000 f8d7 	bl	9714 <_sbrk_r>
    9566:	1c43      	adds	r3, r0, #1
    9568:	d12c      	bne.n	95c4 <_malloc_r+0x9c>
    956a:	230c      	movs	r3, #12
    956c:	0030      	movs	r0, r6
    956e:	6033      	str	r3, [r6, #0]
    9570:	f000 fca5 	bl	9ebe <__malloc_unlock>
    9574:	e003      	b.n	957e <_malloc_r+0x56>
    9576:	2d00      	cmp	r5, #0
    9578:	dadf      	bge.n	953a <_malloc_r+0x12>
    957a:	230c      	movs	r3, #12
    957c:	6033      	str	r3, [r6, #0]
    957e:	2000      	movs	r0, #0
    9580:	bd70      	pop	{r4, r5, r6, pc}
    9582:	680b      	ldr	r3, [r1, #0]
    9584:	1b5b      	subs	r3, r3, r5
    9586:	d41a      	bmi.n	95be <_malloc_r+0x96>
    9588:	2b0b      	cmp	r3, #11
    958a:	d903      	bls.n	9594 <_malloc_r+0x6c>
    958c:	600b      	str	r3, [r1, #0]
    958e:	18cc      	adds	r4, r1, r3
    9590:	6025      	str	r5, [r4, #0]
    9592:	e003      	b.n	959c <_malloc_r+0x74>
    9594:	428c      	cmp	r4, r1
    9596:	d10e      	bne.n	95b6 <_malloc_r+0x8e>
    9598:	6863      	ldr	r3, [r4, #4]
    959a:	6013      	str	r3, [r2, #0]
    959c:	0030      	movs	r0, r6
    959e:	f000 fc8e 	bl	9ebe <__malloc_unlock>
    95a2:	0020      	movs	r0, r4
    95a4:	2207      	movs	r2, #7
    95a6:	300b      	adds	r0, #11
    95a8:	1d23      	adds	r3, r4, #4
    95aa:	4390      	bics	r0, r2
    95ac:	1ac3      	subs	r3, r0, r3
    95ae:	d0e7      	beq.n	9580 <_malloc_r+0x58>
    95b0:	425a      	negs	r2, r3
    95b2:	50e2      	str	r2, [r4, r3]
    95b4:	e7e4      	b.n	9580 <_malloc_r+0x58>
    95b6:	684b      	ldr	r3, [r1, #4]
    95b8:	6063      	str	r3, [r4, #4]
    95ba:	000c      	movs	r4, r1
    95bc:	e7ee      	b.n	959c <_malloc_r+0x74>
    95be:	000c      	movs	r4, r1
    95c0:	6849      	ldr	r1, [r1, #4]
    95c2:	e7c2      	b.n	954a <_malloc_r+0x22>
    95c4:	2303      	movs	r3, #3
    95c6:	1cc4      	adds	r4, r0, #3
    95c8:	439c      	bics	r4, r3
    95ca:	42a0      	cmp	r0, r4
    95cc:	d0e0      	beq.n	9590 <_malloc_r+0x68>
    95ce:	1a21      	subs	r1, r4, r0
    95d0:	0030      	movs	r0, r6
    95d2:	f000 f89f 	bl	9714 <_sbrk_r>
    95d6:	1c43      	adds	r3, r0, #1
    95d8:	d1da      	bne.n	9590 <_malloc_r+0x68>
    95da:	e7c6      	b.n	956a <_malloc_r+0x42>
    95dc:	20000270 	.word	0x20000270
    95e0:	20000274 	.word	0x20000274

000095e4 <iprintf>:
    95e4:	b40f      	push	{r0, r1, r2, r3}
    95e6:	4b0b      	ldr	r3, [pc, #44]	; (9614 <iprintf+0x30>)
    95e8:	b513      	push	{r0, r1, r4, lr}
    95ea:	681c      	ldr	r4, [r3, #0]
    95ec:	2c00      	cmp	r4, #0
    95ee:	d005      	beq.n	95fc <iprintf+0x18>
    95f0:	69a3      	ldr	r3, [r4, #24]
    95f2:	2b00      	cmp	r3, #0
    95f4:	d102      	bne.n	95fc <iprintf+0x18>
    95f6:	0020      	movs	r0, r4
    95f8:	f000 fb64 	bl	9cc4 <__sinit>
    95fc:	ab05      	add	r3, sp, #20
    95fe:	9a04      	ldr	r2, [sp, #16]
    9600:	68a1      	ldr	r1, [r4, #8]
    9602:	0020      	movs	r0, r4
    9604:	9301      	str	r3, [sp, #4]
    9606:	f000 fde9 	bl	a1dc <_vfiprintf_r>
    960a:	bc16      	pop	{r1, r2, r4}
    960c:	bc08      	pop	{r3}
    960e:	b004      	add	sp, #16
    9610:	4718      	bx	r3
    9612:	46c0      	nop			; (mov r8, r8)
    9614:	2000000c 	.word	0x2000000c

00009618 <putchar>:
    9618:	4b08      	ldr	r3, [pc, #32]	; (963c <putchar+0x24>)
    961a:	b570      	push	{r4, r5, r6, lr}
    961c:	681c      	ldr	r4, [r3, #0]
    961e:	0005      	movs	r5, r0
    9620:	2c00      	cmp	r4, #0
    9622:	d005      	beq.n	9630 <putchar+0x18>
    9624:	69a3      	ldr	r3, [r4, #24]
    9626:	2b00      	cmp	r3, #0
    9628:	d102      	bne.n	9630 <putchar+0x18>
    962a:	0020      	movs	r0, r4
    962c:	f000 fb4a 	bl	9cc4 <__sinit>
    9630:	0029      	movs	r1, r5
    9632:	68a2      	ldr	r2, [r4, #8]
    9634:	0020      	movs	r0, r4
    9636:	f001 f875 	bl	a724 <_putc_r>
    963a:	bd70      	pop	{r4, r5, r6, pc}
    963c:	2000000c 	.word	0x2000000c

00009640 <_puts_r>:
    9640:	b570      	push	{r4, r5, r6, lr}
    9642:	0005      	movs	r5, r0
    9644:	000e      	movs	r6, r1
    9646:	2800      	cmp	r0, #0
    9648:	d004      	beq.n	9654 <_puts_r+0x14>
    964a:	6983      	ldr	r3, [r0, #24]
    964c:	2b00      	cmp	r3, #0
    964e:	d101      	bne.n	9654 <_puts_r+0x14>
    9650:	f000 fb38 	bl	9cc4 <__sinit>
    9654:	69ab      	ldr	r3, [r5, #24]
    9656:	68ac      	ldr	r4, [r5, #8]
    9658:	2b00      	cmp	r3, #0
    965a:	d102      	bne.n	9662 <_puts_r+0x22>
    965c:	0028      	movs	r0, r5
    965e:	f000 fb31 	bl	9cc4 <__sinit>
    9662:	4b24      	ldr	r3, [pc, #144]	; (96f4 <_puts_r+0xb4>)
    9664:	429c      	cmp	r4, r3
    9666:	d10f      	bne.n	9688 <_puts_r+0x48>
    9668:	686c      	ldr	r4, [r5, #4]
    966a:	89a3      	ldrh	r3, [r4, #12]
    966c:	071b      	lsls	r3, r3, #28
    966e:	d502      	bpl.n	9676 <_puts_r+0x36>
    9670:	6923      	ldr	r3, [r4, #16]
    9672:	2b00      	cmp	r3, #0
    9674:	d120      	bne.n	96b8 <_puts_r+0x78>
    9676:	0021      	movs	r1, r4
    9678:	0028      	movs	r0, r5
    967a:	f000 f9b5 	bl	99e8 <__swsetup_r>
    967e:	2800      	cmp	r0, #0
    9680:	d01a      	beq.n	96b8 <_puts_r+0x78>
    9682:	2001      	movs	r0, #1
    9684:	4240      	negs	r0, r0
    9686:	bd70      	pop	{r4, r5, r6, pc}
    9688:	4b1b      	ldr	r3, [pc, #108]	; (96f8 <_puts_r+0xb8>)
    968a:	429c      	cmp	r4, r3
    968c:	d101      	bne.n	9692 <_puts_r+0x52>
    968e:	68ac      	ldr	r4, [r5, #8]
    9690:	e7eb      	b.n	966a <_puts_r+0x2a>
    9692:	4b1a      	ldr	r3, [pc, #104]	; (96fc <_puts_r+0xbc>)
    9694:	429c      	cmp	r4, r3
    9696:	d1e8      	bne.n	966a <_puts_r+0x2a>
    9698:	68ec      	ldr	r4, [r5, #12]
    969a:	e7e6      	b.n	966a <_puts_r+0x2a>
    969c:	3b01      	subs	r3, #1
    969e:	3601      	adds	r6, #1
    96a0:	60a3      	str	r3, [r4, #8]
    96a2:	2b00      	cmp	r3, #0
    96a4:	da04      	bge.n	96b0 <_puts_r+0x70>
    96a6:	69a2      	ldr	r2, [r4, #24]
    96a8:	4293      	cmp	r3, r2
    96aa:	db16      	blt.n	96da <_puts_r+0x9a>
    96ac:	290a      	cmp	r1, #10
    96ae:	d014      	beq.n	96da <_puts_r+0x9a>
    96b0:	6823      	ldr	r3, [r4, #0]
    96b2:	1c5a      	adds	r2, r3, #1
    96b4:	6022      	str	r2, [r4, #0]
    96b6:	7019      	strb	r1, [r3, #0]
    96b8:	7831      	ldrb	r1, [r6, #0]
    96ba:	68a3      	ldr	r3, [r4, #8]
    96bc:	2900      	cmp	r1, #0
    96be:	d1ed      	bne.n	969c <_puts_r+0x5c>
    96c0:	3b01      	subs	r3, #1
    96c2:	60a3      	str	r3, [r4, #8]
    96c4:	2b00      	cmp	r3, #0
    96c6:	da0f      	bge.n	96e8 <_puts_r+0xa8>
    96c8:	0022      	movs	r2, r4
    96ca:	310a      	adds	r1, #10
    96cc:	0028      	movs	r0, r5
    96ce:	f000 f935 	bl	993c <__swbuf_r>
    96d2:	1c43      	adds	r3, r0, #1
    96d4:	d0d5      	beq.n	9682 <_puts_r+0x42>
    96d6:	200a      	movs	r0, #10
    96d8:	e7d5      	b.n	9686 <_puts_r+0x46>
    96da:	0022      	movs	r2, r4
    96dc:	0028      	movs	r0, r5
    96de:	f000 f92d 	bl	993c <__swbuf_r>
    96e2:	1c43      	adds	r3, r0, #1
    96e4:	d1e8      	bne.n	96b8 <_puts_r+0x78>
    96e6:	e7cc      	b.n	9682 <_puts_r+0x42>
    96e8:	200a      	movs	r0, #10
    96ea:	6823      	ldr	r3, [r4, #0]
    96ec:	1c5a      	adds	r2, r3, #1
    96ee:	6022      	str	r2, [r4, #0]
    96f0:	7018      	strb	r0, [r3, #0]
    96f2:	e7c8      	b.n	9686 <_puts_r+0x46>
    96f4:	0000bccc 	.word	0x0000bccc
    96f8:	0000bcec 	.word	0x0000bcec
    96fc:	0000bcac 	.word	0x0000bcac

00009700 <puts>:
    9700:	b510      	push	{r4, lr}
    9702:	4b03      	ldr	r3, [pc, #12]	; (9710 <puts+0x10>)
    9704:	0001      	movs	r1, r0
    9706:	6818      	ldr	r0, [r3, #0]
    9708:	f7ff ff9a 	bl	9640 <_puts_r>
    970c:	bd10      	pop	{r4, pc}
    970e:	46c0      	nop			; (mov r8, r8)
    9710:	2000000c 	.word	0x2000000c

00009714 <_sbrk_r>:
    9714:	2300      	movs	r3, #0
    9716:	b570      	push	{r4, r5, r6, lr}
    9718:	4c06      	ldr	r4, [pc, #24]	; (9734 <_sbrk_r+0x20>)
    971a:	0005      	movs	r5, r0
    971c:	0008      	movs	r0, r1
    971e:	6023      	str	r3, [r4, #0]
    9720:	f7fc fbd4 	bl	5ecc <_sbrk>
    9724:	1c43      	adds	r3, r0, #1
    9726:	d103      	bne.n	9730 <_sbrk_r+0x1c>
    9728:	6823      	ldr	r3, [r4, #0]
    972a:	2b00      	cmp	r3, #0
    972c:	d000      	beq.n	9730 <_sbrk_r+0x1c>
    972e:	602b      	str	r3, [r5, #0]
    9730:	bd70      	pop	{r4, r5, r6, pc}
    9732:	46c0      	nop			; (mov r8, r8)
    9734:	200004cc 	.word	0x200004cc

00009738 <setbuf>:
    9738:	424a      	negs	r2, r1
    973a:	414a      	adcs	r2, r1
    973c:	2380      	movs	r3, #128	; 0x80
    973e:	b510      	push	{r4, lr}
    9740:	0052      	lsls	r2, r2, #1
    9742:	00db      	lsls	r3, r3, #3
    9744:	f000 f802 	bl	974c <setvbuf>
    9748:	bd10      	pop	{r4, pc}
	...

0000974c <setvbuf>:
    974c:	b5f0      	push	{r4, r5, r6, r7, lr}
    974e:	001d      	movs	r5, r3
    9750:	4b4f      	ldr	r3, [pc, #316]	; (9890 <setvbuf+0x144>)
    9752:	b085      	sub	sp, #20
    9754:	681e      	ldr	r6, [r3, #0]
    9756:	0004      	movs	r4, r0
    9758:	000f      	movs	r7, r1
    975a:	9200      	str	r2, [sp, #0]
    975c:	2e00      	cmp	r6, #0
    975e:	d005      	beq.n	976c <setvbuf+0x20>
    9760:	69b3      	ldr	r3, [r6, #24]
    9762:	2b00      	cmp	r3, #0
    9764:	d102      	bne.n	976c <setvbuf+0x20>
    9766:	0030      	movs	r0, r6
    9768:	f000 faac 	bl	9cc4 <__sinit>
    976c:	4b49      	ldr	r3, [pc, #292]	; (9894 <setvbuf+0x148>)
    976e:	429c      	cmp	r4, r3
    9770:	d150      	bne.n	9814 <setvbuf+0xc8>
    9772:	6874      	ldr	r4, [r6, #4]
    9774:	9b00      	ldr	r3, [sp, #0]
    9776:	2b02      	cmp	r3, #2
    9778:	d005      	beq.n	9786 <setvbuf+0x3a>
    977a:	2b01      	cmp	r3, #1
    977c:	d900      	bls.n	9780 <setvbuf+0x34>
    977e:	e084      	b.n	988a <setvbuf+0x13e>
    9780:	2d00      	cmp	r5, #0
    9782:	da00      	bge.n	9786 <setvbuf+0x3a>
    9784:	e081      	b.n	988a <setvbuf+0x13e>
    9786:	0021      	movs	r1, r4
    9788:	0030      	movs	r0, r6
    978a:	f000 fa2d 	bl	9be8 <_fflush_r>
    978e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9790:	2900      	cmp	r1, #0
    9792:	d008      	beq.n	97a6 <setvbuf+0x5a>
    9794:	0023      	movs	r3, r4
    9796:	3344      	adds	r3, #68	; 0x44
    9798:	4299      	cmp	r1, r3
    979a:	d002      	beq.n	97a2 <setvbuf+0x56>
    979c:	0030      	movs	r0, r6
    979e:	f7ff fe79 	bl	9494 <_free_r>
    97a2:	2300      	movs	r3, #0
    97a4:	6363      	str	r3, [r4, #52]	; 0x34
    97a6:	2300      	movs	r3, #0
    97a8:	61a3      	str	r3, [r4, #24]
    97aa:	6063      	str	r3, [r4, #4]
    97ac:	89a3      	ldrh	r3, [r4, #12]
    97ae:	061b      	lsls	r3, r3, #24
    97b0:	d503      	bpl.n	97ba <setvbuf+0x6e>
    97b2:	6921      	ldr	r1, [r4, #16]
    97b4:	0030      	movs	r0, r6
    97b6:	f7ff fe6d 	bl	9494 <_free_r>
    97ba:	89a3      	ldrh	r3, [r4, #12]
    97bc:	4a36      	ldr	r2, [pc, #216]	; (9898 <setvbuf+0x14c>)
    97be:	4013      	ands	r3, r2
    97c0:	81a3      	strh	r3, [r4, #12]
    97c2:	9b00      	ldr	r3, [sp, #0]
    97c4:	2b02      	cmp	r3, #2
    97c6:	d05a      	beq.n	987e <setvbuf+0x132>
    97c8:	ab03      	add	r3, sp, #12
    97ca:	aa02      	add	r2, sp, #8
    97cc:	0021      	movs	r1, r4
    97ce:	0030      	movs	r0, r6
    97d0:	f000 fb0e 	bl	9df0 <__swhatbuf_r>
    97d4:	89a3      	ldrh	r3, [r4, #12]
    97d6:	4318      	orrs	r0, r3
    97d8:	81a0      	strh	r0, [r4, #12]
    97da:	2d00      	cmp	r5, #0
    97dc:	d124      	bne.n	9828 <setvbuf+0xdc>
    97de:	9d02      	ldr	r5, [sp, #8]
    97e0:	0028      	movs	r0, r5
    97e2:	f7ff fe29 	bl	9438 <malloc>
    97e6:	9501      	str	r5, [sp, #4]
    97e8:	1e07      	subs	r7, r0, #0
    97ea:	d142      	bne.n	9872 <setvbuf+0x126>
    97ec:	9b02      	ldr	r3, [sp, #8]
    97ee:	9301      	str	r3, [sp, #4]
    97f0:	42ab      	cmp	r3, r5
    97f2:	d139      	bne.n	9868 <setvbuf+0x11c>
    97f4:	2001      	movs	r0, #1
    97f6:	4240      	negs	r0, r0
    97f8:	2302      	movs	r3, #2
    97fa:	89a2      	ldrh	r2, [r4, #12]
    97fc:	4313      	orrs	r3, r2
    97fe:	81a3      	strh	r3, [r4, #12]
    9800:	2300      	movs	r3, #0
    9802:	60a3      	str	r3, [r4, #8]
    9804:	0023      	movs	r3, r4
    9806:	3347      	adds	r3, #71	; 0x47
    9808:	6023      	str	r3, [r4, #0]
    980a:	6123      	str	r3, [r4, #16]
    980c:	2301      	movs	r3, #1
    980e:	6163      	str	r3, [r4, #20]
    9810:	b005      	add	sp, #20
    9812:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9814:	4b21      	ldr	r3, [pc, #132]	; (989c <setvbuf+0x150>)
    9816:	429c      	cmp	r4, r3
    9818:	d101      	bne.n	981e <setvbuf+0xd2>
    981a:	68b4      	ldr	r4, [r6, #8]
    981c:	e7aa      	b.n	9774 <setvbuf+0x28>
    981e:	4b20      	ldr	r3, [pc, #128]	; (98a0 <setvbuf+0x154>)
    9820:	429c      	cmp	r4, r3
    9822:	d1a7      	bne.n	9774 <setvbuf+0x28>
    9824:	68f4      	ldr	r4, [r6, #12]
    9826:	e7a5      	b.n	9774 <setvbuf+0x28>
    9828:	2f00      	cmp	r7, #0
    982a:	d0d9      	beq.n	97e0 <setvbuf+0x94>
    982c:	69b3      	ldr	r3, [r6, #24]
    982e:	2b00      	cmp	r3, #0
    9830:	d102      	bne.n	9838 <setvbuf+0xec>
    9832:	0030      	movs	r0, r6
    9834:	f000 fa46 	bl	9cc4 <__sinit>
    9838:	9b00      	ldr	r3, [sp, #0]
    983a:	2b01      	cmp	r3, #1
    983c:	d103      	bne.n	9846 <setvbuf+0xfa>
    983e:	89a3      	ldrh	r3, [r4, #12]
    9840:	9a00      	ldr	r2, [sp, #0]
    9842:	431a      	orrs	r2, r3
    9844:	81a2      	strh	r2, [r4, #12]
    9846:	2008      	movs	r0, #8
    9848:	89a3      	ldrh	r3, [r4, #12]
    984a:	6027      	str	r7, [r4, #0]
    984c:	6127      	str	r7, [r4, #16]
    984e:	6165      	str	r5, [r4, #20]
    9850:	4018      	ands	r0, r3
    9852:	d018      	beq.n	9886 <setvbuf+0x13a>
    9854:	2001      	movs	r0, #1
    9856:	4018      	ands	r0, r3
    9858:	2300      	movs	r3, #0
    985a:	4298      	cmp	r0, r3
    985c:	d011      	beq.n	9882 <setvbuf+0x136>
    985e:	426d      	negs	r5, r5
    9860:	60a3      	str	r3, [r4, #8]
    9862:	61a5      	str	r5, [r4, #24]
    9864:	0018      	movs	r0, r3
    9866:	e7d3      	b.n	9810 <setvbuf+0xc4>
    9868:	9801      	ldr	r0, [sp, #4]
    986a:	f7ff fde5 	bl	9438 <malloc>
    986e:	1e07      	subs	r7, r0, #0
    9870:	d0c0      	beq.n	97f4 <setvbuf+0xa8>
    9872:	2380      	movs	r3, #128	; 0x80
    9874:	89a2      	ldrh	r2, [r4, #12]
    9876:	9d01      	ldr	r5, [sp, #4]
    9878:	4313      	orrs	r3, r2
    987a:	81a3      	strh	r3, [r4, #12]
    987c:	e7d6      	b.n	982c <setvbuf+0xe0>
    987e:	2000      	movs	r0, #0
    9880:	e7ba      	b.n	97f8 <setvbuf+0xac>
    9882:	60a5      	str	r5, [r4, #8]
    9884:	e7c4      	b.n	9810 <setvbuf+0xc4>
    9886:	60a0      	str	r0, [r4, #8]
    9888:	e7c2      	b.n	9810 <setvbuf+0xc4>
    988a:	2001      	movs	r0, #1
    988c:	4240      	negs	r0, r0
    988e:	e7bf      	b.n	9810 <setvbuf+0xc4>
    9890:	2000000c 	.word	0x2000000c
    9894:	0000bccc 	.word	0x0000bccc
    9898:	fffff35c 	.word	0xfffff35c
    989c:	0000bcec 	.word	0x0000bcec
    98a0:	0000bcac 	.word	0x0000bcac

000098a4 <siprintf>:
    98a4:	b40e      	push	{r1, r2, r3}
    98a6:	b510      	push	{r4, lr}
    98a8:	b09d      	sub	sp, #116	; 0x74
    98aa:	a902      	add	r1, sp, #8
    98ac:	9002      	str	r0, [sp, #8]
    98ae:	6108      	str	r0, [r1, #16]
    98b0:	480b      	ldr	r0, [pc, #44]	; (98e0 <siprintf+0x3c>)
    98b2:	2482      	movs	r4, #130	; 0x82
    98b4:	6088      	str	r0, [r1, #8]
    98b6:	6148      	str	r0, [r1, #20]
    98b8:	2001      	movs	r0, #1
    98ba:	4240      	negs	r0, r0
    98bc:	ab1f      	add	r3, sp, #124	; 0x7c
    98be:	81c8      	strh	r0, [r1, #14]
    98c0:	4808      	ldr	r0, [pc, #32]	; (98e4 <siprintf+0x40>)
    98c2:	cb04      	ldmia	r3!, {r2}
    98c4:	00a4      	lsls	r4, r4, #2
    98c6:	6800      	ldr	r0, [r0, #0]
    98c8:	9301      	str	r3, [sp, #4]
    98ca:	818c      	strh	r4, [r1, #12]
    98cc:	f000 fb5a 	bl	9f84 <_svfiprintf_r>
    98d0:	2300      	movs	r3, #0
    98d2:	9a02      	ldr	r2, [sp, #8]
    98d4:	7013      	strb	r3, [r2, #0]
    98d6:	b01d      	add	sp, #116	; 0x74
    98d8:	bc10      	pop	{r4}
    98da:	bc08      	pop	{r3}
    98dc:	b003      	add	sp, #12
    98de:	4718      	bx	r3
    98e0:	7fffffff 	.word	0x7fffffff
    98e4:	2000000c 	.word	0x2000000c

000098e8 <strcmp>:
    98e8:	7802      	ldrb	r2, [r0, #0]
    98ea:	780b      	ldrb	r3, [r1, #0]
    98ec:	2a00      	cmp	r2, #0
    98ee:	d003      	beq.n	98f8 <strcmp+0x10>
    98f0:	3001      	adds	r0, #1
    98f2:	3101      	adds	r1, #1
    98f4:	429a      	cmp	r2, r3
    98f6:	d0f7      	beq.n	98e8 <strcmp>
    98f8:	1ad0      	subs	r0, r2, r3
    98fa:	4770      	bx	lr

000098fc <strcpy>:
    98fc:	1c03      	adds	r3, r0, #0
    98fe:	780a      	ldrb	r2, [r1, #0]
    9900:	3101      	adds	r1, #1
    9902:	701a      	strb	r2, [r3, #0]
    9904:	3301      	adds	r3, #1
    9906:	2a00      	cmp	r2, #0
    9908:	d1f9      	bne.n	98fe <strcpy+0x2>
    990a:	4770      	bx	lr

0000990c <strlen>:
    990c:	2300      	movs	r3, #0
    990e:	5cc2      	ldrb	r2, [r0, r3]
    9910:	3301      	adds	r3, #1
    9912:	2a00      	cmp	r2, #0
    9914:	d1fb      	bne.n	990e <strlen+0x2>
    9916:	1e58      	subs	r0, r3, #1
    9918:	4770      	bx	lr

0000991a <strncmp>:
    991a:	2300      	movs	r3, #0
    991c:	b530      	push	{r4, r5, lr}
    991e:	429a      	cmp	r2, r3
    9920:	d00a      	beq.n	9938 <strncmp+0x1e>
    9922:	3a01      	subs	r2, #1
    9924:	5cc4      	ldrb	r4, [r0, r3]
    9926:	5ccd      	ldrb	r5, [r1, r3]
    9928:	42ac      	cmp	r4, r5
    992a:	d104      	bne.n	9936 <strncmp+0x1c>
    992c:	429a      	cmp	r2, r3
    992e:	d002      	beq.n	9936 <strncmp+0x1c>
    9930:	3301      	adds	r3, #1
    9932:	2c00      	cmp	r4, #0
    9934:	d1f6      	bne.n	9924 <strncmp+0xa>
    9936:	1b63      	subs	r3, r4, r5
    9938:	0018      	movs	r0, r3
    993a:	bd30      	pop	{r4, r5, pc}

0000993c <__swbuf_r>:
    993c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    993e:	0005      	movs	r5, r0
    9940:	000e      	movs	r6, r1
    9942:	0014      	movs	r4, r2
    9944:	2800      	cmp	r0, #0
    9946:	d004      	beq.n	9952 <__swbuf_r+0x16>
    9948:	6983      	ldr	r3, [r0, #24]
    994a:	2b00      	cmp	r3, #0
    994c:	d101      	bne.n	9952 <__swbuf_r+0x16>
    994e:	f000 f9b9 	bl	9cc4 <__sinit>
    9952:	4b22      	ldr	r3, [pc, #136]	; (99dc <__swbuf_r+0xa0>)
    9954:	429c      	cmp	r4, r3
    9956:	d12d      	bne.n	99b4 <__swbuf_r+0x78>
    9958:	686c      	ldr	r4, [r5, #4]
    995a:	69a3      	ldr	r3, [r4, #24]
    995c:	60a3      	str	r3, [r4, #8]
    995e:	89a3      	ldrh	r3, [r4, #12]
    9960:	071b      	lsls	r3, r3, #28
    9962:	d531      	bpl.n	99c8 <__swbuf_r+0x8c>
    9964:	6923      	ldr	r3, [r4, #16]
    9966:	2b00      	cmp	r3, #0
    9968:	d02e      	beq.n	99c8 <__swbuf_r+0x8c>
    996a:	6823      	ldr	r3, [r4, #0]
    996c:	6922      	ldr	r2, [r4, #16]
    996e:	b2f7      	uxtb	r7, r6
    9970:	1a98      	subs	r0, r3, r2
    9972:	6963      	ldr	r3, [r4, #20]
    9974:	b2f6      	uxtb	r6, r6
    9976:	4298      	cmp	r0, r3
    9978:	db05      	blt.n	9986 <__swbuf_r+0x4a>
    997a:	0021      	movs	r1, r4
    997c:	0028      	movs	r0, r5
    997e:	f000 f933 	bl	9be8 <_fflush_r>
    9982:	2800      	cmp	r0, #0
    9984:	d126      	bne.n	99d4 <__swbuf_r+0x98>
    9986:	68a3      	ldr	r3, [r4, #8]
    9988:	3001      	adds	r0, #1
    998a:	3b01      	subs	r3, #1
    998c:	60a3      	str	r3, [r4, #8]
    998e:	6823      	ldr	r3, [r4, #0]
    9990:	1c5a      	adds	r2, r3, #1
    9992:	6022      	str	r2, [r4, #0]
    9994:	701f      	strb	r7, [r3, #0]
    9996:	6963      	ldr	r3, [r4, #20]
    9998:	4298      	cmp	r0, r3
    999a:	d004      	beq.n	99a6 <__swbuf_r+0x6a>
    999c:	89a3      	ldrh	r3, [r4, #12]
    999e:	07db      	lsls	r3, r3, #31
    99a0:	d51a      	bpl.n	99d8 <__swbuf_r+0x9c>
    99a2:	2e0a      	cmp	r6, #10
    99a4:	d118      	bne.n	99d8 <__swbuf_r+0x9c>
    99a6:	0021      	movs	r1, r4
    99a8:	0028      	movs	r0, r5
    99aa:	f000 f91d 	bl	9be8 <_fflush_r>
    99ae:	2800      	cmp	r0, #0
    99b0:	d012      	beq.n	99d8 <__swbuf_r+0x9c>
    99b2:	e00f      	b.n	99d4 <__swbuf_r+0x98>
    99b4:	4b0a      	ldr	r3, [pc, #40]	; (99e0 <__swbuf_r+0xa4>)
    99b6:	429c      	cmp	r4, r3
    99b8:	d101      	bne.n	99be <__swbuf_r+0x82>
    99ba:	68ac      	ldr	r4, [r5, #8]
    99bc:	e7cd      	b.n	995a <__swbuf_r+0x1e>
    99be:	4b09      	ldr	r3, [pc, #36]	; (99e4 <__swbuf_r+0xa8>)
    99c0:	429c      	cmp	r4, r3
    99c2:	d1ca      	bne.n	995a <__swbuf_r+0x1e>
    99c4:	68ec      	ldr	r4, [r5, #12]
    99c6:	e7c8      	b.n	995a <__swbuf_r+0x1e>
    99c8:	0021      	movs	r1, r4
    99ca:	0028      	movs	r0, r5
    99cc:	f000 f80c 	bl	99e8 <__swsetup_r>
    99d0:	2800      	cmp	r0, #0
    99d2:	d0ca      	beq.n	996a <__swbuf_r+0x2e>
    99d4:	2601      	movs	r6, #1
    99d6:	4276      	negs	r6, r6
    99d8:	0030      	movs	r0, r6
    99da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    99dc:	0000bccc 	.word	0x0000bccc
    99e0:	0000bcec 	.word	0x0000bcec
    99e4:	0000bcac 	.word	0x0000bcac

000099e8 <__swsetup_r>:
    99e8:	4b36      	ldr	r3, [pc, #216]	; (9ac4 <__swsetup_r+0xdc>)
    99ea:	b570      	push	{r4, r5, r6, lr}
    99ec:	681d      	ldr	r5, [r3, #0]
    99ee:	0006      	movs	r6, r0
    99f0:	000c      	movs	r4, r1
    99f2:	2d00      	cmp	r5, #0
    99f4:	d005      	beq.n	9a02 <__swsetup_r+0x1a>
    99f6:	69ab      	ldr	r3, [r5, #24]
    99f8:	2b00      	cmp	r3, #0
    99fa:	d102      	bne.n	9a02 <__swsetup_r+0x1a>
    99fc:	0028      	movs	r0, r5
    99fe:	f000 f961 	bl	9cc4 <__sinit>
    9a02:	4b31      	ldr	r3, [pc, #196]	; (9ac8 <__swsetup_r+0xe0>)
    9a04:	429c      	cmp	r4, r3
    9a06:	d10f      	bne.n	9a28 <__swsetup_r+0x40>
    9a08:	686c      	ldr	r4, [r5, #4]
    9a0a:	230c      	movs	r3, #12
    9a0c:	5ee2      	ldrsh	r2, [r4, r3]
    9a0e:	b293      	uxth	r3, r2
    9a10:	0719      	lsls	r1, r3, #28
    9a12:	d42d      	bmi.n	9a70 <__swsetup_r+0x88>
    9a14:	06d9      	lsls	r1, r3, #27
    9a16:	d411      	bmi.n	9a3c <__swsetup_r+0x54>
    9a18:	2309      	movs	r3, #9
    9a1a:	2001      	movs	r0, #1
    9a1c:	6033      	str	r3, [r6, #0]
    9a1e:	3337      	adds	r3, #55	; 0x37
    9a20:	4313      	orrs	r3, r2
    9a22:	81a3      	strh	r3, [r4, #12]
    9a24:	4240      	negs	r0, r0
    9a26:	bd70      	pop	{r4, r5, r6, pc}
    9a28:	4b28      	ldr	r3, [pc, #160]	; (9acc <__swsetup_r+0xe4>)
    9a2a:	429c      	cmp	r4, r3
    9a2c:	d101      	bne.n	9a32 <__swsetup_r+0x4a>
    9a2e:	68ac      	ldr	r4, [r5, #8]
    9a30:	e7eb      	b.n	9a0a <__swsetup_r+0x22>
    9a32:	4b27      	ldr	r3, [pc, #156]	; (9ad0 <__swsetup_r+0xe8>)
    9a34:	429c      	cmp	r4, r3
    9a36:	d1e8      	bne.n	9a0a <__swsetup_r+0x22>
    9a38:	68ec      	ldr	r4, [r5, #12]
    9a3a:	e7e6      	b.n	9a0a <__swsetup_r+0x22>
    9a3c:	075b      	lsls	r3, r3, #29
    9a3e:	d513      	bpl.n	9a68 <__swsetup_r+0x80>
    9a40:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9a42:	2900      	cmp	r1, #0
    9a44:	d008      	beq.n	9a58 <__swsetup_r+0x70>
    9a46:	0023      	movs	r3, r4
    9a48:	3344      	adds	r3, #68	; 0x44
    9a4a:	4299      	cmp	r1, r3
    9a4c:	d002      	beq.n	9a54 <__swsetup_r+0x6c>
    9a4e:	0030      	movs	r0, r6
    9a50:	f7ff fd20 	bl	9494 <_free_r>
    9a54:	2300      	movs	r3, #0
    9a56:	6363      	str	r3, [r4, #52]	; 0x34
    9a58:	2224      	movs	r2, #36	; 0x24
    9a5a:	89a3      	ldrh	r3, [r4, #12]
    9a5c:	4393      	bics	r3, r2
    9a5e:	81a3      	strh	r3, [r4, #12]
    9a60:	2300      	movs	r3, #0
    9a62:	6063      	str	r3, [r4, #4]
    9a64:	6923      	ldr	r3, [r4, #16]
    9a66:	6023      	str	r3, [r4, #0]
    9a68:	2308      	movs	r3, #8
    9a6a:	89a2      	ldrh	r2, [r4, #12]
    9a6c:	4313      	orrs	r3, r2
    9a6e:	81a3      	strh	r3, [r4, #12]
    9a70:	6923      	ldr	r3, [r4, #16]
    9a72:	2b00      	cmp	r3, #0
    9a74:	d10b      	bne.n	9a8e <__swsetup_r+0xa6>
    9a76:	21a0      	movs	r1, #160	; 0xa0
    9a78:	2280      	movs	r2, #128	; 0x80
    9a7a:	89a3      	ldrh	r3, [r4, #12]
    9a7c:	0089      	lsls	r1, r1, #2
    9a7e:	0092      	lsls	r2, r2, #2
    9a80:	400b      	ands	r3, r1
    9a82:	4293      	cmp	r3, r2
    9a84:	d003      	beq.n	9a8e <__swsetup_r+0xa6>
    9a86:	0021      	movs	r1, r4
    9a88:	0030      	movs	r0, r6
    9a8a:	f000 f9d9 	bl	9e40 <__smakebuf_r>
    9a8e:	2301      	movs	r3, #1
    9a90:	89a2      	ldrh	r2, [r4, #12]
    9a92:	4013      	ands	r3, r2
    9a94:	d011      	beq.n	9aba <__swsetup_r+0xd2>
    9a96:	2300      	movs	r3, #0
    9a98:	60a3      	str	r3, [r4, #8]
    9a9a:	6963      	ldr	r3, [r4, #20]
    9a9c:	425b      	negs	r3, r3
    9a9e:	61a3      	str	r3, [r4, #24]
    9aa0:	2000      	movs	r0, #0
    9aa2:	6923      	ldr	r3, [r4, #16]
    9aa4:	4283      	cmp	r3, r0
    9aa6:	d1be      	bne.n	9a26 <__swsetup_r+0x3e>
    9aa8:	230c      	movs	r3, #12
    9aaa:	5ee2      	ldrsh	r2, [r4, r3]
    9aac:	0613      	lsls	r3, r2, #24
    9aae:	d5ba      	bpl.n	9a26 <__swsetup_r+0x3e>
    9ab0:	2340      	movs	r3, #64	; 0x40
    9ab2:	4313      	orrs	r3, r2
    9ab4:	81a3      	strh	r3, [r4, #12]
    9ab6:	3801      	subs	r0, #1
    9ab8:	e7b5      	b.n	9a26 <__swsetup_r+0x3e>
    9aba:	0792      	lsls	r2, r2, #30
    9abc:	d400      	bmi.n	9ac0 <__swsetup_r+0xd8>
    9abe:	6963      	ldr	r3, [r4, #20]
    9ac0:	60a3      	str	r3, [r4, #8]
    9ac2:	e7ed      	b.n	9aa0 <__swsetup_r+0xb8>
    9ac4:	2000000c 	.word	0x2000000c
    9ac8:	0000bccc 	.word	0x0000bccc
    9acc:	0000bcec 	.word	0x0000bcec
    9ad0:	0000bcac 	.word	0x0000bcac

00009ad4 <__sflush_r>:
    9ad4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9ad6:	898a      	ldrh	r2, [r1, #12]
    9ad8:	0005      	movs	r5, r0
    9ada:	000c      	movs	r4, r1
    9adc:	0713      	lsls	r3, r2, #28
    9ade:	d460      	bmi.n	9ba2 <__sflush_r+0xce>
    9ae0:	684b      	ldr	r3, [r1, #4]
    9ae2:	2b00      	cmp	r3, #0
    9ae4:	dc04      	bgt.n	9af0 <__sflush_r+0x1c>
    9ae6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    9ae8:	2b00      	cmp	r3, #0
    9aea:	dc01      	bgt.n	9af0 <__sflush_r+0x1c>
    9aec:	2000      	movs	r0, #0
    9aee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9af0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    9af2:	2f00      	cmp	r7, #0
    9af4:	d0fa      	beq.n	9aec <__sflush_r+0x18>
    9af6:	2300      	movs	r3, #0
    9af8:	682e      	ldr	r6, [r5, #0]
    9afa:	602b      	str	r3, [r5, #0]
    9afc:	2380      	movs	r3, #128	; 0x80
    9afe:	015b      	lsls	r3, r3, #5
    9b00:	401a      	ands	r2, r3
    9b02:	d034      	beq.n	9b6e <__sflush_r+0x9a>
    9b04:	6d60      	ldr	r0, [r4, #84]	; 0x54
    9b06:	89a3      	ldrh	r3, [r4, #12]
    9b08:	075b      	lsls	r3, r3, #29
    9b0a:	d506      	bpl.n	9b1a <__sflush_r+0x46>
    9b0c:	6863      	ldr	r3, [r4, #4]
    9b0e:	1ac0      	subs	r0, r0, r3
    9b10:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9b12:	2b00      	cmp	r3, #0
    9b14:	d001      	beq.n	9b1a <__sflush_r+0x46>
    9b16:	6c23      	ldr	r3, [r4, #64]	; 0x40
    9b18:	1ac0      	subs	r0, r0, r3
    9b1a:	0002      	movs	r2, r0
    9b1c:	6a21      	ldr	r1, [r4, #32]
    9b1e:	2300      	movs	r3, #0
    9b20:	0028      	movs	r0, r5
    9b22:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    9b24:	47b8      	blx	r7
    9b26:	89a1      	ldrh	r1, [r4, #12]
    9b28:	1c43      	adds	r3, r0, #1
    9b2a:	d106      	bne.n	9b3a <__sflush_r+0x66>
    9b2c:	682b      	ldr	r3, [r5, #0]
    9b2e:	2b1d      	cmp	r3, #29
    9b30:	d831      	bhi.n	9b96 <__sflush_r+0xc2>
    9b32:	4a2c      	ldr	r2, [pc, #176]	; (9be4 <__sflush_r+0x110>)
    9b34:	40da      	lsrs	r2, r3
    9b36:	07d3      	lsls	r3, r2, #31
    9b38:	d52d      	bpl.n	9b96 <__sflush_r+0xc2>
    9b3a:	2300      	movs	r3, #0
    9b3c:	6063      	str	r3, [r4, #4]
    9b3e:	6923      	ldr	r3, [r4, #16]
    9b40:	6023      	str	r3, [r4, #0]
    9b42:	04cb      	lsls	r3, r1, #19
    9b44:	d505      	bpl.n	9b52 <__sflush_r+0x7e>
    9b46:	1c43      	adds	r3, r0, #1
    9b48:	d102      	bne.n	9b50 <__sflush_r+0x7c>
    9b4a:	682b      	ldr	r3, [r5, #0]
    9b4c:	2b00      	cmp	r3, #0
    9b4e:	d100      	bne.n	9b52 <__sflush_r+0x7e>
    9b50:	6560      	str	r0, [r4, #84]	; 0x54
    9b52:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9b54:	602e      	str	r6, [r5, #0]
    9b56:	2900      	cmp	r1, #0
    9b58:	d0c8      	beq.n	9aec <__sflush_r+0x18>
    9b5a:	0023      	movs	r3, r4
    9b5c:	3344      	adds	r3, #68	; 0x44
    9b5e:	4299      	cmp	r1, r3
    9b60:	d002      	beq.n	9b68 <__sflush_r+0x94>
    9b62:	0028      	movs	r0, r5
    9b64:	f7ff fc96 	bl	9494 <_free_r>
    9b68:	2000      	movs	r0, #0
    9b6a:	6360      	str	r0, [r4, #52]	; 0x34
    9b6c:	e7bf      	b.n	9aee <__sflush_r+0x1a>
    9b6e:	2301      	movs	r3, #1
    9b70:	6a21      	ldr	r1, [r4, #32]
    9b72:	0028      	movs	r0, r5
    9b74:	47b8      	blx	r7
    9b76:	1c43      	adds	r3, r0, #1
    9b78:	d1c5      	bne.n	9b06 <__sflush_r+0x32>
    9b7a:	682b      	ldr	r3, [r5, #0]
    9b7c:	2b00      	cmp	r3, #0
    9b7e:	d0c2      	beq.n	9b06 <__sflush_r+0x32>
    9b80:	2b1d      	cmp	r3, #29
    9b82:	d001      	beq.n	9b88 <__sflush_r+0xb4>
    9b84:	2b16      	cmp	r3, #22
    9b86:	d101      	bne.n	9b8c <__sflush_r+0xb8>
    9b88:	602e      	str	r6, [r5, #0]
    9b8a:	e7af      	b.n	9aec <__sflush_r+0x18>
    9b8c:	2340      	movs	r3, #64	; 0x40
    9b8e:	89a2      	ldrh	r2, [r4, #12]
    9b90:	4313      	orrs	r3, r2
    9b92:	81a3      	strh	r3, [r4, #12]
    9b94:	e7ab      	b.n	9aee <__sflush_r+0x1a>
    9b96:	2340      	movs	r3, #64	; 0x40
    9b98:	430b      	orrs	r3, r1
    9b9a:	2001      	movs	r0, #1
    9b9c:	81a3      	strh	r3, [r4, #12]
    9b9e:	4240      	negs	r0, r0
    9ba0:	e7a5      	b.n	9aee <__sflush_r+0x1a>
    9ba2:	690f      	ldr	r7, [r1, #16]
    9ba4:	2f00      	cmp	r7, #0
    9ba6:	d0a1      	beq.n	9aec <__sflush_r+0x18>
    9ba8:	680b      	ldr	r3, [r1, #0]
    9baa:	600f      	str	r7, [r1, #0]
    9bac:	1bdb      	subs	r3, r3, r7
    9bae:	9301      	str	r3, [sp, #4]
    9bb0:	2300      	movs	r3, #0
    9bb2:	0792      	lsls	r2, r2, #30
    9bb4:	d100      	bne.n	9bb8 <__sflush_r+0xe4>
    9bb6:	694b      	ldr	r3, [r1, #20]
    9bb8:	60a3      	str	r3, [r4, #8]
    9bba:	9b01      	ldr	r3, [sp, #4]
    9bbc:	2b00      	cmp	r3, #0
    9bbe:	dc00      	bgt.n	9bc2 <__sflush_r+0xee>
    9bc0:	e794      	b.n	9aec <__sflush_r+0x18>
    9bc2:	9b01      	ldr	r3, [sp, #4]
    9bc4:	003a      	movs	r2, r7
    9bc6:	6a21      	ldr	r1, [r4, #32]
    9bc8:	0028      	movs	r0, r5
    9bca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    9bcc:	47b0      	blx	r6
    9bce:	2800      	cmp	r0, #0
    9bd0:	dc03      	bgt.n	9bda <__sflush_r+0x106>
    9bd2:	2340      	movs	r3, #64	; 0x40
    9bd4:	89a2      	ldrh	r2, [r4, #12]
    9bd6:	4313      	orrs	r3, r2
    9bd8:	e7df      	b.n	9b9a <__sflush_r+0xc6>
    9bda:	9b01      	ldr	r3, [sp, #4]
    9bdc:	183f      	adds	r7, r7, r0
    9bde:	1a1b      	subs	r3, r3, r0
    9be0:	9301      	str	r3, [sp, #4]
    9be2:	e7ea      	b.n	9bba <__sflush_r+0xe6>
    9be4:	20400001 	.word	0x20400001

00009be8 <_fflush_r>:
    9be8:	690b      	ldr	r3, [r1, #16]
    9bea:	b570      	push	{r4, r5, r6, lr}
    9bec:	0005      	movs	r5, r0
    9bee:	000c      	movs	r4, r1
    9bf0:	2b00      	cmp	r3, #0
    9bf2:	d101      	bne.n	9bf8 <_fflush_r+0x10>
    9bf4:	2000      	movs	r0, #0
    9bf6:	bd70      	pop	{r4, r5, r6, pc}
    9bf8:	2800      	cmp	r0, #0
    9bfa:	d004      	beq.n	9c06 <_fflush_r+0x1e>
    9bfc:	6983      	ldr	r3, [r0, #24]
    9bfe:	2b00      	cmp	r3, #0
    9c00:	d101      	bne.n	9c06 <_fflush_r+0x1e>
    9c02:	f000 f85f 	bl	9cc4 <__sinit>
    9c06:	4b0b      	ldr	r3, [pc, #44]	; (9c34 <_fflush_r+0x4c>)
    9c08:	429c      	cmp	r4, r3
    9c0a:	d109      	bne.n	9c20 <_fflush_r+0x38>
    9c0c:	686c      	ldr	r4, [r5, #4]
    9c0e:	220c      	movs	r2, #12
    9c10:	5ea3      	ldrsh	r3, [r4, r2]
    9c12:	2b00      	cmp	r3, #0
    9c14:	d0ee      	beq.n	9bf4 <_fflush_r+0xc>
    9c16:	0021      	movs	r1, r4
    9c18:	0028      	movs	r0, r5
    9c1a:	f7ff ff5b 	bl	9ad4 <__sflush_r>
    9c1e:	e7ea      	b.n	9bf6 <_fflush_r+0xe>
    9c20:	4b05      	ldr	r3, [pc, #20]	; (9c38 <_fflush_r+0x50>)
    9c22:	429c      	cmp	r4, r3
    9c24:	d101      	bne.n	9c2a <_fflush_r+0x42>
    9c26:	68ac      	ldr	r4, [r5, #8]
    9c28:	e7f1      	b.n	9c0e <_fflush_r+0x26>
    9c2a:	4b04      	ldr	r3, [pc, #16]	; (9c3c <_fflush_r+0x54>)
    9c2c:	429c      	cmp	r4, r3
    9c2e:	d1ee      	bne.n	9c0e <_fflush_r+0x26>
    9c30:	68ec      	ldr	r4, [r5, #12]
    9c32:	e7ec      	b.n	9c0e <_fflush_r+0x26>
    9c34:	0000bccc 	.word	0x0000bccc
    9c38:	0000bcec 	.word	0x0000bcec
    9c3c:	0000bcac 	.word	0x0000bcac

00009c40 <_cleanup_r>:
    9c40:	b510      	push	{r4, lr}
    9c42:	4902      	ldr	r1, [pc, #8]	; (9c4c <_cleanup_r+0xc>)
    9c44:	f000 f8b2 	bl	9dac <_fwalk_reent>
    9c48:	bd10      	pop	{r4, pc}
    9c4a:	46c0      	nop			; (mov r8, r8)
    9c4c:	00009be9 	.word	0x00009be9

00009c50 <std.isra.0>:
    9c50:	2300      	movs	r3, #0
    9c52:	b510      	push	{r4, lr}
    9c54:	0004      	movs	r4, r0
    9c56:	6003      	str	r3, [r0, #0]
    9c58:	6043      	str	r3, [r0, #4]
    9c5a:	6083      	str	r3, [r0, #8]
    9c5c:	8181      	strh	r1, [r0, #12]
    9c5e:	6643      	str	r3, [r0, #100]	; 0x64
    9c60:	81c2      	strh	r2, [r0, #14]
    9c62:	6103      	str	r3, [r0, #16]
    9c64:	6143      	str	r3, [r0, #20]
    9c66:	6183      	str	r3, [r0, #24]
    9c68:	0019      	movs	r1, r3
    9c6a:	2208      	movs	r2, #8
    9c6c:	305c      	adds	r0, #92	; 0x5c
    9c6e:	f7ff fc08 	bl	9482 <memset>
    9c72:	4b05      	ldr	r3, [pc, #20]	; (9c88 <std.isra.0+0x38>)
    9c74:	6224      	str	r4, [r4, #32]
    9c76:	6263      	str	r3, [r4, #36]	; 0x24
    9c78:	4b04      	ldr	r3, [pc, #16]	; (9c8c <std.isra.0+0x3c>)
    9c7a:	62a3      	str	r3, [r4, #40]	; 0x28
    9c7c:	4b04      	ldr	r3, [pc, #16]	; (9c90 <std.isra.0+0x40>)
    9c7e:	62e3      	str	r3, [r4, #44]	; 0x2c
    9c80:	4b04      	ldr	r3, [pc, #16]	; (9c94 <std.isra.0+0x44>)
    9c82:	6323      	str	r3, [r4, #48]	; 0x30
    9c84:	bd10      	pop	{r4, pc}
    9c86:	46c0      	nop			; (mov r8, r8)
    9c88:	0000a791 	.word	0x0000a791
    9c8c:	0000a7b9 	.word	0x0000a7b9
    9c90:	0000a7f1 	.word	0x0000a7f1
    9c94:	0000a81d 	.word	0x0000a81d

00009c98 <__sfmoreglue>:
    9c98:	b570      	push	{r4, r5, r6, lr}
    9c9a:	2568      	movs	r5, #104	; 0x68
    9c9c:	1e4a      	subs	r2, r1, #1
    9c9e:	4355      	muls	r5, r2
    9ca0:	000e      	movs	r6, r1
    9ca2:	0029      	movs	r1, r5
    9ca4:	3174      	adds	r1, #116	; 0x74
    9ca6:	f7ff fc3f 	bl	9528 <_malloc_r>
    9caa:	1e04      	subs	r4, r0, #0
    9cac:	d008      	beq.n	9cc0 <__sfmoreglue+0x28>
    9cae:	2100      	movs	r1, #0
    9cb0:	002a      	movs	r2, r5
    9cb2:	6001      	str	r1, [r0, #0]
    9cb4:	6046      	str	r6, [r0, #4]
    9cb6:	300c      	adds	r0, #12
    9cb8:	60a0      	str	r0, [r4, #8]
    9cba:	3268      	adds	r2, #104	; 0x68
    9cbc:	f7ff fbe1 	bl	9482 <memset>
    9cc0:	0020      	movs	r0, r4
    9cc2:	bd70      	pop	{r4, r5, r6, pc}

00009cc4 <__sinit>:
    9cc4:	6983      	ldr	r3, [r0, #24]
    9cc6:	b513      	push	{r0, r1, r4, lr}
    9cc8:	0004      	movs	r4, r0
    9cca:	2b00      	cmp	r3, #0
    9ccc:	d128      	bne.n	9d20 <__sinit+0x5c>
    9cce:	6483      	str	r3, [r0, #72]	; 0x48
    9cd0:	64c3      	str	r3, [r0, #76]	; 0x4c
    9cd2:	6503      	str	r3, [r0, #80]	; 0x50
    9cd4:	4b13      	ldr	r3, [pc, #76]	; (9d24 <__sinit+0x60>)
    9cd6:	4a14      	ldr	r2, [pc, #80]	; (9d28 <__sinit+0x64>)
    9cd8:	681b      	ldr	r3, [r3, #0]
    9cda:	6282      	str	r2, [r0, #40]	; 0x28
    9cdc:	9301      	str	r3, [sp, #4]
    9cde:	4298      	cmp	r0, r3
    9ce0:	d101      	bne.n	9ce6 <__sinit+0x22>
    9ce2:	2301      	movs	r3, #1
    9ce4:	6183      	str	r3, [r0, #24]
    9ce6:	0020      	movs	r0, r4
    9ce8:	f000 f820 	bl	9d2c <__sfp>
    9cec:	6060      	str	r0, [r4, #4]
    9cee:	0020      	movs	r0, r4
    9cf0:	f000 f81c 	bl	9d2c <__sfp>
    9cf4:	60a0      	str	r0, [r4, #8]
    9cf6:	0020      	movs	r0, r4
    9cf8:	f000 f818 	bl	9d2c <__sfp>
    9cfc:	2200      	movs	r2, #0
    9cfe:	60e0      	str	r0, [r4, #12]
    9d00:	2104      	movs	r1, #4
    9d02:	6860      	ldr	r0, [r4, #4]
    9d04:	f7ff ffa4 	bl	9c50 <std.isra.0>
    9d08:	2201      	movs	r2, #1
    9d0a:	2109      	movs	r1, #9
    9d0c:	68a0      	ldr	r0, [r4, #8]
    9d0e:	f7ff ff9f 	bl	9c50 <std.isra.0>
    9d12:	2202      	movs	r2, #2
    9d14:	2112      	movs	r1, #18
    9d16:	68e0      	ldr	r0, [r4, #12]
    9d18:	f7ff ff9a 	bl	9c50 <std.isra.0>
    9d1c:	2301      	movs	r3, #1
    9d1e:	61a3      	str	r3, [r4, #24]
    9d20:	bd13      	pop	{r0, r1, r4, pc}
    9d22:	46c0      	nop			; (mov r8, r8)
    9d24:	0000bca8 	.word	0x0000bca8
    9d28:	00009c41 	.word	0x00009c41

00009d2c <__sfp>:
    9d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9d2e:	4b1e      	ldr	r3, [pc, #120]	; (9da8 <__sfp+0x7c>)
    9d30:	0007      	movs	r7, r0
    9d32:	681e      	ldr	r6, [r3, #0]
    9d34:	69b3      	ldr	r3, [r6, #24]
    9d36:	2b00      	cmp	r3, #0
    9d38:	d102      	bne.n	9d40 <__sfp+0x14>
    9d3a:	0030      	movs	r0, r6
    9d3c:	f7ff ffc2 	bl	9cc4 <__sinit>
    9d40:	3648      	adds	r6, #72	; 0x48
    9d42:	68b4      	ldr	r4, [r6, #8]
    9d44:	6873      	ldr	r3, [r6, #4]
    9d46:	3b01      	subs	r3, #1
    9d48:	d504      	bpl.n	9d54 <__sfp+0x28>
    9d4a:	6833      	ldr	r3, [r6, #0]
    9d4c:	2b00      	cmp	r3, #0
    9d4e:	d007      	beq.n	9d60 <__sfp+0x34>
    9d50:	6836      	ldr	r6, [r6, #0]
    9d52:	e7f6      	b.n	9d42 <__sfp+0x16>
    9d54:	220c      	movs	r2, #12
    9d56:	5ea5      	ldrsh	r5, [r4, r2]
    9d58:	2d00      	cmp	r5, #0
    9d5a:	d00d      	beq.n	9d78 <__sfp+0x4c>
    9d5c:	3468      	adds	r4, #104	; 0x68
    9d5e:	e7f2      	b.n	9d46 <__sfp+0x1a>
    9d60:	2104      	movs	r1, #4
    9d62:	0038      	movs	r0, r7
    9d64:	f7ff ff98 	bl	9c98 <__sfmoreglue>
    9d68:	6030      	str	r0, [r6, #0]
    9d6a:	2800      	cmp	r0, #0
    9d6c:	d1f0      	bne.n	9d50 <__sfp+0x24>
    9d6e:	230c      	movs	r3, #12
    9d70:	0004      	movs	r4, r0
    9d72:	603b      	str	r3, [r7, #0]
    9d74:	0020      	movs	r0, r4
    9d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9d78:	2301      	movs	r3, #1
    9d7a:	0020      	movs	r0, r4
    9d7c:	425b      	negs	r3, r3
    9d7e:	81e3      	strh	r3, [r4, #14]
    9d80:	3302      	adds	r3, #2
    9d82:	81a3      	strh	r3, [r4, #12]
    9d84:	6665      	str	r5, [r4, #100]	; 0x64
    9d86:	6025      	str	r5, [r4, #0]
    9d88:	60a5      	str	r5, [r4, #8]
    9d8a:	6065      	str	r5, [r4, #4]
    9d8c:	6125      	str	r5, [r4, #16]
    9d8e:	6165      	str	r5, [r4, #20]
    9d90:	61a5      	str	r5, [r4, #24]
    9d92:	2208      	movs	r2, #8
    9d94:	0029      	movs	r1, r5
    9d96:	305c      	adds	r0, #92	; 0x5c
    9d98:	f7ff fb73 	bl	9482 <memset>
    9d9c:	6365      	str	r5, [r4, #52]	; 0x34
    9d9e:	63a5      	str	r5, [r4, #56]	; 0x38
    9da0:	64a5      	str	r5, [r4, #72]	; 0x48
    9da2:	64e5      	str	r5, [r4, #76]	; 0x4c
    9da4:	e7e6      	b.n	9d74 <__sfp+0x48>
    9da6:	46c0      	nop			; (mov r8, r8)
    9da8:	0000bca8 	.word	0x0000bca8

00009dac <_fwalk_reent>:
    9dac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9dae:	0004      	movs	r4, r0
    9db0:	0007      	movs	r7, r0
    9db2:	2600      	movs	r6, #0
    9db4:	9101      	str	r1, [sp, #4]
    9db6:	3448      	adds	r4, #72	; 0x48
    9db8:	2c00      	cmp	r4, #0
    9dba:	d101      	bne.n	9dc0 <_fwalk_reent+0x14>
    9dbc:	0030      	movs	r0, r6
    9dbe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9dc0:	6863      	ldr	r3, [r4, #4]
    9dc2:	68a5      	ldr	r5, [r4, #8]
    9dc4:	9300      	str	r3, [sp, #0]
    9dc6:	9b00      	ldr	r3, [sp, #0]
    9dc8:	3b01      	subs	r3, #1
    9dca:	9300      	str	r3, [sp, #0]
    9dcc:	d501      	bpl.n	9dd2 <_fwalk_reent+0x26>
    9dce:	6824      	ldr	r4, [r4, #0]
    9dd0:	e7f2      	b.n	9db8 <_fwalk_reent+0xc>
    9dd2:	89ab      	ldrh	r3, [r5, #12]
    9dd4:	2b01      	cmp	r3, #1
    9dd6:	d908      	bls.n	9dea <_fwalk_reent+0x3e>
    9dd8:	220e      	movs	r2, #14
    9dda:	5eab      	ldrsh	r3, [r5, r2]
    9ddc:	3301      	adds	r3, #1
    9dde:	d004      	beq.n	9dea <_fwalk_reent+0x3e>
    9de0:	0029      	movs	r1, r5
    9de2:	0038      	movs	r0, r7
    9de4:	9b01      	ldr	r3, [sp, #4]
    9de6:	4798      	blx	r3
    9de8:	4306      	orrs	r6, r0
    9dea:	3568      	adds	r5, #104	; 0x68
    9dec:	e7eb      	b.n	9dc6 <_fwalk_reent+0x1a>
	...

00009df0 <__swhatbuf_r>:
    9df0:	b570      	push	{r4, r5, r6, lr}
    9df2:	000e      	movs	r6, r1
    9df4:	001d      	movs	r5, r3
    9df6:	230e      	movs	r3, #14
    9df8:	5ec9      	ldrsh	r1, [r1, r3]
    9dfa:	b090      	sub	sp, #64	; 0x40
    9dfc:	0014      	movs	r4, r2
    9dfe:	2900      	cmp	r1, #0
    9e00:	da07      	bge.n	9e12 <__swhatbuf_r+0x22>
    9e02:	2300      	movs	r3, #0
    9e04:	602b      	str	r3, [r5, #0]
    9e06:	89b3      	ldrh	r3, [r6, #12]
    9e08:	061b      	lsls	r3, r3, #24
    9e0a:	d411      	bmi.n	9e30 <__swhatbuf_r+0x40>
    9e0c:	2380      	movs	r3, #128	; 0x80
    9e0e:	00db      	lsls	r3, r3, #3
    9e10:	e00f      	b.n	9e32 <__swhatbuf_r+0x42>
    9e12:	aa01      	add	r2, sp, #4
    9e14:	f000 fd2e 	bl	a874 <_fstat_r>
    9e18:	2800      	cmp	r0, #0
    9e1a:	dbf2      	blt.n	9e02 <__swhatbuf_r+0x12>
    9e1c:	22f0      	movs	r2, #240	; 0xf0
    9e1e:	9b02      	ldr	r3, [sp, #8]
    9e20:	0212      	lsls	r2, r2, #8
    9e22:	4013      	ands	r3, r2
    9e24:	4a05      	ldr	r2, [pc, #20]	; (9e3c <__swhatbuf_r+0x4c>)
    9e26:	189b      	adds	r3, r3, r2
    9e28:	425a      	negs	r2, r3
    9e2a:	4153      	adcs	r3, r2
    9e2c:	602b      	str	r3, [r5, #0]
    9e2e:	e7ed      	b.n	9e0c <__swhatbuf_r+0x1c>
    9e30:	2340      	movs	r3, #64	; 0x40
    9e32:	2000      	movs	r0, #0
    9e34:	6023      	str	r3, [r4, #0]
    9e36:	b010      	add	sp, #64	; 0x40
    9e38:	bd70      	pop	{r4, r5, r6, pc}
    9e3a:	46c0      	nop			; (mov r8, r8)
    9e3c:	ffffe000 	.word	0xffffe000

00009e40 <__smakebuf_r>:
    9e40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9e42:	2602      	movs	r6, #2
    9e44:	898b      	ldrh	r3, [r1, #12]
    9e46:	0005      	movs	r5, r0
    9e48:	000c      	movs	r4, r1
    9e4a:	4233      	tst	r3, r6
    9e4c:	d006      	beq.n	9e5c <__smakebuf_r+0x1c>
    9e4e:	0023      	movs	r3, r4
    9e50:	3347      	adds	r3, #71	; 0x47
    9e52:	6023      	str	r3, [r4, #0]
    9e54:	6123      	str	r3, [r4, #16]
    9e56:	2301      	movs	r3, #1
    9e58:	6163      	str	r3, [r4, #20]
    9e5a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    9e5c:	ab01      	add	r3, sp, #4
    9e5e:	466a      	mov	r2, sp
    9e60:	f7ff ffc6 	bl	9df0 <__swhatbuf_r>
    9e64:	9900      	ldr	r1, [sp, #0]
    9e66:	0007      	movs	r7, r0
    9e68:	0028      	movs	r0, r5
    9e6a:	f7ff fb5d 	bl	9528 <_malloc_r>
    9e6e:	2800      	cmp	r0, #0
    9e70:	d106      	bne.n	9e80 <__smakebuf_r+0x40>
    9e72:	220c      	movs	r2, #12
    9e74:	5ea3      	ldrsh	r3, [r4, r2]
    9e76:	059a      	lsls	r2, r3, #22
    9e78:	d4ef      	bmi.n	9e5a <__smakebuf_r+0x1a>
    9e7a:	431e      	orrs	r6, r3
    9e7c:	81a6      	strh	r6, [r4, #12]
    9e7e:	e7e6      	b.n	9e4e <__smakebuf_r+0xe>
    9e80:	4b0d      	ldr	r3, [pc, #52]	; (9eb8 <__smakebuf_r+0x78>)
    9e82:	62ab      	str	r3, [r5, #40]	; 0x28
    9e84:	2380      	movs	r3, #128	; 0x80
    9e86:	89a2      	ldrh	r2, [r4, #12]
    9e88:	6020      	str	r0, [r4, #0]
    9e8a:	4313      	orrs	r3, r2
    9e8c:	81a3      	strh	r3, [r4, #12]
    9e8e:	9b00      	ldr	r3, [sp, #0]
    9e90:	6120      	str	r0, [r4, #16]
    9e92:	6163      	str	r3, [r4, #20]
    9e94:	9b01      	ldr	r3, [sp, #4]
    9e96:	2b00      	cmp	r3, #0
    9e98:	d00a      	beq.n	9eb0 <__smakebuf_r+0x70>
    9e9a:	230e      	movs	r3, #14
    9e9c:	5ee1      	ldrsh	r1, [r4, r3]
    9e9e:	0028      	movs	r0, r5
    9ea0:	f000 fcfa 	bl	a898 <_isatty_r>
    9ea4:	2800      	cmp	r0, #0
    9ea6:	d003      	beq.n	9eb0 <__smakebuf_r+0x70>
    9ea8:	2301      	movs	r3, #1
    9eaa:	89a2      	ldrh	r2, [r4, #12]
    9eac:	4313      	orrs	r3, r2
    9eae:	81a3      	strh	r3, [r4, #12]
    9eb0:	89a0      	ldrh	r0, [r4, #12]
    9eb2:	4338      	orrs	r0, r7
    9eb4:	81a0      	strh	r0, [r4, #12]
    9eb6:	e7d0      	b.n	9e5a <__smakebuf_r+0x1a>
    9eb8:	00009c41 	.word	0x00009c41

00009ebc <__malloc_lock>:
    9ebc:	4770      	bx	lr

00009ebe <__malloc_unlock>:
    9ebe:	4770      	bx	lr

00009ec0 <__ssputs_r>:
    9ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ec2:	688e      	ldr	r6, [r1, #8]
    9ec4:	b085      	sub	sp, #20
    9ec6:	0007      	movs	r7, r0
    9ec8:	000c      	movs	r4, r1
    9eca:	9203      	str	r2, [sp, #12]
    9ecc:	9301      	str	r3, [sp, #4]
    9ece:	429e      	cmp	r6, r3
    9ed0:	d839      	bhi.n	9f46 <__ssputs_r+0x86>
    9ed2:	2390      	movs	r3, #144	; 0x90
    9ed4:	898a      	ldrh	r2, [r1, #12]
    9ed6:	00db      	lsls	r3, r3, #3
    9ed8:	421a      	tst	r2, r3
    9eda:	d034      	beq.n	9f46 <__ssputs_r+0x86>
    9edc:	2503      	movs	r5, #3
    9ede:	6909      	ldr	r1, [r1, #16]
    9ee0:	6823      	ldr	r3, [r4, #0]
    9ee2:	1a5b      	subs	r3, r3, r1
    9ee4:	9302      	str	r3, [sp, #8]
    9ee6:	6963      	ldr	r3, [r4, #20]
    9ee8:	9802      	ldr	r0, [sp, #8]
    9eea:	435d      	muls	r5, r3
    9eec:	0feb      	lsrs	r3, r5, #31
    9eee:	195d      	adds	r5, r3, r5
    9ef0:	9b01      	ldr	r3, [sp, #4]
    9ef2:	106d      	asrs	r5, r5, #1
    9ef4:	3301      	adds	r3, #1
    9ef6:	181b      	adds	r3, r3, r0
    9ef8:	42ab      	cmp	r3, r5
    9efa:	d900      	bls.n	9efe <__ssputs_r+0x3e>
    9efc:	001d      	movs	r5, r3
    9efe:	0553      	lsls	r3, r2, #21
    9f00:	d532      	bpl.n	9f68 <__ssputs_r+0xa8>
    9f02:	0029      	movs	r1, r5
    9f04:	0038      	movs	r0, r7
    9f06:	f7ff fb0f 	bl	9528 <_malloc_r>
    9f0a:	1e06      	subs	r6, r0, #0
    9f0c:	d109      	bne.n	9f22 <__ssputs_r+0x62>
    9f0e:	230c      	movs	r3, #12
    9f10:	603b      	str	r3, [r7, #0]
    9f12:	2340      	movs	r3, #64	; 0x40
    9f14:	2001      	movs	r0, #1
    9f16:	89a2      	ldrh	r2, [r4, #12]
    9f18:	4240      	negs	r0, r0
    9f1a:	4313      	orrs	r3, r2
    9f1c:	81a3      	strh	r3, [r4, #12]
    9f1e:	b005      	add	sp, #20
    9f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9f22:	9a02      	ldr	r2, [sp, #8]
    9f24:	6921      	ldr	r1, [r4, #16]
    9f26:	f7ff fa91 	bl	944c <memcpy>
    9f2a:	89a3      	ldrh	r3, [r4, #12]
    9f2c:	4a14      	ldr	r2, [pc, #80]	; (9f80 <__ssputs_r+0xc0>)
    9f2e:	401a      	ands	r2, r3
    9f30:	2380      	movs	r3, #128	; 0x80
    9f32:	4313      	orrs	r3, r2
    9f34:	81a3      	strh	r3, [r4, #12]
    9f36:	9b02      	ldr	r3, [sp, #8]
    9f38:	6126      	str	r6, [r4, #16]
    9f3a:	18f6      	adds	r6, r6, r3
    9f3c:	6026      	str	r6, [r4, #0]
    9f3e:	6165      	str	r5, [r4, #20]
    9f40:	9e01      	ldr	r6, [sp, #4]
    9f42:	1aed      	subs	r5, r5, r3
    9f44:	60a5      	str	r5, [r4, #8]
    9f46:	9b01      	ldr	r3, [sp, #4]
    9f48:	42b3      	cmp	r3, r6
    9f4a:	d200      	bcs.n	9f4e <__ssputs_r+0x8e>
    9f4c:	001e      	movs	r6, r3
    9f4e:	0032      	movs	r2, r6
    9f50:	9903      	ldr	r1, [sp, #12]
    9f52:	6820      	ldr	r0, [r4, #0]
    9f54:	f7ff fa83 	bl	945e <memmove>
    9f58:	68a3      	ldr	r3, [r4, #8]
    9f5a:	2000      	movs	r0, #0
    9f5c:	1b9b      	subs	r3, r3, r6
    9f5e:	60a3      	str	r3, [r4, #8]
    9f60:	6823      	ldr	r3, [r4, #0]
    9f62:	199e      	adds	r6, r3, r6
    9f64:	6026      	str	r6, [r4, #0]
    9f66:	e7da      	b.n	9f1e <__ssputs_r+0x5e>
    9f68:	002a      	movs	r2, r5
    9f6a:	0038      	movs	r0, r7
    9f6c:	f000 fcc5 	bl	a8fa <_realloc_r>
    9f70:	1e06      	subs	r6, r0, #0
    9f72:	d1e0      	bne.n	9f36 <__ssputs_r+0x76>
    9f74:	6921      	ldr	r1, [r4, #16]
    9f76:	0038      	movs	r0, r7
    9f78:	f7ff fa8c 	bl	9494 <_free_r>
    9f7c:	e7c7      	b.n	9f0e <__ssputs_r+0x4e>
    9f7e:	46c0      	nop			; (mov r8, r8)
    9f80:	fffffb7f 	.word	0xfffffb7f

00009f84 <_svfiprintf_r>:
    9f84:	b5f0      	push	{r4, r5, r6, r7, lr}
    9f86:	b09f      	sub	sp, #124	; 0x7c
    9f88:	9002      	str	r0, [sp, #8]
    9f8a:	9305      	str	r3, [sp, #20]
    9f8c:	898b      	ldrh	r3, [r1, #12]
    9f8e:	000f      	movs	r7, r1
    9f90:	0016      	movs	r6, r2
    9f92:	061b      	lsls	r3, r3, #24
    9f94:	d511      	bpl.n	9fba <_svfiprintf_r+0x36>
    9f96:	690b      	ldr	r3, [r1, #16]
    9f98:	2b00      	cmp	r3, #0
    9f9a:	d10e      	bne.n	9fba <_svfiprintf_r+0x36>
    9f9c:	2140      	movs	r1, #64	; 0x40
    9f9e:	f7ff fac3 	bl	9528 <_malloc_r>
    9fa2:	6038      	str	r0, [r7, #0]
    9fa4:	6138      	str	r0, [r7, #16]
    9fa6:	2800      	cmp	r0, #0
    9fa8:	d105      	bne.n	9fb6 <_svfiprintf_r+0x32>
    9faa:	230c      	movs	r3, #12
    9fac:	9a02      	ldr	r2, [sp, #8]
    9fae:	3801      	subs	r0, #1
    9fb0:	6013      	str	r3, [r2, #0]
    9fb2:	b01f      	add	sp, #124	; 0x7c
    9fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9fb6:	2340      	movs	r3, #64	; 0x40
    9fb8:	617b      	str	r3, [r7, #20]
    9fba:	2300      	movs	r3, #0
    9fbc:	ad06      	add	r5, sp, #24
    9fbe:	616b      	str	r3, [r5, #20]
    9fc0:	3320      	adds	r3, #32
    9fc2:	766b      	strb	r3, [r5, #25]
    9fc4:	3310      	adds	r3, #16
    9fc6:	76ab      	strb	r3, [r5, #26]
    9fc8:	0034      	movs	r4, r6
    9fca:	7823      	ldrb	r3, [r4, #0]
    9fcc:	2b00      	cmp	r3, #0
    9fce:	d147      	bne.n	a060 <_svfiprintf_r+0xdc>
    9fd0:	1ba3      	subs	r3, r4, r6
    9fd2:	9304      	str	r3, [sp, #16]
    9fd4:	d00d      	beq.n	9ff2 <_svfiprintf_r+0x6e>
    9fd6:	1ba3      	subs	r3, r4, r6
    9fd8:	0032      	movs	r2, r6
    9fda:	0039      	movs	r1, r7
    9fdc:	9802      	ldr	r0, [sp, #8]
    9fde:	f7ff ff6f 	bl	9ec0 <__ssputs_r>
    9fe2:	1c43      	adds	r3, r0, #1
    9fe4:	d100      	bne.n	9fe8 <_svfiprintf_r+0x64>
    9fe6:	e0b5      	b.n	a154 <_svfiprintf_r+0x1d0>
    9fe8:	696a      	ldr	r2, [r5, #20]
    9fea:	9b04      	ldr	r3, [sp, #16]
    9fec:	4694      	mov	ip, r2
    9fee:	4463      	add	r3, ip
    9ff0:	616b      	str	r3, [r5, #20]
    9ff2:	7823      	ldrb	r3, [r4, #0]
    9ff4:	2b00      	cmp	r3, #0
    9ff6:	d100      	bne.n	9ffa <_svfiprintf_r+0x76>
    9ff8:	e0ac      	b.n	a154 <_svfiprintf_r+0x1d0>
    9ffa:	2201      	movs	r2, #1
    9ffc:	2300      	movs	r3, #0
    9ffe:	4252      	negs	r2, r2
    a000:	606a      	str	r2, [r5, #4]
    a002:	a902      	add	r1, sp, #8
    a004:	3254      	adds	r2, #84	; 0x54
    a006:	1852      	adds	r2, r2, r1
    a008:	3401      	adds	r4, #1
    a00a:	602b      	str	r3, [r5, #0]
    a00c:	60eb      	str	r3, [r5, #12]
    a00e:	60ab      	str	r3, [r5, #8]
    a010:	7013      	strb	r3, [r2, #0]
    a012:	65ab      	str	r3, [r5, #88]	; 0x58
    a014:	4e58      	ldr	r6, [pc, #352]	; (a178 <_svfiprintf_r+0x1f4>)
    a016:	2205      	movs	r2, #5
    a018:	7821      	ldrb	r1, [r4, #0]
    a01a:	0030      	movs	r0, r6
    a01c:	f000 fc62 	bl	a8e4 <memchr>
    a020:	1c62      	adds	r2, r4, #1
    a022:	2800      	cmp	r0, #0
    a024:	d120      	bne.n	a068 <_svfiprintf_r+0xe4>
    a026:	6829      	ldr	r1, [r5, #0]
    a028:	06cb      	lsls	r3, r1, #27
    a02a:	d504      	bpl.n	a036 <_svfiprintf_r+0xb2>
    a02c:	2353      	movs	r3, #83	; 0x53
    a02e:	ae02      	add	r6, sp, #8
    a030:	3020      	adds	r0, #32
    a032:	199b      	adds	r3, r3, r6
    a034:	7018      	strb	r0, [r3, #0]
    a036:	070b      	lsls	r3, r1, #28
    a038:	d504      	bpl.n	a044 <_svfiprintf_r+0xc0>
    a03a:	2353      	movs	r3, #83	; 0x53
    a03c:	202b      	movs	r0, #43	; 0x2b
    a03e:	ae02      	add	r6, sp, #8
    a040:	199b      	adds	r3, r3, r6
    a042:	7018      	strb	r0, [r3, #0]
    a044:	7823      	ldrb	r3, [r4, #0]
    a046:	2b2a      	cmp	r3, #42	; 0x2a
    a048:	d016      	beq.n	a078 <_svfiprintf_r+0xf4>
    a04a:	2000      	movs	r0, #0
    a04c:	210a      	movs	r1, #10
    a04e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a050:	7822      	ldrb	r2, [r4, #0]
    a052:	3a30      	subs	r2, #48	; 0x30
    a054:	2a09      	cmp	r2, #9
    a056:	d955      	bls.n	a104 <_svfiprintf_r+0x180>
    a058:	2800      	cmp	r0, #0
    a05a:	d015      	beq.n	a088 <_svfiprintf_r+0x104>
    a05c:	9309      	str	r3, [sp, #36]	; 0x24
    a05e:	e013      	b.n	a088 <_svfiprintf_r+0x104>
    a060:	2b25      	cmp	r3, #37	; 0x25
    a062:	d0b5      	beq.n	9fd0 <_svfiprintf_r+0x4c>
    a064:	3401      	adds	r4, #1
    a066:	e7b0      	b.n	9fca <_svfiprintf_r+0x46>
    a068:	2301      	movs	r3, #1
    a06a:	1b80      	subs	r0, r0, r6
    a06c:	4083      	lsls	r3, r0
    a06e:	6829      	ldr	r1, [r5, #0]
    a070:	0014      	movs	r4, r2
    a072:	430b      	orrs	r3, r1
    a074:	602b      	str	r3, [r5, #0]
    a076:	e7cd      	b.n	a014 <_svfiprintf_r+0x90>
    a078:	9b05      	ldr	r3, [sp, #20]
    a07a:	1d18      	adds	r0, r3, #4
    a07c:	681b      	ldr	r3, [r3, #0]
    a07e:	9005      	str	r0, [sp, #20]
    a080:	2b00      	cmp	r3, #0
    a082:	db39      	blt.n	a0f8 <_svfiprintf_r+0x174>
    a084:	9309      	str	r3, [sp, #36]	; 0x24
    a086:	0014      	movs	r4, r2
    a088:	7823      	ldrb	r3, [r4, #0]
    a08a:	2b2e      	cmp	r3, #46	; 0x2e
    a08c:	d10b      	bne.n	a0a6 <_svfiprintf_r+0x122>
    a08e:	7863      	ldrb	r3, [r4, #1]
    a090:	1c62      	adds	r2, r4, #1
    a092:	2b2a      	cmp	r3, #42	; 0x2a
    a094:	d13e      	bne.n	a114 <_svfiprintf_r+0x190>
    a096:	9b05      	ldr	r3, [sp, #20]
    a098:	3402      	adds	r4, #2
    a09a:	1d1a      	adds	r2, r3, #4
    a09c:	681b      	ldr	r3, [r3, #0]
    a09e:	9205      	str	r2, [sp, #20]
    a0a0:	2b00      	cmp	r3, #0
    a0a2:	db34      	blt.n	a10e <_svfiprintf_r+0x18a>
    a0a4:	9307      	str	r3, [sp, #28]
    a0a6:	4e35      	ldr	r6, [pc, #212]	; (a17c <_svfiprintf_r+0x1f8>)
    a0a8:	7821      	ldrb	r1, [r4, #0]
    a0aa:	2203      	movs	r2, #3
    a0ac:	0030      	movs	r0, r6
    a0ae:	f000 fc19 	bl	a8e4 <memchr>
    a0b2:	2800      	cmp	r0, #0
    a0b4:	d006      	beq.n	a0c4 <_svfiprintf_r+0x140>
    a0b6:	2340      	movs	r3, #64	; 0x40
    a0b8:	1b80      	subs	r0, r0, r6
    a0ba:	4083      	lsls	r3, r0
    a0bc:	682a      	ldr	r2, [r5, #0]
    a0be:	3401      	adds	r4, #1
    a0c0:	4313      	orrs	r3, r2
    a0c2:	602b      	str	r3, [r5, #0]
    a0c4:	7821      	ldrb	r1, [r4, #0]
    a0c6:	2206      	movs	r2, #6
    a0c8:	482d      	ldr	r0, [pc, #180]	; (a180 <_svfiprintf_r+0x1fc>)
    a0ca:	1c66      	adds	r6, r4, #1
    a0cc:	7629      	strb	r1, [r5, #24]
    a0ce:	f000 fc09 	bl	a8e4 <memchr>
    a0d2:	2800      	cmp	r0, #0
    a0d4:	d046      	beq.n	a164 <_svfiprintf_r+0x1e0>
    a0d6:	4b2b      	ldr	r3, [pc, #172]	; (a184 <_svfiprintf_r+0x200>)
    a0d8:	2b00      	cmp	r3, #0
    a0da:	d12f      	bne.n	a13c <_svfiprintf_r+0x1b8>
    a0dc:	6829      	ldr	r1, [r5, #0]
    a0de:	9b05      	ldr	r3, [sp, #20]
    a0e0:	2207      	movs	r2, #7
    a0e2:	05c9      	lsls	r1, r1, #23
    a0e4:	d528      	bpl.n	a138 <_svfiprintf_r+0x1b4>
    a0e6:	189b      	adds	r3, r3, r2
    a0e8:	4393      	bics	r3, r2
    a0ea:	3308      	adds	r3, #8
    a0ec:	9305      	str	r3, [sp, #20]
    a0ee:	696b      	ldr	r3, [r5, #20]
    a0f0:	9a03      	ldr	r2, [sp, #12]
    a0f2:	189b      	adds	r3, r3, r2
    a0f4:	616b      	str	r3, [r5, #20]
    a0f6:	e767      	b.n	9fc8 <_svfiprintf_r+0x44>
    a0f8:	425b      	negs	r3, r3
    a0fa:	60eb      	str	r3, [r5, #12]
    a0fc:	2302      	movs	r3, #2
    a0fe:	430b      	orrs	r3, r1
    a100:	602b      	str	r3, [r5, #0]
    a102:	e7c0      	b.n	a086 <_svfiprintf_r+0x102>
    a104:	434b      	muls	r3, r1
    a106:	3401      	adds	r4, #1
    a108:	189b      	adds	r3, r3, r2
    a10a:	2001      	movs	r0, #1
    a10c:	e7a0      	b.n	a050 <_svfiprintf_r+0xcc>
    a10e:	2301      	movs	r3, #1
    a110:	425b      	negs	r3, r3
    a112:	e7c7      	b.n	a0a4 <_svfiprintf_r+0x120>
    a114:	2300      	movs	r3, #0
    a116:	0014      	movs	r4, r2
    a118:	200a      	movs	r0, #10
    a11a:	001a      	movs	r2, r3
    a11c:	606b      	str	r3, [r5, #4]
    a11e:	7821      	ldrb	r1, [r4, #0]
    a120:	3930      	subs	r1, #48	; 0x30
    a122:	2909      	cmp	r1, #9
    a124:	d903      	bls.n	a12e <_svfiprintf_r+0x1aa>
    a126:	2b00      	cmp	r3, #0
    a128:	d0bd      	beq.n	a0a6 <_svfiprintf_r+0x122>
    a12a:	9207      	str	r2, [sp, #28]
    a12c:	e7bb      	b.n	a0a6 <_svfiprintf_r+0x122>
    a12e:	4342      	muls	r2, r0
    a130:	3401      	adds	r4, #1
    a132:	1852      	adds	r2, r2, r1
    a134:	2301      	movs	r3, #1
    a136:	e7f2      	b.n	a11e <_svfiprintf_r+0x19a>
    a138:	3307      	adds	r3, #7
    a13a:	e7d5      	b.n	a0e8 <_svfiprintf_r+0x164>
    a13c:	ab05      	add	r3, sp, #20
    a13e:	9300      	str	r3, [sp, #0]
    a140:	003a      	movs	r2, r7
    a142:	4b11      	ldr	r3, [pc, #68]	; (a188 <_svfiprintf_r+0x204>)
    a144:	0029      	movs	r1, r5
    a146:	9802      	ldr	r0, [sp, #8]
    a148:	e000      	b.n	a14c <_svfiprintf_r+0x1c8>
    a14a:	bf00      	nop
    a14c:	9003      	str	r0, [sp, #12]
    a14e:	9b03      	ldr	r3, [sp, #12]
    a150:	3301      	adds	r3, #1
    a152:	d1cc      	bne.n	a0ee <_svfiprintf_r+0x16a>
    a154:	89bb      	ldrh	r3, [r7, #12]
    a156:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a158:	065b      	lsls	r3, r3, #25
    a15a:	d400      	bmi.n	a15e <_svfiprintf_r+0x1da>
    a15c:	e729      	b.n	9fb2 <_svfiprintf_r+0x2e>
    a15e:	2001      	movs	r0, #1
    a160:	4240      	negs	r0, r0
    a162:	e726      	b.n	9fb2 <_svfiprintf_r+0x2e>
    a164:	ab05      	add	r3, sp, #20
    a166:	9300      	str	r3, [sp, #0]
    a168:	003a      	movs	r2, r7
    a16a:	4b07      	ldr	r3, [pc, #28]	; (a188 <_svfiprintf_r+0x204>)
    a16c:	0029      	movs	r1, r5
    a16e:	9802      	ldr	r0, [sp, #8]
    a170:	f000 f9be 	bl	a4f0 <_printf_i>
    a174:	e7ea      	b.n	a14c <_svfiprintf_r+0x1c8>
    a176:	46c0      	nop			; (mov r8, r8)
    a178:	0000bd0c 	.word	0x0000bd0c
    a17c:	0000bd12 	.word	0x0000bd12
    a180:	0000bd16 	.word	0x0000bd16
    a184:	00000000 	.word	0x00000000
    a188:	00009ec1 	.word	0x00009ec1

0000a18c <__sfputc_r>:
    a18c:	6893      	ldr	r3, [r2, #8]
    a18e:	b510      	push	{r4, lr}
    a190:	3b01      	subs	r3, #1
    a192:	6093      	str	r3, [r2, #8]
    a194:	2b00      	cmp	r3, #0
    a196:	da05      	bge.n	a1a4 <__sfputc_r+0x18>
    a198:	6994      	ldr	r4, [r2, #24]
    a19a:	42a3      	cmp	r3, r4
    a19c:	db08      	blt.n	a1b0 <__sfputc_r+0x24>
    a19e:	b2cb      	uxtb	r3, r1
    a1a0:	2b0a      	cmp	r3, #10
    a1a2:	d005      	beq.n	a1b0 <__sfputc_r+0x24>
    a1a4:	6813      	ldr	r3, [r2, #0]
    a1a6:	1c58      	adds	r0, r3, #1
    a1a8:	6010      	str	r0, [r2, #0]
    a1aa:	7019      	strb	r1, [r3, #0]
    a1ac:	b2c8      	uxtb	r0, r1
    a1ae:	bd10      	pop	{r4, pc}
    a1b0:	f7ff fbc4 	bl	993c <__swbuf_r>
    a1b4:	e7fb      	b.n	a1ae <__sfputc_r+0x22>

0000a1b6 <__sfputs_r>:
    a1b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a1b8:	0006      	movs	r6, r0
    a1ba:	000f      	movs	r7, r1
    a1bc:	0014      	movs	r4, r2
    a1be:	18d5      	adds	r5, r2, r3
    a1c0:	42ac      	cmp	r4, r5
    a1c2:	d101      	bne.n	a1c8 <__sfputs_r+0x12>
    a1c4:	2000      	movs	r0, #0
    a1c6:	e007      	b.n	a1d8 <__sfputs_r+0x22>
    a1c8:	7821      	ldrb	r1, [r4, #0]
    a1ca:	003a      	movs	r2, r7
    a1cc:	0030      	movs	r0, r6
    a1ce:	f7ff ffdd 	bl	a18c <__sfputc_r>
    a1d2:	3401      	adds	r4, #1
    a1d4:	1c43      	adds	r3, r0, #1
    a1d6:	d1f3      	bne.n	a1c0 <__sfputs_r+0xa>
    a1d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000a1dc <_vfiprintf_r>:
    a1dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a1de:	b09f      	sub	sp, #124	; 0x7c
    a1e0:	0006      	movs	r6, r0
    a1e2:	000f      	movs	r7, r1
    a1e4:	0014      	movs	r4, r2
    a1e6:	9305      	str	r3, [sp, #20]
    a1e8:	2800      	cmp	r0, #0
    a1ea:	d004      	beq.n	a1f6 <_vfiprintf_r+0x1a>
    a1ec:	6983      	ldr	r3, [r0, #24]
    a1ee:	2b00      	cmp	r3, #0
    a1f0:	d101      	bne.n	a1f6 <_vfiprintf_r+0x1a>
    a1f2:	f7ff fd67 	bl	9cc4 <__sinit>
    a1f6:	4b7f      	ldr	r3, [pc, #508]	; (a3f4 <_vfiprintf_r+0x218>)
    a1f8:	429f      	cmp	r7, r3
    a1fa:	d15c      	bne.n	a2b6 <_vfiprintf_r+0xda>
    a1fc:	6877      	ldr	r7, [r6, #4]
    a1fe:	89bb      	ldrh	r3, [r7, #12]
    a200:	071b      	lsls	r3, r3, #28
    a202:	d562      	bpl.n	a2ca <_vfiprintf_r+0xee>
    a204:	693b      	ldr	r3, [r7, #16]
    a206:	2b00      	cmp	r3, #0
    a208:	d05f      	beq.n	a2ca <_vfiprintf_r+0xee>
    a20a:	2300      	movs	r3, #0
    a20c:	ad06      	add	r5, sp, #24
    a20e:	616b      	str	r3, [r5, #20]
    a210:	3320      	adds	r3, #32
    a212:	766b      	strb	r3, [r5, #25]
    a214:	3310      	adds	r3, #16
    a216:	76ab      	strb	r3, [r5, #26]
    a218:	9402      	str	r4, [sp, #8]
    a21a:	9c02      	ldr	r4, [sp, #8]
    a21c:	7823      	ldrb	r3, [r4, #0]
    a21e:	2b00      	cmp	r3, #0
    a220:	d15d      	bne.n	a2de <_vfiprintf_r+0x102>
    a222:	9b02      	ldr	r3, [sp, #8]
    a224:	1ae3      	subs	r3, r4, r3
    a226:	9304      	str	r3, [sp, #16]
    a228:	d00d      	beq.n	a246 <_vfiprintf_r+0x6a>
    a22a:	9b04      	ldr	r3, [sp, #16]
    a22c:	9a02      	ldr	r2, [sp, #8]
    a22e:	0039      	movs	r1, r7
    a230:	0030      	movs	r0, r6
    a232:	f7ff ffc0 	bl	a1b6 <__sfputs_r>
    a236:	1c43      	adds	r3, r0, #1
    a238:	d100      	bne.n	a23c <_vfiprintf_r+0x60>
    a23a:	e0cc      	b.n	a3d6 <_vfiprintf_r+0x1fa>
    a23c:	696a      	ldr	r2, [r5, #20]
    a23e:	9b04      	ldr	r3, [sp, #16]
    a240:	4694      	mov	ip, r2
    a242:	4463      	add	r3, ip
    a244:	616b      	str	r3, [r5, #20]
    a246:	7823      	ldrb	r3, [r4, #0]
    a248:	2b00      	cmp	r3, #0
    a24a:	d100      	bne.n	a24e <_vfiprintf_r+0x72>
    a24c:	e0c3      	b.n	a3d6 <_vfiprintf_r+0x1fa>
    a24e:	2201      	movs	r2, #1
    a250:	2300      	movs	r3, #0
    a252:	4252      	negs	r2, r2
    a254:	606a      	str	r2, [r5, #4]
    a256:	a902      	add	r1, sp, #8
    a258:	3254      	adds	r2, #84	; 0x54
    a25a:	1852      	adds	r2, r2, r1
    a25c:	3401      	adds	r4, #1
    a25e:	602b      	str	r3, [r5, #0]
    a260:	60eb      	str	r3, [r5, #12]
    a262:	60ab      	str	r3, [r5, #8]
    a264:	7013      	strb	r3, [r2, #0]
    a266:	65ab      	str	r3, [r5, #88]	; 0x58
    a268:	7821      	ldrb	r1, [r4, #0]
    a26a:	2205      	movs	r2, #5
    a26c:	4862      	ldr	r0, [pc, #392]	; (a3f8 <_vfiprintf_r+0x21c>)
    a26e:	f000 fb39 	bl	a8e4 <memchr>
    a272:	1c63      	adds	r3, r4, #1
    a274:	469c      	mov	ip, r3
    a276:	2800      	cmp	r0, #0
    a278:	d135      	bne.n	a2e6 <_vfiprintf_r+0x10a>
    a27a:	6829      	ldr	r1, [r5, #0]
    a27c:	06cb      	lsls	r3, r1, #27
    a27e:	d504      	bpl.n	a28a <_vfiprintf_r+0xae>
    a280:	2353      	movs	r3, #83	; 0x53
    a282:	aa02      	add	r2, sp, #8
    a284:	3020      	adds	r0, #32
    a286:	189b      	adds	r3, r3, r2
    a288:	7018      	strb	r0, [r3, #0]
    a28a:	070b      	lsls	r3, r1, #28
    a28c:	d504      	bpl.n	a298 <_vfiprintf_r+0xbc>
    a28e:	2353      	movs	r3, #83	; 0x53
    a290:	202b      	movs	r0, #43	; 0x2b
    a292:	aa02      	add	r2, sp, #8
    a294:	189b      	adds	r3, r3, r2
    a296:	7018      	strb	r0, [r3, #0]
    a298:	7823      	ldrb	r3, [r4, #0]
    a29a:	2b2a      	cmp	r3, #42	; 0x2a
    a29c:	d02c      	beq.n	a2f8 <_vfiprintf_r+0x11c>
    a29e:	2000      	movs	r0, #0
    a2a0:	210a      	movs	r1, #10
    a2a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a2a4:	7822      	ldrb	r2, [r4, #0]
    a2a6:	3a30      	subs	r2, #48	; 0x30
    a2a8:	2a09      	cmp	r2, #9
    a2aa:	d800      	bhi.n	a2ae <_vfiprintf_r+0xd2>
    a2ac:	e06b      	b.n	a386 <_vfiprintf_r+0x1aa>
    a2ae:	2800      	cmp	r0, #0
    a2b0:	d02a      	beq.n	a308 <_vfiprintf_r+0x12c>
    a2b2:	9309      	str	r3, [sp, #36]	; 0x24
    a2b4:	e028      	b.n	a308 <_vfiprintf_r+0x12c>
    a2b6:	4b51      	ldr	r3, [pc, #324]	; (a3fc <_vfiprintf_r+0x220>)
    a2b8:	429f      	cmp	r7, r3
    a2ba:	d101      	bne.n	a2c0 <_vfiprintf_r+0xe4>
    a2bc:	68b7      	ldr	r7, [r6, #8]
    a2be:	e79e      	b.n	a1fe <_vfiprintf_r+0x22>
    a2c0:	4b4f      	ldr	r3, [pc, #316]	; (a400 <_vfiprintf_r+0x224>)
    a2c2:	429f      	cmp	r7, r3
    a2c4:	d19b      	bne.n	a1fe <_vfiprintf_r+0x22>
    a2c6:	68f7      	ldr	r7, [r6, #12]
    a2c8:	e799      	b.n	a1fe <_vfiprintf_r+0x22>
    a2ca:	0039      	movs	r1, r7
    a2cc:	0030      	movs	r0, r6
    a2ce:	f7ff fb8b 	bl	99e8 <__swsetup_r>
    a2d2:	2800      	cmp	r0, #0
    a2d4:	d099      	beq.n	a20a <_vfiprintf_r+0x2e>
    a2d6:	2001      	movs	r0, #1
    a2d8:	4240      	negs	r0, r0
    a2da:	b01f      	add	sp, #124	; 0x7c
    a2dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a2de:	2b25      	cmp	r3, #37	; 0x25
    a2e0:	d09f      	beq.n	a222 <_vfiprintf_r+0x46>
    a2e2:	3401      	adds	r4, #1
    a2e4:	e79a      	b.n	a21c <_vfiprintf_r+0x40>
    a2e6:	4b44      	ldr	r3, [pc, #272]	; (a3f8 <_vfiprintf_r+0x21c>)
    a2e8:	6829      	ldr	r1, [r5, #0]
    a2ea:	1ac0      	subs	r0, r0, r3
    a2ec:	2301      	movs	r3, #1
    a2ee:	4083      	lsls	r3, r0
    a2f0:	430b      	orrs	r3, r1
    a2f2:	602b      	str	r3, [r5, #0]
    a2f4:	4664      	mov	r4, ip
    a2f6:	e7b7      	b.n	a268 <_vfiprintf_r+0x8c>
    a2f8:	9b05      	ldr	r3, [sp, #20]
    a2fa:	1d18      	adds	r0, r3, #4
    a2fc:	681b      	ldr	r3, [r3, #0]
    a2fe:	9005      	str	r0, [sp, #20]
    a300:	2b00      	cmp	r3, #0
    a302:	db3a      	blt.n	a37a <_vfiprintf_r+0x19e>
    a304:	9309      	str	r3, [sp, #36]	; 0x24
    a306:	4664      	mov	r4, ip
    a308:	7823      	ldrb	r3, [r4, #0]
    a30a:	2b2e      	cmp	r3, #46	; 0x2e
    a30c:	d10b      	bne.n	a326 <_vfiprintf_r+0x14a>
    a30e:	7863      	ldrb	r3, [r4, #1]
    a310:	1c62      	adds	r2, r4, #1
    a312:	2b2a      	cmp	r3, #42	; 0x2a
    a314:	d13f      	bne.n	a396 <_vfiprintf_r+0x1ba>
    a316:	9b05      	ldr	r3, [sp, #20]
    a318:	3402      	adds	r4, #2
    a31a:	1d1a      	adds	r2, r3, #4
    a31c:	681b      	ldr	r3, [r3, #0]
    a31e:	9205      	str	r2, [sp, #20]
    a320:	2b00      	cmp	r3, #0
    a322:	db35      	blt.n	a390 <_vfiprintf_r+0x1b4>
    a324:	9307      	str	r3, [sp, #28]
    a326:	7821      	ldrb	r1, [r4, #0]
    a328:	2203      	movs	r2, #3
    a32a:	4836      	ldr	r0, [pc, #216]	; (a404 <_vfiprintf_r+0x228>)
    a32c:	f000 fada 	bl	a8e4 <memchr>
    a330:	2800      	cmp	r0, #0
    a332:	d007      	beq.n	a344 <_vfiprintf_r+0x168>
    a334:	4b33      	ldr	r3, [pc, #204]	; (a404 <_vfiprintf_r+0x228>)
    a336:	682a      	ldr	r2, [r5, #0]
    a338:	1ac0      	subs	r0, r0, r3
    a33a:	2340      	movs	r3, #64	; 0x40
    a33c:	4083      	lsls	r3, r0
    a33e:	4313      	orrs	r3, r2
    a340:	602b      	str	r3, [r5, #0]
    a342:	3401      	adds	r4, #1
    a344:	7821      	ldrb	r1, [r4, #0]
    a346:	1c63      	adds	r3, r4, #1
    a348:	2206      	movs	r2, #6
    a34a:	482f      	ldr	r0, [pc, #188]	; (a408 <_vfiprintf_r+0x22c>)
    a34c:	9302      	str	r3, [sp, #8]
    a34e:	7629      	strb	r1, [r5, #24]
    a350:	f000 fac8 	bl	a8e4 <memchr>
    a354:	2800      	cmp	r0, #0
    a356:	d044      	beq.n	a3e2 <_vfiprintf_r+0x206>
    a358:	4b2c      	ldr	r3, [pc, #176]	; (a40c <_vfiprintf_r+0x230>)
    a35a:	2b00      	cmp	r3, #0
    a35c:	d12f      	bne.n	a3be <_vfiprintf_r+0x1e2>
    a35e:	6829      	ldr	r1, [r5, #0]
    a360:	9b05      	ldr	r3, [sp, #20]
    a362:	2207      	movs	r2, #7
    a364:	05c9      	lsls	r1, r1, #23
    a366:	d528      	bpl.n	a3ba <_vfiprintf_r+0x1de>
    a368:	189b      	adds	r3, r3, r2
    a36a:	4393      	bics	r3, r2
    a36c:	3308      	adds	r3, #8
    a36e:	9305      	str	r3, [sp, #20]
    a370:	696b      	ldr	r3, [r5, #20]
    a372:	9a03      	ldr	r2, [sp, #12]
    a374:	189b      	adds	r3, r3, r2
    a376:	616b      	str	r3, [r5, #20]
    a378:	e74f      	b.n	a21a <_vfiprintf_r+0x3e>
    a37a:	425b      	negs	r3, r3
    a37c:	60eb      	str	r3, [r5, #12]
    a37e:	2302      	movs	r3, #2
    a380:	430b      	orrs	r3, r1
    a382:	602b      	str	r3, [r5, #0]
    a384:	e7bf      	b.n	a306 <_vfiprintf_r+0x12a>
    a386:	434b      	muls	r3, r1
    a388:	3401      	adds	r4, #1
    a38a:	189b      	adds	r3, r3, r2
    a38c:	2001      	movs	r0, #1
    a38e:	e789      	b.n	a2a4 <_vfiprintf_r+0xc8>
    a390:	2301      	movs	r3, #1
    a392:	425b      	negs	r3, r3
    a394:	e7c6      	b.n	a324 <_vfiprintf_r+0x148>
    a396:	2300      	movs	r3, #0
    a398:	0014      	movs	r4, r2
    a39a:	200a      	movs	r0, #10
    a39c:	001a      	movs	r2, r3
    a39e:	606b      	str	r3, [r5, #4]
    a3a0:	7821      	ldrb	r1, [r4, #0]
    a3a2:	3930      	subs	r1, #48	; 0x30
    a3a4:	2909      	cmp	r1, #9
    a3a6:	d903      	bls.n	a3b0 <_vfiprintf_r+0x1d4>
    a3a8:	2b00      	cmp	r3, #0
    a3aa:	d0bc      	beq.n	a326 <_vfiprintf_r+0x14a>
    a3ac:	9207      	str	r2, [sp, #28]
    a3ae:	e7ba      	b.n	a326 <_vfiprintf_r+0x14a>
    a3b0:	4342      	muls	r2, r0
    a3b2:	3401      	adds	r4, #1
    a3b4:	1852      	adds	r2, r2, r1
    a3b6:	2301      	movs	r3, #1
    a3b8:	e7f2      	b.n	a3a0 <_vfiprintf_r+0x1c4>
    a3ba:	3307      	adds	r3, #7
    a3bc:	e7d5      	b.n	a36a <_vfiprintf_r+0x18e>
    a3be:	ab05      	add	r3, sp, #20
    a3c0:	9300      	str	r3, [sp, #0]
    a3c2:	003a      	movs	r2, r7
    a3c4:	4b12      	ldr	r3, [pc, #72]	; (a410 <_vfiprintf_r+0x234>)
    a3c6:	0029      	movs	r1, r5
    a3c8:	0030      	movs	r0, r6
    a3ca:	e000      	b.n	a3ce <_vfiprintf_r+0x1f2>
    a3cc:	bf00      	nop
    a3ce:	9003      	str	r0, [sp, #12]
    a3d0:	9b03      	ldr	r3, [sp, #12]
    a3d2:	3301      	adds	r3, #1
    a3d4:	d1cc      	bne.n	a370 <_vfiprintf_r+0x194>
    a3d6:	89bb      	ldrh	r3, [r7, #12]
    a3d8:	065b      	lsls	r3, r3, #25
    a3da:	d500      	bpl.n	a3de <_vfiprintf_r+0x202>
    a3dc:	e77b      	b.n	a2d6 <_vfiprintf_r+0xfa>
    a3de:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a3e0:	e77b      	b.n	a2da <_vfiprintf_r+0xfe>
    a3e2:	ab05      	add	r3, sp, #20
    a3e4:	9300      	str	r3, [sp, #0]
    a3e6:	003a      	movs	r2, r7
    a3e8:	4b09      	ldr	r3, [pc, #36]	; (a410 <_vfiprintf_r+0x234>)
    a3ea:	0029      	movs	r1, r5
    a3ec:	0030      	movs	r0, r6
    a3ee:	f000 f87f 	bl	a4f0 <_printf_i>
    a3f2:	e7ec      	b.n	a3ce <_vfiprintf_r+0x1f2>
    a3f4:	0000bccc 	.word	0x0000bccc
    a3f8:	0000bd0c 	.word	0x0000bd0c
    a3fc:	0000bcec 	.word	0x0000bcec
    a400:	0000bcac 	.word	0x0000bcac
    a404:	0000bd12 	.word	0x0000bd12
    a408:	0000bd16 	.word	0x0000bd16
    a40c:	00000000 	.word	0x00000000
    a410:	0000a1b7 	.word	0x0000a1b7

0000a414 <_printf_common>:
    a414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a416:	0015      	movs	r5, r2
    a418:	9301      	str	r3, [sp, #4]
    a41a:	688a      	ldr	r2, [r1, #8]
    a41c:	690b      	ldr	r3, [r1, #16]
    a41e:	9000      	str	r0, [sp, #0]
    a420:	000c      	movs	r4, r1
    a422:	4293      	cmp	r3, r2
    a424:	da00      	bge.n	a428 <_printf_common+0x14>
    a426:	0013      	movs	r3, r2
    a428:	0022      	movs	r2, r4
    a42a:	602b      	str	r3, [r5, #0]
    a42c:	3243      	adds	r2, #67	; 0x43
    a42e:	7812      	ldrb	r2, [r2, #0]
    a430:	2a00      	cmp	r2, #0
    a432:	d001      	beq.n	a438 <_printf_common+0x24>
    a434:	3301      	adds	r3, #1
    a436:	602b      	str	r3, [r5, #0]
    a438:	6823      	ldr	r3, [r4, #0]
    a43a:	069b      	lsls	r3, r3, #26
    a43c:	d502      	bpl.n	a444 <_printf_common+0x30>
    a43e:	682b      	ldr	r3, [r5, #0]
    a440:	3302      	adds	r3, #2
    a442:	602b      	str	r3, [r5, #0]
    a444:	2706      	movs	r7, #6
    a446:	6823      	ldr	r3, [r4, #0]
    a448:	401f      	ands	r7, r3
    a44a:	d027      	beq.n	a49c <_printf_common+0x88>
    a44c:	0023      	movs	r3, r4
    a44e:	3343      	adds	r3, #67	; 0x43
    a450:	781b      	ldrb	r3, [r3, #0]
    a452:	1e5a      	subs	r2, r3, #1
    a454:	4193      	sbcs	r3, r2
    a456:	6822      	ldr	r2, [r4, #0]
    a458:	0692      	lsls	r2, r2, #26
    a45a:	d430      	bmi.n	a4be <_printf_common+0xaa>
    a45c:	0022      	movs	r2, r4
    a45e:	9901      	ldr	r1, [sp, #4]
    a460:	3243      	adds	r2, #67	; 0x43
    a462:	9800      	ldr	r0, [sp, #0]
    a464:	9e08      	ldr	r6, [sp, #32]
    a466:	47b0      	blx	r6
    a468:	1c43      	adds	r3, r0, #1
    a46a:	d025      	beq.n	a4b8 <_printf_common+0xa4>
    a46c:	2306      	movs	r3, #6
    a46e:	6820      	ldr	r0, [r4, #0]
    a470:	682a      	ldr	r2, [r5, #0]
    a472:	68e1      	ldr	r1, [r4, #12]
    a474:	4003      	ands	r3, r0
    a476:	2500      	movs	r5, #0
    a478:	2b04      	cmp	r3, #4
    a47a:	d103      	bne.n	a484 <_printf_common+0x70>
    a47c:	1a8d      	subs	r5, r1, r2
    a47e:	43eb      	mvns	r3, r5
    a480:	17db      	asrs	r3, r3, #31
    a482:	401d      	ands	r5, r3
    a484:	68a3      	ldr	r3, [r4, #8]
    a486:	6922      	ldr	r2, [r4, #16]
    a488:	4293      	cmp	r3, r2
    a48a:	dd01      	ble.n	a490 <_printf_common+0x7c>
    a48c:	1a9b      	subs	r3, r3, r2
    a48e:	18ed      	adds	r5, r5, r3
    a490:	2700      	movs	r7, #0
    a492:	42bd      	cmp	r5, r7
    a494:	d120      	bne.n	a4d8 <_printf_common+0xc4>
    a496:	2000      	movs	r0, #0
    a498:	e010      	b.n	a4bc <_printf_common+0xa8>
    a49a:	3701      	adds	r7, #1
    a49c:	68e3      	ldr	r3, [r4, #12]
    a49e:	682a      	ldr	r2, [r5, #0]
    a4a0:	1a9b      	subs	r3, r3, r2
    a4a2:	429f      	cmp	r7, r3
    a4a4:	dad2      	bge.n	a44c <_printf_common+0x38>
    a4a6:	0022      	movs	r2, r4
    a4a8:	2301      	movs	r3, #1
    a4aa:	3219      	adds	r2, #25
    a4ac:	9901      	ldr	r1, [sp, #4]
    a4ae:	9800      	ldr	r0, [sp, #0]
    a4b0:	9e08      	ldr	r6, [sp, #32]
    a4b2:	47b0      	blx	r6
    a4b4:	1c43      	adds	r3, r0, #1
    a4b6:	d1f0      	bne.n	a49a <_printf_common+0x86>
    a4b8:	2001      	movs	r0, #1
    a4ba:	4240      	negs	r0, r0
    a4bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    a4be:	2030      	movs	r0, #48	; 0x30
    a4c0:	18e1      	adds	r1, r4, r3
    a4c2:	3143      	adds	r1, #67	; 0x43
    a4c4:	7008      	strb	r0, [r1, #0]
    a4c6:	0021      	movs	r1, r4
    a4c8:	1c5a      	adds	r2, r3, #1
    a4ca:	3145      	adds	r1, #69	; 0x45
    a4cc:	7809      	ldrb	r1, [r1, #0]
    a4ce:	18a2      	adds	r2, r4, r2
    a4d0:	3243      	adds	r2, #67	; 0x43
    a4d2:	3302      	adds	r3, #2
    a4d4:	7011      	strb	r1, [r2, #0]
    a4d6:	e7c1      	b.n	a45c <_printf_common+0x48>
    a4d8:	0022      	movs	r2, r4
    a4da:	2301      	movs	r3, #1
    a4dc:	321a      	adds	r2, #26
    a4de:	9901      	ldr	r1, [sp, #4]
    a4e0:	9800      	ldr	r0, [sp, #0]
    a4e2:	9e08      	ldr	r6, [sp, #32]
    a4e4:	47b0      	blx	r6
    a4e6:	1c43      	adds	r3, r0, #1
    a4e8:	d0e6      	beq.n	a4b8 <_printf_common+0xa4>
    a4ea:	3701      	adds	r7, #1
    a4ec:	e7d1      	b.n	a492 <_printf_common+0x7e>
	...

0000a4f0 <_printf_i>:
    a4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a4f2:	b08b      	sub	sp, #44	; 0x2c
    a4f4:	9206      	str	r2, [sp, #24]
    a4f6:	000a      	movs	r2, r1
    a4f8:	3243      	adds	r2, #67	; 0x43
    a4fa:	9307      	str	r3, [sp, #28]
    a4fc:	9005      	str	r0, [sp, #20]
    a4fe:	9204      	str	r2, [sp, #16]
    a500:	7e0a      	ldrb	r2, [r1, #24]
    a502:	000c      	movs	r4, r1
    a504:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a506:	2a6e      	cmp	r2, #110	; 0x6e
    a508:	d100      	bne.n	a50c <_printf_i+0x1c>
    a50a:	e08f      	b.n	a62c <_printf_i+0x13c>
    a50c:	d817      	bhi.n	a53e <_printf_i+0x4e>
    a50e:	2a63      	cmp	r2, #99	; 0x63
    a510:	d02c      	beq.n	a56c <_printf_i+0x7c>
    a512:	d808      	bhi.n	a526 <_printf_i+0x36>
    a514:	2a00      	cmp	r2, #0
    a516:	d100      	bne.n	a51a <_printf_i+0x2a>
    a518:	e099      	b.n	a64e <_printf_i+0x15e>
    a51a:	2a58      	cmp	r2, #88	; 0x58
    a51c:	d054      	beq.n	a5c8 <_printf_i+0xd8>
    a51e:	0026      	movs	r6, r4
    a520:	3642      	adds	r6, #66	; 0x42
    a522:	7032      	strb	r2, [r6, #0]
    a524:	e029      	b.n	a57a <_printf_i+0x8a>
    a526:	2a64      	cmp	r2, #100	; 0x64
    a528:	d001      	beq.n	a52e <_printf_i+0x3e>
    a52a:	2a69      	cmp	r2, #105	; 0x69
    a52c:	d1f7      	bne.n	a51e <_printf_i+0x2e>
    a52e:	6821      	ldr	r1, [r4, #0]
    a530:	681a      	ldr	r2, [r3, #0]
    a532:	0608      	lsls	r0, r1, #24
    a534:	d523      	bpl.n	a57e <_printf_i+0x8e>
    a536:	1d11      	adds	r1, r2, #4
    a538:	6019      	str	r1, [r3, #0]
    a53a:	6815      	ldr	r5, [r2, #0]
    a53c:	e025      	b.n	a58a <_printf_i+0x9a>
    a53e:	2a73      	cmp	r2, #115	; 0x73
    a540:	d100      	bne.n	a544 <_printf_i+0x54>
    a542:	e088      	b.n	a656 <_printf_i+0x166>
    a544:	d808      	bhi.n	a558 <_printf_i+0x68>
    a546:	2a6f      	cmp	r2, #111	; 0x6f
    a548:	d029      	beq.n	a59e <_printf_i+0xae>
    a54a:	2a70      	cmp	r2, #112	; 0x70
    a54c:	d1e7      	bne.n	a51e <_printf_i+0x2e>
    a54e:	2220      	movs	r2, #32
    a550:	6809      	ldr	r1, [r1, #0]
    a552:	430a      	orrs	r2, r1
    a554:	6022      	str	r2, [r4, #0]
    a556:	e003      	b.n	a560 <_printf_i+0x70>
    a558:	2a75      	cmp	r2, #117	; 0x75
    a55a:	d020      	beq.n	a59e <_printf_i+0xae>
    a55c:	2a78      	cmp	r2, #120	; 0x78
    a55e:	d1de      	bne.n	a51e <_printf_i+0x2e>
    a560:	0022      	movs	r2, r4
    a562:	2178      	movs	r1, #120	; 0x78
    a564:	3245      	adds	r2, #69	; 0x45
    a566:	7011      	strb	r1, [r2, #0]
    a568:	4a6c      	ldr	r2, [pc, #432]	; (a71c <_printf_i+0x22c>)
    a56a:	e030      	b.n	a5ce <_printf_i+0xde>
    a56c:	000e      	movs	r6, r1
    a56e:	681a      	ldr	r2, [r3, #0]
    a570:	3642      	adds	r6, #66	; 0x42
    a572:	1d11      	adds	r1, r2, #4
    a574:	6019      	str	r1, [r3, #0]
    a576:	6813      	ldr	r3, [r2, #0]
    a578:	7033      	strb	r3, [r6, #0]
    a57a:	2301      	movs	r3, #1
    a57c:	e079      	b.n	a672 <_printf_i+0x182>
    a57e:	0649      	lsls	r1, r1, #25
    a580:	d5d9      	bpl.n	a536 <_printf_i+0x46>
    a582:	1d11      	adds	r1, r2, #4
    a584:	6019      	str	r1, [r3, #0]
    a586:	2300      	movs	r3, #0
    a588:	5ed5      	ldrsh	r5, [r2, r3]
    a58a:	2d00      	cmp	r5, #0
    a58c:	da03      	bge.n	a596 <_printf_i+0xa6>
    a58e:	232d      	movs	r3, #45	; 0x2d
    a590:	9a04      	ldr	r2, [sp, #16]
    a592:	426d      	negs	r5, r5
    a594:	7013      	strb	r3, [r2, #0]
    a596:	4b62      	ldr	r3, [pc, #392]	; (a720 <_printf_i+0x230>)
    a598:	270a      	movs	r7, #10
    a59a:	9303      	str	r3, [sp, #12]
    a59c:	e02f      	b.n	a5fe <_printf_i+0x10e>
    a59e:	6820      	ldr	r0, [r4, #0]
    a5a0:	6819      	ldr	r1, [r3, #0]
    a5a2:	0605      	lsls	r5, r0, #24
    a5a4:	d503      	bpl.n	a5ae <_printf_i+0xbe>
    a5a6:	1d08      	adds	r0, r1, #4
    a5a8:	6018      	str	r0, [r3, #0]
    a5aa:	680d      	ldr	r5, [r1, #0]
    a5ac:	e005      	b.n	a5ba <_printf_i+0xca>
    a5ae:	0640      	lsls	r0, r0, #25
    a5b0:	d5f9      	bpl.n	a5a6 <_printf_i+0xb6>
    a5b2:	680d      	ldr	r5, [r1, #0]
    a5b4:	1d08      	adds	r0, r1, #4
    a5b6:	6018      	str	r0, [r3, #0]
    a5b8:	b2ad      	uxth	r5, r5
    a5ba:	4b59      	ldr	r3, [pc, #356]	; (a720 <_printf_i+0x230>)
    a5bc:	2708      	movs	r7, #8
    a5be:	9303      	str	r3, [sp, #12]
    a5c0:	2a6f      	cmp	r2, #111	; 0x6f
    a5c2:	d018      	beq.n	a5f6 <_printf_i+0x106>
    a5c4:	270a      	movs	r7, #10
    a5c6:	e016      	b.n	a5f6 <_printf_i+0x106>
    a5c8:	3145      	adds	r1, #69	; 0x45
    a5ca:	700a      	strb	r2, [r1, #0]
    a5cc:	4a54      	ldr	r2, [pc, #336]	; (a720 <_printf_i+0x230>)
    a5ce:	9203      	str	r2, [sp, #12]
    a5d0:	681a      	ldr	r2, [r3, #0]
    a5d2:	6821      	ldr	r1, [r4, #0]
    a5d4:	1d10      	adds	r0, r2, #4
    a5d6:	6018      	str	r0, [r3, #0]
    a5d8:	6815      	ldr	r5, [r2, #0]
    a5da:	0608      	lsls	r0, r1, #24
    a5dc:	d522      	bpl.n	a624 <_printf_i+0x134>
    a5de:	07cb      	lsls	r3, r1, #31
    a5e0:	d502      	bpl.n	a5e8 <_printf_i+0xf8>
    a5e2:	2320      	movs	r3, #32
    a5e4:	4319      	orrs	r1, r3
    a5e6:	6021      	str	r1, [r4, #0]
    a5e8:	2710      	movs	r7, #16
    a5ea:	2d00      	cmp	r5, #0
    a5ec:	d103      	bne.n	a5f6 <_printf_i+0x106>
    a5ee:	2320      	movs	r3, #32
    a5f0:	6822      	ldr	r2, [r4, #0]
    a5f2:	439a      	bics	r2, r3
    a5f4:	6022      	str	r2, [r4, #0]
    a5f6:	0023      	movs	r3, r4
    a5f8:	2200      	movs	r2, #0
    a5fa:	3343      	adds	r3, #67	; 0x43
    a5fc:	701a      	strb	r2, [r3, #0]
    a5fe:	6863      	ldr	r3, [r4, #4]
    a600:	60a3      	str	r3, [r4, #8]
    a602:	2b00      	cmp	r3, #0
    a604:	db5c      	blt.n	a6c0 <_printf_i+0x1d0>
    a606:	2204      	movs	r2, #4
    a608:	6821      	ldr	r1, [r4, #0]
    a60a:	4391      	bics	r1, r2
    a60c:	6021      	str	r1, [r4, #0]
    a60e:	2d00      	cmp	r5, #0
    a610:	d158      	bne.n	a6c4 <_printf_i+0x1d4>
    a612:	9e04      	ldr	r6, [sp, #16]
    a614:	2b00      	cmp	r3, #0
    a616:	d064      	beq.n	a6e2 <_printf_i+0x1f2>
    a618:	0026      	movs	r6, r4
    a61a:	9b03      	ldr	r3, [sp, #12]
    a61c:	3642      	adds	r6, #66	; 0x42
    a61e:	781b      	ldrb	r3, [r3, #0]
    a620:	7033      	strb	r3, [r6, #0]
    a622:	e05e      	b.n	a6e2 <_printf_i+0x1f2>
    a624:	0648      	lsls	r0, r1, #25
    a626:	d5da      	bpl.n	a5de <_printf_i+0xee>
    a628:	b2ad      	uxth	r5, r5
    a62a:	e7d8      	b.n	a5de <_printf_i+0xee>
    a62c:	6809      	ldr	r1, [r1, #0]
    a62e:	681a      	ldr	r2, [r3, #0]
    a630:	0608      	lsls	r0, r1, #24
    a632:	d505      	bpl.n	a640 <_printf_i+0x150>
    a634:	1d11      	adds	r1, r2, #4
    a636:	6019      	str	r1, [r3, #0]
    a638:	6813      	ldr	r3, [r2, #0]
    a63a:	6962      	ldr	r2, [r4, #20]
    a63c:	601a      	str	r2, [r3, #0]
    a63e:	e006      	b.n	a64e <_printf_i+0x15e>
    a640:	0649      	lsls	r1, r1, #25
    a642:	d5f7      	bpl.n	a634 <_printf_i+0x144>
    a644:	1d11      	adds	r1, r2, #4
    a646:	6019      	str	r1, [r3, #0]
    a648:	6813      	ldr	r3, [r2, #0]
    a64a:	8aa2      	ldrh	r2, [r4, #20]
    a64c:	801a      	strh	r2, [r3, #0]
    a64e:	2300      	movs	r3, #0
    a650:	9e04      	ldr	r6, [sp, #16]
    a652:	6123      	str	r3, [r4, #16]
    a654:	e054      	b.n	a700 <_printf_i+0x210>
    a656:	681a      	ldr	r2, [r3, #0]
    a658:	1d11      	adds	r1, r2, #4
    a65a:	6019      	str	r1, [r3, #0]
    a65c:	6816      	ldr	r6, [r2, #0]
    a65e:	2100      	movs	r1, #0
    a660:	6862      	ldr	r2, [r4, #4]
    a662:	0030      	movs	r0, r6
    a664:	f000 f93e 	bl	a8e4 <memchr>
    a668:	2800      	cmp	r0, #0
    a66a:	d001      	beq.n	a670 <_printf_i+0x180>
    a66c:	1b80      	subs	r0, r0, r6
    a66e:	6060      	str	r0, [r4, #4]
    a670:	6863      	ldr	r3, [r4, #4]
    a672:	6123      	str	r3, [r4, #16]
    a674:	2300      	movs	r3, #0
    a676:	9a04      	ldr	r2, [sp, #16]
    a678:	7013      	strb	r3, [r2, #0]
    a67a:	e041      	b.n	a700 <_printf_i+0x210>
    a67c:	6923      	ldr	r3, [r4, #16]
    a67e:	0032      	movs	r2, r6
    a680:	9906      	ldr	r1, [sp, #24]
    a682:	9805      	ldr	r0, [sp, #20]
    a684:	9d07      	ldr	r5, [sp, #28]
    a686:	47a8      	blx	r5
    a688:	1c43      	adds	r3, r0, #1
    a68a:	d043      	beq.n	a714 <_printf_i+0x224>
    a68c:	6823      	ldr	r3, [r4, #0]
    a68e:	2500      	movs	r5, #0
    a690:	079b      	lsls	r3, r3, #30
    a692:	d40f      	bmi.n	a6b4 <_printf_i+0x1c4>
    a694:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a696:	68e0      	ldr	r0, [r4, #12]
    a698:	4298      	cmp	r0, r3
    a69a:	da3d      	bge.n	a718 <_printf_i+0x228>
    a69c:	0018      	movs	r0, r3
    a69e:	e03b      	b.n	a718 <_printf_i+0x228>
    a6a0:	0022      	movs	r2, r4
    a6a2:	2301      	movs	r3, #1
    a6a4:	3219      	adds	r2, #25
    a6a6:	9906      	ldr	r1, [sp, #24]
    a6a8:	9805      	ldr	r0, [sp, #20]
    a6aa:	9e07      	ldr	r6, [sp, #28]
    a6ac:	47b0      	blx	r6
    a6ae:	1c43      	adds	r3, r0, #1
    a6b0:	d030      	beq.n	a714 <_printf_i+0x224>
    a6b2:	3501      	adds	r5, #1
    a6b4:	68e3      	ldr	r3, [r4, #12]
    a6b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a6b8:	1a9b      	subs	r3, r3, r2
    a6ba:	429d      	cmp	r5, r3
    a6bc:	dbf0      	blt.n	a6a0 <_printf_i+0x1b0>
    a6be:	e7e9      	b.n	a694 <_printf_i+0x1a4>
    a6c0:	2d00      	cmp	r5, #0
    a6c2:	d0a9      	beq.n	a618 <_printf_i+0x128>
    a6c4:	9e04      	ldr	r6, [sp, #16]
    a6c6:	0028      	movs	r0, r5
    a6c8:	0039      	movs	r1, r7
    a6ca:	f7fc ff29 	bl	7520 <__aeabi_uidivmod>
    a6ce:	9b03      	ldr	r3, [sp, #12]
    a6d0:	3e01      	subs	r6, #1
    a6d2:	5c5b      	ldrb	r3, [r3, r1]
    a6d4:	0028      	movs	r0, r5
    a6d6:	7033      	strb	r3, [r6, #0]
    a6d8:	0039      	movs	r1, r7
    a6da:	f7fc fe9b 	bl	7414 <__udivsi3>
    a6de:	1e05      	subs	r5, r0, #0
    a6e0:	d1f1      	bne.n	a6c6 <_printf_i+0x1d6>
    a6e2:	2f08      	cmp	r7, #8
    a6e4:	d109      	bne.n	a6fa <_printf_i+0x20a>
    a6e6:	6823      	ldr	r3, [r4, #0]
    a6e8:	07db      	lsls	r3, r3, #31
    a6ea:	d506      	bpl.n	a6fa <_printf_i+0x20a>
    a6ec:	6863      	ldr	r3, [r4, #4]
    a6ee:	6922      	ldr	r2, [r4, #16]
    a6f0:	4293      	cmp	r3, r2
    a6f2:	dc02      	bgt.n	a6fa <_printf_i+0x20a>
    a6f4:	2330      	movs	r3, #48	; 0x30
    a6f6:	3e01      	subs	r6, #1
    a6f8:	7033      	strb	r3, [r6, #0]
    a6fa:	9b04      	ldr	r3, [sp, #16]
    a6fc:	1b9b      	subs	r3, r3, r6
    a6fe:	6123      	str	r3, [r4, #16]
    a700:	9b07      	ldr	r3, [sp, #28]
    a702:	aa09      	add	r2, sp, #36	; 0x24
    a704:	9300      	str	r3, [sp, #0]
    a706:	0021      	movs	r1, r4
    a708:	9b06      	ldr	r3, [sp, #24]
    a70a:	9805      	ldr	r0, [sp, #20]
    a70c:	f7ff fe82 	bl	a414 <_printf_common>
    a710:	1c43      	adds	r3, r0, #1
    a712:	d1b3      	bne.n	a67c <_printf_i+0x18c>
    a714:	2001      	movs	r0, #1
    a716:	4240      	negs	r0, r0
    a718:	b00b      	add	sp, #44	; 0x2c
    a71a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a71c:	0000bd2e 	.word	0x0000bd2e
    a720:	0000bd1d 	.word	0x0000bd1d

0000a724 <_putc_r>:
    a724:	b570      	push	{r4, r5, r6, lr}
    a726:	0006      	movs	r6, r0
    a728:	000d      	movs	r5, r1
    a72a:	0014      	movs	r4, r2
    a72c:	2800      	cmp	r0, #0
    a72e:	d004      	beq.n	a73a <_putc_r+0x16>
    a730:	6983      	ldr	r3, [r0, #24]
    a732:	2b00      	cmp	r3, #0
    a734:	d101      	bne.n	a73a <_putc_r+0x16>
    a736:	f7ff fac5 	bl	9cc4 <__sinit>
    a73a:	4b12      	ldr	r3, [pc, #72]	; (a784 <_putc_r+0x60>)
    a73c:	429c      	cmp	r4, r3
    a73e:	d111      	bne.n	a764 <_putc_r+0x40>
    a740:	6874      	ldr	r4, [r6, #4]
    a742:	68a3      	ldr	r3, [r4, #8]
    a744:	3b01      	subs	r3, #1
    a746:	60a3      	str	r3, [r4, #8]
    a748:	2b00      	cmp	r3, #0
    a74a:	da05      	bge.n	a758 <_putc_r+0x34>
    a74c:	69a2      	ldr	r2, [r4, #24]
    a74e:	4293      	cmp	r3, r2
    a750:	db12      	blt.n	a778 <_putc_r+0x54>
    a752:	b2eb      	uxtb	r3, r5
    a754:	2b0a      	cmp	r3, #10
    a756:	d00f      	beq.n	a778 <_putc_r+0x54>
    a758:	6823      	ldr	r3, [r4, #0]
    a75a:	b2e8      	uxtb	r0, r5
    a75c:	1c5a      	adds	r2, r3, #1
    a75e:	6022      	str	r2, [r4, #0]
    a760:	701d      	strb	r5, [r3, #0]
    a762:	bd70      	pop	{r4, r5, r6, pc}
    a764:	4b08      	ldr	r3, [pc, #32]	; (a788 <_putc_r+0x64>)
    a766:	429c      	cmp	r4, r3
    a768:	d101      	bne.n	a76e <_putc_r+0x4a>
    a76a:	68b4      	ldr	r4, [r6, #8]
    a76c:	e7e9      	b.n	a742 <_putc_r+0x1e>
    a76e:	4b07      	ldr	r3, [pc, #28]	; (a78c <_putc_r+0x68>)
    a770:	429c      	cmp	r4, r3
    a772:	d1e6      	bne.n	a742 <_putc_r+0x1e>
    a774:	68f4      	ldr	r4, [r6, #12]
    a776:	e7e4      	b.n	a742 <_putc_r+0x1e>
    a778:	0022      	movs	r2, r4
    a77a:	0029      	movs	r1, r5
    a77c:	0030      	movs	r0, r6
    a77e:	f7ff f8dd 	bl	993c <__swbuf_r>
    a782:	e7ee      	b.n	a762 <_putc_r+0x3e>
    a784:	0000bccc 	.word	0x0000bccc
    a788:	0000bcec 	.word	0x0000bcec
    a78c:	0000bcac 	.word	0x0000bcac

0000a790 <__sread>:
    a790:	b570      	push	{r4, r5, r6, lr}
    a792:	000c      	movs	r4, r1
    a794:	250e      	movs	r5, #14
    a796:	5f49      	ldrsh	r1, [r1, r5]
    a798:	f000 f8d6 	bl	a948 <_read_r>
    a79c:	2800      	cmp	r0, #0
    a79e:	db03      	blt.n	a7a8 <__sread+0x18>
    a7a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    a7a2:	181b      	adds	r3, r3, r0
    a7a4:	6563      	str	r3, [r4, #84]	; 0x54
    a7a6:	bd70      	pop	{r4, r5, r6, pc}
    a7a8:	89a3      	ldrh	r3, [r4, #12]
    a7aa:	4a02      	ldr	r2, [pc, #8]	; (a7b4 <__sread+0x24>)
    a7ac:	4013      	ands	r3, r2
    a7ae:	81a3      	strh	r3, [r4, #12]
    a7b0:	e7f9      	b.n	a7a6 <__sread+0x16>
    a7b2:	46c0      	nop			; (mov r8, r8)
    a7b4:	ffffefff 	.word	0xffffefff

0000a7b8 <__swrite>:
    a7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a7ba:	001f      	movs	r7, r3
    a7bc:	898b      	ldrh	r3, [r1, #12]
    a7be:	0005      	movs	r5, r0
    a7c0:	000c      	movs	r4, r1
    a7c2:	0016      	movs	r6, r2
    a7c4:	05db      	lsls	r3, r3, #23
    a7c6:	d505      	bpl.n	a7d4 <__swrite+0x1c>
    a7c8:	230e      	movs	r3, #14
    a7ca:	5ec9      	ldrsh	r1, [r1, r3]
    a7cc:	2200      	movs	r2, #0
    a7ce:	2302      	movs	r3, #2
    a7d0:	f000 f874 	bl	a8bc <_lseek_r>
    a7d4:	89a3      	ldrh	r3, [r4, #12]
    a7d6:	4a05      	ldr	r2, [pc, #20]	; (a7ec <__swrite+0x34>)
    a7d8:	0028      	movs	r0, r5
    a7da:	4013      	ands	r3, r2
    a7dc:	81a3      	strh	r3, [r4, #12]
    a7de:	0032      	movs	r2, r6
    a7e0:	230e      	movs	r3, #14
    a7e2:	5ee1      	ldrsh	r1, [r4, r3]
    a7e4:	003b      	movs	r3, r7
    a7e6:	f000 f81f 	bl	a828 <_write_r>
    a7ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a7ec:	ffffefff 	.word	0xffffefff

0000a7f0 <__sseek>:
    a7f0:	b570      	push	{r4, r5, r6, lr}
    a7f2:	000c      	movs	r4, r1
    a7f4:	250e      	movs	r5, #14
    a7f6:	5f49      	ldrsh	r1, [r1, r5]
    a7f8:	f000 f860 	bl	a8bc <_lseek_r>
    a7fc:	89a3      	ldrh	r3, [r4, #12]
    a7fe:	1c42      	adds	r2, r0, #1
    a800:	d103      	bne.n	a80a <__sseek+0x1a>
    a802:	4a05      	ldr	r2, [pc, #20]	; (a818 <__sseek+0x28>)
    a804:	4013      	ands	r3, r2
    a806:	81a3      	strh	r3, [r4, #12]
    a808:	bd70      	pop	{r4, r5, r6, pc}
    a80a:	2280      	movs	r2, #128	; 0x80
    a80c:	0152      	lsls	r2, r2, #5
    a80e:	4313      	orrs	r3, r2
    a810:	81a3      	strh	r3, [r4, #12]
    a812:	6560      	str	r0, [r4, #84]	; 0x54
    a814:	e7f8      	b.n	a808 <__sseek+0x18>
    a816:	46c0      	nop			; (mov r8, r8)
    a818:	ffffefff 	.word	0xffffefff

0000a81c <__sclose>:
    a81c:	b510      	push	{r4, lr}
    a81e:	230e      	movs	r3, #14
    a820:	5ec9      	ldrsh	r1, [r1, r3]
    a822:	f000 f815 	bl	a850 <_close_r>
    a826:	bd10      	pop	{r4, pc}

0000a828 <_write_r>:
    a828:	b570      	push	{r4, r5, r6, lr}
    a82a:	0005      	movs	r5, r0
    a82c:	0008      	movs	r0, r1
    a82e:	0011      	movs	r1, r2
    a830:	2200      	movs	r2, #0
    a832:	4c06      	ldr	r4, [pc, #24]	; (a84c <_write_r+0x24>)
    a834:	6022      	str	r2, [r4, #0]
    a836:	001a      	movs	r2, r3
    a838:	f7fb fb20 	bl	5e7c <_write>
    a83c:	1c43      	adds	r3, r0, #1
    a83e:	d103      	bne.n	a848 <_write_r+0x20>
    a840:	6823      	ldr	r3, [r4, #0]
    a842:	2b00      	cmp	r3, #0
    a844:	d000      	beq.n	a848 <_write_r+0x20>
    a846:	602b      	str	r3, [r5, #0]
    a848:	bd70      	pop	{r4, r5, r6, pc}
    a84a:	46c0      	nop			; (mov r8, r8)
    a84c:	200004cc 	.word	0x200004cc

0000a850 <_close_r>:
    a850:	2300      	movs	r3, #0
    a852:	b570      	push	{r4, r5, r6, lr}
    a854:	4c06      	ldr	r4, [pc, #24]	; (a870 <_close_r+0x20>)
    a856:	0005      	movs	r5, r0
    a858:	0008      	movs	r0, r1
    a85a:	6023      	str	r3, [r4, #0]
    a85c:	f7fb fb48 	bl	5ef0 <_close>
    a860:	1c43      	adds	r3, r0, #1
    a862:	d103      	bne.n	a86c <_close_r+0x1c>
    a864:	6823      	ldr	r3, [r4, #0]
    a866:	2b00      	cmp	r3, #0
    a868:	d000      	beq.n	a86c <_close_r+0x1c>
    a86a:	602b      	str	r3, [r5, #0]
    a86c:	bd70      	pop	{r4, r5, r6, pc}
    a86e:	46c0      	nop			; (mov r8, r8)
    a870:	200004cc 	.word	0x200004cc

0000a874 <_fstat_r>:
    a874:	2300      	movs	r3, #0
    a876:	b570      	push	{r4, r5, r6, lr}
    a878:	4c06      	ldr	r4, [pc, #24]	; (a894 <_fstat_r+0x20>)
    a87a:	0005      	movs	r5, r0
    a87c:	0008      	movs	r0, r1
    a87e:	0011      	movs	r1, r2
    a880:	6023      	str	r3, [r4, #0]
    a882:	f7fb fb38 	bl	5ef6 <_fstat>
    a886:	1c43      	adds	r3, r0, #1
    a888:	d103      	bne.n	a892 <_fstat_r+0x1e>
    a88a:	6823      	ldr	r3, [r4, #0]
    a88c:	2b00      	cmp	r3, #0
    a88e:	d000      	beq.n	a892 <_fstat_r+0x1e>
    a890:	602b      	str	r3, [r5, #0]
    a892:	bd70      	pop	{r4, r5, r6, pc}
    a894:	200004cc 	.word	0x200004cc

0000a898 <_isatty_r>:
    a898:	2300      	movs	r3, #0
    a89a:	b570      	push	{r4, r5, r6, lr}
    a89c:	4c06      	ldr	r4, [pc, #24]	; (a8b8 <_isatty_r+0x20>)
    a89e:	0005      	movs	r5, r0
    a8a0:	0008      	movs	r0, r1
    a8a2:	6023      	str	r3, [r4, #0]
    a8a4:	f7fb fb2c 	bl	5f00 <_isatty>
    a8a8:	1c43      	adds	r3, r0, #1
    a8aa:	d103      	bne.n	a8b4 <_isatty_r+0x1c>
    a8ac:	6823      	ldr	r3, [r4, #0]
    a8ae:	2b00      	cmp	r3, #0
    a8b0:	d000      	beq.n	a8b4 <_isatty_r+0x1c>
    a8b2:	602b      	str	r3, [r5, #0]
    a8b4:	bd70      	pop	{r4, r5, r6, pc}
    a8b6:	46c0      	nop			; (mov r8, r8)
    a8b8:	200004cc 	.word	0x200004cc

0000a8bc <_lseek_r>:
    a8bc:	b570      	push	{r4, r5, r6, lr}
    a8be:	0005      	movs	r5, r0
    a8c0:	0008      	movs	r0, r1
    a8c2:	0011      	movs	r1, r2
    a8c4:	2200      	movs	r2, #0
    a8c6:	4c06      	ldr	r4, [pc, #24]	; (a8e0 <_lseek_r+0x24>)
    a8c8:	6022      	str	r2, [r4, #0]
    a8ca:	001a      	movs	r2, r3
    a8cc:	f7fb fb1a 	bl	5f04 <_lseek>
    a8d0:	1c43      	adds	r3, r0, #1
    a8d2:	d103      	bne.n	a8dc <_lseek_r+0x20>
    a8d4:	6823      	ldr	r3, [r4, #0]
    a8d6:	2b00      	cmp	r3, #0
    a8d8:	d000      	beq.n	a8dc <_lseek_r+0x20>
    a8da:	602b      	str	r3, [r5, #0]
    a8dc:	bd70      	pop	{r4, r5, r6, pc}
    a8de:	46c0      	nop			; (mov r8, r8)
    a8e0:	200004cc 	.word	0x200004cc

0000a8e4 <memchr>:
    a8e4:	b2c9      	uxtb	r1, r1
    a8e6:	1882      	adds	r2, r0, r2
    a8e8:	4290      	cmp	r0, r2
    a8ea:	d101      	bne.n	a8f0 <memchr+0xc>
    a8ec:	2000      	movs	r0, #0
    a8ee:	4770      	bx	lr
    a8f0:	7803      	ldrb	r3, [r0, #0]
    a8f2:	428b      	cmp	r3, r1
    a8f4:	d0fb      	beq.n	a8ee <memchr+0xa>
    a8f6:	3001      	adds	r0, #1
    a8f8:	e7f6      	b.n	a8e8 <memchr+0x4>

0000a8fa <_realloc_r>:
    a8fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a8fc:	0007      	movs	r7, r0
    a8fe:	000d      	movs	r5, r1
    a900:	0016      	movs	r6, r2
    a902:	2900      	cmp	r1, #0
    a904:	d105      	bne.n	a912 <_realloc_r+0x18>
    a906:	0011      	movs	r1, r2
    a908:	f7fe fe0e 	bl	9528 <_malloc_r>
    a90c:	0004      	movs	r4, r0
    a90e:	0020      	movs	r0, r4
    a910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a912:	2a00      	cmp	r2, #0
    a914:	d103      	bne.n	a91e <_realloc_r+0x24>
    a916:	f7fe fdbd 	bl	9494 <_free_r>
    a91a:	0034      	movs	r4, r6
    a91c:	e7f7      	b.n	a90e <_realloc_r+0x14>
    a91e:	f000 f827 	bl	a970 <_malloc_usable_size_r>
    a922:	002c      	movs	r4, r5
    a924:	4286      	cmp	r6, r0
    a926:	d9f2      	bls.n	a90e <_realloc_r+0x14>
    a928:	0031      	movs	r1, r6
    a92a:	0038      	movs	r0, r7
    a92c:	f7fe fdfc 	bl	9528 <_malloc_r>
    a930:	1e04      	subs	r4, r0, #0
    a932:	d0ec      	beq.n	a90e <_realloc_r+0x14>
    a934:	0029      	movs	r1, r5
    a936:	0032      	movs	r2, r6
    a938:	f7fe fd88 	bl	944c <memcpy>
    a93c:	0029      	movs	r1, r5
    a93e:	0038      	movs	r0, r7
    a940:	f7fe fda8 	bl	9494 <_free_r>
    a944:	e7e3      	b.n	a90e <_realloc_r+0x14>
	...

0000a948 <_read_r>:
    a948:	b570      	push	{r4, r5, r6, lr}
    a94a:	0005      	movs	r5, r0
    a94c:	0008      	movs	r0, r1
    a94e:	0011      	movs	r1, r2
    a950:	2200      	movs	r2, #0
    a952:	4c06      	ldr	r4, [pc, #24]	; (a96c <_read_r+0x24>)
    a954:	6022      	str	r2, [r4, #0]
    a956:	001a      	movs	r2, r3
    a958:	f7fb fa6e 	bl	5e38 <_read>
    a95c:	1c43      	adds	r3, r0, #1
    a95e:	d103      	bne.n	a968 <_read_r+0x20>
    a960:	6823      	ldr	r3, [r4, #0]
    a962:	2b00      	cmp	r3, #0
    a964:	d000      	beq.n	a968 <_read_r+0x20>
    a966:	602b      	str	r3, [r5, #0]
    a968:	bd70      	pop	{r4, r5, r6, pc}
    a96a:	46c0      	nop			; (mov r8, r8)
    a96c:	200004cc 	.word	0x200004cc

0000a970 <_malloc_usable_size_r>:
    a970:	1f0b      	subs	r3, r1, #4
    a972:	681b      	ldr	r3, [r3, #0]
    a974:	1f18      	subs	r0, r3, #4
    a976:	2b00      	cmp	r3, #0
    a978:	da01      	bge.n	a97e <_malloc_usable_size_r+0xe>
    a97a:	580b      	ldr	r3, [r1, r0]
    a97c:	18c0      	adds	r0, r0, r3
    a97e:	4770      	bx	lr
    a980:	61746164 	.word	0x61746164
    a984:	205d325b 	.word	0x205d325b
    a988:	74617473 	.word	0x74617473
    a98c:	3d207375 	.word	0x3d207375
    a990:	25783020 	.word	0x25783020
    a994:	00000a78 	.word	0x00000a78

0000a998 <CMD_MEASURE_LPM_CS>:
    a998:	00005864                                dX..

0000a99c <CMD_READ_ID_REG>:
    a99c:	0000c8ef                                ....

0000a9a0 <__FUNCTION__.14198>:
    a9a0:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
    a9b0:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    a9c0:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
    a9d0:	6320746c 0000646d 0000193c 0000190c     lt cmd..<.......
    a9e0:	00001904 0000191c 00001914 00001934     ............4...
    a9f0:	00001924 0000192c                       $...,...

0000a9f8 <__FUNCTION__.13064>:
    a9f8:	5f666968 646e6573 00000000              hif_send....

0000aa04 <__FUNCTION__.13074>:
    aa04:	5f666968 00727369                       hif_isr.

0000aa0c <__FUNCTION__.13080>:
    aa0c:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0000aa1c <__FUNCTION__.13092>:
    aa1c:	5f666968 65636572 00657669              hif_receive.

0000aa28 <__FUNCTION__.13108>:
    aa28:	5f666968 69676572 72657473 0062635f     hif_register_cb.
    aa38:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
    aa48:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
    aa58:	006c6961 66696828 64612029 73657264     ail.(hif) addres
    aa68:	75622073 61662073 00006c69 66696828     s bus fail..(hif
    aa78:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
    aa88:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
    aa98:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
    aaa8:	25203d20 3e583230 0000000a 49464957      = %02X>....WIFI
    aab8:	6c616320 6361626c 7369206b 746f6e20      callback is not
    aac8:	67657220 65747369 00646572 6b6f6353      registered.Scok
    aad8:	63207465 626c6c61 206b6361 6e207369     et callback is n
    aae8:	7220746f 73696765 65726574 00000064     ot registered...
    aaf8:	2061744f 6c6c6163 6b636162 20736920     Ota callback is 
    ab08:	20746f6e 69676572 72657473 00006465     not registered..
    ab18:	70797243 63206f74 626c6c61 206b6361     Crypto callback 
    ab28:	6e207369 7220746f 73696765 65726574     is not registere
    ab38:	00000064 6d676953 61632061 61626c6c     d...Sigma callba
    ab48:	69206b63 6f6e2073 65722074 74736967     ck is not regist
    ab58:	64657265 00000000 66696828 6e692029     ered....(hif) in
    ab68:	696c6176 72672064 2070756f 00004449     valid group ID..
    ab78:	66696828 6f682029 61207473 64207070     (hif) host app d
    ab88:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
    ab98:	253c2065 253c3e75 000a3e58 66696828     e <%u><%X>..(hif
    aba8:	72572029 20676e6f 657a6953 00000000     ) Wrong Size....
    abb8:	66696828 61462029 2065736c 65746e69     (hif) False inte
    abc8:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
    abd8:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
    abe8:	7265746e 74707572 67657220 00000000     nterrupt reg....
    abf8:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
    ac08:	656c646e 746e6920 75727265 25207470     ndle interrupt %
    ac18:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
    ac28:	66696820 6365725f 65766965 6e49203a      hif_receive: In
    ac38:	696c6176 72612064 656d7567 0000746e     valid argument..
    ac48:	20505041 75716552 65747365 69532064     APP Requested Si
    ac58:	6920657a 616c2073 72656772 61687420     ze is larger tha
    ac68:	6874206e 65722065 65766963 75622064     n the recived bu
    ac78:	72656666 7a697320 253c2065 253c3e75     ffer size <%u><%
    ac88:	0a3e756c 00000000 20505041 75716552     lu>.....APP Requ
    ac98:	65747365 64412064 73657264 65622073     ested Address be
    aca8:	646e6f79 65687420 63657220 64657669     yond the recived
    acb8:	66756220 20726566 72646461 20737365      buffer address 
    acc8:	20646e61 676e656c 00006874 20705247     and length..GRp 
    acd8:	6425203f 0000000a 50504128 4e492829     ? %d....(APP)(IN
    ace8:	00294f46 776f6c53 20676e69 6e776f64     FO).Slowing down
    acf8:	002e2e2e 46494828 69614629 6f74206c     ....(HIF)Fail to
    ad08:	6b617720 74207075 63206568 00706968      wakup the chip.

0000ad18 <__FUNCTION__.13043>:
    ad18:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0000ad24 <__FUNCTION__.13072>:
    ad24:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0000ad34 <__FUNCTION__.13100>:
    ad34:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
    ad44:	0063735f 666e6f43 7463696c 49206465     _sc.Conflicted I
    ad54:	20222050 252e7525 75252e75 2075252e     P " %u.%u.%u.%u 
    ad64:	000a2022 20514552 20746f4e 69666564     " ..REQ Not defi
    ad74:	2064656e 000a6425 2079654b 6e207369     ned %d..Key is n
    ad84:	7620746f 64696c61 00000000 61766e49     ot valid....Inva
    ad94:	2064696c 0079654b 44495353 4e454c20     lid Key.SSID LEN
    ada4:	564e4920 44494c41 00000000 49204843      INVALID....CH I
    adb4:	4c41564e 00004449 61766e49 2064696c     NVALID..Invalid 
    adc4:	20706557 2079656b 65646e69 64252078     Wep key index %d
    add4:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
    ade4:	2079656b 676e656c 25206874 00000a64     key length %d...
    adf4:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
    ae04:	656c2079 6874676e 00000000 65646e75     y length....unde
    ae14:	656e6966 65732064 79742063 00006570     fined sec type..
    ae24:	6d726946 65726177 72657620 3a202020     Firmware ver   :
    ae34:	2e752520 252e7525 76532075 7665726e      %u.%u.%u Svnrev
    ae44:	0a752520 00000000 6d726946 65726177      %u.....Firmware
    ae54:	69754220 2520646c 69542073 2520656d      Build %s Time %
    ae64:	00000a73 6d726946 65726177 6e694d20     s...Firmware Min
    ae74:	69726420 20726576 20726576 7525203a      driver ver : %u
    ae84:	2e75252e 000a7525 76697244 76207265     .%u.%u..Driver v
    ae94:	203a7265 252e7525 75252e75 0000000a     er: %u.%u.%u....
    aea4:	333a3032 35313a35 00000000 206e614a     20:35:15....Jan 
    aeb4:	32203731 00383130 76697244 62207265     17 2018.Driver b
    aec4:	746c6975 20746120 25097325 00000a73     uilt at %s.%s...
    aed4:	6d73694d 68637461 72694620 7277616d     Mismatch Firmawr
    aee4:	65562065 6f697372 0000006e              e Version...

0000aef0 <__FUNCTION__.12906>:
    aef0:	70696863 6b61775f 00000065              chip_wake...

0000aefc <__FUNCTION__.12955>:
    aefc:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
    af0c:	74206465 6564206f 696e692d 6c616974     ed to de-initial
    af1c:	00657a69 20737542 6f727265 35282072     ize.Bus error (5
    af2c:	64252e29 786c2520 0000000a 6c696146     ).%d %lx....Fail
    af3c:	74206465 6177206f 2070756b 20656874     ed to wakup the 
    af4c:	70696863 00000000 76697244 65567265     chip....DriverVe
    af5c:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..

0000af6c <__FUNCTION__.12953>:
    af6c:	645f6d6e 695f7672 0074696e              nm_drv_init.

0000af78 <__FUNCTION__.12960>:
    af78:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
    af88:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
    af98:	6965645f 2074696e 6c696166 00000000     _deinit fail....
    afa8:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
    afb8:	73616c66 69642068 6c626173 61662065     flash disable fa
    afc8:	00006c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
    afd8:	6c696166 696e6920 75622074 00000073     fail init bus...
    afe8:	6c696166 74206465 6e65206f 656c6261     failed to enable
    aff8:	746e6920 75727265 2e737470 0000002e      interrupts.....
    b008:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
    b018:	6e69206c 62207469 00007375 70696843     l init bus..Chip
    b028:	20444920 0a786c25 00000000 0000291c      ID %lx......)..
    b038:	0000291c 0000294c 000028ce 000028f2     .)..L)...(...(..
    b048:	00002900 00002932 00002932 0000297a     .)..2)..2)..z)..
    b058:	000028b2 000029b4 000029b4 000029b4     .(...)...)...)..
    b068:	000029b4 0000290e cac4c9c3              .)...)......

0000b074 <__FUNCTION__.12259>:
    b074:	5f697073 00646d63                       spi_cmd.

0000b07c <__FUNCTION__.12266>:
    b07c:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

0000b08c <__FUNCTION__.12275>:
    b08c:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0000b098 <__FUNCTION__.12291>:
    b098:	5f697073 61746164 6165725f 00000064     spi_data_read...

0000b0a8 <__FUNCTION__.12306>:
    b0a8:	5f697073 61746164 6972775f 00006574     spi_data_write..

0000b0b8 <__FUNCTION__.12318>:
    b0b8:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0000b0c8 <__FUNCTION__.12329>:
    b0c8:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0000b0d8 <__FUNCTION__.12341>:
    b0d8:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0000b0e8 <__FUNCTION__.12354>:
    b0e8:	735f6d6e 725f6970 00646165              nm_spi_read.

0000b0f4 <__FUNCTION__.12375>:
    b0f4:	735f6d6e 695f6970 0074696e              nm_spi_init.

0000b100 <crc7_syndrome_table>:
    b100:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
    b110:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
    b120:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
    b130:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
    b140:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
    b150:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
    b160:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
    b170:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
    b180:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
    b190:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
    b1a0:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
    b1b0:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
    b1c0:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
    b1d0:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
    b1e0:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
    b1f0:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
    b200:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    b210:	6e692064 6e726574 72206c61 20646165     d internal read 
    b220:	746f7270 6c6f636f 74697720 52432068     protocol with CR
    b230:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
    b240:	20687469 20435243 2e66666f 00002e2e     ith CRC off.....
    b250:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    b260:	6e692064 6e726574 72206c61 20646165     d internal read 
    b270:	746f7270 6c6f636f 002e2e2e 696d6e5b     protocol....[nmi
    b280:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
    b290:	6e726574 77206c61 65746972 6f727020     ternal write pro
    b2a0:	6f636f74 6572206c 2e2e2e67 00000000     tocol reg.......
    b2b0:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
    b2c0:	20646d63 64616572 69686320 64692070     cmd read chip id
    b2d0:	002e2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    b2e0:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
    b2f0:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
    b300:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    b310:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
    b320:	202c6573 64616572 6f6c6220 28206b63     se, read block (
    b330:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
    b340:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    b350:	206b636f 61746164 61657220 2e2e2e64     ock data read...
    b360:	00000000 65736552 6e612074 65722064     ....Reset and re
    b370:	20797274 25206425 2520786c 00000a64     try %d %lx %d...
    b380:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    b390:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
    b3a0:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
    b3b0:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
    b3c0:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
    b3d0:	69727720 62206574 6b636f6c 30252820      write block (%0
    b3e0:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
    b3f0:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    b400:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
    b410:	20737562 6f727265 2e2e2e72 00000000     bus error.......
    b420:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    b430:	61642064 62206174 6b636f6c 69727720     d data block wri
    b440:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
    b450:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    b460:	656c6961 61642064 62206174 6b636f6c     ailed data block
    b470:	63726320 69727720 202c6574 20737562      crc write, bus 
    b480:	6f727265 2e2e2e72 00000000 696d6e5b     error.......[nmi
    b490:	69707320 46203a5d 656c6961 75622064      spi]: Failed bu
    b4a0:	72652073 2e726f72 00002e2e 696d6e5b     s error.....[nmi
    b4b0:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    b4c0:	72206174 6f707365 2065736e 64616572     ta response read
    b4d0:	7825202c 20782520 000a7825 696d6e5b     , %x %x %x..[nmi
    b4e0:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    b4f0:	206b636f 61746164 69727720 2e2e6574     ock data write..
    b500:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    b510:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
    b520:	73756220 72726520 2e2e726f 0000002e      bus error......
    b530:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    b540:	6d632064 65722064 6e6f7073 72206573     d cmd response r
    b550:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
    b560:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    b570:	656c6961 61642064 72206174 6f707365     ailed data respo
    b580:	2065736e 64616572 7562202c 72652073     nse read, bus er
    b590:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
    b5a0:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
    b5b0:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
    b5c0:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
    b5d0:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    b5e0:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
    b5f0:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
    b600:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    b610:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
    b620:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
    b630:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    b640:	72202c64 20646165 20676572 38302528     d, read reg (%08
    b650:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
    b660:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
    b670:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
    b680:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    b690:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    b6a0:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
    b6b0:	6e612074 65722064 20797274 25206425     t and retry %d %
    b6c0:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
    b6d0:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
    b6e0:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
    b6f0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    b700:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
    b710:	74697277 65722065 25282067 29783830     write reg (%08x)
    b720:	0a2e2e2e 00000000 65736552 6e612074     ........Reset an
    b730:	65722064 20797274 25206425 2520786c     d retry %d %lx %
    b740:	000a786c 52524528 75432952 6e657272     lx..(ERRR)Curren
    b750:	253c2074 000a3e64 6b636f53 206f7420     t <%d>..Sock to 
    b760:	656c6564 3c206574 0a3e6425 00000000     delete <%d>.....
    b770:	6b636f53 25207465 65732064 6f697373     Socket %d sessio
    b780:	4449206e 25203d20 000a0d64 42000800     n ID = %d......B
    b790:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    b7a0:	42001c00 00004f66 00004f62 00004f62     ...BfO..bO..bO..
    b7b0:	00004fc4 00004fc4 00004f7a 00004f6c     .O...O..zO..lO..
    b7c0:	00004f80 00004fb2 00005184 00005164     .O...O...Q..dQ..
    b7d0:	00005164 000051f0 00005176 00005192     dQ...Q..vQ...Q..
    b7e0:	00005168 000051a0 000051e0              hQ...Q...Q..

0000b7ec <_tcc_apbcmasks>:
    b7ec:	00000100 00000200 00000400              ............

0000b7f8 <_tcc_cc_nums>:
    b7f8:	00020204                                ....

0000b7fc <_tcc_gclk_ids>:
    b7fc:	001b1a1a                                ....

0000b800 <_tcc_maxs>:
    b800:	00ffffff 00ffffff 0000ffff              ............

0000b80c <_tcc_ow_nums>:
    b80c:	00020408                                ....

0000b810 <_tcc_intflag>:
    b810:	00000001 00000002 00000004 00000008     ................
    b820:	00001000 00002000 00004000 00008000     ..... ...@......
    b830:	00010000 00020000 00040000 00080000     ................

0000b840 <tcc_interrupt_vectors.12442>:
    b840:	0011100f 42002000 42002400 42002800     ..... .B.$.B.(.B
    b850:	20746f6e 73657270 00746e65 57202d2d     not present.-- W
    b860:	31434e49 20303035 462d6957 514d2069     INC1500 Wi-Fi MQ
    b870:	63205454 20746168 6d617865 20656c70     TT chat example 
    b880:	0a0d2d2d 53202d2d 32444d41 50585f31     --..-- SAMD21_XP
    b890:	4e49414c 505f4445 2d204f52 2d0a0d2d     LAINED_PRO --..-
    b8a0:	6f43202d 6c69706d 203a6465 20626546     - Compiled: Feb 
    b8b0:	32203820 20383130 323a3731 39353a39      8 2018 17:29:59
    b8c0:	0d2d2d20 00000000 5454514d 696e6920      --.....MQTT ini
    b8d0:	6c616974 74617a69 206e6f69 6c696166     tialization fail
    b8e0:	202e6465 6f727245 6f632072 69206564     ed. Error code i
    b8f0:	25282073 0a0d2964 00000000 5454514d     s (%d)......MQTT
    b900:	67657220 65747369 61632072 61626c6c      register callba
    b910:	66206b63 656c6961 45202e64 726f7272     ck failed. Error
    b920:	646f6320 73692065 64252820 000a0d29      code is (%d)...
    b930:	65746e45 68742072 73752065 6e207265     Enter the user n
    b940:	20656d61 78614d28 20642520 72616863     ame (Max %d char
    b950:	65746361 0d297372 0000000a 72657355     acters).....User
    b960:	25203a20 000a0d73 73257325 00000000      : %s...%s%s....
    b970:	646d6173 7461642f 00002f61 6e69616d     samd/data/..main
    b980:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
    b990:	6c6c6163 72726520 2821726f 0d296425     call error!(%d).
    b9a0:	0000000a 74730a0d 69747261 2e2e676e     ......starting..
    b9b0:	00000d2e 736e6573 6920726f 73252073     ....sensor is %s
    b9c0:	00000a0d 0d642025 0000000a 66322e25     ....% d.....%.2f
    b9d0:	00000000 7361654d 6d657275 20746e65     ....Measurement 
    b9e0:	6c696166 202e6465 65747845 6f69736e     failed. Extensio
    b9f0:	6f622d6e 20647261 63736964 656e6e6f     n-board disconne
    ba00:	64657463 0000003f 20434f56 2528203d     cted?...VOC = (%
    ba10:	20202964 0d627070 0000000a 20324f43     d)  ppb.....CO2 
    ba20:	2528203d 20202964 0d6d7070 0000000a     = (%d)  ppm.....
    ba30:	7361654d 6d657275 20746e65 6c696166     Measurement fail
    ba40:	202e6465 67756c50 20646567 69207469     ed. Plugged it i
    ba50:	00003f6e 61796573 0000006d              n?..seyam...

0000ba5c <main_mqtt_broker>:
    ba5c:	2e323831 382e3834 38312e34 00000030     182.48.84.180...
    ba6c:	6e6e6f43 20746365 6c696166 206f7420     Connect fail to 
    ba7c:	76726573 25287265 20212973 72746572     server(%s)! retr
    ba8c:	74692079 74756120 74616d6f 6c616369     y it automatical
    ba9c:	0d2e796c 0000000a 646d6173 7365742f     ly......samd/tes
    baac:	00232f74 70657250 74617261 206e6f69     t/#.Preparation 
    babc:	7420666f 63206568 20746168 20736168     of the chat has 
    bacc:	6e656562 6d6f6320 74656c70 0d2e6465     been completed..
    badc:	00000000 5454514d 6f726220 2072656b     ....MQTT broker 
    baec:	6c636564 20656e69 72756f79 63636120     decline your acc
    bafc:	21737365 72726520 6320726f 2065646f     ess! error code 
    bb0c:	0a0d6425 00000000 646d6173 7365742f     %d......samd/tes
    bb1c:	00002f74 203e3e20 00000000 0000000d     t/.. >> ........
    bb2c:	5454514d 73696420 6e6e6f63 65746365     MQTT disconnecte
    bb3c:	00000d64 462d6957 6f632069 63656e6e     d...Wi-Fi connec
    bb4c:	0d646574 00000000 462d6957 69642069     ted.....Wi-Fi di
    bb5c:	6e6f6373 7463656e 000d6465 70707573     sconnected..supp
    bb6c:	3174726f 00003332 61746144 74666f53     ort123..DataSoft
    bb7c:	4669575f 00000069 462d6957 50492069     _WiFi...Wi-Fi IP
    bb8c:	20736920 252e7525 75252e75 0d75252e      is %u.%u.%u.%u.
    bb9c:	0000000a 7349514d 00007064 000078e0     ....MQIsdp...x..
    bbac:	000078b0 000078c2 00007804 000078c2     .x...x...x...x..
    bbbc:	000078a6 000078c2 00007804 000078b0     .x...x...x...x..
    bbcc:	000078b0 000078a6 00007804 0000780c     .x...x...x...x..
    bbdc:	0000780c 0000780c 000078c8 000078b0     .x...x...x...x..
    bbec:	000078b0 00007884 00007968 00007884     .x...x..hy...x..
    bbfc:	000078a6 00007884 00007968 000078b0     .x...x..hy...x..
    bc0c:	000078b0 000078a6 00007968 0000780c     .x...x..hy...x..
    bc1c:	0000780c 0000780c 00007972 0000829c     .x...x..ry......
    bc2c:	0000827e 00008238 00008156 00008238     ~...8...V...8...
    bc3c:	00008270 00008238 00008156 0000827e     p...8...V...~...
    bc4c:	0000827e 00008270 00008156 0000814e     ~...p...V...N...
    bc5c:	0000814e 0000814e 000084b4 000088fc     N...N...........
    bc6c:	000087bc 000087bc 000087b8 000088d4     ................
    bc7c:	000088d4 000088c6 000087b8 000088d4     ................
    bc8c:	000088c6 000088d4 000087b8 000088dc     ................
    bc9c:	000088dc 000088dc 00008ae0              ............

0000bca8 <_global_impure_ptr>:
    bca8:	20000010                                ... 

0000bcac <__sf_fake_stderr>:
	...

0000bccc <__sf_fake_stdin>:
	...

0000bcec <__sf_fake_stdout>:
	...
    bd0c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    bd1c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    bd2c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    bd3c:	00006665                                ef..

0000bd40 <_init>:
    bd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bd42:	46c0      	nop			; (mov r8, r8)
    bd44:	bcf8      	pop	{r3, r4, r5, r6, r7}
    bd46:	bc08      	pop	{r3}
    bd48:	469e      	mov	lr, r3
    bd4a:	4770      	bx	lr

0000bd4c <__init_array_start>:
    bd4c:	000000dd 	.word	0x000000dd

0000bd50 <_fini>:
    bd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bd52:	46c0      	nop			; (mov r8, r8)
    bd54:	bcf8      	pop	{r3, r4, r5, r6, r7}
    bd56:	bc08      	pop	{r3}
    bd58:	469e      	mov	lr, r3
    bd5a:	4770      	bx	lr

0000bd5c <__fini_array_start>:
    bd5c:	000000b5 	.word	0x000000b5
