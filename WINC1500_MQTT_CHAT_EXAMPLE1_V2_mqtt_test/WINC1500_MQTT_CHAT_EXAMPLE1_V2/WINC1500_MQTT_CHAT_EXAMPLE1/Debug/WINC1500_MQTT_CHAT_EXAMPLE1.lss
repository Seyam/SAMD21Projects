
WINC1500_MQTT_CHAT_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000bc50  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  0000bc50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000460  20000070  0000bcc0  00020070  2**2
                  ALLOC
  3 .stack        00002000  200004d0  0000c120  00020070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  5 .comment      000000ca  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  6 .debug_info   00065cbe  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00008cb5  00000000  00000000  00085e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00014537  00000000  00000000  0008ead5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000f68  00000000  00000000  000a300c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001520  00000000  00000000  000a3f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000249e7  00000000  00000000  000a5494  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001ee8a  00000000  00000000  000c9e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00099a8a  00000000  00000000  000e8d05  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000035cc  00000000  00000000  00182790  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d0 24 00 20 e9 5c 00 00 e5 5c 00 00 e5 5c 00 00     .$. .\...\...\..
	...
      2c:	e5 5c 00 00 00 00 00 00 00 00 00 00 e5 5c 00 00     .\...........\..
      3c:	e5 5c 00 00 e5 5c 00 00 e5 5c 00 00 e5 5c 00 00     .\...\...\...\..
      4c:	e5 5c 00 00 f5 3e 00 00 e5 5c 00 00 e5 5c 00 00     .\...>...\...\..
      5c:	e5 5c 00 00 e5 5c 00 00 61 44 00 00 71 44 00 00     .\...\..aD..qD..
      6c:	81 44 00 00 91 44 00 00 a1 44 00 00 b1 44 00 00     .D...D...D...D..
      7c:	b5 5c 00 00 c5 5c 00 00 d5 5c 00 00 e5 5c 00 00     .\...\...\...\..
      8c:	e5 5c 00 00 e5 5c 00 00 e5 5c 00 00 e5 5c 00 00     .\...\...\...\..
      9c:	e5 5c 00 00 e5 5c 00 00 e5 5c 00 00 e5 5c 00 00     .\...\...\...\..
      ac:	e5 5c 00 00 00 00 00 00                             .\......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	0000bc50 	.word	0x0000bc50

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000074 	.word	0x20000074
     108:	0000bc50 	.word	0x0000bc50
     10c:	0000bc50 	.word	0x0000bc50
     110:	00000000 	.word	0x00000000

00000114 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     114:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     116:	2207      	movs	r2, #7
     118:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     11a:	421a      	tst	r2, r3
     11c:	d1fc      	bne.n	118 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     11e:	4770      	bx	lr

00000120 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     120:	b5f0      	push	{r4, r5, r6, r7, lr}
     122:	46d6      	mov	lr, sl
     124:	464f      	mov	r7, r9
     126:	4646      	mov	r6, r8
     128:	b5c0      	push	{r6, r7, lr}
     12a:	b08a      	sub	sp, #40	; 0x28
     12c:	0006      	movs	r6, r0
     12e:	000f      	movs	r7, r1
     130:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     132:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     134:	0008      	movs	r0, r1
     136:	4ba0      	ldr	r3, [pc, #640]	; (3b8 <i2c_master_init+0x298>)
     138:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     13a:	4aa0      	ldr	r2, [pc, #640]	; (3bc <i2c_master_init+0x29c>)
     13c:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     13e:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     140:	2301      	movs	r3, #1
     142:	40ab      	lsls	r3, r5
     144:	430b      	orrs	r3, r1
     146:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     148:	a909      	add	r1, sp, #36	; 0x24
     14a:	7b23      	ldrb	r3, [r4, #12]
     14c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     14e:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     150:	b2c5      	uxtb	r5, r0
     152:	0028      	movs	r0, r5
     154:	4b9a      	ldr	r3, [pc, #616]	; (3c0 <i2c_master_init+0x2a0>)
     156:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     158:	0028      	movs	r0, r5
     15a:	4b9a      	ldr	r3, [pc, #616]	; (3c4 <i2c_master_init+0x2a4>)
     15c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     15e:	7b20      	ldrb	r0, [r4, #12]
     160:	2100      	movs	r1, #0
     162:	4b99      	ldr	r3, [pc, #612]	; (3c8 <i2c_master_init+0x2a8>)
     164:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     166:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     168:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     16a:	079b      	lsls	r3, r3, #30
     16c:	d505      	bpl.n	17a <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     16e:	b00a      	add	sp, #40	; 0x28
     170:	bc1c      	pop	{r2, r3, r4}
     172:	4690      	mov	r8, r2
     174:	4699      	mov	r9, r3
     176:	46a2      	mov	sl, r4
     178:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     17a:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     17c:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     17e:	07db      	lsls	r3, r3, #31
     180:	d4f5      	bmi.n	16e <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     182:	6830      	ldr	r0, [r6, #0]
     184:	4b8c      	ldr	r3, [pc, #560]	; (3b8 <i2c_master_init+0x298>)
     186:	4699      	mov	r9, r3
     188:	4798      	blx	r3
     18a:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     18c:	498f      	ldr	r1, [pc, #572]	; (3cc <i2c_master_init+0x2ac>)
     18e:	4b90      	ldr	r3, [pc, #576]	; (3d0 <i2c_master_init+0x2b0>)
     190:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     192:	00ad      	lsls	r5, r5, #2
     194:	4b8f      	ldr	r3, [pc, #572]	; (3d4 <i2c_master_init+0x2b4>)
     196:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
     198:	2300      	movs	r3, #0
     19a:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
     19c:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
     19e:	2500      	movs	r5, #0
     1a0:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
     1a2:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
     1a4:	2225      	movs	r2, #37	; 0x25
     1a6:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
     1a8:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     1aa:	3314      	adds	r3, #20
     1ac:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     1ae:	6833      	ldr	r3, [r6, #0]
     1b0:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     1b2:	0018      	movs	r0, r3
     1b4:	47c8      	blx	r9
     1b6:	4681      	mov	r9, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     1b8:	2380      	movs	r3, #128	; 0x80
     1ba:	aa08      	add	r2, sp, #32
     1bc:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     1be:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     1c0:	2301      	movs	r3, #1
     1c2:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     1c4:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     1c6:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     1c8:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     1ca:	2800      	cmp	r0, #0
     1cc:	d100      	bne.n	1d0 <i2c_master_init+0xb0>
     1ce:	e0af      	b.n	330 <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
     1d0:	ab08      	add	r3, sp, #32
     1d2:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     1d4:	2302      	movs	r3, #2
     1d6:	aa08      	add	r2, sp, #32
     1d8:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     1da:	0c00      	lsrs	r0, r0, #16
     1dc:	b2c0      	uxtb	r0, r0
     1de:	0011      	movs	r1, r2
     1e0:	4b7d      	ldr	r3, [pc, #500]	; (3d8 <i2c_master_init+0x2b8>)
     1e2:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     1e4:	2f00      	cmp	r7, #0
     1e6:	d100      	bne.n	1ea <i2c_master_init+0xca>
     1e8:	e0a7      	b.n	33a <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
     1ea:	ab08      	add	r3, sp, #32
     1ec:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     1ee:	2302      	movs	r3, #2
     1f0:	aa08      	add	r2, sp, #32
     1f2:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     1f4:	0c3f      	lsrs	r7, r7, #16
     1f6:	b2f8      	uxtb	r0, r7
     1f8:	0011      	movs	r1, r2
     1fa:	4b77      	ldr	r3, [pc, #476]	; (3d8 <i2c_master_init+0x2b8>)
     1fc:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     1fe:	8aa3      	ldrh	r3, [r4, #20]
     200:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     202:	8ae3      	ldrh	r3, [r4, #22]
     204:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     206:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     208:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     20a:	2b00      	cmp	r3, #0
     20c:	d104      	bne.n	218 <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     20e:	4b73      	ldr	r3, [pc, #460]	; (3dc <i2c_master_init+0x2bc>)
     210:	789b      	ldrb	r3, [r3, #2]
     212:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     214:	0fdb      	lsrs	r3, r3, #31
     216:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     218:	68a1      	ldr	r1, [r4, #8]
     21a:	6923      	ldr	r3, [r4, #16]
     21c:	430b      	orrs	r3, r1
     21e:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     220:	2224      	movs	r2, #36	; 0x24
     222:	5ca2      	ldrb	r2, [r4, r2]
     224:	2a00      	cmp	r2, #0
     226:	d002      	beq.n	22e <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     228:	2280      	movs	r2, #128	; 0x80
     22a:	05d2      	lsls	r2, r2, #23
     22c:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     22e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     230:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     232:	222c      	movs	r2, #44	; 0x2c
     234:	5ca2      	ldrb	r2, [r4, r2]
     236:	2a00      	cmp	r2, #0
     238:	d103      	bne.n	242 <i2c_master_init+0x122>
     23a:	2280      	movs	r2, #128	; 0x80
     23c:	0492      	lsls	r2, r2, #18
     23e:	4291      	cmp	r1, r2
     240:	d102      	bne.n	248 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     242:	2280      	movs	r2, #128	; 0x80
     244:	0512      	lsls	r2, r2, #20
     246:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     248:	222d      	movs	r2, #45	; 0x2d
     24a:	5ca2      	ldrb	r2, [r4, r2]
     24c:	2a00      	cmp	r2, #0
     24e:	d002      	beq.n	256 <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     250:	2280      	movs	r2, #128	; 0x80
     252:	0412      	lsls	r2, r2, #16
     254:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     256:	222e      	movs	r2, #46	; 0x2e
     258:	5ca2      	ldrb	r2, [r4, r2]
     25a:	2a00      	cmp	r2, #0
     25c:	d002      	beq.n	264 <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     25e:	2280      	movs	r2, #128	; 0x80
     260:	03d2      	lsls	r2, r2, #15
     262:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     264:	4642      	mov	r2, r8
     266:	6812      	ldr	r2, [r2, #0]
     268:	4313      	orrs	r3, r2
     26a:	4642      	mov	r2, r8
     26c:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     26e:	2380      	movs	r3, #128	; 0x80
     270:	005b      	lsls	r3, r3, #1
     272:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     274:	4648      	mov	r0, r9
     276:	3014      	adds	r0, #20
     278:	b2c0      	uxtb	r0, r0
     27a:	4b59      	ldr	r3, [pc, #356]	; (3e0 <i2c_master_init+0x2c0>)
     27c:	4798      	blx	r3
     27e:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     280:	23fa      	movs	r3, #250	; 0xfa
     282:	009b      	lsls	r3, r3, #2
     284:	6822      	ldr	r2, [r4, #0]
     286:	435a      	muls	r2, r3
     288:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     28a:	6863      	ldr	r3, [r4, #4]
     28c:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     28e:	4d55      	ldr	r5, [pc, #340]	; (3e4 <i2c_master_init+0x2c4>)
     290:	47a8      	blx	r5
     292:	9000      	str	r0, [sp, #0]
     294:	9101      	str	r1, [sp, #4]
     296:	464b      	mov	r3, r9
     298:	0058      	lsls	r0, r3, #1
     29a:	47a8      	blx	r5
     29c:	9002      	str	r0, [sp, #8]
     29e:	9103      	str	r1, [sp, #12]
     2a0:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     2a2:	47a8      	blx	r5
     2a4:	9004      	str	r0, [sp, #16]
     2a6:	9105      	str	r1, [sp, #20]
     2a8:	4f4f      	ldr	r7, [pc, #316]	; (3e8 <i2c_master_init+0x2c8>)
     2aa:	4a50      	ldr	r2, [pc, #320]	; (3ec <i2c_master_init+0x2cc>)
     2ac:	4b50      	ldr	r3, [pc, #320]	; (3f0 <i2c_master_init+0x2d0>)
     2ae:	9800      	ldr	r0, [sp, #0]
     2b0:	9901      	ldr	r1, [sp, #4]
     2b2:	47b8      	blx	r7
     2b4:	0002      	movs	r2, r0
     2b6:	000b      	movs	r3, r1
     2b8:	9804      	ldr	r0, [sp, #16]
     2ba:	9905      	ldr	r1, [sp, #20]
     2bc:	47b8      	blx	r7
     2be:	4e4d      	ldr	r6, [pc, #308]	; (3f4 <i2c_master_init+0x2d4>)
     2c0:	2200      	movs	r2, #0
     2c2:	4b4d      	ldr	r3, [pc, #308]	; (3f8 <i2c_master_init+0x2d8>)
     2c4:	47b0      	blx	r6
     2c6:	9004      	str	r0, [sp, #16]
     2c8:	9105      	str	r1, [sp, #20]
     2ca:	4648      	mov	r0, r9
     2cc:	47a8      	blx	r5
     2ce:	0002      	movs	r2, r0
     2d0:	000b      	movs	r3, r1
     2d2:	9804      	ldr	r0, [sp, #16]
     2d4:	9905      	ldr	r1, [sp, #20]
     2d6:	47b8      	blx	r7
     2d8:	0002      	movs	r2, r0
     2da:	000b      	movs	r3, r1
     2dc:	4d47      	ldr	r5, [pc, #284]	; (3fc <i2c_master_init+0x2dc>)
     2de:	9800      	ldr	r0, [sp, #0]
     2e0:	9901      	ldr	r1, [sp, #4]
     2e2:	47a8      	blx	r5
     2e4:	9a02      	ldr	r2, [sp, #8]
     2e6:	9b03      	ldr	r3, [sp, #12]
     2e8:	47b0      	blx	r6
     2ea:	2200      	movs	r2, #0
     2ec:	4b44      	ldr	r3, [pc, #272]	; (400 <i2c_master_init+0x2e0>)
     2ee:	47a8      	blx	r5
     2f0:	9a02      	ldr	r2, [sp, #8]
     2f2:	9b03      	ldr	r3, [sp, #12]
     2f4:	4d43      	ldr	r5, [pc, #268]	; (404 <i2c_master_init+0x2e4>)
     2f6:	47a8      	blx	r5
     2f8:	4b43      	ldr	r3, [pc, #268]	; (408 <i2c_master_init+0x2e8>)
     2fa:	4798      	blx	r3
     2fc:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     2fe:	2380      	movs	r3, #128	; 0x80
     300:	049b      	lsls	r3, r3, #18
     302:	68a2      	ldr	r2, [r4, #8]
     304:	429a      	cmp	r2, r3
     306:	d01e      	beq.n	346 <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     308:	0003      	movs	r3, r0
     30a:	2040      	movs	r0, #64	; 0x40
     30c:	2dff      	cmp	r5, #255	; 0xff
     30e:	d900      	bls.n	312 <i2c_master_init+0x1f2>
     310:	e72d      	b.n	16e <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     312:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     314:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     316:	25ff      	movs	r5, #255	; 0xff
     318:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     31a:	0624      	lsls	r4, r4, #24
     31c:	4325      	orrs	r5, r4
     31e:	0400      	lsls	r0, r0, #16
     320:	23ff      	movs	r3, #255	; 0xff
     322:	041b      	lsls	r3, r3, #16
     324:	4018      	ands	r0, r3
     326:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     328:	4643      	mov	r3, r8
     32a:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     32c:	2000      	movs	r0, #0
     32e:	e71e      	b.n	16e <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     330:	2100      	movs	r1, #0
     332:	4640      	mov	r0, r8
     334:	4b35      	ldr	r3, [pc, #212]	; (40c <i2c_master_init+0x2ec>)
     336:	4798      	blx	r3
     338:	e74a      	b.n	1d0 <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     33a:	2101      	movs	r1, #1
     33c:	4640      	mov	r0, r8
     33e:	4b33      	ldr	r3, [pc, #204]	; (40c <i2c_master_init+0x2ec>)
     340:	4798      	blx	r3
     342:	0007      	movs	r7, r0
     344:	e751      	b.n	1ea <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     346:	26fa      	movs	r6, #250	; 0xfa
     348:	00b6      	lsls	r6, r6, #2
     34a:	4653      	mov	r3, sl
     34c:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     34e:	9800      	ldr	r0, [sp, #0]
     350:	9901      	ldr	r1, [sp, #4]
     352:	0002      	movs	r2, r0
     354:	000b      	movs	r3, r1
     356:	4c27      	ldr	r4, [pc, #156]	; (3f4 <i2c_master_init+0x2d4>)
     358:	47a0      	blx	r4
     35a:	9000      	str	r0, [sp, #0]
     35c:	9101      	str	r1, [sp, #4]
     35e:	0030      	movs	r0, r6
     360:	4b20      	ldr	r3, [pc, #128]	; (3e4 <i2c_master_init+0x2c4>)
     362:	4798      	blx	r3
     364:	2200      	movs	r2, #0
     366:	4b2a      	ldr	r3, [pc, #168]	; (410 <i2c_master_init+0x2f0>)
     368:	47b8      	blx	r7
     36a:	0002      	movs	r2, r0
     36c:	000b      	movs	r3, r1
     36e:	9800      	ldr	r0, [sp, #0]
     370:	9901      	ldr	r1, [sp, #4]
     372:	4c24      	ldr	r4, [pc, #144]	; (404 <i2c_master_init+0x2e4>)
     374:	47a0      	blx	r4
     376:	2200      	movs	r2, #0
     378:	4b21      	ldr	r3, [pc, #132]	; (400 <i2c_master_init+0x2e0>)
     37a:	4c20      	ldr	r4, [pc, #128]	; (3fc <i2c_master_init+0x2dc>)
     37c:	47a0      	blx	r4
     37e:	4b22      	ldr	r3, [pc, #136]	; (408 <i2c_master_init+0x2e8>)
     380:	4798      	blx	r3
     382:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     384:	d00c      	beq.n	3a0 <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     386:	0031      	movs	r1, r6
     388:	9807      	ldr	r0, [sp, #28]
     38a:	4b22      	ldr	r3, [pc, #136]	; (414 <i2c_master_init+0x2f4>)
     38c:	4798      	blx	r3
     38e:	3802      	subs	r0, #2
     390:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     392:	002b      	movs	r3, r5
     394:	2dff      	cmp	r5, #255	; 0xff
     396:	d80c      	bhi.n	3b2 <i2c_master_init+0x292>
     398:	28ff      	cmp	r0, #255	; 0xff
     39a:	d9bc      	bls.n	316 <i2c_master_init+0x1f6>
     39c:	2040      	movs	r0, #64	; 0x40
     39e:	e6e6      	b.n	16e <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     3a0:	0071      	lsls	r1, r6, #1
     3a2:	1e48      	subs	r0, r1, #1
     3a4:	9b07      	ldr	r3, [sp, #28]
     3a6:	469c      	mov	ip, r3
     3a8:	4460      	add	r0, ip
     3aa:	4b1a      	ldr	r3, [pc, #104]	; (414 <i2c_master_init+0x2f4>)
     3ac:	4798      	blx	r3
     3ae:	3801      	subs	r0, #1
     3b0:	e7ef      	b.n	392 <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     3b2:	2040      	movs	r0, #64	; 0x40
     3b4:	e6db      	b.n	16e <i2c_master_init+0x4e>
     3b6:	46c0      	nop			; (mov r8, r8)
     3b8:	000043b9 	.word	0x000043b9
     3bc:	40000400 	.word	0x40000400
     3c0:	0000552d 	.word	0x0000552d
     3c4:	000054a1 	.word	0x000054a1
     3c8:	000041f5 	.word	0x000041f5
     3cc:	00000841 	.word	0x00000841
     3d0:	000043f5 	.word	0x000043f5
     3d4:	200003e4 	.word	0x200003e4
     3d8:	00005625 	.word	0x00005625
     3dc:	41002000 	.word	0x41002000
     3e0:	00005549 	.word	0x00005549
     3e4:	000091f5 	.word	0x000091f5
     3e8:	00008661 	.word	0x00008661
     3ec:	e826d695 	.word	0xe826d695
     3f0:	3e112e0b 	.word	0x3e112e0b
     3f4:	000079d9 	.word	0x000079d9
     3f8:	40240000 	.word	0x40240000
     3fc:	00008b61 	.word	0x00008b61
     400:	3ff00000 	.word	0x3ff00000
     404:	00007ff9 	.word	0x00007ff9
     408:	0000918d 	.word	0x0000918d
     40c:	00004241 	.word	0x00004241
     410:	40080000 	.word	0x40080000
     414:	00007369 	.word	0x00007369

00000418 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     418:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     41a:	7e1a      	ldrb	r2, [r3, #24]
     41c:	0792      	lsls	r2, r2, #30
     41e:	d507      	bpl.n	430 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     420:	2202      	movs	r2, #2
     422:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     424:	8b5b      	ldrh	r3, [r3, #26]
     426:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     428:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     42a:	17db      	asrs	r3, r3, #31
     42c:	4018      	ands	r0, r3
}
     42e:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     430:	8b5a      	ldrh	r2, [r3, #26]
     432:	0752      	lsls	r2, r2, #29
     434:	d506      	bpl.n	444 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     436:	6859      	ldr	r1, [r3, #4]
     438:	22c0      	movs	r2, #192	; 0xc0
     43a:	0292      	lsls	r2, r2, #10
     43c:	430a      	orrs	r2, r1
     43e:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     440:	2018      	movs	r0, #24
     442:	e7f4      	b.n	42e <_i2c_master_address_response+0x16>
	return STATUS_OK;
     444:	2000      	movs	r0, #0
     446:	e7f2      	b.n	42e <_i2c_master_address_response+0x16>

00000448 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     448:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     44a:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     44c:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     44e:	2401      	movs	r4, #1
     450:	2502      	movs	r5, #2
     452:	7e11      	ldrb	r1, [r2, #24]
     454:	4221      	tst	r1, r4
     456:	d10b      	bne.n	470 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     458:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     45a:	4229      	tst	r1, r5
     45c:	d106      	bne.n	46c <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     45e:	3301      	adds	r3, #1
     460:	b29b      	uxth	r3, r3
     462:	8901      	ldrh	r1, [r0, #8]
     464:	4299      	cmp	r1, r3
     466:	d8f4      	bhi.n	452 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     468:	2012      	movs	r0, #18
     46a:	e002      	b.n	472 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     46c:	2000      	movs	r0, #0
     46e:	e000      	b.n	472 <_i2c_master_wait_for_bus+0x2a>
     470:	2000      	movs	r0, #0
}
     472:	bd30      	pop	{r4, r5, pc}

00000474 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     474:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     476:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     478:	6862      	ldr	r2, [r4, #4]
     47a:	2380      	movs	r3, #128	; 0x80
     47c:	02db      	lsls	r3, r3, #11
     47e:	4313      	orrs	r3, r2
     480:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     482:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     484:	4b02      	ldr	r3, [pc, #8]	; (490 <_i2c_master_send_hs_master_code+0x1c>)
     486:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     488:	2301      	movs	r3, #1
     48a:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     48c:	bd10      	pop	{r4, pc}
     48e:	46c0      	nop			; (mov r8, r8)
     490:	00000449 	.word	0x00000449

00000494 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     494:	b5f0      	push	{r4, r5, r6, r7, lr}
     496:	46de      	mov	lr, fp
     498:	4657      	mov	r7, sl
     49a:	464e      	mov	r6, r9
     49c:	4645      	mov	r5, r8
     49e:	b5e0      	push	{r5, r6, r7, lr}
     4a0:	b083      	sub	sp, #12
     4a2:	0006      	movs	r6, r0
     4a4:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     4a6:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     4a8:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     4aa:	682b      	ldr	r3, [r5, #0]
     4ac:	011b      	lsls	r3, r3, #4
     4ae:	0fdb      	lsrs	r3, r3, #31
     4b0:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     4b2:	7a4b      	ldrb	r3, [r1, #9]
     4b4:	2b00      	cmp	r3, #0
     4b6:	d12b      	bne.n	510 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     4b8:	686b      	ldr	r3, [r5, #4]
     4ba:	4a58      	ldr	r2, [pc, #352]	; (61c <_i2c_master_read_packet+0x188>)
     4bc:	4013      	ands	r3, r2
     4be:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     4c0:	464b      	mov	r3, r9
     4c2:	7a1b      	ldrb	r3, [r3, #8]
     4c4:	2b00      	cmp	r3, #0
     4c6:	d127      	bne.n	518 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     4c8:	464b      	mov	r3, r9
     4ca:	881b      	ldrh	r3, [r3, #0]
     4cc:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     4ce:	464a      	mov	r2, r9
     4d0:	7a52      	ldrb	r2, [r2, #9]
     4d2:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     4d4:	4313      	orrs	r3, r2
     4d6:	2201      	movs	r2, #1
     4d8:	4313      	orrs	r3, r2
     4da:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     4dc:	0030      	movs	r0, r6
     4de:	4b50      	ldr	r3, [pc, #320]	; (620 <_i2c_master_read_packet+0x18c>)
     4e0:	4798      	blx	r3
     4e2:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     4e4:	4653      	mov	r3, sl
     4e6:	2b00      	cmp	r3, #0
     4e8:	d003      	beq.n	4f2 <_i2c_master_read_packet+0x5e>
     4ea:	464b      	mov	r3, r9
     4ec:	885b      	ldrh	r3, [r3, #2]
     4ee:	2b01      	cmp	r3, #1
     4f0:	d03b      	beq.n	56a <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
     4f2:	686b      	ldr	r3, [r5, #4]
     4f4:	4a49      	ldr	r2, [pc, #292]	; (61c <_i2c_master_read_packet+0x188>)
     4f6:	4013      	ands	r3, r2
     4f8:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     4fa:	9b01      	ldr	r3, [sp, #4]
     4fc:	2b00      	cmp	r3, #0
     4fe:	d03a      	beq.n	576 <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     500:	9801      	ldr	r0, [sp, #4]
     502:	b003      	add	sp, #12
     504:	bc3c      	pop	{r2, r3, r4, r5}
     506:	4690      	mov	r8, r2
     508:	4699      	mov	r9, r3
     50a:	46a2      	mov	sl, r4
     50c:	46ab      	mov	fp, r5
     50e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     510:	7a89      	ldrb	r1, [r1, #10]
     512:	4b44      	ldr	r3, [pc, #272]	; (624 <_i2c_master_read_packet+0x190>)
     514:	4798      	blx	r3
     516:	e7cf      	b.n	4b8 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
     518:	464b      	mov	r3, r9
     51a:	881b      	ldrh	r3, [r3, #0]
     51c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     51e:	464a      	mov	r2, r9
     520:	7a52      	ldrb	r2, [r2, #9]
     522:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     524:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     526:	2280      	movs	r2, #128	; 0x80
     528:	0212      	lsls	r2, r2, #8
     52a:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     52c:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     52e:	0030      	movs	r0, r6
     530:	4b3b      	ldr	r3, [pc, #236]	; (620 <_i2c_master_read_packet+0x18c>)
     532:	4798      	blx	r3
     534:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     536:	686b      	ldr	r3, [r5, #4]
     538:	4a38      	ldr	r2, [pc, #224]	; (61c <_i2c_master_read_packet+0x188>)
     53a:	4013      	ands	r3, r2
     53c:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
     53e:	2800      	cmp	r0, #0
     540:	d1de      	bne.n	500 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
     542:	0030      	movs	r0, r6
     544:	4b38      	ldr	r3, [pc, #224]	; (628 <_i2c_master_read_packet+0x194>)
     546:	4798      	blx	r3
     548:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
     54a:	2800      	cmp	r0, #0
     54c:	d1d8      	bne.n	500 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     54e:	464b      	mov	r3, r9
     550:	881b      	ldrh	r3, [r3, #0]
     552:	0a1b      	lsrs	r3, r3, #8
     554:	2278      	movs	r2, #120	; 0x78
     556:	4313      	orrs	r3, r2
     558:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     55a:	464a      	mov	r2, r9
     55c:	7a52      	ldrb	r2, [r2, #9]
     55e:	0392      	lsls	r2, r2, #14
     560:	2101      	movs	r1, #1
     562:	430a      	orrs	r2, r1
     564:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     566:	626b      	str	r3, [r5, #36]	; 0x24
     568:	e7b8      	b.n	4dc <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     56a:	686a      	ldr	r2, [r5, #4]
     56c:	2380      	movs	r3, #128	; 0x80
     56e:	02db      	lsls	r3, r3, #11
     570:	4313      	orrs	r3, r2
     572:	606b      	str	r3, [r5, #4]
     574:	e7c1      	b.n	4fa <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
     576:	0030      	movs	r0, r6
     578:	4b2b      	ldr	r3, [pc, #172]	; (628 <_i2c_master_read_packet+0x194>)
     57a:	4798      	blx	r3
     57c:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     57e:	2800      	cmp	r0, #0
     580:	d1be      	bne.n	500 <_i2c_master_read_packet+0x6c>
     582:	3c01      	subs	r4, #1
     584:	b2a4      	uxth	r4, r4
     586:	4680      	mov	r8, r0
		while (tmp_data_length--) {
     588:	4b28      	ldr	r3, [pc, #160]	; (62c <_i2c_master_read_packet+0x198>)
     58a:	469b      	mov	fp, r3
     58c:	e015      	b.n	5ba <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     58e:	2c01      	cmp	r4, #1
     590:	d020      	beq.n	5d4 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
     592:	0030      	movs	r0, r6
     594:	4b26      	ldr	r3, [pc, #152]	; (630 <_i2c_master_read_packet+0x19c>)
     596:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     598:	4643      	mov	r3, r8
     59a:	1c5f      	adds	r7, r3, #1
     59c:	b2bf      	uxth	r7, r7
     59e:	2328      	movs	r3, #40	; 0x28
     5a0:	5ceb      	ldrb	r3, [r5, r3]
     5a2:	464a      	mov	r2, r9
     5a4:	6852      	ldr	r2, [r2, #4]
     5a6:	4641      	mov	r1, r8
     5a8:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
     5aa:	0030      	movs	r0, r6
     5ac:	4b1c      	ldr	r3, [pc, #112]	; (620 <_i2c_master_read_packet+0x18c>)
     5ae:	4798      	blx	r3
     5b0:	3c01      	subs	r4, #1
     5b2:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
     5b4:	2800      	cmp	r0, #0
     5b6:	d115      	bne.n	5e4 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
     5b8:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
     5ba:	455c      	cmp	r4, fp
     5bc:	d014      	beq.n	5e8 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     5be:	8b6b      	ldrh	r3, [r5, #26]
     5c0:	069b      	lsls	r3, r3, #26
     5c2:	d527      	bpl.n	614 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     5c4:	7af3      	ldrb	r3, [r6, #11]
     5c6:	2b00      	cmp	r3, #0
     5c8:	d0e3      	beq.n	592 <_i2c_master_read_packet+0xfe>
     5ca:	4653      	mov	r3, sl
     5cc:	2b00      	cmp	r3, #0
     5ce:	d1de      	bne.n	58e <_i2c_master_read_packet+0xfa>
     5d0:	2c00      	cmp	r4, #0
     5d2:	d1de      	bne.n	592 <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     5d4:	686a      	ldr	r2, [r5, #4]
     5d6:	2380      	movs	r3, #128	; 0x80
     5d8:	02db      	lsls	r3, r3, #11
     5da:	4313      	orrs	r3, r2
     5dc:	606b      	str	r3, [r5, #4]
     5de:	3c01      	subs	r4, #1
     5e0:	b2a4      	uxth	r4, r4
     5e2:	e7ea      	b.n	5ba <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
     5e4:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
     5e6:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     5e8:	7ab3      	ldrb	r3, [r6, #10]
     5ea:	2b00      	cmp	r3, #0
     5ec:	d109      	bne.n	602 <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
     5ee:	0030      	movs	r0, r6
     5f0:	4b0f      	ldr	r3, [pc, #60]	; (630 <_i2c_master_read_packet+0x19c>)
     5f2:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     5f4:	2328      	movs	r3, #40	; 0x28
     5f6:	5cea      	ldrb	r2, [r5, r3]
     5f8:	464b      	mov	r3, r9
     5fa:	685b      	ldr	r3, [r3, #4]
     5fc:	4641      	mov	r1, r8
     5fe:	545a      	strb	r2, [r3, r1]
     600:	e77e      	b.n	500 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
     602:	0030      	movs	r0, r6
     604:	4b0a      	ldr	r3, [pc, #40]	; (630 <_i2c_master_read_packet+0x19c>)
     606:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     608:	686a      	ldr	r2, [r5, #4]
     60a:	23c0      	movs	r3, #192	; 0xc0
     60c:	029b      	lsls	r3, r3, #10
     60e:	4313      	orrs	r3, r2
     610:	606b      	str	r3, [r5, #4]
     612:	e7ec      	b.n	5ee <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
     614:	2341      	movs	r3, #65	; 0x41
     616:	9301      	str	r3, [sp, #4]
     618:	e772      	b.n	500 <_i2c_master_read_packet+0x6c>
     61a:	46c0      	nop			; (mov r8, r8)
     61c:	fffbffff 	.word	0xfffbffff
     620:	00000449 	.word	0x00000449
     624:	00000475 	.word	0x00000475
     628:	00000419 	.word	0x00000419
     62c:	0000ffff 	.word	0x0000ffff
     630:	00000115 	.word	0x00000115

00000634 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     634:	b5f0      	push	{r4, r5, r6, r7, lr}
     636:	46de      	mov	lr, fp
     638:	4657      	mov	r7, sl
     63a:	464e      	mov	r6, r9
     63c:	4645      	mov	r5, r8
     63e:	b5e0      	push	{r5, r6, r7, lr}
     640:	b083      	sub	sp, #12
     642:	0006      	movs	r6, r0
     644:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     646:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     648:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     64a:	4b32      	ldr	r3, [pc, #200]	; (714 <_i2c_master_write_packet+0xe0>)
     64c:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     64e:	7a7b      	ldrb	r3, [r7, #9]
     650:	2b00      	cmp	r3, #0
     652:	d11d      	bne.n	690 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     654:	686b      	ldr	r3, [r5, #4]
     656:	4a30      	ldr	r2, [pc, #192]	; (718 <_i2c_master_write_packet+0xe4>)
     658:	4013      	ands	r3, r2
     65a:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     65c:	7a3b      	ldrb	r3, [r7, #8]
     65e:	2b00      	cmp	r3, #0
     660:	d01b      	beq.n	69a <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     662:	883b      	ldrh	r3, [r7, #0]
     664:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     666:	7a7a      	ldrb	r2, [r7, #9]
     668:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     66a:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     66c:	2280      	movs	r2, #128	; 0x80
     66e:	0212      	lsls	r2, r2, #8
     670:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     672:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     674:	0030      	movs	r0, r6
     676:	4b29      	ldr	r3, [pc, #164]	; (71c <_i2c_master_write_packet+0xe8>)
     678:	4798      	blx	r3
     67a:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     67c:	2800      	cmp	r0, #0
     67e:	d013      	beq.n	6a8 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     680:	9801      	ldr	r0, [sp, #4]
     682:	b003      	add	sp, #12
     684:	bc3c      	pop	{r2, r3, r4, r5}
     686:	4690      	mov	r8, r2
     688:	4699      	mov	r9, r3
     68a:	46a2      	mov	sl, r4
     68c:	46ab      	mov	fp, r5
     68e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     690:	7ab9      	ldrb	r1, [r7, #10]
     692:	0030      	movs	r0, r6
     694:	4b22      	ldr	r3, [pc, #136]	; (720 <_i2c_master_write_packet+0xec>)
     696:	4798      	blx	r3
     698:	e7dc      	b.n	654 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     69a:	883b      	ldrh	r3, [r7, #0]
     69c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     69e:	7a7a      	ldrb	r2, [r7, #9]
     6a0:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     6a2:	4313      	orrs	r3, r2
     6a4:	626b      	str	r3, [r5, #36]	; 0x24
     6a6:	e7e5      	b.n	674 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
     6a8:	0030      	movs	r0, r6
     6aa:	4b1e      	ldr	r3, [pc, #120]	; (724 <_i2c_master_write_packet+0xf0>)
     6ac:	4798      	blx	r3
     6ae:	1e03      	subs	r3, r0, #0
     6b0:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     6b2:	d1e5      	bne.n	680 <_i2c_master_write_packet+0x4c>
     6b4:	46a0      	mov	r8, r4
     6b6:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     6b8:	3320      	adds	r3, #32
     6ba:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
     6bc:	4b15      	ldr	r3, [pc, #84]	; (714 <_i2c_master_write_packet+0xe0>)
     6be:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
     6c0:	4b16      	ldr	r3, [pc, #88]	; (71c <_i2c_master_write_packet+0xe8>)
     6c2:	469a      	mov	sl, r3
		while (tmp_data_length--) {
     6c4:	4544      	cmp	r4, r8
     6c6:	d015      	beq.n	6f4 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     6c8:	8b6b      	ldrh	r3, [r5, #26]
     6ca:	464a      	mov	r2, r9
     6cc:	4213      	tst	r3, r2
     6ce:	d01d      	beq.n	70c <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
     6d0:	0030      	movs	r0, r6
     6d2:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     6d4:	687b      	ldr	r3, [r7, #4]
     6d6:	5d1a      	ldrb	r2, [r3, r4]
     6d8:	2328      	movs	r3, #40	; 0x28
     6da:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
     6dc:	0030      	movs	r0, r6
     6de:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
     6e0:	2800      	cmp	r0, #0
     6e2:	d106      	bne.n	6f2 <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     6e4:	8b6b      	ldrh	r3, [r5, #26]
     6e6:	3401      	adds	r4, #1
     6e8:	075b      	lsls	r3, r3, #29
     6ea:	d5eb      	bpl.n	6c4 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
     6ec:	231e      	movs	r3, #30
     6ee:	9301      	str	r3, [sp, #4]
     6f0:	e000      	b.n	6f4 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
     6f2:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     6f4:	7ab3      	ldrb	r3, [r6, #10]
     6f6:	2b00      	cmp	r3, #0
     6f8:	d0c2      	beq.n	680 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
     6fa:	0030      	movs	r0, r6
     6fc:	4b05      	ldr	r3, [pc, #20]	; (714 <_i2c_master_write_packet+0xe0>)
     6fe:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     700:	686a      	ldr	r2, [r5, #4]
     702:	23c0      	movs	r3, #192	; 0xc0
     704:	029b      	lsls	r3, r3, #10
     706:	4313      	orrs	r3, r2
     708:	606b      	str	r3, [r5, #4]
     70a:	e7b9      	b.n	680 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
     70c:	2341      	movs	r3, #65	; 0x41
     70e:	9301      	str	r3, [sp, #4]
     710:	e7b6      	b.n	680 <_i2c_master_write_packet+0x4c>
     712:	46c0      	nop			; (mov r8, r8)
     714:	00000115 	.word	0x00000115
     718:	fffbffff 	.word	0xfffbffff
     71c:	00000449 	.word	0x00000449
     720:	00000475 	.word	0x00000475
     724:	00000419 	.word	0x00000419

00000728 <i2c_master_read_packet_wait>:
{
     728:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
     72a:	8b83      	ldrh	r3, [r0, #28]
     72c:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     72e:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     730:	2b00      	cmp	r3, #0
     732:	d001      	beq.n	738 <i2c_master_read_packet_wait+0x10>
}
     734:	0010      	movs	r0, r2
     736:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     738:	3301      	adds	r3, #1
     73a:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     73c:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     73e:	4b02      	ldr	r3, [pc, #8]	; (748 <i2c_master_read_packet_wait+0x20>)
     740:	4798      	blx	r3
     742:	0002      	movs	r2, r0
     744:	e7f6      	b.n	734 <i2c_master_read_packet_wait+0xc>
     746:	46c0      	nop			; (mov r8, r8)
     748:	00000495 	.word	0x00000495

0000074c <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     74c:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     74e:	8b83      	ldrh	r3, [r0, #28]
     750:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     752:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     754:	2b00      	cmp	r3, #0
     756:	d001      	beq.n	75c <i2c_master_write_packet_wait_no_stop+0x10>

	module->send_stop = false;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
     758:	0010      	movs	r0, r2
     75a:	bd10      	pop	{r4, pc}
	module->send_stop = false;
     75c:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     75e:	3301      	adds	r3, #1
     760:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     762:	4b02      	ldr	r3, [pc, #8]	; (76c <i2c_master_write_packet_wait_no_stop+0x20>)
     764:	4798      	blx	r3
     766:	0002      	movs	r2, r0
     768:	e7f6      	b.n	758 <i2c_master_write_packet_wait_no_stop+0xc>
     76a:	46c0      	nop			; (mov r8, r8)
     76c:	00000635 	.word	0x00000635

00000770 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     770:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     772:	2207      	movs	r2, #7
     774:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
     776:	421a      	tst	r2, r3
     778:	d1fc      	bne.n	774 <_i2c_master_wait_for_sync+0x4>
}
     77a:	4770      	bx	lr

0000077c <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     77c:	b570      	push	{r4, r5, r6, lr}
     77e:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     780:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     782:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     784:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     786:	8b83      	ldrh	r3, [r0, #28]
     788:	1aed      	subs	r5, r5, r3
     78a:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     78c:	8b83      	ldrh	r3, [r0, #28]
     78e:	3b01      	subs	r3, #1
     790:	b29b      	uxth	r3, r3
     792:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     794:	0113      	lsls	r3, r2, #4
     796:	d51d      	bpl.n	7d4 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     798:	7ac3      	ldrb	r3, [r0, #11]
     79a:	2b00      	cmp	r3, #0
     79c:	d003      	beq.n	7a6 <_i2c_master_read+0x2a>
     79e:	8b83      	ldrh	r3, [r0, #28]
     7a0:	b29b      	uxth	r3, r3
     7a2:	2b01      	cmp	r3, #1
     7a4:	d010      	beq.n	7c8 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     7a6:	8ba3      	ldrh	r3, [r4, #28]
     7a8:	b29b      	uxth	r3, r3
     7aa:	2b00      	cmp	r3, #0
     7ac:	d102      	bne.n	7b4 <_i2c_master_read+0x38>
		if (module->send_stop) {
     7ae:	7aa3      	ldrb	r3, [r4, #10]
     7b0:	2b00      	cmp	r3, #0
     7b2:	d11c      	bne.n	7ee <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     7b4:	0020      	movs	r0, r4
     7b6:	4b12      	ldr	r3, [pc, #72]	; (800 <_i2c_master_read+0x84>)
     7b8:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     7ba:	6a23      	ldr	r3, [r4, #32]
     7bc:	195d      	adds	r5, r3, r5
     7be:	2328      	movs	r3, #40	; 0x28
     7c0:	5cf3      	ldrb	r3, [r6, r3]
     7c2:	b2db      	uxtb	r3, r3
     7c4:	702b      	strb	r3, [r5, #0]
}
     7c6:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     7c8:	6872      	ldr	r2, [r6, #4]
     7ca:	2380      	movs	r3, #128	; 0x80
     7cc:	02db      	lsls	r3, r3, #11
     7ce:	4313      	orrs	r3, r2
     7d0:	6073      	str	r3, [r6, #4]
     7d2:	e7e8      	b.n	7a6 <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     7d4:	7ac3      	ldrb	r3, [r0, #11]
     7d6:	2b00      	cmp	r3, #0
     7d8:	d0e5      	beq.n	7a6 <_i2c_master_read+0x2a>
     7da:	8b83      	ldrh	r3, [r0, #28]
     7dc:	b29b      	uxth	r3, r3
     7de:	2b00      	cmp	r3, #0
     7e0:	d1e1      	bne.n	7a6 <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     7e2:	6872      	ldr	r2, [r6, #4]
     7e4:	2380      	movs	r3, #128	; 0x80
     7e6:	02db      	lsls	r3, r3, #11
     7e8:	4313      	orrs	r3, r2
     7ea:	6073      	str	r3, [r6, #4]
     7ec:	e7db      	b.n	7a6 <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     7ee:	0020      	movs	r0, r4
     7f0:	4b03      	ldr	r3, [pc, #12]	; (800 <_i2c_master_read+0x84>)
     7f2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     7f4:	6872      	ldr	r2, [r6, #4]
     7f6:	23c0      	movs	r3, #192	; 0xc0
     7f8:	029b      	lsls	r3, r3, #10
     7fa:	4313      	orrs	r3, r2
     7fc:	6073      	str	r3, [r6, #4]
     7fe:	e7d9      	b.n	7b4 <_i2c_master_read+0x38>
     800:	00000771 	.word	0x00000771

00000804 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     804:	b570      	push	{r4, r5, r6, lr}
     806:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     808:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     80a:	8b6b      	ldrh	r3, [r5, #26]
     80c:	075b      	lsls	r3, r3, #29
     80e:	d503      	bpl.n	818 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     810:	221e      	movs	r2, #30
     812:	2325      	movs	r3, #37	; 0x25
     814:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     816:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     818:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     81a:	8b83      	ldrh	r3, [r0, #28]
     81c:	1af6      	subs	r6, r6, r3
     81e:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     820:	8b83      	ldrh	r3, [r0, #28]
     822:	3b01      	subs	r3, #1
     824:	b29b      	uxth	r3, r3
     826:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     828:	4b04      	ldr	r3, [pc, #16]	; (83c <_i2c_master_write+0x38>)
     82a:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     82c:	6a23      	ldr	r3, [r4, #32]
     82e:	199e      	adds	r6, r3, r6
     830:	7833      	ldrb	r3, [r6, #0]
     832:	b2db      	uxtb	r3, r3
     834:	2228      	movs	r2, #40	; 0x28
     836:	54ab      	strb	r3, [r5, r2]
     838:	e7ed      	b.n	816 <_i2c_master_write+0x12>
     83a:	46c0      	nop			; (mov r8, r8)
     83c:	00000771 	.word	0x00000771

00000840 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     840:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     842:	0080      	lsls	r0, r0, #2
     844:	4b75      	ldr	r3, [pc, #468]	; (a1c <_i2c_master_interrupt_handler+0x1dc>)
     846:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     848:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     84a:	682b      	ldr	r3, [r5, #0]
     84c:	011b      	lsls	r3, r3, #4
     84e:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     850:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     852:	7e26      	ldrb	r6, [r4, #24]
     854:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     856:	8b63      	ldrh	r3, [r4, #26]
     858:	b29b      	uxth	r3, r3
     85a:	2b00      	cmp	r3, #0
     85c:	d103      	bne.n	866 <_i2c_master_interrupt_handler+0x26>
     85e:	8ba3      	ldrh	r3, [r4, #28]
     860:	b29b      	uxth	r3, r3
     862:	2b00      	cmp	r3, #0
     864:	d123      	bne.n	8ae <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     866:	8b63      	ldrh	r3, [r4, #26]
     868:	b29b      	uxth	r3, r3
     86a:	2b00      	cmp	r3, #0
     86c:	d008      	beq.n	880 <_i2c_master_interrupt_handler+0x40>
     86e:	8ba3      	ldrh	r3, [r4, #28]
     870:	b29b      	uxth	r3, r3
     872:	2b00      	cmp	r3, #0
     874:	d104      	bne.n	880 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
     876:	3325      	adds	r3, #37	; 0x25
     878:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     87a:	2b05      	cmp	r3, #5
     87c:	d100      	bne.n	880 <_i2c_master_interrupt_handler+0x40>
     87e:	e06d      	b.n	95c <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     880:	8b63      	ldrh	r3, [r4, #26]
     882:	b29b      	uxth	r3, r3
     884:	2b00      	cmp	r3, #0
     886:	d024      	beq.n	8d2 <_i2c_master_interrupt_handler+0x92>
     888:	8ba3      	ldrh	r3, [r4, #28]
     88a:	b29b      	uxth	r3, r3
     88c:	2b00      	cmp	r3, #0
     88e:	d020      	beq.n	8d2 <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     890:	8b6b      	ldrh	r3, [r5, #26]
     892:	069b      	lsls	r3, r3, #26
     894:	d500      	bpl.n	898 <_i2c_master_interrupt_handler+0x58>
     896:	e081      	b.n	99c <_i2c_master_interrupt_handler+0x15c>
     898:	2a00      	cmp	r2, #0
     89a:	d004      	beq.n	8a6 <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     89c:	8ba3      	ldrh	r3, [r4, #28]
     89e:	b29b      	uxth	r3, r3
     8a0:	2b01      	cmp	r3, #1
     8a2:	d100      	bne.n	8a6 <_i2c_master_interrupt_handler+0x66>
     8a4:	e07a      	b.n	99c <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     8a6:	2241      	movs	r2, #65	; 0x41
     8a8:	2325      	movs	r3, #37	; 0x25
     8aa:	54e2      	strb	r2, [r4, r3]
     8ac:	e011      	b.n	8d2 <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     8ae:	7e2b      	ldrb	r3, [r5, #24]
     8b0:	07db      	lsls	r3, r3, #31
     8b2:	d507      	bpl.n	8c4 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     8b4:	2301      	movs	r3, #1
     8b6:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     8b8:	8b6b      	ldrh	r3, [r5, #26]
     8ba:	079b      	lsls	r3, r3, #30
     8bc:	d52e      	bpl.n	91c <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     8be:	2241      	movs	r2, #65	; 0x41
     8c0:	2325      	movs	r3, #37	; 0x25
     8c2:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     8c4:	8ba3      	ldrh	r3, [r4, #28]
     8c6:	b29b      	uxth	r3, r3
     8c8:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     8ca:	2325      	movs	r3, #37	; 0x25
     8cc:	5ce3      	ldrb	r3, [r4, r3]
     8ce:	2b05      	cmp	r3, #5
     8d0:	d038      	beq.n	944 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     8d2:	8b63      	ldrh	r3, [r4, #26]
     8d4:	b29b      	uxth	r3, r3
     8d6:	2b00      	cmp	r3, #0
     8d8:	d007      	beq.n	8ea <_i2c_master_interrupt_handler+0xaa>
     8da:	8ba3      	ldrh	r3, [r4, #28]
     8dc:	b29b      	uxth	r3, r3
     8de:	2b00      	cmp	r3, #0
     8e0:	d103      	bne.n	8ea <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     8e2:	3325      	adds	r3, #37	; 0x25
     8e4:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     8e6:	2b05      	cmp	r3, #5
     8e8:	d064      	beq.n	9b4 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     8ea:	2325      	movs	r3, #37	; 0x25
     8ec:	5ce3      	ldrb	r3, [r4, r3]
     8ee:	2b05      	cmp	r3, #5
     8f0:	d013      	beq.n	91a <_i2c_master_interrupt_handler+0xda>
     8f2:	2325      	movs	r3, #37	; 0x25
     8f4:	5ce3      	ldrb	r3, [r4, r3]
     8f6:	2b00      	cmp	r3, #0
     8f8:	d00f      	beq.n	91a <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     8fa:	2303      	movs	r3, #3
     8fc:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     8fe:	2300      	movs	r3, #0
     900:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     902:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     904:	3325      	adds	r3, #37	; 0x25
     906:	5ce3      	ldrb	r3, [r4, r3]
     908:	2b41      	cmp	r3, #65	; 0x41
     90a:	d003      	beq.n	914 <_i2c_master_interrupt_handler+0xd4>
     90c:	7aa3      	ldrb	r3, [r4, #10]
     90e:	2b00      	cmp	r3, #0
     910:	d000      	beq.n	914 <_i2c_master_interrupt_handler+0xd4>
     912:	e075      	b.n	a00 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     914:	0773      	lsls	r3, r6, #29
     916:	d500      	bpl.n	91a <_i2c_master_interrupt_handler+0xda>
     918:	e07b      	b.n	a12 <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     91a:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     91c:	8b6b      	ldrh	r3, [r5, #26]
     91e:	075b      	lsls	r3, r3, #29
     920:	d5d0      	bpl.n	8c4 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     922:	2218      	movs	r2, #24
     924:	2325      	movs	r3, #37	; 0x25
     926:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     928:	2300      	movs	r3, #0
     92a:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     92c:	7aa3      	ldrb	r3, [r4, #10]
     92e:	2b00      	cmp	r3, #0
     930:	d0c8      	beq.n	8c4 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     932:	0020      	movs	r0, r4
     934:	4b3a      	ldr	r3, [pc, #232]	; (a20 <_i2c_master_interrupt_handler+0x1e0>)
     936:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     938:	686a      	ldr	r2, [r5, #4]
     93a:	23c0      	movs	r3, #192	; 0xc0
     93c:	029b      	lsls	r3, r3, #10
     93e:	4313      	orrs	r3, r2
     940:	606b      	str	r3, [r5, #4]
     942:	e7bf      	b.n	8c4 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     944:	331f      	adds	r3, #31
     946:	5ce3      	ldrb	r3, [r4, r3]
     948:	2b00      	cmp	r3, #0
     94a:	d003      	beq.n	954 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     94c:	0020      	movs	r0, r4
     94e:	4b35      	ldr	r3, [pc, #212]	; (a24 <_i2c_master_interrupt_handler+0x1e4>)
     950:	4798      	blx	r3
     952:	e7be      	b.n	8d2 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     954:	0020      	movs	r0, r4
     956:	4b34      	ldr	r3, [pc, #208]	; (a28 <_i2c_master_interrupt_handler+0x1e8>)
     958:	4798      	blx	r3
     95a:	e7ba      	b.n	8d2 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     95c:	331f      	adds	r3, #31
     95e:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     960:	2b00      	cmp	r3, #0
     962:	d000      	beq.n	966 <_i2c_master_interrupt_handler+0x126>
     964:	e78c      	b.n	880 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
     966:	3303      	adds	r3, #3
     968:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     96a:	2300      	movs	r3, #0
     96c:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     96e:	3325      	adds	r3, #37	; 0x25
     970:	2200      	movs	r2, #0
     972:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     974:	7aa3      	ldrb	r3, [r4, #10]
     976:	2b00      	cmp	r3, #0
     978:	d107      	bne.n	98a <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     97a:	2301      	movs	r3, #1
     97c:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     97e:	07f3      	lsls	r3, r6, #31
     980:	d5a7      	bpl.n	8d2 <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     982:	68e3      	ldr	r3, [r4, #12]
     984:	0020      	movs	r0, r4
     986:	4798      	blx	r3
     988:	e7a3      	b.n	8d2 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     98a:	0020      	movs	r0, r4
     98c:	4b24      	ldr	r3, [pc, #144]	; (a20 <_i2c_master_interrupt_handler+0x1e0>)
     98e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     990:	686a      	ldr	r2, [r5, #4]
     992:	23c0      	movs	r3, #192	; 0xc0
     994:	029b      	lsls	r3, r3, #10
     996:	4313      	orrs	r3, r2
     998:	606b      	str	r3, [r5, #4]
     99a:	e7f0      	b.n	97e <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     99c:	2324      	movs	r3, #36	; 0x24
     99e:	5ce3      	ldrb	r3, [r4, r3]
     9a0:	2b00      	cmp	r3, #0
     9a2:	d103      	bne.n	9ac <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     9a4:	0020      	movs	r0, r4
     9a6:	4b20      	ldr	r3, [pc, #128]	; (a28 <_i2c_master_interrupt_handler+0x1e8>)
     9a8:	4798      	blx	r3
     9aa:	e792      	b.n	8d2 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     9ac:	0020      	movs	r0, r4
     9ae:	4b1d      	ldr	r3, [pc, #116]	; (a24 <_i2c_master_interrupt_handler+0x1e4>)
     9b0:	4798      	blx	r3
     9b2:	e78e      	b.n	8d2 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     9b4:	331f      	adds	r3, #31
     9b6:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     9b8:	2b01      	cmp	r3, #1
     9ba:	d196      	bne.n	8ea <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     9bc:	7e2b      	ldrb	r3, [r5, #24]
     9be:	079b      	lsls	r3, r3, #30
     9c0:	d501      	bpl.n	9c6 <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     9c2:	2302      	movs	r3, #2
     9c4:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     9c6:	2303      	movs	r3, #3
     9c8:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     9ca:	2300      	movs	r3, #0
     9cc:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     9ce:	3325      	adds	r3, #37	; 0x25
     9d0:	2200      	movs	r2, #0
     9d2:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     9d4:	07b3      	lsls	r3, r6, #30
     9d6:	d503      	bpl.n	9e0 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     9d8:	2324      	movs	r3, #36	; 0x24
     9da:	5ce3      	ldrb	r3, [r4, r3]
     9dc:	2b01      	cmp	r3, #1
     9de:	d00b      	beq.n	9f8 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     9e0:	07f3      	lsls	r3, r6, #31
     9e2:	d400      	bmi.n	9e6 <_i2c_master_interrupt_handler+0x1a6>
     9e4:	e781      	b.n	8ea <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     9e6:	2324      	movs	r3, #36	; 0x24
     9e8:	5ce3      	ldrb	r3, [r4, r3]
     9ea:	2b00      	cmp	r3, #0
     9ec:	d000      	beq.n	9f0 <_i2c_master_interrupt_handler+0x1b0>
     9ee:	e77c      	b.n	8ea <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     9f0:	68e3      	ldr	r3, [r4, #12]
     9f2:	0020      	movs	r0, r4
     9f4:	4798      	blx	r3
     9f6:	e778      	b.n	8ea <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     9f8:	6923      	ldr	r3, [r4, #16]
     9fa:	0020      	movs	r0, r4
     9fc:	4798      	blx	r3
     9fe:	e774      	b.n	8ea <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     a00:	0020      	movs	r0, r4
     a02:	4b07      	ldr	r3, [pc, #28]	; (a20 <_i2c_master_interrupt_handler+0x1e0>)
     a04:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     a06:	686a      	ldr	r2, [r5, #4]
     a08:	23e0      	movs	r3, #224	; 0xe0
     a0a:	02db      	lsls	r3, r3, #11
     a0c:	4313      	orrs	r3, r2
     a0e:	606b      	str	r3, [r5, #4]
     a10:	e780      	b.n	914 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     a12:	6963      	ldr	r3, [r4, #20]
     a14:	0020      	movs	r0, r4
     a16:	4798      	blx	r3
}
     a18:	e77f      	b.n	91a <_i2c_master_interrupt_handler+0xda>
     a1a:	46c0      	nop			; (mov r8, r8)
     a1c:	200003e4 	.word	0x200003e4
     a20:	00000771 	.word	0x00000771
     a24:	0000077d 	.word	0x0000077d
     a28:	00000805 	.word	0x00000805

00000a2c <shtc1_check_crc>:
static const uint8_t ID_REG_MASK       = 0x1f;
static const uint8_t CRC_POLYNOMIAL    = 0x31;
static const uint8_t CRC_INIT          = 0xff;

static bool shtc1_check_crc(uint8_t *data, uint8_t data_length, uint8_t checksum)
{
     a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t crc = CRC_INIT;
    uint8_t current_byte;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < data_length; ++current_byte)
     a2e:	2900      	cmp	r1, #0
     a30:	d01c      	beq.n	a6c <shtc1_check_crc+0x40>
     a32:	0006      	movs	r6, r0
     a34:	3901      	subs	r1, #1
     a36:	b2c9      	uxtb	r1, r1
     a38:	3101      	adds	r1, #1
     a3a:	1840      	adds	r0, r0, r1
     a3c:	23ff      	movs	r3, #255	; 0xff
    {
        crc ^= (data[current_byte]);
     a3e:	2508      	movs	r5, #8
        for (uint8_t bit = 8; bit > 0; --bit)
        {
            if (crc & 0x80)
                crc = (crc << 1) ^ CRC_POLYNOMIAL;
     a40:	2731      	movs	r7, #49	; 0x31
     a42:	e00f      	b.n	a64 <shtc1_check_crc+0x38>
     a44:	005b      	lsls	r3, r3, #1
     a46:	407b      	eors	r3, r7
     a48:	b2db      	uxtb	r3, r3
     a4a:	3901      	subs	r1, #1
     a4c:	b2c9      	uxtb	r1, r1
        for (uint8_t bit = 8; bit > 0; --bit)
     a4e:	2900      	cmp	r1, #0
     a50:	d005      	beq.n	a5e <shtc1_check_crc+0x32>
            if (crc & 0x80)
     a52:	b25c      	sxtb	r4, r3
     a54:	2c00      	cmp	r4, #0
     a56:	dbf5      	blt.n	a44 <shtc1_check_crc+0x18>
            else
                crc = (crc << 1);
     a58:	005b      	lsls	r3, r3, #1
     a5a:	b2db      	uxtb	r3, r3
     a5c:	e7f5      	b.n	a4a <shtc1_check_crc+0x1e>
     a5e:	3601      	adds	r6, #1
    for (current_byte = 0; current_byte < data_length; ++current_byte)
     a60:	4286      	cmp	r6, r0
     a62:	d004      	beq.n	a6e <shtc1_check_crc+0x42>
        crc ^= (data[current_byte]);
     a64:	7831      	ldrb	r1, [r6, #0]
     a66:	404b      	eors	r3, r1
     a68:	0029      	movs	r1, r5
     a6a:	e7f2      	b.n	a52 <shtc1_check_crc+0x26>
    uint8_t crc = CRC_INIT;
     a6c:	23ff      	movs	r3, #255	; 0xff
        }
    }
    return crc == checksum;
     a6e:	1ad2      	subs	r2, r2, r3
     a70:	4250      	negs	r0, r2
     a72:	4150      	adcs	r0, r2
     a74:	b2c0      	uxtb	r0, r0
}
     a76:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000a78 <shtc1_read_async_result>:

enum status_code shtc1_read_async_result(struct i2c_master_module *i2c_master_instance_ptr,
        int *temp, int *rh)
{
     a78:	b5f0      	push	{r4, r5, r6, r7, lr}
     a7a:	b087      	sub	sp, #28
     a7c:	0005      	movs	r5, r0
     a7e:	000f      	movs	r7, r1
     a80:	0016      	movs	r6, r2
    uint8_t data[6];
    struct i2c_master_packet packet = {
     a82:	ac01      	add	r4, sp, #4
     a84:	220c      	movs	r2, #12
     a86:	2100      	movs	r1, #0
     a88:	0020      	movs	r0, r4
     a8a:	4b1e      	ldr	r3, [pc, #120]	; (b04 <shtc1_read_async_result+0x8c>)
     a8c:	4798      	blx	r3
     a8e:	2370      	movs	r3, #112	; 0x70
     a90:	8023      	strh	r3, [r4, #0]
     a92:	3b6a      	subs	r3, #106	; 0x6a
     a94:	8063      	strh	r3, [r4, #2]
     a96:	ab04      	add	r3, sp, #16
     a98:	6063      	str	r3, [r4, #4]
            .data_length = sizeof(data),
            .data = data,
			.ten_bit_address = false,
			.high_speed = false,
    };
    enum status_code ret = i2c_master_read_packet_wait(i2c_master_instance_ptr, &packet);
     a9a:	0021      	movs	r1, r4
     a9c:	0028      	movs	r0, r5
     a9e:	4b1a      	ldr	r3, [pc, #104]	; (b08 <shtc1_read_async_result+0x90>)
     aa0:	4798      	blx	r3
     aa2:	1e04      	subs	r4, r0, #0
    if (ret)
     aa4:	d107      	bne.n	ab6 <shtc1_read_async_result+0x3e>
        return ret;
    if (!shtc1_check_crc(data, 2, data[2]) || !shtc1_check_crc(data + 3, 2, data[5]))
     aa6:	a804      	add	r0, sp, #16
     aa8:	7882      	ldrb	r2, [r0, #2]
     aaa:	2102      	movs	r1, #2
     aac:	4b17      	ldr	r3, [pc, #92]	; (b0c <shtc1_read_async_result+0x94>)
     aae:	4798      	blx	r3
     ab0:	2800      	cmp	r0, #0
     ab2:	d103      	bne.n	abc <shtc1_read_async_result+0x44>
        return STATUS_ERR_BAD_DATA;
     ab4:	2413      	movs	r4, #19
    *rh = (data[4] & 0xff) | (data[3] << 8);
    *temp = ((21875 * *temp) >> 13) - 45000;
    *rh = ((12500 * *rh) >> 13);

    return STATUS_OK;
}
     ab6:	0020      	movs	r0, r4
     ab8:	b007      	add	sp, #28
     aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!shtc1_check_crc(data, 2, data[2]) || !shtc1_check_crc(data + 3, 2, data[5]))
     abc:	ab04      	add	r3, sp, #16
     abe:	795a      	ldrb	r2, [r3, #5]
     ac0:	2102      	movs	r1, #2
     ac2:	2013      	movs	r0, #19
     ac4:	4468      	add	r0, sp
     ac6:	4b11      	ldr	r3, [pc, #68]	; (b0c <shtc1_read_async_result+0x94>)
     ac8:	4798      	blx	r3
     aca:	2800      	cmp	r0, #0
     acc:	d101      	bne.n	ad2 <shtc1_read_async_result+0x5a>
        return STATUS_ERR_BAD_DATA;
     ace:	2413      	movs	r4, #19
     ad0:	e7f1      	b.n	ab6 <shtc1_read_async_result+0x3e>
    *temp = (data[1] & 0xff) | (data[0] << 8);
     ad2:	aa04      	add	r2, sp, #16
     ad4:	7813      	ldrb	r3, [r2, #0]
     ad6:	021b      	lsls	r3, r3, #8
     ad8:	7851      	ldrb	r1, [r2, #1]
     ada:	430b      	orrs	r3, r1
     adc:	603b      	str	r3, [r7, #0]
    *rh = (data[4] & 0xff) | (data[3] << 8);
     ade:	78d3      	ldrb	r3, [r2, #3]
     ae0:	021b      	lsls	r3, r3, #8
     ae2:	7912      	ldrb	r2, [r2, #4]
     ae4:	4313      	orrs	r3, r2
     ae6:	6033      	str	r3, [r6, #0]
    *temp = ((21875 * *temp) >> 13) - 45000;
     ae8:	4b09      	ldr	r3, [pc, #36]	; (b10 <shtc1_read_async_result+0x98>)
     aea:	683a      	ldr	r2, [r7, #0]
     aec:	4353      	muls	r3, r2
     aee:	135b      	asrs	r3, r3, #13
     af0:	4a08      	ldr	r2, [pc, #32]	; (b14 <shtc1_read_async_result+0x9c>)
     af2:	4694      	mov	ip, r2
     af4:	4463      	add	r3, ip
     af6:	603b      	str	r3, [r7, #0]
    *rh = ((12500 * *rh) >> 13);
     af8:	4b07      	ldr	r3, [pc, #28]	; (b18 <shtc1_read_async_result+0xa0>)
     afa:	6832      	ldr	r2, [r6, #0]
     afc:	4353      	muls	r3, r2
     afe:	135b      	asrs	r3, r3, #13
     b00:	6033      	str	r3, [r6, #0]
    return STATUS_OK;
     b02:	e7d8      	b.n	ab6 <shtc1_read_async_result+0x3e>
     b04:	000093d7 	.word	0x000093d7
     b08:	00000729 	.word	0x00000729
     b0c:	00000a2d 	.word	0x00000a2d
     b10:	00005573 	.word	0x00005573
     b14:	ffff5038 	.word	0xffff5038
     b18:	000030d4 	.word	0x000030d4

00000b1c <shtc1_read_sync>:

static enum status_code shtc1_read_sync(struct i2c_master_module *i2c_master_instance_ptr,
        const uint8_t command[], int *temp, int *rh)
{
     b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
     b1e:	b087      	sub	sp, #28
     b20:	0004      	movs	r4, r0
     b22:	000d      	movs	r5, r1
     b24:	9201      	str	r2, [sp, #4]
     b26:	001e      	movs	r6, r3
    enum status_code ret;
    struct i2c_master_packet packet = {
     b28:	af03      	add	r7, sp, #12
     b2a:	220c      	movs	r2, #12
     b2c:	2100      	movs	r1, #0
     b2e:	0038      	movs	r0, r7
     b30:	4b0a      	ldr	r3, [pc, #40]	; (b5c <shtc1_read_sync+0x40>)
     b32:	4798      	blx	r3
     b34:	2370      	movs	r3, #112	; 0x70
     b36:	803b      	strh	r3, [r7, #0]
     b38:	3b6e      	subs	r3, #110	; 0x6e
     b3a:	807b      	strh	r3, [r7, #2]
     b3c:	607d      	str	r5, [r7, #4]
            .data_length = COMMAND_SIZE,
            .data = (uint8_t *)command,
			.ten_bit_address = false,
			.high_speed = false,
    };
    ret = i2c_master_write_packet_wait_no_stop(i2c_master_instance_ptr, &packet);
     b3e:	0039      	movs	r1, r7
     b40:	0020      	movs	r0, r4
     b42:	4b07      	ldr	r3, [pc, #28]	; (b60 <shtc1_read_sync+0x44>)
     b44:	4798      	blx	r3
    if (ret)
     b46:	2800      	cmp	r0, #0
     b48:	d001      	beq.n	b4e <shtc1_read_sync+0x32>
        return ret;
    return shtc1_read_async_result(i2c_master_instance_ptr, temp, rh);
}
     b4a:	b007      	add	sp, #28
     b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return shtc1_read_async_result(i2c_master_instance_ptr, temp, rh);
     b4e:	0032      	movs	r2, r6
     b50:	9901      	ldr	r1, [sp, #4]
     b52:	0020      	movs	r0, r4
     b54:	4b03      	ldr	r3, [pc, #12]	; (b64 <shtc1_read_sync+0x48>)
     b56:	4798      	blx	r3
     b58:	e7f7      	b.n	b4a <shtc1_read_sync+0x2e>
     b5a:	46c0      	nop			; (mov r8, r8)
     b5c:	000093d7 	.word	0x000093d7
     b60:	0000074d 	.word	0x0000074d
     b64:	00000a79 	.word	0x00000a79

00000b68 <shtc1_read_lpm_sync>:

enum status_code shtc1_read_lpm_sync(struct i2c_master_module *i2c_master_instance_ptr,
        int *temp, int *rh)
{
     b68:	b510      	push	{r4, lr}
     b6a:	0013      	movs	r3, r2
    return shtc1_read_sync(i2c_master_instance_ptr, CMD_MEASURE_LPM_CS, temp, rh);
     b6c:	000a      	movs	r2, r1
     b6e:	4902      	ldr	r1, [pc, #8]	; (b78 <shtc1_read_lpm_sync+0x10>)
     b70:	4c02      	ldr	r4, [pc, #8]	; (b7c <shtc1_read_lpm_sync+0x14>)
     b72:	47a0      	blx	r4
}
     b74:	bd10      	pop	{r4, pc}
     b76:	46c0      	nop			; (mov r8, r8)
     b78:	0000a8d4 	.word	0x0000a8d4
     b7c:	00000b1d 	.word	0x00000b1d

00000b80 <shtc1_probe>:
    };
    return i2c_master_write_packet_wait(i2c_master_instance_ptr, &packet);
}

bool shtc1_probe(struct i2c_master_module *i2c_master_instance_ptr)
{
     b80:	b510      	push	{r4, lr}
     b82:	b084      	sub	sp, #16
     b84:	0004      	movs	r4, r0
    uint8_t data[3];
    struct i2c_master_packet packet = {
     b86:	220c      	movs	r2, #12
     b88:	2100      	movs	r1, #0
     b8a:	4668      	mov	r0, sp
     b8c:	4b15      	ldr	r3, [pc, #84]	; (be4 <shtc1_probe+0x64>)
     b8e:	4798      	blx	r3
     b90:	2370      	movs	r3, #112	; 0x70
     b92:	466a      	mov	r2, sp
     b94:	8013      	strh	r3, [r2, #0]
     b96:	3b6e      	subs	r3, #110	; 0x6e
     b98:	8053      	strh	r3, [r2, #2]
     b9a:	4b13      	ldr	r3, [pc, #76]	; (be8 <shtc1_probe+0x68>)
     b9c:	9301      	str	r3, [sp, #4]
            .data_length = COMMAND_SIZE,
            .data = (uint8_t *)CMD_READ_ID_REG,
			.ten_bit_address = false,
			.high_speed = false,
    };
    i2c_master_write_packet_wait_no_stop(i2c_master_instance_ptr, &packet);
     b9e:	4669      	mov	r1, sp
     ba0:	0020      	movs	r0, r4
     ba2:	4b12      	ldr	r3, [pc, #72]	; (bec <shtc1_probe+0x6c>)
     ba4:	4798      	blx	r3
    packet.data_length = sizeof(data);
     ba6:	2303      	movs	r3, #3
     ba8:	466a      	mov	r2, sp
     baa:	8053      	strh	r3, [r2, #2]
    packet.data = data;
     bac:	ab03      	add	r3, sp, #12
     bae:	9301      	str	r3, [sp, #4]
    enum status_code ret = i2c_master_read_packet_wait(i2c_master_instance_ptr, &packet);
     bb0:	4669      	mov	r1, sp
     bb2:	0020      	movs	r0, r4
     bb4:	4b0e      	ldr	r3, [pc, #56]	; (bf0 <shtc1_probe+0x70>)
     bb6:	4798      	blx	r3
     bb8:	0003      	movs	r3, r0

    if (ret)
        return false;
     bba:	2000      	movs	r0, #0
    if (ret)
     bbc:	2b00      	cmp	r3, #0
     bbe:	d10e      	bne.n	bde <shtc1_probe+0x5e>
    if (!shtc1_check_crc(data, 2, data[2]))
     bc0:	a803      	add	r0, sp, #12
     bc2:	7882      	ldrb	r2, [r0, #2]
     bc4:	2102      	movs	r1, #2
     bc6:	4b0b      	ldr	r3, [pc, #44]	; (bf4 <shtc1_probe+0x74>)
     bc8:	4798      	blx	r3
     bca:	2800      	cmp	r0, #0
     bcc:	d007      	beq.n	bde <shtc1_probe+0x5e>
        return false;
    return (data[1] & ID_REG_MASK) == ID_REG_CONTENT;
     bce:	ab03      	add	r3, sp, #12
     bd0:	785b      	ldrb	r3, [r3, #1]
     bd2:	201f      	movs	r0, #31
     bd4:	4018      	ands	r0, r3
     bd6:	3807      	subs	r0, #7
     bd8:	4243      	negs	r3, r0
     bda:	4158      	adcs	r0, r3
     bdc:	b2c0      	uxtb	r0, r0
}
     bde:	b004      	add	sp, #16
     be0:	bd10      	pop	{r4, pc}
     be2:	46c0      	nop			; (mov r8, r8)
     be4:	000093d7 	.word	0x000093d7
     be8:	0000a8d8 	.word	0x0000a8d8
     bec:	0000074d 	.word	0x0000074d
     bf0:	00000729 	.word	0x00000729
     bf4:	00000a2d 	.word	0x00000a2d

00000bf8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     bf8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     bfa:	2000      	movs	r0, #0
     bfc:	4b08      	ldr	r3, [pc, #32]	; (c20 <delay_init+0x28>)
     bfe:	4798      	blx	r3
     c00:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     c02:	4c08      	ldr	r4, [pc, #32]	; (c24 <delay_init+0x2c>)
     c04:	21fa      	movs	r1, #250	; 0xfa
     c06:	0089      	lsls	r1, r1, #2
     c08:	47a0      	blx	r4
     c0a:	4b07      	ldr	r3, [pc, #28]	; (c28 <delay_init+0x30>)
     c0c:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     c0e:	4907      	ldr	r1, [pc, #28]	; (c2c <delay_init+0x34>)
     c10:	0028      	movs	r0, r5
     c12:	47a0      	blx	r4
     c14:	4b06      	ldr	r3, [pc, #24]	; (c30 <delay_init+0x38>)
     c16:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     c18:	2205      	movs	r2, #5
     c1a:	4b06      	ldr	r3, [pc, #24]	; (c34 <delay_init+0x3c>)
     c1c:	601a      	str	r2, [r3, #0]
}
     c1e:	bd70      	pop	{r4, r5, r6, pc}
     c20:	00005415 	.word	0x00005415
     c24:	00007369 	.word	0x00007369
     c28:	20000000 	.word	0x20000000
     c2c:	000f4240 	.word	0x000f4240
     c30:	20000004 	.word	0x20000004
     c34:	e000e010 	.word	0xe000e010

00000c38 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     c38:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     c3a:	4b08      	ldr	r3, [pc, #32]	; (c5c <delay_cycles_ms+0x24>)
     c3c:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     c3e:	4a08      	ldr	r2, [pc, #32]	; (c60 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     c40:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     c42:	2180      	movs	r1, #128	; 0x80
     c44:	0249      	lsls	r1, r1, #9
	while (n--) {
     c46:	3801      	subs	r0, #1
     c48:	d307      	bcc.n	c5a <delay_cycles_ms+0x22>
	if (n > 0) {
     c4a:	2c00      	cmp	r4, #0
     c4c:	d0fb      	beq.n	c46 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     c4e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     c50:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     c52:	6813      	ldr	r3, [r2, #0]
     c54:	420b      	tst	r3, r1
     c56:	d0fc      	beq.n	c52 <delay_cycles_ms+0x1a>
     c58:	e7f5      	b.n	c46 <delay_cycles_ms+0xe>
	}
}
     c5a:	bd30      	pop	{r4, r5, pc}
     c5c:	20000000 	.word	0x20000000
     c60:	e000e010 	.word	0xe000e010

00000c64 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
     c64:	b510      	push	{r4, lr}
	if (gpfIsr) {
     c66:	4b03      	ldr	r3, [pc, #12]	; (c74 <chip_isr+0x10>)
     c68:	681b      	ldr	r3, [r3, #0]
     c6a:	2b00      	cmp	r3, #0
     c6c:	d000      	beq.n	c70 <chip_isr+0xc>
		gpfIsr();
     c6e:	4798      	blx	r3
	}
}
     c70:	bd10      	pop	{r4, pc}
     c72:	46c0      	nop			; (mov r8, r8)
     c74:	2000008c 	.word	0x2000008c

00000c78 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     c78:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
     c7a:	1e44      	subs	r4, r0, #1
     c7c:	2800      	cmp	r0, #0
     c7e:	d004      	beq.n	c8a <nm_bsp_sleep+0x12>
		delay_ms(1);
     c80:	4d02      	ldr	r5, [pc, #8]	; (c8c <nm_bsp_sleep+0x14>)
     c82:	2001      	movs	r0, #1
     c84:	47a8      	blx	r5
	while (u32TimeMsec--) {
     c86:	3c01      	subs	r4, #1
     c88:	d2fb      	bcs.n	c82 <nm_bsp_sleep+0xa>
	}
}
     c8a:	bd70      	pop	{r4, r5, r6, pc}
     c8c:	00000c39 	.word	0x00000c39

00000c90 <nm_bsp_reset>:
{
     c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     c92:	4c07      	ldr	r4, [pc, #28]	; (cb0 <nm_bsp_reset+0x20>)
     c94:	2720      	movs	r7, #32
     c96:	6167      	str	r7, [r4, #20]
     c98:	2640      	movs	r6, #64	; 0x40
     c9a:	6166      	str	r6, [r4, #20]
	nm_bsp_sleep(100);
     c9c:	2064      	movs	r0, #100	; 0x64
     c9e:	4d05      	ldr	r5, [pc, #20]	; (cb4 <nm_bsp_reset+0x24>)
     ca0:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
     ca2:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(100);
     ca4:	2064      	movs	r0, #100	; 0x64
     ca6:	47a8      	blx	r5
     ca8:	61a6      	str	r6, [r4, #24]
	nm_bsp_sleep(100);
     caa:	2064      	movs	r0, #100	; 0x64
     cac:	47a8      	blx	r5
}
     cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     cb0:	41004480 	.word	0x41004480
     cb4:	00000c79 	.word	0x00000c79

00000cb8 <nm_bsp_init>:
{
     cb8:	b570      	push	{r4, r5, r6, lr}
     cba:	b082      	sub	sp, #8
	gpfIsr = NULL;
     cbc:	2300      	movs	r3, #0
     cbe:	4a15      	ldr	r2, [pc, #84]	; (d14 <nm_bsp_init+0x5c>)
     cc0:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     cc2:	ac01      	add	r4, sp, #4
     cc4:	2501      	movs	r5, #1
     cc6:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     cc8:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     cca:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
     ccc:	0021      	movs	r1, r4
     cce:	2026      	movs	r0, #38	; 0x26
     cd0:	4e11      	ldr	r6, [pc, #68]	; (d18 <nm_bsp_init+0x60>)
     cd2:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
     cd4:	0021      	movs	r1, r4
     cd6:	2025      	movs	r0, #37	; 0x25
     cd8:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
     cda:	0021      	movs	r1, r4
     cdc:	2027      	movs	r0, #39	; 0x27
     cde:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
     ce0:	4b0e      	ldr	r3, [pc, #56]	; (d1c <nm_bsp_init+0x64>)
     ce2:	2220      	movs	r2, #32
     ce4:	615a      	str	r2, [r3, #20]
     ce6:	3220      	adds	r2, #32
     ce8:	615a      	str	r2, [r3, #20]
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
     cea:	4b0d      	ldr	r3, [pc, #52]	; (d20 <nm_bsp_init+0x68>)
     cec:	681b      	ldr	r3, [r3, #0]
     cee:	421d      	tst	r5, r3
     cf0:	d003      	beq.n	cfa <nm_bsp_init+0x42>
     cf2:	4b0b      	ldr	r3, [pc, #44]	; (d20 <nm_bsp_init+0x68>)
     cf4:	681b      	ldr	r3, [r3, #0]
     cf6:	079b      	lsls	r3, r3, #30
     cf8:	d401      	bmi.n	cfe <nm_bsp_init+0x46>
	    delay_init();
     cfa:	4b0a      	ldr	r3, [pc, #40]	; (d24 <nm_bsp_init+0x6c>)
     cfc:	4798      	blx	r3
	nm_bsp_reset();
     cfe:	4b0a      	ldr	r3, [pc, #40]	; (d28 <nm_bsp_init+0x70>)
     d00:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
     d02:	2201      	movs	r2, #1
     d04:	4b09      	ldr	r3, [pc, #36]	; (d2c <nm_bsp_init+0x74>)
     d06:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     d08:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     d0c:	b662      	cpsie	i
}
     d0e:	2000      	movs	r0, #0
     d10:	b002      	add	sp, #8
     d12:	bd70      	pop	{r4, r5, r6, pc}
     d14:	2000008c 	.word	0x2000008c
     d18:	00004059 	.word	0x00004059
     d1c:	41004480 	.word	0x41004480
     d20:	e000e010 	.word	0xe000e010
     d24:	00000bf9 	.word	0x00000bf9
     d28:	00000c91 	.word	0x00000c91
     d2c:	2000000a 	.word	0x2000000a

00000d30 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
     d30:	b510      	push	{r4, lr}
     d32:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
     d34:	4b0e      	ldr	r3, [pc, #56]	; (d70 <nm_bsp_register_isr+0x40>)
     d36:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
     d38:	ac01      	add	r4, sp, #4
     d3a:	0020      	movs	r0, r4
     d3c:	4b0d      	ldr	r3, [pc, #52]	; (d74 <nm_bsp_register_isr+0x44>)
     d3e:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
     d40:	2324      	movs	r3, #36	; 0x24
     d42:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
     d44:	2300      	movs	r3, #0
     d46:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
     d48:	3301      	adds	r3, #1
     d4a:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     d4c:	3301      	adds	r3, #1
     d4e:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
     d50:	0021      	movs	r1, r4
     d52:	2004      	movs	r0, #4
     d54:	4b08      	ldr	r3, [pc, #32]	; (d78 <nm_bsp_register_isr+0x48>)
     d56:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
     d58:	2200      	movs	r2, #0
     d5a:	2104      	movs	r1, #4
     d5c:	4807      	ldr	r0, [pc, #28]	; (d7c <nm_bsp_register_isr+0x4c>)
     d5e:	4b08      	ldr	r3, [pc, #32]	; (d80 <nm_bsp_register_isr+0x50>)
     d60:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     d62:	2100      	movs	r1, #0
     d64:	2004      	movs	r0, #4
     d66:	4b07      	ldr	r3, [pc, #28]	; (d84 <nm_bsp_register_isr+0x54>)
     d68:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
     d6a:	b004      	add	sp, #16
     d6c:	bd10      	pop	{r4, pc}
     d6e:	46c0      	nop			; (mov r8, r8)
     d70:	2000008c 	.word	0x2000008c
     d74:	00003fcd 	.word	0x00003fcd
     d78:	00003fe1 	.word	0x00003fe1
     d7c:	00000c65 	.word	0x00000c65
     d80:	00003e89 	.word	0x00003e89
     d84:	00003eb5 	.word	0x00003eb5

00000d88 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
     d88:	b510      	push	{r4, lr}
	if (u8Enable) {
     d8a:	2800      	cmp	r0, #0
     d8c:	d104      	bne.n	d98 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
     d8e:	2100      	movs	r1, #0
     d90:	2004      	movs	r0, #4
     d92:	4b04      	ldr	r3, [pc, #16]	; (da4 <nm_bsp_interrupt_ctrl+0x1c>)
     d94:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     d96:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     d98:	2100      	movs	r1, #0
     d9a:	2004      	movs	r0, #4
     d9c:	4b02      	ldr	r3, [pc, #8]	; (da8 <nm_bsp_interrupt_ctrl+0x20>)
     d9e:	4798      	blx	r3
     da0:	e7f9      	b.n	d96 <nm_bsp_interrupt_ctrl+0xe>
     da2:	46c0      	nop			; (mov r8, r8)
     da4:	00003ed5 	.word	0x00003ed5
     da8:	00003eb5 	.word	0x00003eb5

00000dac <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
     dac:	b530      	push	{r4, r5, lr}
     dae:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     db0:	4c30      	ldr	r4, [pc, #192]	; (e74 <nm_bus_init+0xc8>)
     db2:	2305      	movs	r3, #5
     db4:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     db6:	2300      	movs	r3, #0
     db8:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     dba:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
     dbc:	a901      	add	r1, sp, #4
     dbe:	2201      	movs	r2, #1
     dc0:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     dc2:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     dc4:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     dc6:	2005      	movs	r0, #5
     dc8:	4b2b      	ldr	r3, [pc, #172]	; (e78 <nm_bus_init+0xcc>)
     dca:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     dcc:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     dce:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     dd0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     dd2:	2900      	cmp	r1, #0
     dd4:	d104      	bne.n	de0 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
     dd6:	0953      	lsrs	r3, r2, #5
     dd8:	01db      	lsls	r3, r3, #7
     dda:	4928      	ldr	r1, [pc, #160]	; (e7c <nm_bus_init+0xd0>)
     ddc:	468c      	mov	ip, r1
     dde:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     de0:	211f      	movs	r1, #31
     de2:	4011      	ands	r1, r2
     de4:	2201      	movs	r2, #1
     de6:	0010      	movs	r0, r2
     de8:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
     dea:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
     dec:	ac02      	add	r4, sp, #8
     dee:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     df0:	2300      	movs	r3, #0
     df2:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     df4:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     df6:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     df8:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     dfa:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
     dfc:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
     dfe:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
     e00:	3223      	adds	r2, #35	; 0x23
     e02:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     e04:	3a18      	subs	r2, #24
     e06:	2100      	movs	r1, #0
     e08:	a808      	add	r0, sp, #32
     e0a:	4b1d      	ldr	r3, [pc, #116]	; (e80 <nm_bus_init+0xd4>)
     e0c:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
     e0e:	2380      	movs	r3, #128	; 0x80
     e10:	025b      	lsls	r3, r3, #9
     e12:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
     e14:	4b1b      	ldr	r3, [pc, #108]	; (e84 <nm_bus_init+0xd8>)
     e16:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
     e18:	2301      	movs	r3, #1
     e1a:	425b      	negs	r3, r3
     e1c:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
     e1e:	4b1a      	ldr	r3, [pc, #104]	; (e88 <nm_bus_init+0xdc>)
     e20:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
     e22:	4b1a      	ldr	r3, [pc, #104]	; (e8c <nm_bus_init+0xe0>)
     e24:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
     e26:	4b1a      	ldr	r3, [pc, #104]	; (e90 <nm_bus_init+0xe4>)
     e28:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
     e2a:	0022      	movs	r2, r4
     e2c:	4919      	ldr	r1, [pc, #100]	; (e94 <nm_bus_init+0xe8>)
     e2e:	481a      	ldr	r0, [pc, #104]	; (e98 <nm_bus_init+0xec>)
     e30:	4b1a      	ldr	r3, [pc, #104]	; (e9c <nm_bus_init+0xf0>)
     e32:	4798      	blx	r3
     e34:	2800      	cmp	r0, #0
     e36:	d11a      	bne.n	e6e <nm_bus_init+0xc2>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     e38:	4d17      	ldr	r5, [pc, #92]	; (e98 <nm_bus_init+0xec>)
     e3a:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     e3c:	0020      	movs	r0, r4
     e3e:	4b18      	ldr	r3, [pc, #96]	; (ea0 <nm_bus_init+0xf4>)
     e40:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     e42:	231f      	movs	r3, #31
     e44:	4018      	ands	r0, r3
     e46:	3b1e      	subs	r3, #30
     e48:	4083      	lsls	r3, r0
     e4a:	4a16      	ldr	r2, [pc, #88]	; (ea4 <nm_bus_init+0xf8>)
     e4c:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     e4e:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     e50:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
     e52:	2b00      	cmp	r3, #0
     e54:	d1fc      	bne.n	e50 <nm_bus_init+0xa4>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     e56:	6823      	ldr	r3, [r4, #0]
     e58:	2202      	movs	r2, #2
     e5a:	4313      	orrs	r3, r2
     e5c:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
     e5e:	4b12      	ldr	r3, [pc, #72]	; (ea8 <nm_bus_init+0xfc>)
     e60:	4798      	blx	r3
	nm_bsp_sleep(1);
     e62:	2001      	movs	r0, #1
     e64:	4b11      	ldr	r3, [pc, #68]	; (eac <nm_bus_init+0x100>)
     e66:	4798      	blx	r3
#endif
	return result;
     e68:	2000      	movs	r0, #0
}
     e6a:	b011      	add	sp, #68	; 0x44
     e6c:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
     e6e:	2006      	movs	r0, #6
     e70:	4240      	negs	r0, r0
     e72:	e7fa      	b.n	e6a <nm_bus_init+0xbe>
     e74:	20000278 	.word	0x20000278
     e78:	00004059 	.word	0x00004059
     e7c:	41004400 	.word	0x41004400
     e80:	000093d7 	.word	0x000093d7
     e84:	00040003 	.word	0x00040003
     e88:	00060003 	.word	0x00060003
     e8c:	00070003 	.word	0x00070003
     e90:	00b71b00 	.word	0x00b71b00
     e94:	42000800 	.word	0x42000800
     e98:	2000027c 	.word	0x2000027c
     e9c:	000044c1 	.word	0x000044c1
     ea0:	00004431 	.word	0x00004431
     ea4:	e000e100 	.word	0xe000e100
     ea8:	00000c91 	.word	0x00000c91
     eac:	00000c79 	.word	0x00000c79

00000eb0 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
     eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
     eb2:	46de      	mov	lr, fp
     eb4:	4657      	mov	r7, sl
     eb6:	464e      	mov	r6, r9
     eb8:	4645      	mov	r5, r8
     eba:	b5e0      	push	{r5, r6, r7, lr}
     ebc:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
     ebe:	2803      	cmp	r0, #3
     ec0:	d000      	beq.n	ec4 <nm_bus_ioctl+0x14>
     ec2:	e075      	b.n	fb0 <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
     ec4:	680e      	ldr	r6, [r1, #0]
     ec6:	684d      	ldr	r5, [r1, #4]
     ec8:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
     eca:	2200      	movs	r2, #0
     ecc:	466b      	mov	r3, sp
     ece:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
     ed0:	2d00      	cmp	r5, #0
     ed2:	d027      	beq.n	f24 <nm_bus_ioctl+0x74>
     ed4:	2c00      	cmp	r4, #0
     ed6:	d065      	beq.n	fa4 <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
     ed8:	2e00      	cmp	r6, #0
     eda:	d100      	bne.n	ede <nm_bus_ioctl+0x2e>
     edc:	e077      	b.n	fce <nm_bus_ioctl+0x11e>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     ede:	2300      	movs	r3, #0
     ee0:	4698      	mov	r8, r3
     ee2:	2300      	movs	r3, #0
     ee4:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
     ee6:	2201      	movs	r2, #1
     ee8:	493b      	ldr	r1, [pc, #236]	; (fd8 <nm_bus_ioctl+0x128>)
     eea:	483c      	ldr	r0, [pc, #240]	; (fdc <nm_bus_ioctl+0x12c>)
     eec:	4b3c      	ldr	r3, [pc, #240]	; (fe0 <nm_bus_ioctl+0x130>)
     eee:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     ef0:	4b3a      	ldr	r3, [pc, #232]	; (fdc <nm_bus_ioctl+0x12c>)
     ef2:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
     ef4:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
     ef6:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     ef8:	4699      	mov	r9, r3
			pu8Miso++;
     efa:	4659      	mov	r1, fp
     efc:	424b      	negs	r3, r1
     efe:	4159      	adcs	r1, r3
     f00:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
     f02:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     f04:	4653      	mov	r3, sl
     f06:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     f08:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
     f0a:	4239      	tst	r1, r7
     f0c:	d0fc      	beq.n	f08 <nm_bus_ioctl+0x58>
     f0e:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     f10:	4239      	tst	r1, r7
     f12:	d0fc      	beq.n	f0e <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     f14:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     f16:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
     f18:	4211      	tst	r1, r2
     f1a:	d0fc      	beq.n	f16 <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f1c:	4649      	mov	r1, r9
     f1e:	7989      	ldrb	r1, [r1, #6]
     f20:	468c      	mov	ip, r1
     f22:	e011      	b.n	f48 <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
     f24:	2e00      	cmp	r6, #0
     f26:	d03a      	beq.n	f9e <nm_bus_ioctl+0xee>
     f28:	2c00      	cmp	r4, #0
     f2a:	d03e      	beq.n	faa <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     f2c:	2300      	movs	r3, #0
     f2e:	4698      	mov	r8, r3
		u8SkipMiso = 1;
     f30:	3301      	adds	r3, #1
     f32:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
     f34:	466b      	mov	r3, sp
     f36:	1ddd      	adds	r5, r3, #7
     f38:	e7d5      	b.n	ee6 <nm_bus_ioctl+0x36>
     f3a:	4660      	mov	r0, ip
     f3c:	2801      	cmp	r0, #1
     f3e:	d00d      	beq.n	f5c <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     f40:	6a98      	ldr	r0, [r3, #40]	; 0x28
     f42:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
     f44:	2900      	cmp	r1, #0
     f46:	d00d      	beq.n	f64 <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     f48:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     f4a:	4211      	tst	r1, r2
     f4c:	d0fc      	beq.n	f48 <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     f4e:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
     f50:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     f52:	4210      	tst	r0, r2
     f54:	d0f1      	beq.n	f3a <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     f56:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
     f58:	311e      	adds	r1, #30
     f5a:	e7ee      	b.n	f3a <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     f5c:	6a98      	ldr	r0, [r3, #40]	; 0x28
     f5e:	05c0      	lsls	r0, r0, #23
     f60:	0dc0      	lsrs	r0, r0, #23
     f62:	e7ef      	b.n	f44 <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
     f64:	7028      	strb	r0, [r5, #0]
		u16Sz--;
     f66:	3c01      	subs	r4, #1
     f68:	b2a4      	uxth	r4, r4
			pu8Miso++;
     f6a:	445d      	add	r5, fp
			pu8Mosi++;
     f6c:	4643      	mov	r3, r8
     f6e:	4259      	negs	r1, r3
     f70:	414b      	adcs	r3, r1
     f72:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
     f74:	2c00      	cmp	r4, #0
     f76:	d1c4      	bne.n	f02 <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
     f78:	4b18      	ldr	r3, [pc, #96]	; (fdc <nm_bus_ioctl+0x12c>)
     f7a:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
     f7c:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     f7e:	7e0b      	ldrb	r3, [r1, #24]
     f80:	4213      	tst	r3, r2
     f82:	d0fc      	beq.n	f7e <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
     f84:	2200      	movs	r2, #0
     f86:	4914      	ldr	r1, [pc, #80]	; (fd8 <nm_bus_ioctl+0x128>)
     f88:	4814      	ldr	r0, [pc, #80]	; (fdc <nm_bus_ioctl+0x12c>)
     f8a:	4b15      	ldr	r3, [pc, #84]	; (fe0 <nm_bus_ioctl+0x130>)
     f8c:	4798      	blx	r3
	return M2M_SUCCESS;
     f8e:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
     f90:	b003      	add	sp, #12
     f92:	bc3c      	pop	{r2, r3, r4, r5}
     f94:	4690      	mov	r8, r2
     f96:	4699      	mov	r9, r3
     f98:	46a2      	mov	sl, r4
     f9a:	46ab      	mov	fp, r5
     f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
     f9e:	200f      	movs	r0, #15
     fa0:	4240      	negs	r0, r0
     fa2:	e7f5      	b.n	f90 <nm_bus_ioctl+0xe0>
     fa4:	200f      	movs	r0, #15
     fa6:	4240      	negs	r0, r0
     fa8:	e7f2      	b.n	f90 <nm_bus_ioctl+0xe0>
     faa:	200f      	movs	r0, #15
     fac:	4240      	negs	r0, r0
		break;
     fae:	e7ef      	b.n	f90 <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
     fb0:	220e      	movs	r2, #14
     fb2:	32ff      	adds	r2, #255	; 0xff
     fb4:	490b      	ldr	r1, [pc, #44]	; (fe4 <nm_bus_ioctl+0x134>)
     fb6:	480c      	ldr	r0, [pc, #48]	; (fe8 <nm_bus_ioctl+0x138>)
     fb8:	4b0c      	ldr	r3, [pc, #48]	; (fec <nm_bus_ioctl+0x13c>)
     fba:	4798      	blx	r3
     fbc:	480c      	ldr	r0, [pc, #48]	; (ff0 <nm_bus_ioctl+0x140>)
     fbe:	4b0d      	ldr	r3, [pc, #52]	; (ff4 <nm_bus_ioctl+0x144>)
     fc0:	4798      	blx	r3
     fc2:	200d      	movs	r0, #13
     fc4:	4b0c      	ldr	r3, [pc, #48]	; (ff8 <nm_bus_ioctl+0x148>)
     fc6:	4798      	blx	r3
			s8Ret = -1;
     fc8:	2001      	movs	r0, #1
     fca:	4240      	negs	r0, r0
	return s8Ret;
     fcc:	e7e0      	b.n	f90 <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
     fce:	2301      	movs	r3, #1
     fd0:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
     fd2:	466b      	mov	r3, sp
     fd4:	1dde      	adds	r6, r3, #7
     fd6:	e784      	b.n	ee2 <nm_bus_ioctl+0x32>
     fd8:	20000278 	.word	0x20000278
     fdc:	2000027c 	.word	0x2000027c
     fe0:	00004699 	.word	0x00004699
     fe4:	0000a8dc 	.word	0x0000a8dc
     fe8:	0000a8ec 	.word	0x0000a8ec
     fec:	00009539 	.word	0x00009539
     ff0:	0000a900 	.word	0x0000a900
     ff4:	00009655 	.word	0x00009655
     ff8:	0000956d 	.word	0x0000956d

00000ffc <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
     ffc:	b530      	push	{r4, r5, lr}
     ffe:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    1000:	ab01      	add	r3, sp, #4
    1002:	2200      	movs	r2, #0
    1004:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
    1006:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    1008:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
    100a:	4d13      	ldr	r5, [pc, #76]	; (1058 <nm_bus_deinit+0x5c>)
    100c:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    100e:	0020      	movs	r0, r4
    1010:	4b12      	ldr	r3, [pc, #72]	; (105c <nm_bus_deinit+0x60>)
    1012:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1014:	231f      	movs	r3, #31
    1016:	4018      	ands	r0, r3
    1018:	3b1e      	subs	r3, #30
    101a:	4083      	lsls	r3, r0
    101c:	2280      	movs	r2, #128	; 0x80
    101e:	4910      	ldr	r1, [pc, #64]	; (1060 <nm_bus_deinit+0x64>)
    1020:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1022:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1024:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    1026:	2b00      	cmp	r3, #0
    1028:	d1fc      	bne.n	1024 <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    102a:	338f      	adds	r3, #143	; 0x8f
    102c:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    102e:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1030:	6823      	ldr	r3, [r4, #0]
    1032:	2202      	movs	r2, #2
    1034:	4393      	bics	r3, r2
    1036:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    1038:	a901      	add	r1, sp, #4
    103a:	2006      	movs	r0, #6
    103c:	4c09      	ldr	r4, [pc, #36]	; (1064 <nm_bus_deinit+0x68>)
    103e:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    1040:	a901      	add	r1, sp, #4
    1042:	2004      	movs	r0, #4
    1044:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    1046:	a901      	add	r1, sp, #4
    1048:	2007      	movs	r0, #7
    104a:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    104c:	a901      	add	r1, sp, #4
    104e:	2005      	movs	r0, #5
    1050:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    1052:	2000      	movs	r0, #0
    1054:	b003      	add	sp, #12
    1056:	bd30      	pop	{r4, r5, pc}
    1058:	2000027c 	.word	0x2000027c
    105c:	00004431 	.word	0x00004431
    1060:	e000e100 	.word	0xe000e100
    1064:	00004059 	.word	0x00004059

00001068 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    1068:	2a00      	cmp	r2, #0
    106a:	d006      	beq.n	107a <m2m_memcpy+0x12>
    106c:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
    106e:	780b      	ldrb	r3, [r1, #0]
    1070:	7003      	strb	r3, [r0, #0]
		pDst++;
    1072:	3001      	adds	r0, #1
		pSrc++;
    1074:	3101      	adds	r1, #1
	}while(--sz);
    1076:	4290      	cmp	r0, r2
    1078:	d1f9      	bne.n	106e <m2m_memcpy+0x6>
}
    107a:	4770      	bx	lr

0000107c <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    107c:	2a00      	cmp	r2, #0
    107e:	d004      	beq.n	108a <m2m_memset+0xe>
    1080:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
    1082:	7001      	strb	r1, [r0, #0]
		pBuf++;
    1084:	3001      	adds	r0, #1
	}while(--sz);
    1086:	4290      	cmp	r0, r2
    1088:	d1fb      	bne.n	1082 <m2m_memset+0x6>
}
    108a:	4770      	bx	lr

0000108c <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    108c:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
    108e:	7802      	ldrb	r2, [r0, #0]
    1090:	2a00      	cmp	r2, #0
    1092:	d007      	beq.n	10a4 <m2m_strlen+0x18>
    1094:	2000      	movs	r0, #0
	{
		u16StrLen ++;
    1096:	3001      	adds	r0, #1
    1098:	b280      	uxth	r0, r0
		pcStr++;
    109a:	3301      	adds	r3, #1
	while(*pcStr)
    109c:	781a      	ldrb	r2, [r3, #0]
    109e:	2a00      	cmp	r2, #0
    10a0:	d1f9      	bne.n	1096 <m2m_strlen+0xa>
	}
	return u16StrLen;
}
    10a2:	4770      	bx	lr
	uint16	u16StrLen = 0;
    10a4:	2000      	movs	r0, #0
    10a6:	e7fc      	b.n	10a2 <m2m_strlen+0x16>

000010a8 <isr>:

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
    10a8:	4a02      	ldr	r2, [pc, #8]	; (10b4 <isr+0xc>)
    10aa:	78d3      	ldrb	r3, [r2, #3]
    10ac:	3301      	adds	r3, #1
    10ae:	b2db      	uxtb	r3, r3
    10b0:	70d3      	strb	r3, [r2, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
    10b2:	4770      	bx	lr
    10b4:	200002b8 	.word	0x200002b8

000010b8 <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    10b8:	4770      	bx	lr
	...

000010bc <hif_set_rx_done>:
{
    10bc:	b500      	push	{lr}
    10be:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
    10c0:	2200      	movs	r2, #0
    10c2:	4b0a      	ldr	r3, [pc, #40]	; (10ec <hif_set_rx_done+0x30>)
    10c4:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
    10c6:	2001      	movs	r0, #1
    10c8:	4b09      	ldr	r3, [pc, #36]	; (10f0 <hif_set_rx_done+0x34>)
    10ca:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    10cc:	a901      	add	r1, sp, #4
    10ce:	4809      	ldr	r0, [pc, #36]	; (10f4 <hif_set_rx_done+0x38>)
    10d0:	4b09      	ldr	r3, [pc, #36]	; (10f8 <hif_set_rx_done+0x3c>)
    10d2:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    10d4:	2800      	cmp	r0, #0
    10d6:	d001      	beq.n	10dc <hif_set_rx_done+0x20>
}
    10d8:	b003      	add	sp, #12
    10da:	bd00      	pop	{pc}
	reg |= NBIT1;
    10dc:	2102      	movs	r1, #2
    10de:	9b01      	ldr	r3, [sp, #4]
    10e0:	4319      	orrs	r1, r3
    10e2:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    10e4:	4803      	ldr	r0, [pc, #12]	; (10f4 <hif_set_rx_done+0x38>)
    10e6:	4b05      	ldr	r3, [pc, #20]	; (10fc <hif_set_rx_done+0x40>)
    10e8:	4798      	blx	r3
    10ea:	e7f5      	b.n	10d8 <hif_set_rx_done+0x1c>
    10ec:	200002b8 	.word	0x200002b8
    10f0:	00000d89 	.word	0x00000d89
    10f4:	00001070 	.word	0x00001070
    10f8:	000024c5 	.word	0x000024c5
    10fc:	000024d1 	.word	0x000024d1

00001100 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    1100:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
    1102:	4b0c      	ldr	r3, [pc, #48]	; (1134 <hif_chip_wake+0x34>)
    1104:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    1106:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
    1108:	2b00      	cmp	r3, #0
    110a:	d10d      	bne.n	1128 <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    110c:	4b09      	ldr	r3, [pc, #36]	; (1134 <hif_chip_wake+0x34>)
    110e:	785b      	ldrb	r3, [r3, #1]
    1110:	2b00      	cmp	r3, #0
    1112:	d103      	bne.n	111c <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    1114:	4b07      	ldr	r3, [pc, #28]	; (1134 <hif_chip_wake+0x34>)
    1116:	781b      	ldrb	r3, [r3, #0]
    1118:	2b00      	cmp	r3, #0
    111a:	d106      	bne.n	112a <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    111c:	4a05      	ldr	r2, [pc, #20]	; (1134 <hif_chip_wake+0x34>)
    111e:	7853      	ldrb	r3, [r2, #1]
    1120:	3301      	adds	r3, #1
    1122:	b2db      	uxtb	r3, r3
    1124:	7053      	strb	r3, [r2, #1]
    1126:	2000      	movs	r0, #0
ERR1:
	return ret;
}
    1128:	bd10      	pop	{r4, pc}
			ret = chip_wake();
    112a:	4b03      	ldr	r3, [pc, #12]	; (1138 <hif_chip_wake+0x38>)
    112c:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    112e:	2800      	cmp	r0, #0
    1130:	d0f4      	beq.n	111c <hif_chip_wake+0x1c>
    1132:	e7f9      	b.n	1128 <hif_chip_wake+0x28>
    1134:	200002b8 	.word	0x200002b8
    1138:	000021ad 	.word	0x000021ad

0000113c <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
    113c:	4b05      	ldr	r3, [pc, #20]	; (1154 <hif_chip_sleep_sc+0x18>)
    113e:	785b      	ldrb	r3, [r3, #1]
    1140:	2b00      	cmp	r3, #0
    1142:	d004      	beq.n	114e <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
    1144:	4a03      	ldr	r2, [pc, #12]	; (1154 <hif_chip_sleep_sc+0x18>)
    1146:	7853      	ldrb	r3, [r2, #1]
    1148:	3b01      	subs	r3, #1
    114a:	b2db      	uxtb	r3, r3
    114c:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
    114e:	2000      	movs	r0, #0
    1150:	4770      	bx	lr
    1152:	46c0      	nop			; (mov r8, r8)
    1154:	200002b8 	.word	0x200002b8

00001158 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    1158:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
    115a:	4b0b      	ldr	r3, [pc, #44]	; (1188 <hif_chip_sleep+0x30>)
    115c:	785b      	ldrb	r3, [r3, #1]
    115e:	2b00      	cmp	r3, #0
    1160:	d004      	beq.n	116c <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
    1162:	4a09      	ldr	r2, [pc, #36]	; (1188 <hif_chip_sleep+0x30>)
    1164:	7853      	ldrb	r3, [r2, #1]
    1166:	3b01      	subs	r3, #1
    1168:	b2db      	uxtb	r3, r3
    116a:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    116c:	4b06      	ldr	r3, [pc, #24]	; (1188 <hif_chip_sleep+0x30>)
    116e:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
    1170:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
    1172:	2b00      	cmp	r3, #0
    1174:	d103      	bne.n	117e <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    1176:	4b04      	ldr	r3, [pc, #16]	; (1188 <hif_chip_sleep+0x30>)
    1178:	781b      	ldrb	r3, [r3, #0]
    117a:	2b00      	cmp	r3, #0
    117c:	d100      	bne.n	1180 <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
    117e:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
    1180:	4b02      	ldr	r3, [pc, #8]	; (118c <hif_chip_sleep+0x34>)
    1182:	4798      	blx	r3
    1184:	e7fb      	b.n	117e <hif_chip_sleep+0x26>
    1186:	46c0      	nop			; (mov r8, r8)
    1188:	200002b8 	.word	0x200002b8
    118c:	00002145 	.word	0x00002145

00001190 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    1190:	b5f0      	push	{r4, r5, r6, r7, lr}
    1192:	46de      	mov	lr, fp
    1194:	4657      	mov	r7, sl
    1196:	b580      	push	{r7, lr}
    1198:	b089      	sub	sp, #36	; 0x24
    119a:	4683      	mov	fp, r0
    119c:	468a      	mov	sl, r1
    119e:	9201      	str	r2, [sp, #4]
    11a0:	9300      	str	r3, [sp, #0]
    11a2:	ab10      	add	r3, sp, #64	; 0x40
    11a4:	cb80      	ldmia	r3!, {r7}
    11a6:	881e      	ldrh	r6, [r3, #0]
    11a8:	ab12      	add	r3, sp, #72	; 0x48
    11aa:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    11ac:	227f      	movs	r2, #127	; 0x7f
    11ae:	400a      	ands	r2, r1
    11b0:	ab07      	add	r3, sp, #28
    11b2:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    11b4:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    11b6:	2208      	movs	r2, #8
    11b8:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    11ba:	2f00      	cmp	r7, #0
    11bc:	d03d      	beq.n	123a <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    11be:	885a      	ldrh	r2, [r3, #2]
    11c0:	1992      	adds	r2, r2, r6
    11c2:	18aa      	adds	r2, r5, r2
    11c4:	b292      	uxth	r2, r2
    11c6:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
    11c8:	4b69      	ldr	r3, [pc, #420]	; (1370 <hif_send+0x1e0>)
    11ca:	4798      	blx	r3
    11cc:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    11ce:	d000      	beq.n	11d2 <hif_send+0x42>
    11d0:	e0c1      	b.n	1356 <hif_send+0x1c6>
	{
		volatile uint32 reg, dma_addr = 0;
    11d2:	2300      	movs	r3, #0
    11d4:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
    11d6:	aa02      	add	r2, sp, #8
    11d8:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    11da:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
    11dc:	9b04      	ldr	r3, [sp, #16]
    11de:	465a      	mov	r2, fp
    11e0:	431a      	orrs	r2, r3
    11e2:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
    11e4:	9a04      	ldr	r2, [sp, #16]
    11e6:	4653      	mov	r3, sl
    11e8:	021b      	lsls	r3, r3, #8
    11ea:	4313      	orrs	r3, r2
    11ec:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
    11ee:	ab07      	add	r3, sp, #28
    11f0:	885b      	ldrh	r3, [r3, #2]
    11f2:	9a04      	ldr	r2, [sp, #16]
    11f4:	041b      	lsls	r3, r3, #16
    11f6:	4313      	orrs	r3, r2
    11f8:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    11fa:	9904      	ldr	r1, [sp, #16]
    11fc:	485d      	ldr	r0, [pc, #372]	; (1374 <hif_send+0x1e4>)
    11fe:	4b5e      	ldr	r3, [pc, #376]	; (1378 <hif_send+0x1e8>)
    1200:	4798      	blx	r3
    1202:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    1204:	d157      	bne.n	12b6 <hif_send+0x126>

		reg = 0UL;
    1206:	2300      	movs	r3, #0
    1208:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
    120a:	9b04      	ldr	r3, [sp, #16]
    120c:	2202      	movs	r2, #2
    120e:	4313      	orrs	r3, r2
    1210:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    1212:	9904      	ldr	r1, [sp, #16]
    1214:	4859      	ldr	r0, [pc, #356]	; (137c <hif_send+0x1ec>)
    1216:	4b58      	ldr	r3, [pc, #352]	; (1378 <hif_send+0x1e8>)
    1218:	4798      	blx	r3
    121a:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    121c:	d14b      	bne.n	12b6 <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    121e:	2200      	movs	r2, #0
    1220:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    1222:	ab02      	add	r3, sp, #8
    1224:	80da      	strh	r2, [r3, #6]
    1226:	3306      	adds	r3, #6
    1228:	881b      	ldrh	r3, [r3, #0]
    122a:	b29b      	uxth	r3, r3
    122c:	4a54      	ldr	r2, [pc, #336]	; (1380 <hif_send+0x1f0>)
    122e:	4293      	cmp	r3, r2
    1230:	d849      	bhi.n	12c6 <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    1232:	4c54      	ldr	r4, [pc, #336]	; (1384 <hif_send+0x1f4>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    1234:	4b54      	ldr	r3, [pc, #336]	; (1388 <hif_send+0x1f8>)
    1236:	469a      	mov	sl, r3
    1238:	e017      	b.n	126a <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
    123a:	ab07      	add	r3, sp, #28
    123c:	885a      	ldrh	r2, [r3, #2]
    123e:	9900      	ldr	r1, [sp, #0]
    1240:	468c      	mov	ip, r1
    1242:	4462      	add	r2, ip
    1244:	b292      	uxth	r2, r2
    1246:	805a      	strh	r2, [r3, #2]
    1248:	e7be      	b.n	11c8 <hif_send+0x38>
				nm_bsp_sleep(1);
    124a:	2001      	movs	r0, #1
    124c:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
    124e:	9b04      	ldr	r3, [sp, #16]
    1250:	079b      	lsls	r3, r3, #30
    1252:	d528      	bpl.n	12a6 <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
    1254:	ab02      	add	r3, sp, #8
    1256:	88da      	ldrh	r2, [r3, #6]
    1258:	3201      	adds	r2, #1
    125a:	b292      	uxth	r2, r2
    125c:	80da      	strh	r2, [r3, #6]
    125e:	3306      	adds	r3, #6
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	b29b      	uxth	r3, r3
    1264:	4a46      	ldr	r2, [pc, #280]	; (1380 <hif_send+0x1f0>)
    1266:	4293      	cmp	r3, r2
    1268:	d82d      	bhi.n	12c6 <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    126a:	a904      	add	r1, sp, #16
    126c:	4843      	ldr	r0, [pc, #268]	; (137c <hif_send+0x1ec>)
    126e:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
    1270:	2800      	cmp	r0, #0
    1272:	d128      	bne.n	12c6 <hif_send+0x136>
			if(cnt >= 500) {
    1274:	ab02      	add	r3, sp, #8
    1276:	3306      	adds	r3, #6
    1278:	881b      	ldrh	r3, [r3, #0]
    127a:	b29b      	uxth	r3, r3
    127c:	22f4      	movs	r2, #244	; 0xf4
    127e:	32ff      	adds	r2, #255	; 0xff
    1280:	4293      	cmp	r3, r2
    1282:	d9e4      	bls.n	124e <hif_send+0xbe>
				if(cnt < 501) {
    1284:	ab02      	add	r3, sp, #8
    1286:	3306      	adds	r3, #6
    1288:	881b      	ldrh	r3, [r3, #0]
    128a:	b29b      	uxth	r3, r3
    128c:	3201      	adds	r2, #1
    128e:	4293      	cmp	r3, r2
    1290:	d8db      	bhi.n	124a <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
    1292:	483e      	ldr	r0, [pc, #248]	; (138c <hif_send+0x1fc>)
    1294:	4b3e      	ldr	r3, [pc, #248]	; (1390 <hif_send+0x200>)
    1296:	4798      	blx	r3
    1298:	483e      	ldr	r0, [pc, #248]	; (1394 <hif_send+0x204>)
    129a:	4b3f      	ldr	r3, [pc, #252]	; (1398 <hif_send+0x208>)
    129c:	4798      	blx	r3
    129e:	200d      	movs	r0, #13
    12a0:	4b3e      	ldr	r3, [pc, #248]	; (139c <hif_send+0x20c>)
    12a2:	4798      	blx	r3
    12a4:	e7d1      	b.n	124a <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    12a6:	a905      	add	r1, sp, #20
    12a8:	483d      	ldr	r0, [pc, #244]	; (13a0 <hif_send+0x210>)
    12aa:	4b36      	ldr	r3, [pc, #216]	; (1384 <hif_send+0x1f4>)
    12ac:	4798      	blx	r3
    12ae:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
    12b0:	d009      	beq.n	12c6 <hif_send+0x136>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    12b2:	2300      	movs	r3, #0
    12b4:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    12b6:	4b3b      	ldr	r3, [pc, #236]	; (13a4 <hif_send+0x214>)
    12b8:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
    12ba:	0020      	movs	r0, r4
    12bc:	b009      	add	sp, #36	; 0x24
    12be:	bc0c      	pop	{r2, r3}
    12c0:	4692      	mov	sl, r2
    12c2:	469b      	mov	fp, r3
    12c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
    12c6:	9b05      	ldr	r3, [sp, #20]
    12c8:	2b00      	cmp	r3, #0
    12ca:	d03f      	beq.n	134c <hif_send+0x1bc>
			u32CurrAddr = dma_addr;
    12cc:	9b05      	ldr	r3, [sp, #20]
    12ce:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    12d0:	a907      	add	r1, sp, #28
    12d2:	884b      	ldrh	r3, [r1, #2]
    12d4:	b29b      	uxth	r3, r3
    12d6:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    12d8:	9806      	ldr	r0, [sp, #24]
    12da:	2208      	movs	r2, #8
    12dc:	4b32      	ldr	r3, [pc, #200]	; (13a8 <hif_send+0x218>)
    12de:	4798      	blx	r3
    12e0:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    12e2:	d1e8      	bne.n	12b6 <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    12e4:	9b06      	ldr	r3, [sp, #24]
    12e6:	3308      	adds	r3, #8
    12e8:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
    12ea:	9b01      	ldr	r3, [sp, #4]
    12ec:	2b00      	cmp	r3, #0
    12ee:	d00b      	beq.n	1308 <hif_send+0x178>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    12f0:	9806      	ldr	r0, [sp, #24]
    12f2:	9a00      	ldr	r2, [sp, #0]
    12f4:	0019      	movs	r1, r3
    12f6:	4b2c      	ldr	r3, [pc, #176]	; (13a8 <hif_send+0x218>)
    12f8:	4798      	blx	r3
    12fa:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    12fc:	d1db      	bne.n	12b6 <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
    12fe:	9b06      	ldr	r3, [sp, #24]
    1300:	9a00      	ldr	r2, [sp, #0]
    1302:	4694      	mov	ip, r2
    1304:	4463      	add	r3, ip
    1306:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
    1308:	2f00      	cmp	r7, #0
    130a:	d00e      	beq.n	132a <hif_send+0x19a>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    130c:	9b06      	ldr	r3, [sp, #24]
    130e:	9a00      	ldr	r2, [sp, #0]
    1310:	1aad      	subs	r5, r5, r2
    1312:	18ed      	adds	r5, r5, r3
    1314:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    1316:	9806      	ldr	r0, [sp, #24]
    1318:	0032      	movs	r2, r6
    131a:	0039      	movs	r1, r7
    131c:	4b22      	ldr	r3, [pc, #136]	; (13a8 <hif_send+0x218>)
    131e:	4798      	blx	r3
    1320:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    1322:	d1c8      	bne.n	12b6 <hif_send+0x126>
				u32CurrAddr += u16DataSize;
    1324:	9b06      	ldr	r3, [sp, #24]
    1326:	18f3      	adds	r3, r6, r3
    1328:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
    132a:	9b05      	ldr	r3, [sp, #20]
    132c:	009b      	lsls	r3, r3, #2
    132e:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
    1330:	9b04      	ldr	r3, [sp, #16]
    1332:	2202      	movs	r2, #2
    1334:	4313      	orrs	r3, r2
    1336:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    1338:	9904      	ldr	r1, [sp, #16]
    133a:	481c      	ldr	r0, [pc, #112]	; (13ac <hif_send+0x21c>)
    133c:	4b0e      	ldr	r3, [pc, #56]	; (1378 <hif_send+0x1e8>)
    133e:	4798      	blx	r3
    1340:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    1342:	d1b8      	bne.n	12b6 <hif_send+0x126>
 	ret = hif_chip_sleep();
    1344:	4b1a      	ldr	r3, [pc, #104]	; (13b0 <hif_send+0x220>)
    1346:	4798      	blx	r3
    1348:	0004      	movs	r4, r0
	return ret;
    134a:	e7b6      	b.n	12ba <hif_send+0x12a>
			ret = hif_chip_sleep();
    134c:	4b18      	ldr	r3, [pc, #96]	; (13b0 <hif_send+0x220>)
    134e:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
    1350:	2403      	movs	r4, #3
    1352:	4264      	negs	r4, r4
			goto ERR2;
    1354:	e7b1      	b.n	12ba <hif_send+0x12a>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    1356:	22cb      	movs	r2, #203	; 0xcb
    1358:	0052      	lsls	r2, r2, #1
    135a:	4916      	ldr	r1, [pc, #88]	; (13b4 <hif_send+0x224>)
    135c:	4816      	ldr	r0, [pc, #88]	; (13b8 <hif_send+0x228>)
    135e:	4b0c      	ldr	r3, [pc, #48]	; (1390 <hif_send+0x200>)
    1360:	4798      	blx	r3
    1362:	4816      	ldr	r0, [pc, #88]	; (13bc <hif_send+0x22c>)
    1364:	4b0c      	ldr	r3, [pc, #48]	; (1398 <hif_send+0x208>)
    1366:	4798      	blx	r3
    1368:	200d      	movs	r0, #13
    136a:	4b0c      	ldr	r3, [pc, #48]	; (139c <hif_send+0x20c>)
    136c:	4798      	blx	r3
		goto ERR2;
    136e:	e7a4      	b.n	12ba <hif_send+0x12a>
    1370:	00001101 	.word	0x00001101
    1374:	0000108c 	.word	0x0000108c
    1378:	000024d1 	.word	0x000024d1
    137c:	00001078 	.word	0x00001078
    1380:	000003e7 	.word	0x000003e7
    1384:	000024c5 	.word	0x000024c5
    1388:	00000c79 	.word	0x00000c79
    138c:	0000ac1c 	.word	0x0000ac1c
    1390:	00009539 	.word	0x00009539
    1394:	0000ac28 	.word	0x0000ac28
    1398:	00009655 	.word	0x00009655
    139c:	0000956d 	.word	0x0000956d
    13a0:	00150400 	.word	0x00150400
    13a4:	0000113d 	.word	0x0000113d
    13a8:	00002545 	.word	0x00002545
    13ac:	0000106c 	.word	0x0000106c
    13b0:	00001159 	.word	0x00001159
    13b4:	0000a934 	.word	0x0000a934
    13b8:	0000a8ec 	.word	0x0000a8ec
    13bc:	0000ac38 	.word	0x0000ac38

000013c0 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    13c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    13c2:	46ce      	mov	lr, r9
    13c4:	4647      	mov	r7, r8
    13c6:	b580      	push	{r7, lr}
    13c8:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	while (gstrHifCxt.u8Interrupt) {
    13ca:	4bcf      	ldr	r3, [pc, #828]	; (1708 <hif_handle_isr+0x348>)
    13cc:	4698      	mov	r8, r3
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    13ce:	4699      	mov	r9, r3
	while (gstrHifCxt.u8Interrupt) {
    13d0:	e080      	b.n	14d4 <hif_handle_isr+0x114>
				gstrHifCxt.u32RxAddr = address;
    13d2:	4bcd      	ldr	r3, [pc, #820]	; (1708 <hif_handle_isr+0x348>)
    13d4:	9a05      	ldr	r2, [sp, #20]
    13d6:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
    13d8:	609d      	str	r5, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    13da:	af04      	add	r7, sp, #16
    13dc:	2204      	movs	r2, #4
    13de:	0039      	movs	r1, r7
    13e0:	9805      	ldr	r0, [sp, #20]
    13e2:	4bca      	ldr	r3, [pc, #808]	; (170c <hif_handle_isr+0x34c>)
    13e4:	4798      	blx	r3
    13e6:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    13e8:	887b      	ldrh	r3, [r7, #2]
    13ea:	b29b      	uxth	r3, r3
    13ec:	807b      	strh	r3, [r7, #2]
				if(M2M_SUCCESS != ret)
    13ee:	2800      	cmp	r0, #0
    13f0:	d133      	bne.n	145a <hif_handle_isr+0x9a>
				if(strHif.u16Length != size)
    13f2:	ab04      	add	r3, sp, #16
    13f4:	885b      	ldrh	r3, [r3, #2]
    13f6:	b29b      	uxth	r3, r3
    13f8:	429d      	cmp	r5, r3
    13fa:	d004      	beq.n	1406 <hif_handle_isr+0x46>
					if((size - strHif.u16Length) > 4)
    13fc:	ab04      	add	r3, sp, #16
    13fe:	885b      	ldrh	r3, [r3, #2]
    1400:	1aeb      	subs	r3, r5, r3
    1402:	2b04      	cmp	r3, #4
    1404:	dc39      	bgt.n	147a <hif_handle_isr+0xba>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    1406:	ab04      	add	r3, sp, #16
    1408:	781b      	ldrb	r3, [r3, #0]
    140a:	2b01      	cmp	r3, #1
    140c:	d04e      	beq.n	14ac <hif_handle_isr+0xec>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    140e:	ab04      	add	r3, sp, #16
    1410:	781b      	ldrb	r3, [r3, #0]
    1412:	2b02      	cmp	r3, #2
    1414:	d078      	beq.n	1508 <hif_handle_isr+0x148>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    1416:	ab04      	add	r3, sp, #16
    1418:	781b      	ldrb	r3, [r3, #0]
    141a:	2b04      	cmp	r3, #4
    141c:	d100      	bne.n	1420 <hif_handle_isr+0x60>
    141e:	e090      	b.n	1542 <hif_handle_isr+0x182>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    1420:	ab04      	add	r3, sp, #16
    1422:	781b      	ldrb	r3, [r3, #0]
    1424:	2b06      	cmp	r3, #6
    1426:	d100      	bne.n	142a <hif_handle_isr+0x6a>
    1428:	e0a8      	b.n	157c <hif_handle_isr+0x1bc>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    142a:	ab04      	add	r3, sp, #16
    142c:	781b      	ldrb	r3, [r3, #0]
    142e:	2b07      	cmp	r3, #7
    1430:	d100      	bne.n	1434 <hif_handle_isr+0x74>
    1432:	e0bf      	b.n	15b4 <hif_handle_isr+0x1f4>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    1434:	ab04      	add	r3, sp, #16
    1436:	781b      	ldrb	r3, [r3, #0]
    1438:	2b05      	cmp	r3, #5
    143a:	d100      	bne.n	143e <hif_handle_isr+0x7e>
    143c:	e0d6      	b.n	15ec <hif_handle_isr+0x22c>
					M2M_ERR("(hif) invalid group ID\n");
    143e:	4ab4      	ldr	r2, [pc, #720]	; (1710 <hif_handle_isr+0x350>)
    1440:	49b4      	ldr	r1, [pc, #720]	; (1714 <hif_handle_isr+0x354>)
    1442:	48b5      	ldr	r0, [pc, #724]	; (1718 <hif_handle_isr+0x358>)
    1444:	4bb5      	ldr	r3, [pc, #724]	; (171c <hif_handle_isr+0x35c>)
    1446:	4798      	blx	r3
    1448:	48b5      	ldr	r0, [pc, #724]	; (1720 <hif_handle_isr+0x360>)
    144a:	4bb6      	ldr	r3, [pc, #728]	; (1724 <hif_handle_isr+0x364>)
    144c:	4798      	blx	r3
    144e:	200d      	movs	r0, #13
    1450:	4bb5      	ldr	r3, [pc, #724]	; (1728 <hif_handle_isr+0x368>)
    1452:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    1454:	2406      	movs	r4, #6
    1456:	4264      	negs	r4, r4
    1458:	e116      	b.n	1688 <hif_handle_isr+0x2c8>
					M2M_ERR("(hif) address bus fail\n");
    145a:	22d2      	movs	r2, #210	; 0xd2
    145c:	32ff      	adds	r2, #255	; 0xff
    145e:	49ad      	ldr	r1, [pc, #692]	; (1714 <hif_handle_isr+0x354>)
    1460:	48ad      	ldr	r0, [pc, #692]	; (1718 <hif_handle_isr+0x358>)
    1462:	4bae      	ldr	r3, [pc, #696]	; (171c <hif_handle_isr+0x35c>)
    1464:	4798      	blx	r3
    1466:	48b1      	ldr	r0, [pc, #708]	; (172c <hif_handle_isr+0x36c>)
    1468:	4bae      	ldr	r3, [pc, #696]	; (1724 <hif_handle_isr+0x364>)
    146a:	4798      	blx	r3
    146c:	200d      	movs	r0, #13
    146e:	4bae      	ldr	r3, [pc, #696]	; (1728 <hif_handle_isr+0x368>)
    1470:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    1472:	2001      	movs	r0, #1
    1474:	4bae      	ldr	r3, [pc, #696]	; (1730 <hif_handle_isr+0x370>)
    1476:	4798      	blx	r3
    1478:	e106      	b.n	1688 <hif_handle_isr+0x2c8>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    147a:	22ed      	movs	r2, #237	; 0xed
    147c:	0052      	lsls	r2, r2, #1
    147e:	49a5      	ldr	r1, [pc, #660]	; (1714 <hif_handle_isr+0x354>)
    1480:	48a5      	ldr	r0, [pc, #660]	; (1718 <hif_handle_isr+0x358>)
    1482:	4ca6      	ldr	r4, [pc, #664]	; (171c <hif_handle_isr+0x35c>)
    1484:	47a0      	blx	r4
    1486:	a904      	add	r1, sp, #16
    1488:	884a      	ldrh	r2, [r1, #2]
    148a:	b292      	uxth	r2, r2
    148c:	780b      	ldrb	r3, [r1, #0]
    148e:	b2db      	uxtb	r3, r3
    1490:	7849      	ldrb	r1, [r1, #1]
    1492:	9100      	str	r1, [sp, #0]
    1494:	0029      	movs	r1, r5
    1496:	48a7      	ldr	r0, [pc, #668]	; (1734 <hif_handle_isr+0x374>)
    1498:	47a0      	blx	r4
    149a:	200d      	movs	r0, #13
    149c:	4ba2      	ldr	r3, [pc, #648]	; (1728 <hif_handle_isr+0x368>)
    149e:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    14a0:	2001      	movs	r0, #1
    14a2:	4ba3      	ldr	r3, [pc, #652]	; (1730 <hif_handle_isr+0x370>)
    14a4:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    14a6:	2406      	movs	r4, #6
    14a8:	4264      	negs	r4, r4
    14aa:	e0ed      	b.n	1688 <hif_handle_isr+0x2c8>
					if(gstrHifCxt.pfWifiCb)
    14ac:	4b96      	ldr	r3, [pc, #600]	; (1708 <hif_handle_isr+0x348>)
    14ae:	68db      	ldr	r3, [r3, #12]
    14b0:	2b00      	cmp	r3, #0
    14b2:	d01c      	beq.n	14ee <hif_handle_isr+0x12e>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    14b4:	4b94      	ldr	r3, [pc, #592]	; (1708 <hif_handle_isr+0x348>)
    14b6:	68db      	ldr	r3, [r3, #12]
    14b8:	aa04      	add	r2, sp, #16
    14ba:	7850      	ldrb	r0, [r2, #1]
    14bc:	b2c0      	uxtb	r0, r0
    14be:	8851      	ldrh	r1, [r2, #2]
    14c0:	9a05      	ldr	r2, [sp, #20]
    14c2:	3208      	adds	r2, #8
    14c4:	3908      	subs	r1, #8
    14c6:	b289      	uxth	r1, r1
    14c8:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
    14ca:	4b8f      	ldr	r3, [pc, #572]	; (1708 <hif_handle_isr+0x348>)
    14cc:	789b      	ldrb	r3, [r3, #2]
    14ce:	2b00      	cmp	r3, #0
    14d0:	d000      	beq.n	14d4 <hif_handle_isr+0x114>
    14d2:	e09c      	b.n	160e <hif_handle_isr+0x24e>
	while (gstrHifCxt.u8Interrupt) {
    14d4:	4643      	mov	r3, r8
    14d6:	78db      	ldrb	r3, [r3, #3]
    14d8:	2b00      	cmp	r3, #0
    14da:	d100      	bne.n	14de <hif_handle_isr+0x11e>
    14dc:	e158      	b.n	1790 <hif_handle_isr+0x3d0>
		gstrHifCxt.u8Interrupt--;
    14de:	464b      	mov	r3, r9
    14e0:	78db      	ldrb	r3, [r3, #3]
    14e2:	3b01      	subs	r3, #1
    14e4:	b2db      	uxtb	r3, r3
    14e6:	464a      	mov	r2, r9
    14e8:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    14ea:	4e93      	ldr	r6, [pc, #588]	; (1738 <hif_handle_isr+0x378>)
    14ec:	e0d7      	b.n	169e <hif_handle_isr+0x2de>
						M2M_ERR("WIFI callback is not registered\n");
    14ee:	22f3      	movs	r2, #243	; 0xf3
    14f0:	0052      	lsls	r2, r2, #1
    14f2:	4988      	ldr	r1, [pc, #544]	; (1714 <hif_handle_isr+0x354>)
    14f4:	4888      	ldr	r0, [pc, #544]	; (1718 <hif_handle_isr+0x358>)
    14f6:	4b89      	ldr	r3, [pc, #548]	; (171c <hif_handle_isr+0x35c>)
    14f8:	4798      	blx	r3
    14fa:	4890      	ldr	r0, [pc, #576]	; (173c <hif_handle_isr+0x37c>)
    14fc:	4b89      	ldr	r3, [pc, #548]	; (1724 <hif_handle_isr+0x364>)
    14fe:	4798      	blx	r3
    1500:	200d      	movs	r0, #13
    1502:	4b89      	ldr	r3, [pc, #548]	; (1728 <hif_handle_isr+0x368>)
    1504:	4798      	blx	r3
    1506:	e7e0      	b.n	14ca <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfIpCb)
    1508:	4b7f      	ldr	r3, [pc, #508]	; (1708 <hif_handle_isr+0x348>)
    150a:	691b      	ldr	r3, [r3, #16]
    150c:	2b00      	cmp	r3, #0
    150e:	d00b      	beq.n	1528 <hif_handle_isr+0x168>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1510:	4b7d      	ldr	r3, [pc, #500]	; (1708 <hif_handle_isr+0x348>)
    1512:	691b      	ldr	r3, [r3, #16]
    1514:	aa04      	add	r2, sp, #16
    1516:	7850      	ldrb	r0, [r2, #1]
    1518:	b2c0      	uxtb	r0, r0
    151a:	8851      	ldrh	r1, [r2, #2]
    151c:	9a05      	ldr	r2, [sp, #20]
    151e:	3208      	adds	r2, #8
    1520:	3908      	subs	r1, #8
    1522:	b289      	uxth	r1, r1
    1524:	4798      	blx	r3
    1526:	e7d0      	b.n	14ca <hif_handle_isr+0x10a>
						M2M_ERR("Scoket callback is not registered\n");
    1528:	22f7      	movs	r2, #247	; 0xf7
    152a:	0052      	lsls	r2, r2, #1
    152c:	4979      	ldr	r1, [pc, #484]	; (1714 <hif_handle_isr+0x354>)
    152e:	487a      	ldr	r0, [pc, #488]	; (1718 <hif_handle_isr+0x358>)
    1530:	4b7a      	ldr	r3, [pc, #488]	; (171c <hif_handle_isr+0x35c>)
    1532:	4798      	blx	r3
    1534:	4882      	ldr	r0, [pc, #520]	; (1740 <hif_handle_isr+0x380>)
    1536:	4b7b      	ldr	r3, [pc, #492]	; (1724 <hif_handle_isr+0x364>)
    1538:	4798      	blx	r3
    153a:	200d      	movs	r0, #13
    153c:	4b7a      	ldr	r3, [pc, #488]	; (1728 <hif_handle_isr+0x368>)
    153e:	4798      	blx	r3
    1540:	e7c3      	b.n	14ca <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfOtaCb)
    1542:	4b71      	ldr	r3, [pc, #452]	; (1708 <hif_handle_isr+0x348>)
    1544:	695b      	ldr	r3, [r3, #20]
    1546:	2b00      	cmp	r3, #0
    1548:	d00b      	beq.n	1562 <hif_handle_isr+0x1a2>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    154a:	4b6f      	ldr	r3, [pc, #444]	; (1708 <hif_handle_isr+0x348>)
    154c:	695b      	ldr	r3, [r3, #20]
    154e:	aa04      	add	r2, sp, #16
    1550:	7850      	ldrb	r0, [r2, #1]
    1552:	b2c0      	uxtb	r0, r0
    1554:	8851      	ldrh	r1, [r2, #2]
    1556:	9a05      	ldr	r2, [sp, #20]
    1558:	3208      	adds	r2, #8
    155a:	3908      	subs	r1, #8
    155c:	b289      	uxth	r1, r1
    155e:	4798      	blx	r3
    1560:	e7b3      	b.n	14ca <hif_handle_isr+0x10a>
						M2M_ERR("Ota callback is not registered\n");
    1562:	22fb      	movs	r2, #251	; 0xfb
    1564:	0052      	lsls	r2, r2, #1
    1566:	496b      	ldr	r1, [pc, #428]	; (1714 <hif_handle_isr+0x354>)
    1568:	486b      	ldr	r0, [pc, #428]	; (1718 <hif_handle_isr+0x358>)
    156a:	4b6c      	ldr	r3, [pc, #432]	; (171c <hif_handle_isr+0x35c>)
    156c:	4798      	blx	r3
    156e:	4875      	ldr	r0, [pc, #468]	; (1744 <hif_handle_isr+0x384>)
    1570:	4b6c      	ldr	r3, [pc, #432]	; (1724 <hif_handle_isr+0x364>)
    1572:	4798      	blx	r3
    1574:	200d      	movs	r0, #13
    1576:	4b6c      	ldr	r3, [pc, #432]	; (1728 <hif_handle_isr+0x368>)
    1578:	4798      	blx	r3
    157a:	e7a6      	b.n	14ca <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfCryptoCb)
    157c:	4b62      	ldr	r3, [pc, #392]	; (1708 <hif_handle_isr+0x348>)
    157e:	6a1b      	ldr	r3, [r3, #32]
    1580:	2b00      	cmp	r3, #0
    1582:	d00b      	beq.n	159c <hif_handle_isr+0x1dc>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1584:	4b60      	ldr	r3, [pc, #384]	; (1708 <hif_handle_isr+0x348>)
    1586:	6a1b      	ldr	r3, [r3, #32]
    1588:	aa04      	add	r2, sp, #16
    158a:	7850      	ldrb	r0, [r2, #1]
    158c:	b2c0      	uxtb	r0, r0
    158e:	8851      	ldrh	r1, [r2, #2]
    1590:	9a05      	ldr	r2, [sp, #20]
    1592:	3208      	adds	r2, #8
    1594:	3908      	subs	r1, #8
    1596:	b289      	uxth	r1, r1
    1598:	4798      	blx	r3
    159a:	e796      	b.n	14ca <hif_handle_isr+0x10a>
						M2M_ERR("Crypto callback is not registered\n");
    159c:	4a6a      	ldr	r2, [pc, #424]	; (1748 <hif_handle_isr+0x388>)
    159e:	495d      	ldr	r1, [pc, #372]	; (1714 <hif_handle_isr+0x354>)
    15a0:	485d      	ldr	r0, [pc, #372]	; (1718 <hif_handle_isr+0x358>)
    15a2:	4b5e      	ldr	r3, [pc, #376]	; (171c <hif_handle_isr+0x35c>)
    15a4:	4798      	blx	r3
    15a6:	4869      	ldr	r0, [pc, #420]	; (174c <hif_handle_isr+0x38c>)
    15a8:	4b5e      	ldr	r3, [pc, #376]	; (1724 <hif_handle_isr+0x364>)
    15aa:	4798      	blx	r3
    15ac:	200d      	movs	r0, #13
    15ae:	4b5e      	ldr	r3, [pc, #376]	; (1728 <hif_handle_isr+0x368>)
    15b0:	4798      	blx	r3
    15b2:	e78a      	b.n	14ca <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfSigmaCb)
    15b4:	4b54      	ldr	r3, [pc, #336]	; (1708 <hif_handle_isr+0x348>)
    15b6:	699b      	ldr	r3, [r3, #24]
    15b8:	2b00      	cmp	r3, #0
    15ba:	d00b      	beq.n	15d4 <hif_handle_isr+0x214>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    15bc:	4b52      	ldr	r3, [pc, #328]	; (1708 <hif_handle_isr+0x348>)
    15be:	699b      	ldr	r3, [r3, #24]
    15c0:	aa04      	add	r2, sp, #16
    15c2:	7850      	ldrb	r0, [r2, #1]
    15c4:	b2c0      	uxtb	r0, r0
    15c6:	8851      	ldrh	r1, [r2, #2]
    15c8:	9a05      	ldr	r2, [sp, #20]
    15ca:	3208      	adds	r2, #8
    15cc:	3908      	subs	r1, #8
    15ce:	b289      	uxth	r1, r1
    15d0:	4798      	blx	r3
    15d2:	e77a      	b.n	14ca <hif_handle_isr+0x10a>
						M2M_ERR("Sigma callback is not registered\n");
    15d4:	4a5e      	ldr	r2, [pc, #376]	; (1750 <hif_handle_isr+0x390>)
    15d6:	494f      	ldr	r1, [pc, #316]	; (1714 <hif_handle_isr+0x354>)
    15d8:	484f      	ldr	r0, [pc, #316]	; (1718 <hif_handle_isr+0x358>)
    15da:	4b50      	ldr	r3, [pc, #320]	; (171c <hif_handle_isr+0x35c>)
    15dc:	4798      	blx	r3
    15de:	485d      	ldr	r0, [pc, #372]	; (1754 <hif_handle_isr+0x394>)
    15e0:	4b50      	ldr	r3, [pc, #320]	; (1724 <hif_handle_isr+0x364>)
    15e2:	4798      	blx	r3
    15e4:	200d      	movs	r0, #13
    15e6:	4b50      	ldr	r3, [pc, #320]	; (1728 <hif_handle_isr+0x368>)
    15e8:	4798      	blx	r3
    15ea:	e76e      	b.n	14ca <hif_handle_isr+0x10a>
				    if(gstrHifCxt.pfSslCb)
    15ec:	4b46      	ldr	r3, [pc, #280]	; (1708 <hif_handle_isr+0x348>)
    15ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    15f0:	2b00      	cmp	r3, #0
    15f2:	d100      	bne.n	15f6 <hif_handle_isr+0x236>
    15f4:	e769      	b.n	14ca <hif_handle_isr+0x10a>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    15f6:	4b44      	ldr	r3, [pc, #272]	; (1708 <hif_handle_isr+0x348>)
    15f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    15fa:	aa04      	add	r2, sp, #16
    15fc:	7850      	ldrb	r0, [r2, #1]
    15fe:	b2c0      	uxtb	r0, r0
    1600:	8851      	ldrh	r1, [r2, #2]
    1602:	9a05      	ldr	r2, [sp, #20]
    1604:	3208      	adds	r2, #8
    1606:	3908      	subs	r1, #8
    1608:	b289      	uxth	r1, r1
    160a:	4798      	blx	r3
    160c:	e75d      	b.n	14ca <hif_handle_isr+0x10a>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    160e:	4a52      	ldr	r2, [pc, #328]	; (1758 <hif_handle_isr+0x398>)
    1610:	4940      	ldr	r1, [pc, #256]	; (1714 <hif_handle_isr+0x354>)
    1612:	4841      	ldr	r0, [pc, #260]	; (1718 <hif_handle_isr+0x358>)
    1614:	4c41      	ldr	r4, [pc, #260]	; (171c <hif_handle_isr+0x35c>)
    1616:	47a0      	blx	r4
    1618:	ab04      	add	r3, sp, #16
    161a:	7819      	ldrb	r1, [r3, #0]
    161c:	b2c9      	uxtb	r1, r1
    161e:	785a      	ldrb	r2, [r3, #1]
    1620:	b2d2      	uxtb	r2, r2
    1622:	484e      	ldr	r0, [pc, #312]	; (175c <hif_handle_isr+0x39c>)
    1624:	47a0      	blx	r4
    1626:	200d      	movs	r0, #13
    1628:	4b3f      	ldr	r3, [pc, #252]	; (1728 <hif_handle_isr+0x368>)
    162a:	4798      	blx	r3
					ret = hif_set_rx_done();
    162c:	4b4c      	ldr	r3, [pc, #304]	; (1760 <hif_handle_isr+0x3a0>)
    162e:	4798      	blx	r3
    1630:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
    1632:	d129      	bne.n	1688 <hif_handle_isr+0x2c8>
    1634:	e74e      	b.n	14d4 <hif_handle_isr+0x114>
				M2M_ERR("(hif) Wrong Size\n");
    1636:	2287      	movs	r2, #135	; 0x87
    1638:	0092      	lsls	r2, r2, #2
    163a:	4936      	ldr	r1, [pc, #216]	; (1714 <hif_handle_isr+0x354>)
    163c:	4836      	ldr	r0, [pc, #216]	; (1718 <hif_handle_isr+0x358>)
    163e:	4b37      	ldr	r3, [pc, #220]	; (171c <hif_handle_isr+0x35c>)
    1640:	4798      	blx	r3
    1642:	4848      	ldr	r0, [pc, #288]	; (1764 <hif_handle_isr+0x3a4>)
    1644:	4b37      	ldr	r3, [pc, #220]	; (1724 <hif_handle_isr+0x364>)
    1646:	4798      	blx	r3
    1648:	200d      	movs	r0, #13
    164a:	4b37      	ldr	r3, [pc, #220]	; (1728 <hif_handle_isr+0x368>)
    164c:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    164e:	2402      	movs	r4, #2
    1650:	4264      	negs	r4, r4
    1652:	e019      	b.n	1688 <hif_handle_isr+0x2c8>
			M2M_ERR("(hif) False interrupt %lx",reg);
    1654:	2289      	movs	r2, #137	; 0x89
    1656:	0092      	lsls	r2, r2, #2
    1658:	492e      	ldr	r1, [pc, #184]	; (1714 <hif_handle_isr+0x354>)
    165a:	482f      	ldr	r0, [pc, #188]	; (1718 <hif_handle_isr+0x358>)
    165c:	4c2f      	ldr	r4, [pc, #188]	; (171c <hif_handle_isr+0x35c>)
    165e:	47a0      	blx	r4
    1660:	9903      	ldr	r1, [sp, #12]
    1662:	4841      	ldr	r0, [pc, #260]	; (1768 <hif_handle_isr+0x3a8>)
    1664:	47a0      	blx	r4
    1666:	200d      	movs	r0, #13
    1668:	4b2f      	ldr	r3, [pc, #188]	; (1728 <hif_handle_isr+0x368>)
    166a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    166c:	240c      	movs	r4, #12
    166e:	4264      	negs	r4, r4
    1670:	e00a      	b.n	1688 <hif_handle_isr+0x2c8>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    1672:	4a3e      	ldr	r2, [pc, #248]	; (176c <hif_handle_isr+0x3ac>)
    1674:	4927      	ldr	r1, [pc, #156]	; (1714 <hif_handle_isr+0x354>)
    1676:	4828      	ldr	r0, [pc, #160]	; (1718 <hif_handle_isr+0x358>)
    1678:	4b28      	ldr	r3, [pc, #160]	; (171c <hif_handle_isr+0x35c>)
    167a:	4798      	blx	r3
    167c:	483c      	ldr	r0, [pc, #240]	; (1770 <hif_handle_isr+0x3b0>)
    167e:	4b29      	ldr	r3, [pc, #164]	; (1724 <hif_handle_isr+0x364>)
    1680:	4798      	blx	r3
    1682:	200d      	movs	r0, #13
    1684:	4b28      	ldr	r3, [pc, #160]	; (1728 <hif_handle_isr+0x368>)
    1686:	4798      	blx	r3
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    1688:	4a3a      	ldr	r2, [pc, #232]	; (1774 <hif_handle_isr+0x3b4>)
    168a:	493b      	ldr	r1, [pc, #236]	; (1778 <hif_handle_isr+0x3b8>)
    168c:	4822      	ldr	r0, [pc, #136]	; (1718 <hif_handle_isr+0x358>)
    168e:	4f23      	ldr	r7, [pc, #140]	; (171c <hif_handle_isr+0x35c>)
    1690:	47b8      	blx	r7
    1692:	0021      	movs	r1, r4
    1694:	4839      	ldr	r0, [pc, #228]	; (177c <hif_handle_isr+0x3bc>)
    1696:	47b8      	blx	r7
    1698:	200d      	movs	r0, #13
    169a:	4b23      	ldr	r3, [pc, #140]	; (1728 <hif_handle_isr+0x368>)
    169c:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    169e:	a903      	add	r1, sp, #12
    16a0:	4837      	ldr	r0, [pc, #220]	; (1780 <hif_handle_isr+0x3c0>)
    16a2:	47b0      	blx	r6
    16a4:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
    16a6:	d1e4      	bne.n	1672 <hif_handle_isr+0x2b2>
		if(reg & 0x1)	/* New interrupt has been received */
    16a8:	9b03      	ldr	r3, [sp, #12]
    16aa:	07db      	lsls	r3, r3, #31
    16ac:	d5d2      	bpl.n	1654 <hif_handle_isr+0x294>
			nm_bsp_interrupt_ctrl(0);
    16ae:	2000      	movs	r0, #0
    16b0:	4b1f      	ldr	r3, [pc, #124]	; (1730 <hif_handle_isr+0x370>)
    16b2:	4798      	blx	r3
			reg &= ~NBIT0;
    16b4:	2301      	movs	r3, #1
    16b6:	9903      	ldr	r1, [sp, #12]
    16b8:	4399      	bics	r1, r3
    16ba:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    16bc:	4830      	ldr	r0, [pc, #192]	; (1780 <hif_handle_isr+0x3c0>)
    16be:	4b31      	ldr	r3, [pc, #196]	; (1784 <hif_handle_isr+0x3c4>)
    16c0:	4798      	blx	r3
    16c2:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
    16c4:	d1e0      	bne.n	1688 <hif_handle_isr+0x2c8>
			gstrHifCxt.u8HifRXDone = 1;
    16c6:	2201      	movs	r2, #1
    16c8:	4b0f      	ldr	r3, [pc, #60]	; (1708 <hif_handle_isr+0x348>)
    16ca:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    16cc:	9b03      	ldr	r3, [sp, #12]
    16ce:	049d      	lsls	r5, r3, #18
    16d0:	0d2d      	lsrs	r5, r5, #20
			if (size > 0) {
    16d2:	d0b0      	beq.n	1636 <hif_handle_isr+0x276>
				uint32 address = 0;
    16d4:	2300      	movs	r3, #0
    16d6:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    16d8:	a905      	add	r1, sp, #20
    16da:	482b      	ldr	r0, [pc, #172]	; (1788 <hif_handle_isr+0x3c8>)
    16dc:	4b16      	ldr	r3, [pc, #88]	; (1738 <hif_handle_isr+0x378>)
    16de:	4798      	blx	r3
    16e0:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    16e2:	d100      	bne.n	16e6 <hif_handle_isr+0x326>
    16e4:	e675      	b.n	13d2 <hif_handle_isr+0x12>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    16e6:	22c8      	movs	r2, #200	; 0xc8
    16e8:	32ff      	adds	r2, #255	; 0xff
    16ea:	490a      	ldr	r1, [pc, #40]	; (1714 <hif_handle_isr+0x354>)
    16ec:	480a      	ldr	r0, [pc, #40]	; (1718 <hif_handle_isr+0x358>)
    16ee:	4b0b      	ldr	r3, [pc, #44]	; (171c <hif_handle_isr+0x35c>)
    16f0:	4798      	blx	r3
    16f2:	4826      	ldr	r0, [pc, #152]	; (178c <hif_handle_isr+0x3cc>)
    16f4:	4b0b      	ldr	r3, [pc, #44]	; (1724 <hif_handle_isr+0x364>)
    16f6:	4798      	blx	r3
    16f8:	200d      	movs	r0, #13
    16fa:	4b0b      	ldr	r3, [pc, #44]	; (1728 <hif_handle_isr+0x368>)
    16fc:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    16fe:	2001      	movs	r0, #1
    1700:	4b0b      	ldr	r3, [pc, #44]	; (1730 <hif_handle_isr+0x370>)
    1702:	4798      	blx	r3
    1704:	e7c0      	b.n	1688 <hif_handle_isr+0x2c8>
    1706:	46c0      	nop			; (mov r8, r8)
    1708:	200002b8 	.word	0x200002b8
    170c:	000024dd 	.word	0x000024dd
    1710:	0000020f 	.word	0x0000020f
    1714:	0000a940 	.word	0x0000a940
    1718:	0000a8ec 	.word	0x0000a8ec
    171c:	00009539 	.word	0x00009539
    1720:	0000aa9c 	.word	0x0000aa9c
    1724:	00009655 	.word	0x00009655
    1728:	0000956d 	.word	0x0000956d
    172c:	0000a998 	.word	0x0000a998
    1730:	00000d89 	.word	0x00000d89
    1734:	0000a9b0 	.word	0x0000a9b0
    1738:	000024c5 	.word	0x000024c5
    173c:	0000a9f0 	.word	0x0000a9f0
    1740:	0000aa10 	.word	0x0000aa10
    1744:	0000aa34 	.word	0x0000aa34
    1748:	000001ff 	.word	0x000001ff
    174c:	0000aa54 	.word	0x0000aa54
    1750:	00000206 	.word	0x00000206
    1754:	0000aa78 	.word	0x0000aa78
    1758:	00000215 	.word	0x00000215
    175c:	0000aab4 	.word	0x0000aab4
    1760:	000010bd 	.word	0x000010bd
    1764:	0000aae0 	.word	0x0000aae0
    1768:	0000aaf4 	.word	0x0000aaf4
    176c:	0000022d 	.word	0x0000022d
    1770:	0000ab10 	.word	0x0000ab10
    1774:	0000024a 	.word	0x0000024a
    1778:	0000a948 	.word	0x0000a948
    177c:	0000ab34 	.word	0x0000ab34
    1780:	00001070 	.word	0x00001070
    1784:	000024d1 	.word	0x000024d1
    1788:	00001084 	.word	0x00001084
    178c:	0000a974 	.word	0x0000a974
			}
		}
	}

	return ret;
}
    1790:	2000      	movs	r0, #0
    1792:	b007      	add	sp, #28
    1794:	bc0c      	pop	{r2, r3}
    1796:	4690      	mov	r8, r2
    1798:	4699      	mov	r9, r3
    179a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000179c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    179c:	b570      	push	{r4, r5, r6, lr}
    179e:	0014      	movs	r4, r2
    17a0:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    17a2:	2800      	cmp	r0, #0
    17a4:	d003      	beq.n	17ae <hif_receive+0x12>
    17a6:	2900      	cmp	r1, #0
    17a8:	d001      	beq.n	17ae <hif_receive+0x12>
    17aa:	2a00      	cmp	r2, #0
    17ac:	d112      	bne.n	17d4 <hif_receive+0x38>
	{
		if(isDone)
    17ae:	2d00      	cmp	r5, #0
    17b0:	d002      	beq.n	17b8 <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    17b2:	4b27      	ldr	r3, [pc, #156]	; (1850 <hif_receive+0xb4>)
    17b4:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    17b6:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
    17b8:	4a26      	ldr	r2, [pc, #152]	; (1854 <hif_receive+0xb8>)
    17ba:	4927      	ldr	r1, [pc, #156]	; (1858 <hif_receive+0xbc>)
    17bc:	4827      	ldr	r0, [pc, #156]	; (185c <hif_receive+0xc0>)
    17be:	4b28      	ldr	r3, [pc, #160]	; (1860 <hif_receive+0xc4>)
    17c0:	4798      	blx	r3
    17c2:	4828      	ldr	r0, [pc, #160]	; (1864 <hif_receive+0xc8>)
    17c4:	4b28      	ldr	r3, [pc, #160]	; (1868 <hif_receive+0xcc>)
    17c6:	4798      	blx	r3
    17c8:	200d      	movs	r0, #13
    17ca:	4b28      	ldr	r3, [pc, #160]	; (186c <hif_receive+0xd0>)
    17cc:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    17ce:	200c      	movs	r0, #12
    17d0:	4240      	negs	r0, r0
    17d2:	e7f0      	b.n	17b6 <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
    17d4:	4b26      	ldr	r3, [pc, #152]	; (1870 <hif_receive+0xd4>)
    17d6:	689b      	ldr	r3, [r3, #8]
    17d8:	429a      	cmp	r2, r3
    17da:	d81a      	bhi.n	1812 <hif_receive+0x76>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    17dc:	4b24      	ldr	r3, [pc, #144]	; (1870 <hif_receive+0xd4>)
    17de:	685b      	ldr	r3, [r3, #4]
    17e0:	4298      	cmp	r0, r3
    17e2:	d326      	bcc.n	1832 <hif_receive+0x96>
    17e4:	1886      	adds	r6, r0, r2
    17e6:	4a22      	ldr	r2, [pc, #136]	; (1870 <hif_receive+0xd4>)
    17e8:	6853      	ldr	r3, [r2, #4]
    17ea:	6892      	ldr	r2, [r2, #8]
    17ec:	189b      	adds	r3, r3, r2
    17ee:	429e      	cmp	r6, r3
    17f0:	d81f      	bhi.n	1832 <hif_receive+0x96>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    17f2:	0022      	movs	r2, r4
    17f4:	4b1f      	ldr	r3, [pc, #124]	; (1874 <hif_receive+0xd8>)
    17f6:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    17f8:	2800      	cmp	r0, #0
    17fa:	d1dc      	bne.n	17b6 <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    17fc:	4a1c      	ldr	r2, [pc, #112]	; (1870 <hif_receive+0xd4>)
    17fe:	6853      	ldr	r3, [r2, #4]
    1800:	6892      	ldr	r2, [r2, #8]
    1802:	189b      	adds	r3, r3, r2
    1804:	429e      	cmp	r6, r3
    1806:	d001      	beq.n	180c <hif_receive+0x70>
    1808:	2d00      	cmp	r5, #0
    180a:	d0d4      	beq.n	17b6 <hif_receive+0x1a>
		ret = hif_set_rx_done();
    180c:	4b10      	ldr	r3, [pc, #64]	; (1850 <hif_receive+0xb4>)
    180e:	4798      	blx	r3
    1810:	e7d1      	b.n	17b6 <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    1812:	4a19      	ldr	r2, [pc, #100]	; (1878 <hif_receive+0xdc>)
    1814:	4910      	ldr	r1, [pc, #64]	; (1858 <hif_receive+0xbc>)
    1816:	4811      	ldr	r0, [pc, #68]	; (185c <hif_receive+0xc0>)
    1818:	4d11      	ldr	r5, [pc, #68]	; (1860 <hif_receive+0xc4>)
    181a:	47a8      	blx	r5
    181c:	4b14      	ldr	r3, [pc, #80]	; (1870 <hif_receive+0xd4>)
    181e:	689a      	ldr	r2, [r3, #8]
    1820:	0021      	movs	r1, r4
    1822:	4816      	ldr	r0, [pc, #88]	; (187c <hif_receive+0xe0>)
    1824:	47a8      	blx	r5
    1826:	200d      	movs	r0, #13
    1828:	4b10      	ldr	r3, [pc, #64]	; (186c <hif_receive+0xd0>)
    182a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    182c:	200c      	movs	r0, #12
    182e:	4240      	negs	r0, r0
		goto ERR1;
    1830:	e7c1      	b.n	17b6 <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    1832:	4a13      	ldr	r2, [pc, #76]	; (1880 <hif_receive+0xe4>)
    1834:	4908      	ldr	r1, [pc, #32]	; (1858 <hif_receive+0xbc>)
    1836:	4809      	ldr	r0, [pc, #36]	; (185c <hif_receive+0xc0>)
    1838:	4b09      	ldr	r3, [pc, #36]	; (1860 <hif_receive+0xc4>)
    183a:	4798      	blx	r3
    183c:	4811      	ldr	r0, [pc, #68]	; (1884 <hif_receive+0xe8>)
    183e:	4b0a      	ldr	r3, [pc, #40]	; (1868 <hif_receive+0xcc>)
    1840:	4798      	blx	r3
    1842:	200d      	movs	r0, #13
    1844:	4b09      	ldr	r3, [pc, #36]	; (186c <hif_receive+0xd0>)
    1846:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1848:	200c      	movs	r0, #12
    184a:	4240      	negs	r0, r0
		goto ERR1;
    184c:	e7b3      	b.n	17b6 <hif_receive+0x1a>
    184e:	46c0      	nop			; (mov r8, r8)
    1850:	000010bd 	.word	0x000010bd
    1854:	0000026b 	.word	0x0000026b
    1858:	0000a958 	.word	0x0000a958
    185c:	0000a8ec 	.word	0x0000a8ec
    1860:	00009539 	.word	0x00009539
    1864:	0000ab64 	.word	0x0000ab64
    1868:	00009655 	.word	0x00009655
    186c:	0000956d 	.word	0x0000956d
    1870:	200002b8 	.word	0x200002b8
    1874:	000024dd 	.word	0x000024dd
    1878:	00000273 	.word	0x00000273
    187c:	0000ab84 	.word	0x0000ab84
    1880:	00000279 	.word	0x00000279
    1884:	0000abcc 	.word	0x0000abcc

00001888 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    1888:	b570      	push	{r4, r5, r6, lr}
    188a:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    188c:	2807      	cmp	r0, #7
    188e:	d81f      	bhi.n	18d0 <hif_register_cb+0x48>
    1890:	0083      	lsls	r3, r0, #2
    1892:	4a16      	ldr	r2, [pc, #88]	; (18ec <hif_register_cb+0x64>)
    1894:	58d3      	ldr	r3, [r2, r3]
    1896:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    1898:	4b15      	ldr	r3, [pc, #84]	; (18f0 <hif_register_cb+0x68>)
    189a:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
    189c:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
    189e:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
    18a0:	4b13      	ldr	r3, [pc, #76]	; (18f0 <hif_register_cb+0x68>)
    18a2:	60d9      	str	r1, [r3, #12]
	sint8 ret = M2M_SUCCESS;
    18a4:	2000      	movs	r0, #0
			break;
    18a6:	e7fa      	b.n	189e <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
    18a8:	4b11      	ldr	r3, [pc, #68]	; (18f0 <hif_register_cb+0x68>)
    18aa:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
    18ac:	2000      	movs	r0, #0
			break;
    18ae:	e7f6      	b.n	189e <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
    18b0:	4b0f      	ldr	r3, [pc, #60]	; (18f0 <hif_register_cb+0x68>)
    18b2:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
    18b4:	2000      	movs	r0, #0
			break;
    18b6:	e7f2      	b.n	189e <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
    18b8:	4b0d      	ldr	r3, [pc, #52]	; (18f0 <hif_register_cb+0x68>)
    18ba:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
    18bc:	2000      	movs	r0, #0
			break;
    18be:	e7ee      	b.n	189e <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
    18c0:	4b0b      	ldr	r3, [pc, #44]	; (18f0 <hif_register_cb+0x68>)
    18c2:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
    18c4:	2000      	movs	r0, #0
			break;
    18c6:	e7ea      	b.n	189e <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
    18c8:	4b09      	ldr	r3, [pc, #36]	; (18f0 <hif_register_cb+0x68>)
    18ca:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
    18cc:	2000      	movs	r0, #0
			break;
    18ce:	e7e6      	b.n	189e <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
    18d0:	4a08      	ldr	r2, [pc, #32]	; (18f4 <hif_register_cb+0x6c>)
    18d2:	4909      	ldr	r1, [pc, #36]	; (18f8 <hif_register_cb+0x70>)
    18d4:	4809      	ldr	r0, [pc, #36]	; (18fc <hif_register_cb+0x74>)
    18d6:	4d0a      	ldr	r5, [pc, #40]	; (1900 <hif_register_cb+0x78>)
    18d8:	47a8      	blx	r5
    18da:	0021      	movs	r1, r4
    18dc:	4809      	ldr	r0, [pc, #36]	; (1904 <hif_register_cb+0x7c>)
    18de:	47a8      	blx	r5
    18e0:	200d      	movs	r0, #13
    18e2:	4b09      	ldr	r3, [pc, #36]	; (1908 <hif_register_cb+0x80>)
    18e4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    18e6:	200c      	movs	r0, #12
    18e8:	4240      	negs	r0, r0
			break;
    18ea:	e7d8      	b.n	189e <hif_register_cb+0x16>
    18ec:	0000a914 	.word	0x0000a914
    18f0:	200002b8 	.word	0x200002b8
    18f4:	000002b1 	.word	0x000002b1
    18f8:	0000a964 	.word	0x0000a964
    18fc:	0000a8ec 	.word	0x0000a8ec
    1900:	00009539 	.word	0x00009539
    1904:	0000ac10 	.word	0x0000ac10
    1908:	0000956d 	.word	0x0000956d

0000190c <hif_init>:
{
    190c:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    190e:	2228      	movs	r2, #40	; 0x28
    1910:	2100      	movs	r1, #0
    1912:	4806      	ldr	r0, [pc, #24]	; (192c <hif_init+0x20>)
    1914:	4b06      	ldr	r3, [pc, #24]	; (1930 <hif_init+0x24>)
    1916:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    1918:	4806      	ldr	r0, [pc, #24]	; (1934 <hif_init+0x28>)
    191a:	4b07      	ldr	r3, [pc, #28]	; (1938 <hif_init+0x2c>)
    191c:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    191e:	4907      	ldr	r1, [pc, #28]	; (193c <hif_init+0x30>)
    1920:	2003      	movs	r0, #3
    1922:	4b07      	ldr	r3, [pc, #28]	; (1940 <hif_init+0x34>)
    1924:	4798      	blx	r3
}
    1926:	2000      	movs	r0, #0
    1928:	bd10      	pop	{r4, pc}
    192a:	46c0      	nop			; (mov r8, r8)
    192c:	200002b8 	.word	0x200002b8
    1930:	0000107d 	.word	0x0000107d
    1934:	000010a9 	.word	0x000010a9
    1938:	00000d31 	.word	0x00000d31
    193c:	000010b9 	.word	0x000010b9
    1940:	00001889 	.word	0x00001889

00001944 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    1944:	b530      	push	{r4, r5, lr}
    1946:	b09f      	sub	sp, #124	; 0x7c
    1948:	0004      	movs	r4, r0
    194a:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    194c:	282c      	cmp	r0, #44	; 0x2c
    194e:	d02f      	beq.n	19b0 <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    1950:	281b      	cmp	r0, #27
    1952:	d03d      	beq.n	19d0 <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    1954:	2806      	cmp	r0, #6
    1956:	d04b      	beq.n	19f0 <m2m_wifi_cb+0xac>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    1958:	280e      	cmp	r0, #14
    195a:	d027      	beq.n	19ac <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    195c:	2832      	cmp	r0, #50	; 0x32
    195e:	d057      	beq.n	1a10 <m2m_wifi_cb+0xcc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    1960:	282f      	cmp	r0, #47	; 0x2f
    1962:	d065      	beq.n	1a30 <m2m_wifi_cb+0xec>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    1964:	2834      	cmp	r0, #52	; 0x34
    1966:	d100      	bne.n	196a <m2m_wifi_cb+0x26>
    1968:	e077      	b.n	1a5a <m2m_wifi_cb+0x116>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    196a:	2811      	cmp	r0, #17
    196c:	d100      	bne.n	1970 <m2m_wifi_cb+0x2c>
    196e:	e096      	b.n	1a9e <m2m_wifi_cb+0x15a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    1970:	2813      	cmp	r0, #19
    1972:	d100      	bne.n	1976 <m2m_wifi_cb+0x32>
    1974:	e0ac      	b.n	1ad0 <m2m_wifi_cb+0x18c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    1976:	2804      	cmp	r0, #4
    1978:	d100      	bne.n	197c <m2m_wifi_cb+0x38>
    197a:	e0bb      	b.n	1af4 <m2m_wifi_cb+0x1b0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    197c:	2865      	cmp	r0, #101	; 0x65
    197e:	d100      	bne.n	1982 <m2m_wifi_cb+0x3e>
    1980:	e0ca      	b.n	1b18 <m2m_wifi_cb+0x1d4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    1982:	2809      	cmp	r0, #9
    1984:	d100      	bne.n	1988 <m2m_wifi_cb+0x44>
    1986:	e0d9      	b.n	1b3c <m2m_wifi_cb+0x1f8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    1988:	282a      	cmp	r0, #42	; 0x2a
    198a:	d100      	bne.n	198e <m2m_wifi_cb+0x4a>
    198c:	e0e8      	b.n	1b60 <m2m_wifi_cb+0x21c>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    198e:	2820      	cmp	r0, #32
    1990:	d100      	bne.n	1994 <m2m_wifi_cb+0x50>
    1992:	e0f7      	b.n	1b84 <m2m_wifi_cb+0x240>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    1994:	2292      	movs	r2, #146	; 0x92
    1996:	0052      	lsls	r2, r2, #1
    1998:	4989      	ldr	r1, [pc, #548]	; (1bc0 <m2m_wifi_cb+0x27c>)
    199a:	488a      	ldr	r0, [pc, #552]	; (1bc4 <m2m_wifi_cb+0x280>)
    199c:	4d8a      	ldr	r5, [pc, #552]	; (1bc8 <m2m_wifi_cb+0x284>)
    199e:	47a8      	blx	r5
    19a0:	0021      	movs	r1, r4
    19a2:	488a      	ldr	r0, [pc, #552]	; (1bcc <m2m_wifi_cb+0x288>)
    19a4:	47a8      	blx	r5
    19a6:	200d      	movs	r0, #13
    19a8:	4b89      	ldr	r3, [pc, #548]	; (1bd0 <m2m_wifi_cb+0x28c>)
    19aa:	4798      	blx	r3
	}
}
    19ac:	b01f      	add	sp, #124	; 0x7c
    19ae:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    19b0:	2300      	movs	r3, #0
    19b2:	2204      	movs	r2, #4
    19b4:	a903      	add	r1, sp, #12
    19b6:	0028      	movs	r0, r5
    19b8:	4c86      	ldr	r4, [pc, #536]	; (1bd4 <m2m_wifi_cb+0x290>)
    19ba:	47a0      	blx	r4
    19bc:	2800      	cmp	r0, #0
    19be:	d1f5      	bne.n	19ac <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    19c0:	4b85      	ldr	r3, [pc, #532]	; (1bd8 <m2m_wifi_cb+0x294>)
    19c2:	681b      	ldr	r3, [r3, #0]
    19c4:	2b00      	cmp	r3, #0
    19c6:	d0f1      	beq.n	19ac <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    19c8:	a903      	add	r1, sp, #12
    19ca:	302c      	adds	r0, #44	; 0x2c
    19cc:	4798      	blx	r3
    19ce:	e7ed      	b.n	19ac <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    19d0:	2300      	movs	r3, #0
    19d2:	2208      	movs	r2, #8
    19d4:	a903      	add	r1, sp, #12
    19d6:	0028      	movs	r0, r5
    19d8:	4c7e      	ldr	r4, [pc, #504]	; (1bd4 <m2m_wifi_cb+0x290>)
    19da:	47a0      	blx	r4
    19dc:	2800      	cmp	r0, #0
    19de:	d1e5      	bne.n	19ac <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    19e0:	4b7d      	ldr	r3, [pc, #500]	; (1bd8 <m2m_wifi_cb+0x294>)
    19e2:	681b      	ldr	r3, [r3, #0]
    19e4:	2b00      	cmp	r3, #0
    19e6:	d0e1      	beq.n	19ac <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    19e8:	a903      	add	r1, sp, #12
    19ea:	301b      	adds	r0, #27
    19ec:	4798      	blx	r3
    19ee:	e7dd      	b.n	19ac <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    19f0:	2301      	movs	r3, #1
    19f2:	2230      	movs	r2, #48	; 0x30
    19f4:	a903      	add	r1, sp, #12
    19f6:	0028      	movs	r0, r5
    19f8:	4c76      	ldr	r4, [pc, #472]	; (1bd4 <m2m_wifi_cb+0x290>)
    19fa:	47a0      	blx	r4
    19fc:	2800      	cmp	r0, #0
    19fe:	d1d5      	bne.n	19ac <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    1a00:	4b75      	ldr	r3, [pc, #468]	; (1bd8 <m2m_wifi_cb+0x294>)
    1a02:	681b      	ldr	r3, [r3, #0]
    1a04:	2b00      	cmp	r3, #0
    1a06:	d0d1      	beq.n	19ac <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    1a08:	a903      	add	r1, sp, #12
    1a0a:	3006      	adds	r0, #6
    1a0c:	4798      	blx	r3
    1a0e:	e7cd      	b.n	19ac <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    1a10:	2300      	movs	r3, #0
    1a12:	2214      	movs	r2, #20
    1a14:	a903      	add	r1, sp, #12
    1a16:	0028      	movs	r0, r5
    1a18:	4c6e      	ldr	r4, [pc, #440]	; (1bd4 <m2m_wifi_cb+0x290>)
    1a1a:	47a0      	blx	r4
    1a1c:	2800      	cmp	r0, #0
    1a1e:	d1c5      	bne.n	19ac <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1a20:	4b6d      	ldr	r3, [pc, #436]	; (1bd8 <m2m_wifi_cb+0x294>)
    1a22:	681b      	ldr	r3, [r3, #0]
    1a24:	2b00      	cmp	r3, #0
    1a26:	d0c1      	beq.n	19ac <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    1a28:	a903      	add	r1, sp, #12
    1a2a:	3032      	adds	r0, #50	; 0x32
    1a2c:	4798      	blx	r3
    1a2e:	e7bd      	b.n	19ac <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    1a30:	2264      	movs	r2, #100	; 0x64
    1a32:	2100      	movs	r1, #0
    1a34:	a803      	add	r0, sp, #12
    1a36:	4b69      	ldr	r3, [pc, #420]	; (1bdc <m2m_wifi_cb+0x298>)
    1a38:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    1a3a:	2300      	movs	r3, #0
    1a3c:	2264      	movs	r2, #100	; 0x64
    1a3e:	a903      	add	r1, sp, #12
    1a40:	0028      	movs	r0, r5
    1a42:	4c64      	ldr	r4, [pc, #400]	; (1bd4 <m2m_wifi_cb+0x290>)
    1a44:	47a0      	blx	r4
    1a46:	2800      	cmp	r0, #0
    1a48:	d1b0      	bne.n	19ac <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1a4a:	4b63      	ldr	r3, [pc, #396]	; (1bd8 <m2m_wifi_cb+0x294>)
    1a4c:	681b      	ldr	r3, [r3, #0]
    1a4e:	2b00      	cmp	r3, #0
    1a50:	d0ac      	beq.n	19ac <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    1a52:	a903      	add	r1, sp, #12
    1a54:	302f      	adds	r0, #47	; 0x2f
    1a56:	4798      	blx	r3
    1a58:	e7a8      	b.n	19ac <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    1a5a:	2300      	movs	r3, #0
    1a5c:	2204      	movs	r2, #4
    1a5e:	a903      	add	r1, sp, #12
    1a60:	0028      	movs	r0, r5
    1a62:	4c5c      	ldr	r4, [pc, #368]	; (1bd4 <m2m_wifi_cb+0x290>)
    1a64:	47a0      	blx	r4
    1a66:	2800      	cmp	r0, #0
    1a68:	d1a0      	bne.n	19ac <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    1a6a:	485d      	ldr	r0, [pc, #372]	; (1be0 <m2m_wifi_cb+0x29c>)
    1a6c:	4d56      	ldr	r5, [pc, #344]	; (1bc8 <m2m_wifi_cb+0x284>)
    1a6e:	47a8      	blx	r5
    1a70:	9c03      	ldr	r4, [sp, #12]
    1a72:	0a23      	lsrs	r3, r4, #8
    1a74:	20ff      	movs	r0, #255	; 0xff
    1a76:	4003      	ands	r3, r0
    1a78:	0c22      	lsrs	r2, r4, #16
    1a7a:	4002      	ands	r2, r0
    1a7c:	0e21      	lsrs	r1, r4, #24
    1a7e:	4020      	ands	r0, r4
    1a80:	9000      	str	r0, [sp, #0]
    1a82:	4858      	ldr	r0, [pc, #352]	; (1be4 <m2m_wifi_cb+0x2a0>)
    1a84:	47a8      	blx	r5
    1a86:	200d      	movs	r0, #13
    1a88:	4b51      	ldr	r3, [pc, #324]	; (1bd0 <m2m_wifi_cb+0x28c>)
    1a8a:	4798      	blx	r3
			if (gpfAppWifiCb)
    1a8c:	4b52      	ldr	r3, [pc, #328]	; (1bd8 <m2m_wifi_cb+0x294>)
    1a8e:	681b      	ldr	r3, [r3, #0]
    1a90:	2b00      	cmp	r3, #0
    1a92:	d100      	bne.n	1a96 <m2m_wifi_cb+0x152>
    1a94:	e78a      	b.n	19ac <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    1a96:	2100      	movs	r1, #0
    1a98:	2034      	movs	r0, #52	; 0x34
    1a9a:	4798      	blx	r3
    1a9c:	e786      	b.n	19ac <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
    1a9e:	2200      	movs	r2, #0
    1aa0:	4b51      	ldr	r3, [pc, #324]	; (1be8 <m2m_wifi_cb+0x2a4>)
    1aa2:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    1aa4:	2300      	movs	r3, #0
    1aa6:	3204      	adds	r2, #4
    1aa8:	a903      	add	r1, sp, #12
    1aaa:	0028      	movs	r0, r5
    1aac:	4c49      	ldr	r4, [pc, #292]	; (1bd4 <m2m_wifi_cb+0x290>)
    1aae:	47a0      	blx	r4
    1ab0:	2800      	cmp	r0, #0
    1ab2:	d000      	beq.n	1ab6 <m2m_wifi_cb+0x172>
    1ab4:	e77a      	b.n	19ac <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
    1ab6:	ab03      	add	r3, sp, #12
    1ab8:	781a      	ldrb	r2, [r3, #0]
    1aba:	4b4c      	ldr	r3, [pc, #304]	; (1bec <m2m_wifi_cb+0x2a8>)
    1abc:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    1abe:	4b46      	ldr	r3, [pc, #280]	; (1bd8 <m2m_wifi_cb+0x294>)
    1ac0:	681b      	ldr	r3, [r3, #0]
    1ac2:	2b00      	cmp	r3, #0
    1ac4:	d100      	bne.n	1ac8 <m2m_wifi_cb+0x184>
    1ac6:	e771      	b.n	19ac <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    1ac8:	a903      	add	r1, sp, #12
    1aca:	3011      	adds	r0, #17
    1acc:	4798      	blx	r3
    1ace:	e76d      	b.n	19ac <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    1ad0:	2300      	movs	r3, #0
    1ad2:	222c      	movs	r2, #44	; 0x2c
    1ad4:	a903      	add	r1, sp, #12
    1ad6:	0028      	movs	r0, r5
    1ad8:	4c3e      	ldr	r4, [pc, #248]	; (1bd4 <m2m_wifi_cb+0x290>)
    1ada:	47a0      	blx	r4
    1adc:	2800      	cmp	r0, #0
    1ade:	d000      	beq.n	1ae2 <m2m_wifi_cb+0x19e>
    1ae0:	e764      	b.n	19ac <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1ae2:	4b3d      	ldr	r3, [pc, #244]	; (1bd8 <m2m_wifi_cb+0x294>)
    1ae4:	681b      	ldr	r3, [r3, #0]
    1ae6:	2b00      	cmp	r3, #0
    1ae8:	d100      	bne.n	1aec <m2m_wifi_cb+0x1a8>
    1aea:	e75f      	b.n	19ac <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    1aec:	a903      	add	r1, sp, #12
    1aee:	3013      	adds	r0, #19
    1af0:	4798      	blx	r3
    1af2:	e75b      	b.n	19ac <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1af4:	2300      	movs	r3, #0
    1af6:	2204      	movs	r2, #4
    1af8:	a91c      	add	r1, sp, #112	; 0x70
    1afa:	0028      	movs	r0, r5
    1afc:	4c35      	ldr	r4, [pc, #212]	; (1bd4 <m2m_wifi_cb+0x290>)
    1afe:	47a0      	blx	r4
    1b00:	2800      	cmp	r0, #0
    1b02:	d000      	beq.n	1b06 <m2m_wifi_cb+0x1c2>
    1b04:	e752      	b.n	19ac <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1b06:	4b34      	ldr	r3, [pc, #208]	; (1bd8 <m2m_wifi_cb+0x294>)
    1b08:	681b      	ldr	r3, [r3, #0]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d100      	bne.n	1b10 <m2m_wifi_cb+0x1cc>
    1b0e:	e74d      	b.n	19ac <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    1b10:	a91c      	add	r1, sp, #112	; 0x70
    1b12:	3004      	adds	r0, #4
    1b14:	4798      	blx	r3
    1b16:	e749      	b.n	19ac <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1b18:	2300      	movs	r3, #0
    1b1a:	2204      	movs	r2, #4
    1b1c:	a91c      	add	r1, sp, #112	; 0x70
    1b1e:	0028      	movs	r0, r5
    1b20:	4c2c      	ldr	r4, [pc, #176]	; (1bd4 <m2m_wifi_cb+0x290>)
    1b22:	47a0      	blx	r4
    1b24:	2800      	cmp	r0, #0
    1b26:	d000      	beq.n	1b2a <m2m_wifi_cb+0x1e6>
    1b28:	e740      	b.n	19ac <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1b2a:	4b2b      	ldr	r3, [pc, #172]	; (1bd8 <m2m_wifi_cb+0x294>)
    1b2c:	681b      	ldr	r3, [r3, #0]
    1b2e:	2b00      	cmp	r3, #0
    1b30:	d100      	bne.n	1b34 <m2m_wifi_cb+0x1f0>
    1b32:	e73b      	b.n	19ac <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    1b34:	a91c      	add	r1, sp, #112	; 0x70
    1b36:	3065      	adds	r0, #101	; 0x65
    1b38:	4798      	blx	r3
    1b3a:	e737      	b.n	19ac <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    1b3c:	2301      	movs	r3, #1
    1b3e:	2264      	movs	r2, #100	; 0x64
    1b40:	a903      	add	r1, sp, #12
    1b42:	0028      	movs	r0, r5
    1b44:	4c23      	ldr	r4, [pc, #140]	; (1bd4 <m2m_wifi_cb+0x290>)
    1b46:	47a0      	blx	r4
    1b48:	2800      	cmp	r0, #0
    1b4a:	d000      	beq.n	1b4e <m2m_wifi_cb+0x20a>
    1b4c:	e72e      	b.n	19ac <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    1b4e:	4b22      	ldr	r3, [pc, #136]	; (1bd8 <m2m_wifi_cb+0x294>)
    1b50:	681b      	ldr	r3, [r3, #0]
    1b52:	2b00      	cmp	r3, #0
    1b54:	d100      	bne.n	1b58 <m2m_wifi_cb+0x214>
    1b56:	e729      	b.n	19ac <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    1b58:	a903      	add	r1, sp, #12
    1b5a:	3009      	adds	r0, #9
    1b5c:	4798      	blx	r3
    1b5e:	e725      	b.n	19ac <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    1b60:	2301      	movs	r3, #1
    1b62:	2204      	movs	r2, #4
    1b64:	a903      	add	r1, sp, #12
    1b66:	0028      	movs	r0, r5
    1b68:	4c1a      	ldr	r4, [pc, #104]	; (1bd4 <m2m_wifi_cb+0x290>)
    1b6a:	47a0      	blx	r4
    1b6c:	2800      	cmp	r0, #0
    1b6e:	d000      	beq.n	1b72 <m2m_wifi_cb+0x22e>
    1b70:	e71c      	b.n	19ac <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    1b72:	4b19      	ldr	r3, [pc, #100]	; (1bd8 <m2m_wifi_cb+0x294>)
    1b74:	681b      	ldr	r3, [r3, #0]
    1b76:	2b00      	cmp	r3, #0
    1b78:	d100      	bne.n	1b7c <m2m_wifi_cb+0x238>
    1b7a:	e717      	b.n	19ac <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    1b7c:	a903      	add	r1, sp, #12
    1b7e:	302a      	adds	r0, #42	; 0x2a
    1b80:	4798      	blx	r3
    1b82:	e713      	b.n	19ac <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    1b84:	2300      	movs	r3, #0
    1b86:	2208      	movs	r2, #8
    1b88:	a903      	add	r1, sp, #12
    1b8a:	0028      	movs	r0, r5
    1b8c:	4c11      	ldr	r4, [pc, #68]	; (1bd4 <m2m_wifi_cb+0x290>)
    1b8e:	47a0      	blx	r4
    1b90:	2800      	cmp	r0, #0
    1b92:	d000      	beq.n	1b96 <m2m_wifi_cb+0x252>
    1b94:	e70a      	b.n	19ac <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    1b96:	ab03      	add	r3, sp, #12
    1b98:	889a      	ldrh	r2, [r3, #4]
    1b9a:	0028      	movs	r0, r5
    1b9c:	3008      	adds	r0, #8
    1b9e:	2301      	movs	r3, #1
    1ba0:	9903      	ldr	r1, [sp, #12]
    1ba2:	4c0c      	ldr	r4, [pc, #48]	; (1bd4 <m2m_wifi_cb+0x290>)
    1ba4:	47a0      	blx	r4
    1ba6:	2800      	cmp	r0, #0
    1ba8:	d000      	beq.n	1bac <m2m_wifi_cb+0x268>
    1baa:	e6ff      	b.n	19ac <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    1bac:	4b0a      	ldr	r3, [pc, #40]	; (1bd8 <m2m_wifi_cb+0x294>)
    1bae:	681b      	ldr	r3, [r3, #0]
    1bb0:	2b00      	cmp	r3, #0
    1bb2:	d100      	bne.n	1bb6 <m2m_wifi_cb+0x272>
    1bb4:	e6fa      	b.n	19ac <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    1bb6:	a903      	add	r1, sp, #12
    1bb8:	3020      	adds	r0, #32
    1bba:	4798      	blx	r3
    1bbc:	e6f6      	b.n	19ac <m2m_wifi_cb+0x68>
    1bbe:	46c0      	nop			; (mov r8, r8)
    1bc0:	0000ac54 	.word	0x0000ac54
    1bc4:	0000a8ec 	.word	0x0000a8ec
    1bc8:	00009539 	.word	0x00009539
    1bcc:	0000aca4 	.word	0x0000aca4
    1bd0:	0000956d 	.word	0x0000956d
    1bd4:	0000179d 	.word	0x0000179d
    1bd8:	20000090 	.word	0x20000090
    1bdc:	0000107d 	.word	0x0000107d
    1be0:	0000ac1c 	.word	0x0000ac1c
    1be4:	0000ac84 	.word	0x0000ac84
    1be8:	20000095 	.word	0x20000095
    1bec:	20000094 	.word	0x20000094

00001bf0 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    1bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bf2:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    1bf4:	2201      	movs	r2, #1
    1bf6:	230f      	movs	r3, #15
    1bf8:	446b      	add	r3, sp
    1bfa:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    1bfc:	2800      	cmp	r0, #0
    1bfe:	d061      	beq.n	1cc4 <m2m_wifi_init+0xd4>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    1c00:	6802      	ldr	r2, [r0, #0]
    1c02:	4b32      	ldr	r3, [pc, #200]	; (1ccc <m2m_wifi_init+0xdc>)
    1c04:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    1c06:	2200      	movs	r2, #0
    1c08:	4b31      	ldr	r3, [pc, #196]	; (1cd0 <m2m_wifi_init+0xe0>)
    1c0a:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    1c0c:	200f      	movs	r0, #15
    1c0e:	4468      	add	r0, sp
    1c10:	4b30      	ldr	r3, [pc, #192]	; (1cd4 <m2m_wifi_init+0xe4>)
    1c12:	4798      	blx	r3
    1c14:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    1c16:	d002      	beq.n	1c1e <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    1c18:	0020      	movs	r0, r4
    1c1a:	b00f      	add	sp, #60	; 0x3c
    1c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    1c1e:	2000      	movs	r0, #0
    1c20:	4b2d      	ldr	r3, [pc, #180]	; (1cd8 <m2m_wifi_init+0xe8>)
    1c22:	4798      	blx	r3
    1c24:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    1c26:	d149      	bne.n	1cbc <m2m_wifi_init+0xcc>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    1c28:	492c      	ldr	r1, [pc, #176]	; (1cdc <m2m_wifi_init+0xec>)
    1c2a:	2001      	movs	r0, #1
    1c2c:	4b2c      	ldr	r3, [pc, #176]	; (1ce0 <m2m_wifi_init+0xf0>)
    1c2e:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    1c30:	ae04      	add	r6, sp, #16
    1c32:	0030      	movs	r0, r6
    1c34:	4b2b      	ldr	r3, [pc, #172]	; (1ce4 <m2m_wifi_init+0xf4>)
    1c36:	4798      	blx	r3
    1c38:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    1c3a:	482b      	ldr	r0, [pc, #172]	; (1ce8 <m2m_wifi_init+0xf8>)
    1c3c:	4d2b      	ldr	r5, [pc, #172]	; (1cec <m2m_wifi_init+0xfc>)
    1c3e:	47a8      	blx	r5
    1c40:	79b3      	ldrb	r3, [r6, #6]
    1c42:	7972      	ldrb	r2, [r6, #5]
    1c44:	7931      	ldrb	r1, [r6, #4]
    1c46:	8c30      	ldrh	r0, [r6, #32]
    1c48:	9000      	str	r0, [sp, #0]
    1c4a:	4829      	ldr	r0, [pc, #164]	; (1cf0 <m2m_wifi_init+0x100>)
    1c4c:	47a8      	blx	r5
    1c4e:	200d      	movs	r0, #13
    1c50:	4f28      	ldr	r7, [pc, #160]	; (1cf4 <m2m_wifi_init+0x104>)
    1c52:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    1c54:	4824      	ldr	r0, [pc, #144]	; (1ce8 <m2m_wifi_init+0xf8>)
    1c56:	47a8      	blx	r5
    1c58:	2226      	movs	r2, #38	; 0x26
    1c5a:	446a      	add	r2, sp
    1c5c:	211a      	movs	r1, #26
    1c5e:	4469      	add	r1, sp
    1c60:	4825      	ldr	r0, [pc, #148]	; (1cf8 <m2m_wifi_init+0x108>)
    1c62:	47a8      	blx	r5
    1c64:	200d      	movs	r0, #13
    1c66:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    1c68:	481f      	ldr	r0, [pc, #124]	; (1ce8 <m2m_wifi_init+0xf8>)
    1c6a:	47a8      	blx	r5
    1c6c:	7a73      	ldrb	r3, [r6, #9]
    1c6e:	7a32      	ldrb	r2, [r6, #8]
    1c70:	79f1      	ldrb	r1, [r6, #7]
    1c72:	4822      	ldr	r0, [pc, #136]	; (1cfc <m2m_wifi_init+0x10c>)
    1c74:	47a8      	blx	r5
    1c76:	200d      	movs	r0, #13
    1c78:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    1c7a:	481b      	ldr	r0, [pc, #108]	; (1ce8 <m2m_wifi_init+0xf8>)
    1c7c:	47a8      	blx	r5
    1c7e:	2302      	movs	r3, #2
    1c80:	2205      	movs	r2, #5
    1c82:	2113      	movs	r1, #19
    1c84:	481e      	ldr	r0, [pc, #120]	; (1d00 <m2m_wifi_init+0x110>)
    1c86:	47a8      	blx	r5
    1c88:	200d      	movs	r0, #13
    1c8a:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    1c8c:	4816      	ldr	r0, [pc, #88]	; (1ce8 <m2m_wifi_init+0xf8>)
    1c8e:	47a8      	blx	r5
    1c90:	4a1c      	ldr	r2, [pc, #112]	; (1d04 <m2m_wifi_init+0x114>)
    1c92:	491d      	ldr	r1, [pc, #116]	; (1d08 <m2m_wifi_init+0x118>)
    1c94:	481d      	ldr	r0, [pc, #116]	; (1d0c <m2m_wifi_init+0x11c>)
    1c96:	47a8      	blx	r5
    1c98:	200d      	movs	r0, #13
    1c9a:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    1c9c:	0023      	movs	r3, r4
    1c9e:	330d      	adds	r3, #13
    1ca0:	d1ba      	bne.n	1c18 <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    1ca2:	22e8      	movs	r2, #232	; 0xe8
    1ca4:	32ff      	adds	r2, #255	; 0xff
    1ca6:	491a      	ldr	r1, [pc, #104]	; (1d10 <m2m_wifi_init+0x120>)
    1ca8:	481a      	ldr	r0, [pc, #104]	; (1d14 <m2m_wifi_init+0x124>)
    1caa:	4b10      	ldr	r3, [pc, #64]	; (1cec <m2m_wifi_init+0xfc>)
    1cac:	4798      	blx	r3
    1cae:	481a      	ldr	r0, [pc, #104]	; (1d18 <m2m_wifi_init+0x128>)
    1cb0:	4b1a      	ldr	r3, [pc, #104]	; (1d1c <m2m_wifi_init+0x12c>)
    1cb2:	4798      	blx	r3
    1cb4:	200d      	movs	r0, #13
    1cb6:	4b0f      	ldr	r3, [pc, #60]	; (1cf4 <m2m_wifi_init+0x104>)
    1cb8:	4798      	blx	r3
    1cba:	e7ad      	b.n	1c18 <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    1cbc:	2000      	movs	r0, #0
    1cbe:	4b18      	ldr	r3, [pc, #96]	; (1d20 <m2m_wifi_init+0x130>)
    1cc0:	4798      	blx	r3
    1cc2:	e7a9      	b.n	1c18 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    1cc4:	240c      	movs	r4, #12
    1cc6:	4264      	negs	r4, r4
    1cc8:	e7a6      	b.n	1c18 <m2m_wifi_init+0x28>
    1cca:	46c0      	nop			; (mov r8, r8)
    1ccc:	20000090 	.word	0x20000090
    1cd0:	20000095 	.word	0x20000095
    1cd4:	00002691 	.word	0x00002691
    1cd8:	0000190d 	.word	0x0000190d
    1cdc:	00001945 	.word	0x00001945
    1ce0:	00001889 	.word	0x00001889
    1ce4:	000025ad 	.word	0x000025ad
    1ce8:	0000ac1c 	.word	0x0000ac1c
    1cec:	00009539 	.word	0x00009539
    1cf0:	0000ad60 	.word	0x0000ad60
    1cf4:	0000956d 	.word	0x0000956d
    1cf8:	0000ad88 	.word	0x0000ad88
    1cfc:	0000ada4 	.word	0x0000ada4
    1d00:	0000adc8 	.word	0x0000adc8
    1d04:	0000ade0 	.word	0x0000ade0
    1d08:	0000adec 	.word	0x0000adec
    1d0c:	0000adf8 	.word	0x0000adf8
    1d10:	0000ac60 	.word	0x0000ac60
    1d14:	0000a8ec 	.word	0x0000a8ec
    1d18:	0000ae10 	.word	0x0000ae10
    1d1c:	00009655 	.word	0x00009655
    1d20:	00002765 	.word	0x00002765

00001d24 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    1d24:	b510      	push	{r4, lr}
	return hif_handle_isr();
    1d26:	4b01      	ldr	r3, [pc, #4]	; (1d2c <m2m_wifi_handle_events+0x8>)
    1d28:	4798      	blx	r3
}
    1d2a:	bd10      	pop	{r4, pc}
    1d2c:	000013c1 	.word	0x000013c1

00001d30 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    1d30:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d32:	46ce      	mov	lr, r9
    1d34:	4647      	mov	r7, r8
    1d36:	b580      	push	{r7, lr}
    1d38:	b0a3      	sub	sp, #140	; 0x8c
    1d3a:	9005      	str	r0, [sp, #20]
    1d3c:	000c      	movs	r4, r1
    1d3e:	0015      	movs	r5, r2
    1d40:	001f      	movs	r7, r3
    1d42:	ab2a      	add	r3, sp, #168	; 0xa8
    1d44:	881b      	ldrh	r3, [r3, #0]
    1d46:	4699      	mov	r9, r3
    1d48:	ab2b      	add	r3, sp, #172	; 0xac
    1d4a:	781b      	ldrb	r3, [r3, #0]
    1d4c:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    1d4e:	2a01      	cmp	r2, #1
    1d50:	d003      	beq.n	1d5a <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    1d52:	2f00      	cmp	r7, #0
    1d54:	d040      	beq.n	1dd8 <m2m_wifi_connect_sc+0xa8>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    1d56:	2a02      	cmp	r2, #2
    1d58:	d04c      	beq.n	1df4 <m2m_wifi_connect_sc+0xc4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    1d5a:	1e63      	subs	r3, r4, #1
    1d5c:	2b1f      	cmp	r3, #31
    1d5e:	d900      	bls.n	1d62 <m2m_wifi_connect_sc+0x32>
    1d60:	e078      	b.n	1e54 <m2m_wifi_connect_sc+0x124>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    1d62:	464b      	mov	r3, r9
    1d64:	3b01      	subs	r3, #1
    1d66:	b29b      	uxth	r3, r3
    1d68:	2b0d      	cmp	r3, #13
    1d6a:	d903      	bls.n	1d74 <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    1d6c:	464b      	mov	r3, r9
    1d6e:	2bff      	cmp	r3, #255	; 0xff
    1d70:	d000      	beq.n	1d74 <m2m_wifi_connect_sc+0x44>
    1d72:	e07d      	b.n	1e70 <m2m_wifi_connect_sc+0x140>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    1d74:	ae07      	add	r6, sp, #28
    1d76:	0022      	movs	r2, r4
    1d78:	9905      	ldr	r1, [sp, #20]
    1d7a:	205a      	movs	r0, #90	; 0x5a
    1d7c:	ab02      	add	r3, sp, #8
    1d7e:	469c      	mov	ip, r3
    1d80:	4460      	add	r0, ip
    1d82:	4b78      	ldr	r3, [pc, #480]	; (1f64 <m2m_wifi_connect_sc+0x234>)
    1d84:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    1d86:	1934      	adds	r4, r6, r4
    1d88:	3446      	adds	r4, #70	; 0x46
    1d8a:	2300      	movs	r3, #0
    1d8c:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    1d8e:	3344      	adds	r3, #68	; 0x44
    1d90:	464a      	mov	r2, r9
    1d92:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    1d94:	4643      	mov	r3, r8
    1d96:	1e5a      	subs	r2, r3, #1
    1d98:	4193      	sbcs	r3, r2
    1d9a:	2267      	movs	r2, #103	; 0x67
    1d9c:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    1d9e:	2341      	movs	r3, #65	; 0x41
    1da0:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    1da2:	2d03      	cmp	r5, #3
    1da4:	d100      	bne.n	1da8 <m2m_wifi_connect_sc+0x78>
    1da6:	e072      	b.n	1e8e <m2m_wifi_connect_sc+0x15e>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    1da8:	2d02      	cmp	r5, #2
    1daa:	d100      	bne.n	1dae <m2m_wifi_connect_sc+0x7e>
    1dac:	e0ab      	b.n	1f06 <m2m_wifi_connect_sc+0x1d6>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    1dae:	2d04      	cmp	r5, #4
    1db0:	d100      	bne.n	1db4 <m2m_wifi_connect_sc+0x84>
    1db2:	e0c3      	b.n	1f3c <m2m_wifi_connect_sc+0x20c>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    1db4:	2d01      	cmp	r5, #1
    1db6:	d000      	beq.n	1dba <m2m_wifi_connect_sc+0x8a>
    1db8:	e0c6      	b.n	1f48 <m2m_wifi_connect_sc+0x218>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    1dba:	2300      	movs	r3, #0
    1dbc:	9302      	str	r3, [sp, #8]
    1dbe:	9301      	str	r3, [sp, #4]
    1dc0:	9300      	str	r3, [sp, #0]
    1dc2:	336c      	adds	r3, #108	; 0x6c
    1dc4:	aa07      	add	r2, sp, #28
    1dc6:	2128      	movs	r1, #40	; 0x28
    1dc8:	2001      	movs	r0, #1
    1dca:	4c67      	ldr	r4, [pc, #412]	; (1f68 <m2m_wifi_connect_sc+0x238>)
    1dcc:	47a0      	blx	r4

ERR1:
	return ret;
}
    1dce:	b023      	add	sp, #140	; 0x8c
    1dd0:	bc0c      	pop	{r2, r3}
    1dd2:	4690      	mov	r8, r2
    1dd4:	4699      	mov	r9, r3
    1dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    1dd8:	4a64      	ldr	r2, [pc, #400]	; (1f6c <m2m_wifi_connect_sc+0x23c>)
    1dda:	4965      	ldr	r1, [pc, #404]	; (1f70 <m2m_wifi_connect_sc+0x240>)
    1ddc:	4865      	ldr	r0, [pc, #404]	; (1f74 <m2m_wifi_connect_sc+0x244>)
    1dde:	4b66      	ldr	r3, [pc, #408]	; (1f78 <m2m_wifi_connect_sc+0x248>)
    1de0:	4798      	blx	r3
    1de2:	4866      	ldr	r0, [pc, #408]	; (1f7c <m2m_wifi_connect_sc+0x24c>)
    1de4:	4b66      	ldr	r3, [pc, #408]	; (1f80 <m2m_wifi_connect_sc+0x250>)
    1de6:	4798      	blx	r3
    1de8:	200d      	movs	r0, #13
    1dea:	4b66      	ldr	r3, [pc, #408]	; (1f84 <m2m_wifi_connect_sc+0x254>)
    1dec:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1dee:	200c      	movs	r0, #12
    1df0:	4240      	negs	r0, r0
			goto ERR1;
    1df2:	e7ec      	b.n	1dce <m2m_wifi_connect_sc+0x9e>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    1df4:	0038      	movs	r0, r7
    1df6:	4b64      	ldr	r3, [pc, #400]	; (1f88 <m2m_wifi_connect_sc+0x258>)
    1df8:	4798      	blx	r3
    1dfa:	2840      	cmp	r0, #64	; 0x40
    1dfc:	d1ad      	bne.n	1d5a <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    1dfe:	783b      	ldrb	r3, [r7, #0]
    1e00:	001a      	movs	r2, r3
    1e02:	3a30      	subs	r2, #48	; 0x30
    1e04:	2a36      	cmp	r2, #54	; 0x36
    1e06:	d817      	bhi.n	1e38 <m2m_wifi_connect_sc+0x108>
    1e08:	3a0a      	subs	r2, #10
    1e0a:	2a06      	cmp	r2, #6
    1e0c:	d914      	bls.n	1e38 <m2m_wifi_connect_sc+0x108>
    1e0e:	3b47      	subs	r3, #71	; 0x47
    1e10:	2b19      	cmp	r3, #25
    1e12:	d911      	bls.n	1e38 <m2m_wifi_connect_sc+0x108>
    1e14:	1c7a      	adds	r2, r7, #1
    1e16:	0038      	movs	r0, r7
    1e18:	3040      	adds	r0, #64	; 0x40
    1e1a:	7813      	ldrb	r3, [r2, #0]
    1e1c:	0019      	movs	r1, r3
    1e1e:	3930      	subs	r1, #48	; 0x30
    1e20:	2936      	cmp	r1, #54	; 0x36
    1e22:	d809      	bhi.n	1e38 <m2m_wifi_connect_sc+0x108>
    1e24:	390a      	subs	r1, #10
    1e26:	2906      	cmp	r1, #6
    1e28:	d906      	bls.n	1e38 <m2m_wifi_connect_sc+0x108>
    1e2a:	3b47      	subs	r3, #71	; 0x47
    1e2c:	2b19      	cmp	r3, #25
    1e2e:	d903      	bls.n	1e38 <m2m_wifi_connect_sc+0x108>
    1e30:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    1e32:	4282      	cmp	r2, r0
    1e34:	d1f1      	bne.n	1e1a <m2m_wifi_connect_sc+0xea>
    1e36:	e790      	b.n	1d5a <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    1e38:	4a54      	ldr	r2, [pc, #336]	; (1f8c <m2m_wifi_connect_sc+0x25c>)
    1e3a:	494d      	ldr	r1, [pc, #308]	; (1f70 <m2m_wifi_connect_sc+0x240>)
    1e3c:	484d      	ldr	r0, [pc, #308]	; (1f74 <m2m_wifi_connect_sc+0x244>)
    1e3e:	4b4e      	ldr	r3, [pc, #312]	; (1f78 <m2m_wifi_connect_sc+0x248>)
    1e40:	4798      	blx	r3
    1e42:	4853      	ldr	r0, [pc, #332]	; (1f90 <m2m_wifi_connect_sc+0x260>)
    1e44:	4b4e      	ldr	r3, [pc, #312]	; (1f80 <m2m_wifi_connect_sc+0x250>)
    1e46:	4798      	blx	r3
    1e48:	200d      	movs	r0, #13
    1e4a:	4b4e      	ldr	r3, [pc, #312]	; (1f84 <m2m_wifi_connect_sc+0x254>)
    1e4c:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    1e4e:	200c      	movs	r0, #12
    1e50:	4240      	negs	r0, r0
					goto ERR1;
    1e52:	e7bc      	b.n	1dce <m2m_wifi_connect_sc+0x9e>
		M2M_ERR("SSID LEN INVALID\n");
    1e54:	4a4f      	ldr	r2, [pc, #316]	; (1f94 <m2m_wifi_connect_sc+0x264>)
    1e56:	4946      	ldr	r1, [pc, #280]	; (1f70 <m2m_wifi_connect_sc+0x240>)
    1e58:	4846      	ldr	r0, [pc, #280]	; (1f74 <m2m_wifi_connect_sc+0x244>)
    1e5a:	4b47      	ldr	r3, [pc, #284]	; (1f78 <m2m_wifi_connect_sc+0x248>)
    1e5c:	4798      	blx	r3
    1e5e:	484e      	ldr	r0, [pc, #312]	; (1f98 <m2m_wifi_connect_sc+0x268>)
    1e60:	4b47      	ldr	r3, [pc, #284]	; (1f80 <m2m_wifi_connect_sc+0x250>)
    1e62:	4798      	blx	r3
    1e64:	200d      	movs	r0, #13
    1e66:	4b47      	ldr	r3, [pc, #284]	; (1f84 <m2m_wifi_connect_sc+0x254>)
    1e68:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1e6a:	200c      	movs	r0, #12
    1e6c:	4240      	negs	r0, r0
		goto ERR1;
    1e6e:	e7ae      	b.n	1dce <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("CH INVALID\n");
    1e70:	228d      	movs	r2, #141	; 0x8d
    1e72:	0092      	lsls	r2, r2, #2
    1e74:	493e      	ldr	r1, [pc, #248]	; (1f70 <m2m_wifi_connect_sc+0x240>)
    1e76:	483f      	ldr	r0, [pc, #252]	; (1f74 <m2m_wifi_connect_sc+0x244>)
    1e78:	4b3f      	ldr	r3, [pc, #252]	; (1f78 <m2m_wifi_connect_sc+0x248>)
    1e7a:	4798      	blx	r3
    1e7c:	4847      	ldr	r0, [pc, #284]	; (1f9c <m2m_wifi_connect_sc+0x26c>)
    1e7e:	4b40      	ldr	r3, [pc, #256]	; (1f80 <m2m_wifi_connect_sc+0x250>)
    1e80:	4798      	blx	r3
    1e82:	200d      	movs	r0, #13
    1e84:	4b3f      	ldr	r3, [pc, #252]	; (1f84 <m2m_wifi_connect_sc+0x254>)
    1e86:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1e88:	200c      	movs	r0, #12
    1e8a:	4240      	negs	r0, r0
			goto ERR1;
    1e8c:	e79f      	b.n	1dce <m2m_wifi_connect_sc+0x9e>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    1e8e:	783b      	ldrb	r3, [r7, #0]
    1e90:	3b01      	subs	r3, #1
    1e92:	b2db      	uxtb	r3, r3
    1e94:	aa07      	add	r2, sp, #28
    1e96:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    1e98:	2b03      	cmp	r3, #3
    1e9a:	d817      	bhi.n	1ecc <m2m_wifi_connect_sc+0x19c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    1e9c:	787a      	ldrb	r2, [r7, #1]
    1e9e:	1e51      	subs	r1, r2, #1
    1ea0:	ab07      	add	r3, sp, #28
    1ea2:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    1ea4:	2310      	movs	r3, #16
    1ea6:	0011      	movs	r1, r2
    1ea8:	4399      	bics	r1, r3
    1eaa:	290b      	cmp	r1, #11
    1eac:	d01d      	beq.n	1eea <m2m_wifi_connect_sc+0x1ba>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    1eae:	4a3c      	ldr	r2, [pc, #240]	; (1fa0 <m2m_wifi_connect_sc+0x270>)
    1eb0:	492f      	ldr	r1, [pc, #188]	; (1f70 <m2m_wifi_connect_sc+0x240>)
    1eb2:	4830      	ldr	r0, [pc, #192]	; (1f74 <m2m_wifi_connect_sc+0x244>)
    1eb4:	4c30      	ldr	r4, [pc, #192]	; (1f78 <m2m_wifi_connect_sc+0x248>)
    1eb6:	47a0      	blx	r4
    1eb8:	ab07      	add	r3, sp, #28
    1eba:	7859      	ldrb	r1, [r3, #1]
    1ebc:	4839      	ldr	r0, [pc, #228]	; (1fa4 <m2m_wifi_connect_sc+0x274>)
    1ebe:	47a0      	blx	r4
    1ec0:	200d      	movs	r0, #13
    1ec2:	4b30      	ldr	r3, [pc, #192]	; (1f84 <m2m_wifi_connect_sc+0x254>)
    1ec4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1ec6:	200c      	movs	r0, #12
    1ec8:	4240      	negs	r0, r0
			goto ERR1;
    1eca:	e780      	b.n	1dce <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    1ecc:	4a36      	ldr	r2, [pc, #216]	; (1fa8 <m2m_wifi_connect_sc+0x278>)
    1ece:	4928      	ldr	r1, [pc, #160]	; (1f70 <m2m_wifi_connect_sc+0x240>)
    1ed0:	4828      	ldr	r0, [pc, #160]	; (1f74 <m2m_wifi_connect_sc+0x244>)
    1ed2:	4c29      	ldr	r4, [pc, #164]	; (1f78 <m2m_wifi_connect_sc+0x248>)
    1ed4:	47a0      	blx	r4
    1ed6:	ab07      	add	r3, sp, #28
    1ed8:	7819      	ldrb	r1, [r3, #0]
    1eda:	4834      	ldr	r0, [pc, #208]	; (1fac <m2m_wifi_connect_sc+0x27c>)
    1edc:	47a0      	blx	r4
    1ede:	200d      	movs	r0, #13
    1ee0:	4b28      	ldr	r3, [pc, #160]	; (1f84 <m2m_wifi_connect_sc+0x254>)
    1ee2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1ee4:	200c      	movs	r0, #12
    1ee6:	4240      	negs	r0, r0
			goto ERR1;
    1ee8:	e771      	b.n	1dce <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    1eea:	1cb9      	adds	r1, r7, #2
    1eec:	2016      	movs	r0, #22
    1eee:	ab02      	add	r3, sp, #8
    1ef0:	469c      	mov	ip, r3
    1ef2:	4460      	add	r0, ip
    1ef4:	4b1b      	ldr	r3, [pc, #108]	; (1f64 <m2m_wifi_connect_sc+0x234>)
    1ef6:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    1ef8:	787b      	ldrb	r3, [r7, #1]
    1efa:	aa07      	add	r2, sp, #28
    1efc:	4694      	mov	ip, r2
    1efe:	4463      	add	r3, ip
    1f00:	2200      	movs	r2, #0
    1f02:	709a      	strb	r2, [r3, #2]
    1f04:	e759      	b.n	1dba <m2m_wifi_connect_sc+0x8a>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    1f06:	0038      	movs	r0, r7
    1f08:	4b1f      	ldr	r3, [pc, #124]	; (1f88 <m2m_wifi_connect_sc+0x258>)
    1f0a:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    1f0c:	1e43      	subs	r3, r0, #1
    1f0e:	b29b      	uxth	r3, r3
    1f10:	2b3f      	cmp	r3, #63	; 0x3f
    1f12:	d805      	bhi.n	1f20 <m2m_wifi_connect_sc+0x1f0>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    1f14:	1c42      	adds	r2, r0, #1
    1f16:	0039      	movs	r1, r7
    1f18:	a807      	add	r0, sp, #28
    1f1a:	4b12      	ldr	r3, [pc, #72]	; (1f64 <m2m_wifi_connect_sc+0x234>)
    1f1c:	4798      	blx	r3
    1f1e:	e74c      	b.n	1dba <m2m_wifi_connect_sc+0x8a>
			M2M_ERR("Incorrect PSK key length\n");
    1f20:	4a23      	ldr	r2, [pc, #140]	; (1fb0 <m2m_wifi_connect_sc+0x280>)
    1f22:	4913      	ldr	r1, [pc, #76]	; (1f70 <m2m_wifi_connect_sc+0x240>)
    1f24:	4813      	ldr	r0, [pc, #76]	; (1f74 <m2m_wifi_connect_sc+0x244>)
    1f26:	4b14      	ldr	r3, [pc, #80]	; (1f78 <m2m_wifi_connect_sc+0x248>)
    1f28:	4798      	blx	r3
    1f2a:	4822      	ldr	r0, [pc, #136]	; (1fb4 <m2m_wifi_connect_sc+0x284>)
    1f2c:	4b14      	ldr	r3, [pc, #80]	; (1f80 <m2m_wifi_connect_sc+0x250>)
    1f2e:	4798      	blx	r3
    1f30:	200d      	movs	r0, #13
    1f32:	4b14      	ldr	r3, [pc, #80]	; (1f84 <m2m_wifi_connect_sc+0x254>)
    1f34:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1f36:	200c      	movs	r0, #12
    1f38:	4240      	negs	r0, r0
			goto ERR1;
    1f3a:	e748      	b.n	1dce <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    1f3c:	223e      	movs	r2, #62	; 0x3e
    1f3e:	0039      	movs	r1, r7
    1f40:	a807      	add	r0, sp, #28
    1f42:	4b08      	ldr	r3, [pc, #32]	; (1f64 <m2m_wifi_connect_sc+0x234>)
    1f44:	4798      	blx	r3
    1f46:	e738      	b.n	1dba <m2m_wifi_connect_sc+0x8a>
		M2M_ERR("undefined sec type\n");
    1f48:	4a1b      	ldr	r2, [pc, #108]	; (1fb8 <m2m_wifi_connect_sc+0x288>)
    1f4a:	4909      	ldr	r1, [pc, #36]	; (1f70 <m2m_wifi_connect_sc+0x240>)
    1f4c:	4809      	ldr	r0, [pc, #36]	; (1f74 <m2m_wifi_connect_sc+0x244>)
    1f4e:	4b0a      	ldr	r3, [pc, #40]	; (1f78 <m2m_wifi_connect_sc+0x248>)
    1f50:	4798      	blx	r3
    1f52:	481a      	ldr	r0, [pc, #104]	; (1fbc <m2m_wifi_connect_sc+0x28c>)
    1f54:	4b0a      	ldr	r3, [pc, #40]	; (1f80 <m2m_wifi_connect_sc+0x250>)
    1f56:	4798      	blx	r3
    1f58:	200d      	movs	r0, #13
    1f5a:	4b0a      	ldr	r3, [pc, #40]	; (1f84 <m2m_wifi_connect_sc+0x254>)
    1f5c:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1f5e:	200c      	movs	r0, #12
    1f60:	4240      	negs	r0, r0
		goto ERR1;
    1f62:	e734      	b.n	1dce <m2m_wifi_connect_sc+0x9e>
    1f64:	00001069 	.word	0x00001069
    1f68:	00001191 	.word	0x00001191
    1f6c:	00000215 	.word	0x00000215
    1f70:	0000ac70 	.word	0x0000ac70
    1f74:	0000a8ec 	.word	0x0000a8ec
    1f78:	00009539 	.word	0x00009539
    1f7c:	0000acb8 	.word	0x0000acb8
    1f80:	00009655 	.word	0x00009655
    1f84:	0000956d 	.word	0x0000956d
    1f88:	0000108d 	.word	0x0000108d
    1f8c:	00000221 	.word	0x00000221
    1f90:	0000accc 	.word	0x0000accc
    1f94:	0000022b 	.word	0x0000022b
    1f98:	0000acd8 	.word	0x0000acd8
    1f9c:	0000acec 	.word	0x0000acec
    1fa0:	00000252 	.word	0x00000252
    1fa4:	0000ad14 	.word	0x0000ad14
    1fa8:	0000024b 	.word	0x0000024b
    1fac:	0000acf8 	.word	0x0000acf8
    1fb0:	00000261 	.word	0x00000261
    1fb4:	0000ad30 	.word	0x0000ad30
    1fb8:	00000271 	.word	0x00000271
    1fbc:	0000ad4c 	.word	0x0000ad4c

00001fc0 <m2m_wifi_connect>:
{
    1fc0:	b530      	push	{r4, r5, lr}
    1fc2:	b083      	sub	sp, #12
    1fc4:	ac06      	add	r4, sp, #24
    1fc6:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    1fc8:	2500      	movs	r5, #0
    1fca:	9501      	str	r5, [sp, #4]
    1fcc:	9400      	str	r4, [sp, #0]
    1fce:	4c02      	ldr	r4, [pc, #8]	; (1fd8 <m2m_wifi_connect+0x18>)
    1fd0:	47a0      	blx	r4
}
    1fd2:	b003      	add	sp, #12
    1fd4:	bd30      	pop	{r4, r5, pc}
    1fd6:	46c0      	nop			; (mov r8, r8)
    1fd8:	00001d31 	.word	0x00001d31

00001fdc <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    1fdc:	2000      	movs	r0, #0
    1fde:	4770      	bx	lr

00001fe0 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    1fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fe2:	b083      	sub	sp, #12
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    1fe4:	2580      	movs	r5, #128	; 0x80
    1fe6:	006d      	lsls	r5, r5, #1
    1fe8:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    1fea:	24a5      	movs	r4, #165	; 0xa5
    1fec:	0164      	lsls	r4, r4, #5
    1fee:	4f08      	ldr	r7, [pc, #32]	; (2010 <STACK_SIZE+0x10>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    1ff0:	4e08      	ldr	r6, [pc, #32]	; (2014 <STACK_SIZE+0x14>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    1ff2:	0029      	movs	r1, r5
    1ff4:	0020      	movs	r0, r4
    1ff6:	47b8      	blx	r7
			uint32 reg = 0;
    1ff8:	2300      	movs	r3, #0
    1ffa:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    1ffc:	a901      	add	r1, sp, #4
    1ffe:	0020      	movs	r0, r4
    2000:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    2002:	2800      	cmp	r0, #0
    2004:	d1f5      	bne.n	1ff2 <chip_apply_conf+0x12>
				if(reg == val32)
    2006:	9b01      	ldr	r3, [sp, #4]
    2008:	429d      	cmp	r5, r3
    200a:	d1f2      	bne.n	1ff2 <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    200c:	b003      	add	sp, #12
    200e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2010:	000024d1 	.word	0x000024d1
    2014:	000024c5 	.word	0x000024c5

00002018 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    2018:	b500      	push	{lr}
    201a:	b083      	sub	sp, #12
	uint32 reg = 0;
    201c:	2300      	movs	r3, #0
    201e:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    2020:	a901      	add	r1, sp, #4
    2022:	4811      	ldr	r0, [pc, #68]	; (2068 <enable_interrupts+0x50>)
    2024:	4b11      	ldr	r3, [pc, #68]	; (206c <enable_interrupts+0x54>)
    2026:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    2028:	2800      	cmp	r0, #0
    202a:	d001      	beq.n	2030 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    202c:	b003      	add	sp, #12
    202e:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    2030:	2180      	movs	r1, #128	; 0x80
    2032:	0049      	lsls	r1, r1, #1
    2034:	9b01      	ldr	r3, [sp, #4]
    2036:	4319      	orrs	r1, r3
    2038:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    203a:	480b      	ldr	r0, [pc, #44]	; (2068 <enable_interrupts+0x50>)
    203c:	4b0c      	ldr	r3, [pc, #48]	; (2070 <enable_interrupts+0x58>)
    203e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    2040:	2800      	cmp	r0, #0
    2042:	d1f3      	bne.n	202c <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    2044:	a901      	add	r1, sp, #4
    2046:	20d0      	movs	r0, #208	; 0xd0
    2048:	0140      	lsls	r0, r0, #5
    204a:	4b08      	ldr	r3, [pc, #32]	; (206c <enable_interrupts+0x54>)
    204c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    204e:	2800      	cmp	r0, #0
    2050:	d1ec      	bne.n	202c <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    2052:	2180      	movs	r1, #128	; 0x80
    2054:	0249      	lsls	r1, r1, #9
    2056:	9b01      	ldr	r3, [sp, #4]
    2058:	4319      	orrs	r1, r3
    205a:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    205c:	20d0      	movs	r0, #208	; 0xd0
    205e:	0140      	lsls	r0, r0, #5
    2060:	4b03      	ldr	r3, [pc, #12]	; (2070 <enable_interrupts+0x58>)
    2062:	4798      	blx	r3
    2064:	e7e2      	b.n	202c <enable_interrupts+0x14>
    2066:	46c0      	nop			; (mov r8, r8)
    2068:	00001408 	.word	0x00001408
    206c:	000024c5 	.word	0x000024c5
    2070:	000024d1 	.word	0x000024d1

00002074 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    2074:	b510      	push	{r4, lr}
    2076:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    2078:	4b28      	ldr	r3, [pc, #160]	; (211c <nmi_get_chipid+0xa8>)
    207a:	681c      	ldr	r4, [r3, #0]
    207c:	2c00      	cmp	r4, #0
    207e:	d004      	beq.n	208a <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    2080:	4b26      	ldr	r3, [pc, #152]	; (211c <nmi_get_chipid+0xa8>)
    2082:	681c      	ldr	r4, [r3, #0]
}
    2084:	0020      	movs	r0, r4
    2086:	b002      	add	sp, #8
    2088:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    208a:	0019      	movs	r1, r3
    208c:	2080      	movs	r0, #128	; 0x80
    208e:	0140      	lsls	r0, r0, #5
    2090:	4b23      	ldr	r3, [pc, #140]	; (2120 <nmi_get_chipid+0xac>)
    2092:	4798      	blx	r3
    2094:	2800      	cmp	r0, #0
    2096:	d003      	beq.n	20a0 <nmi_get_chipid+0x2c>
			chipid = 0;
    2098:	2200      	movs	r2, #0
    209a:	4b20      	ldr	r3, [pc, #128]	; (211c <nmi_get_chipid+0xa8>)
    209c:	601a      	str	r2, [r3, #0]
			return 0;
    209e:	e7f1      	b.n	2084 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    20a0:	a901      	add	r1, sp, #4
    20a2:	4820      	ldr	r0, [pc, #128]	; (2124 <nmi_get_chipid+0xb0>)
    20a4:	4b1e      	ldr	r3, [pc, #120]	; (2120 <nmi_get_chipid+0xac>)
    20a6:	4798      	blx	r3
    20a8:	2800      	cmp	r0, #0
    20aa:	d003      	beq.n	20b4 <nmi_get_chipid+0x40>
			chipid = 0;
    20ac:	2200      	movs	r2, #0
    20ae:	4b1b      	ldr	r3, [pc, #108]	; (211c <nmi_get_chipid+0xa8>)
    20b0:	601a      	str	r2, [r3, #0]
			return 0;
    20b2:	e7e7      	b.n	2084 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    20b4:	4b19      	ldr	r3, [pc, #100]	; (211c <nmi_get_chipid+0xa8>)
    20b6:	681b      	ldr	r3, [r3, #0]
    20b8:	4a1b      	ldr	r2, [pc, #108]	; (2128 <nmi_get_chipid+0xb4>)
    20ba:	4293      	cmp	r3, r2
    20bc:	d00e      	beq.n	20dc <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    20be:	4a1b      	ldr	r2, [pc, #108]	; (212c <nmi_get_chipid+0xb8>)
    20c0:	4293      	cmp	r3, r2
    20c2:	d012      	beq.n	20ea <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    20c4:	4a1a      	ldr	r2, [pc, #104]	; (2130 <nmi_get_chipid+0xbc>)
    20c6:	4293      	cmp	r3, r2
    20c8:	d01c      	beq.n	2104 <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    20ca:	4914      	ldr	r1, [pc, #80]	; (211c <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    20cc:	4a19      	ldr	r2, [pc, #100]	; (2134 <nmi_get_chipid+0xc0>)
    20ce:	680b      	ldr	r3, [r1, #0]
    20d0:	401a      	ands	r2, r3
		chipid |= 0x050000;
    20d2:	23a0      	movs	r3, #160	; 0xa0
    20d4:	02db      	lsls	r3, r3, #11
    20d6:	4313      	orrs	r3, r2
    20d8:	600b      	str	r3, [r1, #0]
    20da:	e7d1      	b.n	2080 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    20dc:	9b01      	ldr	r3, [sp, #4]
    20de:	2b01      	cmp	r3, #1
    20e0:	d0f3      	beq.n	20ca <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    20e2:	4a15      	ldr	r2, [pc, #84]	; (2138 <nmi_get_chipid+0xc4>)
    20e4:	4b0d      	ldr	r3, [pc, #52]	; (211c <nmi_get_chipid+0xa8>)
    20e6:	601a      	str	r2, [r3, #0]
    20e8:	e7ef      	b.n	20ca <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    20ea:	9b01      	ldr	r3, [sp, #4]
    20ec:	2b03      	cmp	r3, #3
    20ee:	d0ec      	beq.n	20ca <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    20f0:	2b04      	cmp	r3, #4
    20f2:	d003      	beq.n	20fc <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    20f4:	4a11      	ldr	r2, [pc, #68]	; (213c <nmi_get_chipid+0xc8>)
    20f6:	4b09      	ldr	r3, [pc, #36]	; (211c <nmi_get_chipid+0xa8>)
    20f8:	601a      	str	r2, [r3, #0]
    20fa:	e7e6      	b.n	20ca <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    20fc:	4a10      	ldr	r2, [pc, #64]	; (2140 <nmi_get_chipid+0xcc>)
    20fe:	4b07      	ldr	r3, [pc, #28]	; (211c <nmi_get_chipid+0xa8>)
    2100:	601a      	str	r2, [r3, #0]
    2102:	e7e2      	b.n	20ca <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    2104:	4905      	ldr	r1, [pc, #20]	; (211c <nmi_get_chipid+0xa8>)
    2106:	20ec      	movs	r0, #236	; 0xec
    2108:	0380      	lsls	r0, r0, #14
    210a:	4b05      	ldr	r3, [pc, #20]	; (2120 <nmi_get_chipid+0xac>)
    210c:	4798      	blx	r3
    210e:	2800      	cmp	r0, #0
    2110:	d0db      	beq.n	20ca <nmi_get_chipid+0x56>
			chipid = 0;
    2112:	2200      	movs	r2, #0
    2114:	4b01      	ldr	r3, [pc, #4]	; (211c <nmi_get_chipid+0xa8>)
    2116:	601a      	str	r2, [r3, #0]
			return 0;
    2118:	e7b4      	b.n	2084 <nmi_get_chipid+0x10>
    211a:	46c0      	nop			; (mov r8, r8)
    211c:	20000098 	.word	0x20000098
    2120:	000024c5 	.word	0x000024c5
    2124:	000013f4 	.word	0x000013f4
    2128:	001002a0 	.word	0x001002a0
    212c:	001002b0 	.word	0x001002b0
    2130:	001000f0 	.word	0x001000f0
    2134:	fff0ffff 	.word	0xfff0ffff
    2138:	001002a1 	.word	0x001002a1
    213c:	001002b2 	.word	0x001002b2
    2140:	001002b1 	.word	0x001002b1

00002144 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    2144:	b530      	push	{r4, r5, lr}
    2146:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    2148:	4c16      	ldr	r4, [pc, #88]	; (21a4 <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    214a:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    214c:	a901      	add	r1, sp, #4
    214e:	2010      	movs	r0, #16
    2150:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    2152:	2800      	cmp	r0, #0
    2154:	d11c      	bne.n	2190 <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    2156:	9b01      	ldr	r3, [sp, #4]
    2158:	422b      	tst	r3, r5
    215a:	d1f7      	bne.n	214c <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    215c:	a901      	add	r1, sp, #4
    215e:	3001      	adds	r0, #1
    2160:	4b10      	ldr	r3, [pc, #64]	; (21a4 <chip_sleep+0x60>)
    2162:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    2164:	2800      	cmp	r0, #0
    2166:	d113      	bne.n	2190 <chip_sleep+0x4c>
	if(reg & NBIT1)
    2168:	9901      	ldr	r1, [sp, #4]
    216a:	078b      	lsls	r3, r1, #30
    216c:	d507      	bpl.n	217e <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    216e:	2302      	movs	r3, #2
    2170:	4399      	bics	r1, r3
    2172:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    2174:	3001      	adds	r0, #1
    2176:	4b0c      	ldr	r3, [pc, #48]	; (21a8 <chip_sleep+0x64>)
    2178:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    217a:	2800      	cmp	r0, #0
    217c:	d108      	bne.n	2190 <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    217e:	a901      	add	r1, sp, #4
    2180:	200b      	movs	r0, #11
    2182:	4b08      	ldr	r3, [pc, #32]	; (21a4 <chip_sleep+0x60>)
    2184:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    2186:	2800      	cmp	r0, #0
    2188:	d102      	bne.n	2190 <chip_sleep+0x4c>
	if(reg & NBIT0)
    218a:	9901      	ldr	r1, [sp, #4]
    218c:	07cb      	lsls	r3, r1, #31
    218e:	d401      	bmi.n	2194 <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    2190:	b003      	add	sp, #12
    2192:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    2194:	2301      	movs	r3, #1
    2196:	4399      	bics	r1, r3
    2198:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    219a:	300b      	adds	r0, #11
    219c:	4b02      	ldr	r3, [pc, #8]	; (21a8 <chip_sleep+0x64>)
    219e:	4798      	blx	r3
    21a0:	e7f6      	b.n	2190 <chip_sleep+0x4c>
    21a2:	46c0      	nop			; (mov r8, r8)
    21a4:	000024c5 	.word	0x000024c5
    21a8:	000024d1 	.word	0x000024d1

000021ac <chip_wake>:
sint8 chip_wake(void)
{
    21ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    21ae:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    21b0:	2300      	movs	r3, #0
    21b2:	9301      	str	r3, [sp, #4]
    21b4:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    21b6:	a901      	add	r1, sp, #4
    21b8:	200b      	movs	r0, #11
    21ba:	4b28      	ldr	r3, [pc, #160]	; (225c <chip_wake+0xb0>)
    21bc:	4798      	blx	r3
    21be:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    21c0:	d130      	bne.n	2224 <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    21c2:	9901      	ldr	r1, [sp, #4]
    21c4:	07cb      	lsls	r3, r1, #31
    21c6:	d406      	bmi.n	21d6 <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    21c8:	2301      	movs	r3, #1
    21ca:	4319      	orrs	r1, r3
    21cc:	200b      	movs	r0, #11
    21ce:	4b24      	ldr	r3, [pc, #144]	; (2260 <chip_wake+0xb4>)
    21d0:	4798      	blx	r3
    21d2:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    21d4:	d126      	bne.n	2224 <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    21d6:	a901      	add	r1, sp, #4
    21d8:	2001      	movs	r0, #1
    21da:	4b20      	ldr	r3, [pc, #128]	; (225c <chip_wake+0xb0>)
    21dc:	4798      	blx	r3
    21de:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    21e0:	d120      	bne.n	2224 <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    21e2:	9901      	ldr	r1, [sp, #4]
    21e4:	078b      	lsls	r3, r1, #30
    21e6:	d520      	bpl.n	222a <chip_wake+0x7e>
{
    21e8:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    21ea:	4f1c      	ldr	r7, [pc, #112]	; (225c <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    21ec:	4e1d      	ldr	r6, [pc, #116]	; (2264 <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    21ee:	4669      	mov	r1, sp
    21f0:	200f      	movs	r0, #15
    21f2:	47b8      	blx	r7
    21f4:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    21f6:	d120      	bne.n	223a <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    21f8:	9b00      	ldr	r3, [sp, #0]
    21fa:	075b      	lsls	r3, r3, #29
    21fc:	d42b      	bmi.n	2256 <chip_wake+0xaa>
		nm_bsp_sleep(2);
    21fe:	2002      	movs	r0, #2
    2200:	47b0      	blx	r6
    2202:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    2204:	2d00      	cmp	r5, #0
    2206:	d1f2      	bne.n	21ee <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    2208:	22af      	movs	r2, #175	; 0xaf
    220a:	0052      	lsls	r2, r2, #1
    220c:	4916      	ldr	r1, [pc, #88]	; (2268 <chip_wake+0xbc>)
    220e:	4817      	ldr	r0, [pc, #92]	; (226c <chip_wake+0xc0>)
    2210:	4b17      	ldr	r3, [pc, #92]	; (2270 <chip_wake+0xc4>)
    2212:	4798      	blx	r3
    2214:	4817      	ldr	r0, [pc, #92]	; (2274 <chip_wake+0xc8>)
    2216:	4b18      	ldr	r3, [pc, #96]	; (2278 <chip_wake+0xcc>)
    2218:	4798      	blx	r3
    221a:	200d      	movs	r0, #13
    221c:	4b17      	ldr	r3, [pc, #92]	; (227c <chip_wake+0xd0>)
    221e:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    2220:	2404      	movs	r4, #4
    2222:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    2224:	0020      	movs	r0, r4
    2226:	b003      	add	sp, #12
    2228:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    222a:	2302      	movs	r3, #2
    222c:	4319      	orrs	r1, r3
    222e:	2001      	movs	r0, #1
    2230:	4b0b      	ldr	r3, [pc, #44]	; (2260 <chip_wake+0xb4>)
    2232:	4798      	blx	r3
    2234:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    2236:	d0d7      	beq.n	21e8 <chip_wake+0x3c>
    2238:	e7f4      	b.n	2224 <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    223a:	22aa      	movs	r2, #170	; 0xaa
    223c:	0052      	lsls	r2, r2, #1
    223e:	490a      	ldr	r1, [pc, #40]	; (2268 <chip_wake+0xbc>)
    2240:	480a      	ldr	r0, [pc, #40]	; (226c <chip_wake+0xc0>)
    2242:	4d0b      	ldr	r5, [pc, #44]	; (2270 <chip_wake+0xc4>)
    2244:	47a8      	blx	r5
    2246:	9a00      	ldr	r2, [sp, #0]
    2248:	0021      	movs	r1, r4
    224a:	480d      	ldr	r0, [pc, #52]	; (2280 <chip_wake+0xd4>)
    224c:	47a8      	blx	r5
    224e:	200d      	movs	r0, #13
    2250:	4b0a      	ldr	r3, [pc, #40]	; (227c <chip_wake+0xd0>)
    2252:	4798      	blx	r3
			goto _WAKE_EXIT;
    2254:	e7e6      	b.n	2224 <chip_wake+0x78>
	nm_bus_reset();
    2256:	4b0b      	ldr	r3, [pc, #44]	; (2284 <chip_wake+0xd8>)
    2258:	4798      	blx	r3
    225a:	e7e3      	b.n	2224 <chip_wake+0x78>
    225c:	000024c5 	.word	0x000024c5
    2260:	000024d1 	.word	0x000024d1
    2264:	00000c79 	.word	0x00000c79
    2268:	0000ae2c 	.word	0x0000ae2c
    226c:	0000a8ec 	.word	0x0000a8ec
    2270:	00009539 	.word	0x00009539
    2274:	0000ae74 	.word	0x0000ae74
    2278:	00009655 	.word	0x00009655
    227c:	0000956d 	.word	0x0000956d
    2280:	0000ae5c 	.word	0x0000ae5c
    2284:	000024ad 	.word	0x000024ad

00002288 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    2288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    228a:	0007      	movs	r7, r0
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    228c:	4d2d      	ldr	r5, [pc, #180]	; (2344 <wait_for_bootrom+0xbc>)
    228e:	4c2e      	ldr	r4, [pc, #184]	; (2348 <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    2290:	4e2e      	ldr	r6, [pc, #184]	; (234c <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    2292:	0028      	movs	r0, r5
    2294:	47a0      	blx	r4
		if (reg & 0x80000000) {
    2296:	2800      	cmp	r0, #0
    2298:	db02      	blt.n	22a0 <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    229a:	2001      	movs	r0, #1
    229c:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    229e:	e7f8      	b.n	2292 <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    22a0:	482b      	ldr	r0, [pc, #172]	; (2350 <wait_for_bootrom+0xc8>)
    22a2:	4b29      	ldr	r3, [pc, #164]	; (2348 <wait_for_bootrom+0xc0>)
    22a4:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    22a6:	07c3      	lsls	r3, r0, #31
    22a8:	d409      	bmi.n	22be <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    22aa:	4e28      	ldr	r6, [pc, #160]	; (234c <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
    22ac:	4c29      	ldr	r4, [pc, #164]	; (2354 <wait_for_bootrom+0xcc>)
    22ae:	4d26      	ldr	r5, [pc, #152]	; (2348 <wait_for_bootrom+0xc0>)
			nm_bsp_sleep(1);
    22b0:	2001      	movs	r0, #1
    22b2:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    22b4:	0020      	movs	r0, r4
    22b6:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    22b8:	4b27      	ldr	r3, [pc, #156]	; (2358 <wait_for_bootrom+0xd0>)
    22ba:	4298      	cmp	r0, r3
    22bc:	d1f8      	bne.n	22b0 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    22be:	2f02      	cmp	r7, #2
    22c0:	d021      	beq.n	2306 <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    22c2:	2f03      	cmp	r7, #3
    22c4:	d029      	beq.n	231a <wait_for_bootrom+0x92>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    22c6:	2f04      	cmp	r7, #4
    22c8:	d030      	beq.n	232c <wait_for_bootrom+0xa4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    22ca:	4924      	ldr	r1, [pc, #144]	; (235c <wait_for_bootrom+0xd4>)
    22cc:	4824      	ldr	r0, [pc, #144]	; (2360 <wait_for_bootrom+0xd8>)
    22ce:	4b25      	ldr	r3, [pc, #148]	; (2364 <wait_for_bootrom+0xdc>)
    22d0:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    22d2:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    22d4:	4b24      	ldr	r3, [pc, #144]	; (2368 <wait_for_bootrom+0xe0>)
    22d6:	4798      	blx	r3
    22d8:	0500      	lsls	r0, r0, #20
    22da:	0d00      	lsrs	r0, r0, #20
    22dc:	4b23      	ldr	r3, [pc, #140]	; (236c <wait_for_bootrom+0xe4>)
    22de:	4298      	cmp	r0, r3
    22e0:	d82a      	bhi.n	2338 <wait_for_bootrom+0xb0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    22e2:	0020      	movs	r0, r4
    22e4:	4b22      	ldr	r3, [pc, #136]	; (2370 <wait_for_bootrom+0xe8>)
    22e6:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    22e8:	4822      	ldr	r0, [pc, #136]	; (2374 <wait_for_bootrom+0xec>)
    22ea:	4c23      	ldr	r4, [pc, #140]	; (2378 <wait_for_bootrom+0xf0>)
    22ec:	47a0      	blx	r4
    22ee:	491b      	ldr	r1, [pc, #108]	; (235c <wait_for_bootrom+0xd4>)
    22f0:	4822      	ldr	r0, [pc, #136]	; (237c <wait_for_bootrom+0xf4>)
    22f2:	47a0      	blx	r4
    22f4:	200d      	movs	r0, #13
    22f6:	4b22      	ldr	r3, [pc, #136]	; (2380 <wait_for_bootrom+0xf8>)
    22f8:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    22fa:	4922      	ldr	r1, [pc, #136]	; (2384 <wait_for_bootrom+0xfc>)
    22fc:	4815      	ldr	r0, [pc, #84]	; (2354 <wait_for_bootrom+0xcc>)
    22fe:	4b19      	ldr	r3, [pc, #100]	; (2364 <wait_for_bootrom+0xdc>)
    2300:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    2302:	2000      	movs	r0, #0
    2304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    2306:	4920      	ldr	r1, [pc, #128]	; (2388 <wait_for_bootrom+0x100>)
    2308:	4820      	ldr	r0, [pc, #128]	; (238c <wait_for_bootrom+0x104>)
    230a:	4c16      	ldr	r4, [pc, #88]	; (2364 <wait_for_bootrom+0xdc>)
    230c:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    230e:	2180      	movs	r1, #128	; 0x80
    2310:	0349      	lsls	r1, r1, #13
    2312:	4813      	ldr	r0, [pc, #76]	; (2360 <wait_for_bootrom+0xd8>)
    2314:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    2316:	2400      	movs	r4, #0
    2318:	e7dc      	b.n	22d4 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    231a:	491b      	ldr	r1, [pc, #108]	; (2388 <wait_for_bootrom+0x100>)
    231c:	481b      	ldr	r0, [pc, #108]	; (238c <wait_for_bootrom+0x104>)
    231e:	4c11      	ldr	r4, [pc, #68]	; (2364 <wait_for_bootrom+0xdc>)
    2320:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    2322:	2100      	movs	r1, #0
    2324:	480e      	ldr	r0, [pc, #56]	; (2360 <wait_for_bootrom+0xd8>)
    2326:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    2328:	2400      	movs	r4, #0
    232a:	e7d3      	b.n	22d4 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    232c:	490b      	ldr	r1, [pc, #44]	; (235c <wait_for_bootrom+0xd4>)
    232e:	480c      	ldr	r0, [pc, #48]	; (2360 <wait_for_bootrom+0xd8>)
    2330:	4b0c      	ldr	r3, [pc, #48]	; (2364 <wait_for_bootrom+0xdc>)
    2332:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    2334:	2480      	movs	r4, #128	; 0x80
    2336:	e7cd      	b.n	22d4 <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    2338:	2002      	movs	r0, #2
    233a:	4320      	orrs	r0, r4
    233c:	4b0c      	ldr	r3, [pc, #48]	; (2370 <wait_for_bootrom+0xe8>)
    233e:	4798      	blx	r3
    2340:	e7d2      	b.n	22e8 <wait_for_bootrom+0x60>
    2342:	46c0      	nop			; (mov r8, r8)
    2344:	00001014 	.word	0x00001014
    2348:	000024b9 	.word	0x000024b9
    234c:	00000c79 	.word	0x00000c79
    2350:	000207bc 	.word	0x000207bc
    2354:	000c000c 	.word	0x000c000c
    2358:	10add09e 	.word	0x10add09e
    235c:	13521352 	.word	0x13521352
    2360:	0000108c 	.word	0x0000108c
    2364:	000024d1 	.word	0x000024d1
    2368:	00002075 	.word	0x00002075
    236c:	0000039f 	.word	0x0000039f
    2370:	00001fe1 	.word	0x00001fe1
    2374:	0000ac1c 	.word	0x0000ac1c
    2378:	00009539 	.word	0x00009539
    237c:	0000ae90 	.word	0x0000ae90
    2380:	0000956d 	.word	0x0000956d
    2384:	ef522f61 	.word	0xef522f61
    2388:	3c1cd57d 	.word	0x3c1cd57d
    238c:	000207ac 	.word	0x000207ac

00002390 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    2390:	b570      	push	{r4, r5, r6, lr}
    2392:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    2394:	4b15      	ldr	r3, [pc, #84]	; (23ec <wait_for_firmware_start+0x5c>)
    2396:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    2398:	4b15      	ldr	r3, [pc, #84]	; (23f0 <wait_for_firmware_start+0x60>)
    239a:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    239c:	3802      	subs	r0, #2
    239e:	2801      	cmp	r0, #1
    23a0:	d911      	bls.n	23c6 <wait_for_firmware_start+0x36>
{
    23a2:	2401      	movs	r4, #1
    23a4:	4264      	negs	r4, r4
    23a6:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    23a8:	4e12      	ldr	r6, [pc, #72]	; (23f4 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    23aa:	4d13      	ldr	r5, [pc, #76]	; (23f8 <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    23ac:	9b00      	ldr	r3, [sp, #0]
    23ae:	4298      	cmp	r0, r3
    23b0:	d00e      	beq.n	23d0 <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    23b2:	2002      	movs	r0, #2
    23b4:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    23b6:	9801      	ldr	r0, [sp, #4]
    23b8:	47a8      	blx	r5
    23ba:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    23bc:	2c00      	cmp	r4, #0
    23be:	d1f5      	bne.n	23ac <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    23c0:	2005      	movs	r0, #5
    23c2:	4240      	negs	r0, r0
    23c4:	e009      	b.n	23da <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    23c6:	4b0d      	ldr	r3, [pc, #52]	; (23fc <wait_for_firmware_start+0x6c>)
    23c8:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    23ca:	4b0d      	ldr	r3, [pc, #52]	; (2400 <wait_for_firmware_start+0x70>)
    23cc:	9300      	str	r3, [sp, #0]
    23ce:	e7e8      	b.n	23a2 <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    23d0:	9a00      	ldr	r2, [sp, #0]
    23d2:	4b07      	ldr	r3, [pc, #28]	; (23f0 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    23d4:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    23d6:	429a      	cmp	r2, r3
    23d8:	d001      	beq.n	23de <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    23da:	b002      	add	sp, #8
    23dc:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    23de:	2100      	movs	r1, #0
    23e0:	4802      	ldr	r0, [pc, #8]	; (23ec <wait_for_firmware_start+0x5c>)
    23e2:	4b08      	ldr	r3, [pc, #32]	; (2404 <wait_for_firmware_start+0x74>)
    23e4:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    23e6:	2000      	movs	r0, #0
    23e8:	e7f7      	b.n	23da <wait_for_firmware_start+0x4a>
    23ea:	46c0      	nop			; (mov r8, r8)
    23ec:	0000108c 	.word	0x0000108c
    23f0:	02532636 	.word	0x02532636
    23f4:	00000c79 	.word	0x00000c79
    23f8:	000024b9 	.word	0x000024b9
    23fc:	000207ac 	.word	0x000207ac
    2400:	d75dc1c3 	.word	0xd75dc1c3
    2404:	000024d1 	.word	0x000024d1

00002408 <chip_deinit>:

sint8 chip_deinit(void)
{
    2408:	b510      	push	{r4, lr}
    240a:	b082      	sub	sp, #8
	uint32 reg = 0;
    240c:	2300      	movs	r3, #0
    240e:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    2410:	a901      	add	r1, sp, #4
    2412:	20a0      	movs	r0, #160	; 0xa0
    2414:	0140      	lsls	r0, r0, #5
    2416:	4b14      	ldr	r3, [pc, #80]	; (2468 <chip_deinit+0x60>)
    2418:	4798      	blx	r3
    241a:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    241c:	d115      	bne.n	244a <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    241e:	4913      	ldr	r1, [pc, #76]	; (246c <chip_deinit+0x64>)
    2420:	9b01      	ldr	r3, [sp, #4]
    2422:	4019      	ands	r1, r3
    2424:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    2426:	20a0      	movs	r0, #160	; 0xa0
    2428:	0140      	lsls	r0, r0, #5
    242a:	4b11      	ldr	r3, [pc, #68]	; (2470 <chip_deinit+0x68>)
    242c:	4798      	blx	r3
    242e:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    2430:	d016      	beq.n	2460 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    2432:	4a10      	ldr	r2, [pc, #64]	; (2474 <chip_deinit+0x6c>)
    2434:	4910      	ldr	r1, [pc, #64]	; (2478 <chip_deinit+0x70>)
    2436:	4811      	ldr	r0, [pc, #68]	; (247c <chip_deinit+0x74>)
    2438:	4b11      	ldr	r3, [pc, #68]	; (2480 <chip_deinit+0x78>)
    243a:	4798      	blx	r3
    243c:	4811      	ldr	r0, [pc, #68]	; (2484 <chip_deinit+0x7c>)
    243e:	4b12      	ldr	r3, [pc, #72]	; (2488 <chip_deinit+0x80>)
    2440:	4798      	blx	r3
    2442:	200d      	movs	r0, #13
    2444:	4b11      	ldr	r3, [pc, #68]	; (248c <chip_deinit+0x84>)
    2446:	4798      	blx	r3
		goto ERR1;
    2448:	e00a      	b.n	2460 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    244a:	4a11      	ldr	r2, [pc, #68]	; (2490 <chip_deinit+0x88>)
    244c:	490a      	ldr	r1, [pc, #40]	; (2478 <chip_deinit+0x70>)
    244e:	480b      	ldr	r0, [pc, #44]	; (247c <chip_deinit+0x74>)
    2450:	4b0b      	ldr	r3, [pc, #44]	; (2480 <chip_deinit+0x78>)
    2452:	4798      	blx	r3
    2454:	480b      	ldr	r0, [pc, #44]	; (2484 <chip_deinit+0x7c>)
    2456:	4b0c      	ldr	r3, [pc, #48]	; (2488 <chip_deinit+0x80>)
    2458:	4798      	blx	r3
    245a:	200d      	movs	r0, #13
    245c:	4b0b      	ldr	r3, [pc, #44]	; (248c <chip_deinit+0x84>)
    245e:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    2460:	0020      	movs	r0, r4
    2462:	b002      	add	sp, #8
    2464:	bd10      	pop	{r4, pc}
    2466:	46c0      	nop			; (mov r8, r8)
    2468:	000024c5 	.word	0x000024c5
    246c:	fffffbff 	.word	0xfffffbff
    2470:	000024d1 	.word	0x000024d1
    2474:	0000020b 	.word	0x0000020b
    2478:	0000ae38 	.word	0x0000ae38
    247c:	0000a8ec 	.word	0x0000a8ec
    2480:	00009539 	.word	0x00009539
    2484:	0000ae44 	.word	0x0000ae44
    2488:	00009655 	.word	0x00009655
    248c:	0000956d 	.word	0x0000956d
    2490:	00000205 	.word	0x00000205

00002494 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    2494:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    2496:	4b01      	ldr	r3, [pc, #4]	; (249c <nm_bus_iface_init+0x8>)
    2498:	4798      	blx	r3
	return ret;
}
    249a:	bd10      	pop	{r4, pc}
    249c:	00000dad 	.word	0x00000dad

000024a0 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    24a0:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    24a2:	4b01      	ldr	r3, [pc, #4]	; (24a8 <nm_bus_iface_deinit+0x8>)
    24a4:	4798      	blx	r3

	return ret;
}
    24a6:	bd10      	pop	{r4, pc}
    24a8:	00000ffd 	.word	0x00000ffd

000024ac <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    24ac:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    24ae:	4b01      	ldr	r3, [pc, #4]	; (24b4 <nm_bus_reset+0x8>)
    24b0:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    24b2:	bd10      	pop	{r4, pc}
    24b4:	00002e5d 	.word	0x00002e5d

000024b8 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    24b8:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    24ba:	4b01      	ldr	r3, [pc, #4]	; (24c0 <nm_read_reg+0x8>)
    24bc:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    24be:	bd10      	pop	{r4, pc}
    24c0:	00002e95 	.word	0x00002e95

000024c4 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    24c4:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    24c6:	4b01      	ldr	r3, [pc, #4]	; (24cc <nm_read_reg_with_ret+0x8>)
    24c8:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    24ca:	bd10      	pop	{r4, pc}
    24cc:	00002ea9 	.word	0x00002ea9

000024d0 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    24d0:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    24d2:	4b01      	ldr	r3, [pc, #4]	; (24d8 <nm_write_reg+0x8>)
    24d4:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    24d6:	bd10      	pop	{r4, pc}
    24d8:	00002ec1 	.word	0x00002ec1

000024dc <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    24dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    24de:	46d6      	mov	lr, sl
    24e0:	464f      	mov	r7, r9
    24e2:	4646      	mov	r6, r8
    24e4:	b5c0      	push	{r6, r7, lr}
    24e6:	b082      	sub	sp, #8
    24e8:	4680      	mov	r8, r0
    24ea:	4689      	mov	r9, r1
    24ec:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    24ee:	4b13      	ldr	r3, [pc, #76]	; (253c <nm_read_block+0x60>)
    24f0:	881f      	ldrh	r7, [r3, #0]
    24f2:	3f08      	subs	r7, #8
    24f4:	b2bb      	uxth	r3, r7
    24f6:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    24f8:	001e      	movs	r6, r3
    24fa:	0004      	movs	r4, r0
    24fc:	429a      	cmp	r2, r3
    24fe:	d91a      	bls.n	2536 <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2500:	4b0f      	ldr	r3, [pc, #60]	; (2540 <nm_read_block+0x64>)
    2502:	469a      	mov	sl, r3
    2504:	1a37      	subs	r7, r6, r0
    2506:	4643      	mov	r3, r8
    2508:	1ae1      	subs	r1, r4, r3
    250a:	4449      	add	r1, r9
    250c:	9a01      	ldr	r2, [sp, #4]
    250e:	0020      	movs	r0, r4
    2510:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    2512:	2800      	cmp	r0, #0
    2514:	d109      	bne.n	252a <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    2516:	1bad      	subs	r5, r5, r6
    2518:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    251a:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    251c:	42b5      	cmp	r5, r6
    251e:	d8f2      	bhi.n	2506 <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2520:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    2522:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2524:	0020      	movs	r0, r4
    2526:	4b06      	ldr	r3, [pc, #24]	; (2540 <nm_read_block+0x64>)
    2528:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    252a:	b002      	add	sp, #8
    252c:	bc1c      	pop	{r2, r3, r4}
    252e:	4690      	mov	r8, r2
    2530:	4699      	mov	r9, r3
    2532:	46a2      	mov	sl, r4
    2534:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    2536:	2100      	movs	r1, #0
    2538:	e7f2      	b.n	2520 <nm_read_block+0x44>
    253a:	46c0      	nop			; (mov r8, r8)
    253c:	20000008 	.word	0x20000008
    2540:	00003005 	.word	0x00003005

00002544 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    2544:	b5f0      	push	{r4, r5, r6, r7, lr}
    2546:	46d6      	mov	lr, sl
    2548:	464f      	mov	r7, r9
    254a:	4646      	mov	r6, r8
    254c:	b5c0      	push	{r6, r7, lr}
    254e:	b082      	sub	sp, #8
    2550:	4680      	mov	r8, r0
    2552:	4689      	mov	r9, r1
    2554:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    2556:	4b13      	ldr	r3, [pc, #76]	; (25a4 <nm_write_block+0x60>)
    2558:	881f      	ldrh	r7, [r3, #0]
    255a:	3f08      	subs	r7, #8
    255c:	b2bb      	uxth	r3, r7
    255e:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2560:	001e      	movs	r6, r3
    2562:	0004      	movs	r4, r0
    2564:	429a      	cmp	r2, r3
    2566:	d91a      	bls.n	259e <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2568:	4b0f      	ldr	r3, [pc, #60]	; (25a8 <nm_write_block+0x64>)
    256a:	469a      	mov	sl, r3
    256c:	1a37      	subs	r7, r6, r0
    256e:	4643      	mov	r3, r8
    2570:	1ae1      	subs	r1, r4, r3
    2572:	4449      	add	r1, r9
    2574:	9a01      	ldr	r2, [sp, #4]
    2576:	0020      	movs	r0, r4
    2578:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    257a:	2800      	cmp	r0, #0
    257c:	d109      	bne.n	2592 <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    257e:	1bad      	subs	r5, r5, r6
    2580:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    2582:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    2584:	42b5      	cmp	r5, r6
    2586:	d8f2      	bhi.n	256e <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2588:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    258a:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    258c:	0020      	movs	r0, r4
    258e:	4b06      	ldr	r3, [pc, #24]	; (25a8 <nm_write_block+0x64>)
    2590:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    2592:	b002      	add	sp, #8
    2594:	bc1c      	pop	{r2, r3, r4}
    2596:	4690      	mov	r8, r2
    2598:	4699      	mov	r9, r3
    259a:	46a2      	mov	sl, r4
    259c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    259e:	2100      	movs	r1, #0
    25a0:	e7f2      	b.n	2588 <nm_write_block+0x44>
    25a2:	46c0      	nop			; (mov r8, r8)
    25a4:	20000008 	.word	0x20000008
    25a8:	00003161 	.word	0x00003161

000025ac <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    25ac:	b570      	push	{r4, r5, r6, lr}
    25ae:	b084      	sub	sp, #16
    25b0:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    25b2:	2300      	movs	r3, #0
    25b4:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    25b6:	2208      	movs	r2, #8
    25b8:	2100      	movs	r1, #0
    25ba:	a801      	add	r0, sp, #4
    25bc:	4b2d      	ldr	r3, [pc, #180]	; (2674 <nm_get_firmware_full_info+0xc8>)
    25be:	4798      	blx	r3
	if (pstrRev != NULL)
    25c0:	2c00      	cmp	r4, #0
    25c2:	d044      	beq.n	264e <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    25c4:	2228      	movs	r2, #40	; 0x28
    25c6:	2100      	movs	r1, #0
    25c8:	0020      	movs	r0, r4
    25ca:	4b2b      	ldr	r3, [pc, #172]	; (2678 <nm_get_firmware_full_info+0xcc>)
    25cc:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    25ce:	a903      	add	r1, sp, #12
    25d0:	482a      	ldr	r0, [pc, #168]	; (267c <nm_get_firmware_full_info+0xd0>)
    25d2:	4b2b      	ldr	r3, [pc, #172]	; (2680 <nm_get_firmware_full_info+0xd4>)
    25d4:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    25d6:	2800      	cmp	r0, #0
    25d8:	d13a      	bne.n	2650 <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    25da:	9b03      	ldr	r3, [sp, #12]
    25dc:	2b00      	cmp	r3, #0
    25de:	d039      	beq.n	2654 <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    25e0:	20c0      	movs	r0, #192	; 0xc0
    25e2:	0280      	lsls	r0, r0, #10
    25e4:	4318      	orrs	r0, r3
    25e6:	2208      	movs	r2, #8
    25e8:	a901      	add	r1, sp, #4
    25ea:	4b26      	ldr	r3, [pc, #152]	; (2684 <nm_get_firmware_full_info+0xd8>)
    25ec:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    25ee:	2800      	cmp	r0, #0
    25f0:	d12e      	bne.n	2650 <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    25f2:	9b02      	ldr	r3, [sp, #8]
    25f4:	0418      	lsls	r0, r3, #16
    25f6:	0c00      	lsrs	r0, r0, #16
    25f8:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    25fa:	d02e      	beq.n	265a <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    25fc:	23c0      	movs	r3, #192	; 0xc0
    25fe:	029b      	lsls	r3, r3, #10
    2600:	4318      	orrs	r0, r3
    2602:	2228      	movs	r2, #40	; 0x28
    2604:	0021      	movs	r1, r4
    2606:	4b1f      	ldr	r3, [pc, #124]	; (2684 <nm_get_firmware_full_info+0xd8>)
    2608:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    260a:	2800      	cmp	r0, #0
    260c:	d120      	bne.n	2650 <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    260e:	7921      	ldrb	r1, [r4, #4]
    2610:	0209      	lsls	r1, r1, #8
    2612:	79a2      	ldrb	r2, [r4, #6]
    2614:	230f      	movs	r3, #15
    2616:	401a      	ands	r2, r3
    2618:	430a      	orrs	r2, r1
    261a:	7961      	ldrb	r1, [r4, #5]
    261c:	0109      	lsls	r1, r1, #4
    261e:	25ff      	movs	r5, #255	; 0xff
    2620:	4029      	ands	r1, r5
    2622:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    2624:	79e1      	ldrb	r1, [r4, #7]
    2626:	0209      	lsls	r1, r1, #8
    2628:	7a66      	ldrb	r6, [r4, #9]
    262a:	4033      	ands	r3, r6
    262c:	430b      	orrs	r3, r1
    262e:	7a21      	ldrb	r1, [r4, #8]
    2630:	0109      	lsls	r1, r1, #4
    2632:	400d      	ands	r5, r1
    2634:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    2636:	2a00      	cmp	r2, #0
    2638:	d012      	beq.n	2660 <nm_get_firmware_full_info+0xb4>
    263a:	2b00      	cmp	r3, #0
    263c:	d013      	beq.n	2666 <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    263e:	4912      	ldr	r1, [pc, #72]	; (2688 <nm_get_firmware_full_info+0xdc>)
    2640:	428b      	cmp	r3, r1
    2642:	d813      	bhi.n	266c <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    2644:	4b11      	ldr	r3, [pc, #68]	; (268c <nm_get_firmware_full_info+0xe0>)
    2646:	429a      	cmp	r2, r3
    2648:	d802      	bhi.n	2650 <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    264a:	380d      	subs	r0, #13
    264c:	e000      	b.n	2650 <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    264e:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    2650:	b004      	add	sp, #16
    2652:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    2654:	200c      	movs	r0, #12
    2656:	4240      	negs	r0, r0
    2658:	e7fa      	b.n	2650 <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    265a:	200c      	movs	r0, #12
    265c:	4240      	negs	r0, r0
    265e:	e7f7      	b.n	2650 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    2660:	200c      	movs	r0, #12
    2662:	4240      	negs	r0, r0
    2664:	e7f4      	b.n	2650 <nm_get_firmware_full_info+0xa4>
    2666:	200c      	movs	r0, #12
    2668:	4240      	negs	r0, r0
    266a:	e7f1      	b.n	2650 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    266c:	200d      	movs	r0, #13
    266e:	4240      	negs	r0, r0
    2670:	e7ee      	b.n	2650 <nm_get_firmware_full_info+0xa4>
    2672:	46c0      	nop			; (mov r8, r8)
    2674:	000093d7 	.word	0x000093d7
    2678:	0000107d 	.word	0x0000107d
    267c:	000c0008 	.word	0x000c0008
    2680:	000024c5 	.word	0x000024c5
    2684:	000024dd 	.word	0x000024dd
    2688:	00001352 	.word	0x00001352
    268c:	00001351 	.word	0x00001351

00002690 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    2690:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    2692:	2800      	cmp	r0, #0
    2694:	d037      	beq.n	2706 <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
    2696:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    2698:	1e6b      	subs	r3, r5, #1
    269a:	2b03      	cmp	r3, #3
    269c:	d900      	bls.n	26a0 <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    269e:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    26a0:	2000      	movs	r0, #0
    26a2:	4b20      	ldr	r3, [pc, #128]	; (2724 <nm_drv_init+0x94>)
    26a4:	4798      	blx	r3
    26a6:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    26a8:	d12f      	bne.n	270a <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    26aa:	481f      	ldr	r0, [pc, #124]	; (2728 <nm_drv_init+0x98>)
    26ac:	4c1f      	ldr	r4, [pc, #124]	; (272c <nm_drv_init+0x9c>)
    26ae:	47a0      	blx	r4
    26b0:	4b1f      	ldr	r3, [pc, #124]	; (2730 <nm_drv_init+0xa0>)
    26b2:	4798      	blx	r3
    26b4:	0001      	movs	r1, r0
    26b6:	481f      	ldr	r0, [pc, #124]	; (2734 <nm_drv_init+0xa4>)
    26b8:	47a0      	blx	r4
    26ba:	200d      	movs	r0, #13
    26bc:	4b1e      	ldr	r3, [pc, #120]	; (2738 <nm_drv_init+0xa8>)
    26be:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    26c0:	4b1e      	ldr	r3, [pc, #120]	; (273c <nm_drv_init+0xac>)
    26c2:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    26c4:	0028      	movs	r0, r5
    26c6:	4b1e      	ldr	r3, [pc, #120]	; (2740 <nm_drv_init+0xb0>)
    26c8:	4798      	blx	r3
    26ca:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    26cc:	d117      	bne.n	26fe <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    26ce:	0028      	movs	r0, r5
    26d0:	4b1c      	ldr	r3, [pc, #112]	; (2744 <nm_drv_init+0xb4>)
    26d2:	4798      	blx	r3
    26d4:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    26d6:	d112      	bne.n	26fe <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    26d8:	3d02      	subs	r5, #2
    26da:	2d01      	cmp	r5, #1
    26dc:	d911      	bls.n	2702 <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    26de:	4b1a      	ldr	r3, [pc, #104]	; (2748 <nm_drv_init+0xb8>)
    26e0:	4798      	blx	r3
    26e2:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    26e4:	d00d      	beq.n	2702 <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
    26e6:	2256      	movs	r2, #86	; 0x56
    26e8:	32ff      	adds	r2, #255	; 0xff
    26ea:	4918      	ldr	r1, [pc, #96]	; (274c <nm_drv_init+0xbc>)
    26ec:	4818      	ldr	r0, [pc, #96]	; (2750 <nm_drv_init+0xc0>)
    26ee:	4b0f      	ldr	r3, [pc, #60]	; (272c <nm_drv_init+0x9c>)
    26f0:	4798      	blx	r3
    26f2:	4818      	ldr	r0, [pc, #96]	; (2754 <nm_drv_init+0xc4>)
    26f4:	4b18      	ldr	r3, [pc, #96]	; (2758 <nm_drv_init+0xc8>)
    26f6:	4798      	blx	r3
    26f8:	200d      	movs	r0, #13
    26fa:	4b0f      	ldr	r3, [pc, #60]	; (2738 <nm_drv_init+0xa8>)
    26fc:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    26fe:	4b17      	ldr	r3, [pc, #92]	; (275c <nm_drv_init+0xcc>)
    2700:	4798      	blx	r3
ERR1:
	return ret;
}
    2702:	0020      	movs	r0, r4
    2704:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    2706:	2501      	movs	r5, #1
    2708:	e7ca      	b.n	26a0 <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    270a:	2228      	movs	r2, #40	; 0x28
    270c:	32ff      	adds	r2, #255	; 0xff
    270e:	490f      	ldr	r1, [pc, #60]	; (274c <nm_drv_init+0xbc>)
    2710:	480f      	ldr	r0, [pc, #60]	; (2750 <nm_drv_init+0xc0>)
    2712:	4b06      	ldr	r3, [pc, #24]	; (272c <nm_drv_init+0x9c>)
    2714:	4798      	blx	r3
    2716:	4812      	ldr	r0, [pc, #72]	; (2760 <nm_drv_init+0xd0>)
    2718:	4b0f      	ldr	r3, [pc, #60]	; (2758 <nm_drv_init+0xc8>)
    271a:	4798      	blx	r3
    271c:	200d      	movs	r0, #13
    271e:	4b06      	ldr	r3, [pc, #24]	; (2738 <nm_drv_init+0xa8>)
    2720:	4798      	blx	r3
		goto ERR1;
    2722:	e7ee      	b.n	2702 <nm_drv_init+0x72>
    2724:	00002495 	.word	0x00002495
    2728:	0000ac1c 	.word	0x0000ac1c
    272c:	00009539 	.word	0x00009539
    2730:	00002075 	.word	0x00002075
    2734:	0000af60 	.word	0x0000af60
    2738:	0000956d 	.word	0x0000956d
    273c:	00002ed9 	.word	0x00002ed9
    2740:	00002289 	.word	0x00002289
    2744:	00002391 	.word	0x00002391
    2748:	00002019 	.word	0x00002019
    274c:	0000aea8 	.word	0x0000aea8
    2750:	0000a8ec 	.word	0x0000a8ec
    2754:	0000af24 	.word	0x0000af24
    2758:	00009655 	.word	0x00009655
    275c:	000024a1 	.word	0x000024a1
    2760:	0000af44 	.word	0x0000af44

00002764 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    2764:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    2766:	4b1c      	ldr	r3, [pc, #112]	; (27d8 <nm_drv_deinit+0x74>)
    2768:	4798      	blx	r3
    276a:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    276c:	d10b      	bne.n	2786 <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    276e:	2000      	movs	r0, #0
    2770:	4b1a      	ldr	r3, [pc, #104]	; (27dc <nm_drv_deinit+0x78>)
    2772:	4798      	blx	r3
    2774:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2776:	d114      	bne.n	27a2 <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    2778:	4b19      	ldr	r3, [pc, #100]	; (27e0 <nm_drv_deinit+0x7c>)
    277a:	4798      	blx	r3
    277c:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    277e:	d11d      	bne.n	27bc <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    2780:	4b18      	ldr	r3, [pc, #96]	; (27e4 <nm_drv_deinit+0x80>)
    2782:	4798      	blx	r3
    2784:	e00b      	b.n	279e <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    2786:	22b6      	movs	r2, #182	; 0xb6
    2788:	0052      	lsls	r2, r2, #1
    278a:	4917      	ldr	r1, [pc, #92]	; (27e8 <nm_drv_deinit+0x84>)
    278c:	4817      	ldr	r0, [pc, #92]	; (27ec <nm_drv_deinit+0x88>)
    278e:	4b18      	ldr	r3, [pc, #96]	; (27f0 <nm_drv_deinit+0x8c>)
    2790:	4798      	blx	r3
    2792:	4818      	ldr	r0, [pc, #96]	; (27f4 <nm_drv_deinit+0x90>)
    2794:	4b18      	ldr	r3, [pc, #96]	; (27f8 <nm_drv_deinit+0x94>)
    2796:	4798      	blx	r3
    2798:	200d      	movs	r0, #13
    279a:	4b18      	ldr	r3, [pc, #96]	; (27fc <nm_drv_deinit+0x98>)
    279c:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    279e:	0020      	movs	r0, r4
    27a0:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    27a2:	2274      	movs	r2, #116	; 0x74
    27a4:	32ff      	adds	r2, #255	; 0xff
    27a6:	4910      	ldr	r1, [pc, #64]	; (27e8 <nm_drv_deinit+0x84>)
    27a8:	4810      	ldr	r0, [pc, #64]	; (27ec <nm_drv_deinit+0x88>)
    27aa:	4b11      	ldr	r3, [pc, #68]	; (27f0 <nm_drv_deinit+0x8c>)
    27ac:	4798      	blx	r3
    27ae:	4814      	ldr	r0, [pc, #80]	; (2800 <nm_drv_deinit+0x9c>)
    27b0:	4b11      	ldr	r3, [pc, #68]	; (27f8 <nm_drv_deinit+0x94>)
    27b2:	4798      	blx	r3
    27b4:	200d      	movs	r0, #13
    27b6:	4b11      	ldr	r3, [pc, #68]	; (27fc <nm_drv_deinit+0x98>)
    27b8:	4798      	blx	r3
		goto ERR1;
    27ba:	e7f0      	b.n	279e <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    27bc:	227a      	movs	r2, #122	; 0x7a
    27be:	32ff      	adds	r2, #255	; 0xff
    27c0:	4909      	ldr	r1, [pc, #36]	; (27e8 <nm_drv_deinit+0x84>)
    27c2:	480a      	ldr	r0, [pc, #40]	; (27ec <nm_drv_deinit+0x88>)
    27c4:	4b0a      	ldr	r3, [pc, #40]	; (27f0 <nm_drv_deinit+0x8c>)
    27c6:	4798      	blx	r3
    27c8:	480e      	ldr	r0, [pc, #56]	; (2804 <nm_drv_deinit+0xa0>)
    27ca:	4b0b      	ldr	r3, [pc, #44]	; (27f8 <nm_drv_deinit+0x94>)
    27cc:	4798      	blx	r3
    27ce:	200d      	movs	r0, #13
    27d0:	4b0a      	ldr	r3, [pc, #40]	; (27fc <nm_drv_deinit+0x98>)
    27d2:	4798      	blx	r3
		goto ERR1;
    27d4:	e7e3      	b.n	279e <nm_drv_deinit+0x3a>
    27d6:	46c0      	nop			; (mov r8, r8)
    27d8:	00002409 	.word	0x00002409
    27dc:	00003cf9 	.word	0x00003cf9
    27e0:	000024a1 	.word	0x000024a1
    27e4:	00002e85 	.word	0x00002e85
    27e8:	0000aeb4 	.word	0x0000aeb4
    27ec:	0000a8ec 	.word	0x0000a8ec
    27f0:	00009539 	.word	0x00009539
    27f4:	0000aec4 	.word	0x0000aec4
    27f8:	00009655 	.word	0x00009655
    27fc:	0000956d 	.word	0x0000956d
    2800:	0000aee4 	.word	0x0000aee4
    2804:	0000af08 	.word	0x0000af08

00002808 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    2808:	b500      	push	{lr}
    280a:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    280c:	ab01      	add	r3, sp, #4
    280e:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    2810:	2200      	movs	r2, #0
    2812:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    2814:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    2816:	0019      	movs	r1, r3
    2818:	2003      	movs	r0, #3
    281a:	4b02      	ldr	r3, [pc, #8]	; (2824 <nmi_spi_write+0x1c>)
    281c:	4798      	blx	r3
}
    281e:	b005      	add	sp, #20
    2820:	bd00      	pop	{pc}
    2822:	46c0      	nop			; (mov r8, r8)
    2824:	00000eb1 	.word	0x00000eb1

00002828 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    2828:	b570      	push	{r4, r5, r6, lr}
    282a:	b084      	sub	sp, #16
    282c:	ac08      	add	r4, sp, #32
    282e:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    2830:	ac01      	add	r4, sp, #4
    2832:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    2834:	303f      	adds	r0, #63	; 0x3f
    2836:	b2c4      	uxtb	r4, r0
    2838:	2c0e      	cmp	r4, #14
    283a:	d900      	bls.n	283e <spi_cmd+0x16>
    283c:	e084      	b.n	2948 <spi_cmd+0x120>
    283e:	00a0      	lsls	r0, r4, #2
    2840:	4c4f      	ldr	r4, [pc, #316]	; (2980 <spi_cmd+0x158>)
    2842:	5820      	ldr	r0, [r4, r0]
    2844:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    2846:	ab01      	add	r3, sp, #4
    2848:	0c0a      	lsrs	r2, r1, #16
    284a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    284c:	0a0a      	lsrs	r2, r1, #8
    284e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    2850:	70d9      	strb	r1, [r3, #3]
		len = 5;
    2852:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    2854:	4b4b      	ldr	r3, [pc, #300]	; (2984 <spi_cmd+0x15c>)
    2856:	781b      	ldrb	r3, [r3, #0]
    2858:	2b00      	cmp	r3, #0
    285a:	d077      	beq.n	294c <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    285c:	3901      	subs	r1, #1
    285e:	b2c9      	uxtb	r1, r1
    2860:	e083      	b.n	296a <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
    2862:	0a0b      	lsrs	r3, r1, #8
    2864:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    2866:	2d00      	cmp	r5, #0
    2868:	d107      	bne.n	287a <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    286a:	aa01      	add	r2, sp, #4
    286c:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    286e:	ab01      	add	r3, sp, #4
    2870:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    2872:	2200      	movs	r2, #0
    2874:	70da      	strb	r2, [r3, #3]
		len = 5;
    2876:	2105      	movs	r1, #5
		break;
    2878:	e7ec      	b.n	2854 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    287a:	2280      	movs	r2, #128	; 0x80
    287c:	4252      	negs	r2, r2
    287e:	4313      	orrs	r3, r2
    2880:	aa01      	add	r2, sp, #4
    2882:	7053      	strb	r3, [r2, #1]
    2884:	e7f3      	b.n	286e <spi_cmd+0x46>
		bc[1] = 0x00;
    2886:	ab01      	add	r3, sp, #4
    2888:	2200      	movs	r2, #0
    288a:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    288c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    288e:	70da      	strb	r2, [r3, #3]
		len = 5;
    2890:	2105      	movs	r1, #5
		break;
    2892:	e7df      	b.n	2854 <spi_cmd+0x2c>
		bc[1] = 0x00;
    2894:	ab01      	add	r3, sp, #4
    2896:	2200      	movs	r2, #0
    2898:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    289a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    289c:	70da      	strb	r2, [r3, #3]
		len = 5;
    289e:	2105      	movs	r1, #5
		break;
    28a0:	e7d8      	b.n	2854 <spi_cmd+0x2c>
		bc[1] = 0xff;
    28a2:	ab01      	add	r3, sp, #4
    28a4:	22ff      	movs	r2, #255	; 0xff
    28a6:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    28a8:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    28aa:	70da      	strb	r2, [r3, #3]
		len = 5;
    28ac:	2105      	movs	r1, #5
		break;
    28ae:	e7d1      	b.n	2854 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    28b0:	aa01      	add	r2, sp, #4
    28b2:	0c08      	lsrs	r0, r1, #16
    28b4:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    28b6:	0a08      	lsrs	r0, r1, #8
    28b8:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    28ba:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    28bc:	0a19      	lsrs	r1, r3, #8
    28be:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    28c0:	7153      	strb	r3, [r2, #5]
		len = 7;
    28c2:	2107      	movs	r1, #7
		break;
    28c4:	e7c6      	b.n	2854 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    28c6:	aa01      	add	r2, sp, #4
    28c8:	0c08      	lsrs	r0, r1, #16
    28ca:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    28cc:	0a08      	lsrs	r0, r1, #8
    28ce:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    28d0:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    28d2:	0c19      	lsrs	r1, r3, #16
    28d4:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    28d6:	0a19      	lsrs	r1, r3, #8
    28d8:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    28da:	7193      	strb	r3, [r2, #6]
		len = 8;
    28dc:	2108      	movs	r1, #8
		break;
    28de:	e7b9      	b.n	2854 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    28e0:	0a0b      	lsrs	r3, r1, #8
    28e2:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    28e4:	2d00      	cmp	r5, #0
    28e6:	d10c      	bne.n	2902 <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    28e8:	a801      	add	r0, sp, #4
    28ea:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    28ec:	ab01      	add	r3, sp, #4
    28ee:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    28f0:	0e11      	lsrs	r1, r2, #24
    28f2:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    28f4:	0c11      	lsrs	r1, r2, #16
    28f6:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    28f8:	0a11      	lsrs	r1, r2, #8
    28fa:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    28fc:	719a      	strb	r2, [r3, #6]
		len = 8;
    28fe:	2108      	movs	r1, #8
		break;
    2900:	e7a8      	b.n	2854 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    2902:	2080      	movs	r0, #128	; 0x80
    2904:	4240      	negs	r0, r0
    2906:	4303      	orrs	r3, r0
    2908:	a801      	add	r0, sp, #4
    290a:	7043      	strb	r3, [r0, #1]
    290c:	e7ee      	b.n	28ec <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    290e:	ab01      	add	r3, sp, #4
    2910:	0c08      	lsrs	r0, r1, #16
    2912:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    2914:	0a08      	lsrs	r0, r1, #8
    2916:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    2918:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    291a:	0e11      	lsrs	r1, r2, #24
    291c:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    291e:	0c11      	lsrs	r1, r2, #16
    2920:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    2922:	0a11      	lsrs	r1, r2, #8
    2924:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    2926:	71da      	strb	r2, [r3, #7]
		len = 9;
    2928:	2109      	movs	r1, #9
		break;
    292a:	e793      	b.n	2854 <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    292c:	2228      	movs	r2, #40	; 0x28
    292e:	32ff      	adds	r2, #255	; 0xff
    2930:	4915      	ldr	r1, [pc, #84]	; (2988 <spi_cmd+0x160>)
    2932:	4816      	ldr	r0, [pc, #88]	; (298c <spi_cmd+0x164>)
    2934:	4b16      	ldr	r3, [pc, #88]	; (2990 <spi_cmd+0x168>)
    2936:	4798      	blx	r3
    2938:	4816      	ldr	r0, [pc, #88]	; (2994 <spi_cmd+0x16c>)
    293a:	4b17      	ldr	r3, [pc, #92]	; (2998 <spi_cmd+0x170>)
    293c:	4798      	blx	r3
    293e:	200d      	movs	r0, #13
    2940:	4b16      	ldr	r3, [pc, #88]	; (299c <spi_cmd+0x174>)
    2942:	4798      	blx	r3
			result = N_FAIL;
    2944:	2300      	movs	r3, #0
    2946:	e017      	b.n	2978 <spi_cmd+0x150>
	switch (cmd) {
    2948:	2300      	movs	r3, #0
    294a:	e015      	b.n	2978 <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    294c:	1e4e      	subs	r6, r1, #1
    294e:	aa01      	add	r2, sp, #4
    2950:	1995      	adds	r5, r2, r6
    2952:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    2954:	4c12      	ldr	r4, [pc, #72]	; (29a0 <spi_cmd+0x178>)
    2956:	005b      	lsls	r3, r3, #1
    2958:	7810      	ldrb	r0, [r2, #0]
    295a:	4043      	eors	r3, r0
    295c:	5ce3      	ldrb	r3, [r4, r3]
    295e:	3201      	adds	r2, #1
	while (len--)
    2960:	42aa      	cmp	r2, r5
    2962:	d1f8      	bne.n	2956 <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    2964:	005b      	lsls	r3, r3, #1
    2966:	aa01      	add	r2, sp, #4
    2968:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    296a:	b289      	uxth	r1, r1
    296c:	a801      	add	r0, sp, #4
    296e:	4b0d      	ldr	r3, [pc, #52]	; (29a4 <spi_cmd+0x17c>)
    2970:	4798      	blx	r3
    2972:	2301      	movs	r3, #1
    2974:	2800      	cmp	r0, #0
    2976:	d1d9      	bne.n	292c <spi_cmd+0x104>
		}
	}

	return result;
}
    2978:	0018      	movs	r0, r3
    297a:	b004      	add	sp, #16
    297c:	bd70      	pop	{r4, r5, r6, pc}
    297e:	46c0      	nop			; (mov r8, r8)
    2980:	0000af70 	.word	0x0000af70
    2984:	2000009c 	.word	0x2000009c
    2988:	0000afb0 	.word	0x0000afb0
    298c:	0000a8ec 	.word	0x0000a8ec
    2990:	00009539 	.word	0x00009539
    2994:	0000b440 	.word	0x0000b440
    2998:	00009655 	.word	0x00009655
    299c:	0000956d 	.word	0x0000956d
    29a0:	0000b03c 	.word	0x0000b03c
    29a4:	00002809 	.word	0x00002809

000029a8 <nmi_spi_read>:
{
    29a8:	b500      	push	{lr}
    29aa:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    29ac:	ab01      	add	r3, sp, #4
    29ae:	2200      	movs	r2, #0
    29b0:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    29b2:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    29b4:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    29b6:	0019      	movs	r1, r3
    29b8:	2003      	movs	r0, #3
    29ba:	4b02      	ldr	r3, [pc, #8]	; (29c4 <nmi_spi_read+0x1c>)
    29bc:	4798      	blx	r3
}
    29be:	b005      	add	sp, #20
    29c0:	bd00      	pop	{pc}
    29c2:	46c0      	nop			; (mov r8, r8)
    29c4:	00000eb1 	.word	0x00000eb1

000029c8 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    29c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    29ca:	46c6      	mov	lr, r8
    29cc:	b500      	push	{lr}
    29ce:	b082      	sub	sp, #8
    29d0:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    29d2:	28cf      	cmp	r0, #207	; 0xcf
    29d4:	d02b      	beq.n	2a2e <spi_cmd_rsp+0x66>
    29d6:	0003      	movs	r3, r0
    29d8:	333b      	adds	r3, #59	; 0x3b
    29da:	b2db      	uxtb	r3, r3
    29dc:	2b01      	cmp	r3, #1
    29de:	d926      	bls.n	2a2e <spi_cmd_rsp+0x66>
{
    29e0:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    29e2:	466b      	mov	r3, sp
    29e4:	1dde      	adds	r6, r3, #7
    29e6:	4b26      	ldr	r3, [pc, #152]	; (2a80 <spi_cmd_rsp+0xb8>)
    29e8:	4698      	mov	r8, r3
    29ea:	2101      	movs	r1, #1
    29ec:	0030      	movs	r0, r6
    29ee:	47c0      	blx	r8
    29f0:	1e05      	subs	r5, r0, #0
    29f2:	d125      	bne.n	2a40 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    29f4:	7833      	ldrb	r3, [r6, #0]
    29f6:	42bb      	cmp	r3, r7
    29f8:	d030      	beq.n	2a5c <spi_cmd_rsp+0x94>
    29fa:	3c01      	subs	r4, #1
    29fc:	b2e4      	uxtb	r4, r4
    29fe:	2c00      	cmp	r4, #0
    2a00:	d1f3      	bne.n	29ea <spi_cmd_rsp+0x22>
    2a02:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2a04:	466b      	mov	r3, sp
    2a06:	1dde      	adds	r6, r3, #7
    2a08:	4f1d      	ldr	r7, [pc, #116]	; (2a80 <spi_cmd_rsp+0xb8>)
    2a0a:	2101      	movs	r1, #1
    2a0c:	0030      	movs	r0, r6
    2a0e:	47b8      	blx	r7
    2a10:	2800      	cmp	r0, #0
    2a12:	d125      	bne.n	2a60 <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    2a14:	7833      	ldrb	r3, [r6, #0]
    2a16:	2b00      	cmp	r3, #0
    2a18:	d02f      	beq.n	2a7a <spi_cmd_rsp+0xb2>
    2a1a:	3c01      	subs	r4, #1
    2a1c:	b2e4      	uxtb	r4, r4
    2a1e:	2c00      	cmp	r4, #0
    2a20:	d1f3      	bne.n	2a0a <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    2a22:	2501      	movs	r5, #1

_fail_:

	return result;
}
    2a24:	0028      	movs	r0, r5
    2a26:	b002      	add	sp, #8
    2a28:	bc04      	pop	{r2}
    2a2a:	4690      	mov	r8, r2
    2a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2a2e:	2101      	movs	r1, #1
    2a30:	466b      	mov	r3, sp
    2a32:	1dd8      	adds	r0, r3, #7
    2a34:	4b12      	ldr	r3, [pc, #72]	; (2a80 <spi_cmd_rsp+0xb8>)
    2a36:	4798      	blx	r3
			result = N_FAIL;
    2a38:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2a3a:	2800      	cmp	r0, #0
    2a3c:	d0d0      	beq.n	29e0 <spi_cmd_rsp+0x18>
    2a3e:	e7f1      	b.n	2a24 <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    2a40:	22b1      	movs	r2, #177	; 0xb1
    2a42:	0052      	lsls	r2, r2, #1
    2a44:	490f      	ldr	r1, [pc, #60]	; (2a84 <spi_cmd_rsp+0xbc>)
    2a46:	4810      	ldr	r0, [pc, #64]	; (2a88 <spi_cmd_rsp+0xc0>)
    2a48:	4b10      	ldr	r3, [pc, #64]	; (2a8c <spi_cmd_rsp+0xc4>)
    2a4a:	4798      	blx	r3
    2a4c:	4810      	ldr	r0, [pc, #64]	; (2a90 <spi_cmd_rsp+0xc8>)
    2a4e:	4b11      	ldr	r3, [pc, #68]	; (2a94 <spi_cmd_rsp+0xcc>)
    2a50:	4798      	blx	r3
    2a52:	200d      	movs	r0, #13
    2a54:	4b10      	ldr	r3, [pc, #64]	; (2a98 <spi_cmd_rsp+0xd0>)
    2a56:	4798      	blx	r3
			result = N_FAIL;
    2a58:	2500      	movs	r5, #0
			goto _fail_;
    2a5a:	e7e3      	b.n	2a24 <spi_cmd_rsp+0x5c>
    2a5c:	240b      	movs	r4, #11
    2a5e:	e7d1      	b.n	2a04 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    2a60:	22b8      	movs	r2, #184	; 0xb8
    2a62:	0052      	lsls	r2, r2, #1
    2a64:	4907      	ldr	r1, [pc, #28]	; (2a84 <spi_cmd_rsp+0xbc>)
    2a66:	4808      	ldr	r0, [pc, #32]	; (2a88 <spi_cmd_rsp+0xc0>)
    2a68:	4b08      	ldr	r3, [pc, #32]	; (2a8c <spi_cmd_rsp+0xc4>)
    2a6a:	4798      	blx	r3
    2a6c:	4808      	ldr	r0, [pc, #32]	; (2a90 <spi_cmd_rsp+0xc8>)
    2a6e:	4b09      	ldr	r3, [pc, #36]	; (2a94 <spi_cmd_rsp+0xcc>)
    2a70:	4798      	blx	r3
    2a72:	200d      	movs	r0, #13
    2a74:	4b08      	ldr	r3, [pc, #32]	; (2a98 <spi_cmd_rsp+0xd0>)
    2a76:	4798      	blx	r3
			goto _fail_;
    2a78:	e7d4      	b.n	2a24 <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    2a7a:	2501      	movs	r5, #1
    2a7c:	e7d2      	b.n	2a24 <spi_cmd_rsp+0x5c>
    2a7e:	46c0      	nop			; (mov r8, r8)
    2a80:	000029a9 	.word	0x000029a9
    2a84:	0000afc8 	.word	0x0000afc8
    2a88:	0000a8ec 	.word	0x0000a8ec
    2a8c:	00009539 	.word	0x00009539
    2a90:	0000b46c 	.word	0x0000b46c
    2a94:	00009655 	.word	0x00009655
    2a98:	0000956d 	.word	0x0000956d

00002a9c <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    2a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a9e:	46de      	mov	lr, fp
    2aa0:	4657      	mov	r7, sl
    2aa2:	464e      	mov	r6, r9
    2aa4:	4645      	mov	r5, r8
    2aa6:	b5e0      	push	{r5, r6, r7, lr}
    2aa8:	b087      	sub	sp, #28
    2aaa:	9001      	str	r0, [sp, #4]
    2aac:	4689      	mov	r9, r1
    2aae:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    2ab0:	2300      	movs	r3, #0
    2ab2:	469a      	mov	sl, r3
    2ab4:	2380      	movs	r3, #128	; 0x80
    2ab6:	019b      	lsls	r3, r3, #6
    2ab8:	469b      	mov	fp, r3
    2aba:	466a      	mov	r2, sp
    2abc:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2abe:	4b3b      	ldr	r3, [pc, #236]	; (2bac <spi_data_read+0x110>)
    2ac0:	4698      	mov	r8, r3
    2ac2:	e02e      	b.n	2b22 <spi_data_read+0x86>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    2ac4:	4a3a      	ldr	r2, [pc, #232]	; (2bb0 <spi_data_read+0x114>)
    2ac6:	493b      	ldr	r1, [pc, #236]	; (2bb4 <spi_data_read+0x118>)
    2ac8:	483b      	ldr	r0, [pc, #236]	; (2bb8 <spi_data_read+0x11c>)
    2aca:	4b3c      	ldr	r3, [pc, #240]	; (2bbc <spi_data_read+0x120>)
    2acc:	4798      	blx	r3
    2ace:	483c      	ldr	r0, [pc, #240]	; (2bc0 <spi_data_read+0x124>)
    2ad0:	4b3c      	ldr	r3, [pc, #240]	; (2bc4 <spi_data_read+0x128>)
    2ad2:	4798      	blx	r3
    2ad4:	200d      	movs	r0, #13
    2ad6:	4b3c      	ldr	r3, [pc, #240]	; (2bc8 <spi_data_read+0x12c>)
    2ad8:	4798      	blx	r3
    2ada:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    2adc:	0028      	movs	r0, r5
    2ade:	b007      	add	sp, #28
    2ae0:	bc3c      	pop	{r2, r3, r4, r5}
    2ae2:	4690      	mov	r8, r2
    2ae4:	4699      	mov	r9, r3
    2ae6:	46a2      	mov	sl, r4
    2ae8:	46ab      	mov	fp, r5
    2aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    2aec:	2c00      	cmp	r4, #0
    2aee:	dd2e      	ble.n	2b4e <spi_data_read+0xb2>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    2af0:	9b01      	ldr	r3, [sp, #4]
    2af2:	4453      	add	r3, sl
    2af4:	0018      	movs	r0, r3
    2af6:	0039      	movs	r1, r7
    2af8:	4b2c      	ldr	r3, [pc, #176]	; (2bac <spi_data_read+0x110>)
    2afa:	4798      	blx	r3
    2afc:	1e04      	subs	r4, r0, #0
    2afe:	d133      	bne.n	2b68 <spi_data_read+0xcc>
		if(!clockless)
    2b00:	9b02      	ldr	r3, [sp, #8]
    2b02:	2b00      	cmp	r3, #0
    2b04:	d103      	bne.n	2b0e <spi_data_read+0x72>
			if (!gu8Crc_off) {
    2b06:	4b31      	ldr	r3, [pc, #196]	; (2bcc <spi_data_read+0x130>)
    2b08:	781b      	ldrb	r3, [r3, #0]
    2b0a:	2b00      	cmp	r3, #0
    2b0c:	d039      	beq.n	2b82 <spi_data_read+0xe6>
		ix += nbytes;
    2b0e:	4653      	mov	r3, sl
    2b10:	18fb      	adds	r3, r7, r3
    2b12:	b21b      	sxth	r3, r3
    2b14:	469a      	mov	sl, r3
		sz -= nbytes;
    2b16:	464b      	mov	r3, r9
    2b18:	1bdf      	subs	r7, r3, r7
    2b1a:	b2bb      	uxth	r3, r7
    2b1c:	4699      	mov	r9, r3
	} while (sz);
    2b1e:	2b00      	cmp	r3, #0
    2b20:	d042      	beq.n	2ba8 <spi_data_read+0x10c>
    2b22:	464f      	mov	r7, r9
    2b24:	45d9      	cmp	r9, fp
    2b26:	d901      	bls.n	2b2c <spi_data_read+0x90>
    2b28:	466b      	mov	r3, sp
    2b2a:	89df      	ldrh	r7, [r3, #14]
    2b2c:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    2b2e:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2b30:	ab04      	add	r3, sp, #16
    2b32:	1cde      	adds	r6, r3, #3
    2b34:	2101      	movs	r1, #1
    2b36:	0030      	movs	r0, r6
    2b38:	47c0      	blx	r8
    2b3a:	1e05      	subs	r5, r0, #0
    2b3c:	d1c2      	bne.n	2ac4 <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    2b3e:	7833      	ldrb	r3, [r6, #0]
    2b40:	091b      	lsrs	r3, r3, #4
    2b42:	2b0f      	cmp	r3, #15
    2b44:	d0d2      	beq.n	2aec <spi_data_read+0x50>
    2b46:	3c01      	subs	r4, #1
    2b48:	b224      	sxth	r4, r4
		} while (retry--);
    2b4a:	1c63      	adds	r3, r4, #1
    2b4c:	d1f2      	bne.n	2b34 <spi_data_read+0x98>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    2b4e:	4a20      	ldr	r2, [pc, #128]	; (2bd0 <spi_data_read+0x134>)
    2b50:	4918      	ldr	r1, [pc, #96]	; (2bb4 <spi_data_read+0x118>)
    2b52:	4819      	ldr	r0, [pc, #100]	; (2bb8 <spi_data_read+0x11c>)
    2b54:	4c19      	ldr	r4, [pc, #100]	; (2bbc <spi_data_read+0x120>)
    2b56:	47a0      	blx	r4
    2b58:	ab04      	add	r3, sp, #16
    2b5a:	78d9      	ldrb	r1, [r3, #3]
    2b5c:	481d      	ldr	r0, [pc, #116]	; (2bd4 <spi_data_read+0x138>)
    2b5e:	47a0      	blx	r4
    2b60:	200d      	movs	r0, #13
    2b62:	4b19      	ldr	r3, [pc, #100]	; (2bc8 <spi_data_read+0x12c>)
    2b64:	4798      	blx	r3
			break;
    2b66:	e7b9      	b.n	2adc <spi_data_read+0x40>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    2b68:	22c5      	movs	r2, #197	; 0xc5
    2b6a:	0092      	lsls	r2, r2, #2
    2b6c:	4911      	ldr	r1, [pc, #68]	; (2bb4 <spi_data_read+0x118>)
    2b6e:	4812      	ldr	r0, [pc, #72]	; (2bb8 <spi_data_read+0x11c>)
    2b70:	4b12      	ldr	r3, [pc, #72]	; (2bbc <spi_data_read+0x120>)
    2b72:	4798      	blx	r3
    2b74:	4818      	ldr	r0, [pc, #96]	; (2bd8 <spi_data_read+0x13c>)
    2b76:	4b13      	ldr	r3, [pc, #76]	; (2bc4 <spi_data_read+0x128>)
    2b78:	4798      	blx	r3
    2b7a:	200d      	movs	r0, #13
    2b7c:	4b12      	ldr	r3, [pc, #72]	; (2bc8 <spi_data_read+0x12c>)
    2b7e:	4798      	blx	r3
			break;
    2b80:	e7ac      	b.n	2adc <spi_data_read+0x40>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    2b82:	2102      	movs	r1, #2
    2b84:	a805      	add	r0, sp, #20
    2b86:	4b09      	ldr	r3, [pc, #36]	; (2bac <spi_data_read+0x110>)
    2b88:	4798      	blx	r3
    2b8a:	2800      	cmp	r0, #0
    2b8c:	d0bf      	beq.n	2b0e <spi_data_read+0x72>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    2b8e:	4a13      	ldr	r2, [pc, #76]	; (2bdc <spi_data_read+0x140>)
    2b90:	4908      	ldr	r1, [pc, #32]	; (2bb4 <spi_data_read+0x118>)
    2b92:	4809      	ldr	r0, [pc, #36]	; (2bb8 <spi_data_read+0x11c>)
    2b94:	4b09      	ldr	r3, [pc, #36]	; (2bbc <spi_data_read+0x120>)
    2b96:	4798      	blx	r3
    2b98:	4811      	ldr	r0, [pc, #68]	; (2be0 <spi_data_read+0x144>)
    2b9a:	4b0a      	ldr	r3, [pc, #40]	; (2bc4 <spi_data_read+0x128>)
    2b9c:	4798      	blx	r3
    2b9e:	200d      	movs	r0, #13
    2ba0:	4b09      	ldr	r3, [pc, #36]	; (2bc8 <spi_data_read+0x12c>)
    2ba2:	4798      	blx	r3
					result = N_FAIL;
    2ba4:	0025      	movs	r5, r4
					break;
    2ba6:	e799      	b.n	2adc <spi_data_read+0x40>
    2ba8:	2501      	movs	r5, #1
    2baa:	e797      	b.n	2adc <spi_data_read+0x40>
    2bac:	000029a9 	.word	0x000029a9
    2bb0:	000002ff 	.word	0x000002ff
    2bb4:	0000afd4 	.word	0x0000afd4
    2bb8:	0000a8ec 	.word	0x0000a8ec
    2bbc:	00009539 	.word	0x00009539
    2bc0:	0000b4a0 	.word	0x0000b4a0
    2bc4:	00009655 	.word	0x00009655
    2bc8:	0000956d 	.word	0x0000956d
    2bcc:	2000009c 	.word	0x2000009c
    2bd0:	0000030b 	.word	0x0000030b
    2bd4:	0000b4d4 	.word	0x0000b4d4
    2bd8:	0000b504 	.word	0x0000b504
    2bdc:	0000031f 	.word	0x0000031f
    2be0:	0000b534 	.word	0x0000b534

00002be4 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    2be4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2be6:	46d6      	mov	lr, sl
    2be8:	464f      	mov	r7, r9
    2bea:	4646      	mov	r6, r8
    2bec:	b5c0      	push	{r6, r7, lr}
    2bee:	b086      	sub	sp, #24
    2bf0:	9003      	str	r0, [sp, #12]
    2bf2:	9104      	str	r1, [sp, #16]
    2bf4:	2830      	cmp	r0, #48	; 0x30
    2bf6:	d80f      	bhi.n	2c18 <spi_write_reg+0x34>
    2bf8:	4b30      	ldr	r3, [pc, #192]	; (2cbc <spi_write_reg+0xd8>)
    2bfa:	781f      	ldrb	r7, [r3, #0]
    2bfc:	b2fb      	uxtb	r3, r7
    2bfe:	9305      	str	r3, [sp, #20]
    2c00:	2300      	movs	r3, #0
    2c02:	2230      	movs	r2, #48	; 0x30
    2c04:	9903      	ldr	r1, [sp, #12]
    2c06:	428a      	cmp	r2, r1
    2c08:	415b      	adcs	r3, r3
    2c0a:	b2db      	uxtb	r3, r3
    2c0c:	469a      	mov	sl, r3
    2c0e:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    2c10:	4b2b      	ldr	r3, [pc, #172]	; (2cc0 <spi_write_reg+0xdc>)
    2c12:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    2c14:	46d1      	mov	r9, sl
    2c16:	e033      	b.n	2c80 <spi_write_reg+0x9c>
    2c18:	4b2a      	ldr	r3, [pc, #168]	; (2cc4 <spi_write_reg+0xe0>)
    2c1a:	781f      	ldrb	r7, [r3, #0]
    2c1c:	e7ee      	b.n	2bfc <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    2c1e:	9805      	ldr	r0, [sp, #20]
    2c20:	4b29      	ldr	r3, [pc, #164]	; (2cc8 <spi_write_reg+0xe4>)
    2c22:	4798      	blx	r3
    2c24:	0004      	movs	r4, r0
	if (result != N_OK) {
    2c26:	2801      	cmp	r0, #1
    2c28:	d041      	beq.n	2cae <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    2c2a:	22e7      	movs	r2, #231	; 0xe7
    2c2c:	0092      	lsls	r2, r2, #2
    2c2e:	4927      	ldr	r1, [pc, #156]	; (2ccc <spi_write_reg+0xe8>)
    2c30:	4827      	ldr	r0, [pc, #156]	; (2cd0 <spi_write_reg+0xec>)
    2c32:	4e28      	ldr	r6, [pc, #160]	; (2cd4 <spi_write_reg+0xf0>)
    2c34:	47b0      	blx	r6
    2c36:	9903      	ldr	r1, [sp, #12]
    2c38:	4827      	ldr	r0, [pc, #156]	; (2cd8 <spi_write_reg+0xf4>)
    2c3a:	47b0      	blx	r6
    2c3c:	200d      	movs	r0, #13
    2c3e:	4b27      	ldr	r3, [pc, #156]	; (2cdc <spi_write_reg+0xf8>)
    2c40:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    2c42:	2001      	movs	r0, #1
    2c44:	4e26      	ldr	r6, [pc, #152]	; (2ce0 <spi_write_reg+0xfc>)
    2c46:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2c48:	2300      	movs	r3, #0
    2c4a:	9300      	str	r3, [sp, #0]
    2c4c:	2200      	movs	r2, #0
    2c4e:	2100      	movs	r1, #0
    2c50:	20cf      	movs	r0, #207	; 0xcf
    2c52:	4f1b      	ldr	r7, [pc, #108]	; (2cc0 <spi_write_reg+0xdc>)
    2c54:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    2c56:	20cf      	movs	r0, #207	; 0xcf
    2c58:	4b1b      	ldr	r3, [pc, #108]	; (2cc8 <spi_write_reg+0xe4>)
    2c5a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    2c5c:	4a21      	ldr	r2, [pc, #132]	; (2ce4 <spi_write_reg+0x100>)
    2c5e:	491b      	ldr	r1, [pc, #108]	; (2ccc <spi_write_reg+0xe8>)
    2c60:	481b      	ldr	r0, [pc, #108]	; (2cd0 <spi_write_reg+0xec>)
    2c62:	4f1c      	ldr	r7, [pc, #112]	; (2cd4 <spi_write_reg+0xf0>)
    2c64:	47b8      	blx	r7
    2c66:	9b04      	ldr	r3, [sp, #16]
    2c68:	9a03      	ldr	r2, [sp, #12]
    2c6a:	0029      	movs	r1, r5
    2c6c:	481e      	ldr	r0, [pc, #120]	; (2ce8 <spi_write_reg+0x104>)
    2c6e:	47b8      	blx	r7
    2c70:	200d      	movs	r0, #13
    2c72:	4b1a      	ldr	r3, [pc, #104]	; (2cdc <spi_write_reg+0xf8>)
    2c74:	4798      	blx	r3
		nm_bsp_sleep(1);
    2c76:	2001      	movs	r0, #1
    2c78:	47b0      	blx	r6
    2c7a:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    2c7c:	2d00      	cmp	r5, #0
    2c7e:	d016      	beq.n	2cae <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    2c80:	464b      	mov	r3, r9
    2c82:	9300      	str	r3, [sp, #0]
    2c84:	2304      	movs	r3, #4
    2c86:	9a04      	ldr	r2, [sp, #16]
    2c88:	9f03      	ldr	r7, [sp, #12]
    2c8a:	0039      	movs	r1, r7
    2c8c:	9805      	ldr	r0, [sp, #20]
    2c8e:	47c0      	blx	r8
    2c90:	0004      	movs	r4, r0
	if (result != N_OK) {
    2c92:	2801      	cmp	r0, #1
    2c94:	d0c3      	beq.n	2c1e <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    2c96:	4a15      	ldr	r2, [pc, #84]	; (2cec <spi_write_reg+0x108>)
    2c98:	490c      	ldr	r1, [pc, #48]	; (2ccc <spi_write_reg+0xe8>)
    2c9a:	480d      	ldr	r0, [pc, #52]	; (2cd0 <spi_write_reg+0xec>)
    2c9c:	4e0d      	ldr	r6, [pc, #52]	; (2cd4 <spi_write_reg+0xf0>)
    2c9e:	47b0      	blx	r6
    2ca0:	0039      	movs	r1, r7
    2ca2:	4813      	ldr	r0, [pc, #76]	; (2cf0 <spi_write_reg+0x10c>)
    2ca4:	47b0      	blx	r6
    2ca6:	200d      	movs	r0, #13
    2ca8:	4b0c      	ldr	r3, [pc, #48]	; (2cdc <spi_write_reg+0xf8>)
    2caa:	4798      	blx	r3
		goto _FAIL_;
    2cac:	e7c9      	b.n	2c42 <spi_write_reg+0x5e>
	}

	return result;
}
    2cae:	0020      	movs	r0, r4
    2cb0:	b006      	add	sp, #24
    2cb2:	bc1c      	pop	{r2, r3, r4}
    2cb4:	4690      	mov	r8, r2
    2cb6:	4699      	mov	r9, r3
    2cb8:	46a2      	mov	sl, r4
    2cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2cbc:	0000afac 	.word	0x0000afac
    2cc0:	00002829 	.word	0x00002829
    2cc4:	0000afad 	.word	0x0000afad
    2cc8:	000029c9 	.word	0x000029c9
    2ccc:	0000aff4 	.word	0x0000aff4
    2cd0:	0000a8ec 	.word	0x0000a8ec
    2cd4:	00009539 	.word	0x00009539
    2cd8:	0000b62c 	.word	0x0000b62c
    2cdc:	0000956d 	.word	0x0000956d
    2ce0:	00000c79 	.word	0x00000c79
    2ce4:	000003af 	.word	0x000003af
    2ce8:	0000b664 	.word	0x0000b664
    2cec:	00000396 	.word	0x00000396
    2cf0:	0000b600 	.word	0x0000b600

00002cf4 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    2cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cf6:	46de      	mov	lr, fp
    2cf8:	4657      	mov	r7, sl
    2cfa:	464e      	mov	r6, r9
    2cfc:	4645      	mov	r5, r8
    2cfe:	b5e0      	push	{r5, r6, r7, lr}
    2d00:	b087      	sub	sp, #28
    2d02:	9002      	str	r0, [sp, #8]
    2d04:	468b      	mov	fp, r1
    2d06:	28ff      	cmp	r0, #255	; 0xff
    2d08:	d80f      	bhi.n	2d2a <spi_read_reg+0x36>
    2d0a:	4b41      	ldr	r3, [pc, #260]	; (2e10 <spi_read_reg+0x11c>)
    2d0c:	781f      	ldrb	r7, [r3, #0]
    2d0e:	b2fb      	uxtb	r3, r7
    2d10:	9303      	str	r3, [sp, #12]
    2d12:	2300      	movs	r3, #0
    2d14:	22ff      	movs	r2, #255	; 0xff
    2d16:	9902      	ldr	r1, [sp, #8]
    2d18:	428a      	cmp	r2, r1
    2d1a:	415b      	adcs	r3, r3
    2d1c:	b2db      	uxtb	r3, r3
    2d1e:	469a      	mov	sl, r3
    2d20:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    2d22:	4b3c      	ldr	r3, [pc, #240]	; (2e14 <spi_read_reg+0x120>)
    2d24:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    2d26:	46d1      	mov	r9, sl
    2d28:	e031      	b.n	2d8e <spi_read_reg+0x9a>
    2d2a:	4b3b      	ldr	r3, [pc, #236]	; (2e18 <spi_read_reg+0x124>)
    2d2c:	781f      	ldrb	r7, [r3, #0]
    2d2e:	e7ee      	b.n	2d0e <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    2d30:	9803      	ldr	r0, [sp, #12]
    2d32:	4b3a      	ldr	r3, [pc, #232]	; (2e1c <spi_read_reg+0x128>)
    2d34:	4798      	blx	r3
    2d36:	0004      	movs	r4, r0
	if (result != N_OK) {
    2d38:	2801      	cmp	r0, #1
    2d3a:	d03f      	beq.n	2dbc <spi_read_reg+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    2d3c:	4a38      	ldr	r2, [pc, #224]	; (2e20 <spi_read_reg+0x12c>)
    2d3e:	4939      	ldr	r1, [pc, #228]	; (2e24 <spi_read_reg+0x130>)
    2d40:	4839      	ldr	r0, [pc, #228]	; (2e28 <spi_read_reg+0x134>)
    2d42:	4e3a      	ldr	r6, [pc, #232]	; (2e2c <spi_read_reg+0x138>)
    2d44:	47b0      	blx	r6
    2d46:	9902      	ldr	r1, [sp, #8]
    2d48:	4839      	ldr	r0, [pc, #228]	; (2e30 <spi_read_reg+0x13c>)
    2d4a:	47b0      	blx	r6
    2d4c:	200d      	movs	r0, #13
    2d4e:	4b39      	ldr	r3, [pc, #228]	; (2e34 <spi_read_reg+0x140>)
    2d50:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    2d52:	2001      	movs	r0, #1
    2d54:	4e38      	ldr	r6, [pc, #224]	; (2e38 <spi_read_reg+0x144>)
    2d56:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2d58:	2300      	movs	r3, #0
    2d5a:	9300      	str	r3, [sp, #0]
    2d5c:	2200      	movs	r2, #0
    2d5e:	2100      	movs	r1, #0
    2d60:	20cf      	movs	r0, #207	; 0xcf
    2d62:	4f2c      	ldr	r7, [pc, #176]	; (2e14 <spi_read_reg+0x120>)
    2d64:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    2d66:	20cf      	movs	r0, #207	; 0xcf
    2d68:	4b2c      	ldr	r3, [pc, #176]	; (2e1c <spi_read_reg+0x128>)
    2d6a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    2d6c:	4a33      	ldr	r2, [pc, #204]	; (2e3c <spi_read_reg+0x148>)
    2d6e:	492d      	ldr	r1, [pc, #180]	; (2e24 <spi_read_reg+0x130>)
    2d70:	482d      	ldr	r0, [pc, #180]	; (2e28 <spi_read_reg+0x134>)
    2d72:	4f2e      	ldr	r7, [pc, #184]	; (2e2c <spi_read_reg+0x138>)
    2d74:	47b8      	blx	r7
    2d76:	9a02      	ldr	r2, [sp, #8]
    2d78:	0029      	movs	r1, r5
    2d7a:	4831      	ldr	r0, [pc, #196]	; (2e40 <spi_read_reg+0x14c>)
    2d7c:	47b8      	blx	r7
    2d7e:	200d      	movs	r0, #13
    2d80:	4b2c      	ldr	r3, [pc, #176]	; (2e34 <spi_read_reg+0x140>)
    2d82:	4798      	blx	r3
		nm_bsp_sleep(1);
    2d84:	2001      	movs	r0, #1
    2d86:	47b0      	blx	r6
    2d88:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    2d8a:	2d00      	cmp	r5, #0
    2d8c:	d037      	beq.n	2dfe <spi_read_reg+0x10a>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    2d8e:	464b      	mov	r3, r9
    2d90:	9300      	str	r3, [sp, #0]
    2d92:	2304      	movs	r3, #4
    2d94:	2200      	movs	r2, #0
    2d96:	9f02      	ldr	r7, [sp, #8]
    2d98:	0039      	movs	r1, r7
    2d9a:	9803      	ldr	r0, [sp, #12]
    2d9c:	47c0      	blx	r8
    2d9e:	0004      	movs	r4, r0
	if (result != N_OK) {
    2da0:	2801      	cmp	r0, #1
    2da2:	d0c5      	beq.n	2d30 <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    2da4:	4a27      	ldr	r2, [pc, #156]	; (2e44 <spi_read_reg+0x150>)
    2da6:	491f      	ldr	r1, [pc, #124]	; (2e24 <spi_read_reg+0x130>)
    2da8:	481f      	ldr	r0, [pc, #124]	; (2e28 <spi_read_reg+0x134>)
    2daa:	4e20      	ldr	r6, [pc, #128]	; (2e2c <spi_read_reg+0x138>)
    2dac:	47b0      	blx	r6
    2dae:	0039      	movs	r1, r7
    2db0:	4825      	ldr	r0, [pc, #148]	; (2e48 <spi_read_reg+0x154>)
    2db2:	47b0      	blx	r6
    2db4:	200d      	movs	r0, #13
    2db6:	4b1f      	ldr	r3, [pc, #124]	; (2e34 <spi_read_reg+0x140>)
    2db8:	4798      	blx	r3
		goto _FAIL_;
    2dba:	e7ca      	b.n	2d52 <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
    2dbc:	464a      	mov	r2, r9
    2dbe:	2104      	movs	r1, #4
    2dc0:	a805      	add	r0, sp, #20
    2dc2:	4b22      	ldr	r3, [pc, #136]	; (2e4c <spi_read_reg+0x158>)
    2dc4:	4798      	blx	r3
    2dc6:	0004      	movs	r4, r0
	if (result != N_OK) {
    2dc8:	2801      	cmp	r0, #1
    2dca:	d00b      	beq.n	2de4 <spi_read_reg+0xf0>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    2dcc:	4a20      	ldr	r2, [pc, #128]	; (2e50 <spi_read_reg+0x15c>)
    2dce:	4915      	ldr	r1, [pc, #84]	; (2e24 <spi_read_reg+0x130>)
    2dd0:	4815      	ldr	r0, [pc, #84]	; (2e28 <spi_read_reg+0x134>)
    2dd2:	4b16      	ldr	r3, [pc, #88]	; (2e2c <spi_read_reg+0x138>)
    2dd4:	4798      	blx	r3
    2dd6:	481f      	ldr	r0, [pc, #124]	; (2e54 <spi_read_reg+0x160>)
    2dd8:	4b1f      	ldr	r3, [pc, #124]	; (2e58 <spi_read_reg+0x164>)
    2dda:	4798      	blx	r3
    2ddc:	200d      	movs	r0, #13
    2dde:	4b15      	ldr	r3, [pc, #84]	; (2e34 <spi_read_reg+0x140>)
    2de0:	4798      	blx	r3
		goto _FAIL_;
    2de2:	e7b6      	b.n	2d52 <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
    2de4:	aa05      	add	r2, sp, #20
    2de6:	7853      	ldrb	r3, [r2, #1]
    2de8:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    2dea:	7891      	ldrb	r1, [r2, #2]
    2dec:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    2dee:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    2df0:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    2df2:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    2df4:	78d2      	ldrb	r2, [r2, #3]
    2df6:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    2df8:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    2dfa:	465a      	mov	r2, fp
    2dfc:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    2dfe:	0020      	movs	r0, r4
    2e00:	b007      	add	sp, #28
    2e02:	bc3c      	pop	{r2, r3, r4, r5}
    2e04:	4690      	mov	r8, r2
    2e06:	4699      	mov	r9, r3
    2e08:	46a2      	mov	sl, r4
    2e0a:	46ab      	mov	fp, r5
    2e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e0e:	46c0      	nop			; (mov r8, r8)
    2e10:	0000afae 	.word	0x0000afae
    2e14:	00002829 	.word	0x00002829
    2e18:	0000afaf 	.word	0x0000afaf
    2e1c:	000029c9 	.word	0x000029c9
    2e20:	0000041d 	.word	0x0000041d
    2e24:	0000b014 	.word	0x0000b014
    2e28:	0000a8ec 	.word	0x0000a8ec
    2e2c:	00009539 	.word	0x00009539
    2e30:	0000b594 	.word	0x0000b594
    2e34:	0000956d 	.word	0x0000956d
    2e38:	00000c79 	.word	0x00000c79
    2e3c:	0000043c 	.word	0x0000043c
    2e40:	0000b5e8 	.word	0x0000b5e8
    2e44:	00000417 	.word	0x00000417
    2e48:	0000b568 	.word	0x0000b568
    2e4c:	00002a9d 	.word	0x00002a9d
    2e50:	00000424 	.word	0x00000424
    2e54:	0000b5c8 	.word	0x0000b5c8
    2e58:	00009655 	.word	0x00009655

00002e5c <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    2e5c:	b510      	push	{r4, lr}
    2e5e:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2e60:	2300      	movs	r3, #0
    2e62:	9300      	str	r3, [sp, #0]
    2e64:	2200      	movs	r2, #0
    2e66:	2100      	movs	r1, #0
    2e68:	20cf      	movs	r0, #207	; 0xcf
    2e6a:	4c04      	ldr	r4, [pc, #16]	; (2e7c <nm_spi_reset+0x20>)
    2e6c:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    2e6e:	20cf      	movs	r0, #207	; 0xcf
    2e70:	4b03      	ldr	r3, [pc, #12]	; (2e80 <nm_spi_reset+0x24>)
    2e72:	4798      	blx	r3
	return M2M_SUCCESS;
}
    2e74:	2000      	movs	r0, #0
    2e76:	b002      	add	sp, #8
    2e78:	bd10      	pop	{r4, pc}
    2e7a:	46c0      	nop			; (mov r8, r8)
    2e7c:	00002829 	.word	0x00002829
    2e80:	000029c9 	.word	0x000029c9

00002e84 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    2e84:	2200      	movs	r2, #0
    2e86:	4b02      	ldr	r3, [pc, #8]	; (2e90 <nm_spi_deinit+0xc>)
    2e88:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    2e8a:	2000      	movs	r0, #0
    2e8c:	4770      	bx	lr
    2e8e:	46c0      	nop			; (mov r8, r8)
    2e90:	2000009c 	.word	0x2000009c

00002e94 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    2e94:	b500      	push	{lr}
    2e96:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    2e98:	a901      	add	r1, sp, #4
    2e9a:	4b02      	ldr	r3, [pc, #8]	; (2ea4 <nm_spi_read_reg+0x10>)
    2e9c:	4798      	blx	r3

	return u32Val;
}
    2e9e:	9801      	ldr	r0, [sp, #4]
    2ea0:	b003      	add	sp, #12
    2ea2:	bd00      	pop	{pc}
    2ea4:	00002cf5 	.word	0x00002cf5

00002ea8 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    2ea8:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    2eaa:	4b04      	ldr	r3, [pc, #16]	; (2ebc <nm_spi_read_reg_with_ret+0x14>)
    2eac:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2eae:	2300      	movs	r3, #0
    2eb0:	2801      	cmp	r0, #1
    2eb2:	d101      	bne.n	2eb8 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    2eb4:	0018      	movs	r0, r3
    2eb6:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    2eb8:	3b06      	subs	r3, #6
    2eba:	e7fb      	b.n	2eb4 <nm_spi_read_reg_with_ret+0xc>
    2ebc:	00002cf5 	.word	0x00002cf5

00002ec0 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    2ec0:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    2ec2:	4b04      	ldr	r3, [pc, #16]	; (2ed4 <nm_spi_write_reg+0x14>)
    2ec4:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2ec6:	2300      	movs	r3, #0
    2ec8:	2801      	cmp	r0, #1
    2eca:	d101      	bne.n	2ed0 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    2ecc:	0018      	movs	r0, r3
    2ece:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    2ed0:	3b06      	subs	r3, #6
    2ed2:	e7fb      	b.n	2ecc <nm_spi_write_reg+0xc>
    2ed4:	00002be5 	.word	0x00002be5

00002ed8 <nm_spi_init>:
{
    2ed8:	b510      	push	{r4, lr}
    2eda:	b082      	sub	sp, #8
	uint32 reg = 0;
    2edc:	2300      	movs	r3, #0
    2ede:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    2ee0:	4a35      	ldr	r2, [pc, #212]	; (2fb8 <nm_spi_init+0xe0>)
    2ee2:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    2ee4:	4669      	mov	r1, sp
    2ee6:	4835      	ldr	r0, [pc, #212]	; (2fbc <nm_spi_init+0xe4>)
    2ee8:	4b35      	ldr	r3, [pc, #212]	; (2fc0 <nm_spi_init+0xe8>)
    2eea:	4798      	blx	r3
    2eec:	2800      	cmp	r0, #0
    2eee:	d028      	beq.n	2f42 <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    2ef0:	4b31      	ldr	r3, [pc, #196]	; (2fb8 <nm_spi_init+0xe0>)
    2ef2:	781b      	ldrb	r3, [r3, #0]
    2ef4:	2b00      	cmp	r3, #0
    2ef6:	d10d      	bne.n	2f14 <nm_spi_init+0x3c>
		reg &= ~0x70;
    2ef8:	337c      	adds	r3, #124	; 0x7c
    2efa:	9900      	ldr	r1, [sp, #0]
    2efc:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    2efe:	3b2c      	subs	r3, #44	; 0x2c
    2f00:	4319      	orrs	r1, r3
    2f02:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    2f04:	482d      	ldr	r0, [pc, #180]	; (2fbc <nm_spi_init+0xe4>)
    2f06:	4b2f      	ldr	r3, [pc, #188]	; (2fc4 <nm_spi_init+0xec>)
    2f08:	4798      	blx	r3
    2f0a:	1e04      	subs	r4, r0, #0
    2f0c:	d039      	beq.n	2f82 <nm_spi_init+0xaa>
		gu8Crc_off = 1;
    2f0e:	2201      	movs	r2, #1
    2f10:	4b29      	ldr	r3, [pc, #164]	; (2fb8 <nm_spi_init+0xe0>)
    2f12:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    2f14:	a901      	add	r1, sp, #4
    2f16:	2080      	movs	r0, #128	; 0x80
    2f18:	0140      	lsls	r0, r0, #5
    2f1a:	4b29      	ldr	r3, [pc, #164]	; (2fc0 <nm_spi_init+0xe8>)
    2f1c:	4798      	blx	r3
    2f1e:	2800      	cmp	r0, #0
    2f20:	d03b      	beq.n	2f9a <nm_spi_init+0xc2>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    2f22:	4c26      	ldr	r4, [pc, #152]	; (2fbc <nm_spi_init+0xe4>)
    2f24:	0020      	movs	r0, r4
    2f26:	4b28      	ldr	r3, [pc, #160]	; (2fc8 <nm_spi_init+0xf0>)
    2f28:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    2f2a:	2370      	movs	r3, #112	; 0x70
    2f2c:	0001      	movs	r1, r0
    2f2e:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    2f30:	2050      	movs	r0, #80	; 0x50
    2f32:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    2f34:	0020      	movs	r0, r4
    2f36:	4b25      	ldr	r3, [pc, #148]	; (2fcc <nm_spi_init+0xf4>)
    2f38:	4798      	blx	r3
	return M2M_SUCCESS;
    2f3a:	2400      	movs	r4, #0
}
    2f3c:	0020      	movs	r0, r4
    2f3e:	b002      	add	sp, #8
    2f40:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    2f42:	2201      	movs	r2, #1
    2f44:	4b1c      	ldr	r3, [pc, #112]	; (2fb8 <nm_spi_init+0xe0>)
    2f46:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    2f48:	4a21      	ldr	r2, [pc, #132]	; (2fd0 <nm_spi_init+0xf8>)
    2f4a:	4922      	ldr	r1, [pc, #136]	; (2fd4 <nm_spi_init+0xfc>)
    2f4c:	4822      	ldr	r0, [pc, #136]	; (2fd8 <nm_spi_init+0x100>)
    2f4e:	4b23      	ldr	r3, [pc, #140]	; (2fdc <nm_spi_init+0x104>)
    2f50:	4798      	blx	r3
    2f52:	4823      	ldr	r0, [pc, #140]	; (2fe0 <nm_spi_init+0x108>)
    2f54:	4b23      	ldr	r3, [pc, #140]	; (2fe4 <nm_spi_init+0x10c>)
    2f56:	4798      	blx	r3
    2f58:	200d      	movs	r0, #13
    2f5a:	4b23      	ldr	r3, [pc, #140]	; (2fe8 <nm_spi_init+0x110>)
    2f5c:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    2f5e:	4669      	mov	r1, sp
    2f60:	4816      	ldr	r0, [pc, #88]	; (2fbc <nm_spi_init+0xe4>)
    2f62:	4b17      	ldr	r3, [pc, #92]	; (2fc0 <nm_spi_init+0xe8>)
    2f64:	4798      	blx	r3
    2f66:	1e04      	subs	r4, r0, #0
    2f68:	d1c2      	bne.n	2ef0 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    2f6a:	4a20      	ldr	r2, [pc, #128]	; (2fec <nm_spi_init+0x114>)
    2f6c:	4919      	ldr	r1, [pc, #100]	; (2fd4 <nm_spi_init+0xfc>)
    2f6e:	481a      	ldr	r0, [pc, #104]	; (2fd8 <nm_spi_init+0x100>)
    2f70:	4b1a      	ldr	r3, [pc, #104]	; (2fdc <nm_spi_init+0x104>)
    2f72:	4798      	blx	r3
    2f74:	481e      	ldr	r0, [pc, #120]	; (2ff0 <nm_spi_init+0x118>)
    2f76:	4b1b      	ldr	r3, [pc, #108]	; (2fe4 <nm_spi_init+0x10c>)
    2f78:	4798      	blx	r3
    2f7a:	200d      	movs	r0, #13
    2f7c:	4b1a      	ldr	r3, [pc, #104]	; (2fe8 <nm_spi_init+0x110>)
    2f7e:	4798      	blx	r3
			return 0;
    2f80:	e7dc      	b.n	2f3c <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    2f82:	4a1c      	ldr	r2, [pc, #112]	; (2ff4 <nm_spi_init+0x11c>)
    2f84:	4913      	ldr	r1, [pc, #76]	; (2fd4 <nm_spi_init+0xfc>)
    2f86:	4814      	ldr	r0, [pc, #80]	; (2fd8 <nm_spi_init+0x100>)
    2f88:	4b14      	ldr	r3, [pc, #80]	; (2fdc <nm_spi_init+0x104>)
    2f8a:	4798      	blx	r3
    2f8c:	481a      	ldr	r0, [pc, #104]	; (2ff8 <nm_spi_init+0x120>)
    2f8e:	4b15      	ldr	r3, [pc, #84]	; (2fe4 <nm_spi_init+0x10c>)
    2f90:	4798      	blx	r3
    2f92:	200d      	movs	r0, #13
    2f94:	4b14      	ldr	r3, [pc, #80]	; (2fe8 <nm_spi_init+0x110>)
    2f96:	4798      	blx	r3
			return 0;
    2f98:	e7d0      	b.n	2f3c <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    2f9a:	4a18      	ldr	r2, [pc, #96]	; (2ffc <nm_spi_init+0x124>)
    2f9c:	490d      	ldr	r1, [pc, #52]	; (2fd4 <nm_spi_init+0xfc>)
    2f9e:	480e      	ldr	r0, [pc, #56]	; (2fd8 <nm_spi_init+0x100>)
    2fa0:	4b0e      	ldr	r3, [pc, #56]	; (2fdc <nm_spi_init+0x104>)
    2fa2:	4798      	blx	r3
    2fa4:	4816      	ldr	r0, [pc, #88]	; (3000 <nm_spi_init+0x128>)
    2fa6:	4b0f      	ldr	r3, [pc, #60]	; (2fe4 <nm_spi_init+0x10c>)
    2fa8:	4798      	blx	r3
    2faa:	200d      	movs	r0, #13
    2fac:	4b0e      	ldr	r3, [pc, #56]	; (2fe8 <nm_spi_init+0x110>)
    2fae:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    2fb0:	2406      	movs	r4, #6
    2fb2:	4264      	negs	r4, r4
    2fb4:	e7c2      	b.n	2f3c <nm_spi_init+0x64>
    2fb6:	46c0      	nop			; (mov r8, r8)
    2fb8:	2000009c 	.word	0x2000009c
    2fbc:	0000e824 	.word	0x0000e824
    2fc0:	00002cf5 	.word	0x00002cf5
    2fc4:	00002be5 	.word	0x00002be5
    2fc8:	00002e95 	.word	0x00002e95
    2fcc:	00002ec1 	.word	0x00002ec1
    2fd0:	000004c7 	.word	0x000004c7
    2fd4:	0000b030 	.word	0x0000b030
    2fd8:	0000a8ec 	.word	0x0000a8ec
    2fdc:	00009539 	.word	0x00009539
    2fe0:	0000b13c 	.word	0x0000b13c
    2fe4:	00009655 	.word	0x00009655
    2fe8:	0000956d 	.word	0x0000956d
    2fec:	000004ca 	.word	0x000004ca
    2ff0:	0000b18c 	.word	0x0000b18c
    2ff4:	000004d4 	.word	0x000004d4
    2ff8:	0000b1b8 	.word	0x0000b1b8
    2ffc:	000004de 	.word	0x000004de
    3000:	0000b1ec 	.word	0x0000b1ec

00003004 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    3004:	b5f0      	push	{r4, r5, r6, r7, lr}
    3006:	46de      	mov	lr, fp
    3008:	4657      	mov	r7, sl
    300a:	464e      	mov	r6, r9
    300c:	4645      	mov	r5, r8
    300e:	b5e0      	push	{r5, r6, r7, lr}
    3010:	b087      	sub	sp, #28
    3012:	9002      	str	r0, [sp, #8]
    3014:	9103      	str	r1, [sp, #12]
    3016:	0016      	movs	r6, r2
    3018:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    301a:	2300      	movs	r3, #0
    301c:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    301e:	2400      	movs	r4, #0
    3020:	4b3e      	ldr	r3, [pc, #248]	; (311c <nm_spi_read_block+0x118>)
    3022:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    3024:	46a9      	mov	r9, r5
    3026:	e037      	b.n	3098 <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    3028:	2301      	movs	r3, #1
    302a:	469b      	mov	fp, r3
		size = 2;
    302c:	3601      	adds	r6, #1
    302e:	e035      	b.n	309c <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    3030:	20c8      	movs	r0, #200	; 0xc8
    3032:	4b3b      	ldr	r3, [pc, #236]	; (3120 <nm_spi_read_block+0x11c>)
    3034:	4798      	blx	r3
	if (result != N_OK) {
    3036:	2801      	cmp	r0, #1
    3038:	d045      	beq.n	30c6 <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    303a:	4a3a      	ldr	r2, [pc, #232]	; (3124 <nm_spi_read_block+0x120>)
    303c:	493a      	ldr	r1, [pc, #232]	; (3128 <nm_spi_read_block+0x124>)
    303e:	483b      	ldr	r0, [pc, #236]	; (312c <nm_spi_read_block+0x128>)
    3040:	4f3b      	ldr	r7, [pc, #236]	; (3130 <nm_spi_read_block+0x12c>)
    3042:	47b8      	blx	r7
    3044:	9902      	ldr	r1, [sp, #8]
    3046:	483b      	ldr	r0, [pc, #236]	; (3134 <nm_spi_read_block+0x130>)
    3048:	47b8      	blx	r7
    304a:	200d      	movs	r0, #13
    304c:	4b3a      	ldr	r3, [pc, #232]	; (3138 <nm_spi_read_block+0x134>)
    304e:	4798      	blx	r3
		nm_bsp_sleep(1);
    3050:	2001      	movs	r0, #1
    3052:	4f3a      	ldr	r7, [pc, #232]	; (313c <nm_spi_read_block+0x138>)
    3054:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3056:	9400      	str	r4, [sp, #0]
    3058:	0023      	movs	r3, r4
    305a:	0022      	movs	r2, r4
    305c:	0021      	movs	r1, r4
    305e:	20cf      	movs	r0, #207	; 0xcf
    3060:	4d2e      	ldr	r5, [pc, #184]	; (311c <nm_spi_read_block+0x118>)
    3062:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    3064:	20cf      	movs	r0, #207	; 0xcf
    3066:	4b2e      	ldr	r3, [pc, #184]	; (3120 <nm_spi_read_block+0x11c>)
    3068:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    306a:	4a35      	ldr	r2, [pc, #212]	; (3140 <nm_spi_read_block+0x13c>)
    306c:	492e      	ldr	r1, [pc, #184]	; (3128 <nm_spi_read_block+0x124>)
    306e:	482f      	ldr	r0, [pc, #188]	; (312c <nm_spi_read_block+0x128>)
    3070:	4b2f      	ldr	r3, [pc, #188]	; (3130 <nm_spi_read_block+0x12c>)
    3072:	469a      	mov	sl, r3
    3074:	4798      	blx	r3
    3076:	0033      	movs	r3, r6
    3078:	9a02      	ldr	r2, [sp, #8]
    307a:	4649      	mov	r1, r9
    307c:	4831      	ldr	r0, [pc, #196]	; (3144 <nm_spi_read_block+0x140>)
    307e:	47d0      	blx	sl
    3080:	200d      	movs	r0, #13
    3082:	4b2d      	ldr	r3, [pc, #180]	; (3138 <nm_spi_read_block+0x134>)
    3084:	4798      	blx	r3
		nm_bsp_sleep(1);
    3086:	2001      	movs	r0, #1
    3088:	47b8      	blx	r7
    308a:	2301      	movs	r3, #1
    308c:	425b      	negs	r3, r3
    308e:	469c      	mov	ip, r3
    3090:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    3092:	464b      	mov	r3, r9
    3094:	2b00      	cmp	r3, #0
    3096:	d038      	beq.n	310a <nm_spi_read_block+0x106>
	if (size == 1)
    3098:	2e01      	cmp	r6, #1
    309a:	d0c5      	beq.n	3028 <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    309c:	9400      	str	r4, [sp, #0]
    309e:	0033      	movs	r3, r6
    30a0:	0022      	movs	r2, r4
    30a2:	9d02      	ldr	r5, [sp, #8]
    30a4:	0029      	movs	r1, r5
    30a6:	20c8      	movs	r0, #200	; 0xc8
    30a8:	47c0      	blx	r8
	if (result != N_OK) {
    30aa:	2801      	cmp	r0, #1
    30ac:	d0c0      	beq.n	3030 <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    30ae:	4a26      	ldr	r2, [pc, #152]	; (3148 <nm_spi_read_block+0x144>)
    30b0:	491d      	ldr	r1, [pc, #116]	; (3128 <nm_spi_read_block+0x124>)
    30b2:	481e      	ldr	r0, [pc, #120]	; (312c <nm_spi_read_block+0x128>)
    30b4:	4f1e      	ldr	r7, [pc, #120]	; (3130 <nm_spi_read_block+0x12c>)
    30b6:	47b8      	blx	r7
    30b8:	0029      	movs	r1, r5
    30ba:	4824      	ldr	r0, [pc, #144]	; (314c <nm_spi_read_block+0x148>)
    30bc:	47b8      	blx	r7
    30be:	200d      	movs	r0, #13
    30c0:	4b1d      	ldr	r3, [pc, #116]	; (3138 <nm_spi_read_block+0x134>)
    30c2:	4798      	blx	r3
    30c4:	e7c4      	b.n	3050 <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    30c6:	465b      	mov	r3, fp
    30c8:	2b00      	cmp	r3, #0
    30ca:	d016      	beq.n	30fa <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    30cc:	af05      	add	r7, sp, #20
    30ce:	0022      	movs	r2, r4
    30d0:	0031      	movs	r1, r6
    30d2:	0038      	movs	r0, r7
    30d4:	4b1e      	ldr	r3, [pc, #120]	; (3150 <nm_spi_read_block+0x14c>)
    30d6:	4798      	blx	r3
		buf[0] = tmp[0];
    30d8:	783b      	ldrb	r3, [r7, #0]
    30da:	9a03      	ldr	r2, [sp, #12]
    30dc:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    30de:	2801      	cmp	r0, #1
    30e0:	d011      	beq.n	3106 <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    30e2:	4a1c      	ldr	r2, [pc, #112]	; (3154 <nm_spi_read_block+0x150>)
    30e4:	4910      	ldr	r1, [pc, #64]	; (3128 <nm_spi_read_block+0x124>)
    30e6:	4811      	ldr	r0, [pc, #68]	; (312c <nm_spi_read_block+0x128>)
    30e8:	4b11      	ldr	r3, [pc, #68]	; (3130 <nm_spi_read_block+0x12c>)
    30ea:	4798      	blx	r3
    30ec:	481a      	ldr	r0, [pc, #104]	; (3158 <nm_spi_read_block+0x154>)
    30ee:	4b1b      	ldr	r3, [pc, #108]	; (315c <nm_spi_read_block+0x158>)
    30f0:	4798      	blx	r3
    30f2:	200d      	movs	r0, #13
    30f4:	4b10      	ldr	r3, [pc, #64]	; (3138 <nm_spi_read_block+0x134>)
    30f6:	4798      	blx	r3
    30f8:	e7aa      	b.n	3050 <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    30fa:	0022      	movs	r2, r4
    30fc:	0031      	movs	r1, r6
    30fe:	9803      	ldr	r0, [sp, #12]
    3100:	4b13      	ldr	r3, [pc, #76]	; (3150 <nm_spi_read_block+0x14c>)
    3102:	4798      	blx	r3
    3104:	e7eb      	b.n	30de <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    3106:	2000      	movs	r0, #0
    3108:	e001      	b.n	310e <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    310a:	2006      	movs	r0, #6
    310c:	4240      	negs	r0, r0

	return s8Ret;
}
    310e:	b007      	add	sp, #28
    3110:	bc3c      	pop	{r2, r3, r4, r5}
    3112:	4690      	mov	r8, r2
    3114:	4699      	mov	r9, r3
    3116:	46a2      	mov	sl, r4
    3118:	46ab      	mov	fp, r5
    311a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    311c:	00002829 	.word	0x00002829
    3120:	000029c9 	.word	0x000029c9
    3124:	00000463 	.word	0x00000463
    3128:	0000b024 	.word	0x0000b024
    312c:	0000a8ec 	.word	0x0000a8ec
    3130:	00009539 	.word	0x00009539
    3134:	0000b240 	.word	0x0000b240
    3138:	0000956d 	.word	0x0000956d
    313c:	00000c79 	.word	0x00000c79
    3140:	00000484 	.word	0x00000484
    3144:	0000b2a0 	.word	0x0000b2a0
    3148:	0000045d 	.word	0x0000045d
    314c:	0000b210 	.word	0x0000b210
    3150:	00002a9d 	.word	0x00002a9d
    3154:	00000473 	.word	0x00000473
    3158:	0000b278 	.word	0x0000b278
    315c:	00009655 	.word	0x00009655

00003160 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    3160:	b5f0      	push	{r4, r5, r6, r7, lr}
    3162:	46de      	mov	lr, fp
    3164:	4647      	mov	r7, r8
    3166:	b580      	push	{r7, lr}
    3168:	b089      	sub	sp, #36	; 0x24
    316a:	9004      	str	r0, [sp, #16]
    316c:	468b      	mov	fp, r1
    316e:	9203      	str	r2, [sp, #12]
    3170:	260a      	movs	r6, #10
    3172:	2780      	movs	r7, #128	; 0x80
    3174:	01bf      	lsls	r7, r7, #6
    3176:	466b      	mov	r3, sp
    3178:	82df      	strh	r7, [r3, #22]
    317a:	0035      	movs	r5, r6
    317c:	e02d      	b.n	31da <nm_spi_write_block+0x7a>
		size = 2;
    317e:	3301      	adds	r3, #1
    3180:	9303      	str	r3, [sp, #12]
    3182:	e02d      	b.n	31e0 <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    3184:	4a83      	ldr	r2, [pc, #524]	; (3394 <nm_spi_write_block+0x234>)
    3186:	4984      	ldr	r1, [pc, #528]	; (3398 <nm_spi_write_block+0x238>)
    3188:	4884      	ldr	r0, [pc, #528]	; (339c <nm_spi_write_block+0x23c>)
    318a:	4c85      	ldr	r4, [pc, #532]	; (33a0 <nm_spi_write_block+0x240>)
    318c:	47a0      	blx	r4
    318e:	0031      	movs	r1, r6
    3190:	4884      	ldr	r0, [pc, #528]	; (33a4 <nm_spi_write_block+0x244>)
    3192:	47a0      	blx	r4
    3194:	200d      	movs	r0, #13
    3196:	4b84      	ldr	r3, [pc, #528]	; (33a8 <nm_spi_write_block+0x248>)
    3198:	4798      	blx	r3
		nm_bsp_sleep(1);
    319a:	2001      	movs	r0, #1
    319c:	4c83      	ldr	r4, [pc, #524]	; (33ac <nm_spi_write_block+0x24c>)
    319e:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    31a0:	2300      	movs	r3, #0
    31a2:	9300      	str	r3, [sp, #0]
    31a4:	2200      	movs	r2, #0
    31a6:	2100      	movs	r1, #0
    31a8:	20cf      	movs	r0, #207	; 0xcf
    31aa:	4e81      	ldr	r6, [pc, #516]	; (33b0 <nm_spi_write_block+0x250>)
    31ac:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    31ae:	20cf      	movs	r0, #207	; 0xcf
    31b0:	4b80      	ldr	r3, [pc, #512]	; (33b4 <nm_spi_write_block+0x254>)
    31b2:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    31b4:	4a80      	ldr	r2, [pc, #512]	; (33b8 <nm_spi_write_block+0x258>)
    31b6:	4978      	ldr	r1, [pc, #480]	; (3398 <nm_spi_write_block+0x238>)
    31b8:	4878      	ldr	r0, [pc, #480]	; (339c <nm_spi_write_block+0x23c>)
    31ba:	4e79      	ldr	r6, [pc, #484]	; (33a0 <nm_spi_write_block+0x240>)
    31bc:	47b0      	blx	r6
    31be:	9b03      	ldr	r3, [sp, #12]
    31c0:	9a04      	ldr	r2, [sp, #16]
    31c2:	0029      	movs	r1, r5
    31c4:	487d      	ldr	r0, [pc, #500]	; (33bc <nm_spi_write_block+0x25c>)
    31c6:	47b0      	blx	r6
    31c8:	200d      	movs	r0, #13
    31ca:	4b77      	ldr	r3, [pc, #476]	; (33a8 <nm_spi_write_block+0x248>)
    31cc:	4798      	blx	r3
		nm_bsp_sleep(1);
    31ce:	2001      	movs	r0, #1
    31d0:	47a0      	blx	r4
    31d2:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    31d4:	2d00      	cmp	r5, #0
    31d6:	d100      	bne.n	31da <nm_spi_write_block+0x7a>
    31d8:	e0d5      	b.n	3386 <nm_spi_write_block+0x226>
	if (size == 1)
    31da:	9b03      	ldr	r3, [sp, #12]
    31dc:	2b01      	cmp	r3, #1
    31de:	d0ce      	beq.n	317e <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    31e0:	2300      	movs	r3, #0
    31e2:	9300      	str	r3, [sp, #0]
    31e4:	9b03      	ldr	r3, [sp, #12]
    31e6:	2200      	movs	r2, #0
    31e8:	9e04      	ldr	r6, [sp, #16]
    31ea:	0031      	movs	r1, r6
    31ec:	20c7      	movs	r0, #199	; 0xc7
    31ee:	4c70      	ldr	r4, [pc, #448]	; (33b0 <nm_spi_write_block+0x250>)
    31f0:	47a0      	blx	r4
	if (result != N_OK) {
    31f2:	2801      	cmp	r0, #1
    31f4:	d1c6      	bne.n	3184 <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    31f6:	20c7      	movs	r0, #199	; 0xc7
    31f8:	4b6e      	ldr	r3, [pc, #440]	; (33b4 <nm_spi_write_block+0x254>)
    31fa:	4798      	blx	r3
	if (result != N_OK) {
    31fc:	2801      	cmp	r0, #1
    31fe:	d00c      	beq.n	321a <nm_spi_write_block+0xba>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    3200:	22f4      	movs	r2, #244	; 0xf4
    3202:	0092      	lsls	r2, r2, #2
    3204:	4964      	ldr	r1, [pc, #400]	; (3398 <nm_spi_write_block+0x238>)
    3206:	4865      	ldr	r0, [pc, #404]	; (339c <nm_spi_write_block+0x23c>)
    3208:	4c65      	ldr	r4, [pc, #404]	; (33a0 <nm_spi_write_block+0x240>)
    320a:	47a0      	blx	r4
    320c:	9904      	ldr	r1, [sp, #16]
    320e:	486c      	ldr	r0, [pc, #432]	; (33c0 <nm_spi_write_block+0x260>)
    3210:	47a0      	blx	r4
    3212:	200d      	movs	r0, #13
    3214:	4b64      	ldr	r3, [pc, #400]	; (33a8 <nm_spi_write_block+0x248>)
    3216:	4798      	blx	r3
    3218:	e7bf      	b.n	319a <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    321a:	2200      	movs	r2, #0
    321c:	ab07      	add	r3, sp, #28
    321e:	801a      	strh	r2, [r3, #0]
    3220:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    3222:	2600      	movs	r6, #0
				order = 0x1;
    3224:	46a8      	mov	r8, r5
    3226:	0035      	movs	r5, r6
    3228:	0026      	movs	r6, r4
    322a:	e021      	b.n	3270 <nm_spi_write_block+0x110>
				order = 0x2;
    322c:	2300      	movs	r3, #0
    322e:	42b7      	cmp	r7, r6
    3230:	415b      	adcs	r3, r3
    3232:	3302      	adds	r3, #2
		cmd |= order;
    3234:	200b      	movs	r0, #11
    3236:	aa04      	add	r2, sp, #16
    3238:	4694      	mov	ip, r2
    323a:	4460      	add	r0, ip
    323c:	2210      	movs	r2, #16
    323e:	4252      	negs	r2, r2
    3240:	4313      	orrs	r3, r2
    3242:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    3244:	2101      	movs	r1, #1
    3246:	4b5f      	ldr	r3, [pc, #380]	; (33c4 <nm_spi_write_block+0x264>)
    3248:	4798      	blx	r3
    324a:	2800      	cmp	r0, #0
    324c:	d11d      	bne.n	328a <nm_spi_write_block+0x12a>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    324e:	465b      	mov	r3, fp
    3250:	1958      	adds	r0, r3, r5
    3252:	0021      	movs	r1, r4
    3254:	4b5b      	ldr	r3, [pc, #364]	; (33c4 <nm_spi_write_block+0x264>)
    3256:	4798      	blx	r3
    3258:	2800      	cmp	r0, #0
    325a:	d130      	bne.n	32be <nm_spi_write_block+0x15e>
		if (!gu8Crc_off) {
    325c:	4b5a      	ldr	r3, [pc, #360]	; (33c8 <nm_spi_write_block+0x268>)
    325e:	781b      	ldrb	r3, [r3, #0]
    3260:	2b00      	cmp	r3, #0
    3262:	d039      	beq.n	32d8 <nm_spi_write_block+0x178>
		ix += nbytes;
    3264:	1965      	adds	r5, r4, r5
    3266:	b22d      	sxth	r5, r5
		sz -= nbytes;
    3268:	1b36      	subs	r6, r6, r4
    326a:	b2b6      	uxth	r6, r6
	} while (sz);
    326c:	2e00      	cmp	r6, #0
    326e:	d053      	beq.n	3318 <nm_spi_write_block+0x1b8>
    3270:	1c34      	adds	r4, r6, #0
    3272:	42be      	cmp	r6, r7
    3274:	d901      	bls.n	327a <nm_spi_write_block+0x11a>
    3276:	466b      	mov	r3, sp
    3278:	8adc      	ldrh	r4, [r3, #22]
    327a:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    327c:	2d00      	cmp	r5, #0
    327e:	d1d5      	bne.n	322c <nm_spi_write_block+0xcc>
				order = 0x3;
    3280:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    3282:	42be      	cmp	r6, r7
    3284:	d9d6      	bls.n	3234 <nm_spi_write_block+0xd4>
				order = 0x1;
    3286:	3b02      	subs	r3, #2
    3288:	e7d4      	b.n	3234 <nm_spi_write_block+0xd4>
    328a:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    328c:	22d4      	movs	r2, #212	; 0xd4
    328e:	0092      	lsls	r2, r2, #2
    3290:	494e      	ldr	r1, [pc, #312]	; (33cc <nm_spi_write_block+0x26c>)
    3292:	4842      	ldr	r0, [pc, #264]	; (339c <nm_spi_write_block+0x23c>)
    3294:	4b42      	ldr	r3, [pc, #264]	; (33a0 <nm_spi_write_block+0x240>)
    3296:	4798      	blx	r3
    3298:	484d      	ldr	r0, [pc, #308]	; (33d0 <nm_spi_write_block+0x270>)
    329a:	4b4e      	ldr	r3, [pc, #312]	; (33d4 <nm_spi_write_block+0x274>)
    329c:	4798      	blx	r3
    329e:	200d      	movs	r0, #13
    32a0:	4b41      	ldr	r3, [pc, #260]	; (33a8 <nm_spi_write_block+0x248>)
    32a2:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    32a4:	22f8      	movs	r2, #248	; 0xf8
    32a6:	0092      	lsls	r2, r2, #2
    32a8:	493b      	ldr	r1, [pc, #236]	; (3398 <nm_spi_write_block+0x238>)
    32aa:	483c      	ldr	r0, [pc, #240]	; (339c <nm_spi_write_block+0x23c>)
    32ac:	4b3c      	ldr	r3, [pc, #240]	; (33a0 <nm_spi_write_block+0x240>)
    32ae:	4798      	blx	r3
    32b0:	4849      	ldr	r0, [pc, #292]	; (33d8 <nm_spi_write_block+0x278>)
    32b2:	4b48      	ldr	r3, [pc, #288]	; (33d4 <nm_spi_write_block+0x274>)
    32b4:	4798      	blx	r3
    32b6:	200d      	movs	r0, #13
    32b8:	4b3b      	ldr	r3, [pc, #236]	; (33a8 <nm_spi_write_block+0x248>)
    32ba:	4798      	blx	r3
    32bc:	e76d      	b.n	319a <nm_spi_write_block+0x3a>
    32be:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    32c0:	4a46      	ldr	r2, [pc, #280]	; (33dc <nm_spi_write_block+0x27c>)
    32c2:	4942      	ldr	r1, [pc, #264]	; (33cc <nm_spi_write_block+0x26c>)
    32c4:	4835      	ldr	r0, [pc, #212]	; (339c <nm_spi_write_block+0x23c>)
    32c6:	4b36      	ldr	r3, [pc, #216]	; (33a0 <nm_spi_write_block+0x240>)
    32c8:	4798      	blx	r3
    32ca:	4845      	ldr	r0, [pc, #276]	; (33e0 <nm_spi_write_block+0x280>)
    32cc:	4b41      	ldr	r3, [pc, #260]	; (33d4 <nm_spi_write_block+0x274>)
    32ce:	4798      	blx	r3
    32d0:	200d      	movs	r0, #13
    32d2:	4b35      	ldr	r3, [pc, #212]	; (33a8 <nm_spi_write_block+0x248>)
    32d4:	4798      	blx	r3
    32d6:	e7e5      	b.n	32a4 <nm_spi_write_block+0x144>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    32d8:	2102      	movs	r1, #2
    32da:	a807      	add	r0, sp, #28
    32dc:	4b39      	ldr	r3, [pc, #228]	; (33c4 <nm_spi_write_block+0x264>)
    32de:	4798      	blx	r3
    32e0:	2800      	cmp	r0, #0
    32e2:	d0bf      	beq.n	3264 <nm_spi_write_block+0x104>
    32e4:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    32e6:	4a3f      	ldr	r2, [pc, #252]	; (33e4 <nm_spi_write_block+0x284>)
    32e8:	4938      	ldr	r1, [pc, #224]	; (33cc <nm_spi_write_block+0x26c>)
    32ea:	482c      	ldr	r0, [pc, #176]	; (339c <nm_spi_write_block+0x23c>)
    32ec:	4b2c      	ldr	r3, [pc, #176]	; (33a0 <nm_spi_write_block+0x240>)
    32ee:	4798      	blx	r3
    32f0:	483d      	ldr	r0, [pc, #244]	; (33e8 <nm_spi_write_block+0x288>)
    32f2:	4b38      	ldr	r3, [pc, #224]	; (33d4 <nm_spi_write_block+0x274>)
    32f4:	4798      	blx	r3
    32f6:	200d      	movs	r0, #13
    32f8:	4b2b      	ldr	r3, [pc, #172]	; (33a8 <nm_spi_write_block+0x248>)
    32fa:	4798      	blx	r3
    32fc:	e7d2      	b.n	32a4 <nm_spi_write_block+0x144>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    32fe:	223c      	movs	r2, #60	; 0x3c
    3300:	32ff      	adds	r2, #255	; 0xff
    3302:	493a      	ldr	r1, [pc, #232]	; (33ec <nm_spi_write_block+0x28c>)
    3304:	4825      	ldr	r0, [pc, #148]	; (339c <nm_spi_write_block+0x23c>)
    3306:	4b26      	ldr	r3, [pc, #152]	; (33a0 <nm_spi_write_block+0x240>)
    3308:	4798      	blx	r3
    330a:	4839      	ldr	r0, [pc, #228]	; (33f0 <nm_spi_write_block+0x290>)
    330c:	4b31      	ldr	r3, [pc, #196]	; (33d4 <nm_spi_write_block+0x274>)
    330e:	4798      	blx	r3
    3310:	200d      	movs	r0, #13
    3312:	4b25      	ldr	r3, [pc, #148]	; (33a8 <nm_spi_write_block+0x248>)
    3314:	4798      	blx	r3
    3316:	e027      	b.n	3368 <nm_spi_write_block+0x208>
    3318:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    331a:	4b2b      	ldr	r3, [pc, #172]	; (33c8 <nm_spi_write_block+0x268>)
    331c:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    331e:	1e63      	subs	r3, r4, #1
    3320:	419c      	sbcs	r4, r3
    3322:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    3324:	b2a1      	uxth	r1, r4
    3326:	a807      	add	r0, sp, #28
    3328:	4b32      	ldr	r3, [pc, #200]	; (33f4 <nm_spi_write_block+0x294>)
    332a:	4798      	blx	r3
    332c:	2800      	cmp	r0, #0
    332e:	d1e6      	bne.n	32fe <nm_spi_write_block+0x19e>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    3330:	ab08      	add	r3, sp, #32
    3332:	191b      	adds	r3, r3, r4
    3334:	3b05      	subs	r3, #5
    3336:	781b      	ldrb	r3, [r3, #0]
    3338:	2b00      	cmp	r3, #0
    333a:	d106      	bne.n	334a <nm_spi_write_block+0x1ea>
    333c:	ab08      	add	r3, sp, #32
    333e:	469c      	mov	ip, r3
    3340:	4464      	add	r4, ip
    3342:	3c06      	subs	r4, #6
    3344:	7823      	ldrb	r3, [r4, #0]
    3346:	2bc3      	cmp	r3, #195	; 0xc3
    3348:	d01b      	beq.n	3382 <nm_spi_write_block+0x222>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    334a:	22a1      	movs	r2, #161	; 0xa1
    334c:	0052      	lsls	r2, r2, #1
    334e:	4927      	ldr	r1, [pc, #156]	; (33ec <nm_spi_write_block+0x28c>)
    3350:	4812      	ldr	r0, [pc, #72]	; (339c <nm_spi_write_block+0x23c>)
    3352:	4c13      	ldr	r4, [pc, #76]	; (33a0 <nm_spi_write_block+0x240>)
    3354:	47a0      	blx	r4
    3356:	a907      	add	r1, sp, #28
    3358:	788b      	ldrb	r3, [r1, #2]
    335a:	784a      	ldrb	r2, [r1, #1]
    335c:	7809      	ldrb	r1, [r1, #0]
    335e:	4826      	ldr	r0, [pc, #152]	; (33f8 <nm_spi_write_block+0x298>)
    3360:	47a0      	blx	r4
    3362:	200d      	movs	r0, #13
    3364:	4b10      	ldr	r3, [pc, #64]	; (33a8 <nm_spi_write_block+0x248>)
    3366:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    3368:	22fa      	movs	r2, #250	; 0xfa
    336a:	0092      	lsls	r2, r2, #2
    336c:	490a      	ldr	r1, [pc, #40]	; (3398 <nm_spi_write_block+0x238>)
    336e:	480b      	ldr	r0, [pc, #44]	; (339c <nm_spi_write_block+0x23c>)
    3370:	4b0b      	ldr	r3, [pc, #44]	; (33a0 <nm_spi_write_block+0x240>)
    3372:	4798      	blx	r3
    3374:	4818      	ldr	r0, [pc, #96]	; (33d8 <nm_spi_write_block+0x278>)
    3376:	4b17      	ldr	r3, [pc, #92]	; (33d4 <nm_spi_write_block+0x274>)
    3378:	4798      	blx	r3
    337a:	200d      	movs	r0, #13
    337c:	4b0a      	ldr	r3, [pc, #40]	; (33a8 <nm_spi_write_block+0x248>)
    337e:	4798      	blx	r3
    3380:	e70b      	b.n	319a <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    3382:	2000      	movs	r0, #0
    3384:	e001      	b.n	338a <nm_spi_write_block+0x22a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    3386:	2006      	movs	r0, #6
    3388:	4240      	negs	r0, r0

	return s8Ret;
}
    338a:	b009      	add	sp, #36	; 0x24
    338c:	bc0c      	pop	{r2, r3}
    338e:	4690      	mov	r8, r2
    3390:	469b      	mov	fp, r3
    3392:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3394:	000003ca 	.word	0x000003ca
    3398:	0000b004 	.word	0x0000b004
    339c:	0000a8ec 	.word	0x0000a8ec
    33a0:	00009539 	.word	0x00009539
    33a4:	0000b2bc 	.word	0x0000b2bc
    33a8:	0000956d 	.word	0x0000956d
    33ac:	00000c79 	.word	0x00000c79
    33b0:	00002829 	.word	0x00002829
    33b4:	000029c9 	.word	0x000029c9
    33b8:	000003f2 	.word	0x000003f2
    33bc:	0000b2a0 	.word	0x0000b2a0
    33c0:	0000b2ec 	.word	0x0000b2ec
    33c4:	00002809 	.word	0x00002809
    33c8:	2000009c 	.word	0x2000009c
    33cc:	0000afe4 	.word	0x0000afe4
    33d0:	0000b324 	.word	0x0000b324
    33d4:	00009655 	.word	0x00009655
    33d8:	0000b418 	.word	0x0000b418
    33dc:	00000359 	.word	0x00000359
    33e0:	0000b35c 	.word	0x0000b35c
    33e4:	00000363 	.word	0x00000363
    33e8:	0000b390 	.word	0x0000b390
    33ec:	0000afb8 	.word	0x0000afb8
    33f0:	0000b3c8 	.word	0x0000b3c8
    33f4:	000029a9 	.word	0x000029a9
    33f8:	0000b3e8 	.word	0x0000b3e8

000033fc <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    33fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    33fe:	46de      	mov	lr, fp
    3400:	4657      	mov	r7, sl
    3402:	464e      	mov	r6, r9
    3404:	4645      	mov	r5, r8
    3406:	b5e0      	push	{r5, r6, r7, lr}
    3408:	b085      	sub	sp, #20
    340a:	9001      	str	r0, [sp, #4]
    340c:	000e      	movs	r6, r1
    340e:	9202      	str	r2, [sp, #8]
    3410:	001d      	movs	r5, r3
    3412:	ab0e      	add	r3, sp, #56	; 0x38
    3414:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    3416:	2c00      	cmp	r4, #0
    3418:	d064      	beq.n	34e4 <Socket_ReadSocketData+0xe8>
    341a:	0103      	lsls	r3, r0, #4
    341c:	4935      	ldr	r1, [pc, #212]	; (34f4 <Socket_ReadSocketData+0xf8>)
    341e:	585b      	ldr	r3, [r3, r1]
    3420:	2b00      	cmp	r3, #0
    3422:	d05f      	beq.n	34e4 <Socket_ReadSocketData+0xe8>
    3424:	0101      	lsls	r1, r0, #4
    3426:	4b33      	ldr	r3, [pc, #204]	; (34f4 <Socket_ReadSocketData+0xf8>)
    3428:	185b      	adds	r3, r3, r1
    342a:	889b      	ldrh	r3, [r3, #4]
    342c:	b29b      	uxth	r3, r3
    342e:	2b00      	cmp	r3, #0
    3430:	d058      	beq.n	34e4 <Socket_ReadSocketData+0xe8>
    3432:	4b30      	ldr	r3, [pc, #192]	; (34f4 <Socket_ReadSocketData+0xf8>)
    3434:	185b      	adds	r3, r3, r1
    3436:	7a9b      	ldrb	r3, [r3, #10]
    3438:	2b01      	cmp	r3, #1
    343a:	d153      	bne.n	34e4 <Socket_ReadSocketData+0xe8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    343c:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    343e:	4b2d      	ldr	r3, [pc, #180]	; (34f4 <Socket_ReadSocketData+0xf8>)
    3440:	469b      	mov	fp, r3
    3442:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    3444:	465b      	mov	r3, fp
    3446:	220a      	movs	r2, #10
    3448:	4690      	mov	r8, r2
    344a:	44d8      	add	r8, fp
    344c:	468a      	mov	sl, r1
    344e:	9500      	str	r5, [sp, #0]
    3450:	9303      	str	r3, [sp, #12]
    3452:	e015      	b.n	3480 <Socket_ReadSocketData+0x84>
    3454:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    3456:	2301      	movs	r3, #1
    3458:	e01c      	b.n	3494 <Socket_ReadSocketData+0x98>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    345a:	3301      	adds	r3, #1
    345c:	2200      	movs	r2, #0
    345e:	2100      	movs	r1, #0
    3460:	2000      	movs	r0, #0
    3462:	4c25      	ldr	r4, [pc, #148]	; (34f8 <Socket_ReadSocketData+0xfc>)
    3464:	47a0      	blx	r4
    3466:	e03d      	b.n	34e4 <Socket_ReadSocketData+0xe8>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    3468:	4824      	ldr	r0, [pc, #144]	; (34fc <Socket_ReadSocketData+0x100>)
    346a:	4d25      	ldr	r5, [pc, #148]	; (3500 <Socket_ReadSocketData+0x104>)
    346c:	47a8      	blx	r5
    346e:	0021      	movs	r1, r4
    3470:	4824      	ldr	r0, [pc, #144]	; (3504 <Socket_ReadSocketData+0x108>)
    3472:	47a8      	blx	r5
    3474:	200d      	movs	r0, #13
    3476:	4b24      	ldr	r3, [pc, #144]	; (3508 <Socket_ReadSocketData+0x10c>)
    3478:	4798      	blx	r3
				break;
    347a:	e033      	b.n	34e4 <Socket_ReadSocketData+0xe8>
			}
		}while(u16ReadCount != 0);
    347c:	2c00      	cmp	r4, #0
    347e:	d031      	beq.n	34e4 <Socket_ReadSocketData+0xe8>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    3480:	465b      	mov	r3, fp
    3482:	889b      	ldrh	r3, [r3, #4]
    3484:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    3486:	b21b      	sxth	r3, r3
    3488:	2b00      	cmp	r3, #0
    348a:	dde3      	ble.n	3454 <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    348c:	9b03      	ldr	r3, [sp, #12]
    348e:	889d      	ldrh	r5, [r3, #4]
    3490:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    3492:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    3494:	4a17      	ldr	r2, [pc, #92]	; (34f4 <Socket_ReadSocketData+0xf8>)
    3496:	4651      	mov	r1, sl
    3498:	5889      	ldr	r1, [r1, r2]
    349a:	002a      	movs	r2, r5
    349c:	9800      	ldr	r0, [sp, #0]
    349e:	4f16      	ldr	r7, [pc, #88]	; (34f8 <Socket_ReadSocketData+0xfc>)
    34a0:	47b8      	blx	r7
    34a2:	2800      	cmp	r0, #0
    34a4:	d1e0      	bne.n	3468 <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    34a6:	4b13      	ldr	r3, [pc, #76]	; (34f4 <Socket_ReadSocketData+0xf8>)
    34a8:	4652      	mov	r2, sl
    34aa:	58d3      	ldr	r3, [r2, r3]
    34ac:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    34ae:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    34b0:	88f3      	ldrh	r3, [r6, #6]
    34b2:	1b5b      	subs	r3, r3, r5
    34b4:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    34b6:	4b15      	ldr	r3, [pc, #84]	; (350c <Socket_ReadSocketData+0x110>)
    34b8:	681b      	ldr	r3, [r3, #0]
    34ba:	2b00      	cmp	r3, #0
    34bc:	d005      	beq.n	34ca <Socket_ReadSocketData+0xce>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    34be:	4b13      	ldr	r3, [pc, #76]	; (350c <Socket_ReadSocketData+0x110>)
    34c0:	681b      	ldr	r3, [r3, #0]
    34c2:	0032      	movs	r2, r6
    34c4:	9902      	ldr	r1, [sp, #8]
    34c6:	9801      	ldr	r0, [sp, #4]
    34c8:	4798      	blx	r3
				u16ReadCount -= u16Read;
    34ca:	1b64      	subs	r4, r4, r5
    34cc:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    34ce:	9b00      	ldr	r3, [sp, #0]
    34d0:	469c      	mov	ip, r3
    34d2:	44ac      	add	ip, r5
    34d4:	4663      	mov	r3, ip
    34d6:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    34d8:	4643      	mov	r3, r8
    34da:	781b      	ldrb	r3, [r3, #0]
    34dc:	2b00      	cmp	r3, #0
    34de:	d1cd      	bne.n	347c <Socket_ReadSocketData+0x80>
    34e0:	2c00      	cmp	r4, #0
    34e2:	d1ba      	bne.n	345a <Socket_ReadSocketData+0x5e>
	}
}
    34e4:	b005      	add	sp, #20
    34e6:	bc3c      	pop	{r2, r3, r4, r5}
    34e8:	4690      	mov	r8, r2
    34ea:	4699      	mov	r9, r3
    34ec:	46a2      	mov	sl, r4
    34ee:	46ab      	mov	fp, r5
    34f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34f2:	46c0      	nop			; (mov r8, r8)
    34f4:	200002e4 	.word	0x200002e4
    34f8:	0000179d 	.word	0x0000179d
    34fc:	0000ac1c 	.word	0x0000ac1c
    3500:	00009539 	.word	0x00009539
    3504:	0000b680 	.word	0x0000b680
    3508:	0000956d 	.word	0x0000956d
    350c:	20000394 	.word	0x20000394

00003510 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    3510:	b5f0      	push	{r4, r5, r6, r7, lr}
    3512:	46d6      	mov	lr, sl
    3514:	464f      	mov	r7, r9
    3516:	4646      	mov	r6, r8
    3518:	b5c0      	push	{r6, r7, lr}
    351a:	b09a      	sub	sp, #104	; 0x68
    351c:	000d      	movs	r5, r1
    351e:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    3520:	2841      	cmp	r0, #65	; 0x41
    3522:	d039      	beq.n	3598 <m2m_ip_cb+0x88>
    3524:	2854      	cmp	r0, #84	; 0x54
    3526:	d037      	beq.n	3598 <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    3528:	2842      	cmp	r0, #66	; 0x42
    352a:	d053      	beq.n	35d4 <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    352c:	2843      	cmp	r0, #67	; 0x43
    352e:	d06a      	beq.n	3606 <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    3530:	2844      	cmp	r0, #68	; 0x44
    3532:	d100      	bne.n	3536 <m2m_ip_cb+0x26>
    3534:	e0af      	b.n	3696 <m2m_ip_cb+0x186>
    3536:	284b      	cmp	r0, #75	; 0x4b
    3538:	d100      	bne.n	353c <m2m_ip_cb+0x2c>
    353a:	e0ac      	b.n	3696 <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    353c:	284a      	cmp	r0, #74	; 0x4a
    353e:	d100      	bne.n	3542 <m2m_ip_cb+0x32>
    3540:	e0cf      	b.n	36e2 <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    3542:	2846      	cmp	r0, #70	; 0x46
    3544:	d100      	bne.n	3548 <m2m_ip_cb+0x38>
    3546:	e0e5      	b.n	3714 <m2m_ip_cb+0x204>
    3548:	2848      	cmp	r0, #72	; 0x48
    354a:	d100      	bne.n	354e <m2m_ip_cb+0x3e>
    354c:	e10e      	b.n	376c <m2m_ip_cb+0x25c>
    354e:	284d      	cmp	r0, #77	; 0x4d
    3550:	d100      	bne.n	3554 <m2m_ip_cb+0x44>
    3552:	e0dc      	b.n	370e <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    3554:	2845      	cmp	r0, #69	; 0x45
    3556:	d100      	bne.n	355a <m2m_ip_cb+0x4a>
    3558:	e12c      	b.n	37b4 <m2m_ip_cb+0x2a4>
    355a:	2847      	cmp	r0, #71	; 0x47
    355c:	d100      	bne.n	3560 <m2m_ip_cb+0x50>
    355e:	e14d      	b.n	37fc <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    3560:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    3562:	284c      	cmp	r0, #76	; 0x4c
    3564:	d100      	bne.n	3568 <m2m_ip_cb+0x58>
    3566:	e126      	b.n	37b6 <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    3568:	2852      	cmp	r0, #82	; 0x52
    356a:	d12d      	bne.n	35c8 <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    356c:	2301      	movs	r3, #1
    356e:	2214      	movs	r2, #20
    3570:	a909      	add	r1, sp, #36	; 0x24
    3572:	0020      	movs	r0, r4
    3574:	4ca2      	ldr	r4, [pc, #648]	; (3800 <m2m_ip_cb+0x2f0>)
    3576:	47a0      	blx	r4
    3578:	2800      	cmp	r0, #0
    357a:	d125      	bne.n	35c8 <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    357c:	4ba1      	ldr	r3, [pc, #644]	; (3804 <m2m_ip_cb+0x2f4>)
    357e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3580:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    3582:	681b      	ldr	r3, [r3, #0]
    3584:	2b00      	cmp	r3, #0
    3586:	d01f      	beq.n	35c8 <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    3588:	4b9e      	ldr	r3, [pc, #632]	; (3804 <m2m_ip_cb+0x2f4>)
    358a:	681c      	ldr	r4, [r3, #0]
    358c:	ab09      	add	r3, sp, #36	; 0x24
    358e:	7c1a      	ldrb	r2, [r3, #16]
    3590:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3592:	9809      	ldr	r0, [sp, #36]	; 0x24
    3594:	47a0      	blx	r4
			}
		}
	}
}
    3596:	e017      	b.n	35c8 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    3598:	2300      	movs	r3, #0
    359a:	2204      	movs	r2, #4
    359c:	a909      	add	r1, sp, #36	; 0x24
    359e:	0020      	movs	r0, r4
    35a0:	4c97      	ldr	r4, [pc, #604]	; (3800 <m2m_ip_cb+0x2f0>)
    35a2:	47a0      	blx	r4
    35a4:	2800      	cmp	r0, #0
    35a6:	d10f      	bne.n	35c8 <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    35a8:	ab09      	add	r3, sp, #36	; 0x24
    35aa:	785a      	ldrb	r2, [r3, #1]
    35ac:	ab05      	add	r3, sp, #20
    35ae:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    35b0:	4b95      	ldr	r3, [pc, #596]	; (3808 <m2m_ip_cb+0x2f8>)
    35b2:	681b      	ldr	r3, [r3, #0]
    35b4:	2b00      	cmp	r3, #0
    35b6:	d007      	beq.n	35c8 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    35b8:	4b93      	ldr	r3, [pc, #588]	; (3808 <m2m_ip_cb+0x2f8>)
    35ba:	681b      	ldr	r3, [r3, #0]
    35bc:	aa09      	add	r2, sp, #36	; 0x24
    35be:	2000      	movs	r0, #0
    35c0:	5610      	ldrsb	r0, [r2, r0]
    35c2:	aa05      	add	r2, sp, #20
    35c4:	2101      	movs	r1, #1
    35c6:	4798      	blx	r3
}
    35c8:	b01a      	add	sp, #104	; 0x68
    35ca:	bc1c      	pop	{r2, r3, r4}
    35cc:	4690      	mov	r8, r2
    35ce:	4699      	mov	r9, r3
    35d0:	46a2      	mov	sl, r4
    35d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    35d4:	2300      	movs	r3, #0
    35d6:	2204      	movs	r2, #4
    35d8:	a909      	add	r1, sp, #36	; 0x24
    35da:	0020      	movs	r0, r4
    35dc:	4c88      	ldr	r4, [pc, #544]	; (3800 <m2m_ip_cb+0x2f0>)
    35de:	47a0      	blx	r4
    35e0:	2800      	cmp	r0, #0
    35e2:	d1f1      	bne.n	35c8 <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    35e4:	ab09      	add	r3, sp, #36	; 0x24
    35e6:	785a      	ldrb	r2, [r3, #1]
    35e8:	ab05      	add	r3, sp, #20
    35ea:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    35ec:	4b86      	ldr	r3, [pc, #536]	; (3808 <m2m_ip_cb+0x2f8>)
    35ee:	681b      	ldr	r3, [r3, #0]
    35f0:	2b00      	cmp	r3, #0
    35f2:	d0e9      	beq.n	35c8 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    35f4:	4b84      	ldr	r3, [pc, #528]	; (3808 <m2m_ip_cb+0x2f8>)
    35f6:	681b      	ldr	r3, [r3, #0]
    35f8:	aa09      	add	r2, sp, #36	; 0x24
    35fa:	2000      	movs	r0, #0
    35fc:	5610      	ldrsb	r0, [r2, r0]
    35fe:	aa05      	add	r2, sp, #20
    3600:	2102      	movs	r1, #2
    3602:	4798      	blx	r3
    3604:	e7e0      	b.n	35c8 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    3606:	2300      	movs	r3, #0
    3608:	220c      	movs	r2, #12
    360a:	a905      	add	r1, sp, #20
    360c:	0020      	movs	r0, r4
    360e:	4c7c      	ldr	r4, [pc, #496]	; (3800 <m2m_ip_cb+0x2f0>)
    3610:	47a0      	blx	r4
    3612:	2800      	cmp	r0, #0
    3614:	d1d8      	bne.n	35c8 <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    3616:	ab05      	add	r3, sp, #20
    3618:	2209      	movs	r2, #9
    361a:	569a      	ldrsb	r2, [r3, r2]
    361c:	2a00      	cmp	r2, #0
    361e:	db24      	blt.n	366a <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    3620:	0018      	movs	r0, r3
    3622:	2108      	movs	r1, #8
    3624:	5659      	ldrsb	r1, [r3, r1]
    3626:	4b79      	ldr	r3, [pc, #484]	; (380c <m2m_ip_cb+0x2fc>)
    3628:	0109      	lsls	r1, r1, #4
    362a:	1859      	adds	r1, r3, r1
    362c:	7ac9      	ldrb	r1, [r1, #11]
    362e:	b2c9      	uxtb	r1, r1
    3630:	0114      	lsls	r4, r2, #4
    3632:	191b      	adds	r3, r3, r4
    3634:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    3636:	2101      	movs	r1, #1
    3638:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    363a:	8941      	ldrh	r1, [r0, #10]
    363c:	3908      	subs	r1, #8
    363e:	b289      	uxth	r1, r1
    3640:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    3642:	4973      	ldr	r1, [pc, #460]	; (3810 <m2m_ip_cb+0x300>)
    3644:	880b      	ldrh	r3, [r1, #0]
    3646:	3301      	adds	r3, #1
    3648:	b29b      	uxth	r3, r3
    364a:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    364c:	880b      	ldrh	r3, [r1, #0]
    364e:	b29b      	uxth	r3, r3
    3650:	2b00      	cmp	r3, #0
    3652:	d103      	bne.n	365c <m2m_ip_cb+0x14c>
					++gu16SessionID;
    3654:	880b      	ldrh	r3, [r1, #0]
    3656:	3301      	adds	r3, #1
    3658:	b29b      	uxth	r3, r3
    365a:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    365c:	4b6c      	ldr	r3, [pc, #432]	; (3810 <m2m_ip_cb+0x300>)
    365e:	8819      	ldrh	r1, [r3, #0]
    3660:	b289      	uxth	r1, r1
    3662:	0110      	lsls	r0, r2, #4
    3664:	4b69      	ldr	r3, [pc, #420]	; (380c <m2m_ip_cb+0x2fc>)
    3666:	181b      	adds	r3, r3, r0
    3668:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    366a:	ab09      	add	r3, sp, #36	; 0x24
    366c:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    366e:	2202      	movs	r2, #2
    3670:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    3672:	aa05      	add	r2, sp, #20
    3674:	8851      	ldrh	r1, [r2, #2]
    3676:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    3678:	9a06      	ldr	r2, [sp, #24]
    367a:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    367c:	4b62      	ldr	r3, [pc, #392]	; (3808 <m2m_ip_cb+0x2f8>)
    367e:	681b      	ldr	r3, [r3, #0]
    3680:	2b00      	cmp	r3, #0
    3682:	d0a1      	beq.n	35c8 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    3684:	4b60      	ldr	r3, [pc, #384]	; (3808 <m2m_ip_cb+0x2f8>)
    3686:	681b      	ldr	r3, [r3, #0]
    3688:	aa05      	add	r2, sp, #20
    368a:	2008      	movs	r0, #8
    368c:	5610      	ldrsb	r0, [r2, r0]
    368e:	aa09      	add	r2, sp, #36	; 0x24
    3690:	2104      	movs	r1, #4
    3692:	4798      	blx	r3
    3694:	e798      	b.n	35c8 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    3696:	2300      	movs	r3, #0
    3698:	2204      	movs	r2, #4
    369a:	a909      	add	r1, sp, #36	; 0x24
    369c:	0020      	movs	r0, r4
    369e:	4c58      	ldr	r4, [pc, #352]	; (3800 <m2m_ip_cb+0x2f0>)
    36a0:	47a0      	blx	r4
    36a2:	2800      	cmp	r0, #0
    36a4:	d000      	beq.n	36a8 <m2m_ip_cb+0x198>
    36a6:	e78f      	b.n	35c8 <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    36a8:	ab09      	add	r3, sp, #36	; 0x24
    36aa:	2000      	movs	r0, #0
    36ac:	5618      	ldrsb	r0, [r3, r0]
    36ae:	aa05      	add	r2, sp, #20
    36b0:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    36b2:	785b      	ldrb	r3, [r3, #1]
    36b4:	b25b      	sxtb	r3, r3
    36b6:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    36b8:	2b00      	cmp	r3, #0
    36ba:	d107      	bne.n	36cc <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    36bc:	ab09      	add	r3, sp, #36	; 0x24
    36be:	885b      	ldrh	r3, [r3, #2]
    36c0:	3b08      	subs	r3, #8
    36c2:	b29b      	uxth	r3, r3
    36c4:	0101      	lsls	r1, r0, #4
    36c6:	4a51      	ldr	r2, [pc, #324]	; (380c <m2m_ip_cb+0x2fc>)
    36c8:	1852      	adds	r2, r2, r1
    36ca:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    36cc:	4b4e      	ldr	r3, [pc, #312]	; (3808 <m2m_ip_cb+0x2f8>)
    36ce:	681b      	ldr	r3, [r3, #0]
    36d0:	2b00      	cmp	r3, #0
    36d2:	d100      	bne.n	36d6 <m2m_ip_cb+0x1c6>
    36d4:	e778      	b.n	35c8 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    36d6:	4b4c      	ldr	r3, [pc, #304]	; (3808 <m2m_ip_cb+0x2f8>)
    36d8:	681b      	ldr	r3, [r3, #0]
    36da:	aa05      	add	r2, sp, #20
    36dc:	2105      	movs	r1, #5
    36de:	4798      	blx	r3
	{
    36e0:	e772      	b.n	35c8 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    36e2:	2300      	movs	r3, #0
    36e4:	2244      	movs	r2, #68	; 0x44
    36e6:	a909      	add	r1, sp, #36	; 0x24
    36e8:	0020      	movs	r0, r4
    36ea:	4c45      	ldr	r4, [pc, #276]	; (3800 <m2m_ip_cb+0x2f0>)
    36ec:	47a0      	blx	r4
    36ee:	2800      	cmp	r0, #0
    36f0:	d000      	beq.n	36f4 <m2m_ip_cb+0x1e4>
    36f2:	e769      	b.n	35c8 <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    36f4:	4b47      	ldr	r3, [pc, #284]	; (3814 <m2m_ip_cb+0x304>)
    36f6:	681b      	ldr	r3, [r3, #0]
    36f8:	2b00      	cmp	r3, #0
    36fa:	d100      	bne.n	36fe <m2m_ip_cb+0x1ee>
    36fc:	e764      	b.n	35c8 <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    36fe:	4b45      	ldr	r3, [pc, #276]	; (3814 <m2m_ip_cb+0x304>)
    3700:	681b      	ldr	r3, [r3, #0]
    3702:	9a19      	ldr	r2, [sp, #100]	; 0x64
    3704:	9203      	str	r2, [sp, #12]
    3706:	0011      	movs	r1, r2
    3708:	a809      	add	r0, sp, #36	; 0x24
    370a:	4798      	blx	r3
    370c:	e75c      	b.n	35c8 <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    370e:	2306      	movs	r3, #6
    3710:	469a      	mov	sl, r3
    3712:	e001      	b.n	3718 <m2m_ip_cb+0x208>
    3714:	2306      	movs	r3, #6
    3716:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    3718:	2300      	movs	r3, #0
    371a:	2210      	movs	r2, #16
    371c:	a905      	add	r1, sp, #20
    371e:	0020      	movs	r0, r4
    3720:	4f37      	ldr	r7, [pc, #220]	; (3800 <m2m_ip_cb+0x2f0>)
    3722:	47b8      	blx	r7
    3724:	2800      	cmp	r0, #0
    3726:	d000      	beq.n	372a <m2m_ip_cb+0x21a>
    3728:	e74e      	b.n	35c8 <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    372a:	aa05      	add	r2, sp, #20
    372c:	200c      	movs	r0, #12
    372e:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    3730:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    3732:	0107      	lsls	r7, r0, #4
    3734:	4935      	ldr	r1, [pc, #212]	; (380c <m2m_ip_cb+0x2fc>)
    3736:	19c9      	adds	r1, r1, r7
    3738:	2700      	movs	r7, #0
    373a:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    373c:	2608      	movs	r6, #8
    373e:	5f97      	ldrsh	r7, [r2, r6]
    3740:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    3742:	8957      	ldrh	r7, [r2, #10]
    3744:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    3746:	af09      	add	r7, sp, #36	; 0x24
    3748:	8856      	ldrh	r6, [r2, #2]
    374a:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    374c:	9a06      	ldr	r2, [sp, #24]
    374e:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    3750:	88ca      	ldrh	r2, [r1, #6]
    3752:	b292      	uxth	r2, r2
    3754:	4293      	cmp	r3, r2
    3756:	d00c      	beq.n	3772 <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    3758:	2d10      	cmp	r5, #16
    375a:	d800      	bhi.n	375e <m2m_ip_cb+0x24e>
    375c:	e734      	b.n	35c8 <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    375e:	2301      	movs	r3, #1
    3760:	2200      	movs	r2, #0
    3762:	2100      	movs	r1, #0
    3764:	2000      	movs	r0, #0
    3766:	4c26      	ldr	r4, [pc, #152]	; (3800 <m2m_ip_cb+0x2f0>)
    3768:	47a0      	blx	r4
	{
    376a:	e72d      	b.n	35c8 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    376c:	2309      	movs	r3, #9
    376e:	469a      	mov	sl, r3
    3770:	e7d2      	b.n	3718 <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    3772:	4643      	mov	r3, r8
    3774:	2b00      	cmp	r3, #0
    3776:	dd01      	ble.n	377c <m2m_ip_cb+0x26c>
    3778:	45a8      	cmp	r8, r5
    377a:	db0f      	blt.n	379c <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    377c:	ab09      	add	r3, sp, #36	; 0x24
    377e:	4642      	mov	r2, r8
    3780:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    3782:	2300      	movs	r3, #0
    3784:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    3786:	4b20      	ldr	r3, [pc, #128]	; (3808 <m2m_ip_cb+0x2f8>)
    3788:	681b      	ldr	r3, [r3, #0]
    378a:	2b00      	cmp	r3, #0
    378c:	d100      	bne.n	3790 <m2m_ip_cb+0x280>
    378e:	e71b      	b.n	35c8 <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    3790:	4b1d      	ldr	r3, [pc, #116]	; (3808 <m2m_ip_cb+0x2f8>)
    3792:	681b      	ldr	r3, [r3, #0]
    3794:	aa09      	add	r2, sp, #36	; 0x24
    3796:	4651      	mov	r1, sl
    3798:	4798      	blx	r3
    379a:	e715      	b.n	35c8 <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    379c:	0023      	movs	r3, r4
    379e:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    37a0:	4642      	mov	r2, r8
    37a2:	4669      	mov	r1, sp
    37a4:	818a      	strh	r2, [r1, #12]
    37a6:	898a      	ldrh	r2, [r1, #12]
    37a8:	9200      	str	r2, [sp, #0]
    37aa:	4652      	mov	r2, sl
    37ac:	0039      	movs	r1, r7
    37ae:	4c1a      	ldr	r4, [pc, #104]	; (3818 <m2m_ip_cb+0x308>)
    37b0:	47a0      	blx	r4
    37b2:	e709      	b.n	35c8 <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    37b4:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    37b6:	2300      	movs	r3, #0
    37b8:	2208      	movs	r2, #8
    37ba:	a909      	add	r1, sp, #36	; 0x24
    37bc:	0020      	movs	r0, r4
    37be:	4c10      	ldr	r4, [pc, #64]	; (3800 <m2m_ip_cb+0x2f0>)
    37c0:	47a0      	blx	r4
    37c2:	2800      	cmp	r0, #0
    37c4:	d000      	beq.n	37c8 <m2m_ip_cb+0x2b8>
    37c6:	e6ff      	b.n	35c8 <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    37c8:	ab09      	add	r3, sp, #36	; 0x24
    37ca:	2000      	movs	r0, #0
    37cc:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    37ce:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    37d0:	8859      	ldrh	r1, [r3, #2]
    37d2:	ab05      	add	r3, sp, #20
    37d4:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    37d6:	0101      	lsls	r1, r0, #4
    37d8:	4b0c      	ldr	r3, [pc, #48]	; (380c <m2m_ip_cb+0x2fc>)
    37da:	185b      	adds	r3, r3, r1
    37dc:	88db      	ldrh	r3, [r3, #6]
    37de:	b29b      	uxth	r3, r3
    37e0:	429a      	cmp	r2, r3
    37e2:	d000      	beq.n	37e6 <m2m_ip_cb+0x2d6>
    37e4:	e6f0      	b.n	35c8 <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    37e6:	4b08      	ldr	r3, [pc, #32]	; (3808 <m2m_ip_cb+0x2f8>)
    37e8:	681b      	ldr	r3, [r3, #0]
    37ea:	2b00      	cmp	r3, #0
    37ec:	d100      	bne.n	37f0 <m2m_ip_cb+0x2e0>
    37ee:	e6eb      	b.n	35c8 <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    37f0:	4b05      	ldr	r3, [pc, #20]	; (3808 <m2m_ip_cb+0x2f8>)
    37f2:	681b      	ldr	r3, [r3, #0]
    37f4:	aa05      	add	r2, sp, #20
    37f6:	0029      	movs	r1, r5
    37f8:	4798      	blx	r3
	{
    37fa:	e6e5      	b.n	35c8 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    37fc:	2508      	movs	r5, #8
    37fe:	e7da      	b.n	37b6 <m2m_ip_cb+0x2a6>
    3800:	0000179d 	.word	0x0000179d
    3804:	20000398 	.word	0x20000398
    3808:	20000394 	.word	0x20000394
    380c:	200002e4 	.word	0x200002e4
    3810:	2000009e 	.word	0x2000009e
    3814:	2000039c 	.word	0x2000039c
    3818:	000033fd 	.word	0x000033fd

0000381c <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    381c:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    381e:	4b0a      	ldr	r3, [pc, #40]	; (3848 <socketInit+0x2c>)
    3820:	781b      	ldrb	r3, [r3, #0]
    3822:	2b00      	cmp	r3, #0
    3824:	d000      	beq.n	3828 <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    3826:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    3828:	22b0      	movs	r2, #176	; 0xb0
    382a:	2100      	movs	r1, #0
    382c:	4807      	ldr	r0, [pc, #28]	; (384c <socketInit+0x30>)
    382e:	4b08      	ldr	r3, [pc, #32]	; (3850 <socketInit+0x34>)
    3830:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    3832:	4908      	ldr	r1, [pc, #32]	; (3854 <socketInit+0x38>)
    3834:	2002      	movs	r0, #2
    3836:	4b08      	ldr	r3, [pc, #32]	; (3858 <socketInit+0x3c>)
    3838:	4798      	blx	r3
		gbSocketInit	= 1;
    383a:	2201      	movs	r2, #1
    383c:	4b02      	ldr	r3, [pc, #8]	; (3848 <socketInit+0x2c>)
    383e:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    3840:	2200      	movs	r2, #0
    3842:	4b06      	ldr	r3, [pc, #24]	; (385c <socketInit+0x40>)
    3844:	801a      	strh	r2, [r3, #0]
}
    3846:	e7ee      	b.n	3826 <socketInit+0xa>
    3848:	2000009d 	.word	0x2000009d
    384c:	200002e4 	.word	0x200002e4
    3850:	0000107d 	.word	0x0000107d
    3854:	00003511 	.word	0x00003511
    3858:	00001889 	.word	0x00001889
    385c:	2000009e 	.word	0x2000009e

00003860 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    3860:	4b02      	ldr	r3, [pc, #8]	; (386c <registerSocketCallback+0xc>)
    3862:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    3864:	4b02      	ldr	r3, [pc, #8]	; (3870 <registerSocketCallback+0x10>)
    3866:	6019      	str	r1, [r3, #0]
}
    3868:	4770      	bx	lr
    386a:	46c0      	nop			; (mov r8, r8)
    386c:	20000394 	.word	0x20000394
    3870:	2000039c 	.word	0x2000039c

00003874 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    3874:	b5f0      	push	{r4, r5, r6, r7, lr}
    3876:	46d6      	mov	lr, sl
    3878:	4647      	mov	r7, r8
    387a:	b580      	push	{r7, lr}
    387c:	b089      	sub	sp, #36	; 0x24
    387e:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    3880:	2802      	cmp	r0, #2
    3882:	d000      	beq.n	3886 <socket+0x12>
    3884:	e09c      	b.n	39c0 <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    3886:	2901      	cmp	r1, #1
    3888:	d00a      	beq.n	38a0 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    388a:	2902      	cmp	r1, #2
    388c:	d100      	bne.n	3890 <socket+0x1c>
    388e:	e070      	b.n	3972 <socket+0xfe>
	SOCKET					sock = -1;
    3890:	2501      	movs	r5, #1
    3892:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    3894:	0028      	movs	r0, r5
    3896:	b009      	add	sp, #36	; 0x24
    3898:	bc0c      	pop	{r2, r3}
    389a:	4690      	mov	r8, r2
    389c:	469a      	mov	sl, r3
    389e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    38a0:	4c49      	ldr	r4, [pc, #292]	; (39c8 <socket+0x154>)
    38a2:	7827      	ldrb	r7, [r4, #0]
    38a4:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    38a6:	7826      	ldrb	r6, [r4, #0]
    38a8:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    38aa:	7820      	ldrb	r0, [r4, #0]
    38ac:	3001      	adds	r0, #1
    38ae:	3106      	adds	r1, #6
    38b0:	4b46      	ldr	r3, [pc, #280]	; (39cc <socket+0x158>)
    38b2:	4798      	blx	r3
    38b4:	b2c9      	uxtb	r1, r1
    38b6:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    38b8:	0132      	lsls	r2, r6, #4
    38ba:	4b45      	ldr	r3, [pc, #276]	; (39d0 <socket+0x15c>)
    38bc:	189b      	adds	r3, r3, r2
    38be:	7a9b      	ldrb	r3, [r3, #10]
    38c0:	2506      	movs	r5, #6
    38c2:	2b00      	cmp	r3, #0
    38c4:	d018      	beq.n	38f8 <socket+0x84>
				u8SockID	= u8NextTcpSock;
    38c6:	4e40      	ldr	r6, [pc, #256]	; (39c8 <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    38c8:	4b40      	ldr	r3, [pc, #256]	; (39cc <socket+0x158>)
    38ca:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    38cc:	4b40      	ldr	r3, [pc, #256]	; (39d0 <socket+0x15c>)
    38ce:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    38d0:	7837      	ldrb	r7, [r6, #0]
    38d2:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    38d4:	7834      	ldrb	r4, [r6, #0]
    38d6:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    38d8:	7830      	ldrb	r0, [r6, #0]
    38da:	3001      	adds	r0, #1
    38dc:	2107      	movs	r1, #7
    38de:	47d0      	blx	sl
    38e0:	b2c9      	uxtb	r1, r1
    38e2:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    38e4:	0123      	lsls	r3, r4, #4
    38e6:	4443      	add	r3, r8
    38e8:	7a9b      	ldrb	r3, [r3, #10]
    38ea:	2b00      	cmp	r3, #0
    38ec:	d007      	beq.n	38fe <socket+0x8a>
    38ee:	3d01      	subs	r5, #1
    38f0:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    38f2:	2d00      	cmp	r5, #0
    38f4:	d1ec      	bne.n	38d0 <socket+0x5c>
    38f6:	e7cb      	b.n	3890 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    38f8:	4b35      	ldr	r3, [pc, #212]	; (39d0 <socket+0x15c>)
    38fa:	18d4      	adds	r4, r2, r3
    38fc:	e002      	b.n	3904 <socket+0x90>
    38fe:	0124      	lsls	r4, r4, #4
    3900:	4b33      	ldr	r3, [pc, #204]	; (39d0 <socket+0x15c>)
    3902:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    3904:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    3906:	2d00      	cmp	r5, #0
    3908:	dbc4      	blt.n	3894 <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    390a:	2210      	movs	r2, #16
    390c:	2100      	movs	r1, #0
    390e:	0020      	movs	r0, r4
    3910:	4b30      	ldr	r3, [pc, #192]	; (39d4 <socket+0x160>)
    3912:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    3914:	2301      	movs	r3, #1
    3916:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    3918:	4a2f      	ldr	r2, [pc, #188]	; (39d8 <socket+0x164>)
    391a:	8813      	ldrh	r3, [r2, #0]
    391c:	3301      	adds	r3, #1
    391e:	b29b      	uxth	r3, r3
    3920:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    3922:	8813      	ldrh	r3, [r2, #0]
    3924:	b29b      	uxth	r3, r3
    3926:	2b00      	cmp	r3, #0
    3928:	d103      	bne.n	3932 <socket+0xbe>
				++gu16SessionID;
    392a:	8813      	ldrh	r3, [r2, #0]
    392c:	3301      	adds	r3, #1
    392e:	b29b      	uxth	r3, r3
    3930:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    3932:	4e29      	ldr	r6, [pc, #164]	; (39d8 <socket+0x164>)
    3934:	8833      	ldrh	r3, [r6, #0]
    3936:	b29b      	uxth	r3, r3
    3938:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    393a:	4828      	ldr	r0, [pc, #160]	; (39dc <socket+0x168>)
    393c:	4f28      	ldr	r7, [pc, #160]	; (39e0 <socket+0x16c>)
    393e:	47b8      	blx	r7
    3940:	8832      	ldrh	r2, [r6, #0]
    3942:	b292      	uxth	r2, r2
    3944:	0029      	movs	r1, r5
    3946:	4827      	ldr	r0, [pc, #156]	; (39e4 <socket+0x170>)
    3948:	47b8      	blx	r7
    394a:	200d      	movs	r0, #13
    394c:	4b26      	ldr	r3, [pc, #152]	; (39e8 <socket+0x174>)
    394e:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    3950:	9b05      	ldr	r3, [sp, #20]
    3952:	07db      	lsls	r3, r3, #31
    3954:	d59e      	bpl.n	3894 <socket+0x20>
				strSSLCreate.sslSock = sock;
    3956:	aa07      	add	r2, sp, #28
    3958:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    395a:	2321      	movs	r3, #33	; 0x21
    395c:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    395e:	2300      	movs	r3, #0
    3960:	9302      	str	r3, [sp, #8]
    3962:	9301      	str	r3, [sp, #4]
    3964:	9300      	str	r3, [sp, #0]
    3966:	3304      	adds	r3, #4
    3968:	2150      	movs	r1, #80	; 0x50
    396a:	2002      	movs	r0, #2
    396c:	4c1f      	ldr	r4, [pc, #124]	; (39ec <socket+0x178>)
    396e:	47a0      	blx	r4
    3970:	e790      	b.n	3894 <socket+0x20>
				u8SockID		= u8NextUdpSock;
    3972:	4b1f      	ldr	r3, [pc, #124]	; (39f0 <socket+0x17c>)
    3974:	781d      	ldrb	r5, [r3, #0]
    3976:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    3978:	781c      	ldrb	r4, [r3, #0]
    397a:	0124      	lsls	r4, r4, #4
    397c:	4a1d      	ldr	r2, [pc, #116]	; (39f4 <socket+0x180>)
    397e:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    3980:	7819      	ldrb	r1, [r3, #0]
    3982:	3101      	adds	r1, #1
    3984:	2203      	movs	r2, #3
    3986:	400a      	ands	r2, r1
    3988:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    398a:	7aa3      	ldrb	r3, [r4, #10]
    398c:	2b00      	cmp	r3, #0
    398e:	d014      	beq.n	39ba <socket+0x146>
    3990:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    3992:	4917      	ldr	r1, [pc, #92]	; (39f0 <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    3994:	4f17      	ldr	r7, [pc, #92]	; (39f4 <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    3996:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    3998:	780d      	ldrb	r5, [r1, #0]
    399a:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    399c:	780c      	ldrb	r4, [r1, #0]
    399e:	0124      	lsls	r4, r4, #4
    39a0:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    39a2:	780b      	ldrb	r3, [r1, #0]
    39a4:	3301      	adds	r3, #1
    39a6:	4003      	ands	r3, r0
    39a8:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    39aa:	7aa3      	ldrb	r3, [r4, #10]
    39ac:	2b00      	cmp	r3, #0
    39ae:	d004      	beq.n	39ba <socket+0x146>
    39b0:	3a01      	subs	r2, #1
    39b2:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    39b4:	2a00      	cmp	r2, #0
    39b6:	d1ef      	bne.n	3998 <socket+0x124>
    39b8:	e76a      	b.n	3890 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    39ba:	3507      	adds	r5, #7
    39bc:	b26d      	sxtb	r5, r5
					break;
    39be:	e7a2      	b.n	3906 <socket+0x92>
	SOCKET					sock = -1;
    39c0:	2501      	movs	r5, #1
    39c2:	426d      	negs	r5, r5
    39c4:	e766      	b.n	3894 <socket+0x20>
    39c6:	46c0      	nop			; (mov r8, r8)
    39c8:	200000a0 	.word	0x200000a0
    39cc:	00007649 	.word	0x00007649
    39d0:	200002e4 	.word	0x200002e4
    39d4:	0000107d 	.word	0x0000107d
    39d8:	2000009e 	.word	0x2000009e
    39dc:	0000ac1c 	.word	0x0000ac1c
    39e0:	00009539 	.word	0x00009539
    39e4:	0000b6ac 	.word	0x0000b6ac
    39e8:	0000956d 	.word	0x0000956d
    39ec:	00001191 	.word	0x00001191
    39f0:	200000a1 	.word	0x200000a1
    39f4:	20000354 	.word	0x20000354

000039f8 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    39f8:	b570      	push	{r4, r5, r6, lr}
    39fa:	b088      	sub	sp, #32
    39fc:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    39fe:	db30      	blt.n	3a62 <connect+0x6a>
    3a00:	2900      	cmp	r1, #0
    3a02:	d031      	beq.n	3a68 <connect+0x70>
    3a04:	0100      	lsls	r0, r0, #4
    3a06:	4b1d      	ldr	r3, [pc, #116]	; (3a7c <connect+0x84>)
    3a08:	181b      	adds	r3, r3, r0
    3a0a:	7a9b      	ldrb	r3, [r3, #10]
    3a0c:	2b01      	cmp	r3, #1
    3a0e:	d12e      	bne.n	3a6e <connect+0x76>
    3a10:	2a00      	cmp	r2, #0
    3a12:	d02f      	beq.n	3a74 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    3a14:	4b19      	ldr	r3, [pc, #100]	; (3a7c <connect+0x84>)
    3a16:	181b      	adds	r3, r3, r0
    3a18:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    3a1a:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    3a1c:	07db      	lsls	r3, r3, #31
    3a1e:	d505      	bpl.n	3a2c <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    3a20:	4b16      	ldr	r3, [pc, #88]	; (3a7c <connect+0x84>)
    3a22:	181b      	adds	r3, r3, r0
    3a24:	7ada      	ldrb	r2, [r3, #11]
    3a26:	ab05      	add	r3, sp, #20
    3a28:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    3a2a:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
    3a2c:	ad05      	add	r5, sp, #20
    3a2e:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    3a30:	2208      	movs	r2, #8
    3a32:	0028      	movs	r0, r5
    3a34:	4b12      	ldr	r3, [pc, #72]	; (3a80 <connect+0x88>)
    3a36:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    3a38:	0124      	lsls	r4, r4, #4
    3a3a:	4b10      	ldr	r3, [pc, #64]	; (3a7c <connect+0x84>)
    3a3c:	191c      	adds	r4, r3, r4
    3a3e:	88e3      	ldrh	r3, [r4, #6]
    3a40:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    3a42:	2300      	movs	r3, #0
    3a44:	9302      	str	r3, [sp, #8]
    3a46:	9301      	str	r3, [sp, #4]
    3a48:	9300      	str	r3, [sp, #0]
    3a4a:	330c      	adds	r3, #12
    3a4c:	002a      	movs	r2, r5
    3a4e:	0031      	movs	r1, r6
    3a50:	2002      	movs	r0, #2
    3a52:	4c0c      	ldr	r4, [pc, #48]	; (3a84 <connect+0x8c>)
    3a54:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    3a56:	2800      	cmp	r0, #0
    3a58:	d001      	beq.n	3a5e <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    3a5a:	2009      	movs	r0, #9
    3a5c:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    3a5e:	b008      	add	sp, #32
    3a60:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    3a62:	2006      	movs	r0, #6
    3a64:	4240      	negs	r0, r0
    3a66:	e7fa      	b.n	3a5e <connect+0x66>
    3a68:	2006      	movs	r0, #6
    3a6a:	4240      	negs	r0, r0
    3a6c:	e7f7      	b.n	3a5e <connect+0x66>
    3a6e:	2006      	movs	r0, #6
    3a70:	4240      	negs	r0, r0
    3a72:	e7f4      	b.n	3a5e <connect+0x66>
    3a74:	2006      	movs	r0, #6
    3a76:	4240      	negs	r0, r0
    3a78:	e7f1      	b.n	3a5e <connect+0x66>
    3a7a:	46c0      	nop			; (mov r8, r8)
    3a7c:	200002e4 	.word	0x200002e4
    3a80:	00001069 	.word	0x00001069
    3a84:	00001191 	.word	0x00001191

00003a88 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    3a88:	b530      	push	{r4, r5, lr}
    3a8a:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    3a8c:	2800      	cmp	r0, #0
    3a8e:	db36      	blt.n	3afe <send+0x76>
    3a90:	2900      	cmp	r1, #0
    3a92:	d037      	beq.n	3b04 <send+0x7c>
    3a94:	23af      	movs	r3, #175	; 0xaf
    3a96:	00db      	lsls	r3, r3, #3
    3a98:	429a      	cmp	r2, r3
    3a9a:	d836      	bhi.n	3b0a <send+0x82>
    3a9c:	0104      	lsls	r4, r0, #4
    3a9e:	4b1e      	ldr	r3, [pc, #120]	; (3b18 <send+0x90>)
    3aa0:	191b      	adds	r3, r3, r4
    3aa2:	7a9b      	ldrb	r3, [r3, #10]
    3aa4:	2b01      	cmp	r3, #1
    3aa6:	d133      	bne.n	3b10 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    3aa8:	ab04      	add	r3, sp, #16
    3aaa:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    3aac:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    3aae:	0025      	movs	r5, r4
    3ab0:	4c19      	ldr	r4, [pc, #100]	; (3b18 <send+0x90>)
    3ab2:	1964      	adds	r4, r4, r5
    3ab4:	88e4      	ldrh	r4, [r4, #6]
    3ab6:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    3ab8:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    3aba:	2806      	cmp	r0, #6
    3abc:	dd00      	ble.n	3ac0 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    3abe:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3ac0:	0104      	lsls	r4, r0, #4
    3ac2:	4b15      	ldr	r3, [pc, #84]	; (3b18 <send+0x90>)
    3ac4:	191b      	adds	r3, r3, r4
    3ac6:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    3ac8:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3aca:	07e4      	lsls	r4, r4, #31
    3acc:	d505      	bpl.n	3ada <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    3ace:	0100      	lsls	r0, r0, #4
    3ad0:	4b11      	ldr	r3, [pc, #68]	; (3b18 <send+0x90>)
    3ad2:	1818      	adds	r0, r3, r0
    3ad4:	8905      	ldrh	r5, [r0, #8]
    3ad6:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    3ad8:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    3ada:	2080      	movs	r0, #128	; 0x80
    3adc:	4318      	orrs	r0, r3
    3ade:	9502      	str	r5, [sp, #8]
    3ae0:	9201      	str	r2, [sp, #4]
    3ae2:	9100      	str	r1, [sp, #0]
    3ae4:	2310      	movs	r3, #16
    3ae6:	aa04      	add	r2, sp, #16
    3ae8:	0001      	movs	r1, r0
    3aea:	2002      	movs	r0, #2
    3aec:	4c0b      	ldr	r4, [pc, #44]	; (3b1c <send+0x94>)
    3aee:	47a0      	blx	r4
    3af0:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    3af2:	2800      	cmp	r0, #0
    3af4:	d000      	beq.n	3af8 <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    3af6:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    3af8:	0018      	movs	r0, r3
    3afa:	b009      	add	sp, #36	; 0x24
    3afc:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    3afe:	2306      	movs	r3, #6
    3b00:	425b      	negs	r3, r3
    3b02:	e7f9      	b.n	3af8 <send+0x70>
    3b04:	2306      	movs	r3, #6
    3b06:	425b      	negs	r3, r3
    3b08:	e7f6      	b.n	3af8 <send+0x70>
    3b0a:	2306      	movs	r3, #6
    3b0c:	425b      	negs	r3, r3
    3b0e:	e7f3      	b.n	3af8 <send+0x70>
    3b10:	2306      	movs	r3, #6
    3b12:	425b      	negs	r3, r3
    3b14:	e7f0      	b.n	3af8 <send+0x70>
    3b16:	46c0      	nop			; (mov r8, r8)
    3b18:	200002e4 	.word	0x200002e4
    3b1c:	00001191 	.word	0x00001191

00003b20 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    3b20:	b530      	push	{r4, r5, lr}
    3b22:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    3b24:	2800      	cmp	r0, #0
    3b26:	db34      	blt.n	3b92 <recv+0x72>
    3b28:	2900      	cmp	r1, #0
    3b2a:	d035      	beq.n	3b98 <recv+0x78>
    3b2c:	2a00      	cmp	r2, #0
    3b2e:	d036      	beq.n	3b9e <recv+0x7e>
    3b30:	0105      	lsls	r5, r0, #4
    3b32:	4c1e      	ldr	r4, [pc, #120]	; (3bac <recv+0x8c>)
    3b34:	1964      	adds	r4, r4, r5
    3b36:	7aa4      	ldrb	r4, [r4, #10]
    3b38:	2c01      	cmp	r4, #1
    3b3a:	d133      	bne.n	3ba4 <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    3b3c:	4c1b      	ldr	r4, [pc, #108]	; (3bac <recv+0x8c>)
    3b3e:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    3b40:	1964      	adds	r4, r4, r5
    3b42:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    3b44:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    3b46:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    3b48:	2900      	cmp	r1, #0
    3b4a:	d11d      	bne.n	3b88 <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    3b4c:	2101      	movs	r1, #1
    3b4e:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3b50:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    3b52:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3b54:	07d2      	lsls	r2, r2, #31
    3b56:	d500      	bpl.n	3b5a <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    3b58:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    3b5a:	2b00      	cmp	r3, #0
    3b5c:	d117      	bne.n	3b8e <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    3b5e:	3b01      	subs	r3, #1
    3b60:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    3b62:	aa04      	add	r2, sp, #16
    3b64:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    3b66:	0100      	lsls	r0, r0, #4
    3b68:	4b10      	ldr	r3, [pc, #64]	; (3bac <recv+0x8c>)
    3b6a:	1818      	adds	r0, r3, r0
    3b6c:	88c3      	ldrh	r3, [r0, #6]
    3b6e:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    3b70:	2300      	movs	r3, #0
    3b72:	9302      	str	r3, [sp, #8]
    3b74:	9301      	str	r3, [sp, #4]
    3b76:	9300      	str	r3, [sp, #0]
    3b78:	3308      	adds	r3, #8
    3b7a:	2002      	movs	r0, #2
    3b7c:	4c0c      	ldr	r4, [pc, #48]	; (3bb0 <recv+0x90>)
    3b7e:	47a0      	blx	r4
    3b80:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    3b82:	2800      	cmp	r0, #0
    3b84:	d000      	beq.n	3b88 <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    3b86:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    3b88:	0010      	movs	r0, r2
    3b8a:	b007      	add	sp, #28
    3b8c:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    3b8e:	9304      	str	r3, [sp, #16]
    3b90:	e7e7      	b.n	3b62 <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    3b92:	2206      	movs	r2, #6
    3b94:	4252      	negs	r2, r2
    3b96:	e7f7      	b.n	3b88 <recv+0x68>
    3b98:	2206      	movs	r2, #6
    3b9a:	4252      	negs	r2, r2
    3b9c:	e7f4      	b.n	3b88 <recv+0x68>
    3b9e:	2206      	movs	r2, #6
    3ba0:	4252      	negs	r2, r2
    3ba2:	e7f1      	b.n	3b88 <recv+0x68>
    3ba4:	2206      	movs	r2, #6
    3ba6:	4252      	negs	r2, r2
    3ba8:	e7ee      	b.n	3b88 <recv+0x68>
    3baa:	46c0      	nop			; (mov r8, r8)
    3bac:	200002e4 	.word	0x200002e4
    3bb0:	00001191 	.word	0x00001191

00003bb4 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    3bb4:	b530      	push	{r4, r5, lr}
    3bb6:	b087      	sub	sp, #28
    3bb8:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    3bba:	481e      	ldr	r0, [pc, #120]	; (3c34 <close+0x80>)
    3bbc:	4d1e      	ldr	r5, [pc, #120]	; (3c38 <close+0x84>)
    3bbe:	47a8      	blx	r5
    3bc0:	0021      	movs	r1, r4
    3bc2:	481e      	ldr	r0, [pc, #120]	; (3c3c <close+0x88>)
    3bc4:	47a8      	blx	r5
    3bc6:	200d      	movs	r0, #13
    3bc8:	4b1d      	ldr	r3, [pc, #116]	; (3c40 <close+0x8c>)
    3bca:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    3bcc:	2c00      	cmp	r4, #0
    3bce:	db2a      	blt.n	3c26 <close+0x72>
    3bd0:	0122      	lsls	r2, r4, #4
    3bd2:	4b1c      	ldr	r3, [pc, #112]	; (3c44 <close+0x90>)
    3bd4:	189b      	adds	r3, r3, r2
    3bd6:	7a9b      	ldrb	r3, [r3, #10]
    3bd8:	2b01      	cmp	r3, #1
    3bda:	d127      	bne.n	3c2c <close+0x78>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    3bdc:	a905      	add	r1, sp, #20
    3bde:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    3be0:	4b18      	ldr	r3, [pc, #96]	; (3c44 <close+0x90>)
    3be2:	189b      	adds	r3, r3, r2
    3be4:	88da      	ldrh	r2, [r3, #6]
    3be6:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    3be8:	2200      	movs	r2, #0
    3bea:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    3bec:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3bee:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    3bf0:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3bf2:	07db      	lsls	r3, r3, #31
    3bf4:	d500      	bpl.n	3bf8 <close+0x44>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    3bf6:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    3bf8:	2300      	movs	r3, #0
    3bfa:	9302      	str	r3, [sp, #8]
    3bfc:	9301      	str	r3, [sp, #4]
    3bfe:	9300      	str	r3, [sp, #0]
    3c00:	3304      	adds	r3, #4
    3c02:	aa05      	add	r2, sp, #20
    3c04:	2002      	movs	r0, #2
    3c06:	4d10      	ldr	r5, [pc, #64]	; (3c48 <close+0x94>)
    3c08:	47a8      	blx	r5
    3c0a:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    3c0c:	d001      	beq.n	3c12 <close+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    3c0e:	2509      	movs	r5, #9
    3c10:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    3c12:	0124      	lsls	r4, r4, #4
    3c14:	480b      	ldr	r0, [pc, #44]	; (3c44 <close+0x90>)
    3c16:	1820      	adds	r0, r4, r0
    3c18:	2210      	movs	r2, #16
    3c1a:	2100      	movs	r1, #0
    3c1c:	4b0b      	ldr	r3, [pc, #44]	; (3c4c <close+0x98>)
    3c1e:	4798      	blx	r3
	}
	return s8Ret;
}
    3c20:	0028      	movs	r0, r5
    3c22:	b007      	add	sp, #28
    3c24:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    3c26:	2506      	movs	r5, #6
    3c28:	426d      	negs	r5, r5
    3c2a:	e7f9      	b.n	3c20 <close+0x6c>
    3c2c:	2506      	movs	r5, #6
    3c2e:	426d      	negs	r5, r5
    3c30:	e7f6      	b.n	3c20 <close+0x6c>
    3c32:	46c0      	nop			; (mov r8, r8)
    3c34:	0000ac1c 	.word	0x0000ac1c
    3c38:	00009539 	.word	0x00009539
    3c3c:	0000b694 	.word	0x0000b694
    3c40:	0000956d 	.word	0x0000956d
    3c44:	200002e4 	.word	0x200002e4
    3c48:	00001191 	.word	0x00001191
    3c4c:	0000107d 	.word	0x0000107d

00003c50 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    3c50:	b570      	push	{r4, r5, r6, lr}
    3c52:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
    3c54:	2300      	movs	r3, #0
    3c56:	9301      	str	r3, [sp, #4]
    3c58:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
    3c5a:	2100      	movs	r1, #0
    3c5c:	7802      	ldrb	r2, [r0, #0]
    3c5e:	1c44      	adds	r4, r0, #1
    3c60:	3005      	adds	r0, #5
    3c62:	000b      	movs	r3, r1
    3c64:	e009      	b.n	3c7a <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
    3c66:	009d      	lsls	r5, r3, #2
    3c68:	195b      	adds	r3, r3, r5
    3c6a:	005b      	lsls	r3, r3, #1
    3c6c:	189b      	adds	r3, r3, r2
    3c6e:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
    3c70:	0022      	movs	r2, r4
    3c72:	3401      	adds	r4, #1
			if(j > 4)
    3c74:	42a0      	cmp	r0, r4
    3c76:	d00a      	beq.n	3c8e <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
    3c78:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
    3c7a:	2a2e      	cmp	r2, #46	; 0x2e
    3c7c:	d00a      	beq.n	3c94 <nmi_inet_addr+0x44>
    3c7e:	2a00      	cmp	r2, #0
    3c80:	d00c      	beq.n	3c9c <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
    3c82:	3a30      	subs	r2, #48	; 0x30
    3c84:	b2d2      	uxtb	r2, r2
    3c86:	2a09      	cmp	r2, #9
    3c88:	d9ed      	bls.n	3c66 <nmi_inet_addr+0x16>
				return 0;
    3c8a:	2000      	movs	r0, #0
    3c8c:	e000      	b.n	3c90 <nmi_inet_addr+0x40>
				return 0;
    3c8e:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
    3c90:	b002      	add	sp, #8
    3c92:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
    3c94:	466a      	mov	r2, sp
    3c96:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    3c98:	0020      	movs	r0, r4
    3c9a:	e002      	b.n	3ca2 <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
    3c9c:	466a      	mov	r2, sp
    3c9e:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    3ca0:	0020      	movs	r0, r4
    3ca2:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
    3ca4:	2e04      	cmp	r6, #4
    3ca6:	d1d9      	bne.n	3c5c <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    3ca8:	2204      	movs	r2, #4
    3caa:	4669      	mov	r1, sp
    3cac:	a801      	add	r0, sp, #4
    3cae:	4b02      	ldr	r3, [pc, #8]	; (3cb8 <nmi_inet_addr+0x68>)
    3cb0:	4798      	blx	r3
	return u32IP;
    3cb2:	9801      	ldr	r0, [sp, #4]
    3cb4:	e7ec      	b.n	3c90 <nmi_inet_addr+0x40>
    3cb6:	46c0      	nop			; (mov r8, r8)
    3cb8:	00001069 	.word	0x00001069

00003cbc <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    3cbc:	b510      	push	{r4, lr}
    3cbe:	b084      	sub	sp, #16
    3cc0:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    3cc2:	4b0b      	ldr	r3, [pc, #44]	; (3cf0 <gethostbyname+0x34>)
    3cc4:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    3cc6:	b2c3      	uxtb	r3, r0
    3cc8:	2b40      	cmp	r3, #64	; 0x40
    3cca:	d80d      	bhi.n	3ce8 <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    3ccc:	23ff      	movs	r3, #255	; 0xff
    3cce:	4003      	ands	r3, r0
    3cd0:	3301      	adds	r3, #1
    3cd2:	2200      	movs	r2, #0
    3cd4:	9202      	str	r2, [sp, #8]
    3cd6:	9201      	str	r2, [sp, #4]
    3cd8:	9200      	str	r2, [sp, #0]
    3cda:	0022      	movs	r2, r4
    3cdc:	214a      	movs	r1, #74	; 0x4a
    3cde:	2002      	movs	r0, #2
    3ce0:	4c04      	ldr	r4, [pc, #16]	; (3cf4 <gethostbyname+0x38>)
    3ce2:	47a0      	blx	r4
	}
	return s8Err;
}
    3ce4:	b004      	add	sp, #16
    3ce6:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    3ce8:	2006      	movs	r0, #6
    3cea:	4240      	negs	r0, r0
    3cec:	e7fa      	b.n	3ce4 <gethostbyname+0x28>
    3cee:	46c0      	nop			; (mov r8, r8)
    3cf0:	0000108d 	.word	0x0000108d
    3cf4:	00001191 	.word	0x00001191

00003cf8 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    3cf8:	b570      	push	{r4, r5, r6, lr}
    3cfa:	b082      	sub	sp, #8
    3cfc:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    3cfe:	4b2a      	ldr	r3, [pc, #168]	; (3da8 <spi_flash_enable+0xb0>)
    3d00:	4798      	blx	r3
    3d02:	0500      	lsls	r0, r0, #20
    3d04:	0d00      	lsrs	r0, r0, #20
    3d06:	4b29      	ldr	r3, [pc, #164]	; (3dac <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    3d08:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    3d0a:	4298      	cmp	r0, r3
    3d0c:	d802      	bhi.n	3d14 <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    3d0e:	0028      	movs	r0, r5
    3d10:	b002      	add	sp, #8
    3d12:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    3d14:	a901      	add	r1, sp, #4
    3d16:	4826      	ldr	r0, [pc, #152]	; (3db0 <spi_flash_enable+0xb8>)
    3d18:	4b26      	ldr	r3, [pc, #152]	; (3db4 <spi_flash_enable+0xbc>)
    3d1a:	4798      	blx	r3
    3d1c:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    3d1e:	d1f6      	bne.n	3d0e <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    3d20:	4b25      	ldr	r3, [pc, #148]	; (3db8 <spi_flash_enable+0xc0>)
    3d22:	9a01      	ldr	r2, [sp, #4]
    3d24:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    3d26:	4925      	ldr	r1, [pc, #148]	; (3dbc <spi_flash_enable+0xc4>)
    3d28:	4319      	orrs	r1, r3
    3d2a:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    3d2c:	4820      	ldr	r0, [pc, #128]	; (3db0 <spi_flash_enable+0xb8>)
    3d2e:	4b24      	ldr	r3, [pc, #144]	; (3dc0 <spi_flash_enable+0xc8>)
    3d30:	4798      	blx	r3
		if(enable) {
    3d32:	2c00      	cmp	r4, #0
    3d34:	d020      	beq.n	3d78 <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    3d36:	2100      	movs	r1, #0
    3d38:	4822      	ldr	r0, [pc, #136]	; (3dc4 <spi_flash_enable+0xcc>)
    3d3a:	4c21      	ldr	r4, [pc, #132]	; (3dc0 <spi_flash_enable+0xc8>)
    3d3c:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    3d3e:	21ab      	movs	r1, #171	; 0xab
    3d40:	4821      	ldr	r0, [pc, #132]	; (3dc8 <spi_flash_enable+0xd0>)
    3d42:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    3d44:	2101      	movs	r1, #1
    3d46:	4821      	ldr	r0, [pc, #132]	; (3dcc <spi_flash_enable+0xd4>)
    3d48:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    3d4a:	2100      	movs	r1, #0
    3d4c:	4820      	ldr	r0, [pc, #128]	; (3dd0 <spi_flash_enable+0xd8>)
    3d4e:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    3d50:	2181      	movs	r1, #129	; 0x81
    3d52:	4820      	ldr	r0, [pc, #128]	; (3dd4 <spi_flash_enable+0xdc>)
    3d54:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    3d56:	4e20      	ldr	r6, [pc, #128]	; (3dd8 <spi_flash_enable+0xe0>)
    3d58:	4c20      	ldr	r4, [pc, #128]	; (3ddc <spi_flash_enable+0xe4>)
    3d5a:	0030      	movs	r0, r6
    3d5c:	47a0      	blx	r4
    3d5e:	2801      	cmp	r0, #1
    3d60:	d1fb      	bne.n	3d5a <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    3d62:	4b15      	ldr	r3, [pc, #84]	; (3db8 <spi_flash_enable+0xc0>)
    3d64:	9a01      	ldr	r2, [sp, #4]
    3d66:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    3d68:	2180      	movs	r1, #128	; 0x80
    3d6a:	0249      	lsls	r1, r1, #9
    3d6c:	4319      	orrs	r1, r3
    3d6e:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    3d70:	480f      	ldr	r0, [pc, #60]	; (3db0 <spi_flash_enable+0xb8>)
    3d72:	4b13      	ldr	r3, [pc, #76]	; (3dc0 <spi_flash_enable+0xc8>)
    3d74:	4798      	blx	r3
    3d76:	e7ca      	b.n	3d0e <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    3d78:	2100      	movs	r1, #0
    3d7a:	4812      	ldr	r0, [pc, #72]	; (3dc4 <spi_flash_enable+0xcc>)
    3d7c:	4c10      	ldr	r4, [pc, #64]	; (3dc0 <spi_flash_enable+0xc8>)
    3d7e:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    3d80:	21b9      	movs	r1, #185	; 0xb9
    3d82:	4811      	ldr	r0, [pc, #68]	; (3dc8 <spi_flash_enable+0xd0>)
    3d84:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    3d86:	2101      	movs	r1, #1
    3d88:	4810      	ldr	r0, [pc, #64]	; (3dcc <spi_flash_enable+0xd4>)
    3d8a:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    3d8c:	2100      	movs	r1, #0
    3d8e:	4810      	ldr	r0, [pc, #64]	; (3dd0 <spi_flash_enable+0xd8>)
    3d90:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    3d92:	2181      	movs	r1, #129	; 0x81
    3d94:	480f      	ldr	r0, [pc, #60]	; (3dd4 <spi_flash_enable+0xdc>)
    3d96:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    3d98:	4e0f      	ldr	r6, [pc, #60]	; (3dd8 <spi_flash_enable+0xe0>)
    3d9a:	4c10      	ldr	r4, [pc, #64]	; (3ddc <spi_flash_enable+0xe4>)
    3d9c:	0030      	movs	r0, r6
    3d9e:	47a0      	blx	r4
    3da0:	2801      	cmp	r0, #1
    3da2:	d1fb      	bne.n	3d9c <spi_flash_enable+0xa4>
    3da4:	e7dd      	b.n	3d62 <spi_flash_enable+0x6a>
    3da6:	46c0      	nop			; (mov r8, r8)
    3da8:	00002075 	.word	0x00002075
    3dac:	0000039f 	.word	0x0000039f
    3db0:	00001410 	.word	0x00001410
    3db4:	000024c5 	.word	0x000024c5
    3db8:	f8888fff 	.word	0xf8888fff
    3dbc:	01111000 	.word	0x01111000
    3dc0:	000024d1 	.word	0x000024d1
    3dc4:	00010208 	.word	0x00010208
    3dc8:	0001020c 	.word	0x0001020c
    3dcc:	00010214 	.word	0x00010214
    3dd0:	0001021c 	.word	0x0001021c
    3dd4:	00010204 	.word	0x00010204
    3dd8:	00010218 	.word	0x00010218
    3ddc:	000024b9 	.word	0x000024b9

00003de0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    3de0:	4b0c      	ldr	r3, [pc, #48]	; (3e14 <cpu_irq_enter_critical+0x34>)
    3de2:	681b      	ldr	r3, [r3, #0]
    3de4:	2b00      	cmp	r3, #0
    3de6:	d106      	bne.n	3df6 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3de8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    3dec:	2b00      	cmp	r3, #0
    3dee:	d007      	beq.n	3e00 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    3df0:	2200      	movs	r2, #0
    3df2:	4b09      	ldr	r3, [pc, #36]	; (3e18 <cpu_irq_enter_critical+0x38>)
    3df4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    3df6:	4a07      	ldr	r2, [pc, #28]	; (3e14 <cpu_irq_enter_critical+0x34>)
    3df8:	6813      	ldr	r3, [r2, #0]
    3dfa:	3301      	adds	r3, #1
    3dfc:	6013      	str	r3, [r2, #0]
}
    3dfe:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    3e00:	b672      	cpsid	i
    3e02:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    3e06:	2200      	movs	r2, #0
    3e08:	4b04      	ldr	r3, [pc, #16]	; (3e1c <cpu_irq_enter_critical+0x3c>)
    3e0a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    3e0c:	3201      	adds	r2, #1
    3e0e:	4b02      	ldr	r3, [pc, #8]	; (3e18 <cpu_irq_enter_critical+0x38>)
    3e10:	701a      	strb	r2, [r3, #0]
    3e12:	e7f0      	b.n	3df6 <cpu_irq_enter_critical+0x16>
    3e14:	200000a4 	.word	0x200000a4
    3e18:	200000a8 	.word	0x200000a8
    3e1c:	2000000a 	.word	0x2000000a

00003e20 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    3e20:	4b08      	ldr	r3, [pc, #32]	; (3e44 <cpu_irq_leave_critical+0x24>)
    3e22:	681a      	ldr	r2, [r3, #0]
    3e24:	3a01      	subs	r2, #1
    3e26:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    3e28:	681b      	ldr	r3, [r3, #0]
    3e2a:	2b00      	cmp	r3, #0
    3e2c:	d109      	bne.n	3e42 <cpu_irq_leave_critical+0x22>
    3e2e:	4b06      	ldr	r3, [pc, #24]	; (3e48 <cpu_irq_leave_critical+0x28>)
    3e30:	781b      	ldrb	r3, [r3, #0]
    3e32:	2b00      	cmp	r3, #0
    3e34:	d005      	beq.n	3e42 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    3e36:	2201      	movs	r2, #1
    3e38:	4b04      	ldr	r3, [pc, #16]	; (3e4c <cpu_irq_leave_critical+0x2c>)
    3e3a:	701a      	strb	r2, [r3, #0]
    3e3c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3e40:	b662      	cpsie	i
	}
}
    3e42:	4770      	bx	lr
    3e44:	200000a4 	.word	0x200000a4
    3e48:	200000a8 	.word	0x200000a8
    3e4c:	2000000a 	.word	0x2000000a

00003e50 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    3e50:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e52:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    3e54:	ac01      	add	r4, sp, #4
    3e56:	2501      	movs	r5, #1
    3e58:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    3e5a:	2700      	movs	r7, #0
    3e5c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    3e5e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    3e60:	0021      	movs	r1, r4
    3e62:	203e      	movs	r0, #62	; 0x3e
    3e64:	4e06      	ldr	r6, [pc, #24]	; (3e80 <system_board_init+0x30>)
    3e66:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    3e68:	2280      	movs	r2, #128	; 0x80
    3e6a:	05d2      	lsls	r2, r2, #23
    3e6c:	4b05      	ldr	r3, [pc, #20]	; (3e84 <system_board_init+0x34>)
    3e6e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    3e70:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    3e72:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    3e74:	0021      	movs	r1, r4
    3e76:	200f      	movs	r0, #15
    3e78:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    3e7a:	b003      	add	sp, #12
    3e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e7e:	46c0      	nop			; (mov r8, r8)
    3e80:	00004059 	.word	0x00004059
    3e84:	41004480 	.word	0x41004480

00003e88 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3e88:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    3e8a:	2a00      	cmp	r2, #0
    3e8c:	d001      	beq.n	3e92 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    3e8e:	0018      	movs	r0, r3
    3e90:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    3e92:	008b      	lsls	r3, r1, #2
    3e94:	4a06      	ldr	r2, [pc, #24]	; (3eb0 <extint_register_callback+0x28>)
    3e96:	589b      	ldr	r3, [r3, r2]
    3e98:	2b00      	cmp	r3, #0
    3e9a:	d003      	beq.n	3ea4 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    3e9c:	4283      	cmp	r3, r0
    3e9e:	d005      	beq.n	3eac <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    3ea0:	231d      	movs	r3, #29
    3ea2:	e7f4      	b.n	3e8e <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    3ea4:	0089      	lsls	r1, r1, #2
    3ea6:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    3ea8:	2300      	movs	r3, #0
    3eaa:	e7f0      	b.n	3e8e <extint_register_callback+0x6>
		return STATUS_OK;
    3eac:	2300      	movs	r3, #0
    3eae:	e7ee      	b.n	3e8e <extint_register_callback+0x6>
    3eb0:	200003a4 	.word	0x200003a4

00003eb4 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3eb4:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    3eb6:	2900      	cmp	r1, #0
    3eb8:	d001      	beq.n	3ebe <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    3eba:	0018      	movs	r0, r3
    3ebc:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    3ebe:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    3ec0:	281f      	cmp	r0, #31
    3ec2:	d800      	bhi.n	3ec6 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    3ec4:	4a02      	ldr	r2, [pc, #8]	; (3ed0 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    3ec6:	2301      	movs	r3, #1
    3ec8:	4083      	lsls	r3, r0
    3eca:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    3ecc:	2300      	movs	r3, #0
    3ece:	e7f4      	b.n	3eba <extint_chan_enable_callback+0x6>
    3ed0:	40001800 	.word	0x40001800

00003ed4 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3ed4:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    3ed6:	2900      	cmp	r1, #0
    3ed8:	d001      	beq.n	3ede <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    3eda:	0018      	movs	r0, r3
    3edc:	4770      	bx	lr
		return NULL;
    3ede:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    3ee0:	281f      	cmp	r0, #31
    3ee2:	d800      	bhi.n	3ee6 <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    3ee4:	4a02      	ldr	r2, [pc, #8]	; (3ef0 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    3ee6:	2301      	movs	r3, #1
    3ee8:	4083      	lsls	r3, r0
    3eea:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    3eec:	2300      	movs	r3, #0
    3eee:	e7f4      	b.n	3eda <extint_chan_disable_callback+0x6>
    3ef0:	40001800 	.word	0x40001800

00003ef4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    3ef4:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    3ef6:	2200      	movs	r2, #0
    3ef8:	4b10      	ldr	r3, [pc, #64]	; (3f3c <EIC_Handler+0x48>)
    3efa:	701a      	strb	r2, [r3, #0]
    3efc:	2300      	movs	r3, #0
    3efe:	4910      	ldr	r1, [pc, #64]	; (3f40 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    3f00:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    3f02:	4e10      	ldr	r6, [pc, #64]	; (3f44 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    3f04:	4c0d      	ldr	r4, [pc, #52]	; (3f3c <EIC_Handler+0x48>)
    3f06:	e00a      	b.n	3f1e <EIC_Handler+0x2a>
		return eics[eic_index];
    3f08:	490d      	ldr	r1, [pc, #52]	; (3f40 <EIC_Handler+0x4c>)
    3f0a:	e008      	b.n	3f1e <EIC_Handler+0x2a>
    3f0c:	7823      	ldrb	r3, [r4, #0]
    3f0e:	3301      	adds	r3, #1
    3f10:	b2db      	uxtb	r3, r3
    3f12:	7023      	strb	r3, [r4, #0]
    3f14:	2b0f      	cmp	r3, #15
    3f16:	d810      	bhi.n	3f3a <EIC_Handler+0x46>
		return NULL;
    3f18:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    3f1a:	2b1f      	cmp	r3, #31
    3f1c:	d9f4      	bls.n	3f08 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    3f1e:	0028      	movs	r0, r5
    3f20:	4018      	ands	r0, r3
    3f22:	2201      	movs	r2, #1
    3f24:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    3f26:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    3f28:	4210      	tst	r0, r2
    3f2a:	d0ef      	beq.n	3f0c <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    3f2c:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    3f2e:	009b      	lsls	r3, r3, #2
    3f30:	599b      	ldr	r3, [r3, r6]
    3f32:	2b00      	cmp	r3, #0
    3f34:	d0ea      	beq.n	3f0c <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    3f36:	4798      	blx	r3
    3f38:	e7e8      	b.n	3f0c <EIC_Handler+0x18>
			}
		}
	}
}
    3f3a:	bd70      	pop	{r4, r5, r6, pc}
    3f3c:	200003a0 	.word	0x200003a0
    3f40:	40001800 	.word	0x40001800
    3f44:	200003a4 	.word	0x200003a4

00003f48 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    3f48:	4a04      	ldr	r2, [pc, #16]	; (3f5c <_extint_enable+0x14>)
    3f4a:	7813      	ldrb	r3, [r2, #0]
    3f4c:	2102      	movs	r1, #2
    3f4e:	430b      	orrs	r3, r1
    3f50:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    3f52:	7853      	ldrb	r3, [r2, #1]
    3f54:	b25b      	sxtb	r3, r3
    3f56:	2b00      	cmp	r3, #0
    3f58:	dbfb      	blt.n	3f52 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    3f5a:	4770      	bx	lr
    3f5c:	40001800 	.word	0x40001800

00003f60 <_system_extint_init>:
{
    3f60:	b500      	push	{lr}
    3f62:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    3f64:	4a12      	ldr	r2, [pc, #72]	; (3fb0 <_system_extint_init+0x50>)
    3f66:	6993      	ldr	r3, [r2, #24]
    3f68:	2140      	movs	r1, #64	; 0x40
    3f6a:	430b      	orrs	r3, r1
    3f6c:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    3f6e:	a901      	add	r1, sp, #4
    3f70:	2300      	movs	r3, #0
    3f72:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    3f74:	2005      	movs	r0, #5
    3f76:	4b0f      	ldr	r3, [pc, #60]	; (3fb4 <_system_extint_init+0x54>)
    3f78:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    3f7a:	2005      	movs	r0, #5
    3f7c:	4b0e      	ldr	r3, [pc, #56]	; (3fb8 <_system_extint_init+0x58>)
    3f7e:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    3f80:	4a0e      	ldr	r2, [pc, #56]	; (3fbc <_system_extint_init+0x5c>)
    3f82:	7813      	ldrb	r3, [r2, #0]
    3f84:	2101      	movs	r1, #1
    3f86:	430b      	orrs	r3, r1
    3f88:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    3f8a:	7853      	ldrb	r3, [r2, #1]
    3f8c:	b25b      	sxtb	r3, r3
    3f8e:	2b00      	cmp	r3, #0
    3f90:	dbfb      	blt.n	3f8a <_system_extint_init+0x2a>
    3f92:	4b0b      	ldr	r3, [pc, #44]	; (3fc0 <_system_extint_init+0x60>)
    3f94:	0019      	movs	r1, r3
    3f96:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    3f98:	2200      	movs	r2, #0
    3f9a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    3f9c:	4299      	cmp	r1, r3
    3f9e:	d1fc      	bne.n	3f9a <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3fa0:	2210      	movs	r2, #16
    3fa2:	4b08      	ldr	r3, [pc, #32]	; (3fc4 <_system_extint_init+0x64>)
    3fa4:	601a      	str	r2, [r3, #0]
	_extint_enable();
    3fa6:	4b08      	ldr	r3, [pc, #32]	; (3fc8 <_system_extint_init+0x68>)
    3fa8:	4798      	blx	r3
}
    3faa:	b003      	add	sp, #12
    3fac:	bd00      	pop	{pc}
    3fae:	46c0      	nop			; (mov r8, r8)
    3fb0:	40000400 	.word	0x40000400
    3fb4:	0000552d 	.word	0x0000552d
    3fb8:	000054a1 	.word	0x000054a1
    3fbc:	40001800 	.word	0x40001800
    3fc0:	200003a4 	.word	0x200003a4
    3fc4:	e000e100 	.word	0xe000e100
    3fc8:	00003f49 	.word	0x00003f49

00003fcc <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    3fcc:	2300      	movs	r3, #0
    3fce:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    3fd0:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    3fd2:	2201      	movs	r2, #1
    3fd4:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    3fd6:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    3fd8:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    3fda:	3302      	adds	r3, #2
    3fdc:	72c3      	strb	r3, [r0, #11]
}
    3fde:	4770      	bx	lr

00003fe0 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    3fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fe2:	b083      	sub	sp, #12
    3fe4:	0005      	movs	r5, r0
    3fe6:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3fe8:	a901      	add	r1, sp, #4
    3fea:	2300      	movs	r3, #0
    3fec:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    3fee:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    3ff0:	7923      	ldrb	r3, [r4, #4]
    3ff2:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    3ff4:	7a23      	ldrb	r3, [r4, #8]
    3ff6:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    3ff8:	7820      	ldrb	r0, [r4, #0]
    3ffa:	4b15      	ldr	r3, [pc, #84]	; (4050 <extint_chan_set_config+0x70>)
    3ffc:	4798      	blx	r3
		return NULL;
    3ffe:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    4000:	2d1f      	cmp	r5, #31
    4002:	d800      	bhi.n	4006 <extint_chan_set_config+0x26>
		return eics[eic_index];
    4004:	4813      	ldr	r0, [pc, #76]	; (4054 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    4006:	2207      	movs	r2, #7
    4008:	402a      	ands	r2, r5
    400a:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    400c:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    400e:	7aa3      	ldrb	r3, [r4, #10]
    4010:	2b00      	cmp	r3, #0
    4012:	d001      	beq.n	4018 <extint_chan_set_config+0x38>
    4014:	2308      	movs	r3, #8
    4016:	431f      	orrs	r7, r3
    4018:	08eb      	lsrs	r3, r5, #3
    401a:	009b      	lsls	r3, r3, #2
    401c:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    401e:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4020:	260f      	movs	r6, #15
    4022:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    4024:	43b1      	bics	r1, r6
			(new_config << config_pos);
    4026:	4097      	lsls	r7, r2
    4028:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    402a:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    402c:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    402e:	7a63      	ldrb	r3, [r4, #9]
    4030:	2b00      	cmp	r3, #0
    4032:	d106      	bne.n	4042 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    4034:	6943      	ldr	r3, [r0, #20]
    4036:	2201      	movs	r2, #1
    4038:	40aa      	lsls	r2, r5
    403a:	4393      	bics	r3, r2
    403c:	6143      	str	r3, [r0, #20]
	}
}
    403e:	b003      	add	sp, #12
    4040:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    4042:	6942      	ldr	r2, [r0, #20]
    4044:	2301      	movs	r3, #1
    4046:	40ab      	lsls	r3, r5
    4048:	4313      	orrs	r3, r2
    404a:	6143      	str	r3, [r0, #20]
    404c:	e7f7      	b.n	403e <extint_chan_set_config+0x5e>
    404e:	46c0      	nop			; (mov r8, r8)
    4050:	00005625 	.word	0x00005625
    4054:	40001800 	.word	0x40001800

00004058 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    4058:	b500      	push	{lr}
    405a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    405c:	ab01      	add	r3, sp, #4
    405e:	2280      	movs	r2, #128	; 0x80
    4060:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    4062:	780a      	ldrb	r2, [r1, #0]
    4064:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    4066:	784a      	ldrb	r2, [r1, #1]
    4068:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    406a:	788a      	ldrb	r2, [r1, #2]
    406c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    406e:	0019      	movs	r1, r3
    4070:	4b01      	ldr	r3, [pc, #4]	; (4078 <port_pin_set_config+0x20>)
    4072:	4798      	blx	r3
}
    4074:	b003      	add	sp, #12
    4076:	bd00      	pop	{pc}
    4078:	00005625 	.word	0x00005625

0000407c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    407c:	b5f0      	push	{r4, r5, r6, r7, lr}
    407e:	46de      	mov	lr, fp
    4080:	4657      	mov	r7, sl
    4082:	464e      	mov	r6, r9
    4084:	4645      	mov	r5, r8
    4086:	b5e0      	push	{r5, r6, r7, lr}
    4088:	b087      	sub	sp, #28
    408a:	4680      	mov	r8, r0
    408c:	9104      	str	r1, [sp, #16]
    408e:	0016      	movs	r6, r2
    4090:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    4092:	2200      	movs	r2, #0
    4094:	2300      	movs	r3, #0
    4096:	2100      	movs	r1, #0
    4098:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    409a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    409c:	2001      	movs	r0, #1
    409e:	0021      	movs	r1, r4
    40a0:	9600      	str	r6, [sp, #0]
    40a2:	9701      	str	r7, [sp, #4]
    40a4:	465c      	mov	r4, fp
    40a6:	9403      	str	r4, [sp, #12]
    40a8:	4644      	mov	r4, r8
    40aa:	9405      	str	r4, [sp, #20]
    40ac:	e013      	b.n	40d6 <long_division+0x5a>
    40ae:	2420      	movs	r4, #32
    40b0:	1a64      	subs	r4, r4, r1
    40b2:	0005      	movs	r5, r0
    40b4:	40e5      	lsrs	r5, r4
    40b6:	46a8      	mov	r8, r5
    40b8:	e014      	b.n	40e4 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    40ba:	9c00      	ldr	r4, [sp, #0]
    40bc:	9d01      	ldr	r5, [sp, #4]
    40be:	1b12      	subs	r2, r2, r4
    40c0:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    40c2:	465c      	mov	r4, fp
    40c4:	464d      	mov	r5, r9
    40c6:	432c      	orrs	r4, r5
    40c8:	46a3      	mov	fp, r4
    40ca:	9c03      	ldr	r4, [sp, #12]
    40cc:	4645      	mov	r5, r8
    40ce:	432c      	orrs	r4, r5
    40d0:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    40d2:	3901      	subs	r1, #1
    40d4:	d325      	bcc.n	4122 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    40d6:	2420      	movs	r4, #32
    40d8:	4264      	negs	r4, r4
    40da:	190c      	adds	r4, r1, r4
    40dc:	d4e7      	bmi.n	40ae <long_division+0x32>
    40de:	0005      	movs	r5, r0
    40e0:	40a5      	lsls	r5, r4
    40e2:	46a8      	mov	r8, r5
    40e4:	0004      	movs	r4, r0
    40e6:	408c      	lsls	r4, r1
    40e8:	46a1      	mov	r9, r4
		r = r << 1;
    40ea:	1892      	adds	r2, r2, r2
    40ec:	415b      	adcs	r3, r3
    40ee:	0014      	movs	r4, r2
    40f0:	001d      	movs	r5, r3
		if (n & bit_shift) {
    40f2:	9e05      	ldr	r6, [sp, #20]
    40f4:	464f      	mov	r7, r9
    40f6:	403e      	ands	r6, r7
    40f8:	46b4      	mov	ip, r6
    40fa:	9e04      	ldr	r6, [sp, #16]
    40fc:	4647      	mov	r7, r8
    40fe:	403e      	ands	r6, r7
    4100:	46b2      	mov	sl, r6
    4102:	4666      	mov	r6, ip
    4104:	4657      	mov	r7, sl
    4106:	433e      	orrs	r6, r7
    4108:	d003      	beq.n	4112 <long_division+0x96>
			r |= 0x01;
    410a:	0006      	movs	r6, r0
    410c:	4326      	orrs	r6, r4
    410e:	0032      	movs	r2, r6
    4110:	002b      	movs	r3, r5
		if (r >= d) {
    4112:	9c00      	ldr	r4, [sp, #0]
    4114:	9d01      	ldr	r5, [sp, #4]
    4116:	429d      	cmp	r5, r3
    4118:	d8db      	bhi.n	40d2 <long_division+0x56>
    411a:	d1ce      	bne.n	40ba <long_division+0x3e>
    411c:	4294      	cmp	r4, r2
    411e:	d8d8      	bhi.n	40d2 <long_division+0x56>
    4120:	e7cb      	b.n	40ba <long_division+0x3e>
    4122:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    4124:	4658      	mov	r0, fp
    4126:	0019      	movs	r1, r3
    4128:	b007      	add	sp, #28
    412a:	bc3c      	pop	{r2, r3, r4, r5}
    412c:	4690      	mov	r8, r2
    412e:	4699      	mov	r9, r3
    4130:	46a2      	mov	sl, r4
    4132:	46ab      	mov	fp, r5
    4134:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004136 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    4136:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    4138:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    413a:	2340      	movs	r3, #64	; 0x40
    413c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    413e:	4281      	cmp	r1, r0
    4140:	d202      	bcs.n	4148 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    4142:	0018      	movs	r0, r3
    4144:	bd10      	pop	{r4, pc}
		baud_calculated++;
    4146:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    4148:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    414a:	1c63      	adds	r3, r4, #1
    414c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    414e:	4288      	cmp	r0, r1
    4150:	d9f9      	bls.n	4146 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4152:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    4154:	2cff      	cmp	r4, #255	; 0xff
    4156:	d8f4      	bhi.n	4142 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    4158:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    415a:	2300      	movs	r3, #0
    415c:	e7f1      	b.n	4142 <_sercom_get_sync_baud_val+0xc>
	...

00004160 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    4160:	b5f0      	push	{r4, r5, r6, r7, lr}
    4162:	b083      	sub	sp, #12
    4164:	000f      	movs	r7, r1
    4166:	0016      	movs	r6, r2
    4168:	aa08      	add	r2, sp, #32
    416a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    416c:	0004      	movs	r4, r0
    416e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4170:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    4172:	42bc      	cmp	r4, r7
    4174:	d902      	bls.n	417c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    4176:	0010      	movs	r0, r2
    4178:	b003      	add	sp, #12
    417a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    417c:	2b00      	cmp	r3, #0
    417e:	d114      	bne.n	41aa <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    4180:	0002      	movs	r2, r0
    4182:	0008      	movs	r0, r1
    4184:	2100      	movs	r1, #0
    4186:	4c19      	ldr	r4, [pc, #100]	; (41ec <_sercom_get_async_baud_val+0x8c>)
    4188:	47a0      	blx	r4
    418a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    418c:	003a      	movs	r2, r7
    418e:	2300      	movs	r3, #0
    4190:	2000      	movs	r0, #0
    4192:	4c17      	ldr	r4, [pc, #92]	; (41f0 <_sercom_get_async_baud_val+0x90>)
    4194:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    4196:	2200      	movs	r2, #0
    4198:	2301      	movs	r3, #1
    419a:	1a12      	subs	r2, r2, r0
    419c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    419e:	0c12      	lsrs	r2, r2, #16
    41a0:	041b      	lsls	r3, r3, #16
    41a2:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    41a4:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    41a6:	2200      	movs	r2, #0
    41a8:	e7e5      	b.n	4176 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    41aa:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    41ac:	2b01      	cmp	r3, #1
    41ae:	d1f9      	bne.n	41a4 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    41b0:	000a      	movs	r2, r1
    41b2:	2300      	movs	r3, #0
    41b4:	2100      	movs	r1, #0
    41b6:	4c0d      	ldr	r4, [pc, #52]	; (41ec <_sercom_get_async_baud_val+0x8c>)
    41b8:	47a0      	blx	r4
    41ba:	0002      	movs	r2, r0
    41bc:	000b      	movs	r3, r1
    41be:	9200      	str	r2, [sp, #0]
    41c0:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    41c2:	0038      	movs	r0, r7
    41c4:	2100      	movs	r1, #0
    41c6:	4c0a      	ldr	r4, [pc, #40]	; (41f0 <_sercom_get_async_baud_val+0x90>)
    41c8:	47a0      	blx	r4
    41ca:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    41cc:	2380      	movs	r3, #128	; 0x80
    41ce:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    41d0:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    41d2:	4298      	cmp	r0, r3
    41d4:	d8cf      	bhi.n	4176 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    41d6:	0f79      	lsrs	r1, r7, #29
    41d8:	00f8      	lsls	r0, r7, #3
    41da:	9a00      	ldr	r2, [sp, #0]
    41dc:	9b01      	ldr	r3, [sp, #4]
    41de:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    41e0:	00ea      	lsls	r2, r5, #3
    41e2:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    41e4:	b2d2      	uxtb	r2, r2
    41e6:	0352      	lsls	r2, r2, #13
    41e8:	432a      	orrs	r2, r5
    41ea:	e7db      	b.n	41a4 <_sercom_get_async_baud_val+0x44>
    41ec:	00007655 	.word	0x00007655
    41f0:	0000407d 	.word	0x0000407d

000041f4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    41f4:	b510      	push	{r4, lr}
    41f6:	b082      	sub	sp, #8
    41f8:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    41fa:	4b0e      	ldr	r3, [pc, #56]	; (4234 <sercom_set_gclk_generator+0x40>)
    41fc:	781b      	ldrb	r3, [r3, #0]
    41fe:	2b00      	cmp	r3, #0
    4200:	d007      	beq.n	4212 <sercom_set_gclk_generator+0x1e>
    4202:	2900      	cmp	r1, #0
    4204:	d105      	bne.n	4212 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    4206:	4b0b      	ldr	r3, [pc, #44]	; (4234 <sercom_set_gclk_generator+0x40>)
    4208:	785b      	ldrb	r3, [r3, #1]
    420a:	4283      	cmp	r3, r0
    420c:	d010      	beq.n	4230 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    420e:	201d      	movs	r0, #29
    4210:	e00c      	b.n	422c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    4212:	a901      	add	r1, sp, #4
    4214:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    4216:	2013      	movs	r0, #19
    4218:	4b07      	ldr	r3, [pc, #28]	; (4238 <sercom_set_gclk_generator+0x44>)
    421a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    421c:	2013      	movs	r0, #19
    421e:	4b07      	ldr	r3, [pc, #28]	; (423c <sercom_set_gclk_generator+0x48>)
    4220:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    4222:	4b04      	ldr	r3, [pc, #16]	; (4234 <sercom_set_gclk_generator+0x40>)
    4224:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    4226:	2201      	movs	r2, #1
    4228:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    422a:	2000      	movs	r0, #0
}
    422c:	b002      	add	sp, #8
    422e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    4230:	2000      	movs	r0, #0
    4232:	e7fb      	b.n	422c <sercom_set_gclk_generator+0x38>
    4234:	200000ac 	.word	0x200000ac
    4238:	0000552d 	.word	0x0000552d
    423c:	000054a1 	.word	0x000054a1

00004240 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    4240:	4b40      	ldr	r3, [pc, #256]	; (4344 <_sercom_get_default_pad+0x104>)
    4242:	4298      	cmp	r0, r3
    4244:	d031      	beq.n	42aa <_sercom_get_default_pad+0x6a>
    4246:	d90a      	bls.n	425e <_sercom_get_default_pad+0x1e>
    4248:	4b3f      	ldr	r3, [pc, #252]	; (4348 <_sercom_get_default_pad+0x108>)
    424a:	4298      	cmp	r0, r3
    424c:	d04d      	beq.n	42ea <_sercom_get_default_pad+0xaa>
    424e:	4b3f      	ldr	r3, [pc, #252]	; (434c <_sercom_get_default_pad+0x10c>)
    4250:	4298      	cmp	r0, r3
    4252:	d05a      	beq.n	430a <_sercom_get_default_pad+0xca>
    4254:	4b3e      	ldr	r3, [pc, #248]	; (4350 <_sercom_get_default_pad+0x110>)
    4256:	4298      	cmp	r0, r3
    4258:	d037      	beq.n	42ca <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    425a:	2000      	movs	r0, #0
}
    425c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    425e:	4b3d      	ldr	r3, [pc, #244]	; (4354 <_sercom_get_default_pad+0x114>)
    4260:	4298      	cmp	r0, r3
    4262:	d00c      	beq.n	427e <_sercom_get_default_pad+0x3e>
    4264:	4b3c      	ldr	r3, [pc, #240]	; (4358 <_sercom_get_default_pad+0x118>)
    4266:	4298      	cmp	r0, r3
    4268:	d1f7      	bne.n	425a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    426a:	2901      	cmp	r1, #1
    426c:	d017      	beq.n	429e <_sercom_get_default_pad+0x5e>
    426e:	2900      	cmp	r1, #0
    4270:	d05d      	beq.n	432e <_sercom_get_default_pad+0xee>
    4272:	2902      	cmp	r1, #2
    4274:	d015      	beq.n	42a2 <_sercom_get_default_pad+0x62>
    4276:	2903      	cmp	r1, #3
    4278:	d015      	beq.n	42a6 <_sercom_get_default_pad+0x66>
	return 0;
    427a:	2000      	movs	r0, #0
    427c:	e7ee      	b.n	425c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    427e:	2901      	cmp	r1, #1
    4280:	d007      	beq.n	4292 <_sercom_get_default_pad+0x52>
    4282:	2900      	cmp	r1, #0
    4284:	d051      	beq.n	432a <_sercom_get_default_pad+0xea>
    4286:	2902      	cmp	r1, #2
    4288:	d005      	beq.n	4296 <_sercom_get_default_pad+0x56>
    428a:	2903      	cmp	r1, #3
    428c:	d005      	beq.n	429a <_sercom_get_default_pad+0x5a>
	return 0;
    428e:	2000      	movs	r0, #0
    4290:	e7e4      	b.n	425c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4292:	4832      	ldr	r0, [pc, #200]	; (435c <_sercom_get_default_pad+0x11c>)
    4294:	e7e2      	b.n	425c <_sercom_get_default_pad+0x1c>
    4296:	4832      	ldr	r0, [pc, #200]	; (4360 <_sercom_get_default_pad+0x120>)
    4298:	e7e0      	b.n	425c <_sercom_get_default_pad+0x1c>
    429a:	4832      	ldr	r0, [pc, #200]	; (4364 <_sercom_get_default_pad+0x124>)
    429c:	e7de      	b.n	425c <_sercom_get_default_pad+0x1c>
    429e:	4832      	ldr	r0, [pc, #200]	; (4368 <_sercom_get_default_pad+0x128>)
    42a0:	e7dc      	b.n	425c <_sercom_get_default_pad+0x1c>
    42a2:	4832      	ldr	r0, [pc, #200]	; (436c <_sercom_get_default_pad+0x12c>)
    42a4:	e7da      	b.n	425c <_sercom_get_default_pad+0x1c>
    42a6:	4832      	ldr	r0, [pc, #200]	; (4370 <_sercom_get_default_pad+0x130>)
    42a8:	e7d8      	b.n	425c <_sercom_get_default_pad+0x1c>
    42aa:	2901      	cmp	r1, #1
    42ac:	d007      	beq.n	42be <_sercom_get_default_pad+0x7e>
    42ae:	2900      	cmp	r1, #0
    42b0:	d03f      	beq.n	4332 <_sercom_get_default_pad+0xf2>
    42b2:	2902      	cmp	r1, #2
    42b4:	d005      	beq.n	42c2 <_sercom_get_default_pad+0x82>
    42b6:	2903      	cmp	r1, #3
    42b8:	d005      	beq.n	42c6 <_sercom_get_default_pad+0x86>
	return 0;
    42ba:	2000      	movs	r0, #0
    42bc:	e7ce      	b.n	425c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    42be:	482d      	ldr	r0, [pc, #180]	; (4374 <_sercom_get_default_pad+0x134>)
    42c0:	e7cc      	b.n	425c <_sercom_get_default_pad+0x1c>
    42c2:	482d      	ldr	r0, [pc, #180]	; (4378 <_sercom_get_default_pad+0x138>)
    42c4:	e7ca      	b.n	425c <_sercom_get_default_pad+0x1c>
    42c6:	482d      	ldr	r0, [pc, #180]	; (437c <_sercom_get_default_pad+0x13c>)
    42c8:	e7c8      	b.n	425c <_sercom_get_default_pad+0x1c>
    42ca:	2901      	cmp	r1, #1
    42cc:	d007      	beq.n	42de <_sercom_get_default_pad+0x9e>
    42ce:	2900      	cmp	r1, #0
    42d0:	d031      	beq.n	4336 <_sercom_get_default_pad+0xf6>
    42d2:	2902      	cmp	r1, #2
    42d4:	d005      	beq.n	42e2 <_sercom_get_default_pad+0xa2>
    42d6:	2903      	cmp	r1, #3
    42d8:	d005      	beq.n	42e6 <_sercom_get_default_pad+0xa6>
	return 0;
    42da:	2000      	movs	r0, #0
    42dc:	e7be      	b.n	425c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    42de:	4828      	ldr	r0, [pc, #160]	; (4380 <_sercom_get_default_pad+0x140>)
    42e0:	e7bc      	b.n	425c <_sercom_get_default_pad+0x1c>
    42e2:	4828      	ldr	r0, [pc, #160]	; (4384 <_sercom_get_default_pad+0x144>)
    42e4:	e7ba      	b.n	425c <_sercom_get_default_pad+0x1c>
    42e6:	4828      	ldr	r0, [pc, #160]	; (4388 <_sercom_get_default_pad+0x148>)
    42e8:	e7b8      	b.n	425c <_sercom_get_default_pad+0x1c>
    42ea:	2901      	cmp	r1, #1
    42ec:	d007      	beq.n	42fe <_sercom_get_default_pad+0xbe>
    42ee:	2900      	cmp	r1, #0
    42f0:	d023      	beq.n	433a <_sercom_get_default_pad+0xfa>
    42f2:	2902      	cmp	r1, #2
    42f4:	d005      	beq.n	4302 <_sercom_get_default_pad+0xc2>
    42f6:	2903      	cmp	r1, #3
    42f8:	d005      	beq.n	4306 <_sercom_get_default_pad+0xc6>
	return 0;
    42fa:	2000      	movs	r0, #0
    42fc:	e7ae      	b.n	425c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    42fe:	4823      	ldr	r0, [pc, #140]	; (438c <_sercom_get_default_pad+0x14c>)
    4300:	e7ac      	b.n	425c <_sercom_get_default_pad+0x1c>
    4302:	4823      	ldr	r0, [pc, #140]	; (4390 <_sercom_get_default_pad+0x150>)
    4304:	e7aa      	b.n	425c <_sercom_get_default_pad+0x1c>
    4306:	4823      	ldr	r0, [pc, #140]	; (4394 <_sercom_get_default_pad+0x154>)
    4308:	e7a8      	b.n	425c <_sercom_get_default_pad+0x1c>
    430a:	2901      	cmp	r1, #1
    430c:	d007      	beq.n	431e <_sercom_get_default_pad+0xde>
    430e:	2900      	cmp	r1, #0
    4310:	d015      	beq.n	433e <_sercom_get_default_pad+0xfe>
    4312:	2902      	cmp	r1, #2
    4314:	d005      	beq.n	4322 <_sercom_get_default_pad+0xe2>
    4316:	2903      	cmp	r1, #3
    4318:	d005      	beq.n	4326 <_sercom_get_default_pad+0xe6>
	return 0;
    431a:	2000      	movs	r0, #0
    431c:	e79e      	b.n	425c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    431e:	481e      	ldr	r0, [pc, #120]	; (4398 <_sercom_get_default_pad+0x158>)
    4320:	e79c      	b.n	425c <_sercom_get_default_pad+0x1c>
    4322:	481e      	ldr	r0, [pc, #120]	; (439c <_sercom_get_default_pad+0x15c>)
    4324:	e79a      	b.n	425c <_sercom_get_default_pad+0x1c>
    4326:	481e      	ldr	r0, [pc, #120]	; (43a0 <_sercom_get_default_pad+0x160>)
    4328:	e798      	b.n	425c <_sercom_get_default_pad+0x1c>
    432a:	481e      	ldr	r0, [pc, #120]	; (43a4 <_sercom_get_default_pad+0x164>)
    432c:	e796      	b.n	425c <_sercom_get_default_pad+0x1c>
    432e:	2003      	movs	r0, #3
    4330:	e794      	b.n	425c <_sercom_get_default_pad+0x1c>
    4332:	481d      	ldr	r0, [pc, #116]	; (43a8 <_sercom_get_default_pad+0x168>)
    4334:	e792      	b.n	425c <_sercom_get_default_pad+0x1c>
    4336:	481d      	ldr	r0, [pc, #116]	; (43ac <_sercom_get_default_pad+0x16c>)
    4338:	e790      	b.n	425c <_sercom_get_default_pad+0x1c>
    433a:	481d      	ldr	r0, [pc, #116]	; (43b0 <_sercom_get_default_pad+0x170>)
    433c:	e78e      	b.n	425c <_sercom_get_default_pad+0x1c>
    433e:	481d      	ldr	r0, [pc, #116]	; (43b4 <_sercom_get_default_pad+0x174>)
    4340:	e78c      	b.n	425c <_sercom_get_default_pad+0x1c>
    4342:	46c0      	nop			; (mov r8, r8)
    4344:	42001000 	.word	0x42001000
    4348:	42001800 	.word	0x42001800
    434c:	42001c00 	.word	0x42001c00
    4350:	42001400 	.word	0x42001400
    4354:	42000800 	.word	0x42000800
    4358:	42000c00 	.word	0x42000c00
    435c:	00050003 	.word	0x00050003
    4360:	00060003 	.word	0x00060003
    4364:	00070003 	.word	0x00070003
    4368:	00010003 	.word	0x00010003
    436c:	001e0003 	.word	0x001e0003
    4370:	001f0003 	.word	0x001f0003
    4374:	00090003 	.word	0x00090003
    4378:	000a0003 	.word	0x000a0003
    437c:	000b0003 	.word	0x000b0003
    4380:	00110003 	.word	0x00110003
    4384:	00120003 	.word	0x00120003
    4388:	00130003 	.word	0x00130003
    438c:	000d0003 	.word	0x000d0003
    4390:	000e0003 	.word	0x000e0003
    4394:	000f0003 	.word	0x000f0003
    4398:	00170003 	.word	0x00170003
    439c:	00180003 	.word	0x00180003
    43a0:	00190003 	.word	0x00190003
    43a4:	00040003 	.word	0x00040003
    43a8:	00080003 	.word	0x00080003
    43ac:	00100003 	.word	0x00100003
    43b0:	000c0003 	.word	0x000c0003
    43b4:	00160003 	.word	0x00160003

000043b8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    43b8:	b530      	push	{r4, r5, lr}
    43ba:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    43bc:	4b0b      	ldr	r3, [pc, #44]	; (43ec <_sercom_get_sercom_inst_index+0x34>)
    43be:	466a      	mov	r2, sp
    43c0:	cb32      	ldmia	r3!, {r1, r4, r5}
    43c2:	c232      	stmia	r2!, {r1, r4, r5}
    43c4:	cb32      	ldmia	r3!, {r1, r4, r5}
    43c6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    43c8:	9b00      	ldr	r3, [sp, #0]
    43ca:	4283      	cmp	r3, r0
    43cc:	d00b      	beq.n	43e6 <_sercom_get_sercom_inst_index+0x2e>
    43ce:	2301      	movs	r3, #1
    43d0:	009a      	lsls	r2, r3, #2
    43d2:	4669      	mov	r1, sp
    43d4:	5852      	ldr	r2, [r2, r1]
    43d6:	4282      	cmp	r2, r0
    43d8:	d006      	beq.n	43e8 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    43da:	3301      	adds	r3, #1
    43dc:	2b06      	cmp	r3, #6
    43de:	d1f7      	bne.n	43d0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    43e0:	2000      	movs	r0, #0
}
    43e2:	b007      	add	sp, #28
    43e4:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    43e6:	2300      	movs	r3, #0
			return i;
    43e8:	b2d8      	uxtb	r0, r3
    43ea:	e7fa      	b.n	43e2 <_sercom_get_sercom_inst_index+0x2a>
    43ec:	0000b6c8 	.word	0x0000b6c8

000043f0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    43f0:	4770      	bx	lr
	...

000043f4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    43f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    43f6:	4b0a      	ldr	r3, [pc, #40]	; (4420 <_sercom_set_handler+0x2c>)
    43f8:	781b      	ldrb	r3, [r3, #0]
    43fa:	2b00      	cmp	r3, #0
    43fc:	d10c      	bne.n	4418 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    43fe:	4f09      	ldr	r7, [pc, #36]	; (4424 <_sercom_set_handler+0x30>)
    4400:	4e09      	ldr	r6, [pc, #36]	; (4428 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    4402:	4d0a      	ldr	r5, [pc, #40]	; (442c <_sercom_set_handler+0x38>)
    4404:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    4406:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    4408:	195a      	adds	r2, r3, r5
    440a:	6014      	str	r4, [r2, #0]
    440c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    440e:	2b18      	cmp	r3, #24
    4410:	d1f9      	bne.n	4406 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    4412:	2201      	movs	r2, #1
    4414:	4b02      	ldr	r3, [pc, #8]	; (4420 <_sercom_set_handler+0x2c>)
    4416:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    4418:	0080      	lsls	r0, r0, #2
    441a:	4b02      	ldr	r3, [pc, #8]	; (4424 <_sercom_set_handler+0x30>)
    441c:	50c1      	str	r1, [r0, r3]
}
    441e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4420:	200000ae 	.word	0x200000ae
    4424:	200000b0 	.word	0x200000b0
    4428:	000043f1 	.word	0x000043f1
    442c:	200003e4 	.word	0x200003e4

00004430 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    4430:	b500      	push	{lr}
    4432:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    4434:	2309      	movs	r3, #9
    4436:	466a      	mov	r2, sp
    4438:	7013      	strb	r3, [r2, #0]
    443a:	3301      	adds	r3, #1
    443c:	7053      	strb	r3, [r2, #1]
    443e:	3301      	adds	r3, #1
    4440:	7093      	strb	r3, [r2, #2]
    4442:	3301      	adds	r3, #1
    4444:	70d3      	strb	r3, [r2, #3]
    4446:	3301      	adds	r3, #1
    4448:	7113      	strb	r3, [r2, #4]
    444a:	3301      	adds	r3, #1
    444c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    444e:	4b03      	ldr	r3, [pc, #12]	; (445c <_sercom_get_interrupt_vector+0x2c>)
    4450:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    4452:	466b      	mov	r3, sp
    4454:	5618      	ldrsb	r0, [r3, r0]
}
    4456:	b003      	add	sp, #12
    4458:	bd00      	pop	{pc}
    445a:	46c0      	nop			; (mov r8, r8)
    445c:	000043b9 	.word	0x000043b9

00004460 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    4460:	b510      	push	{r4, lr}
    4462:	4b02      	ldr	r3, [pc, #8]	; (446c <SERCOM0_Handler+0xc>)
    4464:	681b      	ldr	r3, [r3, #0]
    4466:	2000      	movs	r0, #0
    4468:	4798      	blx	r3
    446a:	bd10      	pop	{r4, pc}
    446c:	200000b0 	.word	0x200000b0

00004470 <SERCOM1_Handler>:
    4470:	b510      	push	{r4, lr}
    4472:	4b02      	ldr	r3, [pc, #8]	; (447c <SERCOM1_Handler+0xc>)
    4474:	685b      	ldr	r3, [r3, #4]
    4476:	2001      	movs	r0, #1
    4478:	4798      	blx	r3
    447a:	bd10      	pop	{r4, pc}
    447c:	200000b0 	.word	0x200000b0

00004480 <SERCOM2_Handler>:
    4480:	b510      	push	{r4, lr}
    4482:	4b02      	ldr	r3, [pc, #8]	; (448c <SERCOM2_Handler+0xc>)
    4484:	689b      	ldr	r3, [r3, #8]
    4486:	2002      	movs	r0, #2
    4488:	4798      	blx	r3
    448a:	bd10      	pop	{r4, pc}
    448c:	200000b0 	.word	0x200000b0

00004490 <SERCOM3_Handler>:
    4490:	b510      	push	{r4, lr}
    4492:	4b02      	ldr	r3, [pc, #8]	; (449c <SERCOM3_Handler+0xc>)
    4494:	68db      	ldr	r3, [r3, #12]
    4496:	2003      	movs	r0, #3
    4498:	4798      	blx	r3
    449a:	bd10      	pop	{r4, pc}
    449c:	200000b0 	.word	0x200000b0

000044a0 <SERCOM4_Handler>:
    44a0:	b510      	push	{r4, lr}
    44a2:	4b02      	ldr	r3, [pc, #8]	; (44ac <SERCOM4_Handler+0xc>)
    44a4:	691b      	ldr	r3, [r3, #16]
    44a6:	2004      	movs	r0, #4
    44a8:	4798      	blx	r3
    44aa:	bd10      	pop	{r4, pc}
    44ac:	200000b0 	.word	0x200000b0

000044b0 <SERCOM5_Handler>:
    44b0:	b510      	push	{r4, lr}
    44b2:	4b02      	ldr	r3, [pc, #8]	; (44bc <SERCOM5_Handler+0xc>)
    44b4:	695b      	ldr	r3, [r3, #20]
    44b6:	2005      	movs	r0, #5
    44b8:	4798      	blx	r3
    44ba:	bd10      	pop	{r4, pc}
    44bc:	200000b0 	.word	0x200000b0

000044c0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    44c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    44c2:	b08b      	sub	sp, #44	; 0x2c
    44c4:	0005      	movs	r5, r0
    44c6:	000c      	movs	r4, r1
    44c8:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    44ca:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    44cc:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    44ce:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    44d0:	079b      	lsls	r3, r3, #30
    44d2:	d501      	bpl.n	44d8 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    44d4:	b00b      	add	sp, #44	; 0x2c
    44d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    44d8:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    44da:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    44dc:	07db      	lsls	r3, r3, #31
    44de:	d4f9      	bmi.n	44d4 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    44e0:	0008      	movs	r0, r1
    44e2:	4b60      	ldr	r3, [pc, #384]	; (4664 <spi_init+0x1a4>)
    44e4:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    44e6:	4a60      	ldr	r2, [pc, #384]	; (4668 <spi_init+0x1a8>)
    44e8:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    44ea:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    44ec:	2301      	movs	r3, #1
    44ee:	40bb      	lsls	r3, r7
    44f0:	430b      	orrs	r3, r1
    44f2:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    44f4:	a909      	add	r1, sp, #36	; 0x24
    44f6:	2724      	movs	r7, #36	; 0x24
    44f8:	5df3      	ldrb	r3, [r6, r7]
    44fa:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    44fc:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    44fe:	b2c3      	uxtb	r3, r0
    4500:	9301      	str	r3, [sp, #4]
    4502:	0018      	movs	r0, r3
    4504:	4b59      	ldr	r3, [pc, #356]	; (466c <spi_init+0x1ac>)
    4506:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4508:	9801      	ldr	r0, [sp, #4]
    450a:	4b59      	ldr	r3, [pc, #356]	; (4670 <spi_init+0x1b0>)
    450c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    450e:	5df0      	ldrb	r0, [r6, r7]
    4510:	2100      	movs	r1, #0
    4512:	4b58      	ldr	r3, [pc, #352]	; (4674 <spi_init+0x1b4>)
    4514:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    4516:	7833      	ldrb	r3, [r6, #0]
    4518:	2b01      	cmp	r3, #1
    451a:	d038      	beq.n	458e <spi_init+0xce>
    451c:	002b      	movs	r3, r5
    451e:	330c      	adds	r3, #12
    4520:	0029      	movs	r1, r5
    4522:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    4524:	2200      	movs	r2, #0
    4526:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    4528:	428b      	cmp	r3, r1
    452a:	d1fc      	bne.n	4526 <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    452c:	2300      	movs	r3, #0
    452e:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    4530:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    4532:	2400      	movs	r4, #0
    4534:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    4536:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    4538:	3336      	adds	r3, #54	; 0x36
    453a:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    453c:	3301      	adds	r3, #1
    453e:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    4540:	3301      	adds	r3, #1
    4542:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    4544:	3b35      	subs	r3, #53	; 0x35
    4546:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    4548:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    454a:	6828      	ldr	r0, [r5, #0]
    454c:	4b45      	ldr	r3, [pc, #276]	; (4664 <spi_init+0x1a4>)
    454e:	4798      	blx	r3
    4550:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    4552:	4949      	ldr	r1, [pc, #292]	; (4678 <spi_init+0x1b8>)
    4554:	4b49      	ldr	r3, [pc, #292]	; (467c <spi_init+0x1bc>)
    4556:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4558:	00bf      	lsls	r7, r7, #2
    455a:	4b49      	ldr	r3, [pc, #292]	; (4680 <spi_init+0x1c0>)
    455c:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    455e:	682f      	ldr	r7, [r5, #0]
    4560:	ab04      	add	r3, sp, #16
    4562:	2280      	movs	r2, #128	; 0x80
    4564:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4566:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4568:	3a7f      	subs	r2, #127	; 0x7f
    456a:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    456c:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    456e:	7833      	ldrb	r3, [r6, #0]
    4570:	2b00      	cmp	r3, #0
    4572:	d102      	bne.n	457a <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4574:	2200      	movs	r2, #0
    4576:	ab04      	add	r3, sp, #16
    4578:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    457a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    457c:	9305      	str	r3, [sp, #20]
    457e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    4580:	9306      	str	r3, [sp, #24]
    4582:	6b33      	ldr	r3, [r6, #48]	; 0x30
    4584:	9307      	str	r3, [sp, #28]
    4586:	6b73      	ldr	r3, [r6, #52]	; 0x34
    4588:	9308      	str	r3, [sp, #32]
    458a:	2400      	movs	r4, #0
    458c:	e00b      	b.n	45a6 <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    458e:	6823      	ldr	r3, [r4, #0]
    4590:	220c      	movs	r2, #12
    4592:	4313      	orrs	r3, r2
    4594:	6023      	str	r3, [r4, #0]
    4596:	e7c1      	b.n	451c <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4598:	0038      	movs	r0, r7
    459a:	4b3a      	ldr	r3, [pc, #232]	; (4684 <spi_init+0x1c4>)
    459c:	4798      	blx	r3
    459e:	e00a      	b.n	45b6 <spi_init+0xf6>
    45a0:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    45a2:	2c04      	cmp	r4, #4
    45a4:	d010      	beq.n	45c8 <spi_init+0x108>
    45a6:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    45a8:	00a3      	lsls	r3, r4, #2
    45aa:	aa02      	add	r2, sp, #8
    45ac:	200c      	movs	r0, #12
    45ae:	1812      	adds	r2, r2, r0
    45b0:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    45b2:	2800      	cmp	r0, #0
    45b4:	d0f0      	beq.n	4598 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    45b6:	1c43      	adds	r3, r0, #1
    45b8:	d0f2      	beq.n	45a0 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    45ba:	a904      	add	r1, sp, #16
    45bc:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    45be:	0c00      	lsrs	r0, r0, #16
    45c0:	b2c0      	uxtb	r0, r0
    45c2:	4b31      	ldr	r3, [pc, #196]	; (4688 <spi_init+0x1c8>)
    45c4:	4798      	blx	r3
    45c6:	e7eb      	b.n	45a0 <spi_init+0xe0>
	module->mode             = config->mode;
    45c8:	7833      	ldrb	r3, [r6, #0]
    45ca:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    45cc:	7c33      	ldrb	r3, [r6, #16]
    45ce:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    45d0:	7cb3      	ldrb	r3, [r6, #18]
    45d2:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    45d4:	7d33      	ldrb	r3, [r6, #20]
    45d6:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    45d8:	2200      	movs	r2, #0
    45da:	ab02      	add	r3, sp, #8
    45dc:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    45de:	7833      	ldrb	r3, [r6, #0]
    45e0:	2b01      	cmp	r3, #1
    45e2:	d028      	beq.n	4636 <spi_init+0x176>
	ctrla |= config->transfer_mode;
    45e4:	6873      	ldr	r3, [r6, #4]
    45e6:	68b2      	ldr	r2, [r6, #8]
    45e8:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    45ea:	68f2      	ldr	r2, [r6, #12]
    45ec:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    45ee:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    45f0:	7c72      	ldrb	r2, [r6, #17]
    45f2:	2a00      	cmp	r2, #0
    45f4:	d103      	bne.n	45fe <spi_init+0x13e>
    45f6:	4a25      	ldr	r2, [pc, #148]	; (468c <spi_init+0x1cc>)
    45f8:	7892      	ldrb	r2, [r2, #2]
    45fa:	0792      	lsls	r2, r2, #30
    45fc:	d501      	bpl.n	4602 <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    45fe:	2280      	movs	r2, #128	; 0x80
    4600:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    4602:	7cb2      	ldrb	r2, [r6, #18]
    4604:	2a00      	cmp	r2, #0
    4606:	d002      	beq.n	460e <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    4608:	2280      	movs	r2, #128	; 0x80
    460a:	0292      	lsls	r2, r2, #10
    460c:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    460e:	7cf2      	ldrb	r2, [r6, #19]
    4610:	2a00      	cmp	r2, #0
    4612:	d002      	beq.n	461a <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    4614:	2280      	movs	r2, #128	; 0x80
    4616:	0092      	lsls	r2, r2, #2
    4618:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    461a:	7d32      	ldrb	r2, [r6, #20]
    461c:	2a00      	cmp	r2, #0
    461e:	d002      	beq.n	4626 <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    4620:	2280      	movs	r2, #128	; 0x80
    4622:	0192      	lsls	r2, r2, #6
    4624:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    4626:	683a      	ldr	r2, [r7, #0]
    4628:	4313      	orrs	r3, r2
    462a:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    462c:	687b      	ldr	r3, [r7, #4]
    462e:	430b      	orrs	r3, r1
    4630:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    4632:	2000      	movs	r0, #0
    4634:	e74e      	b.n	44d4 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4636:	6828      	ldr	r0, [r5, #0]
    4638:	4b0a      	ldr	r3, [pc, #40]	; (4664 <spi_init+0x1a4>)
    463a:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    463c:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    463e:	b2c0      	uxtb	r0, r0
    4640:	4b13      	ldr	r3, [pc, #76]	; (4690 <spi_init+0x1d0>)
    4642:	4798      	blx	r3
    4644:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    4646:	ab02      	add	r3, sp, #8
    4648:	1d9a      	adds	r2, r3, #6
    464a:	69b0      	ldr	r0, [r6, #24]
    464c:	4b11      	ldr	r3, [pc, #68]	; (4694 <spi_init+0x1d4>)
    464e:	4798      	blx	r3
    4650:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    4652:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    4654:	2b00      	cmp	r3, #0
    4656:	d000      	beq.n	465a <spi_init+0x19a>
    4658:	e73c      	b.n	44d4 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    465a:	ab02      	add	r3, sp, #8
    465c:	3306      	adds	r3, #6
    465e:	781b      	ldrb	r3, [r3, #0]
    4660:	733b      	strb	r3, [r7, #12]
    4662:	e7bf      	b.n	45e4 <spi_init+0x124>
    4664:	000043b9 	.word	0x000043b9
    4668:	40000400 	.word	0x40000400
    466c:	0000552d 	.word	0x0000552d
    4670:	000054a1 	.word	0x000054a1
    4674:	000041f5 	.word	0x000041f5
    4678:	0000478d 	.word	0x0000478d
    467c:	000043f5 	.word	0x000043f5
    4680:	200003e4 	.word	0x200003e4
    4684:	00004241 	.word	0x00004241
    4688:	00005625 	.word	0x00005625
    468c:	41002000 	.word	0x41002000
    4690:	00005549 	.word	0x00005549
    4694:	00004137 	.word	0x00004137

00004698 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    4698:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    469a:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    469c:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    469e:	2c01      	cmp	r4, #1
    46a0:	d001      	beq.n	46a6 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    46a2:	0018      	movs	r0, r3
    46a4:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    46a6:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    46a8:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    46aa:	2c00      	cmp	r4, #0
    46ac:	d1f9      	bne.n	46a2 <spi_select_slave+0xa>
		if (select) {
    46ae:	2a00      	cmp	r2, #0
    46b0:	d058      	beq.n	4764 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    46b2:	784b      	ldrb	r3, [r1, #1]
    46b4:	2b00      	cmp	r3, #0
    46b6:	d044      	beq.n	4742 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    46b8:	6803      	ldr	r3, [r0, #0]
    46ba:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    46bc:	07db      	lsls	r3, r3, #31
    46be:	d410      	bmi.n	46e2 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    46c0:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    46c2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    46c4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    46c6:	2900      	cmp	r1, #0
    46c8:	d104      	bne.n	46d4 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    46ca:	0953      	lsrs	r3, r2, #5
    46cc:	01db      	lsls	r3, r3, #7
    46ce:	492e      	ldr	r1, [pc, #184]	; (4788 <spi_select_slave+0xf0>)
    46d0:	468c      	mov	ip, r1
    46d2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    46d4:	211f      	movs	r1, #31
    46d6:	4011      	ands	r1, r2
    46d8:	2201      	movs	r2, #1
    46da:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    46dc:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    46de:	2305      	movs	r3, #5
    46e0:	e7df      	b.n	46a2 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    46e2:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    46e4:	09d4      	lsrs	r4, r2, #7
		return NULL;
    46e6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    46e8:	2c00      	cmp	r4, #0
    46ea:	d104      	bne.n	46f6 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    46ec:	0953      	lsrs	r3, r2, #5
    46ee:	01db      	lsls	r3, r3, #7
    46f0:	4c25      	ldr	r4, [pc, #148]	; (4788 <spi_select_slave+0xf0>)
    46f2:	46a4      	mov	ip, r4
    46f4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    46f6:	241f      	movs	r4, #31
    46f8:	4014      	ands	r4, r2
    46fa:	2201      	movs	r2, #1
    46fc:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    46fe:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4700:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4702:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4704:	07d2      	lsls	r2, r2, #31
    4706:	d501      	bpl.n	470c <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4708:	788a      	ldrb	r2, [r1, #2]
    470a:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    470c:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    470e:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    4710:	2a00      	cmp	r2, #0
    4712:	d1c6      	bne.n	46a2 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    4714:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    4716:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4718:	7e13      	ldrb	r3, [r2, #24]
    471a:	420b      	tst	r3, r1
    471c:	d0fc      	beq.n	4718 <spi_select_slave+0x80>
    471e:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    4720:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    4722:	0749      	lsls	r1, r1, #29
    4724:	d5bd      	bpl.n	46a2 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4726:	8b53      	ldrh	r3, [r2, #26]
    4728:	075b      	lsls	r3, r3, #29
    472a:	d501      	bpl.n	4730 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    472c:	2304      	movs	r3, #4
    472e:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4730:	7983      	ldrb	r3, [r0, #6]
    4732:	2b01      	cmp	r3, #1
    4734:	d002      	beq.n	473c <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4736:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4738:	2300      	movs	r3, #0
    473a:	e7b2      	b.n	46a2 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    473c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    473e:	2300      	movs	r3, #0
    4740:	e7af      	b.n	46a2 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    4742:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    4744:	09d1      	lsrs	r1, r2, #7
		return NULL;
    4746:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4748:	2900      	cmp	r1, #0
    474a:	d104      	bne.n	4756 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    474c:	0953      	lsrs	r3, r2, #5
    474e:	01db      	lsls	r3, r3, #7
    4750:	490d      	ldr	r1, [pc, #52]	; (4788 <spi_select_slave+0xf0>)
    4752:	468c      	mov	ip, r1
    4754:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4756:	211f      	movs	r1, #31
    4758:	4011      	ands	r1, r2
    475a:	2201      	movs	r2, #1
    475c:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    475e:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    4760:	2300      	movs	r3, #0
    4762:	e79e      	b.n	46a2 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    4764:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    4766:	09d1      	lsrs	r1, r2, #7
		return NULL;
    4768:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    476a:	2900      	cmp	r1, #0
    476c:	d104      	bne.n	4778 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    476e:	0953      	lsrs	r3, r2, #5
    4770:	01db      	lsls	r3, r3, #7
    4772:	4905      	ldr	r1, [pc, #20]	; (4788 <spi_select_slave+0xf0>)
    4774:	468c      	mov	ip, r1
    4776:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4778:	211f      	movs	r1, #31
    477a:	4011      	ands	r1, r2
    477c:	2201      	movs	r2, #1
    477e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    4780:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    4782:	2300      	movs	r3, #0
    4784:	e78d      	b.n	46a2 <spi_select_slave+0xa>
    4786:	46c0      	nop			; (mov r8, r8)
    4788:	41004400 	.word	0x41004400

0000478c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    478c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    478e:	0080      	lsls	r0, r0, #2
    4790:	4b70      	ldr	r3, [pc, #448]	; (4954 <_spi_interrupt_handler+0x1c8>)
    4792:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4794:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    4796:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    4798:	5ce7      	ldrb	r7, [r4, r3]
    479a:	2236      	movs	r2, #54	; 0x36
    479c:	5ca2      	ldrb	r2, [r4, r2]
    479e:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    47a0:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    47a2:	7db5      	ldrb	r5, [r6, #22]
    47a4:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    47a6:	07eb      	lsls	r3, r5, #31
    47a8:	d502      	bpl.n	47b0 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    47aa:	7963      	ldrb	r3, [r4, #5]
    47ac:	2b01      	cmp	r3, #1
    47ae:	d01e      	beq.n	47ee <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    47b0:	076b      	lsls	r3, r5, #29
    47b2:	d511      	bpl.n	47d8 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    47b4:	8b73      	ldrh	r3, [r6, #26]
    47b6:	075b      	lsls	r3, r3, #29
    47b8:	d55a      	bpl.n	4870 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    47ba:	7a63      	ldrb	r3, [r4, #9]
    47bc:	2b01      	cmp	r3, #1
    47be:	d008      	beq.n	47d2 <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    47c0:	221e      	movs	r2, #30
    47c2:	2338      	movs	r3, #56	; 0x38
    47c4:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    47c6:	3b35      	subs	r3, #53	; 0x35
    47c8:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    47ca:	3302      	adds	r3, #2
    47cc:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    47ce:	073b      	lsls	r3, r7, #28
    47d0:	d44a      	bmi.n	4868 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    47d2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    47d4:	2304      	movs	r3, #4
    47d6:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    47d8:	07ab      	lsls	r3, r5, #30
    47da:	d503      	bpl.n	47e4 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    47dc:	7963      	ldrb	r3, [r4, #5]
    47de:	2b01      	cmp	r3, #1
    47e0:	d100      	bne.n	47e4 <_spi_interrupt_handler+0x58>
    47e2:	e097      	b.n	4914 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    47e4:	b26d      	sxtb	r5, r5
    47e6:	2d00      	cmp	r5, #0
    47e8:	da00      	bge.n	47ec <_spi_interrupt_handler+0x60>
    47ea:	e0a9      	b.n	4940 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    47ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    47ee:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    47f0:	2b00      	cmp	r3, #0
    47f2:	d022      	beq.n	483a <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    47f4:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    47f6:	2b00      	cmp	r3, #0
    47f8:	d0da      	beq.n	47b0 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    47fa:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    47fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    47fe:	7813      	ldrb	r3, [r2, #0]
    4800:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    4802:	1c50      	adds	r0, r2, #1
    4804:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4806:	79a0      	ldrb	r0, [r4, #6]
    4808:	2801      	cmp	r0, #1
    480a:	d027      	beq.n	485c <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    480c:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    480e:	05db      	lsls	r3, r3, #23
    4810:	0ddb      	lsrs	r3, r3, #23
    4812:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    4814:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    4816:	3b01      	subs	r3, #1
    4818:	b29b      	uxth	r3, r3
    481a:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    481c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    481e:	b29b      	uxth	r3, r3
    4820:	2b00      	cmp	r3, #0
    4822:	d1c5      	bne.n	47b0 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4824:	3301      	adds	r3, #1
    4826:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    4828:	7a63      	ldrb	r3, [r4, #9]
    482a:	2b01      	cmp	r3, #1
    482c:	d1c0      	bne.n	47b0 <_spi_interrupt_handler+0x24>
    482e:	79e3      	ldrb	r3, [r4, #7]
    4830:	2b00      	cmp	r3, #0
    4832:	d1bd      	bne.n	47b0 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4834:	3302      	adds	r3, #2
    4836:	75b3      	strb	r3, [r6, #22]
    4838:	e7ba      	b.n	47b0 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    483a:	4b47      	ldr	r3, [pc, #284]	; (4958 <_spi_interrupt_handler+0x1cc>)
    483c:	881b      	ldrh	r3, [r3, #0]
    483e:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    4840:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4842:	3b01      	subs	r3, #1
    4844:	b29b      	uxth	r3, r3
    4846:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    4848:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    484a:	b29b      	uxth	r3, r3
    484c:	2b00      	cmp	r3, #0
    484e:	d101      	bne.n	4854 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4850:	3301      	adds	r3, #1
    4852:	7533      	strb	r3, [r6, #20]
		if (0
    4854:	7963      	ldrb	r3, [r4, #5]
    4856:	2b01      	cmp	r3, #1
    4858:	d0cc      	beq.n	47f4 <_spi_interrupt_handler+0x68>
    485a:	e7a9      	b.n	47b0 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    485c:	7850      	ldrb	r0, [r2, #1]
    485e:	0200      	lsls	r0, r0, #8
    4860:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    4862:	3202      	adds	r2, #2
    4864:	62e2      	str	r2, [r4, #44]	; 0x2c
    4866:	e7d2      	b.n	480e <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    4868:	0020      	movs	r0, r4
    486a:	69a3      	ldr	r3, [r4, #24]
    486c:	4798      	blx	r3
    486e:	e7b0      	b.n	47d2 <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    4870:	7a63      	ldrb	r3, [r4, #9]
    4872:	2b01      	cmp	r3, #1
    4874:	d028      	beq.n	48c8 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4876:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    4878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    487a:	05db      	lsls	r3, r3, #23
    487c:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    487e:	b2da      	uxtb	r2, r3
    4880:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    4882:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    4884:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4886:	1c51      	adds	r1, r2, #1
    4888:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    488a:	79a1      	ldrb	r1, [r4, #6]
    488c:	2901      	cmp	r1, #1
    488e:	d034      	beq.n	48fa <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    4890:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    4892:	3b01      	subs	r3, #1
    4894:	b29b      	uxth	r3, r3
    4896:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    4898:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    489a:	b29b      	uxth	r3, r3
    489c:	2b00      	cmp	r3, #0
    489e:	d000      	beq.n	48a2 <_spi_interrupt_handler+0x116>
    48a0:	e79a      	b.n	47d8 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    48a2:	2200      	movs	r2, #0
    48a4:	3338      	adds	r3, #56	; 0x38
    48a6:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    48a8:	3b34      	subs	r3, #52	; 0x34
    48aa:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    48ac:	7a63      	ldrb	r3, [r4, #9]
    48ae:	2b02      	cmp	r3, #2
    48b0:	d029      	beq.n	4906 <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    48b2:	7a63      	ldrb	r3, [r4, #9]
    48b4:	2b00      	cmp	r3, #0
    48b6:	d000      	beq.n	48ba <_spi_interrupt_handler+0x12e>
    48b8:	e78e      	b.n	47d8 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    48ba:	07bb      	lsls	r3, r7, #30
    48bc:	d400      	bmi.n	48c0 <_spi_interrupt_handler+0x134>
    48be:	e78b      	b.n	47d8 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    48c0:	0020      	movs	r0, r4
    48c2:	6923      	ldr	r3, [r4, #16]
    48c4:	4798      	blx	r3
    48c6:	e787      	b.n	47d8 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    48c8:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    48ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    48cc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    48ce:	3b01      	subs	r3, #1
    48d0:	b29b      	uxth	r3, r3
    48d2:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    48d4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    48d6:	b29b      	uxth	r3, r3
    48d8:	2b00      	cmp	r3, #0
    48da:	d000      	beq.n	48de <_spi_interrupt_handler+0x152>
    48dc:	e77c      	b.n	47d8 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    48de:	3304      	adds	r3, #4
    48e0:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    48e2:	2200      	movs	r2, #0
    48e4:	3334      	adds	r3, #52	; 0x34
    48e6:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    48e8:	3b35      	subs	r3, #53	; 0x35
    48ea:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    48ec:	07fb      	lsls	r3, r7, #31
    48ee:	d400      	bmi.n	48f2 <_spi_interrupt_handler+0x166>
    48f0:	e772      	b.n	47d8 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    48f2:	0020      	movs	r0, r4
    48f4:	68e3      	ldr	r3, [r4, #12]
    48f6:	4798      	blx	r3
    48f8:	e76e      	b.n	47d8 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    48fa:	0a1b      	lsrs	r3, r3, #8
    48fc:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    48fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4900:	3301      	adds	r3, #1
    4902:	62a3      	str	r3, [r4, #40]	; 0x28
    4904:	e7c4      	b.n	4890 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    4906:	077b      	lsls	r3, r7, #29
    4908:	d400      	bmi.n	490c <_spi_interrupt_handler+0x180>
    490a:	e765      	b.n	47d8 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    490c:	0020      	movs	r0, r4
    490e:	6963      	ldr	r3, [r4, #20]
    4910:	4798      	blx	r3
    4912:	e761      	b.n	47d8 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4914:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    4916:	2b01      	cmp	r3, #1
    4918:	d000      	beq.n	491c <_spi_interrupt_handler+0x190>
    491a:	e763      	b.n	47e4 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    491c:	79e3      	ldrb	r3, [r4, #7]
    491e:	2b00      	cmp	r3, #0
    4920:	d000      	beq.n	4924 <_spi_interrupt_handler+0x198>
    4922:	e75f      	b.n	47e4 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4924:	3302      	adds	r3, #2
    4926:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    4928:	3301      	adds	r3, #1
    492a:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    492c:	2200      	movs	r2, #0
    492e:	3335      	adds	r3, #53	; 0x35
    4930:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    4932:	07fb      	lsls	r3, r7, #31
    4934:	d400      	bmi.n	4938 <_spi_interrupt_handler+0x1ac>
    4936:	e755      	b.n	47e4 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    4938:	0020      	movs	r0, r4
    493a:	68e3      	ldr	r3, [r4, #12]
    493c:	4798      	blx	r3
    493e:	e751      	b.n	47e4 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4940:	2380      	movs	r3, #128	; 0x80
    4942:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4944:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    4946:	067b      	lsls	r3, r7, #25
    4948:	d400      	bmi.n	494c <_spi_interrupt_handler+0x1c0>
    494a:	e74f      	b.n	47ec <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    494c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    494e:	0020      	movs	r0, r4
    4950:	4798      	blx	r3
}
    4952:	e74b      	b.n	47ec <_spi_interrupt_handler+0x60>
    4954:	200003e4 	.word	0x200003e4
    4958:	200003fc 	.word	0x200003fc

0000495c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    495c:	b5f0      	push	{r4, r5, r6, r7, lr}
    495e:	46de      	mov	lr, fp
    4960:	4657      	mov	r7, sl
    4962:	464e      	mov	r6, r9
    4964:	4645      	mov	r5, r8
    4966:	b5e0      	push	{r5, r6, r7, lr}
    4968:	b091      	sub	sp, #68	; 0x44
    496a:	0005      	movs	r5, r0
    496c:	000c      	movs	r4, r1
    496e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    4970:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4972:	0008      	movs	r0, r1
    4974:	4bbc      	ldr	r3, [pc, #752]	; (4c68 <usart_init+0x30c>)
    4976:	4798      	blx	r3
    4978:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    497a:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    497c:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    497e:	07db      	lsls	r3, r3, #31
    4980:	d506      	bpl.n	4990 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    4982:	b011      	add	sp, #68	; 0x44
    4984:	bc3c      	pop	{r2, r3, r4, r5}
    4986:	4690      	mov	r8, r2
    4988:	4699      	mov	r9, r3
    498a:	46a2      	mov	sl, r4
    498c:	46ab      	mov	fp, r5
    498e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    4990:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    4992:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    4994:	079b      	lsls	r3, r3, #30
    4996:	d4f4      	bmi.n	4982 <usart_init+0x26>
    4998:	49b4      	ldr	r1, [pc, #720]	; (4c6c <usart_init+0x310>)
    499a:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    499c:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    499e:	2301      	movs	r3, #1
    49a0:	40bb      	lsls	r3, r7
    49a2:	4303      	orrs	r3, r0
    49a4:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    49a6:	a90f      	add	r1, sp, #60	; 0x3c
    49a8:	272d      	movs	r7, #45	; 0x2d
    49aa:	5df3      	ldrb	r3, [r6, r7]
    49ac:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    49ae:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    49b0:	b2d3      	uxtb	r3, r2
    49b2:	9302      	str	r3, [sp, #8]
    49b4:	0018      	movs	r0, r3
    49b6:	4bae      	ldr	r3, [pc, #696]	; (4c70 <usart_init+0x314>)
    49b8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    49ba:	9802      	ldr	r0, [sp, #8]
    49bc:	4bad      	ldr	r3, [pc, #692]	; (4c74 <usart_init+0x318>)
    49be:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    49c0:	5df0      	ldrb	r0, [r6, r7]
    49c2:	2100      	movs	r1, #0
    49c4:	4bac      	ldr	r3, [pc, #688]	; (4c78 <usart_init+0x31c>)
    49c6:	4798      	blx	r3
	module->character_size = config->character_size;
    49c8:	7af3      	ldrb	r3, [r6, #11]
    49ca:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    49cc:	2324      	movs	r3, #36	; 0x24
    49ce:	5cf3      	ldrb	r3, [r6, r3]
    49d0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    49d2:	2325      	movs	r3, #37	; 0x25
    49d4:	5cf3      	ldrb	r3, [r6, r3]
    49d6:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    49d8:	7ef3      	ldrb	r3, [r6, #27]
    49da:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    49dc:	7f33      	ldrb	r3, [r6, #28]
    49de:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    49e0:	682b      	ldr	r3, [r5, #0]
    49e2:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    49e4:	0018      	movs	r0, r3
    49e6:	4ba0      	ldr	r3, [pc, #640]	; (4c68 <usart_init+0x30c>)
    49e8:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    49ea:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    49ec:	2200      	movs	r2, #0
    49ee:	230e      	movs	r3, #14
    49f0:	a906      	add	r1, sp, #24
    49f2:	468c      	mov	ip, r1
    49f4:	4463      	add	r3, ip
    49f6:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    49f8:	8a32      	ldrh	r2, [r6, #16]
    49fa:	9202      	str	r2, [sp, #8]
    49fc:	2380      	movs	r3, #128	; 0x80
    49fe:	01db      	lsls	r3, r3, #7
    4a00:	429a      	cmp	r2, r3
    4a02:	d100      	bne.n	4a06 <usart_init+0xaa>
    4a04:	e09e      	b.n	4b44 <usart_init+0x1e8>
    4a06:	d90f      	bls.n	4a28 <usart_init+0xcc>
    4a08:	23c0      	movs	r3, #192	; 0xc0
    4a0a:	01db      	lsls	r3, r3, #7
    4a0c:	9a02      	ldr	r2, [sp, #8]
    4a0e:	429a      	cmp	r2, r3
    4a10:	d100      	bne.n	4a14 <usart_init+0xb8>
    4a12:	e092      	b.n	4b3a <usart_init+0x1de>
    4a14:	2380      	movs	r3, #128	; 0x80
    4a16:	021b      	lsls	r3, r3, #8
    4a18:	429a      	cmp	r2, r3
    4a1a:	d000      	beq.n	4a1e <usart_init+0xc2>
    4a1c:	e11f      	b.n	4c5e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    4a1e:	2303      	movs	r3, #3
    4a20:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4a22:	2300      	movs	r3, #0
    4a24:	9307      	str	r3, [sp, #28]
    4a26:	e008      	b.n	4a3a <usart_init+0xde>
	switch (config->sample_rate) {
    4a28:	2380      	movs	r3, #128	; 0x80
    4a2a:	019b      	lsls	r3, r3, #6
    4a2c:	429a      	cmp	r2, r3
    4a2e:	d000      	beq.n	4a32 <usart_init+0xd6>
    4a30:	e115      	b.n	4c5e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4a32:	2310      	movs	r3, #16
    4a34:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4a36:	3b0f      	subs	r3, #15
    4a38:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    4a3a:	6833      	ldr	r3, [r6, #0]
    4a3c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    4a3e:	68f3      	ldr	r3, [r6, #12]
    4a40:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    4a42:	6973      	ldr	r3, [r6, #20]
    4a44:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4a46:	7e33      	ldrb	r3, [r6, #24]
    4a48:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4a4a:	2326      	movs	r3, #38	; 0x26
    4a4c:	5cf3      	ldrb	r3, [r6, r3]
    4a4e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    4a50:	6873      	ldr	r3, [r6, #4]
    4a52:	4699      	mov	r9, r3
	switch (transfer_mode)
    4a54:	2b00      	cmp	r3, #0
    4a56:	d100      	bne.n	4a5a <usart_init+0xfe>
    4a58:	e0a0      	b.n	4b9c <usart_init+0x240>
    4a5a:	2380      	movs	r3, #128	; 0x80
    4a5c:	055b      	lsls	r3, r3, #21
    4a5e:	4599      	cmp	r9, r3
    4a60:	d100      	bne.n	4a64 <usart_init+0x108>
    4a62:	e084      	b.n	4b6e <usart_init+0x212>
	if(config->encoding_format_enable) {
    4a64:	7e73      	ldrb	r3, [r6, #25]
    4a66:	2b00      	cmp	r3, #0
    4a68:	d002      	beq.n	4a70 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    4a6a:	7eb3      	ldrb	r3, [r6, #26]
    4a6c:	4642      	mov	r2, r8
    4a6e:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4a70:	682a      	ldr	r2, [r5, #0]
    4a72:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4a74:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    4a76:	2b00      	cmp	r3, #0
    4a78:	d1fc      	bne.n	4a74 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    4a7a:	330e      	adds	r3, #14
    4a7c:	aa06      	add	r2, sp, #24
    4a7e:	4694      	mov	ip, r2
    4a80:	4463      	add	r3, ip
    4a82:	881b      	ldrh	r3, [r3, #0]
    4a84:	4642      	mov	r2, r8
    4a86:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    4a88:	9b05      	ldr	r3, [sp, #20]
    4a8a:	9a03      	ldr	r2, [sp, #12]
    4a8c:	4313      	orrs	r3, r2
    4a8e:	9a04      	ldr	r2, [sp, #16]
    4a90:	4313      	orrs	r3, r2
    4a92:	464a      	mov	r2, r9
    4a94:	4313      	orrs	r3, r2
    4a96:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4a98:	465b      	mov	r3, fp
    4a9a:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    4a9c:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4a9e:	4653      	mov	r3, sl
    4aa0:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    4aa2:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    4aa4:	2327      	movs	r3, #39	; 0x27
    4aa6:	5cf3      	ldrb	r3, [r6, r3]
    4aa8:	2b00      	cmp	r3, #0
    4aaa:	d101      	bne.n	4ab0 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    4aac:	3304      	adds	r3, #4
    4aae:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4ab0:	7e73      	ldrb	r3, [r6, #25]
    4ab2:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4ab4:	7f32      	ldrb	r2, [r6, #28]
    4ab6:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4ab8:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    4aba:	7f72      	ldrb	r2, [r6, #29]
    4abc:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4abe:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4ac0:	2224      	movs	r2, #36	; 0x24
    4ac2:	5cb2      	ldrb	r2, [r6, r2]
    4ac4:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    4ac6:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    4ac8:	2225      	movs	r2, #37	; 0x25
    4aca:	5cb2      	ldrb	r2, [r6, r2]
    4acc:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4ace:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    4ad0:	7ab1      	ldrb	r1, [r6, #10]
    4ad2:	7af2      	ldrb	r2, [r6, #11]
    4ad4:	4311      	orrs	r1, r2
    4ad6:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    4ad8:	8933      	ldrh	r3, [r6, #8]
    4ada:	2bff      	cmp	r3, #255	; 0xff
    4adc:	d100      	bne.n	4ae0 <usart_init+0x184>
    4ade:	e081      	b.n	4be4 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    4ae0:	2280      	movs	r2, #128	; 0x80
    4ae2:	0452      	lsls	r2, r2, #17
    4ae4:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    4ae6:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    4ae8:	232c      	movs	r3, #44	; 0x2c
    4aea:	5cf3      	ldrb	r3, [r6, r3]
    4aec:	2b00      	cmp	r3, #0
    4aee:	d103      	bne.n	4af8 <usart_init+0x19c>
    4af0:	4b62      	ldr	r3, [pc, #392]	; (4c7c <usart_init+0x320>)
    4af2:	789b      	ldrb	r3, [r3, #2]
    4af4:	079b      	lsls	r3, r3, #30
    4af6:	d501      	bpl.n	4afc <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    4af8:	2380      	movs	r3, #128	; 0x80
    4afa:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    4afc:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    4afe:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4b00:	2b00      	cmp	r3, #0
    4b02:	d1fc      	bne.n	4afe <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    4b04:	4643      	mov	r3, r8
    4b06:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4b08:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    4b0a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4b0c:	2b00      	cmp	r3, #0
    4b0e:	d1fc      	bne.n	4b0a <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    4b10:	4643      	mov	r3, r8
    4b12:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4b14:	ab0e      	add	r3, sp, #56	; 0x38
    4b16:	2280      	movs	r2, #128	; 0x80
    4b18:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4b1a:	2200      	movs	r2, #0
    4b1c:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    4b1e:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4b20:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    4b22:	6b33      	ldr	r3, [r6, #48]	; 0x30
    4b24:	930a      	str	r3, [sp, #40]	; 0x28
    4b26:	6b73      	ldr	r3, [r6, #52]	; 0x34
    4b28:	930b      	str	r3, [sp, #44]	; 0x2c
    4b2a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    4b2c:	930c      	str	r3, [sp, #48]	; 0x30
    4b2e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    4b30:	9302      	str	r3, [sp, #8]
    4b32:	930d      	str	r3, [sp, #52]	; 0x34
    4b34:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4b36:	ae0a      	add	r6, sp, #40	; 0x28
    4b38:	e063      	b.n	4c02 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4b3a:	2308      	movs	r3, #8
    4b3c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4b3e:	3b07      	subs	r3, #7
    4b40:	9307      	str	r3, [sp, #28]
    4b42:	e77a      	b.n	4a3a <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    4b44:	6833      	ldr	r3, [r6, #0]
    4b46:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    4b48:	68f3      	ldr	r3, [r6, #12]
    4b4a:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    4b4c:	6973      	ldr	r3, [r6, #20]
    4b4e:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4b50:	7e33      	ldrb	r3, [r6, #24]
    4b52:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4b54:	2326      	movs	r3, #38	; 0x26
    4b56:	5cf3      	ldrb	r3, [r6, r3]
    4b58:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    4b5a:	6873      	ldr	r3, [r6, #4]
    4b5c:	4699      	mov	r9, r3
	switch (transfer_mode)
    4b5e:	2b00      	cmp	r3, #0
    4b60:	d018      	beq.n	4b94 <usart_init+0x238>
    4b62:	2380      	movs	r3, #128	; 0x80
    4b64:	055b      	lsls	r3, r3, #21
    4b66:	4599      	cmp	r9, r3
    4b68:	d001      	beq.n	4b6e <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    4b6a:	2000      	movs	r0, #0
    4b6c:	e025      	b.n	4bba <usart_init+0x25e>
			if (!config->use_external_clock) {
    4b6e:	2327      	movs	r3, #39	; 0x27
    4b70:	5cf3      	ldrb	r3, [r6, r3]
    4b72:	2b00      	cmp	r3, #0
    4b74:	d000      	beq.n	4b78 <usart_init+0x21c>
    4b76:	e775      	b.n	4a64 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    4b78:	6a33      	ldr	r3, [r6, #32]
    4b7a:	001f      	movs	r7, r3
    4b7c:	b2c0      	uxtb	r0, r0
    4b7e:	4b40      	ldr	r3, [pc, #256]	; (4c80 <usart_init+0x324>)
    4b80:	4798      	blx	r3
    4b82:	0001      	movs	r1, r0
    4b84:	220e      	movs	r2, #14
    4b86:	ab06      	add	r3, sp, #24
    4b88:	469c      	mov	ip, r3
    4b8a:	4462      	add	r2, ip
    4b8c:	0038      	movs	r0, r7
    4b8e:	4b3d      	ldr	r3, [pc, #244]	; (4c84 <usart_init+0x328>)
    4b90:	4798      	blx	r3
    4b92:	e012      	b.n	4bba <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4b94:	2308      	movs	r3, #8
    4b96:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4b98:	2300      	movs	r3, #0
    4b9a:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    4b9c:	2327      	movs	r3, #39	; 0x27
    4b9e:	5cf3      	ldrb	r3, [r6, r3]
    4ba0:	2b00      	cmp	r3, #0
    4ba2:	d00e      	beq.n	4bc2 <usart_init+0x266>
				status_code =
    4ba4:	9b06      	ldr	r3, [sp, #24]
    4ba6:	9300      	str	r3, [sp, #0]
    4ba8:	9b07      	ldr	r3, [sp, #28]
    4baa:	220e      	movs	r2, #14
    4bac:	a906      	add	r1, sp, #24
    4bae:	468c      	mov	ip, r1
    4bb0:	4462      	add	r2, ip
    4bb2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    4bb4:	6a30      	ldr	r0, [r6, #32]
    4bb6:	4f34      	ldr	r7, [pc, #208]	; (4c88 <usart_init+0x32c>)
    4bb8:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    4bba:	2800      	cmp	r0, #0
    4bbc:	d000      	beq.n	4bc0 <usart_init+0x264>
    4bbe:	e6e0      	b.n	4982 <usart_init+0x26>
    4bc0:	e750      	b.n	4a64 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    4bc2:	6a33      	ldr	r3, [r6, #32]
    4bc4:	001f      	movs	r7, r3
    4bc6:	b2c0      	uxtb	r0, r0
    4bc8:	4b2d      	ldr	r3, [pc, #180]	; (4c80 <usart_init+0x324>)
    4bca:	4798      	blx	r3
    4bcc:	0001      	movs	r1, r0
				status_code =
    4bce:	9b06      	ldr	r3, [sp, #24]
    4bd0:	9300      	str	r3, [sp, #0]
    4bd2:	9b07      	ldr	r3, [sp, #28]
    4bd4:	220e      	movs	r2, #14
    4bd6:	a806      	add	r0, sp, #24
    4bd8:	4684      	mov	ip, r0
    4bda:	4462      	add	r2, ip
    4bdc:	0038      	movs	r0, r7
    4bde:	4f2a      	ldr	r7, [pc, #168]	; (4c88 <usart_init+0x32c>)
    4be0:	47b8      	blx	r7
    4be2:	e7ea      	b.n	4bba <usart_init+0x25e>
		if(config->lin_slave_enable) {
    4be4:	7ef3      	ldrb	r3, [r6, #27]
    4be6:	2b00      	cmp	r3, #0
    4be8:	d100      	bne.n	4bec <usart_init+0x290>
    4bea:	e77d      	b.n	4ae8 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    4bec:	2380      	movs	r3, #128	; 0x80
    4bee:	04db      	lsls	r3, r3, #19
    4bf0:	431f      	orrs	r7, r3
    4bf2:	e779      	b.n	4ae8 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4bf4:	0020      	movs	r0, r4
    4bf6:	4b25      	ldr	r3, [pc, #148]	; (4c8c <usart_init+0x330>)
    4bf8:	4798      	blx	r3
    4bfa:	e007      	b.n	4c0c <usart_init+0x2b0>
    4bfc:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    4bfe:	2f04      	cmp	r7, #4
    4c00:	d00d      	beq.n	4c1e <usart_init+0x2c2>
    4c02:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4c04:	00bb      	lsls	r3, r7, #2
    4c06:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    4c08:	2800      	cmp	r0, #0
    4c0a:	d0f3      	beq.n	4bf4 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    4c0c:	1c43      	adds	r3, r0, #1
    4c0e:	d0f5      	beq.n	4bfc <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4c10:	a90e      	add	r1, sp, #56	; 0x38
    4c12:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4c14:	0c00      	lsrs	r0, r0, #16
    4c16:	b2c0      	uxtb	r0, r0
    4c18:	4b1d      	ldr	r3, [pc, #116]	; (4c90 <usart_init+0x334>)
    4c1a:	4798      	blx	r3
    4c1c:	e7ee      	b.n	4bfc <usart_init+0x2a0>
		module->callback[i]            = NULL;
    4c1e:	2300      	movs	r3, #0
    4c20:	60eb      	str	r3, [r5, #12]
    4c22:	612b      	str	r3, [r5, #16]
    4c24:	616b      	str	r3, [r5, #20]
    4c26:	61ab      	str	r3, [r5, #24]
    4c28:	61eb      	str	r3, [r5, #28]
    4c2a:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    4c2c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    4c2e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    4c30:	2200      	movs	r2, #0
    4c32:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    4c34:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    4c36:	3330      	adds	r3, #48	; 0x30
    4c38:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    4c3a:	3301      	adds	r3, #1
    4c3c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    4c3e:	3301      	adds	r3, #1
    4c40:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    4c42:	3301      	adds	r3, #1
    4c44:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    4c46:	6828      	ldr	r0, [r5, #0]
    4c48:	4b07      	ldr	r3, [pc, #28]	; (4c68 <usart_init+0x30c>)
    4c4a:	4798      	blx	r3
    4c4c:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    4c4e:	4911      	ldr	r1, [pc, #68]	; (4c94 <usart_init+0x338>)
    4c50:	4b11      	ldr	r3, [pc, #68]	; (4c98 <usart_init+0x33c>)
    4c52:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4c54:	00a4      	lsls	r4, r4, #2
    4c56:	4b11      	ldr	r3, [pc, #68]	; (4c9c <usart_init+0x340>)
    4c58:	50e5      	str	r5, [r4, r3]
	return status_code;
    4c5a:	2000      	movs	r0, #0
    4c5c:	e691      	b.n	4982 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4c5e:	2310      	movs	r3, #16
    4c60:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4c62:	2300      	movs	r3, #0
    4c64:	9307      	str	r3, [sp, #28]
    4c66:	e6e8      	b.n	4a3a <usart_init+0xde>
    4c68:	000043b9 	.word	0x000043b9
    4c6c:	40000400 	.word	0x40000400
    4c70:	0000552d 	.word	0x0000552d
    4c74:	000054a1 	.word	0x000054a1
    4c78:	000041f5 	.word	0x000041f5
    4c7c:	41002000 	.word	0x41002000
    4c80:	00005549 	.word	0x00005549
    4c84:	00004137 	.word	0x00004137
    4c88:	00004161 	.word	0x00004161
    4c8c:	00004241 	.word	0x00004241
    4c90:	00005625 	.word	0x00005625
    4c94:	00004d55 	.word	0x00004d55
    4c98:	000043f5 	.word	0x000043f5
    4c9c:	200003e4 	.word	0x200003e4

00004ca0 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    4ca0:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    4ca2:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    4ca4:	2a00      	cmp	r2, #0
    4ca6:	d101      	bne.n	4cac <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    4ca8:	0018      	movs	r0, r3
    4caa:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    4cac:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    4cae:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    4cb0:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    4cb2:	2a00      	cmp	r2, #0
    4cb4:	d1f8      	bne.n	4ca8 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    4cb6:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    4cb8:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    4cba:	2a00      	cmp	r2, #0
    4cbc:	d1fc      	bne.n	4cb8 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    4cbe:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    4cc0:	2102      	movs	r1, #2
    4cc2:	7e1a      	ldrb	r2, [r3, #24]
    4cc4:	420a      	tst	r2, r1
    4cc6:	d0fc      	beq.n	4cc2 <usart_write_wait+0x22>
	return STATUS_OK;
    4cc8:	2300      	movs	r3, #0
    4cca:	e7ed      	b.n	4ca8 <usart_write_wait+0x8>

00004ccc <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    4ccc:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    4cce:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    4cd0:	2a00      	cmp	r2, #0
    4cd2:	d101      	bne.n	4cd8 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    4cd4:	0018      	movs	r0, r3
    4cd6:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    4cd8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    4cda:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    4cdc:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    4cde:	2a00      	cmp	r2, #0
    4ce0:	d1f8      	bne.n	4cd4 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    4ce2:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    4ce4:	7e10      	ldrb	r0, [r2, #24]
    4ce6:	0740      	lsls	r0, r0, #29
    4ce8:	d5f4      	bpl.n	4cd4 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    4cea:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4cec:	2b00      	cmp	r3, #0
    4cee:	d1fc      	bne.n	4cea <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4cf0:	8b53      	ldrh	r3, [r2, #26]
    4cf2:	b2db      	uxtb	r3, r3
	if (error_code) {
    4cf4:	0698      	lsls	r0, r3, #26
    4cf6:	d01d      	beq.n	4d34 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    4cf8:	0798      	lsls	r0, r3, #30
    4cfa:	d503      	bpl.n	4d04 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    4cfc:	2302      	movs	r3, #2
    4cfe:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    4d00:	3318      	adds	r3, #24
    4d02:	e7e7      	b.n	4cd4 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    4d04:	0758      	lsls	r0, r3, #29
    4d06:	d503      	bpl.n	4d10 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    4d08:	2304      	movs	r3, #4
    4d0a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    4d0c:	331a      	adds	r3, #26
    4d0e:	e7e1      	b.n	4cd4 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    4d10:	07d8      	lsls	r0, r3, #31
    4d12:	d503      	bpl.n	4d1c <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    4d14:	2301      	movs	r3, #1
    4d16:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    4d18:	3312      	adds	r3, #18
    4d1a:	e7db      	b.n	4cd4 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    4d1c:	06d8      	lsls	r0, r3, #27
    4d1e:	d503      	bpl.n	4d28 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    4d20:	2310      	movs	r3, #16
    4d22:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    4d24:	3332      	adds	r3, #50	; 0x32
    4d26:	e7d5      	b.n	4cd4 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    4d28:	069b      	lsls	r3, r3, #26
    4d2a:	d503      	bpl.n	4d34 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    4d2c:	2320      	movs	r3, #32
    4d2e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    4d30:	3321      	adds	r3, #33	; 0x21
    4d32:	e7cf      	b.n	4cd4 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    4d34:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    4d36:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    4d38:	2300      	movs	r3, #0
    4d3a:	e7cb      	b.n	4cd4 <usart_read_wait+0x8>

00004d3c <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    4d3c:	1c93      	adds	r3, r2, #2
    4d3e:	009b      	lsls	r3, r3, #2
    4d40:	18c3      	adds	r3, r0, r3
    4d42:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    4d44:	2130      	movs	r1, #48	; 0x30
    4d46:	2301      	movs	r3, #1
    4d48:	4093      	lsls	r3, r2
    4d4a:	001a      	movs	r2, r3
    4d4c:	5c43      	ldrb	r3, [r0, r1]
    4d4e:	4313      	orrs	r3, r2
    4d50:	5443      	strb	r3, [r0, r1]
}
    4d52:	4770      	bx	lr

00004d54 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    4d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    4d56:	0080      	lsls	r0, r0, #2
    4d58:	4b62      	ldr	r3, [pc, #392]	; (4ee4 <_usart_interrupt_handler+0x190>)
    4d5a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    4d5c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    4d5e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    4d60:	2b00      	cmp	r3, #0
    4d62:	d1fc      	bne.n	4d5e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    4d64:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    4d66:	7da6      	ldrb	r6, [r4, #22]
    4d68:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    4d6a:	2330      	movs	r3, #48	; 0x30
    4d6c:	5ceb      	ldrb	r3, [r5, r3]
    4d6e:	2231      	movs	r2, #49	; 0x31
    4d70:	5caf      	ldrb	r7, [r5, r2]
    4d72:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    4d74:	07f3      	lsls	r3, r6, #31
    4d76:	d522      	bpl.n	4dbe <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    4d78:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    4d7a:	b29b      	uxth	r3, r3
    4d7c:	2b00      	cmp	r3, #0
    4d7e:	d01c      	beq.n	4dba <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    4d80:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    4d82:	7813      	ldrb	r3, [r2, #0]
    4d84:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    4d86:	1c51      	adds	r1, r2, #1
    4d88:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4d8a:	7969      	ldrb	r1, [r5, #5]
    4d8c:	2901      	cmp	r1, #1
    4d8e:	d00e      	beq.n	4dae <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    4d90:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    4d92:	05db      	lsls	r3, r3, #23
    4d94:	0ddb      	lsrs	r3, r3, #23
    4d96:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    4d98:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    4d9a:	3b01      	subs	r3, #1
    4d9c:	b29b      	uxth	r3, r3
    4d9e:	85eb      	strh	r3, [r5, #46]	; 0x2e
    4da0:	2b00      	cmp	r3, #0
    4da2:	d10c      	bne.n	4dbe <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4da4:	3301      	adds	r3, #1
    4da6:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    4da8:	3301      	adds	r3, #1
    4daa:	75a3      	strb	r3, [r4, #22]
    4dac:	e007      	b.n	4dbe <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    4dae:	7851      	ldrb	r1, [r2, #1]
    4db0:	0209      	lsls	r1, r1, #8
    4db2:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    4db4:	3202      	adds	r2, #2
    4db6:	62aa      	str	r2, [r5, #40]	; 0x28
    4db8:	e7eb      	b.n	4d92 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4dba:	2301      	movs	r3, #1
    4dbc:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    4dbe:	07b3      	lsls	r3, r6, #30
    4dc0:	d506      	bpl.n	4dd0 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    4dc2:	2302      	movs	r3, #2
    4dc4:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    4dc6:	2200      	movs	r2, #0
    4dc8:	3331      	adds	r3, #49	; 0x31
    4dca:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    4dcc:	07fb      	lsls	r3, r7, #31
    4dce:	d41a      	bmi.n	4e06 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    4dd0:	0773      	lsls	r3, r6, #29
    4dd2:	d565      	bpl.n	4ea0 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    4dd4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    4dd6:	b29b      	uxth	r3, r3
    4dd8:	2b00      	cmp	r3, #0
    4dda:	d05f      	beq.n	4e9c <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4ddc:	8b63      	ldrh	r3, [r4, #26]
    4dde:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    4de0:	071a      	lsls	r2, r3, #28
    4de2:	d414      	bmi.n	4e0e <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4de4:	223f      	movs	r2, #63	; 0x3f
    4de6:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    4de8:	2b00      	cmp	r3, #0
    4dea:	d034      	beq.n	4e56 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    4dec:	079a      	lsls	r2, r3, #30
    4dee:	d511      	bpl.n	4e14 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    4df0:	221a      	movs	r2, #26
    4df2:	2332      	movs	r3, #50	; 0x32
    4df4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    4df6:	3b30      	subs	r3, #48	; 0x30
    4df8:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    4dfa:	077b      	lsls	r3, r7, #29
    4dfc:	d550      	bpl.n	4ea0 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    4dfe:	0028      	movs	r0, r5
    4e00:	696b      	ldr	r3, [r5, #20]
    4e02:	4798      	blx	r3
    4e04:	e04c      	b.n	4ea0 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    4e06:	0028      	movs	r0, r5
    4e08:	68eb      	ldr	r3, [r5, #12]
    4e0a:	4798      	blx	r3
    4e0c:	e7e0      	b.n	4dd0 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    4e0e:	2237      	movs	r2, #55	; 0x37
    4e10:	4013      	ands	r3, r2
    4e12:	e7e9      	b.n	4de8 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    4e14:	075a      	lsls	r2, r3, #29
    4e16:	d505      	bpl.n	4e24 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    4e18:	221e      	movs	r2, #30
    4e1a:	2332      	movs	r3, #50	; 0x32
    4e1c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    4e1e:	3b2e      	subs	r3, #46	; 0x2e
    4e20:	8363      	strh	r3, [r4, #26]
    4e22:	e7ea      	b.n	4dfa <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    4e24:	07da      	lsls	r2, r3, #31
    4e26:	d505      	bpl.n	4e34 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    4e28:	2213      	movs	r2, #19
    4e2a:	2332      	movs	r3, #50	; 0x32
    4e2c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    4e2e:	3b31      	subs	r3, #49	; 0x31
    4e30:	8363      	strh	r3, [r4, #26]
    4e32:	e7e2      	b.n	4dfa <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    4e34:	06da      	lsls	r2, r3, #27
    4e36:	d505      	bpl.n	4e44 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    4e38:	2242      	movs	r2, #66	; 0x42
    4e3a:	2332      	movs	r3, #50	; 0x32
    4e3c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    4e3e:	3b22      	subs	r3, #34	; 0x22
    4e40:	8363      	strh	r3, [r4, #26]
    4e42:	e7da      	b.n	4dfa <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    4e44:	2220      	movs	r2, #32
    4e46:	421a      	tst	r2, r3
    4e48:	d0d7      	beq.n	4dfa <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    4e4a:	3221      	adds	r2, #33	; 0x21
    4e4c:	2332      	movs	r3, #50	; 0x32
    4e4e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    4e50:	3b12      	subs	r3, #18
    4e52:	8363      	strh	r3, [r4, #26]
    4e54:	e7d1      	b.n	4dfa <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    4e56:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    4e58:	05db      	lsls	r3, r3, #23
    4e5a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    4e5c:	b2da      	uxtb	r2, r3
    4e5e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    4e60:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    4e62:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    4e64:	1c51      	adds	r1, r2, #1
    4e66:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4e68:	7969      	ldrb	r1, [r5, #5]
    4e6a:	2901      	cmp	r1, #1
    4e6c:	d010      	beq.n	4e90 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    4e6e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    4e70:	3b01      	subs	r3, #1
    4e72:	b29b      	uxth	r3, r3
    4e74:	85ab      	strh	r3, [r5, #44]	; 0x2c
    4e76:	2b00      	cmp	r3, #0
    4e78:	d112      	bne.n	4ea0 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    4e7a:	3304      	adds	r3, #4
    4e7c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    4e7e:	2200      	movs	r2, #0
    4e80:	332e      	adds	r3, #46	; 0x2e
    4e82:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    4e84:	07bb      	lsls	r3, r7, #30
    4e86:	d50b      	bpl.n	4ea0 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    4e88:	0028      	movs	r0, r5
    4e8a:	692b      	ldr	r3, [r5, #16]
    4e8c:	4798      	blx	r3
    4e8e:	e007      	b.n	4ea0 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    4e90:	0a1b      	lsrs	r3, r3, #8
    4e92:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    4e94:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4e96:	3301      	adds	r3, #1
    4e98:	626b      	str	r3, [r5, #36]	; 0x24
    4e9a:	e7e8      	b.n	4e6e <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    4e9c:	2304      	movs	r3, #4
    4e9e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    4ea0:	06f3      	lsls	r3, r6, #27
    4ea2:	d504      	bpl.n	4eae <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    4ea4:	2310      	movs	r3, #16
    4ea6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    4ea8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    4eaa:	06fb      	lsls	r3, r7, #27
    4eac:	d40e      	bmi.n	4ecc <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    4eae:	06b3      	lsls	r3, r6, #26
    4eb0:	d504      	bpl.n	4ebc <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    4eb2:	2320      	movs	r3, #32
    4eb4:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    4eb6:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    4eb8:	073b      	lsls	r3, r7, #28
    4eba:	d40b      	bmi.n	4ed4 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    4ebc:	0733      	lsls	r3, r6, #28
    4ebe:	d504      	bpl.n	4eca <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    4ec0:	2308      	movs	r3, #8
    4ec2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    4ec4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    4ec6:	06bb      	lsls	r3, r7, #26
    4ec8:	d408      	bmi.n	4edc <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    4eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    4ecc:	0028      	movs	r0, r5
    4ece:	69eb      	ldr	r3, [r5, #28]
    4ed0:	4798      	blx	r3
    4ed2:	e7ec      	b.n	4eae <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    4ed4:	0028      	movs	r0, r5
    4ed6:	69ab      	ldr	r3, [r5, #24]
    4ed8:	4798      	blx	r3
    4eda:	e7ef      	b.n	4ebc <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    4edc:	6a2b      	ldr	r3, [r5, #32]
    4ede:	0028      	movs	r0, r5
    4ee0:	4798      	blx	r3
}
    4ee2:	e7f2      	b.n	4eca <_usart_interrupt_handler+0x176>
    4ee4:	200003e4 	.word	0x200003e4

00004ee8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    4ee8:	b510      	push	{r4, lr}
	switch (clock_source) {
    4eea:	2808      	cmp	r0, #8
    4eec:	d803      	bhi.n	4ef6 <system_clock_source_get_hz+0xe>
    4eee:	0080      	lsls	r0, r0, #2
    4ef0:	4b1b      	ldr	r3, [pc, #108]	; (4f60 <system_clock_source_get_hz+0x78>)
    4ef2:	581b      	ldr	r3, [r3, r0]
    4ef4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    4ef6:	2000      	movs	r0, #0
    4ef8:	e030      	b.n	4f5c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    4efa:	4b1a      	ldr	r3, [pc, #104]	; (4f64 <system_clock_source_get_hz+0x7c>)
    4efc:	6918      	ldr	r0, [r3, #16]
    4efe:	e02d      	b.n	4f5c <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    4f00:	4b19      	ldr	r3, [pc, #100]	; (4f68 <system_clock_source_get_hz+0x80>)
    4f02:	6a1b      	ldr	r3, [r3, #32]
    4f04:	059b      	lsls	r3, r3, #22
    4f06:	0f9b      	lsrs	r3, r3, #30
    4f08:	4818      	ldr	r0, [pc, #96]	; (4f6c <system_clock_source_get_hz+0x84>)
    4f0a:	40d8      	lsrs	r0, r3
    4f0c:	e026      	b.n	4f5c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    4f0e:	4b15      	ldr	r3, [pc, #84]	; (4f64 <system_clock_source_get_hz+0x7c>)
    4f10:	6958      	ldr	r0, [r3, #20]
    4f12:	e023      	b.n	4f5c <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4f14:	4b13      	ldr	r3, [pc, #76]	; (4f64 <system_clock_source_get_hz+0x7c>)
    4f16:	681b      	ldr	r3, [r3, #0]
			return 0;
    4f18:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4f1a:	079b      	lsls	r3, r3, #30
    4f1c:	d51e      	bpl.n	4f5c <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4f1e:	4912      	ldr	r1, [pc, #72]	; (4f68 <system_clock_source_get_hz+0x80>)
    4f20:	2210      	movs	r2, #16
    4f22:	68cb      	ldr	r3, [r1, #12]
    4f24:	421a      	tst	r2, r3
    4f26:	d0fc      	beq.n	4f22 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    4f28:	4b0e      	ldr	r3, [pc, #56]	; (4f64 <system_clock_source_get_hz+0x7c>)
    4f2a:	681b      	ldr	r3, [r3, #0]
    4f2c:	075b      	lsls	r3, r3, #29
    4f2e:	d401      	bmi.n	4f34 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    4f30:	480f      	ldr	r0, [pc, #60]	; (4f70 <system_clock_source_get_hz+0x88>)
    4f32:	e013      	b.n	4f5c <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4f34:	2000      	movs	r0, #0
    4f36:	4b0f      	ldr	r3, [pc, #60]	; (4f74 <system_clock_source_get_hz+0x8c>)
    4f38:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    4f3a:	4b0a      	ldr	r3, [pc, #40]	; (4f64 <system_clock_source_get_hz+0x7c>)
    4f3c:	689b      	ldr	r3, [r3, #8]
    4f3e:	041b      	lsls	r3, r3, #16
    4f40:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4f42:	4358      	muls	r0, r3
    4f44:	e00a      	b.n	4f5c <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4f46:	2350      	movs	r3, #80	; 0x50
    4f48:	4a07      	ldr	r2, [pc, #28]	; (4f68 <system_clock_source_get_hz+0x80>)
    4f4a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    4f4c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4f4e:	075b      	lsls	r3, r3, #29
    4f50:	d504      	bpl.n	4f5c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    4f52:	4b04      	ldr	r3, [pc, #16]	; (4f64 <system_clock_source_get_hz+0x7c>)
    4f54:	68d8      	ldr	r0, [r3, #12]
    4f56:	e001      	b.n	4f5c <system_clock_source_get_hz+0x74>
		return 32768UL;
    4f58:	2080      	movs	r0, #128	; 0x80
    4f5a:	0200      	lsls	r0, r0, #8
	}
}
    4f5c:	bd10      	pop	{r4, pc}
    4f5e:	46c0      	nop			; (mov r8, r8)
    4f60:	0000b6e0 	.word	0x0000b6e0
    4f64:	200000c8 	.word	0x200000c8
    4f68:	40000800 	.word	0x40000800
    4f6c:	007a1200 	.word	0x007a1200
    4f70:	02dc6c00 	.word	0x02dc6c00
    4f74:	00005549 	.word	0x00005549

00004f78 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    4f78:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    4f7a:	490c      	ldr	r1, [pc, #48]	; (4fac <system_clock_source_osc8m_set_config+0x34>)
    4f7c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    4f7e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4f80:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    4f82:	7840      	ldrb	r0, [r0, #1]
    4f84:	2201      	movs	r2, #1
    4f86:	4010      	ands	r0, r2
    4f88:	0180      	lsls	r0, r0, #6
    4f8a:	2640      	movs	r6, #64	; 0x40
    4f8c:	43b3      	bics	r3, r6
    4f8e:	4303      	orrs	r3, r0
    4f90:	402a      	ands	r2, r5
    4f92:	01d2      	lsls	r2, r2, #7
    4f94:	2080      	movs	r0, #128	; 0x80
    4f96:	4383      	bics	r3, r0
    4f98:	4313      	orrs	r3, r2
    4f9a:	2203      	movs	r2, #3
    4f9c:	4022      	ands	r2, r4
    4f9e:	0212      	lsls	r2, r2, #8
    4fa0:	4803      	ldr	r0, [pc, #12]	; (4fb0 <system_clock_source_osc8m_set_config+0x38>)
    4fa2:	4003      	ands	r3, r0
    4fa4:	4313      	orrs	r3, r2
    4fa6:	620b      	str	r3, [r1, #32]
}
    4fa8:	bd70      	pop	{r4, r5, r6, pc}
    4faa:	46c0      	nop			; (mov r8, r8)
    4fac:	40000800 	.word	0x40000800
    4fb0:	fffffcff 	.word	0xfffffcff

00004fb4 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    4fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4fb6:	46de      	mov	lr, fp
    4fb8:	4657      	mov	r7, sl
    4fba:	464e      	mov	r6, r9
    4fbc:	4645      	mov	r5, r8
    4fbe:	b5e0      	push	{r5, r6, r7, lr}
    4fc0:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    4fc2:	4b26      	ldr	r3, [pc, #152]	; (505c <system_clock_source_xosc32k_set_config+0xa8>)
    4fc4:	469b      	mov	fp, r3
    4fc6:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    4fc8:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    4fca:	7800      	ldrb	r0, [r0, #0]
    4fcc:	4242      	negs	r2, r0
    4fce:	4142      	adcs	r2, r0
    4fd0:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    4fd2:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    4fd4:	78ca      	ldrb	r2, [r1, #3]
    4fd6:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    4fd8:	790a      	ldrb	r2, [r1, #4]
    4fda:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    4fdc:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    4fde:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    4fe0:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    4fe2:	688a      	ldr	r2, [r1, #8]
    4fe4:	491e      	ldr	r1, [pc, #120]	; (5060 <system_clock_source_xosc32k_set_config+0xac>)
    4fe6:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    4fe8:	2101      	movs	r1, #1
    4fea:	464a      	mov	r2, r9
    4fec:	0092      	lsls	r2, r2, #2
    4fee:	4691      	mov	r9, r2
    4ff0:	2204      	movs	r2, #4
    4ff2:	4393      	bics	r3, r2
    4ff4:	464a      	mov	r2, r9
    4ff6:	4313      	orrs	r3, r2
    4ff8:	4642      	mov	r2, r8
    4ffa:	400a      	ands	r2, r1
    4ffc:	00d2      	lsls	r2, r2, #3
    4ffe:	4690      	mov	r8, r2
    5000:	2208      	movs	r2, #8
    5002:	4393      	bics	r3, r2
    5004:	4642      	mov	r2, r8
    5006:	4313      	orrs	r3, r2
    5008:	4662      	mov	r2, ip
    500a:	400a      	ands	r2, r1
    500c:	0112      	lsls	r2, r2, #4
    500e:	4694      	mov	ip, r2
    5010:	2210      	movs	r2, #16
    5012:	4393      	bics	r3, r2
    5014:	4662      	mov	r2, ip
    5016:	4313      	orrs	r3, r2
    5018:	4008      	ands	r0, r1
    501a:	0140      	lsls	r0, r0, #5
    501c:	2220      	movs	r2, #32
    501e:	4393      	bics	r3, r2
    5020:	4303      	orrs	r3, r0
    5022:	400f      	ands	r7, r1
    5024:	01bf      	lsls	r7, r7, #6
    5026:	2040      	movs	r0, #64	; 0x40
    5028:	4383      	bics	r3, r0
    502a:	433b      	orrs	r3, r7
    502c:	400e      	ands	r6, r1
    502e:	01f6      	lsls	r6, r6, #7
    5030:	3040      	adds	r0, #64	; 0x40
    5032:	4383      	bics	r3, r0
    5034:	4333      	orrs	r3, r6
    5036:	3879      	subs	r0, #121	; 0x79
    5038:	4005      	ands	r5, r0
    503a:	022d      	lsls	r5, r5, #8
    503c:	4809      	ldr	r0, [pc, #36]	; (5064 <system_clock_source_xosc32k_set_config+0xb0>)
    503e:	4003      	ands	r3, r0
    5040:	432b      	orrs	r3, r5
    5042:	4021      	ands	r1, r4
    5044:	0309      	lsls	r1, r1, #12
    5046:	4808      	ldr	r0, [pc, #32]	; (5068 <system_clock_source_xosc32k_set_config+0xb4>)
    5048:	4003      	ands	r3, r0
    504a:	430b      	orrs	r3, r1
    504c:	465a      	mov	r2, fp
    504e:	8293      	strh	r3, [r2, #20]
}
    5050:	bc3c      	pop	{r2, r3, r4, r5}
    5052:	4690      	mov	r8, r2
    5054:	4699      	mov	r9, r3
    5056:	46a2      	mov	sl, r4
    5058:	46ab      	mov	fp, r5
    505a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    505c:	40000800 	.word	0x40000800
    5060:	200000c8 	.word	0x200000c8
    5064:	fffff8ff 	.word	0xfffff8ff
    5068:	ffffefff 	.word	0xffffefff

0000506c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    506c:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    506e:	7a03      	ldrb	r3, [r0, #8]
    5070:	069b      	lsls	r3, r3, #26
    5072:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    5074:	8942      	ldrh	r2, [r0, #10]
    5076:	0592      	lsls	r2, r2, #22
    5078:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    507a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    507c:	4918      	ldr	r1, [pc, #96]	; (50e0 <system_clock_source_dfll_set_config+0x74>)
    507e:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    5080:	7983      	ldrb	r3, [r0, #6]
    5082:	79c2      	ldrb	r2, [r0, #7]
    5084:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    5086:	8842      	ldrh	r2, [r0, #2]
    5088:	8884      	ldrh	r4, [r0, #4]
    508a:	4322      	orrs	r2, r4
    508c:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    508e:	7842      	ldrb	r2, [r0, #1]
    5090:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    5092:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    5094:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    5096:	7803      	ldrb	r3, [r0, #0]
    5098:	2b04      	cmp	r3, #4
    509a:	d011      	beq.n	50c0 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    509c:	2b20      	cmp	r3, #32
    509e:	d10e      	bne.n	50be <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    50a0:	7b03      	ldrb	r3, [r0, #12]
    50a2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    50a4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    50a6:	4313      	orrs	r3, r2
    50a8:	89c2      	ldrh	r2, [r0, #14]
    50aa:	0412      	lsls	r2, r2, #16
    50ac:	490d      	ldr	r1, [pc, #52]	; (50e4 <system_clock_source_dfll_set_config+0x78>)
    50ae:	400a      	ands	r2, r1
    50b0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    50b2:	4a0b      	ldr	r2, [pc, #44]	; (50e0 <system_clock_source_dfll_set_config+0x74>)
    50b4:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    50b6:	6811      	ldr	r1, [r2, #0]
    50b8:	4b0b      	ldr	r3, [pc, #44]	; (50e8 <system_clock_source_dfll_set_config+0x7c>)
    50ba:	430b      	orrs	r3, r1
    50bc:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    50be:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    50c0:	7b03      	ldrb	r3, [r0, #12]
    50c2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    50c4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    50c6:	4313      	orrs	r3, r2
    50c8:	89c2      	ldrh	r2, [r0, #14]
    50ca:	0412      	lsls	r2, r2, #16
    50cc:	4905      	ldr	r1, [pc, #20]	; (50e4 <system_clock_source_dfll_set_config+0x78>)
    50ce:	400a      	ands	r2, r1
    50d0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    50d2:	4a03      	ldr	r2, [pc, #12]	; (50e0 <system_clock_source_dfll_set_config+0x74>)
    50d4:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    50d6:	6813      	ldr	r3, [r2, #0]
    50d8:	2104      	movs	r1, #4
    50da:	430b      	orrs	r3, r1
    50dc:	6013      	str	r3, [r2, #0]
    50de:	e7ee      	b.n	50be <system_clock_source_dfll_set_config+0x52>
    50e0:	200000c8 	.word	0x200000c8
    50e4:	03ff0000 	.word	0x03ff0000
    50e8:	00000424 	.word	0x00000424

000050ec <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    50ec:	2808      	cmp	r0, #8
    50ee:	d803      	bhi.n	50f8 <system_clock_source_enable+0xc>
    50f0:	0080      	lsls	r0, r0, #2
    50f2:	4b25      	ldr	r3, [pc, #148]	; (5188 <system_clock_source_enable+0x9c>)
    50f4:	581b      	ldr	r3, [r3, r0]
    50f6:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    50f8:	2017      	movs	r0, #23
    50fa:	e044      	b.n	5186 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    50fc:	4a23      	ldr	r2, [pc, #140]	; (518c <system_clock_source_enable+0xa0>)
    50fe:	6a13      	ldr	r3, [r2, #32]
    5100:	2102      	movs	r1, #2
    5102:	430b      	orrs	r3, r1
    5104:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    5106:	2000      	movs	r0, #0
    5108:	e03d      	b.n	5186 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    510a:	4a20      	ldr	r2, [pc, #128]	; (518c <system_clock_source_enable+0xa0>)
    510c:	6993      	ldr	r3, [r2, #24]
    510e:	2102      	movs	r1, #2
    5110:	430b      	orrs	r3, r1
    5112:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    5114:	2000      	movs	r0, #0
		break;
    5116:	e036      	b.n	5186 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    5118:	4a1c      	ldr	r2, [pc, #112]	; (518c <system_clock_source_enable+0xa0>)
    511a:	8a13      	ldrh	r3, [r2, #16]
    511c:	2102      	movs	r1, #2
    511e:	430b      	orrs	r3, r1
    5120:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    5122:	2000      	movs	r0, #0
		break;
    5124:	e02f      	b.n	5186 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    5126:	4a19      	ldr	r2, [pc, #100]	; (518c <system_clock_source_enable+0xa0>)
    5128:	8a93      	ldrh	r3, [r2, #20]
    512a:	2102      	movs	r1, #2
    512c:	430b      	orrs	r3, r1
    512e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    5130:	2000      	movs	r0, #0
		break;
    5132:	e028      	b.n	5186 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    5134:	4916      	ldr	r1, [pc, #88]	; (5190 <system_clock_source_enable+0xa4>)
    5136:	680b      	ldr	r3, [r1, #0]
    5138:	2202      	movs	r2, #2
    513a:	4313      	orrs	r3, r2
    513c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    513e:	4b13      	ldr	r3, [pc, #76]	; (518c <system_clock_source_enable+0xa0>)
    5140:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5142:	0019      	movs	r1, r3
    5144:	320e      	adds	r2, #14
    5146:	68cb      	ldr	r3, [r1, #12]
    5148:	421a      	tst	r2, r3
    514a:	d0fc      	beq.n	5146 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    514c:	4a10      	ldr	r2, [pc, #64]	; (5190 <system_clock_source_enable+0xa4>)
    514e:	6891      	ldr	r1, [r2, #8]
    5150:	4b0e      	ldr	r3, [pc, #56]	; (518c <system_clock_source_enable+0xa0>)
    5152:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    5154:	6852      	ldr	r2, [r2, #4]
    5156:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    5158:	2200      	movs	r2, #0
    515a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    515c:	0019      	movs	r1, r3
    515e:	3210      	adds	r2, #16
    5160:	68cb      	ldr	r3, [r1, #12]
    5162:	421a      	tst	r2, r3
    5164:	d0fc      	beq.n	5160 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    5166:	4b0a      	ldr	r3, [pc, #40]	; (5190 <system_clock_source_enable+0xa4>)
    5168:	681b      	ldr	r3, [r3, #0]
    516a:	b29b      	uxth	r3, r3
    516c:	4a07      	ldr	r2, [pc, #28]	; (518c <system_clock_source_enable+0xa0>)
    516e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    5170:	2000      	movs	r0, #0
    5172:	e008      	b.n	5186 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    5174:	4905      	ldr	r1, [pc, #20]	; (518c <system_clock_source_enable+0xa0>)
    5176:	2244      	movs	r2, #68	; 0x44
    5178:	5c8b      	ldrb	r3, [r1, r2]
    517a:	2002      	movs	r0, #2
    517c:	4303      	orrs	r3, r0
    517e:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    5180:	2000      	movs	r0, #0
		break;
    5182:	e000      	b.n	5186 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    5184:	2000      	movs	r0, #0
}
    5186:	4770      	bx	lr
    5188:	0000b704 	.word	0x0000b704
    518c:	40000800 	.word	0x40000800
    5190:	200000c8 	.word	0x200000c8

00005194 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    5194:	b5f0      	push	{r4, r5, r6, r7, lr}
    5196:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    5198:	22c2      	movs	r2, #194	; 0xc2
    519a:	00d2      	lsls	r2, r2, #3
    519c:	4b47      	ldr	r3, [pc, #284]	; (52bc <system_clock_init+0x128>)
    519e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    51a0:	4a47      	ldr	r2, [pc, #284]	; (52c0 <system_clock_init+0x12c>)
    51a2:	6853      	ldr	r3, [r2, #4]
    51a4:	211e      	movs	r1, #30
    51a6:	438b      	bics	r3, r1
    51a8:	391a      	subs	r1, #26
    51aa:	430b      	orrs	r3, r1
    51ac:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    51ae:	2202      	movs	r2, #2
    51b0:	ab01      	add	r3, sp, #4
    51b2:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    51b4:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    51b6:	4d43      	ldr	r5, [pc, #268]	; (52c4 <system_clock_init+0x130>)
    51b8:	b2e0      	uxtb	r0, r4
    51ba:	a901      	add	r1, sp, #4
    51bc:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    51be:	3401      	adds	r4, #1
    51c0:	2c25      	cmp	r4, #37	; 0x25
    51c2:	d1f9      	bne.n	51b8 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    51c4:	a80a      	add	r0, sp, #40	; 0x28
    51c6:	2300      	movs	r3, #0
    51c8:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    51ca:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    51cc:	2280      	movs	r2, #128	; 0x80
    51ce:	0212      	lsls	r2, r2, #8
    51d0:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    51d2:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    51d4:	2201      	movs	r2, #1
    51d6:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    51d8:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    51da:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    51dc:	3202      	adds	r2, #2
    51de:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    51e0:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    51e2:	4b39      	ldr	r3, [pc, #228]	; (52c8 <system_clock_init+0x134>)
    51e4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    51e6:	2005      	movs	r0, #5
    51e8:	4b38      	ldr	r3, [pc, #224]	; (52cc <system_clock_init+0x138>)
    51ea:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    51ec:	4933      	ldr	r1, [pc, #204]	; (52bc <system_clock_init+0x128>)
    51ee:	2202      	movs	r2, #2
    51f0:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    51f2:	421a      	tst	r2, r3
    51f4:	d0fc      	beq.n	51f0 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    51f6:	4a31      	ldr	r2, [pc, #196]	; (52bc <system_clock_init+0x128>)
    51f8:	8a93      	ldrh	r3, [r2, #20]
    51fa:	2180      	movs	r1, #128	; 0x80
    51fc:	430b      	orrs	r3, r1
    51fe:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    5200:	ab05      	add	r3, sp, #20
    5202:	2100      	movs	r1, #0
    5204:	2200      	movs	r2, #0
    5206:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    5208:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    520a:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    520c:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    520e:	313f      	adds	r1, #63	; 0x3f
    5210:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    5212:	393b      	subs	r1, #59	; 0x3b
    5214:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    5216:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    5218:	4b2d      	ldr	r3, [pc, #180]	; (52d0 <system_clock_init+0x13c>)
    521a:	681b      	ldr	r3, [r3, #0]
    521c:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    521e:	2b3f      	cmp	r3, #63	; 0x3f
    5220:	d04a      	beq.n	52b8 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    5222:	a805      	add	r0, sp, #20
    5224:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    5226:	4b2b      	ldr	r3, [pc, #172]	; (52d4 <system_clock_init+0x140>)
    5228:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    522a:	2307      	movs	r3, #7
    522c:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    522e:	3338      	adds	r3, #56	; 0x38
    5230:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    5232:	4b29      	ldr	r3, [pc, #164]	; (52d8 <system_clock_init+0x144>)
    5234:	4798      	blx	r3
	config->run_in_standby  = false;
    5236:	a804      	add	r0, sp, #16
    5238:	2500      	movs	r5, #0
    523a:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    523c:	2601      	movs	r6, #1
    523e:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    5240:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    5242:	4b26      	ldr	r3, [pc, #152]	; (52dc <system_clock_init+0x148>)
    5244:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    5246:	2006      	movs	r0, #6
    5248:	4f20      	ldr	r7, [pc, #128]	; (52cc <system_clock_init+0x138>)
    524a:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    524c:	4b24      	ldr	r3, [pc, #144]	; (52e0 <system_clock_init+0x14c>)
    524e:	4798      	blx	r3
	config->division_factor    = 1;
    5250:	ac01      	add	r4, sp, #4
    5252:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    5254:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    5256:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    5258:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    525a:	2305      	movs	r3, #5
    525c:	7023      	strb	r3, [r4, #0]
    525e:	0021      	movs	r1, r4
    5260:	2001      	movs	r0, #1
    5262:	4b20      	ldr	r3, [pc, #128]	; (52e4 <system_clock_init+0x150>)
    5264:	4798      	blx	r3
    5266:	2001      	movs	r0, #1
    5268:	4b1f      	ldr	r3, [pc, #124]	; (52e8 <system_clock_init+0x154>)
    526a:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    526c:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    526e:	0021      	movs	r1, r4
    5270:	2000      	movs	r0, #0
    5272:	4b14      	ldr	r3, [pc, #80]	; (52c4 <system_clock_init+0x130>)
    5274:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    5276:	2000      	movs	r0, #0
    5278:	4b1c      	ldr	r3, [pc, #112]	; (52ec <system_clock_init+0x158>)
    527a:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    527c:	2007      	movs	r0, #7
    527e:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    5280:	490e      	ldr	r1, [pc, #56]	; (52bc <system_clock_init+0x128>)
    5282:	22d0      	movs	r2, #208	; 0xd0
    5284:	68cb      	ldr	r3, [r1, #12]
    5286:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    5288:	2bd0      	cmp	r3, #208	; 0xd0
    528a:	d1fb      	bne.n	5284 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    528c:	4a18      	ldr	r2, [pc, #96]	; (52f0 <system_clock_init+0x15c>)
    528e:	2300      	movs	r3, #0
    5290:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    5292:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    5294:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    5296:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    5298:	a901      	add	r1, sp, #4
    529a:	2201      	movs	r2, #1
    529c:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    529e:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    52a0:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    52a2:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    52a4:	3307      	adds	r3, #7
    52a6:	700b      	strb	r3, [r1, #0]
    52a8:	2000      	movs	r0, #0
    52aa:	4b0e      	ldr	r3, [pc, #56]	; (52e4 <system_clock_init+0x150>)
    52ac:	4798      	blx	r3
    52ae:	2000      	movs	r0, #0
    52b0:	4b0d      	ldr	r3, [pc, #52]	; (52e8 <system_clock_init+0x154>)
    52b2:	4798      	blx	r3
#endif
}
    52b4:	b00f      	add	sp, #60	; 0x3c
    52b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    52b8:	3b20      	subs	r3, #32
    52ba:	e7b2      	b.n	5222 <system_clock_init+0x8e>
    52bc:	40000800 	.word	0x40000800
    52c0:	41004000 	.word	0x41004000
    52c4:	0000552d 	.word	0x0000552d
    52c8:	00004fb5 	.word	0x00004fb5
    52cc:	000050ed 	.word	0x000050ed
    52d0:	00806024 	.word	0x00806024
    52d4:	000005b9 	.word	0x000005b9
    52d8:	0000506d 	.word	0x0000506d
    52dc:	00004f79 	.word	0x00004f79
    52e0:	000052f5 	.word	0x000052f5
    52e4:	00005319 	.word	0x00005319
    52e8:	000053d1 	.word	0x000053d1
    52ec:	000054a1 	.word	0x000054a1
    52f0:	40000400 	.word	0x40000400

000052f4 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    52f4:	4a06      	ldr	r2, [pc, #24]	; (5310 <system_gclk_init+0x1c>)
    52f6:	6993      	ldr	r3, [r2, #24]
    52f8:	2108      	movs	r1, #8
    52fa:	430b      	orrs	r3, r1
    52fc:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    52fe:	2201      	movs	r2, #1
    5300:	4b04      	ldr	r3, [pc, #16]	; (5314 <system_gclk_init+0x20>)
    5302:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    5304:	0019      	movs	r1, r3
    5306:	780b      	ldrb	r3, [r1, #0]
    5308:	4213      	tst	r3, r2
    530a:	d1fc      	bne.n	5306 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    530c:	4770      	bx	lr
    530e:	46c0      	nop			; (mov r8, r8)
    5310:	40000400 	.word	0x40000400
    5314:	40000c00 	.word	0x40000c00

00005318 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    5318:	b570      	push	{r4, r5, r6, lr}
    531a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    531c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    531e:	780d      	ldrb	r5, [r1, #0]
    5320:	022d      	lsls	r5, r5, #8
    5322:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    5324:	784b      	ldrb	r3, [r1, #1]
    5326:	2b00      	cmp	r3, #0
    5328:	d002      	beq.n	5330 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    532a:	2380      	movs	r3, #128	; 0x80
    532c:	02db      	lsls	r3, r3, #11
    532e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    5330:	7a4b      	ldrb	r3, [r1, #9]
    5332:	2b00      	cmp	r3, #0
    5334:	d002      	beq.n	533c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    5336:	2380      	movs	r3, #128	; 0x80
    5338:	031b      	lsls	r3, r3, #12
    533a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    533c:	6848      	ldr	r0, [r1, #4]
    533e:	2801      	cmp	r0, #1
    5340:	d910      	bls.n	5364 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    5342:	1e43      	subs	r3, r0, #1
    5344:	4218      	tst	r0, r3
    5346:	d134      	bne.n	53b2 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    5348:	2802      	cmp	r0, #2
    534a:	d930      	bls.n	53ae <system_gclk_gen_set_config+0x96>
    534c:	2302      	movs	r3, #2
    534e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    5350:	3201      	adds	r2, #1
						mask <<= 1) {
    5352:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    5354:	4298      	cmp	r0, r3
    5356:	d8fb      	bhi.n	5350 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    5358:	0212      	lsls	r2, r2, #8
    535a:	4332      	orrs	r2, r6
    535c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    535e:	2380      	movs	r3, #128	; 0x80
    5360:	035b      	lsls	r3, r3, #13
    5362:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    5364:	7a0b      	ldrb	r3, [r1, #8]
    5366:	2b00      	cmp	r3, #0
    5368:	d002      	beq.n	5370 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    536a:	2380      	movs	r3, #128	; 0x80
    536c:	039b      	lsls	r3, r3, #14
    536e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5370:	4a13      	ldr	r2, [pc, #76]	; (53c0 <system_gclk_gen_set_config+0xa8>)
    5372:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    5374:	b25b      	sxtb	r3, r3
    5376:	2b00      	cmp	r3, #0
    5378:	dbfb      	blt.n	5372 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    537a:	4b12      	ldr	r3, [pc, #72]	; (53c4 <system_gclk_gen_set_config+0xac>)
    537c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    537e:	4b12      	ldr	r3, [pc, #72]	; (53c8 <system_gclk_gen_set_config+0xb0>)
    5380:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5382:	4a0f      	ldr	r2, [pc, #60]	; (53c0 <system_gclk_gen_set_config+0xa8>)
    5384:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    5386:	b25b      	sxtb	r3, r3
    5388:	2b00      	cmp	r3, #0
    538a:	dbfb      	blt.n	5384 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    538c:	4b0c      	ldr	r3, [pc, #48]	; (53c0 <system_gclk_gen_set_config+0xa8>)
    538e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5390:	001a      	movs	r2, r3
    5392:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    5394:	b25b      	sxtb	r3, r3
    5396:	2b00      	cmp	r3, #0
    5398:	dbfb      	blt.n	5392 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    539a:	4a09      	ldr	r2, [pc, #36]	; (53c0 <system_gclk_gen_set_config+0xa8>)
    539c:	6853      	ldr	r3, [r2, #4]
    539e:	2180      	movs	r1, #128	; 0x80
    53a0:	0249      	lsls	r1, r1, #9
    53a2:	400b      	ands	r3, r1
    53a4:	431d      	orrs	r5, r3
    53a6:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    53a8:	4b08      	ldr	r3, [pc, #32]	; (53cc <system_gclk_gen_set_config+0xb4>)
    53aa:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    53ac:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    53ae:	2200      	movs	r2, #0
    53b0:	e7d2      	b.n	5358 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    53b2:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    53b4:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    53b6:	2380      	movs	r3, #128	; 0x80
    53b8:	029b      	lsls	r3, r3, #10
    53ba:	431d      	orrs	r5, r3
    53bc:	e7d2      	b.n	5364 <system_gclk_gen_set_config+0x4c>
    53be:	46c0      	nop			; (mov r8, r8)
    53c0:	40000c00 	.word	0x40000c00
    53c4:	00003de1 	.word	0x00003de1
    53c8:	40000c08 	.word	0x40000c08
    53cc:	00003e21 	.word	0x00003e21

000053d0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    53d0:	b510      	push	{r4, lr}
    53d2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    53d4:	4a0b      	ldr	r2, [pc, #44]	; (5404 <system_gclk_gen_enable+0x34>)
    53d6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    53d8:	b25b      	sxtb	r3, r3
    53da:	2b00      	cmp	r3, #0
    53dc:	dbfb      	blt.n	53d6 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    53de:	4b0a      	ldr	r3, [pc, #40]	; (5408 <system_gclk_gen_enable+0x38>)
    53e0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    53e2:	4b0a      	ldr	r3, [pc, #40]	; (540c <system_gclk_gen_enable+0x3c>)
    53e4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    53e6:	4a07      	ldr	r2, [pc, #28]	; (5404 <system_gclk_gen_enable+0x34>)
    53e8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    53ea:	b25b      	sxtb	r3, r3
    53ec:	2b00      	cmp	r3, #0
    53ee:	dbfb      	blt.n	53e8 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    53f0:	4a04      	ldr	r2, [pc, #16]	; (5404 <system_gclk_gen_enable+0x34>)
    53f2:	6851      	ldr	r1, [r2, #4]
    53f4:	2380      	movs	r3, #128	; 0x80
    53f6:	025b      	lsls	r3, r3, #9
    53f8:	430b      	orrs	r3, r1
    53fa:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    53fc:	4b04      	ldr	r3, [pc, #16]	; (5410 <system_gclk_gen_enable+0x40>)
    53fe:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5400:	bd10      	pop	{r4, pc}
    5402:	46c0      	nop			; (mov r8, r8)
    5404:	40000c00 	.word	0x40000c00
    5408:	00003de1 	.word	0x00003de1
    540c:	40000c04 	.word	0x40000c04
    5410:	00003e21 	.word	0x00003e21

00005414 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    5414:	b570      	push	{r4, r5, r6, lr}
    5416:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5418:	4a1a      	ldr	r2, [pc, #104]	; (5484 <system_gclk_gen_get_hz+0x70>)
    541a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    541c:	b25b      	sxtb	r3, r3
    541e:	2b00      	cmp	r3, #0
    5420:	dbfb      	blt.n	541a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    5422:	4b19      	ldr	r3, [pc, #100]	; (5488 <system_gclk_gen_get_hz+0x74>)
    5424:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5426:	4b19      	ldr	r3, [pc, #100]	; (548c <system_gclk_gen_get_hz+0x78>)
    5428:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    542a:	4a16      	ldr	r2, [pc, #88]	; (5484 <system_gclk_gen_get_hz+0x70>)
    542c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    542e:	b25b      	sxtb	r3, r3
    5430:	2b00      	cmp	r3, #0
    5432:	dbfb      	blt.n	542c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    5434:	4e13      	ldr	r6, [pc, #76]	; (5484 <system_gclk_gen_get_hz+0x70>)
    5436:	6870      	ldr	r0, [r6, #4]
    5438:	04c0      	lsls	r0, r0, #19
    543a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    543c:	4b14      	ldr	r3, [pc, #80]	; (5490 <system_gclk_gen_get_hz+0x7c>)
    543e:	4798      	blx	r3
    5440:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5442:	4b12      	ldr	r3, [pc, #72]	; (548c <system_gclk_gen_get_hz+0x78>)
    5444:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    5446:	6876      	ldr	r6, [r6, #4]
    5448:	02f6      	lsls	r6, r6, #11
    544a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    544c:	4b11      	ldr	r3, [pc, #68]	; (5494 <system_gclk_gen_get_hz+0x80>)
    544e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5450:	4a0c      	ldr	r2, [pc, #48]	; (5484 <system_gclk_gen_get_hz+0x70>)
    5452:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5454:	b25b      	sxtb	r3, r3
    5456:	2b00      	cmp	r3, #0
    5458:	dbfb      	blt.n	5452 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    545a:	4b0a      	ldr	r3, [pc, #40]	; (5484 <system_gclk_gen_get_hz+0x70>)
    545c:	689c      	ldr	r4, [r3, #8]
    545e:	0224      	lsls	r4, r4, #8
    5460:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    5462:	4b0d      	ldr	r3, [pc, #52]	; (5498 <system_gclk_gen_get_hz+0x84>)
    5464:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    5466:	2e00      	cmp	r6, #0
    5468:	d107      	bne.n	547a <system_gclk_gen_get_hz+0x66>
    546a:	2c01      	cmp	r4, #1
    546c:	d907      	bls.n	547e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    546e:	0021      	movs	r1, r4
    5470:	0028      	movs	r0, r5
    5472:	4b0a      	ldr	r3, [pc, #40]	; (549c <system_gclk_gen_get_hz+0x88>)
    5474:	4798      	blx	r3
    5476:	0005      	movs	r5, r0
    5478:	e001      	b.n	547e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    547a:	3401      	adds	r4, #1
    547c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    547e:	0028      	movs	r0, r5
    5480:	bd70      	pop	{r4, r5, r6, pc}
    5482:	46c0      	nop			; (mov r8, r8)
    5484:	40000c00 	.word	0x40000c00
    5488:	00003de1 	.word	0x00003de1
    548c:	40000c04 	.word	0x40000c04
    5490:	00004ee9 	.word	0x00004ee9
    5494:	40000c08 	.word	0x40000c08
    5498:	00003e21 	.word	0x00003e21
    549c:	00007369 	.word	0x00007369

000054a0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    54a0:	b510      	push	{r4, lr}
    54a2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    54a4:	4b06      	ldr	r3, [pc, #24]	; (54c0 <system_gclk_chan_enable+0x20>)
    54a6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    54a8:	4b06      	ldr	r3, [pc, #24]	; (54c4 <system_gclk_chan_enable+0x24>)
    54aa:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    54ac:	4a06      	ldr	r2, [pc, #24]	; (54c8 <system_gclk_chan_enable+0x28>)
    54ae:	8853      	ldrh	r3, [r2, #2]
    54b0:	2180      	movs	r1, #128	; 0x80
    54b2:	01c9      	lsls	r1, r1, #7
    54b4:	430b      	orrs	r3, r1
    54b6:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    54b8:	4b04      	ldr	r3, [pc, #16]	; (54cc <system_gclk_chan_enable+0x2c>)
    54ba:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    54bc:	bd10      	pop	{r4, pc}
    54be:	46c0      	nop			; (mov r8, r8)
    54c0:	00003de1 	.word	0x00003de1
    54c4:	40000c02 	.word	0x40000c02
    54c8:	40000c00 	.word	0x40000c00
    54cc:	00003e21 	.word	0x00003e21

000054d0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    54d0:	b510      	push	{r4, lr}
    54d2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    54d4:	4b0f      	ldr	r3, [pc, #60]	; (5514 <system_gclk_chan_disable+0x44>)
    54d6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    54d8:	4b0f      	ldr	r3, [pc, #60]	; (5518 <system_gclk_chan_disable+0x48>)
    54da:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    54dc:	4a0f      	ldr	r2, [pc, #60]	; (551c <system_gclk_chan_disable+0x4c>)
    54de:	8853      	ldrh	r3, [r2, #2]
    54e0:	051b      	lsls	r3, r3, #20
    54e2:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    54e4:	8853      	ldrh	r3, [r2, #2]
    54e6:	490e      	ldr	r1, [pc, #56]	; (5520 <system_gclk_chan_disable+0x50>)
    54e8:	400b      	ands	r3, r1
    54ea:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    54ec:	8853      	ldrh	r3, [r2, #2]
    54ee:	490d      	ldr	r1, [pc, #52]	; (5524 <system_gclk_chan_disable+0x54>)
    54f0:	400b      	ands	r3, r1
    54f2:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    54f4:	0011      	movs	r1, r2
    54f6:	2280      	movs	r2, #128	; 0x80
    54f8:	01d2      	lsls	r2, r2, #7
    54fa:	884b      	ldrh	r3, [r1, #2]
    54fc:	4213      	tst	r3, r2
    54fe:	d1fc      	bne.n	54fa <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    5500:	4906      	ldr	r1, [pc, #24]	; (551c <system_gclk_chan_disable+0x4c>)
    5502:	884a      	ldrh	r2, [r1, #2]
    5504:	0203      	lsls	r3, r0, #8
    5506:	4806      	ldr	r0, [pc, #24]	; (5520 <system_gclk_chan_disable+0x50>)
    5508:	4002      	ands	r2, r0
    550a:	4313      	orrs	r3, r2
    550c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    550e:	4b06      	ldr	r3, [pc, #24]	; (5528 <system_gclk_chan_disable+0x58>)
    5510:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5512:	bd10      	pop	{r4, pc}
    5514:	00003de1 	.word	0x00003de1
    5518:	40000c02 	.word	0x40000c02
    551c:	40000c00 	.word	0x40000c00
    5520:	fffff0ff 	.word	0xfffff0ff
    5524:	ffffbfff 	.word	0xffffbfff
    5528:	00003e21 	.word	0x00003e21

0000552c <system_gclk_chan_set_config>:
{
    552c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    552e:	780c      	ldrb	r4, [r1, #0]
    5530:	0224      	lsls	r4, r4, #8
    5532:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    5534:	4b02      	ldr	r3, [pc, #8]	; (5540 <system_gclk_chan_set_config+0x14>)
    5536:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    5538:	b2a4      	uxth	r4, r4
    553a:	4b02      	ldr	r3, [pc, #8]	; (5544 <system_gclk_chan_set_config+0x18>)
    553c:	805c      	strh	r4, [r3, #2]
}
    553e:	bd10      	pop	{r4, pc}
    5540:	000054d1 	.word	0x000054d1
    5544:	40000c00 	.word	0x40000c00

00005548 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    5548:	b510      	push	{r4, lr}
    554a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    554c:	4b06      	ldr	r3, [pc, #24]	; (5568 <system_gclk_chan_get_hz+0x20>)
    554e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5550:	4b06      	ldr	r3, [pc, #24]	; (556c <system_gclk_chan_get_hz+0x24>)
    5552:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    5554:	4b06      	ldr	r3, [pc, #24]	; (5570 <system_gclk_chan_get_hz+0x28>)
    5556:	885c      	ldrh	r4, [r3, #2]
    5558:	0524      	lsls	r4, r4, #20
    555a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    555c:	4b05      	ldr	r3, [pc, #20]	; (5574 <system_gclk_chan_get_hz+0x2c>)
    555e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    5560:	0020      	movs	r0, r4
    5562:	4b05      	ldr	r3, [pc, #20]	; (5578 <system_gclk_chan_get_hz+0x30>)
    5564:	4798      	blx	r3
}
    5566:	bd10      	pop	{r4, pc}
    5568:	00003de1 	.word	0x00003de1
    556c:	40000c02 	.word	0x40000c02
    5570:	40000c00 	.word	0x40000c00
    5574:	00003e21 	.word	0x00003e21
    5578:	00005415 	.word	0x00005415

0000557c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    557c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    557e:	78d3      	ldrb	r3, [r2, #3]
    5580:	2b00      	cmp	r3, #0
    5582:	d135      	bne.n	55f0 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    5584:	7813      	ldrb	r3, [r2, #0]
    5586:	2b80      	cmp	r3, #128	; 0x80
    5588:	d029      	beq.n	55de <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    558a:	061b      	lsls	r3, r3, #24
    558c:	2480      	movs	r4, #128	; 0x80
    558e:	0264      	lsls	r4, r4, #9
    5590:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    5592:	7854      	ldrb	r4, [r2, #1]
    5594:	2502      	movs	r5, #2
    5596:	43ac      	bics	r4, r5
    5598:	d106      	bne.n	55a8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    559a:	7894      	ldrb	r4, [r2, #2]
    559c:	2c00      	cmp	r4, #0
    559e:	d120      	bne.n	55e2 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    55a0:	2480      	movs	r4, #128	; 0x80
    55a2:	02a4      	lsls	r4, r4, #10
    55a4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    55a6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    55a8:	7854      	ldrb	r4, [r2, #1]
    55aa:	3c01      	subs	r4, #1
    55ac:	2c01      	cmp	r4, #1
    55ae:	d91c      	bls.n	55ea <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    55b0:	040d      	lsls	r5, r1, #16
    55b2:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    55b4:	24a0      	movs	r4, #160	; 0xa0
    55b6:	05e4      	lsls	r4, r4, #23
    55b8:	432c      	orrs	r4, r5
    55ba:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    55bc:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    55be:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    55c0:	24d0      	movs	r4, #208	; 0xd0
    55c2:	0624      	lsls	r4, r4, #24
    55c4:	432c      	orrs	r4, r5
    55c6:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    55c8:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    55ca:	78d4      	ldrb	r4, [r2, #3]
    55cc:	2c00      	cmp	r4, #0
    55ce:	d122      	bne.n	5616 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    55d0:	035b      	lsls	r3, r3, #13
    55d2:	d51c      	bpl.n	560e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    55d4:	7893      	ldrb	r3, [r2, #2]
    55d6:	2b01      	cmp	r3, #1
    55d8:	d01e      	beq.n	5618 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    55da:	6141      	str	r1, [r0, #20]
    55dc:	e017      	b.n	560e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    55de:	2300      	movs	r3, #0
    55e0:	e7d7      	b.n	5592 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    55e2:	24c0      	movs	r4, #192	; 0xc0
    55e4:	02e4      	lsls	r4, r4, #11
    55e6:	4323      	orrs	r3, r4
    55e8:	e7dd      	b.n	55a6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    55ea:	4c0d      	ldr	r4, [pc, #52]	; (5620 <_system_pinmux_config+0xa4>)
    55ec:	4023      	ands	r3, r4
    55ee:	e7df      	b.n	55b0 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    55f0:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    55f2:	040c      	lsls	r4, r1, #16
    55f4:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    55f6:	23a0      	movs	r3, #160	; 0xa0
    55f8:	05db      	lsls	r3, r3, #23
    55fa:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    55fc:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    55fe:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    5600:	23d0      	movs	r3, #208	; 0xd0
    5602:	061b      	lsls	r3, r3, #24
    5604:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5606:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    5608:	78d3      	ldrb	r3, [r2, #3]
    560a:	2b00      	cmp	r3, #0
    560c:	d103      	bne.n	5616 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    560e:	7853      	ldrb	r3, [r2, #1]
    5610:	3b01      	subs	r3, #1
    5612:	2b01      	cmp	r3, #1
    5614:	d902      	bls.n	561c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    5616:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    5618:	6181      	str	r1, [r0, #24]
    561a:	e7f8      	b.n	560e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    561c:	6081      	str	r1, [r0, #8]
}
    561e:	e7fa      	b.n	5616 <_system_pinmux_config+0x9a>
    5620:	fffbffff 	.word	0xfffbffff

00005624 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    5624:	b510      	push	{r4, lr}
    5626:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    5628:	09c1      	lsrs	r1, r0, #7
		return NULL;
    562a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    562c:	2900      	cmp	r1, #0
    562e:	d104      	bne.n	563a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    5630:	0943      	lsrs	r3, r0, #5
    5632:	01db      	lsls	r3, r3, #7
    5634:	4905      	ldr	r1, [pc, #20]	; (564c <system_pinmux_pin_set_config+0x28>)
    5636:	468c      	mov	ip, r1
    5638:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    563a:	241f      	movs	r4, #31
    563c:	4020      	ands	r0, r4
    563e:	2101      	movs	r1, #1
    5640:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    5642:	0018      	movs	r0, r3
    5644:	4b02      	ldr	r3, [pc, #8]	; (5650 <system_pinmux_pin_set_config+0x2c>)
    5646:	4798      	blx	r3
}
    5648:	bd10      	pop	{r4, pc}
    564a:	46c0      	nop			; (mov r8, r8)
    564c:	41004400 	.word	0x41004400
    5650:	0000557d 	.word	0x0000557d

00005654 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    5654:	4770      	bx	lr
	...

00005658 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    5658:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    565a:	4b05      	ldr	r3, [pc, #20]	; (5670 <system_init+0x18>)
    565c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    565e:	4b05      	ldr	r3, [pc, #20]	; (5674 <system_init+0x1c>)
    5660:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    5662:	4b05      	ldr	r3, [pc, #20]	; (5678 <system_init+0x20>)
    5664:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    5666:	4b05      	ldr	r3, [pc, #20]	; (567c <system_init+0x24>)
    5668:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    566a:	4b05      	ldr	r3, [pc, #20]	; (5680 <system_init+0x28>)
    566c:	4798      	blx	r3
}
    566e:	bd10      	pop	{r4, pc}
    5670:	00005195 	.word	0x00005195
    5674:	00003e51 	.word	0x00003e51
    5678:	00005655 	.word	0x00005655
    567c:	00003f61 	.word	0x00003f61
    5680:	00005655 	.word	0x00005655

00005684 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    5684:	4b09      	ldr	r3, [pc, #36]	; (56ac <_tcc_get_inst_index+0x28>)
    5686:	4298      	cmp	r0, r3
    5688:	d00c      	beq.n	56a4 <_tcc_get_inst_index+0x20>
    568a:	4b09      	ldr	r3, [pc, #36]	; (56b0 <_tcc_get_inst_index+0x2c>)
    568c:	4298      	cmp	r0, r3
    568e:	d007      	beq.n	56a0 <_tcc_get_inst_index+0x1c>
    5690:	4a08      	ldr	r2, [pc, #32]	; (56b4 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    5692:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
    5694:	4290      	cmp	r0, r2
    5696:	d001      	beq.n	569c <_tcc_get_inst_index+0x18>
}
    5698:	0018      	movs	r0, r3
    569a:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    569c:	3302      	adds	r3, #2
    569e:	e002      	b.n	56a6 <_tcc_get_inst_index+0x22>
    56a0:	2301      	movs	r3, #1
    56a2:	e000      	b.n	56a6 <_tcc_get_inst_index+0x22>
    56a4:	2300      	movs	r3, #0
			return i;
    56a6:	b2db      	uxtb	r3, r3
    56a8:	e7f6      	b.n	5698 <_tcc_get_inst_index+0x14>
    56aa:	46c0      	nop			; (mov r8, r8)
    56ac:	42002000 	.word	0x42002000
    56b0:	42002400 	.word	0x42002400
    56b4:	42002800 	.word	0x42002800

000056b8 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    56b8:	b510      	push	{r4, lr}
    56ba:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    56bc:	0008      	movs	r0, r1
    56be:	4b4f      	ldr	r3, [pc, #316]	; (57fc <tcc_get_config_defaults+0x144>)
    56c0:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
    56c2:	2300      	movs	r3, #0
    56c4:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    56c6:	0080      	lsls	r0, r0, #2
    56c8:	4a4d      	ldr	r2, [pc, #308]	; (5800 <tcc_get_config_defaults+0x148>)
    56ca:	5882      	ldr	r2, [r0, r2]
    56cc:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    56ce:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    56d0:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    56d2:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    56d4:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    56d6:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    56d8:	61e3      	str	r3, [r4, #28]
    56da:	6223      	str	r3, [r4, #32]
    56dc:	6263      	str	r3, [r4, #36]	; 0x24
    56de:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    56e0:	7523      	strb	r3, [r4, #20]
    56e2:	7563      	strb	r3, [r4, #21]
    56e4:	75a3      	strb	r3, [r4, #22]
    56e6:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    56e8:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    56ea:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    56ec:	7423      	strb	r3, [r4, #16]
    56ee:	7463      	strb	r3, [r4, #17]
    56f0:	74a3      	strb	r3, [r4, #18]
    56f2:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    56f4:	222c      	movs	r2, #44	; 0x2c
    56f6:	54a3      	strb	r3, [r4, r2]
    56f8:	3201      	adds	r2, #1
    56fa:	54a3      	strb	r3, [r4, r2]
    56fc:	3201      	adds	r2, #1
    56fe:	54a3      	strb	r3, [r4, r2]
    5700:	3201      	adds	r2, #1
    5702:	54a3      	strb	r3, [r4, r2]
    5704:	3201      	adds	r2, #1
    5706:	54a3      	strb	r3, [r4, r2]
    5708:	3201      	adds	r2, #1
    570a:	54a3      	strb	r3, [r4, r2]
    570c:	3201      	adds	r2, #1
    570e:	54a3      	strb	r3, [r4, r2]
    5710:	3201      	adds	r2, #1
    5712:	54a3      	strb	r3, [r4, r2]
    5714:	3201      	adds	r2, #1
    5716:	54a3      	strb	r3, [r4, r2]
    5718:	3201      	adds	r2, #1
    571a:	54a3      	strb	r3, [r4, r2]
    571c:	3201      	adds	r2, #1
    571e:	54a3      	strb	r3, [r4, r2]
    5720:	3201      	adds	r2, #1
    5722:	54a3      	strb	r3, [r4, r2]
    5724:	3201      	adds	r2, #1
    5726:	54a3      	strb	r3, [r4, r2]
    5728:	3201      	adds	r2, #1
    572a:	54a3      	strb	r3, [r4, r2]
    572c:	3201      	adds	r2, #1
    572e:	54a3      	strb	r3, [r4, r2]
    5730:	3201      	adds	r2, #1
    5732:	54a3      	strb	r3, [r4, r2]
    5734:	3201      	adds	r2, #1
    5736:	54a3      	strb	r3, [r4, r2]
    5738:	3201      	adds	r2, #1
    573a:	54a3      	strb	r3, [r4, r2]
    573c:	3201      	adds	r2, #1
    573e:	54a3      	strb	r3, [r4, r2]
    5740:	3201      	adds	r2, #1
    5742:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    5744:	3201      	adds	r2, #1
    5746:	54a3      	strb	r3, [r4, r2]
    5748:	3201      	adds	r2, #1
    574a:	54a3      	strb	r3, [r4, r2]
    574c:	3201      	adds	r2, #1
    574e:	54a3      	strb	r3, [r4, r2]
    5750:	3201      	adds	r2, #1
    5752:	54a3      	strb	r3, [r4, r2]
    5754:	3201      	adds	r2, #1
    5756:	54a3      	strb	r3, [r4, r2]
    5758:	3201      	adds	r2, #1
    575a:	54a3      	strb	r3, [r4, r2]
    575c:	3201      	adds	r2, #1
    575e:	54a3      	strb	r3, [r4, r2]
    5760:	3201      	adds	r2, #1
    5762:	54a3      	strb	r3, [r4, r2]
    5764:	3201      	adds	r2, #1
    5766:	54a3      	strb	r3, [r4, r2]
    5768:	3201      	adds	r2, #1
    576a:	54a3      	strb	r3, [r4, r2]
    576c:	3201      	adds	r2, #1
    576e:	54a3      	strb	r3, [r4, r2]
    5770:	3201      	adds	r2, #1
    5772:	54a3      	strb	r3, [r4, r2]
    5774:	3201      	adds	r2, #1
    5776:	54a3      	strb	r3, [r4, r2]
    5778:	3201      	adds	r2, #1
    577a:	54a3      	strb	r3, [r4, r2]
    577c:	3201      	adds	r2, #1
    577e:	54a3      	strb	r3, [r4, r2]
    5780:	3201      	adds	r2, #1
    5782:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    5784:	3201      	adds	r2, #1
    5786:	54a3      	strb	r3, [r4, r2]
    5788:	3201      	adds	r2, #1
    578a:	54a3      	strb	r3, [r4, r2]
    578c:	3201      	adds	r2, #1
    578e:	54a3      	strb	r3, [r4, r2]
    5790:	3201      	adds	r2, #1
    5792:	54a3      	strb	r3, [r4, r2]
    5794:	3201      	adds	r2, #1
    5796:	54a3      	strb	r3, [r4, r2]
    5798:	3201      	adds	r2, #1
    579a:	54a3      	strb	r3, [r4, r2]
    579c:	3201      	adds	r2, #1
    579e:	54a3      	strb	r3, [r4, r2]
    57a0:	3201      	adds	r2, #1
    57a2:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    57a4:	3241      	adds	r2, #65	; 0x41
    57a6:	54a3      	strb	r3, [r4, r2]
    57a8:	65a3      	str	r3, [r4, #88]	; 0x58
    57aa:	67a3      	str	r3, [r4, #120]	; 0x78
    57ac:	3201      	adds	r2, #1
    57ae:	54a3      	strb	r3, [r4, r2]
    57b0:	65e3      	str	r3, [r4, #92]	; 0x5c
    57b2:	67e3      	str	r3, [r4, #124]	; 0x7c
    57b4:	3201      	adds	r2, #1
    57b6:	54a3      	strb	r3, [r4, r2]
    57b8:	6623      	str	r3, [r4, #96]	; 0x60
    57ba:	3a1a      	subs	r2, #26
    57bc:	50a3      	str	r3, [r4, r2]
    57be:	321b      	adds	r2, #27
    57c0:	54a3      	strb	r3, [r4, r2]
    57c2:	6663      	str	r3, [r4, #100]	; 0x64
    57c4:	3a17      	subs	r2, #23
    57c6:	50a3      	str	r3, [r4, r2]
    57c8:	3218      	adds	r2, #24
    57ca:	54a3      	strb	r3, [r4, r2]
    57cc:	66a3      	str	r3, [r4, #104]	; 0x68
    57ce:	3a14      	subs	r2, #20
    57d0:	50a3      	str	r3, [r4, r2]
    57d2:	3215      	adds	r2, #21
    57d4:	54a3      	strb	r3, [r4, r2]
    57d6:	66e3      	str	r3, [r4, #108]	; 0x6c
    57d8:	3a11      	subs	r2, #17
    57da:	50a3      	str	r3, [r4, r2]
    57dc:	3212      	adds	r2, #18
    57de:	54a3      	strb	r3, [r4, r2]
    57e0:	6723      	str	r3, [r4, #112]	; 0x70
    57e2:	3a0e      	subs	r2, #14
    57e4:	50a3      	str	r3, [r4, r2]
    57e6:	320f      	adds	r2, #15
    57e8:	54a3      	strb	r3, [r4, r2]
    57ea:	6763      	str	r3, [r4, #116]	; 0x74
    57ec:	3a0b      	subs	r2, #11
    57ee:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    57f0:	2101      	movs	r1, #1
    57f2:	320c      	adds	r2, #12
    57f4:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    57f6:	3201      	adds	r2, #1
    57f8:	54a3      	strb	r3, [r4, r2]
}
    57fa:	bd10      	pop	{r4, pc}
    57fc:	00005685 	.word	0x00005685
    5800:	0000b73c 	.word	0x0000b73c

00005804 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    5804:	b5f0      	push	{r4, r5, r6, r7, lr}
    5806:	46de      	mov	lr, fp
    5808:	4657      	mov	r7, sl
    580a:	464e      	mov	r6, r9
    580c:	4645      	mov	r5, r8
    580e:	b5e0      	push	{r5, r6, r7, lr}
    5810:	b091      	sub	sp, #68	; 0x44
    5812:	9001      	str	r0, [sp, #4]
    5814:	000c      	movs	r4, r1
    5816:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    5818:	0008      	movs	r0, r1
    581a:	4bc3      	ldr	r3, [pc, #780]	; (5b28 <tcc_init+0x324>)
    581c:	4798      	blx	r3
    581e:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    5820:	0001      	movs	r1, r0
			PM->APBCMASK.reg |= mask;
    5822:	48c2      	ldr	r0, [pc, #776]	; (5b2c <tcc_init+0x328>)
    5824:	6a02      	ldr	r2, [r0, #32]
    5826:	009e      	lsls	r6, r3, #2
    5828:	4fc1      	ldr	r7, [pc, #772]	; (5b30 <tcc_init+0x32c>)
    582a:	59f7      	ldr	r7, [r6, r7]
    582c:	433a      	orrs	r2, r7
    582e:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    5830:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    5832:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    5834:	0792      	lsls	r2, r2, #30
    5836:	d506      	bpl.n	5846 <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    5838:	b011      	add	sp, #68	; 0x44
    583a:	bc3c      	pop	{r2, r3, r4, r5}
    583c:	4690      	mov	r8, r2
    583e:	4699      	mov	r9, r3
    5840:	46a2      	mov	sl, r4
    5842:	46ab      	mov	fp, r5
    5844:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    5846:	6822      	ldr	r2, [r4, #0]
    5848:	2701      	movs	r7, #1
    584a:	4017      	ands	r7, r2
    584c:	d1f4      	bne.n	5838 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
    584e:	48b9      	ldr	r0, [pc, #740]	; (5b34 <tcc_init+0x330>)
    5850:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
    5852:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
    5854:	682e      	ldr	r6, [r5, #0]
    5856:	42b2      	cmp	r2, r6
    5858:	d3ee      	bcc.n	5838 <tcc_init+0x34>
		|| (config->counter.period > count_max)
    585a:	686e      	ldr	r6, [r5, #4]
    585c:	42b2      	cmp	r2, r6
    585e:	d3eb      	bcc.n	5838 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
    5860:	69e8      	ldr	r0, [r5, #28]
    5862:	4282      	cmp	r2, r0
    5864:	d200      	bcs.n	5868 <tcc_init+0x64>
    5866:	e1b9      	b.n	5bdc <tcc_init+0x3d8>
    5868:	6a28      	ldr	r0, [r5, #32]
    586a:	4282      	cmp	r2, r0
    586c:	d200      	bcs.n	5870 <tcc_init+0x6c>
    586e:	e1b7      	b.n	5be0 <tcc_init+0x3dc>
    5870:	6a68      	ldr	r0, [r5, #36]	; 0x24
    5872:	4282      	cmp	r2, r0
    5874:	d200      	bcs.n	5878 <tcc_init+0x74>
    5876:	e1b5      	b.n	5be4 <tcc_init+0x3e0>
    5878:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    587a:	4282      	cmp	r2, r0
    587c:	d200      	bcs.n	5880 <tcc_init+0x7c>
    587e:	e1b3      	b.n	5be8 <tcc_init+0x3e4>
    5880:	2298      	movs	r2, #152	; 0x98
    5882:	4694      	mov	ip, r2
    5884:	44ac      	add	ip, r5
    5886:	4662      	mov	r2, ip
    5888:	9208      	str	r2, [sp, #32]
    588a:	2000      	movs	r0, #0
    588c:	e003      	b.n	5896 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    588e:	3001      	adds	r0, #1
    5890:	3201      	adds	r2, #1
    5892:	2808      	cmp	r0, #8
    5894:	d008      	beq.n	58a8 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
    5896:	7816      	ldrb	r6, [r2, #0]
    5898:	2e00      	cmp	r6, #0
    589a:	d0f8      	beq.n	588e <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
    589c:	4ea6      	ldr	r6, [pc, #664]	; (5b38 <tcc_init+0x334>)
    589e:	5c76      	ldrb	r6, [r6, r1]
    58a0:	4286      	cmp	r6, r0
    58a2:	dcf4      	bgt.n	588e <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
    58a4:	2017      	movs	r0, #23
    58a6:	e7c7      	b.n	5838 <tcc_init+0x34>
    58a8:	2200      	movs	r2, #0
    58aa:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    58ac:	2080      	movs	r0, #128	; 0x80
    58ae:	0440      	lsls	r0, r0, #17
    58b0:	4684      	mov	ip, r0
    58b2:	e002      	b.n	58ba <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    58b4:	3201      	adds	r2, #1
    58b6:	2a04      	cmp	r2, #4
    58b8:	d00e      	beq.n	58d8 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
    58ba:	18a8      	adds	r0, r5, r2
    58bc:	7c00      	ldrb	r0, [r0, #16]
    58be:	2801      	cmp	r0, #1
    58c0:	d1f8      	bne.n	58b4 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
    58c2:	489e      	ldr	r0, [pc, #632]	; (5b3c <tcc_init+0x338>)
    58c4:	5c40      	ldrb	r0, [r0, r1]
    58c6:	4290      	cmp	r0, r2
    58c8:	da00      	bge.n	58cc <tcc_init+0xc8>
    58ca:	e18f      	b.n	5bec <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    58cc:	4660      	mov	r0, ip
    58ce:	4090      	lsls	r0, r2
    58d0:	9e02      	ldr	r6, [sp, #8]
    58d2:	4306      	orrs	r6, r0
    58d4:	9602      	str	r6, [sp, #8]
    58d6:	e7ed      	b.n	58b4 <tcc_init+0xb0>
	if (config->run_in_standby) {
    58d8:	329d      	adds	r2, #157	; 0x9d
    58da:	5caa      	ldrb	r2, [r5, r2]
    58dc:	2a00      	cmp	r2, #0
    58de:	d004      	beq.n	58ea <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    58e0:	2280      	movs	r2, #128	; 0x80
    58e2:	0112      	lsls	r2, r2, #4
    58e4:	9902      	ldr	r1, [sp, #8]
    58e6:	4311      	orrs	r1, r2
    58e8:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    58ea:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    58ec:	1e51      	subs	r1, r2, #1
    58ee:	418a      	sbcs	r2, r1
    58f0:	0092      	lsls	r2, r2, #2
    58f2:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    58f4:	7a6a      	ldrb	r2, [r5, #9]
    58f6:	2a01      	cmp	r2, #1
    58f8:	d022      	beq.n	5940 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
    58fa:	4a90      	ldr	r2, [pc, #576]	; (5b3c <tcc_init+0x338>)
    58fc:	5cd2      	ldrb	r2, [r2, r3]
    58fe:	0011      	movs	r1, r2
    5900:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
    5902:	2235      	movs	r2, #53	; 0x35
    5904:	5caa      	ldrb	r2, [r5, r2]
    5906:	428a      	cmp	r2, r1
    5908:	d300      	bcc.n	590c <tcc_init+0x108>
    590a:	e179      	b.n	5c00 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    590c:	212c      	movs	r1, #44	; 0x2c
    590e:	5c69      	ldrb	r1, [r5, r1]
    5910:	290f      	cmp	r1, #15
    5912:	d900      	bls.n	5916 <tcc_init+0x112>
    5914:	e174      	b.n	5c00 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    5916:	7b28      	ldrb	r0, [r5, #12]
    5918:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    591a:	7ae8      	ldrb	r0, [r5, #11]
    591c:	900b      	str	r0, [sp, #44]	; 0x2c
    591e:	202d      	movs	r0, #45	; 0x2d
    5920:	4682      	mov	sl, r0
    5922:	44aa      	add	sl, r5
    5924:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    5926:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
    5928:	ae0e      	add	r6, sp, #56	; 0x38
    592a:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    592c:	26c0      	movs	r6, #192	; 0xc0
    592e:	0136      	lsls	r6, r6, #4
    5930:	46b1      	mov	r9, r6
    5932:	4684      	mov	ip, r0
    5934:	46a0      	mov	r8, r4
    5936:	0028      	movs	r0, r5
    5938:	4655      	mov	r5, sl
    593a:	9309      	str	r3, [sp, #36]	; 0x24
    593c:	4682      	mov	sl, r0
    593e:	e035      	b.n	59ac <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
    5940:	9906      	ldr	r1, [sp, #24]
    5942:	4311      	orrs	r1, r2
    5944:	9106      	str	r1, [sp, #24]
    5946:	e7d8      	b.n	58fa <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    5948:	0292      	lsls	r2, r2, #10
    594a:	464f      	mov	r7, r9
    594c:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    594e:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
    5950:	7919      	ldrb	r1, [r3, #4]
    5952:	468b      	mov	fp, r1
    5954:	2103      	movs	r1, #3
    5956:	465f      	mov	r7, fp
    5958:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    595a:	430a      	orrs	r2, r1
    595c:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
    595e:	795a      	ldrb	r2, [r3, #5]
    5960:	0152      	lsls	r2, r2, #5
    5962:	2160      	movs	r1, #96	; 0x60
    5964:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    5966:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
    5968:	7999      	ldrb	r1, [r3, #6]
    596a:	0209      	lsls	r1, r1, #8
    596c:	26c0      	movs	r6, #192	; 0xc0
    596e:	00b6      	lsls	r6, r6, #2
    5970:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    5972:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    5974:	79da      	ldrb	r2, [r3, #7]
    5976:	0312      	lsls	r2, r2, #12
    5978:	21e0      	movs	r1, #224	; 0xe0
    597a:	01c9      	lsls	r1, r1, #7
    597c:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    597e:	4316      	orrs	r6, r2
    5980:	4334      	orrs	r4, r6
    5982:	9a03      	ldr	r2, [sp, #12]
    5984:	4314      	orrs	r4, r2
    5986:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
    5988:	4662      	mov	r2, ip
    598a:	9907      	ldr	r1, [sp, #28]
    598c:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    598e:	2a04      	cmp	r2, #4
    5990:	d02a      	beq.n	59e8 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
    5992:	7c9a      	ldrb	r2, [r3, #18]
    5994:	9905      	ldr	r1, [sp, #20]
    5996:	4291      	cmp	r1, r2
    5998:	d800      	bhi.n	599c <tcc_init+0x198>
    599a:	e131      	b.n	5c00 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    599c:	7a59      	ldrb	r1, [r3, #9]
    599e:	350a      	adds	r5, #10
    59a0:	2304      	movs	r3, #4
    59a2:	469b      	mov	fp, r3
    59a4:	44dc      	add	ip, fp
    59a6:	290f      	cmp	r1, #15
    59a8:	d900      	bls.n	59ac <tcc_init+0x1a8>
    59aa:	e129      	b.n	5c00 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    59ac:	0609      	lsls	r1, r1, #24
    59ae:	23f0      	movs	r3, #240	; 0xf0
    59b0:	051b      	lsls	r3, r3, #20
    59b2:	4019      	ands	r1, r3
    59b4:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    59b6:	782e      	ldrb	r6, [r5, #0]
    59b8:	0436      	lsls	r6, r6, #16
    59ba:	20ff      	movs	r0, #255	; 0xff
    59bc:	0400      	lsls	r0, r0, #16
    59be:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    59c0:	7868      	ldrb	r0, [r5, #1]
    59c2:	2480      	movs	r4, #128	; 0x80
    59c4:	2800      	cmp	r0, #0
    59c6:	d100      	bne.n	59ca <tcc_init+0x1c6>
    59c8:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    59ca:	7898      	ldrb	r0, [r3, #2]
    59cc:	2708      	movs	r7, #8
    59ce:	9703      	str	r7, [sp, #12]
    59d0:	2800      	cmp	r0, #0
    59d2:	d101      	bne.n	59d8 <tcc_init+0x1d4>
    59d4:	9804      	ldr	r0, [sp, #16]
    59d6:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    59d8:	78d8      	ldrb	r0, [r3, #3]
    59da:	4683      	mov	fp, r0
    59dc:	2010      	movs	r0, #16
    59de:	465f      	mov	r7, fp
    59e0:	2f00      	cmp	r7, #0
    59e2:	d1b1      	bne.n	5948 <tcc_init+0x144>
    59e4:	9804      	ldr	r0, [sp, #16]
    59e6:	e7af      	b.n	5948 <tcc_init+0x144>
    59e8:	4644      	mov	r4, r8
    59ea:	4655      	mov	r5, sl
    59ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
    59ee:	4a52      	ldr	r2, [pc, #328]	; (5b38 <tcc_init+0x334>)
    59f0:	5cd2      	ldrb	r2, [r2, r3]
    59f2:	4691      	mov	r9, r2
    59f4:	4651      	mov	r1, sl
    59f6:	3150      	adds	r1, #80	; 0x50
    59f8:	4650      	mov	r0, sl
    59fa:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
    59fc:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    59fe:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    5a00:	2601      	movs	r6, #1
    5a02:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    5a04:	2602      	movs	r6, #2
    5a06:	36ff      	adds	r6, #255	; 0xff
    5a08:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    5a0a:	2680      	movs	r6, #128	; 0x80
    5a0c:	0276      	lsls	r6, r6, #9
    5a0e:	46b0      	mov	r8, r6
    5a10:	46a4      	mov	ip, r4
    5a12:	001c      	movs	r4, r3
    5a14:	464b      	mov	r3, r9
    5a16:	e00f      	b.n	5a38 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
    5a18:	7806      	ldrb	r6, [r0, #0]
    5a1a:	2e00      	cmp	r6, #0
    5a1c:	d007      	beq.n	5a2e <tcc_init+0x22a>
			if (i >= ow_num) {
    5a1e:	4293      	cmp	r3, r2
    5a20:	d800      	bhi.n	5a24 <tcc_init+0x220>
    5a22:	e0e7      	b.n	5bf4 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    5a24:	2e02      	cmp	r6, #2
    5a26:	d014      	beq.n	5a52 <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    5a28:	4656      	mov	r6, sl
    5a2a:	4096      	lsls	r6, r2
    5a2c:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    5a2e:	3201      	adds	r2, #1
    5a30:	3101      	adds	r1, #1
    5a32:	3002      	adds	r0, #2
    5a34:	2a08      	cmp	r2, #8
    5a36:	d010      	beq.n	5a5a <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
    5a38:	780e      	ldrb	r6, [r1, #0]
    5a3a:	2e00      	cmp	r6, #0
    5a3c:	d0ec      	beq.n	5a18 <tcc_init+0x214>
			if (i >= ow_num) {
    5a3e:	4293      	cmp	r3, r2
    5a40:	d800      	bhi.n	5a44 <tcc_init+0x240>
    5a42:	e0d5      	b.n	5bf0 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    5a44:	4646      	mov	r6, r8
    5a46:	4096      	lsls	r6, r2
    5a48:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
    5a4a:	7806      	ldrb	r6, [r0, #0]
    5a4c:	2e00      	cmp	r6, #0
    5a4e:	d1e9      	bne.n	5a24 <tcc_init+0x220>
    5a50:	e7ed      	b.n	5a2e <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    5a52:	465e      	mov	r6, fp
    5a54:	4096      	lsls	r6, r2
    5a56:	4337      	orrs	r7, r6
    5a58:	e7e9      	b.n	5a2e <tcc_init+0x22a>
    5a5a:	4699      	mov	r9, r3
    5a5c:	0023      	movs	r3, r4
    5a5e:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    5a60:	7e6a      	ldrb	r2, [r5, #25]
    5a62:	0112      	lsls	r2, r2, #4
    5a64:	2130      	movs	r1, #48	; 0x30
    5a66:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    5a68:	7e28      	ldrb	r0, [r5, #24]
    5a6a:	2207      	movs	r2, #7
    5a6c:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    5a6e:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    5a70:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    5a72:	2080      	movs	r0, #128	; 0x80
    5a74:	0240      	lsls	r0, r0, #9
    5a76:	000e      	movs	r6, r1
    5a78:	e002      	b.n	5a80 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    5a7a:	3201      	adds	r2, #1
    5a7c:	2a04      	cmp	r2, #4
    5a7e:	d00b      	beq.n	5a98 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
    5a80:	18a9      	adds	r1, r5, r2
    5a82:	7d09      	ldrb	r1, [r1, #20]
    5a84:	2900      	cmp	r1, #0
    5a86:	d0f8      	beq.n	5a7a <tcc_init+0x276>
			if (n >= cc_num) {
    5a88:	9905      	ldr	r1, [sp, #20]
    5a8a:	4291      	cmp	r1, r2
    5a8c:	dc00      	bgt.n	5a90 <tcc_init+0x28c>
    5a8e:	e0b3      	b.n	5bf8 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
    5a90:	0001      	movs	r1, r0
    5a92:	4091      	lsls	r1, r2
    5a94:	430e      	orrs	r6, r1
    5a96:	e7f0      	b.n	5a7a <tcc_init+0x276>
    5a98:	46b2      	mov	sl, r6
    5a9a:	9801      	ldr	r0, [sp, #4]
    5a9c:	0002      	movs	r2, r0
    5a9e:	3204      	adds	r2, #4
    5aa0:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    5aa2:	2100      	movs	r1, #0
    5aa4:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    5aa6:	4282      	cmp	r2, r0
    5aa8:	d1fc      	bne.n	5aa4 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
    5aaa:	2200      	movs	r2, #0
    5aac:	9801      	ldr	r0, [sp, #4]
    5aae:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    5ab0:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    5ab2:	0099      	lsls	r1, r3, #2
    5ab4:	4a22      	ldr	r2, [pc, #136]	; (5b40 <tcc_init+0x33c>)
    5ab6:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
    5ab8:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    5aba:	22a0      	movs	r2, #160	; 0xa0
    5abc:	5ca9      	ldrb	r1, [r5, r2]
    5abe:	3a64      	subs	r2, #100	; 0x64
    5ac0:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
    5ac2:	a90d      	add	r1, sp, #52	; 0x34
    5ac4:	7aaa      	ldrb	r2, [r5, #10]
    5ac6:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    5ac8:	4a1e      	ldr	r2, [pc, #120]	; (5b44 <tcc_init+0x340>)
    5aca:	5cd6      	ldrb	r6, [r2, r3]
    5acc:	0030      	movs	r0, r6
    5ace:	4b1e      	ldr	r3, [pc, #120]	; (5b48 <tcc_init+0x344>)
    5ad0:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    5ad2:	0030      	movs	r0, r6
    5ad4:	4b1d      	ldr	r3, [pc, #116]	; (5b4c <tcc_init+0x348>)
    5ad6:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    5ad8:	464b      	mov	r3, r9
    5ada:	2b00      	cmp	r3, #0
    5adc:	dd3c      	ble.n	5b58 <tcc_init+0x354>
    5ade:	002e      	movs	r6, r5
    5ae0:	3658      	adds	r6, #88	; 0x58
    5ae2:	3398      	adds	r3, #152	; 0x98
    5ae4:	4698      	mov	r8, r3
    5ae6:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5ae8:	2301      	movs	r3, #1
    5aea:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
    5aec:	46ab      	mov	fp, r5
    5aee:	4645      	mov	r5, r8
    5af0:	46a0      	mov	r8, r4
    5af2:	9c08      	ldr	r4, [sp, #32]
    5af4:	e003      	b.n	5afe <tcc_init+0x2fa>
    5af6:	3401      	adds	r4, #1
    5af8:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    5afa:	42ac      	cmp	r4, r5
    5afc:	d02a      	beq.n	5b54 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
    5afe:	7823      	ldrb	r3, [r4, #0]
    5b00:	2b00      	cmp	r3, #0
    5b02:	d0f8      	beq.n	5af6 <tcc_init+0x2f2>
    5b04:	ab0c      	add	r3, sp, #48	; 0x30
    5b06:	464a      	mov	r2, r9
    5b08:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    5b0a:	2300      	movs	r3, #0
    5b0c:	aa0c      	add	r2, sp, #48	; 0x30
    5b0e:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    5b10:	0013      	movs	r3, r2
    5b12:	2220      	movs	r2, #32
    5b14:	18b2      	adds	r2, r6, r2
    5b16:	7812      	ldrb	r2, [r2, #0]
    5b18:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    5b1a:	464a      	mov	r2, r9
    5b1c:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    5b1e:	7830      	ldrb	r0, [r6, #0]
    5b20:	0019      	movs	r1, r3
    5b22:	4b0b      	ldr	r3, [pc, #44]	; (5b50 <tcc_init+0x34c>)
    5b24:	4798      	blx	r3
    5b26:	e7e6      	b.n	5af6 <tcc_init+0x2f2>
    5b28:	00005685 	.word	0x00005685
    5b2c:	40000400 	.word	0x40000400
    5b30:	0000b728 	.word	0x0000b728
    5b34:	0000b73c 	.word	0x0000b73c
    5b38:	0000b748 	.word	0x0000b748
    5b3c:	0000b734 	.word	0x0000b734
    5b40:	20000400 	.word	0x20000400
    5b44:	0000b738 	.word	0x0000b738
    5b48:	0000552d 	.word	0x0000552d
    5b4c:	000054a1 	.word	0x000054a1
    5b50:	00005625 	.word	0x00005625
    5b54:	4644      	mov	r4, r8
    5b56:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    5b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5b5a:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    5b5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5b5e:	0212      	lsls	r2, r2, #8
    5b60:	4313      	orrs	r3, r2
    5b62:	9a02      	ldr	r2, [sp, #8]
    5b64:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    5b66:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    5b68:	2204      	movs	r2, #4
    5b6a:	68a3      	ldr	r3, [r4, #8]
    5b6c:	421a      	tst	r2, r3
    5b6e:	d1fc      	bne.n	5b6a <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
    5b70:	23ff      	movs	r3, #255	; 0xff
    5b72:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    5b74:	2204      	movs	r2, #4
    5b76:	68a3      	ldr	r3, [r4, #8]
    5b78:	421a      	tst	r2, r3
    5b7a:	d1fc      	bne.n	5b76 <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
    5b7c:	466b      	mov	r3, sp
    5b7e:	7e1b      	ldrb	r3, [r3, #24]
    5b80:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    5b82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5b84:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    5b86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5b88:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    5b8a:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    5b8c:	4a1d      	ldr	r2, [pc, #116]	; (5c04 <tcc_init+0x400>)
    5b8e:	68a3      	ldr	r3, [r4, #8]
    5b90:	4213      	tst	r3, r2
    5b92:	d1fc      	bne.n	5b8e <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
    5b94:	4653      	mov	r3, sl
    5b96:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    5b98:	2210      	movs	r2, #16
    5b9a:	68a3      	ldr	r3, [r4, #8]
    5b9c:	421a      	tst	r2, r3
    5b9e:	d1fc      	bne.n	5b9a <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
    5ba0:	682b      	ldr	r3, [r5, #0]
    5ba2:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    5ba4:	4a18      	ldr	r2, [pc, #96]	; (5c08 <tcc_init+0x404>)
    5ba6:	68a3      	ldr	r3, [r4, #8]
    5ba8:	4213      	tst	r3, r2
    5baa:	d1fc      	bne.n	5ba6 <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
    5bac:	686b      	ldr	r3, [r5, #4]
    5bae:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    5bb0:	9805      	ldr	r0, [sp, #20]
    5bb2:	2800      	cmp	r0, #0
    5bb4:	dd22      	ble.n	5bfc <tcc_init+0x3f8>
    5bb6:	351c      	adds	r5, #28
    5bb8:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    5bba:	4e14      	ldr	r6, [pc, #80]	; (5c0c <tcc_init+0x408>)
    5bbc:	0032      	movs	r2, r6
    5bbe:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    5bc0:	68a3      	ldr	r3, [r4, #8]
    5bc2:	421a      	tst	r2, r3
    5bc4:	d1fc      	bne.n	5bc0 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
    5bc6:	cd04      	ldmia	r5!, {r2}
    5bc8:	000b      	movs	r3, r1
    5bca:	3310      	adds	r3, #16
    5bcc:	009b      	lsls	r3, r3, #2
    5bce:	18e3      	adds	r3, r4, r3
    5bd0:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    5bd2:	3101      	adds	r1, #1
    5bd4:	4288      	cmp	r0, r1
    5bd6:	dcf1      	bgt.n	5bbc <tcc_init+0x3b8>
	return STATUS_OK;
    5bd8:	2000      	movs	r0, #0
    5bda:	e62d      	b.n	5838 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
    5bdc:	2017      	movs	r0, #23
    5bde:	e62b      	b.n	5838 <tcc_init+0x34>
    5be0:	2017      	movs	r0, #23
    5be2:	e629      	b.n	5838 <tcc_init+0x34>
    5be4:	2017      	movs	r0, #23
    5be6:	e627      	b.n	5838 <tcc_init+0x34>
    5be8:	2017      	movs	r0, #23
    5bea:	e625      	b.n	5838 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    5bec:	2017      	movs	r0, #23
    5bee:	e623      	b.n	5838 <tcc_init+0x34>
			if (i >= ow_num) {
    5bf0:	2017      	movs	r0, #23
    5bf2:	e621      	b.n	5838 <tcc_init+0x34>
			if (i >= ow_num) {
    5bf4:	2017      	movs	r0, #23
    5bf6:	e61f      	b.n	5838 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    5bf8:	2017      	movs	r0, #23
    5bfa:	e61d      	b.n	5838 <tcc_init+0x34>
	return STATUS_OK;
    5bfc:	2000      	movs	r0, #0
    5bfe:	e61b      	b.n	5838 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    5c00:	2017      	movs	r0, #23
    5c02:	e619      	b.n	5838 <tcc_init+0x34>
    5c04:	00020040 	.word	0x00020040
    5c08:	00040080 	.word	0x00040080
    5c0c:	00080100 	.word	0x00080100

00005c10 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    5c10:	0092      	lsls	r2, r2, #2
    5c12:	1883      	adds	r3, r0, r2
    5c14:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    5c16:	4b03      	ldr	r3, [pc, #12]	; (5c24 <tcc_register_callback+0x14>)
    5c18:	58d3      	ldr	r3, [r2, r3]
    5c1a:	6b42      	ldr	r2, [r0, #52]	; 0x34
    5c1c:	4313      	orrs	r3, r2
    5c1e:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
    5c20:	2000      	movs	r0, #0
    5c22:	4770      	bx	lr
    5c24:	0000b74c 	.word	0x0000b74c

00005c28 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    5c28:	b570      	push	{r4, r5, r6, lr}
    5c2a:	0004      	movs	r4, r0
    5c2c:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    5c2e:	6800      	ldr	r0, [r0, #0]
    5c30:	4b09      	ldr	r3, [pc, #36]	; (5c58 <tcc_enable_callback+0x30>)
    5c32:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    5c34:	4b09      	ldr	r3, [pc, #36]	; (5c5c <tcc_enable_callback+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5c36:	5c1b      	ldrb	r3, [r3, r0]
    5c38:	221f      	movs	r2, #31
    5c3a:	401a      	ands	r2, r3
    5c3c:	2301      	movs	r3, #1
    5c3e:	4093      	lsls	r3, r2
    5c40:	4a07      	ldr	r2, [pc, #28]	; (5c60 <tcc_enable_callback+0x38>)
    5c42:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    5c44:	00ad      	lsls	r5, r5, #2
    5c46:	4b07      	ldr	r3, [pc, #28]	; (5c64 <tcc_enable_callback+0x3c>)
    5c48:	58ea      	ldr	r2, [r5, r3]
    5c4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5c4c:	4313      	orrs	r3, r2
    5c4e:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    5c50:	6823      	ldr	r3, [r4, #0]
    5c52:	629a      	str	r2, [r3, #40]	; 0x28
}
    5c54:	bd70      	pop	{r4, r5, r6, pc}
    5c56:	46c0      	nop			; (mov r8, r8)
    5c58:	00005685 	.word	0x00005685
    5c5c:	0000b77c 	.word	0x0000b77c
    5c60:	e000e100 	.word	0xe000e100
    5c64:	0000b74c 	.word	0x0000b74c

00005c68 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    5c68:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c6a:	46c6      	mov	lr, r8
    5c6c:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    5c6e:	0080      	lsls	r0, r0, #2
    5c70:	4b0e      	ldr	r3, [pc, #56]	; (5cac <_tcc_interrupt_handler+0x44>)
    5c72:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    5c74:	683b      	ldr	r3, [r7, #0]
    5c76:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    5c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5c7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    5c7c:	4013      	ands	r3, r2
    5c7e:	401e      	ands	r6, r3
    5c80:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    5c82:	4b0b      	ldr	r3, [pc, #44]	; (5cb0 <_tcc_interrupt_handler+0x48>)
    5c84:	4698      	mov	r8, r3
    5c86:	e002      	b.n	5c8e <_tcc_interrupt_handler+0x26>
    5c88:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    5c8a:	2c30      	cmp	r4, #48	; 0x30
    5c8c:	d00a      	beq.n	5ca4 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    5c8e:	4643      	mov	r3, r8
    5c90:	58e5      	ldr	r5, [r4, r3]
    5c92:	4235      	tst	r5, r6
    5c94:	d0f8      	beq.n	5c88 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    5c96:	193b      	adds	r3, r7, r4
    5c98:	685b      	ldr	r3, [r3, #4]
    5c9a:	0038      	movs	r0, r7
    5c9c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    5c9e:	683b      	ldr	r3, [r7, #0]
    5ca0:	62dd      	str	r5, [r3, #44]	; 0x2c
    5ca2:	e7f1      	b.n	5c88 <_tcc_interrupt_handler+0x20>
		}
	}
}
    5ca4:	bc04      	pop	{r2}
    5ca6:	4690      	mov	r8, r2
    5ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5caa:	46c0      	nop			; (mov r8, r8)
    5cac:	20000400 	.word	0x20000400
    5cb0:	0000b74c 	.word	0x0000b74c

00005cb4 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    5cb4:	b510      	push	{r4, lr}
    5cb6:	2000      	movs	r0, #0
    5cb8:	4b01      	ldr	r3, [pc, #4]	; (5cc0 <TCC0_Handler+0xc>)
    5cba:	4798      	blx	r3
    5cbc:	bd10      	pop	{r4, pc}
    5cbe:	46c0      	nop			; (mov r8, r8)
    5cc0:	00005c69 	.word	0x00005c69

00005cc4 <TCC1_Handler>:
    5cc4:	b510      	push	{r4, lr}
    5cc6:	2001      	movs	r0, #1
    5cc8:	4b01      	ldr	r3, [pc, #4]	; (5cd0 <TCC1_Handler+0xc>)
    5cca:	4798      	blx	r3
    5ccc:	bd10      	pop	{r4, pc}
    5cce:	46c0      	nop			; (mov r8, r8)
    5cd0:	00005c69 	.word	0x00005c69

00005cd4 <TCC2_Handler>:
    5cd4:	b510      	push	{r4, lr}
    5cd6:	2002      	movs	r0, #2
    5cd8:	4b01      	ldr	r3, [pc, #4]	; (5ce0 <TCC2_Handler+0xc>)
    5cda:	4798      	blx	r3
    5cdc:	bd10      	pop	{r4, pc}
    5cde:	46c0      	nop			; (mov r8, r8)
    5ce0:	00005c69 	.word	0x00005c69

00005ce4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    5ce4:	e7fe      	b.n	5ce4 <Dummy_Handler>
	...

00005ce8 <Reset_Handler>:
{
    5ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    5cea:	4a2a      	ldr	r2, [pc, #168]	; (5d94 <Reset_Handler+0xac>)
    5cec:	4b2a      	ldr	r3, [pc, #168]	; (5d98 <Reset_Handler+0xb0>)
    5cee:	429a      	cmp	r2, r3
    5cf0:	d011      	beq.n	5d16 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    5cf2:	001a      	movs	r2, r3
    5cf4:	4b29      	ldr	r3, [pc, #164]	; (5d9c <Reset_Handler+0xb4>)
    5cf6:	429a      	cmp	r2, r3
    5cf8:	d20d      	bcs.n	5d16 <Reset_Handler+0x2e>
    5cfa:	4a29      	ldr	r2, [pc, #164]	; (5da0 <Reset_Handler+0xb8>)
    5cfc:	3303      	adds	r3, #3
    5cfe:	1a9b      	subs	r3, r3, r2
    5d00:	089b      	lsrs	r3, r3, #2
    5d02:	3301      	adds	r3, #1
    5d04:	009b      	lsls	r3, r3, #2
    5d06:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    5d08:	4823      	ldr	r0, [pc, #140]	; (5d98 <Reset_Handler+0xb0>)
    5d0a:	4922      	ldr	r1, [pc, #136]	; (5d94 <Reset_Handler+0xac>)
    5d0c:	588c      	ldr	r4, [r1, r2]
    5d0e:	5084      	str	r4, [r0, r2]
    5d10:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    5d12:	429a      	cmp	r2, r3
    5d14:	d1fa      	bne.n	5d0c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    5d16:	4a23      	ldr	r2, [pc, #140]	; (5da4 <Reset_Handler+0xbc>)
    5d18:	4b23      	ldr	r3, [pc, #140]	; (5da8 <Reset_Handler+0xc0>)
    5d1a:	429a      	cmp	r2, r3
    5d1c:	d20a      	bcs.n	5d34 <Reset_Handler+0x4c>
    5d1e:	43d3      	mvns	r3, r2
    5d20:	4921      	ldr	r1, [pc, #132]	; (5da8 <Reset_Handler+0xc0>)
    5d22:	185b      	adds	r3, r3, r1
    5d24:	2103      	movs	r1, #3
    5d26:	438b      	bics	r3, r1
    5d28:	3304      	adds	r3, #4
    5d2a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    5d2c:	2100      	movs	r1, #0
    5d2e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    5d30:	4293      	cmp	r3, r2
    5d32:	d1fc      	bne.n	5d2e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    5d34:	4a1d      	ldr	r2, [pc, #116]	; (5dac <Reset_Handler+0xc4>)
    5d36:	21ff      	movs	r1, #255	; 0xff
    5d38:	4b1d      	ldr	r3, [pc, #116]	; (5db0 <Reset_Handler+0xc8>)
    5d3a:	438b      	bics	r3, r1
    5d3c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    5d3e:	39fd      	subs	r1, #253	; 0xfd
    5d40:	2390      	movs	r3, #144	; 0x90
    5d42:	005b      	lsls	r3, r3, #1
    5d44:	4a1b      	ldr	r2, [pc, #108]	; (5db4 <Reset_Handler+0xcc>)
    5d46:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    5d48:	4a1b      	ldr	r2, [pc, #108]	; (5db8 <Reset_Handler+0xd0>)
    5d4a:	78d3      	ldrb	r3, [r2, #3]
    5d4c:	2503      	movs	r5, #3
    5d4e:	43ab      	bics	r3, r5
    5d50:	2402      	movs	r4, #2
    5d52:	4323      	orrs	r3, r4
    5d54:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    5d56:	78d3      	ldrb	r3, [r2, #3]
    5d58:	270c      	movs	r7, #12
    5d5a:	43bb      	bics	r3, r7
    5d5c:	2608      	movs	r6, #8
    5d5e:	4333      	orrs	r3, r6
    5d60:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    5d62:	4b16      	ldr	r3, [pc, #88]	; (5dbc <Reset_Handler+0xd4>)
    5d64:	7b98      	ldrb	r0, [r3, #14]
    5d66:	2230      	movs	r2, #48	; 0x30
    5d68:	4390      	bics	r0, r2
    5d6a:	2220      	movs	r2, #32
    5d6c:	4310      	orrs	r0, r2
    5d6e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    5d70:	7b99      	ldrb	r1, [r3, #14]
    5d72:	43b9      	bics	r1, r7
    5d74:	4331      	orrs	r1, r6
    5d76:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    5d78:	7b9a      	ldrb	r2, [r3, #14]
    5d7a:	43aa      	bics	r2, r5
    5d7c:	4322      	orrs	r2, r4
    5d7e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    5d80:	4a0f      	ldr	r2, [pc, #60]	; (5dc0 <Reset_Handler+0xd8>)
    5d82:	6853      	ldr	r3, [r2, #4]
    5d84:	2180      	movs	r1, #128	; 0x80
    5d86:	430b      	orrs	r3, r1
    5d88:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    5d8a:	4b0e      	ldr	r3, [pc, #56]	; (5dc4 <Reset_Handler+0xdc>)
    5d8c:	4798      	blx	r3
        main();
    5d8e:	4b0e      	ldr	r3, [pc, #56]	; (5dc8 <Reset_Handler+0xe0>)
    5d90:	4798      	blx	r3
    5d92:	e7fe      	b.n	5d92 <Reset_Handler+0xaa>
    5d94:	0000bc50 	.word	0x0000bc50
    5d98:	20000000 	.word	0x20000000
    5d9c:	20000070 	.word	0x20000070
    5da0:	20000004 	.word	0x20000004
    5da4:	20000070 	.word	0x20000070
    5da8:	200004d0 	.word	0x200004d0
    5dac:	e000ed00 	.word	0xe000ed00
    5db0:	00000000 	.word	0x00000000
    5db4:	41007000 	.word	0x41007000
    5db8:	41005000 	.word	0x41005000
    5dbc:	41004800 	.word	0x41004800
    5dc0:	41004000 	.word	0x41004000
    5dc4:	00009345 	.word	0x00009345
    5dc8:	000063c1 	.word	0x000063c1

00005dcc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    5dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    5dce:	46c6      	mov	lr, r8
    5dd0:	b500      	push	{lr}
    5dd2:	000c      	movs	r4, r1
    5dd4:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    5dd6:	2800      	cmp	r0, #0
    5dd8:	d10f      	bne.n	5dfa <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    5dda:	2a00      	cmp	r2, #0
    5ddc:	dd11      	ble.n	5e02 <_read+0x36>
    5dde:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    5de0:	4e09      	ldr	r6, [pc, #36]	; (5e08 <_read+0x3c>)
    5de2:	4d0a      	ldr	r5, [pc, #40]	; (5e0c <_read+0x40>)
    5de4:	6830      	ldr	r0, [r6, #0]
    5de6:	0021      	movs	r1, r4
    5de8:	682b      	ldr	r3, [r5, #0]
    5dea:	4798      	blx	r3
		ptr++;
    5dec:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    5dee:	42bc      	cmp	r4, r7
    5df0:	d1f8      	bne.n	5de4 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    5df2:	4640      	mov	r0, r8
    5df4:	bc04      	pop	{r2}
    5df6:	4690      	mov	r8, r2
    5df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    5dfa:	2301      	movs	r3, #1
    5dfc:	425b      	negs	r3, r3
    5dfe:	4698      	mov	r8, r3
    5e00:	e7f7      	b.n	5df2 <_read+0x26>
	for (; len > 0; --len) {
    5e02:	4680      	mov	r8, r0
    5e04:	e7f5      	b.n	5df2 <_read+0x26>
    5e06:	46c0      	nop			; (mov r8, r8)
    5e08:	20000414 	.word	0x20000414
    5e0c:	2000040c 	.word	0x2000040c

00005e10 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    5e10:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e12:	46c6      	mov	lr, r8
    5e14:	b500      	push	{lr}
    5e16:	000e      	movs	r6, r1
    5e18:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    5e1a:	3801      	subs	r0, #1
    5e1c:	2802      	cmp	r0, #2
    5e1e:	d810      	bhi.n	5e42 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    5e20:	2a00      	cmp	r2, #0
    5e22:	d011      	beq.n	5e48 <_write+0x38>
    5e24:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    5e26:	4b0c      	ldr	r3, [pc, #48]	; (5e58 <_write+0x48>)
    5e28:	4698      	mov	r8, r3
    5e2a:	4f0c      	ldr	r7, [pc, #48]	; (5e5c <_write+0x4c>)
    5e2c:	4643      	mov	r3, r8
    5e2e:	6818      	ldr	r0, [r3, #0]
    5e30:	5d31      	ldrb	r1, [r6, r4]
    5e32:	683b      	ldr	r3, [r7, #0]
    5e34:	4798      	blx	r3
    5e36:	2800      	cmp	r0, #0
    5e38:	db08      	blt.n	5e4c <_write+0x3c>
			return -1;
		}
		++nChars;
    5e3a:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    5e3c:	42a5      	cmp	r5, r4
    5e3e:	d1f5      	bne.n	5e2c <_write+0x1c>
    5e40:	e006      	b.n	5e50 <_write+0x40>
		return -1;
    5e42:	2401      	movs	r4, #1
    5e44:	4264      	negs	r4, r4
    5e46:	e003      	b.n	5e50 <_write+0x40>
	for (; len != 0; --len) {
    5e48:	0014      	movs	r4, r2
    5e4a:	e001      	b.n	5e50 <_write+0x40>
			return -1;
    5e4c:	2401      	movs	r4, #1
    5e4e:	4264      	negs	r4, r4
	}
	return nChars;
}
    5e50:	0020      	movs	r0, r4
    5e52:	bc04      	pop	{r2}
    5e54:	4690      	mov	r8, r2
    5e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e58:	20000414 	.word	0x20000414
    5e5c:	20000410 	.word	0x20000410

00005e60 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    5e60:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    5e62:	4a06      	ldr	r2, [pc, #24]	; (5e7c <_sbrk+0x1c>)
    5e64:	6812      	ldr	r2, [r2, #0]
    5e66:	2a00      	cmp	r2, #0
    5e68:	d004      	beq.n	5e74 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    5e6a:	4a04      	ldr	r2, [pc, #16]	; (5e7c <_sbrk+0x1c>)
    5e6c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    5e6e:	18c3      	adds	r3, r0, r3
    5e70:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    5e72:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    5e74:	4902      	ldr	r1, [pc, #8]	; (5e80 <_sbrk+0x20>)
    5e76:	4a01      	ldr	r2, [pc, #4]	; (5e7c <_sbrk+0x1c>)
    5e78:	6011      	str	r1, [r2, #0]
    5e7a:	e7f6      	b.n	5e6a <_sbrk+0xa>
    5e7c:	200000e0 	.word	0x200000e0
    5e80:	200024d0 	.word	0x200024d0

00005e84 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    5e84:	2001      	movs	r0, #1
    5e86:	4240      	negs	r0, r0
    5e88:	4770      	bx	lr

00005e8a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    5e8a:	2380      	movs	r3, #128	; 0x80
    5e8c:	019b      	lsls	r3, r3, #6
    5e8e:	604b      	str	r3, [r1, #4]

	return 0;
}
    5e90:	2000      	movs	r0, #0
    5e92:	4770      	bx	lr

00005e94 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    5e94:	2001      	movs	r0, #1
    5e96:	4770      	bx	lr

00005e98 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    5e98:	2000      	movs	r0, #0
    5e9a:	4770      	bx	lr

00005e9c <configure_i2c_master>:

/* used to init I2C software module. */
struct i2c_master_module i2c_master_instance;

void configure_i2c_master(void)
{
    5e9c:	b530      	push	{r4, r5, lr}
    5e9e:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    5ea0:	aa01      	add	r2, sp, #4
    5ea2:	2364      	movs	r3, #100	; 0x64
    5ea4:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    5ea6:	4b20      	ldr	r3, [pc, #128]	; (5f28 <configure_i2c_master+0x8c>)
    5ea8:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    5eaa:	2300      	movs	r3, #0
    5eac:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    5eae:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    5eb0:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    5eb2:	2180      	movs	r1, #128	; 0x80
    5eb4:	0389      	lsls	r1, r1, #14
    5eb6:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    5eb8:	2101      	movs	r1, #1
    5eba:	4249      	negs	r1, r1
    5ebc:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    5ebe:	61d3      	str	r3, [r2, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    5ec0:	6213      	str	r3, [r2, #32]
	config->scl_low_timeout  = false;
    5ec2:	3125      	adds	r1, #37	; 0x25
    5ec4:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    5ec6:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    5ec8:	3108      	adds	r1, #8
    5eca:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    5ecc:	3101      	adds	r1, #1
    5ece:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    5ed0:	3101      	adds	r1, #1
    5ed2:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    5ed4:	33d7      	adds	r3, #215	; 0xd7
    5ed6:	8613      	strh	r3, [r2, #48]	; 0x30
    /* initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);

    /* change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 10000;
    5ed8:	4b14      	ldr	r3, [pc, #80]	; (5f2c <configure_i2c_master+0x90>)
    5eda:	82d3      	strh	r3, [r2, #22]

    /* initialize and enable device with config. */
    i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master);
    5edc:	4c14      	ldr	r4, [pc, #80]	; (5f30 <configure_i2c_master+0x94>)
    5ede:	4915      	ldr	r1, [pc, #84]	; (5f34 <configure_i2c_master+0x98>)
    5ee0:	0020      	movs	r0, r4
    5ee2:	4b15      	ldr	r3, [pc, #84]	; (5f38 <configure_i2c_master+0x9c>)
    5ee4:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5ee6:	6824      	ldr	r4, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    5ee8:	2207      	movs	r2, #7
    5eea:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    5eec:	421a      	tst	r2, r3
    5eee:	d1fc      	bne.n	5eea <configure_i2c_master+0x4e>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    5ef0:	6823      	ldr	r3, [r4, #0]
    5ef2:	2202      	movs	r2, #2
    5ef4:	4313      	orrs	r3, r2
    5ef6:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    5ef8:	4d0d      	ldr	r5, [pc, #52]	; (5f30 <configure_i2c_master+0x94>)
    5efa:	6828      	ldr	r0, [r5, #0]
    5efc:	4b0f      	ldr	r3, [pc, #60]	; (5f3c <configure_i2c_master+0xa0>)
    5efe:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5f00:	231f      	movs	r3, #31
    5f02:	4018      	ands	r0, r3
    5f04:	3b1e      	subs	r3, #30
    5f06:	4083      	lsls	r3, r0
    5f08:	4a0d      	ldr	r2, [pc, #52]	; (5f40 <configure_i2c_master+0xa4>)
    5f0a:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    5f0c:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    5f0e:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    5f10:	2110      	movs	r1, #16
    5f12:	8b62      	ldrh	r2, [r4, #26]
    5f14:	420a      	tst	r2, r1
    5f16:	d104      	bne.n	5f22 <configure_i2c_master+0x86>
		timeout_counter++;
    5f18:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    5f1a:	4283      	cmp	r3, r0
    5f1c:	d3f9      	bcc.n	5f12 <configure_i2c_master+0x76>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    5f1e:	2310      	movs	r3, #16
    5f20:	8363      	strh	r3, [r4, #26]
    i2c_master_enable(&i2c_master_instance);
}
    5f22:	b00f      	add	sp, #60	; 0x3c
    5f24:	bd30      	pop	{r4, r5, pc}
    5f26:	46c0      	nop			; (mov r8, r8)
    5f28:	00000d48 	.word	0x00000d48
    5f2c:	00002710 	.word	0x00002710
    5f30:	2000044c 	.word	0x2000044c
    5f34:	42001000 	.word	0x42001000
    5f38:	00000121 	.word	0x00000121
    5f3c:	00004431 	.word	0x00004431
    5f40:	e000e100 	.word	0xe000e100

00005f44 <shtc1_demo_init>:




void shtc1_demo_init()
{
    5f44:	b510      	push	{r4, lr}
    //delay_init();
    //configure_port_pins();
    //configure_usart();
    configure_i2c_master();
    5f46:	4b01      	ldr	r3, [pc, #4]	; (5f4c <shtc1_demo_init+0x8>)
    5f48:	4798      	blx	r3
}
    5f4a:	bd10      	pop	{r4, pc}
    5f4c:	00005e9d 	.word	0x00005e9d

00005f50 <stream_writer_init>:
#include <string.h>
#include <asf.h>

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
    5f50:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
    5f52:	6101      	str	r1, [r0, #16]
	writer->written = 0;
    5f54:	2200      	movs	r2, #0
    5f56:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
    5f58:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
    5f5a:	9b00      	ldr	r3, [sp, #0]
    5f5c:	60c3      	str	r3, [r0, #12]
}
    5f5e:	4770      	bx	lr

00005f60 <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
    5f60:	b510      	push	{r4, lr}
    5f62:	0004      	movs	r4, r0
	if(writer->written > 0) {
    5f64:	6842      	ldr	r2, [r0, #4]
    5f66:	2a00      	cmp	r2, #0
    5f68:	d100      	bne.n	5f6c <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
    5f6a:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    5f6c:	6901      	ldr	r1, [r0, #16]
    5f6e:	68c0      	ldr	r0, [r0, #12]
    5f70:	68a3      	ldr	r3, [r4, #8]
    5f72:	4798      	blx	r3
		writer->written = 0;
    5f74:	2300      	movs	r3, #0
    5f76:	6063      	str	r3, [r4, #4]
}
    5f78:	e7f7      	b.n	5f6a <stream_writer_send_remain+0xa>
	...

00005f7c <stream_writer_send_8>:
{
    5f7c:	b570      	push	{r4, r5, r6, lr}
    5f7e:	0004      	movs	r4, r0
    5f80:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
    5f82:	6803      	ldr	r3, [r0, #0]
    5f84:	6842      	ldr	r2, [r0, #4]
    5f86:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
    5f88:	2b00      	cmp	r3, #0
    5f8a:	dd05      	ble.n	5f98 <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
    5f8c:	6922      	ldr	r2, [r4, #16]
    5f8e:	6863      	ldr	r3, [r4, #4]
    5f90:	1c59      	adds	r1, r3, #1
    5f92:	6061      	str	r1, [r4, #4]
    5f94:	54d5      	strb	r5, [r2, r3]
}
    5f96:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
    5f98:	4b01      	ldr	r3, [pc, #4]	; (5fa0 <stream_writer_send_8+0x24>)
    5f9a:	4798      	blx	r3
    5f9c:	e7f6      	b.n	5f8c <stream_writer_send_8+0x10>
    5f9e:	46c0      	nop			; (mov r8, r8)
    5fa0:	00005f61 	.word	0x00005f61

00005fa4 <stream_writer_send_16BE>:
{
    5fa4:	b570      	push	{r4, r5, r6, lr}
    5fa6:	0006      	movs	r6, r0
    5fa8:	000c      	movs	r4, r1
	stream_writer_send_8(writer, (value >> 8) & 0xFF);
    5faa:	1209      	asrs	r1, r1, #8
    5fac:	4d02      	ldr	r5, [pc, #8]	; (5fb8 <stream_writer_send_16BE+0x14>)
    5fae:	47a8      	blx	r5
	stream_writer_send_8(writer, value & 0xFF);
    5fb0:	b261      	sxtb	r1, r4
    5fb2:	0030      	movs	r0, r6
    5fb4:	47a8      	blx	r5
}
    5fb6:	bd70      	pop	{r4, r5, r6, pc}
    5fb8:	00005f7d 	.word	0x00005f7d

00005fbc <stream_writer_send_buffer>:
{
    5fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5fbe:	0006      	movs	r6, r0
    5fc0:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
    5fc2:	2a00      	cmp	r2, #0
    5fc4:	d008      	beq.n	5fd8 <stream_writer_send_buffer+0x1c>
    5fc6:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
    5fc8:	4f04      	ldr	r7, [pc, #16]	; (5fdc <stream_writer_send_buffer+0x20>)
    5fca:	2100      	movs	r1, #0
    5fcc:	5661      	ldrsb	r1, [r4, r1]
    5fce:	0030      	movs	r0, r6
    5fd0:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
    5fd2:	3401      	adds	r4, #1
    5fd4:	42a5      	cmp	r5, r4
    5fd6:	d1f8      	bne.n	5fca <stream_writer_send_buffer+0xe>
}
    5fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5fda:	46c0      	nop			; (mov r8, r8)
    5fdc:	00005f7d 	.word	0x00005f7d

00005fe0 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
    5fe0:	4a02      	ldr	r2, [pc, #8]	; (5fec <sw_timer_tcc_callback+0xc>)
    5fe2:	6813      	ldr	r3, [r2, #0]
    5fe4:	3301      	adds	r3, #1
    5fe6:	6013      	str	r3, [r2, #0]
}
    5fe8:	4770      	bx	lr
    5fea:	46c0      	nop			; (mov r8, r8)
    5fec:	200000e4 	.word	0x200000e4

00005ff0 <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
    5ff0:	2364      	movs	r3, #100	; 0x64
    5ff2:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
    5ff4:	2300      	movs	r3, #0
    5ff6:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
    5ff8:	7043      	strb	r3, [r0, #1]
}
    5ffa:	4770      	bx	lr

00005ffc <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    5ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ffe:	46c6      	mov	lr, r8
    6000:	b500      	push	{lr}
    6002:	b0ac      	sub	sp, #176	; 0xb0
    6004:	000d      	movs	r5, r1
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    6006:	466e      	mov	r6, sp
    6008:	4b1d      	ldr	r3, [pc, #116]	; (6080 <sw_timer_init+0x84>)
    600a:	466a      	mov	r2, sp
    600c:	cb92      	ldmia	r3!, {r1, r4, r7}
    600e:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    6010:	886b      	ldrh	r3, [r5, #2]
    6012:	6543      	str	r3, [r0, #84]	; 0x54

	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    6014:	3014      	adds	r0, #20
    6016:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    6018:	782b      	ldrb	r3, [r5, #0]
    601a:	009b      	lsls	r3, r3, #2
    601c:	5999      	ldr	r1, [r3, r6]
    601e:	0017      	movs	r7, r2
    6020:	0010      	movs	r0, r2
    6022:	4b18      	ldr	r3, [pc, #96]	; (6084 <sw_timer_init+0x88>)
    6024:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    6026:	2000      	movs	r0, #0
    6028:	4b17      	ldr	r3, [pc, #92]	; (6088 <sw_timer_init+0x8c>)
    602a:	4798      	blx	r3
    602c:	4b17      	ldr	r3, [pc, #92]	; (608c <sw_timer_init+0x90>)
    602e:	7a1b      	ldrb	r3, [r3, #8]
    6030:	b2db      	uxtb	r3, r3
    6032:	40d8      	lsrs	r0, r3
    6034:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    6036:	8869      	ldrh	r1, [r5, #2]
    6038:	20fa      	movs	r0, #250	; 0xfa
    603a:	0200      	lsls	r0, r0, #8
    603c:	4b14      	ldr	r3, [pc, #80]	; (6090 <sw_timer_init+0x94>)
    603e:	4798      	blx	r3
    6040:	0001      	movs	r1, r0
    6042:	4640      	mov	r0, r8
    6044:	4b13      	ldr	r3, [pc, #76]	; (6094 <sw_timer_init+0x98>)
    6046:	4798      	blx	r3
    6048:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    604a:	2305      	movs	r3, #5
    604c:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    604e:	782b      	ldrb	r3, [r5, #0]
    6050:	009b      	lsls	r3, r3, #2
    6052:	5999      	ldr	r1, [r3, r6]
    6054:	003a      	movs	r2, r7
    6056:	0020      	movs	r0, r4
    6058:	4b0f      	ldr	r3, [pc, #60]	; (6098 <sw_timer_init+0x9c>)
    605a:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    605c:	786a      	ldrb	r2, [r5, #1]
    605e:	3208      	adds	r2, #8
    6060:	b2d2      	uxtb	r2, r2
    6062:	490e      	ldr	r1, [pc, #56]	; (609c <sw_timer_init+0xa0>)
    6064:	0020      	movs	r0, r4
    6066:	4b0e      	ldr	r3, [pc, #56]	; (60a0 <sw_timer_init+0xa4>)
    6068:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    606a:	7869      	ldrb	r1, [r5, #1]
    606c:	3108      	adds	r1, #8
    606e:	b2c9      	uxtb	r1, r1
    6070:	0020      	movs	r0, r4
    6072:	4b0c      	ldr	r3, [pc, #48]	; (60a4 <sw_timer_init+0xa8>)
    6074:	4798      	blx	r3
}
    6076:	b02c      	add	sp, #176	; 0xb0
    6078:	bc04      	pop	{r2}
    607a:	4690      	mov	r8, r2
    607c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    607e:	46c0      	nop			; (mov r8, r8)
    6080:	0000b780 	.word	0x0000b780
    6084:	000056b9 	.word	0x000056b9
    6088:	00005415 	.word	0x00005415
    608c:	40000400 	.word	0x40000400
    6090:	0000747d 	.word	0x0000747d
    6094:	00007369 	.word	0x00007369
    6098:	00005805 	.word	0x00005805
    609c:	00005fe1 	.word	0x00005fe1
    60a0:	00005c11 	.word	0x00005c11
    60a4:	00005c29 	.word	0x00005c29

000060a8 <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    60a8:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    60aa:	2102      	movs	r1, #2
    60ac:	6893      	ldr	r3, [r2, #8]
    60ae:	4219      	tst	r1, r3
    60b0:	d1fc      	bne.n	60ac <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    60b2:	6813      	ldr	r3, [r2, #0]
    60b4:	2102      	movs	r1, #2
    60b6:	430b      	orrs	r3, r1
    60b8:	6013      	str	r3, [r2, #0]
	Assert(module_inst);

	tcc_module = &module_inst->tcc_inst;

	tcc_enable(tcc_module);
}
    60ba:	4770      	bx	lr

000060bc <sw_timer_register_callback>:
	tcc_disable(tcc_module);
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
	sw_timer_callback_t callback, void *context, uint32_t period)
{
    60bc:	b570      	push	{r4, r5, r6, lr}
    60be:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
    60c0:	7805      	ldrb	r5, [r0, #0]
    60c2:	07e8      	lsls	r0, r5, #31
    60c4:	d502      	bpl.n	60cc <sw_timer_register_callback+0x10>
			handler->used = 1;
			return index;
		}
	}

	return -1;
    60c6:	2001      	movs	r0, #1
    60c8:	4240      	negs	r0, r0
}
    60ca:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
    60cc:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
    60ce:	0029      	movs	r1, r5
    60d0:	2002      	movs	r0, #2
    60d2:	4381      	bics	r1, r0
    60d4:	7021      	strb	r1, [r4, #0]
			handler->context = context;
    60d6:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
    60d8:	6d61      	ldr	r1, [r4, #84]	; 0x54
    60da:	0018      	movs	r0, r3
    60dc:	4b04      	ldr	r3, [pc, #16]	; (60f0 <sw_timer_register_callback+0x34>)
    60de:	4798      	blx	r3
    60e0:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
    60e2:	7823      	ldrb	r3, [r4, #0]
    60e4:	2201      	movs	r2, #1
    60e6:	4313      	orrs	r3, r2
    60e8:	7023      	strb	r3, [r4, #0]
			return index;
    60ea:	2000      	movs	r0, #0
    60ec:	e7ed      	b.n	60ca <sw_timer_register_callback+0xe>
    60ee:	46c0      	nop			; (mov r8, r8)
    60f0:	00007369 	.word	0x00007369

000060f4 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    60f4:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
    60f6:	008b      	lsls	r3, r1, #2
    60f8:	185d      	adds	r5, r3, r1
    60fa:	00ad      	lsls	r5, r5, #2
    60fc:	5c29      	ldrb	r1, [r5, r0]
    60fe:	2602      	movs	r6, #2
    6100:	4331      	orrs	r1, r6
    6102:	5429      	strb	r1, [r5, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    6104:	1944      	adds	r4, r0, r5
    6106:	6d41      	ldr	r1, [r0, #84]	; 0x54
    6108:	0010      	movs	r0, r2
    610a:	4b03      	ldr	r3, [pc, #12]	; (6118 <sw_timer_enable_callback+0x24>)
    610c:	4798      	blx	r3
    610e:	4b03      	ldr	r3, [pc, #12]	; (611c <sw_timer_enable_callback+0x28>)
    6110:	681b      	ldr	r3, [r3, #0]
    6112:	18c0      	adds	r0, r0, r3
    6114:	6120      	str	r0, [r4, #16]
}
    6116:	bd70      	pop	{r4, r5, r6, pc}
    6118:	00007369 	.word	0x00007369
    611c:	200000e4 	.word	0x200000e4

00006120 <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
    6120:	008b      	lsls	r3, r1, #2
    6122:	1859      	adds	r1, r3, r1
    6124:	0089      	lsls	r1, r1, #2
    6126:	5c0b      	ldrb	r3, [r1, r0]
    6128:	2202      	movs	r2, #2
    612a:	4393      	bics	r3, r2
    612c:	540b      	strb	r3, [r1, r0]
}
    612e:	4770      	bx	lr

00006130 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    6130:	b570      	push	{r4, r5, r6, lr}
    6132:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    6134:	7803      	ldrb	r3, [r0, #0]
    6136:	07db      	lsls	r3, r3, #31
    6138:	d507      	bpl.n	614a <sw_timer_task+0x1a>
    613a:	7803      	ldrb	r3, [r0, #0]
    613c:	079b      	lsls	r3, r3, #30
    613e:	d504      	bpl.n	614a <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    6140:	4b11      	ldr	r3, [pc, #68]	; (6188 <sw_timer_task+0x58>)
    6142:	681b      	ldr	r3, [r3, #0]
    6144:	6902      	ldr	r2, [r0, #16]
    6146:	1ad3      	subs	r3, r2, r3
    6148:	d400      	bmi.n	614c <sw_timer_task+0x1c>
				handler->busy = 0;
			}
		}
	}

}
    614a:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    614c:	7803      	ldrb	r3, [r0, #0]
    614e:	075b      	lsls	r3, r3, #29
    6150:	d4fb      	bmi.n	614a <sw_timer_task+0x1a>
				handler->busy = 1;
    6152:	7803      	ldrb	r3, [r0, #0]
    6154:	2204      	movs	r2, #4
    6156:	4313      	orrs	r3, r2
    6158:	7003      	strb	r3, [r0, #0]
				handler->callback(module_inst, index, handler->context, handler->period);
    615a:	68c3      	ldr	r3, [r0, #12]
    615c:	6882      	ldr	r2, [r0, #8]
    615e:	2100      	movs	r1, #0
    6160:	6845      	ldr	r5, [r0, #4]
    6162:	47a8      	blx	r5
				if (handler->period > 0) {
    6164:	68e3      	ldr	r3, [r4, #12]
    6166:	2b00      	cmp	r3, #0
    6168:	d008      	beq.n	617c <sw_timer_task+0x4c>
					handler->expire_time = sw_timer_tick + handler->period;
    616a:	4a07      	ldr	r2, [pc, #28]	; (6188 <sw_timer_task+0x58>)
    616c:	6812      	ldr	r2, [r2, #0]
    616e:	18d3      	adds	r3, r2, r3
    6170:	6123      	str	r3, [r4, #16]
				handler->busy = 0;
    6172:	7823      	ldrb	r3, [r4, #0]
    6174:	2204      	movs	r2, #4
    6176:	4393      	bics	r3, r2
    6178:	7023      	strb	r3, [r4, #0]
}
    617a:	e7e6      	b.n	614a <sw_timer_task+0x1a>
					handler->callback_enable = 0;
    617c:	7823      	ldrb	r3, [r4, #0]
    617e:	2202      	movs	r2, #2
    6180:	4393      	bics	r3, r2
    6182:	7023      	strb	r3, [r4, #0]
    6184:	e7f5      	b.n	6172 <sw_timer_task+0x42>
    6186:	46c0      	nop			; (mov r8, r8)
    6188:	200000e4 	.word	0x200000e4

0000618c <uart_callback>:
 * \param[in] module USART module structure.
 */
static void uart_callback(const struct usart_module *const module)
{
	/* If input string is bigger than buffer size limit, ignore the excess part. */
	if (uart_buffer_written < MAIN_CHAT_BUFFER_SIZE) {
    618c:	4b03      	ldr	r3, [pc, #12]	; (619c <uart_callback+0x10>)
    618e:	681b      	ldr	r3, [r3, #0]
    6190:	2b3f      	cmp	r3, #63	; 0x3f
    6192:	dc02      	bgt.n	619a <uart_callback+0xe>
		uart_buffer[uart_buffer_written++] = uart_ch_buffer & 0xFF;
    6194:	3301      	adds	r3, #1
    6196:	4a01      	ldr	r2, [pc, #4]	; (619c <uart_callback+0x10>)
    6198:	6013      	str	r3, [r2, #0]
	}
}
    619a:	4770      	bx	lr
    619c:	20000250 	.word	0x20000250

000061a0 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
    61a0:	b510      	push	{r4, lr}
	mqtt_socket_resolve_handler(doamin_name, server_ip);
    61a2:	4b01      	ldr	r3, [pc, #4]	; (61a8 <socket_resolve_handler+0x8>)
    61a4:	4798      	blx	r3
}
    61a6:	bd10      	pop	{r4, pc}
    61a8:	0000685d 	.word	0x0000685d

000061ac <socket_event_handler>:
{
    61ac:	b510      	push	{r4, lr}
	mqtt_socket_event_handler(sock, msg_type, msg_data);
    61ae:	4b01      	ldr	r3, [pc, #4]	; (61b4 <socket_event_handler+0x8>)
    61b0:	4798      	blx	r3
}
    61b2:	bd10      	pop	{r4, pc}
    61b4:	00007255 	.word	0x00007255

000061b8 <wifi_callback>:
{
    61b8:	b510      	push	{r4, lr}
    61ba:	b082      	sub	sp, #8
	switch (msg_type) {
    61bc:	282c      	cmp	r0, #44	; 0x2c
    61be:	d003      	beq.n	61c8 <wifi_callback+0x10>
    61c0:	2832      	cmp	r0, #50	; 0x32
    61c2:	d01c      	beq.n	61fe <wifi_callback+0x46>
}
    61c4:	b002      	add	sp, #8
    61c6:	bd10      	pop	{r4, pc}
		if (msg_wifi_state->u8CurrState == M2M_WIFI_CONNECTED) {
    61c8:	780b      	ldrb	r3, [r1, #0]
    61ca:	2b01      	cmp	r3, #1
    61cc:	d011      	beq.n	61f2 <wifi_callback+0x3a>
		} else if (msg_wifi_state->u8CurrState == M2M_WIFI_DISCONNECTED) {
    61ce:	2b00      	cmp	r3, #0
    61d0:	d1f8      	bne.n	61c4 <wifi_callback+0xc>
			printf("Wi-Fi disconnected\r\n");
    61d2:	4812      	ldr	r0, [pc, #72]	; (621c <wifi_callback+0x64>)
    61d4:	4b12      	ldr	r3, [pc, #72]	; (6220 <wifi_callback+0x68>)
    61d6:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    61d8:	23ff      	movs	r3, #255	; 0xff
    61da:	9300      	str	r3, [sp, #0]
    61dc:	4b11      	ldr	r3, [pc, #68]	; (6224 <wifi_callback+0x6c>)
    61de:	2202      	movs	r2, #2
    61e0:	210e      	movs	r1, #14
    61e2:	4811      	ldr	r0, [pc, #68]	; (6228 <wifi_callback+0x70>)
    61e4:	4c11      	ldr	r4, [pc, #68]	; (622c <wifi_callback+0x74>)
    61e6:	47a0      	blx	r4
			mqtt_disconnect(&mqtt_inst, 1);
    61e8:	2101      	movs	r1, #1
    61ea:	4811      	ldr	r0, [pc, #68]	; (6230 <wifi_callback+0x78>)
    61ec:	4b11      	ldr	r3, [pc, #68]	; (6234 <wifi_callback+0x7c>)
    61ee:	4798      	blx	r3
    61f0:	e7e8      	b.n	61c4 <wifi_callback+0xc>
			printf("Wi-Fi connected\r\n");
    61f2:	4811      	ldr	r0, [pc, #68]	; (6238 <wifi_callback+0x80>)
    61f4:	4b0a      	ldr	r3, [pc, #40]	; (6220 <wifi_callback+0x68>)
    61f6:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    61f8:	4b10      	ldr	r3, [pc, #64]	; (623c <wifi_callback+0x84>)
    61fa:	4798      	blx	r3
    61fc:	e7e2      	b.n	61c4 <wifi_callback+0xc>
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    61fe:	788b      	ldrb	r3, [r1, #2]
    6200:	784a      	ldrb	r2, [r1, #1]
    6202:	7808      	ldrb	r0, [r1, #0]
    6204:	78c9      	ldrb	r1, [r1, #3]
    6206:	9100      	str	r1, [sp, #0]
    6208:	0001      	movs	r1, r0
    620a:	480d      	ldr	r0, [pc, #52]	; (6240 <wifi_callback+0x88>)
    620c:	4c0d      	ldr	r4, [pc, #52]	; (6244 <wifi_callback+0x8c>)
    620e:	47a0      	blx	r4
		mqtt_connect(&mqtt_inst, main_mqtt_broker);
    6210:	490d      	ldr	r1, [pc, #52]	; (6248 <wifi_callback+0x90>)
    6212:	4807      	ldr	r0, [pc, #28]	; (6230 <wifi_callback+0x78>)
    6214:	4b0d      	ldr	r3, [pc, #52]	; (624c <wifi_callback+0x94>)
    6216:	4798      	blx	r3
}
    6218:	e7d4      	b.n	61c4 <wifi_callback+0xc>
    621a:	46c0      	nop			; (mov r8, r8)
    621c:	0000ba44 	.word	0x0000ba44
    6220:	00009655 	.word	0x00009655
    6224:	0000ba58 	.word	0x0000ba58
    6228:	0000ba64 	.word	0x0000ba64
    622c:	00001fc1 	.word	0x00001fc1
    6230:	2000019c 	.word	0x2000019c
    6234:	00006f15 	.word	0x00006f15
    6238:	0000ba30 	.word	0x0000ba30
    623c:	00001fdd 	.word	0x00001fdd
    6240:	0000ba74 	.word	0x0000ba74
    6244:	00009539 	.word	0x00009539
    6248:	0000b94c 	.word	0x0000b94c
    624c:	000068b1 	.word	0x000068b1

00006250 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    6250:	b570      	push	{r4, r5, r6, lr}
    6252:	b082      	sub	sp, #8
    6254:	0005      	movs	r5, r0
    6256:	000e      	movs	r6, r1
	uint16_t temp = 0;
    6258:	2200      	movs	r2, #0
    625a:	466b      	mov	r3, sp
    625c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    625e:	4c06      	ldr	r4, [pc, #24]	; (6278 <usart_serial_getchar+0x28>)
    6260:	466b      	mov	r3, sp
    6262:	1d99      	adds	r1, r3, #6
    6264:	0028      	movs	r0, r5
    6266:	47a0      	blx	r4
    6268:	2800      	cmp	r0, #0
    626a:	d1f9      	bne.n	6260 <usart_serial_getchar+0x10>

	*c = temp;
    626c:	466b      	mov	r3, sp
    626e:	3306      	adds	r3, #6
    6270:	881b      	ldrh	r3, [r3, #0]
    6272:	7033      	strb	r3, [r6, #0]
}
    6274:	b002      	add	sp, #8
    6276:	bd70      	pop	{r4, r5, r6, pc}
    6278:	00004ccd 	.word	0x00004ccd

0000627c <usart_serial_putchar>:
{
    627c:	b570      	push	{r4, r5, r6, lr}
    627e:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    6280:	b28c      	uxth	r4, r1
    6282:	4e03      	ldr	r6, [pc, #12]	; (6290 <usart_serial_putchar+0x14>)
    6284:	0021      	movs	r1, r4
    6286:	0028      	movs	r0, r5
    6288:	47b0      	blx	r6
    628a:	2800      	cmp	r0, #0
    628c:	d1fa      	bne.n	6284 <usart_serial_putchar+0x8>
}
    628e:	bd70      	pop	{r4, r5, r6, pc}
    6290:	00004ca1 	.word	0x00004ca1

00006294 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
    6294:	b5f0      	push	{r4, r5, r6, r7, lr}
    6296:	b087      	sub	sp, #28
    6298:	0005      	movs	r5, r0
    629a:	0014      	movs	r4, r2
	switch (type) {
    629c:	2901      	cmp	r1, #1
    629e:	d04b      	beq.n	6338 <mqtt_callback+0xa4>
    62a0:	dd2d      	ble.n	62fe <mqtt_callback+0x6a>
    62a2:	2905      	cmp	r1, #5
    62a4:	d05d      	beq.n	6362 <mqtt_callback+0xce>
    62a6:	2906      	cmp	r1, #6
    62a8:	d164      	bne.n	6374 <mqtt_callback+0xe0>

		break;

	case MQTT_CALLBACK_RECV_PUBLISH:
		/* You received publish message which you had subscribed. */
		if (data->recv_publish.topic != NULL && data->recv_publish.msg != NULL) {
    62aa:	6810      	ldr	r0, [r2, #0]
    62ac:	2800      	cmp	r0, #0
    62ae:	d061      	beq.n	6374 <mqtt_callback+0xe0>
    62b0:	6893      	ldr	r3, [r2, #8]
    62b2:	2b00      	cmp	r3, #0
    62b4:	d05e      	beq.n	6374 <mqtt_callback+0xe0>
			if (!strncmp(data->recv_publish.topic, MAIN_CHAT_TOPIC, strlen(MAIN_CHAT_TOPIC))) {
    62b6:	220a      	movs	r2, #10
    62b8:	492f      	ldr	r1, [pc, #188]	; (6378 <mqtt_callback+0xe4>)
    62ba:	4b30      	ldr	r3, [pc, #192]	; (637c <mqtt_callback+0xe8>)
    62bc:	4798      	blx	r3
    62be:	1e05      	subs	r5, r0, #0
    62c0:	d158      	bne.n	6374 <mqtt_callback+0xe0>
				/* Print user name and message */
				for (int i = strlen(MAIN_CHAT_TOPIC); i < data->recv_publish.topic_size; i++) {
    62c2:	6863      	ldr	r3, [r4, #4]
    62c4:	2b0a      	cmp	r3, #10
    62c6:	dd08      	ble.n	62da <mqtt_callback+0x46>
    62c8:	260a      	movs	r6, #10
				//for (int i = 0; i < data->recv_publish.topic_size; i++) {
					printf("%c", data->recv_publish.topic[i]);
    62ca:	4f2d      	ldr	r7, [pc, #180]	; (6380 <mqtt_callback+0xec>)
    62cc:	6823      	ldr	r3, [r4, #0]
    62ce:	5d98      	ldrb	r0, [r3, r6]
    62d0:	47b8      	blx	r7
				for (int i = strlen(MAIN_CHAT_TOPIC); i < data->recv_publish.topic_size; i++) {
    62d2:	3601      	adds	r6, #1
    62d4:	6863      	ldr	r3, [r4, #4]
    62d6:	42b3      	cmp	r3, r6
    62d8:	dcf8      	bgt.n	62cc <mqtt_callback+0x38>
				}
				printf(" >> ");
    62da:	482a      	ldr	r0, [pc, #168]	; (6384 <mqtt_callback+0xf0>)
    62dc:	4b2a      	ldr	r3, [pc, #168]	; (6388 <mqtt_callback+0xf4>)
    62de:	4798      	blx	r3
				for (int i = 0; i < data->recv_publish.msg_size; i++) {
    62e0:	68e3      	ldr	r3, [r4, #12]
    62e2:	2b00      	cmp	r3, #0
    62e4:	dd07      	ble.n	62f6 <mqtt_callback+0x62>
					printf("%c", data->recv_publish.msg[i]);
    62e6:	4e26      	ldr	r6, [pc, #152]	; (6380 <mqtt_callback+0xec>)
    62e8:	68a3      	ldr	r3, [r4, #8]
    62ea:	5d58      	ldrb	r0, [r3, r5]
    62ec:	47b0      	blx	r6
				for (int i = 0; i < data->recv_publish.msg_size; i++) {
    62ee:	3501      	adds	r5, #1
    62f0:	68e3      	ldr	r3, [r4, #12]
    62f2:	42ab      	cmp	r3, r5
    62f4:	dcf8      	bgt.n	62e8 <mqtt_callback+0x54>
				}
				printf("\r\n");
    62f6:	4825      	ldr	r0, [pc, #148]	; (638c <mqtt_callback+0xf8>)
    62f8:	4b25      	ldr	r3, [pc, #148]	; (6390 <mqtt_callback+0xfc>)
    62fa:	4798      	blx	r3
    62fc:	e03a      	b.n	6374 <mqtt_callback+0xe0>
	switch (type) {
    62fe:	2900      	cmp	r1, #0
    6300:	d138      	bne.n	6374 <mqtt_callback+0xe0>
		if (data->sock_connected.result >= 0) {
    6302:	6813      	ldr	r3, [r2, #0]
    6304:	2b00      	cmp	r3, #0
    6306:	db0d      	blt.n	6324 <mqtt_callback+0x90>
			mqtt_connect_broker(module_inst, 1, NULL, NULL, mqtt_user, NULL, NULL, 0, 0, 0);
    6308:	2300      	movs	r3, #0
    630a:	9305      	str	r3, [sp, #20]
    630c:	9304      	str	r3, [sp, #16]
    630e:	9303      	str	r3, [sp, #12]
    6310:	9302      	str	r3, [sp, #8]
    6312:	9301      	str	r3, [sp, #4]
    6314:	4b1f      	ldr	r3, [pc, #124]	; (6394 <mqtt_callback+0x100>)
    6316:	9300      	str	r3, [sp, #0]
    6318:	2300      	movs	r3, #0
    631a:	2200      	movs	r2, #0
    631c:	2101      	movs	r1, #1
    631e:	4c1e      	ldr	r4, [pc, #120]	; (6398 <mqtt_callback+0x104>)
    6320:	47a0      	blx	r4
    6322:	e027      	b.n	6374 <mqtt_callback+0xe0>
			printf("Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
    6324:	4c1d      	ldr	r4, [pc, #116]	; (639c <mqtt_callback+0x108>)
    6326:	0021      	movs	r1, r4
    6328:	481d      	ldr	r0, [pc, #116]	; (63a0 <mqtt_callback+0x10c>)
    632a:	4b17      	ldr	r3, [pc, #92]	; (6388 <mqtt_callback+0xf4>)
    632c:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
    632e:	0021      	movs	r1, r4
    6330:	0028      	movs	r0, r5
    6332:	4b1c      	ldr	r3, [pc, #112]	; (63a4 <mqtt_callback+0x110>)
    6334:	4798      	blx	r3
    6336:	e01d      	b.n	6374 <mqtt_callback+0xe0>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
    6338:	7811      	ldrb	r1, [r2, #0]
    633a:	2900      	cmp	r1, #0
    633c:	d10d      	bne.n	635a <mqtt_callback+0xc6>
			mqtt_subscribe(module_inst, MAIN_CHAT_TOPIC "#", 0);
    633e:	2200      	movs	r2, #0
    6340:	4919      	ldr	r1, [pc, #100]	; (63a8 <mqtt_callback+0x114>)
    6342:	4b1a      	ldr	r3, [pc, #104]	; (63ac <mqtt_callback+0x118>)
    6344:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    6346:	491a      	ldr	r1, [pc, #104]	; (63b0 <mqtt_callback+0x11c>)
    6348:	2231      	movs	r2, #49	; 0x31
    634a:	5c8b      	ldrb	r3, [r1, r2]
    634c:	2002      	movs	r0, #2
    634e:	4303      	orrs	r3, r0
    6350:	548b      	strb	r3, [r1, r2]
			printf("Preparation of the chat has been completed.\r\n");
    6352:	4818      	ldr	r0, [pc, #96]	; (63b4 <mqtt_callback+0x120>)
    6354:	4b0e      	ldr	r3, [pc, #56]	; (6390 <mqtt_callback+0xfc>)
    6356:	4798      	blx	r3
    6358:	e00c      	b.n	6374 <mqtt_callback+0xe0>
			printf("MQTT broker decline your access! error code %d\r\n", data->connected.result);
    635a:	4817      	ldr	r0, [pc, #92]	; (63b8 <mqtt_callback+0x124>)
    635c:	4b0a      	ldr	r3, [pc, #40]	; (6388 <mqtt_callback+0xf4>)
    635e:	4798      	blx	r3
    6360:	e008      	b.n	6374 <mqtt_callback+0xe0>

		break;

	case MQTT_CALLBACK_DISCONNECTED:
		/* Stop timer and USART callback. */
		printf("MQTT disconnected\r\n");
    6362:	4816      	ldr	r0, [pc, #88]	; (63bc <mqtt_callback+0x128>)
    6364:	4b0a      	ldr	r3, [pc, #40]	; (6390 <mqtt_callback+0xfc>)
    6366:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
    6368:	4911      	ldr	r1, [pc, #68]	; (63b0 <mqtt_callback+0x11c>)
    636a:	2231      	movs	r2, #49	; 0x31
    636c:	5c8b      	ldrb	r3, [r1, r2]
    636e:	2002      	movs	r0, #2
    6370:	4383      	bics	r3, r0
    6372:	548b      	strb	r3, [r1, r2]
		usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
		break;
	}
}
    6374:	b007      	add	sp, #28
    6376:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6378:	0000ba04 	.word	0x0000ba04
    637c:	0000986f 	.word	0x0000986f
    6380:	0000956d 	.word	0x0000956d
    6384:	0000ba10 	.word	0x0000ba10
    6388:	00009539 	.word	0x00009539
    638c:	0000ba18 	.word	0x0000ba18
    6390:	00009655 	.word	0x00009655
    6394:	20000210 	.word	0x20000210
    6398:	000069c5 	.word	0x000069c5
    639c:	0000b94c 	.word	0x0000b94c
    63a0:	0000b95c 	.word	0x0000b95c
    63a4:	000068b1 	.word	0x000068b1
    63a8:	0000b994 	.word	0x0000b994
    63ac:	00006c75 	.word	0x00006c75
    63b0:	200000e8 	.word	0x200000e8
    63b4:	0000b9a0 	.word	0x0000b9a0
    63b8:	0000b9d0 	.word	0x0000b9d0
    63bc:	0000ba1c 	.word	0x0000ba1c

000063c0 <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
    63c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    63c2:	b0b9      	sub	sp, #228	; 0xe4
	int8_t ret;
	char topic[strlen(MAIN_CHAT_TOPIC) + MAIN_CHAT_USER_NAME_SIZE + 1];
	char topic2[64];
	char msgBuff[32];
	char dt[] = "FU";
	char mqtt_user[]="seyam";
    63c4:	4b84      	ldr	r3, [pc, #528]	; (65d8 <main+0x218>)
    63c6:	681a      	ldr	r2, [r3, #0]
    63c8:	9218      	str	r2, [sp, #96]	; 0x60
    63ca:	889a      	ldrh	r2, [r3, #4]
    63cc:	ab18      	add	r3, sp, #96	; 0x60
    63ce:	809a      	strh	r2, [r3, #4]
	

	/* Initialize the board. */
	system_init();
    63d0:	4b82      	ldr	r3, [pc, #520]	; (65dc <main+0x21c>)
    63d2:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    63d4:	aa03      	add	r2, sp, #12
    63d6:	2380      	movs	r3, #128	; 0x80
    63d8:	05db      	lsls	r3, r3, #23
    63da:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    63dc:	2300      	movs	r3, #0
    63de:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    63e0:	21ff      	movs	r1, #255	; 0xff
    63e2:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    63e4:	2100      	movs	r1, #0
    63e6:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    63e8:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
    63ea:	2096      	movs	r0, #150	; 0x96
    63ec:	0180      	lsls	r0, r0, #6
    63ee:	6210      	str	r0, [r2, #32]
	config->receiver_enable  = true;
    63f0:	2501      	movs	r5, #1
    63f2:	2024      	movs	r0, #36	; 0x24
    63f4:	5415      	strb	r5, [r2, r0]
	config->transmitter_enable = true;
    63f6:	3001      	adds	r0, #1
    63f8:	5415      	strb	r5, [r2, r0]
	config->clock_polarity_inverted = false;
    63fa:	3001      	adds	r0, #1
    63fc:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
    63fe:	3001      	adds	r0, #1
    6400:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
    6402:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    6404:	3005      	adds	r0, #5
    6406:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
    6408:	3001      	adds	r0, #1
    640a:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    640c:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    640e:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    6410:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    6412:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    6414:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    6416:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
    6418:	2313      	movs	r3, #19
    641a:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    641c:	7751      	strb	r1, [r2, #29]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    641e:	2380      	movs	r3, #128	; 0x80
    6420:	035b      	lsls	r3, r3, #13
    6422:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    6424:	4b6e      	ldr	r3, [pc, #440]	; (65e0 <main+0x220>)
    6426:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    6428:	4b6e      	ldr	r3, [pc, #440]	; (65e4 <main+0x224>)
    642a:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    642c:	2301      	movs	r3, #1
    642e:	425b      	negs	r3, r3
    6430:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    6432:	63d3      	str	r3, [r2, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    6434:	4c6c      	ldr	r4, [pc, #432]	; (65e8 <main+0x228>)
    6436:	4b6d      	ldr	r3, [pc, #436]	; (65ec <main+0x22c>)
    6438:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    643a:	496d      	ldr	r1, [pc, #436]	; (65f0 <main+0x230>)
    643c:	4b6d      	ldr	r3, [pc, #436]	; (65f4 <main+0x234>)
    643e:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    6440:	496d      	ldr	r1, [pc, #436]	; (65f8 <main+0x238>)
    6442:	4b6e      	ldr	r3, [pc, #440]	; (65fc <main+0x23c>)
    6444:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    6446:	496e      	ldr	r1, [pc, #440]	; (6600 <main+0x240>)
    6448:	0020      	movs	r0, r4
    644a:	4b6e      	ldr	r3, [pc, #440]	; (6604 <main+0x244>)
    644c:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    644e:	4f6e      	ldr	r7, [pc, #440]	; (6608 <main+0x248>)
    6450:	683b      	ldr	r3, [r7, #0]
    6452:	6898      	ldr	r0, [r3, #8]
    6454:	2100      	movs	r1, #0
    6456:	4e6d      	ldr	r6, [pc, #436]	; (660c <main+0x24c>)
    6458:	47b0      	blx	r6
	setbuf(stdin, NULL);
    645a:	683b      	ldr	r3, [r7, #0]
    645c:	6858      	ldr	r0, [r3, #4]
    645e:	2100      	movs	r1, #0
    6460:	47b0      	blx	r6
	usart_register_callback(&cdc_uart_module, (usart_callback_t)uart_callback, USART_CALLBACK_BUFFER_RECEIVED);
    6462:	2201      	movs	r2, #1
    6464:	496a      	ldr	r1, [pc, #424]	; (6610 <main+0x250>)
    6466:	0020      	movs	r0, r4
    6468:	4b6a      	ldr	r3, [pc, #424]	; (6614 <main+0x254>)
    646a:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    646c:	6826      	ldr	r6, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    646e:	0030      	movs	r0, r6
    6470:	4b69      	ldr	r3, [pc, #420]	; (6618 <main+0x258>)
    6472:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6474:	231f      	movs	r3, #31
    6476:	4018      	ands	r0, r3
    6478:	4085      	lsls	r5, r0
    647a:	4b68      	ldr	r3, [pc, #416]	; (661c <main+0x25c>)
    647c:	601d      	str	r5, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    647e:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    6480:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    6482:	2b00      	cmp	r3, #0
    6484:	d1fc      	bne.n	6480 <main+0xc0>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    6486:	6833      	ldr	r3, [r6, #0]
    6488:	2202      	movs	r2, #2
    648a:	4313      	orrs	r3, r2
    648c:	6033      	str	r3, [r6, #0]
	configure_console();
	
	

	/* Output example information */
	printf(STRING_HEADER);
    648e:	4864      	ldr	r0, [pc, #400]	; (6620 <main+0x260>)
    6490:	4b64      	ldr	r3, [pc, #400]	; (6624 <main+0x264>)
    6492:	4798      	blx	r3
	sw_timer_get_config_defaults(&swt_conf);
    6494:	a803      	add	r0, sp, #12
    6496:	4b64      	ldr	r3, [pc, #400]	; (6628 <main+0x268>)
    6498:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
    649a:	4c64      	ldr	r4, [pc, #400]	; (662c <main+0x26c>)
    649c:	a903      	add	r1, sp, #12
    649e:	0020      	movs	r0, r4
    64a0:	4b63      	ldr	r3, [pc, #396]	; (6630 <main+0x270>)
    64a2:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    64a4:	0020      	movs	r0, r4
    64a6:	4b63      	ldr	r3, [pc, #396]	; (6634 <main+0x274>)
    64a8:	4798      	blx	r3
	mqtt_get_config_defaults(&mqtt_conf);
    64aa:	a803      	add	r0, sp, #12
    64ac:	4b62      	ldr	r3, [pc, #392]	; (6638 <main+0x278>)
    64ae:	4798      	blx	r3
	mqtt_conf.timer_inst = &swt_module_inst;
    64b0:	9404      	str	r4, [sp, #16]
	mqtt_conf.recv_buffer = mqtt_buffer;
    64b2:	4b62      	ldr	r3, [pc, #392]	; (663c <main+0x27c>)
    64b4:	9306      	str	r3, [sp, #24]
	mqtt_conf.recv_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    64b6:	2380      	movs	r3, #128	; 0x80
    64b8:	9307      	str	r3, [sp, #28]
	result = mqtt_init(&mqtt_inst, &mqtt_conf);
    64ba:	a903      	add	r1, sp, #12
    64bc:	4860      	ldr	r0, [pc, #384]	; (6640 <main+0x280>)
    64be:	4b61      	ldr	r3, [pc, #388]	; (6644 <main+0x284>)
    64c0:	4798      	blx	r3
    64c2:	1e01      	subs	r1, r0, #0
	if (result < 0) {
    64c4:	db2a      	blt.n	651c <main+0x15c>
	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
    64c6:	4960      	ldr	r1, [pc, #384]	; (6648 <main+0x288>)
    64c8:	485d      	ldr	r0, [pc, #372]	; (6640 <main+0x280>)
    64ca:	4b60      	ldr	r3, [pc, #384]	; (664c <main+0x28c>)
    64cc:	4798      	blx	r3
    64ce:	1e01      	subs	r1, r0, #0
	if (result < 0) {
    64d0:	db28      	blt.n	6524 <main+0x164>

	/* Initialize the MQTT service. */
	configure_mqtt();

	/* Initialize the BSP. */
	nm_bsp_init();
    64d2:	4b5f      	ldr	r3, [pc, #380]	; (6650 <main+0x290>)
    64d4:	4798      	blx	r3
	
	
		/* Setup user name first */
	printf("Enter the user name (Max %d characters)\r\n", MAIN_CHAT_USER_NAME_SIZE);
    64d6:	2140      	movs	r1, #64	; 0x40
    64d8:	485e      	ldr	r0, [pc, #376]	; (6654 <main+0x294>)
    64da:	4c5f      	ldr	r4, [pc, #380]	; (6658 <main+0x298>)
    64dc:	47a0      	blx	r4
	//scanf("%64s", mqtt_user);
	printf("User : %s\r\n", mqtt_user); // Add new line after printing mqtt_user
    64de:	a918      	add	r1, sp, #96	; 0x60
    64e0:	485e      	ldr	r0, [pc, #376]	; (665c <main+0x29c>)
    64e2:	47a0      	blx	r4
	sprintf(topic, "%s%s", MAIN_CHAT_TOPIC, mqtt_user); //save 'MAIN_CHAT_TOPIC' data to the 'topic' char array
    64e4:	4d5e      	ldr	r5, [pc, #376]	; (6660 <main+0x2a0>)
    64e6:	ab18      	add	r3, sp, #96	; 0x60
    64e8:	4a5e      	ldr	r2, [pc, #376]	; (6664 <main+0x2a4>)
    64ea:	0029      	movs	r1, r5
    64ec:	a803      	add	r0, sp, #12
    64ee:	4c5e      	ldr	r4, [pc, #376]	; (6668 <main+0x2a8>)
    64f0:	47a0      	blx	r4
	sprintf(topic2, "%s%s", DATA_TOPIC, mqtt_user); //save 'MAIN_CHAT_TOPIC' data to the 'topic' char array  
    64f2:	ab18      	add	r3, sp, #96	; 0x60
    64f4:	4a5d      	ldr	r2, [pc, #372]	; (666c <main+0x2ac>)
    64f6:	0029      	movs	r1, r5
    64f8:	a822      	add	r0, sp, #136	; 0x88
    64fa:	47a0      	blx	r4

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    64fc:	2218      	movs	r2, #24
    64fe:	2100      	movs	r1, #0
    6500:	a832      	add	r0, sp, #200	; 0xc8
    6502:	4b5b      	ldr	r3, [pc, #364]	; (6670 <main+0x2b0>)
    6504:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_callback; /* Set Wi-Fi event callback. */
    6506:	4b5b      	ldr	r3, [pc, #364]	; (6674 <main+0x2b4>)
    6508:	9332      	str	r3, [sp, #200]	; 0xc8
	ret = m2m_wifi_init(&param);
    650a:	a832      	add	r0, sp, #200	; 0xc8
    650c:	4b5a      	ldr	r3, [pc, #360]	; (6678 <main+0x2b8>)
    650e:	4798      	blx	r3
    6510:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) {
    6512:	d00b      	beq.n	652c <main+0x16c>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
    6514:	4859      	ldr	r0, [pc, #356]	; (667c <main+0x2bc>)
    6516:	4b50      	ldr	r3, [pc, #320]	; (6658 <main+0x298>)
    6518:	4798      	blx	r3
    651a:	e7fe      	b.n	651a <main+0x15a>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
    651c:	4858      	ldr	r0, [pc, #352]	; (6680 <main+0x2c0>)
    651e:	4b4e      	ldr	r3, [pc, #312]	; (6658 <main+0x298>)
    6520:	4798      	blx	r3
    6522:	e7fe      	b.n	6522 <main+0x162>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
    6524:	4857      	ldr	r0, [pc, #348]	; (6684 <main+0x2c4>)
    6526:	4b4c      	ldr	r3, [pc, #304]	; (6658 <main+0x298>)
    6528:	4798      	blx	r3
    652a:	e7fe      	b.n	652a <main+0x16a>
		while (1) { /* Loop forever. */
		}
	}

	/* Initialize socket interface. */
	socketInit();
    652c:	4b56      	ldr	r3, [pc, #344]	; (6688 <main+0x2c8>)
    652e:	4798      	blx	r3
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
    6530:	4956      	ldr	r1, [pc, #344]	; (668c <main+0x2cc>)
    6532:	4857      	ldr	r0, [pc, #348]	; (6690 <main+0x2d0>)
    6534:	4b57      	ldr	r3, [pc, #348]	; (6694 <main+0x2d4>)
    6536:	4798      	blx	r3

	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    6538:	23ff      	movs	r3, #255	; 0xff
    653a:	9300      	str	r3, [sp, #0]
    653c:	4b56      	ldr	r3, [pc, #344]	; (6698 <main+0x2d8>)
    653e:	2202      	movs	r2, #2
    6540:	210e      	movs	r1, #14
    6542:	4856      	ldr	r0, [pc, #344]	; (669c <main+0x2dc>)
    6544:	4c56      	ldr	r4, [pc, #344]	; (66a0 <main+0x2e0>)
    6546:	47a0      	blx	r4
    /* statuses of I2C communication */
    enum status_code shtc1_connected;
    enum status_code shtc1_read_status;
	
	/* Initialize the I2C console. */
	shtc1_demo_init();
    6548:	4b56      	ldr	r3, [pc, #344]	; (66a4 <main+0x2e4>)
    654a:	4798      	blx	r3

    delay_s(1);
    654c:	20fa      	movs	r0, #250	; 0xfa
    654e:	0080      	lsls	r0, r0, #2
    6550:	4b55      	ldr	r3, [pc, #340]	; (66a8 <main+0x2e8>)
    6552:	4798      	blx	r3

    printf("\r\nstarting...\r\n");
    6554:	4855      	ldr	r0, [pc, #340]	; (66ac <main+0x2ec>)
    6556:	4b33      	ldr	r3, [pc, #204]	; (6624 <main+0x264>)
    6558:	4798      	blx	r3

    /* test if sensor is connected */
    shtc1_connected = shtc1_probe(&i2c_master_instance);
    655a:	4855      	ldr	r0, [pc, #340]	; (66b0 <main+0x2f0>)
    655c:	4b55      	ldr	r3, [pc, #340]	; (66b4 <main+0x2f4>)
    655e:	4798      	blx	r3
    printf("sensor is %s\r\n",
    6560:	4955      	ldr	r1, [pc, #340]	; (66b8 <main+0x2f8>)
    6562:	2800      	cmp	r0, #0
    6564:	d100      	bne.n	6568 <main+0x1a8>
    6566:	4955      	ldr	r1, [pc, #340]	; (66bc <main+0x2fc>)
    6568:	4855      	ldr	r0, [pc, #340]	; (66c0 <main+0x300>)
    656a:	4b3b      	ldr	r3, [pc, #236]	; (6658 <main+0x298>)
    656c:	4798      	blx	r3



	while (1) {
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
    656e:	4e55      	ldr	r6, [pc, #340]	; (66c4 <main+0x304>)
		/* Try to read user input from USART. */
		//usart_read_job(&cdc_uart_module, &uart_ch_buffer);
		/* Checks the timer timeout. */
		sw_timer_task(&swt_module_inst);
    6570:	4d2e      	ldr	r5, [pc, #184]	; (662c <main+0x26c>)
    6572:	e006      	b.n	6582 <main+0x1c2>
            else
                port_pin_set_output_level(LED_0_PIN, true);*/
        }
        else
        {
            printf("Measurement failed. Extension-board disconnected?\n");
    6574:	4854      	ldr	r0, [pc, #336]	; (66c8 <main+0x308>)
    6576:	4b2b      	ldr	r3, [pc, #172]	; (6624 <main+0x264>)
    6578:	4798      	blx	r3
            
        }

        /* delay until the next iteration */
        delay_ms(MEASUREMENT_INTERVAL_MS);
    657a:	20fa      	movs	r0, #250	; 0xfa
    657c:	00c0      	lsls	r0, r0, #3
    657e:	4b4a      	ldr	r3, [pc, #296]	; (66a8 <main+0x2e8>)
    6580:	4798      	blx	r3
		m2m_wifi_handle_events(NULL);
    6582:	2000      	movs	r0, #0
    6584:	47b0      	blx	r6
		sw_timer_task(&swt_module_inst);
    6586:	0028      	movs	r0, r5
    6588:	4b50      	ldr	r3, [pc, #320]	; (66cc <main+0x30c>)
    658a:	4798      	blx	r3
		delay_s(1);
    658c:	20fa      	movs	r0, #250	; 0xfa
    658e:	0080      	lsls	r0, r0, #2
    6590:	4c45      	ldr	r4, [pc, #276]	; (66a8 <main+0x2e8>)
    6592:	47a0      	blx	r4
        shtc1_read_status = shtc1_read_lpm_sync(&i2c_master_instance, &temp, &rh);
    6594:	aa16      	add	r2, sp, #88	; 0x58
    6596:	a917      	add	r1, sp, #92	; 0x5c
    6598:	4845      	ldr	r0, [pc, #276]	; (66b0 <main+0x2f0>)
    659a:	4b4d      	ldr	r3, [pc, #308]	; (66d0 <main+0x310>)
    659c:	4798      	blx	r3
    659e:	0007      	movs	r7, r0
		delay_ms(100);
    65a0:	2064      	movs	r0, #100	; 0x64
    65a2:	47a0      	blx	r4
        if (shtc1_read_status == STATUS_OK)
    65a4:	2f00      	cmp	r7, #0
    65a6:	d1e5      	bne.n	6574 <main+0x1b4>
			printf("% d\r\n",temp);
    65a8:	4c4a      	ldr	r4, [pc, #296]	; (66d4 <main+0x314>)
    65aa:	9917      	ldr	r1, [sp, #92]	; 0x5c
    65ac:	0020      	movs	r0, r4
    65ae:	4f2a      	ldr	r7, [pc, #168]	; (6658 <main+0x298>)
    65b0:	47b8      	blx	r7
			printf("% d\r\n",rh);
    65b2:	9916      	ldr	r1, [sp, #88]	; 0x58
    65b4:	0020      	movs	r0, r4
    65b6:	47b8      	blx	r7
            temp_f = (float)temp / 1000;
    65b8:	9817      	ldr	r0, [sp, #92]	; 0x5c
    65ba:	4b47      	ldr	r3, [pc, #284]	; (66d8 <main+0x318>)
    65bc:	4798      	blx	r3
    65be:	4947      	ldr	r1, [pc, #284]	; (66dc <main+0x31c>)
    65c0:	4b47      	ldr	r3, [pc, #284]	; (66e0 <main+0x320>)
    65c2:	4798      	blx	r3
			sprintf(msgBuff,"%.2f",temp_f); //converts and stores float to char array
    65c4:	4b47      	ldr	r3, [pc, #284]	; (66e4 <main+0x324>)
    65c6:	4798      	blx	r3
    65c8:	0002      	movs	r2, r0
    65ca:	000b      	movs	r3, r1
    65cc:	4946      	ldr	r1, [pc, #280]	; (66e8 <main+0x328>)
    65ce:	a81a      	add	r0, sp, #104	; 0x68
    65d0:	4c25      	ldr	r4, [pc, #148]	; (6668 <main+0x2a8>)
    65d2:	47a0      	blx	r4
    65d4:	e7d1      	b.n	657a <main+0x1ba>
    65d6:	46c0      	nop			; (mov r8, r8)
    65d8:	0000b944 	.word	0x0000b944
    65dc:	00005659 	.word	0x00005659
    65e0:	00160002 	.word	0x00160002
    65e4:	00170002 	.word	0x00170002
    65e8:	200000e8 	.word	0x200000e8
    65ec:	20000414 	.word	0x20000414
    65f0:	0000627d 	.word	0x0000627d
    65f4:	20000410 	.word	0x20000410
    65f8:	00006251 	.word	0x00006251
    65fc:	2000040c 	.word	0x2000040c
    6600:	42001400 	.word	0x42001400
    6604:	0000495d 	.word	0x0000495d
    6608:	2000000c 	.word	0x2000000c
    660c:	0000968d 	.word	0x0000968d
    6610:	0000618d 	.word	0x0000618d
    6614:	00004d3d 	.word	0x00004d3d
    6618:	00004431 	.word	0x00004431
    661c:	e000e100 	.word	0xe000e100
    6620:	0000b798 	.word	0x0000b798
    6624:	00009655 	.word	0x00009655
    6628:	00005ff1 	.word	0x00005ff1
    662c:	20000474 	.word	0x20000474
    6630:	00005ffd 	.word	0x00005ffd
    6634:	000060a9 	.word	0x000060a9
    6638:	0000679d 	.word	0x0000679d
    663c:	2000011c 	.word	0x2000011c
    6640:	2000019c 	.word	0x2000019c
    6644:	000067c1 	.word	0x000067c1
    6648:	00006295 	.word	0x00006295
    664c:	0000684d 	.word	0x0000684d
    6650:	00000cb9 	.word	0x00000cb9
    6654:	0000b86c 	.word	0x0000b86c
    6658:	00009539 	.word	0x00009539
    665c:	0000b898 	.word	0x0000b898
    6660:	0000b8a4 	.word	0x0000b8a4
    6664:	0000ba04 	.word	0x0000ba04
    6668:	000097f9 	.word	0x000097f9
    666c:	0000b8ac 	.word	0x0000b8ac
    6670:	000093d7 	.word	0x000093d7
    6674:	000061b9 	.word	0x000061b9
    6678:	00001bf1 	.word	0x00001bf1
    667c:	0000b8b8 	.word	0x0000b8b8
    6680:	0000b804 	.word	0x0000b804
    6684:	0000b838 	.word	0x0000b838
    6688:	0000381d 	.word	0x0000381d
    668c:	000061a1 	.word	0x000061a1
    6690:	000061ad 	.word	0x000061ad
    6694:	00003861 	.word	0x00003861
    6698:	0000ba58 	.word	0x0000ba58
    669c:	0000ba64 	.word	0x0000ba64
    66a0:	00001fc1 	.word	0x00001fc1
    66a4:	00005f45 	.word	0x00005f45
    66a8:	00000c39 	.word	0x00000c39
    66ac:	0000b8e0 	.word	0x0000b8e0
    66b0:	2000044c 	.word	0x2000044c
    66b4:	00000b81 	.word	0x00000b81
    66b8:	0000b790 	.word	0x0000b790
    66bc:	0000b78c 	.word	0x0000b78c
    66c0:	0000b8f0 	.word	0x0000b8f0
    66c4:	00001d25 	.word	0x00001d25
    66c8:	0000b910 	.word	0x0000b910
    66cc:	00006131 	.word	0x00006131
    66d0:	00000b69 	.word	0x00000b69
    66d4:	0000b900 	.word	0x0000b900
    66d8:	00007939 	.word	0x00007939
    66dc:	447a0000 	.word	0x447a0000
    66e0:	000076a9 	.word	0x000076a9
    66e4:	00009265 	.word	0x00009265
    66e8:	0000b908 	.word	0x0000b908

000066ec <_hwerr_to_stderr>:
    66ec:	1c03      	adds	r3, r0, #0
    66ee:	300e      	adds	r0, #14
    66f0:	b500      	push	{lr}
    66f2:	280e      	cmp	r0, #14
    66f4:	d819      	bhi.n	672a <_hwerr_to_stderr+0x3e>
    66f6:	f000 fe2d 	bl	7354 <__gnu_thumb1_case_uqi>
    66fa:	1416      	.short	0x1416
    66fc:	1b181012 	.word	0x1b181012
    6700:	180c0e18 	.word	0x180c0e18
    6704:	1d0a0e0e 	.word	0x1d0a0e0e
    6708:	08          	.byte	0x08
    6709:	00          	.byte	0x00
    670a:	2000      	movs	r0, #0
    670c:	e014      	b.n	6738 <_hwerr_to_stderr+0x4c>
    670e:	2070      	movs	r0, #112	; 0x70
    6710:	e011      	b.n	6736 <_hwerr_to_stderr+0x4a>
    6712:	2016      	movs	r0, #22
    6714:	e00f      	b.n	6736 <_hwerr_to_stderr+0x4a>
    6716:	200c      	movs	r0, #12
    6718:	e00d      	b.n	6736 <_hwerr_to_stderr+0x4a>
    671a:	2079      	movs	r0, #121	; 0x79
    671c:	e00b      	b.n	6736 <_hwerr_to_stderr+0x4a>
    671e:	2068      	movs	r0, #104	; 0x68
    6720:	e009      	b.n	6736 <_hwerr_to_stderr+0x4a>
    6722:	200b      	movs	r0, #11
    6724:	e007      	b.n	6736 <_hwerr_to_stderr+0x4a>
    6726:	2010      	movs	r0, #16
    6728:	e005      	b.n	6736 <_hwerr_to_stderr+0x4a>
    672a:	2000      	movs	r0, #0
    672c:	4283      	cmp	r3, r0
    672e:	da03      	bge.n	6738 <_hwerr_to_stderr+0x4c>
    6730:	2005      	movs	r0, #5
    6732:	e000      	b.n	6736 <_hwerr_to_stderr+0x4a>
    6734:	2002      	movs	r0, #2
    6736:	4240      	negs	r0, r0
    6738:	bd00      	pop	{pc}
	...

0000673c <_mqtt_send_wait>:
    673c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    673e:	1c04      	adds	r4, r0, #0
    6740:	3443      	adds	r4, #67	; 0x43
    6742:	7823      	ldrb	r3, [r4, #0]
    6744:	1c05      	adds	r5, r0, #0
    6746:	07d8      	lsls	r0, r3, #31
    6748:	d51c      	bpl.n	6784 <_mqtt_send_wait+0x48>
    674a:	2604      	movs	r6, #4
    674c:	4333      	orrs	r3, r6
    674e:	7023      	strb	r3, [r4, #0]
    6750:	2002      	movs	r0, #2
    6752:	5628      	ldrsb	r0, [r5, r0]
    6754:	b292      	uxth	r2, r2
    6756:	2300      	movs	r3, #0
    6758:	4f0c      	ldr	r7, [pc, #48]	; (678c <_mqtt_send_wait+0x50>)
    675a:	47b8      	blx	r7
    675c:	2800      	cmp	r0, #0
    675e:	da05      	bge.n	676c <_mqtt_send_wait+0x30>
    6760:	7823      	ldrb	r3, [r4, #0]
    6762:	43b3      	bics	r3, r6
    6764:	7023      	strb	r3, [r4, #0]
    6766:	4b0a      	ldr	r3, [pc, #40]	; (6790 <_mqtt_send_wait+0x54>)
    6768:	4798      	blx	r3
    676a:	e00d      	b.n	6788 <_mqtt_send_wait+0x4c>
    676c:	7822      	ldrb	r2, [r4, #0]
    676e:	2314      	movs	r3, #20
    6770:	4013      	ands	r3, r2
    6772:	2000      	movs	r0, #0
    6774:	2b04      	cmp	r3, #4
    6776:	d107      	bne.n	6788 <_mqtt_send_wait+0x4c>
    6778:	4b06      	ldr	r3, [pc, #24]	; (6794 <_mqtt_send_wait+0x58>)
    677a:	4798      	blx	r3
    677c:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    677e:	4b06      	ldr	r3, [pc, #24]	; (6798 <_mqtt_send_wait+0x5c>)
    6780:	4798      	blx	r3
    6782:	e7f3      	b.n	676c <_mqtt_send_wait+0x30>
    6784:	2001      	movs	r0, #1
    6786:	4240      	negs	r0, r0
    6788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    678a:	46c0      	nop			; (mov r8, r8)
    678c:	00003a89 	.word	0x00003a89
    6790:	000066ed 	.word	0x000066ed
    6794:	00001d25 	.word	0x00001d25
    6798:	00006131 	.word	0x00006131

0000679c <mqtt_get_config_defaults>:
    679c:	4b07      	ldr	r3, [pc, #28]	; (67bc <mqtt_get_config_defaults+0x20>)
    679e:	2240      	movs	r2, #64	; 0x40
    67a0:	8003      	strh	r3, [r0, #0]
    67a2:	2396      	movs	r3, #150	; 0x96
    67a4:	009b      	lsls	r3, r3, #2
    67a6:	8103      	strh	r3, [r0, #8]
    67a8:	6102      	str	r2, [r0, #16]
    67aa:	2300      	movs	r3, #0
    67ac:	2220      	movs	r2, #32
    67ae:	7083      	strb	r3, [r0, #2]
    67b0:	6043      	str	r3, [r0, #4]
    67b2:	60c3      	str	r3, [r0, #12]
    67b4:	6142      	str	r2, [r0, #20]
    67b6:	7603      	strb	r3, [r0, #24]
    67b8:	4770      	bx	lr
    67ba:	46c0      	nop			; (mov r8, r8)
    67bc:	0000075b 	.word	0x0000075b

000067c0 <mqtt_init>:
    67c0:	b538      	push	{r3, r4, r5, lr}
    67c2:	1c04      	adds	r4, r0, #0
    67c4:	1c0d      	adds	r5, r1, #0
    67c6:	2800      	cmp	r0, #0
    67c8:	d030      	beq.n	682c <mqtt_init+0x6c>
    67ca:	2900      	cmp	r1, #0
    67cc:	d02e      	beq.n	682c <mqtt_init+0x6c>
    67ce:	690b      	ldr	r3, [r1, #16]
    67d0:	2b00      	cmp	r3, #0
    67d2:	d02b      	beq.n	682c <mqtt_init+0x6c>
    67d4:	684b      	ldr	r3, [r1, #4]
    67d6:	2b00      	cmp	r3, #0
    67d8:	d028      	beq.n	682c <mqtt_init+0x6c>
    67da:	2100      	movs	r1, #0
    67dc:	2274      	movs	r2, #116	; 0x74
    67de:	4b16      	ldr	r3, [pc, #88]	; (6838 <mqtt_init+0x78>)
    67e0:	4798      	blx	r3
    67e2:	1c20      	adds	r0, r4, #0
    67e4:	4b15      	ldr	r3, [pc, #84]	; (683c <mqtt_init+0x7c>)
    67e6:	3058      	adds	r0, #88	; 0x58
    67e8:	1c29      	adds	r1, r5, #0
    67ea:	221c      	movs	r2, #28
    67ec:	4798      	blx	r3
    67ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
    67f0:	2b00      	cmp	r3, #0
    67f2:	d10b      	bne.n	680c <mqtt_init+0x4c>
    67f4:	6928      	ldr	r0, [r5, #16]
    67f6:	4b12      	ldr	r3, [pc, #72]	; (6840 <mqtt_init+0x80>)
    67f8:	4798      	blx	r3
    67fa:	6660      	str	r0, [r4, #100]	; 0x64
    67fc:	2800      	cmp	r0, #0
    67fe:	d017      	beq.n	6830 <mqtt_init+0x70>
    6800:	1c23      	adds	r3, r4, #0
    6802:	3343      	adds	r3, #67	; 0x43
    6804:	781a      	ldrb	r2, [r3, #0]
    6806:	2120      	movs	r1, #32
    6808:	430a      	orrs	r2, r1
    680a:	701a      	strb	r2, [r3, #0]
    680c:	892a      	ldrh	r2, [r5, #8]
    680e:	23fa      	movs	r3, #250	; 0xfa
    6810:	005b      	lsls	r3, r3, #1
    6812:	4353      	muls	r3, r2
    6814:	6868      	ldr	r0, [r5, #4]
    6816:	490b      	ldr	r1, [pc, #44]	; (6844 <mqtt_init+0x84>)
    6818:	1c22      	adds	r2, r4, #0
    681a:	4d0b      	ldr	r5, [pc, #44]	; (6848 <mqtt_init+0x88>)
    681c:	47a8      	blx	r5
    681e:	1c03      	adds	r3, r0, #0
    6820:	6520      	str	r0, [r4, #80]	; 0x50
    6822:	2000      	movs	r0, #0
    6824:	4283      	cmp	r3, r0
    6826:	da05      	bge.n	6834 <mqtt_init+0x74>
    6828:	201c      	movs	r0, #28
    682a:	e002      	b.n	6832 <mqtt_init+0x72>
    682c:	2016      	movs	r0, #22
    682e:	e000      	b.n	6832 <mqtt_init+0x72>
    6830:	200c      	movs	r0, #12
    6832:	4240      	negs	r0, r0
    6834:	bd38      	pop	{r3, r4, r5, pc}
    6836:	46c0      	nop			; (mov r8, r8)
    6838:	000093d7 	.word	0x000093d7
    683c:	000093a1 	.word	0x000093a1
    6840:	0000938d 	.word	0x0000938d
    6844:	00006e21 	.word	0x00006e21
    6848:	000060bd 	.word	0x000060bd

0000684c <mqtt_register_callback>:
    684c:	2800      	cmp	r0, #0
    684e:	d002      	beq.n	6856 <mqtt_register_callback+0xa>
    6850:	6541      	str	r1, [r0, #84]	; 0x54
    6852:	2000      	movs	r0, #0
    6854:	e001      	b.n	685a <mqtt_register_callback+0xe>
    6856:	2016      	movs	r0, #22
    6858:	4240      	negs	r0, r0
    685a:	4770      	bx	lr

0000685c <mqtt_socket_resolve_handler>:
    685c:	b5f0      	push	{r4, r5, r6, r7, lr}
    685e:	1c06      	adds	r6, r0, #0
    6860:	b085      	sub	sp, #20
    6862:	1c0f      	adds	r7, r1, #0
    6864:	2400      	movs	r4, #0
    6866:	4b0f      	ldr	r3, [pc, #60]	; (68a4 <mqtt_socket_resolve_handler+0x48>)
    6868:	58e5      	ldr	r5, [r4, r3]
    686a:	2d00      	cmp	r5, #0
    686c:	d015      	beq.n	689a <mqtt_socket_resolve_handler+0x3e>
    686e:	1ce9      	adds	r1, r5, #3
    6870:	1c30      	adds	r0, r6, #0
    6872:	4b0d      	ldr	r3, [pc, #52]	; (68a8 <mqtt_socket_resolve_handler+0x4c>)
    6874:	4798      	blx	r3
    6876:	2800      	cmp	r0, #0
    6878:	d10f      	bne.n	689a <mqtt_socket_resolve_handler+0x3e>
    687a:	466a      	mov	r2, sp
    687c:	2302      	movs	r3, #2
    687e:	8013      	strh	r3, [r2, #0]
    6880:	1c2b      	adds	r3, r5, #0
    6882:	3358      	adds	r3, #88	; 0x58
    6884:	881b      	ldrh	r3, [r3, #0]
    6886:	9701      	str	r7, [sp, #4]
    6888:	ba5b      	rev16	r3, r3
    688a:	8053      	strh	r3, [r2, #2]
    688c:	2002      	movs	r0, #2
    688e:	5628      	ldrsb	r0, [r5, r0]
    6890:	4669      	mov	r1, sp
    6892:	2210      	movs	r2, #16
    6894:	4b05      	ldr	r3, [pc, #20]	; (68ac <mqtt_socket_resolve_handler+0x50>)
    6896:	4798      	blx	r3
    6898:	e002      	b.n	68a0 <mqtt_socket_resolve_handler+0x44>
    689a:	3404      	adds	r4, #4
    689c:	2c1c      	cmp	r4, #28
    689e:	d1e2      	bne.n	6866 <mqtt_socket_resolve_handler+0xa>
    68a0:	b005      	add	sp, #20
    68a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    68a4:	20000254 	.word	0x20000254
    68a8:	0000983d 	.word	0x0000983d
    68ac:	000039f9 	.word	0x000039f9

000068b0 <mqtt_connect>:
    68b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    68b2:	1c04      	adds	r4, r0, #0
    68b4:	b089      	sub	sp, #36	; 0x24
    68b6:	1c0d      	adds	r5, r1, #0
    68b8:	2800      	cmp	r0, #0
    68ba:	d051      	beq.n	6960 <mqtt_connect+0xb0>
    68bc:	2900      	cmp	r1, #0
    68be:	d04f      	beq.n	6960 <mqtt_connect+0xb0>
    68c0:	1c08      	adds	r0, r1, #0
    68c2:	4b39      	ldr	r3, [pc, #228]	; (69a8 <mqtt_connect+0xf8>)
    68c4:	4798      	blx	r3
    68c6:	2840      	cmp	r0, #64	; 0x40
    68c8:	d84c      	bhi.n	6964 <mqtt_connect+0xb4>
    68ca:	1c21      	adds	r1, r4, #0
    68cc:	3143      	adds	r1, #67	; 0x43
    68ce:	780b      	ldrb	r3, [r1, #0]
    68d0:	9101      	str	r1, [sp, #4]
    68d2:	07db      	lsls	r3, r3, #31
    68d4:	0fd9      	lsrs	r1, r3, #31
    68d6:	466a      	mov	r2, sp
    68d8:	b2ce      	uxtb	r6, r1
    68da:	1ce0      	adds	r0, r4, #3
    68dc:	7211      	strb	r1, [r2, #8]
    68de:	2e00      	cmp	r6, #0
    68e0:	d142      	bne.n	6968 <mqtt_connect+0xb8>
    68e2:	2701      	movs	r7, #1
    68e4:	1c29      	adds	r1, r5, #0
    68e6:	4b31      	ldr	r3, [pc, #196]	; (69ac <mqtt_connect+0xfc>)
    68e8:	8027      	strh	r7, [r4, #0]
    68ea:	4798      	blx	r3
    68ec:	9a01      	ldr	r2, [sp, #4]
    68ee:	2002      	movs	r0, #2
    68f0:	7813      	ldrb	r3, [r2, #0]
    68f2:	9901      	ldr	r1, [sp, #4]
    68f4:	43bb      	bics	r3, r7
    68f6:	4383      	bics	r3, r0
    68f8:	22e3      	movs	r2, #227	; 0xe3
    68fa:	4013      	ands	r3, r2
    68fc:	466a      	mov	r2, sp
    68fe:	700b      	strb	r3, [r1, #0]
    6900:	7a12      	ldrb	r2, [r2, #8]
    6902:	1c23      	adds	r3, r4, #0
    6904:	3348      	adds	r3, #72	; 0x48
    6906:	6466      	str	r6, [r4, #68]	; 0x44
    6908:	701a      	strb	r2, [r3, #0]
    690a:	7c9a      	ldrb	r2, [r3, #18]
    690c:	805e      	strh	r6, [r3, #2]
    690e:	1e53      	subs	r3, r2, #1
    6910:	419a      	sbcs	r2, r3
    6912:	b2d2      	uxtb	r2, r2
    6914:	1c39      	adds	r1, r7, #0
    6916:	4b26      	ldr	r3, [pc, #152]	; (69b0 <mqtt_connect+0x100>)
    6918:	4798      	blx	r3
    691a:	70a0      	strb	r0, [r4, #2]
    691c:	2800      	cmp	r0, #0
    691e:	db25      	blt.n	696c <mqtt_connect+0xbc>
    6920:	4b24      	ldr	r3, [pc, #144]	; (69b4 <mqtt_connect+0x104>)
    6922:	0080      	lsls	r0, r0, #2
    6924:	50c4      	str	r4, [r0, r3]
    6926:	1c2b      	adds	r3, r5, #0
    6928:	781f      	ldrb	r7, [r3, #0]
    692a:	2f00      	cmp	r7, #0
    692c:	d026      	beq.n	697c <mqtt_connect+0xcc>
    692e:	2220      	movs	r2, #32
    6930:	1c39      	adds	r1, r7, #0
    6932:	4391      	bics	r1, r2
    6934:	1c0a      	adds	r2, r1, #0
    6936:	3a41      	subs	r2, #65	; 0x41
    6938:	b2d2      	uxtb	r2, r2
    693a:	3301      	adds	r3, #1
    693c:	2a05      	cmp	r2, #5
    693e:	d90d      	bls.n	695c <mqtt_connect+0xac>
    6940:	2f3a      	cmp	r7, #58	; 0x3a
    6942:	d00b      	beq.n	695c <mqtt_connect+0xac>
    6944:	2f2f      	cmp	r7, #47	; 0x2f
    6946:	d009      	beq.n	695c <mqtt_connect+0xac>
    6948:	2f2e      	cmp	r7, #46	; 0x2e
    694a:	d102      	bne.n	6952 <mqtt_connect+0xa2>
    694c:	2e00      	cmp	r6, #0
    694e:	d0eb      	beq.n	6928 <mqtt_connect+0x78>
    6950:	e00f      	b.n	6972 <mqtt_connect+0xc2>
    6952:	2230      	movs	r2, #48	; 0x30
    6954:	4017      	ands	r7, r2
    6956:	4297      	cmp	r7, r2
    6958:	d0e6      	beq.n	6928 <mqtt_connect+0x78>
    695a:	e00a      	b.n	6972 <mqtt_connect+0xc2>
    695c:	2601      	movs	r6, #1
    695e:	e7e3      	b.n	6928 <mqtt_connect+0x78>
    6960:	2016      	movs	r0, #22
    6962:	e004      	b.n	696e <mqtt_connect+0xbe>
    6964:	205b      	movs	r0, #91	; 0x5b
    6966:	e002      	b.n	696e <mqtt_connect+0xbe>
    6968:	2078      	movs	r0, #120	; 0x78
    696a:	e000      	b.n	696e <mqtt_connect+0xbe>
    696c:	201c      	movs	r0, #28
    696e:	4240      	negs	r0, r0
    6970:	e017      	b.n	69a2 <mqtt_connect+0xf2>
    6972:	1c28      	adds	r0, r5, #0
    6974:	4b10      	ldr	r3, [pc, #64]	; (69b8 <mqtt_connect+0x108>)
    6976:	4798      	blx	r3
    6978:	2000      	movs	r0, #0
    697a:	e012      	b.n	69a2 <mqtt_connect+0xf2>
    697c:	466a      	mov	r2, sp
    697e:	2302      	movs	r3, #2
    6980:	8213      	strh	r3, [r2, #16]
    6982:	1c23      	adds	r3, r4, #0
    6984:	3358      	adds	r3, #88	; 0x58
    6986:	881b      	ldrh	r3, [r3, #0]
    6988:	1c28      	adds	r0, r5, #0
    698a:	ba5b      	rev16	r3, r3
    698c:	8253      	strh	r3, [r2, #18]
    698e:	4b0b      	ldr	r3, [pc, #44]	; (69bc <mqtt_connect+0x10c>)
    6990:	4798      	blx	r3
    6992:	9005      	str	r0, [sp, #20]
    6994:	2002      	movs	r0, #2
    6996:	5620      	ldrsb	r0, [r4, r0]
    6998:	a904      	add	r1, sp, #16
    699a:	2210      	movs	r2, #16
    699c:	4b08      	ldr	r3, [pc, #32]	; (69c0 <mqtt_connect+0x110>)
    699e:	4798      	blx	r3
    69a0:	1c38      	adds	r0, r7, #0
    69a2:	b009      	add	sp, #36	; 0x24
    69a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    69a6:	46c0      	nop			; (mov r8, r8)
    69a8:	00009861 	.word	0x00009861
    69ac:	00009851 	.word	0x00009851
    69b0:	00003875 	.word	0x00003875
    69b4:	20000254 	.word	0x20000254
    69b8:	00003cbd 	.word	0x00003cbd
    69bc:	00003c51 	.word	0x00003c51
    69c0:	000039f9 	.word	0x000039f9

000069c4 <mqtt_connect_broker>:
    69c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    69c6:	b095      	sub	sp, #84	; 0x54
    69c8:	af02      	add	r7, sp, #8
    69ca:	617b      	str	r3, [r7, #20]
    69cc:	1c3b      	adds	r3, r7, #0
    69ce:	3370      	adds	r3, #112	; 0x70
    69d0:	781b      	ldrb	r3, [r3, #0]
    69d2:	1c05      	adds	r5, r0, #0
    69d4:	60fb      	str	r3, [r7, #12]
    69d6:	1c3b      	adds	r3, r7, #0
    69d8:	3374      	adds	r3, #116	; 0x74
    69da:	781b      	ldrb	r3, [r3, #0]
    69dc:	6139      	str	r1, [r7, #16]
    69de:	61fa      	str	r2, [r7, #28]
    69e0:	60bb      	str	r3, [r7, #8]
    69e2:	2800      	cmp	r0, #0
    69e4:	d101      	bne.n	69ea <mqtt_connect_broker+0x26>
    69e6:	2016      	movs	r0, #22
    69e8:	e129      	b.n	6c3e <mqtt_connect_broker+0x27a>
    69ea:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    69ec:	4668      	mov	r0, sp
    69ee:	3307      	adds	r3, #7
    69f0:	08db      	lsrs	r3, r3, #3
    69f2:	00db      	lsls	r3, r3, #3
    69f4:	1ac0      	subs	r0, r0, r3
    69f6:	4685      	mov	sp, r0
    69f8:	ac02      	add	r4, sp, #8
    69fa:	607c      	str	r4, [r7, #4]
    69fc:	6e3c      	ldr	r4, [r7, #96]	; 0x60
    69fe:	2c00      	cmp	r4, #0
    6a00:	d0f1      	beq.n	69e6 <mqtt_connect_broker+0x22>
    6a02:	1c2b      	adds	r3, r5, #0
    6a04:	3343      	adds	r3, #67	; 0x43
    6a06:	781b      	ldrb	r3, [r3, #0]
    6a08:	07d8      	lsls	r0, r3, #31
    6a0a:	d400      	bmi.n	6a0e <mqtt_connect_broker+0x4a>
    6a0c:	e112      	b.n	6c34 <mqtt_connect_broker+0x270>
    6a0e:	079a      	lsls	r2, r3, #30
    6a10:	d500      	bpl.n	6a14 <mqtt_connect_broker+0x50>
    6a12:	e111      	b.n	6c38 <mqtt_connect_broker+0x274>
    6a14:	071c      	lsls	r4, r3, #28
    6a16:	d40b      	bmi.n	6a30 <mqtt_connect_broker+0x6c>
    6a18:	4e8b      	ldr	r6, [pc, #556]	; (6c48 <mqtt_connect_broker+0x284>)
    6a1a:	6e38      	ldr	r0, [r7, #96]	; 0x60
    6a1c:	47b0      	blx	r6
    6a1e:	1c03      	adds	r3, r0, #0
    6a20:	61b8      	str	r0, [r7, #24]
    6a22:	69f8      	ldr	r0, [r7, #28]
    6a24:	330e      	adds	r3, #14
    6a26:	1c34      	adds	r4, r6, #0
    6a28:	2800      	cmp	r0, #0
    6a2a:	d113      	bne.n	6a54 <mqtt_connect_broker+0x90>
    6a2c:	1c1e      	adds	r6, r3, #0
    6a2e:	e01d      	b.n	6a6c <mqtt_connect_broker+0xa8>
    6a30:	1c2b      	adds	r3, r5, #0
    6a32:	3370      	adds	r3, #112	; 0x70
    6a34:	781b      	ldrb	r3, [r3, #0]
    6a36:	2b00      	cmp	r3, #0
    6a38:	d000      	beq.n	6a3c <mqtt_connect_broker+0x78>
    6a3a:	e0ff      	b.n	6c3c <mqtt_connect_broker+0x278>
    6a3c:	1c2b      	adds	r3, r5, #0
    6a3e:	3343      	adds	r3, #67	; 0x43
    6a40:	781b      	ldrb	r3, [r3, #0]
    6a42:	071a      	lsls	r2, r3, #28
    6a44:	d5e8      	bpl.n	6a18 <mqtt_connect_broker+0x54>
    6a46:	4b81      	ldr	r3, [pc, #516]	; (6c4c <mqtt_connect_broker+0x288>)
    6a48:	2000      	movs	r0, #0
    6a4a:	4798      	blx	r3
    6a4c:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    6a4e:	4b80      	ldr	r3, [pc, #512]	; (6c50 <mqtt_connect_broker+0x28c>)
    6a50:	4798      	blx	r3
    6a52:	e7f3      	b.n	6a3c <mqtt_connect_broker+0x78>
    6a54:	69f8      	ldr	r0, [r7, #28]
    6a56:	47b0      	blx	r6
    6a58:	69be      	ldr	r6, [r7, #24]
    6a5a:	697b      	ldr	r3, [r7, #20]
    6a5c:	3610      	adds	r6, #16
    6a5e:	1836      	adds	r6, r6, r0
    6a60:	2b00      	cmp	r3, #0
    6a62:	d003      	beq.n	6a6c <mqtt_connect_broker+0xa8>
    6a64:	1c18      	adds	r0, r3, #0
    6a66:	47a0      	blx	r4
    6a68:	3602      	adds	r6, #2
    6a6a:	1836      	adds	r6, r6, r0
    6a6c:	6e78      	ldr	r0, [r7, #100]	; 0x64
    6a6e:	2800      	cmp	r0, #0
    6a70:	d007      	beq.n	6a82 <mqtt_connect_broker+0xbe>
    6a72:	47a0      	blx	r4
    6a74:	3602      	adds	r6, #2
    6a76:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    6a78:	1830      	adds	r0, r6, r0
    6a7a:	1906      	adds	r6, r0, r4
    6a7c:	2c00      	cmp	r4, #0
    6a7e:	d100      	bne.n	6a82 <mqtt_connect_broker+0xbe>
    6a80:	1c06      	adds	r6, r0, #0
    6a82:	69fc      	ldr	r4, [r7, #28]
    6a84:	2c00      	cmp	r4, #0
    6a86:	d006      	beq.n	6a96 <mqtt_connect_broker+0xd2>
    6a88:	24c0      	movs	r4, #192	; 0xc0
    6a8a:	61bc      	str	r4, [r7, #24]
    6a8c:	697c      	ldr	r4, [r7, #20]
    6a8e:	2c00      	cmp	r4, #0
    6a90:	d103      	bne.n	6a9a <mqtt_connect_broker+0xd6>
    6a92:	2480      	movs	r4, #128	; 0x80
    6a94:	e000      	b.n	6a98 <mqtt_connect_broker+0xd4>
    6a96:	69fc      	ldr	r4, [r7, #28]
    6a98:	61bc      	str	r4, [r7, #24]
    6a9a:	6e7c      	ldr	r4, [r7, #100]	; 0x64
    6a9c:	2c00      	cmp	r4, #0
    6a9e:	d00f      	beq.n	6ac0 <mqtt_connect_broker+0xfc>
    6aa0:	68bc      	ldr	r4, [r7, #8]
    6aa2:	2c00      	cmp	r4, #0
    6aa4:	d003      	beq.n	6aae <mqtt_connect_broker+0xea>
    6aa6:	69bc      	ldr	r4, [r7, #24]
    6aa8:	2320      	movs	r3, #32
    6aaa:	431c      	orrs	r4, r3
    6aac:	61bc      	str	r4, [r7, #24]
    6aae:	68fc      	ldr	r4, [r7, #12]
    6ab0:	2303      	movs	r3, #3
    6ab2:	4023      	ands	r3, r4
    6ab4:	00db      	lsls	r3, r3, #3
    6ab6:	69bc      	ldr	r4, [r7, #24]
    6ab8:	2204      	movs	r2, #4
    6aba:	4313      	orrs	r3, r2
    6abc:	431c      	orrs	r4, r3
    6abe:	61bc      	str	r4, [r7, #24]
    6ac0:	693c      	ldr	r4, [r7, #16]
    6ac2:	2c00      	cmp	r4, #0
    6ac4:	d003      	beq.n	6ace <mqtt_connect_broker+0x10a>
    6ac6:	69bc      	ldr	r4, [r7, #24]
    6ac8:	2302      	movs	r3, #2
    6aca:	431c      	orrs	r4, r3
    6acc:	61bc      	str	r4, [r7, #24]
    6ace:	1c2b      	adds	r3, r5, #0
    6ad0:	3343      	adds	r3, #67	; 0x43
    6ad2:	781a      	ldrb	r2, [r3, #0]
    6ad4:	2108      	movs	r1, #8
    6ad6:	430a      	orrs	r2, r1
    6ad8:	701a      	strb	r2, [r3, #0]
    6ada:	1c38      	adds	r0, r7, #0
    6adc:	9500      	str	r5, [sp, #0]
    6ade:	3020      	adds	r0, #32
    6ae0:	6879      	ldr	r1, [r7, #4]
    6ae2:	4b5c      	ldr	r3, [pc, #368]	; (6c54 <mqtt_connect_broker+0x290>)
    6ae4:	6eea      	ldr	r2, [r5, #108]	; 0x6c
    6ae6:	4c5c      	ldr	r4, [pc, #368]	; (6c58 <mqtt_connect_broker+0x294>)
    6ae8:	47a0      	blx	r4
    6aea:	1c38      	adds	r0, r7, #0
    6aec:	3020      	adds	r0, #32
    6aee:	2110      	movs	r1, #16
    6af0:	4b5a      	ldr	r3, [pc, #360]	; (6c5c <mqtt_connect_broker+0x298>)
    6af2:	4798      	blx	r3
    6af4:	2e80      	cmp	r6, #128	; 0x80
    6af6:	dd09      	ble.n	6b0c <mqtt_connect_broker+0x148>
    6af8:	2180      	movs	r1, #128	; 0x80
    6afa:	4249      	negs	r1, r1
    6afc:	4331      	orrs	r1, r6
    6afe:	1c38      	adds	r0, r7, #0
    6b00:	b249      	sxtb	r1, r1
    6b02:	3020      	adds	r0, #32
    6b04:	4c55      	ldr	r4, [pc, #340]	; (6c5c <mqtt_connect_broker+0x298>)
    6b06:	47a0      	blx	r4
    6b08:	11f6      	asrs	r6, r6, #7
    6b0a:	e7f3      	b.n	6af4 <mqtt_connect_broker+0x130>
    6b0c:	4b54      	ldr	r3, [pc, #336]	; (6c60 <mqtt_connect_broker+0x29c>)
    6b0e:	401e      	ands	r6, r3
    6b10:	d504      	bpl.n	6b1c <mqtt_connect_broker+0x158>
    6b12:	2380      	movs	r3, #128	; 0x80
    6b14:	3e01      	subs	r6, #1
    6b16:	425b      	negs	r3, r3
    6b18:	431e      	orrs	r6, r3
    6b1a:	3601      	adds	r6, #1
    6b1c:	1c38      	adds	r0, r7, #0
    6b1e:	b271      	sxtb	r1, r6
    6b20:	3020      	adds	r0, #32
    6b22:	4c4e      	ldr	r4, [pc, #312]	; (6c5c <mqtt_connect_broker+0x298>)
    6b24:	47a0      	blx	r4
    6b26:	1c38      	adds	r0, r7, #0
    6b28:	4c4e      	ldr	r4, [pc, #312]	; (6c64 <mqtt_connect_broker+0x2a0>)
    6b2a:	3020      	adds	r0, #32
    6b2c:	2106      	movs	r1, #6
    6b2e:	47a0      	blx	r4
    6b30:	1c38      	adds	r0, r7, #0
    6b32:	4b4d      	ldr	r3, [pc, #308]	; (6c68 <mqtt_connect_broker+0x2a4>)
    6b34:	3020      	adds	r0, #32
    6b36:	494d      	ldr	r1, [pc, #308]	; (6c6c <mqtt_connect_broker+0x2a8>)
    6b38:	2206      	movs	r2, #6
    6b3a:	4798      	blx	r3
    6b3c:	1c38      	adds	r0, r7, #0
    6b3e:	3020      	adds	r0, #32
    6b40:	2103      	movs	r1, #3
    6b42:	4a46      	ldr	r2, [pc, #280]	; (6c5c <mqtt_connect_broker+0x298>)
    6b44:	4790      	blx	r2
    6b46:	69bb      	ldr	r3, [r7, #24]
    6b48:	1c38      	adds	r0, r7, #0
    6b4a:	4a44      	ldr	r2, [pc, #272]	; (6c5c <mqtt_connect_broker+0x298>)
    6b4c:	b259      	sxtb	r1, r3
    6b4e:	3020      	adds	r0, #32
    6b50:	4790      	blx	r2
    6b52:	1c2b      	adds	r3, r5, #0
    6b54:	3360      	adds	r3, #96	; 0x60
    6b56:	2000      	movs	r0, #0
    6b58:	5e19      	ldrsh	r1, [r3, r0]
    6b5a:	1c38      	adds	r0, r7, #0
    6b5c:	3020      	adds	r0, #32
    6b5e:	47a0      	blx	r4
    6b60:	4e39      	ldr	r6, [pc, #228]	; (6c48 <mqtt_connect_broker+0x284>)
    6b62:	6e38      	ldr	r0, [r7, #96]	; 0x60
    6b64:	47b0      	blx	r6
    6b66:	b201      	sxth	r1, r0
    6b68:	1c38      	adds	r0, r7, #0
    6b6a:	3020      	adds	r0, #32
    6b6c:	47a0      	blx	r4
    6b6e:	6e38      	ldr	r0, [r7, #96]	; 0x60
    6b70:	47b0      	blx	r6
    6b72:	1c02      	adds	r2, r0, #0
    6b74:	1c38      	adds	r0, r7, #0
    6b76:	3020      	adds	r0, #32
    6b78:	6e39      	ldr	r1, [r7, #96]	; 0x60
    6b7a:	4b3b      	ldr	r3, [pc, #236]	; (6c68 <mqtt_connect_broker+0x2a4>)
    6b7c:	4798      	blx	r3
    6b7e:	6e78      	ldr	r0, [r7, #100]	; 0x64
    6b80:	2800      	cmp	r0, #0
    6b82:	d015      	beq.n	6bb0 <mqtt_connect_broker+0x1ec>
    6b84:	47b0      	blx	r6
    6b86:	b201      	sxth	r1, r0
    6b88:	1c38      	adds	r0, r7, #0
    6b8a:	3020      	adds	r0, #32
    6b8c:	47a0      	blx	r4
    6b8e:	6e78      	ldr	r0, [r7, #100]	; 0x64
    6b90:	47b0      	blx	r6
    6b92:	1c02      	adds	r2, r0, #0
    6b94:	1c38      	adds	r0, r7, #0
    6b96:	4c34      	ldr	r4, [pc, #208]	; (6c68 <mqtt_connect_broker+0x2a4>)
    6b98:	3020      	adds	r0, #32
    6b9a:	6e79      	ldr	r1, [r7, #100]	; 0x64
    6b9c:	47a0      	blx	r4
    6b9e:	6ebc      	ldr	r4, [r7, #104]	; 0x68
    6ba0:	2c00      	cmp	r4, #0
    6ba2:	d005      	beq.n	6bb0 <mqtt_connect_broker+0x1ec>
    6ba4:	1c38      	adds	r0, r7, #0
    6ba6:	1c21      	adds	r1, r4, #0
    6ba8:	3020      	adds	r0, #32
    6baa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    6bac:	4c2e      	ldr	r4, [pc, #184]	; (6c68 <mqtt_connect_broker+0x2a4>)
    6bae:	47a0      	blx	r4
    6bb0:	69fc      	ldr	r4, [r7, #28]
    6bb2:	2c00      	cmp	r4, #0
    6bb4:	d01f      	beq.n	6bf6 <mqtt_connect_broker+0x232>
    6bb6:	4e24      	ldr	r6, [pc, #144]	; (6c48 <mqtt_connect_broker+0x284>)
    6bb8:	1c20      	adds	r0, r4, #0
    6bba:	47b0      	blx	r6
    6bbc:	b201      	sxth	r1, r0
    6bbe:	1c38      	adds	r0, r7, #0
    6bc0:	3020      	adds	r0, #32
    6bc2:	4c28      	ldr	r4, [pc, #160]	; (6c64 <mqtt_connect_broker+0x2a0>)
    6bc4:	47a0      	blx	r4
    6bc6:	69f8      	ldr	r0, [r7, #28]
    6bc8:	47b0      	blx	r6
    6bca:	1c02      	adds	r2, r0, #0
    6bcc:	1c38      	adds	r0, r7, #0
    6bce:	3020      	adds	r0, #32
    6bd0:	69f9      	ldr	r1, [r7, #28]
    6bd2:	4c25      	ldr	r4, [pc, #148]	; (6c68 <mqtt_connect_broker+0x2a4>)
    6bd4:	47a0      	blx	r4
    6bd6:	6978      	ldr	r0, [r7, #20]
    6bd8:	2800      	cmp	r0, #0
    6bda:	d00c      	beq.n	6bf6 <mqtt_connect_broker+0x232>
    6bdc:	47b0      	blx	r6
    6bde:	b201      	sxth	r1, r0
    6be0:	1c38      	adds	r0, r7, #0
    6be2:	4a20      	ldr	r2, [pc, #128]	; (6c64 <mqtt_connect_broker+0x2a0>)
    6be4:	3020      	adds	r0, #32
    6be6:	4790      	blx	r2
    6be8:	6978      	ldr	r0, [r7, #20]
    6bea:	47b0      	blx	r6
    6bec:	1c02      	adds	r2, r0, #0
    6bee:	1c38      	adds	r0, r7, #0
    6bf0:	3020      	adds	r0, #32
    6bf2:	6979      	ldr	r1, [r7, #20]
    6bf4:	47a0      	blx	r4
    6bf6:	1c38      	adds	r0, r7, #0
    6bf8:	1c2c      	adds	r4, r5, #0
    6bfa:	3020      	adds	r0, #32
    6bfc:	4b1c      	ldr	r3, [pc, #112]	; (6c70 <mqtt_connect_broker+0x2ac>)
    6bfe:	3443      	adds	r4, #67	; 0x43
    6c00:	4798      	blx	r3
    6c02:	7821      	ldrb	r1, [r4, #0]
    6c04:	0789      	lsls	r1, r1, #30
    6c06:	0fc9      	lsrs	r1, r1, #31
    6c08:	2901      	cmp	r1, #1
    6c0a:	d10b      	bne.n	6c24 <mqtt_connect_broker+0x260>
    6c0c:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    6c0e:	2a00      	cmp	r2, #0
    6c10:	d108      	bne.n	6c24 <mqtt_connect_broker+0x260>
    6c12:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    6c14:	2b00      	cmp	r3, #0
    6c16:	d005      	beq.n	6c24 <mqtt_connect_broker+0x260>
    6c18:	2034      	movs	r0, #52	; 0x34
    6c1a:	55c2      	strb	r2, [r0, r7]
    6c1c:	1c3a      	adds	r2, r7, #0
    6c1e:	1c28      	adds	r0, r5, #0
    6c20:	3234      	adds	r2, #52	; 0x34
    6c22:	4798      	blx	r3
    6c24:	7823      	ldrb	r3, [r4, #0]
    6c26:	2202      	movs	r2, #2
    6c28:	4313      	orrs	r3, r2
    6c2a:	2208      	movs	r2, #8
    6c2c:	4393      	bics	r3, r2
    6c2e:	7023      	strb	r3, [r4, #0]
    6c30:	2000      	movs	r0, #0
    6c32:	e005      	b.n	6c40 <mqtt_connect_broker+0x27c>
    6c34:	2080      	movs	r0, #128	; 0x80
    6c36:	e002      	b.n	6c3e <mqtt_connect_broker+0x27a>
    6c38:	2078      	movs	r0, #120	; 0x78
    6c3a:	e000      	b.n	6c3e <mqtt_connect_broker+0x27a>
    6c3c:	200b      	movs	r0, #11
    6c3e:	4240      	negs	r0, r0
    6c40:	46bd      	mov	sp, r7
    6c42:	b013      	add	sp, #76	; 0x4c
    6c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6c46:	46c0      	nop			; (mov r8, r8)
    6c48:	00009861 	.word	0x00009861
    6c4c:	00001d25 	.word	0x00001d25
    6c50:	00006131 	.word	0x00006131
    6c54:	0000673d 	.word	0x0000673d
    6c58:	00005f51 	.word	0x00005f51
    6c5c:	00005f7d 	.word	0x00005f7d
    6c60:	8000007f 	.word	0x8000007f
    6c64:	00005fa5 	.word	0x00005fa5
    6c68:	00005fbd 	.word	0x00005fbd
    6c6c:	0000ba90 	.word	0x0000ba90
    6c70:	00005f61 	.word	0x00005f61

00006c74 <mqtt_subscribe>:
    6c74:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c76:	b08d      	sub	sp, #52	; 0x34
    6c78:	af02      	add	r7, sp, #8
    6c7a:	1c04      	adds	r4, r0, #0
    6c7c:	60b9      	str	r1, [r7, #8]
    6c7e:	607a      	str	r2, [r7, #4]
    6c80:	d101      	bne.n	6c86 <mqtt_subscribe+0x12>
    6c82:	2016      	movs	r0, #22
    6c84:	e086      	b.n	6d94 <mqtt_subscribe+0x120>
    6c86:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    6c88:	466a      	mov	r2, sp
    6c8a:	3307      	adds	r3, #7
    6c8c:	08db      	lsrs	r3, r3, #3
    6c8e:	00db      	lsls	r3, r3, #3
    6c90:	1ad2      	subs	r2, r2, r3
    6c92:	4695      	mov	sp, r2
    6c94:	ad02      	add	r5, sp, #8
    6c96:	603d      	str	r5, [r7, #0]
    6c98:	68bd      	ldr	r5, [r7, #8]
    6c9a:	2d00      	cmp	r5, #0
    6c9c:	d0f1      	beq.n	6c82 <mqtt_subscribe+0xe>
    6c9e:	687d      	ldr	r5, [r7, #4]
    6ca0:	2d02      	cmp	r5, #2
    6ca2:	d8ee      	bhi.n	6c82 <mqtt_subscribe+0xe>
    6ca4:	1c05      	adds	r5, r0, #0
    6ca6:	3543      	adds	r5, #67	; 0x43
    6ca8:	782b      	ldrb	r3, [r5, #0]
    6caa:	079a      	lsls	r2, r3, #30
    6cac:	d56f      	bpl.n	6d8e <mqtt_subscribe+0x11a>
    6cae:	071a      	lsls	r2, r3, #28
    6cb0:	d41a      	bmi.n	6ce8 <mqtt_subscribe+0x74>
    6cb2:	68b8      	ldr	r0, [r7, #8]
    6cb4:	4d39      	ldr	r5, [pc, #228]	; (6d9c <mqtt_subscribe+0x128>)
    6cb6:	47a8      	blx	r5
    6cb8:	1c25      	adds	r5, r4, #0
    6cba:	3543      	adds	r5, #67	; 0x43
    6cbc:	782b      	ldrb	r3, [r5, #0]
    6cbe:	2208      	movs	r2, #8
    6cc0:	4313      	orrs	r3, r2
    6cc2:	702b      	strb	r3, [r5, #0]
    6cc4:	60fd      	str	r5, [r7, #12]
    6cc6:	1d46      	adds	r6, r0, #5
    6cc8:	9400      	str	r4, [sp, #0]
    6cca:	1c38      	adds	r0, r7, #0
    6ccc:	3014      	adds	r0, #20
    6cce:	6839      	ldr	r1, [r7, #0]
    6cd0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    6cd2:	4b33      	ldr	r3, [pc, #204]	; (6da0 <mqtt_subscribe+0x12c>)
    6cd4:	4d33      	ldr	r5, [pc, #204]	; (6da4 <mqtt_subscribe+0x130>)
    6cd6:	47a8      	blx	r5
    6cd8:	1c38      	adds	r0, r7, #0
    6cda:	217e      	movs	r1, #126	; 0x7e
    6cdc:	3014      	adds	r0, #20
    6cde:	4249      	negs	r1, r1
    6ce0:	4b31      	ldr	r3, [pc, #196]	; (6da8 <mqtt_subscribe+0x134>)
    6ce2:	4798      	blx	r3
    6ce4:	4d2d      	ldr	r5, [pc, #180]	; (6d9c <mqtt_subscribe+0x128>)
    6ce6:	e00e      	b.n	6d06 <mqtt_subscribe+0x92>
    6ce8:	1c03      	adds	r3, r0, #0
    6cea:	3370      	adds	r3, #112	; 0x70
    6cec:	781b      	ldrb	r3, [r3, #0]
    6cee:	2b00      	cmp	r3, #0
    6cf0:	d14f      	bne.n	6d92 <mqtt_subscribe+0x11e>
    6cf2:	782b      	ldrb	r3, [r5, #0]
    6cf4:	071a      	lsls	r2, r3, #28
    6cf6:	d5dc      	bpl.n	6cb2 <mqtt_subscribe+0x3e>
    6cf8:	4b2c      	ldr	r3, [pc, #176]	; (6dac <mqtt_subscribe+0x138>)
    6cfa:	2000      	movs	r0, #0
    6cfc:	4798      	blx	r3
    6cfe:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    6d00:	4b2b      	ldr	r3, [pc, #172]	; (6db0 <mqtt_subscribe+0x13c>)
    6d02:	4798      	blx	r3
    6d04:	e7f5      	b.n	6cf2 <mqtt_subscribe+0x7e>
    6d06:	4b28      	ldr	r3, [pc, #160]	; (6da8 <mqtt_subscribe+0x134>)
    6d08:	2e80      	cmp	r6, #128	; 0x80
    6d0a:	dd08      	ble.n	6d1e <mqtt_subscribe+0xaa>
    6d0c:	2180      	movs	r1, #128	; 0x80
    6d0e:	4249      	negs	r1, r1
    6d10:	4331      	orrs	r1, r6
    6d12:	1c38      	adds	r0, r7, #0
    6d14:	b249      	sxtb	r1, r1
    6d16:	3014      	adds	r0, #20
    6d18:	4798      	blx	r3
    6d1a:	11f6      	asrs	r6, r6, #7
    6d1c:	e7f3      	b.n	6d06 <mqtt_subscribe+0x92>
    6d1e:	4925      	ldr	r1, [pc, #148]	; (6db4 <mqtt_subscribe+0x140>)
    6d20:	4031      	ands	r1, r6
    6d22:	d504      	bpl.n	6d2e <mqtt_subscribe+0xba>
    6d24:	2280      	movs	r2, #128	; 0x80
    6d26:	3901      	subs	r1, #1
    6d28:	4252      	negs	r2, r2
    6d2a:	4311      	orrs	r1, r2
    6d2c:	3101      	adds	r1, #1
    6d2e:	1c38      	adds	r0, r7, #0
    6d30:	b249      	sxtb	r1, r1
    6d32:	3014      	adds	r0, #20
    6d34:	4798      	blx	r3
    6d36:	8821      	ldrh	r1, [r4, #0]
    6d38:	1c38      	adds	r0, r7, #0
    6d3a:	1c4b      	adds	r3, r1, #1
    6d3c:	8023      	strh	r3, [r4, #0]
    6d3e:	b209      	sxth	r1, r1
    6d40:	3014      	adds	r0, #20
    6d42:	4e1d      	ldr	r6, [pc, #116]	; (6db8 <mqtt_subscribe+0x144>)
    6d44:	47b0      	blx	r6
    6d46:	8823      	ldrh	r3, [r4, #0]
    6d48:	2b00      	cmp	r3, #0
    6d4a:	d101      	bne.n	6d50 <mqtt_subscribe+0xdc>
    6d4c:	2301      	movs	r3, #1
    6d4e:	8023      	strh	r3, [r4, #0]
    6d50:	68b8      	ldr	r0, [r7, #8]
    6d52:	47a8      	blx	r5
    6d54:	b201      	sxth	r1, r0
    6d56:	1c38      	adds	r0, r7, #0
    6d58:	3014      	adds	r0, #20
    6d5a:	47b0      	blx	r6
    6d5c:	68b8      	ldr	r0, [r7, #8]
    6d5e:	47a8      	blx	r5
    6d60:	1c02      	adds	r2, r0, #0
    6d62:	1c38      	adds	r0, r7, #0
    6d64:	3014      	adds	r0, #20
    6d66:	68b9      	ldr	r1, [r7, #8]
    6d68:	4b14      	ldr	r3, [pc, #80]	; (6dbc <mqtt_subscribe+0x148>)
    6d6a:	4798      	blx	r3
    6d6c:	687d      	ldr	r5, [r7, #4]
    6d6e:	1c38      	adds	r0, r7, #0
    6d70:	b269      	sxtb	r1, r5
    6d72:	3014      	adds	r0, #20
    6d74:	4b0c      	ldr	r3, [pc, #48]	; (6da8 <mqtt_subscribe+0x134>)
    6d76:	4798      	blx	r3
    6d78:	1c38      	adds	r0, r7, #0
    6d7a:	3014      	adds	r0, #20
    6d7c:	4b10      	ldr	r3, [pc, #64]	; (6dc0 <mqtt_subscribe+0x14c>)
    6d7e:	4798      	blx	r3
    6d80:	68fd      	ldr	r5, [r7, #12]
    6d82:	2208      	movs	r2, #8
    6d84:	782b      	ldrb	r3, [r5, #0]
    6d86:	2000      	movs	r0, #0
    6d88:	4393      	bics	r3, r2
    6d8a:	702b      	strb	r3, [r5, #0]
    6d8c:	e003      	b.n	6d96 <mqtt_subscribe+0x122>
    6d8e:	2080      	movs	r0, #128	; 0x80
    6d90:	e000      	b.n	6d94 <mqtt_subscribe+0x120>
    6d92:	200b      	movs	r0, #11
    6d94:	4240      	negs	r0, r0
    6d96:	46bd      	mov	sp, r7
    6d98:	b00b      	add	sp, #44	; 0x2c
    6d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6d9c:	00009861 	.word	0x00009861
    6da0:	0000673d 	.word	0x0000673d
    6da4:	00005f51 	.word	0x00005f51
    6da8:	00005f7d 	.word	0x00005f7d
    6dac:	00001d25 	.word	0x00001d25
    6db0:	00006131 	.word	0x00006131
    6db4:	8000007f 	.word	0x8000007f
    6db8:	00005fa5 	.word	0x00005fa5
    6dbc:	00005fbd 	.word	0x00005fbd
    6dc0:	00005f61 	.word	0x00005f61

00006dc4 <_mqtt_ping>:
    6dc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6dc6:	23c0      	movs	r3, #192	; 0xc0
    6dc8:	a901      	add	r1, sp, #4
    6dca:	2500      	movs	r5, #0
    6dcc:	700b      	strb	r3, [r1, #0]
    6dce:	704d      	strb	r5, [r1, #1]
    6dd0:	42a8      	cmp	r0, r5
    6dd2:	d019      	beq.n	6e08 <_mqtt_ping+0x44>
    6dd4:	1c04      	adds	r4, r0, #0
    6dd6:	3443      	adds	r4, #67	; 0x43
    6dd8:	7823      	ldrb	r3, [r4, #0]
    6dda:	079a      	lsls	r2, r3, #30
    6ddc:	d516      	bpl.n	6e0c <_mqtt_ping+0x48>
    6dde:	071a      	lsls	r2, r3, #28
    6de0:	d416      	bmi.n	6e10 <_mqtt_ping+0x4c>
    6de2:	2608      	movs	r6, #8
    6de4:	4333      	orrs	r3, r6
    6de6:	7023      	strb	r3, [r4, #0]
    6de8:	7880      	ldrb	r0, [r0, #2]
    6dea:	1c2b      	adds	r3, r5, #0
    6dec:	b240      	sxtb	r0, r0
    6dee:	2202      	movs	r2, #2
    6df0:	4f09      	ldr	r7, [pc, #36]	; (6e18 <_mqtt_ping+0x54>)
    6df2:	47b8      	blx	r7
    6df4:	1c2b      	adds	r3, r5, #0
    6df6:	42a8      	cmp	r0, r5
    6df8:	da0c      	bge.n	6e14 <_mqtt_ping+0x50>
    6dfa:	7823      	ldrb	r3, [r4, #0]
    6dfc:	43b3      	bics	r3, r6
    6dfe:	7023      	strb	r3, [r4, #0]
    6e00:	4b06      	ldr	r3, [pc, #24]	; (6e1c <_mqtt_ping+0x58>)
    6e02:	4798      	blx	r3
    6e04:	1c03      	adds	r3, r0, #0
    6e06:	e005      	b.n	6e14 <_mqtt_ping+0x50>
    6e08:	2316      	movs	r3, #22
    6e0a:	e002      	b.n	6e12 <_mqtt_ping+0x4e>
    6e0c:	2380      	movs	r3, #128	; 0x80
    6e0e:	e000      	b.n	6e12 <_mqtt_ping+0x4e>
    6e10:	230b      	movs	r3, #11
    6e12:	425b      	negs	r3, r3
    6e14:	1c18      	adds	r0, r3, #0
    6e16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6e18:	00003a89 	.word	0x00003a89
    6e1c:	000066ed 	.word	0x000066ed

00006e20 <mqtt_timer_callback>:
    6e20:	b570      	push	{r4, r5, r6, lr}
    6e22:	1c05      	adds	r5, r0, #0
    6e24:	b086      	sub	sp, #24
    6e26:	1c0e      	adds	r6, r1, #0
    6e28:	1c14      	adds	r4, r2, #0
    6e2a:	2800      	cmp	r0, #0
    6e2c:	d012      	beq.n	6e54 <mqtt_timer_callback+0x34>
    6e2e:	2a00      	cmp	r2, #0
    6e30:	d010      	beq.n	6e54 <mqtt_timer_callback+0x34>
    6e32:	1c10      	adds	r0, r2, #0
    6e34:	4b08      	ldr	r3, [pc, #32]	; (6e58 <mqtt_timer_callback+0x38>)
    6e36:	4798      	blx	r3
    6e38:	2800      	cmp	r0, #0
    6e3a:	da04      	bge.n	6e46 <mqtt_timer_callback+0x26>
    6e3c:	1c28      	adds	r0, r5, #0
    6e3e:	1c31      	adds	r1, r6, #0
    6e40:	2200      	movs	r2, #0
    6e42:	4b06      	ldr	r3, [pc, #24]	; (6e5c <mqtt_timer_callback+0x3c>)
    6e44:	e005      	b.n	6e52 <mqtt_timer_callback+0x32>
    6e46:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6e48:	2b00      	cmp	r3, #0
    6e4a:	d003      	beq.n	6e54 <mqtt_timer_callback+0x34>
    6e4c:	1c20      	adds	r0, r4, #0
    6e4e:	2107      	movs	r1, #7
    6e50:	aa01      	add	r2, sp, #4
    6e52:	4798      	blx	r3
    6e54:	b006      	add	sp, #24
    6e56:	bd70      	pop	{r4, r5, r6, pc}
    6e58:	00006dc5 	.word	0x00006dc5
    6e5c:	000060f5 	.word	0x000060f5

00006e60 <_mqtt_puback>:
    6e60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6e62:	2302      	movs	r3, #2
    6e64:	ac01      	add	r4, sp, #4
    6e66:	2700      	movs	r7, #0
    6e68:	7063      	strb	r3, [r4, #1]
    6e6a:	42b8      	cmp	r0, r7
    6e6c:	d01e      	beq.n	6eac <_mqtt_puback+0x4c>
    6e6e:	1c05      	adds	r5, r0, #0
    6e70:	3543      	adds	r5, #67	; 0x43
    6e72:	782b      	ldrb	r3, [r5, #0]
    6e74:	079e      	lsls	r6, r3, #30
    6e76:	d51b      	bpl.n	6eb0 <_mqtt_puback+0x50>
    6e78:	071e      	lsls	r6, r3, #28
    6e7a:	d41b      	bmi.n	6eb4 <_mqtt_puback+0x54>
    6e7c:	2608      	movs	r6, #8
    6e7e:	4333      	orrs	r3, r6
    6e80:	702b      	strb	r3, [r5, #0]
    6e82:	7880      	ldrb	r0, [r0, #2]
    6e84:	7021      	strb	r1, [r4, #0]
    6e86:	0a11      	lsrs	r1, r2, #8
    6e88:	70a1      	strb	r1, [r4, #2]
    6e8a:	70e2      	strb	r2, [r4, #3]
    6e8c:	1c21      	adds	r1, r4, #0
    6e8e:	1c3b      	adds	r3, r7, #0
    6e90:	b240      	sxtb	r0, r0
    6e92:	2204      	movs	r2, #4
    6e94:	4c09      	ldr	r4, [pc, #36]	; (6ebc <_mqtt_puback+0x5c>)
    6e96:	47a0      	blx	r4
    6e98:	1c3b      	adds	r3, r7, #0
    6e9a:	42b8      	cmp	r0, r7
    6e9c:	da0c      	bge.n	6eb8 <_mqtt_puback+0x58>
    6e9e:	782b      	ldrb	r3, [r5, #0]
    6ea0:	43b3      	bics	r3, r6
    6ea2:	702b      	strb	r3, [r5, #0]
    6ea4:	4b06      	ldr	r3, [pc, #24]	; (6ec0 <_mqtt_puback+0x60>)
    6ea6:	4798      	blx	r3
    6ea8:	1c03      	adds	r3, r0, #0
    6eaa:	e005      	b.n	6eb8 <_mqtt_puback+0x58>
    6eac:	2316      	movs	r3, #22
    6eae:	e002      	b.n	6eb6 <_mqtt_puback+0x56>
    6eb0:	2380      	movs	r3, #128	; 0x80
    6eb2:	e000      	b.n	6eb6 <_mqtt_puback+0x56>
    6eb4:	230b      	movs	r3, #11
    6eb6:	425b      	negs	r3, r3
    6eb8:	1c18      	adds	r0, r3, #0
    6eba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6ebc:	00003a89 	.word	0x00003a89
    6ec0:	000066ed 	.word	0x000066ed

00006ec4 <mqtt_clear_conn>:
    6ec4:	b530      	push	{r4, r5, lr}
    6ec6:	1c04      	adds	r4, r0, #0
    6ec8:	b087      	sub	sp, #28
    6eca:	2800      	cmp	r0, #0
    6ecc:	d01c      	beq.n	6f08 <mqtt_clear_conn+0x44>
    6ece:	2002      	movs	r0, #2
    6ed0:	4b0e      	ldr	r3, [pc, #56]	; (6f0c <mqtt_clear_conn+0x48>)
    6ed2:	5620      	ldrsb	r0, [r4, r0]
    6ed4:	4798      	blx	r3
    6ed6:	1c23      	adds	r3, r4, #0
    6ed8:	3343      	adds	r3, #67	; 0x43
    6eda:	781a      	ldrb	r2, [r3, #0]
    6edc:	21fc      	movs	r1, #252	; 0xfc
    6ede:	0795      	lsls	r5, r2, #30
    6ee0:	400a      	ands	r2, r1
    6ee2:	701a      	strb	r2, [r3, #0]
    6ee4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    6ee6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    6ee8:	9301      	str	r3, [sp, #4]
    6eea:	2300      	movs	r3, #0
    6eec:	64e3      	str	r3, [r4, #76]	; 0x4c
    6eee:	6d21      	ldr	r1, [r4, #80]	; 0x50
    6ef0:	4b07      	ldr	r3, [pc, #28]	; (6f10 <mqtt_clear_conn+0x4c>)
    6ef2:	4798      	blx	r3
    6ef4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6ef6:	0fed      	lsrs	r5, r5, #31
    6ef8:	2b00      	cmp	r3, #0
    6efa:	d005      	beq.n	6f08 <mqtt_clear_conn+0x44>
    6efc:	2d00      	cmp	r5, #0
    6efe:	d003      	beq.n	6f08 <mqtt_clear_conn+0x44>
    6f00:	1c20      	adds	r0, r4, #0
    6f02:	2105      	movs	r1, #5
    6f04:	aa01      	add	r2, sp, #4
    6f06:	4798      	blx	r3
    6f08:	b007      	add	sp, #28
    6f0a:	bd30      	pop	{r4, r5, pc}
    6f0c:	00003bb5 	.word	0x00003bb5
    6f10:	00006121 	.word	0x00006121

00006f14 <mqtt_disconnect>:
    6f14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6f16:	23e0      	movs	r3, #224	; 0xe0
    6f18:	ae01      	add	r6, sp, #4
    6f1a:	2700      	movs	r7, #0
    6f1c:	1c05      	adds	r5, r0, #0
    6f1e:	7033      	strb	r3, [r6, #0]
    6f20:	7077      	strb	r7, [r6, #1]
    6f22:	42b8      	cmp	r0, r7
    6f24:	d036      	beq.n	6f94 <mqtt_disconnect+0x80>
    6f26:	1c04      	adds	r4, r0, #0
    6f28:	3443      	adds	r4, #67	; 0x43
    6f2a:	7823      	ldrb	r3, [r4, #0]
    6f2c:	079a      	lsls	r2, r3, #30
    6f2e:	d533      	bpl.n	6f98 <mqtt_disconnect+0x84>
    6f30:	42b9      	cmp	r1, r7
    6f32:	d12b      	bne.n	6f8c <mqtt_disconnect+0x78>
    6f34:	071a      	lsls	r2, r3, #28
    6f36:	d414      	bmi.n	6f62 <mqtt_disconnect+0x4e>
    6f38:	7823      	ldrb	r3, [r4, #0]
    6f3a:	2210      	movs	r2, #16
    6f3c:	4313      	orrs	r3, r2
    6f3e:	2708      	movs	r7, #8
    6f40:	433b      	orrs	r3, r7
    6f42:	7023      	strb	r3, [r4, #0]
    6f44:	2002      	movs	r0, #2
    6f46:	5628      	ldrsb	r0, [r5, r0]
    6f48:	1c31      	adds	r1, r6, #0
    6f4a:	2202      	movs	r2, #2
    6f4c:	2300      	movs	r3, #0
    6f4e:	4d15      	ldr	r5, [pc, #84]	; (6fa4 <mqtt_disconnect+0x90>)
    6f50:	47a8      	blx	r5
    6f52:	2800      	cmp	r0, #0
    6f54:	da14      	bge.n	6f80 <mqtt_disconnect+0x6c>
    6f56:	7823      	ldrb	r3, [r4, #0]
    6f58:	43bb      	bics	r3, r7
    6f5a:	7023      	strb	r3, [r4, #0]
    6f5c:	4b12      	ldr	r3, [pc, #72]	; (6fa8 <mqtt_disconnect+0x94>)
    6f5e:	4798      	blx	r3
    6f60:	e01e      	b.n	6fa0 <mqtt_disconnect+0x8c>
    6f62:	1c03      	adds	r3, r0, #0
    6f64:	3370      	adds	r3, #112	; 0x70
    6f66:	781b      	ldrb	r3, [r3, #0]
    6f68:	2b00      	cmp	r3, #0
    6f6a:	d117      	bne.n	6f9c <mqtt_disconnect+0x88>
    6f6c:	7823      	ldrb	r3, [r4, #0]
    6f6e:	071a      	lsls	r2, r3, #28
    6f70:	d5e2      	bpl.n	6f38 <mqtt_disconnect+0x24>
    6f72:	4b0e      	ldr	r3, [pc, #56]	; (6fac <mqtt_disconnect+0x98>)
    6f74:	2000      	movs	r0, #0
    6f76:	4798      	blx	r3
    6f78:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    6f7a:	4b0d      	ldr	r3, [pc, #52]	; (6fb0 <mqtt_disconnect+0x9c>)
    6f7c:	4798      	blx	r3
    6f7e:	e7f5      	b.n	6f6c <mqtt_disconnect+0x58>
    6f80:	7823      	ldrb	r3, [r4, #0]
    6f82:	2202      	movs	r2, #2
    6f84:	4393      	bics	r3, r2
    6f86:	7023      	strb	r3, [r4, #0]
    6f88:	2000      	movs	r0, #0
    6f8a:	e009      	b.n	6fa0 <mqtt_disconnect+0x8c>
    6f8c:	4b09      	ldr	r3, [pc, #36]	; (6fb4 <mqtt_disconnect+0xa0>)
    6f8e:	4798      	blx	r3
    6f90:	1c38      	adds	r0, r7, #0
    6f92:	e005      	b.n	6fa0 <mqtt_disconnect+0x8c>
    6f94:	2016      	movs	r0, #22
    6f96:	e002      	b.n	6f9e <mqtt_disconnect+0x8a>
    6f98:	2080      	movs	r0, #128	; 0x80
    6f9a:	e000      	b.n	6f9e <mqtt_disconnect+0x8a>
    6f9c:	200b      	movs	r0, #11
    6f9e:	4240      	negs	r0, r0
    6fa0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6fa2:	46c0      	nop			; (mov r8, r8)
    6fa4:	00003a89 	.word	0x00003a89
    6fa8:	000066ed 	.word	0x000066ed
    6fac:	00001d25 	.word	0x00001d25
    6fb0:	00006131 	.word	0x00006131
    6fb4:	00006ec5 	.word	0x00006ec5

00006fb8 <_mqtt_recv_handler>:
    6fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    6fba:	1c04      	adds	r4, r0, #0
    6fbc:	6e40      	ldr	r0, [r0, #100]	; 0x64
    6fbe:	230f      	movs	r3, #15
    6fc0:	7802      	ldrb	r2, [r0, #0]
    6fc2:	b087      	sub	sp, #28
    6fc4:	1c15      	adds	r5, r2, #0
    6fc6:	439d      	bics	r5, r3
    6fc8:	2d50      	cmp	r5, #80	; 0x50
    6fca:	d100      	bne.n	6fce <_mqtt_recv_handler+0x16>
    6fcc:	e098      	b.n	7100 <_mqtt_recv_handler+0x148>
    6fce:	d808      	bhi.n	6fe2 <_mqtt_recv_handler+0x2a>
    6fd0:	2d30      	cmp	r5, #48	; 0x30
    6fd2:	d03f      	beq.n	7054 <_mqtt_recv_handler+0x9c>
    6fd4:	2d40      	cmp	r5, #64	; 0x40
    6fd6:	d100      	bne.n	6fda <_mqtt_recv_handler+0x22>
    6fd8:	e0b3      	b.n	7142 <_mqtt_recv_handler+0x18a>
    6fda:	2d20      	cmp	r5, #32
    6fdc:	d000      	beq.n	6fe0 <_mqtt_recv_handler+0x28>
    6fde:	e0c3      	b.n	7168 <_mqtt_recv_handler+0x1b0>
    6fe0:	e00e      	b.n	7000 <_mqtt_recv_handler+0x48>
    6fe2:	2d70      	cmp	r5, #112	; 0x70
    6fe4:	d100      	bne.n	6fe8 <_mqtt_recv_handler+0x30>
    6fe6:	e0ac      	b.n	7142 <_mqtt_recv_handler+0x18a>
    6fe8:	d803      	bhi.n	6ff2 <_mqtt_recv_handler+0x3a>
    6fea:	2d60      	cmp	r5, #96	; 0x60
    6fec:	d100      	bne.n	6ff0 <_mqtt_recv_handler+0x38>
    6fee:	e096      	b.n	711e <_mqtt_recv_handler+0x166>
    6ff0:	e0ba      	b.n	7168 <_mqtt_recv_handler+0x1b0>
    6ff2:	2d90      	cmp	r5, #144	; 0x90
    6ff4:	d100      	bne.n	6ff8 <_mqtt_recv_handler+0x40>
    6ff6:	e0aa      	b.n	714e <_mqtt_recv_handler+0x196>
    6ff8:	2db0      	cmp	r5, #176	; 0xb0
    6ffa:	d100      	bne.n	6ffe <_mqtt_recv_handler+0x46>
    6ffc:	e0ad      	b.n	715a <_mqtt_recv_handler+0x1a2>
    6ffe:	e0b3      	b.n	7168 <_mqtt_recv_handler+0x1b0>
    7000:	aa01      	add	r2, sp, #4
    7002:	2303      	movs	r3, #3
    7004:	2901      	cmp	r1, #1
    7006:	d900      	bls.n	700a <_mqtt_recv_handler+0x52>
    7008:	78c3      	ldrb	r3, [r0, #3]
    700a:	7013      	strb	r3, [r2, #0]
    700c:	7813      	ldrb	r3, [r2, #0]
    700e:	2b00      	cmp	r3, #0
    7010:	d00d      	beq.n	702e <_mqtt_recv_handler+0x76>
    7012:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7014:	2b00      	cmp	r3, #0
    7016:	d002      	beq.n	701e <_mqtt_recv_handler+0x66>
    7018:	1c20      	adds	r0, r4, #0
    701a:	2101      	movs	r1, #1
    701c:	4798      	blx	r3
    701e:	236f      	movs	r3, #111	; 0x6f
    7020:	425b      	negs	r3, r3
    7022:	64e3      	str	r3, [r4, #76]	; 0x4c
    7024:	1c20      	adds	r0, r4, #0
    7026:	2100      	movs	r1, #0
    7028:	4b50      	ldr	r3, [pc, #320]	; (716c <_mqtt_recv_handler+0x1b4>)
    702a:	4798      	blx	r3
    702c:	e09c      	b.n	7168 <_mqtt_recv_handler+0x1b0>
    702e:	1c23      	adds	r3, r4, #0
    7030:	3343      	adds	r3, #67	; 0x43
    7032:	7819      	ldrb	r1, [r3, #0]
    7034:	0789      	lsls	r1, r1, #30
    7036:	0fc9      	lsrs	r1, r1, #31
    7038:	d105      	bne.n	7046 <_mqtt_recv_handler+0x8e>
    703a:	781a      	ldrb	r2, [r3, #0]
    703c:	64e1      	str	r1, [r4, #76]	; 0x4c
    703e:	2102      	movs	r1, #2
    7040:	430a      	orrs	r2, r1
    7042:	701a      	strb	r2, [r3, #0]
    7044:	e090      	b.n	7168 <_mqtt_recv_handler+0x1b0>
    7046:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7048:	2b00      	cmp	r3, #0
    704a:	d100      	bne.n	704e <_mqtt_recv_handler+0x96>
    704c:	e08c      	b.n	7168 <_mqtt_recv_handler+0x1b0>
    704e:	1c20      	adds	r0, r4, #0
    7050:	2101      	movs	r1, #1
    7052:	e088      	b.n	7166 <_mqtt_recv_handler+0x1ae>
    7054:	ad01      	add	r5, sp, #4
    7056:	0713      	lsls	r3, r2, #28
    7058:	7c2a      	ldrb	r2, [r5, #16]
    705a:	0fdb      	lsrs	r3, r3, #31
    705c:	2604      	movs	r6, #4
    705e:	009b      	lsls	r3, r3, #2
    7060:	43b2      	bics	r2, r6
    7062:	431a      	orrs	r2, r3
    7064:	742a      	strb	r2, [r5, #16]
    7066:	7807      	ldrb	r7, [r0, #0]
    7068:	2303      	movs	r3, #3
    706a:	b2d2      	uxtb	r2, r2
    706c:	087f      	lsrs	r7, r7, #1
    706e:	439a      	bics	r2, r3
    7070:	401f      	ands	r7, r3
    7072:	1c13      	adds	r3, r2, #0
    7074:	433b      	orrs	r3, r7
    7076:	742b      	strb	r3, [r5, #16]
    7078:	1c43      	adds	r3, r0, #1
    707a:	7818      	ldrb	r0, [r3, #0]
    707c:	1c5a      	adds	r2, r3, #1
    707e:	287f      	cmp	r0, #127	; 0x7f
    7080:	d901      	bls.n	7086 <_mqtt_recv_handler+0xce>
    7082:	1c13      	adds	r3, r2, #0
    7084:	e7f9      	b.n	707a <_mqtt_recv_handler+0xc2>
    7086:	7858      	ldrb	r0, [r3, #1]
    7088:	789e      	ldrb	r6, [r3, #2]
    708a:	0200      	lsls	r0, r0, #8
    708c:	4330      	orrs	r0, r6
    708e:	3303      	adds	r3, #3
    7090:	2600      	movs	r6, #0
    7092:	6068      	str	r0, [r5, #4]
    7094:	9301      	str	r3, [sp, #4]
    7096:	1818      	adds	r0, r3, r0
    7098:	42b7      	cmp	r7, r6
    709a:	d004      	beq.n	70a6 <_mqtt_recv_handler+0xee>
    709c:	7806      	ldrb	r6, [r0, #0]
    709e:	7843      	ldrb	r3, [r0, #1]
    70a0:	0236      	lsls	r6, r6, #8
    70a2:	431e      	orrs	r6, r3
    70a4:	3002      	adds	r0, #2
    70a6:	1851      	adds	r1, r2, r1
    70a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    70aa:	60a8      	str	r0, [r5, #8]
    70ac:	1a08      	subs	r0, r1, r0
    70ae:	60e8      	str	r0, [r5, #12]
    70b0:	2b00      	cmp	r3, #0
    70b2:	d003      	beq.n	70bc <_mqtt_recv_handler+0x104>
    70b4:	1c20      	adds	r0, r4, #0
    70b6:	2106      	movs	r1, #6
    70b8:	1c2a      	adds	r2, r5, #0
    70ba:	4798      	blx	r3
    70bc:	7c2b      	ldrb	r3, [r5, #16]
    70be:	079b      	lsls	r3, r3, #30
    70c0:	0f9b      	lsrs	r3, r3, #30
    70c2:	2b01      	cmp	r3, #1
    70c4:	d10b      	bne.n	70de <_mqtt_recv_handler+0x126>
    70c6:	b2b6      	uxth	r6, r6
    70c8:	1c20      	adds	r0, r4, #0
    70ca:	2140      	movs	r1, #64	; 0x40
    70cc:	1c32      	adds	r2, r6, #0
    70ce:	4b28      	ldr	r3, [pc, #160]	; (7170 <_mqtt_recv_handler+0x1b8>)
    70d0:	4798      	blx	r3
    70d2:	2800      	cmp	r0, #0
    70d4:	d048      	beq.n	7168 <_mqtt_recv_handler+0x1b0>
    70d6:	1c23      	adds	r3, r4, #0
    70d8:	3348      	adds	r3, #72	; 0x48
    70da:	2240      	movs	r2, #64	; 0x40
    70dc:	e00c      	b.n	70f8 <_mqtt_recv_handler+0x140>
    70de:	2b02      	cmp	r3, #2
    70e0:	d142      	bne.n	7168 <_mqtt_recv_handler+0x1b0>
    70e2:	b2b6      	uxth	r6, r6
    70e4:	1c20      	adds	r0, r4, #0
    70e6:	2150      	movs	r1, #80	; 0x50
    70e8:	1c32      	adds	r2, r6, #0
    70ea:	4b21      	ldr	r3, [pc, #132]	; (7170 <_mqtt_recv_handler+0x1b8>)
    70ec:	4798      	blx	r3
    70ee:	2800      	cmp	r0, #0
    70f0:	d03a      	beq.n	7168 <_mqtt_recv_handler+0x1b0>
    70f2:	1c23      	adds	r3, r4, #0
    70f4:	3348      	adds	r3, #72	; 0x48
    70f6:	2250      	movs	r2, #80	; 0x50
    70f8:	344a      	adds	r4, #74	; 0x4a
    70fa:	701a      	strb	r2, [r3, #0]
    70fc:	8026      	strh	r6, [r4, #0]
    70fe:	e033      	b.n	7168 <_mqtt_recv_handler+0x1b0>
    7100:	7885      	ldrb	r5, [r0, #2]
    7102:	78c3      	ldrb	r3, [r0, #3]
    7104:	022d      	lsls	r5, r5, #8
    7106:	431d      	orrs	r5, r3
    7108:	1c20      	adds	r0, r4, #0
    710a:	2162      	movs	r1, #98	; 0x62
    710c:	1c2a      	adds	r2, r5, #0
    710e:	4b18      	ldr	r3, [pc, #96]	; (7170 <_mqtt_recv_handler+0x1b8>)
    7110:	4798      	blx	r3
    7112:	2800      	cmp	r0, #0
    7114:	d028      	beq.n	7168 <_mqtt_recv_handler+0x1b0>
    7116:	1c23      	adds	r3, r4, #0
    7118:	3348      	adds	r3, #72	; 0x48
    711a:	2260      	movs	r2, #96	; 0x60
    711c:	e00d      	b.n	713a <_mqtt_recv_handler+0x182>
    711e:	7885      	ldrb	r5, [r0, #2]
    7120:	78c3      	ldrb	r3, [r0, #3]
    7122:	022d      	lsls	r5, r5, #8
    7124:	431d      	orrs	r5, r3
    7126:	1c20      	adds	r0, r4, #0
    7128:	2170      	movs	r1, #112	; 0x70
    712a:	1c2a      	adds	r2, r5, #0
    712c:	4b10      	ldr	r3, [pc, #64]	; (7170 <_mqtt_recv_handler+0x1b8>)
    712e:	4798      	blx	r3
    7130:	2800      	cmp	r0, #0
    7132:	d019      	beq.n	7168 <_mqtt_recv_handler+0x1b0>
    7134:	1c23      	adds	r3, r4, #0
    7136:	3348      	adds	r3, #72	; 0x48
    7138:	2270      	movs	r2, #112	; 0x70
    713a:	344a      	adds	r4, #74	; 0x4a
    713c:	701a      	strb	r2, [r3, #0]
    713e:	8025      	strh	r5, [r4, #0]
    7140:	e012      	b.n	7168 <_mqtt_recv_handler+0x1b0>
    7142:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7144:	2b00      	cmp	r3, #0
    7146:	d00f      	beq.n	7168 <_mqtt_recv_handler+0x1b0>
    7148:	1c20      	adds	r0, r4, #0
    714a:	2102      	movs	r1, #2
    714c:	e00a      	b.n	7164 <_mqtt_recv_handler+0x1ac>
    714e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7150:	2b00      	cmp	r3, #0
    7152:	d009      	beq.n	7168 <_mqtt_recv_handler+0x1b0>
    7154:	1c20      	adds	r0, r4, #0
    7156:	2103      	movs	r1, #3
    7158:	e004      	b.n	7164 <_mqtt_recv_handler+0x1ac>
    715a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    715c:	2b00      	cmp	r3, #0
    715e:	d003      	beq.n	7168 <_mqtt_recv_handler+0x1b0>
    7160:	1c20      	adds	r0, r4, #0
    7162:	2104      	movs	r1, #4
    7164:	aa01      	add	r2, sp, #4
    7166:	4798      	blx	r3
    7168:	b007      	add	sp, #28
    716a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    716c:	00006f15 	.word	0x00006f15
    7170:	00006e61 	.word	0x00006e61

00007174 <mqtt_recv_packet>:
    7174:	b538      	push	{r3, r4, r5, lr}
    7176:	1e04      	subs	r4, r0, #0
    7178:	d017      	beq.n	71aa <mqtt_recv_packet+0x36>
    717a:	6c42      	ldr	r2, [r0, #68]	; 0x44
    717c:	6e83      	ldr	r3, [r0, #104]	; 0x68
    717e:	429a      	cmp	r2, r3
    7180:	d906      	bls.n	7190 <mqtt_recv_packet+0x1c>
    7182:	238b      	movs	r3, #139	; 0x8b
    7184:	425b      	negs	r3, r3
    7186:	64c3      	str	r3, [r0, #76]	; 0x4c
    7188:	2100      	movs	r1, #0
    718a:	4b08      	ldr	r3, [pc, #32]	; (71ac <mqtt_recv_packet+0x38>)
    718c:	4798      	blx	r3
    718e:	e00c      	b.n	71aa <mqtt_recv_packet+0x36>
    7190:	6c62      	ldr	r2, [r4, #68]	; 0x44
    7192:	6e63      	ldr	r3, [r4, #100]	; 0x64
    7194:	2002      	movs	r0, #2
    7196:	1899      	adds	r1, r3, r2
    7198:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    719a:	5620      	ldrsb	r0, [r4, r0]
    719c:	1a9a      	subs	r2, r3, r2
    719e:	b292      	uxth	r2, r2
    71a0:	2300      	movs	r3, #0
    71a2:	4d03      	ldr	r5, [pc, #12]	; (71b0 <mqtt_recv_packet+0x3c>)
    71a4:	47a8      	blx	r5
    71a6:	2800      	cmp	r0, #0
    71a8:	d1f2      	bne.n	7190 <mqtt_recv_packet+0x1c>
    71aa:	bd38      	pop	{r3, r4, r5, pc}
    71ac:	00006f15 	.word	0x00006f15
    71b0:	00003b21 	.word	0x00003b21

000071b4 <mqtt_recved_packet>:
    71b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    71b6:	1e04      	subs	r4, r0, #0
    71b8:	d042      	beq.n	7240 <mqtt_recved_packet+0x8c>
    71ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
    71bc:	6e67      	ldr	r7, [r4, #100]	; 0x64
    71be:	18ca      	adds	r2, r1, r3
    71c0:	2301      	movs	r3, #1
    71c2:	9701      	str	r7, [sp, #4]
    71c4:	6462      	str	r2, [r4, #68]	; 0x44
    71c6:	2600      	movs	r6, #0
    71c8:	1c1d      	adds	r5, r3, #0
    71ca:	42a9      	cmp	r1, r5
    71cc:	dc03      	bgt.n	71d6 <mqtt_recved_packet+0x22>
    71ce:	1c20      	adds	r0, r4, #0
    71d0:	4b1c      	ldr	r3, [pc, #112]	; (7244 <mqtt_recved_packet+0x90>)
    71d2:	4798      	blx	r3
    71d4:	e034      	b.n	7240 <mqtt_recved_packet+0x8c>
    71d6:	9f01      	ldr	r7, [sp, #4]
    71d8:	5d78      	ldrb	r0, [r7, r5]
    71da:	01df      	lsls	r7, r3, #7
    71dc:	46bc      	mov	ip, r7
    71de:	2d03      	cmp	r5, #3
    71e0:	d101      	bne.n	71e6 <mqtt_recved_packet+0x32>
    71e2:	234d      	movs	r3, #77	; 0x4d
    71e4:	e00e      	b.n	7204 <mqtt_recved_packet+0x50>
    71e6:	277f      	movs	r7, #127	; 0x7f
    71e8:	4007      	ands	r7, r0
    71ea:	437b      	muls	r3, r7
    71ec:	b240      	sxtb	r0, r0
    71ee:	3501      	adds	r5, #1
    71f0:	18f6      	adds	r6, r6, r3
    71f2:	2800      	cmp	r0, #0
    71f4:	da01      	bge.n	71fa <mqtt_recved_packet+0x46>
    71f6:	4663      	mov	r3, ip
    71f8:	e7e7      	b.n	71ca <mqtt_recved_packet+0x16>
    71fa:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    71fc:	19af      	adds	r7, r5, r6
    71fe:	429f      	cmp	r7, r3
    7200:	d907      	bls.n	7212 <mqtt_recved_packet+0x5e>
    7202:	238b      	movs	r3, #139	; 0x8b
    7204:	425b      	negs	r3, r3
    7206:	64e3      	str	r3, [r4, #76]	; 0x4c
    7208:	1c20      	adds	r0, r4, #0
    720a:	2100      	movs	r1, #0
    720c:	4b0e      	ldr	r3, [pc, #56]	; (7248 <mqtt_recved_packet+0x94>)
    720e:	4798      	blx	r3
    7210:	e016      	b.n	7240 <mqtt_recved_packet+0x8c>
    7212:	42ba      	cmp	r2, r7
    7214:	d314      	bcc.n	7240 <mqtt_recved_packet+0x8c>
    7216:	4b0d      	ldr	r3, [pc, #52]	; (724c <mqtt_recved_packet+0x98>)
    7218:	1c20      	adds	r0, r4, #0
    721a:	1c31      	adds	r1, r6, #0
    721c:	4798      	blx	r3
    721e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    7220:	42bb      	cmp	r3, r7
    7222:	d102      	bne.n	722a <mqtt_recved_packet+0x76>
    7224:	2300      	movs	r3, #0
    7226:	6463      	str	r3, [r4, #68]	; 0x44
    7228:	e00a      	b.n	7240 <mqtt_recved_packet+0x8c>
    722a:	1b9e      	subs	r6, r3, r6
    722c:	9b01      	ldr	r3, [sp, #4]
    722e:	1b75      	subs	r5, r6, r5
    7230:	19d9      	adds	r1, r3, r7
    7232:	1c18      	adds	r0, r3, #0
    7234:	1c2a      	adds	r2, r5, #0
    7236:	4b06      	ldr	r3, [pc, #24]	; (7250 <mqtt_recved_packet+0x9c>)
    7238:	4798      	blx	r3
    723a:	6465      	str	r5, [r4, #68]	; 0x44
    723c:	2100      	movs	r1, #0
    723e:	e7bc      	b.n	71ba <mqtt_recved_packet+0x6>
    7240:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    7242:	46c0      	nop			; (mov r8, r8)
    7244:	00007175 	.word	0x00007175
    7248:	00006f15 	.word	0x00006f15
    724c:	00006fb9 	.word	0x00006fb9
    7250:	000093b3 	.word	0x000093b3

00007254 <mqtt_socket_event_handler>:
    7254:	b570      	push	{r4, r5, r6, lr}
    7256:	4d37      	ldr	r5, [pc, #220]	; (7334 <mqtt_socket_event_handler+0xe0>)
    7258:	0086      	lsls	r6, r0, #2
    725a:	5974      	ldr	r4, [r6, r5]
    725c:	b086      	sub	sp, #24
    725e:	2c00      	cmp	r4, #0
    7260:	d066      	beq.n	7330 <mqtt_socket_event_handler+0xdc>
    7262:	2906      	cmp	r1, #6
    7264:	d02b      	beq.n	72be <mqtt_socket_event_handler+0x6a>
    7266:	2907      	cmp	r1, #7
    7268:	d039      	beq.n	72de <mqtt_socket_event_handler+0x8a>
    726a:	2905      	cmp	r1, #5
    726c:	d160      	bne.n	7330 <mqtt_socket_event_handler+0xdc>
    726e:	2001      	movs	r0, #1
    7270:	5610      	ldrsb	r0, [r2, r0]
    7272:	4b31      	ldr	r3, [pc, #196]	; (7338 <mqtt_socket_event_handler+0xe4>)
    7274:	4798      	blx	r3
    7276:	9001      	str	r0, [sp, #4]
    7278:	2800      	cmp	r0, #0
    727a:	da06      	bge.n	728a <mqtt_socket_event_handler+0x36>
    727c:	2002      	movs	r0, #2
    727e:	4b2f      	ldr	r3, [pc, #188]	; (733c <mqtt_socket_event_handler+0xe8>)
    7280:	5620      	ldrsb	r0, [r4, r0]
    7282:	4798      	blx	r3
    7284:	2300      	movs	r3, #0
    7286:	5173      	str	r3, [r6, r5]
    7288:	e011      	b.n	72ae <mqtt_socket_event_handler+0x5a>
    728a:	1c23      	adds	r3, r4, #0
    728c:	3343      	adds	r3, #67	; 0x43
    728e:	781a      	ldrb	r2, [r3, #0]
    7290:	2101      	movs	r1, #1
    7292:	430a      	orrs	r2, r1
    7294:	701a      	strb	r2, [r3, #0]
    7296:	331d      	adds	r3, #29
    7298:	881b      	ldrh	r3, [r3, #0]
    729a:	2b00      	cmp	r3, #0
    729c:	d004      	beq.n	72a8 <mqtt_socket_event_handler+0x54>
    729e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    72a0:	6d21      	ldr	r1, [r4, #80]	; 0x50
    72a2:	2200      	movs	r2, #0
    72a4:	4b26      	ldr	r3, [pc, #152]	; (7340 <mqtt_socket_event_handler+0xec>)
    72a6:	4798      	blx	r3
    72a8:	1c20      	adds	r0, r4, #0
    72aa:	4b26      	ldr	r3, [pc, #152]	; (7344 <mqtt_socket_event_handler+0xf0>)
    72ac:	4798      	blx	r3
    72ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
    72b0:	2b00      	cmp	r3, #0
    72b2:	d03d      	beq.n	7330 <mqtt_socket_event_handler+0xdc>
    72b4:	1c20      	adds	r0, r4, #0
    72b6:	2100      	movs	r1, #0
    72b8:	aa01      	add	r2, sp, #4
    72ba:	4798      	blx	r3
    72bc:	e038      	b.n	7330 <mqtt_socket_event_handler+0xdc>
    72be:	2304      	movs	r3, #4
    72c0:	5ed1      	ldrsh	r1, [r2, r3]
    72c2:	2900      	cmp	r1, #0
    72c4:	dd03      	ble.n	72ce <mqtt_socket_event_handler+0x7a>
    72c6:	1c20      	adds	r0, r4, #0
    72c8:	4b1f      	ldr	r3, [pc, #124]	; (7348 <mqtt_socket_event_handler+0xf4>)
    72ca:	4798      	blx	r3
    72cc:	e003      	b.n	72d6 <mqtt_socket_event_handler+0x82>
    72ce:	1c0b      	adds	r3, r1, #0
    72d0:	1c08      	adds	r0, r1, #0
    72d2:	330d      	adds	r3, #13
    72d4:	d11a      	bne.n	730c <mqtt_socket_event_handler+0xb8>
    72d6:	4b1b      	ldr	r3, [pc, #108]	; (7344 <mqtt_socket_event_handler+0xf0>)
    72d8:	1c20      	adds	r0, r4, #0
    72da:	4798      	blx	r3
    72dc:	e028      	b.n	7330 <mqtt_socket_event_handler+0xdc>
    72de:	1c23      	adds	r3, r4, #0
    72e0:	3343      	adds	r3, #67	; 0x43
    72e2:	8810      	ldrh	r0, [r2, #0]
    72e4:	781a      	ldrb	r2, [r3, #0]
    72e6:	0751      	lsls	r1, r2, #29
    72e8:	d402      	bmi.n	72f0 <mqtt_socket_event_handler+0x9c>
    72ea:	2108      	movs	r1, #8
    72ec:	438a      	bics	r2, r1
    72ee:	701a      	strb	r2, [r3, #0]
    72f0:	781a      	ldrb	r2, [r3, #0]
    72f2:	2104      	movs	r1, #4
    72f4:	438a      	bics	r2, r1
    72f6:	701a      	strb	r2, [r3, #0]
    72f8:	06d3      	lsls	r3, r2, #27
    72fa:	0fde      	lsrs	r6, r3, #31
    72fc:	b200      	sxth	r0, r0
    72fe:	2b00      	cmp	r3, #0
    7300:	db02      	blt.n	7308 <mqtt_socket_event_handler+0xb4>
    7302:	2800      	cmp	r0, #0
    7304:	da08      	bge.n	7318 <mqtt_socket_event_handler+0xc4>
    7306:	e001      	b.n	730c <mqtt_socket_event_handler+0xb8>
    7308:	2800      	cmp	r0, #0
    730a:	da02      	bge.n	7312 <mqtt_socket_event_handler+0xbe>
    730c:	4b0a      	ldr	r3, [pc, #40]	; (7338 <mqtt_socket_event_handler+0xe4>)
    730e:	4798      	blx	r3
    7310:	64e0      	str	r0, [r4, #76]	; 0x4c
    7312:	1c20      	adds	r0, r4, #0
    7314:	4b0d      	ldr	r3, [pc, #52]	; (734c <mqtt_socket_event_handler+0xf8>)
    7316:	e7e0      	b.n	72da <mqtt_socket_event_handler+0x86>
    7318:	1c25      	adds	r5, r4, #0
    731a:	3548      	adds	r5, #72	; 0x48
    731c:	7829      	ldrb	r1, [r5, #0]
    731e:	2900      	cmp	r1, #0
    7320:	d006      	beq.n	7330 <mqtt_socket_event_handler+0xdc>
    7322:	1c23      	adds	r3, r4, #0
    7324:	334a      	adds	r3, #74	; 0x4a
    7326:	881a      	ldrh	r2, [r3, #0]
    7328:	1c20      	adds	r0, r4, #0
    732a:	4b09      	ldr	r3, [pc, #36]	; (7350 <mqtt_socket_event_handler+0xfc>)
    732c:	4798      	blx	r3
    732e:	702e      	strb	r6, [r5, #0]
    7330:	b006      	add	sp, #24
    7332:	bd70      	pop	{r4, r5, r6, pc}
    7334:	20000254 	.word	0x20000254
    7338:	000066ed 	.word	0x000066ed
    733c:	00003bb5 	.word	0x00003bb5
    7340:	000060f5 	.word	0x000060f5
    7344:	00007175 	.word	0x00007175
    7348:	000071b5 	.word	0x000071b5
    734c:	00006ec5 	.word	0x00006ec5
    7350:	00006e61 	.word	0x00006e61

00007354 <__gnu_thumb1_case_uqi>:
    7354:	b402      	push	{r1}
    7356:	4671      	mov	r1, lr
    7358:	0849      	lsrs	r1, r1, #1
    735a:	0049      	lsls	r1, r1, #1
    735c:	5c09      	ldrb	r1, [r1, r0]
    735e:	0049      	lsls	r1, r1, #1
    7360:	448e      	add	lr, r1
    7362:	bc02      	pop	{r1}
    7364:	4770      	bx	lr
    7366:	46c0      	nop			; (mov r8, r8)

00007368 <__udivsi3>:
    7368:	2200      	movs	r2, #0
    736a:	0843      	lsrs	r3, r0, #1
    736c:	428b      	cmp	r3, r1
    736e:	d374      	bcc.n	745a <__udivsi3+0xf2>
    7370:	0903      	lsrs	r3, r0, #4
    7372:	428b      	cmp	r3, r1
    7374:	d35f      	bcc.n	7436 <__udivsi3+0xce>
    7376:	0a03      	lsrs	r3, r0, #8
    7378:	428b      	cmp	r3, r1
    737a:	d344      	bcc.n	7406 <__udivsi3+0x9e>
    737c:	0b03      	lsrs	r3, r0, #12
    737e:	428b      	cmp	r3, r1
    7380:	d328      	bcc.n	73d4 <__udivsi3+0x6c>
    7382:	0c03      	lsrs	r3, r0, #16
    7384:	428b      	cmp	r3, r1
    7386:	d30d      	bcc.n	73a4 <__udivsi3+0x3c>
    7388:	22ff      	movs	r2, #255	; 0xff
    738a:	0209      	lsls	r1, r1, #8
    738c:	ba12      	rev	r2, r2
    738e:	0c03      	lsrs	r3, r0, #16
    7390:	428b      	cmp	r3, r1
    7392:	d302      	bcc.n	739a <__udivsi3+0x32>
    7394:	1212      	asrs	r2, r2, #8
    7396:	0209      	lsls	r1, r1, #8
    7398:	d065      	beq.n	7466 <__udivsi3+0xfe>
    739a:	0b03      	lsrs	r3, r0, #12
    739c:	428b      	cmp	r3, r1
    739e:	d319      	bcc.n	73d4 <__udivsi3+0x6c>
    73a0:	e000      	b.n	73a4 <__udivsi3+0x3c>
    73a2:	0a09      	lsrs	r1, r1, #8
    73a4:	0bc3      	lsrs	r3, r0, #15
    73a6:	428b      	cmp	r3, r1
    73a8:	d301      	bcc.n	73ae <__udivsi3+0x46>
    73aa:	03cb      	lsls	r3, r1, #15
    73ac:	1ac0      	subs	r0, r0, r3
    73ae:	4152      	adcs	r2, r2
    73b0:	0b83      	lsrs	r3, r0, #14
    73b2:	428b      	cmp	r3, r1
    73b4:	d301      	bcc.n	73ba <__udivsi3+0x52>
    73b6:	038b      	lsls	r3, r1, #14
    73b8:	1ac0      	subs	r0, r0, r3
    73ba:	4152      	adcs	r2, r2
    73bc:	0b43      	lsrs	r3, r0, #13
    73be:	428b      	cmp	r3, r1
    73c0:	d301      	bcc.n	73c6 <__udivsi3+0x5e>
    73c2:	034b      	lsls	r3, r1, #13
    73c4:	1ac0      	subs	r0, r0, r3
    73c6:	4152      	adcs	r2, r2
    73c8:	0b03      	lsrs	r3, r0, #12
    73ca:	428b      	cmp	r3, r1
    73cc:	d301      	bcc.n	73d2 <__udivsi3+0x6a>
    73ce:	030b      	lsls	r3, r1, #12
    73d0:	1ac0      	subs	r0, r0, r3
    73d2:	4152      	adcs	r2, r2
    73d4:	0ac3      	lsrs	r3, r0, #11
    73d6:	428b      	cmp	r3, r1
    73d8:	d301      	bcc.n	73de <__udivsi3+0x76>
    73da:	02cb      	lsls	r3, r1, #11
    73dc:	1ac0      	subs	r0, r0, r3
    73de:	4152      	adcs	r2, r2
    73e0:	0a83      	lsrs	r3, r0, #10
    73e2:	428b      	cmp	r3, r1
    73e4:	d301      	bcc.n	73ea <__udivsi3+0x82>
    73e6:	028b      	lsls	r3, r1, #10
    73e8:	1ac0      	subs	r0, r0, r3
    73ea:	4152      	adcs	r2, r2
    73ec:	0a43      	lsrs	r3, r0, #9
    73ee:	428b      	cmp	r3, r1
    73f0:	d301      	bcc.n	73f6 <__udivsi3+0x8e>
    73f2:	024b      	lsls	r3, r1, #9
    73f4:	1ac0      	subs	r0, r0, r3
    73f6:	4152      	adcs	r2, r2
    73f8:	0a03      	lsrs	r3, r0, #8
    73fa:	428b      	cmp	r3, r1
    73fc:	d301      	bcc.n	7402 <__udivsi3+0x9a>
    73fe:	020b      	lsls	r3, r1, #8
    7400:	1ac0      	subs	r0, r0, r3
    7402:	4152      	adcs	r2, r2
    7404:	d2cd      	bcs.n	73a2 <__udivsi3+0x3a>
    7406:	09c3      	lsrs	r3, r0, #7
    7408:	428b      	cmp	r3, r1
    740a:	d301      	bcc.n	7410 <__udivsi3+0xa8>
    740c:	01cb      	lsls	r3, r1, #7
    740e:	1ac0      	subs	r0, r0, r3
    7410:	4152      	adcs	r2, r2
    7412:	0983      	lsrs	r3, r0, #6
    7414:	428b      	cmp	r3, r1
    7416:	d301      	bcc.n	741c <__udivsi3+0xb4>
    7418:	018b      	lsls	r3, r1, #6
    741a:	1ac0      	subs	r0, r0, r3
    741c:	4152      	adcs	r2, r2
    741e:	0943      	lsrs	r3, r0, #5
    7420:	428b      	cmp	r3, r1
    7422:	d301      	bcc.n	7428 <__udivsi3+0xc0>
    7424:	014b      	lsls	r3, r1, #5
    7426:	1ac0      	subs	r0, r0, r3
    7428:	4152      	adcs	r2, r2
    742a:	0903      	lsrs	r3, r0, #4
    742c:	428b      	cmp	r3, r1
    742e:	d301      	bcc.n	7434 <__udivsi3+0xcc>
    7430:	010b      	lsls	r3, r1, #4
    7432:	1ac0      	subs	r0, r0, r3
    7434:	4152      	adcs	r2, r2
    7436:	08c3      	lsrs	r3, r0, #3
    7438:	428b      	cmp	r3, r1
    743a:	d301      	bcc.n	7440 <__udivsi3+0xd8>
    743c:	00cb      	lsls	r3, r1, #3
    743e:	1ac0      	subs	r0, r0, r3
    7440:	4152      	adcs	r2, r2
    7442:	0883      	lsrs	r3, r0, #2
    7444:	428b      	cmp	r3, r1
    7446:	d301      	bcc.n	744c <__udivsi3+0xe4>
    7448:	008b      	lsls	r3, r1, #2
    744a:	1ac0      	subs	r0, r0, r3
    744c:	4152      	adcs	r2, r2
    744e:	0843      	lsrs	r3, r0, #1
    7450:	428b      	cmp	r3, r1
    7452:	d301      	bcc.n	7458 <__udivsi3+0xf0>
    7454:	004b      	lsls	r3, r1, #1
    7456:	1ac0      	subs	r0, r0, r3
    7458:	4152      	adcs	r2, r2
    745a:	1a41      	subs	r1, r0, r1
    745c:	d200      	bcs.n	7460 <__udivsi3+0xf8>
    745e:	4601      	mov	r1, r0
    7460:	4152      	adcs	r2, r2
    7462:	4610      	mov	r0, r2
    7464:	4770      	bx	lr
    7466:	e7ff      	b.n	7468 <__udivsi3+0x100>
    7468:	b501      	push	{r0, lr}
    746a:	2000      	movs	r0, #0
    746c:	f000 f8f0 	bl	7650 <__aeabi_idiv0>
    7470:	bd02      	pop	{r1, pc}
    7472:	46c0      	nop			; (mov r8, r8)

00007474 <__aeabi_uidivmod>:
    7474:	2900      	cmp	r1, #0
    7476:	d0f7      	beq.n	7468 <__udivsi3+0x100>
    7478:	e776      	b.n	7368 <__udivsi3>
    747a:	4770      	bx	lr

0000747c <__divsi3>:
    747c:	4603      	mov	r3, r0
    747e:	430b      	orrs	r3, r1
    7480:	d47f      	bmi.n	7582 <__divsi3+0x106>
    7482:	2200      	movs	r2, #0
    7484:	0843      	lsrs	r3, r0, #1
    7486:	428b      	cmp	r3, r1
    7488:	d374      	bcc.n	7574 <__divsi3+0xf8>
    748a:	0903      	lsrs	r3, r0, #4
    748c:	428b      	cmp	r3, r1
    748e:	d35f      	bcc.n	7550 <__divsi3+0xd4>
    7490:	0a03      	lsrs	r3, r0, #8
    7492:	428b      	cmp	r3, r1
    7494:	d344      	bcc.n	7520 <__divsi3+0xa4>
    7496:	0b03      	lsrs	r3, r0, #12
    7498:	428b      	cmp	r3, r1
    749a:	d328      	bcc.n	74ee <__divsi3+0x72>
    749c:	0c03      	lsrs	r3, r0, #16
    749e:	428b      	cmp	r3, r1
    74a0:	d30d      	bcc.n	74be <__divsi3+0x42>
    74a2:	22ff      	movs	r2, #255	; 0xff
    74a4:	0209      	lsls	r1, r1, #8
    74a6:	ba12      	rev	r2, r2
    74a8:	0c03      	lsrs	r3, r0, #16
    74aa:	428b      	cmp	r3, r1
    74ac:	d302      	bcc.n	74b4 <__divsi3+0x38>
    74ae:	1212      	asrs	r2, r2, #8
    74b0:	0209      	lsls	r1, r1, #8
    74b2:	d065      	beq.n	7580 <__divsi3+0x104>
    74b4:	0b03      	lsrs	r3, r0, #12
    74b6:	428b      	cmp	r3, r1
    74b8:	d319      	bcc.n	74ee <__divsi3+0x72>
    74ba:	e000      	b.n	74be <__divsi3+0x42>
    74bc:	0a09      	lsrs	r1, r1, #8
    74be:	0bc3      	lsrs	r3, r0, #15
    74c0:	428b      	cmp	r3, r1
    74c2:	d301      	bcc.n	74c8 <__divsi3+0x4c>
    74c4:	03cb      	lsls	r3, r1, #15
    74c6:	1ac0      	subs	r0, r0, r3
    74c8:	4152      	adcs	r2, r2
    74ca:	0b83      	lsrs	r3, r0, #14
    74cc:	428b      	cmp	r3, r1
    74ce:	d301      	bcc.n	74d4 <__divsi3+0x58>
    74d0:	038b      	lsls	r3, r1, #14
    74d2:	1ac0      	subs	r0, r0, r3
    74d4:	4152      	adcs	r2, r2
    74d6:	0b43      	lsrs	r3, r0, #13
    74d8:	428b      	cmp	r3, r1
    74da:	d301      	bcc.n	74e0 <__divsi3+0x64>
    74dc:	034b      	lsls	r3, r1, #13
    74de:	1ac0      	subs	r0, r0, r3
    74e0:	4152      	adcs	r2, r2
    74e2:	0b03      	lsrs	r3, r0, #12
    74e4:	428b      	cmp	r3, r1
    74e6:	d301      	bcc.n	74ec <__divsi3+0x70>
    74e8:	030b      	lsls	r3, r1, #12
    74ea:	1ac0      	subs	r0, r0, r3
    74ec:	4152      	adcs	r2, r2
    74ee:	0ac3      	lsrs	r3, r0, #11
    74f0:	428b      	cmp	r3, r1
    74f2:	d301      	bcc.n	74f8 <__divsi3+0x7c>
    74f4:	02cb      	lsls	r3, r1, #11
    74f6:	1ac0      	subs	r0, r0, r3
    74f8:	4152      	adcs	r2, r2
    74fa:	0a83      	lsrs	r3, r0, #10
    74fc:	428b      	cmp	r3, r1
    74fe:	d301      	bcc.n	7504 <__divsi3+0x88>
    7500:	028b      	lsls	r3, r1, #10
    7502:	1ac0      	subs	r0, r0, r3
    7504:	4152      	adcs	r2, r2
    7506:	0a43      	lsrs	r3, r0, #9
    7508:	428b      	cmp	r3, r1
    750a:	d301      	bcc.n	7510 <__divsi3+0x94>
    750c:	024b      	lsls	r3, r1, #9
    750e:	1ac0      	subs	r0, r0, r3
    7510:	4152      	adcs	r2, r2
    7512:	0a03      	lsrs	r3, r0, #8
    7514:	428b      	cmp	r3, r1
    7516:	d301      	bcc.n	751c <__divsi3+0xa0>
    7518:	020b      	lsls	r3, r1, #8
    751a:	1ac0      	subs	r0, r0, r3
    751c:	4152      	adcs	r2, r2
    751e:	d2cd      	bcs.n	74bc <__divsi3+0x40>
    7520:	09c3      	lsrs	r3, r0, #7
    7522:	428b      	cmp	r3, r1
    7524:	d301      	bcc.n	752a <__divsi3+0xae>
    7526:	01cb      	lsls	r3, r1, #7
    7528:	1ac0      	subs	r0, r0, r3
    752a:	4152      	adcs	r2, r2
    752c:	0983      	lsrs	r3, r0, #6
    752e:	428b      	cmp	r3, r1
    7530:	d301      	bcc.n	7536 <__divsi3+0xba>
    7532:	018b      	lsls	r3, r1, #6
    7534:	1ac0      	subs	r0, r0, r3
    7536:	4152      	adcs	r2, r2
    7538:	0943      	lsrs	r3, r0, #5
    753a:	428b      	cmp	r3, r1
    753c:	d301      	bcc.n	7542 <__divsi3+0xc6>
    753e:	014b      	lsls	r3, r1, #5
    7540:	1ac0      	subs	r0, r0, r3
    7542:	4152      	adcs	r2, r2
    7544:	0903      	lsrs	r3, r0, #4
    7546:	428b      	cmp	r3, r1
    7548:	d301      	bcc.n	754e <__divsi3+0xd2>
    754a:	010b      	lsls	r3, r1, #4
    754c:	1ac0      	subs	r0, r0, r3
    754e:	4152      	adcs	r2, r2
    7550:	08c3      	lsrs	r3, r0, #3
    7552:	428b      	cmp	r3, r1
    7554:	d301      	bcc.n	755a <__divsi3+0xde>
    7556:	00cb      	lsls	r3, r1, #3
    7558:	1ac0      	subs	r0, r0, r3
    755a:	4152      	adcs	r2, r2
    755c:	0883      	lsrs	r3, r0, #2
    755e:	428b      	cmp	r3, r1
    7560:	d301      	bcc.n	7566 <__divsi3+0xea>
    7562:	008b      	lsls	r3, r1, #2
    7564:	1ac0      	subs	r0, r0, r3
    7566:	4152      	adcs	r2, r2
    7568:	0843      	lsrs	r3, r0, #1
    756a:	428b      	cmp	r3, r1
    756c:	d301      	bcc.n	7572 <__divsi3+0xf6>
    756e:	004b      	lsls	r3, r1, #1
    7570:	1ac0      	subs	r0, r0, r3
    7572:	4152      	adcs	r2, r2
    7574:	1a41      	subs	r1, r0, r1
    7576:	d200      	bcs.n	757a <__divsi3+0xfe>
    7578:	4601      	mov	r1, r0
    757a:	4152      	adcs	r2, r2
    757c:	4610      	mov	r0, r2
    757e:	4770      	bx	lr
    7580:	e05d      	b.n	763e <__divsi3+0x1c2>
    7582:	0fca      	lsrs	r2, r1, #31
    7584:	d000      	beq.n	7588 <__divsi3+0x10c>
    7586:	4249      	negs	r1, r1
    7588:	1003      	asrs	r3, r0, #32
    758a:	d300      	bcc.n	758e <__divsi3+0x112>
    758c:	4240      	negs	r0, r0
    758e:	4053      	eors	r3, r2
    7590:	2200      	movs	r2, #0
    7592:	469c      	mov	ip, r3
    7594:	0903      	lsrs	r3, r0, #4
    7596:	428b      	cmp	r3, r1
    7598:	d32d      	bcc.n	75f6 <__divsi3+0x17a>
    759a:	0a03      	lsrs	r3, r0, #8
    759c:	428b      	cmp	r3, r1
    759e:	d312      	bcc.n	75c6 <__divsi3+0x14a>
    75a0:	22fc      	movs	r2, #252	; 0xfc
    75a2:	0189      	lsls	r1, r1, #6
    75a4:	ba12      	rev	r2, r2
    75a6:	0a03      	lsrs	r3, r0, #8
    75a8:	428b      	cmp	r3, r1
    75aa:	d30c      	bcc.n	75c6 <__divsi3+0x14a>
    75ac:	0189      	lsls	r1, r1, #6
    75ae:	1192      	asrs	r2, r2, #6
    75b0:	428b      	cmp	r3, r1
    75b2:	d308      	bcc.n	75c6 <__divsi3+0x14a>
    75b4:	0189      	lsls	r1, r1, #6
    75b6:	1192      	asrs	r2, r2, #6
    75b8:	428b      	cmp	r3, r1
    75ba:	d304      	bcc.n	75c6 <__divsi3+0x14a>
    75bc:	0189      	lsls	r1, r1, #6
    75be:	d03a      	beq.n	7636 <__divsi3+0x1ba>
    75c0:	1192      	asrs	r2, r2, #6
    75c2:	e000      	b.n	75c6 <__divsi3+0x14a>
    75c4:	0989      	lsrs	r1, r1, #6
    75c6:	09c3      	lsrs	r3, r0, #7
    75c8:	428b      	cmp	r3, r1
    75ca:	d301      	bcc.n	75d0 <__divsi3+0x154>
    75cc:	01cb      	lsls	r3, r1, #7
    75ce:	1ac0      	subs	r0, r0, r3
    75d0:	4152      	adcs	r2, r2
    75d2:	0983      	lsrs	r3, r0, #6
    75d4:	428b      	cmp	r3, r1
    75d6:	d301      	bcc.n	75dc <__divsi3+0x160>
    75d8:	018b      	lsls	r3, r1, #6
    75da:	1ac0      	subs	r0, r0, r3
    75dc:	4152      	adcs	r2, r2
    75de:	0943      	lsrs	r3, r0, #5
    75e0:	428b      	cmp	r3, r1
    75e2:	d301      	bcc.n	75e8 <__divsi3+0x16c>
    75e4:	014b      	lsls	r3, r1, #5
    75e6:	1ac0      	subs	r0, r0, r3
    75e8:	4152      	adcs	r2, r2
    75ea:	0903      	lsrs	r3, r0, #4
    75ec:	428b      	cmp	r3, r1
    75ee:	d301      	bcc.n	75f4 <__divsi3+0x178>
    75f0:	010b      	lsls	r3, r1, #4
    75f2:	1ac0      	subs	r0, r0, r3
    75f4:	4152      	adcs	r2, r2
    75f6:	08c3      	lsrs	r3, r0, #3
    75f8:	428b      	cmp	r3, r1
    75fa:	d301      	bcc.n	7600 <__divsi3+0x184>
    75fc:	00cb      	lsls	r3, r1, #3
    75fe:	1ac0      	subs	r0, r0, r3
    7600:	4152      	adcs	r2, r2
    7602:	0883      	lsrs	r3, r0, #2
    7604:	428b      	cmp	r3, r1
    7606:	d301      	bcc.n	760c <__divsi3+0x190>
    7608:	008b      	lsls	r3, r1, #2
    760a:	1ac0      	subs	r0, r0, r3
    760c:	4152      	adcs	r2, r2
    760e:	d2d9      	bcs.n	75c4 <__divsi3+0x148>
    7610:	0843      	lsrs	r3, r0, #1
    7612:	428b      	cmp	r3, r1
    7614:	d301      	bcc.n	761a <__divsi3+0x19e>
    7616:	004b      	lsls	r3, r1, #1
    7618:	1ac0      	subs	r0, r0, r3
    761a:	4152      	adcs	r2, r2
    761c:	1a41      	subs	r1, r0, r1
    761e:	d200      	bcs.n	7622 <__divsi3+0x1a6>
    7620:	4601      	mov	r1, r0
    7622:	4663      	mov	r3, ip
    7624:	4152      	adcs	r2, r2
    7626:	105b      	asrs	r3, r3, #1
    7628:	4610      	mov	r0, r2
    762a:	d301      	bcc.n	7630 <__divsi3+0x1b4>
    762c:	4240      	negs	r0, r0
    762e:	2b00      	cmp	r3, #0
    7630:	d500      	bpl.n	7634 <__divsi3+0x1b8>
    7632:	4249      	negs	r1, r1
    7634:	4770      	bx	lr
    7636:	4663      	mov	r3, ip
    7638:	105b      	asrs	r3, r3, #1
    763a:	d300      	bcc.n	763e <__divsi3+0x1c2>
    763c:	4240      	negs	r0, r0
    763e:	b501      	push	{r0, lr}
    7640:	2000      	movs	r0, #0
    7642:	f000 f805 	bl	7650 <__aeabi_idiv0>
    7646:	bd02      	pop	{r1, pc}

00007648 <__aeabi_idivmod>:
    7648:	2900      	cmp	r1, #0
    764a:	d0f8      	beq.n	763e <__divsi3+0x1c2>
    764c:	e716      	b.n	747c <__divsi3>
    764e:	4770      	bx	lr

00007650 <__aeabi_idiv0>:
    7650:	4770      	bx	lr
    7652:	46c0      	nop			; (mov r8, r8)

00007654 <__aeabi_lmul>:
    7654:	b5f0      	push	{r4, r5, r6, r7, lr}
    7656:	46ce      	mov	lr, r9
    7658:	4647      	mov	r7, r8
    765a:	0415      	lsls	r5, r2, #16
    765c:	0c2d      	lsrs	r5, r5, #16
    765e:	002e      	movs	r6, r5
    7660:	b580      	push	{r7, lr}
    7662:	0407      	lsls	r7, r0, #16
    7664:	0c14      	lsrs	r4, r2, #16
    7666:	0c3f      	lsrs	r7, r7, #16
    7668:	4699      	mov	r9, r3
    766a:	0c03      	lsrs	r3, r0, #16
    766c:	437e      	muls	r6, r7
    766e:	435d      	muls	r5, r3
    7670:	4367      	muls	r7, r4
    7672:	4363      	muls	r3, r4
    7674:	197f      	adds	r7, r7, r5
    7676:	0c34      	lsrs	r4, r6, #16
    7678:	19e4      	adds	r4, r4, r7
    767a:	469c      	mov	ip, r3
    767c:	42a5      	cmp	r5, r4
    767e:	d903      	bls.n	7688 <__aeabi_lmul+0x34>
    7680:	2380      	movs	r3, #128	; 0x80
    7682:	025b      	lsls	r3, r3, #9
    7684:	4698      	mov	r8, r3
    7686:	44c4      	add	ip, r8
    7688:	464b      	mov	r3, r9
    768a:	4351      	muls	r1, r2
    768c:	4343      	muls	r3, r0
    768e:	0436      	lsls	r6, r6, #16
    7690:	0c36      	lsrs	r6, r6, #16
    7692:	0c25      	lsrs	r5, r4, #16
    7694:	0424      	lsls	r4, r4, #16
    7696:	4465      	add	r5, ip
    7698:	19a4      	adds	r4, r4, r6
    769a:	1859      	adds	r1, r3, r1
    769c:	1949      	adds	r1, r1, r5
    769e:	0020      	movs	r0, r4
    76a0:	bc0c      	pop	{r2, r3}
    76a2:	4690      	mov	r8, r2
    76a4:	4699      	mov	r9, r3
    76a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000076a8 <__aeabi_fdiv>:
    76a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    76aa:	4657      	mov	r7, sl
    76ac:	464e      	mov	r6, r9
    76ae:	46de      	mov	lr, fp
    76b0:	4645      	mov	r5, r8
    76b2:	b5e0      	push	{r5, r6, r7, lr}
    76b4:	0244      	lsls	r4, r0, #9
    76b6:	0043      	lsls	r3, r0, #1
    76b8:	0fc6      	lsrs	r6, r0, #31
    76ba:	b083      	sub	sp, #12
    76bc:	1c0f      	adds	r7, r1, #0
    76be:	0a64      	lsrs	r4, r4, #9
    76c0:	0e1b      	lsrs	r3, r3, #24
    76c2:	46b2      	mov	sl, r6
    76c4:	d053      	beq.n	776e <__aeabi_fdiv+0xc6>
    76c6:	2bff      	cmp	r3, #255	; 0xff
    76c8:	d027      	beq.n	771a <__aeabi_fdiv+0x72>
    76ca:	2280      	movs	r2, #128	; 0x80
    76cc:	00e4      	lsls	r4, r4, #3
    76ce:	04d2      	lsls	r2, r2, #19
    76d0:	4314      	orrs	r4, r2
    76d2:	227f      	movs	r2, #127	; 0x7f
    76d4:	4252      	negs	r2, r2
    76d6:	4690      	mov	r8, r2
    76d8:	4498      	add	r8, r3
    76da:	2300      	movs	r3, #0
    76dc:	4699      	mov	r9, r3
    76de:	469b      	mov	fp, r3
    76e0:	027d      	lsls	r5, r7, #9
    76e2:	0078      	lsls	r0, r7, #1
    76e4:	0ffb      	lsrs	r3, r7, #31
    76e6:	0a6d      	lsrs	r5, r5, #9
    76e8:	0e00      	lsrs	r0, r0, #24
    76ea:	9300      	str	r3, [sp, #0]
    76ec:	d024      	beq.n	7738 <__aeabi_fdiv+0x90>
    76ee:	28ff      	cmp	r0, #255	; 0xff
    76f0:	d046      	beq.n	7780 <__aeabi_fdiv+0xd8>
    76f2:	2380      	movs	r3, #128	; 0x80
    76f4:	2100      	movs	r1, #0
    76f6:	00ed      	lsls	r5, r5, #3
    76f8:	04db      	lsls	r3, r3, #19
    76fa:	431d      	orrs	r5, r3
    76fc:	387f      	subs	r0, #127	; 0x7f
    76fe:	4647      	mov	r7, r8
    7700:	1a38      	subs	r0, r7, r0
    7702:	464f      	mov	r7, r9
    7704:	430f      	orrs	r7, r1
    7706:	00bf      	lsls	r7, r7, #2
    7708:	46b9      	mov	r9, r7
    770a:	0033      	movs	r3, r6
    770c:	9a00      	ldr	r2, [sp, #0]
    770e:	4f87      	ldr	r7, [pc, #540]	; (792c <__aeabi_fdiv+0x284>)
    7710:	4053      	eors	r3, r2
    7712:	464a      	mov	r2, r9
    7714:	58ba      	ldr	r2, [r7, r2]
    7716:	9301      	str	r3, [sp, #4]
    7718:	4697      	mov	pc, r2
    771a:	2c00      	cmp	r4, #0
    771c:	d14e      	bne.n	77bc <__aeabi_fdiv+0x114>
    771e:	2308      	movs	r3, #8
    7720:	4699      	mov	r9, r3
    7722:	33f7      	adds	r3, #247	; 0xf7
    7724:	4698      	mov	r8, r3
    7726:	3bfd      	subs	r3, #253	; 0xfd
    7728:	469b      	mov	fp, r3
    772a:	027d      	lsls	r5, r7, #9
    772c:	0078      	lsls	r0, r7, #1
    772e:	0ffb      	lsrs	r3, r7, #31
    7730:	0a6d      	lsrs	r5, r5, #9
    7732:	0e00      	lsrs	r0, r0, #24
    7734:	9300      	str	r3, [sp, #0]
    7736:	d1da      	bne.n	76ee <__aeabi_fdiv+0x46>
    7738:	2d00      	cmp	r5, #0
    773a:	d126      	bne.n	778a <__aeabi_fdiv+0xe2>
    773c:	2000      	movs	r0, #0
    773e:	2101      	movs	r1, #1
    7740:	0033      	movs	r3, r6
    7742:	9a00      	ldr	r2, [sp, #0]
    7744:	4f7a      	ldr	r7, [pc, #488]	; (7930 <__aeabi_fdiv+0x288>)
    7746:	4053      	eors	r3, r2
    7748:	4642      	mov	r2, r8
    774a:	1a10      	subs	r0, r2, r0
    774c:	464a      	mov	r2, r9
    774e:	430a      	orrs	r2, r1
    7750:	0092      	lsls	r2, r2, #2
    7752:	58ba      	ldr	r2, [r7, r2]
    7754:	001d      	movs	r5, r3
    7756:	4697      	mov	pc, r2
    7758:	9b00      	ldr	r3, [sp, #0]
    775a:	002c      	movs	r4, r5
    775c:	469a      	mov	sl, r3
    775e:	468b      	mov	fp, r1
    7760:	465b      	mov	r3, fp
    7762:	2b02      	cmp	r3, #2
    7764:	d131      	bne.n	77ca <__aeabi_fdiv+0x122>
    7766:	4653      	mov	r3, sl
    7768:	21ff      	movs	r1, #255	; 0xff
    776a:	2400      	movs	r4, #0
    776c:	e038      	b.n	77e0 <__aeabi_fdiv+0x138>
    776e:	2c00      	cmp	r4, #0
    7770:	d117      	bne.n	77a2 <__aeabi_fdiv+0xfa>
    7772:	2304      	movs	r3, #4
    7774:	4699      	mov	r9, r3
    7776:	2300      	movs	r3, #0
    7778:	4698      	mov	r8, r3
    777a:	3301      	adds	r3, #1
    777c:	469b      	mov	fp, r3
    777e:	e7af      	b.n	76e0 <__aeabi_fdiv+0x38>
    7780:	20ff      	movs	r0, #255	; 0xff
    7782:	2d00      	cmp	r5, #0
    7784:	d10b      	bne.n	779e <__aeabi_fdiv+0xf6>
    7786:	2102      	movs	r1, #2
    7788:	e7da      	b.n	7740 <__aeabi_fdiv+0x98>
    778a:	0028      	movs	r0, r5
    778c:	f001 fdbc 	bl	9308 <__clzsi2>
    7790:	1f43      	subs	r3, r0, #5
    7792:	409d      	lsls	r5, r3
    7794:	2376      	movs	r3, #118	; 0x76
    7796:	425b      	negs	r3, r3
    7798:	1a18      	subs	r0, r3, r0
    779a:	2100      	movs	r1, #0
    779c:	e7af      	b.n	76fe <__aeabi_fdiv+0x56>
    779e:	2103      	movs	r1, #3
    77a0:	e7ad      	b.n	76fe <__aeabi_fdiv+0x56>
    77a2:	0020      	movs	r0, r4
    77a4:	f001 fdb0 	bl	9308 <__clzsi2>
    77a8:	1f43      	subs	r3, r0, #5
    77aa:	409c      	lsls	r4, r3
    77ac:	2376      	movs	r3, #118	; 0x76
    77ae:	425b      	negs	r3, r3
    77b0:	1a1b      	subs	r3, r3, r0
    77b2:	4698      	mov	r8, r3
    77b4:	2300      	movs	r3, #0
    77b6:	4699      	mov	r9, r3
    77b8:	469b      	mov	fp, r3
    77ba:	e791      	b.n	76e0 <__aeabi_fdiv+0x38>
    77bc:	230c      	movs	r3, #12
    77be:	4699      	mov	r9, r3
    77c0:	33f3      	adds	r3, #243	; 0xf3
    77c2:	4698      	mov	r8, r3
    77c4:	3bfc      	subs	r3, #252	; 0xfc
    77c6:	469b      	mov	fp, r3
    77c8:	e78a      	b.n	76e0 <__aeabi_fdiv+0x38>
    77ca:	2b03      	cmp	r3, #3
    77cc:	d100      	bne.n	77d0 <__aeabi_fdiv+0x128>
    77ce:	e0a5      	b.n	791c <__aeabi_fdiv+0x274>
    77d0:	4655      	mov	r5, sl
    77d2:	2b01      	cmp	r3, #1
    77d4:	d000      	beq.n	77d8 <__aeabi_fdiv+0x130>
    77d6:	e081      	b.n	78dc <__aeabi_fdiv+0x234>
    77d8:	2301      	movs	r3, #1
    77da:	2100      	movs	r1, #0
    77dc:	2400      	movs	r4, #0
    77de:	402b      	ands	r3, r5
    77e0:	0264      	lsls	r4, r4, #9
    77e2:	05c9      	lsls	r1, r1, #23
    77e4:	0a60      	lsrs	r0, r4, #9
    77e6:	07db      	lsls	r3, r3, #31
    77e8:	4308      	orrs	r0, r1
    77ea:	4318      	orrs	r0, r3
    77ec:	b003      	add	sp, #12
    77ee:	bc3c      	pop	{r2, r3, r4, r5}
    77f0:	4690      	mov	r8, r2
    77f2:	4699      	mov	r9, r3
    77f4:	46a2      	mov	sl, r4
    77f6:	46ab      	mov	fp, r5
    77f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    77fa:	2480      	movs	r4, #128	; 0x80
    77fc:	2300      	movs	r3, #0
    77fe:	03e4      	lsls	r4, r4, #15
    7800:	21ff      	movs	r1, #255	; 0xff
    7802:	e7ed      	b.n	77e0 <__aeabi_fdiv+0x138>
    7804:	21ff      	movs	r1, #255	; 0xff
    7806:	2400      	movs	r4, #0
    7808:	e7ea      	b.n	77e0 <__aeabi_fdiv+0x138>
    780a:	2301      	movs	r3, #1
    780c:	1a59      	subs	r1, r3, r1
    780e:	291b      	cmp	r1, #27
    7810:	dd66      	ble.n	78e0 <__aeabi_fdiv+0x238>
    7812:	9a01      	ldr	r2, [sp, #4]
    7814:	4013      	ands	r3, r2
    7816:	2100      	movs	r1, #0
    7818:	2400      	movs	r4, #0
    781a:	e7e1      	b.n	77e0 <__aeabi_fdiv+0x138>
    781c:	2380      	movs	r3, #128	; 0x80
    781e:	03db      	lsls	r3, r3, #15
    7820:	421c      	tst	r4, r3
    7822:	d038      	beq.n	7896 <__aeabi_fdiv+0x1ee>
    7824:	421d      	tst	r5, r3
    7826:	d051      	beq.n	78cc <__aeabi_fdiv+0x224>
    7828:	431c      	orrs	r4, r3
    782a:	0264      	lsls	r4, r4, #9
    782c:	0a64      	lsrs	r4, r4, #9
    782e:	0033      	movs	r3, r6
    7830:	21ff      	movs	r1, #255	; 0xff
    7832:	e7d5      	b.n	77e0 <__aeabi_fdiv+0x138>
    7834:	0163      	lsls	r3, r4, #5
    7836:	016c      	lsls	r4, r5, #5
    7838:	42a3      	cmp	r3, r4
    783a:	d23b      	bcs.n	78b4 <__aeabi_fdiv+0x20c>
    783c:	261b      	movs	r6, #27
    783e:	2100      	movs	r1, #0
    7840:	3801      	subs	r0, #1
    7842:	2501      	movs	r5, #1
    7844:	001f      	movs	r7, r3
    7846:	0049      	lsls	r1, r1, #1
    7848:	005b      	lsls	r3, r3, #1
    784a:	2f00      	cmp	r7, #0
    784c:	db01      	blt.n	7852 <__aeabi_fdiv+0x1aa>
    784e:	429c      	cmp	r4, r3
    7850:	d801      	bhi.n	7856 <__aeabi_fdiv+0x1ae>
    7852:	1b1b      	subs	r3, r3, r4
    7854:	4329      	orrs	r1, r5
    7856:	3e01      	subs	r6, #1
    7858:	2e00      	cmp	r6, #0
    785a:	d1f3      	bne.n	7844 <__aeabi_fdiv+0x19c>
    785c:	001c      	movs	r4, r3
    785e:	1e63      	subs	r3, r4, #1
    7860:	419c      	sbcs	r4, r3
    7862:	430c      	orrs	r4, r1
    7864:	0001      	movs	r1, r0
    7866:	317f      	adds	r1, #127	; 0x7f
    7868:	2900      	cmp	r1, #0
    786a:	ddce      	ble.n	780a <__aeabi_fdiv+0x162>
    786c:	0763      	lsls	r3, r4, #29
    786e:	d004      	beq.n	787a <__aeabi_fdiv+0x1d2>
    7870:	230f      	movs	r3, #15
    7872:	4023      	ands	r3, r4
    7874:	2b04      	cmp	r3, #4
    7876:	d000      	beq.n	787a <__aeabi_fdiv+0x1d2>
    7878:	3404      	adds	r4, #4
    787a:	0123      	lsls	r3, r4, #4
    787c:	d503      	bpl.n	7886 <__aeabi_fdiv+0x1de>
    787e:	0001      	movs	r1, r0
    7880:	4b2c      	ldr	r3, [pc, #176]	; (7934 <__aeabi_fdiv+0x28c>)
    7882:	3180      	adds	r1, #128	; 0x80
    7884:	401c      	ands	r4, r3
    7886:	29fe      	cmp	r1, #254	; 0xfe
    7888:	dd0d      	ble.n	78a6 <__aeabi_fdiv+0x1fe>
    788a:	2301      	movs	r3, #1
    788c:	9a01      	ldr	r2, [sp, #4]
    788e:	21ff      	movs	r1, #255	; 0xff
    7890:	4013      	ands	r3, r2
    7892:	2400      	movs	r4, #0
    7894:	e7a4      	b.n	77e0 <__aeabi_fdiv+0x138>
    7896:	2380      	movs	r3, #128	; 0x80
    7898:	03db      	lsls	r3, r3, #15
    789a:	431c      	orrs	r4, r3
    789c:	0264      	lsls	r4, r4, #9
    789e:	0a64      	lsrs	r4, r4, #9
    78a0:	0033      	movs	r3, r6
    78a2:	21ff      	movs	r1, #255	; 0xff
    78a4:	e79c      	b.n	77e0 <__aeabi_fdiv+0x138>
    78a6:	2301      	movs	r3, #1
    78a8:	9a01      	ldr	r2, [sp, #4]
    78aa:	01a4      	lsls	r4, r4, #6
    78ac:	0a64      	lsrs	r4, r4, #9
    78ae:	b2c9      	uxtb	r1, r1
    78b0:	4013      	ands	r3, r2
    78b2:	e795      	b.n	77e0 <__aeabi_fdiv+0x138>
    78b4:	1b1b      	subs	r3, r3, r4
    78b6:	261a      	movs	r6, #26
    78b8:	2101      	movs	r1, #1
    78ba:	e7c2      	b.n	7842 <__aeabi_fdiv+0x19a>
    78bc:	9b00      	ldr	r3, [sp, #0]
    78be:	468b      	mov	fp, r1
    78c0:	469a      	mov	sl, r3
    78c2:	2400      	movs	r4, #0
    78c4:	e74c      	b.n	7760 <__aeabi_fdiv+0xb8>
    78c6:	0263      	lsls	r3, r4, #9
    78c8:	d5e5      	bpl.n	7896 <__aeabi_fdiv+0x1ee>
    78ca:	2500      	movs	r5, #0
    78cc:	2480      	movs	r4, #128	; 0x80
    78ce:	03e4      	lsls	r4, r4, #15
    78d0:	432c      	orrs	r4, r5
    78d2:	0264      	lsls	r4, r4, #9
    78d4:	0a64      	lsrs	r4, r4, #9
    78d6:	9b00      	ldr	r3, [sp, #0]
    78d8:	21ff      	movs	r1, #255	; 0xff
    78da:	e781      	b.n	77e0 <__aeabi_fdiv+0x138>
    78dc:	9501      	str	r5, [sp, #4]
    78de:	e7c1      	b.n	7864 <__aeabi_fdiv+0x1bc>
    78e0:	0023      	movs	r3, r4
    78e2:	2020      	movs	r0, #32
    78e4:	40cb      	lsrs	r3, r1
    78e6:	1a41      	subs	r1, r0, r1
    78e8:	408c      	lsls	r4, r1
    78ea:	1e61      	subs	r1, r4, #1
    78ec:	418c      	sbcs	r4, r1
    78ee:	431c      	orrs	r4, r3
    78f0:	0763      	lsls	r3, r4, #29
    78f2:	d004      	beq.n	78fe <__aeabi_fdiv+0x256>
    78f4:	230f      	movs	r3, #15
    78f6:	4023      	ands	r3, r4
    78f8:	2b04      	cmp	r3, #4
    78fa:	d000      	beq.n	78fe <__aeabi_fdiv+0x256>
    78fc:	3404      	adds	r4, #4
    78fe:	0163      	lsls	r3, r4, #5
    7900:	d505      	bpl.n	790e <__aeabi_fdiv+0x266>
    7902:	2301      	movs	r3, #1
    7904:	9a01      	ldr	r2, [sp, #4]
    7906:	2101      	movs	r1, #1
    7908:	4013      	ands	r3, r2
    790a:	2400      	movs	r4, #0
    790c:	e768      	b.n	77e0 <__aeabi_fdiv+0x138>
    790e:	2301      	movs	r3, #1
    7910:	9a01      	ldr	r2, [sp, #4]
    7912:	01a4      	lsls	r4, r4, #6
    7914:	0a64      	lsrs	r4, r4, #9
    7916:	4013      	ands	r3, r2
    7918:	2100      	movs	r1, #0
    791a:	e761      	b.n	77e0 <__aeabi_fdiv+0x138>
    791c:	2380      	movs	r3, #128	; 0x80
    791e:	03db      	lsls	r3, r3, #15
    7920:	431c      	orrs	r4, r3
    7922:	0264      	lsls	r4, r4, #9
    7924:	0a64      	lsrs	r4, r4, #9
    7926:	4653      	mov	r3, sl
    7928:	21ff      	movs	r1, #255	; 0xff
    792a:	e759      	b.n	77e0 <__aeabi_fdiv+0x138>
    792c:	0000ba98 	.word	0x0000ba98
    7930:	0000bad8 	.word	0x0000bad8
    7934:	f7ffffff 	.word	0xf7ffffff

00007938 <__aeabi_i2f>:
    7938:	b570      	push	{r4, r5, r6, lr}
    793a:	2800      	cmp	r0, #0
    793c:	d030      	beq.n	79a0 <__aeabi_i2f+0x68>
    793e:	17c3      	asrs	r3, r0, #31
    7940:	18c4      	adds	r4, r0, r3
    7942:	405c      	eors	r4, r3
    7944:	0fc5      	lsrs	r5, r0, #31
    7946:	0020      	movs	r0, r4
    7948:	f001 fcde 	bl	9308 <__clzsi2>
    794c:	239e      	movs	r3, #158	; 0x9e
    794e:	1a1b      	subs	r3, r3, r0
    7950:	2b96      	cmp	r3, #150	; 0x96
    7952:	dc0d      	bgt.n	7970 <__aeabi_i2f+0x38>
    7954:	2296      	movs	r2, #150	; 0x96
    7956:	1ad2      	subs	r2, r2, r3
    7958:	4094      	lsls	r4, r2
    795a:	002a      	movs	r2, r5
    795c:	0264      	lsls	r4, r4, #9
    795e:	0a64      	lsrs	r4, r4, #9
    7960:	b2db      	uxtb	r3, r3
    7962:	0264      	lsls	r4, r4, #9
    7964:	05db      	lsls	r3, r3, #23
    7966:	0a60      	lsrs	r0, r4, #9
    7968:	07d2      	lsls	r2, r2, #31
    796a:	4318      	orrs	r0, r3
    796c:	4310      	orrs	r0, r2
    796e:	bd70      	pop	{r4, r5, r6, pc}
    7970:	2b99      	cmp	r3, #153	; 0x99
    7972:	dc19      	bgt.n	79a8 <__aeabi_i2f+0x70>
    7974:	2299      	movs	r2, #153	; 0x99
    7976:	1ad2      	subs	r2, r2, r3
    7978:	2a00      	cmp	r2, #0
    797a:	dd29      	ble.n	79d0 <__aeabi_i2f+0x98>
    797c:	4094      	lsls	r4, r2
    797e:	0022      	movs	r2, r4
    7980:	4c14      	ldr	r4, [pc, #80]	; (79d4 <__aeabi_i2f+0x9c>)
    7982:	4014      	ands	r4, r2
    7984:	0751      	lsls	r1, r2, #29
    7986:	d004      	beq.n	7992 <__aeabi_i2f+0x5a>
    7988:	210f      	movs	r1, #15
    798a:	400a      	ands	r2, r1
    798c:	2a04      	cmp	r2, #4
    798e:	d000      	beq.n	7992 <__aeabi_i2f+0x5a>
    7990:	3404      	adds	r4, #4
    7992:	0162      	lsls	r2, r4, #5
    7994:	d413      	bmi.n	79be <__aeabi_i2f+0x86>
    7996:	01a4      	lsls	r4, r4, #6
    7998:	0a64      	lsrs	r4, r4, #9
    799a:	b2db      	uxtb	r3, r3
    799c:	002a      	movs	r2, r5
    799e:	e7e0      	b.n	7962 <__aeabi_i2f+0x2a>
    79a0:	2200      	movs	r2, #0
    79a2:	2300      	movs	r3, #0
    79a4:	2400      	movs	r4, #0
    79a6:	e7dc      	b.n	7962 <__aeabi_i2f+0x2a>
    79a8:	2205      	movs	r2, #5
    79aa:	0021      	movs	r1, r4
    79ac:	1a12      	subs	r2, r2, r0
    79ae:	40d1      	lsrs	r1, r2
    79b0:	22b9      	movs	r2, #185	; 0xb9
    79b2:	1ad2      	subs	r2, r2, r3
    79b4:	4094      	lsls	r4, r2
    79b6:	1e62      	subs	r2, r4, #1
    79b8:	4194      	sbcs	r4, r2
    79ba:	430c      	orrs	r4, r1
    79bc:	e7da      	b.n	7974 <__aeabi_i2f+0x3c>
    79be:	4b05      	ldr	r3, [pc, #20]	; (79d4 <__aeabi_i2f+0x9c>)
    79c0:	002a      	movs	r2, r5
    79c2:	401c      	ands	r4, r3
    79c4:	239f      	movs	r3, #159	; 0x9f
    79c6:	01a4      	lsls	r4, r4, #6
    79c8:	1a1b      	subs	r3, r3, r0
    79ca:	0a64      	lsrs	r4, r4, #9
    79cc:	b2db      	uxtb	r3, r3
    79ce:	e7c8      	b.n	7962 <__aeabi_i2f+0x2a>
    79d0:	0022      	movs	r2, r4
    79d2:	e7d5      	b.n	7980 <__aeabi_i2f+0x48>
    79d4:	fbffffff 	.word	0xfbffffff

000079d8 <__aeabi_dadd>:
    79d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    79da:	4645      	mov	r5, r8
    79dc:	46de      	mov	lr, fp
    79de:	4657      	mov	r7, sl
    79e0:	464e      	mov	r6, r9
    79e2:	030c      	lsls	r4, r1, #12
    79e4:	b5e0      	push	{r5, r6, r7, lr}
    79e6:	004e      	lsls	r6, r1, #1
    79e8:	0fc9      	lsrs	r1, r1, #31
    79ea:	4688      	mov	r8, r1
    79ec:	000d      	movs	r5, r1
    79ee:	0a61      	lsrs	r1, r4, #9
    79f0:	0f44      	lsrs	r4, r0, #29
    79f2:	430c      	orrs	r4, r1
    79f4:	00c7      	lsls	r7, r0, #3
    79f6:	0319      	lsls	r1, r3, #12
    79f8:	0058      	lsls	r0, r3, #1
    79fa:	0fdb      	lsrs	r3, r3, #31
    79fc:	469b      	mov	fp, r3
    79fe:	0a4b      	lsrs	r3, r1, #9
    7a00:	0f51      	lsrs	r1, r2, #29
    7a02:	430b      	orrs	r3, r1
    7a04:	0d76      	lsrs	r6, r6, #21
    7a06:	0d40      	lsrs	r0, r0, #21
    7a08:	0019      	movs	r1, r3
    7a0a:	00d2      	lsls	r2, r2, #3
    7a0c:	45d8      	cmp	r8, fp
    7a0e:	d100      	bne.n	7a12 <__aeabi_dadd+0x3a>
    7a10:	e0ae      	b.n	7b70 <__aeabi_dadd+0x198>
    7a12:	1a35      	subs	r5, r6, r0
    7a14:	2d00      	cmp	r5, #0
    7a16:	dc00      	bgt.n	7a1a <__aeabi_dadd+0x42>
    7a18:	e0f6      	b.n	7c08 <__aeabi_dadd+0x230>
    7a1a:	2800      	cmp	r0, #0
    7a1c:	d10f      	bne.n	7a3e <__aeabi_dadd+0x66>
    7a1e:	4313      	orrs	r3, r2
    7a20:	d100      	bne.n	7a24 <__aeabi_dadd+0x4c>
    7a22:	e0db      	b.n	7bdc <__aeabi_dadd+0x204>
    7a24:	1e6b      	subs	r3, r5, #1
    7a26:	2b00      	cmp	r3, #0
    7a28:	d000      	beq.n	7a2c <__aeabi_dadd+0x54>
    7a2a:	e137      	b.n	7c9c <__aeabi_dadd+0x2c4>
    7a2c:	1aba      	subs	r2, r7, r2
    7a2e:	4297      	cmp	r7, r2
    7a30:	41bf      	sbcs	r7, r7
    7a32:	1a64      	subs	r4, r4, r1
    7a34:	427f      	negs	r7, r7
    7a36:	1be4      	subs	r4, r4, r7
    7a38:	2601      	movs	r6, #1
    7a3a:	0017      	movs	r7, r2
    7a3c:	e024      	b.n	7a88 <__aeabi_dadd+0xb0>
    7a3e:	4bc6      	ldr	r3, [pc, #792]	; (7d58 <__aeabi_dadd+0x380>)
    7a40:	429e      	cmp	r6, r3
    7a42:	d04d      	beq.n	7ae0 <__aeabi_dadd+0x108>
    7a44:	2380      	movs	r3, #128	; 0x80
    7a46:	041b      	lsls	r3, r3, #16
    7a48:	4319      	orrs	r1, r3
    7a4a:	2d38      	cmp	r5, #56	; 0x38
    7a4c:	dd00      	ble.n	7a50 <__aeabi_dadd+0x78>
    7a4e:	e107      	b.n	7c60 <__aeabi_dadd+0x288>
    7a50:	2d1f      	cmp	r5, #31
    7a52:	dd00      	ble.n	7a56 <__aeabi_dadd+0x7e>
    7a54:	e138      	b.n	7cc8 <__aeabi_dadd+0x2f0>
    7a56:	2020      	movs	r0, #32
    7a58:	1b43      	subs	r3, r0, r5
    7a5a:	469a      	mov	sl, r3
    7a5c:	000b      	movs	r3, r1
    7a5e:	4650      	mov	r0, sl
    7a60:	4083      	lsls	r3, r0
    7a62:	4699      	mov	r9, r3
    7a64:	0013      	movs	r3, r2
    7a66:	4648      	mov	r0, r9
    7a68:	40eb      	lsrs	r3, r5
    7a6a:	4318      	orrs	r0, r3
    7a6c:	0003      	movs	r3, r0
    7a6e:	4650      	mov	r0, sl
    7a70:	4082      	lsls	r2, r0
    7a72:	1e50      	subs	r0, r2, #1
    7a74:	4182      	sbcs	r2, r0
    7a76:	40e9      	lsrs	r1, r5
    7a78:	431a      	orrs	r2, r3
    7a7a:	1aba      	subs	r2, r7, r2
    7a7c:	1a61      	subs	r1, r4, r1
    7a7e:	4297      	cmp	r7, r2
    7a80:	41a4      	sbcs	r4, r4
    7a82:	0017      	movs	r7, r2
    7a84:	4264      	negs	r4, r4
    7a86:	1b0c      	subs	r4, r1, r4
    7a88:	0223      	lsls	r3, r4, #8
    7a8a:	d562      	bpl.n	7b52 <__aeabi_dadd+0x17a>
    7a8c:	0264      	lsls	r4, r4, #9
    7a8e:	0a65      	lsrs	r5, r4, #9
    7a90:	2d00      	cmp	r5, #0
    7a92:	d100      	bne.n	7a96 <__aeabi_dadd+0xbe>
    7a94:	e0df      	b.n	7c56 <__aeabi_dadd+0x27e>
    7a96:	0028      	movs	r0, r5
    7a98:	f001 fc36 	bl	9308 <__clzsi2>
    7a9c:	0003      	movs	r3, r0
    7a9e:	3b08      	subs	r3, #8
    7aa0:	2b1f      	cmp	r3, #31
    7aa2:	dd00      	ble.n	7aa6 <__aeabi_dadd+0xce>
    7aa4:	e0d2      	b.n	7c4c <__aeabi_dadd+0x274>
    7aa6:	2220      	movs	r2, #32
    7aa8:	003c      	movs	r4, r7
    7aaa:	1ad2      	subs	r2, r2, r3
    7aac:	409d      	lsls	r5, r3
    7aae:	40d4      	lsrs	r4, r2
    7ab0:	409f      	lsls	r7, r3
    7ab2:	4325      	orrs	r5, r4
    7ab4:	429e      	cmp	r6, r3
    7ab6:	dd00      	ble.n	7aba <__aeabi_dadd+0xe2>
    7ab8:	e0c4      	b.n	7c44 <__aeabi_dadd+0x26c>
    7aba:	1b9e      	subs	r6, r3, r6
    7abc:	1c73      	adds	r3, r6, #1
    7abe:	2b1f      	cmp	r3, #31
    7ac0:	dd00      	ble.n	7ac4 <__aeabi_dadd+0xec>
    7ac2:	e0f1      	b.n	7ca8 <__aeabi_dadd+0x2d0>
    7ac4:	2220      	movs	r2, #32
    7ac6:	0038      	movs	r0, r7
    7ac8:	0029      	movs	r1, r5
    7aca:	1ad2      	subs	r2, r2, r3
    7acc:	40d8      	lsrs	r0, r3
    7ace:	4091      	lsls	r1, r2
    7ad0:	4097      	lsls	r7, r2
    7ad2:	002c      	movs	r4, r5
    7ad4:	4301      	orrs	r1, r0
    7ad6:	1e78      	subs	r0, r7, #1
    7ad8:	4187      	sbcs	r7, r0
    7ada:	40dc      	lsrs	r4, r3
    7adc:	2600      	movs	r6, #0
    7ade:	430f      	orrs	r7, r1
    7ae0:	077b      	lsls	r3, r7, #29
    7ae2:	d009      	beq.n	7af8 <__aeabi_dadd+0x120>
    7ae4:	230f      	movs	r3, #15
    7ae6:	403b      	ands	r3, r7
    7ae8:	2b04      	cmp	r3, #4
    7aea:	d005      	beq.n	7af8 <__aeabi_dadd+0x120>
    7aec:	1d3b      	adds	r3, r7, #4
    7aee:	42bb      	cmp	r3, r7
    7af0:	41bf      	sbcs	r7, r7
    7af2:	427f      	negs	r7, r7
    7af4:	19e4      	adds	r4, r4, r7
    7af6:	001f      	movs	r7, r3
    7af8:	0223      	lsls	r3, r4, #8
    7afa:	d52c      	bpl.n	7b56 <__aeabi_dadd+0x17e>
    7afc:	4b96      	ldr	r3, [pc, #600]	; (7d58 <__aeabi_dadd+0x380>)
    7afe:	3601      	adds	r6, #1
    7b00:	429e      	cmp	r6, r3
    7b02:	d100      	bne.n	7b06 <__aeabi_dadd+0x12e>
    7b04:	e09a      	b.n	7c3c <__aeabi_dadd+0x264>
    7b06:	4645      	mov	r5, r8
    7b08:	4b94      	ldr	r3, [pc, #592]	; (7d5c <__aeabi_dadd+0x384>)
    7b0a:	08ff      	lsrs	r7, r7, #3
    7b0c:	401c      	ands	r4, r3
    7b0e:	0760      	lsls	r0, r4, #29
    7b10:	0576      	lsls	r6, r6, #21
    7b12:	0264      	lsls	r4, r4, #9
    7b14:	4307      	orrs	r7, r0
    7b16:	0b24      	lsrs	r4, r4, #12
    7b18:	0d76      	lsrs	r6, r6, #21
    7b1a:	2100      	movs	r1, #0
    7b1c:	0324      	lsls	r4, r4, #12
    7b1e:	0b23      	lsrs	r3, r4, #12
    7b20:	0d0c      	lsrs	r4, r1, #20
    7b22:	4a8f      	ldr	r2, [pc, #572]	; (7d60 <__aeabi_dadd+0x388>)
    7b24:	0524      	lsls	r4, r4, #20
    7b26:	431c      	orrs	r4, r3
    7b28:	4014      	ands	r4, r2
    7b2a:	0533      	lsls	r3, r6, #20
    7b2c:	4323      	orrs	r3, r4
    7b2e:	005b      	lsls	r3, r3, #1
    7b30:	07ed      	lsls	r5, r5, #31
    7b32:	085b      	lsrs	r3, r3, #1
    7b34:	432b      	orrs	r3, r5
    7b36:	0038      	movs	r0, r7
    7b38:	0019      	movs	r1, r3
    7b3a:	bc3c      	pop	{r2, r3, r4, r5}
    7b3c:	4690      	mov	r8, r2
    7b3e:	4699      	mov	r9, r3
    7b40:	46a2      	mov	sl, r4
    7b42:	46ab      	mov	fp, r5
    7b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7b46:	4664      	mov	r4, ip
    7b48:	4304      	orrs	r4, r0
    7b4a:	d100      	bne.n	7b4e <__aeabi_dadd+0x176>
    7b4c:	e211      	b.n	7f72 <__aeabi_dadd+0x59a>
    7b4e:	0004      	movs	r4, r0
    7b50:	4667      	mov	r7, ip
    7b52:	077b      	lsls	r3, r7, #29
    7b54:	d1c6      	bne.n	7ae4 <__aeabi_dadd+0x10c>
    7b56:	4645      	mov	r5, r8
    7b58:	0760      	lsls	r0, r4, #29
    7b5a:	08ff      	lsrs	r7, r7, #3
    7b5c:	4307      	orrs	r7, r0
    7b5e:	08e4      	lsrs	r4, r4, #3
    7b60:	4b7d      	ldr	r3, [pc, #500]	; (7d58 <__aeabi_dadd+0x380>)
    7b62:	429e      	cmp	r6, r3
    7b64:	d030      	beq.n	7bc8 <__aeabi_dadd+0x1f0>
    7b66:	0324      	lsls	r4, r4, #12
    7b68:	0576      	lsls	r6, r6, #21
    7b6a:	0b24      	lsrs	r4, r4, #12
    7b6c:	0d76      	lsrs	r6, r6, #21
    7b6e:	e7d4      	b.n	7b1a <__aeabi_dadd+0x142>
    7b70:	1a33      	subs	r3, r6, r0
    7b72:	469a      	mov	sl, r3
    7b74:	2b00      	cmp	r3, #0
    7b76:	dd78      	ble.n	7c6a <__aeabi_dadd+0x292>
    7b78:	2800      	cmp	r0, #0
    7b7a:	d031      	beq.n	7be0 <__aeabi_dadd+0x208>
    7b7c:	4876      	ldr	r0, [pc, #472]	; (7d58 <__aeabi_dadd+0x380>)
    7b7e:	4286      	cmp	r6, r0
    7b80:	d0ae      	beq.n	7ae0 <__aeabi_dadd+0x108>
    7b82:	2080      	movs	r0, #128	; 0x80
    7b84:	0400      	lsls	r0, r0, #16
    7b86:	4301      	orrs	r1, r0
    7b88:	4653      	mov	r3, sl
    7b8a:	2b38      	cmp	r3, #56	; 0x38
    7b8c:	dc00      	bgt.n	7b90 <__aeabi_dadd+0x1b8>
    7b8e:	e0e9      	b.n	7d64 <__aeabi_dadd+0x38c>
    7b90:	430a      	orrs	r2, r1
    7b92:	1e51      	subs	r1, r2, #1
    7b94:	418a      	sbcs	r2, r1
    7b96:	2100      	movs	r1, #0
    7b98:	19d2      	adds	r2, r2, r7
    7b9a:	42ba      	cmp	r2, r7
    7b9c:	41bf      	sbcs	r7, r7
    7b9e:	1909      	adds	r1, r1, r4
    7ba0:	427c      	negs	r4, r7
    7ba2:	0017      	movs	r7, r2
    7ba4:	190c      	adds	r4, r1, r4
    7ba6:	0223      	lsls	r3, r4, #8
    7ba8:	d5d3      	bpl.n	7b52 <__aeabi_dadd+0x17a>
    7baa:	4b6b      	ldr	r3, [pc, #428]	; (7d58 <__aeabi_dadd+0x380>)
    7bac:	3601      	adds	r6, #1
    7bae:	429e      	cmp	r6, r3
    7bb0:	d100      	bne.n	7bb4 <__aeabi_dadd+0x1dc>
    7bb2:	e13a      	b.n	7e2a <__aeabi_dadd+0x452>
    7bb4:	2001      	movs	r0, #1
    7bb6:	4b69      	ldr	r3, [pc, #420]	; (7d5c <__aeabi_dadd+0x384>)
    7bb8:	401c      	ands	r4, r3
    7bba:	087b      	lsrs	r3, r7, #1
    7bbc:	4007      	ands	r7, r0
    7bbe:	431f      	orrs	r7, r3
    7bc0:	07e0      	lsls	r0, r4, #31
    7bc2:	4307      	orrs	r7, r0
    7bc4:	0864      	lsrs	r4, r4, #1
    7bc6:	e78b      	b.n	7ae0 <__aeabi_dadd+0x108>
    7bc8:	0023      	movs	r3, r4
    7bca:	433b      	orrs	r3, r7
    7bcc:	d100      	bne.n	7bd0 <__aeabi_dadd+0x1f8>
    7bce:	e1cb      	b.n	7f68 <__aeabi_dadd+0x590>
    7bd0:	2280      	movs	r2, #128	; 0x80
    7bd2:	0312      	lsls	r2, r2, #12
    7bd4:	4314      	orrs	r4, r2
    7bd6:	0324      	lsls	r4, r4, #12
    7bd8:	0b24      	lsrs	r4, r4, #12
    7bda:	e79e      	b.n	7b1a <__aeabi_dadd+0x142>
    7bdc:	002e      	movs	r6, r5
    7bde:	e77f      	b.n	7ae0 <__aeabi_dadd+0x108>
    7be0:	0008      	movs	r0, r1
    7be2:	4310      	orrs	r0, r2
    7be4:	d100      	bne.n	7be8 <__aeabi_dadd+0x210>
    7be6:	e0b4      	b.n	7d52 <__aeabi_dadd+0x37a>
    7be8:	1e58      	subs	r0, r3, #1
    7bea:	2800      	cmp	r0, #0
    7bec:	d000      	beq.n	7bf0 <__aeabi_dadd+0x218>
    7bee:	e0de      	b.n	7dae <__aeabi_dadd+0x3d6>
    7bf0:	18ba      	adds	r2, r7, r2
    7bf2:	42ba      	cmp	r2, r7
    7bf4:	419b      	sbcs	r3, r3
    7bf6:	1864      	adds	r4, r4, r1
    7bf8:	425b      	negs	r3, r3
    7bfa:	18e4      	adds	r4, r4, r3
    7bfc:	0017      	movs	r7, r2
    7bfe:	2601      	movs	r6, #1
    7c00:	0223      	lsls	r3, r4, #8
    7c02:	d5a6      	bpl.n	7b52 <__aeabi_dadd+0x17a>
    7c04:	2602      	movs	r6, #2
    7c06:	e7d5      	b.n	7bb4 <__aeabi_dadd+0x1dc>
    7c08:	2d00      	cmp	r5, #0
    7c0a:	d16e      	bne.n	7cea <__aeabi_dadd+0x312>
    7c0c:	1c70      	adds	r0, r6, #1
    7c0e:	0540      	lsls	r0, r0, #21
    7c10:	0d40      	lsrs	r0, r0, #21
    7c12:	2801      	cmp	r0, #1
    7c14:	dc00      	bgt.n	7c18 <__aeabi_dadd+0x240>
    7c16:	e0f9      	b.n	7e0c <__aeabi_dadd+0x434>
    7c18:	1ab8      	subs	r0, r7, r2
    7c1a:	4684      	mov	ip, r0
    7c1c:	4287      	cmp	r7, r0
    7c1e:	4180      	sbcs	r0, r0
    7c20:	1ae5      	subs	r5, r4, r3
    7c22:	4240      	negs	r0, r0
    7c24:	1a2d      	subs	r5, r5, r0
    7c26:	0228      	lsls	r0, r5, #8
    7c28:	d400      	bmi.n	7c2c <__aeabi_dadd+0x254>
    7c2a:	e089      	b.n	7d40 <__aeabi_dadd+0x368>
    7c2c:	1bd7      	subs	r7, r2, r7
    7c2e:	42ba      	cmp	r2, r7
    7c30:	4192      	sbcs	r2, r2
    7c32:	1b1c      	subs	r4, r3, r4
    7c34:	4252      	negs	r2, r2
    7c36:	1aa5      	subs	r5, r4, r2
    7c38:	46d8      	mov	r8, fp
    7c3a:	e729      	b.n	7a90 <__aeabi_dadd+0xb8>
    7c3c:	4645      	mov	r5, r8
    7c3e:	2400      	movs	r4, #0
    7c40:	2700      	movs	r7, #0
    7c42:	e76a      	b.n	7b1a <__aeabi_dadd+0x142>
    7c44:	4c45      	ldr	r4, [pc, #276]	; (7d5c <__aeabi_dadd+0x384>)
    7c46:	1af6      	subs	r6, r6, r3
    7c48:	402c      	ands	r4, r5
    7c4a:	e749      	b.n	7ae0 <__aeabi_dadd+0x108>
    7c4c:	003d      	movs	r5, r7
    7c4e:	3828      	subs	r0, #40	; 0x28
    7c50:	4085      	lsls	r5, r0
    7c52:	2700      	movs	r7, #0
    7c54:	e72e      	b.n	7ab4 <__aeabi_dadd+0xdc>
    7c56:	0038      	movs	r0, r7
    7c58:	f001 fb56 	bl	9308 <__clzsi2>
    7c5c:	3020      	adds	r0, #32
    7c5e:	e71d      	b.n	7a9c <__aeabi_dadd+0xc4>
    7c60:	430a      	orrs	r2, r1
    7c62:	1e51      	subs	r1, r2, #1
    7c64:	418a      	sbcs	r2, r1
    7c66:	2100      	movs	r1, #0
    7c68:	e707      	b.n	7a7a <__aeabi_dadd+0xa2>
    7c6a:	2b00      	cmp	r3, #0
    7c6c:	d000      	beq.n	7c70 <__aeabi_dadd+0x298>
    7c6e:	e0f3      	b.n	7e58 <__aeabi_dadd+0x480>
    7c70:	1c70      	adds	r0, r6, #1
    7c72:	0543      	lsls	r3, r0, #21
    7c74:	0d5b      	lsrs	r3, r3, #21
    7c76:	2b01      	cmp	r3, #1
    7c78:	dc00      	bgt.n	7c7c <__aeabi_dadd+0x2a4>
    7c7a:	e0ad      	b.n	7dd8 <__aeabi_dadd+0x400>
    7c7c:	4b36      	ldr	r3, [pc, #216]	; (7d58 <__aeabi_dadd+0x380>)
    7c7e:	4298      	cmp	r0, r3
    7c80:	d100      	bne.n	7c84 <__aeabi_dadd+0x2ac>
    7c82:	e0d1      	b.n	7e28 <__aeabi_dadd+0x450>
    7c84:	18ba      	adds	r2, r7, r2
    7c86:	42ba      	cmp	r2, r7
    7c88:	41bf      	sbcs	r7, r7
    7c8a:	1864      	adds	r4, r4, r1
    7c8c:	427f      	negs	r7, r7
    7c8e:	19e4      	adds	r4, r4, r7
    7c90:	07e7      	lsls	r7, r4, #31
    7c92:	0852      	lsrs	r2, r2, #1
    7c94:	4317      	orrs	r7, r2
    7c96:	0864      	lsrs	r4, r4, #1
    7c98:	0006      	movs	r6, r0
    7c9a:	e721      	b.n	7ae0 <__aeabi_dadd+0x108>
    7c9c:	482e      	ldr	r0, [pc, #184]	; (7d58 <__aeabi_dadd+0x380>)
    7c9e:	4285      	cmp	r5, r0
    7ca0:	d100      	bne.n	7ca4 <__aeabi_dadd+0x2cc>
    7ca2:	e093      	b.n	7dcc <__aeabi_dadd+0x3f4>
    7ca4:	001d      	movs	r5, r3
    7ca6:	e6d0      	b.n	7a4a <__aeabi_dadd+0x72>
    7ca8:	0029      	movs	r1, r5
    7caa:	3e1f      	subs	r6, #31
    7cac:	40f1      	lsrs	r1, r6
    7cae:	2b20      	cmp	r3, #32
    7cb0:	d100      	bne.n	7cb4 <__aeabi_dadd+0x2dc>
    7cb2:	e08d      	b.n	7dd0 <__aeabi_dadd+0x3f8>
    7cb4:	2240      	movs	r2, #64	; 0x40
    7cb6:	1ad3      	subs	r3, r2, r3
    7cb8:	409d      	lsls	r5, r3
    7cba:	432f      	orrs	r7, r5
    7cbc:	1e7d      	subs	r5, r7, #1
    7cbe:	41af      	sbcs	r7, r5
    7cc0:	2400      	movs	r4, #0
    7cc2:	430f      	orrs	r7, r1
    7cc4:	2600      	movs	r6, #0
    7cc6:	e744      	b.n	7b52 <__aeabi_dadd+0x17a>
    7cc8:	002b      	movs	r3, r5
    7cca:	0008      	movs	r0, r1
    7ccc:	3b20      	subs	r3, #32
    7cce:	40d8      	lsrs	r0, r3
    7cd0:	0003      	movs	r3, r0
    7cd2:	2d20      	cmp	r5, #32
    7cd4:	d100      	bne.n	7cd8 <__aeabi_dadd+0x300>
    7cd6:	e07d      	b.n	7dd4 <__aeabi_dadd+0x3fc>
    7cd8:	2040      	movs	r0, #64	; 0x40
    7cda:	1b45      	subs	r5, r0, r5
    7cdc:	40a9      	lsls	r1, r5
    7cde:	430a      	orrs	r2, r1
    7ce0:	1e51      	subs	r1, r2, #1
    7ce2:	418a      	sbcs	r2, r1
    7ce4:	2100      	movs	r1, #0
    7ce6:	431a      	orrs	r2, r3
    7ce8:	e6c7      	b.n	7a7a <__aeabi_dadd+0xa2>
    7cea:	2e00      	cmp	r6, #0
    7cec:	d050      	beq.n	7d90 <__aeabi_dadd+0x3b8>
    7cee:	4e1a      	ldr	r6, [pc, #104]	; (7d58 <__aeabi_dadd+0x380>)
    7cf0:	42b0      	cmp	r0, r6
    7cf2:	d057      	beq.n	7da4 <__aeabi_dadd+0x3cc>
    7cf4:	2680      	movs	r6, #128	; 0x80
    7cf6:	426b      	negs	r3, r5
    7cf8:	4699      	mov	r9, r3
    7cfa:	0436      	lsls	r6, r6, #16
    7cfc:	4334      	orrs	r4, r6
    7cfe:	464b      	mov	r3, r9
    7d00:	2b38      	cmp	r3, #56	; 0x38
    7d02:	dd00      	ble.n	7d06 <__aeabi_dadd+0x32e>
    7d04:	e0d6      	b.n	7eb4 <__aeabi_dadd+0x4dc>
    7d06:	2b1f      	cmp	r3, #31
    7d08:	dd00      	ble.n	7d0c <__aeabi_dadd+0x334>
    7d0a:	e135      	b.n	7f78 <__aeabi_dadd+0x5a0>
    7d0c:	2620      	movs	r6, #32
    7d0e:	1af5      	subs	r5, r6, r3
    7d10:	0026      	movs	r6, r4
    7d12:	40ae      	lsls	r6, r5
    7d14:	46b2      	mov	sl, r6
    7d16:	003e      	movs	r6, r7
    7d18:	40de      	lsrs	r6, r3
    7d1a:	46ac      	mov	ip, r5
    7d1c:	0035      	movs	r5, r6
    7d1e:	4656      	mov	r6, sl
    7d20:	432e      	orrs	r6, r5
    7d22:	4665      	mov	r5, ip
    7d24:	40af      	lsls	r7, r5
    7d26:	1e7d      	subs	r5, r7, #1
    7d28:	41af      	sbcs	r7, r5
    7d2a:	40dc      	lsrs	r4, r3
    7d2c:	4337      	orrs	r7, r6
    7d2e:	1bd7      	subs	r7, r2, r7
    7d30:	42ba      	cmp	r2, r7
    7d32:	4192      	sbcs	r2, r2
    7d34:	1b0c      	subs	r4, r1, r4
    7d36:	4252      	negs	r2, r2
    7d38:	1aa4      	subs	r4, r4, r2
    7d3a:	0006      	movs	r6, r0
    7d3c:	46d8      	mov	r8, fp
    7d3e:	e6a3      	b.n	7a88 <__aeabi_dadd+0xb0>
    7d40:	4664      	mov	r4, ip
    7d42:	4667      	mov	r7, ip
    7d44:	432c      	orrs	r4, r5
    7d46:	d000      	beq.n	7d4a <__aeabi_dadd+0x372>
    7d48:	e6a2      	b.n	7a90 <__aeabi_dadd+0xb8>
    7d4a:	2500      	movs	r5, #0
    7d4c:	2600      	movs	r6, #0
    7d4e:	2700      	movs	r7, #0
    7d50:	e706      	b.n	7b60 <__aeabi_dadd+0x188>
    7d52:	001e      	movs	r6, r3
    7d54:	e6c4      	b.n	7ae0 <__aeabi_dadd+0x108>
    7d56:	46c0      	nop			; (mov r8, r8)
    7d58:	000007ff 	.word	0x000007ff
    7d5c:	ff7fffff 	.word	0xff7fffff
    7d60:	800fffff 	.word	0x800fffff
    7d64:	2b1f      	cmp	r3, #31
    7d66:	dc63      	bgt.n	7e30 <__aeabi_dadd+0x458>
    7d68:	2020      	movs	r0, #32
    7d6a:	1ac3      	subs	r3, r0, r3
    7d6c:	0008      	movs	r0, r1
    7d6e:	4098      	lsls	r0, r3
    7d70:	469c      	mov	ip, r3
    7d72:	4683      	mov	fp, r0
    7d74:	4653      	mov	r3, sl
    7d76:	0010      	movs	r0, r2
    7d78:	40d8      	lsrs	r0, r3
    7d7a:	0003      	movs	r3, r0
    7d7c:	4658      	mov	r0, fp
    7d7e:	4318      	orrs	r0, r3
    7d80:	4663      	mov	r3, ip
    7d82:	409a      	lsls	r2, r3
    7d84:	1e53      	subs	r3, r2, #1
    7d86:	419a      	sbcs	r2, r3
    7d88:	4653      	mov	r3, sl
    7d8a:	4302      	orrs	r2, r0
    7d8c:	40d9      	lsrs	r1, r3
    7d8e:	e703      	b.n	7b98 <__aeabi_dadd+0x1c0>
    7d90:	0026      	movs	r6, r4
    7d92:	433e      	orrs	r6, r7
    7d94:	d006      	beq.n	7da4 <__aeabi_dadd+0x3cc>
    7d96:	43eb      	mvns	r3, r5
    7d98:	4699      	mov	r9, r3
    7d9a:	2b00      	cmp	r3, #0
    7d9c:	d0c7      	beq.n	7d2e <__aeabi_dadd+0x356>
    7d9e:	4e94      	ldr	r6, [pc, #592]	; (7ff0 <__aeabi_dadd+0x618>)
    7da0:	42b0      	cmp	r0, r6
    7da2:	d1ac      	bne.n	7cfe <__aeabi_dadd+0x326>
    7da4:	000c      	movs	r4, r1
    7da6:	0017      	movs	r7, r2
    7da8:	0006      	movs	r6, r0
    7daa:	46d8      	mov	r8, fp
    7dac:	e698      	b.n	7ae0 <__aeabi_dadd+0x108>
    7dae:	4b90      	ldr	r3, [pc, #576]	; (7ff0 <__aeabi_dadd+0x618>)
    7db0:	459a      	cmp	sl, r3
    7db2:	d00b      	beq.n	7dcc <__aeabi_dadd+0x3f4>
    7db4:	4682      	mov	sl, r0
    7db6:	e6e7      	b.n	7b88 <__aeabi_dadd+0x1b0>
    7db8:	2800      	cmp	r0, #0
    7dba:	d000      	beq.n	7dbe <__aeabi_dadd+0x3e6>
    7dbc:	e09e      	b.n	7efc <__aeabi_dadd+0x524>
    7dbe:	0018      	movs	r0, r3
    7dc0:	4310      	orrs	r0, r2
    7dc2:	d100      	bne.n	7dc6 <__aeabi_dadd+0x3ee>
    7dc4:	e0e9      	b.n	7f9a <__aeabi_dadd+0x5c2>
    7dc6:	001c      	movs	r4, r3
    7dc8:	0017      	movs	r7, r2
    7dca:	46d8      	mov	r8, fp
    7dcc:	4e88      	ldr	r6, [pc, #544]	; (7ff0 <__aeabi_dadd+0x618>)
    7dce:	e687      	b.n	7ae0 <__aeabi_dadd+0x108>
    7dd0:	2500      	movs	r5, #0
    7dd2:	e772      	b.n	7cba <__aeabi_dadd+0x2e2>
    7dd4:	2100      	movs	r1, #0
    7dd6:	e782      	b.n	7cde <__aeabi_dadd+0x306>
    7dd8:	0023      	movs	r3, r4
    7dda:	433b      	orrs	r3, r7
    7ddc:	2e00      	cmp	r6, #0
    7dde:	d000      	beq.n	7de2 <__aeabi_dadd+0x40a>
    7de0:	e0ab      	b.n	7f3a <__aeabi_dadd+0x562>
    7de2:	2b00      	cmp	r3, #0
    7de4:	d100      	bne.n	7de8 <__aeabi_dadd+0x410>
    7de6:	e0e7      	b.n	7fb8 <__aeabi_dadd+0x5e0>
    7de8:	000b      	movs	r3, r1
    7dea:	4313      	orrs	r3, r2
    7dec:	d100      	bne.n	7df0 <__aeabi_dadd+0x418>
    7dee:	e677      	b.n	7ae0 <__aeabi_dadd+0x108>
    7df0:	18ba      	adds	r2, r7, r2
    7df2:	42ba      	cmp	r2, r7
    7df4:	41bf      	sbcs	r7, r7
    7df6:	1864      	adds	r4, r4, r1
    7df8:	427f      	negs	r7, r7
    7dfa:	19e4      	adds	r4, r4, r7
    7dfc:	0223      	lsls	r3, r4, #8
    7dfe:	d400      	bmi.n	7e02 <__aeabi_dadd+0x42a>
    7e00:	e0f2      	b.n	7fe8 <__aeabi_dadd+0x610>
    7e02:	4b7c      	ldr	r3, [pc, #496]	; (7ff4 <__aeabi_dadd+0x61c>)
    7e04:	0017      	movs	r7, r2
    7e06:	401c      	ands	r4, r3
    7e08:	0006      	movs	r6, r0
    7e0a:	e669      	b.n	7ae0 <__aeabi_dadd+0x108>
    7e0c:	0020      	movs	r0, r4
    7e0e:	4338      	orrs	r0, r7
    7e10:	2e00      	cmp	r6, #0
    7e12:	d1d1      	bne.n	7db8 <__aeabi_dadd+0x3e0>
    7e14:	2800      	cmp	r0, #0
    7e16:	d15b      	bne.n	7ed0 <__aeabi_dadd+0x4f8>
    7e18:	001c      	movs	r4, r3
    7e1a:	4314      	orrs	r4, r2
    7e1c:	d100      	bne.n	7e20 <__aeabi_dadd+0x448>
    7e1e:	e0a8      	b.n	7f72 <__aeabi_dadd+0x59a>
    7e20:	001c      	movs	r4, r3
    7e22:	0017      	movs	r7, r2
    7e24:	46d8      	mov	r8, fp
    7e26:	e65b      	b.n	7ae0 <__aeabi_dadd+0x108>
    7e28:	0006      	movs	r6, r0
    7e2a:	2400      	movs	r4, #0
    7e2c:	2700      	movs	r7, #0
    7e2e:	e697      	b.n	7b60 <__aeabi_dadd+0x188>
    7e30:	4650      	mov	r0, sl
    7e32:	000b      	movs	r3, r1
    7e34:	3820      	subs	r0, #32
    7e36:	40c3      	lsrs	r3, r0
    7e38:	4699      	mov	r9, r3
    7e3a:	4653      	mov	r3, sl
    7e3c:	2b20      	cmp	r3, #32
    7e3e:	d100      	bne.n	7e42 <__aeabi_dadd+0x46a>
    7e40:	e095      	b.n	7f6e <__aeabi_dadd+0x596>
    7e42:	2340      	movs	r3, #64	; 0x40
    7e44:	4650      	mov	r0, sl
    7e46:	1a1b      	subs	r3, r3, r0
    7e48:	4099      	lsls	r1, r3
    7e4a:	430a      	orrs	r2, r1
    7e4c:	1e51      	subs	r1, r2, #1
    7e4e:	418a      	sbcs	r2, r1
    7e50:	464b      	mov	r3, r9
    7e52:	2100      	movs	r1, #0
    7e54:	431a      	orrs	r2, r3
    7e56:	e69f      	b.n	7b98 <__aeabi_dadd+0x1c0>
    7e58:	2e00      	cmp	r6, #0
    7e5a:	d130      	bne.n	7ebe <__aeabi_dadd+0x4e6>
    7e5c:	0026      	movs	r6, r4
    7e5e:	433e      	orrs	r6, r7
    7e60:	d067      	beq.n	7f32 <__aeabi_dadd+0x55a>
    7e62:	43db      	mvns	r3, r3
    7e64:	469a      	mov	sl, r3
    7e66:	2b00      	cmp	r3, #0
    7e68:	d01c      	beq.n	7ea4 <__aeabi_dadd+0x4cc>
    7e6a:	4e61      	ldr	r6, [pc, #388]	; (7ff0 <__aeabi_dadd+0x618>)
    7e6c:	42b0      	cmp	r0, r6
    7e6e:	d060      	beq.n	7f32 <__aeabi_dadd+0x55a>
    7e70:	4653      	mov	r3, sl
    7e72:	2b38      	cmp	r3, #56	; 0x38
    7e74:	dd00      	ble.n	7e78 <__aeabi_dadd+0x4a0>
    7e76:	e096      	b.n	7fa6 <__aeabi_dadd+0x5ce>
    7e78:	2b1f      	cmp	r3, #31
    7e7a:	dd00      	ble.n	7e7e <__aeabi_dadd+0x4a6>
    7e7c:	e09f      	b.n	7fbe <__aeabi_dadd+0x5e6>
    7e7e:	2620      	movs	r6, #32
    7e80:	1af3      	subs	r3, r6, r3
    7e82:	0026      	movs	r6, r4
    7e84:	409e      	lsls	r6, r3
    7e86:	469c      	mov	ip, r3
    7e88:	46b3      	mov	fp, r6
    7e8a:	4653      	mov	r3, sl
    7e8c:	003e      	movs	r6, r7
    7e8e:	40de      	lsrs	r6, r3
    7e90:	0033      	movs	r3, r6
    7e92:	465e      	mov	r6, fp
    7e94:	431e      	orrs	r6, r3
    7e96:	4663      	mov	r3, ip
    7e98:	409f      	lsls	r7, r3
    7e9a:	1e7b      	subs	r3, r7, #1
    7e9c:	419f      	sbcs	r7, r3
    7e9e:	4653      	mov	r3, sl
    7ea0:	40dc      	lsrs	r4, r3
    7ea2:	4337      	orrs	r7, r6
    7ea4:	18bf      	adds	r7, r7, r2
    7ea6:	4297      	cmp	r7, r2
    7ea8:	4192      	sbcs	r2, r2
    7eaa:	1864      	adds	r4, r4, r1
    7eac:	4252      	negs	r2, r2
    7eae:	18a4      	adds	r4, r4, r2
    7eb0:	0006      	movs	r6, r0
    7eb2:	e678      	b.n	7ba6 <__aeabi_dadd+0x1ce>
    7eb4:	4327      	orrs	r7, r4
    7eb6:	1e7c      	subs	r4, r7, #1
    7eb8:	41a7      	sbcs	r7, r4
    7eba:	2400      	movs	r4, #0
    7ebc:	e737      	b.n	7d2e <__aeabi_dadd+0x356>
    7ebe:	4e4c      	ldr	r6, [pc, #304]	; (7ff0 <__aeabi_dadd+0x618>)
    7ec0:	42b0      	cmp	r0, r6
    7ec2:	d036      	beq.n	7f32 <__aeabi_dadd+0x55a>
    7ec4:	2680      	movs	r6, #128	; 0x80
    7ec6:	425b      	negs	r3, r3
    7ec8:	0436      	lsls	r6, r6, #16
    7eca:	469a      	mov	sl, r3
    7ecc:	4334      	orrs	r4, r6
    7ece:	e7cf      	b.n	7e70 <__aeabi_dadd+0x498>
    7ed0:	0018      	movs	r0, r3
    7ed2:	4310      	orrs	r0, r2
    7ed4:	d100      	bne.n	7ed8 <__aeabi_dadd+0x500>
    7ed6:	e603      	b.n	7ae0 <__aeabi_dadd+0x108>
    7ed8:	1ab8      	subs	r0, r7, r2
    7eda:	4684      	mov	ip, r0
    7edc:	4567      	cmp	r7, ip
    7ede:	41ad      	sbcs	r5, r5
    7ee0:	1ae0      	subs	r0, r4, r3
    7ee2:	426d      	negs	r5, r5
    7ee4:	1b40      	subs	r0, r0, r5
    7ee6:	0205      	lsls	r5, r0, #8
    7ee8:	d400      	bmi.n	7eec <__aeabi_dadd+0x514>
    7eea:	e62c      	b.n	7b46 <__aeabi_dadd+0x16e>
    7eec:	1bd7      	subs	r7, r2, r7
    7eee:	42ba      	cmp	r2, r7
    7ef0:	4192      	sbcs	r2, r2
    7ef2:	1b1c      	subs	r4, r3, r4
    7ef4:	4252      	negs	r2, r2
    7ef6:	1aa4      	subs	r4, r4, r2
    7ef8:	46d8      	mov	r8, fp
    7efa:	e5f1      	b.n	7ae0 <__aeabi_dadd+0x108>
    7efc:	0018      	movs	r0, r3
    7efe:	4310      	orrs	r0, r2
    7f00:	d100      	bne.n	7f04 <__aeabi_dadd+0x52c>
    7f02:	e763      	b.n	7dcc <__aeabi_dadd+0x3f4>
    7f04:	08f8      	lsrs	r0, r7, #3
    7f06:	0767      	lsls	r7, r4, #29
    7f08:	4307      	orrs	r7, r0
    7f0a:	2080      	movs	r0, #128	; 0x80
    7f0c:	08e4      	lsrs	r4, r4, #3
    7f0e:	0300      	lsls	r0, r0, #12
    7f10:	4204      	tst	r4, r0
    7f12:	d008      	beq.n	7f26 <__aeabi_dadd+0x54e>
    7f14:	08dd      	lsrs	r5, r3, #3
    7f16:	4205      	tst	r5, r0
    7f18:	d105      	bne.n	7f26 <__aeabi_dadd+0x54e>
    7f1a:	08d2      	lsrs	r2, r2, #3
    7f1c:	0759      	lsls	r1, r3, #29
    7f1e:	4311      	orrs	r1, r2
    7f20:	000f      	movs	r7, r1
    7f22:	002c      	movs	r4, r5
    7f24:	46d8      	mov	r8, fp
    7f26:	0f7b      	lsrs	r3, r7, #29
    7f28:	00e4      	lsls	r4, r4, #3
    7f2a:	431c      	orrs	r4, r3
    7f2c:	00ff      	lsls	r7, r7, #3
    7f2e:	4e30      	ldr	r6, [pc, #192]	; (7ff0 <__aeabi_dadd+0x618>)
    7f30:	e5d6      	b.n	7ae0 <__aeabi_dadd+0x108>
    7f32:	000c      	movs	r4, r1
    7f34:	0017      	movs	r7, r2
    7f36:	0006      	movs	r6, r0
    7f38:	e5d2      	b.n	7ae0 <__aeabi_dadd+0x108>
    7f3a:	2b00      	cmp	r3, #0
    7f3c:	d038      	beq.n	7fb0 <__aeabi_dadd+0x5d8>
    7f3e:	000b      	movs	r3, r1
    7f40:	4313      	orrs	r3, r2
    7f42:	d100      	bne.n	7f46 <__aeabi_dadd+0x56e>
    7f44:	e742      	b.n	7dcc <__aeabi_dadd+0x3f4>
    7f46:	08f8      	lsrs	r0, r7, #3
    7f48:	0767      	lsls	r7, r4, #29
    7f4a:	4307      	orrs	r7, r0
    7f4c:	2080      	movs	r0, #128	; 0x80
    7f4e:	08e4      	lsrs	r4, r4, #3
    7f50:	0300      	lsls	r0, r0, #12
    7f52:	4204      	tst	r4, r0
    7f54:	d0e7      	beq.n	7f26 <__aeabi_dadd+0x54e>
    7f56:	08cb      	lsrs	r3, r1, #3
    7f58:	4203      	tst	r3, r0
    7f5a:	d1e4      	bne.n	7f26 <__aeabi_dadd+0x54e>
    7f5c:	08d2      	lsrs	r2, r2, #3
    7f5e:	0749      	lsls	r1, r1, #29
    7f60:	4311      	orrs	r1, r2
    7f62:	000f      	movs	r7, r1
    7f64:	001c      	movs	r4, r3
    7f66:	e7de      	b.n	7f26 <__aeabi_dadd+0x54e>
    7f68:	2700      	movs	r7, #0
    7f6a:	2400      	movs	r4, #0
    7f6c:	e5d5      	b.n	7b1a <__aeabi_dadd+0x142>
    7f6e:	2100      	movs	r1, #0
    7f70:	e76b      	b.n	7e4a <__aeabi_dadd+0x472>
    7f72:	2500      	movs	r5, #0
    7f74:	2700      	movs	r7, #0
    7f76:	e5f3      	b.n	7b60 <__aeabi_dadd+0x188>
    7f78:	464e      	mov	r6, r9
    7f7a:	0025      	movs	r5, r4
    7f7c:	3e20      	subs	r6, #32
    7f7e:	40f5      	lsrs	r5, r6
    7f80:	464b      	mov	r3, r9
    7f82:	002e      	movs	r6, r5
    7f84:	2b20      	cmp	r3, #32
    7f86:	d02d      	beq.n	7fe4 <__aeabi_dadd+0x60c>
    7f88:	2540      	movs	r5, #64	; 0x40
    7f8a:	1aed      	subs	r5, r5, r3
    7f8c:	40ac      	lsls	r4, r5
    7f8e:	4327      	orrs	r7, r4
    7f90:	1e7c      	subs	r4, r7, #1
    7f92:	41a7      	sbcs	r7, r4
    7f94:	2400      	movs	r4, #0
    7f96:	4337      	orrs	r7, r6
    7f98:	e6c9      	b.n	7d2e <__aeabi_dadd+0x356>
    7f9a:	2480      	movs	r4, #128	; 0x80
    7f9c:	2500      	movs	r5, #0
    7f9e:	0324      	lsls	r4, r4, #12
    7fa0:	4e13      	ldr	r6, [pc, #76]	; (7ff0 <__aeabi_dadd+0x618>)
    7fa2:	2700      	movs	r7, #0
    7fa4:	e5dc      	b.n	7b60 <__aeabi_dadd+0x188>
    7fa6:	4327      	orrs	r7, r4
    7fa8:	1e7c      	subs	r4, r7, #1
    7faa:	41a7      	sbcs	r7, r4
    7fac:	2400      	movs	r4, #0
    7fae:	e779      	b.n	7ea4 <__aeabi_dadd+0x4cc>
    7fb0:	000c      	movs	r4, r1
    7fb2:	0017      	movs	r7, r2
    7fb4:	4e0e      	ldr	r6, [pc, #56]	; (7ff0 <__aeabi_dadd+0x618>)
    7fb6:	e593      	b.n	7ae0 <__aeabi_dadd+0x108>
    7fb8:	000c      	movs	r4, r1
    7fba:	0017      	movs	r7, r2
    7fbc:	e590      	b.n	7ae0 <__aeabi_dadd+0x108>
    7fbe:	4656      	mov	r6, sl
    7fc0:	0023      	movs	r3, r4
    7fc2:	3e20      	subs	r6, #32
    7fc4:	40f3      	lsrs	r3, r6
    7fc6:	4699      	mov	r9, r3
    7fc8:	4653      	mov	r3, sl
    7fca:	2b20      	cmp	r3, #32
    7fcc:	d00e      	beq.n	7fec <__aeabi_dadd+0x614>
    7fce:	2340      	movs	r3, #64	; 0x40
    7fd0:	4656      	mov	r6, sl
    7fd2:	1b9b      	subs	r3, r3, r6
    7fd4:	409c      	lsls	r4, r3
    7fd6:	4327      	orrs	r7, r4
    7fd8:	1e7c      	subs	r4, r7, #1
    7fda:	41a7      	sbcs	r7, r4
    7fdc:	464b      	mov	r3, r9
    7fde:	2400      	movs	r4, #0
    7fe0:	431f      	orrs	r7, r3
    7fe2:	e75f      	b.n	7ea4 <__aeabi_dadd+0x4cc>
    7fe4:	2400      	movs	r4, #0
    7fe6:	e7d2      	b.n	7f8e <__aeabi_dadd+0x5b6>
    7fe8:	0017      	movs	r7, r2
    7fea:	e5b2      	b.n	7b52 <__aeabi_dadd+0x17a>
    7fec:	2400      	movs	r4, #0
    7fee:	e7f2      	b.n	7fd6 <__aeabi_dadd+0x5fe>
    7ff0:	000007ff 	.word	0x000007ff
    7ff4:	ff7fffff 	.word	0xff7fffff

00007ff8 <__aeabi_ddiv>:
    7ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ffa:	4657      	mov	r7, sl
    7ffc:	4645      	mov	r5, r8
    7ffe:	46de      	mov	lr, fp
    8000:	464e      	mov	r6, r9
    8002:	b5e0      	push	{r5, r6, r7, lr}
    8004:	004c      	lsls	r4, r1, #1
    8006:	030e      	lsls	r6, r1, #12
    8008:	b087      	sub	sp, #28
    800a:	4683      	mov	fp, r0
    800c:	4692      	mov	sl, r2
    800e:	001d      	movs	r5, r3
    8010:	4680      	mov	r8, r0
    8012:	0b36      	lsrs	r6, r6, #12
    8014:	0d64      	lsrs	r4, r4, #21
    8016:	0fcf      	lsrs	r7, r1, #31
    8018:	2c00      	cmp	r4, #0
    801a:	d04f      	beq.n	80bc <__aeabi_ddiv+0xc4>
    801c:	4b6f      	ldr	r3, [pc, #444]	; (81dc <__aeabi_ddiv+0x1e4>)
    801e:	429c      	cmp	r4, r3
    8020:	d035      	beq.n	808e <__aeabi_ddiv+0x96>
    8022:	2380      	movs	r3, #128	; 0x80
    8024:	0f42      	lsrs	r2, r0, #29
    8026:	041b      	lsls	r3, r3, #16
    8028:	00f6      	lsls	r6, r6, #3
    802a:	4313      	orrs	r3, r2
    802c:	4333      	orrs	r3, r6
    802e:	4699      	mov	r9, r3
    8030:	00c3      	lsls	r3, r0, #3
    8032:	4698      	mov	r8, r3
    8034:	4b6a      	ldr	r3, [pc, #424]	; (81e0 <__aeabi_ddiv+0x1e8>)
    8036:	2600      	movs	r6, #0
    8038:	469c      	mov	ip, r3
    803a:	2300      	movs	r3, #0
    803c:	4464      	add	r4, ip
    803e:	9303      	str	r3, [sp, #12]
    8040:	032b      	lsls	r3, r5, #12
    8042:	0b1b      	lsrs	r3, r3, #12
    8044:	469b      	mov	fp, r3
    8046:	006b      	lsls	r3, r5, #1
    8048:	0fed      	lsrs	r5, r5, #31
    804a:	4650      	mov	r0, sl
    804c:	0d5b      	lsrs	r3, r3, #21
    804e:	9501      	str	r5, [sp, #4]
    8050:	d05e      	beq.n	8110 <__aeabi_ddiv+0x118>
    8052:	4a62      	ldr	r2, [pc, #392]	; (81dc <__aeabi_ddiv+0x1e4>)
    8054:	4293      	cmp	r3, r2
    8056:	d053      	beq.n	8100 <__aeabi_ddiv+0x108>
    8058:	465a      	mov	r2, fp
    805a:	00d1      	lsls	r1, r2, #3
    805c:	2280      	movs	r2, #128	; 0x80
    805e:	0f40      	lsrs	r0, r0, #29
    8060:	0412      	lsls	r2, r2, #16
    8062:	4302      	orrs	r2, r0
    8064:	430a      	orrs	r2, r1
    8066:	4693      	mov	fp, r2
    8068:	4652      	mov	r2, sl
    806a:	00d1      	lsls	r1, r2, #3
    806c:	4a5c      	ldr	r2, [pc, #368]	; (81e0 <__aeabi_ddiv+0x1e8>)
    806e:	4694      	mov	ip, r2
    8070:	2200      	movs	r2, #0
    8072:	4463      	add	r3, ip
    8074:	0038      	movs	r0, r7
    8076:	4068      	eors	r0, r5
    8078:	4684      	mov	ip, r0
    807a:	9002      	str	r0, [sp, #8]
    807c:	1ae4      	subs	r4, r4, r3
    807e:	4316      	orrs	r6, r2
    8080:	2e0f      	cmp	r6, #15
    8082:	d900      	bls.n	8086 <__aeabi_ddiv+0x8e>
    8084:	e0b4      	b.n	81f0 <__aeabi_ddiv+0x1f8>
    8086:	4b57      	ldr	r3, [pc, #348]	; (81e4 <__aeabi_ddiv+0x1ec>)
    8088:	00b6      	lsls	r6, r6, #2
    808a:	599b      	ldr	r3, [r3, r6]
    808c:	469f      	mov	pc, r3
    808e:	0003      	movs	r3, r0
    8090:	4333      	orrs	r3, r6
    8092:	4699      	mov	r9, r3
    8094:	d16c      	bne.n	8170 <__aeabi_ddiv+0x178>
    8096:	2300      	movs	r3, #0
    8098:	4698      	mov	r8, r3
    809a:	3302      	adds	r3, #2
    809c:	2608      	movs	r6, #8
    809e:	9303      	str	r3, [sp, #12]
    80a0:	e7ce      	b.n	8040 <__aeabi_ddiv+0x48>
    80a2:	46cb      	mov	fp, r9
    80a4:	4641      	mov	r1, r8
    80a6:	9a03      	ldr	r2, [sp, #12]
    80a8:	9701      	str	r7, [sp, #4]
    80aa:	2a02      	cmp	r2, #2
    80ac:	d165      	bne.n	817a <__aeabi_ddiv+0x182>
    80ae:	9b01      	ldr	r3, [sp, #4]
    80b0:	4c4a      	ldr	r4, [pc, #296]	; (81dc <__aeabi_ddiv+0x1e4>)
    80b2:	469c      	mov	ip, r3
    80b4:	2300      	movs	r3, #0
    80b6:	2200      	movs	r2, #0
    80b8:	4698      	mov	r8, r3
    80ba:	e06b      	b.n	8194 <__aeabi_ddiv+0x19c>
    80bc:	0003      	movs	r3, r0
    80be:	4333      	orrs	r3, r6
    80c0:	4699      	mov	r9, r3
    80c2:	d04e      	beq.n	8162 <__aeabi_ddiv+0x16a>
    80c4:	2e00      	cmp	r6, #0
    80c6:	d100      	bne.n	80ca <__aeabi_ddiv+0xd2>
    80c8:	e1bc      	b.n	8444 <__aeabi_ddiv+0x44c>
    80ca:	0030      	movs	r0, r6
    80cc:	f001 f91c 	bl	9308 <__clzsi2>
    80d0:	0003      	movs	r3, r0
    80d2:	3b0b      	subs	r3, #11
    80d4:	2b1c      	cmp	r3, #28
    80d6:	dd00      	ble.n	80da <__aeabi_ddiv+0xe2>
    80d8:	e1ac      	b.n	8434 <__aeabi_ddiv+0x43c>
    80da:	221d      	movs	r2, #29
    80dc:	1ad3      	subs	r3, r2, r3
    80de:	465a      	mov	r2, fp
    80e0:	0001      	movs	r1, r0
    80e2:	40da      	lsrs	r2, r3
    80e4:	3908      	subs	r1, #8
    80e6:	408e      	lsls	r6, r1
    80e8:	0013      	movs	r3, r2
    80ea:	4333      	orrs	r3, r6
    80ec:	4699      	mov	r9, r3
    80ee:	465b      	mov	r3, fp
    80f0:	408b      	lsls	r3, r1
    80f2:	4698      	mov	r8, r3
    80f4:	2300      	movs	r3, #0
    80f6:	4c3c      	ldr	r4, [pc, #240]	; (81e8 <__aeabi_ddiv+0x1f0>)
    80f8:	2600      	movs	r6, #0
    80fa:	1a24      	subs	r4, r4, r0
    80fc:	9303      	str	r3, [sp, #12]
    80fe:	e79f      	b.n	8040 <__aeabi_ddiv+0x48>
    8100:	4651      	mov	r1, sl
    8102:	465a      	mov	r2, fp
    8104:	4311      	orrs	r1, r2
    8106:	d129      	bne.n	815c <__aeabi_ddiv+0x164>
    8108:	2200      	movs	r2, #0
    810a:	4693      	mov	fp, r2
    810c:	3202      	adds	r2, #2
    810e:	e7b1      	b.n	8074 <__aeabi_ddiv+0x7c>
    8110:	4659      	mov	r1, fp
    8112:	4301      	orrs	r1, r0
    8114:	d01e      	beq.n	8154 <__aeabi_ddiv+0x15c>
    8116:	465b      	mov	r3, fp
    8118:	2b00      	cmp	r3, #0
    811a:	d100      	bne.n	811e <__aeabi_ddiv+0x126>
    811c:	e19e      	b.n	845c <__aeabi_ddiv+0x464>
    811e:	4658      	mov	r0, fp
    8120:	f001 f8f2 	bl	9308 <__clzsi2>
    8124:	0003      	movs	r3, r0
    8126:	3b0b      	subs	r3, #11
    8128:	2b1c      	cmp	r3, #28
    812a:	dd00      	ble.n	812e <__aeabi_ddiv+0x136>
    812c:	e18f      	b.n	844e <__aeabi_ddiv+0x456>
    812e:	0002      	movs	r2, r0
    8130:	4659      	mov	r1, fp
    8132:	3a08      	subs	r2, #8
    8134:	4091      	lsls	r1, r2
    8136:	468b      	mov	fp, r1
    8138:	211d      	movs	r1, #29
    813a:	1acb      	subs	r3, r1, r3
    813c:	4651      	mov	r1, sl
    813e:	40d9      	lsrs	r1, r3
    8140:	000b      	movs	r3, r1
    8142:	4659      	mov	r1, fp
    8144:	430b      	orrs	r3, r1
    8146:	4651      	mov	r1, sl
    8148:	469b      	mov	fp, r3
    814a:	4091      	lsls	r1, r2
    814c:	4b26      	ldr	r3, [pc, #152]	; (81e8 <__aeabi_ddiv+0x1f0>)
    814e:	2200      	movs	r2, #0
    8150:	1a1b      	subs	r3, r3, r0
    8152:	e78f      	b.n	8074 <__aeabi_ddiv+0x7c>
    8154:	2300      	movs	r3, #0
    8156:	2201      	movs	r2, #1
    8158:	469b      	mov	fp, r3
    815a:	e78b      	b.n	8074 <__aeabi_ddiv+0x7c>
    815c:	4651      	mov	r1, sl
    815e:	2203      	movs	r2, #3
    8160:	e788      	b.n	8074 <__aeabi_ddiv+0x7c>
    8162:	2300      	movs	r3, #0
    8164:	4698      	mov	r8, r3
    8166:	3301      	adds	r3, #1
    8168:	2604      	movs	r6, #4
    816a:	2400      	movs	r4, #0
    816c:	9303      	str	r3, [sp, #12]
    816e:	e767      	b.n	8040 <__aeabi_ddiv+0x48>
    8170:	2303      	movs	r3, #3
    8172:	46b1      	mov	r9, r6
    8174:	9303      	str	r3, [sp, #12]
    8176:	260c      	movs	r6, #12
    8178:	e762      	b.n	8040 <__aeabi_ddiv+0x48>
    817a:	2a03      	cmp	r2, #3
    817c:	d100      	bne.n	8180 <__aeabi_ddiv+0x188>
    817e:	e25c      	b.n	863a <__aeabi_ddiv+0x642>
    8180:	9b01      	ldr	r3, [sp, #4]
    8182:	2a01      	cmp	r2, #1
    8184:	d000      	beq.n	8188 <__aeabi_ddiv+0x190>
    8186:	e1e4      	b.n	8552 <__aeabi_ddiv+0x55a>
    8188:	4013      	ands	r3, r2
    818a:	469c      	mov	ip, r3
    818c:	2300      	movs	r3, #0
    818e:	2400      	movs	r4, #0
    8190:	2200      	movs	r2, #0
    8192:	4698      	mov	r8, r3
    8194:	2100      	movs	r1, #0
    8196:	0312      	lsls	r2, r2, #12
    8198:	0b13      	lsrs	r3, r2, #12
    819a:	0d0a      	lsrs	r2, r1, #20
    819c:	0512      	lsls	r2, r2, #20
    819e:	431a      	orrs	r2, r3
    81a0:	0523      	lsls	r3, r4, #20
    81a2:	4c12      	ldr	r4, [pc, #72]	; (81ec <__aeabi_ddiv+0x1f4>)
    81a4:	4640      	mov	r0, r8
    81a6:	4022      	ands	r2, r4
    81a8:	4313      	orrs	r3, r2
    81aa:	4662      	mov	r2, ip
    81ac:	005b      	lsls	r3, r3, #1
    81ae:	07d2      	lsls	r2, r2, #31
    81b0:	085b      	lsrs	r3, r3, #1
    81b2:	4313      	orrs	r3, r2
    81b4:	0019      	movs	r1, r3
    81b6:	b007      	add	sp, #28
    81b8:	bc3c      	pop	{r2, r3, r4, r5}
    81ba:	4690      	mov	r8, r2
    81bc:	4699      	mov	r9, r3
    81be:	46a2      	mov	sl, r4
    81c0:	46ab      	mov	fp, r5
    81c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    81c4:	2300      	movs	r3, #0
    81c6:	2280      	movs	r2, #128	; 0x80
    81c8:	469c      	mov	ip, r3
    81ca:	0312      	lsls	r2, r2, #12
    81cc:	4698      	mov	r8, r3
    81ce:	4c03      	ldr	r4, [pc, #12]	; (81dc <__aeabi_ddiv+0x1e4>)
    81d0:	e7e0      	b.n	8194 <__aeabi_ddiv+0x19c>
    81d2:	2300      	movs	r3, #0
    81d4:	4c01      	ldr	r4, [pc, #4]	; (81dc <__aeabi_ddiv+0x1e4>)
    81d6:	2200      	movs	r2, #0
    81d8:	4698      	mov	r8, r3
    81da:	e7db      	b.n	8194 <__aeabi_ddiv+0x19c>
    81dc:	000007ff 	.word	0x000007ff
    81e0:	fffffc01 	.word	0xfffffc01
    81e4:	0000bb18 	.word	0x0000bb18
    81e8:	fffffc0d 	.word	0xfffffc0d
    81ec:	800fffff 	.word	0x800fffff
    81f0:	45d9      	cmp	r9, fp
    81f2:	d900      	bls.n	81f6 <__aeabi_ddiv+0x1fe>
    81f4:	e139      	b.n	846a <__aeabi_ddiv+0x472>
    81f6:	d100      	bne.n	81fa <__aeabi_ddiv+0x202>
    81f8:	e134      	b.n	8464 <__aeabi_ddiv+0x46c>
    81fa:	2300      	movs	r3, #0
    81fc:	4646      	mov	r6, r8
    81fe:	464d      	mov	r5, r9
    8200:	469a      	mov	sl, r3
    8202:	3c01      	subs	r4, #1
    8204:	465b      	mov	r3, fp
    8206:	0e0a      	lsrs	r2, r1, #24
    8208:	021b      	lsls	r3, r3, #8
    820a:	431a      	orrs	r2, r3
    820c:	020b      	lsls	r3, r1, #8
    820e:	0c17      	lsrs	r7, r2, #16
    8210:	9303      	str	r3, [sp, #12]
    8212:	0413      	lsls	r3, r2, #16
    8214:	0c1b      	lsrs	r3, r3, #16
    8216:	0039      	movs	r1, r7
    8218:	0028      	movs	r0, r5
    821a:	4690      	mov	r8, r2
    821c:	9301      	str	r3, [sp, #4]
    821e:	f7ff f8a3 	bl	7368 <__udivsi3>
    8222:	0002      	movs	r2, r0
    8224:	9b01      	ldr	r3, [sp, #4]
    8226:	4683      	mov	fp, r0
    8228:	435a      	muls	r2, r3
    822a:	0028      	movs	r0, r5
    822c:	0039      	movs	r1, r7
    822e:	4691      	mov	r9, r2
    8230:	f7ff f920 	bl	7474 <__aeabi_uidivmod>
    8234:	0c35      	lsrs	r5, r6, #16
    8236:	0409      	lsls	r1, r1, #16
    8238:	430d      	orrs	r5, r1
    823a:	45a9      	cmp	r9, r5
    823c:	d90d      	bls.n	825a <__aeabi_ddiv+0x262>
    823e:	465b      	mov	r3, fp
    8240:	4445      	add	r5, r8
    8242:	3b01      	subs	r3, #1
    8244:	45a8      	cmp	r8, r5
    8246:	d900      	bls.n	824a <__aeabi_ddiv+0x252>
    8248:	e13a      	b.n	84c0 <__aeabi_ddiv+0x4c8>
    824a:	45a9      	cmp	r9, r5
    824c:	d800      	bhi.n	8250 <__aeabi_ddiv+0x258>
    824e:	e137      	b.n	84c0 <__aeabi_ddiv+0x4c8>
    8250:	2302      	movs	r3, #2
    8252:	425b      	negs	r3, r3
    8254:	469c      	mov	ip, r3
    8256:	4445      	add	r5, r8
    8258:	44e3      	add	fp, ip
    825a:	464b      	mov	r3, r9
    825c:	1aeb      	subs	r3, r5, r3
    825e:	0039      	movs	r1, r7
    8260:	0018      	movs	r0, r3
    8262:	9304      	str	r3, [sp, #16]
    8264:	f7ff f880 	bl	7368 <__udivsi3>
    8268:	9b01      	ldr	r3, [sp, #4]
    826a:	0005      	movs	r5, r0
    826c:	4343      	muls	r3, r0
    826e:	0039      	movs	r1, r7
    8270:	9804      	ldr	r0, [sp, #16]
    8272:	4699      	mov	r9, r3
    8274:	f7ff f8fe 	bl	7474 <__aeabi_uidivmod>
    8278:	0433      	lsls	r3, r6, #16
    827a:	0409      	lsls	r1, r1, #16
    827c:	0c1b      	lsrs	r3, r3, #16
    827e:	430b      	orrs	r3, r1
    8280:	4599      	cmp	r9, r3
    8282:	d909      	bls.n	8298 <__aeabi_ddiv+0x2a0>
    8284:	4443      	add	r3, r8
    8286:	1e6a      	subs	r2, r5, #1
    8288:	4598      	cmp	r8, r3
    828a:	d900      	bls.n	828e <__aeabi_ddiv+0x296>
    828c:	e11a      	b.n	84c4 <__aeabi_ddiv+0x4cc>
    828e:	4599      	cmp	r9, r3
    8290:	d800      	bhi.n	8294 <__aeabi_ddiv+0x29c>
    8292:	e117      	b.n	84c4 <__aeabi_ddiv+0x4cc>
    8294:	3d02      	subs	r5, #2
    8296:	4443      	add	r3, r8
    8298:	464a      	mov	r2, r9
    829a:	1a9b      	subs	r3, r3, r2
    829c:	465a      	mov	r2, fp
    829e:	0412      	lsls	r2, r2, #16
    82a0:	432a      	orrs	r2, r5
    82a2:	9903      	ldr	r1, [sp, #12]
    82a4:	4693      	mov	fp, r2
    82a6:	0c10      	lsrs	r0, r2, #16
    82a8:	0c0a      	lsrs	r2, r1, #16
    82aa:	4691      	mov	r9, r2
    82ac:	0409      	lsls	r1, r1, #16
    82ae:	465a      	mov	r2, fp
    82b0:	0c09      	lsrs	r1, r1, #16
    82b2:	464e      	mov	r6, r9
    82b4:	000d      	movs	r5, r1
    82b6:	0412      	lsls	r2, r2, #16
    82b8:	0c12      	lsrs	r2, r2, #16
    82ba:	4345      	muls	r5, r0
    82bc:	9105      	str	r1, [sp, #20]
    82be:	4351      	muls	r1, r2
    82c0:	4372      	muls	r2, r6
    82c2:	4370      	muls	r0, r6
    82c4:	1952      	adds	r2, r2, r5
    82c6:	0c0e      	lsrs	r6, r1, #16
    82c8:	18b2      	adds	r2, r6, r2
    82ca:	4295      	cmp	r5, r2
    82cc:	d903      	bls.n	82d6 <__aeabi_ddiv+0x2de>
    82ce:	2580      	movs	r5, #128	; 0x80
    82d0:	026d      	lsls	r5, r5, #9
    82d2:	46ac      	mov	ip, r5
    82d4:	4460      	add	r0, ip
    82d6:	0c15      	lsrs	r5, r2, #16
    82d8:	0409      	lsls	r1, r1, #16
    82da:	0412      	lsls	r2, r2, #16
    82dc:	0c09      	lsrs	r1, r1, #16
    82de:	1828      	adds	r0, r5, r0
    82e0:	1852      	adds	r2, r2, r1
    82e2:	4283      	cmp	r3, r0
    82e4:	d200      	bcs.n	82e8 <__aeabi_ddiv+0x2f0>
    82e6:	e0ce      	b.n	8486 <__aeabi_ddiv+0x48e>
    82e8:	d100      	bne.n	82ec <__aeabi_ddiv+0x2f4>
    82ea:	e0c8      	b.n	847e <__aeabi_ddiv+0x486>
    82ec:	1a1d      	subs	r5, r3, r0
    82ee:	4653      	mov	r3, sl
    82f0:	1a9e      	subs	r6, r3, r2
    82f2:	45b2      	cmp	sl, r6
    82f4:	4192      	sbcs	r2, r2
    82f6:	4252      	negs	r2, r2
    82f8:	1aab      	subs	r3, r5, r2
    82fa:	469a      	mov	sl, r3
    82fc:	4598      	cmp	r8, r3
    82fe:	d100      	bne.n	8302 <__aeabi_ddiv+0x30a>
    8300:	e117      	b.n	8532 <__aeabi_ddiv+0x53a>
    8302:	0039      	movs	r1, r7
    8304:	0018      	movs	r0, r3
    8306:	f7ff f82f 	bl	7368 <__udivsi3>
    830a:	9b01      	ldr	r3, [sp, #4]
    830c:	0005      	movs	r5, r0
    830e:	4343      	muls	r3, r0
    8310:	0039      	movs	r1, r7
    8312:	4650      	mov	r0, sl
    8314:	9304      	str	r3, [sp, #16]
    8316:	f7ff f8ad 	bl	7474 <__aeabi_uidivmod>
    831a:	9804      	ldr	r0, [sp, #16]
    831c:	040b      	lsls	r3, r1, #16
    831e:	0c31      	lsrs	r1, r6, #16
    8320:	4319      	orrs	r1, r3
    8322:	4288      	cmp	r0, r1
    8324:	d909      	bls.n	833a <__aeabi_ddiv+0x342>
    8326:	4441      	add	r1, r8
    8328:	1e6b      	subs	r3, r5, #1
    832a:	4588      	cmp	r8, r1
    832c:	d900      	bls.n	8330 <__aeabi_ddiv+0x338>
    832e:	e107      	b.n	8540 <__aeabi_ddiv+0x548>
    8330:	4288      	cmp	r0, r1
    8332:	d800      	bhi.n	8336 <__aeabi_ddiv+0x33e>
    8334:	e104      	b.n	8540 <__aeabi_ddiv+0x548>
    8336:	3d02      	subs	r5, #2
    8338:	4441      	add	r1, r8
    833a:	9b04      	ldr	r3, [sp, #16]
    833c:	1acb      	subs	r3, r1, r3
    833e:	0018      	movs	r0, r3
    8340:	0039      	movs	r1, r7
    8342:	9304      	str	r3, [sp, #16]
    8344:	f7ff f810 	bl	7368 <__udivsi3>
    8348:	9b01      	ldr	r3, [sp, #4]
    834a:	4682      	mov	sl, r0
    834c:	4343      	muls	r3, r0
    834e:	0039      	movs	r1, r7
    8350:	9804      	ldr	r0, [sp, #16]
    8352:	9301      	str	r3, [sp, #4]
    8354:	f7ff f88e 	bl	7474 <__aeabi_uidivmod>
    8358:	9801      	ldr	r0, [sp, #4]
    835a:	040b      	lsls	r3, r1, #16
    835c:	0431      	lsls	r1, r6, #16
    835e:	0c09      	lsrs	r1, r1, #16
    8360:	4319      	orrs	r1, r3
    8362:	4288      	cmp	r0, r1
    8364:	d90d      	bls.n	8382 <__aeabi_ddiv+0x38a>
    8366:	4653      	mov	r3, sl
    8368:	4441      	add	r1, r8
    836a:	3b01      	subs	r3, #1
    836c:	4588      	cmp	r8, r1
    836e:	d900      	bls.n	8372 <__aeabi_ddiv+0x37a>
    8370:	e0e8      	b.n	8544 <__aeabi_ddiv+0x54c>
    8372:	4288      	cmp	r0, r1
    8374:	d800      	bhi.n	8378 <__aeabi_ddiv+0x380>
    8376:	e0e5      	b.n	8544 <__aeabi_ddiv+0x54c>
    8378:	2302      	movs	r3, #2
    837a:	425b      	negs	r3, r3
    837c:	469c      	mov	ip, r3
    837e:	4441      	add	r1, r8
    8380:	44e2      	add	sl, ip
    8382:	9b01      	ldr	r3, [sp, #4]
    8384:	042d      	lsls	r5, r5, #16
    8386:	1ace      	subs	r6, r1, r3
    8388:	4651      	mov	r1, sl
    838a:	4329      	orrs	r1, r5
    838c:	9d05      	ldr	r5, [sp, #20]
    838e:	464f      	mov	r7, r9
    8390:	002a      	movs	r2, r5
    8392:	040b      	lsls	r3, r1, #16
    8394:	0c08      	lsrs	r0, r1, #16
    8396:	0c1b      	lsrs	r3, r3, #16
    8398:	435a      	muls	r2, r3
    839a:	4345      	muls	r5, r0
    839c:	437b      	muls	r3, r7
    839e:	4378      	muls	r0, r7
    83a0:	195b      	adds	r3, r3, r5
    83a2:	0c17      	lsrs	r7, r2, #16
    83a4:	18fb      	adds	r3, r7, r3
    83a6:	429d      	cmp	r5, r3
    83a8:	d903      	bls.n	83b2 <__aeabi_ddiv+0x3ba>
    83aa:	2580      	movs	r5, #128	; 0x80
    83ac:	026d      	lsls	r5, r5, #9
    83ae:	46ac      	mov	ip, r5
    83b0:	4460      	add	r0, ip
    83b2:	0c1d      	lsrs	r5, r3, #16
    83b4:	0412      	lsls	r2, r2, #16
    83b6:	041b      	lsls	r3, r3, #16
    83b8:	0c12      	lsrs	r2, r2, #16
    83ba:	1828      	adds	r0, r5, r0
    83bc:	189b      	adds	r3, r3, r2
    83be:	4286      	cmp	r6, r0
    83c0:	d200      	bcs.n	83c4 <__aeabi_ddiv+0x3cc>
    83c2:	e093      	b.n	84ec <__aeabi_ddiv+0x4f4>
    83c4:	d100      	bne.n	83c8 <__aeabi_ddiv+0x3d0>
    83c6:	e08e      	b.n	84e6 <__aeabi_ddiv+0x4ee>
    83c8:	2301      	movs	r3, #1
    83ca:	4319      	orrs	r1, r3
    83cc:	4ba0      	ldr	r3, [pc, #640]	; (8650 <__aeabi_ddiv+0x658>)
    83ce:	18e3      	adds	r3, r4, r3
    83d0:	2b00      	cmp	r3, #0
    83d2:	dc00      	bgt.n	83d6 <__aeabi_ddiv+0x3de>
    83d4:	e099      	b.n	850a <__aeabi_ddiv+0x512>
    83d6:	074a      	lsls	r2, r1, #29
    83d8:	d000      	beq.n	83dc <__aeabi_ddiv+0x3e4>
    83da:	e09e      	b.n	851a <__aeabi_ddiv+0x522>
    83dc:	465a      	mov	r2, fp
    83de:	01d2      	lsls	r2, r2, #7
    83e0:	d506      	bpl.n	83f0 <__aeabi_ddiv+0x3f8>
    83e2:	465a      	mov	r2, fp
    83e4:	4b9b      	ldr	r3, [pc, #620]	; (8654 <__aeabi_ddiv+0x65c>)
    83e6:	401a      	ands	r2, r3
    83e8:	2380      	movs	r3, #128	; 0x80
    83ea:	4693      	mov	fp, r2
    83ec:	00db      	lsls	r3, r3, #3
    83ee:	18e3      	adds	r3, r4, r3
    83f0:	4a99      	ldr	r2, [pc, #612]	; (8658 <__aeabi_ddiv+0x660>)
    83f2:	4293      	cmp	r3, r2
    83f4:	dd68      	ble.n	84c8 <__aeabi_ddiv+0x4d0>
    83f6:	2301      	movs	r3, #1
    83f8:	9a02      	ldr	r2, [sp, #8]
    83fa:	4c98      	ldr	r4, [pc, #608]	; (865c <__aeabi_ddiv+0x664>)
    83fc:	401a      	ands	r2, r3
    83fe:	2300      	movs	r3, #0
    8400:	4694      	mov	ip, r2
    8402:	4698      	mov	r8, r3
    8404:	2200      	movs	r2, #0
    8406:	e6c5      	b.n	8194 <__aeabi_ddiv+0x19c>
    8408:	2280      	movs	r2, #128	; 0x80
    840a:	464b      	mov	r3, r9
    840c:	0312      	lsls	r2, r2, #12
    840e:	4213      	tst	r3, r2
    8410:	d00a      	beq.n	8428 <__aeabi_ddiv+0x430>
    8412:	465b      	mov	r3, fp
    8414:	4213      	tst	r3, r2
    8416:	d106      	bne.n	8426 <__aeabi_ddiv+0x42e>
    8418:	431a      	orrs	r2, r3
    841a:	0312      	lsls	r2, r2, #12
    841c:	0b12      	lsrs	r2, r2, #12
    841e:	46ac      	mov	ip, r5
    8420:	4688      	mov	r8, r1
    8422:	4c8e      	ldr	r4, [pc, #568]	; (865c <__aeabi_ddiv+0x664>)
    8424:	e6b6      	b.n	8194 <__aeabi_ddiv+0x19c>
    8426:	464b      	mov	r3, r9
    8428:	431a      	orrs	r2, r3
    842a:	0312      	lsls	r2, r2, #12
    842c:	0b12      	lsrs	r2, r2, #12
    842e:	46bc      	mov	ip, r7
    8430:	4c8a      	ldr	r4, [pc, #552]	; (865c <__aeabi_ddiv+0x664>)
    8432:	e6af      	b.n	8194 <__aeabi_ddiv+0x19c>
    8434:	0003      	movs	r3, r0
    8436:	465a      	mov	r2, fp
    8438:	3b28      	subs	r3, #40	; 0x28
    843a:	409a      	lsls	r2, r3
    843c:	2300      	movs	r3, #0
    843e:	4691      	mov	r9, r2
    8440:	4698      	mov	r8, r3
    8442:	e657      	b.n	80f4 <__aeabi_ddiv+0xfc>
    8444:	4658      	mov	r0, fp
    8446:	f000 ff5f 	bl	9308 <__clzsi2>
    844a:	3020      	adds	r0, #32
    844c:	e640      	b.n	80d0 <__aeabi_ddiv+0xd8>
    844e:	0003      	movs	r3, r0
    8450:	4652      	mov	r2, sl
    8452:	3b28      	subs	r3, #40	; 0x28
    8454:	409a      	lsls	r2, r3
    8456:	2100      	movs	r1, #0
    8458:	4693      	mov	fp, r2
    845a:	e677      	b.n	814c <__aeabi_ddiv+0x154>
    845c:	f000 ff54 	bl	9308 <__clzsi2>
    8460:	3020      	adds	r0, #32
    8462:	e65f      	b.n	8124 <__aeabi_ddiv+0x12c>
    8464:	4588      	cmp	r8, r1
    8466:	d200      	bcs.n	846a <__aeabi_ddiv+0x472>
    8468:	e6c7      	b.n	81fa <__aeabi_ddiv+0x202>
    846a:	464b      	mov	r3, r9
    846c:	07de      	lsls	r6, r3, #31
    846e:	085d      	lsrs	r5, r3, #1
    8470:	4643      	mov	r3, r8
    8472:	085b      	lsrs	r3, r3, #1
    8474:	431e      	orrs	r6, r3
    8476:	4643      	mov	r3, r8
    8478:	07db      	lsls	r3, r3, #31
    847a:	469a      	mov	sl, r3
    847c:	e6c2      	b.n	8204 <__aeabi_ddiv+0x20c>
    847e:	2500      	movs	r5, #0
    8480:	4592      	cmp	sl, r2
    8482:	d300      	bcc.n	8486 <__aeabi_ddiv+0x48e>
    8484:	e733      	b.n	82ee <__aeabi_ddiv+0x2f6>
    8486:	9e03      	ldr	r6, [sp, #12]
    8488:	4659      	mov	r1, fp
    848a:	46b4      	mov	ip, r6
    848c:	44e2      	add	sl, ip
    848e:	45b2      	cmp	sl, r6
    8490:	41ad      	sbcs	r5, r5
    8492:	426d      	negs	r5, r5
    8494:	4445      	add	r5, r8
    8496:	18eb      	adds	r3, r5, r3
    8498:	3901      	subs	r1, #1
    849a:	4598      	cmp	r8, r3
    849c:	d207      	bcs.n	84ae <__aeabi_ddiv+0x4b6>
    849e:	4298      	cmp	r0, r3
    84a0:	d900      	bls.n	84a4 <__aeabi_ddiv+0x4ac>
    84a2:	e07f      	b.n	85a4 <__aeabi_ddiv+0x5ac>
    84a4:	d100      	bne.n	84a8 <__aeabi_ddiv+0x4b0>
    84a6:	e0bc      	b.n	8622 <__aeabi_ddiv+0x62a>
    84a8:	1a1d      	subs	r5, r3, r0
    84aa:	468b      	mov	fp, r1
    84ac:	e71f      	b.n	82ee <__aeabi_ddiv+0x2f6>
    84ae:	4598      	cmp	r8, r3
    84b0:	d1fa      	bne.n	84a8 <__aeabi_ddiv+0x4b0>
    84b2:	9d03      	ldr	r5, [sp, #12]
    84b4:	4555      	cmp	r5, sl
    84b6:	d9f2      	bls.n	849e <__aeabi_ddiv+0x4a6>
    84b8:	4643      	mov	r3, r8
    84ba:	468b      	mov	fp, r1
    84bc:	1a1d      	subs	r5, r3, r0
    84be:	e716      	b.n	82ee <__aeabi_ddiv+0x2f6>
    84c0:	469b      	mov	fp, r3
    84c2:	e6ca      	b.n	825a <__aeabi_ddiv+0x262>
    84c4:	0015      	movs	r5, r2
    84c6:	e6e7      	b.n	8298 <__aeabi_ddiv+0x2a0>
    84c8:	465a      	mov	r2, fp
    84ca:	08c9      	lsrs	r1, r1, #3
    84cc:	0752      	lsls	r2, r2, #29
    84ce:	430a      	orrs	r2, r1
    84d0:	055b      	lsls	r3, r3, #21
    84d2:	4690      	mov	r8, r2
    84d4:	0d5c      	lsrs	r4, r3, #21
    84d6:	465a      	mov	r2, fp
    84d8:	2301      	movs	r3, #1
    84da:	9902      	ldr	r1, [sp, #8]
    84dc:	0252      	lsls	r2, r2, #9
    84de:	4019      	ands	r1, r3
    84e0:	0b12      	lsrs	r2, r2, #12
    84e2:	468c      	mov	ip, r1
    84e4:	e656      	b.n	8194 <__aeabi_ddiv+0x19c>
    84e6:	2b00      	cmp	r3, #0
    84e8:	d100      	bne.n	84ec <__aeabi_ddiv+0x4f4>
    84ea:	e76f      	b.n	83cc <__aeabi_ddiv+0x3d4>
    84ec:	4446      	add	r6, r8
    84ee:	1e4a      	subs	r2, r1, #1
    84f0:	45b0      	cmp	r8, r6
    84f2:	d929      	bls.n	8548 <__aeabi_ddiv+0x550>
    84f4:	0011      	movs	r1, r2
    84f6:	4286      	cmp	r6, r0
    84f8:	d000      	beq.n	84fc <__aeabi_ddiv+0x504>
    84fa:	e765      	b.n	83c8 <__aeabi_ddiv+0x3d0>
    84fc:	9a03      	ldr	r2, [sp, #12]
    84fe:	4293      	cmp	r3, r2
    8500:	d000      	beq.n	8504 <__aeabi_ddiv+0x50c>
    8502:	e761      	b.n	83c8 <__aeabi_ddiv+0x3d0>
    8504:	e762      	b.n	83cc <__aeabi_ddiv+0x3d4>
    8506:	2101      	movs	r1, #1
    8508:	4249      	negs	r1, r1
    850a:	2001      	movs	r0, #1
    850c:	1ac2      	subs	r2, r0, r3
    850e:	2a38      	cmp	r2, #56	; 0x38
    8510:	dd21      	ble.n	8556 <__aeabi_ddiv+0x55e>
    8512:	9b02      	ldr	r3, [sp, #8]
    8514:	4003      	ands	r3, r0
    8516:	469c      	mov	ip, r3
    8518:	e638      	b.n	818c <__aeabi_ddiv+0x194>
    851a:	220f      	movs	r2, #15
    851c:	400a      	ands	r2, r1
    851e:	2a04      	cmp	r2, #4
    8520:	d100      	bne.n	8524 <__aeabi_ddiv+0x52c>
    8522:	e75b      	b.n	83dc <__aeabi_ddiv+0x3e4>
    8524:	000a      	movs	r2, r1
    8526:	1d11      	adds	r1, r2, #4
    8528:	4291      	cmp	r1, r2
    852a:	4192      	sbcs	r2, r2
    852c:	4252      	negs	r2, r2
    852e:	4493      	add	fp, r2
    8530:	e754      	b.n	83dc <__aeabi_ddiv+0x3e4>
    8532:	4b47      	ldr	r3, [pc, #284]	; (8650 <__aeabi_ddiv+0x658>)
    8534:	18e3      	adds	r3, r4, r3
    8536:	2b00      	cmp	r3, #0
    8538:	dde5      	ble.n	8506 <__aeabi_ddiv+0x50e>
    853a:	2201      	movs	r2, #1
    853c:	4252      	negs	r2, r2
    853e:	e7f2      	b.n	8526 <__aeabi_ddiv+0x52e>
    8540:	001d      	movs	r5, r3
    8542:	e6fa      	b.n	833a <__aeabi_ddiv+0x342>
    8544:	469a      	mov	sl, r3
    8546:	e71c      	b.n	8382 <__aeabi_ddiv+0x38a>
    8548:	42b0      	cmp	r0, r6
    854a:	d839      	bhi.n	85c0 <__aeabi_ddiv+0x5c8>
    854c:	d06e      	beq.n	862c <__aeabi_ddiv+0x634>
    854e:	0011      	movs	r1, r2
    8550:	e73a      	b.n	83c8 <__aeabi_ddiv+0x3d0>
    8552:	9302      	str	r3, [sp, #8]
    8554:	e73a      	b.n	83cc <__aeabi_ddiv+0x3d4>
    8556:	2a1f      	cmp	r2, #31
    8558:	dc3c      	bgt.n	85d4 <__aeabi_ddiv+0x5dc>
    855a:	2320      	movs	r3, #32
    855c:	1a9b      	subs	r3, r3, r2
    855e:	000c      	movs	r4, r1
    8560:	4658      	mov	r0, fp
    8562:	4099      	lsls	r1, r3
    8564:	4098      	lsls	r0, r3
    8566:	1e4b      	subs	r3, r1, #1
    8568:	4199      	sbcs	r1, r3
    856a:	465b      	mov	r3, fp
    856c:	40d4      	lsrs	r4, r2
    856e:	40d3      	lsrs	r3, r2
    8570:	4320      	orrs	r0, r4
    8572:	4308      	orrs	r0, r1
    8574:	001a      	movs	r2, r3
    8576:	0743      	lsls	r3, r0, #29
    8578:	d009      	beq.n	858e <__aeabi_ddiv+0x596>
    857a:	230f      	movs	r3, #15
    857c:	4003      	ands	r3, r0
    857e:	2b04      	cmp	r3, #4
    8580:	d005      	beq.n	858e <__aeabi_ddiv+0x596>
    8582:	0001      	movs	r1, r0
    8584:	1d08      	adds	r0, r1, #4
    8586:	4288      	cmp	r0, r1
    8588:	419b      	sbcs	r3, r3
    858a:	425b      	negs	r3, r3
    858c:	18d2      	adds	r2, r2, r3
    858e:	0213      	lsls	r3, r2, #8
    8590:	d53a      	bpl.n	8608 <__aeabi_ddiv+0x610>
    8592:	2301      	movs	r3, #1
    8594:	9a02      	ldr	r2, [sp, #8]
    8596:	2401      	movs	r4, #1
    8598:	401a      	ands	r2, r3
    859a:	2300      	movs	r3, #0
    859c:	4694      	mov	ip, r2
    859e:	4698      	mov	r8, r3
    85a0:	2200      	movs	r2, #0
    85a2:	e5f7      	b.n	8194 <__aeabi_ddiv+0x19c>
    85a4:	2102      	movs	r1, #2
    85a6:	4249      	negs	r1, r1
    85a8:	468c      	mov	ip, r1
    85aa:	9d03      	ldr	r5, [sp, #12]
    85ac:	44e3      	add	fp, ip
    85ae:	46ac      	mov	ip, r5
    85b0:	44e2      	add	sl, ip
    85b2:	45aa      	cmp	sl, r5
    85b4:	41ad      	sbcs	r5, r5
    85b6:	426d      	negs	r5, r5
    85b8:	4445      	add	r5, r8
    85ba:	18ed      	adds	r5, r5, r3
    85bc:	1a2d      	subs	r5, r5, r0
    85be:	e696      	b.n	82ee <__aeabi_ddiv+0x2f6>
    85c0:	1e8a      	subs	r2, r1, #2
    85c2:	9903      	ldr	r1, [sp, #12]
    85c4:	004d      	lsls	r5, r1, #1
    85c6:	428d      	cmp	r5, r1
    85c8:	4189      	sbcs	r1, r1
    85ca:	4249      	negs	r1, r1
    85cc:	4441      	add	r1, r8
    85ce:	1876      	adds	r6, r6, r1
    85d0:	9503      	str	r5, [sp, #12]
    85d2:	e78f      	b.n	84f4 <__aeabi_ddiv+0x4fc>
    85d4:	201f      	movs	r0, #31
    85d6:	4240      	negs	r0, r0
    85d8:	1ac3      	subs	r3, r0, r3
    85da:	4658      	mov	r0, fp
    85dc:	40d8      	lsrs	r0, r3
    85de:	0003      	movs	r3, r0
    85e0:	2a20      	cmp	r2, #32
    85e2:	d028      	beq.n	8636 <__aeabi_ddiv+0x63e>
    85e4:	2040      	movs	r0, #64	; 0x40
    85e6:	465d      	mov	r5, fp
    85e8:	1a82      	subs	r2, r0, r2
    85ea:	4095      	lsls	r5, r2
    85ec:	4329      	orrs	r1, r5
    85ee:	1e4a      	subs	r2, r1, #1
    85f0:	4191      	sbcs	r1, r2
    85f2:	4319      	orrs	r1, r3
    85f4:	2307      	movs	r3, #7
    85f6:	2200      	movs	r2, #0
    85f8:	400b      	ands	r3, r1
    85fa:	d009      	beq.n	8610 <__aeabi_ddiv+0x618>
    85fc:	230f      	movs	r3, #15
    85fe:	2200      	movs	r2, #0
    8600:	400b      	ands	r3, r1
    8602:	0008      	movs	r0, r1
    8604:	2b04      	cmp	r3, #4
    8606:	d1bd      	bne.n	8584 <__aeabi_ddiv+0x58c>
    8608:	0001      	movs	r1, r0
    860a:	0753      	lsls	r3, r2, #29
    860c:	0252      	lsls	r2, r2, #9
    860e:	0b12      	lsrs	r2, r2, #12
    8610:	08c9      	lsrs	r1, r1, #3
    8612:	4319      	orrs	r1, r3
    8614:	2301      	movs	r3, #1
    8616:	4688      	mov	r8, r1
    8618:	9902      	ldr	r1, [sp, #8]
    861a:	2400      	movs	r4, #0
    861c:	4019      	ands	r1, r3
    861e:	468c      	mov	ip, r1
    8620:	e5b8      	b.n	8194 <__aeabi_ddiv+0x19c>
    8622:	4552      	cmp	r2, sl
    8624:	d8be      	bhi.n	85a4 <__aeabi_ddiv+0x5ac>
    8626:	468b      	mov	fp, r1
    8628:	2500      	movs	r5, #0
    862a:	e660      	b.n	82ee <__aeabi_ddiv+0x2f6>
    862c:	9d03      	ldr	r5, [sp, #12]
    862e:	429d      	cmp	r5, r3
    8630:	d3c6      	bcc.n	85c0 <__aeabi_ddiv+0x5c8>
    8632:	0011      	movs	r1, r2
    8634:	e762      	b.n	84fc <__aeabi_ddiv+0x504>
    8636:	2500      	movs	r5, #0
    8638:	e7d8      	b.n	85ec <__aeabi_ddiv+0x5f4>
    863a:	2280      	movs	r2, #128	; 0x80
    863c:	465b      	mov	r3, fp
    863e:	0312      	lsls	r2, r2, #12
    8640:	431a      	orrs	r2, r3
    8642:	9b01      	ldr	r3, [sp, #4]
    8644:	0312      	lsls	r2, r2, #12
    8646:	0b12      	lsrs	r2, r2, #12
    8648:	469c      	mov	ip, r3
    864a:	4688      	mov	r8, r1
    864c:	4c03      	ldr	r4, [pc, #12]	; (865c <__aeabi_ddiv+0x664>)
    864e:	e5a1      	b.n	8194 <__aeabi_ddiv+0x19c>
    8650:	000003ff 	.word	0x000003ff
    8654:	feffffff 	.word	0xfeffffff
    8658:	000007fe 	.word	0x000007fe
    865c:	000007ff 	.word	0x000007ff

00008660 <__aeabi_dmul>:
    8660:	b5f0      	push	{r4, r5, r6, r7, lr}
    8662:	4657      	mov	r7, sl
    8664:	4645      	mov	r5, r8
    8666:	46de      	mov	lr, fp
    8668:	464e      	mov	r6, r9
    866a:	b5e0      	push	{r5, r6, r7, lr}
    866c:	030c      	lsls	r4, r1, #12
    866e:	4698      	mov	r8, r3
    8670:	004e      	lsls	r6, r1, #1
    8672:	0b23      	lsrs	r3, r4, #12
    8674:	b087      	sub	sp, #28
    8676:	0007      	movs	r7, r0
    8678:	4692      	mov	sl, r2
    867a:	469b      	mov	fp, r3
    867c:	0d76      	lsrs	r6, r6, #21
    867e:	0fcd      	lsrs	r5, r1, #31
    8680:	2e00      	cmp	r6, #0
    8682:	d06b      	beq.n	875c <__aeabi_dmul+0xfc>
    8684:	4b6d      	ldr	r3, [pc, #436]	; (883c <__aeabi_dmul+0x1dc>)
    8686:	429e      	cmp	r6, r3
    8688:	d035      	beq.n	86f6 <__aeabi_dmul+0x96>
    868a:	2480      	movs	r4, #128	; 0x80
    868c:	465b      	mov	r3, fp
    868e:	0f42      	lsrs	r2, r0, #29
    8690:	0424      	lsls	r4, r4, #16
    8692:	00db      	lsls	r3, r3, #3
    8694:	4314      	orrs	r4, r2
    8696:	431c      	orrs	r4, r3
    8698:	00c3      	lsls	r3, r0, #3
    869a:	4699      	mov	r9, r3
    869c:	4b68      	ldr	r3, [pc, #416]	; (8840 <__aeabi_dmul+0x1e0>)
    869e:	46a3      	mov	fp, r4
    86a0:	469c      	mov	ip, r3
    86a2:	2300      	movs	r3, #0
    86a4:	2700      	movs	r7, #0
    86a6:	4466      	add	r6, ip
    86a8:	9302      	str	r3, [sp, #8]
    86aa:	4643      	mov	r3, r8
    86ac:	031c      	lsls	r4, r3, #12
    86ae:	005a      	lsls	r2, r3, #1
    86b0:	0fdb      	lsrs	r3, r3, #31
    86b2:	4650      	mov	r0, sl
    86b4:	0b24      	lsrs	r4, r4, #12
    86b6:	0d52      	lsrs	r2, r2, #21
    86b8:	4698      	mov	r8, r3
    86ba:	d100      	bne.n	86be <__aeabi_dmul+0x5e>
    86bc:	e076      	b.n	87ac <__aeabi_dmul+0x14c>
    86be:	4b5f      	ldr	r3, [pc, #380]	; (883c <__aeabi_dmul+0x1dc>)
    86c0:	429a      	cmp	r2, r3
    86c2:	d06d      	beq.n	87a0 <__aeabi_dmul+0x140>
    86c4:	2380      	movs	r3, #128	; 0x80
    86c6:	0f41      	lsrs	r1, r0, #29
    86c8:	041b      	lsls	r3, r3, #16
    86ca:	430b      	orrs	r3, r1
    86cc:	495c      	ldr	r1, [pc, #368]	; (8840 <__aeabi_dmul+0x1e0>)
    86ce:	00e4      	lsls	r4, r4, #3
    86d0:	468c      	mov	ip, r1
    86d2:	431c      	orrs	r4, r3
    86d4:	00c3      	lsls	r3, r0, #3
    86d6:	2000      	movs	r0, #0
    86d8:	4462      	add	r2, ip
    86da:	4641      	mov	r1, r8
    86dc:	18b6      	adds	r6, r6, r2
    86de:	4069      	eors	r1, r5
    86e0:	1c72      	adds	r2, r6, #1
    86e2:	9101      	str	r1, [sp, #4]
    86e4:	4694      	mov	ip, r2
    86e6:	4307      	orrs	r7, r0
    86e8:	2f0f      	cmp	r7, #15
    86ea:	d900      	bls.n	86ee <__aeabi_dmul+0x8e>
    86ec:	e0b0      	b.n	8850 <__aeabi_dmul+0x1f0>
    86ee:	4a55      	ldr	r2, [pc, #340]	; (8844 <__aeabi_dmul+0x1e4>)
    86f0:	00bf      	lsls	r7, r7, #2
    86f2:	59d2      	ldr	r2, [r2, r7]
    86f4:	4697      	mov	pc, r2
    86f6:	465b      	mov	r3, fp
    86f8:	4303      	orrs	r3, r0
    86fa:	4699      	mov	r9, r3
    86fc:	d000      	beq.n	8700 <__aeabi_dmul+0xa0>
    86fe:	e087      	b.n	8810 <__aeabi_dmul+0x1b0>
    8700:	2300      	movs	r3, #0
    8702:	469b      	mov	fp, r3
    8704:	3302      	adds	r3, #2
    8706:	2708      	movs	r7, #8
    8708:	9302      	str	r3, [sp, #8]
    870a:	e7ce      	b.n	86aa <__aeabi_dmul+0x4a>
    870c:	4642      	mov	r2, r8
    870e:	9201      	str	r2, [sp, #4]
    8710:	2802      	cmp	r0, #2
    8712:	d067      	beq.n	87e4 <__aeabi_dmul+0x184>
    8714:	2803      	cmp	r0, #3
    8716:	d100      	bne.n	871a <__aeabi_dmul+0xba>
    8718:	e20e      	b.n	8b38 <__aeabi_dmul+0x4d8>
    871a:	2801      	cmp	r0, #1
    871c:	d000      	beq.n	8720 <__aeabi_dmul+0xc0>
    871e:	e162      	b.n	89e6 <__aeabi_dmul+0x386>
    8720:	2300      	movs	r3, #0
    8722:	2400      	movs	r4, #0
    8724:	2200      	movs	r2, #0
    8726:	4699      	mov	r9, r3
    8728:	9901      	ldr	r1, [sp, #4]
    872a:	4001      	ands	r1, r0
    872c:	b2cd      	uxtb	r5, r1
    872e:	2100      	movs	r1, #0
    8730:	0312      	lsls	r2, r2, #12
    8732:	0d0b      	lsrs	r3, r1, #20
    8734:	0b12      	lsrs	r2, r2, #12
    8736:	051b      	lsls	r3, r3, #20
    8738:	4313      	orrs	r3, r2
    873a:	4a43      	ldr	r2, [pc, #268]	; (8848 <__aeabi_dmul+0x1e8>)
    873c:	0524      	lsls	r4, r4, #20
    873e:	4013      	ands	r3, r2
    8740:	431c      	orrs	r4, r3
    8742:	0064      	lsls	r4, r4, #1
    8744:	07ed      	lsls	r5, r5, #31
    8746:	0864      	lsrs	r4, r4, #1
    8748:	432c      	orrs	r4, r5
    874a:	4648      	mov	r0, r9
    874c:	0021      	movs	r1, r4
    874e:	b007      	add	sp, #28
    8750:	bc3c      	pop	{r2, r3, r4, r5}
    8752:	4690      	mov	r8, r2
    8754:	4699      	mov	r9, r3
    8756:	46a2      	mov	sl, r4
    8758:	46ab      	mov	fp, r5
    875a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    875c:	4303      	orrs	r3, r0
    875e:	4699      	mov	r9, r3
    8760:	d04f      	beq.n	8802 <__aeabi_dmul+0x1a2>
    8762:	465b      	mov	r3, fp
    8764:	2b00      	cmp	r3, #0
    8766:	d100      	bne.n	876a <__aeabi_dmul+0x10a>
    8768:	e189      	b.n	8a7e <__aeabi_dmul+0x41e>
    876a:	4658      	mov	r0, fp
    876c:	f000 fdcc 	bl	9308 <__clzsi2>
    8770:	0003      	movs	r3, r0
    8772:	3b0b      	subs	r3, #11
    8774:	2b1c      	cmp	r3, #28
    8776:	dd00      	ble.n	877a <__aeabi_dmul+0x11a>
    8778:	e17a      	b.n	8a70 <__aeabi_dmul+0x410>
    877a:	221d      	movs	r2, #29
    877c:	1ad3      	subs	r3, r2, r3
    877e:	003a      	movs	r2, r7
    8780:	0001      	movs	r1, r0
    8782:	465c      	mov	r4, fp
    8784:	40da      	lsrs	r2, r3
    8786:	3908      	subs	r1, #8
    8788:	408c      	lsls	r4, r1
    878a:	0013      	movs	r3, r2
    878c:	408f      	lsls	r7, r1
    878e:	4323      	orrs	r3, r4
    8790:	469b      	mov	fp, r3
    8792:	46b9      	mov	r9, r7
    8794:	2300      	movs	r3, #0
    8796:	4e2d      	ldr	r6, [pc, #180]	; (884c <__aeabi_dmul+0x1ec>)
    8798:	2700      	movs	r7, #0
    879a:	1a36      	subs	r6, r6, r0
    879c:	9302      	str	r3, [sp, #8]
    879e:	e784      	b.n	86aa <__aeabi_dmul+0x4a>
    87a0:	4653      	mov	r3, sl
    87a2:	4323      	orrs	r3, r4
    87a4:	d12a      	bne.n	87fc <__aeabi_dmul+0x19c>
    87a6:	2400      	movs	r4, #0
    87a8:	2002      	movs	r0, #2
    87aa:	e796      	b.n	86da <__aeabi_dmul+0x7a>
    87ac:	4653      	mov	r3, sl
    87ae:	4323      	orrs	r3, r4
    87b0:	d020      	beq.n	87f4 <__aeabi_dmul+0x194>
    87b2:	2c00      	cmp	r4, #0
    87b4:	d100      	bne.n	87b8 <__aeabi_dmul+0x158>
    87b6:	e157      	b.n	8a68 <__aeabi_dmul+0x408>
    87b8:	0020      	movs	r0, r4
    87ba:	f000 fda5 	bl	9308 <__clzsi2>
    87be:	0003      	movs	r3, r0
    87c0:	3b0b      	subs	r3, #11
    87c2:	2b1c      	cmp	r3, #28
    87c4:	dd00      	ble.n	87c8 <__aeabi_dmul+0x168>
    87c6:	e149      	b.n	8a5c <__aeabi_dmul+0x3fc>
    87c8:	211d      	movs	r1, #29
    87ca:	1acb      	subs	r3, r1, r3
    87cc:	4651      	mov	r1, sl
    87ce:	0002      	movs	r2, r0
    87d0:	40d9      	lsrs	r1, r3
    87d2:	4653      	mov	r3, sl
    87d4:	3a08      	subs	r2, #8
    87d6:	4094      	lsls	r4, r2
    87d8:	4093      	lsls	r3, r2
    87da:	430c      	orrs	r4, r1
    87dc:	4a1b      	ldr	r2, [pc, #108]	; (884c <__aeabi_dmul+0x1ec>)
    87de:	1a12      	subs	r2, r2, r0
    87e0:	2000      	movs	r0, #0
    87e2:	e77a      	b.n	86da <__aeabi_dmul+0x7a>
    87e4:	2501      	movs	r5, #1
    87e6:	9b01      	ldr	r3, [sp, #4]
    87e8:	4c14      	ldr	r4, [pc, #80]	; (883c <__aeabi_dmul+0x1dc>)
    87ea:	401d      	ands	r5, r3
    87ec:	2300      	movs	r3, #0
    87ee:	2200      	movs	r2, #0
    87f0:	4699      	mov	r9, r3
    87f2:	e79c      	b.n	872e <__aeabi_dmul+0xce>
    87f4:	2400      	movs	r4, #0
    87f6:	2200      	movs	r2, #0
    87f8:	2001      	movs	r0, #1
    87fa:	e76e      	b.n	86da <__aeabi_dmul+0x7a>
    87fc:	4653      	mov	r3, sl
    87fe:	2003      	movs	r0, #3
    8800:	e76b      	b.n	86da <__aeabi_dmul+0x7a>
    8802:	2300      	movs	r3, #0
    8804:	469b      	mov	fp, r3
    8806:	3301      	adds	r3, #1
    8808:	2704      	movs	r7, #4
    880a:	2600      	movs	r6, #0
    880c:	9302      	str	r3, [sp, #8]
    880e:	e74c      	b.n	86aa <__aeabi_dmul+0x4a>
    8810:	2303      	movs	r3, #3
    8812:	4681      	mov	r9, r0
    8814:	270c      	movs	r7, #12
    8816:	9302      	str	r3, [sp, #8]
    8818:	e747      	b.n	86aa <__aeabi_dmul+0x4a>
    881a:	2280      	movs	r2, #128	; 0x80
    881c:	2300      	movs	r3, #0
    881e:	2500      	movs	r5, #0
    8820:	0312      	lsls	r2, r2, #12
    8822:	4699      	mov	r9, r3
    8824:	4c05      	ldr	r4, [pc, #20]	; (883c <__aeabi_dmul+0x1dc>)
    8826:	e782      	b.n	872e <__aeabi_dmul+0xce>
    8828:	465c      	mov	r4, fp
    882a:	464b      	mov	r3, r9
    882c:	9802      	ldr	r0, [sp, #8]
    882e:	e76f      	b.n	8710 <__aeabi_dmul+0xb0>
    8830:	465c      	mov	r4, fp
    8832:	464b      	mov	r3, r9
    8834:	9501      	str	r5, [sp, #4]
    8836:	9802      	ldr	r0, [sp, #8]
    8838:	e76a      	b.n	8710 <__aeabi_dmul+0xb0>
    883a:	46c0      	nop			; (mov r8, r8)
    883c:	000007ff 	.word	0x000007ff
    8840:	fffffc01 	.word	0xfffffc01
    8844:	0000bb58 	.word	0x0000bb58
    8848:	800fffff 	.word	0x800fffff
    884c:	fffffc0d 	.word	0xfffffc0d
    8850:	464a      	mov	r2, r9
    8852:	4649      	mov	r1, r9
    8854:	0c17      	lsrs	r7, r2, #16
    8856:	0c1a      	lsrs	r2, r3, #16
    8858:	041b      	lsls	r3, r3, #16
    885a:	0c1b      	lsrs	r3, r3, #16
    885c:	0408      	lsls	r0, r1, #16
    885e:	0019      	movs	r1, r3
    8860:	0c00      	lsrs	r0, r0, #16
    8862:	4341      	muls	r1, r0
    8864:	0015      	movs	r5, r2
    8866:	4688      	mov	r8, r1
    8868:	0019      	movs	r1, r3
    886a:	437d      	muls	r5, r7
    886c:	4379      	muls	r1, r7
    886e:	9503      	str	r5, [sp, #12]
    8870:	4689      	mov	r9, r1
    8872:	0029      	movs	r1, r5
    8874:	0015      	movs	r5, r2
    8876:	4345      	muls	r5, r0
    8878:	444d      	add	r5, r9
    887a:	9502      	str	r5, [sp, #8]
    887c:	4645      	mov	r5, r8
    887e:	0c2d      	lsrs	r5, r5, #16
    8880:	46aa      	mov	sl, r5
    8882:	9d02      	ldr	r5, [sp, #8]
    8884:	4455      	add	r5, sl
    8886:	45a9      	cmp	r9, r5
    8888:	d906      	bls.n	8898 <__aeabi_dmul+0x238>
    888a:	468a      	mov	sl, r1
    888c:	2180      	movs	r1, #128	; 0x80
    888e:	0249      	lsls	r1, r1, #9
    8890:	4689      	mov	r9, r1
    8892:	44ca      	add	sl, r9
    8894:	4651      	mov	r1, sl
    8896:	9103      	str	r1, [sp, #12]
    8898:	0c29      	lsrs	r1, r5, #16
    889a:	9104      	str	r1, [sp, #16]
    889c:	4641      	mov	r1, r8
    889e:	0409      	lsls	r1, r1, #16
    88a0:	042d      	lsls	r5, r5, #16
    88a2:	0c09      	lsrs	r1, r1, #16
    88a4:	4688      	mov	r8, r1
    88a6:	0029      	movs	r1, r5
    88a8:	0c25      	lsrs	r5, r4, #16
    88aa:	0424      	lsls	r4, r4, #16
    88ac:	4441      	add	r1, r8
    88ae:	0c24      	lsrs	r4, r4, #16
    88b0:	9105      	str	r1, [sp, #20]
    88b2:	0021      	movs	r1, r4
    88b4:	4341      	muls	r1, r0
    88b6:	4688      	mov	r8, r1
    88b8:	0021      	movs	r1, r4
    88ba:	4379      	muls	r1, r7
    88bc:	468a      	mov	sl, r1
    88be:	4368      	muls	r0, r5
    88c0:	4641      	mov	r1, r8
    88c2:	4450      	add	r0, sl
    88c4:	4681      	mov	r9, r0
    88c6:	0c08      	lsrs	r0, r1, #16
    88c8:	4448      	add	r0, r9
    88ca:	436f      	muls	r7, r5
    88cc:	4582      	cmp	sl, r0
    88ce:	d903      	bls.n	88d8 <__aeabi_dmul+0x278>
    88d0:	2180      	movs	r1, #128	; 0x80
    88d2:	0249      	lsls	r1, r1, #9
    88d4:	4689      	mov	r9, r1
    88d6:	444f      	add	r7, r9
    88d8:	0c01      	lsrs	r1, r0, #16
    88da:	4689      	mov	r9, r1
    88dc:	0039      	movs	r1, r7
    88de:	4449      	add	r1, r9
    88e0:	9102      	str	r1, [sp, #8]
    88e2:	4641      	mov	r1, r8
    88e4:	040f      	lsls	r7, r1, #16
    88e6:	9904      	ldr	r1, [sp, #16]
    88e8:	0c3f      	lsrs	r7, r7, #16
    88ea:	4688      	mov	r8, r1
    88ec:	0400      	lsls	r0, r0, #16
    88ee:	19c0      	adds	r0, r0, r7
    88f0:	4480      	add	r8, r0
    88f2:	4641      	mov	r1, r8
    88f4:	9104      	str	r1, [sp, #16]
    88f6:	4659      	mov	r1, fp
    88f8:	0c0f      	lsrs	r7, r1, #16
    88fa:	0409      	lsls	r1, r1, #16
    88fc:	0c09      	lsrs	r1, r1, #16
    88fe:	4688      	mov	r8, r1
    8900:	4359      	muls	r1, r3
    8902:	468a      	mov	sl, r1
    8904:	0039      	movs	r1, r7
    8906:	4351      	muls	r1, r2
    8908:	4689      	mov	r9, r1
    890a:	4641      	mov	r1, r8
    890c:	434a      	muls	r2, r1
    890e:	4651      	mov	r1, sl
    8910:	0c09      	lsrs	r1, r1, #16
    8912:	468b      	mov	fp, r1
    8914:	437b      	muls	r3, r7
    8916:	18d2      	adds	r2, r2, r3
    8918:	445a      	add	r2, fp
    891a:	4293      	cmp	r3, r2
    891c:	d903      	bls.n	8926 <__aeabi_dmul+0x2c6>
    891e:	2380      	movs	r3, #128	; 0x80
    8920:	025b      	lsls	r3, r3, #9
    8922:	469b      	mov	fp, r3
    8924:	44d9      	add	r9, fp
    8926:	4651      	mov	r1, sl
    8928:	0409      	lsls	r1, r1, #16
    892a:	0c09      	lsrs	r1, r1, #16
    892c:	468a      	mov	sl, r1
    892e:	4641      	mov	r1, r8
    8930:	4361      	muls	r1, r4
    8932:	437c      	muls	r4, r7
    8934:	0c13      	lsrs	r3, r2, #16
    8936:	0412      	lsls	r2, r2, #16
    8938:	444b      	add	r3, r9
    893a:	4452      	add	r2, sl
    893c:	46a1      	mov	r9, r4
    893e:	468a      	mov	sl, r1
    8940:	003c      	movs	r4, r7
    8942:	4641      	mov	r1, r8
    8944:	436c      	muls	r4, r5
    8946:	434d      	muls	r5, r1
    8948:	4651      	mov	r1, sl
    894a:	444d      	add	r5, r9
    894c:	0c0f      	lsrs	r7, r1, #16
    894e:	197d      	adds	r5, r7, r5
    8950:	45a9      	cmp	r9, r5
    8952:	d903      	bls.n	895c <__aeabi_dmul+0x2fc>
    8954:	2180      	movs	r1, #128	; 0x80
    8956:	0249      	lsls	r1, r1, #9
    8958:	4688      	mov	r8, r1
    895a:	4444      	add	r4, r8
    895c:	9f04      	ldr	r7, [sp, #16]
    895e:	9903      	ldr	r1, [sp, #12]
    8960:	46b8      	mov	r8, r7
    8962:	4441      	add	r1, r8
    8964:	468b      	mov	fp, r1
    8966:	4583      	cmp	fp, r0
    8968:	4180      	sbcs	r0, r0
    896a:	4241      	negs	r1, r0
    896c:	4688      	mov	r8, r1
    896e:	4651      	mov	r1, sl
    8970:	0408      	lsls	r0, r1, #16
    8972:	042f      	lsls	r7, r5, #16
    8974:	0c00      	lsrs	r0, r0, #16
    8976:	183f      	adds	r7, r7, r0
    8978:	4658      	mov	r0, fp
    897a:	9902      	ldr	r1, [sp, #8]
    897c:	1810      	adds	r0, r2, r0
    897e:	4689      	mov	r9, r1
    8980:	4290      	cmp	r0, r2
    8982:	4192      	sbcs	r2, r2
    8984:	444f      	add	r7, r9
    8986:	46ba      	mov	sl, r7
    8988:	4252      	negs	r2, r2
    898a:	4699      	mov	r9, r3
    898c:	4693      	mov	fp, r2
    898e:	44c2      	add	sl, r8
    8990:	44d1      	add	r9, sl
    8992:	44cb      	add	fp, r9
    8994:	428f      	cmp	r7, r1
    8996:	41bf      	sbcs	r7, r7
    8998:	45c2      	cmp	sl, r8
    899a:	4189      	sbcs	r1, r1
    899c:	4599      	cmp	r9, r3
    899e:	419b      	sbcs	r3, r3
    89a0:	4593      	cmp	fp, r2
    89a2:	4192      	sbcs	r2, r2
    89a4:	427f      	negs	r7, r7
    89a6:	4249      	negs	r1, r1
    89a8:	0c2d      	lsrs	r5, r5, #16
    89aa:	4252      	negs	r2, r2
    89ac:	430f      	orrs	r7, r1
    89ae:	425b      	negs	r3, r3
    89b0:	4313      	orrs	r3, r2
    89b2:	197f      	adds	r7, r7, r5
    89b4:	18ff      	adds	r7, r7, r3
    89b6:	465b      	mov	r3, fp
    89b8:	193c      	adds	r4, r7, r4
    89ba:	0ddb      	lsrs	r3, r3, #23
    89bc:	9a05      	ldr	r2, [sp, #20]
    89be:	0264      	lsls	r4, r4, #9
    89c0:	431c      	orrs	r4, r3
    89c2:	0243      	lsls	r3, r0, #9
    89c4:	4313      	orrs	r3, r2
    89c6:	1e5d      	subs	r5, r3, #1
    89c8:	41ab      	sbcs	r3, r5
    89ca:	465a      	mov	r2, fp
    89cc:	0dc0      	lsrs	r0, r0, #23
    89ce:	4303      	orrs	r3, r0
    89d0:	0252      	lsls	r2, r2, #9
    89d2:	4313      	orrs	r3, r2
    89d4:	01e2      	lsls	r2, r4, #7
    89d6:	d556      	bpl.n	8a86 <__aeabi_dmul+0x426>
    89d8:	2001      	movs	r0, #1
    89da:	085a      	lsrs	r2, r3, #1
    89dc:	4003      	ands	r3, r0
    89de:	4313      	orrs	r3, r2
    89e0:	07e2      	lsls	r2, r4, #31
    89e2:	4313      	orrs	r3, r2
    89e4:	0864      	lsrs	r4, r4, #1
    89e6:	485a      	ldr	r0, [pc, #360]	; (8b50 <__aeabi_dmul+0x4f0>)
    89e8:	4460      	add	r0, ip
    89ea:	2800      	cmp	r0, #0
    89ec:	dd4d      	ble.n	8a8a <__aeabi_dmul+0x42a>
    89ee:	075a      	lsls	r2, r3, #29
    89f0:	d009      	beq.n	8a06 <__aeabi_dmul+0x3a6>
    89f2:	220f      	movs	r2, #15
    89f4:	401a      	ands	r2, r3
    89f6:	2a04      	cmp	r2, #4
    89f8:	d005      	beq.n	8a06 <__aeabi_dmul+0x3a6>
    89fa:	1d1a      	adds	r2, r3, #4
    89fc:	429a      	cmp	r2, r3
    89fe:	419b      	sbcs	r3, r3
    8a00:	425b      	negs	r3, r3
    8a02:	18e4      	adds	r4, r4, r3
    8a04:	0013      	movs	r3, r2
    8a06:	01e2      	lsls	r2, r4, #7
    8a08:	d504      	bpl.n	8a14 <__aeabi_dmul+0x3b4>
    8a0a:	2080      	movs	r0, #128	; 0x80
    8a0c:	4a51      	ldr	r2, [pc, #324]	; (8b54 <__aeabi_dmul+0x4f4>)
    8a0e:	00c0      	lsls	r0, r0, #3
    8a10:	4014      	ands	r4, r2
    8a12:	4460      	add	r0, ip
    8a14:	4a50      	ldr	r2, [pc, #320]	; (8b58 <__aeabi_dmul+0x4f8>)
    8a16:	4290      	cmp	r0, r2
    8a18:	dd00      	ble.n	8a1c <__aeabi_dmul+0x3bc>
    8a1a:	e6e3      	b.n	87e4 <__aeabi_dmul+0x184>
    8a1c:	2501      	movs	r5, #1
    8a1e:	08db      	lsrs	r3, r3, #3
    8a20:	0762      	lsls	r2, r4, #29
    8a22:	431a      	orrs	r2, r3
    8a24:	0264      	lsls	r4, r4, #9
    8a26:	9b01      	ldr	r3, [sp, #4]
    8a28:	4691      	mov	r9, r2
    8a2a:	0b22      	lsrs	r2, r4, #12
    8a2c:	0544      	lsls	r4, r0, #21
    8a2e:	0d64      	lsrs	r4, r4, #21
    8a30:	401d      	ands	r5, r3
    8a32:	e67c      	b.n	872e <__aeabi_dmul+0xce>
    8a34:	2280      	movs	r2, #128	; 0x80
    8a36:	4659      	mov	r1, fp
    8a38:	0312      	lsls	r2, r2, #12
    8a3a:	4211      	tst	r1, r2
    8a3c:	d008      	beq.n	8a50 <__aeabi_dmul+0x3f0>
    8a3e:	4214      	tst	r4, r2
    8a40:	d106      	bne.n	8a50 <__aeabi_dmul+0x3f0>
    8a42:	4322      	orrs	r2, r4
    8a44:	0312      	lsls	r2, r2, #12
    8a46:	0b12      	lsrs	r2, r2, #12
    8a48:	4645      	mov	r5, r8
    8a4a:	4699      	mov	r9, r3
    8a4c:	4c43      	ldr	r4, [pc, #268]	; (8b5c <__aeabi_dmul+0x4fc>)
    8a4e:	e66e      	b.n	872e <__aeabi_dmul+0xce>
    8a50:	465b      	mov	r3, fp
    8a52:	431a      	orrs	r2, r3
    8a54:	0312      	lsls	r2, r2, #12
    8a56:	0b12      	lsrs	r2, r2, #12
    8a58:	4c40      	ldr	r4, [pc, #256]	; (8b5c <__aeabi_dmul+0x4fc>)
    8a5a:	e668      	b.n	872e <__aeabi_dmul+0xce>
    8a5c:	0003      	movs	r3, r0
    8a5e:	4654      	mov	r4, sl
    8a60:	3b28      	subs	r3, #40	; 0x28
    8a62:	409c      	lsls	r4, r3
    8a64:	2300      	movs	r3, #0
    8a66:	e6b9      	b.n	87dc <__aeabi_dmul+0x17c>
    8a68:	f000 fc4e 	bl	9308 <__clzsi2>
    8a6c:	3020      	adds	r0, #32
    8a6e:	e6a6      	b.n	87be <__aeabi_dmul+0x15e>
    8a70:	0003      	movs	r3, r0
    8a72:	3b28      	subs	r3, #40	; 0x28
    8a74:	409f      	lsls	r7, r3
    8a76:	2300      	movs	r3, #0
    8a78:	46bb      	mov	fp, r7
    8a7a:	4699      	mov	r9, r3
    8a7c:	e68a      	b.n	8794 <__aeabi_dmul+0x134>
    8a7e:	f000 fc43 	bl	9308 <__clzsi2>
    8a82:	3020      	adds	r0, #32
    8a84:	e674      	b.n	8770 <__aeabi_dmul+0x110>
    8a86:	46b4      	mov	ip, r6
    8a88:	e7ad      	b.n	89e6 <__aeabi_dmul+0x386>
    8a8a:	2501      	movs	r5, #1
    8a8c:	1a2a      	subs	r2, r5, r0
    8a8e:	2a38      	cmp	r2, #56	; 0x38
    8a90:	dd06      	ble.n	8aa0 <__aeabi_dmul+0x440>
    8a92:	9b01      	ldr	r3, [sp, #4]
    8a94:	2400      	movs	r4, #0
    8a96:	401d      	ands	r5, r3
    8a98:	2300      	movs	r3, #0
    8a9a:	2200      	movs	r2, #0
    8a9c:	4699      	mov	r9, r3
    8a9e:	e646      	b.n	872e <__aeabi_dmul+0xce>
    8aa0:	2a1f      	cmp	r2, #31
    8aa2:	dc21      	bgt.n	8ae8 <__aeabi_dmul+0x488>
    8aa4:	2520      	movs	r5, #32
    8aa6:	0020      	movs	r0, r4
    8aa8:	1aad      	subs	r5, r5, r2
    8aaa:	001e      	movs	r6, r3
    8aac:	40ab      	lsls	r3, r5
    8aae:	40a8      	lsls	r0, r5
    8ab0:	40d6      	lsrs	r6, r2
    8ab2:	1e5d      	subs	r5, r3, #1
    8ab4:	41ab      	sbcs	r3, r5
    8ab6:	4330      	orrs	r0, r6
    8ab8:	4318      	orrs	r0, r3
    8aba:	40d4      	lsrs	r4, r2
    8abc:	0743      	lsls	r3, r0, #29
    8abe:	d009      	beq.n	8ad4 <__aeabi_dmul+0x474>
    8ac0:	230f      	movs	r3, #15
    8ac2:	4003      	ands	r3, r0
    8ac4:	2b04      	cmp	r3, #4
    8ac6:	d005      	beq.n	8ad4 <__aeabi_dmul+0x474>
    8ac8:	0003      	movs	r3, r0
    8aca:	1d18      	adds	r0, r3, #4
    8acc:	4298      	cmp	r0, r3
    8ace:	419b      	sbcs	r3, r3
    8ad0:	425b      	negs	r3, r3
    8ad2:	18e4      	adds	r4, r4, r3
    8ad4:	0223      	lsls	r3, r4, #8
    8ad6:	d521      	bpl.n	8b1c <__aeabi_dmul+0x4bc>
    8ad8:	2501      	movs	r5, #1
    8ada:	9b01      	ldr	r3, [sp, #4]
    8adc:	2401      	movs	r4, #1
    8ade:	401d      	ands	r5, r3
    8ae0:	2300      	movs	r3, #0
    8ae2:	2200      	movs	r2, #0
    8ae4:	4699      	mov	r9, r3
    8ae6:	e622      	b.n	872e <__aeabi_dmul+0xce>
    8ae8:	251f      	movs	r5, #31
    8aea:	0021      	movs	r1, r4
    8aec:	426d      	negs	r5, r5
    8aee:	1a28      	subs	r0, r5, r0
    8af0:	40c1      	lsrs	r1, r0
    8af2:	0008      	movs	r0, r1
    8af4:	2a20      	cmp	r2, #32
    8af6:	d01d      	beq.n	8b34 <__aeabi_dmul+0x4d4>
    8af8:	355f      	adds	r5, #95	; 0x5f
    8afa:	1aaa      	subs	r2, r5, r2
    8afc:	4094      	lsls	r4, r2
    8afe:	4323      	orrs	r3, r4
    8b00:	1e5c      	subs	r4, r3, #1
    8b02:	41a3      	sbcs	r3, r4
    8b04:	2507      	movs	r5, #7
    8b06:	4303      	orrs	r3, r0
    8b08:	401d      	ands	r5, r3
    8b0a:	2200      	movs	r2, #0
    8b0c:	2d00      	cmp	r5, #0
    8b0e:	d009      	beq.n	8b24 <__aeabi_dmul+0x4c4>
    8b10:	220f      	movs	r2, #15
    8b12:	2400      	movs	r4, #0
    8b14:	401a      	ands	r2, r3
    8b16:	0018      	movs	r0, r3
    8b18:	2a04      	cmp	r2, #4
    8b1a:	d1d6      	bne.n	8aca <__aeabi_dmul+0x46a>
    8b1c:	0003      	movs	r3, r0
    8b1e:	0765      	lsls	r5, r4, #29
    8b20:	0264      	lsls	r4, r4, #9
    8b22:	0b22      	lsrs	r2, r4, #12
    8b24:	08db      	lsrs	r3, r3, #3
    8b26:	432b      	orrs	r3, r5
    8b28:	2501      	movs	r5, #1
    8b2a:	4699      	mov	r9, r3
    8b2c:	9b01      	ldr	r3, [sp, #4]
    8b2e:	2400      	movs	r4, #0
    8b30:	401d      	ands	r5, r3
    8b32:	e5fc      	b.n	872e <__aeabi_dmul+0xce>
    8b34:	2400      	movs	r4, #0
    8b36:	e7e2      	b.n	8afe <__aeabi_dmul+0x49e>
    8b38:	2280      	movs	r2, #128	; 0x80
    8b3a:	2501      	movs	r5, #1
    8b3c:	0312      	lsls	r2, r2, #12
    8b3e:	4322      	orrs	r2, r4
    8b40:	9901      	ldr	r1, [sp, #4]
    8b42:	0312      	lsls	r2, r2, #12
    8b44:	0b12      	lsrs	r2, r2, #12
    8b46:	400d      	ands	r5, r1
    8b48:	4699      	mov	r9, r3
    8b4a:	4c04      	ldr	r4, [pc, #16]	; (8b5c <__aeabi_dmul+0x4fc>)
    8b4c:	e5ef      	b.n	872e <__aeabi_dmul+0xce>
    8b4e:	46c0      	nop			; (mov r8, r8)
    8b50:	000003ff 	.word	0x000003ff
    8b54:	feffffff 	.word	0xfeffffff
    8b58:	000007fe 	.word	0x000007fe
    8b5c:	000007ff 	.word	0x000007ff

00008b60 <__aeabi_dsub>:
    8b60:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b62:	4646      	mov	r6, r8
    8b64:	46d6      	mov	lr, sl
    8b66:	464f      	mov	r7, r9
    8b68:	030c      	lsls	r4, r1, #12
    8b6a:	b5c0      	push	{r6, r7, lr}
    8b6c:	0fcd      	lsrs	r5, r1, #31
    8b6e:	004e      	lsls	r6, r1, #1
    8b70:	0a61      	lsrs	r1, r4, #9
    8b72:	0f44      	lsrs	r4, r0, #29
    8b74:	430c      	orrs	r4, r1
    8b76:	00c1      	lsls	r1, r0, #3
    8b78:	0058      	lsls	r0, r3, #1
    8b7a:	0d40      	lsrs	r0, r0, #21
    8b7c:	4684      	mov	ip, r0
    8b7e:	468a      	mov	sl, r1
    8b80:	000f      	movs	r7, r1
    8b82:	0319      	lsls	r1, r3, #12
    8b84:	0f50      	lsrs	r0, r2, #29
    8b86:	0a49      	lsrs	r1, r1, #9
    8b88:	4301      	orrs	r1, r0
    8b8a:	48c6      	ldr	r0, [pc, #792]	; (8ea4 <__aeabi_dsub+0x344>)
    8b8c:	0d76      	lsrs	r6, r6, #21
    8b8e:	46a8      	mov	r8, r5
    8b90:	0fdb      	lsrs	r3, r3, #31
    8b92:	00d2      	lsls	r2, r2, #3
    8b94:	4584      	cmp	ip, r0
    8b96:	d100      	bne.n	8b9a <__aeabi_dsub+0x3a>
    8b98:	e0d8      	b.n	8d4c <__aeabi_dsub+0x1ec>
    8b9a:	2001      	movs	r0, #1
    8b9c:	4043      	eors	r3, r0
    8b9e:	42ab      	cmp	r3, r5
    8ba0:	d100      	bne.n	8ba4 <__aeabi_dsub+0x44>
    8ba2:	e0a6      	b.n	8cf2 <__aeabi_dsub+0x192>
    8ba4:	4660      	mov	r0, ip
    8ba6:	1a35      	subs	r5, r6, r0
    8ba8:	2d00      	cmp	r5, #0
    8baa:	dc00      	bgt.n	8bae <__aeabi_dsub+0x4e>
    8bac:	e105      	b.n	8dba <__aeabi_dsub+0x25a>
    8bae:	2800      	cmp	r0, #0
    8bb0:	d110      	bne.n	8bd4 <__aeabi_dsub+0x74>
    8bb2:	000b      	movs	r3, r1
    8bb4:	4313      	orrs	r3, r2
    8bb6:	d100      	bne.n	8bba <__aeabi_dsub+0x5a>
    8bb8:	e0d7      	b.n	8d6a <__aeabi_dsub+0x20a>
    8bba:	1e6b      	subs	r3, r5, #1
    8bbc:	2b00      	cmp	r3, #0
    8bbe:	d000      	beq.n	8bc2 <__aeabi_dsub+0x62>
    8bc0:	e14b      	b.n	8e5a <__aeabi_dsub+0x2fa>
    8bc2:	4653      	mov	r3, sl
    8bc4:	1a9f      	subs	r7, r3, r2
    8bc6:	45ba      	cmp	sl, r7
    8bc8:	4180      	sbcs	r0, r0
    8bca:	1a64      	subs	r4, r4, r1
    8bcc:	4240      	negs	r0, r0
    8bce:	1a24      	subs	r4, r4, r0
    8bd0:	2601      	movs	r6, #1
    8bd2:	e01e      	b.n	8c12 <__aeabi_dsub+0xb2>
    8bd4:	4bb3      	ldr	r3, [pc, #716]	; (8ea4 <__aeabi_dsub+0x344>)
    8bd6:	429e      	cmp	r6, r3
    8bd8:	d048      	beq.n	8c6c <__aeabi_dsub+0x10c>
    8bda:	2380      	movs	r3, #128	; 0x80
    8bdc:	041b      	lsls	r3, r3, #16
    8bde:	4319      	orrs	r1, r3
    8be0:	2d38      	cmp	r5, #56	; 0x38
    8be2:	dd00      	ble.n	8be6 <__aeabi_dsub+0x86>
    8be4:	e119      	b.n	8e1a <__aeabi_dsub+0x2ba>
    8be6:	2d1f      	cmp	r5, #31
    8be8:	dd00      	ble.n	8bec <__aeabi_dsub+0x8c>
    8bea:	e14c      	b.n	8e86 <__aeabi_dsub+0x326>
    8bec:	2320      	movs	r3, #32
    8bee:	000f      	movs	r7, r1
    8bf0:	1b5b      	subs	r3, r3, r5
    8bf2:	0010      	movs	r0, r2
    8bf4:	409a      	lsls	r2, r3
    8bf6:	409f      	lsls	r7, r3
    8bf8:	40e8      	lsrs	r0, r5
    8bfa:	1e53      	subs	r3, r2, #1
    8bfc:	419a      	sbcs	r2, r3
    8bfe:	40e9      	lsrs	r1, r5
    8c00:	4307      	orrs	r7, r0
    8c02:	4317      	orrs	r7, r2
    8c04:	4653      	mov	r3, sl
    8c06:	1bdf      	subs	r7, r3, r7
    8c08:	1a61      	subs	r1, r4, r1
    8c0a:	45ba      	cmp	sl, r7
    8c0c:	41a4      	sbcs	r4, r4
    8c0e:	4264      	negs	r4, r4
    8c10:	1b0c      	subs	r4, r1, r4
    8c12:	0223      	lsls	r3, r4, #8
    8c14:	d400      	bmi.n	8c18 <__aeabi_dsub+0xb8>
    8c16:	e0c5      	b.n	8da4 <__aeabi_dsub+0x244>
    8c18:	0264      	lsls	r4, r4, #9
    8c1a:	0a65      	lsrs	r5, r4, #9
    8c1c:	2d00      	cmp	r5, #0
    8c1e:	d100      	bne.n	8c22 <__aeabi_dsub+0xc2>
    8c20:	e0f6      	b.n	8e10 <__aeabi_dsub+0x2b0>
    8c22:	0028      	movs	r0, r5
    8c24:	f000 fb70 	bl	9308 <__clzsi2>
    8c28:	0003      	movs	r3, r0
    8c2a:	3b08      	subs	r3, #8
    8c2c:	2b1f      	cmp	r3, #31
    8c2e:	dd00      	ble.n	8c32 <__aeabi_dsub+0xd2>
    8c30:	e0e9      	b.n	8e06 <__aeabi_dsub+0x2a6>
    8c32:	2220      	movs	r2, #32
    8c34:	003c      	movs	r4, r7
    8c36:	1ad2      	subs	r2, r2, r3
    8c38:	409d      	lsls	r5, r3
    8c3a:	40d4      	lsrs	r4, r2
    8c3c:	409f      	lsls	r7, r3
    8c3e:	4325      	orrs	r5, r4
    8c40:	429e      	cmp	r6, r3
    8c42:	dd00      	ble.n	8c46 <__aeabi_dsub+0xe6>
    8c44:	e0db      	b.n	8dfe <__aeabi_dsub+0x29e>
    8c46:	1b9e      	subs	r6, r3, r6
    8c48:	1c73      	adds	r3, r6, #1
    8c4a:	2b1f      	cmp	r3, #31
    8c4c:	dd00      	ble.n	8c50 <__aeabi_dsub+0xf0>
    8c4e:	e10a      	b.n	8e66 <__aeabi_dsub+0x306>
    8c50:	2220      	movs	r2, #32
    8c52:	0038      	movs	r0, r7
    8c54:	1ad2      	subs	r2, r2, r3
    8c56:	0029      	movs	r1, r5
    8c58:	4097      	lsls	r7, r2
    8c5a:	002c      	movs	r4, r5
    8c5c:	4091      	lsls	r1, r2
    8c5e:	40d8      	lsrs	r0, r3
    8c60:	1e7a      	subs	r2, r7, #1
    8c62:	4197      	sbcs	r7, r2
    8c64:	40dc      	lsrs	r4, r3
    8c66:	2600      	movs	r6, #0
    8c68:	4301      	orrs	r1, r0
    8c6a:	430f      	orrs	r7, r1
    8c6c:	077b      	lsls	r3, r7, #29
    8c6e:	d009      	beq.n	8c84 <__aeabi_dsub+0x124>
    8c70:	230f      	movs	r3, #15
    8c72:	403b      	ands	r3, r7
    8c74:	2b04      	cmp	r3, #4
    8c76:	d005      	beq.n	8c84 <__aeabi_dsub+0x124>
    8c78:	1d3b      	adds	r3, r7, #4
    8c7a:	42bb      	cmp	r3, r7
    8c7c:	41bf      	sbcs	r7, r7
    8c7e:	427f      	negs	r7, r7
    8c80:	19e4      	adds	r4, r4, r7
    8c82:	001f      	movs	r7, r3
    8c84:	0223      	lsls	r3, r4, #8
    8c86:	d525      	bpl.n	8cd4 <__aeabi_dsub+0x174>
    8c88:	4b86      	ldr	r3, [pc, #536]	; (8ea4 <__aeabi_dsub+0x344>)
    8c8a:	3601      	adds	r6, #1
    8c8c:	429e      	cmp	r6, r3
    8c8e:	d100      	bne.n	8c92 <__aeabi_dsub+0x132>
    8c90:	e0af      	b.n	8df2 <__aeabi_dsub+0x292>
    8c92:	4b85      	ldr	r3, [pc, #532]	; (8ea8 <__aeabi_dsub+0x348>)
    8c94:	2501      	movs	r5, #1
    8c96:	401c      	ands	r4, r3
    8c98:	4643      	mov	r3, r8
    8c9a:	0762      	lsls	r2, r4, #29
    8c9c:	08ff      	lsrs	r7, r7, #3
    8c9e:	0264      	lsls	r4, r4, #9
    8ca0:	0576      	lsls	r6, r6, #21
    8ca2:	4317      	orrs	r7, r2
    8ca4:	0b24      	lsrs	r4, r4, #12
    8ca6:	0d76      	lsrs	r6, r6, #21
    8ca8:	401d      	ands	r5, r3
    8caa:	2100      	movs	r1, #0
    8cac:	0324      	lsls	r4, r4, #12
    8cae:	0b23      	lsrs	r3, r4, #12
    8cb0:	0d0c      	lsrs	r4, r1, #20
    8cb2:	4a7e      	ldr	r2, [pc, #504]	; (8eac <__aeabi_dsub+0x34c>)
    8cb4:	0524      	lsls	r4, r4, #20
    8cb6:	431c      	orrs	r4, r3
    8cb8:	4014      	ands	r4, r2
    8cba:	0533      	lsls	r3, r6, #20
    8cbc:	4323      	orrs	r3, r4
    8cbe:	005b      	lsls	r3, r3, #1
    8cc0:	07ed      	lsls	r5, r5, #31
    8cc2:	085b      	lsrs	r3, r3, #1
    8cc4:	432b      	orrs	r3, r5
    8cc6:	0038      	movs	r0, r7
    8cc8:	0019      	movs	r1, r3
    8cca:	bc1c      	pop	{r2, r3, r4}
    8ccc:	4690      	mov	r8, r2
    8cce:	4699      	mov	r9, r3
    8cd0:	46a2      	mov	sl, r4
    8cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8cd4:	2501      	movs	r5, #1
    8cd6:	4643      	mov	r3, r8
    8cd8:	0762      	lsls	r2, r4, #29
    8cda:	08ff      	lsrs	r7, r7, #3
    8cdc:	4317      	orrs	r7, r2
    8cde:	08e4      	lsrs	r4, r4, #3
    8ce0:	401d      	ands	r5, r3
    8ce2:	4b70      	ldr	r3, [pc, #448]	; (8ea4 <__aeabi_dsub+0x344>)
    8ce4:	429e      	cmp	r6, r3
    8ce6:	d036      	beq.n	8d56 <__aeabi_dsub+0x1f6>
    8ce8:	0324      	lsls	r4, r4, #12
    8cea:	0576      	lsls	r6, r6, #21
    8cec:	0b24      	lsrs	r4, r4, #12
    8cee:	0d76      	lsrs	r6, r6, #21
    8cf0:	e7db      	b.n	8caa <__aeabi_dsub+0x14a>
    8cf2:	4663      	mov	r3, ip
    8cf4:	1af3      	subs	r3, r6, r3
    8cf6:	2b00      	cmp	r3, #0
    8cf8:	dc00      	bgt.n	8cfc <__aeabi_dsub+0x19c>
    8cfa:	e094      	b.n	8e26 <__aeabi_dsub+0x2c6>
    8cfc:	4660      	mov	r0, ip
    8cfe:	2800      	cmp	r0, #0
    8d00:	d035      	beq.n	8d6e <__aeabi_dsub+0x20e>
    8d02:	4868      	ldr	r0, [pc, #416]	; (8ea4 <__aeabi_dsub+0x344>)
    8d04:	4286      	cmp	r6, r0
    8d06:	d0b1      	beq.n	8c6c <__aeabi_dsub+0x10c>
    8d08:	2780      	movs	r7, #128	; 0x80
    8d0a:	043f      	lsls	r7, r7, #16
    8d0c:	4339      	orrs	r1, r7
    8d0e:	2b38      	cmp	r3, #56	; 0x38
    8d10:	dc00      	bgt.n	8d14 <__aeabi_dsub+0x1b4>
    8d12:	e0fd      	b.n	8f10 <__aeabi_dsub+0x3b0>
    8d14:	430a      	orrs	r2, r1
    8d16:	0017      	movs	r7, r2
    8d18:	2100      	movs	r1, #0
    8d1a:	1e7a      	subs	r2, r7, #1
    8d1c:	4197      	sbcs	r7, r2
    8d1e:	4457      	add	r7, sl
    8d20:	4557      	cmp	r7, sl
    8d22:	4180      	sbcs	r0, r0
    8d24:	1909      	adds	r1, r1, r4
    8d26:	4244      	negs	r4, r0
    8d28:	190c      	adds	r4, r1, r4
    8d2a:	0223      	lsls	r3, r4, #8
    8d2c:	d53a      	bpl.n	8da4 <__aeabi_dsub+0x244>
    8d2e:	4b5d      	ldr	r3, [pc, #372]	; (8ea4 <__aeabi_dsub+0x344>)
    8d30:	3601      	adds	r6, #1
    8d32:	429e      	cmp	r6, r3
    8d34:	d100      	bne.n	8d38 <__aeabi_dsub+0x1d8>
    8d36:	e14b      	b.n	8fd0 <__aeabi_dsub+0x470>
    8d38:	2201      	movs	r2, #1
    8d3a:	4b5b      	ldr	r3, [pc, #364]	; (8ea8 <__aeabi_dsub+0x348>)
    8d3c:	401c      	ands	r4, r3
    8d3e:	087b      	lsrs	r3, r7, #1
    8d40:	4017      	ands	r7, r2
    8d42:	431f      	orrs	r7, r3
    8d44:	07e2      	lsls	r2, r4, #31
    8d46:	4317      	orrs	r7, r2
    8d48:	0864      	lsrs	r4, r4, #1
    8d4a:	e78f      	b.n	8c6c <__aeabi_dsub+0x10c>
    8d4c:	0008      	movs	r0, r1
    8d4e:	4310      	orrs	r0, r2
    8d50:	d000      	beq.n	8d54 <__aeabi_dsub+0x1f4>
    8d52:	e724      	b.n	8b9e <__aeabi_dsub+0x3e>
    8d54:	e721      	b.n	8b9a <__aeabi_dsub+0x3a>
    8d56:	0023      	movs	r3, r4
    8d58:	433b      	orrs	r3, r7
    8d5a:	d100      	bne.n	8d5e <__aeabi_dsub+0x1fe>
    8d5c:	e1b9      	b.n	90d2 <__aeabi_dsub+0x572>
    8d5e:	2280      	movs	r2, #128	; 0x80
    8d60:	0312      	lsls	r2, r2, #12
    8d62:	4314      	orrs	r4, r2
    8d64:	0324      	lsls	r4, r4, #12
    8d66:	0b24      	lsrs	r4, r4, #12
    8d68:	e79f      	b.n	8caa <__aeabi_dsub+0x14a>
    8d6a:	002e      	movs	r6, r5
    8d6c:	e77e      	b.n	8c6c <__aeabi_dsub+0x10c>
    8d6e:	0008      	movs	r0, r1
    8d70:	4310      	orrs	r0, r2
    8d72:	d100      	bne.n	8d76 <__aeabi_dsub+0x216>
    8d74:	e0ca      	b.n	8f0c <__aeabi_dsub+0x3ac>
    8d76:	1e58      	subs	r0, r3, #1
    8d78:	4684      	mov	ip, r0
    8d7a:	2800      	cmp	r0, #0
    8d7c:	d000      	beq.n	8d80 <__aeabi_dsub+0x220>
    8d7e:	e0e7      	b.n	8f50 <__aeabi_dsub+0x3f0>
    8d80:	4452      	add	r2, sl
    8d82:	4552      	cmp	r2, sl
    8d84:	4180      	sbcs	r0, r0
    8d86:	1864      	adds	r4, r4, r1
    8d88:	4240      	negs	r0, r0
    8d8a:	1824      	adds	r4, r4, r0
    8d8c:	0017      	movs	r7, r2
    8d8e:	2601      	movs	r6, #1
    8d90:	0223      	lsls	r3, r4, #8
    8d92:	d507      	bpl.n	8da4 <__aeabi_dsub+0x244>
    8d94:	2602      	movs	r6, #2
    8d96:	e7cf      	b.n	8d38 <__aeabi_dsub+0x1d8>
    8d98:	4664      	mov	r4, ip
    8d9a:	432c      	orrs	r4, r5
    8d9c:	d100      	bne.n	8da0 <__aeabi_dsub+0x240>
    8d9e:	e1b3      	b.n	9108 <__aeabi_dsub+0x5a8>
    8da0:	002c      	movs	r4, r5
    8da2:	4667      	mov	r7, ip
    8da4:	077b      	lsls	r3, r7, #29
    8da6:	d000      	beq.n	8daa <__aeabi_dsub+0x24a>
    8da8:	e762      	b.n	8c70 <__aeabi_dsub+0x110>
    8daa:	0763      	lsls	r3, r4, #29
    8dac:	08ff      	lsrs	r7, r7, #3
    8dae:	431f      	orrs	r7, r3
    8db0:	2501      	movs	r5, #1
    8db2:	4643      	mov	r3, r8
    8db4:	08e4      	lsrs	r4, r4, #3
    8db6:	401d      	ands	r5, r3
    8db8:	e793      	b.n	8ce2 <__aeabi_dsub+0x182>
    8dba:	2d00      	cmp	r5, #0
    8dbc:	d178      	bne.n	8eb0 <__aeabi_dsub+0x350>
    8dbe:	1c75      	adds	r5, r6, #1
    8dc0:	056d      	lsls	r5, r5, #21
    8dc2:	0d6d      	lsrs	r5, r5, #21
    8dc4:	2d01      	cmp	r5, #1
    8dc6:	dc00      	bgt.n	8dca <__aeabi_dsub+0x26a>
    8dc8:	e0f2      	b.n	8fb0 <__aeabi_dsub+0x450>
    8dca:	4650      	mov	r0, sl
    8dcc:	1a80      	subs	r0, r0, r2
    8dce:	4582      	cmp	sl, r0
    8dd0:	41bf      	sbcs	r7, r7
    8dd2:	1a65      	subs	r5, r4, r1
    8dd4:	427f      	negs	r7, r7
    8dd6:	1bed      	subs	r5, r5, r7
    8dd8:	4684      	mov	ip, r0
    8dda:	0228      	lsls	r0, r5, #8
    8ddc:	d400      	bmi.n	8de0 <__aeabi_dsub+0x280>
    8dde:	e08c      	b.n	8efa <__aeabi_dsub+0x39a>
    8de0:	4650      	mov	r0, sl
    8de2:	1a17      	subs	r7, r2, r0
    8de4:	42ba      	cmp	r2, r7
    8de6:	4192      	sbcs	r2, r2
    8de8:	1b0c      	subs	r4, r1, r4
    8dea:	4255      	negs	r5, r2
    8dec:	1b65      	subs	r5, r4, r5
    8dee:	4698      	mov	r8, r3
    8df0:	e714      	b.n	8c1c <__aeabi_dsub+0xbc>
    8df2:	2501      	movs	r5, #1
    8df4:	4643      	mov	r3, r8
    8df6:	2400      	movs	r4, #0
    8df8:	401d      	ands	r5, r3
    8dfa:	2700      	movs	r7, #0
    8dfc:	e755      	b.n	8caa <__aeabi_dsub+0x14a>
    8dfe:	4c2a      	ldr	r4, [pc, #168]	; (8ea8 <__aeabi_dsub+0x348>)
    8e00:	1af6      	subs	r6, r6, r3
    8e02:	402c      	ands	r4, r5
    8e04:	e732      	b.n	8c6c <__aeabi_dsub+0x10c>
    8e06:	003d      	movs	r5, r7
    8e08:	3828      	subs	r0, #40	; 0x28
    8e0a:	4085      	lsls	r5, r0
    8e0c:	2700      	movs	r7, #0
    8e0e:	e717      	b.n	8c40 <__aeabi_dsub+0xe0>
    8e10:	0038      	movs	r0, r7
    8e12:	f000 fa79 	bl	9308 <__clzsi2>
    8e16:	3020      	adds	r0, #32
    8e18:	e706      	b.n	8c28 <__aeabi_dsub+0xc8>
    8e1a:	430a      	orrs	r2, r1
    8e1c:	0017      	movs	r7, r2
    8e1e:	2100      	movs	r1, #0
    8e20:	1e7a      	subs	r2, r7, #1
    8e22:	4197      	sbcs	r7, r2
    8e24:	e6ee      	b.n	8c04 <__aeabi_dsub+0xa4>
    8e26:	2b00      	cmp	r3, #0
    8e28:	d000      	beq.n	8e2c <__aeabi_dsub+0x2cc>
    8e2a:	e0e5      	b.n	8ff8 <__aeabi_dsub+0x498>
    8e2c:	1c73      	adds	r3, r6, #1
    8e2e:	469c      	mov	ip, r3
    8e30:	055b      	lsls	r3, r3, #21
    8e32:	0d5b      	lsrs	r3, r3, #21
    8e34:	2b01      	cmp	r3, #1
    8e36:	dc00      	bgt.n	8e3a <__aeabi_dsub+0x2da>
    8e38:	e09f      	b.n	8f7a <__aeabi_dsub+0x41a>
    8e3a:	4b1a      	ldr	r3, [pc, #104]	; (8ea4 <__aeabi_dsub+0x344>)
    8e3c:	459c      	cmp	ip, r3
    8e3e:	d100      	bne.n	8e42 <__aeabi_dsub+0x2e2>
    8e40:	e0c5      	b.n	8fce <__aeabi_dsub+0x46e>
    8e42:	4452      	add	r2, sl
    8e44:	4552      	cmp	r2, sl
    8e46:	4180      	sbcs	r0, r0
    8e48:	1864      	adds	r4, r4, r1
    8e4a:	4240      	negs	r0, r0
    8e4c:	1824      	adds	r4, r4, r0
    8e4e:	07e7      	lsls	r7, r4, #31
    8e50:	0852      	lsrs	r2, r2, #1
    8e52:	4317      	orrs	r7, r2
    8e54:	0864      	lsrs	r4, r4, #1
    8e56:	4666      	mov	r6, ip
    8e58:	e708      	b.n	8c6c <__aeabi_dsub+0x10c>
    8e5a:	4812      	ldr	r0, [pc, #72]	; (8ea4 <__aeabi_dsub+0x344>)
    8e5c:	4285      	cmp	r5, r0
    8e5e:	d100      	bne.n	8e62 <__aeabi_dsub+0x302>
    8e60:	e085      	b.n	8f6e <__aeabi_dsub+0x40e>
    8e62:	001d      	movs	r5, r3
    8e64:	e6bc      	b.n	8be0 <__aeabi_dsub+0x80>
    8e66:	0029      	movs	r1, r5
    8e68:	3e1f      	subs	r6, #31
    8e6a:	40f1      	lsrs	r1, r6
    8e6c:	2b20      	cmp	r3, #32
    8e6e:	d100      	bne.n	8e72 <__aeabi_dsub+0x312>
    8e70:	e07f      	b.n	8f72 <__aeabi_dsub+0x412>
    8e72:	2240      	movs	r2, #64	; 0x40
    8e74:	1ad3      	subs	r3, r2, r3
    8e76:	409d      	lsls	r5, r3
    8e78:	432f      	orrs	r7, r5
    8e7a:	1e7d      	subs	r5, r7, #1
    8e7c:	41af      	sbcs	r7, r5
    8e7e:	2400      	movs	r4, #0
    8e80:	430f      	orrs	r7, r1
    8e82:	2600      	movs	r6, #0
    8e84:	e78e      	b.n	8da4 <__aeabi_dsub+0x244>
    8e86:	002b      	movs	r3, r5
    8e88:	000f      	movs	r7, r1
    8e8a:	3b20      	subs	r3, #32
    8e8c:	40df      	lsrs	r7, r3
    8e8e:	2d20      	cmp	r5, #32
    8e90:	d071      	beq.n	8f76 <__aeabi_dsub+0x416>
    8e92:	2340      	movs	r3, #64	; 0x40
    8e94:	1b5d      	subs	r5, r3, r5
    8e96:	40a9      	lsls	r1, r5
    8e98:	430a      	orrs	r2, r1
    8e9a:	1e51      	subs	r1, r2, #1
    8e9c:	418a      	sbcs	r2, r1
    8e9e:	2100      	movs	r1, #0
    8ea0:	4317      	orrs	r7, r2
    8ea2:	e6af      	b.n	8c04 <__aeabi_dsub+0xa4>
    8ea4:	000007ff 	.word	0x000007ff
    8ea8:	ff7fffff 	.word	0xff7fffff
    8eac:	800fffff 	.word	0x800fffff
    8eb0:	2e00      	cmp	r6, #0
    8eb2:	d03e      	beq.n	8f32 <__aeabi_dsub+0x3d2>
    8eb4:	4eb3      	ldr	r6, [pc, #716]	; (9184 <__aeabi_dsub+0x624>)
    8eb6:	45b4      	cmp	ip, r6
    8eb8:	d045      	beq.n	8f46 <__aeabi_dsub+0x3e6>
    8eba:	2680      	movs	r6, #128	; 0x80
    8ebc:	0436      	lsls	r6, r6, #16
    8ebe:	426d      	negs	r5, r5
    8ec0:	4334      	orrs	r4, r6
    8ec2:	2d38      	cmp	r5, #56	; 0x38
    8ec4:	dd00      	ble.n	8ec8 <__aeabi_dsub+0x368>
    8ec6:	e0a8      	b.n	901a <__aeabi_dsub+0x4ba>
    8ec8:	2d1f      	cmp	r5, #31
    8eca:	dd00      	ble.n	8ece <__aeabi_dsub+0x36e>
    8ecc:	e11f      	b.n	910e <__aeabi_dsub+0x5ae>
    8ece:	2620      	movs	r6, #32
    8ed0:	0027      	movs	r7, r4
    8ed2:	4650      	mov	r0, sl
    8ed4:	1b76      	subs	r6, r6, r5
    8ed6:	40b7      	lsls	r7, r6
    8ed8:	40e8      	lsrs	r0, r5
    8eda:	4307      	orrs	r7, r0
    8edc:	4650      	mov	r0, sl
    8ede:	40b0      	lsls	r0, r6
    8ee0:	1e46      	subs	r6, r0, #1
    8ee2:	41b0      	sbcs	r0, r6
    8ee4:	40ec      	lsrs	r4, r5
    8ee6:	4338      	orrs	r0, r7
    8ee8:	1a17      	subs	r7, r2, r0
    8eea:	42ba      	cmp	r2, r7
    8eec:	4192      	sbcs	r2, r2
    8eee:	1b0c      	subs	r4, r1, r4
    8ef0:	4252      	negs	r2, r2
    8ef2:	1aa4      	subs	r4, r4, r2
    8ef4:	4666      	mov	r6, ip
    8ef6:	4698      	mov	r8, r3
    8ef8:	e68b      	b.n	8c12 <__aeabi_dsub+0xb2>
    8efa:	4664      	mov	r4, ip
    8efc:	4667      	mov	r7, ip
    8efe:	432c      	orrs	r4, r5
    8f00:	d000      	beq.n	8f04 <__aeabi_dsub+0x3a4>
    8f02:	e68b      	b.n	8c1c <__aeabi_dsub+0xbc>
    8f04:	2500      	movs	r5, #0
    8f06:	2600      	movs	r6, #0
    8f08:	2700      	movs	r7, #0
    8f0a:	e6ea      	b.n	8ce2 <__aeabi_dsub+0x182>
    8f0c:	001e      	movs	r6, r3
    8f0e:	e6ad      	b.n	8c6c <__aeabi_dsub+0x10c>
    8f10:	2b1f      	cmp	r3, #31
    8f12:	dc60      	bgt.n	8fd6 <__aeabi_dsub+0x476>
    8f14:	2720      	movs	r7, #32
    8f16:	1af8      	subs	r0, r7, r3
    8f18:	000f      	movs	r7, r1
    8f1a:	4684      	mov	ip, r0
    8f1c:	4087      	lsls	r7, r0
    8f1e:	0010      	movs	r0, r2
    8f20:	40d8      	lsrs	r0, r3
    8f22:	4307      	orrs	r7, r0
    8f24:	4660      	mov	r0, ip
    8f26:	4082      	lsls	r2, r0
    8f28:	1e50      	subs	r0, r2, #1
    8f2a:	4182      	sbcs	r2, r0
    8f2c:	40d9      	lsrs	r1, r3
    8f2e:	4317      	orrs	r7, r2
    8f30:	e6f5      	b.n	8d1e <__aeabi_dsub+0x1be>
    8f32:	0026      	movs	r6, r4
    8f34:	4650      	mov	r0, sl
    8f36:	4306      	orrs	r6, r0
    8f38:	d005      	beq.n	8f46 <__aeabi_dsub+0x3e6>
    8f3a:	43ed      	mvns	r5, r5
    8f3c:	2d00      	cmp	r5, #0
    8f3e:	d0d3      	beq.n	8ee8 <__aeabi_dsub+0x388>
    8f40:	4e90      	ldr	r6, [pc, #576]	; (9184 <__aeabi_dsub+0x624>)
    8f42:	45b4      	cmp	ip, r6
    8f44:	d1bd      	bne.n	8ec2 <__aeabi_dsub+0x362>
    8f46:	000c      	movs	r4, r1
    8f48:	0017      	movs	r7, r2
    8f4a:	4666      	mov	r6, ip
    8f4c:	4698      	mov	r8, r3
    8f4e:	e68d      	b.n	8c6c <__aeabi_dsub+0x10c>
    8f50:	488c      	ldr	r0, [pc, #560]	; (9184 <__aeabi_dsub+0x624>)
    8f52:	4283      	cmp	r3, r0
    8f54:	d00b      	beq.n	8f6e <__aeabi_dsub+0x40e>
    8f56:	4663      	mov	r3, ip
    8f58:	e6d9      	b.n	8d0e <__aeabi_dsub+0x1ae>
    8f5a:	2d00      	cmp	r5, #0
    8f5c:	d000      	beq.n	8f60 <__aeabi_dsub+0x400>
    8f5e:	e096      	b.n	908e <__aeabi_dsub+0x52e>
    8f60:	0008      	movs	r0, r1
    8f62:	4310      	orrs	r0, r2
    8f64:	d100      	bne.n	8f68 <__aeabi_dsub+0x408>
    8f66:	e0e2      	b.n	912e <__aeabi_dsub+0x5ce>
    8f68:	000c      	movs	r4, r1
    8f6a:	0017      	movs	r7, r2
    8f6c:	4698      	mov	r8, r3
    8f6e:	4e85      	ldr	r6, [pc, #532]	; (9184 <__aeabi_dsub+0x624>)
    8f70:	e67c      	b.n	8c6c <__aeabi_dsub+0x10c>
    8f72:	2500      	movs	r5, #0
    8f74:	e780      	b.n	8e78 <__aeabi_dsub+0x318>
    8f76:	2100      	movs	r1, #0
    8f78:	e78e      	b.n	8e98 <__aeabi_dsub+0x338>
    8f7a:	0023      	movs	r3, r4
    8f7c:	4650      	mov	r0, sl
    8f7e:	4303      	orrs	r3, r0
    8f80:	2e00      	cmp	r6, #0
    8f82:	d000      	beq.n	8f86 <__aeabi_dsub+0x426>
    8f84:	e0a8      	b.n	90d8 <__aeabi_dsub+0x578>
    8f86:	2b00      	cmp	r3, #0
    8f88:	d100      	bne.n	8f8c <__aeabi_dsub+0x42c>
    8f8a:	e0de      	b.n	914a <__aeabi_dsub+0x5ea>
    8f8c:	000b      	movs	r3, r1
    8f8e:	4313      	orrs	r3, r2
    8f90:	d100      	bne.n	8f94 <__aeabi_dsub+0x434>
    8f92:	e66b      	b.n	8c6c <__aeabi_dsub+0x10c>
    8f94:	4452      	add	r2, sl
    8f96:	4552      	cmp	r2, sl
    8f98:	4180      	sbcs	r0, r0
    8f9a:	1864      	adds	r4, r4, r1
    8f9c:	4240      	negs	r0, r0
    8f9e:	1824      	adds	r4, r4, r0
    8fa0:	0017      	movs	r7, r2
    8fa2:	0223      	lsls	r3, r4, #8
    8fa4:	d400      	bmi.n	8fa8 <__aeabi_dsub+0x448>
    8fa6:	e6fd      	b.n	8da4 <__aeabi_dsub+0x244>
    8fa8:	4b77      	ldr	r3, [pc, #476]	; (9188 <__aeabi_dsub+0x628>)
    8faa:	4666      	mov	r6, ip
    8fac:	401c      	ands	r4, r3
    8fae:	e65d      	b.n	8c6c <__aeabi_dsub+0x10c>
    8fb0:	0025      	movs	r5, r4
    8fb2:	4650      	mov	r0, sl
    8fb4:	4305      	orrs	r5, r0
    8fb6:	2e00      	cmp	r6, #0
    8fb8:	d1cf      	bne.n	8f5a <__aeabi_dsub+0x3fa>
    8fba:	2d00      	cmp	r5, #0
    8fbc:	d14f      	bne.n	905e <__aeabi_dsub+0x4fe>
    8fbe:	000c      	movs	r4, r1
    8fc0:	4314      	orrs	r4, r2
    8fc2:	d100      	bne.n	8fc6 <__aeabi_dsub+0x466>
    8fc4:	e0a0      	b.n	9108 <__aeabi_dsub+0x5a8>
    8fc6:	000c      	movs	r4, r1
    8fc8:	0017      	movs	r7, r2
    8fca:	4698      	mov	r8, r3
    8fcc:	e64e      	b.n	8c6c <__aeabi_dsub+0x10c>
    8fce:	4666      	mov	r6, ip
    8fd0:	2400      	movs	r4, #0
    8fd2:	2700      	movs	r7, #0
    8fd4:	e685      	b.n	8ce2 <__aeabi_dsub+0x182>
    8fd6:	001f      	movs	r7, r3
    8fd8:	0008      	movs	r0, r1
    8fda:	3f20      	subs	r7, #32
    8fdc:	40f8      	lsrs	r0, r7
    8fde:	0007      	movs	r7, r0
    8fe0:	2b20      	cmp	r3, #32
    8fe2:	d100      	bne.n	8fe6 <__aeabi_dsub+0x486>
    8fe4:	e08e      	b.n	9104 <__aeabi_dsub+0x5a4>
    8fe6:	2040      	movs	r0, #64	; 0x40
    8fe8:	1ac3      	subs	r3, r0, r3
    8fea:	4099      	lsls	r1, r3
    8fec:	430a      	orrs	r2, r1
    8fee:	1e51      	subs	r1, r2, #1
    8ff0:	418a      	sbcs	r2, r1
    8ff2:	2100      	movs	r1, #0
    8ff4:	4317      	orrs	r7, r2
    8ff6:	e692      	b.n	8d1e <__aeabi_dsub+0x1be>
    8ff8:	2e00      	cmp	r6, #0
    8ffa:	d114      	bne.n	9026 <__aeabi_dsub+0x4c6>
    8ffc:	0026      	movs	r6, r4
    8ffe:	4650      	mov	r0, sl
    9000:	4306      	orrs	r6, r0
    9002:	d062      	beq.n	90ca <__aeabi_dsub+0x56a>
    9004:	43db      	mvns	r3, r3
    9006:	2b00      	cmp	r3, #0
    9008:	d15c      	bne.n	90c4 <__aeabi_dsub+0x564>
    900a:	1887      	adds	r7, r0, r2
    900c:	4297      	cmp	r7, r2
    900e:	4192      	sbcs	r2, r2
    9010:	1864      	adds	r4, r4, r1
    9012:	4252      	negs	r2, r2
    9014:	18a4      	adds	r4, r4, r2
    9016:	4666      	mov	r6, ip
    9018:	e687      	b.n	8d2a <__aeabi_dsub+0x1ca>
    901a:	4650      	mov	r0, sl
    901c:	4320      	orrs	r0, r4
    901e:	1e44      	subs	r4, r0, #1
    9020:	41a0      	sbcs	r0, r4
    9022:	2400      	movs	r4, #0
    9024:	e760      	b.n	8ee8 <__aeabi_dsub+0x388>
    9026:	4e57      	ldr	r6, [pc, #348]	; (9184 <__aeabi_dsub+0x624>)
    9028:	45b4      	cmp	ip, r6
    902a:	d04e      	beq.n	90ca <__aeabi_dsub+0x56a>
    902c:	2680      	movs	r6, #128	; 0x80
    902e:	0436      	lsls	r6, r6, #16
    9030:	425b      	negs	r3, r3
    9032:	4334      	orrs	r4, r6
    9034:	2b38      	cmp	r3, #56	; 0x38
    9036:	dd00      	ble.n	903a <__aeabi_dsub+0x4da>
    9038:	e07f      	b.n	913a <__aeabi_dsub+0x5da>
    903a:	2b1f      	cmp	r3, #31
    903c:	dd00      	ble.n	9040 <__aeabi_dsub+0x4e0>
    903e:	e08b      	b.n	9158 <__aeabi_dsub+0x5f8>
    9040:	2620      	movs	r6, #32
    9042:	0027      	movs	r7, r4
    9044:	4650      	mov	r0, sl
    9046:	1af6      	subs	r6, r6, r3
    9048:	40b7      	lsls	r7, r6
    904a:	40d8      	lsrs	r0, r3
    904c:	4307      	orrs	r7, r0
    904e:	4650      	mov	r0, sl
    9050:	40b0      	lsls	r0, r6
    9052:	1e46      	subs	r6, r0, #1
    9054:	41b0      	sbcs	r0, r6
    9056:	4307      	orrs	r7, r0
    9058:	40dc      	lsrs	r4, r3
    905a:	18bf      	adds	r7, r7, r2
    905c:	e7d6      	b.n	900c <__aeabi_dsub+0x4ac>
    905e:	000d      	movs	r5, r1
    9060:	4315      	orrs	r5, r2
    9062:	d100      	bne.n	9066 <__aeabi_dsub+0x506>
    9064:	e602      	b.n	8c6c <__aeabi_dsub+0x10c>
    9066:	4650      	mov	r0, sl
    9068:	1a80      	subs	r0, r0, r2
    906a:	4582      	cmp	sl, r0
    906c:	41bf      	sbcs	r7, r7
    906e:	1a65      	subs	r5, r4, r1
    9070:	427f      	negs	r7, r7
    9072:	1bed      	subs	r5, r5, r7
    9074:	4684      	mov	ip, r0
    9076:	0228      	lsls	r0, r5, #8
    9078:	d400      	bmi.n	907c <__aeabi_dsub+0x51c>
    907a:	e68d      	b.n	8d98 <__aeabi_dsub+0x238>
    907c:	4650      	mov	r0, sl
    907e:	1a17      	subs	r7, r2, r0
    9080:	42ba      	cmp	r2, r7
    9082:	4192      	sbcs	r2, r2
    9084:	1b0c      	subs	r4, r1, r4
    9086:	4252      	negs	r2, r2
    9088:	1aa4      	subs	r4, r4, r2
    908a:	4698      	mov	r8, r3
    908c:	e5ee      	b.n	8c6c <__aeabi_dsub+0x10c>
    908e:	000d      	movs	r5, r1
    9090:	4315      	orrs	r5, r2
    9092:	d100      	bne.n	9096 <__aeabi_dsub+0x536>
    9094:	e76b      	b.n	8f6e <__aeabi_dsub+0x40e>
    9096:	4650      	mov	r0, sl
    9098:	0767      	lsls	r7, r4, #29
    909a:	08c0      	lsrs	r0, r0, #3
    909c:	4307      	orrs	r7, r0
    909e:	2080      	movs	r0, #128	; 0x80
    90a0:	08e4      	lsrs	r4, r4, #3
    90a2:	0300      	lsls	r0, r0, #12
    90a4:	4204      	tst	r4, r0
    90a6:	d007      	beq.n	90b8 <__aeabi_dsub+0x558>
    90a8:	08cd      	lsrs	r5, r1, #3
    90aa:	4205      	tst	r5, r0
    90ac:	d104      	bne.n	90b8 <__aeabi_dsub+0x558>
    90ae:	002c      	movs	r4, r5
    90b0:	4698      	mov	r8, r3
    90b2:	08d7      	lsrs	r7, r2, #3
    90b4:	0749      	lsls	r1, r1, #29
    90b6:	430f      	orrs	r7, r1
    90b8:	0f7b      	lsrs	r3, r7, #29
    90ba:	00e4      	lsls	r4, r4, #3
    90bc:	431c      	orrs	r4, r3
    90be:	00ff      	lsls	r7, r7, #3
    90c0:	4e30      	ldr	r6, [pc, #192]	; (9184 <__aeabi_dsub+0x624>)
    90c2:	e5d3      	b.n	8c6c <__aeabi_dsub+0x10c>
    90c4:	4e2f      	ldr	r6, [pc, #188]	; (9184 <__aeabi_dsub+0x624>)
    90c6:	45b4      	cmp	ip, r6
    90c8:	d1b4      	bne.n	9034 <__aeabi_dsub+0x4d4>
    90ca:	000c      	movs	r4, r1
    90cc:	0017      	movs	r7, r2
    90ce:	4666      	mov	r6, ip
    90d0:	e5cc      	b.n	8c6c <__aeabi_dsub+0x10c>
    90d2:	2700      	movs	r7, #0
    90d4:	2400      	movs	r4, #0
    90d6:	e5e8      	b.n	8caa <__aeabi_dsub+0x14a>
    90d8:	2b00      	cmp	r3, #0
    90da:	d039      	beq.n	9150 <__aeabi_dsub+0x5f0>
    90dc:	000b      	movs	r3, r1
    90de:	4313      	orrs	r3, r2
    90e0:	d100      	bne.n	90e4 <__aeabi_dsub+0x584>
    90e2:	e744      	b.n	8f6e <__aeabi_dsub+0x40e>
    90e4:	08c0      	lsrs	r0, r0, #3
    90e6:	0767      	lsls	r7, r4, #29
    90e8:	4307      	orrs	r7, r0
    90ea:	2080      	movs	r0, #128	; 0x80
    90ec:	08e4      	lsrs	r4, r4, #3
    90ee:	0300      	lsls	r0, r0, #12
    90f0:	4204      	tst	r4, r0
    90f2:	d0e1      	beq.n	90b8 <__aeabi_dsub+0x558>
    90f4:	08cb      	lsrs	r3, r1, #3
    90f6:	4203      	tst	r3, r0
    90f8:	d1de      	bne.n	90b8 <__aeabi_dsub+0x558>
    90fa:	08d7      	lsrs	r7, r2, #3
    90fc:	0749      	lsls	r1, r1, #29
    90fe:	430f      	orrs	r7, r1
    9100:	001c      	movs	r4, r3
    9102:	e7d9      	b.n	90b8 <__aeabi_dsub+0x558>
    9104:	2100      	movs	r1, #0
    9106:	e771      	b.n	8fec <__aeabi_dsub+0x48c>
    9108:	2500      	movs	r5, #0
    910a:	2700      	movs	r7, #0
    910c:	e5e9      	b.n	8ce2 <__aeabi_dsub+0x182>
    910e:	002e      	movs	r6, r5
    9110:	0027      	movs	r7, r4
    9112:	3e20      	subs	r6, #32
    9114:	40f7      	lsrs	r7, r6
    9116:	2d20      	cmp	r5, #32
    9118:	d02f      	beq.n	917a <__aeabi_dsub+0x61a>
    911a:	2640      	movs	r6, #64	; 0x40
    911c:	1b75      	subs	r5, r6, r5
    911e:	40ac      	lsls	r4, r5
    9120:	4650      	mov	r0, sl
    9122:	4320      	orrs	r0, r4
    9124:	1e44      	subs	r4, r0, #1
    9126:	41a0      	sbcs	r0, r4
    9128:	2400      	movs	r4, #0
    912a:	4338      	orrs	r0, r7
    912c:	e6dc      	b.n	8ee8 <__aeabi_dsub+0x388>
    912e:	2480      	movs	r4, #128	; 0x80
    9130:	2500      	movs	r5, #0
    9132:	0324      	lsls	r4, r4, #12
    9134:	4e13      	ldr	r6, [pc, #76]	; (9184 <__aeabi_dsub+0x624>)
    9136:	2700      	movs	r7, #0
    9138:	e5d3      	b.n	8ce2 <__aeabi_dsub+0x182>
    913a:	4650      	mov	r0, sl
    913c:	4320      	orrs	r0, r4
    913e:	0007      	movs	r7, r0
    9140:	1e78      	subs	r0, r7, #1
    9142:	4187      	sbcs	r7, r0
    9144:	2400      	movs	r4, #0
    9146:	18bf      	adds	r7, r7, r2
    9148:	e760      	b.n	900c <__aeabi_dsub+0x4ac>
    914a:	000c      	movs	r4, r1
    914c:	0017      	movs	r7, r2
    914e:	e58d      	b.n	8c6c <__aeabi_dsub+0x10c>
    9150:	000c      	movs	r4, r1
    9152:	0017      	movs	r7, r2
    9154:	4e0b      	ldr	r6, [pc, #44]	; (9184 <__aeabi_dsub+0x624>)
    9156:	e589      	b.n	8c6c <__aeabi_dsub+0x10c>
    9158:	001e      	movs	r6, r3
    915a:	0027      	movs	r7, r4
    915c:	3e20      	subs	r6, #32
    915e:	40f7      	lsrs	r7, r6
    9160:	2b20      	cmp	r3, #32
    9162:	d00c      	beq.n	917e <__aeabi_dsub+0x61e>
    9164:	2640      	movs	r6, #64	; 0x40
    9166:	1af3      	subs	r3, r6, r3
    9168:	409c      	lsls	r4, r3
    916a:	4650      	mov	r0, sl
    916c:	4320      	orrs	r0, r4
    916e:	1e44      	subs	r4, r0, #1
    9170:	41a0      	sbcs	r0, r4
    9172:	4307      	orrs	r7, r0
    9174:	2400      	movs	r4, #0
    9176:	18bf      	adds	r7, r7, r2
    9178:	e748      	b.n	900c <__aeabi_dsub+0x4ac>
    917a:	2400      	movs	r4, #0
    917c:	e7d0      	b.n	9120 <__aeabi_dsub+0x5c0>
    917e:	2400      	movs	r4, #0
    9180:	e7f3      	b.n	916a <__aeabi_dsub+0x60a>
    9182:	46c0      	nop			; (mov r8, r8)
    9184:	000007ff 	.word	0x000007ff
    9188:	ff7fffff 	.word	0xff7fffff

0000918c <__aeabi_d2iz>:
    918c:	b530      	push	{r4, r5, lr}
    918e:	4d13      	ldr	r5, [pc, #76]	; (91dc <__aeabi_d2iz+0x50>)
    9190:	030a      	lsls	r2, r1, #12
    9192:	004b      	lsls	r3, r1, #1
    9194:	0b12      	lsrs	r2, r2, #12
    9196:	0d5b      	lsrs	r3, r3, #21
    9198:	0fc9      	lsrs	r1, r1, #31
    919a:	2400      	movs	r4, #0
    919c:	42ab      	cmp	r3, r5
    919e:	dd10      	ble.n	91c2 <__aeabi_d2iz+0x36>
    91a0:	4c0f      	ldr	r4, [pc, #60]	; (91e0 <__aeabi_d2iz+0x54>)
    91a2:	42a3      	cmp	r3, r4
    91a4:	dc0f      	bgt.n	91c6 <__aeabi_d2iz+0x3a>
    91a6:	2480      	movs	r4, #128	; 0x80
    91a8:	4d0e      	ldr	r5, [pc, #56]	; (91e4 <__aeabi_d2iz+0x58>)
    91aa:	0364      	lsls	r4, r4, #13
    91ac:	4322      	orrs	r2, r4
    91ae:	1aed      	subs	r5, r5, r3
    91b0:	2d1f      	cmp	r5, #31
    91b2:	dd0b      	ble.n	91cc <__aeabi_d2iz+0x40>
    91b4:	480c      	ldr	r0, [pc, #48]	; (91e8 <__aeabi_d2iz+0x5c>)
    91b6:	1ac3      	subs	r3, r0, r3
    91b8:	40da      	lsrs	r2, r3
    91ba:	4254      	negs	r4, r2
    91bc:	2900      	cmp	r1, #0
    91be:	d100      	bne.n	91c2 <__aeabi_d2iz+0x36>
    91c0:	0014      	movs	r4, r2
    91c2:	0020      	movs	r0, r4
    91c4:	bd30      	pop	{r4, r5, pc}
    91c6:	4b09      	ldr	r3, [pc, #36]	; (91ec <__aeabi_d2iz+0x60>)
    91c8:	18cc      	adds	r4, r1, r3
    91ca:	e7fa      	b.n	91c2 <__aeabi_d2iz+0x36>
    91cc:	4c08      	ldr	r4, [pc, #32]	; (91f0 <__aeabi_d2iz+0x64>)
    91ce:	40e8      	lsrs	r0, r5
    91d0:	46a4      	mov	ip, r4
    91d2:	4463      	add	r3, ip
    91d4:	409a      	lsls	r2, r3
    91d6:	4302      	orrs	r2, r0
    91d8:	e7ef      	b.n	91ba <__aeabi_d2iz+0x2e>
    91da:	46c0      	nop			; (mov r8, r8)
    91dc:	000003fe 	.word	0x000003fe
    91e0:	0000041d 	.word	0x0000041d
    91e4:	00000433 	.word	0x00000433
    91e8:	00000413 	.word	0x00000413
    91ec:	7fffffff 	.word	0x7fffffff
    91f0:	fffffbed 	.word	0xfffffbed

000091f4 <__aeabi_ui2d>:
    91f4:	b510      	push	{r4, lr}
    91f6:	1e04      	subs	r4, r0, #0
    91f8:	d028      	beq.n	924c <__aeabi_ui2d+0x58>
    91fa:	f000 f885 	bl	9308 <__clzsi2>
    91fe:	4b15      	ldr	r3, [pc, #84]	; (9254 <__aeabi_ui2d+0x60>)
    9200:	4a15      	ldr	r2, [pc, #84]	; (9258 <__aeabi_ui2d+0x64>)
    9202:	1a1b      	subs	r3, r3, r0
    9204:	1ad2      	subs	r2, r2, r3
    9206:	2a1f      	cmp	r2, #31
    9208:	dd15      	ble.n	9236 <__aeabi_ui2d+0x42>
    920a:	4a14      	ldr	r2, [pc, #80]	; (925c <__aeabi_ui2d+0x68>)
    920c:	1ad2      	subs	r2, r2, r3
    920e:	4094      	lsls	r4, r2
    9210:	2200      	movs	r2, #0
    9212:	0324      	lsls	r4, r4, #12
    9214:	055b      	lsls	r3, r3, #21
    9216:	0b24      	lsrs	r4, r4, #12
    9218:	0d5b      	lsrs	r3, r3, #21
    921a:	2100      	movs	r1, #0
    921c:	0010      	movs	r0, r2
    921e:	0324      	lsls	r4, r4, #12
    9220:	0d0a      	lsrs	r2, r1, #20
    9222:	0b24      	lsrs	r4, r4, #12
    9224:	0512      	lsls	r2, r2, #20
    9226:	4322      	orrs	r2, r4
    9228:	4c0d      	ldr	r4, [pc, #52]	; (9260 <__aeabi_ui2d+0x6c>)
    922a:	051b      	lsls	r3, r3, #20
    922c:	4022      	ands	r2, r4
    922e:	4313      	orrs	r3, r2
    9230:	005b      	lsls	r3, r3, #1
    9232:	0859      	lsrs	r1, r3, #1
    9234:	bd10      	pop	{r4, pc}
    9236:	0021      	movs	r1, r4
    9238:	4091      	lsls	r1, r2
    923a:	000a      	movs	r2, r1
    923c:	210b      	movs	r1, #11
    923e:	1a08      	subs	r0, r1, r0
    9240:	40c4      	lsrs	r4, r0
    9242:	055b      	lsls	r3, r3, #21
    9244:	0324      	lsls	r4, r4, #12
    9246:	0b24      	lsrs	r4, r4, #12
    9248:	0d5b      	lsrs	r3, r3, #21
    924a:	e7e6      	b.n	921a <__aeabi_ui2d+0x26>
    924c:	2300      	movs	r3, #0
    924e:	2400      	movs	r4, #0
    9250:	2200      	movs	r2, #0
    9252:	e7e2      	b.n	921a <__aeabi_ui2d+0x26>
    9254:	0000041e 	.word	0x0000041e
    9258:	00000433 	.word	0x00000433
    925c:	00000413 	.word	0x00000413
    9260:	800fffff 	.word	0x800fffff

00009264 <__aeabi_f2d>:
    9264:	0041      	lsls	r1, r0, #1
    9266:	0e09      	lsrs	r1, r1, #24
    9268:	1c4b      	adds	r3, r1, #1
    926a:	b570      	push	{r4, r5, r6, lr}
    926c:	b2db      	uxtb	r3, r3
    926e:	0246      	lsls	r6, r0, #9
    9270:	0a75      	lsrs	r5, r6, #9
    9272:	0fc4      	lsrs	r4, r0, #31
    9274:	2b01      	cmp	r3, #1
    9276:	dd14      	ble.n	92a2 <__aeabi_f2d+0x3e>
    9278:	23e0      	movs	r3, #224	; 0xe0
    927a:	009b      	lsls	r3, r3, #2
    927c:	076d      	lsls	r5, r5, #29
    927e:	0b36      	lsrs	r6, r6, #12
    9280:	18cb      	adds	r3, r1, r3
    9282:	2100      	movs	r1, #0
    9284:	0d0a      	lsrs	r2, r1, #20
    9286:	0028      	movs	r0, r5
    9288:	0512      	lsls	r2, r2, #20
    928a:	4d1c      	ldr	r5, [pc, #112]	; (92fc <__aeabi_f2d+0x98>)
    928c:	4332      	orrs	r2, r6
    928e:	055b      	lsls	r3, r3, #21
    9290:	402a      	ands	r2, r5
    9292:	085b      	lsrs	r3, r3, #1
    9294:	4313      	orrs	r3, r2
    9296:	005b      	lsls	r3, r3, #1
    9298:	07e4      	lsls	r4, r4, #31
    929a:	085b      	lsrs	r3, r3, #1
    929c:	4323      	orrs	r3, r4
    929e:	0019      	movs	r1, r3
    92a0:	bd70      	pop	{r4, r5, r6, pc}
    92a2:	2900      	cmp	r1, #0
    92a4:	d114      	bne.n	92d0 <__aeabi_f2d+0x6c>
    92a6:	2d00      	cmp	r5, #0
    92a8:	d01e      	beq.n	92e8 <__aeabi_f2d+0x84>
    92aa:	0028      	movs	r0, r5
    92ac:	f000 f82c 	bl	9308 <__clzsi2>
    92b0:	280a      	cmp	r0, #10
    92b2:	dc1c      	bgt.n	92ee <__aeabi_f2d+0x8a>
    92b4:	230b      	movs	r3, #11
    92b6:	002a      	movs	r2, r5
    92b8:	1a1b      	subs	r3, r3, r0
    92ba:	40da      	lsrs	r2, r3
    92bc:	0003      	movs	r3, r0
    92be:	3315      	adds	r3, #21
    92c0:	409d      	lsls	r5, r3
    92c2:	4b0f      	ldr	r3, [pc, #60]	; (9300 <__aeabi_f2d+0x9c>)
    92c4:	0312      	lsls	r2, r2, #12
    92c6:	1a1b      	subs	r3, r3, r0
    92c8:	055b      	lsls	r3, r3, #21
    92ca:	0b16      	lsrs	r6, r2, #12
    92cc:	0d5b      	lsrs	r3, r3, #21
    92ce:	e7d8      	b.n	9282 <__aeabi_f2d+0x1e>
    92d0:	2d00      	cmp	r5, #0
    92d2:	d006      	beq.n	92e2 <__aeabi_f2d+0x7e>
    92d4:	0b32      	lsrs	r2, r6, #12
    92d6:	2680      	movs	r6, #128	; 0x80
    92d8:	0336      	lsls	r6, r6, #12
    92da:	076d      	lsls	r5, r5, #29
    92dc:	4316      	orrs	r6, r2
    92de:	4b09      	ldr	r3, [pc, #36]	; (9304 <__aeabi_f2d+0xa0>)
    92e0:	e7cf      	b.n	9282 <__aeabi_f2d+0x1e>
    92e2:	4b08      	ldr	r3, [pc, #32]	; (9304 <__aeabi_f2d+0xa0>)
    92e4:	2600      	movs	r6, #0
    92e6:	e7cc      	b.n	9282 <__aeabi_f2d+0x1e>
    92e8:	2300      	movs	r3, #0
    92ea:	2600      	movs	r6, #0
    92ec:	e7c9      	b.n	9282 <__aeabi_f2d+0x1e>
    92ee:	0003      	movs	r3, r0
    92f0:	002a      	movs	r2, r5
    92f2:	3b0b      	subs	r3, #11
    92f4:	409a      	lsls	r2, r3
    92f6:	2500      	movs	r5, #0
    92f8:	e7e3      	b.n	92c2 <__aeabi_f2d+0x5e>
    92fa:	46c0      	nop			; (mov r8, r8)
    92fc:	800fffff 	.word	0x800fffff
    9300:	00000389 	.word	0x00000389
    9304:	000007ff 	.word	0x000007ff

00009308 <__clzsi2>:
    9308:	211c      	movs	r1, #28
    930a:	2301      	movs	r3, #1
    930c:	041b      	lsls	r3, r3, #16
    930e:	4298      	cmp	r0, r3
    9310:	d301      	bcc.n	9316 <__clzsi2+0xe>
    9312:	0c00      	lsrs	r0, r0, #16
    9314:	3910      	subs	r1, #16
    9316:	0a1b      	lsrs	r3, r3, #8
    9318:	4298      	cmp	r0, r3
    931a:	d301      	bcc.n	9320 <__clzsi2+0x18>
    931c:	0a00      	lsrs	r0, r0, #8
    931e:	3908      	subs	r1, #8
    9320:	091b      	lsrs	r3, r3, #4
    9322:	4298      	cmp	r0, r3
    9324:	d301      	bcc.n	932a <__clzsi2+0x22>
    9326:	0900      	lsrs	r0, r0, #4
    9328:	3904      	subs	r1, #4
    932a:	a202      	add	r2, pc, #8	; (adr r2, 9334 <__clzsi2+0x2c>)
    932c:	5c10      	ldrb	r0, [r2, r0]
    932e:	1840      	adds	r0, r0, r1
    9330:	4770      	bx	lr
    9332:	46c0      	nop			; (mov r8, r8)
    9334:	02020304 	.word	0x02020304
    9338:	01010101 	.word	0x01010101
	...

00009344 <__libc_init_array>:
    9344:	b570      	push	{r4, r5, r6, lr}
    9346:	2600      	movs	r6, #0
    9348:	4d0c      	ldr	r5, [pc, #48]	; (937c <__libc_init_array+0x38>)
    934a:	4c0d      	ldr	r4, [pc, #52]	; (9380 <__libc_init_array+0x3c>)
    934c:	1b64      	subs	r4, r4, r5
    934e:	10a4      	asrs	r4, r4, #2
    9350:	42a6      	cmp	r6, r4
    9352:	d109      	bne.n	9368 <__libc_init_array+0x24>
    9354:	2600      	movs	r6, #0
    9356:	f002 fc6b 	bl	bc30 <_init>
    935a:	4d0a      	ldr	r5, [pc, #40]	; (9384 <__libc_init_array+0x40>)
    935c:	4c0a      	ldr	r4, [pc, #40]	; (9388 <__libc_init_array+0x44>)
    935e:	1b64      	subs	r4, r4, r5
    9360:	10a4      	asrs	r4, r4, #2
    9362:	42a6      	cmp	r6, r4
    9364:	d105      	bne.n	9372 <__libc_init_array+0x2e>
    9366:	bd70      	pop	{r4, r5, r6, pc}
    9368:	00b3      	lsls	r3, r6, #2
    936a:	58eb      	ldr	r3, [r5, r3]
    936c:	4798      	blx	r3
    936e:	3601      	adds	r6, #1
    9370:	e7ee      	b.n	9350 <__libc_init_array+0xc>
    9372:	00b3      	lsls	r3, r6, #2
    9374:	58eb      	ldr	r3, [r5, r3]
    9376:	4798      	blx	r3
    9378:	3601      	adds	r6, #1
    937a:	e7f2      	b.n	9362 <__libc_init_array+0x1e>
    937c:	0000bc3c 	.word	0x0000bc3c
    9380:	0000bc3c 	.word	0x0000bc3c
    9384:	0000bc3c 	.word	0x0000bc3c
    9388:	0000bc40 	.word	0x0000bc40

0000938c <malloc>:
    938c:	b510      	push	{r4, lr}
    938e:	4b03      	ldr	r3, [pc, #12]	; (939c <malloc+0x10>)
    9390:	0001      	movs	r1, r0
    9392:	6818      	ldr	r0, [r3, #0]
    9394:	f000 f872 	bl	947c <_malloc_r>
    9398:	bd10      	pop	{r4, pc}
    939a:	46c0      	nop			; (mov r8, r8)
    939c:	2000000c 	.word	0x2000000c

000093a0 <memcpy>:
    93a0:	2300      	movs	r3, #0
    93a2:	b510      	push	{r4, lr}
    93a4:	429a      	cmp	r2, r3
    93a6:	d100      	bne.n	93aa <memcpy+0xa>
    93a8:	bd10      	pop	{r4, pc}
    93aa:	5ccc      	ldrb	r4, [r1, r3]
    93ac:	54c4      	strb	r4, [r0, r3]
    93ae:	3301      	adds	r3, #1
    93b0:	e7f8      	b.n	93a4 <memcpy+0x4>

000093b2 <memmove>:
    93b2:	b510      	push	{r4, lr}
    93b4:	4288      	cmp	r0, r1
    93b6:	d902      	bls.n	93be <memmove+0xc>
    93b8:	188b      	adds	r3, r1, r2
    93ba:	4298      	cmp	r0, r3
    93bc:	d308      	bcc.n	93d0 <memmove+0x1e>
    93be:	2300      	movs	r3, #0
    93c0:	429a      	cmp	r2, r3
    93c2:	d007      	beq.n	93d4 <memmove+0x22>
    93c4:	5ccc      	ldrb	r4, [r1, r3]
    93c6:	54c4      	strb	r4, [r0, r3]
    93c8:	3301      	adds	r3, #1
    93ca:	e7f9      	b.n	93c0 <memmove+0xe>
    93cc:	5c8b      	ldrb	r3, [r1, r2]
    93ce:	5483      	strb	r3, [r0, r2]
    93d0:	3a01      	subs	r2, #1
    93d2:	d2fb      	bcs.n	93cc <memmove+0x1a>
    93d4:	bd10      	pop	{r4, pc}

000093d6 <memset>:
    93d6:	0003      	movs	r3, r0
    93d8:	1882      	adds	r2, r0, r2
    93da:	4293      	cmp	r3, r2
    93dc:	d100      	bne.n	93e0 <memset+0xa>
    93de:	4770      	bx	lr
    93e0:	7019      	strb	r1, [r3, #0]
    93e2:	3301      	adds	r3, #1
    93e4:	e7f9      	b.n	93da <memset+0x4>
	...

000093e8 <_free_r>:
    93e8:	b570      	push	{r4, r5, r6, lr}
    93ea:	0005      	movs	r5, r0
    93ec:	2900      	cmp	r1, #0
    93ee:	d010      	beq.n	9412 <_free_r+0x2a>
    93f0:	1f0c      	subs	r4, r1, #4
    93f2:	6823      	ldr	r3, [r4, #0]
    93f4:	2b00      	cmp	r3, #0
    93f6:	da00      	bge.n	93fa <_free_r+0x12>
    93f8:	18e4      	adds	r4, r4, r3
    93fa:	0028      	movs	r0, r5
    93fc:	f000 fd08 	bl	9e10 <__malloc_lock>
    9400:	4a1d      	ldr	r2, [pc, #116]	; (9478 <_free_r+0x90>)
    9402:	6813      	ldr	r3, [r2, #0]
    9404:	2b00      	cmp	r3, #0
    9406:	d105      	bne.n	9414 <_free_r+0x2c>
    9408:	6063      	str	r3, [r4, #4]
    940a:	6014      	str	r4, [r2, #0]
    940c:	0028      	movs	r0, r5
    940e:	f000 fd00 	bl	9e12 <__malloc_unlock>
    9412:	bd70      	pop	{r4, r5, r6, pc}
    9414:	42a3      	cmp	r3, r4
    9416:	d909      	bls.n	942c <_free_r+0x44>
    9418:	6821      	ldr	r1, [r4, #0]
    941a:	1860      	adds	r0, r4, r1
    941c:	4283      	cmp	r3, r0
    941e:	d1f3      	bne.n	9408 <_free_r+0x20>
    9420:	6818      	ldr	r0, [r3, #0]
    9422:	685b      	ldr	r3, [r3, #4]
    9424:	1841      	adds	r1, r0, r1
    9426:	6021      	str	r1, [r4, #0]
    9428:	e7ee      	b.n	9408 <_free_r+0x20>
    942a:	0013      	movs	r3, r2
    942c:	685a      	ldr	r2, [r3, #4]
    942e:	2a00      	cmp	r2, #0
    9430:	d001      	beq.n	9436 <_free_r+0x4e>
    9432:	42a2      	cmp	r2, r4
    9434:	d9f9      	bls.n	942a <_free_r+0x42>
    9436:	6819      	ldr	r1, [r3, #0]
    9438:	1858      	adds	r0, r3, r1
    943a:	42a0      	cmp	r0, r4
    943c:	d10b      	bne.n	9456 <_free_r+0x6e>
    943e:	6820      	ldr	r0, [r4, #0]
    9440:	1809      	adds	r1, r1, r0
    9442:	1858      	adds	r0, r3, r1
    9444:	6019      	str	r1, [r3, #0]
    9446:	4282      	cmp	r2, r0
    9448:	d1e0      	bne.n	940c <_free_r+0x24>
    944a:	6810      	ldr	r0, [r2, #0]
    944c:	6852      	ldr	r2, [r2, #4]
    944e:	1841      	adds	r1, r0, r1
    9450:	6019      	str	r1, [r3, #0]
    9452:	605a      	str	r2, [r3, #4]
    9454:	e7da      	b.n	940c <_free_r+0x24>
    9456:	42a0      	cmp	r0, r4
    9458:	d902      	bls.n	9460 <_free_r+0x78>
    945a:	230c      	movs	r3, #12
    945c:	602b      	str	r3, [r5, #0]
    945e:	e7d5      	b.n	940c <_free_r+0x24>
    9460:	6821      	ldr	r1, [r4, #0]
    9462:	1860      	adds	r0, r4, r1
    9464:	4282      	cmp	r2, r0
    9466:	d103      	bne.n	9470 <_free_r+0x88>
    9468:	6810      	ldr	r0, [r2, #0]
    946a:	6852      	ldr	r2, [r2, #4]
    946c:	1841      	adds	r1, r0, r1
    946e:	6021      	str	r1, [r4, #0]
    9470:	6062      	str	r2, [r4, #4]
    9472:	605c      	str	r4, [r3, #4]
    9474:	e7ca      	b.n	940c <_free_r+0x24>
    9476:	46c0      	nop			; (mov r8, r8)
    9478:	20000270 	.word	0x20000270

0000947c <_malloc_r>:
    947c:	2303      	movs	r3, #3
    947e:	b570      	push	{r4, r5, r6, lr}
    9480:	1ccd      	adds	r5, r1, #3
    9482:	439d      	bics	r5, r3
    9484:	3508      	adds	r5, #8
    9486:	0006      	movs	r6, r0
    9488:	2d0c      	cmp	r5, #12
    948a:	d21e      	bcs.n	94ca <_malloc_r+0x4e>
    948c:	250c      	movs	r5, #12
    948e:	42a9      	cmp	r1, r5
    9490:	d81d      	bhi.n	94ce <_malloc_r+0x52>
    9492:	0030      	movs	r0, r6
    9494:	f000 fcbc 	bl	9e10 <__malloc_lock>
    9498:	4a25      	ldr	r2, [pc, #148]	; (9530 <_malloc_r+0xb4>)
    949a:	6814      	ldr	r4, [r2, #0]
    949c:	0021      	movs	r1, r4
    949e:	2900      	cmp	r1, #0
    94a0:	d119      	bne.n	94d6 <_malloc_r+0x5a>
    94a2:	4c24      	ldr	r4, [pc, #144]	; (9534 <_malloc_r+0xb8>)
    94a4:	6823      	ldr	r3, [r4, #0]
    94a6:	2b00      	cmp	r3, #0
    94a8:	d103      	bne.n	94b2 <_malloc_r+0x36>
    94aa:	0030      	movs	r0, r6
    94ac:	f000 f8dc 	bl	9668 <_sbrk_r>
    94b0:	6020      	str	r0, [r4, #0]
    94b2:	0029      	movs	r1, r5
    94b4:	0030      	movs	r0, r6
    94b6:	f000 f8d7 	bl	9668 <_sbrk_r>
    94ba:	1c43      	adds	r3, r0, #1
    94bc:	d12c      	bne.n	9518 <_malloc_r+0x9c>
    94be:	230c      	movs	r3, #12
    94c0:	0030      	movs	r0, r6
    94c2:	6033      	str	r3, [r6, #0]
    94c4:	f000 fca5 	bl	9e12 <__malloc_unlock>
    94c8:	e003      	b.n	94d2 <_malloc_r+0x56>
    94ca:	2d00      	cmp	r5, #0
    94cc:	dadf      	bge.n	948e <_malloc_r+0x12>
    94ce:	230c      	movs	r3, #12
    94d0:	6033      	str	r3, [r6, #0]
    94d2:	2000      	movs	r0, #0
    94d4:	bd70      	pop	{r4, r5, r6, pc}
    94d6:	680b      	ldr	r3, [r1, #0]
    94d8:	1b5b      	subs	r3, r3, r5
    94da:	d41a      	bmi.n	9512 <_malloc_r+0x96>
    94dc:	2b0b      	cmp	r3, #11
    94de:	d903      	bls.n	94e8 <_malloc_r+0x6c>
    94e0:	600b      	str	r3, [r1, #0]
    94e2:	18cc      	adds	r4, r1, r3
    94e4:	6025      	str	r5, [r4, #0]
    94e6:	e003      	b.n	94f0 <_malloc_r+0x74>
    94e8:	428c      	cmp	r4, r1
    94ea:	d10e      	bne.n	950a <_malloc_r+0x8e>
    94ec:	6863      	ldr	r3, [r4, #4]
    94ee:	6013      	str	r3, [r2, #0]
    94f0:	0030      	movs	r0, r6
    94f2:	f000 fc8e 	bl	9e12 <__malloc_unlock>
    94f6:	0020      	movs	r0, r4
    94f8:	2207      	movs	r2, #7
    94fa:	300b      	adds	r0, #11
    94fc:	1d23      	adds	r3, r4, #4
    94fe:	4390      	bics	r0, r2
    9500:	1ac3      	subs	r3, r0, r3
    9502:	d0e7      	beq.n	94d4 <_malloc_r+0x58>
    9504:	425a      	negs	r2, r3
    9506:	50e2      	str	r2, [r4, r3]
    9508:	e7e4      	b.n	94d4 <_malloc_r+0x58>
    950a:	684b      	ldr	r3, [r1, #4]
    950c:	6063      	str	r3, [r4, #4]
    950e:	000c      	movs	r4, r1
    9510:	e7ee      	b.n	94f0 <_malloc_r+0x74>
    9512:	000c      	movs	r4, r1
    9514:	6849      	ldr	r1, [r1, #4]
    9516:	e7c2      	b.n	949e <_malloc_r+0x22>
    9518:	2303      	movs	r3, #3
    951a:	1cc4      	adds	r4, r0, #3
    951c:	439c      	bics	r4, r3
    951e:	42a0      	cmp	r0, r4
    9520:	d0e0      	beq.n	94e4 <_malloc_r+0x68>
    9522:	1a21      	subs	r1, r4, r0
    9524:	0030      	movs	r0, r6
    9526:	f000 f89f 	bl	9668 <_sbrk_r>
    952a:	1c43      	adds	r3, r0, #1
    952c:	d1da      	bne.n	94e4 <_malloc_r+0x68>
    952e:	e7c6      	b.n	94be <_malloc_r+0x42>
    9530:	20000270 	.word	0x20000270
    9534:	20000274 	.word	0x20000274

00009538 <iprintf>:
    9538:	b40f      	push	{r0, r1, r2, r3}
    953a:	4b0b      	ldr	r3, [pc, #44]	; (9568 <iprintf+0x30>)
    953c:	b513      	push	{r0, r1, r4, lr}
    953e:	681c      	ldr	r4, [r3, #0]
    9540:	2c00      	cmp	r4, #0
    9542:	d005      	beq.n	9550 <iprintf+0x18>
    9544:	69a3      	ldr	r3, [r4, #24]
    9546:	2b00      	cmp	r3, #0
    9548:	d102      	bne.n	9550 <iprintf+0x18>
    954a:	0020      	movs	r0, r4
    954c:	f000 fb64 	bl	9c18 <__sinit>
    9550:	ab05      	add	r3, sp, #20
    9552:	9a04      	ldr	r2, [sp, #16]
    9554:	68a1      	ldr	r1, [r4, #8]
    9556:	0020      	movs	r0, r4
    9558:	9301      	str	r3, [sp, #4]
    955a:	f000 fde9 	bl	a130 <_vfiprintf_r>
    955e:	bc16      	pop	{r1, r2, r4}
    9560:	bc08      	pop	{r3}
    9562:	b004      	add	sp, #16
    9564:	4718      	bx	r3
    9566:	46c0      	nop			; (mov r8, r8)
    9568:	2000000c 	.word	0x2000000c

0000956c <putchar>:
    956c:	4b08      	ldr	r3, [pc, #32]	; (9590 <putchar+0x24>)
    956e:	b570      	push	{r4, r5, r6, lr}
    9570:	681c      	ldr	r4, [r3, #0]
    9572:	0005      	movs	r5, r0
    9574:	2c00      	cmp	r4, #0
    9576:	d005      	beq.n	9584 <putchar+0x18>
    9578:	69a3      	ldr	r3, [r4, #24]
    957a:	2b00      	cmp	r3, #0
    957c:	d102      	bne.n	9584 <putchar+0x18>
    957e:	0020      	movs	r0, r4
    9580:	f000 fb4a 	bl	9c18 <__sinit>
    9584:	0029      	movs	r1, r5
    9586:	68a2      	ldr	r2, [r4, #8]
    9588:	0020      	movs	r0, r4
    958a:	f001 f875 	bl	a678 <_putc_r>
    958e:	bd70      	pop	{r4, r5, r6, pc}
    9590:	2000000c 	.word	0x2000000c

00009594 <_puts_r>:
    9594:	b570      	push	{r4, r5, r6, lr}
    9596:	0005      	movs	r5, r0
    9598:	000e      	movs	r6, r1
    959a:	2800      	cmp	r0, #0
    959c:	d004      	beq.n	95a8 <_puts_r+0x14>
    959e:	6983      	ldr	r3, [r0, #24]
    95a0:	2b00      	cmp	r3, #0
    95a2:	d101      	bne.n	95a8 <_puts_r+0x14>
    95a4:	f000 fb38 	bl	9c18 <__sinit>
    95a8:	69ab      	ldr	r3, [r5, #24]
    95aa:	68ac      	ldr	r4, [r5, #8]
    95ac:	2b00      	cmp	r3, #0
    95ae:	d102      	bne.n	95b6 <_puts_r+0x22>
    95b0:	0028      	movs	r0, r5
    95b2:	f000 fb31 	bl	9c18 <__sinit>
    95b6:	4b24      	ldr	r3, [pc, #144]	; (9648 <_puts_r+0xb4>)
    95b8:	429c      	cmp	r4, r3
    95ba:	d10f      	bne.n	95dc <_puts_r+0x48>
    95bc:	686c      	ldr	r4, [r5, #4]
    95be:	89a3      	ldrh	r3, [r4, #12]
    95c0:	071b      	lsls	r3, r3, #28
    95c2:	d502      	bpl.n	95ca <_puts_r+0x36>
    95c4:	6923      	ldr	r3, [r4, #16]
    95c6:	2b00      	cmp	r3, #0
    95c8:	d120      	bne.n	960c <_puts_r+0x78>
    95ca:	0021      	movs	r1, r4
    95cc:	0028      	movs	r0, r5
    95ce:	f000 f9b5 	bl	993c <__swsetup_r>
    95d2:	2800      	cmp	r0, #0
    95d4:	d01a      	beq.n	960c <_puts_r+0x78>
    95d6:	2001      	movs	r0, #1
    95d8:	4240      	negs	r0, r0
    95da:	bd70      	pop	{r4, r5, r6, pc}
    95dc:	4b1b      	ldr	r3, [pc, #108]	; (964c <_puts_r+0xb8>)
    95de:	429c      	cmp	r4, r3
    95e0:	d101      	bne.n	95e6 <_puts_r+0x52>
    95e2:	68ac      	ldr	r4, [r5, #8]
    95e4:	e7eb      	b.n	95be <_puts_r+0x2a>
    95e6:	4b1a      	ldr	r3, [pc, #104]	; (9650 <_puts_r+0xbc>)
    95e8:	429c      	cmp	r4, r3
    95ea:	d1e8      	bne.n	95be <_puts_r+0x2a>
    95ec:	68ec      	ldr	r4, [r5, #12]
    95ee:	e7e6      	b.n	95be <_puts_r+0x2a>
    95f0:	3b01      	subs	r3, #1
    95f2:	3601      	adds	r6, #1
    95f4:	60a3      	str	r3, [r4, #8]
    95f6:	2b00      	cmp	r3, #0
    95f8:	da04      	bge.n	9604 <_puts_r+0x70>
    95fa:	69a2      	ldr	r2, [r4, #24]
    95fc:	4293      	cmp	r3, r2
    95fe:	db16      	blt.n	962e <_puts_r+0x9a>
    9600:	290a      	cmp	r1, #10
    9602:	d014      	beq.n	962e <_puts_r+0x9a>
    9604:	6823      	ldr	r3, [r4, #0]
    9606:	1c5a      	adds	r2, r3, #1
    9608:	6022      	str	r2, [r4, #0]
    960a:	7019      	strb	r1, [r3, #0]
    960c:	7831      	ldrb	r1, [r6, #0]
    960e:	68a3      	ldr	r3, [r4, #8]
    9610:	2900      	cmp	r1, #0
    9612:	d1ed      	bne.n	95f0 <_puts_r+0x5c>
    9614:	3b01      	subs	r3, #1
    9616:	60a3      	str	r3, [r4, #8]
    9618:	2b00      	cmp	r3, #0
    961a:	da0f      	bge.n	963c <_puts_r+0xa8>
    961c:	0022      	movs	r2, r4
    961e:	310a      	adds	r1, #10
    9620:	0028      	movs	r0, r5
    9622:	f000 f935 	bl	9890 <__swbuf_r>
    9626:	1c43      	adds	r3, r0, #1
    9628:	d0d5      	beq.n	95d6 <_puts_r+0x42>
    962a:	200a      	movs	r0, #10
    962c:	e7d5      	b.n	95da <_puts_r+0x46>
    962e:	0022      	movs	r2, r4
    9630:	0028      	movs	r0, r5
    9632:	f000 f92d 	bl	9890 <__swbuf_r>
    9636:	1c43      	adds	r3, r0, #1
    9638:	d1e8      	bne.n	960c <_puts_r+0x78>
    963a:	e7cc      	b.n	95d6 <_puts_r+0x42>
    963c:	200a      	movs	r0, #10
    963e:	6823      	ldr	r3, [r4, #0]
    9640:	1c5a      	adds	r2, r3, #1
    9642:	6022      	str	r2, [r4, #0]
    9644:	7018      	strb	r0, [r3, #0]
    9646:	e7c8      	b.n	95da <_puts_r+0x46>
    9648:	0000bbbc 	.word	0x0000bbbc
    964c:	0000bbdc 	.word	0x0000bbdc
    9650:	0000bb9c 	.word	0x0000bb9c

00009654 <puts>:
    9654:	b510      	push	{r4, lr}
    9656:	4b03      	ldr	r3, [pc, #12]	; (9664 <puts+0x10>)
    9658:	0001      	movs	r1, r0
    965a:	6818      	ldr	r0, [r3, #0]
    965c:	f7ff ff9a 	bl	9594 <_puts_r>
    9660:	bd10      	pop	{r4, pc}
    9662:	46c0      	nop			; (mov r8, r8)
    9664:	2000000c 	.word	0x2000000c

00009668 <_sbrk_r>:
    9668:	2300      	movs	r3, #0
    966a:	b570      	push	{r4, r5, r6, lr}
    966c:	4c06      	ldr	r4, [pc, #24]	; (9688 <_sbrk_r+0x20>)
    966e:	0005      	movs	r5, r0
    9670:	0008      	movs	r0, r1
    9672:	6023      	str	r3, [r4, #0]
    9674:	f7fc fbf4 	bl	5e60 <_sbrk>
    9678:	1c43      	adds	r3, r0, #1
    967a:	d103      	bne.n	9684 <_sbrk_r+0x1c>
    967c:	6823      	ldr	r3, [r4, #0]
    967e:	2b00      	cmp	r3, #0
    9680:	d000      	beq.n	9684 <_sbrk_r+0x1c>
    9682:	602b      	str	r3, [r5, #0]
    9684:	bd70      	pop	{r4, r5, r6, pc}
    9686:	46c0      	nop			; (mov r8, r8)
    9688:	200004cc 	.word	0x200004cc

0000968c <setbuf>:
    968c:	424a      	negs	r2, r1
    968e:	414a      	adcs	r2, r1
    9690:	2380      	movs	r3, #128	; 0x80
    9692:	b510      	push	{r4, lr}
    9694:	0052      	lsls	r2, r2, #1
    9696:	00db      	lsls	r3, r3, #3
    9698:	f000 f802 	bl	96a0 <setvbuf>
    969c:	bd10      	pop	{r4, pc}
	...

000096a0 <setvbuf>:
    96a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    96a2:	001d      	movs	r5, r3
    96a4:	4b4f      	ldr	r3, [pc, #316]	; (97e4 <setvbuf+0x144>)
    96a6:	b085      	sub	sp, #20
    96a8:	681e      	ldr	r6, [r3, #0]
    96aa:	0004      	movs	r4, r0
    96ac:	000f      	movs	r7, r1
    96ae:	9200      	str	r2, [sp, #0]
    96b0:	2e00      	cmp	r6, #0
    96b2:	d005      	beq.n	96c0 <setvbuf+0x20>
    96b4:	69b3      	ldr	r3, [r6, #24]
    96b6:	2b00      	cmp	r3, #0
    96b8:	d102      	bne.n	96c0 <setvbuf+0x20>
    96ba:	0030      	movs	r0, r6
    96bc:	f000 faac 	bl	9c18 <__sinit>
    96c0:	4b49      	ldr	r3, [pc, #292]	; (97e8 <setvbuf+0x148>)
    96c2:	429c      	cmp	r4, r3
    96c4:	d150      	bne.n	9768 <setvbuf+0xc8>
    96c6:	6874      	ldr	r4, [r6, #4]
    96c8:	9b00      	ldr	r3, [sp, #0]
    96ca:	2b02      	cmp	r3, #2
    96cc:	d005      	beq.n	96da <setvbuf+0x3a>
    96ce:	2b01      	cmp	r3, #1
    96d0:	d900      	bls.n	96d4 <setvbuf+0x34>
    96d2:	e084      	b.n	97de <setvbuf+0x13e>
    96d4:	2d00      	cmp	r5, #0
    96d6:	da00      	bge.n	96da <setvbuf+0x3a>
    96d8:	e081      	b.n	97de <setvbuf+0x13e>
    96da:	0021      	movs	r1, r4
    96dc:	0030      	movs	r0, r6
    96de:	f000 fa2d 	bl	9b3c <_fflush_r>
    96e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    96e4:	2900      	cmp	r1, #0
    96e6:	d008      	beq.n	96fa <setvbuf+0x5a>
    96e8:	0023      	movs	r3, r4
    96ea:	3344      	adds	r3, #68	; 0x44
    96ec:	4299      	cmp	r1, r3
    96ee:	d002      	beq.n	96f6 <setvbuf+0x56>
    96f0:	0030      	movs	r0, r6
    96f2:	f7ff fe79 	bl	93e8 <_free_r>
    96f6:	2300      	movs	r3, #0
    96f8:	6363      	str	r3, [r4, #52]	; 0x34
    96fa:	2300      	movs	r3, #0
    96fc:	61a3      	str	r3, [r4, #24]
    96fe:	6063      	str	r3, [r4, #4]
    9700:	89a3      	ldrh	r3, [r4, #12]
    9702:	061b      	lsls	r3, r3, #24
    9704:	d503      	bpl.n	970e <setvbuf+0x6e>
    9706:	6921      	ldr	r1, [r4, #16]
    9708:	0030      	movs	r0, r6
    970a:	f7ff fe6d 	bl	93e8 <_free_r>
    970e:	89a3      	ldrh	r3, [r4, #12]
    9710:	4a36      	ldr	r2, [pc, #216]	; (97ec <setvbuf+0x14c>)
    9712:	4013      	ands	r3, r2
    9714:	81a3      	strh	r3, [r4, #12]
    9716:	9b00      	ldr	r3, [sp, #0]
    9718:	2b02      	cmp	r3, #2
    971a:	d05a      	beq.n	97d2 <setvbuf+0x132>
    971c:	ab03      	add	r3, sp, #12
    971e:	aa02      	add	r2, sp, #8
    9720:	0021      	movs	r1, r4
    9722:	0030      	movs	r0, r6
    9724:	f000 fb0e 	bl	9d44 <__swhatbuf_r>
    9728:	89a3      	ldrh	r3, [r4, #12]
    972a:	4318      	orrs	r0, r3
    972c:	81a0      	strh	r0, [r4, #12]
    972e:	2d00      	cmp	r5, #0
    9730:	d124      	bne.n	977c <setvbuf+0xdc>
    9732:	9d02      	ldr	r5, [sp, #8]
    9734:	0028      	movs	r0, r5
    9736:	f7ff fe29 	bl	938c <malloc>
    973a:	9501      	str	r5, [sp, #4]
    973c:	1e07      	subs	r7, r0, #0
    973e:	d142      	bne.n	97c6 <setvbuf+0x126>
    9740:	9b02      	ldr	r3, [sp, #8]
    9742:	9301      	str	r3, [sp, #4]
    9744:	42ab      	cmp	r3, r5
    9746:	d139      	bne.n	97bc <setvbuf+0x11c>
    9748:	2001      	movs	r0, #1
    974a:	4240      	negs	r0, r0
    974c:	2302      	movs	r3, #2
    974e:	89a2      	ldrh	r2, [r4, #12]
    9750:	4313      	orrs	r3, r2
    9752:	81a3      	strh	r3, [r4, #12]
    9754:	2300      	movs	r3, #0
    9756:	60a3      	str	r3, [r4, #8]
    9758:	0023      	movs	r3, r4
    975a:	3347      	adds	r3, #71	; 0x47
    975c:	6023      	str	r3, [r4, #0]
    975e:	6123      	str	r3, [r4, #16]
    9760:	2301      	movs	r3, #1
    9762:	6163      	str	r3, [r4, #20]
    9764:	b005      	add	sp, #20
    9766:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9768:	4b21      	ldr	r3, [pc, #132]	; (97f0 <setvbuf+0x150>)
    976a:	429c      	cmp	r4, r3
    976c:	d101      	bne.n	9772 <setvbuf+0xd2>
    976e:	68b4      	ldr	r4, [r6, #8]
    9770:	e7aa      	b.n	96c8 <setvbuf+0x28>
    9772:	4b20      	ldr	r3, [pc, #128]	; (97f4 <setvbuf+0x154>)
    9774:	429c      	cmp	r4, r3
    9776:	d1a7      	bne.n	96c8 <setvbuf+0x28>
    9778:	68f4      	ldr	r4, [r6, #12]
    977a:	e7a5      	b.n	96c8 <setvbuf+0x28>
    977c:	2f00      	cmp	r7, #0
    977e:	d0d9      	beq.n	9734 <setvbuf+0x94>
    9780:	69b3      	ldr	r3, [r6, #24]
    9782:	2b00      	cmp	r3, #0
    9784:	d102      	bne.n	978c <setvbuf+0xec>
    9786:	0030      	movs	r0, r6
    9788:	f000 fa46 	bl	9c18 <__sinit>
    978c:	9b00      	ldr	r3, [sp, #0]
    978e:	2b01      	cmp	r3, #1
    9790:	d103      	bne.n	979a <setvbuf+0xfa>
    9792:	89a3      	ldrh	r3, [r4, #12]
    9794:	9a00      	ldr	r2, [sp, #0]
    9796:	431a      	orrs	r2, r3
    9798:	81a2      	strh	r2, [r4, #12]
    979a:	2008      	movs	r0, #8
    979c:	89a3      	ldrh	r3, [r4, #12]
    979e:	6027      	str	r7, [r4, #0]
    97a0:	6127      	str	r7, [r4, #16]
    97a2:	6165      	str	r5, [r4, #20]
    97a4:	4018      	ands	r0, r3
    97a6:	d018      	beq.n	97da <setvbuf+0x13a>
    97a8:	2001      	movs	r0, #1
    97aa:	4018      	ands	r0, r3
    97ac:	2300      	movs	r3, #0
    97ae:	4298      	cmp	r0, r3
    97b0:	d011      	beq.n	97d6 <setvbuf+0x136>
    97b2:	426d      	negs	r5, r5
    97b4:	60a3      	str	r3, [r4, #8]
    97b6:	61a5      	str	r5, [r4, #24]
    97b8:	0018      	movs	r0, r3
    97ba:	e7d3      	b.n	9764 <setvbuf+0xc4>
    97bc:	9801      	ldr	r0, [sp, #4]
    97be:	f7ff fde5 	bl	938c <malloc>
    97c2:	1e07      	subs	r7, r0, #0
    97c4:	d0c0      	beq.n	9748 <setvbuf+0xa8>
    97c6:	2380      	movs	r3, #128	; 0x80
    97c8:	89a2      	ldrh	r2, [r4, #12]
    97ca:	9d01      	ldr	r5, [sp, #4]
    97cc:	4313      	orrs	r3, r2
    97ce:	81a3      	strh	r3, [r4, #12]
    97d0:	e7d6      	b.n	9780 <setvbuf+0xe0>
    97d2:	2000      	movs	r0, #0
    97d4:	e7ba      	b.n	974c <setvbuf+0xac>
    97d6:	60a5      	str	r5, [r4, #8]
    97d8:	e7c4      	b.n	9764 <setvbuf+0xc4>
    97da:	60a0      	str	r0, [r4, #8]
    97dc:	e7c2      	b.n	9764 <setvbuf+0xc4>
    97de:	2001      	movs	r0, #1
    97e0:	4240      	negs	r0, r0
    97e2:	e7bf      	b.n	9764 <setvbuf+0xc4>
    97e4:	2000000c 	.word	0x2000000c
    97e8:	0000bbbc 	.word	0x0000bbbc
    97ec:	fffff35c 	.word	0xfffff35c
    97f0:	0000bbdc 	.word	0x0000bbdc
    97f4:	0000bb9c 	.word	0x0000bb9c

000097f8 <siprintf>:
    97f8:	b40e      	push	{r1, r2, r3}
    97fa:	b510      	push	{r4, lr}
    97fc:	b09d      	sub	sp, #116	; 0x74
    97fe:	a902      	add	r1, sp, #8
    9800:	9002      	str	r0, [sp, #8]
    9802:	6108      	str	r0, [r1, #16]
    9804:	480b      	ldr	r0, [pc, #44]	; (9834 <siprintf+0x3c>)
    9806:	2482      	movs	r4, #130	; 0x82
    9808:	6088      	str	r0, [r1, #8]
    980a:	6148      	str	r0, [r1, #20]
    980c:	2001      	movs	r0, #1
    980e:	4240      	negs	r0, r0
    9810:	ab1f      	add	r3, sp, #124	; 0x7c
    9812:	81c8      	strh	r0, [r1, #14]
    9814:	4808      	ldr	r0, [pc, #32]	; (9838 <siprintf+0x40>)
    9816:	cb04      	ldmia	r3!, {r2}
    9818:	00a4      	lsls	r4, r4, #2
    981a:	6800      	ldr	r0, [r0, #0]
    981c:	9301      	str	r3, [sp, #4]
    981e:	818c      	strh	r4, [r1, #12]
    9820:	f000 fb5a 	bl	9ed8 <_svfiprintf_r>
    9824:	2300      	movs	r3, #0
    9826:	9a02      	ldr	r2, [sp, #8]
    9828:	7013      	strb	r3, [r2, #0]
    982a:	b01d      	add	sp, #116	; 0x74
    982c:	bc10      	pop	{r4}
    982e:	bc08      	pop	{r3}
    9830:	b003      	add	sp, #12
    9832:	4718      	bx	r3
    9834:	7fffffff 	.word	0x7fffffff
    9838:	2000000c 	.word	0x2000000c

0000983c <strcmp>:
    983c:	7802      	ldrb	r2, [r0, #0]
    983e:	780b      	ldrb	r3, [r1, #0]
    9840:	2a00      	cmp	r2, #0
    9842:	d003      	beq.n	984c <strcmp+0x10>
    9844:	3001      	adds	r0, #1
    9846:	3101      	adds	r1, #1
    9848:	429a      	cmp	r2, r3
    984a:	d0f7      	beq.n	983c <strcmp>
    984c:	1ad0      	subs	r0, r2, r3
    984e:	4770      	bx	lr

00009850 <strcpy>:
    9850:	1c03      	adds	r3, r0, #0
    9852:	780a      	ldrb	r2, [r1, #0]
    9854:	3101      	adds	r1, #1
    9856:	701a      	strb	r2, [r3, #0]
    9858:	3301      	adds	r3, #1
    985a:	2a00      	cmp	r2, #0
    985c:	d1f9      	bne.n	9852 <strcpy+0x2>
    985e:	4770      	bx	lr

00009860 <strlen>:
    9860:	2300      	movs	r3, #0
    9862:	5cc2      	ldrb	r2, [r0, r3]
    9864:	3301      	adds	r3, #1
    9866:	2a00      	cmp	r2, #0
    9868:	d1fb      	bne.n	9862 <strlen+0x2>
    986a:	1e58      	subs	r0, r3, #1
    986c:	4770      	bx	lr

0000986e <strncmp>:
    986e:	2300      	movs	r3, #0
    9870:	b530      	push	{r4, r5, lr}
    9872:	429a      	cmp	r2, r3
    9874:	d00a      	beq.n	988c <strncmp+0x1e>
    9876:	3a01      	subs	r2, #1
    9878:	5cc4      	ldrb	r4, [r0, r3]
    987a:	5ccd      	ldrb	r5, [r1, r3]
    987c:	42ac      	cmp	r4, r5
    987e:	d104      	bne.n	988a <strncmp+0x1c>
    9880:	429a      	cmp	r2, r3
    9882:	d002      	beq.n	988a <strncmp+0x1c>
    9884:	3301      	adds	r3, #1
    9886:	2c00      	cmp	r4, #0
    9888:	d1f6      	bne.n	9878 <strncmp+0xa>
    988a:	1b63      	subs	r3, r4, r5
    988c:	0018      	movs	r0, r3
    988e:	bd30      	pop	{r4, r5, pc}

00009890 <__swbuf_r>:
    9890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9892:	0005      	movs	r5, r0
    9894:	000e      	movs	r6, r1
    9896:	0014      	movs	r4, r2
    9898:	2800      	cmp	r0, #0
    989a:	d004      	beq.n	98a6 <__swbuf_r+0x16>
    989c:	6983      	ldr	r3, [r0, #24]
    989e:	2b00      	cmp	r3, #0
    98a0:	d101      	bne.n	98a6 <__swbuf_r+0x16>
    98a2:	f000 f9b9 	bl	9c18 <__sinit>
    98a6:	4b22      	ldr	r3, [pc, #136]	; (9930 <__swbuf_r+0xa0>)
    98a8:	429c      	cmp	r4, r3
    98aa:	d12d      	bne.n	9908 <__swbuf_r+0x78>
    98ac:	686c      	ldr	r4, [r5, #4]
    98ae:	69a3      	ldr	r3, [r4, #24]
    98b0:	60a3      	str	r3, [r4, #8]
    98b2:	89a3      	ldrh	r3, [r4, #12]
    98b4:	071b      	lsls	r3, r3, #28
    98b6:	d531      	bpl.n	991c <__swbuf_r+0x8c>
    98b8:	6923      	ldr	r3, [r4, #16]
    98ba:	2b00      	cmp	r3, #0
    98bc:	d02e      	beq.n	991c <__swbuf_r+0x8c>
    98be:	6823      	ldr	r3, [r4, #0]
    98c0:	6922      	ldr	r2, [r4, #16]
    98c2:	b2f7      	uxtb	r7, r6
    98c4:	1a98      	subs	r0, r3, r2
    98c6:	6963      	ldr	r3, [r4, #20]
    98c8:	b2f6      	uxtb	r6, r6
    98ca:	4298      	cmp	r0, r3
    98cc:	db05      	blt.n	98da <__swbuf_r+0x4a>
    98ce:	0021      	movs	r1, r4
    98d0:	0028      	movs	r0, r5
    98d2:	f000 f933 	bl	9b3c <_fflush_r>
    98d6:	2800      	cmp	r0, #0
    98d8:	d126      	bne.n	9928 <__swbuf_r+0x98>
    98da:	68a3      	ldr	r3, [r4, #8]
    98dc:	3001      	adds	r0, #1
    98de:	3b01      	subs	r3, #1
    98e0:	60a3      	str	r3, [r4, #8]
    98e2:	6823      	ldr	r3, [r4, #0]
    98e4:	1c5a      	adds	r2, r3, #1
    98e6:	6022      	str	r2, [r4, #0]
    98e8:	701f      	strb	r7, [r3, #0]
    98ea:	6963      	ldr	r3, [r4, #20]
    98ec:	4298      	cmp	r0, r3
    98ee:	d004      	beq.n	98fa <__swbuf_r+0x6a>
    98f0:	89a3      	ldrh	r3, [r4, #12]
    98f2:	07db      	lsls	r3, r3, #31
    98f4:	d51a      	bpl.n	992c <__swbuf_r+0x9c>
    98f6:	2e0a      	cmp	r6, #10
    98f8:	d118      	bne.n	992c <__swbuf_r+0x9c>
    98fa:	0021      	movs	r1, r4
    98fc:	0028      	movs	r0, r5
    98fe:	f000 f91d 	bl	9b3c <_fflush_r>
    9902:	2800      	cmp	r0, #0
    9904:	d012      	beq.n	992c <__swbuf_r+0x9c>
    9906:	e00f      	b.n	9928 <__swbuf_r+0x98>
    9908:	4b0a      	ldr	r3, [pc, #40]	; (9934 <__swbuf_r+0xa4>)
    990a:	429c      	cmp	r4, r3
    990c:	d101      	bne.n	9912 <__swbuf_r+0x82>
    990e:	68ac      	ldr	r4, [r5, #8]
    9910:	e7cd      	b.n	98ae <__swbuf_r+0x1e>
    9912:	4b09      	ldr	r3, [pc, #36]	; (9938 <__swbuf_r+0xa8>)
    9914:	429c      	cmp	r4, r3
    9916:	d1ca      	bne.n	98ae <__swbuf_r+0x1e>
    9918:	68ec      	ldr	r4, [r5, #12]
    991a:	e7c8      	b.n	98ae <__swbuf_r+0x1e>
    991c:	0021      	movs	r1, r4
    991e:	0028      	movs	r0, r5
    9920:	f000 f80c 	bl	993c <__swsetup_r>
    9924:	2800      	cmp	r0, #0
    9926:	d0ca      	beq.n	98be <__swbuf_r+0x2e>
    9928:	2601      	movs	r6, #1
    992a:	4276      	negs	r6, r6
    992c:	0030      	movs	r0, r6
    992e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9930:	0000bbbc 	.word	0x0000bbbc
    9934:	0000bbdc 	.word	0x0000bbdc
    9938:	0000bb9c 	.word	0x0000bb9c

0000993c <__swsetup_r>:
    993c:	4b36      	ldr	r3, [pc, #216]	; (9a18 <__swsetup_r+0xdc>)
    993e:	b570      	push	{r4, r5, r6, lr}
    9940:	681d      	ldr	r5, [r3, #0]
    9942:	0006      	movs	r6, r0
    9944:	000c      	movs	r4, r1
    9946:	2d00      	cmp	r5, #0
    9948:	d005      	beq.n	9956 <__swsetup_r+0x1a>
    994a:	69ab      	ldr	r3, [r5, #24]
    994c:	2b00      	cmp	r3, #0
    994e:	d102      	bne.n	9956 <__swsetup_r+0x1a>
    9950:	0028      	movs	r0, r5
    9952:	f000 f961 	bl	9c18 <__sinit>
    9956:	4b31      	ldr	r3, [pc, #196]	; (9a1c <__swsetup_r+0xe0>)
    9958:	429c      	cmp	r4, r3
    995a:	d10f      	bne.n	997c <__swsetup_r+0x40>
    995c:	686c      	ldr	r4, [r5, #4]
    995e:	230c      	movs	r3, #12
    9960:	5ee2      	ldrsh	r2, [r4, r3]
    9962:	b293      	uxth	r3, r2
    9964:	0719      	lsls	r1, r3, #28
    9966:	d42d      	bmi.n	99c4 <__swsetup_r+0x88>
    9968:	06d9      	lsls	r1, r3, #27
    996a:	d411      	bmi.n	9990 <__swsetup_r+0x54>
    996c:	2309      	movs	r3, #9
    996e:	2001      	movs	r0, #1
    9970:	6033      	str	r3, [r6, #0]
    9972:	3337      	adds	r3, #55	; 0x37
    9974:	4313      	orrs	r3, r2
    9976:	81a3      	strh	r3, [r4, #12]
    9978:	4240      	negs	r0, r0
    997a:	bd70      	pop	{r4, r5, r6, pc}
    997c:	4b28      	ldr	r3, [pc, #160]	; (9a20 <__swsetup_r+0xe4>)
    997e:	429c      	cmp	r4, r3
    9980:	d101      	bne.n	9986 <__swsetup_r+0x4a>
    9982:	68ac      	ldr	r4, [r5, #8]
    9984:	e7eb      	b.n	995e <__swsetup_r+0x22>
    9986:	4b27      	ldr	r3, [pc, #156]	; (9a24 <__swsetup_r+0xe8>)
    9988:	429c      	cmp	r4, r3
    998a:	d1e8      	bne.n	995e <__swsetup_r+0x22>
    998c:	68ec      	ldr	r4, [r5, #12]
    998e:	e7e6      	b.n	995e <__swsetup_r+0x22>
    9990:	075b      	lsls	r3, r3, #29
    9992:	d513      	bpl.n	99bc <__swsetup_r+0x80>
    9994:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9996:	2900      	cmp	r1, #0
    9998:	d008      	beq.n	99ac <__swsetup_r+0x70>
    999a:	0023      	movs	r3, r4
    999c:	3344      	adds	r3, #68	; 0x44
    999e:	4299      	cmp	r1, r3
    99a0:	d002      	beq.n	99a8 <__swsetup_r+0x6c>
    99a2:	0030      	movs	r0, r6
    99a4:	f7ff fd20 	bl	93e8 <_free_r>
    99a8:	2300      	movs	r3, #0
    99aa:	6363      	str	r3, [r4, #52]	; 0x34
    99ac:	2224      	movs	r2, #36	; 0x24
    99ae:	89a3      	ldrh	r3, [r4, #12]
    99b0:	4393      	bics	r3, r2
    99b2:	81a3      	strh	r3, [r4, #12]
    99b4:	2300      	movs	r3, #0
    99b6:	6063      	str	r3, [r4, #4]
    99b8:	6923      	ldr	r3, [r4, #16]
    99ba:	6023      	str	r3, [r4, #0]
    99bc:	2308      	movs	r3, #8
    99be:	89a2      	ldrh	r2, [r4, #12]
    99c0:	4313      	orrs	r3, r2
    99c2:	81a3      	strh	r3, [r4, #12]
    99c4:	6923      	ldr	r3, [r4, #16]
    99c6:	2b00      	cmp	r3, #0
    99c8:	d10b      	bne.n	99e2 <__swsetup_r+0xa6>
    99ca:	21a0      	movs	r1, #160	; 0xa0
    99cc:	2280      	movs	r2, #128	; 0x80
    99ce:	89a3      	ldrh	r3, [r4, #12]
    99d0:	0089      	lsls	r1, r1, #2
    99d2:	0092      	lsls	r2, r2, #2
    99d4:	400b      	ands	r3, r1
    99d6:	4293      	cmp	r3, r2
    99d8:	d003      	beq.n	99e2 <__swsetup_r+0xa6>
    99da:	0021      	movs	r1, r4
    99dc:	0030      	movs	r0, r6
    99de:	f000 f9d9 	bl	9d94 <__smakebuf_r>
    99e2:	2301      	movs	r3, #1
    99e4:	89a2      	ldrh	r2, [r4, #12]
    99e6:	4013      	ands	r3, r2
    99e8:	d011      	beq.n	9a0e <__swsetup_r+0xd2>
    99ea:	2300      	movs	r3, #0
    99ec:	60a3      	str	r3, [r4, #8]
    99ee:	6963      	ldr	r3, [r4, #20]
    99f0:	425b      	negs	r3, r3
    99f2:	61a3      	str	r3, [r4, #24]
    99f4:	2000      	movs	r0, #0
    99f6:	6923      	ldr	r3, [r4, #16]
    99f8:	4283      	cmp	r3, r0
    99fa:	d1be      	bne.n	997a <__swsetup_r+0x3e>
    99fc:	230c      	movs	r3, #12
    99fe:	5ee2      	ldrsh	r2, [r4, r3]
    9a00:	0613      	lsls	r3, r2, #24
    9a02:	d5ba      	bpl.n	997a <__swsetup_r+0x3e>
    9a04:	2340      	movs	r3, #64	; 0x40
    9a06:	4313      	orrs	r3, r2
    9a08:	81a3      	strh	r3, [r4, #12]
    9a0a:	3801      	subs	r0, #1
    9a0c:	e7b5      	b.n	997a <__swsetup_r+0x3e>
    9a0e:	0792      	lsls	r2, r2, #30
    9a10:	d400      	bmi.n	9a14 <__swsetup_r+0xd8>
    9a12:	6963      	ldr	r3, [r4, #20]
    9a14:	60a3      	str	r3, [r4, #8]
    9a16:	e7ed      	b.n	99f4 <__swsetup_r+0xb8>
    9a18:	2000000c 	.word	0x2000000c
    9a1c:	0000bbbc 	.word	0x0000bbbc
    9a20:	0000bbdc 	.word	0x0000bbdc
    9a24:	0000bb9c 	.word	0x0000bb9c

00009a28 <__sflush_r>:
    9a28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9a2a:	898a      	ldrh	r2, [r1, #12]
    9a2c:	0005      	movs	r5, r0
    9a2e:	000c      	movs	r4, r1
    9a30:	0713      	lsls	r3, r2, #28
    9a32:	d460      	bmi.n	9af6 <__sflush_r+0xce>
    9a34:	684b      	ldr	r3, [r1, #4]
    9a36:	2b00      	cmp	r3, #0
    9a38:	dc04      	bgt.n	9a44 <__sflush_r+0x1c>
    9a3a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    9a3c:	2b00      	cmp	r3, #0
    9a3e:	dc01      	bgt.n	9a44 <__sflush_r+0x1c>
    9a40:	2000      	movs	r0, #0
    9a42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9a44:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    9a46:	2f00      	cmp	r7, #0
    9a48:	d0fa      	beq.n	9a40 <__sflush_r+0x18>
    9a4a:	2300      	movs	r3, #0
    9a4c:	682e      	ldr	r6, [r5, #0]
    9a4e:	602b      	str	r3, [r5, #0]
    9a50:	2380      	movs	r3, #128	; 0x80
    9a52:	015b      	lsls	r3, r3, #5
    9a54:	401a      	ands	r2, r3
    9a56:	d034      	beq.n	9ac2 <__sflush_r+0x9a>
    9a58:	6d60      	ldr	r0, [r4, #84]	; 0x54
    9a5a:	89a3      	ldrh	r3, [r4, #12]
    9a5c:	075b      	lsls	r3, r3, #29
    9a5e:	d506      	bpl.n	9a6e <__sflush_r+0x46>
    9a60:	6863      	ldr	r3, [r4, #4]
    9a62:	1ac0      	subs	r0, r0, r3
    9a64:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9a66:	2b00      	cmp	r3, #0
    9a68:	d001      	beq.n	9a6e <__sflush_r+0x46>
    9a6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    9a6c:	1ac0      	subs	r0, r0, r3
    9a6e:	0002      	movs	r2, r0
    9a70:	6a21      	ldr	r1, [r4, #32]
    9a72:	2300      	movs	r3, #0
    9a74:	0028      	movs	r0, r5
    9a76:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    9a78:	47b8      	blx	r7
    9a7a:	89a1      	ldrh	r1, [r4, #12]
    9a7c:	1c43      	adds	r3, r0, #1
    9a7e:	d106      	bne.n	9a8e <__sflush_r+0x66>
    9a80:	682b      	ldr	r3, [r5, #0]
    9a82:	2b1d      	cmp	r3, #29
    9a84:	d831      	bhi.n	9aea <__sflush_r+0xc2>
    9a86:	4a2c      	ldr	r2, [pc, #176]	; (9b38 <__sflush_r+0x110>)
    9a88:	40da      	lsrs	r2, r3
    9a8a:	07d3      	lsls	r3, r2, #31
    9a8c:	d52d      	bpl.n	9aea <__sflush_r+0xc2>
    9a8e:	2300      	movs	r3, #0
    9a90:	6063      	str	r3, [r4, #4]
    9a92:	6923      	ldr	r3, [r4, #16]
    9a94:	6023      	str	r3, [r4, #0]
    9a96:	04cb      	lsls	r3, r1, #19
    9a98:	d505      	bpl.n	9aa6 <__sflush_r+0x7e>
    9a9a:	1c43      	adds	r3, r0, #1
    9a9c:	d102      	bne.n	9aa4 <__sflush_r+0x7c>
    9a9e:	682b      	ldr	r3, [r5, #0]
    9aa0:	2b00      	cmp	r3, #0
    9aa2:	d100      	bne.n	9aa6 <__sflush_r+0x7e>
    9aa4:	6560      	str	r0, [r4, #84]	; 0x54
    9aa6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9aa8:	602e      	str	r6, [r5, #0]
    9aaa:	2900      	cmp	r1, #0
    9aac:	d0c8      	beq.n	9a40 <__sflush_r+0x18>
    9aae:	0023      	movs	r3, r4
    9ab0:	3344      	adds	r3, #68	; 0x44
    9ab2:	4299      	cmp	r1, r3
    9ab4:	d002      	beq.n	9abc <__sflush_r+0x94>
    9ab6:	0028      	movs	r0, r5
    9ab8:	f7ff fc96 	bl	93e8 <_free_r>
    9abc:	2000      	movs	r0, #0
    9abe:	6360      	str	r0, [r4, #52]	; 0x34
    9ac0:	e7bf      	b.n	9a42 <__sflush_r+0x1a>
    9ac2:	2301      	movs	r3, #1
    9ac4:	6a21      	ldr	r1, [r4, #32]
    9ac6:	0028      	movs	r0, r5
    9ac8:	47b8      	blx	r7
    9aca:	1c43      	adds	r3, r0, #1
    9acc:	d1c5      	bne.n	9a5a <__sflush_r+0x32>
    9ace:	682b      	ldr	r3, [r5, #0]
    9ad0:	2b00      	cmp	r3, #0
    9ad2:	d0c2      	beq.n	9a5a <__sflush_r+0x32>
    9ad4:	2b1d      	cmp	r3, #29
    9ad6:	d001      	beq.n	9adc <__sflush_r+0xb4>
    9ad8:	2b16      	cmp	r3, #22
    9ada:	d101      	bne.n	9ae0 <__sflush_r+0xb8>
    9adc:	602e      	str	r6, [r5, #0]
    9ade:	e7af      	b.n	9a40 <__sflush_r+0x18>
    9ae0:	2340      	movs	r3, #64	; 0x40
    9ae2:	89a2      	ldrh	r2, [r4, #12]
    9ae4:	4313      	orrs	r3, r2
    9ae6:	81a3      	strh	r3, [r4, #12]
    9ae8:	e7ab      	b.n	9a42 <__sflush_r+0x1a>
    9aea:	2340      	movs	r3, #64	; 0x40
    9aec:	430b      	orrs	r3, r1
    9aee:	2001      	movs	r0, #1
    9af0:	81a3      	strh	r3, [r4, #12]
    9af2:	4240      	negs	r0, r0
    9af4:	e7a5      	b.n	9a42 <__sflush_r+0x1a>
    9af6:	690f      	ldr	r7, [r1, #16]
    9af8:	2f00      	cmp	r7, #0
    9afa:	d0a1      	beq.n	9a40 <__sflush_r+0x18>
    9afc:	680b      	ldr	r3, [r1, #0]
    9afe:	600f      	str	r7, [r1, #0]
    9b00:	1bdb      	subs	r3, r3, r7
    9b02:	9301      	str	r3, [sp, #4]
    9b04:	2300      	movs	r3, #0
    9b06:	0792      	lsls	r2, r2, #30
    9b08:	d100      	bne.n	9b0c <__sflush_r+0xe4>
    9b0a:	694b      	ldr	r3, [r1, #20]
    9b0c:	60a3      	str	r3, [r4, #8]
    9b0e:	9b01      	ldr	r3, [sp, #4]
    9b10:	2b00      	cmp	r3, #0
    9b12:	dc00      	bgt.n	9b16 <__sflush_r+0xee>
    9b14:	e794      	b.n	9a40 <__sflush_r+0x18>
    9b16:	9b01      	ldr	r3, [sp, #4]
    9b18:	003a      	movs	r2, r7
    9b1a:	6a21      	ldr	r1, [r4, #32]
    9b1c:	0028      	movs	r0, r5
    9b1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    9b20:	47b0      	blx	r6
    9b22:	2800      	cmp	r0, #0
    9b24:	dc03      	bgt.n	9b2e <__sflush_r+0x106>
    9b26:	2340      	movs	r3, #64	; 0x40
    9b28:	89a2      	ldrh	r2, [r4, #12]
    9b2a:	4313      	orrs	r3, r2
    9b2c:	e7df      	b.n	9aee <__sflush_r+0xc6>
    9b2e:	9b01      	ldr	r3, [sp, #4]
    9b30:	183f      	adds	r7, r7, r0
    9b32:	1a1b      	subs	r3, r3, r0
    9b34:	9301      	str	r3, [sp, #4]
    9b36:	e7ea      	b.n	9b0e <__sflush_r+0xe6>
    9b38:	20400001 	.word	0x20400001

00009b3c <_fflush_r>:
    9b3c:	690b      	ldr	r3, [r1, #16]
    9b3e:	b570      	push	{r4, r5, r6, lr}
    9b40:	0005      	movs	r5, r0
    9b42:	000c      	movs	r4, r1
    9b44:	2b00      	cmp	r3, #0
    9b46:	d101      	bne.n	9b4c <_fflush_r+0x10>
    9b48:	2000      	movs	r0, #0
    9b4a:	bd70      	pop	{r4, r5, r6, pc}
    9b4c:	2800      	cmp	r0, #0
    9b4e:	d004      	beq.n	9b5a <_fflush_r+0x1e>
    9b50:	6983      	ldr	r3, [r0, #24]
    9b52:	2b00      	cmp	r3, #0
    9b54:	d101      	bne.n	9b5a <_fflush_r+0x1e>
    9b56:	f000 f85f 	bl	9c18 <__sinit>
    9b5a:	4b0b      	ldr	r3, [pc, #44]	; (9b88 <_fflush_r+0x4c>)
    9b5c:	429c      	cmp	r4, r3
    9b5e:	d109      	bne.n	9b74 <_fflush_r+0x38>
    9b60:	686c      	ldr	r4, [r5, #4]
    9b62:	220c      	movs	r2, #12
    9b64:	5ea3      	ldrsh	r3, [r4, r2]
    9b66:	2b00      	cmp	r3, #0
    9b68:	d0ee      	beq.n	9b48 <_fflush_r+0xc>
    9b6a:	0021      	movs	r1, r4
    9b6c:	0028      	movs	r0, r5
    9b6e:	f7ff ff5b 	bl	9a28 <__sflush_r>
    9b72:	e7ea      	b.n	9b4a <_fflush_r+0xe>
    9b74:	4b05      	ldr	r3, [pc, #20]	; (9b8c <_fflush_r+0x50>)
    9b76:	429c      	cmp	r4, r3
    9b78:	d101      	bne.n	9b7e <_fflush_r+0x42>
    9b7a:	68ac      	ldr	r4, [r5, #8]
    9b7c:	e7f1      	b.n	9b62 <_fflush_r+0x26>
    9b7e:	4b04      	ldr	r3, [pc, #16]	; (9b90 <_fflush_r+0x54>)
    9b80:	429c      	cmp	r4, r3
    9b82:	d1ee      	bne.n	9b62 <_fflush_r+0x26>
    9b84:	68ec      	ldr	r4, [r5, #12]
    9b86:	e7ec      	b.n	9b62 <_fflush_r+0x26>
    9b88:	0000bbbc 	.word	0x0000bbbc
    9b8c:	0000bbdc 	.word	0x0000bbdc
    9b90:	0000bb9c 	.word	0x0000bb9c

00009b94 <_cleanup_r>:
    9b94:	b510      	push	{r4, lr}
    9b96:	4902      	ldr	r1, [pc, #8]	; (9ba0 <_cleanup_r+0xc>)
    9b98:	f000 f8b2 	bl	9d00 <_fwalk_reent>
    9b9c:	bd10      	pop	{r4, pc}
    9b9e:	46c0      	nop			; (mov r8, r8)
    9ba0:	00009b3d 	.word	0x00009b3d

00009ba4 <std.isra.0>:
    9ba4:	2300      	movs	r3, #0
    9ba6:	b510      	push	{r4, lr}
    9ba8:	0004      	movs	r4, r0
    9baa:	6003      	str	r3, [r0, #0]
    9bac:	6043      	str	r3, [r0, #4]
    9bae:	6083      	str	r3, [r0, #8]
    9bb0:	8181      	strh	r1, [r0, #12]
    9bb2:	6643      	str	r3, [r0, #100]	; 0x64
    9bb4:	81c2      	strh	r2, [r0, #14]
    9bb6:	6103      	str	r3, [r0, #16]
    9bb8:	6143      	str	r3, [r0, #20]
    9bba:	6183      	str	r3, [r0, #24]
    9bbc:	0019      	movs	r1, r3
    9bbe:	2208      	movs	r2, #8
    9bc0:	305c      	adds	r0, #92	; 0x5c
    9bc2:	f7ff fc08 	bl	93d6 <memset>
    9bc6:	4b05      	ldr	r3, [pc, #20]	; (9bdc <std.isra.0+0x38>)
    9bc8:	6224      	str	r4, [r4, #32]
    9bca:	6263      	str	r3, [r4, #36]	; 0x24
    9bcc:	4b04      	ldr	r3, [pc, #16]	; (9be0 <std.isra.0+0x3c>)
    9bce:	62a3      	str	r3, [r4, #40]	; 0x28
    9bd0:	4b04      	ldr	r3, [pc, #16]	; (9be4 <std.isra.0+0x40>)
    9bd2:	62e3      	str	r3, [r4, #44]	; 0x2c
    9bd4:	4b04      	ldr	r3, [pc, #16]	; (9be8 <std.isra.0+0x44>)
    9bd6:	6323      	str	r3, [r4, #48]	; 0x30
    9bd8:	bd10      	pop	{r4, pc}
    9bda:	46c0      	nop			; (mov r8, r8)
    9bdc:	0000a6e5 	.word	0x0000a6e5
    9be0:	0000a70d 	.word	0x0000a70d
    9be4:	0000a745 	.word	0x0000a745
    9be8:	0000a771 	.word	0x0000a771

00009bec <__sfmoreglue>:
    9bec:	b570      	push	{r4, r5, r6, lr}
    9bee:	2568      	movs	r5, #104	; 0x68
    9bf0:	1e4a      	subs	r2, r1, #1
    9bf2:	4355      	muls	r5, r2
    9bf4:	000e      	movs	r6, r1
    9bf6:	0029      	movs	r1, r5
    9bf8:	3174      	adds	r1, #116	; 0x74
    9bfa:	f7ff fc3f 	bl	947c <_malloc_r>
    9bfe:	1e04      	subs	r4, r0, #0
    9c00:	d008      	beq.n	9c14 <__sfmoreglue+0x28>
    9c02:	2100      	movs	r1, #0
    9c04:	002a      	movs	r2, r5
    9c06:	6001      	str	r1, [r0, #0]
    9c08:	6046      	str	r6, [r0, #4]
    9c0a:	300c      	adds	r0, #12
    9c0c:	60a0      	str	r0, [r4, #8]
    9c0e:	3268      	adds	r2, #104	; 0x68
    9c10:	f7ff fbe1 	bl	93d6 <memset>
    9c14:	0020      	movs	r0, r4
    9c16:	bd70      	pop	{r4, r5, r6, pc}

00009c18 <__sinit>:
    9c18:	6983      	ldr	r3, [r0, #24]
    9c1a:	b513      	push	{r0, r1, r4, lr}
    9c1c:	0004      	movs	r4, r0
    9c1e:	2b00      	cmp	r3, #0
    9c20:	d128      	bne.n	9c74 <__sinit+0x5c>
    9c22:	6483      	str	r3, [r0, #72]	; 0x48
    9c24:	64c3      	str	r3, [r0, #76]	; 0x4c
    9c26:	6503      	str	r3, [r0, #80]	; 0x50
    9c28:	4b13      	ldr	r3, [pc, #76]	; (9c78 <__sinit+0x60>)
    9c2a:	4a14      	ldr	r2, [pc, #80]	; (9c7c <__sinit+0x64>)
    9c2c:	681b      	ldr	r3, [r3, #0]
    9c2e:	6282      	str	r2, [r0, #40]	; 0x28
    9c30:	9301      	str	r3, [sp, #4]
    9c32:	4298      	cmp	r0, r3
    9c34:	d101      	bne.n	9c3a <__sinit+0x22>
    9c36:	2301      	movs	r3, #1
    9c38:	6183      	str	r3, [r0, #24]
    9c3a:	0020      	movs	r0, r4
    9c3c:	f000 f820 	bl	9c80 <__sfp>
    9c40:	6060      	str	r0, [r4, #4]
    9c42:	0020      	movs	r0, r4
    9c44:	f000 f81c 	bl	9c80 <__sfp>
    9c48:	60a0      	str	r0, [r4, #8]
    9c4a:	0020      	movs	r0, r4
    9c4c:	f000 f818 	bl	9c80 <__sfp>
    9c50:	2200      	movs	r2, #0
    9c52:	60e0      	str	r0, [r4, #12]
    9c54:	2104      	movs	r1, #4
    9c56:	6860      	ldr	r0, [r4, #4]
    9c58:	f7ff ffa4 	bl	9ba4 <std.isra.0>
    9c5c:	2201      	movs	r2, #1
    9c5e:	2109      	movs	r1, #9
    9c60:	68a0      	ldr	r0, [r4, #8]
    9c62:	f7ff ff9f 	bl	9ba4 <std.isra.0>
    9c66:	2202      	movs	r2, #2
    9c68:	2112      	movs	r1, #18
    9c6a:	68e0      	ldr	r0, [r4, #12]
    9c6c:	f7ff ff9a 	bl	9ba4 <std.isra.0>
    9c70:	2301      	movs	r3, #1
    9c72:	61a3      	str	r3, [r4, #24]
    9c74:	bd13      	pop	{r0, r1, r4, pc}
    9c76:	46c0      	nop			; (mov r8, r8)
    9c78:	0000bb98 	.word	0x0000bb98
    9c7c:	00009b95 	.word	0x00009b95

00009c80 <__sfp>:
    9c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9c82:	4b1e      	ldr	r3, [pc, #120]	; (9cfc <__sfp+0x7c>)
    9c84:	0007      	movs	r7, r0
    9c86:	681e      	ldr	r6, [r3, #0]
    9c88:	69b3      	ldr	r3, [r6, #24]
    9c8a:	2b00      	cmp	r3, #0
    9c8c:	d102      	bne.n	9c94 <__sfp+0x14>
    9c8e:	0030      	movs	r0, r6
    9c90:	f7ff ffc2 	bl	9c18 <__sinit>
    9c94:	3648      	adds	r6, #72	; 0x48
    9c96:	68b4      	ldr	r4, [r6, #8]
    9c98:	6873      	ldr	r3, [r6, #4]
    9c9a:	3b01      	subs	r3, #1
    9c9c:	d504      	bpl.n	9ca8 <__sfp+0x28>
    9c9e:	6833      	ldr	r3, [r6, #0]
    9ca0:	2b00      	cmp	r3, #0
    9ca2:	d007      	beq.n	9cb4 <__sfp+0x34>
    9ca4:	6836      	ldr	r6, [r6, #0]
    9ca6:	e7f6      	b.n	9c96 <__sfp+0x16>
    9ca8:	220c      	movs	r2, #12
    9caa:	5ea5      	ldrsh	r5, [r4, r2]
    9cac:	2d00      	cmp	r5, #0
    9cae:	d00d      	beq.n	9ccc <__sfp+0x4c>
    9cb0:	3468      	adds	r4, #104	; 0x68
    9cb2:	e7f2      	b.n	9c9a <__sfp+0x1a>
    9cb4:	2104      	movs	r1, #4
    9cb6:	0038      	movs	r0, r7
    9cb8:	f7ff ff98 	bl	9bec <__sfmoreglue>
    9cbc:	6030      	str	r0, [r6, #0]
    9cbe:	2800      	cmp	r0, #0
    9cc0:	d1f0      	bne.n	9ca4 <__sfp+0x24>
    9cc2:	230c      	movs	r3, #12
    9cc4:	0004      	movs	r4, r0
    9cc6:	603b      	str	r3, [r7, #0]
    9cc8:	0020      	movs	r0, r4
    9cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9ccc:	2301      	movs	r3, #1
    9cce:	0020      	movs	r0, r4
    9cd0:	425b      	negs	r3, r3
    9cd2:	81e3      	strh	r3, [r4, #14]
    9cd4:	3302      	adds	r3, #2
    9cd6:	81a3      	strh	r3, [r4, #12]
    9cd8:	6665      	str	r5, [r4, #100]	; 0x64
    9cda:	6025      	str	r5, [r4, #0]
    9cdc:	60a5      	str	r5, [r4, #8]
    9cde:	6065      	str	r5, [r4, #4]
    9ce0:	6125      	str	r5, [r4, #16]
    9ce2:	6165      	str	r5, [r4, #20]
    9ce4:	61a5      	str	r5, [r4, #24]
    9ce6:	2208      	movs	r2, #8
    9ce8:	0029      	movs	r1, r5
    9cea:	305c      	adds	r0, #92	; 0x5c
    9cec:	f7ff fb73 	bl	93d6 <memset>
    9cf0:	6365      	str	r5, [r4, #52]	; 0x34
    9cf2:	63a5      	str	r5, [r4, #56]	; 0x38
    9cf4:	64a5      	str	r5, [r4, #72]	; 0x48
    9cf6:	64e5      	str	r5, [r4, #76]	; 0x4c
    9cf8:	e7e6      	b.n	9cc8 <__sfp+0x48>
    9cfa:	46c0      	nop			; (mov r8, r8)
    9cfc:	0000bb98 	.word	0x0000bb98

00009d00 <_fwalk_reent>:
    9d00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9d02:	0004      	movs	r4, r0
    9d04:	0007      	movs	r7, r0
    9d06:	2600      	movs	r6, #0
    9d08:	9101      	str	r1, [sp, #4]
    9d0a:	3448      	adds	r4, #72	; 0x48
    9d0c:	2c00      	cmp	r4, #0
    9d0e:	d101      	bne.n	9d14 <_fwalk_reent+0x14>
    9d10:	0030      	movs	r0, r6
    9d12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9d14:	6863      	ldr	r3, [r4, #4]
    9d16:	68a5      	ldr	r5, [r4, #8]
    9d18:	9300      	str	r3, [sp, #0]
    9d1a:	9b00      	ldr	r3, [sp, #0]
    9d1c:	3b01      	subs	r3, #1
    9d1e:	9300      	str	r3, [sp, #0]
    9d20:	d501      	bpl.n	9d26 <_fwalk_reent+0x26>
    9d22:	6824      	ldr	r4, [r4, #0]
    9d24:	e7f2      	b.n	9d0c <_fwalk_reent+0xc>
    9d26:	89ab      	ldrh	r3, [r5, #12]
    9d28:	2b01      	cmp	r3, #1
    9d2a:	d908      	bls.n	9d3e <_fwalk_reent+0x3e>
    9d2c:	220e      	movs	r2, #14
    9d2e:	5eab      	ldrsh	r3, [r5, r2]
    9d30:	3301      	adds	r3, #1
    9d32:	d004      	beq.n	9d3e <_fwalk_reent+0x3e>
    9d34:	0029      	movs	r1, r5
    9d36:	0038      	movs	r0, r7
    9d38:	9b01      	ldr	r3, [sp, #4]
    9d3a:	4798      	blx	r3
    9d3c:	4306      	orrs	r6, r0
    9d3e:	3568      	adds	r5, #104	; 0x68
    9d40:	e7eb      	b.n	9d1a <_fwalk_reent+0x1a>
	...

00009d44 <__swhatbuf_r>:
    9d44:	b570      	push	{r4, r5, r6, lr}
    9d46:	000e      	movs	r6, r1
    9d48:	001d      	movs	r5, r3
    9d4a:	230e      	movs	r3, #14
    9d4c:	5ec9      	ldrsh	r1, [r1, r3]
    9d4e:	b090      	sub	sp, #64	; 0x40
    9d50:	0014      	movs	r4, r2
    9d52:	2900      	cmp	r1, #0
    9d54:	da07      	bge.n	9d66 <__swhatbuf_r+0x22>
    9d56:	2300      	movs	r3, #0
    9d58:	602b      	str	r3, [r5, #0]
    9d5a:	89b3      	ldrh	r3, [r6, #12]
    9d5c:	061b      	lsls	r3, r3, #24
    9d5e:	d411      	bmi.n	9d84 <__swhatbuf_r+0x40>
    9d60:	2380      	movs	r3, #128	; 0x80
    9d62:	00db      	lsls	r3, r3, #3
    9d64:	e00f      	b.n	9d86 <__swhatbuf_r+0x42>
    9d66:	aa01      	add	r2, sp, #4
    9d68:	f000 fd2e 	bl	a7c8 <_fstat_r>
    9d6c:	2800      	cmp	r0, #0
    9d6e:	dbf2      	blt.n	9d56 <__swhatbuf_r+0x12>
    9d70:	22f0      	movs	r2, #240	; 0xf0
    9d72:	9b02      	ldr	r3, [sp, #8]
    9d74:	0212      	lsls	r2, r2, #8
    9d76:	4013      	ands	r3, r2
    9d78:	4a05      	ldr	r2, [pc, #20]	; (9d90 <__swhatbuf_r+0x4c>)
    9d7a:	189b      	adds	r3, r3, r2
    9d7c:	425a      	negs	r2, r3
    9d7e:	4153      	adcs	r3, r2
    9d80:	602b      	str	r3, [r5, #0]
    9d82:	e7ed      	b.n	9d60 <__swhatbuf_r+0x1c>
    9d84:	2340      	movs	r3, #64	; 0x40
    9d86:	2000      	movs	r0, #0
    9d88:	6023      	str	r3, [r4, #0]
    9d8a:	b010      	add	sp, #64	; 0x40
    9d8c:	bd70      	pop	{r4, r5, r6, pc}
    9d8e:	46c0      	nop			; (mov r8, r8)
    9d90:	ffffe000 	.word	0xffffe000

00009d94 <__smakebuf_r>:
    9d94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9d96:	2602      	movs	r6, #2
    9d98:	898b      	ldrh	r3, [r1, #12]
    9d9a:	0005      	movs	r5, r0
    9d9c:	000c      	movs	r4, r1
    9d9e:	4233      	tst	r3, r6
    9da0:	d006      	beq.n	9db0 <__smakebuf_r+0x1c>
    9da2:	0023      	movs	r3, r4
    9da4:	3347      	adds	r3, #71	; 0x47
    9da6:	6023      	str	r3, [r4, #0]
    9da8:	6123      	str	r3, [r4, #16]
    9daa:	2301      	movs	r3, #1
    9dac:	6163      	str	r3, [r4, #20]
    9dae:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    9db0:	ab01      	add	r3, sp, #4
    9db2:	466a      	mov	r2, sp
    9db4:	f7ff ffc6 	bl	9d44 <__swhatbuf_r>
    9db8:	9900      	ldr	r1, [sp, #0]
    9dba:	0007      	movs	r7, r0
    9dbc:	0028      	movs	r0, r5
    9dbe:	f7ff fb5d 	bl	947c <_malloc_r>
    9dc2:	2800      	cmp	r0, #0
    9dc4:	d106      	bne.n	9dd4 <__smakebuf_r+0x40>
    9dc6:	220c      	movs	r2, #12
    9dc8:	5ea3      	ldrsh	r3, [r4, r2]
    9dca:	059a      	lsls	r2, r3, #22
    9dcc:	d4ef      	bmi.n	9dae <__smakebuf_r+0x1a>
    9dce:	431e      	orrs	r6, r3
    9dd0:	81a6      	strh	r6, [r4, #12]
    9dd2:	e7e6      	b.n	9da2 <__smakebuf_r+0xe>
    9dd4:	4b0d      	ldr	r3, [pc, #52]	; (9e0c <__smakebuf_r+0x78>)
    9dd6:	62ab      	str	r3, [r5, #40]	; 0x28
    9dd8:	2380      	movs	r3, #128	; 0x80
    9dda:	89a2      	ldrh	r2, [r4, #12]
    9ddc:	6020      	str	r0, [r4, #0]
    9dde:	4313      	orrs	r3, r2
    9de0:	81a3      	strh	r3, [r4, #12]
    9de2:	9b00      	ldr	r3, [sp, #0]
    9de4:	6120      	str	r0, [r4, #16]
    9de6:	6163      	str	r3, [r4, #20]
    9de8:	9b01      	ldr	r3, [sp, #4]
    9dea:	2b00      	cmp	r3, #0
    9dec:	d00a      	beq.n	9e04 <__smakebuf_r+0x70>
    9dee:	230e      	movs	r3, #14
    9df0:	5ee1      	ldrsh	r1, [r4, r3]
    9df2:	0028      	movs	r0, r5
    9df4:	f000 fcfa 	bl	a7ec <_isatty_r>
    9df8:	2800      	cmp	r0, #0
    9dfa:	d003      	beq.n	9e04 <__smakebuf_r+0x70>
    9dfc:	2301      	movs	r3, #1
    9dfe:	89a2      	ldrh	r2, [r4, #12]
    9e00:	4313      	orrs	r3, r2
    9e02:	81a3      	strh	r3, [r4, #12]
    9e04:	89a0      	ldrh	r0, [r4, #12]
    9e06:	4338      	orrs	r0, r7
    9e08:	81a0      	strh	r0, [r4, #12]
    9e0a:	e7d0      	b.n	9dae <__smakebuf_r+0x1a>
    9e0c:	00009b95 	.word	0x00009b95

00009e10 <__malloc_lock>:
    9e10:	4770      	bx	lr

00009e12 <__malloc_unlock>:
    9e12:	4770      	bx	lr

00009e14 <__ssputs_r>:
    9e14:	b5f0      	push	{r4, r5, r6, r7, lr}
    9e16:	688e      	ldr	r6, [r1, #8]
    9e18:	b085      	sub	sp, #20
    9e1a:	0007      	movs	r7, r0
    9e1c:	000c      	movs	r4, r1
    9e1e:	9203      	str	r2, [sp, #12]
    9e20:	9301      	str	r3, [sp, #4]
    9e22:	429e      	cmp	r6, r3
    9e24:	d839      	bhi.n	9e9a <__ssputs_r+0x86>
    9e26:	2390      	movs	r3, #144	; 0x90
    9e28:	898a      	ldrh	r2, [r1, #12]
    9e2a:	00db      	lsls	r3, r3, #3
    9e2c:	421a      	tst	r2, r3
    9e2e:	d034      	beq.n	9e9a <__ssputs_r+0x86>
    9e30:	2503      	movs	r5, #3
    9e32:	6909      	ldr	r1, [r1, #16]
    9e34:	6823      	ldr	r3, [r4, #0]
    9e36:	1a5b      	subs	r3, r3, r1
    9e38:	9302      	str	r3, [sp, #8]
    9e3a:	6963      	ldr	r3, [r4, #20]
    9e3c:	9802      	ldr	r0, [sp, #8]
    9e3e:	435d      	muls	r5, r3
    9e40:	0feb      	lsrs	r3, r5, #31
    9e42:	195d      	adds	r5, r3, r5
    9e44:	9b01      	ldr	r3, [sp, #4]
    9e46:	106d      	asrs	r5, r5, #1
    9e48:	3301      	adds	r3, #1
    9e4a:	181b      	adds	r3, r3, r0
    9e4c:	42ab      	cmp	r3, r5
    9e4e:	d900      	bls.n	9e52 <__ssputs_r+0x3e>
    9e50:	001d      	movs	r5, r3
    9e52:	0553      	lsls	r3, r2, #21
    9e54:	d532      	bpl.n	9ebc <__ssputs_r+0xa8>
    9e56:	0029      	movs	r1, r5
    9e58:	0038      	movs	r0, r7
    9e5a:	f7ff fb0f 	bl	947c <_malloc_r>
    9e5e:	1e06      	subs	r6, r0, #0
    9e60:	d109      	bne.n	9e76 <__ssputs_r+0x62>
    9e62:	230c      	movs	r3, #12
    9e64:	603b      	str	r3, [r7, #0]
    9e66:	2340      	movs	r3, #64	; 0x40
    9e68:	2001      	movs	r0, #1
    9e6a:	89a2      	ldrh	r2, [r4, #12]
    9e6c:	4240      	negs	r0, r0
    9e6e:	4313      	orrs	r3, r2
    9e70:	81a3      	strh	r3, [r4, #12]
    9e72:	b005      	add	sp, #20
    9e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9e76:	9a02      	ldr	r2, [sp, #8]
    9e78:	6921      	ldr	r1, [r4, #16]
    9e7a:	f7ff fa91 	bl	93a0 <memcpy>
    9e7e:	89a3      	ldrh	r3, [r4, #12]
    9e80:	4a14      	ldr	r2, [pc, #80]	; (9ed4 <__ssputs_r+0xc0>)
    9e82:	401a      	ands	r2, r3
    9e84:	2380      	movs	r3, #128	; 0x80
    9e86:	4313      	orrs	r3, r2
    9e88:	81a3      	strh	r3, [r4, #12]
    9e8a:	9b02      	ldr	r3, [sp, #8]
    9e8c:	6126      	str	r6, [r4, #16]
    9e8e:	18f6      	adds	r6, r6, r3
    9e90:	6026      	str	r6, [r4, #0]
    9e92:	6165      	str	r5, [r4, #20]
    9e94:	9e01      	ldr	r6, [sp, #4]
    9e96:	1aed      	subs	r5, r5, r3
    9e98:	60a5      	str	r5, [r4, #8]
    9e9a:	9b01      	ldr	r3, [sp, #4]
    9e9c:	42b3      	cmp	r3, r6
    9e9e:	d200      	bcs.n	9ea2 <__ssputs_r+0x8e>
    9ea0:	001e      	movs	r6, r3
    9ea2:	0032      	movs	r2, r6
    9ea4:	9903      	ldr	r1, [sp, #12]
    9ea6:	6820      	ldr	r0, [r4, #0]
    9ea8:	f7ff fa83 	bl	93b2 <memmove>
    9eac:	68a3      	ldr	r3, [r4, #8]
    9eae:	2000      	movs	r0, #0
    9eb0:	1b9b      	subs	r3, r3, r6
    9eb2:	60a3      	str	r3, [r4, #8]
    9eb4:	6823      	ldr	r3, [r4, #0]
    9eb6:	199e      	adds	r6, r3, r6
    9eb8:	6026      	str	r6, [r4, #0]
    9eba:	e7da      	b.n	9e72 <__ssputs_r+0x5e>
    9ebc:	002a      	movs	r2, r5
    9ebe:	0038      	movs	r0, r7
    9ec0:	f000 fcc5 	bl	a84e <_realloc_r>
    9ec4:	1e06      	subs	r6, r0, #0
    9ec6:	d1e0      	bne.n	9e8a <__ssputs_r+0x76>
    9ec8:	6921      	ldr	r1, [r4, #16]
    9eca:	0038      	movs	r0, r7
    9ecc:	f7ff fa8c 	bl	93e8 <_free_r>
    9ed0:	e7c7      	b.n	9e62 <__ssputs_r+0x4e>
    9ed2:	46c0      	nop			; (mov r8, r8)
    9ed4:	fffffb7f 	.word	0xfffffb7f

00009ed8 <_svfiprintf_r>:
    9ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
    9eda:	b09f      	sub	sp, #124	; 0x7c
    9edc:	9002      	str	r0, [sp, #8]
    9ede:	9305      	str	r3, [sp, #20]
    9ee0:	898b      	ldrh	r3, [r1, #12]
    9ee2:	000f      	movs	r7, r1
    9ee4:	0016      	movs	r6, r2
    9ee6:	061b      	lsls	r3, r3, #24
    9ee8:	d511      	bpl.n	9f0e <_svfiprintf_r+0x36>
    9eea:	690b      	ldr	r3, [r1, #16]
    9eec:	2b00      	cmp	r3, #0
    9eee:	d10e      	bne.n	9f0e <_svfiprintf_r+0x36>
    9ef0:	2140      	movs	r1, #64	; 0x40
    9ef2:	f7ff fac3 	bl	947c <_malloc_r>
    9ef6:	6038      	str	r0, [r7, #0]
    9ef8:	6138      	str	r0, [r7, #16]
    9efa:	2800      	cmp	r0, #0
    9efc:	d105      	bne.n	9f0a <_svfiprintf_r+0x32>
    9efe:	230c      	movs	r3, #12
    9f00:	9a02      	ldr	r2, [sp, #8]
    9f02:	3801      	subs	r0, #1
    9f04:	6013      	str	r3, [r2, #0]
    9f06:	b01f      	add	sp, #124	; 0x7c
    9f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9f0a:	2340      	movs	r3, #64	; 0x40
    9f0c:	617b      	str	r3, [r7, #20]
    9f0e:	2300      	movs	r3, #0
    9f10:	ad06      	add	r5, sp, #24
    9f12:	616b      	str	r3, [r5, #20]
    9f14:	3320      	adds	r3, #32
    9f16:	766b      	strb	r3, [r5, #25]
    9f18:	3310      	adds	r3, #16
    9f1a:	76ab      	strb	r3, [r5, #26]
    9f1c:	0034      	movs	r4, r6
    9f1e:	7823      	ldrb	r3, [r4, #0]
    9f20:	2b00      	cmp	r3, #0
    9f22:	d147      	bne.n	9fb4 <_svfiprintf_r+0xdc>
    9f24:	1ba3      	subs	r3, r4, r6
    9f26:	9304      	str	r3, [sp, #16]
    9f28:	d00d      	beq.n	9f46 <_svfiprintf_r+0x6e>
    9f2a:	1ba3      	subs	r3, r4, r6
    9f2c:	0032      	movs	r2, r6
    9f2e:	0039      	movs	r1, r7
    9f30:	9802      	ldr	r0, [sp, #8]
    9f32:	f7ff ff6f 	bl	9e14 <__ssputs_r>
    9f36:	1c43      	adds	r3, r0, #1
    9f38:	d100      	bne.n	9f3c <_svfiprintf_r+0x64>
    9f3a:	e0b5      	b.n	a0a8 <_svfiprintf_r+0x1d0>
    9f3c:	696a      	ldr	r2, [r5, #20]
    9f3e:	9b04      	ldr	r3, [sp, #16]
    9f40:	4694      	mov	ip, r2
    9f42:	4463      	add	r3, ip
    9f44:	616b      	str	r3, [r5, #20]
    9f46:	7823      	ldrb	r3, [r4, #0]
    9f48:	2b00      	cmp	r3, #0
    9f4a:	d100      	bne.n	9f4e <_svfiprintf_r+0x76>
    9f4c:	e0ac      	b.n	a0a8 <_svfiprintf_r+0x1d0>
    9f4e:	2201      	movs	r2, #1
    9f50:	2300      	movs	r3, #0
    9f52:	4252      	negs	r2, r2
    9f54:	606a      	str	r2, [r5, #4]
    9f56:	a902      	add	r1, sp, #8
    9f58:	3254      	adds	r2, #84	; 0x54
    9f5a:	1852      	adds	r2, r2, r1
    9f5c:	3401      	adds	r4, #1
    9f5e:	602b      	str	r3, [r5, #0]
    9f60:	60eb      	str	r3, [r5, #12]
    9f62:	60ab      	str	r3, [r5, #8]
    9f64:	7013      	strb	r3, [r2, #0]
    9f66:	65ab      	str	r3, [r5, #88]	; 0x58
    9f68:	4e58      	ldr	r6, [pc, #352]	; (a0cc <_svfiprintf_r+0x1f4>)
    9f6a:	2205      	movs	r2, #5
    9f6c:	7821      	ldrb	r1, [r4, #0]
    9f6e:	0030      	movs	r0, r6
    9f70:	f000 fc62 	bl	a838 <memchr>
    9f74:	1c62      	adds	r2, r4, #1
    9f76:	2800      	cmp	r0, #0
    9f78:	d120      	bne.n	9fbc <_svfiprintf_r+0xe4>
    9f7a:	6829      	ldr	r1, [r5, #0]
    9f7c:	06cb      	lsls	r3, r1, #27
    9f7e:	d504      	bpl.n	9f8a <_svfiprintf_r+0xb2>
    9f80:	2353      	movs	r3, #83	; 0x53
    9f82:	ae02      	add	r6, sp, #8
    9f84:	3020      	adds	r0, #32
    9f86:	199b      	adds	r3, r3, r6
    9f88:	7018      	strb	r0, [r3, #0]
    9f8a:	070b      	lsls	r3, r1, #28
    9f8c:	d504      	bpl.n	9f98 <_svfiprintf_r+0xc0>
    9f8e:	2353      	movs	r3, #83	; 0x53
    9f90:	202b      	movs	r0, #43	; 0x2b
    9f92:	ae02      	add	r6, sp, #8
    9f94:	199b      	adds	r3, r3, r6
    9f96:	7018      	strb	r0, [r3, #0]
    9f98:	7823      	ldrb	r3, [r4, #0]
    9f9a:	2b2a      	cmp	r3, #42	; 0x2a
    9f9c:	d016      	beq.n	9fcc <_svfiprintf_r+0xf4>
    9f9e:	2000      	movs	r0, #0
    9fa0:	210a      	movs	r1, #10
    9fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9fa4:	7822      	ldrb	r2, [r4, #0]
    9fa6:	3a30      	subs	r2, #48	; 0x30
    9fa8:	2a09      	cmp	r2, #9
    9faa:	d955      	bls.n	a058 <_svfiprintf_r+0x180>
    9fac:	2800      	cmp	r0, #0
    9fae:	d015      	beq.n	9fdc <_svfiprintf_r+0x104>
    9fb0:	9309      	str	r3, [sp, #36]	; 0x24
    9fb2:	e013      	b.n	9fdc <_svfiprintf_r+0x104>
    9fb4:	2b25      	cmp	r3, #37	; 0x25
    9fb6:	d0b5      	beq.n	9f24 <_svfiprintf_r+0x4c>
    9fb8:	3401      	adds	r4, #1
    9fba:	e7b0      	b.n	9f1e <_svfiprintf_r+0x46>
    9fbc:	2301      	movs	r3, #1
    9fbe:	1b80      	subs	r0, r0, r6
    9fc0:	4083      	lsls	r3, r0
    9fc2:	6829      	ldr	r1, [r5, #0]
    9fc4:	0014      	movs	r4, r2
    9fc6:	430b      	orrs	r3, r1
    9fc8:	602b      	str	r3, [r5, #0]
    9fca:	e7cd      	b.n	9f68 <_svfiprintf_r+0x90>
    9fcc:	9b05      	ldr	r3, [sp, #20]
    9fce:	1d18      	adds	r0, r3, #4
    9fd0:	681b      	ldr	r3, [r3, #0]
    9fd2:	9005      	str	r0, [sp, #20]
    9fd4:	2b00      	cmp	r3, #0
    9fd6:	db39      	blt.n	a04c <_svfiprintf_r+0x174>
    9fd8:	9309      	str	r3, [sp, #36]	; 0x24
    9fda:	0014      	movs	r4, r2
    9fdc:	7823      	ldrb	r3, [r4, #0]
    9fde:	2b2e      	cmp	r3, #46	; 0x2e
    9fe0:	d10b      	bne.n	9ffa <_svfiprintf_r+0x122>
    9fe2:	7863      	ldrb	r3, [r4, #1]
    9fe4:	1c62      	adds	r2, r4, #1
    9fe6:	2b2a      	cmp	r3, #42	; 0x2a
    9fe8:	d13e      	bne.n	a068 <_svfiprintf_r+0x190>
    9fea:	9b05      	ldr	r3, [sp, #20]
    9fec:	3402      	adds	r4, #2
    9fee:	1d1a      	adds	r2, r3, #4
    9ff0:	681b      	ldr	r3, [r3, #0]
    9ff2:	9205      	str	r2, [sp, #20]
    9ff4:	2b00      	cmp	r3, #0
    9ff6:	db34      	blt.n	a062 <_svfiprintf_r+0x18a>
    9ff8:	9307      	str	r3, [sp, #28]
    9ffa:	4e35      	ldr	r6, [pc, #212]	; (a0d0 <_svfiprintf_r+0x1f8>)
    9ffc:	7821      	ldrb	r1, [r4, #0]
    9ffe:	2203      	movs	r2, #3
    a000:	0030      	movs	r0, r6
    a002:	f000 fc19 	bl	a838 <memchr>
    a006:	2800      	cmp	r0, #0
    a008:	d006      	beq.n	a018 <_svfiprintf_r+0x140>
    a00a:	2340      	movs	r3, #64	; 0x40
    a00c:	1b80      	subs	r0, r0, r6
    a00e:	4083      	lsls	r3, r0
    a010:	682a      	ldr	r2, [r5, #0]
    a012:	3401      	adds	r4, #1
    a014:	4313      	orrs	r3, r2
    a016:	602b      	str	r3, [r5, #0]
    a018:	7821      	ldrb	r1, [r4, #0]
    a01a:	2206      	movs	r2, #6
    a01c:	482d      	ldr	r0, [pc, #180]	; (a0d4 <_svfiprintf_r+0x1fc>)
    a01e:	1c66      	adds	r6, r4, #1
    a020:	7629      	strb	r1, [r5, #24]
    a022:	f000 fc09 	bl	a838 <memchr>
    a026:	2800      	cmp	r0, #0
    a028:	d046      	beq.n	a0b8 <_svfiprintf_r+0x1e0>
    a02a:	4b2b      	ldr	r3, [pc, #172]	; (a0d8 <_svfiprintf_r+0x200>)
    a02c:	2b00      	cmp	r3, #0
    a02e:	d12f      	bne.n	a090 <_svfiprintf_r+0x1b8>
    a030:	6829      	ldr	r1, [r5, #0]
    a032:	9b05      	ldr	r3, [sp, #20]
    a034:	2207      	movs	r2, #7
    a036:	05c9      	lsls	r1, r1, #23
    a038:	d528      	bpl.n	a08c <_svfiprintf_r+0x1b4>
    a03a:	189b      	adds	r3, r3, r2
    a03c:	4393      	bics	r3, r2
    a03e:	3308      	adds	r3, #8
    a040:	9305      	str	r3, [sp, #20]
    a042:	696b      	ldr	r3, [r5, #20]
    a044:	9a03      	ldr	r2, [sp, #12]
    a046:	189b      	adds	r3, r3, r2
    a048:	616b      	str	r3, [r5, #20]
    a04a:	e767      	b.n	9f1c <_svfiprintf_r+0x44>
    a04c:	425b      	negs	r3, r3
    a04e:	60eb      	str	r3, [r5, #12]
    a050:	2302      	movs	r3, #2
    a052:	430b      	orrs	r3, r1
    a054:	602b      	str	r3, [r5, #0]
    a056:	e7c0      	b.n	9fda <_svfiprintf_r+0x102>
    a058:	434b      	muls	r3, r1
    a05a:	3401      	adds	r4, #1
    a05c:	189b      	adds	r3, r3, r2
    a05e:	2001      	movs	r0, #1
    a060:	e7a0      	b.n	9fa4 <_svfiprintf_r+0xcc>
    a062:	2301      	movs	r3, #1
    a064:	425b      	negs	r3, r3
    a066:	e7c7      	b.n	9ff8 <_svfiprintf_r+0x120>
    a068:	2300      	movs	r3, #0
    a06a:	0014      	movs	r4, r2
    a06c:	200a      	movs	r0, #10
    a06e:	001a      	movs	r2, r3
    a070:	606b      	str	r3, [r5, #4]
    a072:	7821      	ldrb	r1, [r4, #0]
    a074:	3930      	subs	r1, #48	; 0x30
    a076:	2909      	cmp	r1, #9
    a078:	d903      	bls.n	a082 <_svfiprintf_r+0x1aa>
    a07a:	2b00      	cmp	r3, #0
    a07c:	d0bd      	beq.n	9ffa <_svfiprintf_r+0x122>
    a07e:	9207      	str	r2, [sp, #28]
    a080:	e7bb      	b.n	9ffa <_svfiprintf_r+0x122>
    a082:	4342      	muls	r2, r0
    a084:	3401      	adds	r4, #1
    a086:	1852      	adds	r2, r2, r1
    a088:	2301      	movs	r3, #1
    a08a:	e7f2      	b.n	a072 <_svfiprintf_r+0x19a>
    a08c:	3307      	adds	r3, #7
    a08e:	e7d5      	b.n	a03c <_svfiprintf_r+0x164>
    a090:	ab05      	add	r3, sp, #20
    a092:	9300      	str	r3, [sp, #0]
    a094:	003a      	movs	r2, r7
    a096:	4b11      	ldr	r3, [pc, #68]	; (a0dc <_svfiprintf_r+0x204>)
    a098:	0029      	movs	r1, r5
    a09a:	9802      	ldr	r0, [sp, #8]
    a09c:	e000      	b.n	a0a0 <_svfiprintf_r+0x1c8>
    a09e:	bf00      	nop
    a0a0:	9003      	str	r0, [sp, #12]
    a0a2:	9b03      	ldr	r3, [sp, #12]
    a0a4:	3301      	adds	r3, #1
    a0a6:	d1cc      	bne.n	a042 <_svfiprintf_r+0x16a>
    a0a8:	89bb      	ldrh	r3, [r7, #12]
    a0aa:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a0ac:	065b      	lsls	r3, r3, #25
    a0ae:	d400      	bmi.n	a0b2 <_svfiprintf_r+0x1da>
    a0b0:	e729      	b.n	9f06 <_svfiprintf_r+0x2e>
    a0b2:	2001      	movs	r0, #1
    a0b4:	4240      	negs	r0, r0
    a0b6:	e726      	b.n	9f06 <_svfiprintf_r+0x2e>
    a0b8:	ab05      	add	r3, sp, #20
    a0ba:	9300      	str	r3, [sp, #0]
    a0bc:	003a      	movs	r2, r7
    a0be:	4b07      	ldr	r3, [pc, #28]	; (a0dc <_svfiprintf_r+0x204>)
    a0c0:	0029      	movs	r1, r5
    a0c2:	9802      	ldr	r0, [sp, #8]
    a0c4:	f000 f9be 	bl	a444 <_printf_i>
    a0c8:	e7ea      	b.n	a0a0 <_svfiprintf_r+0x1c8>
    a0ca:	46c0      	nop			; (mov r8, r8)
    a0cc:	0000bbfc 	.word	0x0000bbfc
    a0d0:	0000bc02 	.word	0x0000bc02
    a0d4:	0000bc06 	.word	0x0000bc06
    a0d8:	00000000 	.word	0x00000000
    a0dc:	00009e15 	.word	0x00009e15

0000a0e0 <__sfputc_r>:
    a0e0:	6893      	ldr	r3, [r2, #8]
    a0e2:	b510      	push	{r4, lr}
    a0e4:	3b01      	subs	r3, #1
    a0e6:	6093      	str	r3, [r2, #8]
    a0e8:	2b00      	cmp	r3, #0
    a0ea:	da05      	bge.n	a0f8 <__sfputc_r+0x18>
    a0ec:	6994      	ldr	r4, [r2, #24]
    a0ee:	42a3      	cmp	r3, r4
    a0f0:	db08      	blt.n	a104 <__sfputc_r+0x24>
    a0f2:	b2cb      	uxtb	r3, r1
    a0f4:	2b0a      	cmp	r3, #10
    a0f6:	d005      	beq.n	a104 <__sfputc_r+0x24>
    a0f8:	6813      	ldr	r3, [r2, #0]
    a0fa:	1c58      	adds	r0, r3, #1
    a0fc:	6010      	str	r0, [r2, #0]
    a0fe:	7019      	strb	r1, [r3, #0]
    a100:	b2c8      	uxtb	r0, r1
    a102:	bd10      	pop	{r4, pc}
    a104:	f7ff fbc4 	bl	9890 <__swbuf_r>
    a108:	e7fb      	b.n	a102 <__sfputc_r+0x22>

0000a10a <__sfputs_r>:
    a10a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a10c:	0006      	movs	r6, r0
    a10e:	000f      	movs	r7, r1
    a110:	0014      	movs	r4, r2
    a112:	18d5      	adds	r5, r2, r3
    a114:	42ac      	cmp	r4, r5
    a116:	d101      	bne.n	a11c <__sfputs_r+0x12>
    a118:	2000      	movs	r0, #0
    a11a:	e007      	b.n	a12c <__sfputs_r+0x22>
    a11c:	7821      	ldrb	r1, [r4, #0]
    a11e:	003a      	movs	r2, r7
    a120:	0030      	movs	r0, r6
    a122:	f7ff ffdd 	bl	a0e0 <__sfputc_r>
    a126:	3401      	adds	r4, #1
    a128:	1c43      	adds	r3, r0, #1
    a12a:	d1f3      	bne.n	a114 <__sfputs_r+0xa>
    a12c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000a130 <_vfiprintf_r>:
    a130:	b5f0      	push	{r4, r5, r6, r7, lr}
    a132:	b09f      	sub	sp, #124	; 0x7c
    a134:	0006      	movs	r6, r0
    a136:	000f      	movs	r7, r1
    a138:	0014      	movs	r4, r2
    a13a:	9305      	str	r3, [sp, #20]
    a13c:	2800      	cmp	r0, #0
    a13e:	d004      	beq.n	a14a <_vfiprintf_r+0x1a>
    a140:	6983      	ldr	r3, [r0, #24]
    a142:	2b00      	cmp	r3, #0
    a144:	d101      	bne.n	a14a <_vfiprintf_r+0x1a>
    a146:	f7ff fd67 	bl	9c18 <__sinit>
    a14a:	4b7f      	ldr	r3, [pc, #508]	; (a348 <_vfiprintf_r+0x218>)
    a14c:	429f      	cmp	r7, r3
    a14e:	d15c      	bne.n	a20a <_vfiprintf_r+0xda>
    a150:	6877      	ldr	r7, [r6, #4]
    a152:	89bb      	ldrh	r3, [r7, #12]
    a154:	071b      	lsls	r3, r3, #28
    a156:	d562      	bpl.n	a21e <_vfiprintf_r+0xee>
    a158:	693b      	ldr	r3, [r7, #16]
    a15a:	2b00      	cmp	r3, #0
    a15c:	d05f      	beq.n	a21e <_vfiprintf_r+0xee>
    a15e:	2300      	movs	r3, #0
    a160:	ad06      	add	r5, sp, #24
    a162:	616b      	str	r3, [r5, #20]
    a164:	3320      	adds	r3, #32
    a166:	766b      	strb	r3, [r5, #25]
    a168:	3310      	adds	r3, #16
    a16a:	76ab      	strb	r3, [r5, #26]
    a16c:	9402      	str	r4, [sp, #8]
    a16e:	9c02      	ldr	r4, [sp, #8]
    a170:	7823      	ldrb	r3, [r4, #0]
    a172:	2b00      	cmp	r3, #0
    a174:	d15d      	bne.n	a232 <_vfiprintf_r+0x102>
    a176:	9b02      	ldr	r3, [sp, #8]
    a178:	1ae3      	subs	r3, r4, r3
    a17a:	9304      	str	r3, [sp, #16]
    a17c:	d00d      	beq.n	a19a <_vfiprintf_r+0x6a>
    a17e:	9b04      	ldr	r3, [sp, #16]
    a180:	9a02      	ldr	r2, [sp, #8]
    a182:	0039      	movs	r1, r7
    a184:	0030      	movs	r0, r6
    a186:	f7ff ffc0 	bl	a10a <__sfputs_r>
    a18a:	1c43      	adds	r3, r0, #1
    a18c:	d100      	bne.n	a190 <_vfiprintf_r+0x60>
    a18e:	e0cc      	b.n	a32a <_vfiprintf_r+0x1fa>
    a190:	696a      	ldr	r2, [r5, #20]
    a192:	9b04      	ldr	r3, [sp, #16]
    a194:	4694      	mov	ip, r2
    a196:	4463      	add	r3, ip
    a198:	616b      	str	r3, [r5, #20]
    a19a:	7823      	ldrb	r3, [r4, #0]
    a19c:	2b00      	cmp	r3, #0
    a19e:	d100      	bne.n	a1a2 <_vfiprintf_r+0x72>
    a1a0:	e0c3      	b.n	a32a <_vfiprintf_r+0x1fa>
    a1a2:	2201      	movs	r2, #1
    a1a4:	2300      	movs	r3, #0
    a1a6:	4252      	negs	r2, r2
    a1a8:	606a      	str	r2, [r5, #4]
    a1aa:	a902      	add	r1, sp, #8
    a1ac:	3254      	adds	r2, #84	; 0x54
    a1ae:	1852      	adds	r2, r2, r1
    a1b0:	3401      	adds	r4, #1
    a1b2:	602b      	str	r3, [r5, #0]
    a1b4:	60eb      	str	r3, [r5, #12]
    a1b6:	60ab      	str	r3, [r5, #8]
    a1b8:	7013      	strb	r3, [r2, #0]
    a1ba:	65ab      	str	r3, [r5, #88]	; 0x58
    a1bc:	7821      	ldrb	r1, [r4, #0]
    a1be:	2205      	movs	r2, #5
    a1c0:	4862      	ldr	r0, [pc, #392]	; (a34c <_vfiprintf_r+0x21c>)
    a1c2:	f000 fb39 	bl	a838 <memchr>
    a1c6:	1c63      	adds	r3, r4, #1
    a1c8:	469c      	mov	ip, r3
    a1ca:	2800      	cmp	r0, #0
    a1cc:	d135      	bne.n	a23a <_vfiprintf_r+0x10a>
    a1ce:	6829      	ldr	r1, [r5, #0]
    a1d0:	06cb      	lsls	r3, r1, #27
    a1d2:	d504      	bpl.n	a1de <_vfiprintf_r+0xae>
    a1d4:	2353      	movs	r3, #83	; 0x53
    a1d6:	aa02      	add	r2, sp, #8
    a1d8:	3020      	adds	r0, #32
    a1da:	189b      	adds	r3, r3, r2
    a1dc:	7018      	strb	r0, [r3, #0]
    a1de:	070b      	lsls	r3, r1, #28
    a1e0:	d504      	bpl.n	a1ec <_vfiprintf_r+0xbc>
    a1e2:	2353      	movs	r3, #83	; 0x53
    a1e4:	202b      	movs	r0, #43	; 0x2b
    a1e6:	aa02      	add	r2, sp, #8
    a1e8:	189b      	adds	r3, r3, r2
    a1ea:	7018      	strb	r0, [r3, #0]
    a1ec:	7823      	ldrb	r3, [r4, #0]
    a1ee:	2b2a      	cmp	r3, #42	; 0x2a
    a1f0:	d02c      	beq.n	a24c <_vfiprintf_r+0x11c>
    a1f2:	2000      	movs	r0, #0
    a1f4:	210a      	movs	r1, #10
    a1f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a1f8:	7822      	ldrb	r2, [r4, #0]
    a1fa:	3a30      	subs	r2, #48	; 0x30
    a1fc:	2a09      	cmp	r2, #9
    a1fe:	d800      	bhi.n	a202 <_vfiprintf_r+0xd2>
    a200:	e06b      	b.n	a2da <_vfiprintf_r+0x1aa>
    a202:	2800      	cmp	r0, #0
    a204:	d02a      	beq.n	a25c <_vfiprintf_r+0x12c>
    a206:	9309      	str	r3, [sp, #36]	; 0x24
    a208:	e028      	b.n	a25c <_vfiprintf_r+0x12c>
    a20a:	4b51      	ldr	r3, [pc, #324]	; (a350 <_vfiprintf_r+0x220>)
    a20c:	429f      	cmp	r7, r3
    a20e:	d101      	bne.n	a214 <_vfiprintf_r+0xe4>
    a210:	68b7      	ldr	r7, [r6, #8]
    a212:	e79e      	b.n	a152 <_vfiprintf_r+0x22>
    a214:	4b4f      	ldr	r3, [pc, #316]	; (a354 <_vfiprintf_r+0x224>)
    a216:	429f      	cmp	r7, r3
    a218:	d19b      	bne.n	a152 <_vfiprintf_r+0x22>
    a21a:	68f7      	ldr	r7, [r6, #12]
    a21c:	e799      	b.n	a152 <_vfiprintf_r+0x22>
    a21e:	0039      	movs	r1, r7
    a220:	0030      	movs	r0, r6
    a222:	f7ff fb8b 	bl	993c <__swsetup_r>
    a226:	2800      	cmp	r0, #0
    a228:	d099      	beq.n	a15e <_vfiprintf_r+0x2e>
    a22a:	2001      	movs	r0, #1
    a22c:	4240      	negs	r0, r0
    a22e:	b01f      	add	sp, #124	; 0x7c
    a230:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a232:	2b25      	cmp	r3, #37	; 0x25
    a234:	d09f      	beq.n	a176 <_vfiprintf_r+0x46>
    a236:	3401      	adds	r4, #1
    a238:	e79a      	b.n	a170 <_vfiprintf_r+0x40>
    a23a:	4b44      	ldr	r3, [pc, #272]	; (a34c <_vfiprintf_r+0x21c>)
    a23c:	6829      	ldr	r1, [r5, #0]
    a23e:	1ac0      	subs	r0, r0, r3
    a240:	2301      	movs	r3, #1
    a242:	4083      	lsls	r3, r0
    a244:	430b      	orrs	r3, r1
    a246:	602b      	str	r3, [r5, #0]
    a248:	4664      	mov	r4, ip
    a24a:	e7b7      	b.n	a1bc <_vfiprintf_r+0x8c>
    a24c:	9b05      	ldr	r3, [sp, #20]
    a24e:	1d18      	adds	r0, r3, #4
    a250:	681b      	ldr	r3, [r3, #0]
    a252:	9005      	str	r0, [sp, #20]
    a254:	2b00      	cmp	r3, #0
    a256:	db3a      	blt.n	a2ce <_vfiprintf_r+0x19e>
    a258:	9309      	str	r3, [sp, #36]	; 0x24
    a25a:	4664      	mov	r4, ip
    a25c:	7823      	ldrb	r3, [r4, #0]
    a25e:	2b2e      	cmp	r3, #46	; 0x2e
    a260:	d10b      	bne.n	a27a <_vfiprintf_r+0x14a>
    a262:	7863      	ldrb	r3, [r4, #1]
    a264:	1c62      	adds	r2, r4, #1
    a266:	2b2a      	cmp	r3, #42	; 0x2a
    a268:	d13f      	bne.n	a2ea <_vfiprintf_r+0x1ba>
    a26a:	9b05      	ldr	r3, [sp, #20]
    a26c:	3402      	adds	r4, #2
    a26e:	1d1a      	adds	r2, r3, #4
    a270:	681b      	ldr	r3, [r3, #0]
    a272:	9205      	str	r2, [sp, #20]
    a274:	2b00      	cmp	r3, #0
    a276:	db35      	blt.n	a2e4 <_vfiprintf_r+0x1b4>
    a278:	9307      	str	r3, [sp, #28]
    a27a:	7821      	ldrb	r1, [r4, #0]
    a27c:	2203      	movs	r2, #3
    a27e:	4836      	ldr	r0, [pc, #216]	; (a358 <_vfiprintf_r+0x228>)
    a280:	f000 fada 	bl	a838 <memchr>
    a284:	2800      	cmp	r0, #0
    a286:	d007      	beq.n	a298 <_vfiprintf_r+0x168>
    a288:	4b33      	ldr	r3, [pc, #204]	; (a358 <_vfiprintf_r+0x228>)
    a28a:	682a      	ldr	r2, [r5, #0]
    a28c:	1ac0      	subs	r0, r0, r3
    a28e:	2340      	movs	r3, #64	; 0x40
    a290:	4083      	lsls	r3, r0
    a292:	4313      	orrs	r3, r2
    a294:	602b      	str	r3, [r5, #0]
    a296:	3401      	adds	r4, #1
    a298:	7821      	ldrb	r1, [r4, #0]
    a29a:	1c63      	adds	r3, r4, #1
    a29c:	2206      	movs	r2, #6
    a29e:	482f      	ldr	r0, [pc, #188]	; (a35c <_vfiprintf_r+0x22c>)
    a2a0:	9302      	str	r3, [sp, #8]
    a2a2:	7629      	strb	r1, [r5, #24]
    a2a4:	f000 fac8 	bl	a838 <memchr>
    a2a8:	2800      	cmp	r0, #0
    a2aa:	d044      	beq.n	a336 <_vfiprintf_r+0x206>
    a2ac:	4b2c      	ldr	r3, [pc, #176]	; (a360 <_vfiprintf_r+0x230>)
    a2ae:	2b00      	cmp	r3, #0
    a2b0:	d12f      	bne.n	a312 <_vfiprintf_r+0x1e2>
    a2b2:	6829      	ldr	r1, [r5, #0]
    a2b4:	9b05      	ldr	r3, [sp, #20]
    a2b6:	2207      	movs	r2, #7
    a2b8:	05c9      	lsls	r1, r1, #23
    a2ba:	d528      	bpl.n	a30e <_vfiprintf_r+0x1de>
    a2bc:	189b      	adds	r3, r3, r2
    a2be:	4393      	bics	r3, r2
    a2c0:	3308      	adds	r3, #8
    a2c2:	9305      	str	r3, [sp, #20]
    a2c4:	696b      	ldr	r3, [r5, #20]
    a2c6:	9a03      	ldr	r2, [sp, #12]
    a2c8:	189b      	adds	r3, r3, r2
    a2ca:	616b      	str	r3, [r5, #20]
    a2cc:	e74f      	b.n	a16e <_vfiprintf_r+0x3e>
    a2ce:	425b      	negs	r3, r3
    a2d0:	60eb      	str	r3, [r5, #12]
    a2d2:	2302      	movs	r3, #2
    a2d4:	430b      	orrs	r3, r1
    a2d6:	602b      	str	r3, [r5, #0]
    a2d8:	e7bf      	b.n	a25a <_vfiprintf_r+0x12a>
    a2da:	434b      	muls	r3, r1
    a2dc:	3401      	adds	r4, #1
    a2de:	189b      	adds	r3, r3, r2
    a2e0:	2001      	movs	r0, #1
    a2e2:	e789      	b.n	a1f8 <_vfiprintf_r+0xc8>
    a2e4:	2301      	movs	r3, #1
    a2e6:	425b      	negs	r3, r3
    a2e8:	e7c6      	b.n	a278 <_vfiprintf_r+0x148>
    a2ea:	2300      	movs	r3, #0
    a2ec:	0014      	movs	r4, r2
    a2ee:	200a      	movs	r0, #10
    a2f0:	001a      	movs	r2, r3
    a2f2:	606b      	str	r3, [r5, #4]
    a2f4:	7821      	ldrb	r1, [r4, #0]
    a2f6:	3930      	subs	r1, #48	; 0x30
    a2f8:	2909      	cmp	r1, #9
    a2fa:	d903      	bls.n	a304 <_vfiprintf_r+0x1d4>
    a2fc:	2b00      	cmp	r3, #0
    a2fe:	d0bc      	beq.n	a27a <_vfiprintf_r+0x14a>
    a300:	9207      	str	r2, [sp, #28]
    a302:	e7ba      	b.n	a27a <_vfiprintf_r+0x14a>
    a304:	4342      	muls	r2, r0
    a306:	3401      	adds	r4, #1
    a308:	1852      	adds	r2, r2, r1
    a30a:	2301      	movs	r3, #1
    a30c:	e7f2      	b.n	a2f4 <_vfiprintf_r+0x1c4>
    a30e:	3307      	adds	r3, #7
    a310:	e7d5      	b.n	a2be <_vfiprintf_r+0x18e>
    a312:	ab05      	add	r3, sp, #20
    a314:	9300      	str	r3, [sp, #0]
    a316:	003a      	movs	r2, r7
    a318:	4b12      	ldr	r3, [pc, #72]	; (a364 <_vfiprintf_r+0x234>)
    a31a:	0029      	movs	r1, r5
    a31c:	0030      	movs	r0, r6
    a31e:	e000      	b.n	a322 <_vfiprintf_r+0x1f2>
    a320:	bf00      	nop
    a322:	9003      	str	r0, [sp, #12]
    a324:	9b03      	ldr	r3, [sp, #12]
    a326:	3301      	adds	r3, #1
    a328:	d1cc      	bne.n	a2c4 <_vfiprintf_r+0x194>
    a32a:	89bb      	ldrh	r3, [r7, #12]
    a32c:	065b      	lsls	r3, r3, #25
    a32e:	d500      	bpl.n	a332 <_vfiprintf_r+0x202>
    a330:	e77b      	b.n	a22a <_vfiprintf_r+0xfa>
    a332:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a334:	e77b      	b.n	a22e <_vfiprintf_r+0xfe>
    a336:	ab05      	add	r3, sp, #20
    a338:	9300      	str	r3, [sp, #0]
    a33a:	003a      	movs	r2, r7
    a33c:	4b09      	ldr	r3, [pc, #36]	; (a364 <_vfiprintf_r+0x234>)
    a33e:	0029      	movs	r1, r5
    a340:	0030      	movs	r0, r6
    a342:	f000 f87f 	bl	a444 <_printf_i>
    a346:	e7ec      	b.n	a322 <_vfiprintf_r+0x1f2>
    a348:	0000bbbc 	.word	0x0000bbbc
    a34c:	0000bbfc 	.word	0x0000bbfc
    a350:	0000bbdc 	.word	0x0000bbdc
    a354:	0000bb9c 	.word	0x0000bb9c
    a358:	0000bc02 	.word	0x0000bc02
    a35c:	0000bc06 	.word	0x0000bc06
    a360:	00000000 	.word	0x00000000
    a364:	0000a10b 	.word	0x0000a10b

0000a368 <_printf_common>:
    a368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a36a:	0015      	movs	r5, r2
    a36c:	9301      	str	r3, [sp, #4]
    a36e:	688a      	ldr	r2, [r1, #8]
    a370:	690b      	ldr	r3, [r1, #16]
    a372:	9000      	str	r0, [sp, #0]
    a374:	000c      	movs	r4, r1
    a376:	4293      	cmp	r3, r2
    a378:	da00      	bge.n	a37c <_printf_common+0x14>
    a37a:	0013      	movs	r3, r2
    a37c:	0022      	movs	r2, r4
    a37e:	602b      	str	r3, [r5, #0]
    a380:	3243      	adds	r2, #67	; 0x43
    a382:	7812      	ldrb	r2, [r2, #0]
    a384:	2a00      	cmp	r2, #0
    a386:	d001      	beq.n	a38c <_printf_common+0x24>
    a388:	3301      	adds	r3, #1
    a38a:	602b      	str	r3, [r5, #0]
    a38c:	6823      	ldr	r3, [r4, #0]
    a38e:	069b      	lsls	r3, r3, #26
    a390:	d502      	bpl.n	a398 <_printf_common+0x30>
    a392:	682b      	ldr	r3, [r5, #0]
    a394:	3302      	adds	r3, #2
    a396:	602b      	str	r3, [r5, #0]
    a398:	2706      	movs	r7, #6
    a39a:	6823      	ldr	r3, [r4, #0]
    a39c:	401f      	ands	r7, r3
    a39e:	d027      	beq.n	a3f0 <_printf_common+0x88>
    a3a0:	0023      	movs	r3, r4
    a3a2:	3343      	adds	r3, #67	; 0x43
    a3a4:	781b      	ldrb	r3, [r3, #0]
    a3a6:	1e5a      	subs	r2, r3, #1
    a3a8:	4193      	sbcs	r3, r2
    a3aa:	6822      	ldr	r2, [r4, #0]
    a3ac:	0692      	lsls	r2, r2, #26
    a3ae:	d430      	bmi.n	a412 <_printf_common+0xaa>
    a3b0:	0022      	movs	r2, r4
    a3b2:	9901      	ldr	r1, [sp, #4]
    a3b4:	3243      	adds	r2, #67	; 0x43
    a3b6:	9800      	ldr	r0, [sp, #0]
    a3b8:	9e08      	ldr	r6, [sp, #32]
    a3ba:	47b0      	blx	r6
    a3bc:	1c43      	adds	r3, r0, #1
    a3be:	d025      	beq.n	a40c <_printf_common+0xa4>
    a3c0:	2306      	movs	r3, #6
    a3c2:	6820      	ldr	r0, [r4, #0]
    a3c4:	682a      	ldr	r2, [r5, #0]
    a3c6:	68e1      	ldr	r1, [r4, #12]
    a3c8:	4003      	ands	r3, r0
    a3ca:	2500      	movs	r5, #0
    a3cc:	2b04      	cmp	r3, #4
    a3ce:	d103      	bne.n	a3d8 <_printf_common+0x70>
    a3d0:	1a8d      	subs	r5, r1, r2
    a3d2:	43eb      	mvns	r3, r5
    a3d4:	17db      	asrs	r3, r3, #31
    a3d6:	401d      	ands	r5, r3
    a3d8:	68a3      	ldr	r3, [r4, #8]
    a3da:	6922      	ldr	r2, [r4, #16]
    a3dc:	4293      	cmp	r3, r2
    a3de:	dd01      	ble.n	a3e4 <_printf_common+0x7c>
    a3e0:	1a9b      	subs	r3, r3, r2
    a3e2:	18ed      	adds	r5, r5, r3
    a3e4:	2700      	movs	r7, #0
    a3e6:	42bd      	cmp	r5, r7
    a3e8:	d120      	bne.n	a42c <_printf_common+0xc4>
    a3ea:	2000      	movs	r0, #0
    a3ec:	e010      	b.n	a410 <_printf_common+0xa8>
    a3ee:	3701      	adds	r7, #1
    a3f0:	68e3      	ldr	r3, [r4, #12]
    a3f2:	682a      	ldr	r2, [r5, #0]
    a3f4:	1a9b      	subs	r3, r3, r2
    a3f6:	429f      	cmp	r7, r3
    a3f8:	dad2      	bge.n	a3a0 <_printf_common+0x38>
    a3fa:	0022      	movs	r2, r4
    a3fc:	2301      	movs	r3, #1
    a3fe:	3219      	adds	r2, #25
    a400:	9901      	ldr	r1, [sp, #4]
    a402:	9800      	ldr	r0, [sp, #0]
    a404:	9e08      	ldr	r6, [sp, #32]
    a406:	47b0      	blx	r6
    a408:	1c43      	adds	r3, r0, #1
    a40a:	d1f0      	bne.n	a3ee <_printf_common+0x86>
    a40c:	2001      	movs	r0, #1
    a40e:	4240      	negs	r0, r0
    a410:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    a412:	2030      	movs	r0, #48	; 0x30
    a414:	18e1      	adds	r1, r4, r3
    a416:	3143      	adds	r1, #67	; 0x43
    a418:	7008      	strb	r0, [r1, #0]
    a41a:	0021      	movs	r1, r4
    a41c:	1c5a      	adds	r2, r3, #1
    a41e:	3145      	adds	r1, #69	; 0x45
    a420:	7809      	ldrb	r1, [r1, #0]
    a422:	18a2      	adds	r2, r4, r2
    a424:	3243      	adds	r2, #67	; 0x43
    a426:	3302      	adds	r3, #2
    a428:	7011      	strb	r1, [r2, #0]
    a42a:	e7c1      	b.n	a3b0 <_printf_common+0x48>
    a42c:	0022      	movs	r2, r4
    a42e:	2301      	movs	r3, #1
    a430:	321a      	adds	r2, #26
    a432:	9901      	ldr	r1, [sp, #4]
    a434:	9800      	ldr	r0, [sp, #0]
    a436:	9e08      	ldr	r6, [sp, #32]
    a438:	47b0      	blx	r6
    a43a:	1c43      	adds	r3, r0, #1
    a43c:	d0e6      	beq.n	a40c <_printf_common+0xa4>
    a43e:	3701      	adds	r7, #1
    a440:	e7d1      	b.n	a3e6 <_printf_common+0x7e>
	...

0000a444 <_printf_i>:
    a444:	b5f0      	push	{r4, r5, r6, r7, lr}
    a446:	b08b      	sub	sp, #44	; 0x2c
    a448:	9206      	str	r2, [sp, #24]
    a44a:	000a      	movs	r2, r1
    a44c:	3243      	adds	r2, #67	; 0x43
    a44e:	9307      	str	r3, [sp, #28]
    a450:	9005      	str	r0, [sp, #20]
    a452:	9204      	str	r2, [sp, #16]
    a454:	7e0a      	ldrb	r2, [r1, #24]
    a456:	000c      	movs	r4, r1
    a458:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a45a:	2a6e      	cmp	r2, #110	; 0x6e
    a45c:	d100      	bne.n	a460 <_printf_i+0x1c>
    a45e:	e08f      	b.n	a580 <_printf_i+0x13c>
    a460:	d817      	bhi.n	a492 <_printf_i+0x4e>
    a462:	2a63      	cmp	r2, #99	; 0x63
    a464:	d02c      	beq.n	a4c0 <_printf_i+0x7c>
    a466:	d808      	bhi.n	a47a <_printf_i+0x36>
    a468:	2a00      	cmp	r2, #0
    a46a:	d100      	bne.n	a46e <_printf_i+0x2a>
    a46c:	e099      	b.n	a5a2 <_printf_i+0x15e>
    a46e:	2a58      	cmp	r2, #88	; 0x58
    a470:	d054      	beq.n	a51c <_printf_i+0xd8>
    a472:	0026      	movs	r6, r4
    a474:	3642      	adds	r6, #66	; 0x42
    a476:	7032      	strb	r2, [r6, #0]
    a478:	e029      	b.n	a4ce <_printf_i+0x8a>
    a47a:	2a64      	cmp	r2, #100	; 0x64
    a47c:	d001      	beq.n	a482 <_printf_i+0x3e>
    a47e:	2a69      	cmp	r2, #105	; 0x69
    a480:	d1f7      	bne.n	a472 <_printf_i+0x2e>
    a482:	6821      	ldr	r1, [r4, #0]
    a484:	681a      	ldr	r2, [r3, #0]
    a486:	0608      	lsls	r0, r1, #24
    a488:	d523      	bpl.n	a4d2 <_printf_i+0x8e>
    a48a:	1d11      	adds	r1, r2, #4
    a48c:	6019      	str	r1, [r3, #0]
    a48e:	6815      	ldr	r5, [r2, #0]
    a490:	e025      	b.n	a4de <_printf_i+0x9a>
    a492:	2a73      	cmp	r2, #115	; 0x73
    a494:	d100      	bne.n	a498 <_printf_i+0x54>
    a496:	e088      	b.n	a5aa <_printf_i+0x166>
    a498:	d808      	bhi.n	a4ac <_printf_i+0x68>
    a49a:	2a6f      	cmp	r2, #111	; 0x6f
    a49c:	d029      	beq.n	a4f2 <_printf_i+0xae>
    a49e:	2a70      	cmp	r2, #112	; 0x70
    a4a0:	d1e7      	bne.n	a472 <_printf_i+0x2e>
    a4a2:	2220      	movs	r2, #32
    a4a4:	6809      	ldr	r1, [r1, #0]
    a4a6:	430a      	orrs	r2, r1
    a4a8:	6022      	str	r2, [r4, #0]
    a4aa:	e003      	b.n	a4b4 <_printf_i+0x70>
    a4ac:	2a75      	cmp	r2, #117	; 0x75
    a4ae:	d020      	beq.n	a4f2 <_printf_i+0xae>
    a4b0:	2a78      	cmp	r2, #120	; 0x78
    a4b2:	d1de      	bne.n	a472 <_printf_i+0x2e>
    a4b4:	0022      	movs	r2, r4
    a4b6:	2178      	movs	r1, #120	; 0x78
    a4b8:	3245      	adds	r2, #69	; 0x45
    a4ba:	7011      	strb	r1, [r2, #0]
    a4bc:	4a6c      	ldr	r2, [pc, #432]	; (a670 <_printf_i+0x22c>)
    a4be:	e030      	b.n	a522 <_printf_i+0xde>
    a4c0:	000e      	movs	r6, r1
    a4c2:	681a      	ldr	r2, [r3, #0]
    a4c4:	3642      	adds	r6, #66	; 0x42
    a4c6:	1d11      	adds	r1, r2, #4
    a4c8:	6019      	str	r1, [r3, #0]
    a4ca:	6813      	ldr	r3, [r2, #0]
    a4cc:	7033      	strb	r3, [r6, #0]
    a4ce:	2301      	movs	r3, #1
    a4d0:	e079      	b.n	a5c6 <_printf_i+0x182>
    a4d2:	0649      	lsls	r1, r1, #25
    a4d4:	d5d9      	bpl.n	a48a <_printf_i+0x46>
    a4d6:	1d11      	adds	r1, r2, #4
    a4d8:	6019      	str	r1, [r3, #0]
    a4da:	2300      	movs	r3, #0
    a4dc:	5ed5      	ldrsh	r5, [r2, r3]
    a4de:	2d00      	cmp	r5, #0
    a4e0:	da03      	bge.n	a4ea <_printf_i+0xa6>
    a4e2:	232d      	movs	r3, #45	; 0x2d
    a4e4:	9a04      	ldr	r2, [sp, #16]
    a4e6:	426d      	negs	r5, r5
    a4e8:	7013      	strb	r3, [r2, #0]
    a4ea:	4b62      	ldr	r3, [pc, #392]	; (a674 <_printf_i+0x230>)
    a4ec:	270a      	movs	r7, #10
    a4ee:	9303      	str	r3, [sp, #12]
    a4f0:	e02f      	b.n	a552 <_printf_i+0x10e>
    a4f2:	6820      	ldr	r0, [r4, #0]
    a4f4:	6819      	ldr	r1, [r3, #0]
    a4f6:	0605      	lsls	r5, r0, #24
    a4f8:	d503      	bpl.n	a502 <_printf_i+0xbe>
    a4fa:	1d08      	adds	r0, r1, #4
    a4fc:	6018      	str	r0, [r3, #0]
    a4fe:	680d      	ldr	r5, [r1, #0]
    a500:	e005      	b.n	a50e <_printf_i+0xca>
    a502:	0640      	lsls	r0, r0, #25
    a504:	d5f9      	bpl.n	a4fa <_printf_i+0xb6>
    a506:	680d      	ldr	r5, [r1, #0]
    a508:	1d08      	adds	r0, r1, #4
    a50a:	6018      	str	r0, [r3, #0]
    a50c:	b2ad      	uxth	r5, r5
    a50e:	4b59      	ldr	r3, [pc, #356]	; (a674 <_printf_i+0x230>)
    a510:	2708      	movs	r7, #8
    a512:	9303      	str	r3, [sp, #12]
    a514:	2a6f      	cmp	r2, #111	; 0x6f
    a516:	d018      	beq.n	a54a <_printf_i+0x106>
    a518:	270a      	movs	r7, #10
    a51a:	e016      	b.n	a54a <_printf_i+0x106>
    a51c:	3145      	adds	r1, #69	; 0x45
    a51e:	700a      	strb	r2, [r1, #0]
    a520:	4a54      	ldr	r2, [pc, #336]	; (a674 <_printf_i+0x230>)
    a522:	9203      	str	r2, [sp, #12]
    a524:	681a      	ldr	r2, [r3, #0]
    a526:	6821      	ldr	r1, [r4, #0]
    a528:	1d10      	adds	r0, r2, #4
    a52a:	6018      	str	r0, [r3, #0]
    a52c:	6815      	ldr	r5, [r2, #0]
    a52e:	0608      	lsls	r0, r1, #24
    a530:	d522      	bpl.n	a578 <_printf_i+0x134>
    a532:	07cb      	lsls	r3, r1, #31
    a534:	d502      	bpl.n	a53c <_printf_i+0xf8>
    a536:	2320      	movs	r3, #32
    a538:	4319      	orrs	r1, r3
    a53a:	6021      	str	r1, [r4, #0]
    a53c:	2710      	movs	r7, #16
    a53e:	2d00      	cmp	r5, #0
    a540:	d103      	bne.n	a54a <_printf_i+0x106>
    a542:	2320      	movs	r3, #32
    a544:	6822      	ldr	r2, [r4, #0]
    a546:	439a      	bics	r2, r3
    a548:	6022      	str	r2, [r4, #0]
    a54a:	0023      	movs	r3, r4
    a54c:	2200      	movs	r2, #0
    a54e:	3343      	adds	r3, #67	; 0x43
    a550:	701a      	strb	r2, [r3, #0]
    a552:	6863      	ldr	r3, [r4, #4]
    a554:	60a3      	str	r3, [r4, #8]
    a556:	2b00      	cmp	r3, #0
    a558:	db5c      	blt.n	a614 <_printf_i+0x1d0>
    a55a:	2204      	movs	r2, #4
    a55c:	6821      	ldr	r1, [r4, #0]
    a55e:	4391      	bics	r1, r2
    a560:	6021      	str	r1, [r4, #0]
    a562:	2d00      	cmp	r5, #0
    a564:	d158      	bne.n	a618 <_printf_i+0x1d4>
    a566:	9e04      	ldr	r6, [sp, #16]
    a568:	2b00      	cmp	r3, #0
    a56a:	d064      	beq.n	a636 <_printf_i+0x1f2>
    a56c:	0026      	movs	r6, r4
    a56e:	9b03      	ldr	r3, [sp, #12]
    a570:	3642      	adds	r6, #66	; 0x42
    a572:	781b      	ldrb	r3, [r3, #0]
    a574:	7033      	strb	r3, [r6, #0]
    a576:	e05e      	b.n	a636 <_printf_i+0x1f2>
    a578:	0648      	lsls	r0, r1, #25
    a57a:	d5da      	bpl.n	a532 <_printf_i+0xee>
    a57c:	b2ad      	uxth	r5, r5
    a57e:	e7d8      	b.n	a532 <_printf_i+0xee>
    a580:	6809      	ldr	r1, [r1, #0]
    a582:	681a      	ldr	r2, [r3, #0]
    a584:	0608      	lsls	r0, r1, #24
    a586:	d505      	bpl.n	a594 <_printf_i+0x150>
    a588:	1d11      	adds	r1, r2, #4
    a58a:	6019      	str	r1, [r3, #0]
    a58c:	6813      	ldr	r3, [r2, #0]
    a58e:	6962      	ldr	r2, [r4, #20]
    a590:	601a      	str	r2, [r3, #0]
    a592:	e006      	b.n	a5a2 <_printf_i+0x15e>
    a594:	0649      	lsls	r1, r1, #25
    a596:	d5f7      	bpl.n	a588 <_printf_i+0x144>
    a598:	1d11      	adds	r1, r2, #4
    a59a:	6019      	str	r1, [r3, #0]
    a59c:	6813      	ldr	r3, [r2, #0]
    a59e:	8aa2      	ldrh	r2, [r4, #20]
    a5a0:	801a      	strh	r2, [r3, #0]
    a5a2:	2300      	movs	r3, #0
    a5a4:	9e04      	ldr	r6, [sp, #16]
    a5a6:	6123      	str	r3, [r4, #16]
    a5a8:	e054      	b.n	a654 <_printf_i+0x210>
    a5aa:	681a      	ldr	r2, [r3, #0]
    a5ac:	1d11      	adds	r1, r2, #4
    a5ae:	6019      	str	r1, [r3, #0]
    a5b0:	6816      	ldr	r6, [r2, #0]
    a5b2:	2100      	movs	r1, #0
    a5b4:	6862      	ldr	r2, [r4, #4]
    a5b6:	0030      	movs	r0, r6
    a5b8:	f000 f93e 	bl	a838 <memchr>
    a5bc:	2800      	cmp	r0, #0
    a5be:	d001      	beq.n	a5c4 <_printf_i+0x180>
    a5c0:	1b80      	subs	r0, r0, r6
    a5c2:	6060      	str	r0, [r4, #4]
    a5c4:	6863      	ldr	r3, [r4, #4]
    a5c6:	6123      	str	r3, [r4, #16]
    a5c8:	2300      	movs	r3, #0
    a5ca:	9a04      	ldr	r2, [sp, #16]
    a5cc:	7013      	strb	r3, [r2, #0]
    a5ce:	e041      	b.n	a654 <_printf_i+0x210>
    a5d0:	6923      	ldr	r3, [r4, #16]
    a5d2:	0032      	movs	r2, r6
    a5d4:	9906      	ldr	r1, [sp, #24]
    a5d6:	9805      	ldr	r0, [sp, #20]
    a5d8:	9d07      	ldr	r5, [sp, #28]
    a5da:	47a8      	blx	r5
    a5dc:	1c43      	adds	r3, r0, #1
    a5de:	d043      	beq.n	a668 <_printf_i+0x224>
    a5e0:	6823      	ldr	r3, [r4, #0]
    a5e2:	2500      	movs	r5, #0
    a5e4:	079b      	lsls	r3, r3, #30
    a5e6:	d40f      	bmi.n	a608 <_printf_i+0x1c4>
    a5e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a5ea:	68e0      	ldr	r0, [r4, #12]
    a5ec:	4298      	cmp	r0, r3
    a5ee:	da3d      	bge.n	a66c <_printf_i+0x228>
    a5f0:	0018      	movs	r0, r3
    a5f2:	e03b      	b.n	a66c <_printf_i+0x228>
    a5f4:	0022      	movs	r2, r4
    a5f6:	2301      	movs	r3, #1
    a5f8:	3219      	adds	r2, #25
    a5fa:	9906      	ldr	r1, [sp, #24]
    a5fc:	9805      	ldr	r0, [sp, #20]
    a5fe:	9e07      	ldr	r6, [sp, #28]
    a600:	47b0      	blx	r6
    a602:	1c43      	adds	r3, r0, #1
    a604:	d030      	beq.n	a668 <_printf_i+0x224>
    a606:	3501      	adds	r5, #1
    a608:	68e3      	ldr	r3, [r4, #12]
    a60a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a60c:	1a9b      	subs	r3, r3, r2
    a60e:	429d      	cmp	r5, r3
    a610:	dbf0      	blt.n	a5f4 <_printf_i+0x1b0>
    a612:	e7e9      	b.n	a5e8 <_printf_i+0x1a4>
    a614:	2d00      	cmp	r5, #0
    a616:	d0a9      	beq.n	a56c <_printf_i+0x128>
    a618:	9e04      	ldr	r6, [sp, #16]
    a61a:	0028      	movs	r0, r5
    a61c:	0039      	movs	r1, r7
    a61e:	f7fc ff29 	bl	7474 <__aeabi_uidivmod>
    a622:	9b03      	ldr	r3, [sp, #12]
    a624:	3e01      	subs	r6, #1
    a626:	5c5b      	ldrb	r3, [r3, r1]
    a628:	0028      	movs	r0, r5
    a62a:	7033      	strb	r3, [r6, #0]
    a62c:	0039      	movs	r1, r7
    a62e:	f7fc fe9b 	bl	7368 <__udivsi3>
    a632:	1e05      	subs	r5, r0, #0
    a634:	d1f1      	bne.n	a61a <_printf_i+0x1d6>
    a636:	2f08      	cmp	r7, #8
    a638:	d109      	bne.n	a64e <_printf_i+0x20a>
    a63a:	6823      	ldr	r3, [r4, #0]
    a63c:	07db      	lsls	r3, r3, #31
    a63e:	d506      	bpl.n	a64e <_printf_i+0x20a>
    a640:	6863      	ldr	r3, [r4, #4]
    a642:	6922      	ldr	r2, [r4, #16]
    a644:	4293      	cmp	r3, r2
    a646:	dc02      	bgt.n	a64e <_printf_i+0x20a>
    a648:	2330      	movs	r3, #48	; 0x30
    a64a:	3e01      	subs	r6, #1
    a64c:	7033      	strb	r3, [r6, #0]
    a64e:	9b04      	ldr	r3, [sp, #16]
    a650:	1b9b      	subs	r3, r3, r6
    a652:	6123      	str	r3, [r4, #16]
    a654:	9b07      	ldr	r3, [sp, #28]
    a656:	aa09      	add	r2, sp, #36	; 0x24
    a658:	9300      	str	r3, [sp, #0]
    a65a:	0021      	movs	r1, r4
    a65c:	9b06      	ldr	r3, [sp, #24]
    a65e:	9805      	ldr	r0, [sp, #20]
    a660:	f7ff fe82 	bl	a368 <_printf_common>
    a664:	1c43      	adds	r3, r0, #1
    a666:	d1b3      	bne.n	a5d0 <_printf_i+0x18c>
    a668:	2001      	movs	r0, #1
    a66a:	4240      	negs	r0, r0
    a66c:	b00b      	add	sp, #44	; 0x2c
    a66e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a670:	0000bc1e 	.word	0x0000bc1e
    a674:	0000bc0d 	.word	0x0000bc0d

0000a678 <_putc_r>:
    a678:	b570      	push	{r4, r5, r6, lr}
    a67a:	0006      	movs	r6, r0
    a67c:	000d      	movs	r5, r1
    a67e:	0014      	movs	r4, r2
    a680:	2800      	cmp	r0, #0
    a682:	d004      	beq.n	a68e <_putc_r+0x16>
    a684:	6983      	ldr	r3, [r0, #24]
    a686:	2b00      	cmp	r3, #0
    a688:	d101      	bne.n	a68e <_putc_r+0x16>
    a68a:	f7ff fac5 	bl	9c18 <__sinit>
    a68e:	4b12      	ldr	r3, [pc, #72]	; (a6d8 <_putc_r+0x60>)
    a690:	429c      	cmp	r4, r3
    a692:	d111      	bne.n	a6b8 <_putc_r+0x40>
    a694:	6874      	ldr	r4, [r6, #4]
    a696:	68a3      	ldr	r3, [r4, #8]
    a698:	3b01      	subs	r3, #1
    a69a:	60a3      	str	r3, [r4, #8]
    a69c:	2b00      	cmp	r3, #0
    a69e:	da05      	bge.n	a6ac <_putc_r+0x34>
    a6a0:	69a2      	ldr	r2, [r4, #24]
    a6a2:	4293      	cmp	r3, r2
    a6a4:	db12      	blt.n	a6cc <_putc_r+0x54>
    a6a6:	b2eb      	uxtb	r3, r5
    a6a8:	2b0a      	cmp	r3, #10
    a6aa:	d00f      	beq.n	a6cc <_putc_r+0x54>
    a6ac:	6823      	ldr	r3, [r4, #0]
    a6ae:	b2e8      	uxtb	r0, r5
    a6b0:	1c5a      	adds	r2, r3, #1
    a6b2:	6022      	str	r2, [r4, #0]
    a6b4:	701d      	strb	r5, [r3, #0]
    a6b6:	bd70      	pop	{r4, r5, r6, pc}
    a6b8:	4b08      	ldr	r3, [pc, #32]	; (a6dc <_putc_r+0x64>)
    a6ba:	429c      	cmp	r4, r3
    a6bc:	d101      	bne.n	a6c2 <_putc_r+0x4a>
    a6be:	68b4      	ldr	r4, [r6, #8]
    a6c0:	e7e9      	b.n	a696 <_putc_r+0x1e>
    a6c2:	4b07      	ldr	r3, [pc, #28]	; (a6e0 <_putc_r+0x68>)
    a6c4:	429c      	cmp	r4, r3
    a6c6:	d1e6      	bne.n	a696 <_putc_r+0x1e>
    a6c8:	68f4      	ldr	r4, [r6, #12]
    a6ca:	e7e4      	b.n	a696 <_putc_r+0x1e>
    a6cc:	0022      	movs	r2, r4
    a6ce:	0029      	movs	r1, r5
    a6d0:	0030      	movs	r0, r6
    a6d2:	f7ff f8dd 	bl	9890 <__swbuf_r>
    a6d6:	e7ee      	b.n	a6b6 <_putc_r+0x3e>
    a6d8:	0000bbbc 	.word	0x0000bbbc
    a6dc:	0000bbdc 	.word	0x0000bbdc
    a6e0:	0000bb9c 	.word	0x0000bb9c

0000a6e4 <__sread>:
    a6e4:	b570      	push	{r4, r5, r6, lr}
    a6e6:	000c      	movs	r4, r1
    a6e8:	250e      	movs	r5, #14
    a6ea:	5f49      	ldrsh	r1, [r1, r5]
    a6ec:	f000 f8d6 	bl	a89c <_read_r>
    a6f0:	2800      	cmp	r0, #0
    a6f2:	db03      	blt.n	a6fc <__sread+0x18>
    a6f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    a6f6:	181b      	adds	r3, r3, r0
    a6f8:	6563      	str	r3, [r4, #84]	; 0x54
    a6fa:	bd70      	pop	{r4, r5, r6, pc}
    a6fc:	89a3      	ldrh	r3, [r4, #12]
    a6fe:	4a02      	ldr	r2, [pc, #8]	; (a708 <__sread+0x24>)
    a700:	4013      	ands	r3, r2
    a702:	81a3      	strh	r3, [r4, #12]
    a704:	e7f9      	b.n	a6fa <__sread+0x16>
    a706:	46c0      	nop			; (mov r8, r8)
    a708:	ffffefff 	.word	0xffffefff

0000a70c <__swrite>:
    a70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a70e:	001f      	movs	r7, r3
    a710:	898b      	ldrh	r3, [r1, #12]
    a712:	0005      	movs	r5, r0
    a714:	000c      	movs	r4, r1
    a716:	0016      	movs	r6, r2
    a718:	05db      	lsls	r3, r3, #23
    a71a:	d505      	bpl.n	a728 <__swrite+0x1c>
    a71c:	230e      	movs	r3, #14
    a71e:	5ec9      	ldrsh	r1, [r1, r3]
    a720:	2200      	movs	r2, #0
    a722:	2302      	movs	r3, #2
    a724:	f000 f874 	bl	a810 <_lseek_r>
    a728:	89a3      	ldrh	r3, [r4, #12]
    a72a:	4a05      	ldr	r2, [pc, #20]	; (a740 <__swrite+0x34>)
    a72c:	0028      	movs	r0, r5
    a72e:	4013      	ands	r3, r2
    a730:	81a3      	strh	r3, [r4, #12]
    a732:	0032      	movs	r2, r6
    a734:	230e      	movs	r3, #14
    a736:	5ee1      	ldrsh	r1, [r4, r3]
    a738:	003b      	movs	r3, r7
    a73a:	f000 f81f 	bl	a77c <_write_r>
    a73e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a740:	ffffefff 	.word	0xffffefff

0000a744 <__sseek>:
    a744:	b570      	push	{r4, r5, r6, lr}
    a746:	000c      	movs	r4, r1
    a748:	250e      	movs	r5, #14
    a74a:	5f49      	ldrsh	r1, [r1, r5]
    a74c:	f000 f860 	bl	a810 <_lseek_r>
    a750:	89a3      	ldrh	r3, [r4, #12]
    a752:	1c42      	adds	r2, r0, #1
    a754:	d103      	bne.n	a75e <__sseek+0x1a>
    a756:	4a05      	ldr	r2, [pc, #20]	; (a76c <__sseek+0x28>)
    a758:	4013      	ands	r3, r2
    a75a:	81a3      	strh	r3, [r4, #12]
    a75c:	bd70      	pop	{r4, r5, r6, pc}
    a75e:	2280      	movs	r2, #128	; 0x80
    a760:	0152      	lsls	r2, r2, #5
    a762:	4313      	orrs	r3, r2
    a764:	81a3      	strh	r3, [r4, #12]
    a766:	6560      	str	r0, [r4, #84]	; 0x54
    a768:	e7f8      	b.n	a75c <__sseek+0x18>
    a76a:	46c0      	nop			; (mov r8, r8)
    a76c:	ffffefff 	.word	0xffffefff

0000a770 <__sclose>:
    a770:	b510      	push	{r4, lr}
    a772:	230e      	movs	r3, #14
    a774:	5ec9      	ldrsh	r1, [r1, r3]
    a776:	f000 f815 	bl	a7a4 <_close_r>
    a77a:	bd10      	pop	{r4, pc}

0000a77c <_write_r>:
    a77c:	b570      	push	{r4, r5, r6, lr}
    a77e:	0005      	movs	r5, r0
    a780:	0008      	movs	r0, r1
    a782:	0011      	movs	r1, r2
    a784:	2200      	movs	r2, #0
    a786:	4c06      	ldr	r4, [pc, #24]	; (a7a0 <_write_r+0x24>)
    a788:	6022      	str	r2, [r4, #0]
    a78a:	001a      	movs	r2, r3
    a78c:	f7fb fb40 	bl	5e10 <_write>
    a790:	1c43      	adds	r3, r0, #1
    a792:	d103      	bne.n	a79c <_write_r+0x20>
    a794:	6823      	ldr	r3, [r4, #0]
    a796:	2b00      	cmp	r3, #0
    a798:	d000      	beq.n	a79c <_write_r+0x20>
    a79a:	602b      	str	r3, [r5, #0]
    a79c:	bd70      	pop	{r4, r5, r6, pc}
    a79e:	46c0      	nop			; (mov r8, r8)
    a7a0:	200004cc 	.word	0x200004cc

0000a7a4 <_close_r>:
    a7a4:	2300      	movs	r3, #0
    a7a6:	b570      	push	{r4, r5, r6, lr}
    a7a8:	4c06      	ldr	r4, [pc, #24]	; (a7c4 <_close_r+0x20>)
    a7aa:	0005      	movs	r5, r0
    a7ac:	0008      	movs	r0, r1
    a7ae:	6023      	str	r3, [r4, #0]
    a7b0:	f7fb fb68 	bl	5e84 <_close>
    a7b4:	1c43      	adds	r3, r0, #1
    a7b6:	d103      	bne.n	a7c0 <_close_r+0x1c>
    a7b8:	6823      	ldr	r3, [r4, #0]
    a7ba:	2b00      	cmp	r3, #0
    a7bc:	d000      	beq.n	a7c0 <_close_r+0x1c>
    a7be:	602b      	str	r3, [r5, #0]
    a7c0:	bd70      	pop	{r4, r5, r6, pc}
    a7c2:	46c0      	nop			; (mov r8, r8)
    a7c4:	200004cc 	.word	0x200004cc

0000a7c8 <_fstat_r>:
    a7c8:	2300      	movs	r3, #0
    a7ca:	b570      	push	{r4, r5, r6, lr}
    a7cc:	4c06      	ldr	r4, [pc, #24]	; (a7e8 <_fstat_r+0x20>)
    a7ce:	0005      	movs	r5, r0
    a7d0:	0008      	movs	r0, r1
    a7d2:	0011      	movs	r1, r2
    a7d4:	6023      	str	r3, [r4, #0]
    a7d6:	f7fb fb58 	bl	5e8a <_fstat>
    a7da:	1c43      	adds	r3, r0, #1
    a7dc:	d103      	bne.n	a7e6 <_fstat_r+0x1e>
    a7de:	6823      	ldr	r3, [r4, #0]
    a7e0:	2b00      	cmp	r3, #0
    a7e2:	d000      	beq.n	a7e6 <_fstat_r+0x1e>
    a7e4:	602b      	str	r3, [r5, #0]
    a7e6:	bd70      	pop	{r4, r5, r6, pc}
    a7e8:	200004cc 	.word	0x200004cc

0000a7ec <_isatty_r>:
    a7ec:	2300      	movs	r3, #0
    a7ee:	b570      	push	{r4, r5, r6, lr}
    a7f0:	4c06      	ldr	r4, [pc, #24]	; (a80c <_isatty_r+0x20>)
    a7f2:	0005      	movs	r5, r0
    a7f4:	0008      	movs	r0, r1
    a7f6:	6023      	str	r3, [r4, #0]
    a7f8:	f7fb fb4c 	bl	5e94 <_isatty>
    a7fc:	1c43      	adds	r3, r0, #1
    a7fe:	d103      	bne.n	a808 <_isatty_r+0x1c>
    a800:	6823      	ldr	r3, [r4, #0]
    a802:	2b00      	cmp	r3, #0
    a804:	d000      	beq.n	a808 <_isatty_r+0x1c>
    a806:	602b      	str	r3, [r5, #0]
    a808:	bd70      	pop	{r4, r5, r6, pc}
    a80a:	46c0      	nop			; (mov r8, r8)
    a80c:	200004cc 	.word	0x200004cc

0000a810 <_lseek_r>:
    a810:	b570      	push	{r4, r5, r6, lr}
    a812:	0005      	movs	r5, r0
    a814:	0008      	movs	r0, r1
    a816:	0011      	movs	r1, r2
    a818:	2200      	movs	r2, #0
    a81a:	4c06      	ldr	r4, [pc, #24]	; (a834 <_lseek_r+0x24>)
    a81c:	6022      	str	r2, [r4, #0]
    a81e:	001a      	movs	r2, r3
    a820:	f7fb fb3a 	bl	5e98 <_lseek>
    a824:	1c43      	adds	r3, r0, #1
    a826:	d103      	bne.n	a830 <_lseek_r+0x20>
    a828:	6823      	ldr	r3, [r4, #0]
    a82a:	2b00      	cmp	r3, #0
    a82c:	d000      	beq.n	a830 <_lseek_r+0x20>
    a82e:	602b      	str	r3, [r5, #0]
    a830:	bd70      	pop	{r4, r5, r6, pc}
    a832:	46c0      	nop			; (mov r8, r8)
    a834:	200004cc 	.word	0x200004cc

0000a838 <memchr>:
    a838:	b2c9      	uxtb	r1, r1
    a83a:	1882      	adds	r2, r0, r2
    a83c:	4290      	cmp	r0, r2
    a83e:	d101      	bne.n	a844 <memchr+0xc>
    a840:	2000      	movs	r0, #0
    a842:	4770      	bx	lr
    a844:	7803      	ldrb	r3, [r0, #0]
    a846:	428b      	cmp	r3, r1
    a848:	d0fb      	beq.n	a842 <memchr+0xa>
    a84a:	3001      	adds	r0, #1
    a84c:	e7f6      	b.n	a83c <memchr+0x4>

0000a84e <_realloc_r>:
    a84e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a850:	0007      	movs	r7, r0
    a852:	000d      	movs	r5, r1
    a854:	0016      	movs	r6, r2
    a856:	2900      	cmp	r1, #0
    a858:	d105      	bne.n	a866 <_realloc_r+0x18>
    a85a:	0011      	movs	r1, r2
    a85c:	f7fe fe0e 	bl	947c <_malloc_r>
    a860:	0004      	movs	r4, r0
    a862:	0020      	movs	r0, r4
    a864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a866:	2a00      	cmp	r2, #0
    a868:	d103      	bne.n	a872 <_realloc_r+0x24>
    a86a:	f7fe fdbd 	bl	93e8 <_free_r>
    a86e:	0034      	movs	r4, r6
    a870:	e7f7      	b.n	a862 <_realloc_r+0x14>
    a872:	f000 f827 	bl	a8c4 <_malloc_usable_size_r>
    a876:	002c      	movs	r4, r5
    a878:	4286      	cmp	r6, r0
    a87a:	d9f2      	bls.n	a862 <_realloc_r+0x14>
    a87c:	0031      	movs	r1, r6
    a87e:	0038      	movs	r0, r7
    a880:	f7fe fdfc 	bl	947c <_malloc_r>
    a884:	1e04      	subs	r4, r0, #0
    a886:	d0ec      	beq.n	a862 <_realloc_r+0x14>
    a888:	0029      	movs	r1, r5
    a88a:	0032      	movs	r2, r6
    a88c:	f7fe fd88 	bl	93a0 <memcpy>
    a890:	0029      	movs	r1, r5
    a892:	0038      	movs	r0, r7
    a894:	f7fe fda8 	bl	93e8 <_free_r>
    a898:	e7e3      	b.n	a862 <_realloc_r+0x14>
	...

0000a89c <_read_r>:
    a89c:	b570      	push	{r4, r5, r6, lr}
    a89e:	0005      	movs	r5, r0
    a8a0:	0008      	movs	r0, r1
    a8a2:	0011      	movs	r1, r2
    a8a4:	2200      	movs	r2, #0
    a8a6:	4c06      	ldr	r4, [pc, #24]	; (a8c0 <_read_r+0x24>)
    a8a8:	6022      	str	r2, [r4, #0]
    a8aa:	001a      	movs	r2, r3
    a8ac:	f7fb fa8e 	bl	5dcc <_read>
    a8b0:	1c43      	adds	r3, r0, #1
    a8b2:	d103      	bne.n	a8bc <_read_r+0x20>
    a8b4:	6823      	ldr	r3, [r4, #0]
    a8b6:	2b00      	cmp	r3, #0
    a8b8:	d000      	beq.n	a8bc <_read_r+0x20>
    a8ba:	602b      	str	r3, [r5, #0]
    a8bc:	bd70      	pop	{r4, r5, r6, pc}
    a8be:	46c0      	nop			; (mov r8, r8)
    a8c0:	200004cc 	.word	0x200004cc

0000a8c4 <_malloc_usable_size_r>:
    a8c4:	1f0b      	subs	r3, r1, #4
    a8c6:	681b      	ldr	r3, [r3, #0]
    a8c8:	1f18      	subs	r0, r3, #4
    a8ca:	2b00      	cmp	r3, #0
    a8cc:	da01      	bge.n	a8d2 <_malloc_usable_size_r+0xe>
    a8ce:	580b      	ldr	r3, [r1, r0]
    a8d0:	18c0      	adds	r0, r0, r3
    a8d2:	4770      	bx	lr

0000a8d4 <CMD_MEASURE_LPM_CS>:
    a8d4:	5864 0000                                   dX..

0000a8d8 <CMD_READ_ID_REG>:
    a8d8:	c8ef 0000                                   ....

0000a8dc <__FUNCTION__.14198>:
    a8dc:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
    a8ec:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
    a8fc:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
    a90c:	746c 6320 646d 0000 18d0 0000 18a0 0000     lt cmd..........
    a91c:	1898 0000 18b0 0000 18a8 0000 18c8 0000     ................
    a92c:	18b8 0000 18c0 0000                         ........

0000a934 <__FUNCTION__.13064>:
    a934:	6968 5f66 6573 646e 0000 0000               hif_send....

0000a940 <__FUNCTION__.13074>:
    a940:	6968 5f66 7369 0072                         hif_isr.

0000a948 <__FUNCTION__.13080>:
    a948:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

0000a958 <__FUNCTION__.13092>:
    a958:	6968 5f66 6572 6563 7669 0065               hif_receive.

0000a964 <__FUNCTION__.13108>:
    a964:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
    a974:	6828 6669 2029 4957 4946 485f 534f 5f54     (hif) WIFI_HOST_
    a984:	4352 5f56 5443 4c52 315f 6220 7375 6620     RCV_CTRL_1 bus f
    a994:	6961 006c 6828 6669 2029 6461 7264 7365     ail.(hif) addres
    a9a4:	2073 7562 2073 6166 6c69 0000 6828 6669     s bus fail..(hif
    a9b4:	2029 6f43 7272 7075 6574 2064 6170 6b63     ) Corrupted pack
    a9c4:	7465 5320 7a69 2065 203d 7525 3c20 204c     et Size = %u <L 
    a9d4:	203d 7525 202c 2047 203d 7525 202c 504f     = %u, G = %u, OP
    a9e4:	3d20 2520 3230 3e58 000a 0000 4957 4946      = %02X>....WIFI
    a9f4:	6320 6c61 626c 6361 206b 7369 6e20 746f      callback is not
    aa04:	7220 6765 7369 6574 6572 0064 6353 6b6f      registered.Scok
    aa14:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
    aa24:	746f 7220 6765 7369 6574 6572 0064 0000     ot registered...
    aa34:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
    aa44:	6f6e 2074 6572 6967 7473 7265 6465 0000     not registered..
    aa54:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
    aa64:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
    aa74:	0064 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
    aa84:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
    aa94:	7265 6465 0000 0000 6828 6669 2029 6e69     ered....(hif) in
    aaa4:	6176 696c 2064 7267 756f 2070 4449 0000     valid group ID..
    aab4:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
    aac4:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
    aad4:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
    aae4:	2029 7257 6e6f 2067 6953 657a 0000 0000     ) Wrong Size....
    aaf4:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
    ab04:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
    ab14:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
    ab24:	746e 7265 7572 7470 7220 6765 0000 0000     nterrupt reg....
    ab34:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
    ab44:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
    ab54:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
    ab64:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
    ab74:	6176 696c 2064 7261 7567 656d 746e 0000     valid argument..
    ab84:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
    ab94:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
    aba4:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
    abb4:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
    abc4:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
    abd4:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
    abe4:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
    abf4:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
    ac04:	6e61 2064 656c 676e 6874 0000 5247 2070     and length..GRp 
    ac14:	203f 6425 000a 0000 4128 5050 2829 4e49     ? %d....(APP)(IN
    ac24:	4f46 0029 6c53 776f 6e69 2067 6f64 6e77     FO).Slowing down
    ac34:	2e2e 002e 4828 4649 4629 6961 206c 6f74     ....(HIF)Fail to
    ac44:	7720 6b61 7075 7420 6568 6320 6968 0070      wakup the chip.

0000ac54 <__FUNCTION__.13043>:
    ac54:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

0000ac60 <__FUNCTION__.13072>:
    ac60:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

0000ac70 <__FUNCTION__.13100>:
    ac70:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
    ac80:	735f 0063 6f43 666e 696c 7463 6465 4920     _sc.Conflicted I
    ac90:	2050 2022 7525 252e 2e75 7525 252e 2075     P " %u.%u.%u.%u 
    aca0:	2022 000a 4552 2051 6f4e 2074 6564 6966     " ..REQ Not defi
    acb0:	656e 2064 6425 000a 654b 2079 7369 6e20     ned %d..Key is n
    acc0:	746f 7620 6c61 6469 0000 0000 6e49 6176     ot valid....Inva
    acd0:	696c 2064 654b 0079 5353 4449 4c20 4e45     lid Key.SSID LEN
    ace0:	4920 564e 4c41 4449 0000 0000 4843 4920      INVALID....CH I
    acf0:	564e 4c41 4449 0000 6e49 6176 696c 2064     NVALID..Invalid 
    ad00:	6557 2070 656b 2079 6e69 6564 2078 6425     Wep key index %d
    ad10:	000a 0000 6e49 6176 696c 2064 6557 2070     ....Invalid Wep 
    ad20:	656b 2079 656c 676e 6874 2520 0a64 0000     key length %d...
    ad30:	6e49 6f63 7272 6365 2074 5350 204b 656b     Incorrect PSK ke
    ad40:	2079 656c 676e 6874 0000 0000 6e75 6564     y length....unde
    ad50:	6966 656e 2064 6573 2063 7974 6570 0000     fined sec type..
    ad60:	6946 6d72 6177 6572 7620 7265 2020 3a20     Firmware ver   :
    ad70:	2520 2e75 7525 252e 2075 7653 726e 7665      %u.%u.%u Svnrev
    ad80:	2520 0a75 0000 0000 6946 6d72 6177 6572      %u.....Firmware
    ad90:	4220 6975 646c 2520 2073 6954 656d 2520      Build %s Time %
    ada0:	0a73 0000 6946 6d72 6177 6572 4d20 6e69     s...Firmware Min
    adb0:	6420 6972 6576 2072 6576 2072 203a 7525      driver ver : %u
    adc0:	252e 2e75 7525 000a 7244 7669 7265 7620     .%u.%u..Driver v
    add0:	7265 203a 7525 252e 2e75 7525 000a 0000     er: %u.%u.%u....
    ade0:	3032 333a 3a35 3531 0000 0000 614a 206e     20:35:15....Jan 
    adf0:	3731 3220 3130 0038 7244 7669 7265 6220     17 2018.Driver b
    ae00:	6975 746c 6120 2074 7325 2509 0a73 0000     uilt at %s.%s...
    ae10:	694d 6d73 7461 6863 4620 7269 616d 7277     Mismatch Firmawr
    ae20:	2065 6556 7372 6f69 006e 0000               e Version...

0000ae2c <__FUNCTION__.12906>:
    ae2c:	6863 7069 775f 6b61 0065 0000               chip_wake...

0000ae38 <__FUNCTION__.12955>:
    ae38:	6863 7069 645f 6965 696e 0074 6166 6c69     chip_deinit.fail
    ae48:	6465 7420 206f 6564 692d 696e 6974 6c61     ed to de-initial
    ae58:	7a69 0065 7542 2073 7265 6f72 2072 3528     ize.Bus error (5
    ae68:	2e29 6425 2520 786c 000a 0000 6146 6c69     ).%d %lx....Fail
    ae78:	6465 7420 206f 6177 756b 2070 6874 2065     ed to wakup the 
    ae88:	6863 7069 0000 0000 7244 7669 7265 6556     chip....DriverVe
    ae98:	4972 666e 3a6f 3020 2578 3830 786c 000a     rInfo: 0x%08lx..

0000aea8 <__FUNCTION__.12953>:
    aea8:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

0000aeb4 <__FUNCTION__.12960>:
    aeb4:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...
    aec4:	6e5b 696d 7320 6f74 5d70 203a 6863 7069     [nmi stop]: chip
    aed4:	645f 6965 696e 2074 6166 6c69 0000 0000     _deinit fail....
    aee4:	6e5b 696d 7320 6f74 5d70 203a 5053 2049     [nmi stop]: SPI 
    aef4:	6c66 7361 2068 6964 6173 6c62 2065 6166     flash disable fa
    af04:	6c69 0000 6e5b 696d 7320 6f74 5d70 203a     il..[nmi stop]: 
    af14:	6166 6c69 6920 696e 2074 7562 0073 0000     fail init bus...
    af24:	6166 6c69 6465 7420 206f 6e65 6261 656c     failed to enable
    af34:	6920 746e 7265 7572 7470 2e73 002e 0000      interrupts.....
    af44:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
    af54:	206c 6e69 7469 6220 7375 0000 6843 7069     l init bus..Chip
    af64:	4920 2044 6c25 0a78 0000 0000 28b0 0000      ID %lx......(..
    af74:	28b0 0000 28e0 0000 2862 0000 2886 0000     .(...(..b(...(..
    af84:	2894 0000 28c6 0000 28c6 0000 290e 0000     .(...(...(...)..
    af94:	2846 0000 2948 0000 2948 0000 2948 0000     F(..H)..H)..H)..
    afa4:	2948 0000 28a2 0000 c9c3 cac4               H)...(......

0000afb0 <__FUNCTION__.12259>:
    afb0:	7073 5f69 6d63 0064                         spi_cmd.

0000afb8 <__FUNCTION__.12266>:
    afb8:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

0000afc8 <__FUNCTION__.12275>:
    afc8:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

0000afd4 <__FUNCTION__.12291>:
    afd4:	7073 5f69 6164 6174 725f 6165 0064 0000     spi_data_read...

0000afe4 <__FUNCTION__.12306>:
    afe4:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

0000aff4 <__FUNCTION__.12318>:
    aff4:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

0000b004 <__FUNCTION__.12329>:
    b004:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

0000b014 <__FUNCTION__.12341>:
    b014:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

0000b024 <__FUNCTION__.12354>:
    b024:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

0000b030 <__FUNCTION__.12375>:
    b030:	6d6e 735f 6970 695f 696e 0074               nm_spi_init.

0000b03c <crc7_syndrome_table>:
    b03c:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
    b04c:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
    b05c:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
    b06c:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
    b07c:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
    b08c:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
    b09c:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
    b0ac:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
    b0bc:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
    b0cc:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
    b0dc:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
    b0ec:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
    b0fc:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
    b10c:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
    b11c:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
    b12c:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
    b13c:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    b14c:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
    b15c:	7270 746f 636f 6c6f 7720 7469 2068 5243     protocol with CR
    b16c:	2043 6e6f 202c 6572 7974 6972 676e 7720     C on, retyring w
    b17c:	7469 2068 5243 2043 666f 2e66 2e2e 0000     ith CRC off.....
    b18c:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    b19c:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
    b1ac:	7270 746f 636f 6c6f 2e2e 002e 6e5b 696d     protocol....[nmi
    b1bc:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
    b1cc:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
    b1dc:	6f74 6f63 206c 6572 2e67 2e2e 0000 0000     tocol reg.......
    b1ec:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
    b1fc:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
    b20c:	2e2e 002e 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    b21c:	6961 656c 2064 6d63 2c64 7220 6165 2064     ailed cmd, read 
    b22c:	6c62 636f 206b 2528 3830 2978 2e2e 0a2e     block (%08x)....
    b23c:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    b24c:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
    b25c:	6573 202c 6572 6461 6220 6f6c 6b63 2820     se, read block (
    b26c:	3025 7838 2e29 2e2e 000a 0000 6e5b 696d     %08x).......[nmi
    b27c:	7320 6970 3a5d 4620 6961 656c 2064 6c62      spi]: Failed bl
    b28c:	636f 206b 6164 6174 7220 6165 2e64 2e2e     ock data read...
    b29c:	0000 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
    b2ac:	7274 2079 6425 2520 786c 2520 0a64 0000     try %d %lx %d...
    b2bc:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    b2cc:	2064 6d63 2c64 7720 6972 6574 6220 6f6c     d cmd, write blo
    b2dc:	6b63 2820 3025 7838 2e29 2e2e 000a 0000     ck (%08x).......
    b2ec:	6e5b 696d 7320 6970 5d20 203a 6146 6c69     [nmi spi ]: Fail
    b2fc:	6465 6320 646d 7220 7365 6f70 736e 2c65     ed cmd response,
    b30c:	7720 6972 6574 6220 6f6c 6b63 2820 3025      write block (%0
    b31c:	7838 2e29 2e2e 000a 6e5b 696d 7320 6970     8x).....[nmi spi
    b32c:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
    b33c:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
    b34c:	7562 2073 7265 6f72 2e72 2e2e 0000 0000     bus error.......
    b35c:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    b36c:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
    b37c:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
    b38c:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    b39c:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
    b3ac:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
    b3bc:	7265 6f72 2e72 2e2e 0000 0000 6e5b 696d     error.......[nmi
    b3cc:	7320 6970 3a5d 4620 6961 656c 2064 7562      spi]: Failed bu
    b3dc:	2073 7265 6f72 2e72 2e2e 0000 6e5b 696d     s error.....[nmi
    b3ec:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
    b3fc:	6174 7220 7365 6f70 736e 2065 6572 6461     ta response read
    b40c:	202c 7825 2520 2078 7825 000a 6e5b 696d     , %x %x %x..[nmi
    b41c:	7320 6970 3a5d 4620 6961 656c 2064 6c62      spi]: Failed bl
    b42c:	636f 206b 6164 6174 7720 6972 6574 2e2e     ock data write..
    b43c:	002e 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    b44c:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
    b45c:	6220 7375 6520 7272 726f 2e2e 002e 0000      bus error......
    b46c:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    b47c:	2064 6d63 2064 6572 7073 6e6f 6573 7220     d cmd response r
    b48c:	6165 2c64 6220 7375 6520 7272 726f 2e2e     ead, bus error..
    b49c:	002e 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    b4ac:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
    b4bc:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
    b4cc:	6f72 2e72 2e2e 0000 6e5b 696d 7320 6970     ror.....[nmi spi
    b4dc:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
    b4ec:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
    b4fc:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
    b50c:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
    b51c:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
    b52c:	7272 726f 2e2e 002e 6e5b 696d 7320 6970     rror....[nmi spi
    b53c:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
    b54c:	6f6c 6b63 6320 6372 7220 6165 2c64 6220     lock crc read, b
    b55c:	7375 6520 7272 726f 2e2e 002e 6e5b 696d     us error....[nmi
    b56c:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
    b57c:	2c64 7220 6165 2064 6572 2067 2528 3830     d, read reg (%08
    b58c:	2978 2e2e 0a2e 0000 6e5b 696d 7320 6970     x)......[nmi spi
    b59c:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
    b5ac:	7073 6e6f 6573 202c 6572 6461 7220 6765     sponse, read reg
    b5bc:	2820 3025 7838 2e29 2e2e 000a 6e5b 696d      (%08x).....[nmi
    b5cc:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
    b5dc:	6174 7220 6165 2e64 2e2e 0000 6552 6573     ta read.....Rese
    b5ec:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
    b5fc:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
    b60c:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
    b61c:	7220 6765 2820 3025 7838 2e29 2e2e 000a      reg (%08x).....
    b62c:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    b63c:	2064 6d63 2064 6572 7073 6e6f 6573 202c     d cmd response, 
    b64c:	7277 7469 2065 6572 2067 2528 3830 2978     write reg (%08x)
    b65c:	2e2e 0a2e 0000 0000 6552 6573 2074 6e61     ........Reset an
    b66c:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
    b67c:	786c 000a 4528 5252 2952 7543 7272 6e65     lx..(ERRR)Curren
    b68c:	2074 253c 3e64 000a 6f53 6b63 7420 206f     t <%d>..Sock to 
    b69c:	6564 656c 6574 3c20 6425 0a3e 0000 0000     delete <%d>.....
    b6ac:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
    b6bc:	206e 4449 3d20 2520 0d64 000a 0800 4200     n ID = %d......B
    b6cc:	0c00 4200 1000 4200 1400 4200 1800 4200     ...B...B...B...B
    b6dc:	1c00 4200 4efa 0000 4ef6 0000 4ef6 0000     ...B.N...N...N..
    b6ec:	4f58 0000 4f58 0000 4f0e 0000 4f00 0000     XO..XO...O...O..
    b6fc:	4f14 0000 4f46 0000 5118 0000 50f8 0000     .O..FO...Q...P..
    b70c:	50f8 0000 5184 0000 510a 0000 5126 0000     .P...Q...Q..&Q..
    b71c:	50fc 0000 5134 0000 5174 0000               .P..4Q..tQ..

0000b728 <_tcc_apbcmasks>:
    b728:	0100 0000 0200 0000 0400 0000               ............

0000b734 <_tcc_cc_nums>:
    b734:	0204 0002                                   ....

0000b738 <_tcc_gclk_ids>:
    b738:	1a1a 001b                                   ....

0000b73c <_tcc_maxs>:
    b73c:	ffff 00ff ffff 00ff ffff 0000               ............

0000b748 <_tcc_ow_nums>:
    b748:	0408 0002                                   ....

0000b74c <_tcc_intflag>:
    b74c:	0001 0000 0002 0000 0004 0000 0008 0000     ................
    b75c:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
    b76c:	0000 0001 0000 0002 0000 0004 0000 0008     ................

0000b77c <tcc_interrupt_vectors.12442>:
    b77c:	100f 0011 2000 4200 2400 4200 2800 4200     ..... .B.$.B.(.B
    b78c:	6f6e 2074 7270 7365 6e65 0074 2d2d 5720     not present.-- W
    b79c:	4e49 3143 3035 2030 6957 462d 2069 514d     INC1500 Wi-Fi MQ
    b7ac:	5454 6320 6168 2074 7865 6d61 6c70 2065     TT chat example 
    b7bc:	2d2d 0a0d 2d2d 5320 4d41 3244 5f31 5058     --..-- SAMD21_XP
    b7cc:	414c 4e49 4445 505f 4f52 2d20 0d2d 2d0a     LAINED_PRO --..-
    b7dc:	202d 6f43 706d 6c69 6465 203a 614d 2072     - Compiled: Mar 
    b7ec:	3120 3220 3130 2038 3331 333a 3a31 3034      1 2018 13:31:40
    b7fc:	2d20 0d2d 0000 0000 514d 5454 6920 696e      --.....MQTT ini
    b80c:	6974 6c61 7a69 7461 6f69 206e 6166 6c69     tialization fail
    b81c:	6465 202e 7245 6f72 2072 6f63 6564 6920     ed. Error code i
    b82c:	2073 2528 2964 0a0d 0000 0000 514d 5454     s (%d)......MQTT
    b83c:	7220 6765 7369 6574 2072 6163 6c6c 6162      register callba
    b84c:	6b63 6620 6961 656c 2e64 4520 7272 726f     ck failed. Error
    b85c:	6320 646f 2065 7369 2820 6425 0d29 000a      code is (%d)...
    b86c:	6e45 6574 2072 6874 2065 7375 7265 6e20     Enter the user n
    b87c:	6d61 2065 4d28 7861 2520 2064 6863 7261     ame (Max %d char
    b88c:	6361 6574 7372 0d29 000a 0000 7355 7265     acters).....User
    b89c:	3a20 2520 0d73 000a 7325 7325 0000 0000      : %s...%s%s....
    b8ac:	6173 646d 642f 7461 2f61 0000 616d 6e69     samd/data/..main
    b8bc:	203a 326d 5f6d 6977 6966 695f 696e 2074     : m2m_wifi_init 
    b8cc:	6163 6c6c 6520 7272 726f 2821 6425 0d29     call error!(%d).
    b8dc:	000a 0000 0a0d 7473 7261 6974 676e 2e2e     ......starting..
    b8ec:	0d2e 0000 6573 736e 726f 6920 2073 7325     ....sensor is %s
    b8fc:	0a0d 0000 2025 0d64 000a 0000 2e25 6632     ....% d.....%.2f
    b90c:	0000 0000 654d 7361 7275 6d65 6e65 2074     ....Measurement 
    b91c:	6166 6c69 6465 202e 7845 6574 736e 6f69     failed. Extensio
    b92c:	2d6e 6f62 7261 2064 6964 6373 6e6f 656e     n-board disconne
    b93c:	7463 6465 003f 0000 6573 6179 006d 0000     cted?...seyam...

0000b94c <main_mqtt_broker>:
    b94c:	326d 2e6d 6365 696c 7370 2e65 726f 0067     m2m.eclipse.org.
    b95c:	6f43 6e6e 6365 2074 6166 6c69 7420 206f     Connect fail to 
    b96c:	6573 7672 7265 2528 2973 2021 6572 7274     server(%s)! retr
    b97c:	2079 7469 6120 7475 6d6f 7461 6369 6c61     y it automatical
    b98c:	796c 0d2e 000a 0000 6173 646d 742f 7365     ly......samd/tes
    b99c:	2f74 0023 7250 7065 7261 7461 6f69 206e     t/#.Preparation 
    b9ac:	666f 7420 6568 6320 6168 2074 6168 2073     of the chat has 
    b9bc:	6562 6e65 6320 6d6f 6c70 7465 6465 0d2e     been completed..
    b9cc:	0000 0000 514d 5454 6220 6f72 656b 2072     ....MQTT broker 
    b9dc:	6564 6c63 6e69 2065 6f79 7275 6120 6363     decline your acc
    b9ec:	7365 2173 6520 7272 726f 6320 646f 2065     ess! error code 
    b9fc:	6425 0a0d 0000 0000 6173 646d 742f 7365     %d......samd/tes
    ba0c:	2f74 0000 3e20 203e 0000 0000 000d 0000     t/.. >> ........
    ba1c:	514d 5454 6420 7369 6f63 6e6e 6365 6574     MQTT disconnecte
    ba2c:	0d64 0000 6957 462d 2069 6f63 6e6e 6365     d...Wi-Fi connec
    ba3c:	6574 0d64 0000 0000 6957 462d 2069 6964     ted.....Wi-Fi di
    ba4c:	6373 6e6f 656e 7463 6465 000d 7573 7070     sconnected..supp
    ba5c:	726f 3174 3332 0000 6144 6174 6f53 7466     ort123..DataSoft
    ba6c:	575f 4669 0069 0000 6957 462d 2069 5049     _WiFi...Wi-Fi IP
    ba7c:	6920 2073 7525 252e 2e75 7525 252e 0d75      is %u.%u.%u.%u.
    ba8c:	000a 0000 514d 7349 7064 0000 7834 0000     ....MQIsdp..4x..
    ba9c:	7804 0000 7816 0000 7758 0000 7816 0000     .x...x..Xw...x..
    baac:	77fa 0000 7816 0000 7758 0000 7804 0000     .w...x..Xw...x..
    babc:	7804 0000 77fa 0000 7758 0000 7760 0000     .x...w..Xw..`w..
    bacc:	7760 0000 7760 0000 781c 0000 7804 0000     `w..`w...x...x..
    badc:	7804 0000 77d8 0000 78bc 0000 77d8 0000     .x...w...x...w..
    baec:	77fa 0000 77d8 0000 78bc 0000 7804 0000     .w...w...x...x..
    bafc:	7804 0000 77fa 0000 78bc 0000 7760 0000     .x...w...x..`w..
    bb0c:	7760 0000 7760 0000 78c6 0000 81f0 0000     `w..`w...x......
    bb1c:	81d2 0000 818c 0000 80aa 0000 818c 0000     ................
    bb2c:	81c4 0000 818c 0000 80aa 0000 81d2 0000     ................
    bb3c:	81d2 0000 81c4 0000 80aa 0000 80a2 0000     ................
    bb4c:	80a2 0000 80a2 0000 8408 0000 8850 0000     ............P...
    bb5c:	8710 0000 8710 0000 870c 0000 8828 0000     ............(...
    bb6c:	8828 0000 881a 0000 870c 0000 8828 0000     (...........(...
    bb7c:	881a 0000 8828 0000 870c 0000 8830 0000     ....(.......0...
    bb8c:	8830 0000 8830 0000 8a34 0000               0...0...4...

0000bb98 <_global_impure_ptr>:
    bb98:	0010 2000                                   ... 

0000bb9c <__sf_fake_stderr>:
	...

0000bbbc <__sf_fake_stdin>:
	...

0000bbdc <__sf_fake_stdout>:
	...
    bbfc:	2d23 2b30 0020 6c68 004c 6665 4567 4746     #-0+ .hlL.efgEFG
    bc0c:	3000 3231 3433 3635 3837 4139 4342 4544     .0123456789ABCDE
    bc1c:	0046 3130 3332 3534 3736 3938 6261 6463     F.0123456789abcd
    bc2c:	6665 0000                                   ef..

0000bc30 <_init>:
    bc30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bc32:	46c0      	nop			; (mov r8, r8)
    bc34:	bcf8      	pop	{r3, r4, r5, r6, r7}
    bc36:	bc08      	pop	{r3}
    bc38:	469e      	mov	lr, r3
    bc3a:	4770      	bx	lr

0000bc3c <__init_array_start>:
    bc3c:	000000dd 	.word	0x000000dd

0000bc40 <_fini>:
    bc40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bc42:	46c0      	nop			; (mov r8, r8)
    bc44:	bcf8      	pop	{r3, r4, r5, r6, r7}
    bc46:	bc08      	pop	{r3}
    bc48:	469e      	mov	lr, r3
    bc4a:	4770      	bx	lr

0000bc4c <__fini_array_start>:
    bc4c:	000000b5 	.word	0x000000b5
