
WINC1500_MQTT_CHAT_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c20c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000b0  20000000  0000c20c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000430  200000b0  0000c2bc  000200b0  2**2
                  ALLOC
  3 .stack        00002000  200004e0  0000c6ec  000200b0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
  5 .comment      000000ca  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
  6 .debug_info   0006f418  00000000  00000000  000201a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000096c3  00000000  00000000  0008f5ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00015336  00000000  00000000  00098c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001008  00000000  00000000  000adfb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001668  00000000  00000000  000aefbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002616a  00000000  00000000  000b0623  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0002182d  00000000  00000000  000d678d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009b3c9  00000000  00000000  000f7fba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003688  00000000  00000000  00193384  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e0 24 00 20 c9 61 00 00 c5 61 00 00 c5 61 00 00     .$. .a...a...a..
	...
      2c:	c5 61 00 00 00 00 00 00 00 00 00 00 c5 61 00 00     .a...........a..
      3c:	41 01 00 00 c5 61 00 00 c5 61 00 00 c5 61 00 00     A....a...a...a..
      4c:	c5 61 00 00 d5 43 00 00 c5 61 00 00 c5 61 00 00     .a...C...a...a..
      5c:	c5 61 00 00 c5 61 00 00 41 49 00 00 51 49 00 00     .a...a..AI..QI..
      6c:	61 49 00 00 71 49 00 00 81 49 00 00 91 49 00 00     aI..qI...I...I..
      7c:	95 61 00 00 a5 61 00 00 b5 61 00 00 c5 61 00 00     .a...a...a...a..
      8c:	c5 61 00 00 c5 61 00 00 c5 61 00 00 c5 61 00 00     .a...a...a...a..
      9c:	c5 61 00 00 c5 61 00 00 c5 61 00 00 c5 61 00 00     .a...a...a...a..
      ac:	c5 61 00 00 00 00 00 00                             .a......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000b0 	.word	0x200000b0
      d4:	00000000 	.word	0x00000000
      d8:	0000c20c 	.word	0x0000c20c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000b4 	.word	0x200000b4
     108:	0000c20c 	.word	0x0000c20c
     10c:	0000c20c 	.word	0x0000c20c
     110:	00000000 	.word	0x00000000

00000114 <tick_counter_check_timer>:

bool	tick_counter_check_timer()
{
	bool ret = false;
	
	if( system_tick_count > messages_send_interval)
     114:	4b03      	ldr	r3, [pc, #12]	; (124 <tick_counter_check_timer+0x10>)
     116:	681b      	ldr	r3, [r3, #0]
     118:	4a03      	ldr	r2, [pc, #12]	; (128 <tick_counter_check_timer+0x14>)
     11a:	6810      	ldr	r0, [r2, #0]
		ret = true;
		
	return ret;
     11c:	4298      	cmp	r0, r3
     11e:	4180      	sbcs	r0, r0
     120:	4240      	negs	r0, r0
}
     122:	4770      	bx	lr
     124:	200000d0 	.word	0x200000d0
     128:	200000cc 	.word	0x200000cc

0000012c <tick_counter_reset_timer>:

void	tick_counter_reset_timer(int interval)
{
	messages_send_interval = system_tick_count + interval;
     12c:	4b02      	ldr	r3, [pc, #8]	; (138 <tick_counter_reset_timer+0xc>)
     12e:	681b      	ldr	r3, [r3, #0]
     130:	1818      	adds	r0, r3, r0
     132:	4b02      	ldr	r3, [pc, #8]	; (13c <tick_counter_reset_timer+0x10>)
     134:	6018      	str	r0, [r3, #0]
	//printf("Timer reset\r\n");
}
     136:	4770      	bx	lr
     138:	200000d0 	.word	0x200000d0
     13c:	200000cc 	.word	0x200000cc

00000140 <SysTick_Handler>:
/** 
 * \Brief System Callback, run during SysTick interrupt.
*/
void SysTick_Handler(void)
{
	system_tick_count++;
     140:	4a02      	ldr	r2, [pc, #8]	; (14c <SysTick_Handler+0xc>)
     142:	6813      	ldr	r3, [r2, #0]
     144:	3301      	adds	r3, #1
     146:	6013      	str	r3, [r2, #0]
}
     148:	4770      	bx	lr
     14a:	46c0      	nop			; (mov r8, r8)
     14c:	200000d0 	.word	0x200000d0

00000150 <ams_sensor_read>:
#include "i2c_master.h"

const uint8_t AMS_ADDRESS_AND_READ  = 0x5a;

enum status_code ams_sensor_read(struct i2c_master_module *i2c_master_instance_ptr, int *voc, int *co2)
{
     150:	b570      	push	{r4, r5, r6, lr}
     152:	b086      	sub	sp, #24
     154:	0004      	movs	r4, r0
     156:	000d      	movs	r5, r1
     158:	0016      	movs	r6, r2
    uint8_t data[9];
    struct i2c_master_packet packet = {
     15a:	220c      	movs	r2, #12
     15c:	2100      	movs	r1, #0
     15e:	4668      	mov	r0, sp
     160:	4b12      	ldr	r3, [pc, #72]	; (1ac <ams_sensor_read+0x5c>)
     162:	4798      	blx	r3
     164:	235a      	movs	r3, #90	; 0x5a
     166:	466a      	mov	r2, sp
     168:	8013      	strh	r3, [r2, #0]
     16a:	3b51      	subs	r3, #81	; 0x51
     16c:	8053      	strh	r3, [r2, #2]
     16e:	ab03      	add	r3, sp, #12
     170:	9301      	str	r3, [sp, #4]
	    .data = data,
	    .ten_bit_address = false,
	    .high_speed = false,
    };
    // stop and nack enabled
	enum status_code ret = i2c_master_read_packet_wait(i2c_master_instance_ptr, &packet);
     172:	4669      	mov	r1, sp
     174:	0020      	movs	r0, r4
     176:	4b0e      	ldr	r3, [pc, #56]	; (1b0 <ams_sensor_read+0x60>)
     178:	4798      	blx	r3
    //print_to_terminal("ret in  shtc1_read_async_result = 0x%x\n", ret);
    
    if (ret)
     17a:	2800      	cmp	r0, #0
     17c:	d10e      	bne.n	19c <ams_sensor_read+0x4c>
		return ret;
    if (data[2])
     17e:	ab03      	add	r3, sp, #12
     180:	7899      	ldrb	r1, [r3, #2]
     182:	2900      	cmp	r1, #0
     184:	d10c      	bne.n	1a0 <ams_sensor_read+0x50>
	{
		printf("data[2] status = 0x%x\n", data[2]);	
		return STATUS_ERR_BAD_DATA;
	}
    
	*co2 = (data[0] << 8) + data[1] ;
     186:	aa03      	add	r2, sp, #12
     188:	7813      	ldrb	r3, [r2, #0]
     18a:	021b      	lsls	r3, r3, #8
     18c:	7851      	ldrb	r1, [r2, #1]
     18e:	185b      	adds	r3, r3, r1
     190:	6033      	str	r3, [r6, #0]
	*voc = (data[7] << 8) + data[8] ;
     192:	79d3      	ldrb	r3, [r2, #7]
     194:	021b      	lsls	r3, r3, #8
     196:	7a12      	ldrb	r2, [r2, #8]
     198:	189b      	adds	r3, r3, r2
     19a:	602b      	str	r3, [r5, #0]

    return STATUS_OK;	
	
};
     19c:	b006      	add	sp, #24
     19e:	bd70      	pop	{r4, r5, r6, pc}
		printf("data[2] status = 0x%x\n", data[2]);	
     1a0:	4804      	ldr	r0, [pc, #16]	; (1b4 <ams_sensor_read+0x64>)
     1a2:	4b05      	ldr	r3, [pc, #20]	; (1b8 <ams_sensor_read+0x68>)
     1a4:	4798      	blx	r3
		return STATUS_ERR_BAD_DATA;
     1a6:	2013      	movs	r0, #19
     1a8:	e7f8      	b.n	19c <ams_sensor_read+0x4c>
     1aa:	46c0      	nop			; (mov r8, r8)
     1ac:	00009833 	.word	0x00009833
     1b0:	00000c09 	.word	0x00000c09
     1b4:	0000ad30 	.word	0x0000ad30
     1b8:	00009995 	.word	0x00009995

000001bc <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     1bc:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     1be:	2200      	movs	r2, #0
     1c0:	2300      	movs	r3, #0
     1c2:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     1c4:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     1c6:	2100      	movs	r1, #0
     1c8:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     1ca:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     1cc:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     1ce:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     1d0:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     1d2:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     1d4:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     1d6:	24c0      	movs	r4, #192	; 0xc0
     1d8:	0164      	lsls	r4, r4, #5
     1da:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     1dc:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     1de:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     1e0:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     1e2:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     1e4:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     1e6:	242a      	movs	r4, #42	; 0x2a
     1e8:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     1ea:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     1ec:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     1ee:	3c06      	subs	r4, #6
     1f0:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     1f2:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     1f4:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     1f6:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     1f8:	232b      	movs	r3, #43	; 0x2b
     1fa:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     1fc:	3301      	adds	r3, #1
     1fe:	54c1      	strb	r1, [r0, r3]
}
     200:	bd10      	pop	{r4, pc}
	...

00000204 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     204:	b5f0      	push	{r4, r5, r6, r7, lr}
     206:	46d6      	mov	lr, sl
     208:	464f      	mov	r7, r9
     20a:	4646      	mov	r6, r8
     20c:	b5c0      	push	{r6, r7, lr}
     20e:	b096      	sub	sp, #88	; 0x58
     210:	0007      	movs	r7, r0
     212:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     214:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     216:	4acb      	ldr	r2, [pc, #812]	; (544 <adc_init+0x340>)
     218:	6a10      	ldr	r0, [r2, #32]
     21a:	2380      	movs	r3, #128	; 0x80
     21c:	025b      	lsls	r3, r3, #9
     21e:	4303      	orrs	r3, r0
     220:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     222:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     224:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     226:	07db      	lsls	r3, r3, #31
     228:	d505      	bpl.n	236 <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     22a:	b016      	add	sp, #88	; 0x58
     22c:	bc1c      	pop	{r2, r3, r4}
     22e:	4690      	mov	r8, r2
     230:	4699      	mov	r9, r3
     232:	46a2      	mov	sl, r4
     234:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     236:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     238:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     23a:	079b      	lsls	r3, r3, #30
     23c:	d4f5      	bmi.n	22a <adc_init+0x26>
	module_inst->reference = config->reference;
     23e:	7873      	ldrb	r3, [r6, #1]
     240:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     242:	2b00      	cmp	r3, #0
     244:	d104      	bne.n	250 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     246:	4ac0      	ldr	r2, [pc, #768]	; (548 <adc_init+0x344>)
     248:	6c13      	ldr	r3, [r2, #64]	; 0x40
     24a:	2104      	movs	r1, #4
     24c:	430b      	orrs	r3, r1
     24e:	6413      	str	r3, [r2, #64]	; 0x40
	Adc *const adc_module = module_inst->hw;
     250:	683b      	ldr	r3, [r7, #0]
     252:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     254:	7833      	ldrb	r3, [r6, #0]
     256:	466a      	mov	r2, sp
     258:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     25a:	4669      	mov	r1, sp
     25c:	201e      	movs	r0, #30
     25e:	4bbb      	ldr	r3, [pc, #748]	; (54c <adc_init+0x348>)
     260:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     262:	201e      	movs	r0, #30
     264:	4bba      	ldr	r3, [pc, #744]	; (550 <adc_init+0x34c>)
     266:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     268:	232c      	movs	r3, #44	; 0x2c
     26a:	5cf2      	ldrb	r2, [r6, r3]
     26c:	2a00      	cmp	r2, #0
     26e:	d054      	beq.n	31a <adc_init+0x116>
		uint8_t offset = config->pin_scan.offset_start_scan;
     270:	3b01      	subs	r3, #1
     272:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     274:	7b33      	ldrb	r3, [r6, #12]
     276:	18eb      	adds	r3, r5, r3
     278:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     27a:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     27c:	b2c9      	uxtb	r1, r1
     27e:	428b      	cmp	r3, r1
     280:	d221      	bcs.n	2c6 <adc_init+0xc2>
     282:	1952      	adds	r2, r2, r5
     284:	b2d3      	uxtb	r3, r2
     286:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     288:	4bb2      	ldr	r3, [pc, #712]	; (554 <adc_init+0x350>)
     28a:	469a      	mov	sl, r3
     28c:	e003      	b.n	296 <adc_init+0x92>
			offset++;
     28e:	3501      	adds	r5, #1
     290:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     292:	45a9      	cmp	r9, r5
     294:	d017      	beq.n	2c6 <adc_init+0xc2>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     296:	240f      	movs	r4, #15
     298:	402c      	ands	r4, r5
     29a:	7b33      	ldrb	r3, [r6, #12]
     29c:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     29e:	2250      	movs	r2, #80	; 0x50
     2a0:	49ad      	ldr	r1, [pc, #692]	; (558 <adc_init+0x354>)
     2a2:	a802      	add	r0, sp, #8
     2a4:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2a6:	2c13      	cmp	r4, #19
     2a8:	d8f1      	bhi.n	28e <adc_init+0x8a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2aa:	00a4      	lsls	r4, r4, #2
     2ac:	ab02      	add	r3, sp, #8
     2ae:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2b0:	a901      	add	r1, sp, #4
     2b2:	2300      	movs	r3, #0
     2b4:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     2b6:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2b8:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2ba:	3301      	adds	r3, #1
     2bc:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     2be:	b2c0      	uxtb	r0, r0
     2c0:	4ba6      	ldr	r3, [pc, #664]	; (55c <adc_init+0x358>)
     2c2:	4798      	blx	r3
     2c4:	e7e3      	b.n	28e <adc_init+0x8a>
		_adc_configure_ain_pin(config->negative_input);
     2c6:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     2c8:	2250      	movs	r2, #80	; 0x50
     2ca:	49a3      	ldr	r1, [pc, #652]	; (558 <adc_init+0x354>)
     2cc:	a802      	add	r0, sp, #8
     2ce:	4ba1      	ldr	r3, [pc, #644]	; (554 <adc_init+0x350>)
     2d0:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2d2:	2c13      	cmp	r4, #19
     2d4:	d913      	bls.n	2fe <adc_init+0xfa>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     2d6:	7d73      	ldrb	r3, [r6, #21]
     2d8:	009b      	lsls	r3, r3, #2
     2da:	b2db      	uxtb	r3, r3
     2dc:	4642      	mov	r2, r8
     2de:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     2e0:	7db3      	ldrb	r3, [r6, #22]
     2e2:	01db      	lsls	r3, r3, #7
     2e4:	7872      	ldrb	r2, [r6, #1]
     2e6:	4313      	orrs	r3, r2
     2e8:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     2ea:	4642      	mov	r2, r8
     2ec:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     2ee:	7933      	ldrb	r3, [r6, #4]
     2f0:	2b34      	cmp	r3, #52	; 0x34
     2f2:	d900      	bls.n	2f6 <adc_init+0xf2>
     2f4:	e178      	b.n	5e8 <adc_init+0x3e4>
     2f6:	009b      	lsls	r3, r3, #2
     2f8:	4a99      	ldr	r2, [pc, #612]	; (560 <adc_init+0x35c>)
     2fa:	58d3      	ldr	r3, [r2, r3]
     2fc:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2fe:	00a4      	lsls	r4, r4, #2
     300:	ab02      	add	r3, sp, #8
     302:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     304:	a901      	add	r1, sp, #4
     306:	2300      	movs	r3, #0
     308:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     30a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     30c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     30e:	3301      	adds	r3, #1
     310:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     312:	b2c0      	uxtb	r0, r0
     314:	4b91      	ldr	r3, [pc, #580]	; (55c <adc_init+0x358>)
     316:	4798      	blx	r3
     318:	e7dd      	b.n	2d6 <adc_init+0xd2>
		_adc_configure_ain_pin(config->positive_input);
     31a:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     31c:	2250      	movs	r2, #80	; 0x50
     31e:	498e      	ldr	r1, [pc, #568]	; (558 <adc_init+0x354>)
     320:	a802      	add	r0, sp, #8
     322:	4b8c      	ldr	r3, [pc, #560]	; (554 <adc_init+0x350>)
     324:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     326:	2c13      	cmp	r4, #19
     328:	d915      	bls.n	356 <adc_init+0x152>
		_adc_configure_ain_pin(config->negative_input);
     32a:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     32c:	2250      	movs	r2, #80	; 0x50
     32e:	498a      	ldr	r1, [pc, #552]	; (558 <adc_init+0x354>)
     330:	a802      	add	r0, sp, #8
     332:	4b88      	ldr	r3, [pc, #544]	; (554 <adc_init+0x350>)
     334:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     336:	2c13      	cmp	r4, #19
     338:	d8cd      	bhi.n	2d6 <adc_init+0xd2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     33a:	00a4      	lsls	r4, r4, #2
     33c:	ab02      	add	r3, sp, #8
     33e:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     340:	a901      	add	r1, sp, #4
     342:	2300      	movs	r3, #0
     344:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     346:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     348:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     34a:	3301      	adds	r3, #1
     34c:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     34e:	b2c0      	uxtb	r0, r0
     350:	4b82      	ldr	r3, [pc, #520]	; (55c <adc_init+0x358>)
     352:	4798      	blx	r3
     354:	e7bf      	b.n	2d6 <adc_init+0xd2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     356:	00a4      	lsls	r4, r4, #2
     358:	ab02      	add	r3, sp, #8
     35a:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     35c:	a901      	add	r1, sp, #4
     35e:	2300      	movs	r3, #0
     360:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     362:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     364:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     366:	3301      	adds	r3, #1
     368:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     36a:	b2c0      	uxtb	r0, r0
     36c:	4b7b      	ldr	r3, [pc, #492]	; (55c <adc_init+0x358>)
     36e:	4798      	blx	r3
     370:	e7db      	b.n	32a <adc_init+0x126>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     372:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     374:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     376:	2102      	movs	r1, #2
     378:	e01a      	b.n	3b0 <adc_init+0x1ac>
		adjres = config->divide_result;
     37a:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     37c:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     37e:	2410      	movs	r4, #16
     380:	e016      	b.n	3b0 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     382:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     384:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     386:	2101      	movs	r1, #1
     388:	e012      	b.n	3b0 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     38a:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     38c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     38e:	2100      	movs	r1, #0
     390:	e00e      	b.n	3b0 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     392:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     394:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     396:	2100      	movs	r1, #0
     398:	e00a      	b.n	3b0 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     39a:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     39c:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     39e:	2100      	movs	r1, #0
     3a0:	e006      	b.n	3b0 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3a2:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     3a4:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     3a6:	2100      	movs	r1, #0
     3a8:	e002      	b.n	3b0 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     3aa:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     3ac:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     3ae:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     3b0:	0109      	lsls	r1, r1, #4
     3b2:	2270      	movs	r2, #112	; 0x70
     3b4:	400a      	ands	r2, r1
     3b6:	4313      	orrs	r3, r2
     3b8:	4642      	mov	r2, r8
     3ba:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     3bc:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     3be:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     3c0:	2b3f      	cmp	r3, #63	; 0x3f
     3c2:	d900      	bls.n	3c6 <adc_init+0x1c2>
     3c4:	e731      	b.n	22a <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     3c6:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     3c8:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     3ca:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     3cc:	b25b      	sxtb	r3, r3
     3ce:	2b00      	cmp	r3, #0
     3d0:	dbfb      	blt.n	3ca <adc_init+0x1c6>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     3d2:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     3d4:	8872      	ldrh	r2, [r6, #2]
     3d6:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     3d8:	2224      	movs	r2, #36	; 0x24
     3da:	5cb2      	ldrb	r2, [r6, r2]
     3dc:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     3de:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     3e0:	7d32      	ldrb	r2, [r6, #20]
     3e2:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     3e4:	4313      	orrs	r3, r2
     3e6:	7cb2      	ldrb	r2, [r6, #18]
     3e8:	0052      	lsls	r2, r2, #1
     3ea:	4313      	orrs	r3, r2
     3ec:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     3ee:	4642      	mov	r2, r8
     3f0:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     3f2:	7e33      	ldrb	r3, [r6, #24]
     3f4:	2b00      	cmp	r3, #0
     3f6:	d020      	beq.n	43a <adc_init+0x236>
		switch (resolution) {
     3f8:	2c10      	cmp	r4, #16
     3fa:	d100      	bne.n	3fe <adc_init+0x1fa>
     3fc:	e0d6      	b.n	5ac <adc_init+0x3a8>
     3fe:	d800      	bhi.n	402 <adc_init+0x1fe>
     400:	e080      	b.n	504 <adc_init+0x300>
     402:	2c20      	cmp	r4, #32
     404:	d100      	bne.n	408 <adc_init+0x204>
     406:	e0b3      	b.n	570 <adc_init+0x36c>
     408:	2c30      	cmp	r4, #48	; 0x30
     40a:	d116      	bne.n	43a <adc_init+0x236>
			if (config->differential_mode &&
     40c:	7cf2      	ldrb	r2, [r6, #19]
     40e:	2a00      	cmp	r2, #0
     410:	d00a      	beq.n	428 <adc_init+0x224>
					(config->window.window_lower_value > 127 ||
     412:	69f2      	ldr	r2, [r6, #28]
     414:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     416:	2017      	movs	r0, #23
			if (config->differential_mode &&
     418:	2aff      	cmp	r2, #255	; 0xff
     41a:	d900      	bls.n	41e <adc_init+0x21a>
     41c:	e705      	b.n	22a <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     41e:	6a32      	ldr	r2, [r6, #32]
     420:	3280      	adds	r2, #128	; 0x80
     422:	2aff      	cmp	r2, #255	; 0xff
     424:	d900      	bls.n	428 <adc_init+0x224>
     426:	e700      	b.n	22a <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     428:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     42a:	69f2      	ldr	r2, [r6, #28]
     42c:	2aff      	cmp	r2, #255	; 0xff
     42e:	dd00      	ble.n	432 <adc_init+0x22e>
     430:	e6fb      	b.n	22a <adc_init+0x26>
     432:	6a32      	ldr	r2, [r6, #32]
     434:	2aff      	cmp	r2, #255	; 0xff
     436:	dd00      	ble.n	43a <adc_init+0x236>
     438:	e6f7      	b.n	22a <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     43a:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     43c:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     43e:	b252      	sxtb	r2, r2
     440:	2a00      	cmp	r2, #0
     442:	dbfb      	blt.n	43c <adc_init+0x238>
	adc_module->WINCTRL.reg = config->window.window_mode;
     444:	4642      	mov	r2, r8
     446:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     448:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     44a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     44c:	b25b      	sxtb	r3, r3
     44e:	2b00      	cmp	r3, #0
     450:	dbfb      	blt.n	44a <adc_init+0x246>
	adc_module->WINLT.reg =
     452:	8bb3      	ldrh	r3, [r6, #28]
     454:	4642      	mov	r2, r8
     456:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     458:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     45a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     45c:	b25b      	sxtb	r3, r3
     45e:	2b00      	cmp	r3, #0
     460:	dbfb      	blt.n	45a <adc_init+0x256>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     462:	8c33      	ldrh	r3, [r6, #32]
     464:	4642      	mov	r2, r8
     466:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     468:	232c      	movs	r3, #44	; 0x2c
     46a:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     46c:	2b00      	cmp	r3, #0
     46e:	d005      	beq.n	47c <adc_init+0x278>
		inputs_to_scan--;
     470:	3b01      	subs	r3, #1
     472:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     474:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     476:	2b0f      	cmp	r3, #15
     478:	d900      	bls.n	47c <adc_init+0x278>
     47a:	e6d6      	b.n	22a <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     47c:	222b      	movs	r2, #43	; 0x2b
     47e:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     480:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     482:	290f      	cmp	r1, #15
     484:	d900      	bls.n	488 <adc_init+0x284>
     486:	e6d0      	b.n	22a <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     488:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     48a:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     48c:	b252      	sxtb	r2, r2
     48e:	2a00      	cmp	r2, #0
     490:	dbfb      	blt.n	48a <adc_init+0x286>
			config->negative_input |
     492:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     494:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     496:	4302      	orrs	r2, r0
     498:	68b0      	ldr	r0, [r6, #8]
     49a:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     49c:	0509      	lsls	r1, r1, #20
			config->negative_input |
     49e:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     4a0:	041b      	lsls	r3, r3, #16
			config->negative_input |
     4a2:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     4a4:	4642      	mov	r2, r8
     4a6:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     4a8:	232a      	movs	r3, #42	; 0x2a
     4aa:	5cf3      	ldrb	r3, [r6, r3]
     4ac:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     4ae:	230f      	movs	r3, #15
     4b0:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     4b2:	3315      	adds	r3, #21
     4b4:	5cf3      	ldrb	r3, [r6, r3]
     4b6:	2b00      	cmp	r3, #0
     4b8:	d012      	beq.n	4e0 <adc_init+0x2dc>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     4ba:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     4bc:	4a29      	ldr	r2, [pc, #164]	; (564 <adc_init+0x360>)
			return STATUS_ERR_INVALID_ARG;
     4be:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     4c0:	4293      	cmp	r3, r2
     4c2:	d900      	bls.n	4c6 <adc_init+0x2c2>
     4c4:	e6b1      	b.n	22a <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     4c6:	4642      	mov	r2, r8
     4c8:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     4ca:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     4cc:	2380      	movs	r3, #128	; 0x80
     4ce:	011b      	lsls	r3, r3, #4
     4d0:	18d3      	adds	r3, r2, r3
     4d2:	4924      	ldr	r1, [pc, #144]	; (564 <adc_init+0x360>)
     4d4:	b29b      	uxth	r3, r3
     4d6:	428b      	cmp	r3, r1
     4d8:	d900      	bls.n	4dc <adc_init+0x2d8>
     4da:	e6a6      	b.n	22a <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     4dc:	4643      	mov	r3, r8
     4de:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     4e0:	4b21      	ldr	r3, [pc, #132]	; (568 <adc_init+0x364>)
     4e2:	681b      	ldr	r3, [r3, #0]
     4e4:	015b      	lsls	r3, r3, #5
     4e6:	22e0      	movs	r2, #224	; 0xe0
     4e8:	00d2      	lsls	r2, r2, #3
     4ea:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     4ec:	4a1f      	ldr	r2, [pc, #124]	; (56c <adc_init+0x368>)
     4ee:	6851      	ldr	r1, [r2, #4]
     4f0:	0149      	lsls	r1, r1, #5
     4f2:	6812      	ldr	r2, [r2, #0]
     4f4:	0ed2      	lsrs	r2, r2, #27
     4f6:	430a      	orrs	r2, r1
     4f8:	b2d2      	uxtb	r2, r2
			) |
     4fa:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     4fc:	4642      	mov	r2, r8
     4fe:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     500:	2000      	movs	r0, #0
     502:	e692      	b.n	22a <adc_init+0x26>
		switch (resolution) {
     504:	2c00      	cmp	r4, #0
     506:	d198      	bne.n	43a <adc_init+0x236>
			if (config->differential_mode &&
     508:	7cf2      	ldrb	r2, [r6, #19]
     50a:	2a00      	cmp	r2, #0
     50c:	d00f      	beq.n	52e <adc_init+0x32a>
					(config->window.window_lower_value > 2047 ||
     50e:	69f2      	ldr	r2, [r6, #28]
     510:	2180      	movs	r1, #128	; 0x80
     512:	0109      	lsls	r1, r1, #4
     514:	468c      	mov	ip, r1
     516:	4462      	add	r2, ip
			if (config->differential_mode &&
     518:	4912      	ldr	r1, [pc, #72]	; (564 <adc_init+0x360>)
				return STATUS_ERR_INVALID_ARG;
     51a:	2017      	movs	r0, #23
			if (config->differential_mode &&
     51c:	428a      	cmp	r2, r1
     51e:	d900      	bls.n	522 <adc_init+0x31e>
     520:	e683      	b.n	22a <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     522:	6a32      	ldr	r2, [r6, #32]
     524:	4462      	add	r2, ip
     526:	490f      	ldr	r1, [pc, #60]	; (564 <adc_init+0x360>)
     528:	428a      	cmp	r2, r1
     52a:	d900      	bls.n	52e <adc_init+0x32a>
     52c:	e67d      	b.n	22a <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     52e:	4a0d      	ldr	r2, [pc, #52]	; (564 <adc_init+0x360>)
				return STATUS_ERR_INVALID_ARG;
     530:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     532:	69f1      	ldr	r1, [r6, #28]
     534:	4291      	cmp	r1, r2
     536:	dd00      	ble.n	53a <adc_init+0x336>
     538:	e677      	b.n	22a <adc_init+0x26>
     53a:	6a31      	ldr	r1, [r6, #32]
     53c:	4291      	cmp	r1, r2
     53e:	dd00      	ble.n	542 <adc_init+0x33e>
     540:	e673      	b.n	22a <adc_init+0x26>
     542:	e77a      	b.n	43a <adc_init+0x236>
     544:	40000400 	.word	0x40000400
     548:	40000800 	.word	0x40000800
     54c:	00005a0d 	.word	0x00005a0d
     550:	00005981 	.word	0x00005981
     554:	000097fd 	.word	0x000097fd
     558:	0000ae1c 	.word	0x0000ae1c
     55c:	00005b05 	.word	0x00005b05
     560:	0000ad48 	.word	0x0000ad48
     564:	00000fff 	.word	0x00000fff
     568:	00806024 	.word	0x00806024
     56c:	00806020 	.word	0x00806020
			if (config->differential_mode &&
     570:	7cf2      	ldrb	r2, [r6, #19]
     572:	2a00      	cmp	r2, #0
     574:	d00f      	beq.n	596 <adc_init+0x392>
					(config->window.window_lower_value > 511 ||
     576:	69f2      	ldr	r2, [r6, #28]
     578:	2180      	movs	r1, #128	; 0x80
     57a:	0089      	lsls	r1, r1, #2
     57c:	468c      	mov	ip, r1
     57e:	4462      	add	r2, ip
			if (config->differential_mode &&
     580:	491a      	ldr	r1, [pc, #104]	; (5ec <adc_init+0x3e8>)
				return STATUS_ERR_INVALID_ARG;
     582:	2017      	movs	r0, #23
			if (config->differential_mode &&
     584:	428a      	cmp	r2, r1
     586:	d900      	bls.n	58a <adc_init+0x386>
     588:	e64f      	b.n	22a <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     58a:	6a32      	ldr	r2, [r6, #32]
     58c:	4462      	add	r2, ip
     58e:	4917      	ldr	r1, [pc, #92]	; (5ec <adc_init+0x3e8>)
     590:	428a      	cmp	r2, r1
     592:	d900      	bls.n	596 <adc_init+0x392>
     594:	e649      	b.n	22a <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     596:	4a15      	ldr	r2, [pc, #84]	; (5ec <adc_init+0x3e8>)
				return STATUS_ERR_INVALID_ARG;
     598:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     59a:	69f1      	ldr	r1, [r6, #28]
     59c:	4291      	cmp	r1, r2
     59e:	dd00      	ble.n	5a2 <adc_init+0x39e>
     5a0:	e643      	b.n	22a <adc_init+0x26>
     5a2:	6a31      	ldr	r1, [r6, #32]
     5a4:	4291      	cmp	r1, r2
     5a6:	dd00      	ble.n	5aa <adc_init+0x3a6>
     5a8:	e63f      	b.n	22a <adc_init+0x26>
     5aa:	e746      	b.n	43a <adc_init+0x236>
			if (config->differential_mode &&
     5ac:	7cf2      	ldrb	r2, [r6, #19]
     5ae:	2a00      	cmp	r2, #0
     5b0:	d00f      	beq.n	5d2 <adc_init+0x3ce>
					(config->window.window_lower_value > 32767 ||
     5b2:	69f2      	ldr	r2, [r6, #28]
     5b4:	2180      	movs	r1, #128	; 0x80
     5b6:	0209      	lsls	r1, r1, #8
     5b8:	468c      	mov	ip, r1
     5ba:	4462      	add	r2, ip
			if (config->differential_mode &&
     5bc:	490c      	ldr	r1, [pc, #48]	; (5f0 <adc_init+0x3ec>)
				return STATUS_ERR_INVALID_ARG;
     5be:	2017      	movs	r0, #23
			if (config->differential_mode &&
     5c0:	428a      	cmp	r2, r1
     5c2:	d900      	bls.n	5c6 <adc_init+0x3c2>
     5c4:	e631      	b.n	22a <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     5c6:	6a32      	ldr	r2, [r6, #32]
     5c8:	4462      	add	r2, ip
     5ca:	4909      	ldr	r1, [pc, #36]	; (5f0 <adc_init+0x3ec>)
     5cc:	428a      	cmp	r2, r1
     5ce:	d900      	bls.n	5d2 <adc_init+0x3ce>
     5d0:	e62b      	b.n	22a <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     5d2:	4a07      	ldr	r2, [pc, #28]	; (5f0 <adc_init+0x3ec>)
				return STATUS_ERR_INVALID_ARG;
     5d4:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     5d6:	69f1      	ldr	r1, [r6, #28]
     5d8:	4291      	cmp	r1, r2
     5da:	dd00      	ble.n	5de <adc_init+0x3da>
     5dc:	e625      	b.n	22a <adc_init+0x26>
     5de:	6a31      	ldr	r1, [r6, #32]
     5e0:	4291      	cmp	r1, r2
     5e2:	dd00      	ble.n	5e6 <adc_init+0x3e2>
     5e4:	e621      	b.n	22a <adc_init+0x26>
     5e6:	e728      	b.n	43a <adc_init+0x236>
		return STATUS_ERR_INVALID_ARG;
     5e8:	2017      	movs	r0, #23
     5ea:	e61e      	b.n	22a <adc_init+0x26>
     5ec:	000003ff 	.word	0x000003ff
     5f0:	0000ffff 	.word	0x0000ffff

000005f4 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     5f4:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     5f6:	2207      	movs	r2, #7
     5f8:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     5fa:	421a      	tst	r2, r3
     5fc:	d1fc      	bne.n	5f8 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     5fe:	4770      	bx	lr

00000600 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     600:	b5f0      	push	{r4, r5, r6, r7, lr}
     602:	46d6      	mov	lr, sl
     604:	464f      	mov	r7, r9
     606:	4646      	mov	r6, r8
     608:	b5c0      	push	{r6, r7, lr}
     60a:	b08a      	sub	sp, #40	; 0x28
     60c:	0006      	movs	r6, r0
     60e:	000f      	movs	r7, r1
     610:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     612:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     614:	0008      	movs	r0, r1
     616:	4ba0      	ldr	r3, [pc, #640]	; (898 <i2c_master_init+0x298>)
     618:	4798      	blx	r3
     61a:	4aa0      	ldr	r2, [pc, #640]	; (89c <i2c_master_init+0x29c>)
     61c:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     61e:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     620:	2301      	movs	r3, #1
     622:	40ab      	lsls	r3, r5
     624:	430b      	orrs	r3, r1
     626:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     628:	a909      	add	r1, sp, #36	; 0x24
     62a:	7b23      	ldrb	r3, [r4, #12]
     62c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     62e:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     630:	b2c5      	uxtb	r5, r0
     632:	0028      	movs	r0, r5
     634:	4b9a      	ldr	r3, [pc, #616]	; (8a0 <i2c_master_init+0x2a0>)
     636:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     638:	0028      	movs	r0, r5
     63a:	4b9a      	ldr	r3, [pc, #616]	; (8a4 <i2c_master_init+0x2a4>)
     63c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     63e:	7b20      	ldrb	r0, [r4, #12]
     640:	2100      	movs	r1, #0
     642:	4b99      	ldr	r3, [pc, #612]	; (8a8 <i2c_master_init+0x2a8>)
     644:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     646:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     648:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     64a:	079b      	lsls	r3, r3, #30
     64c:	d505      	bpl.n	65a <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     64e:	b00a      	add	sp, #40	; 0x28
     650:	bc1c      	pop	{r2, r3, r4}
     652:	4690      	mov	r8, r2
     654:	4699      	mov	r9, r3
     656:	46a2      	mov	sl, r4
     658:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     65a:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     65c:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     65e:	07db      	lsls	r3, r3, #31
     660:	d4f5      	bmi.n	64e <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     662:	6830      	ldr	r0, [r6, #0]
     664:	4b8c      	ldr	r3, [pc, #560]	; (898 <i2c_master_init+0x298>)
     666:	4699      	mov	r9, r3
     668:	4798      	blx	r3
     66a:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     66c:	498f      	ldr	r1, [pc, #572]	; (8ac <i2c_master_init+0x2ac>)
     66e:	4b90      	ldr	r3, [pc, #576]	; (8b0 <i2c_master_init+0x2b0>)
     670:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     672:	00ad      	lsls	r5, r5, #2
     674:	4b8f      	ldr	r3, [pc, #572]	; (8b4 <i2c_master_init+0x2b4>)
     676:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
     678:	2300      	movs	r3, #0
     67a:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
     67c:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
     67e:	2500      	movs	r5, #0
     680:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
     682:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
     684:	2225      	movs	r2, #37	; 0x25
     686:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
     688:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     68a:	3314      	adds	r3, #20
     68c:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     68e:	6833      	ldr	r3, [r6, #0]
     690:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     692:	0018      	movs	r0, r3
     694:	47c8      	blx	r9
     696:	4681      	mov	r9, r0
	config->mux_position = SYSTEM_PINMUX_GPIO;
     698:	2380      	movs	r3, #128	; 0x80
     69a:	aa08      	add	r2, sp, #32
     69c:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     69e:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     6a0:	2301      	movs	r3, #1
     6a2:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     6a4:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     6a6:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     6a8:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     6aa:	2800      	cmp	r0, #0
     6ac:	d100      	bne.n	6b0 <i2c_master_init+0xb0>
     6ae:	e0af      	b.n	810 <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
     6b0:	ab08      	add	r3, sp, #32
     6b2:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     6b4:	2302      	movs	r3, #2
     6b6:	aa08      	add	r2, sp, #32
     6b8:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     6ba:	0c00      	lsrs	r0, r0, #16
     6bc:	b2c0      	uxtb	r0, r0
     6be:	0011      	movs	r1, r2
     6c0:	4b7d      	ldr	r3, [pc, #500]	; (8b8 <i2c_master_init+0x2b8>)
     6c2:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     6c4:	2f00      	cmp	r7, #0
     6c6:	d100      	bne.n	6ca <i2c_master_init+0xca>
     6c8:	e0a7      	b.n	81a <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
     6ca:	ab08      	add	r3, sp, #32
     6cc:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     6ce:	2302      	movs	r3, #2
     6d0:	aa08      	add	r2, sp, #32
     6d2:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     6d4:	0c3f      	lsrs	r7, r7, #16
     6d6:	b2f8      	uxtb	r0, r7
     6d8:	0011      	movs	r1, r2
     6da:	4b77      	ldr	r3, [pc, #476]	; (8b8 <i2c_master_init+0x2b8>)
     6dc:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     6de:	8aa3      	ldrh	r3, [r4, #20]
     6e0:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     6e2:	8ae3      	ldrh	r3, [r4, #22]
     6e4:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     6e6:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     6e8:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     6ea:	2b00      	cmp	r3, #0
     6ec:	d104      	bne.n	6f8 <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     6ee:	4b73      	ldr	r3, [pc, #460]	; (8bc <i2c_master_init+0x2bc>)
     6f0:	789b      	ldrb	r3, [r3, #2]
     6f2:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     6f4:	0fdb      	lsrs	r3, r3, #31
     6f6:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     6f8:	68a1      	ldr	r1, [r4, #8]
     6fa:	6923      	ldr	r3, [r4, #16]
     6fc:	430b      	orrs	r3, r1
     6fe:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     700:	2224      	movs	r2, #36	; 0x24
     702:	5ca2      	ldrb	r2, [r4, r2]
     704:	2a00      	cmp	r2, #0
     706:	d002      	beq.n	70e <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     708:	2280      	movs	r2, #128	; 0x80
     70a:	05d2      	lsls	r2, r2, #23
     70c:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     70e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     710:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     712:	222c      	movs	r2, #44	; 0x2c
     714:	5ca2      	ldrb	r2, [r4, r2]
     716:	2a00      	cmp	r2, #0
     718:	d103      	bne.n	722 <i2c_master_init+0x122>
     71a:	2280      	movs	r2, #128	; 0x80
     71c:	0492      	lsls	r2, r2, #18
     71e:	4291      	cmp	r1, r2
     720:	d102      	bne.n	728 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     722:	2280      	movs	r2, #128	; 0x80
     724:	0512      	lsls	r2, r2, #20
     726:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     728:	222d      	movs	r2, #45	; 0x2d
     72a:	5ca2      	ldrb	r2, [r4, r2]
     72c:	2a00      	cmp	r2, #0
     72e:	d002      	beq.n	736 <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     730:	2280      	movs	r2, #128	; 0x80
     732:	0412      	lsls	r2, r2, #16
     734:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     736:	222e      	movs	r2, #46	; 0x2e
     738:	5ca2      	ldrb	r2, [r4, r2]
     73a:	2a00      	cmp	r2, #0
     73c:	d002      	beq.n	744 <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     73e:	2280      	movs	r2, #128	; 0x80
     740:	03d2      	lsls	r2, r2, #15
     742:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     744:	4642      	mov	r2, r8
     746:	6812      	ldr	r2, [r2, #0]
     748:	4313      	orrs	r3, r2
     74a:	4642      	mov	r2, r8
     74c:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     74e:	2380      	movs	r3, #128	; 0x80
     750:	005b      	lsls	r3, r3, #1
     752:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     754:	4648      	mov	r0, r9
     756:	3014      	adds	r0, #20
     758:	b2c0      	uxtb	r0, r0
     75a:	4b59      	ldr	r3, [pc, #356]	; (8c0 <i2c_master_init+0x2c0>)
     75c:	4798      	blx	r3
     75e:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     760:	23fa      	movs	r3, #250	; 0xfa
     762:	009b      	lsls	r3, r3, #2
     764:	6822      	ldr	r2, [r4, #0]
     766:	435a      	muls	r2, r3
     768:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     76a:	6863      	ldr	r3, [r4, #4]
     76c:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     76e:	4d55      	ldr	r5, [pc, #340]	; (8c4 <i2c_master_init+0x2c4>)
     770:	47a8      	blx	r5
     772:	9000      	str	r0, [sp, #0]
     774:	9101      	str	r1, [sp, #4]
     776:	464b      	mov	r3, r9
     778:	0058      	lsls	r0, r3, #1
     77a:	47a8      	blx	r5
     77c:	9002      	str	r0, [sp, #8]
     77e:	9103      	str	r1, [sp, #12]
     780:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     782:	47a8      	blx	r5
     784:	9004      	str	r0, [sp, #16]
     786:	9105      	str	r1, [sp, #20]
     788:	4f4f      	ldr	r7, [pc, #316]	; (8c8 <i2c_master_init+0x2c8>)
     78a:	4a50      	ldr	r2, [pc, #320]	; (8cc <i2c_master_init+0x2cc>)
     78c:	4b50      	ldr	r3, [pc, #320]	; (8d0 <i2c_master_init+0x2d0>)
     78e:	9800      	ldr	r0, [sp, #0]
     790:	9901      	ldr	r1, [sp, #4]
     792:	47b8      	blx	r7
     794:	0002      	movs	r2, r0
     796:	000b      	movs	r3, r1
     798:	9804      	ldr	r0, [sp, #16]
     79a:	9905      	ldr	r1, [sp, #20]
     79c:	47b8      	blx	r7
     79e:	4e4d      	ldr	r6, [pc, #308]	; (8d4 <i2c_master_init+0x2d4>)
     7a0:	2200      	movs	r2, #0
     7a2:	4b4d      	ldr	r3, [pc, #308]	; (8d8 <i2c_master_init+0x2d8>)
     7a4:	47b0      	blx	r6
     7a6:	9004      	str	r0, [sp, #16]
     7a8:	9105      	str	r1, [sp, #20]
     7aa:	4648      	mov	r0, r9
     7ac:	47a8      	blx	r5
     7ae:	0002      	movs	r2, r0
     7b0:	000b      	movs	r3, r1
     7b2:	9804      	ldr	r0, [sp, #16]
     7b4:	9905      	ldr	r1, [sp, #20]
     7b6:	47b8      	blx	r7
     7b8:	0002      	movs	r2, r0
     7ba:	000b      	movs	r3, r1
     7bc:	4d47      	ldr	r5, [pc, #284]	; (8dc <i2c_master_init+0x2dc>)
     7be:	9800      	ldr	r0, [sp, #0]
     7c0:	9901      	ldr	r1, [sp, #4]
     7c2:	47a8      	blx	r5
     7c4:	9a02      	ldr	r2, [sp, #8]
     7c6:	9b03      	ldr	r3, [sp, #12]
     7c8:	47b0      	blx	r6
     7ca:	2200      	movs	r2, #0
     7cc:	4b44      	ldr	r3, [pc, #272]	; (8e0 <i2c_master_init+0x2e0>)
     7ce:	47a8      	blx	r5
     7d0:	9a02      	ldr	r2, [sp, #8]
     7d2:	9b03      	ldr	r3, [sp, #12]
     7d4:	4d43      	ldr	r5, [pc, #268]	; (8e4 <i2c_master_init+0x2e4>)
     7d6:	47a8      	blx	r5
     7d8:	4b43      	ldr	r3, [pc, #268]	; (8e8 <i2c_master_init+0x2e8>)
     7da:	4798      	blx	r3
     7dc:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     7de:	2380      	movs	r3, #128	; 0x80
     7e0:	049b      	lsls	r3, r3, #18
     7e2:	68a2      	ldr	r2, [r4, #8]
     7e4:	429a      	cmp	r2, r3
     7e6:	d01e      	beq.n	826 <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     7e8:	0003      	movs	r3, r0
     7ea:	2040      	movs	r0, #64	; 0x40
     7ec:	2dff      	cmp	r5, #255	; 0xff
     7ee:	d900      	bls.n	7f2 <i2c_master_init+0x1f2>
     7f0:	e72d      	b.n	64e <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     7f2:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     7f4:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     7f6:	25ff      	movs	r5, #255	; 0xff
     7f8:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     7fa:	0624      	lsls	r4, r4, #24
     7fc:	4325      	orrs	r5, r4
     7fe:	0400      	lsls	r0, r0, #16
     800:	23ff      	movs	r3, #255	; 0xff
     802:	041b      	lsls	r3, r3, #16
     804:	4018      	ands	r0, r3
     806:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     808:	4643      	mov	r3, r8
     80a:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     80c:	2000      	movs	r0, #0
     80e:	e71e      	b.n	64e <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     810:	2100      	movs	r1, #0
     812:	4640      	mov	r0, r8
     814:	4b35      	ldr	r3, [pc, #212]	; (8ec <i2c_master_init+0x2ec>)
     816:	4798      	blx	r3
     818:	e74a      	b.n	6b0 <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     81a:	2101      	movs	r1, #1
     81c:	4640      	mov	r0, r8
     81e:	4b33      	ldr	r3, [pc, #204]	; (8ec <i2c_master_init+0x2ec>)
     820:	4798      	blx	r3
     822:	0007      	movs	r7, r0
     824:	e751      	b.n	6ca <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     826:	26fa      	movs	r6, #250	; 0xfa
     828:	00b6      	lsls	r6, r6, #2
     82a:	4653      	mov	r3, sl
     82c:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     82e:	9800      	ldr	r0, [sp, #0]
     830:	9901      	ldr	r1, [sp, #4]
     832:	0002      	movs	r2, r0
     834:	000b      	movs	r3, r1
     836:	4c27      	ldr	r4, [pc, #156]	; (8d4 <i2c_master_init+0x2d4>)
     838:	47a0      	blx	r4
     83a:	9000      	str	r0, [sp, #0]
     83c:	9101      	str	r1, [sp, #4]
     83e:	0030      	movs	r0, r6
     840:	4b20      	ldr	r3, [pc, #128]	; (8c4 <i2c_master_init+0x2c4>)
     842:	4798      	blx	r3
     844:	2200      	movs	r2, #0
     846:	4b2a      	ldr	r3, [pc, #168]	; (8f0 <i2c_master_init+0x2f0>)
     848:	47b8      	blx	r7
     84a:	0002      	movs	r2, r0
     84c:	000b      	movs	r3, r1
     84e:	9800      	ldr	r0, [sp, #0]
     850:	9901      	ldr	r1, [sp, #4]
     852:	4c24      	ldr	r4, [pc, #144]	; (8e4 <i2c_master_init+0x2e4>)
     854:	47a0      	blx	r4
     856:	2200      	movs	r2, #0
     858:	4b21      	ldr	r3, [pc, #132]	; (8e0 <i2c_master_init+0x2e0>)
     85a:	4c20      	ldr	r4, [pc, #128]	; (8dc <i2c_master_init+0x2dc>)
     85c:	47a0      	blx	r4
     85e:	4b22      	ldr	r3, [pc, #136]	; (8e8 <i2c_master_init+0x2e8>)
     860:	4798      	blx	r3
     862:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     864:	d00c      	beq.n	880 <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     866:	0031      	movs	r1, r6
     868:	9807      	ldr	r0, [sp, #28]
     86a:	4b22      	ldr	r3, [pc, #136]	; (8f4 <i2c_master_init+0x2f4>)
     86c:	4798      	blx	r3
     86e:	3802      	subs	r0, #2
     870:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     872:	002b      	movs	r3, r5
     874:	2dff      	cmp	r5, #255	; 0xff
     876:	d80c      	bhi.n	892 <i2c_master_init+0x292>
     878:	28ff      	cmp	r0, #255	; 0xff
     87a:	d9bc      	bls.n	7f6 <i2c_master_init+0x1f6>
     87c:	2040      	movs	r0, #64	; 0x40
     87e:	e6e6      	b.n	64e <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     880:	0071      	lsls	r1, r6, #1
     882:	1e48      	subs	r0, r1, #1
     884:	9b07      	ldr	r3, [sp, #28]
     886:	469c      	mov	ip, r3
     888:	4460      	add	r0, ip
     88a:	4b1a      	ldr	r3, [pc, #104]	; (8f4 <i2c_master_init+0x2f4>)
     88c:	4798      	blx	r3
     88e:	3801      	subs	r0, #1
     890:	e7ef      	b.n	872 <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     892:	2040      	movs	r0, #64	; 0x40
     894:	e6db      	b.n	64e <i2c_master_init+0x4e>
     896:	46c0      	nop			; (mov r8, r8)
     898:	00004899 	.word	0x00004899
     89c:	40000400 	.word	0x40000400
     8a0:	00005a0d 	.word	0x00005a0d
     8a4:	00005981 	.word	0x00005981
     8a8:	000046d5 	.word	0x000046d5
     8ac:	00000d21 	.word	0x00000d21
     8b0:	000048d5 	.word	0x000048d5
     8b4:	200003ec 	.word	0x200003ec
     8b8:	00005b05 	.word	0x00005b05
     8bc:	41002000 	.word	0x41002000
     8c0:	00005a29 	.word	0x00005a29
     8c4:	000096f5 	.word	0x000096f5
     8c8:	00008b61 	.word	0x00008b61
     8cc:	e826d695 	.word	0xe826d695
     8d0:	3e112e0b 	.word	0x3e112e0b
     8d4:	00007ed9 	.word	0x00007ed9
     8d8:	40240000 	.word	0x40240000
     8dc:	00009061 	.word	0x00009061
     8e0:	3ff00000 	.word	0x3ff00000
     8e4:	000084f9 	.word	0x000084f9
     8e8:	0000968d 	.word	0x0000968d
     8ec:	00004721 	.word	0x00004721
     8f0:	40080000 	.word	0x40080000
     8f4:	00007b99 	.word	0x00007b99

000008f8 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     8f8:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     8fa:	7e1a      	ldrb	r2, [r3, #24]
     8fc:	0792      	lsls	r2, r2, #30
     8fe:	d507      	bpl.n	910 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     900:	2202      	movs	r2, #2
     902:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     904:	8b5b      	ldrh	r3, [r3, #26]
     906:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     908:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     90a:	17db      	asrs	r3, r3, #31
     90c:	4018      	ands	r0, r3
}
     90e:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     910:	8b5a      	ldrh	r2, [r3, #26]
     912:	0752      	lsls	r2, r2, #29
     914:	d506      	bpl.n	924 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     916:	6859      	ldr	r1, [r3, #4]
     918:	22c0      	movs	r2, #192	; 0xc0
     91a:	0292      	lsls	r2, r2, #10
     91c:	430a      	orrs	r2, r1
     91e:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     920:	2018      	movs	r0, #24
     922:	e7f4      	b.n	90e <_i2c_master_address_response+0x16>
	return STATUS_OK;
     924:	2000      	movs	r0, #0
     926:	e7f2      	b.n	90e <_i2c_master_address_response+0x16>

00000928 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     928:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     92a:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     92c:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     92e:	2401      	movs	r4, #1
     930:	2502      	movs	r5, #2
     932:	7e11      	ldrb	r1, [r2, #24]
     934:	4221      	tst	r1, r4
     936:	d10b      	bne.n	950 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     938:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     93a:	4229      	tst	r1, r5
     93c:	d106      	bne.n	94c <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     93e:	3301      	adds	r3, #1
     940:	b29b      	uxth	r3, r3
     942:	8901      	ldrh	r1, [r0, #8]
     944:	4299      	cmp	r1, r3
     946:	d8f4      	bhi.n	932 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     948:	2012      	movs	r0, #18
     94a:	e002      	b.n	952 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     94c:	2000      	movs	r0, #0
     94e:	e000      	b.n	952 <_i2c_master_wait_for_bus+0x2a>
     950:	2000      	movs	r0, #0
}
     952:	bd30      	pop	{r4, r5, pc}

00000954 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     954:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     956:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     958:	6862      	ldr	r2, [r4, #4]
     95a:	2380      	movs	r3, #128	; 0x80
     95c:	02db      	lsls	r3, r3, #11
     95e:	4313      	orrs	r3, r2
     960:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     962:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     964:	4b02      	ldr	r3, [pc, #8]	; (970 <_i2c_master_send_hs_master_code+0x1c>)
     966:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     968:	2301      	movs	r3, #1
     96a:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     96c:	bd10      	pop	{r4, pc}
     96e:	46c0      	nop			; (mov r8, r8)
     970:	00000929 	.word	0x00000929

00000974 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     974:	b5f0      	push	{r4, r5, r6, r7, lr}
     976:	46de      	mov	lr, fp
     978:	4657      	mov	r7, sl
     97a:	464e      	mov	r6, r9
     97c:	4645      	mov	r5, r8
     97e:	b5e0      	push	{r5, r6, r7, lr}
     980:	b083      	sub	sp, #12
     982:	0006      	movs	r6, r0
     984:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     986:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     988:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     98a:	682b      	ldr	r3, [r5, #0]
     98c:	011b      	lsls	r3, r3, #4
     98e:	0fdb      	lsrs	r3, r3, #31
     990:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     992:	7a4b      	ldrb	r3, [r1, #9]
     994:	2b00      	cmp	r3, #0
     996:	d12b      	bne.n	9f0 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     998:	686b      	ldr	r3, [r5, #4]
     99a:	4a58      	ldr	r2, [pc, #352]	; (afc <_i2c_master_read_packet+0x188>)
     99c:	4013      	ands	r3, r2
     99e:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     9a0:	464b      	mov	r3, r9
     9a2:	7a1b      	ldrb	r3, [r3, #8]
     9a4:	2b00      	cmp	r3, #0
     9a6:	d127      	bne.n	9f8 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     9a8:	464b      	mov	r3, r9
     9aa:	881b      	ldrh	r3, [r3, #0]
     9ac:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     9ae:	464a      	mov	r2, r9
     9b0:	7a52      	ldrb	r2, [r2, #9]
     9b2:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     9b4:	4313      	orrs	r3, r2
     9b6:	2201      	movs	r2, #1
     9b8:	4313      	orrs	r3, r2
     9ba:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     9bc:	0030      	movs	r0, r6
     9be:	4b50      	ldr	r3, [pc, #320]	; (b00 <_i2c_master_read_packet+0x18c>)
     9c0:	4798      	blx	r3
     9c2:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     9c4:	4653      	mov	r3, sl
     9c6:	2b00      	cmp	r3, #0
     9c8:	d003      	beq.n	9d2 <_i2c_master_read_packet+0x5e>
     9ca:	464b      	mov	r3, r9
     9cc:	885b      	ldrh	r3, [r3, #2]
     9ce:	2b01      	cmp	r3, #1
     9d0:	d03b      	beq.n	a4a <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
     9d2:	686b      	ldr	r3, [r5, #4]
     9d4:	4a49      	ldr	r2, [pc, #292]	; (afc <_i2c_master_read_packet+0x188>)
     9d6:	4013      	ands	r3, r2
     9d8:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     9da:	9b01      	ldr	r3, [sp, #4]
     9dc:	2b00      	cmp	r3, #0
     9de:	d03a      	beq.n	a56 <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     9e0:	9801      	ldr	r0, [sp, #4]
     9e2:	b003      	add	sp, #12
     9e4:	bc3c      	pop	{r2, r3, r4, r5}
     9e6:	4690      	mov	r8, r2
     9e8:	4699      	mov	r9, r3
     9ea:	46a2      	mov	sl, r4
     9ec:	46ab      	mov	fp, r5
     9ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     9f0:	7a89      	ldrb	r1, [r1, #10]
     9f2:	4b44      	ldr	r3, [pc, #272]	; (b04 <_i2c_master_read_packet+0x190>)
     9f4:	4798      	blx	r3
     9f6:	e7cf      	b.n	998 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
     9f8:	464b      	mov	r3, r9
     9fa:	881b      	ldrh	r3, [r3, #0]
     9fc:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     9fe:	464a      	mov	r2, r9
     a00:	7a52      	ldrb	r2, [r2, #9]
     a02:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     a04:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     a06:	2280      	movs	r2, #128	; 0x80
     a08:	0212      	lsls	r2, r2, #8
     a0a:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     a0c:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     a0e:	0030      	movs	r0, r6
     a10:	4b3b      	ldr	r3, [pc, #236]	; (b00 <_i2c_master_read_packet+0x18c>)
     a12:	4798      	blx	r3
     a14:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     a16:	686b      	ldr	r3, [r5, #4]
     a18:	4a38      	ldr	r2, [pc, #224]	; (afc <_i2c_master_read_packet+0x188>)
     a1a:	4013      	ands	r3, r2
     a1c:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
     a1e:	2800      	cmp	r0, #0
     a20:	d1de      	bne.n	9e0 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
     a22:	0030      	movs	r0, r6
     a24:	4b38      	ldr	r3, [pc, #224]	; (b08 <_i2c_master_read_packet+0x194>)
     a26:	4798      	blx	r3
     a28:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
     a2a:	2800      	cmp	r0, #0
     a2c:	d1d8      	bne.n	9e0 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     a2e:	464b      	mov	r3, r9
     a30:	881b      	ldrh	r3, [r3, #0]
     a32:	0a1b      	lsrs	r3, r3, #8
     a34:	2278      	movs	r2, #120	; 0x78
     a36:	4313      	orrs	r3, r2
     a38:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     a3a:	464a      	mov	r2, r9
     a3c:	7a52      	ldrb	r2, [r2, #9]
     a3e:	0392      	lsls	r2, r2, #14
     a40:	2101      	movs	r1, #1
     a42:	430a      	orrs	r2, r1
     a44:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     a46:	626b      	str	r3, [r5, #36]	; 0x24
     a48:	e7b8      	b.n	9bc <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     a4a:	686a      	ldr	r2, [r5, #4]
     a4c:	2380      	movs	r3, #128	; 0x80
     a4e:	02db      	lsls	r3, r3, #11
     a50:	4313      	orrs	r3, r2
     a52:	606b      	str	r3, [r5, #4]
     a54:	e7c1      	b.n	9da <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
     a56:	0030      	movs	r0, r6
     a58:	4b2b      	ldr	r3, [pc, #172]	; (b08 <_i2c_master_read_packet+0x194>)
     a5a:	4798      	blx	r3
     a5c:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     a5e:	2800      	cmp	r0, #0
     a60:	d1be      	bne.n	9e0 <_i2c_master_read_packet+0x6c>
     a62:	3c01      	subs	r4, #1
     a64:	b2a4      	uxth	r4, r4
     a66:	4680      	mov	r8, r0
		while (tmp_data_length--) {
     a68:	4b28      	ldr	r3, [pc, #160]	; (b0c <_i2c_master_read_packet+0x198>)
     a6a:	469b      	mov	fp, r3
     a6c:	e015      	b.n	a9a <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     a6e:	2c01      	cmp	r4, #1
     a70:	d020      	beq.n	ab4 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
     a72:	0030      	movs	r0, r6
     a74:	4b26      	ldr	r3, [pc, #152]	; (b10 <_i2c_master_read_packet+0x19c>)
     a76:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     a78:	4643      	mov	r3, r8
     a7a:	1c5f      	adds	r7, r3, #1
     a7c:	b2bf      	uxth	r7, r7
     a7e:	2328      	movs	r3, #40	; 0x28
     a80:	5ceb      	ldrb	r3, [r5, r3]
     a82:	464a      	mov	r2, r9
     a84:	6852      	ldr	r2, [r2, #4]
     a86:	4641      	mov	r1, r8
     a88:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
     a8a:	0030      	movs	r0, r6
     a8c:	4b1c      	ldr	r3, [pc, #112]	; (b00 <_i2c_master_read_packet+0x18c>)
     a8e:	4798      	blx	r3
     a90:	3c01      	subs	r4, #1
     a92:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
     a94:	2800      	cmp	r0, #0
     a96:	d115      	bne.n	ac4 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
     a98:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
     a9a:	455c      	cmp	r4, fp
     a9c:	d014      	beq.n	ac8 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     a9e:	8b6b      	ldrh	r3, [r5, #26]
     aa0:	069b      	lsls	r3, r3, #26
     aa2:	d527      	bpl.n	af4 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     aa4:	7af3      	ldrb	r3, [r6, #11]
     aa6:	2b00      	cmp	r3, #0
     aa8:	d0e3      	beq.n	a72 <_i2c_master_read_packet+0xfe>
     aaa:	4653      	mov	r3, sl
     aac:	2b00      	cmp	r3, #0
     aae:	d1de      	bne.n	a6e <_i2c_master_read_packet+0xfa>
     ab0:	2c00      	cmp	r4, #0
     ab2:	d1de      	bne.n	a72 <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     ab4:	686a      	ldr	r2, [r5, #4]
     ab6:	2380      	movs	r3, #128	; 0x80
     ab8:	02db      	lsls	r3, r3, #11
     aba:	4313      	orrs	r3, r2
     abc:	606b      	str	r3, [r5, #4]
     abe:	3c01      	subs	r4, #1
     ac0:	b2a4      	uxth	r4, r4
     ac2:	e7ea      	b.n	a9a <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
     ac4:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
     ac6:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     ac8:	7ab3      	ldrb	r3, [r6, #10]
     aca:	2b00      	cmp	r3, #0
     acc:	d109      	bne.n	ae2 <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
     ace:	0030      	movs	r0, r6
     ad0:	4b0f      	ldr	r3, [pc, #60]	; (b10 <_i2c_master_read_packet+0x19c>)
     ad2:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     ad4:	2328      	movs	r3, #40	; 0x28
     ad6:	5cea      	ldrb	r2, [r5, r3]
     ad8:	464b      	mov	r3, r9
     ada:	685b      	ldr	r3, [r3, #4]
     adc:	4641      	mov	r1, r8
     ade:	545a      	strb	r2, [r3, r1]
     ae0:	e77e      	b.n	9e0 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
     ae2:	0030      	movs	r0, r6
     ae4:	4b0a      	ldr	r3, [pc, #40]	; (b10 <_i2c_master_read_packet+0x19c>)
     ae6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     ae8:	686a      	ldr	r2, [r5, #4]
     aea:	23c0      	movs	r3, #192	; 0xc0
     aec:	029b      	lsls	r3, r3, #10
     aee:	4313      	orrs	r3, r2
     af0:	606b      	str	r3, [r5, #4]
     af2:	e7ec      	b.n	ace <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
     af4:	2341      	movs	r3, #65	; 0x41
     af6:	9301      	str	r3, [sp, #4]
     af8:	e772      	b.n	9e0 <_i2c_master_read_packet+0x6c>
     afa:	46c0      	nop			; (mov r8, r8)
     afc:	fffbffff 	.word	0xfffbffff
     b00:	00000929 	.word	0x00000929
     b04:	00000955 	.word	0x00000955
     b08:	000008f9 	.word	0x000008f9
     b0c:	0000ffff 	.word	0x0000ffff
     b10:	000005f5 	.word	0x000005f5

00000b14 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     b14:	b5f0      	push	{r4, r5, r6, r7, lr}
     b16:	46de      	mov	lr, fp
     b18:	4657      	mov	r7, sl
     b1a:	464e      	mov	r6, r9
     b1c:	4645      	mov	r5, r8
     b1e:	b5e0      	push	{r5, r6, r7, lr}
     b20:	b083      	sub	sp, #12
     b22:	0006      	movs	r6, r0
     b24:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     b26:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     b28:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     b2a:	4b32      	ldr	r3, [pc, #200]	; (bf4 <_i2c_master_write_packet+0xe0>)
     b2c:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     b2e:	7a7b      	ldrb	r3, [r7, #9]
     b30:	2b00      	cmp	r3, #0
     b32:	d11d      	bne.n	b70 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     b34:	686b      	ldr	r3, [r5, #4]
     b36:	4a30      	ldr	r2, [pc, #192]	; (bf8 <_i2c_master_write_packet+0xe4>)
     b38:	4013      	ands	r3, r2
     b3a:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     b3c:	7a3b      	ldrb	r3, [r7, #8]
     b3e:	2b00      	cmp	r3, #0
     b40:	d01b      	beq.n	b7a <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b42:	883b      	ldrh	r3, [r7, #0]
     b44:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     b46:	7a7a      	ldrb	r2, [r7, #9]
     b48:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b4a:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     b4c:	2280      	movs	r2, #128	; 0x80
     b4e:	0212      	lsls	r2, r2, #8
     b50:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b52:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     b54:	0030      	movs	r0, r6
     b56:	4b29      	ldr	r3, [pc, #164]	; (bfc <_i2c_master_write_packet+0xe8>)
     b58:	4798      	blx	r3
     b5a:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     b5c:	2800      	cmp	r0, #0
     b5e:	d013      	beq.n	b88 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     b60:	9801      	ldr	r0, [sp, #4]
     b62:	b003      	add	sp, #12
     b64:	bc3c      	pop	{r2, r3, r4, r5}
     b66:	4690      	mov	r8, r2
     b68:	4699      	mov	r9, r3
     b6a:	46a2      	mov	sl, r4
     b6c:	46ab      	mov	fp, r5
     b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     b70:	7ab9      	ldrb	r1, [r7, #10]
     b72:	0030      	movs	r0, r6
     b74:	4b22      	ldr	r3, [pc, #136]	; (c00 <_i2c_master_write_packet+0xec>)
     b76:	4798      	blx	r3
     b78:	e7dc      	b.n	b34 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b7a:	883b      	ldrh	r3, [r7, #0]
     b7c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     b7e:	7a7a      	ldrb	r2, [r7, #9]
     b80:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b82:	4313      	orrs	r3, r2
     b84:	626b      	str	r3, [r5, #36]	; 0x24
     b86:	e7e5      	b.n	b54 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
     b88:	0030      	movs	r0, r6
     b8a:	4b1e      	ldr	r3, [pc, #120]	; (c04 <_i2c_master_write_packet+0xf0>)
     b8c:	4798      	blx	r3
     b8e:	1e03      	subs	r3, r0, #0
     b90:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     b92:	d1e5      	bne.n	b60 <_i2c_master_write_packet+0x4c>
     b94:	46a0      	mov	r8, r4
     b96:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     b98:	3320      	adds	r3, #32
     b9a:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
     b9c:	4b15      	ldr	r3, [pc, #84]	; (bf4 <_i2c_master_write_packet+0xe0>)
     b9e:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
     ba0:	4b16      	ldr	r3, [pc, #88]	; (bfc <_i2c_master_write_packet+0xe8>)
     ba2:	469a      	mov	sl, r3
		while (tmp_data_length--) {
     ba4:	4544      	cmp	r4, r8
     ba6:	d015      	beq.n	bd4 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     ba8:	8b6b      	ldrh	r3, [r5, #26]
     baa:	464a      	mov	r2, r9
     bac:	4213      	tst	r3, r2
     bae:	d01d      	beq.n	bec <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
     bb0:	0030      	movs	r0, r6
     bb2:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     bb4:	687b      	ldr	r3, [r7, #4]
     bb6:	5d1a      	ldrb	r2, [r3, r4]
     bb8:	2328      	movs	r3, #40	; 0x28
     bba:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
     bbc:	0030      	movs	r0, r6
     bbe:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
     bc0:	2800      	cmp	r0, #0
     bc2:	d106      	bne.n	bd2 <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     bc4:	8b6b      	ldrh	r3, [r5, #26]
     bc6:	3401      	adds	r4, #1
     bc8:	075b      	lsls	r3, r3, #29
     bca:	d5eb      	bpl.n	ba4 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
     bcc:	231e      	movs	r3, #30
     bce:	9301      	str	r3, [sp, #4]
     bd0:	e000      	b.n	bd4 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
     bd2:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     bd4:	7ab3      	ldrb	r3, [r6, #10]
     bd6:	2b00      	cmp	r3, #0
     bd8:	d0c2      	beq.n	b60 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
     bda:	0030      	movs	r0, r6
     bdc:	4b05      	ldr	r3, [pc, #20]	; (bf4 <_i2c_master_write_packet+0xe0>)
     bde:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     be0:	686a      	ldr	r2, [r5, #4]
     be2:	23c0      	movs	r3, #192	; 0xc0
     be4:	029b      	lsls	r3, r3, #10
     be6:	4313      	orrs	r3, r2
     be8:	606b      	str	r3, [r5, #4]
     bea:	e7b9      	b.n	b60 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
     bec:	2341      	movs	r3, #65	; 0x41
     bee:	9301      	str	r3, [sp, #4]
     bf0:	e7b6      	b.n	b60 <_i2c_master_write_packet+0x4c>
     bf2:	46c0      	nop			; (mov r8, r8)
     bf4:	000005f5 	.word	0x000005f5
     bf8:	fffbffff 	.word	0xfffbffff
     bfc:	00000929 	.word	0x00000929
     c00:	00000955 	.word	0x00000955
     c04:	000008f9 	.word	0x000008f9

00000c08 <i2c_master_read_packet_wait>:
{
     c08:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
     c0a:	8b83      	ldrh	r3, [r0, #28]
     c0c:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     c0e:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     c10:	2b00      	cmp	r3, #0
     c12:	d001      	beq.n	c18 <i2c_master_read_packet_wait+0x10>
}
     c14:	0010      	movs	r0, r2
     c16:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     c18:	3301      	adds	r3, #1
     c1a:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     c1c:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     c1e:	4b02      	ldr	r3, [pc, #8]	; (c28 <i2c_master_read_packet_wait+0x20>)
     c20:	4798      	blx	r3
     c22:	0002      	movs	r2, r0
     c24:	e7f6      	b.n	c14 <i2c_master_read_packet_wait+0xc>
     c26:	46c0      	nop			; (mov r8, r8)
     c28:	00000975 	.word	0x00000975

00000c2c <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     c2c:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     c2e:	8b83      	ldrh	r3, [r0, #28]
     c30:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     c32:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     c34:	2b00      	cmp	r3, #0
     c36:	d001      	beq.n	c3c <i2c_master_write_packet_wait_no_stop+0x10>

	module->send_stop = false;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
     c38:	0010      	movs	r0, r2
     c3a:	bd10      	pop	{r4, pc}
	module->send_stop = false;
     c3c:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     c3e:	3301      	adds	r3, #1
     c40:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     c42:	4b02      	ldr	r3, [pc, #8]	; (c4c <i2c_master_write_packet_wait_no_stop+0x20>)
     c44:	4798      	blx	r3
     c46:	0002      	movs	r2, r0
     c48:	e7f6      	b.n	c38 <i2c_master_write_packet_wait_no_stop+0xc>
     c4a:	46c0      	nop			; (mov r8, r8)
     c4c:	00000b15 	.word	0x00000b15

00000c50 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     c50:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     c52:	2207      	movs	r2, #7
     c54:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
     c56:	421a      	tst	r2, r3
     c58:	d1fc      	bne.n	c54 <_i2c_master_wait_for_sync+0x4>
}
     c5a:	4770      	bx	lr

00000c5c <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     c5c:	b570      	push	{r4, r5, r6, lr}
     c5e:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     c60:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     c62:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     c64:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     c66:	8b83      	ldrh	r3, [r0, #28]
     c68:	1aed      	subs	r5, r5, r3
     c6a:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     c6c:	8b83      	ldrh	r3, [r0, #28]
     c6e:	3b01      	subs	r3, #1
     c70:	b29b      	uxth	r3, r3
     c72:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     c74:	0113      	lsls	r3, r2, #4
     c76:	d51d      	bpl.n	cb4 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     c78:	7ac3      	ldrb	r3, [r0, #11]
     c7a:	2b00      	cmp	r3, #0
     c7c:	d003      	beq.n	c86 <_i2c_master_read+0x2a>
     c7e:	8b83      	ldrh	r3, [r0, #28]
     c80:	b29b      	uxth	r3, r3
     c82:	2b01      	cmp	r3, #1
     c84:	d010      	beq.n	ca8 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     c86:	8ba3      	ldrh	r3, [r4, #28]
     c88:	b29b      	uxth	r3, r3
     c8a:	2b00      	cmp	r3, #0
     c8c:	d102      	bne.n	c94 <_i2c_master_read+0x38>
		if (module->send_stop) {
     c8e:	7aa3      	ldrb	r3, [r4, #10]
     c90:	2b00      	cmp	r3, #0
     c92:	d11c      	bne.n	cce <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     c94:	0020      	movs	r0, r4
     c96:	4b12      	ldr	r3, [pc, #72]	; (ce0 <_i2c_master_read+0x84>)
     c98:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     c9a:	6a23      	ldr	r3, [r4, #32]
     c9c:	195d      	adds	r5, r3, r5
     c9e:	2328      	movs	r3, #40	; 0x28
     ca0:	5cf3      	ldrb	r3, [r6, r3]
     ca2:	b2db      	uxtb	r3, r3
     ca4:	702b      	strb	r3, [r5, #0]
}
     ca6:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     ca8:	6872      	ldr	r2, [r6, #4]
     caa:	2380      	movs	r3, #128	; 0x80
     cac:	02db      	lsls	r3, r3, #11
     cae:	4313      	orrs	r3, r2
     cb0:	6073      	str	r3, [r6, #4]
     cb2:	e7e8      	b.n	c86 <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     cb4:	7ac3      	ldrb	r3, [r0, #11]
     cb6:	2b00      	cmp	r3, #0
     cb8:	d0e5      	beq.n	c86 <_i2c_master_read+0x2a>
     cba:	8b83      	ldrh	r3, [r0, #28]
     cbc:	b29b      	uxth	r3, r3
     cbe:	2b00      	cmp	r3, #0
     cc0:	d1e1      	bne.n	c86 <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     cc2:	6872      	ldr	r2, [r6, #4]
     cc4:	2380      	movs	r3, #128	; 0x80
     cc6:	02db      	lsls	r3, r3, #11
     cc8:	4313      	orrs	r3, r2
     cca:	6073      	str	r3, [r6, #4]
     ccc:	e7db      	b.n	c86 <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     cce:	0020      	movs	r0, r4
     cd0:	4b03      	ldr	r3, [pc, #12]	; (ce0 <_i2c_master_read+0x84>)
     cd2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     cd4:	6872      	ldr	r2, [r6, #4]
     cd6:	23c0      	movs	r3, #192	; 0xc0
     cd8:	029b      	lsls	r3, r3, #10
     cda:	4313      	orrs	r3, r2
     cdc:	6073      	str	r3, [r6, #4]
     cde:	e7d9      	b.n	c94 <_i2c_master_read+0x38>
     ce0:	00000c51 	.word	0x00000c51

00000ce4 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     ce4:	b570      	push	{r4, r5, r6, lr}
     ce6:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     ce8:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     cea:	8b6b      	ldrh	r3, [r5, #26]
     cec:	075b      	lsls	r3, r3, #29
     cee:	d503      	bpl.n	cf8 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     cf0:	221e      	movs	r2, #30
     cf2:	2325      	movs	r3, #37	; 0x25
     cf4:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     cf6:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     cf8:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     cfa:	8b83      	ldrh	r3, [r0, #28]
     cfc:	1af6      	subs	r6, r6, r3
     cfe:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     d00:	8b83      	ldrh	r3, [r0, #28]
     d02:	3b01      	subs	r3, #1
     d04:	b29b      	uxth	r3, r3
     d06:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     d08:	4b04      	ldr	r3, [pc, #16]	; (d1c <_i2c_master_write+0x38>)
     d0a:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     d0c:	6a23      	ldr	r3, [r4, #32]
     d0e:	199e      	adds	r6, r3, r6
     d10:	7833      	ldrb	r3, [r6, #0]
     d12:	b2db      	uxtb	r3, r3
     d14:	2228      	movs	r2, #40	; 0x28
     d16:	54ab      	strb	r3, [r5, r2]
     d18:	e7ed      	b.n	cf6 <_i2c_master_write+0x12>
     d1a:	46c0      	nop			; (mov r8, r8)
     d1c:	00000c51 	.word	0x00000c51

00000d20 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     d20:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     d22:	0080      	lsls	r0, r0, #2
     d24:	4b75      	ldr	r3, [pc, #468]	; (efc <_i2c_master_interrupt_handler+0x1dc>)
     d26:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     d28:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     d2a:	682b      	ldr	r3, [r5, #0]
     d2c:	011b      	lsls	r3, r3, #4
     d2e:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     d30:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     d32:	7e26      	ldrb	r6, [r4, #24]
     d34:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     d36:	8b63      	ldrh	r3, [r4, #26]
     d38:	b29b      	uxth	r3, r3
     d3a:	2b00      	cmp	r3, #0
     d3c:	d103      	bne.n	d46 <_i2c_master_interrupt_handler+0x26>
     d3e:	8ba3      	ldrh	r3, [r4, #28]
     d40:	b29b      	uxth	r3, r3
     d42:	2b00      	cmp	r3, #0
     d44:	d123      	bne.n	d8e <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     d46:	8b63      	ldrh	r3, [r4, #26]
     d48:	b29b      	uxth	r3, r3
     d4a:	2b00      	cmp	r3, #0
     d4c:	d008      	beq.n	d60 <_i2c_master_interrupt_handler+0x40>
     d4e:	8ba3      	ldrh	r3, [r4, #28]
     d50:	b29b      	uxth	r3, r3
     d52:	2b00      	cmp	r3, #0
     d54:	d104      	bne.n	d60 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
     d56:	3325      	adds	r3, #37	; 0x25
     d58:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     d5a:	2b05      	cmp	r3, #5
     d5c:	d100      	bne.n	d60 <_i2c_master_interrupt_handler+0x40>
     d5e:	e06d      	b.n	e3c <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     d60:	8b63      	ldrh	r3, [r4, #26]
     d62:	b29b      	uxth	r3, r3
     d64:	2b00      	cmp	r3, #0
     d66:	d024      	beq.n	db2 <_i2c_master_interrupt_handler+0x92>
     d68:	8ba3      	ldrh	r3, [r4, #28]
     d6a:	b29b      	uxth	r3, r3
     d6c:	2b00      	cmp	r3, #0
     d6e:	d020      	beq.n	db2 <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     d70:	8b6b      	ldrh	r3, [r5, #26]
     d72:	069b      	lsls	r3, r3, #26
     d74:	d500      	bpl.n	d78 <_i2c_master_interrupt_handler+0x58>
     d76:	e081      	b.n	e7c <_i2c_master_interrupt_handler+0x15c>
     d78:	2a00      	cmp	r2, #0
     d7a:	d004      	beq.n	d86 <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     d7c:	8ba3      	ldrh	r3, [r4, #28]
     d7e:	b29b      	uxth	r3, r3
     d80:	2b01      	cmp	r3, #1
     d82:	d100      	bne.n	d86 <_i2c_master_interrupt_handler+0x66>
     d84:	e07a      	b.n	e7c <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     d86:	2241      	movs	r2, #65	; 0x41
     d88:	2325      	movs	r3, #37	; 0x25
     d8a:	54e2      	strb	r2, [r4, r3]
     d8c:	e011      	b.n	db2 <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     d8e:	7e2b      	ldrb	r3, [r5, #24]
     d90:	07db      	lsls	r3, r3, #31
     d92:	d507      	bpl.n	da4 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     d94:	2301      	movs	r3, #1
     d96:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     d98:	8b6b      	ldrh	r3, [r5, #26]
     d9a:	079b      	lsls	r3, r3, #30
     d9c:	d52e      	bpl.n	dfc <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     d9e:	2241      	movs	r2, #65	; 0x41
     da0:	2325      	movs	r3, #37	; 0x25
     da2:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     da4:	8ba3      	ldrh	r3, [r4, #28]
     da6:	b29b      	uxth	r3, r3
     da8:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     daa:	2325      	movs	r3, #37	; 0x25
     dac:	5ce3      	ldrb	r3, [r4, r3]
     dae:	2b05      	cmp	r3, #5
     db0:	d038      	beq.n	e24 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     db2:	8b63      	ldrh	r3, [r4, #26]
     db4:	b29b      	uxth	r3, r3
     db6:	2b00      	cmp	r3, #0
     db8:	d007      	beq.n	dca <_i2c_master_interrupt_handler+0xaa>
     dba:	8ba3      	ldrh	r3, [r4, #28]
     dbc:	b29b      	uxth	r3, r3
     dbe:	2b00      	cmp	r3, #0
     dc0:	d103      	bne.n	dca <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     dc2:	3325      	adds	r3, #37	; 0x25
     dc4:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     dc6:	2b05      	cmp	r3, #5
     dc8:	d064      	beq.n	e94 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     dca:	2325      	movs	r3, #37	; 0x25
     dcc:	5ce3      	ldrb	r3, [r4, r3]
     dce:	2b05      	cmp	r3, #5
     dd0:	d013      	beq.n	dfa <_i2c_master_interrupt_handler+0xda>
     dd2:	2325      	movs	r3, #37	; 0x25
     dd4:	5ce3      	ldrb	r3, [r4, r3]
     dd6:	2b00      	cmp	r3, #0
     dd8:	d00f      	beq.n	dfa <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     dda:	2303      	movs	r3, #3
     ddc:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     dde:	2300      	movs	r3, #0
     de0:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     de2:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     de4:	3325      	adds	r3, #37	; 0x25
     de6:	5ce3      	ldrb	r3, [r4, r3]
     de8:	2b41      	cmp	r3, #65	; 0x41
     dea:	d003      	beq.n	df4 <_i2c_master_interrupt_handler+0xd4>
     dec:	7aa3      	ldrb	r3, [r4, #10]
     dee:	2b00      	cmp	r3, #0
     df0:	d000      	beq.n	df4 <_i2c_master_interrupt_handler+0xd4>
     df2:	e075      	b.n	ee0 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     df4:	0773      	lsls	r3, r6, #29
     df6:	d500      	bpl.n	dfa <_i2c_master_interrupt_handler+0xda>
     df8:	e07b      	b.n	ef2 <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     dfa:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     dfc:	8b6b      	ldrh	r3, [r5, #26]
     dfe:	075b      	lsls	r3, r3, #29
     e00:	d5d0      	bpl.n	da4 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     e02:	2218      	movs	r2, #24
     e04:	2325      	movs	r3, #37	; 0x25
     e06:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     e08:	2300      	movs	r3, #0
     e0a:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     e0c:	7aa3      	ldrb	r3, [r4, #10]
     e0e:	2b00      	cmp	r3, #0
     e10:	d0c8      	beq.n	da4 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     e12:	0020      	movs	r0, r4
     e14:	4b3a      	ldr	r3, [pc, #232]	; (f00 <_i2c_master_interrupt_handler+0x1e0>)
     e16:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     e18:	686a      	ldr	r2, [r5, #4]
     e1a:	23c0      	movs	r3, #192	; 0xc0
     e1c:	029b      	lsls	r3, r3, #10
     e1e:	4313      	orrs	r3, r2
     e20:	606b      	str	r3, [r5, #4]
     e22:	e7bf      	b.n	da4 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     e24:	331f      	adds	r3, #31
     e26:	5ce3      	ldrb	r3, [r4, r3]
     e28:	2b00      	cmp	r3, #0
     e2a:	d003      	beq.n	e34 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     e2c:	0020      	movs	r0, r4
     e2e:	4b35      	ldr	r3, [pc, #212]	; (f04 <_i2c_master_interrupt_handler+0x1e4>)
     e30:	4798      	blx	r3
     e32:	e7be      	b.n	db2 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     e34:	0020      	movs	r0, r4
     e36:	4b34      	ldr	r3, [pc, #208]	; (f08 <_i2c_master_interrupt_handler+0x1e8>)
     e38:	4798      	blx	r3
     e3a:	e7ba      	b.n	db2 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     e3c:	331f      	adds	r3, #31
     e3e:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     e40:	2b00      	cmp	r3, #0
     e42:	d000      	beq.n	e46 <_i2c_master_interrupt_handler+0x126>
     e44:	e78c      	b.n	d60 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
     e46:	3303      	adds	r3, #3
     e48:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     e4a:	2300      	movs	r3, #0
     e4c:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     e4e:	3325      	adds	r3, #37	; 0x25
     e50:	2200      	movs	r2, #0
     e52:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     e54:	7aa3      	ldrb	r3, [r4, #10]
     e56:	2b00      	cmp	r3, #0
     e58:	d107      	bne.n	e6a <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     e5a:	2301      	movs	r3, #1
     e5c:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     e5e:	07f3      	lsls	r3, r6, #31
     e60:	d5a7      	bpl.n	db2 <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     e62:	68e3      	ldr	r3, [r4, #12]
     e64:	0020      	movs	r0, r4
     e66:	4798      	blx	r3
     e68:	e7a3      	b.n	db2 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     e6a:	0020      	movs	r0, r4
     e6c:	4b24      	ldr	r3, [pc, #144]	; (f00 <_i2c_master_interrupt_handler+0x1e0>)
     e6e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     e70:	686a      	ldr	r2, [r5, #4]
     e72:	23c0      	movs	r3, #192	; 0xc0
     e74:	029b      	lsls	r3, r3, #10
     e76:	4313      	orrs	r3, r2
     e78:	606b      	str	r3, [r5, #4]
     e7a:	e7f0      	b.n	e5e <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     e7c:	2324      	movs	r3, #36	; 0x24
     e7e:	5ce3      	ldrb	r3, [r4, r3]
     e80:	2b00      	cmp	r3, #0
     e82:	d103      	bne.n	e8c <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     e84:	0020      	movs	r0, r4
     e86:	4b20      	ldr	r3, [pc, #128]	; (f08 <_i2c_master_interrupt_handler+0x1e8>)
     e88:	4798      	blx	r3
     e8a:	e792      	b.n	db2 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     e8c:	0020      	movs	r0, r4
     e8e:	4b1d      	ldr	r3, [pc, #116]	; (f04 <_i2c_master_interrupt_handler+0x1e4>)
     e90:	4798      	blx	r3
     e92:	e78e      	b.n	db2 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     e94:	331f      	adds	r3, #31
     e96:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     e98:	2b01      	cmp	r3, #1
     e9a:	d196      	bne.n	dca <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     e9c:	7e2b      	ldrb	r3, [r5, #24]
     e9e:	079b      	lsls	r3, r3, #30
     ea0:	d501      	bpl.n	ea6 <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     ea2:	2302      	movs	r3, #2
     ea4:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     ea6:	2303      	movs	r3, #3
     ea8:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     eaa:	2300      	movs	r3, #0
     eac:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     eae:	3325      	adds	r3, #37	; 0x25
     eb0:	2200      	movs	r2, #0
     eb2:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     eb4:	07b3      	lsls	r3, r6, #30
     eb6:	d503      	bpl.n	ec0 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     eb8:	2324      	movs	r3, #36	; 0x24
     eba:	5ce3      	ldrb	r3, [r4, r3]
     ebc:	2b01      	cmp	r3, #1
     ebe:	d00b      	beq.n	ed8 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     ec0:	07f3      	lsls	r3, r6, #31
     ec2:	d400      	bmi.n	ec6 <_i2c_master_interrupt_handler+0x1a6>
     ec4:	e781      	b.n	dca <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     ec6:	2324      	movs	r3, #36	; 0x24
     ec8:	5ce3      	ldrb	r3, [r4, r3]
     eca:	2b00      	cmp	r3, #0
     ecc:	d000      	beq.n	ed0 <_i2c_master_interrupt_handler+0x1b0>
     ece:	e77c      	b.n	dca <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     ed0:	68e3      	ldr	r3, [r4, #12]
     ed2:	0020      	movs	r0, r4
     ed4:	4798      	blx	r3
     ed6:	e778      	b.n	dca <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     ed8:	6923      	ldr	r3, [r4, #16]
     eda:	0020      	movs	r0, r4
     edc:	4798      	blx	r3
     ede:	e774      	b.n	dca <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     ee0:	0020      	movs	r0, r4
     ee2:	4b07      	ldr	r3, [pc, #28]	; (f00 <_i2c_master_interrupt_handler+0x1e0>)
     ee4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     ee6:	686a      	ldr	r2, [r5, #4]
     ee8:	23e0      	movs	r3, #224	; 0xe0
     eea:	02db      	lsls	r3, r3, #11
     eec:	4313      	orrs	r3, r2
     eee:	606b      	str	r3, [r5, #4]
     ef0:	e780      	b.n	df4 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     ef2:	6963      	ldr	r3, [r4, #20]
     ef4:	0020      	movs	r0, r4
     ef6:	4798      	blx	r3
}
     ef8:	e77f      	b.n	dfa <_i2c_master_interrupt_handler+0xda>
     efa:	46c0      	nop			; (mov r8, r8)
     efc:	200003ec 	.word	0x200003ec
     f00:	00000c51 	.word	0x00000c51
     f04:	00000c5d 	.word	0x00000c5d
     f08:	00000ce5 	.word	0x00000ce5

00000f0c <shtc1_check_crc>:
static const uint8_t ID_REG_MASK       = 0x1f;
static const uint8_t CRC_POLYNOMIAL    = 0x31;
static const uint8_t CRC_INIT          = 0xff;

static bool shtc1_check_crc(uint8_t *data, uint8_t data_length, uint8_t checksum)
{
     f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t crc = CRC_INIT;
    uint8_t current_byte;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < data_length; ++current_byte)
     f0e:	2900      	cmp	r1, #0
     f10:	d01c      	beq.n	f4c <shtc1_check_crc+0x40>
     f12:	0006      	movs	r6, r0
     f14:	3901      	subs	r1, #1
     f16:	b2c9      	uxtb	r1, r1
     f18:	3101      	adds	r1, #1
     f1a:	1840      	adds	r0, r0, r1
     f1c:	23ff      	movs	r3, #255	; 0xff
    {
        crc ^= (data[current_byte]);
     f1e:	2508      	movs	r5, #8
        for (uint8_t bit = 8; bit > 0; --bit)
        {
            if (crc & 0x80)
                crc = (crc << 1) ^ CRC_POLYNOMIAL;
     f20:	2731      	movs	r7, #49	; 0x31
     f22:	e00f      	b.n	f44 <shtc1_check_crc+0x38>
     f24:	005b      	lsls	r3, r3, #1
     f26:	407b      	eors	r3, r7
     f28:	b2db      	uxtb	r3, r3
     f2a:	3901      	subs	r1, #1
     f2c:	b2c9      	uxtb	r1, r1
        for (uint8_t bit = 8; bit > 0; --bit)
     f2e:	2900      	cmp	r1, #0
     f30:	d005      	beq.n	f3e <shtc1_check_crc+0x32>
            if (crc & 0x80)
     f32:	b25c      	sxtb	r4, r3
     f34:	2c00      	cmp	r4, #0
     f36:	dbf5      	blt.n	f24 <shtc1_check_crc+0x18>
            else
                crc = (crc << 1);
     f38:	005b      	lsls	r3, r3, #1
     f3a:	b2db      	uxtb	r3, r3
     f3c:	e7f5      	b.n	f2a <shtc1_check_crc+0x1e>
     f3e:	3601      	adds	r6, #1
    for (current_byte = 0; current_byte < data_length; ++current_byte)
     f40:	4286      	cmp	r6, r0
     f42:	d004      	beq.n	f4e <shtc1_check_crc+0x42>
        crc ^= (data[current_byte]);
     f44:	7831      	ldrb	r1, [r6, #0]
     f46:	404b      	eors	r3, r1
     f48:	0029      	movs	r1, r5
     f4a:	e7f2      	b.n	f32 <shtc1_check_crc+0x26>
    uint8_t crc = CRC_INIT;
     f4c:	23ff      	movs	r3, #255	; 0xff
        }
    }
    return crc == checksum;
     f4e:	1ad2      	subs	r2, r2, r3
     f50:	4250      	negs	r0, r2
     f52:	4150      	adcs	r0, r2
     f54:	b2c0      	uxtb	r0, r0
}
     f56:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000f58 <shtc1_read_async_result>:

enum status_code shtc1_read_async_result(struct i2c_master_module *i2c_master_instance_ptr,
        int *temp, int *rh)
{
     f58:	b5f0      	push	{r4, r5, r6, r7, lr}
     f5a:	b087      	sub	sp, #28
     f5c:	0005      	movs	r5, r0
     f5e:	000f      	movs	r7, r1
     f60:	0016      	movs	r6, r2
    uint8_t data[6];
    struct i2c_master_packet packet = {
     f62:	ac01      	add	r4, sp, #4
     f64:	220c      	movs	r2, #12
     f66:	2100      	movs	r1, #0
     f68:	0020      	movs	r0, r4
     f6a:	4b1e      	ldr	r3, [pc, #120]	; (fe4 <shtc1_read_async_result+0x8c>)
     f6c:	4798      	blx	r3
     f6e:	2370      	movs	r3, #112	; 0x70
     f70:	8023      	strh	r3, [r4, #0]
     f72:	3b6a      	subs	r3, #106	; 0x6a
     f74:	8063      	strh	r3, [r4, #2]
     f76:	ab04      	add	r3, sp, #16
     f78:	6063      	str	r3, [r4, #4]
            .data_length = sizeof(data),
            .data = data,
			.ten_bit_address = false,
			.high_speed = false,
    };
    enum status_code ret = i2c_master_read_packet_wait(i2c_master_instance_ptr, &packet);
     f7a:	0021      	movs	r1, r4
     f7c:	0028      	movs	r0, r5
     f7e:	4b1a      	ldr	r3, [pc, #104]	; (fe8 <shtc1_read_async_result+0x90>)
     f80:	4798      	blx	r3
     f82:	1e04      	subs	r4, r0, #0
    if (ret)
     f84:	d107      	bne.n	f96 <shtc1_read_async_result+0x3e>
        return ret;
    if (!shtc1_check_crc(data, 2, data[2]) || !shtc1_check_crc(data + 3, 2, data[5]))
     f86:	a804      	add	r0, sp, #16
     f88:	7882      	ldrb	r2, [r0, #2]
     f8a:	2102      	movs	r1, #2
     f8c:	4b17      	ldr	r3, [pc, #92]	; (fec <shtc1_read_async_result+0x94>)
     f8e:	4798      	blx	r3
     f90:	2800      	cmp	r0, #0
     f92:	d103      	bne.n	f9c <shtc1_read_async_result+0x44>
        return STATUS_ERR_BAD_DATA;
     f94:	2413      	movs	r4, #19
    *rh = (data[4] & 0xff) | (data[3] << 8);
    *temp = ((21875 * *temp) >> 13) - 45000;
    *rh = ((12500 * *rh) >> 13);

    return STATUS_OK;
}
     f96:	0020      	movs	r0, r4
     f98:	b007      	add	sp, #28
     f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!shtc1_check_crc(data, 2, data[2]) || !shtc1_check_crc(data + 3, 2, data[5]))
     f9c:	ab04      	add	r3, sp, #16
     f9e:	795a      	ldrb	r2, [r3, #5]
     fa0:	2102      	movs	r1, #2
     fa2:	2013      	movs	r0, #19
     fa4:	4468      	add	r0, sp
     fa6:	4b11      	ldr	r3, [pc, #68]	; (fec <shtc1_read_async_result+0x94>)
     fa8:	4798      	blx	r3
     faa:	2800      	cmp	r0, #0
     fac:	d101      	bne.n	fb2 <shtc1_read_async_result+0x5a>
        return STATUS_ERR_BAD_DATA;
     fae:	2413      	movs	r4, #19
     fb0:	e7f1      	b.n	f96 <shtc1_read_async_result+0x3e>
    *temp = (data[1] & 0xff) | (data[0] << 8);
     fb2:	aa04      	add	r2, sp, #16
     fb4:	7813      	ldrb	r3, [r2, #0]
     fb6:	021b      	lsls	r3, r3, #8
     fb8:	7851      	ldrb	r1, [r2, #1]
     fba:	430b      	orrs	r3, r1
     fbc:	603b      	str	r3, [r7, #0]
    *rh = (data[4] & 0xff) | (data[3] << 8);
     fbe:	78d3      	ldrb	r3, [r2, #3]
     fc0:	021b      	lsls	r3, r3, #8
     fc2:	7912      	ldrb	r2, [r2, #4]
     fc4:	4313      	orrs	r3, r2
     fc6:	6033      	str	r3, [r6, #0]
    *temp = ((21875 * *temp) >> 13) - 45000;
     fc8:	4b09      	ldr	r3, [pc, #36]	; (ff0 <shtc1_read_async_result+0x98>)
     fca:	683a      	ldr	r2, [r7, #0]
     fcc:	4353      	muls	r3, r2
     fce:	135b      	asrs	r3, r3, #13
     fd0:	4a08      	ldr	r2, [pc, #32]	; (ff4 <shtc1_read_async_result+0x9c>)
     fd2:	4694      	mov	ip, r2
     fd4:	4463      	add	r3, ip
     fd6:	603b      	str	r3, [r7, #0]
    *rh = ((12500 * *rh) >> 13);
     fd8:	4b07      	ldr	r3, [pc, #28]	; (ff8 <shtc1_read_async_result+0xa0>)
     fda:	6832      	ldr	r2, [r6, #0]
     fdc:	4353      	muls	r3, r2
     fde:	135b      	asrs	r3, r3, #13
     fe0:	6033      	str	r3, [r6, #0]
    return STATUS_OK;
     fe2:	e7d8      	b.n	f96 <shtc1_read_async_result+0x3e>
     fe4:	00009833 	.word	0x00009833
     fe8:	00000c09 	.word	0x00000c09
     fec:	00000f0d 	.word	0x00000f0d
     ff0:	00005573 	.word	0x00005573
     ff4:	ffff5038 	.word	0xffff5038
     ff8:	000030d4 	.word	0x000030d4

00000ffc <shtc1_read_sync>:

static enum status_code shtc1_read_sync(struct i2c_master_module *i2c_master_instance_ptr,
        const uint8_t command[], int *temp, int *rh)
{
     ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
     ffe:	b087      	sub	sp, #28
    1000:	0004      	movs	r4, r0
    1002:	000d      	movs	r5, r1
    1004:	9201      	str	r2, [sp, #4]
    1006:	001e      	movs	r6, r3
    enum status_code ret;
    struct i2c_master_packet packet = {
    1008:	af03      	add	r7, sp, #12
    100a:	220c      	movs	r2, #12
    100c:	2100      	movs	r1, #0
    100e:	0038      	movs	r0, r7
    1010:	4b0a      	ldr	r3, [pc, #40]	; (103c <shtc1_read_sync+0x40>)
    1012:	4798      	blx	r3
    1014:	2370      	movs	r3, #112	; 0x70
    1016:	803b      	strh	r3, [r7, #0]
    1018:	3b6e      	subs	r3, #110	; 0x6e
    101a:	807b      	strh	r3, [r7, #2]
    101c:	607d      	str	r5, [r7, #4]
            .data_length = COMMAND_SIZE,
            .data = (uint8_t *)command,
			.ten_bit_address = false,
			.high_speed = false,
    };
    ret = i2c_master_write_packet_wait_no_stop(i2c_master_instance_ptr, &packet);
    101e:	0039      	movs	r1, r7
    1020:	0020      	movs	r0, r4
    1022:	4b07      	ldr	r3, [pc, #28]	; (1040 <shtc1_read_sync+0x44>)
    1024:	4798      	blx	r3
    if (ret)
    1026:	2800      	cmp	r0, #0
    1028:	d001      	beq.n	102e <shtc1_read_sync+0x32>
        return ret;
    return shtc1_read_async_result(i2c_master_instance_ptr, temp, rh);
}
    102a:	b007      	add	sp, #28
    102c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return shtc1_read_async_result(i2c_master_instance_ptr, temp, rh);
    102e:	0032      	movs	r2, r6
    1030:	9901      	ldr	r1, [sp, #4]
    1032:	0020      	movs	r0, r4
    1034:	4b03      	ldr	r3, [pc, #12]	; (1044 <shtc1_read_sync+0x48>)
    1036:	4798      	blx	r3
    1038:	e7f7      	b.n	102a <shtc1_read_sync+0x2e>
    103a:	46c0      	nop			; (mov r8, r8)
    103c:	00009833 	.word	0x00009833
    1040:	00000c2d 	.word	0x00000c2d
    1044:	00000f59 	.word	0x00000f59

00001048 <shtc1_read_lpm_sync>:

enum status_code shtc1_read_lpm_sync(struct i2c_master_module *i2c_master_instance_ptr,
        int *temp, int *rh)
{
    1048:	b510      	push	{r4, lr}
    104a:	0013      	movs	r3, r2
    return shtc1_read_sync(i2c_master_instance_ptr, CMD_MEASURE_LPM_CS, temp, rh);
    104c:	000a      	movs	r2, r1
    104e:	4902      	ldr	r1, [pc, #8]	; (1058 <shtc1_read_lpm_sync+0x10>)
    1050:	4c02      	ldr	r4, [pc, #8]	; (105c <shtc1_read_lpm_sync+0x14>)
    1052:	47a0      	blx	r4
}
    1054:	bd10      	pop	{r4, pc}
    1056:	46c0      	nop			; (mov r8, r8)
    1058:	0000ae6c 	.word	0x0000ae6c
    105c:	00000ffd 	.word	0x00000ffd

00001060 <shtc1_probe>:
    };
    return i2c_master_write_packet_wait(i2c_master_instance_ptr, &packet);
}

bool shtc1_probe(struct i2c_master_module *i2c_master_instance_ptr)
{
    1060:	b510      	push	{r4, lr}
    1062:	b084      	sub	sp, #16
    1064:	0004      	movs	r4, r0
    uint8_t data[3];
    struct i2c_master_packet packet = {
    1066:	220c      	movs	r2, #12
    1068:	2100      	movs	r1, #0
    106a:	4668      	mov	r0, sp
    106c:	4b15      	ldr	r3, [pc, #84]	; (10c4 <shtc1_probe+0x64>)
    106e:	4798      	blx	r3
    1070:	2370      	movs	r3, #112	; 0x70
    1072:	466a      	mov	r2, sp
    1074:	8013      	strh	r3, [r2, #0]
    1076:	3b6e      	subs	r3, #110	; 0x6e
    1078:	8053      	strh	r3, [r2, #2]
    107a:	4b13      	ldr	r3, [pc, #76]	; (10c8 <shtc1_probe+0x68>)
    107c:	9301      	str	r3, [sp, #4]
            .data_length = COMMAND_SIZE,
            .data = (uint8_t *)CMD_READ_ID_REG,
			.ten_bit_address = false,
			.high_speed = false,
    };
    i2c_master_write_packet_wait_no_stop(i2c_master_instance_ptr, &packet);
    107e:	4669      	mov	r1, sp
    1080:	0020      	movs	r0, r4
    1082:	4b12      	ldr	r3, [pc, #72]	; (10cc <shtc1_probe+0x6c>)
    1084:	4798      	blx	r3
    packet.data_length = sizeof(data);
    1086:	2303      	movs	r3, #3
    1088:	466a      	mov	r2, sp
    108a:	8053      	strh	r3, [r2, #2]
    packet.data = data;
    108c:	ab03      	add	r3, sp, #12
    108e:	9301      	str	r3, [sp, #4]
    enum status_code ret = i2c_master_read_packet_wait(i2c_master_instance_ptr, &packet);
    1090:	4669      	mov	r1, sp
    1092:	0020      	movs	r0, r4
    1094:	4b0e      	ldr	r3, [pc, #56]	; (10d0 <shtc1_probe+0x70>)
    1096:	4798      	blx	r3
    1098:	0003      	movs	r3, r0

    if (ret)
        return false;
    109a:	2000      	movs	r0, #0
    if (ret)
    109c:	2b00      	cmp	r3, #0
    109e:	d10e      	bne.n	10be <shtc1_probe+0x5e>
    if (!shtc1_check_crc(data, 2, data[2]))
    10a0:	a803      	add	r0, sp, #12
    10a2:	7882      	ldrb	r2, [r0, #2]
    10a4:	2102      	movs	r1, #2
    10a6:	4b0b      	ldr	r3, [pc, #44]	; (10d4 <shtc1_probe+0x74>)
    10a8:	4798      	blx	r3
    10aa:	2800      	cmp	r0, #0
    10ac:	d007      	beq.n	10be <shtc1_probe+0x5e>
        return false;
    return (data[1] & ID_REG_MASK) == ID_REG_CONTENT;
    10ae:	ab03      	add	r3, sp, #12
    10b0:	785b      	ldrb	r3, [r3, #1]
    10b2:	201f      	movs	r0, #31
    10b4:	4018      	ands	r0, r3
    10b6:	3807      	subs	r0, #7
    10b8:	4243      	negs	r3, r0
    10ba:	4158      	adcs	r0, r3
    10bc:	b2c0      	uxtb	r0, r0
}
    10be:	b004      	add	sp, #16
    10c0:	bd10      	pop	{r4, pc}
    10c2:	46c0      	nop			; (mov r8, r8)
    10c4:	00009833 	.word	0x00009833
    10c8:	0000ae70 	.word	0x0000ae70
    10cc:	00000c2d 	.word	0x00000c2d
    10d0:	00000c09 	.word	0x00000c09
    10d4:	00000f0d 	.word	0x00000f0d

000010d8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    10d8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    10da:	2000      	movs	r0, #0
    10dc:	4b08      	ldr	r3, [pc, #32]	; (1100 <delay_init+0x28>)
    10de:	4798      	blx	r3
    10e0:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    10e2:	4c08      	ldr	r4, [pc, #32]	; (1104 <delay_init+0x2c>)
    10e4:	21fa      	movs	r1, #250	; 0xfa
    10e6:	0089      	lsls	r1, r1, #2
    10e8:	47a0      	blx	r4
    10ea:	4b07      	ldr	r3, [pc, #28]	; (1108 <delay_init+0x30>)
    10ec:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    10ee:	4907      	ldr	r1, [pc, #28]	; (110c <delay_init+0x34>)
    10f0:	0028      	movs	r0, r5
    10f2:	47a0      	blx	r4
    10f4:	4b06      	ldr	r3, [pc, #24]	; (1110 <delay_init+0x38>)
    10f6:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    10f8:	2205      	movs	r2, #5
    10fa:	4b06      	ldr	r3, [pc, #24]	; (1114 <delay_init+0x3c>)
    10fc:	601a      	str	r2, [r3, #0]
}
    10fe:	bd70      	pop	{r4, r5, r6, pc}
    1100:	000058f5 	.word	0x000058f5
    1104:	00007b99 	.word	0x00007b99
    1108:	20000000 	.word	0x20000000
    110c:	000f4240 	.word	0x000f4240
    1110:	20000004 	.word	0x20000004
    1114:	e000e010 	.word	0xe000e010

00001118 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    1118:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    111a:	4b08      	ldr	r3, [pc, #32]	; (113c <delay_cycles_ms+0x24>)
    111c:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    111e:	4a08      	ldr	r2, [pc, #32]	; (1140 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    1120:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1122:	2180      	movs	r1, #128	; 0x80
    1124:	0249      	lsls	r1, r1, #9
	while (n--) {
    1126:	3801      	subs	r0, #1
    1128:	d307      	bcc.n	113a <delay_cycles_ms+0x22>
	if (n > 0) {
    112a:	2c00      	cmp	r4, #0
    112c:	d0fb      	beq.n	1126 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    112e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1130:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1132:	6813      	ldr	r3, [r2, #0]
    1134:	420b      	tst	r3, r1
    1136:	d0fc      	beq.n	1132 <delay_cycles_ms+0x1a>
    1138:	e7f5      	b.n	1126 <delay_cycles_ms+0xe>
	}
}
    113a:	bd30      	pop	{r4, r5, pc}
    113c:	20000000 	.word	0x20000000
    1140:	e000e010 	.word	0xe000e010

00001144 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    1144:	b510      	push	{r4, lr}
	if (gpfIsr) {
    1146:	4b03      	ldr	r3, [pc, #12]	; (1154 <chip_isr+0x10>)
    1148:	681b      	ldr	r3, [r3, #0]
    114a:	2b00      	cmp	r3, #0
    114c:	d000      	beq.n	1150 <chip_isr+0xc>
		gpfIsr();
    114e:	4798      	blx	r3
	}
}
    1150:	bd10      	pop	{r4, pc}
    1152:	46c0      	nop			; (mov r8, r8)
    1154:	200000d4 	.word	0x200000d4

00001158 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    1158:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
    115a:	1e44      	subs	r4, r0, #1
    115c:	2800      	cmp	r0, #0
    115e:	d004      	beq.n	116a <nm_bsp_sleep+0x12>
		delay_ms(1);
    1160:	4d02      	ldr	r5, [pc, #8]	; (116c <nm_bsp_sleep+0x14>)
    1162:	2001      	movs	r0, #1
    1164:	47a8      	blx	r5
	while (u32TimeMsec--) {
    1166:	3c01      	subs	r4, #1
    1168:	d2fb      	bcs.n	1162 <nm_bsp_sleep+0xa>
	}
}
    116a:	bd70      	pop	{r4, r5, r6, pc}
    116c:	00001119 	.word	0x00001119

00001170 <nm_bsp_reset>:
{
    1170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1172:	4c07      	ldr	r4, [pc, #28]	; (1190 <nm_bsp_reset+0x20>)
    1174:	2720      	movs	r7, #32
    1176:	6167      	str	r7, [r4, #20]
    1178:	2640      	movs	r6, #64	; 0x40
    117a:	6166      	str	r6, [r4, #20]
	nm_bsp_sleep(100);
    117c:	2064      	movs	r0, #100	; 0x64
    117e:	4d05      	ldr	r5, [pc, #20]	; (1194 <nm_bsp_reset+0x24>)
    1180:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    1182:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(100);
    1184:	2064      	movs	r0, #100	; 0x64
    1186:	47a8      	blx	r5
    1188:	61a6      	str	r6, [r4, #24]
	nm_bsp_sleep(100);
    118a:	2064      	movs	r0, #100	; 0x64
    118c:	47a8      	blx	r5
}
    118e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1190:	41004480 	.word	0x41004480
    1194:	00001159 	.word	0x00001159

00001198 <nm_bsp_init>:
{
    1198:	b570      	push	{r4, r5, r6, lr}
    119a:	b082      	sub	sp, #8
	gpfIsr = NULL;
    119c:	2300      	movs	r3, #0
    119e:	4a15      	ldr	r2, [pc, #84]	; (11f4 <nm_bsp_init+0x5c>)
    11a0:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    11a2:	ac01      	add	r4, sp, #4
    11a4:	2501      	movs	r5, #1
    11a6:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    11a8:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    11aa:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    11ac:	0021      	movs	r1, r4
    11ae:	2026      	movs	r0, #38	; 0x26
    11b0:	4e11      	ldr	r6, [pc, #68]	; (11f8 <nm_bsp_init+0x60>)
    11b2:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    11b4:	0021      	movs	r1, r4
    11b6:	2025      	movs	r0, #37	; 0x25
    11b8:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    11ba:	0021      	movs	r1, r4
    11bc:	2027      	movs	r0, #39	; 0x27
    11be:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    11c0:	4b0e      	ldr	r3, [pc, #56]	; (11fc <nm_bsp_init+0x64>)
    11c2:	2220      	movs	r2, #32
    11c4:	615a      	str	r2, [r3, #20]
    11c6:	3220      	adds	r2, #32
    11c8:	615a      	str	r2, [r3, #20]
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    11ca:	4b0d      	ldr	r3, [pc, #52]	; (1200 <nm_bsp_init+0x68>)
    11cc:	681b      	ldr	r3, [r3, #0]
    11ce:	421d      	tst	r5, r3
    11d0:	d003      	beq.n	11da <nm_bsp_init+0x42>
    11d2:	4b0b      	ldr	r3, [pc, #44]	; (1200 <nm_bsp_init+0x68>)
    11d4:	681b      	ldr	r3, [r3, #0]
    11d6:	079b      	lsls	r3, r3, #30
    11d8:	d401      	bmi.n	11de <nm_bsp_init+0x46>
	    delay_init();
    11da:	4b0a      	ldr	r3, [pc, #40]	; (1204 <nm_bsp_init+0x6c>)
    11dc:	4798      	blx	r3
	nm_bsp_reset();
    11de:	4b0a      	ldr	r3, [pc, #40]	; (1208 <nm_bsp_init+0x70>)
    11e0:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    11e2:	2201      	movs	r2, #1
    11e4:	4b09      	ldr	r3, [pc, #36]	; (120c <nm_bsp_init+0x74>)
    11e6:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    11e8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    11ec:	b662      	cpsie	i
}
    11ee:	2000      	movs	r0, #0
    11f0:	b002      	add	sp, #8
    11f2:	bd70      	pop	{r4, r5, r6, pc}
    11f4:	200000d4 	.word	0x200000d4
    11f8:	00004539 	.word	0x00004539
    11fc:	41004480 	.word	0x41004480
    1200:	e000e010 	.word	0xe000e010
    1204:	000010d9 	.word	0x000010d9
    1208:	00001171 	.word	0x00001171
    120c:	2000000a 	.word	0x2000000a

00001210 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    1210:	b510      	push	{r4, lr}
    1212:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    1214:	4b0e      	ldr	r3, [pc, #56]	; (1250 <nm_bsp_register_isr+0x40>)
    1216:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    1218:	ac01      	add	r4, sp, #4
    121a:	0020      	movs	r0, r4
    121c:	4b0d      	ldr	r3, [pc, #52]	; (1254 <nm_bsp_register_isr+0x44>)
    121e:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    1220:	2324      	movs	r3, #36	; 0x24
    1222:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    1224:	2300      	movs	r3, #0
    1226:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    1228:	3301      	adds	r3, #1
    122a:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    122c:	3301      	adds	r3, #1
    122e:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    1230:	0021      	movs	r1, r4
    1232:	2004      	movs	r0, #4
    1234:	4b08      	ldr	r3, [pc, #32]	; (1258 <nm_bsp_register_isr+0x48>)
    1236:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    1238:	2200      	movs	r2, #0
    123a:	2104      	movs	r1, #4
    123c:	4807      	ldr	r0, [pc, #28]	; (125c <nm_bsp_register_isr+0x4c>)
    123e:	4b08      	ldr	r3, [pc, #32]	; (1260 <nm_bsp_register_isr+0x50>)
    1240:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    1242:	2100      	movs	r1, #0
    1244:	2004      	movs	r0, #4
    1246:	4b07      	ldr	r3, [pc, #28]	; (1264 <nm_bsp_register_isr+0x54>)
    1248:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    124a:	b004      	add	sp, #16
    124c:	bd10      	pop	{r4, pc}
    124e:	46c0      	nop			; (mov r8, r8)
    1250:	200000d4 	.word	0x200000d4
    1254:	000044ad 	.word	0x000044ad
    1258:	000044c1 	.word	0x000044c1
    125c:	00001145 	.word	0x00001145
    1260:	00004369 	.word	0x00004369
    1264:	00004395 	.word	0x00004395

00001268 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    1268:	b510      	push	{r4, lr}
	if (u8Enable) {
    126a:	2800      	cmp	r0, #0
    126c:	d104      	bne.n	1278 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    126e:	2100      	movs	r1, #0
    1270:	2004      	movs	r0, #4
    1272:	4b04      	ldr	r3, [pc, #16]	; (1284 <nm_bsp_interrupt_ctrl+0x1c>)
    1274:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    1276:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    1278:	2100      	movs	r1, #0
    127a:	2004      	movs	r0, #4
    127c:	4b02      	ldr	r3, [pc, #8]	; (1288 <nm_bsp_interrupt_ctrl+0x20>)
    127e:	4798      	blx	r3
    1280:	e7f9      	b.n	1276 <nm_bsp_interrupt_ctrl+0xe>
    1282:	46c0      	nop			; (mov r8, r8)
    1284:	000043b5 	.word	0x000043b5
    1288:	00004395 	.word	0x00004395

0000128c <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    128c:	b530      	push	{r4, r5, lr}
    128e:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    1290:	4c30      	ldr	r4, [pc, #192]	; (1354 <nm_bus_init+0xc8>)
    1292:	2305      	movs	r3, #5
    1294:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    1296:	2300      	movs	r3, #0
    1298:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    129a:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    129c:	a901      	add	r1, sp, #4
    129e:	2201      	movs	r2, #1
    12a0:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    12a2:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    12a4:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    12a6:	2005      	movs	r0, #5
    12a8:	4b2b      	ldr	r3, [pc, #172]	; (1358 <nm_bus_init+0xcc>)
    12aa:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    12ac:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    12ae:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    12b0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    12b2:	2900      	cmp	r1, #0
    12b4:	d104      	bne.n	12c0 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
    12b6:	0953      	lsrs	r3, r2, #5
    12b8:	01db      	lsls	r3, r3, #7
    12ba:	4928      	ldr	r1, [pc, #160]	; (135c <nm_bus_init+0xd0>)
    12bc:	468c      	mov	ip, r1
    12be:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    12c0:	211f      	movs	r1, #31
    12c2:	4011      	ands	r1, r2
    12c4:	2201      	movs	r2, #1
    12c6:	0010      	movs	r0, r2
    12c8:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    12ca:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    12cc:	ac02      	add	r4, sp, #8
    12ce:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    12d0:	2300      	movs	r3, #0
    12d2:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    12d4:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    12d6:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    12d8:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    12da:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    12dc:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    12de:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    12e0:	3223      	adds	r2, #35	; 0x23
    12e2:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    12e4:	3a18      	subs	r2, #24
    12e6:	2100      	movs	r1, #0
    12e8:	a808      	add	r0, sp, #32
    12ea:	4b1d      	ldr	r3, [pc, #116]	; (1360 <nm_bus_init+0xd4>)
    12ec:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
    12ee:	2380      	movs	r3, #128	; 0x80
    12f0:	025b      	lsls	r3, r3, #9
    12f2:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    12f4:	4b1b      	ldr	r3, [pc, #108]	; (1364 <nm_bus_init+0xd8>)
    12f6:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    12f8:	2301      	movs	r3, #1
    12fa:	425b      	negs	r3, r3
    12fc:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    12fe:	4b1a      	ldr	r3, [pc, #104]	; (1368 <nm_bus_init+0xdc>)
    1300:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    1302:	4b1a      	ldr	r3, [pc, #104]	; (136c <nm_bus_init+0xe0>)
    1304:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    1306:	4b1a      	ldr	r3, [pc, #104]	; (1370 <nm_bus_init+0xe4>)
    1308:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    130a:	0022      	movs	r2, r4
    130c:	4919      	ldr	r1, [pc, #100]	; (1374 <nm_bus_init+0xe8>)
    130e:	481a      	ldr	r0, [pc, #104]	; (1378 <nm_bus_init+0xec>)
    1310:	4b1a      	ldr	r3, [pc, #104]	; (137c <nm_bus_init+0xf0>)
    1312:	4798      	blx	r3
    1314:	2800      	cmp	r0, #0
    1316:	d11a      	bne.n	134e <nm_bus_init+0xc2>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1318:	4d17      	ldr	r5, [pc, #92]	; (1378 <nm_bus_init+0xec>)
    131a:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    131c:	0020      	movs	r0, r4
    131e:	4b18      	ldr	r3, [pc, #96]	; (1380 <nm_bus_init+0xf4>)
    1320:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1322:	231f      	movs	r3, #31
    1324:	4018      	ands	r0, r3
    1326:	3b1e      	subs	r3, #30
    1328:	4083      	lsls	r3, r0
    132a:	4a16      	ldr	r2, [pc, #88]	; (1384 <nm_bus_init+0xf8>)
    132c:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    132e:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1330:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    1332:	2b00      	cmp	r3, #0
    1334:	d1fc      	bne.n	1330 <nm_bus_init+0xa4>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1336:	6823      	ldr	r3, [r4, #0]
    1338:	2202      	movs	r2, #2
    133a:	4313      	orrs	r3, r2
    133c:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
    133e:	4b12      	ldr	r3, [pc, #72]	; (1388 <nm_bus_init+0xfc>)
    1340:	4798      	blx	r3
	nm_bsp_sleep(1);
    1342:	2001      	movs	r0, #1
    1344:	4b11      	ldr	r3, [pc, #68]	; (138c <nm_bus_init+0x100>)
    1346:	4798      	blx	r3
#endif
	return result;
    1348:	2000      	movs	r0, #0
}
    134a:	b011      	add	sp, #68	; 0x44
    134c:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
    134e:	2006      	movs	r0, #6
    1350:	4240      	negs	r0, r0
    1352:	e7fa      	b.n	134a <nm_bus_init+0xbe>
    1354:	20000280 	.word	0x20000280
    1358:	00004539 	.word	0x00004539
    135c:	41004400 	.word	0x41004400
    1360:	00009833 	.word	0x00009833
    1364:	00040003 	.word	0x00040003
    1368:	00060003 	.word	0x00060003
    136c:	00070003 	.word	0x00070003
    1370:	00b71b00 	.word	0x00b71b00
    1374:	42000800 	.word	0x42000800
    1378:	20000284 	.word	0x20000284
    137c:	000049a1 	.word	0x000049a1
    1380:	00004911 	.word	0x00004911
    1384:	e000e100 	.word	0xe000e100
    1388:	00001171 	.word	0x00001171
    138c:	00001159 	.word	0x00001159

00001390 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    1390:	b5f0      	push	{r4, r5, r6, r7, lr}
    1392:	46de      	mov	lr, fp
    1394:	4657      	mov	r7, sl
    1396:	464e      	mov	r6, r9
    1398:	4645      	mov	r5, r8
    139a:	b5e0      	push	{r5, r6, r7, lr}
    139c:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
    139e:	2803      	cmp	r0, #3
    13a0:	d000      	beq.n	13a4 <nm_bus_ioctl+0x14>
    13a2:	e075      	b.n	1490 <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    13a4:	680e      	ldr	r6, [r1, #0]
    13a6:	684d      	ldr	r5, [r1, #4]
    13a8:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
    13aa:	2200      	movs	r2, #0
    13ac:	466b      	mov	r3, sp
    13ae:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    13b0:	2d00      	cmp	r5, #0
    13b2:	d027      	beq.n	1404 <nm_bus_ioctl+0x74>
    13b4:	2c00      	cmp	r4, #0
    13b6:	d065      	beq.n	1484 <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
    13b8:	2e00      	cmp	r6, #0
    13ba:	d100      	bne.n	13be <nm_bus_ioctl+0x2e>
    13bc:	e077      	b.n	14ae <nm_bus_ioctl+0x11e>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    13be:	2300      	movs	r3, #0
    13c0:	4698      	mov	r8, r3
    13c2:	2300      	movs	r3, #0
    13c4:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
    13c6:	2201      	movs	r2, #1
    13c8:	493b      	ldr	r1, [pc, #236]	; (14b8 <nm_bus_ioctl+0x128>)
    13ca:	483c      	ldr	r0, [pc, #240]	; (14bc <nm_bus_ioctl+0x12c>)
    13cc:	4b3c      	ldr	r3, [pc, #240]	; (14c0 <nm_bus_ioctl+0x130>)
    13ce:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    13d0:	4b3a      	ldr	r3, [pc, #232]	; (14bc <nm_bus_ioctl+0x12c>)
    13d2:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
    13d4:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
    13d6:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    13d8:	4699      	mov	r9, r3
			pu8Miso++;
    13da:	4659      	mov	r1, fp
    13dc:	424b      	negs	r3, r1
    13de:	4159      	adcs	r1, r3
    13e0:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
    13e2:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    13e4:	4653      	mov	r3, sl
    13e6:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    13e8:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
    13ea:	4239      	tst	r1, r7
    13ec:	d0fc      	beq.n	13e8 <nm_bus_ioctl+0x58>
    13ee:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    13f0:	4239      	tst	r1, r7
    13f2:	d0fc      	beq.n	13ee <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    13f4:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    13f6:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
    13f8:	4211      	tst	r1, r2
    13fa:	d0fc      	beq.n	13f6 <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    13fc:	4649      	mov	r1, r9
    13fe:	7989      	ldrb	r1, [r1, #6]
    1400:	468c      	mov	ip, r1
    1402:	e011      	b.n	1428 <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    1404:	2e00      	cmp	r6, #0
    1406:	d03a      	beq.n	147e <nm_bus_ioctl+0xee>
    1408:	2c00      	cmp	r4, #0
    140a:	d03e      	beq.n	148a <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    140c:	2300      	movs	r3, #0
    140e:	4698      	mov	r8, r3
		u8SkipMiso = 1;
    1410:	3301      	adds	r3, #1
    1412:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
    1414:	466b      	mov	r3, sp
    1416:	1ddd      	adds	r5, r3, #7
    1418:	e7d5      	b.n	13c6 <nm_bus_ioctl+0x36>
    141a:	4660      	mov	r0, ip
    141c:	2801      	cmp	r0, #1
    141e:	d00d      	beq.n	143c <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1420:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1422:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    1424:	2900      	cmp	r1, #0
    1426:	d00d      	beq.n	1444 <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1428:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    142a:	4211      	tst	r1, r2
    142c:	d0fc      	beq.n	1428 <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    142e:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
    1430:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1432:	4210      	tst	r0, r2
    1434:	d0f1      	beq.n	141a <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1436:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    1438:	311e      	adds	r1, #30
    143a:	e7ee      	b.n	141a <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    143c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    143e:	05c0      	lsls	r0, r0, #23
    1440:	0dc0      	lsrs	r0, r0, #23
    1442:	e7ef      	b.n	1424 <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
    1444:	7028      	strb	r0, [r5, #0]
		u16Sz--;
    1446:	3c01      	subs	r4, #1
    1448:	b2a4      	uxth	r4, r4
			pu8Miso++;
    144a:	445d      	add	r5, fp
			pu8Mosi++;
    144c:	4643      	mov	r3, r8
    144e:	4259      	negs	r1, r3
    1450:	414b      	adcs	r3, r1
    1452:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
    1454:	2c00      	cmp	r4, #0
    1456:	d1c4      	bne.n	13e2 <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1458:	4b18      	ldr	r3, [pc, #96]	; (14bc <nm_bus_ioctl+0x12c>)
    145a:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
    145c:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    145e:	7e0b      	ldrb	r3, [r1, #24]
    1460:	4213      	tst	r3, r2
    1462:	d0fc      	beq.n	145e <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
    1464:	2200      	movs	r2, #0
    1466:	4914      	ldr	r1, [pc, #80]	; (14b8 <nm_bus_ioctl+0x128>)
    1468:	4814      	ldr	r0, [pc, #80]	; (14bc <nm_bus_ioctl+0x12c>)
    146a:	4b15      	ldr	r3, [pc, #84]	; (14c0 <nm_bus_ioctl+0x130>)
    146c:	4798      	blx	r3
	return M2M_SUCCESS;
    146e:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
    1470:	b003      	add	sp, #12
    1472:	bc3c      	pop	{r2, r3, r4, r5}
    1474:	4690      	mov	r8, r2
    1476:	4699      	mov	r9, r3
    1478:	46a2      	mov	sl, r4
    147a:	46ab      	mov	fp, r5
    147c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
    147e:	200f      	movs	r0, #15
    1480:	4240      	negs	r0, r0
    1482:	e7f5      	b.n	1470 <nm_bus_ioctl+0xe0>
    1484:	200f      	movs	r0, #15
    1486:	4240      	negs	r0, r0
    1488:	e7f2      	b.n	1470 <nm_bus_ioctl+0xe0>
    148a:	200f      	movs	r0, #15
    148c:	4240      	negs	r0, r0
		break;
    148e:	e7ef      	b.n	1470 <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
    1490:	220e      	movs	r2, #14
    1492:	32ff      	adds	r2, #255	; 0xff
    1494:	490b      	ldr	r1, [pc, #44]	; (14c4 <nm_bus_ioctl+0x134>)
    1496:	480c      	ldr	r0, [pc, #48]	; (14c8 <nm_bus_ioctl+0x138>)
    1498:	4b0c      	ldr	r3, [pc, #48]	; (14cc <nm_bus_ioctl+0x13c>)
    149a:	4798      	blx	r3
    149c:	480c      	ldr	r0, [pc, #48]	; (14d0 <nm_bus_ioctl+0x140>)
    149e:	4b0d      	ldr	r3, [pc, #52]	; (14d4 <nm_bus_ioctl+0x144>)
    14a0:	4798      	blx	r3
    14a2:	200d      	movs	r0, #13
    14a4:	4b0c      	ldr	r3, [pc, #48]	; (14d8 <nm_bus_ioctl+0x148>)
    14a6:	4798      	blx	r3
			s8Ret = -1;
    14a8:	2001      	movs	r0, #1
    14aa:	4240      	negs	r0, r0
	return s8Ret;
    14ac:	e7e0      	b.n	1470 <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
    14ae:	2301      	movs	r3, #1
    14b0:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
    14b2:	466b      	mov	r3, sp
    14b4:	1dde      	adds	r6, r3, #7
    14b6:	e784      	b.n	13c2 <nm_bus_ioctl+0x32>
    14b8:	20000280 	.word	0x20000280
    14bc:	20000284 	.word	0x20000284
    14c0:	00004b79 	.word	0x00004b79
    14c4:	0000ae74 	.word	0x0000ae74
    14c8:	0000ae84 	.word	0x0000ae84
    14cc:	00009995 	.word	0x00009995
    14d0:	0000ae98 	.word	0x0000ae98
    14d4:	00009ab1 	.word	0x00009ab1
    14d8:	000099c9 	.word	0x000099c9

000014dc <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    14dc:	b530      	push	{r4, r5, lr}
    14de:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    14e0:	ab01      	add	r3, sp, #4
    14e2:	2200      	movs	r2, #0
    14e4:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
    14e6:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    14e8:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
    14ea:	4d13      	ldr	r5, [pc, #76]	; (1538 <nm_bus_deinit+0x5c>)
    14ec:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    14ee:	0020      	movs	r0, r4
    14f0:	4b12      	ldr	r3, [pc, #72]	; (153c <nm_bus_deinit+0x60>)
    14f2:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    14f4:	231f      	movs	r3, #31
    14f6:	4018      	ands	r0, r3
    14f8:	3b1e      	subs	r3, #30
    14fa:	4083      	lsls	r3, r0
    14fc:	2280      	movs	r2, #128	; 0x80
    14fe:	4910      	ldr	r1, [pc, #64]	; (1540 <nm_bus_deinit+0x64>)
    1500:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1502:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1504:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    1506:	2b00      	cmp	r3, #0
    1508:	d1fc      	bne.n	1504 <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    150a:	338f      	adds	r3, #143	; 0x8f
    150c:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    150e:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1510:	6823      	ldr	r3, [r4, #0]
    1512:	2202      	movs	r2, #2
    1514:	4393      	bics	r3, r2
    1516:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    1518:	a901      	add	r1, sp, #4
    151a:	2006      	movs	r0, #6
    151c:	4c09      	ldr	r4, [pc, #36]	; (1544 <nm_bus_deinit+0x68>)
    151e:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    1520:	a901      	add	r1, sp, #4
    1522:	2004      	movs	r0, #4
    1524:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    1526:	a901      	add	r1, sp, #4
    1528:	2007      	movs	r0, #7
    152a:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    152c:	a901      	add	r1, sp, #4
    152e:	2005      	movs	r0, #5
    1530:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    1532:	2000      	movs	r0, #0
    1534:	b003      	add	sp, #12
    1536:	bd30      	pop	{r4, r5, pc}
    1538:	20000284 	.word	0x20000284
    153c:	00004911 	.word	0x00004911
    1540:	e000e100 	.word	0xe000e100
    1544:	00004539 	.word	0x00004539

00001548 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    1548:	2a00      	cmp	r2, #0
    154a:	d006      	beq.n	155a <m2m_memcpy+0x12>
    154c:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
    154e:	780b      	ldrb	r3, [r1, #0]
    1550:	7003      	strb	r3, [r0, #0]
		pDst++;
    1552:	3001      	adds	r0, #1
		pSrc++;
    1554:	3101      	adds	r1, #1
	}while(--sz);
    1556:	4290      	cmp	r0, r2
    1558:	d1f9      	bne.n	154e <m2m_memcpy+0x6>
}
    155a:	4770      	bx	lr

0000155c <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    155c:	2a00      	cmp	r2, #0
    155e:	d004      	beq.n	156a <m2m_memset+0xe>
    1560:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
    1562:	7001      	strb	r1, [r0, #0]
		pBuf++;
    1564:	3001      	adds	r0, #1
	}while(--sz);
    1566:	4290      	cmp	r0, r2
    1568:	d1fb      	bne.n	1562 <m2m_memset+0x6>
}
    156a:	4770      	bx	lr

0000156c <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    156c:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
    156e:	7802      	ldrb	r2, [r0, #0]
    1570:	2a00      	cmp	r2, #0
    1572:	d007      	beq.n	1584 <m2m_strlen+0x18>
    1574:	2000      	movs	r0, #0
	{
		u16StrLen ++;
    1576:	3001      	adds	r0, #1
    1578:	b280      	uxth	r0, r0
		pcStr++;
    157a:	3301      	adds	r3, #1
	while(*pcStr)
    157c:	781a      	ldrb	r2, [r3, #0]
    157e:	2a00      	cmp	r2, #0
    1580:	d1f9      	bne.n	1576 <m2m_strlen+0xa>
	}
	return u16StrLen;
}
    1582:	4770      	bx	lr
	uint16	u16StrLen = 0;
    1584:	2000      	movs	r0, #0
    1586:	e7fc      	b.n	1582 <m2m_strlen+0x16>

00001588 <isr>:

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
    1588:	4a02      	ldr	r2, [pc, #8]	; (1594 <isr+0xc>)
    158a:	78d3      	ldrb	r3, [r2, #3]
    158c:	3301      	adds	r3, #1
    158e:	b2db      	uxtb	r3, r3
    1590:	70d3      	strb	r3, [r2, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
    1592:	4770      	bx	lr
    1594:	200002c0 	.word	0x200002c0

00001598 <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    1598:	4770      	bx	lr
	...

0000159c <hif_set_rx_done>:
{
    159c:	b500      	push	{lr}
    159e:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
    15a0:	2200      	movs	r2, #0
    15a2:	4b0a      	ldr	r3, [pc, #40]	; (15cc <hif_set_rx_done+0x30>)
    15a4:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
    15a6:	2001      	movs	r0, #1
    15a8:	4b09      	ldr	r3, [pc, #36]	; (15d0 <hif_set_rx_done+0x34>)
    15aa:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    15ac:	a901      	add	r1, sp, #4
    15ae:	4809      	ldr	r0, [pc, #36]	; (15d4 <hif_set_rx_done+0x38>)
    15b0:	4b09      	ldr	r3, [pc, #36]	; (15d8 <hif_set_rx_done+0x3c>)
    15b2:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    15b4:	2800      	cmp	r0, #0
    15b6:	d001      	beq.n	15bc <hif_set_rx_done+0x20>
}
    15b8:	b003      	add	sp, #12
    15ba:	bd00      	pop	{pc}
	reg |= NBIT1;
    15bc:	2102      	movs	r1, #2
    15be:	9b01      	ldr	r3, [sp, #4]
    15c0:	4319      	orrs	r1, r3
    15c2:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    15c4:	4803      	ldr	r0, [pc, #12]	; (15d4 <hif_set_rx_done+0x38>)
    15c6:	4b05      	ldr	r3, [pc, #20]	; (15dc <hif_set_rx_done+0x40>)
    15c8:	4798      	blx	r3
    15ca:	e7f5      	b.n	15b8 <hif_set_rx_done+0x1c>
    15cc:	200002c0 	.word	0x200002c0
    15d0:	00001269 	.word	0x00001269
    15d4:	00001070 	.word	0x00001070
    15d8:	000029a5 	.word	0x000029a5
    15dc:	000029b1 	.word	0x000029b1

000015e0 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    15e0:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
    15e2:	4b0c      	ldr	r3, [pc, #48]	; (1614 <hif_chip_wake+0x34>)
    15e4:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    15e6:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
    15e8:	2b00      	cmp	r3, #0
    15ea:	d10d      	bne.n	1608 <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    15ec:	4b09      	ldr	r3, [pc, #36]	; (1614 <hif_chip_wake+0x34>)
    15ee:	785b      	ldrb	r3, [r3, #1]
    15f0:	2b00      	cmp	r3, #0
    15f2:	d103      	bne.n	15fc <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    15f4:	4b07      	ldr	r3, [pc, #28]	; (1614 <hif_chip_wake+0x34>)
    15f6:	781b      	ldrb	r3, [r3, #0]
    15f8:	2b00      	cmp	r3, #0
    15fa:	d106      	bne.n	160a <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    15fc:	4a05      	ldr	r2, [pc, #20]	; (1614 <hif_chip_wake+0x34>)
    15fe:	7853      	ldrb	r3, [r2, #1]
    1600:	3301      	adds	r3, #1
    1602:	b2db      	uxtb	r3, r3
    1604:	7053      	strb	r3, [r2, #1]
    1606:	2000      	movs	r0, #0
ERR1:
	return ret;
}
    1608:	bd10      	pop	{r4, pc}
			ret = chip_wake();
    160a:	4b03      	ldr	r3, [pc, #12]	; (1618 <hif_chip_wake+0x38>)
    160c:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    160e:	2800      	cmp	r0, #0
    1610:	d0f4      	beq.n	15fc <hif_chip_wake+0x1c>
    1612:	e7f9      	b.n	1608 <hif_chip_wake+0x28>
    1614:	200002c0 	.word	0x200002c0
    1618:	0000268d 	.word	0x0000268d

0000161c <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
    161c:	4b05      	ldr	r3, [pc, #20]	; (1634 <hif_chip_sleep_sc+0x18>)
    161e:	785b      	ldrb	r3, [r3, #1]
    1620:	2b00      	cmp	r3, #0
    1622:	d004      	beq.n	162e <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
    1624:	4a03      	ldr	r2, [pc, #12]	; (1634 <hif_chip_sleep_sc+0x18>)
    1626:	7853      	ldrb	r3, [r2, #1]
    1628:	3b01      	subs	r3, #1
    162a:	b2db      	uxtb	r3, r3
    162c:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
    162e:	2000      	movs	r0, #0
    1630:	4770      	bx	lr
    1632:	46c0      	nop			; (mov r8, r8)
    1634:	200002c0 	.word	0x200002c0

00001638 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    1638:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
    163a:	4b0b      	ldr	r3, [pc, #44]	; (1668 <hif_chip_sleep+0x30>)
    163c:	785b      	ldrb	r3, [r3, #1]
    163e:	2b00      	cmp	r3, #0
    1640:	d004      	beq.n	164c <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
    1642:	4a09      	ldr	r2, [pc, #36]	; (1668 <hif_chip_sleep+0x30>)
    1644:	7853      	ldrb	r3, [r2, #1]
    1646:	3b01      	subs	r3, #1
    1648:	b2db      	uxtb	r3, r3
    164a:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    164c:	4b06      	ldr	r3, [pc, #24]	; (1668 <hif_chip_sleep+0x30>)
    164e:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
    1650:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
    1652:	2b00      	cmp	r3, #0
    1654:	d103      	bne.n	165e <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    1656:	4b04      	ldr	r3, [pc, #16]	; (1668 <hif_chip_sleep+0x30>)
    1658:	781b      	ldrb	r3, [r3, #0]
    165a:	2b00      	cmp	r3, #0
    165c:	d100      	bne.n	1660 <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
    165e:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
    1660:	4b02      	ldr	r3, [pc, #8]	; (166c <hif_chip_sleep+0x34>)
    1662:	4798      	blx	r3
    1664:	e7fb      	b.n	165e <hif_chip_sleep+0x26>
    1666:	46c0      	nop			; (mov r8, r8)
    1668:	200002c0 	.word	0x200002c0
    166c:	00002625 	.word	0x00002625

00001670 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    1670:	b5f0      	push	{r4, r5, r6, r7, lr}
    1672:	46de      	mov	lr, fp
    1674:	4657      	mov	r7, sl
    1676:	b580      	push	{r7, lr}
    1678:	b089      	sub	sp, #36	; 0x24
    167a:	4683      	mov	fp, r0
    167c:	468a      	mov	sl, r1
    167e:	9201      	str	r2, [sp, #4]
    1680:	9300      	str	r3, [sp, #0]
    1682:	ab10      	add	r3, sp, #64	; 0x40
    1684:	cb80      	ldmia	r3!, {r7}
    1686:	881e      	ldrh	r6, [r3, #0]
    1688:	ab12      	add	r3, sp, #72	; 0x48
    168a:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    168c:	227f      	movs	r2, #127	; 0x7f
    168e:	400a      	ands	r2, r1
    1690:	ab07      	add	r3, sp, #28
    1692:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    1694:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    1696:	2208      	movs	r2, #8
    1698:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    169a:	2f00      	cmp	r7, #0
    169c:	d03d      	beq.n	171a <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    169e:	885a      	ldrh	r2, [r3, #2]
    16a0:	1992      	adds	r2, r2, r6
    16a2:	18aa      	adds	r2, r5, r2
    16a4:	b292      	uxth	r2, r2
    16a6:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
    16a8:	4b69      	ldr	r3, [pc, #420]	; (1850 <hif_send+0x1e0>)
    16aa:	4798      	blx	r3
    16ac:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    16ae:	d000      	beq.n	16b2 <hif_send+0x42>
    16b0:	e0c1      	b.n	1836 <hif_send+0x1c6>
	{
		volatile uint32 reg, dma_addr = 0;
    16b2:	2300      	movs	r3, #0
    16b4:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
    16b6:	aa02      	add	r2, sp, #8
    16b8:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    16ba:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
    16bc:	9b04      	ldr	r3, [sp, #16]
    16be:	465a      	mov	r2, fp
    16c0:	431a      	orrs	r2, r3
    16c2:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
    16c4:	9a04      	ldr	r2, [sp, #16]
    16c6:	4653      	mov	r3, sl
    16c8:	021b      	lsls	r3, r3, #8
    16ca:	4313      	orrs	r3, r2
    16cc:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
    16ce:	ab07      	add	r3, sp, #28
    16d0:	885b      	ldrh	r3, [r3, #2]
    16d2:	9a04      	ldr	r2, [sp, #16]
    16d4:	041b      	lsls	r3, r3, #16
    16d6:	4313      	orrs	r3, r2
    16d8:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    16da:	9904      	ldr	r1, [sp, #16]
    16dc:	485d      	ldr	r0, [pc, #372]	; (1854 <hif_send+0x1e4>)
    16de:	4b5e      	ldr	r3, [pc, #376]	; (1858 <hif_send+0x1e8>)
    16e0:	4798      	blx	r3
    16e2:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    16e4:	d157      	bne.n	1796 <hif_send+0x126>

		reg = 0UL;
    16e6:	2300      	movs	r3, #0
    16e8:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
    16ea:	9b04      	ldr	r3, [sp, #16]
    16ec:	2202      	movs	r2, #2
    16ee:	4313      	orrs	r3, r2
    16f0:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    16f2:	9904      	ldr	r1, [sp, #16]
    16f4:	4859      	ldr	r0, [pc, #356]	; (185c <hif_send+0x1ec>)
    16f6:	4b58      	ldr	r3, [pc, #352]	; (1858 <hif_send+0x1e8>)
    16f8:	4798      	blx	r3
    16fa:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    16fc:	d14b      	bne.n	1796 <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    16fe:	2200      	movs	r2, #0
    1700:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    1702:	ab02      	add	r3, sp, #8
    1704:	80da      	strh	r2, [r3, #6]
    1706:	3306      	adds	r3, #6
    1708:	881b      	ldrh	r3, [r3, #0]
    170a:	b29b      	uxth	r3, r3
    170c:	4a54      	ldr	r2, [pc, #336]	; (1860 <hif_send+0x1f0>)
    170e:	4293      	cmp	r3, r2
    1710:	d849      	bhi.n	17a6 <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    1712:	4c54      	ldr	r4, [pc, #336]	; (1864 <hif_send+0x1f4>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    1714:	4b54      	ldr	r3, [pc, #336]	; (1868 <hif_send+0x1f8>)
    1716:	469a      	mov	sl, r3
    1718:	e017      	b.n	174a <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
    171a:	ab07      	add	r3, sp, #28
    171c:	885a      	ldrh	r2, [r3, #2]
    171e:	9900      	ldr	r1, [sp, #0]
    1720:	468c      	mov	ip, r1
    1722:	4462      	add	r2, ip
    1724:	b292      	uxth	r2, r2
    1726:	805a      	strh	r2, [r3, #2]
    1728:	e7be      	b.n	16a8 <hif_send+0x38>
				nm_bsp_sleep(1);
    172a:	2001      	movs	r0, #1
    172c:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
    172e:	9b04      	ldr	r3, [sp, #16]
    1730:	079b      	lsls	r3, r3, #30
    1732:	d528      	bpl.n	1786 <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
    1734:	ab02      	add	r3, sp, #8
    1736:	88da      	ldrh	r2, [r3, #6]
    1738:	3201      	adds	r2, #1
    173a:	b292      	uxth	r2, r2
    173c:	80da      	strh	r2, [r3, #6]
    173e:	3306      	adds	r3, #6
    1740:	881b      	ldrh	r3, [r3, #0]
    1742:	b29b      	uxth	r3, r3
    1744:	4a46      	ldr	r2, [pc, #280]	; (1860 <hif_send+0x1f0>)
    1746:	4293      	cmp	r3, r2
    1748:	d82d      	bhi.n	17a6 <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    174a:	a904      	add	r1, sp, #16
    174c:	4843      	ldr	r0, [pc, #268]	; (185c <hif_send+0x1ec>)
    174e:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
    1750:	2800      	cmp	r0, #0
    1752:	d128      	bne.n	17a6 <hif_send+0x136>
			if(cnt >= 500) {
    1754:	ab02      	add	r3, sp, #8
    1756:	3306      	adds	r3, #6
    1758:	881b      	ldrh	r3, [r3, #0]
    175a:	b29b      	uxth	r3, r3
    175c:	22f4      	movs	r2, #244	; 0xf4
    175e:	32ff      	adds	r2, #255	; 0xff
    1760:	4293      	cmp	r3, r2
    1762:	d9e4      	bls.n	172e <hif_send+0xbe>
				if(cnt < 501) {
    1764:	ab02      	add	r3, sp, #8
    1766:	3306      	adds	r3, #6
    1768:	881b      	ldrh	r3, [r3, #0]
    176a:	b29b      	uxth	r3, r3
    176c:	3201      	adds	r2, #1
    176e:	4293      	cmp	r3, r2
    1770:	d8db      	bhi.n	172a <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
    1772:	483e      	ldr	r0, [pc, #248]	; (186c <hif_send+0x1fc>)
    1774:	4b3e      	ldr	r3, [pc, #248]	; (1870 <hif_send+0x200>)
    1776:	4798      	blx	r3
    1778:	483e      	ldr	r0, [pc, #248]	; (1874 <hif_send+0x204>)
    177a:	4b3f      	ldr	r3, [pc, #252]	; (1878 <hif_send+0x208>)
    177c:	4798      	blx	r3
    177e:	200d      	movs	r0, #13
    1780:	4b3e      	ldr	r3, [pc, #248]	; (187c <hif_send+0x20c>)
    1782:	4798      	blx	r3
    1784:	e7d1      	b.n	172a <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    1786:	a905      	add	r1, sp, #20
    1788:	483d      	ldr	r0, [pc, #244]	; (1880 <hif_send+0x210>)
    178a:	4b36      	ldr	r3, [pc, #216]	; (1864 <hif_send+0x1f4>)
    178c:	4798      	blx	r3
    178e:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
    1790:	d009      	beq.n	17a6 <hif_send+0x136>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    1792:	2300      	movs	r3, #0
    1794:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    1796:	4b3b      	ldr	r3, [pc, #236]	; (1884 <hif_send+0x214>)
    1798:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
    179a:	0020      	movs	r0, r4
    179c:	b009      	add	sp, #36	; 0x24
    179e:	bc0c      	pop	{r2, r3}
    17a0:	4692      	mov	sl, r2
    17a2:	469b      	mov	fp, r3
    17a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
    17a6:	9b05      	ldr	r3, [sp, #20]
    17a8:	2b00      	cmp	r3, #0
    17aa:	d03f      	beq.n	182c <hif_send+0x1bc>
			u32CurrAddr = dma_addr;
    17ac:	9b05      	ldr	r3, [sp, #20]
    17ae:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    17b0:	a907      	add	r1, sp, #28
    17b2:	884b      	ldrh	r3, [r1, #2]
    17b4:	b29b      	uxth	r3, r3
    17b6:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    17b8:	9806      	ldr	r0, [sp, #24]
    17ba:	2208      	movs	r2, #8
    17bc:	4b32      	ldr	r3, [pc, #200]	; (1888 <hif_send+0x218>)
    17be:	4798      	blx	r3
    17c0:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    17c2:	d1e8      	bne.n	1796 <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    17c4:	9b06      	ldr	r3, [sp, #24]
    17c6:	3308      	adds	r3, #8
    17c8:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
    17ca:	9b01      	ldr	r3, [sp, #4]
    17cc:	2b00      	cmp	r3, #0
    17ce:	d00b      	beq.n	17e8 <hif_send+0x178>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    17d0:	9806      	ldr	r0, [sp, #24]
    17d2:	9a00      	ldr	r2, [sp, #0]
    17d4:	0019      	movs	r1, r3
    17d6:	4b2c      	ldr	r3, [pc, #176]	; (1888 <hif_send+0x218>)
    17d8:	4798      	blx	r3
    17da:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    17dc:	d1db      	bne.n	1796 <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
    17de:	9b06      	ldr	r3, [sp, #24]
    17e0:	9a00      	ldr	r2, [sp, #0]
    17e2:	4694      	mov	ip, r2
    17e4:	4463      	add	r3, ip
    17e6:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
    17e8:	2f00      	cmp	r7, #0
    17ea:	d00e      	beq.n	180a <hif_send+0x19a>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    17ec:	9b06      	ldr	r3, [sp, #24]
    17ee:	9a00      	ldr	r2, [sp, #0]
    17f0:	1aad      	subs	r5, r5, r2
    17f2:	18ed      	adds	r5, r5, r3
    17f4:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    17f6:	9806      	ldr	r0, [sp, #24]
    17f8:	0032      	movs	r2, r6
    17fa:	0039      	movs	r1, r7
    17fc:	4b22      	ldr	r3, [pc, #136]	; (1888 <hif_send+0x218>)
    17fe:	4798      	blx	r3
    1800:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    1802:	d1c8      	bne.n	1796 <hif_send+0x126>
				u32CurrAddr += u16DataSize;
    1804:	9b06      	ldr	r3, [sp, #24]
    1806:	18f3      	adds	r3, r6, r3
    1808:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
    180a:	9b05      	ldr	r3, [sp, #20]
    180c:	009b      	lsls	r3, r3, #2
    180e:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
    1810:	9b04      	ldr	r3, [sp, #16]
    1812:	2202      	movs	r2, #2
    1814:	4313      	orrs	r3, r2
    1816:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    1818:	9904      	ldr	r1, [sp, #16]
    181a:	481c      	ldr	r0, [pc, #112]	; (188c <hif_send+0x21c>)
    181c:	4b0e      	ldr	r3, [pc, #56]	; (1858 <hif_send+0x1e8>)
    181e:	4798      	blx	r3
    1820:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    1822:	d1b8      	bne.n	1796 <hif_send+0x126>
 	ret = hif_chip_sleep();
    1824:	4b1a      	ldr	r3, [pc, #104]	; (1890 <hif_send+0x220>)
    1826:	4798      	blx	r3
    1828:	0004      	movs	r4, r0
	return ret;
    182a:	e7b6      	b.n	179a <hif_send+0x12a>
			ret = hif_chip_sleep();
    182c:	4b18      	ldr	r3, [pc, #96]	; (1890 <hif_send+0x220>)
    182e:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
    1830:	2403      	movs	r4, #3
    1832:	4264      	negs	r4, r4
			goto ERR2;
    1834:	e7b1      	b.n	179a <hif_send+0x12a>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    1836:	22cb      	movs	r2, #203	; 0xcb
    1838:	0052      	lsls	r2, r2, #1
    183a:	4916      	ldr	r1, [pc, #88]	; (1894 <hif_send+0x224>)
    183c:	4816      	ldr	r0, [pc, #88]	; (1898 <hif_send+0x228>)
    183e:	4b0c      	ldr	r3, [pc, #48]	; (1870 <hif_send+0x200>)
    1840:	4798      	blx	r3
    1842:	4816      	ldr	r0, [pc, #88]	; (189c <hif_send+0x22c>)
    1844:	4b0c      	ldr	r3, [pc, #48]	; (1878 <hif_send+0x208>)
    1846:	4798      	blx	r3
    1848:	200d      	movs	r0, #13
    184a:	4b0c      	ldr	r3, [pc, #48]	; (187c <hif_send+0x20c>)
    184c:	4798      	blx	r3
		goto ERR2;
    184e:	e7a4      	b.n	179a <hif_send+0x12a>
    1850:	000015e1 	.word	0x000015e1
    1854:	0000108c 	.word	0x0000108c
    1858:	000029b1 	.word	0x000029b1
    185c:	00001078 	.word	0x00001078
    1860:	000003e7 	.word	0x000003e7
    1864:	000029a5 	.word	0x000029a5
    1868:	00001159 	.word	0x00001159
    186c:	0000b1b4 	.word	0x0000b1b4
    1870:	00009995 	.word	0x00009995
    1874:	0000b1c0 	.word	0x0000b1c0
    1878:	00009ab1 	.word	0x00009ab1
    187c:	000099c9 	.word	0x000099c9
    1880:	00150400 	.word	0x00150400
    1884:	0000161d 	.word	0x0000161d
    1888:	00002a25 	.word	0x00002a25
    188c:	0000106c 	.word	0x0000106c
    1890:	00001639 	.word	0x00001639
    1894:	0000aecc 	.word	0x0000aecc
    1898:	0000ae84 	.word	0x0000ae84
    189c:	0000b1d0 	.word	0x0000b1d0

000018a0 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    18a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    18a2:	46ce      	mov	lr, r9
    18a4:	4647      	mov	r7, r8
    18a6:	b580      	push	{r7, lr}
    18a8:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	while (gstrHifCxt.u8Interrupt) {
    18aa:	4bcf      	ldr	r3, [pc, #828]	; (1be8 <hif_handle_isr+0x348>)
    18ac:	4698      	mov	r8, r3
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    18ae:	4699      	mov	r9, r3
	while (gstrHifCxt.u8Interrupt) {
    18b0:	e080      	b.n	19b4 <hif_handle_isr+0x114>
				gstrHifCxt.u32RxAddr = address;
    18b2:	4bcd      	ldr	r3, [pc, #820]	; (1be8 <hif_handle_isr+0x348>)
    18b4:	9a05      	ldr	r2, [sp, #20]
    18b6:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
    18b8:	609d      	str	r5, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    18ba:	af04      	add	r7, sp, #16
    18bc:	2204      	movs	r2, #4
    18be:	0039      	movs	r1, r7
    18c0:	9805      	ldr	r0, [sp, #20]
    18c2:	4bca      	ldr	r3, [pc, #808]	; (1bec <hif_handle_isr+0x34c>)
    18c4:	4798      	blx	r3
    18c6:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    18c8:	887b      	ldrh	r3, [r7, #2]
    18ca:	b29b      	uxth	r3, r3
    18cc:	807b      	strh	r3, [r7, #2]
				if(M2M_SUCCESS != ret)
    18ce:	2800      	cmp	r0, #0
    18d0:	d133      	bne.n	193a <hif_handle_isr+0x9a>
				if(strHif.u16Length != size)
    18d2:	ab04      	add	r3, sp, #16
    18d4:	885b      	ldrh	r3, [r3, #2]
    18d6:	b29b      	uxth	r3, r3
    18d8:	429d      	cmp	r5, r3
    18da:	d004      	beq.n	18e6 <hif_handle_isr+0x46>
					if((size - strHif.u16Length) > 4)
    18dc:	ab04      	add	r3, sp, #16
    18de:	885b      	ldrh	r3, [r3, #2]
    18e0:	1aeb      	subs	r3, r5, r3
    18e2:	2b04      	cmp	r3, #4
    18e4:	dc39      	bgt.n	195a <hif_handle_isr+0xba>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    18e6:	ab04      	add	r3, sp, #16
    18e8:	781b      	ldrb	r3, [r3, #0]
    18ea:	2b01      	cmp	r3, #1
    18ec:	d04e      	beq.n	198c <hif_handle_isr+0xec>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    18ee:	ab04      	add	r3, sp, #16
    18f0:	781b      	ldrb	r3, [r3, #0]
    18f2:	2b02      	cmp	r3, #2
    18f4:	d078      	beq.n	19e8 <hif_handle_isr+0x148>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    18f6:	ab04      	add	r3, sp, #16
    18f8:	781b      	ldrb	r3, [r3, #0]
    18fa:	2b04      	cmp	r3, #4
    18fc:	d100      	bne.n	1900 <hif_handle_isr+0x60>
    18fe:	e090      	b.n	1a22 <hif_handle_isr+0x182>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    1900:	ab04      	add	r3, sp, #16
    1902:	781b      	ldrb	r3, [r3, #0]
    1904:	2b06      	cmp	r3, #6
    1906:	d100      	bne.n	190a <hif_handle_isr+0x6a>
    1908:	e0a8      	b.n	1a5c <hif_handle_isr+0x1bc>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    190a:	ab04      	add	r3, sp, #16
    190c:	781b      	ldrb	r3, [r3, #0]
    190e:	2b07      	cmp	r3, #7
    1910:	d100      	bne.n	1914 <hif_handle_isr+0x74>
    1912:	e0bf      	b.n	1a94 <hif_handle_isr+0x1f4>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    1914:	ab04      	add	r3, sp, #16
    1916:	781b      	ldrb	r3, [r3, #0]
    1918:	2b05      	cmp	r3, #5
    191a:	d100      	bne.n	191e <hif_handle_isr+0x7e>
    191c:	e0d6      	b.n	1acc <hif_handle_isr+0x22c>
					M2M_ERR("(hif) invalid group ID\n");
    191e:	4ab4      	ldr	r2, [pc, #720]	; (1bf0 <hif_handle_isr+0x350>)
    1920:	49b4      	ldr	r1, [pc, #720]	; (1bf4 <hif_handle_isr+0x354>)
    1922:	48b5      	ldr	r0, [pc, #724]	; (1bf8 <hif_handle_isr+0x358>)
    1924:	4bb5      	ldr	r3, [pc, #724]	; (1bfc <hif_handle_isr+0x35c>)
    1926:	4798      	blx	r3
    1928:	48b5      	ldr	r0, [pc, #724]	; (1c00 <hif_handle_isr+0x360>)
    192a:	4bb6      	ldr	r3, [pc, #728]	; (1c04 <hif_handle_isr+0x364>)
    192c:	4798      	blx	r3
    192e:	200d      	movs	r0, #13
    1930:	4bb5      	ldr	r3, [pc, #724]	; (1c08 <hif_handle_isr+0x368>)
    1932:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    1934:	2406      	movs	r4, #6
    1936:	4264      	negs	r4, r4
    1938:	e116      	b.n	1b68 <hif_handle_isr+0x2c8>
					M2M_ERR("(hif) address bus fail\n");
    193a:	22d2      	movs	r2, #210	; 0xd2
    193c:	32ff      	adds	r2, #255	; 0xff
    193e:	49ad      	ldr	r1, [pc, #692]	; (1bf4 <hif_handle_isr+0x354>)
    1940:	48ad      	ldr	r0, [pc, #692]	; (1bf8 <hif_handle_isr+0x358>)
    1942:	4bae      	ldr	r3, [pc, #696]	; (1bfc <hif_handle_isr+0x35c>)
    1944:	4798      	blx	r3
    1946:	48b1      	ldr	r0, [pc, #708]	; (1c0c <hif_handle_isr+0x36c>)
    1948:	4bae      	ldr	r3, [pc, #696]	; (1c04 <hif_handle_isr+0x364>)
    194a:	4798      	blx	r3
    194c:	200d      	movs	r0, #13
    194e:	4bae      	ldr	r3, [pc, #696]	; (1c08 <hif_handle_isr+0x368>)
    1950:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    1952:	2001      	movs	r0, #1
    1954:	4bae      	ldr	r3, [pc, #696]	; (1c10 <hif_handle_isr+0x370>)
    1956:	4798      	blx	r3
    1958:	e106      	b.n	1b68 <hif_handle_isr+0x2c8>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    195a:	22ed      	movs	r2, #237	; 0xed
    195c:	0052      	lsls	r2, r2, #1
    195e:	49a5      	ldr	r1, [pc, #660]	; (1bf4 <hif_handle_isr+0x354>)
    1960:	48a5      	ldr	r0, [pc, #660]	; (1bf8 <hif_handle_isr+0x358>)
    1962:	4ca6      	ldr	r4, [pc, #664]	; (1bfc <hif_handle_isr+0x35c>)
    1964:	47a0      	blx	r4
    1966:	a904      	add	r1, sp, #16
    1968:	884a      	ldrh	r2, [r1, #2]
    196a:	b292      	uxth	r2, r2
    196c:	780b      	ldrb	r3, [r1, #0]
    196e:	b2db      	uxtb	r3, r3
    1970:	7849      	ldrb	r1, [r1, #1]
    1972:	9100      	str	r1, [sp, #0]
    1974:	0029      	movs	r1, r5
    1976:	48a7      	ldr	r0, [pc, #668]	; (1c14 <hif_handle_isr+0x374>)
    1978:	47a0      	blx	r4
    197a:	200d      	movs	r0, #13
    197c:	4ba2      	ldr	r3, [pc, #648]	; (1c08 <hif_handle_isr+0x368>)
    197e:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    1980:	2001      	movs	r0, #1
    1982:	4ba3      	ldr	r3, [pc, #652]	; (1c10 <hif_handle_isr+0x370>)
    1984:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    1986:	2406      	movs	r4, #6
    1988:	4264      	negs	r4, r4
    198a:	e0ed      	b.n	1b68 <hif_handle_isr+0x2c8>
					if(gstrHifCxt.pfWifiCb)
    198c:	4b96      	ldr	r3, [pc, #600]	; (1be8 <hif_handle_isr+0x348>)
    198e:	68db      	ldr	r3, [r3, #12]
    1990:	2b00      	cmp	r3, #0
    1992:	d01c      	beq.n	19ce <hif_handle_isr+0x12e>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1994:	4b94      	ldr	r3, [pc, #592]	; (1be8 <hif_handle_isr+0x348>)
    1996:	68db      	ldr	r3, [r3, #12]
    1998:	aa04      	add	r2, sp, #16
    199a:	7850      	ldrb	r0, [r2, #1]
    199c:	b2c0      	uxtb	r0, r0
    199e:	8851      	ldrh	r1, [r2, #2]
    19a0:	9a05      	ldr	r2, [sp, #20]
    19a2:	3208      	adds	r2, #8
    19a4:	3908      	subs	r1, #8
    19a6:	b289      	uxth	r1, r1
    19a8:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
    19aa:	4b8f      	ldr	r3, [pc, #572]	; (1be8 <hif_handle_isr+0x348>)
    19ac:	789b      	ldrb	r3, [r3, #2]
    19ae:	2b00      	cmp	r3, #0
    19b0:	d000      	beq.n	19b4 <hif_handle_isr+0x114>
    19b2:	e09c      	b.n	1aee <hif_handle_isr+0x24e>
	while (gstrHifCxt.u8Interrupt) {
    19b4:	4643      	mov	r3, r8
    19b6:	78db      	ldrb	r3, [r3, #3]
    19b8:	2b00      	cmp	r3, #0
    19ba:	d100      	bne.n	19be <hif_handle_isr+0x11e>
    19bc:	e158      	b.n	1c70 <hif_handle_isr+0x3d0>
		gstrHifCxt.u8Interrupt--;
    19be:	464b      	mov	r3, r9
    19c0:	78db      	ldrb	r3, [r3, #3]
    19c2:	3b01      	subs	r3, #1
    19c4:	b2db      	uxtb	r3, r3
    19c6:	464a      	mov	r2, r9
    19c8:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    19ca:	4e93      	ldr	r6, [pc, #588]	; (1c18 <hif_handle_isr+0x378>)
    19cc:	e0d7      	b.n	1b7e <hif_handle_isr+0x2de>
						M2M_ERR("WIFI callback is not registered\n");
    19ce:	22f3      	movs	r2, #243	; 0xf3
    19d0:	0052      	lsls	r2, r2, #1
    19d2:	4988      	ldr	r1, [pc, #544]	; (1bf4 <hif_handle_isr+0x354>)
    19d4:	4888      	ldr	r0, [pc, #544]	; (1bf8 <hif_handle_isr+0x358>)
    19d6:	4b89      	ldr	r3, [pc, #548]	; (1bfc <hif_handle_isr+0x35c>)
    19d8:	4798      	blx	r3
    19da:	4890      	ldr	r0, [pc, #576]	; (1c1c <hif_handle_isr+0x37c>)
    19dc:	4b89      	ldr	r3, [pc, #548]	; (1c04 <hif_handle_isr+0x364>)
    19de:	4798      	blx	r3
    19e0:	200d      	movs	r0, #13
    19e2:	4b89      	ldr	r3, [pc, #548]	; (1c08 <hif_handle_isr+0x368>)
    19e4:	4798      	blx	r3
    19e6:	e7e0      	b.n	19aa <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfIpCb)
    19e8:	4b7f      	ldr	r3, [pc, #508]	; (1be8 <hif_handle_isr+0x348>)
    19ea:	691b      	ldr	r3, [r3, #16]
    19ec:	2b00      	cmp	r3, #0
    19ee:	d00b      	beq.n	1a08 <hif_handle_isr+0x168>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    19f0:	4b7d      	ldr	r3, [pc, #500]	; (1be8 <hif_handle_isr+0x348>)
    19f2:	691b      	ldr	r3, [r3, #16]
    19f4:	aa04      	add	r2, sp, #16
    19f6:	7850      	ldrb	r0, [r2, #1]
    19f8:	b2c0      	uxtb	r0, r0
    19fa:	8851      	ldrh	r1, [r2, #2]
    19fc:	9a05      	ldr	r2, [sp, #20]
    19fe:	3208      	adds	r2, #8
    1a00:	3908      	subs	r1, #8
    1a02:	b289      	uxth	r1, r1
    1a04:	4798      	blx	r3
    1a06:	e7d0      	b.n	19aa <hif_handle_isr+0x10a>
						M2M_ERR("Scoket callback is not registered\n");
    1a08:	22f7      	movs	r2, #247	; 0xf7
    1a0a:	0052      	lsls	r2, r2, #1
    1a0c:	4979      	ldr	r1, [pc, #484]	; (1bf4 <hif_handle_isr+0x354>)
    1a0e:	487a      	ldr	r0, [pc, #488]	; (1bf8 <hif_handle_isr+0x358>)
    1a10:	4b7a      	ldr	r3, [pc, #488]	; (1bfc <hif_handle_isr+0x35c>)
    1a12:	4798      	blx	r3
    1a14:	4882      	ldr	r0, [pc, #520]	; (1c20 <hif_handle_isr+0x380>)
    1a16:	4b7b      	ldr	r3, [pc, #492]	; (1c04 <hif_handle_isr+0x364>)
    1a18:	4798      	blx	r3
    1a1a:	200d      	movs	r0, #13
    1a1c:	4b7a      	ldr	r3, [pc, #488]	; (1c08 <hif_handle_isr+0x368>)
    1a1e:	4798      	blx	r3
    1a20:	e7c3      	b.n	19aa <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfOtaCb)
    1a22:	4b71      	ldr	r3, [pc, #452]	; (1be8 <hif_handle_isr+0x348>)
    1a24:	695b      	ldr	r3, [r3, #20]
    1a26:	2b00      	cmp	r3, #0
    1a28:	d00b      	beq.n	1a42 <hif_handle_isr+0x1a2>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1a2a:	4b6f      	ldr	r3, [pc, #444]	; (1be8 <hif_handle_isr+0x348>)
    1a2c:	695b      	ldr	r3, [r3, #20]
    1a2e:	aa04      	add	r2, sp, #16
    1a30:	7850      	ldrb	r0, [r2, #1]
    1a32:	b2c0      	uxtb	r0, r0
    1a34:	8851      	ldrh	r1, [r2, #2]
    1a36:	9a05      	ldr	r2, [sp, #20]
    1a38:	3208      	adds	r2, #8
    1a3a:	3908      	subs	r1, #8
    1a3c:	b289      	uxth	r1, r1
    1a3e:	4798      	blx	r3
    1a40:	e7b3      	b.n	19aa <hif_handle_isr+0x10a>
						M2M_ERR("Ota callback is not registered\n");
    1a42:	22fb      	movs	r2, #251	; 0xfb
    1a44:	0052      	lsls	r2, r2, #1
    1a46:	496b      	ldr	r1, [pc, #428]	; (1bf4 <hif_handle_isr+0x354>)
    1a48:	486b      	ldr	r0, [pc, #428]	; (1bf8 <hif_handle_isr+0x358>)
    1a4a:	4b6c      	ldr	r3, [pc, #432]	; (1bfc <hif_handle_isr+0x35c>)
    1a4c:	4798      	blx	r3
    1a4e:	4875      	ldr	r0, [pc, #468]	; (1c24 <hif_handle_isr+0x384>)
    1a50:	4b6c      	ldr	r3, [pc, #432]	; (1c04 <hif_handle_isr+0x364>)
    1a52:	4798      	blx	r3
    1a54:	200d      	movs	r0, #13
    1a56:	4b6c      	ldr	r3, [pc, #432]	; (1c08 <hif_handle_isr+0x368>)
    1a58:	4798      	blx	r3
    1a5a:	e7a6      	b.n	19aa <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfCryptoCb)
    1a5c:	4b62      	ldr	r3, [pc, #392]	; (1be8 <hif_handle_isr+0x348>)
    1a5e:	6a1b      	ldr	r3, [r3, #32]
    1a60:	2b00      	cmp	r3, #0
    1a62:	d00b      	beq.n	1a7c <hif_handle_isr+0x1dc>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1a64:	4b60      	ldr	r3, [pc, #384]	; (1be8 <hif_handle_isr+0x348>)
    1a66:	6a1b      	ldr	r3, [r3, #32]
    1a68:	aa04      	add	r2, sp, #16
    1a6a:	7850      	ldrb	r0, [r2, #1]
    1a6c:	b2c0      	uxtb	r0, r0
    1a6e:	8851      	ldrh	r1, [r2, #2]
    1a70:	9a05      	ldr	r2, [sp, #20]
    1a72:	3208      	adds	r2, #8
    1a74:	3908      	subs	r1, #8
    1a76:	b289      	uxth	r1, r1
    1a78:	4798      	blx	r3
    1a7a:	e796      	b.n	19aa <hif_handle_isr+0x10a>
						M2M_ERR("Crypto callback is not registered\n");
    1a7c:	4a6a      	ldr	r2, [pc, #424]	; (1c28 <hif_handle_isr+0x388>)
    1a7e:	495d      	ldr	r1, [pc, #372]	; (1bf4 <hif_handle_isr+0x354>)
    1a80:	485d      	ldr	r0, [pc, #372]	; (1bf8 <hif_handle_isr+0x358>)
    1a82:	4b5e      	ldr	r3, [pc, #376]	; (1bfc <hif_handle_isr+0x35c>)
    1a84:	4798      	blx	r3
    1a86:	4869      	ldr	r0, [pc, #420]	; (1c2c <hif_handle_isr+0x38c>)
    1a88:	4b5e      	ldr	r3, [pc, #376]	; (1c04 <hif_handle_isr+0x364>)
    1a8a:	4798      	blx	r3
    1a8c:	200d      	movs	r0, #13
    1a8e:	4b5e      	ldr	r3, [pc, #376]	; (1c08 <hif_handle_isr+0x368>)
    1a90:	4798      	blx	r3
    1a92:	e78a      	b.n	19aa <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfSigmaCb)
    1a94:	4b54      	ldr	r3, [pc, #336]	; (1be8 <hif_handle_isr+0x348>)
    1a96:	699b      	ldr	r3, [r3, #24]
    1a98:	2b00      	cmp	r3, #0
    1a9a:	d00b      	beq.n	1ab4 <hif_handle_isr+0x214>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1a9c:	4b52      	ldr	r3, [pc, #328]	; (1be8 <hif_handle_isr+0x348>)
    1a9e:	699b      	ldr	r3, [r3, #24]
    1aa0:	aa04      	add	r2, sp, #16
    1aa2:	7850      	ldrb	r0, [r2, #1]
    1aa4:	b2c0      	uxtb	r0, r0
    1aa6:	8851      	ldrh	r1, [r2, #2]
    1aa8:	9a05      	ldr	r2, [sp, #20]
    1aaa:	3208      	adds	r2, #8
    1aac:	3908      	subs	r1, #8
    1aae:	b289      	uxth	r1, r1
    1ab0:	4798      	blx	r3
    1ab2:	e77a      	b.n	19aa <hif_handle_isr+0x10a>
						M2M_ERR("Sigma callback is not registered\n");
    1ab4:	4a5e      	ldr	r2, [pc, #376]	; (1c30 <hif_handle_isr+0x390>)
    1ab6:	494f      	ldr	r1, [pc, #316]	; (1bf4 <hif_handle_isr+0x354>)
    1ab8:	484f      	ldr	r0, [pc, #316]	; (1bf8 <hif_handle_isr+0x358>)
    1aba:	4b50      	ldr	r3, [pc, #320]	; (1bfc <hif_handle_isr+0x35c>)
    1abc:	4798      	blx	r3
    1abe:	485d      	ldr	r0, [pc, #372]	; (1c34 <hif_handle_isr+0x394>)
    1ac0:	4b50      	ldr	r3, [pc, #320]	; (1c04 <hif_handle_isr+0x364>)
    1ac2:	4798      	blx	r3
    1ac4:	200d      	movs	r0, #13
    1ac6:	4b50      	ldr	r3, [pc, #320]	; (1c08 <hif_handle_isr+0x368>)
    1ac8:	4798      	blx	r3
    1aca:	e76e      	b.n	19aa <hif_handle_isr+0x10a>
				    if(gstrHifCxt.pfSslCb)
    1acc:	4b46      	ldr	r3, [pc, #280]	; (1be8 <hif_handle_isr+0x348>)
    1ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1ad0:	2b00      	cmp	r3, #0
    1ad2:	d100      	bne.n	1ad6 <hif_handle_isr+0x236>
    1ad4:	e769      	b.n	19aa <hif_handle_isr+0x10a>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1ad6:	4b44      	ldr	r3, [pc, #272]	; (1be8 <hif_handle_isr+0x348>)
    1ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1ada:	aa04      	add	r2, sp, #16
    1adc:	7850      	ldrb	r0, [r2, #1]
    1ade:	b2c0      	uxtb	r0, r0
    1ae0:	8851      	ldrh	r1, [r2, #2]
    1ae2:	9a05      	ldr	r2, [sp, #20]
    1ae4:	3208      	adds	r2, #8
    1ae6:	3908      	subs	r1, #8
    1ae8:	b289      	uxth	r1, r1
    1aea:	4798      	blx	r3
    1aec:	e75d      	b.n	19aa <hif_handle_isr+0x10a>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    1aee:	4a52      	ldr	r2, [pc, #328]	; (1c38 <hif_handle_isr+0x398>)
    1af0:	4940      	ldr	r1, [pc, #256]	; (1bf4 <hif_handle_isr+0x354>)
    1af2:	4841      	ldr	r0, [pc, #260]	; (1bf8 <hif_handle_isr+0x358>)
    1af4:	4c41      	ldr	r4, [pc, #260]	; (1bfc <hif_handle_isr+0x35c>)
    1af6:	47a0      	blx	r4
    1af8:	ab04      	add	r3, sp, #16
    1afa:	7819      	ldrb	r1, [r3, #0]
    1afc:	b2c9      	uxtb	r1, r1
    1afe:	785a      	ldrb	r2, [r3, #1]
    1b00:	b2d2      	uxtb	r2, r2
    1b02:	484e      	ldr	r0, [pc, #312]	; (1c3c <hif_handle_isr+0x39c>)
    1b04:	47a0      	blx	r4
    1b06:	200d      	movs	r0, #13
    1b08:	4b3f      	ldr	r3, [pc, #252]	; (1c08 <hif_handle_isr+0x368>)
    1b0a:	4798      	blx	r3
					ret = hif_set_rx_done();
    1b0c:	4b4c      	ldr	r3, [pc, #304]	; (1c40 <hif_handle_isr+0x3a0>)
    1b0e:	4798      	blx	r3
    1b10:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
    1b12:	d129      	bne.n	1b68 <hif_handle_isr+0x2c8>
    1b14:	e74e      	b.n	19b4 <hif_handle_isr+0x114>
				M2M_ERR("(hif) Wrong Size\n");
    1b16:	2287      	movs	r2, #135	; 0x87
    1b18:	0092      	lsls	r2, r2, #2
    1b1a:	4936      	ldr	r1, [pc, #216]	; (1bf4 <hif_handle_isr+0x354>)
    1b1c:	4836      	ldr	r0, [pc, #216]	; (1bf8 <hif_handle_isr+0x358>)
    1b1e:	4b37      	ldr	r3, [pc, #220]	; (1bfc <hif_handle_isr+0x35c>)
    1b20:	4798      	blx	r3
    1b22:	4848      	ldr	r0, [pc, #288]	; (1c44 <hif_handle_isr+0x3a4>)
    1b24:	4b37      	ldr	r3, [pc, #220]	; (1c04 <hif_handle_isr+0x364>)
    1b26:	4798      	blx	r3
    1b28:	200d      	movs	r0, #13
    1b2a:	4b37      	ldr	r3, [pc, #220]	; (1c08 <hif_handle_isr+0x368>)
    1b2c:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    1b2e:	2402      	movs	r4, #2
    1b30:	4264      	negs	r4, r4
    1b32:	e019      	b.n	1b68 <hif_handle_isr+0x2c8>
			M2M_ERR("(hif) False interrupt %lx",reg);
    1b34:	2289      	movs	r2, #137	; 0x89
    1b36:	0092      	lsls	r2, r2, #2
    1b38:	492e      	ldr	r1, [pc, #184]	; (1bf4 <hif_handle_isr+0x354>)
    1b3a:	482f      	ldr	r0, [pc, #188]	; (1bf8 <hif_handle_isr+0x358>)
    1b3c:	4c2f      	ldr	r4, [pc, #188]	; (1bfc <hif_handle_isr+0x35c>)
    1b3e:	47a0      	blx	r4
    1b40:	9903      	ldr	r1, [sp, #12]
    1b42:	4841      	ldr	r0, [pc, #260]	; (1c48 <hif_handle_isr+0x3a8>)
    1b44:	47a0      	blx	r4
    1b46:	200d      	movs	r0, #13
    1b48:	4b2f      	ldr	r3, [pc, #188]	; (1c08 <hif_handle_isr+0x368>)
    1b4a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1b4c:	240c      	movs	r4, #12
    1b4e:	4264      	negs	r4, r4
    1b50:	e00a      	b.n	1b68 <hif_handle_isr+0x2c8>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    1b52:	4a3e      	ldr	r2, [pc, #248]	; (1c4c <hif_handle_isr+0x3ac>)
    1b54:	4927      	ldr	r1, [pc, #156]	; (1bf4 <hif_handle_isr+0x354>)
    1b56:	4828      	ldr	r0, [pc, #160]	; (1bf8 <hif_handle_isr+0x358>)
    1b58:	4b28      	ldr	r3, [pc, #160]	; (1bfc <hif_handle_isr+0x35c>)
    1b5a:	4798      	blx	r3
    1b5c:	483c      	ldr	r0, [pc, #240]	; (1c50 <hif_handle_isr+0x3b0>)
    1b5e:	4b29      	ldr	r3, [pc, #164]	; (1c04 <hif_handle_isr+0x364>)
    1b60:	4798      	blx	r3
    1b62:	200d      	movs	r0, #13
    1b64:	4b28      	ldr	r3, [pc, #160]	; (1c08 <hif_handle_isr+0x368>)
    1b66:	4798      	blx	r3
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    1b68:	4a3a      	ldr	r2, [pc, #232]	; (1c54 <hif_handle_isr+0x3b4>)
    1b6a:	493b      	ldr	r1, [pc, #236]	; (1c58 <hif_handle_isr+0x3b8>)
    1b6c:	4822      	ldr	r0, [pc, #136]	; (1bf8 <hif_handle_isr+0x358>)
    1b6e:	4f23      	ldr	r7, [pc, #140]	; (1bfc <hif_handle_isr+0x35c>)
    1b70:	47b8      	blx	r7
    1b72:	0021      	movs	r1, r4
    1b74:	4839      	ldr	r0, [pc, #228]	; (1c5c <hif_handle_isr+0x3bc>)
    1b76:	47b8      	blx	r7
    1b78:	200d      	movs	r0, #13
    1b7a:	4b23      	ldr	r3, [pc, #140]	; (1c08 <hif_handle_isr+0x368>)
    1b7c:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    1b7e:	a903      	add	r1, sp, #12
    1b80:	4837      	ldr	r0, [pc, #220]	; (1c60 <hif_handle_isr+0x3c0>)
    1b82:	47b0      	blx	r6
    1b84:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
    1b86:	d1e4      	bne.n	1b52 <hif_handle_isr+0x2b2>
		if(reg & 0x1)	/* New interrupt has been received */
    1b88:	9b03      	ldr	r3, [sp, #12]
    1b8a:	07db      	lsls	r3, r3, #31
    1b8c:	d5d2      	bpl.n	1b34 <hif_handle_isr+0x294>
			nm_bsp_interrupt_ctrl(0);
    1b8e:	2000      	movs	r0, #0
    1b90:	4b1f      	ldr	r3, [pc, #124]	; (1c10 <hif_handle_isr+0x370>)
    1b92:	4798      	blx	r3
			reg &= ~NBIT0;
    1b94:	2301      	movs	r3, #1
    1b96:	9903      	ldr	r1, [sp, #12]
    1b98:	4399      	bics	r1, r3
    1b9a:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    1b9c:	4830      	ldr	r0, [pc, #192]	; (1c60 <hif_handle_isr+0x3c0>)
    1b9e:	4b31      	ldr	r3, [pc, #196]	; (1c64 <hif_handle_isr+0x3c4>)
    1ba0:	4798      	blx	r3
    1ba2:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
    1ba4:	d1e0      	bne.n	1b68 <hif_handle_isr+0x2c8>
			gstrHifCxt.u8HifRXDone = 1;
    1ba6:	2201      	movs	r2, #1
    1ba8:	4b0f      	ldr	r3, [pc, #60]	; (1be8 <hif_handle_isr+0x348>)
    1baa:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    1bac:	9b03      	ldr	r3, [sp, #12]
    1bae:	049d      	lsls	r5, r3, #18
    1bb0:	0d2d      	lsrs	r5, r5, #20
			if (size > 0) {
    1bb2:	d0b0      	beq.n	1b16 <hif_handle_isr+0x276>
				uint32 address = 0;
    1bb4:	2300      	movs	r3, #0
    1bb6:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    1bb8:	a905      	add	r1, sp, #20
    1bba:	482b      	ldr	r0, [pc, #172]	; (1c68 <hif_handle_isr+0x3c8>)
    1bbc:	4b16      	ldr	r3, [pc, #88]	; (1c18 <hif_handle_isr+0x378>)
    1bbe:	4798      	blx	r3
    1bc0:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    1bc2:	d100      	bne.n	1bc6 <hif_handle_isr+0x326>
    1bc4:	e675      	b.n	18b2 <hif_handle_isr+0x12>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    1bc6:	22c8      	movs	r2, #200	; 0xc8
    1bc8:	32ff      	adds	r2, #255	; 0xff
    1bca:	490a      	ldr	r1, [pc, #40]	; (1bf4 <hif_handle_isr+0x354>)
    1bcc:	480a      	ldr	r0, [pc, #40]	; (1bf8 <hif_handle_isr+0x358>)
    1bce:	4b0b      	ldr	r3, [pc, #44]	; (1bfc <hif_handle_isr+0x35c>)
    1bd0:	4798      	blx	r3
    1bd2:	4826      	ldr	r0, [pc, #152]	; (1c6c <hif_handle_isr+0x3cc>)
    1bd4:	4b0b      	ldr	r3, [pc, #44]	; (1c04 <hif_handle_isr+0x364>)
    1bd6:	4798      	blx	r3
    1bd8:	200d      	movs	r0, #13
    1bda:	4b0b      	ldr	r3, [pc, #44]	; (1c08 <hif_handle_isr+0x368>)
    1bdc:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    1bde:	2001      	movs	r0, #1
    1be0:	4b0b      	ldr	r3, [pc, #44]	; (1c10 <hif_handle_isr+0x370>)
    1be2:	4798      	blx	r3
    1be4:	e7c0      	b.n	1b68 <hif_handle_isr+0x2c8>
    1be6:	46c0      	nop			; (mov r8, r8)
    1be8:	200002c0 	.word	0x200002c0
    1bec:	000029bd 	.word	0x000029bd
    1bf0:	0000020f 	.word	0x0000020f
    1bf4:	0000aed8 	.word	0x0000aed8
    1bf8:	0000ae84 	.word	0x0000ae84
    1bfc:	00009995 	.word	0x00009995
    1c00:	0000b034 	.word	0x0000b034
    1c04:	00009ab1 	.word	0x00009ab1
    1c08:	000099c9 	.word	0x000099c9
    1c0c:	0000af30 	.word	0x0000af30
    1c10:	00001269 	.word	0x00001269
    1c14:	0000af48 	.word	0x0000af48
    1c18:	000029a5 	.word	0x000029a5
    1c1c:	0000af88 	.word	0x0000af88
    1c20:	0000afa8 	.word	0x0000afa8
    1c24:	0000afcc 	.word	0x0000afcc
    1c28:	000001ff 	.word	0x000001ff
    1c2c:	0000afec 	.word	0x0000afec
    1c30:	00000206 	.word	0x00000206
    1c34:	0000b010 	.word	0x0000b010
    1c38:	00000215 	.word	0x00000215
    1c3c:	0000b04c 	.word	0x0000b04c
    1c40:	0000159d 	.word	0x0000159d
    1c44:	0000b078 	.word	0x0000b078
    1c48:	0000b08c 	.word	0x0000b08c
    1c4c:	0000022d 	.word	0x0000022d
    1c50:	0000b0a8 	.word	0x0000b0a8
    1c54:	0000024a 	.word	0x0000024a
    1c58:	0000aee0 	.word	0x0000aee0
    1c5c:	0000b0cc 	.word	0x0000b0cc
    1c60:	00001070 	.word	0x00001070
    1c64:	000029b1 	.word	0x000029b1
    1c68:	00001084 	.word	0x00001084
    1c6c:	0000af0c 	.word	0x0000af0c
			}
		}
	}

	return ret;
}
    1c70:	2000      	movs	r0, #0
    1c72:	b007      	add	sp, #28
    1c74:	bc0c      	pop	{r2, r3}
    1c76:	4690      	mov	r8, r2
    1c78:	4699      	mov	r9, r3
    1c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001c7c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    1c7c:	b570      	push	{r4, r5, r6, lr}
    1c7e:	0014      	movs	r4, r2
    1c80:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    1c82:	2800      	cmp	r0, #0
    1c84:	d003      	beq.n	1c8e <hif_receive+0x12>
    1c86:	2900      	cmp	r1, #0
    1c88:	d001      	beq.n	1c8e <hif_receive+0x12>
    1c8a:	2a00      	cmp	r2, #0
    1c8c:	d112      	bne.n	1cb4 <hif_receive+0x38>
	{
		if(isDone)
    1c8e:	2d00      	cmp	r5, #0
    1c90:	d002      	beq.n	1c98 <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    1c92:	4b27      	ldr	r3, [pc, #156]	; (1d30 <hif_receive+0xb4>)
    1c94:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    1c96:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
    1c98:	4a26      	ldr	r2, [pc, #152]	; (1d34 <hif_receive+0xb8>)
    1c9a:	4927      	ldr	r1, [pc, #156]	; (1d38 <hif_receive+0xbc>)
    1c9c:	4827      	ldr	r0, [pc, #156]	; (1d3c <hif_receive+0xc0>)
    1c9e:	4b28      	ldr	r3, [pc, #160]	; (1d40 <hif_receive+0xc4>)
    1ca0:	4798      	blx	r3
    1ca2:	4828      	ldr	r0, [pc, #160]	; (1d44 <hif_receive+0xc8>)
    1ca4:	4b28      	ldr	r3, [pc, #160]	; (1d48 <hif_receive+0xcc>)
    1ca6:	4798      	blx	r3
    1ca8:	200d      	movs	r0, #13
    1caa:	4b28      	ldr	r3, [pc, #160]	; (1d4c <hif_receive+0xd0>)
    1cac:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1cae:	200c      	movs	r0, #12
    1cb0:	4240      	negs	r0, r0
    1cb2:	e7f0      	b.n	1c96 <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
    1cb4:	4b26      	ldr	r3, [pc, #152]	; (1d50 <hif_receive+0xd4>)
    1cb6:	689b      	ldr	r3, [r3, #8]
    1cb8:	429a      	cmp	r2, r3
    1cba:	d81a      	bhi.n	1cf2 <hif_receive+0x76>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    1cbc:	4b24      	ldr	r3, [pc, #144]	; (1d50 <hif_receive+0xd4>)
    1cbe:	685b      	ldr	r3, [r3, #4]
    1cc0:	4298      	cmp	r0, r3
    1cc2:	d326      	bcc.n	1d12 <hif_receive+0x96>
    1cc4:	1886      	adds	r6, r0, r2
    1cc6:	4a22      	ldr	r2, [pc, #136]	; (1d50 <hif_receive+0xd4>)
    1cc8:	6853      	ldr	r3, [r2, #4]
    1cca:	6892      	ldr	r2, [r2, #8]
    1ccc:	189b      	adds	r3, r3, r2
    1cce:	429e      	cmp	r6, r3
    1cd0:	d81f      	bhi.n	1d12 <hif_receive+0x96>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    1cd2:	0022      	movs	r2, r4
    1cd4:	4b1f      	ldr	r3, [pc, #124]	; (1d54 <hif_receive+0xd8>)
    1cd6:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    1cd8:	2800      	cmp	r0, #0
    1cda:	d1dc      	bne.n	1c96 <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    1cdc:	4a1c      	ldr	r2, [pc, #112]	; (1d50 <hif_receive+0xd4>)
    1cde:	6853      	ldr	r3, [r2, #4]
    1ce0:	6892      	ldr	r2, [r2, #8]
    1ce2:	189b      	adds	r3, r3, r2
    1ce4:	429e      	cmp	r6, r3
    1ce6:	d001      	beq.n	1cec <hif_receive+0x70>
    1ce8:	2d00      	cmp	r5, #0
    1cea:	d0d4      	beq.n	1c96 <hif_receive+0x1a>
		ret = hif_set_rx_done();
    1cec:	4b10      	ldr	r3, [pc, #64]	; (1d30 <hif_receive+0xb4>)
    1cee:	4798      	blx	r3
    1cf0:	e7d1      	b.n	1c96 <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    1cf2:	4a19      	ldr	r2, [pc, #100]	; (1d58 <hif_receive+0xdc>)
    1cf4:	4910      	ldr	r1, [pc, #64]	; (1d38 <hif_receive+0xbc>)
    1cf6:	4811      	ldr	r0, [pc, #68]	; (1d3c <hif_receive+0xc0>)
    1cf8:	4d11      	ldr	r5, [pc, #68]	; (1d40 <hif_receive+0xc4>)
    1cfa:	47a8      	blx	r5
    1cfc:	4b14      	ldr	r3, [pc, #80]	; (1d50 <hif_receive+0xd4>)
    1cfe:	689a      	ldr	r2, [r3, #8]
    1d00:	0021      	movs	r1, r4
    1d02:	4816      	ldr	r0, [pc, #88]	; (1d5c <hif_receive+0xe0>)
    1d04:	47a8      	blx	r5
    1d06:	200d      	movs	r0, #13
    1d08:	4b10      	ldr	r3, [pc, #64]	; (1d4c <hif_receive+0xd0>)
    1d0a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1d0c:	200c      	movs	r0, #12
    1d0e:	4240      	negs	r0, r0
		goto ERR1;
    1d10:	e7c1      	b.n	1c96 <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    1d12:	4a13      	ldr	r2, [pc, #76]	; (1d60 <hif_receive+0xe4>)
    1d14:	4908      	ldr	r1, [pc, #32]	; (1d38 <hif_receive+0xbc>)
    1d16:	4809      	ldr	r0, [pc, #36]	; (1d3c <hif_receive+0xc0>)
    1d18:	4b09      	ldr	r3, [pc, #36]	; (1d40 <hif_receive+0xc4>)
    1d1a:	4798      	blx	r3
    1d1c:	4811      	ldr	r0, [pc, #68]	; (1d64 <hif_receive+0xe8>)
    1d1e:	4b0a      	ldr	r3, [pc, #40]	; (1d48 <hif_receive+0xcc>)
    1d20:	4798      	blx	r3
    1d22:	200d      	movs	r0, #13
    1d24:	4b09      	ldr	r3, [pc, #36]	; (1d4c <hif_receive+0xd0>)
    1d26:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1d28:	200c      	movs	r0, #12
    1d2a:	4240      	negs	r0, r0
		goto ERR1;
    1d2c:	e7b3      	b.n	1c96 <hif_receive+0x1a>
    1d2e:	46c0      	nop			; (mov r8, r8)
    1d30:	0000159d 	.word	0x0000159d
    1d34:	0000026b 	.word	0x0000026b
    1d38:	0000aef0 	.word	0x0000aef0
    1d3c:	0000ae84 	.word	0x0000ae84
    1d40:	00009995 	.word	0x00009995
    1d44:	0000b0fc 	.word	0x0000b0fc
    1d48:	00009ab1 	.word	0x00009ab1
    1d4c:	000099c9 	.word	0x000099c9
    1d50:	200002c0 	.word	0x200002c0
    1d54:	000029bd 	.word	0x000029bd
    1d58:	00000273 	.word	0x00000273
    1d5c:	0000b11c 	.word	0x0000b11c
    1d60:	00000279 	.word	0x00000279
    1d64:	0000b164 	.word	0x0000b164

00001d68 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    1d68:	b570      	push	{r4, r5, r6, lr}
    1d6a:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    1d6c:	2807      	cmp	r0, #7
    1d6e:	d81f      	bhi.n	1db0 <hif_register_cb+0x48>
    1d70:	0083      	lsls	r3, r0, #2
    1d72:	4a16      	ldr	r2, [pc, #88]	; (1dcc <hif_register_cb+0x64>)
    1d74:	58d3      	ldr	r3, [r2, r3]
    1d76:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    1d78:	4b15      	ldr	r3, [pc, #84]	; (1dd0 <hif_register_cb+0x68>)
    1d7a:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
    1d7c:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
    1d7e:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
    1d80:	4b13      	ldr	r3, [pc, #76]	; (1dd0 <hif_register_cb+0x68>)
    1d82:	60d9      	str	r1, [r3, #12]
	sint8 ret = M2M_SUCCESS;
    1d84:	2000      	movs	r0, #0
			break;
    1d86:	e7fa      	b.n	1d7e <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
    1d88:	4b11      	ldr	r3, [pc, #68]	; (1dd0 <hif_register_cb+0x68>)
    1d8a:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
    1d8c:	2000      	movs	r0, #0
			break;
    1d8e:	e7f6      	b.n	1d7e <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
    1d90:	4b0f      	ldr	r3, [pc, #60]	; (1dd0 <hif_register_cb+0x68>)
    1d92:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
    1d94:	2000      	movs	r0, #0
			break;
    1d96:	e7f2      	b.n	1d7e <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
    1d98:	4b0d      	ldr	r3, [pc, #52]	; (1dd0 <hif_register_cb+0x68>)
    1d9a:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
    1d9c:	2000      	movs	r0, #0
			break;
    1d9e:	e7ee      	b.n	1d7e <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
    1da0:	4b0b      	ldr	r3, [pc, #44]	; (1dd0 <hif_register_cb+0x68>)
    1da2:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
    1da4:	2000      	movs	r0, #0
			break;
    1da6:	e7ea      	b.n	1d7e <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
    1da8:	4b09      	ldr	r3, [pc, #36]	; (1dd0 <hif_register_cb+0x68>)
    1daa:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
    1dac:	2000      	movs	r0, #0
			break;
    1dae:	e7e6      	b.n	1d7e <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
    1db0:	4a08      	ldr	r2, [pc, #32]	; (1dd4 <hif_register_cb+0x6c>)
    1db2:	4909      	ldr	r1, [pc, #36]	; (1dd8 <hif_register_cb+0x70>)
    1db4:	4809      	ldr	r0, [pc, #36]	; (1ddc <hif_register_cb+0x74>)
    1db6:	4d0a      	ldr	r5, [pc, #40]	; (1de0 <hif_register_cb+0x78>)
    1db8:	47a8      	blx	r5
    1dba:	0021      	movs	r1, r4
    1dbc:	4809      	ldr	r0, [pc, #36]	; (1de4 <hif_register_cb+0x7c>)
    1dbe:	47a8      	blx	r5
    1dc0:	200d      	movs	r0, #13
    1dc2:	4b09      	ldr	r3, [pc, #36]	; (1de8 <hif_register_cb+0x80>)
    1dc4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1dc6:	200c      	movs	r0, #12
    1dc8:	4240      	negs	r0, r0
			break;
    1dca:	e7d8      	b.n	1d7e <hif_register_cb+0x16>
    1dcc:	0000aeac 	.word	0x0000aeac
    1dd0:	200002c0 	.word	0x200002c0
    1dd4:	000002b1 	.word	0x000002b1
    1dd8:	0000aefc 	.word	0x0000aefc
    1ddc:	0000ae84 	.word	0x0000ae84
    1de0:	00009995 	.word	0x00009995
    1de4:	0000b1a8 	.word	0x0000b1a8
    1de8:	000099c9 	.word	0x000099c9

00001dec <hif_init>:
{
    1dec:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    1dee:	2228      	movs	r2, #40	; 0x28
    1df0:	2100      	movs	r1, #0
    1df2:	4806      	ldr	r0, [pc, #24]	; (1e0c <hif_init+0x20>)
    1df4:	4b06      	ldr	r3, [pc, #24]	; (1e10 <hif_init+0x24>)
    1df6:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    1df8:	4806      	ldr	r0, [pc, #24]	; (1e14 <hif_init+0x28>)
    1dfa:	4b07      	ldr	r3, [pc, #28]	; (1e18 <hif_init+0x2c>)
    1dfc:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    1dfe:	4907      	ldr	r1, [pc, #28]	; (1e1c <hif_init+0x30>)
    1e00:	2003      	movs	r0, #3
    1e02:	4b07      	ldr	r3, [pc, #28]	; (1e20 <hif_init+0x34>)
    1e04:	4798      	blx	r3
}
    1e06:	2000      	movs	r0, #0
    1e08:	bd10      	pop	{r4, pc}
    1e0a:	46c0      	nop			; (mov r8, r8)
    1e0c:	200002c0 	.word	0x200002c0
    1e10:	0000155d 	.word	0x0000155d
    1e14:	00001589 	.word	0x00001589
    1e18:	00001211 	.word	0x00001211
    1e1c:	00001599 	.word	0x00001599
    1e20:	00001d69 	.word	0x00001d69

00001e24 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    1e24:	b530      	push	{r4, r5, lr}
    1e26:	b09f      	sub	sp, #124	; 0x7c
    1e28:	0004      	movs	r4, r0
    1e2a:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    1e2c:	282c      	cmp	r0, #44	; 0x2c
    1e2e:	d02f      	beq.n	1e90 <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    1e30:	281b      	cmp	r0, #27
    1e32:	d03d      	beq.n	1eb0 <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    1e34:	2806      	cmp	r0, #6
    1e36:	d04b      	beq.n	1ed0 <m2m_wifi_cb+0xac>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    1e38:	280e      	cmp	r0, #14
    1e3a:	d027      	beq.n	1e8c <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    1e3c:	2832      	cmp	r0, #50	; 0x32
    1e3e:	d057      	beq.n	1ef0 <m2m_wifi_cb+0xcc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    1e40:	282f      	cmp	r0, #47	; 0x2f
    1e42:	d065      	beq.n	1f10 <m2m_wifi_cb+0xec>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    1e44:	2834      	cmp	r0, #52	; 0x34
    1e46:	d100      	bne.n	1e4a <m2m_wifi_cb+0x26>
    1e48:	e077      	b.n	1f3a <m2m_wifi_cb+0x116>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    1e4a:	2811      	cmp	r0, #17
    1e4c:	d100      	bne.n	1e50 <m2m_wifi_cb+0x2c>
    1e4e:	e096      	b.n	1f7e <m2m_wifi_cb+0x15a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    1e50:	2813      	cmp	r0, #19
    1e52:	d100      	bne.n	1e56 <m2m_wifi_cb+0x32>
    1e54:	e0ac      	b.n	1fb0 <m2m_wifi_cb+0x18c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    1e56:	2804      	cmp	r0, #4
    1e58:	d100      	bne.n	1e5c <m2m_wifi_cb+0x38>
    1e5a:	e0bb      	b.n	1fd4 <m2m_wifi_cb+0x1b0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    1e5c:	2865      	cmp	r0, #101	; 0x65
    1e5e:	d100      	bne.n	1e62 <m2m_wifi_cb+0x3e>
    1e60:	e0ca      	b.n	1ff8 <m2m_wifi_cb+0x1d4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    1e62:	2809      	cmp	r0, #9
    1e64:	d100      	bne.n	1e68 <m2m_wifi_cb+0x44>
    1e66:	e0d9      	b.n	201c <STACK_SIZE+0x1c>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    1e68:	282a      	cmp	r0, #42	; 0x2a
    1e6a:	d100      	bne.n	1e6e <m2m_wifi_cb+0x4a>
    1e6c:	e0e8      	b.n	2040 <STACK_SIZE+0x40>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    1e6e:	2820      	cmp	r0, #32
    1e70:	d100      	bne.n	1e74 <m2m_wifi_cb+0x50>
    1e72:	e0f7      	b.n	2064 <STACK_SIZE+0x64>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    1e74:	2292      	movs	r2, #146	; 0x92
    1e76:	0052      	lsls	r2, r2, #1
    1e78:	4989      	ldr	r1, [pc, #548]	; (20a0 <STACK_SIZE+0xa0>)
    1e7a:	488a      	ldr	r0, [pc, #552]	; (20a4 <STACK_SIZE+0xa4>)
    1e7c:	4d8a      	ldr	r5, [pc, #552]	; (20a8 <STACK_SIZE+0xa8>)
    1e7e:	47a8      	blx	r5
    1e80:	0021      	movs	r1, r4
    1e82:	488a      	ldr	r0, [pc, #552]	; (20ac <STACK_SIZE+0xac>)
    1e84:	47a8      	blx	r5
    1e86:	200d      	movs	r0, #13
    1e88:	4b89      	ldr	r3, [pc, #548]	; (20b0 <STACK_SIZE+0xb0>)
    1e8a:	4798      	blx	r3
	}
}
    1e8c:	b01f      	add	sp, #124	; 0x7c
    1e8e:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    1e90:	2300      	movs	r3, #0
    1e92:	2204      	movs	r2, #4
    1e94:	a903      	add	r1, sp, #12
    1e96:	0028      	movs	r0, r5
    1e98:	4c86      	ldr	r4, [pc, #536]	; (20b4 <STACK_SIZE+0xb4>)
    1e9a:	47a0      	blx	r4
    1e9c:	2800      	cmp	r0, #0
    1e9e:	d1f5      	bne.n	1e8c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1ea0:	4b85      	ldr	r3, [pc, #532]	; (20b8 <STACK_SIZE+0xb8>)
    1ea2:	681b      	ldr	r3, [r3, #0]
    1ea4:	2b00      	cmp	r3, #0
    1ea6:	d0f1      	beq.n	1e8c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    1ea8:	a903      	add	r1, sp, #12
    1eaa:	302c      	adds	r0, #44	; 0x2c
    1eac:	4798      	blx	r3
    1eae:	e7ed      	b.n	1e8c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    1eb0:	2300      	movs	r3, #0
    1eb2:	2208      	movs	r2, #8
    1eb4:	a903      	add	r1, sp, #12
    1eb6:	0028      	movs	r0, r5
    1eb8:	4c7e      	ldr	r4, [pc, #504]	; (20b4 <STACK_SIZE+0xb4>)
    1eba:	47a0      	blx	r4
    1ebc:	2800      	cmp	r0, #0
    1ebe:	d1e5      	bne.n	1e8c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1ec0:	4b7d      	ldr	r3, [pc, #500]	; (20b8 <STACK_SIZE+0xb8>)
    1ec2:	681b      	ldr	r3, [r3, #0]
    1ec4:	2b00      	cmp	r3, #0
    1ec6:	d0e1      	beq.n	1e8c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    1ec8:	a903      	add	r1, sp, #12
    1eca:	301b      	adds	r0, #27
    1ecc:	4798      	blx	r3
    1ece:	e7dd      	b.n	1e8c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    1ed0:	2301      	movs	r3, #1
    1ed2:	2230      	movs	r2, #48	; 0x30
    1ed4:	a903      	add	r1, sp, #12
    1ed6:	0028      	movs	r0, r5
    1ed8:	4c76      	ldr	r4, [pc, #472]	; (20b4 <STACK_SIZE+0xb4>)
    1eda:	47a0      	blx	r4
    1edc:	2800      	cmp	r0, #0
    1ede:	d1d5      	bne.n	1e8c <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    1ee0:	4b75      	ldr	r3, [pc, #468]	; (20b8 <STACK_SIZE+0xb8>)
    1ee2:	681b      	ldr	r3, [r3, #0]
    1ee4:	2b00      	cmp	r3, #0
    1ee6:	d0d1      	beq.n	1e8c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    1ee8:	a903      	add	r1, sp, #12
    1eea:	3006      	adds	r0, #6
    1eec:	4798      	blx	r3
    1eee:	e7cd      	b.n	1e8c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    1ef0:	2300      	movs	r3, #0
    1ef2:	2214      	movs	r2, #20
    1ef4:	a903      	add	r1, sp, #12
    1ef6:	0028      	movs	r0, r5
    1ef8:	4c6e      	ldr	r4, [pc, #440]	; (20b4 <STACK_SIZE+0xb4>)
    1efa:	47a0      	blx	r4
    1efc:	2800      	cmp	r0, #0
    1efe:	d1c5      	bne.n	1e8c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1f00:	4b6d      	ldr	r3, [pc, #436]	; (20b8 <STACK_SIZE+0xb8>)
    1f02:	681b      	ldr	r3, [r3, #0]
    1f04:	2b00      	cmp	r3, #0
    1f06:	d0c1      	beq.n	1e8c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    1f08:	a903      	add	r1, sp, #12
    1f0a:	3032      	adds	r0, #50	; 0x32
    1f0c:	4798      	blx	r3
    1f0e:	e7bd      	b.n	1e8c <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    1f10:	2264      	movs	r2, #100	; 0x64
    1f12:	2100      	movs	r1, #0
    1f14:	a803      	add	r0, sp, #12
    1f16:	4b69      	ldr	r3, [pc, #420]	; (20bc <STACK_SIZE+0xbc>)
    1f18:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    1f1a:	2300      	movs	r3, #0
    1f1c:	2264      	movs	r2, #100	; 0x64
    1f1e:	a903      	add	r1, sp, #12
    1f20:	0028      	movs	r0, r5
    1f22:	4c64      	ldr	r4, [pc, #400]	; (20b4 <STACK_SIZE+0xb4>)
    1f24:	47a0      	blx	r4
    1f26:	2800      	cmp	r0, #0
    1f28:	d1b0      	bne.n	1e8c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1f2a:	4b63      	ldr	r3, [pc, #396]	; (20b8 <STACK_SIZE+0xb8>)
    1f2c:	681b      	ldr	r3, [r3, #0]
    1f2e:	2b00      	cmp	r3, #0
    1f30:	d0ac      	beq.n	1e8c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    1f32:	a903      	add	r1, sp, #12
    1f34:	302f      	adds	r0, #47	; 0x2f
    1f36:	4798      	blx	r3
    1f38:	e7a8      	b.n	1e8c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    1f3a:	2300      	movs	r3, #0
    1f3c:	2204      	movs	r2, #4
    1f3e:	a903      	add	r1, sp, #12
    1f40:	0028      	movs	r0, r5
    1f42:	4c5c      	ldr	r4, [pc, #368]	; (20b4 <STACK_SIZE+0xb4>)
    1f44:	47a0      	blx	r4
    1f46:	2800      	cmp	r0, #0
    1f48:	d1a0      	bne.n	1e8c <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    1f4a:	485d      	ldr	r0, [pc, #372]	; (20c0 <STACK_SIZE+0xc0>)
    1f4c:	4d56      	ldr	r5, [pc, #344]	; (20a8 <STACK_SIZE+0xa8>)
    1f4e:	47a8      	blx	r5
    1f50:	9c03      	ldr	r4, [sp, #12]
    1f52:	0a23      	lsrs	r3, r4, #8
    1f54:	20ff      	movs	r0, #255	; 0xff
    1f56:	4003      	ands	r3, r0
    1f58:	0c22      	lsrs	r2, r4, #16
    1f5a:	4002      	ands	r2, r0
    1f5c:	0e21      	lsrs	r1, r4, #24
    1f5e:	4020      	ands	r0, r4
    1f60:	9000      	str	r0, [sp, #0]
    1f62:	4858      	ldr	r0, [pc, #352]	; (20c4 <STACK_SIZE+0xc4>)
    1f64:	47a8      	blx	r5
    1f66:	200d      	movs	r0, #13
    1f68:	4b51      	ldr	r3, [pc, #324]	; (20b0 <STACK_SIZE+0xb0>)
    1f6a:	4798      	blx	r3
			if (gpfAppWifiCb)
    1f6c:	4b52      	ldr	r3, [pc, #328]	; (20b8 <STACK_SIZE+0xb8>)
    1f6e:	681b      	ldr	r3, [r3, #0]
    1f70:	2b00      	cmp	r3, #0
    1f72:	d100      	bne.n	1f76 <m2m_wifi_cb+0x152>
    1f74:	e78a      	b.n	1e8c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    1f76:	2100      	movs	r1, #0
    1f78:	2034      	movs	r0, #52	; 0x34
    1f7a:	4798      	blx	r3
    1f7c:	e786      	b.n	1e8c <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
    1f7e:	2200      	movs	r2, #0
    1f80:	4b51      	ldr	r3, [pc, #324]	; (20c8 <STACK_SIZE+0xc8>)
    1f82:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    1f84:	2300      	movs	r3, #0
    1f86:	3204      	adds	r2, #4
    1f88:	a903      	add	r1, sp, #12
    1f8a:	0028      	movs	r0, r5
    1f8c:	4c49      	ldr	r4, [pc, #292]	; (20b4 <STACK_SIZE+0xb4>)
    1f8e:	47a0      	blx	r4
    1f90:	2800      	cmp	r0, #0
    1f92:	d000      	beq.n	1f96 <m2m_wifi_cb+0x172>
    1f94:	e77a      	b.n	1e8c <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
    1f96:	ab03      	add	r3, sp, #12
    1f98:	781a      	ldrb	r2, [r3, #0]
    1f9a:	4b4c      	ldr	r3, [pc, #304]	; (20cc <STACK_SIZE+0xcc>)
    1f9c:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    1f9e:	4b46      	ldr	r3, [pc, #280]	; (20b8 <STACK_SIZE+0xb8>)
    1fa0:	681b      	ldr	r3, [r3, #0]
    1fa2:	2b00      	cmp	r3, #0
    1fa4:	d100      	bne.n	1fa8 <m2m_wifi_cb+0x184>
    1fa6:	e771      	b.n	1e8c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    1fa8:	a903      	add	r1, sp, #12
    1faa:	3011      	adds	r0, #17
    1fac:	4798      	blx	r3
    1fae:	e76d      	b.n	1e8c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    1fb0:	2300      	movs	r3, #0
    1fb2:	222c      	movs	r2, #44	; 0x2c
    1fb4:	a903      	add	r1, sp, #12
    1fb6:	0028      	movs	r0, r5
    1fb8:	4c3e      	ldr	r4, [pc, #248]	; (20b4 <STACK_SIZE+0xb4>)
    1fba:	47a0      	blx	r4
    1fbc:	2800      	cmp	r0, #0
    1fbe:	d000      	beq.n	1fc2 <m2m_wifi_cb+0x19e>
    1fc0:	e764      	b.n	1e8c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1fc2:	4b3d      	ldr	r3, [pc, #244]	; (20b8 <STACK_SIZE+0xb8>)
    1fc4:	681b      	ldr	r3, [r3, #0]
    1fc6:	2b00      	cmp	r3, #0
    1fc8:	d100      	bne.n	1fcc <m2m_wifi_cb+0x1a8>
    1fca:	e75f      	b.n	1e8c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    1fcc:	a903      	add	r1, sp, #12
    1fce:	3013      	adds	r0, #19
    1fd0:	4798      	blx	r3
    1fd2:	e75b      	b.n	1e8c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1fd4:	2300      	movs	r3, #0
    1fd6:	2204      	movs	r2, #4
    1fd8:	a91c      	add	r1, sp, #112	; 0x70
    1fda:	0028      	movs	r0, r5
    1fdc:	4c35      	ldr	r4, [pc, #212]	; (20b4 <STACK_SIZE+0xb4>)
    1fde:	47a0      	blx	r4
    1fe0:	2800      	cmp	r0, #0
    1fe2:	d000      	beq.n	1fe6 <m2m_wifi_cb+0x1c2>
    1fe4:	e752      	b.n	1e8c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1fe6:	4b34      	ldr	r3, [pc, #208]	; (20b8 <STACK_SIZE+0xb8>)
    1fe8:	681b      	ldr	r3, [r3, #0]
    1fea:	2b00      	cmp	r3, #0
    1fec:	d100      	bne.n	1ff0 <m2m_wifi_cb+0x1cc>
    1fee:	e74d      	b.n	1e8c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    1ff0:	a91c      	add	r1, sp, #112	; 0x70
    1ff2:	3004      	adds	r0, #4
    1ff4:	4798      	blx	r3
    1ff6:	e749      	b.n	1e8c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1ff8:	2300      	movs	r3, #0
    1ffa:	2204      	movs	r2, #4
    1ffc:	a91c      	add	r1, sp, #112	; 0x70
    1ffe:	0028      	movs	r0, r5
    2000:	4c2c      	ldr	r4, [pc, #176]	; (20b4 <STACK_SIZE+0xb4>)
    2002:	47a0      	blx	r4
    2004:	2800      	cmp	r0, #0
    2006:	d000      	beq.n	200a <STACK_SIZE+0xa>
    2008:	e740      	b.n	1e8c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    200a:	4b2b      	ldr	r3, [pc, #172]	; (20b8 <STACK_SIZE+0xb8>)
    200c:	681b      	ldr	r3, [r3, #0]
    200e:	2b00      	cmp	r3, #0
    2010:	d100      	bne.n	2014 <STACK_SIZE+0x14>
    2012:	e73b      	b.n	1e8c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    2014:	a91c      	add	r1, sp, #112	; 0x70
    2016:	3065      	adds	r0, #101	; 0x65
    2018:	4798      	blx	r3
    201a:	e737      	b.n	1e8c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    201c:	2301      	movs	r3, #1
    201e:	2264      	movs	r2, #100	; 0x64
    2020:	a903      	add	r1, sp, #12
    2022:	0028      	movs	r0, r5
    2024:	4c23      	ldr	r4, [pc, #140]	; (20b4 <STACK_SIZE+0xb4>)
    2026:	47a0      	blx	r4
    2028:	2800      	cmp	r0, #0
    202a:	d000      	beq.n	202e <STACK_SIZE+0x2e>
    202c:	e72e      	b.n	1e8c <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    202e:	4b22      	ldr	r3, [pc, #136]	; (20b8 <STACK_SIZE+0xb8>)
    2030:	681b      	ldr	r3, [r3, #0]
    2032:	2b00      	cmp	r3, #0
    2034:	d100      	bne.n	2038 <STACK_SIZE+0x38>
    2036:	e729      	b.n	1e8c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    2038:	a903      	add	r1, sp, #12
    203a:	3009      	adds	r0, #9
    203c:	4798      	blx	r3
    203e:	e725      	b.n	1e8c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    2040:	2301      	movs	r3, #1
    2042:	2204      	movs	r2, #4
    2044:	a903      	add	r1, sp, #12
    2046:	0028      	movs	r0, r5
    2048:	4c1a      	ldr	r4, [pc, #104]	; (20b4 <STACK_SIZE+0xb4>)
    204a:	47a0      	blx	r4
    204c:	2800      	cmp	r0, #0
    204e:	d000      	beq.n	2052 <STACK_SIZE+0x52>
    2050:	e71c      	b.n	1e8c <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    2052:	4b19      	ldr	r3, [pc, #100]	; (20b8 <STACK_SIZE+0xb8>)
    2054:	681b      	ldr	r3, [r3, #0]
    2056:	2b00      	cmp	r3, #0
    2058:	d100      	bne.n	205c <STACK_SIZE+0x5c>
    205a:	e717      	b.n	1e8c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    205c:	a903      	add	r1, sp, #12
    205e:	302a      	adds	r0, #42	; 0x2a
    2060:	4798      	blx	r3
    2062:	e713      	b.n	1e8c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    2064:	2300      	movs	r3, #0
    2066:	2208      	movs	r2, #8
    2068:	a903      	add	r1, sp, #12
    206a:	0028      	movs	r0, r5
    206c:	4c11      	ldr	r4, [pc, #68]	; (20b4 <STACK_SIZE+0xb4>)
    206e:	47a0      	blx	r4
    2070:	2800      	cmp	r0, #0
    2072:	d000      	beq.n	2076 <STACK_SIZE+0x76>
    2074:	e70a      	b.n	1e8c <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    2076:	ab03      	add	r3, sp, #12
    2078:	889a      	ldrh	r2, [r3, #4]
    207a:	0028      	movs	r0, r5
    207c:	3008      	adds	r0, #8
    207e:	2301      	movs	r3, #1
    2080:	9903      	ldr	r1, [sp, #12]
    2082:	4c0c      	ldr	r4, [pc, #48]	; (20b4 <STACK_SIZE+0xb4>)
    2084:	47a0      	blx	r4
    2086:	2800      	cmp	r0, #0
    2088:	d000      	beq.n	208c <STACK_SIZE+0x8c>
    208a:	e6ff      	b.n	1e8c <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    208c:	4b0a      	ldr	r3, [pc, #40]	; (20b8 <STACK_SIZE+0xb8>)
    208e:	681b      	ldr	r3, [r3, #0]
    2090:	2b00      	cmp	r3, #0
    2092:	d100      	bne.n	2096 <STACK_SIZE+0x96>
    2094:	e6fa      	b.n	1e8c <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    2096:	a903      	add	r1, sp, #12
    2098:	3020      	adds	r0, #32
    209a:	4798      	blx	r3
    209c:	e6f6      	b.n	1e8c <m2m_wifi_cb+0x68>
    209e:	46c0      	nop			; (mov r8, r8)
    20a0:	0000b1ec 	.word	0x0000b1ec
    20a4:	0000ae84 	.word	0x0000ae84
    20a8:	00009995 	.word	0x00009995
    20ac:	0000b23c 	.word	0x0000b23c
    20b0:	000099c9 	.word	0x000099c9
    20b4:	00001c7d 	.word	0x00001c7d
    20b8:	200000d8 	.word	0x200000d8
    20bc:	0000155d 	.word	0x0000155d
    20c0:	0000b1b4 	.word	0x0000b1b4
    20c4:	0000b21c 	.word	0x0000b21c
    20c8:	200000dd 	.word	0x200000dd
    20cc:	200000dc 	.word	0x200000dc

000020d0 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    20d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    20d2:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    20d4:	2201      	movs	r2, #1
    20d6:	230f      	movs	r3, #15
    20d8:	446b      	add	r3, sp
    20da:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    20dc:	2800      	cmp	r0, #0
    20de:	d061      	beq.n	21a4 <m2m_wifi_init+0xd4>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    20e0:	6802      	ldr	r2, [r0, #0]
    20e2:	4b32      	ldr	r3, [pc, #200]	; (21ac <m2m_wifi_init+0xdc>)
    20e4:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    20e6:	2200      	movs	r2, #0
    20e8:	4b31      	ldr	r3, [pc, #196]	; (21b0 <m2m_wifi_init+0xe0>)
    20ea:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    20ec:	200f      	movs	r0, #15
    20ee:	4468      	add	r0, sp
    20f0:	4b30      	ldr	r3, [pc, #192]	; (21b4 <m2m_wifi_init+0xe4>)
    20f2:	4798      	blx	r3
    20f4:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    20f6:	d002      	beq.n	20fe <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    20f8:	0020      	movs	r0, r4
    20fa:	b00f      	add	sp, #60	; 0x3c
    20fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    20fe:	2000      	movs	r0, #0
    2100:	4b2d      	ldr	r3, [pc, #180]	; (21b8 <m2m_wifi_init+0xe8>)
    2102:	4798      	blx	r3
    2104:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    2106:	d149      	bne.n	219c <m2m_wifi_init+0xcc>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    2108:	492c      	ldr	r1, [pc, #176]	; (21bc <m2m_wifi_init+0xec>)
    210a:	2001      	movs	r0, #1
    210c:	4b2c      	ldr	r3, [pc, #176]	; (21c0 <m2m_wifi_init+0xf0>)
    210e:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    2110:	ae04      	add	r6, sp, #16
    2112:	0030      	movs	r0, r6
    2114:	4b2b      	ldr	r3, [pc, #172]	; (21c4 <m2m_wifi_init+0xf4>)
    2116:	4798      	blx	r3
    2118:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    211a:	482b      	ldr	r0, [pc, #172]	; (21c8 <m2m_wifi_init+0xf8>)
    211c:	4d2b      	ldr	r5, [pc, #172]	; (21cc <m2m_wifi_init+0xfc>)
    211e:	47a8      	blx	r5
    2120:	79b3      	ldrb	r3, [r6, #6]
    2122:	7972      	ldrb	r2, [r6, #5]
    2124:	7931      	ldrb	r1, [r6, #4]
    2126:	8c30      	ldrh	r0, [r6, #32]
    2128:	9000      	str	r0, [sp, #0]
    212a:	4829      	ldr	r0, [pc, #164]	; (21d0 <m2m_wifi_init+0x100>)
    212c:	47a8      	blx	r5
    212e:	200d      	movs	r0, #13
    2130:	4f28      	ldr	r7, [pc, #160]	; (21d4 <m2m_wifi_init+0x104>)
    2132:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    2134:	4824      	ldr	r0, [pc, #144]	; (21c8 <m2m_wifi_init+0xf8>)
    2136:	47a8      	blx	r5
    2138:	2226      	movs	r2, #38	; 0x26
    213a:	446a      	add	r2, sp
    213c:	211a      	movs	r1, #26
    213e:	4469      	add	r1, sp
    2140:	4825      	ldr	r0, [pc, #148]	; (21d8 <m2m_wifi_init+0x108>)
    2142:	47a8      	blx	r5
    2144:	200d      	movs	r0, #13
    2146:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    2148:	481f      	ldr	r0, [pc, #124]	; (21c8 <m2m_wifi_init+0xf8>)
    214a:	47a8      	blx	r5
    214c:	7a73      	ldrb	r3, [r6, #9]
    214e:	7a32      	ldrb	r2, [r6, #8]
    2150:	79f1      	ldrb	r1, [r6, #7]
    2152:	4822      	ldr	r0, [pc, #136]	; (21dc <m2m_wifi_init+0x10c>)
    2154:	47a8      	blx	r5
    2156:	200d      	movs	r0, #13
    2158:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    215a:	481b      	ldr	r0, [pc, #108]	; (21c8 <m2m_wifi_init+0xf8>)
    215c:	47a8      	blx	r5
    215e:	2302      	movs	r3, #2
    2160:	2205      	movs	r2, #5
    2162:	2113      	movs	r1, #19
    2164:	481e      	ldr	r0, [pc, #120]	; (21e0 <m2m_wifi_init+0x110>)
    2166:	47a8      	blx	r5
    2168:	200d      	movs	r0, #13
    216a:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    216c:	4816      	ldr	r0, [pc, #88]	; (21c8 <m2m_wifi_init+0xf8>)
    216e:	47a8      	blx	r5
    2170:	4a1c      	ldr	r2, [pc, #112]	; (21e4 <m2m_wifi_init+0x114>)
    2172:	491d      	ldr	r1, [pc, #116]	; (21e8 <m2m_wifi_init+0x118>)
    2174:	481d      	ldr	r0, [pc, #116]	; (21ec <m2m_wifi_init+0x11c>)
    2176:	47a8      	blx	r5
    2178:	200d      	movs	r0, #13
    217a:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    217c:	0023      	movs	r3, r4
    217e:	330d      	adds	r3, #13
    2180:	d1ba      	bne.n	20f8 <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    2182:	22e8      	movs	r2, #232	; 0xe8
    2184:	32ff      	adds	r2, #255	; 0xff
    2186:	491a      	ldr	r1, [pc, #104]	; (21f0 <m2m_wifi_init+0x120>)
    2188:	481a      	ldr	r0, [pc, #104]	; (21f4 <m2m_wifi_init+0x124>)
    218a:	4b10      	ldr	r3, [pc, #64]	; (21cc <m2m_wifi_init+0xfc>)
    218c:	4798      	blx	r3
    218e:	481a      	ldr	r0, [pc, #104]	; (21f8 <m2m_wifi_init+0x128>)
    2190:	4b1a      	ldr	r3, [pc, #104]	; (21fc <m2m_wifi_init+0x12c>)
    2192:	4798      	blx	r3
    2194:	200d      	movs	r0, #13
    2196:	4b0f      	ldr	r3, [pc, #60]	; (21d4 <m2m_wifi_init+0x104>)
    2198:	4798      	blx	r3
    219a:	e7ad      	b.n	20f8 <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    219c:	2000      	movs	r0, #0
    219e:	4b18      	ldr	r3, [pc, #96]	; (2200 <m2m_wifi_init+0x130>)
    21a0:	4798      	blx	r3
    21a2:	e7a9      	b.n	20f8 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    21a4:	240c      	movs	r4, #12
    21a6:	4264      	negs	r4, r4
    21a8:	e7a6      	b.n	20f8 <m2m_wifi_init+0x28>
    21aa:	46c0      	nop			; (mov r8, r8)
    21ac:	200000d8 	.word	0x200000d8
    21b0:	200000dd 	.word	0x200000dd
    21b4:	00002b71 	.word	0x00002b71
    21b8:	00001ded 	.word	0x00001ded
    21bc:	00001e25 	.word	0x00001e25
    21c0:	00001d69 	.word	0x00001d69
    21c4:	00002a8d 	.word	0x00002a8d
    21c8:	0000b1b4 	.word	0x0000b1b4
    21cc:	00009995 	.word	0x00009995
    21d0:	0000b2f8 	.word	0x0000b2f8
    21d4:	000099c9 	.word	0x000099c9
    21d8:	0000b320 	.word	0x0000b320
    21dc:	0000b33c 	.word	0x0000b33c
    21e0:	0000b360 	.word	0x0000b360
    21e4:	0000b378 	.word	0x0000b378
    21e8:	0000b384 	.word	0x0000b384
    21ec:	0000b390 	.word	0x0000b390
    21f0:	0000b1f8 	.word	0x0000b1f8
    21f4:	0000ae84 	.word	0x0000ae84
    21f8:	0000b3a8 	.word	0x0000b3a8
    21fc:	00009ab1 	.word	0x00009ab1
    2200:	00002c45 	.word	0x00002c45

00002204 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    2204:	b510      	push	{r4, lr}
	return hif_handle_isr();
    2206:	4b01      	ldr	r3, [pc, #4]	; (220c <m2m_wifi_handle_events+0x8>)
    2208:	4798      	blx	r3
}
    220a:	bd10      	pop	{r4, pc}
    220c:	000018a1 	.word	0x000018a1

00002210 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    2210:	b5f0      	push	{r4, r5, r6, r7, lr}
    2212:	46ce      	mov	lr, r9
    2214:	4647      	mov	r7, r8
    2216:	b580      	push	{r7, lr}
    2218:	b0a3      	sub	sp, #140	; 0x8c
    221a:	9005      	str	r0, [sp, #20]
    221c:	000c      	movs	r4, r1
    221e:	0015      	movs	r5, r2
    2220:	001f      	movs	r7, r3
    2222:	ab2a      	add	r3, sp, #168	; 0xa8
    2224:	881b      	ldrh	r3, [r3, #0]
    2226:	4699      	mov	r9, r3
    2228:	ab2b      	add	r3, sp, #172	; 0xac
    222a:	781b      	ldrb	r3, [r3, #0]
    222c:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    222e:	2a01      	cmp	r2, #1
    2230:	d003      	beq.n	223a <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    2232:	2f00      	cmp	r7, #0
    2234:	d040      	beq.n	22b8 <m2m_wifi_connect_sc+0xa8>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    2236:	2a02      	cmp	r2, #2
    2238:	d04c      	beq.n	22d4 <m2m_wifi_connect_sc+0xc4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    223a:	1e63      	subs	r3, r4, #1
    223c:	2b1f      	cmp	r3, #31
    223e:	d900      	bls.n	2242 <m2m_wifi_connect_sc+0x32>
    2240:	e078      	b.n	2334 <m2m_wifi_connect_sc+0x124>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    2242:	464b      	mov	r3, r9
    2244:	3b01      	subs	r3, #1
    2246:	b29b      	uxth	r3, r3
    2248:	2b0d      	cmp	r3, #13
    224a:	d903      	bls.n	2254 <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    224c:	464b      	mov	r3, r9
    224e:	2bff      	cmp	r3, #255	; 0xff
    2250:	d000      	beq.n	2254 <m2m_wifi_connect_sc+0x44>
    2252:	e07d      	b.n	2350 <m2m_wifi_connect_sc+0x140>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    2254:	ae07      	add	r6, sp, #28
    2256:	0022      	movs	r2, r4
    2258:	9905      	ldr	r1, [sp, #20]
    225a:	205a      	movs	r0, #90	; 0x5a
    225c:	ab02      	add	r3, sp, #8
    225e:	469c      	mov	ip, r3
    2260:	4460      	add	r0, ip
    2262:	4b78      	ldr	r3, [pc, #480]	; (2444 <m2m_wifi_connect_sc+0x234>)
    2264:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    2266:	1934      	adds	r4, r6, r4
    2268:	3446      	adds	r4, #70	; 0x46
    226a:	2300      	movs	r3, #0
    226c:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    226e:	3344      	adds	r3, #68	; 0x44
    2270:	464a      	mov	r2, r9
    2272:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    2274:	4643      	mov	r3, r8
    2276:	1e5a      	subs	r2, r3, #1
    2278:	4193      	sbcs	r3, r2
    227a:	2267      	movs	r2, #103	; 0x67
    227c:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    227e:	2341      	movs	r3, #65	; 0x41
    2280:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    2282:	2d03      	cmp	r5, #3
    2284:	d100      	bne.n	2288 <m2m_wifi_connect_sc+0x78>
    2286:	e072      	b.n	236e <m2m_wifi_connect_sc+0x15e>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    2288:	2d02      	cmp	r5, #2
    228a:	d100      	bne.n	228e <m2m_wifi_connect_sc+0x7e>
    228c:	e0ab      	b.n	23e6 <m2m_wifi_connect_sc+0x1d6>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    228e:	2d04      	cmp	r5, #4
    2290:	d100      	bne.n	2294 <m2m_wifi_connect_sc+0x84>
    2292:	e0c3      	b.n	241c <m2m_wifi_connect_sc+0x20c>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    2294:	2d01      	cmp	r5, #1
    2296:	d000      	beq.n	229a <m2m_wifi_connect_sc+0x8a>
    2298:	e0c6      	b.n	2428 <m2m_wifi_connect_sc+0x218>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    229a:	2300      	movs	r3, #0
    229c:	9302      	str	r3, [sp, #8]
    229e:	9301      	str	r3, [sp, #4]
    22a0:	9300      	str	r3, [sp, #0]
    22a2:	336c      	adds	r3, #108	; 0x6c
    22a4:	aa07      	add	r2, sp, #28
    22a6:	2128      	movs	r1, #40	; 0x28
    22a8:	2001      	movs	r0, #1
    22aa:	4c67      	ldr	r4, [pc, #412]	; (2448 <m2m_wifi_connect_sc+0x238>)
    22ac:	47a0      	blx	r4

ERR1:
	return ret;
}
    22ae:	b023      	add	sp, #140	; 0x8c
    22b0:	bc0c      	pop	{r2, r3}
    22b2:	4690      	mov	r8, r2
    22b4:	4699      	mov	r9, r3
    22b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    22b8:	4a64      	ldr	r2, [pc, #400]	; (244c <m2m_wifi_connect_sc+0x23c>)
    22ba:	4965      	ldr	r1, [pc, #404]	; (2450 <m2m_wifi_connect_sc+0x240>)
    22bc:	4865      	ldr	r0, [pc, #404]	; (2454 <m2m_wifi_connect_sc+0x244>)
    22be:	4b66      	ldr	r3, [pc, #408]	; (2458 <m2m_wifi_connect_sc+0x248>)
    22c0:	4798      	blx	r3
    22c2:	4866      	ldr	r0, [pc, #408]	; (245c <m2m_wifi_connect_sc+0x24c>)
    22c4:	4b66      	ldr	r3, [pc, #408]	; (2460 <m2m_wifi_connect_sc+0x250>)
    22c6:	4798      	blx	r3
    22c8:	200d      	movs	r0, #13
    22ca:	4b66      	ldr	r3, [pc, #408]	; (2464 <m2m_wifi_connect_sc+0x254>)
    22cc:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    22ce:	200c      	movs	r0, #12
    22d0:	4240      	negs	r0, r0
			goto ERR1;
    22d2:	e7ec      	b.n	22ae <m2m_wifi_connect_sc+0x9e>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    22d4:	0038      	movs	r0, r7
    22d6:	4b64      	ldr	r3, [pc, #400]	; (2468 <m2m_wifi_connect_sc+0x258>)
    22d8:	4798      	blx	r3
    22da:	2840      	cmp	r0, #64	; 0x40
    22dc:	d1ad      	bne.n	223a <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    22de:	783b      	ldrb	r3, [r7, #0]
    22e0:	001a      	movs	r2, r3
    22e2:	3a30      	subs	r2, #48	; 0x30
    22e4:	2a36      	cmp	r2, #54	; 0x36
    22e6:	d817      	bhi.n	2318 <m2m_wifi_connect_sc+0x108>
    22e8:	3a0a      	subs	r2, #10
    22ea:	2a06      	cmp	r2, #6
    22ec:	d914      	bls.n	2318 <m2m_wifi_connect_sc+0x108>
    22ee:	3b47      	subs	r3, #71	; 0x47
    22f0:	2b19      	cmp	r3, #25
    22f2:	d911      	bls.n	2318 <m2m_wifi_connect_sc+0x108>
    22f4:	1c7a      	adds	r2, r7, #1
    22f6:	0038      	movs	r0, r7
    22f8:	3040      	adds	r0, #64	; 0x40
    22fa:	7813      	ldrb	r3, [r2, #0]
    22fc:	0019      	movs	r1, r3
    22fe:	3930      	subs	r1, #48	; 0x30
    2300:	2936      	cmp	r1, #54	; 0x36
    2302:	d809      	bhi.n	2318 <m2m_wifi_connect_sc+0x108>
    2304:	390a      	subs	r1, #10
    2306:	2906      	cmp	r1, #6
    2308:	d906      	bls.n	2318 <m2m_wifi_connect_sc+0x108>
    230a:	3b47      	subs	r3, #71	; 0x47
    230c:	2b19      	cmp	r3, #25
    230e:	d903      	bls.n	2318 <m2m_wifi_connect_sc+0x108>
    2310:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    2312:	4282      	cmp	r2, r0
    2314:	d1f1      	bne.n	22fa <m2m_wifi_connect_sc+0xea>
    2316:	e790      	b.n	223a <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    2318:	4a54      	ldr	r2, [pc, #336]	; (246c <m2m_wifi_connect_sc+0x25c>)
    231a:	494d      	ldr	r1, [pc, #308]	; (2450 <m2m_wifi_connect_sc+0x240>)
    231c:	484d      	ldr	r0, [pc, #308]	; (2454 <m2m_wifi_connect_sc+0x244>)
    231e:	4b4e      	ldr	r3, [pc, #312]	; (2458 <m2m_wifi_connect_sc+0x248>)
    2320:	4798      	blx	r3
    2322:	4853      	ldr	r0, [pc, #332]	; (2470 <m2m_wifi_connect_sc+0x260>)
    2324:	4b4e      	ldr	r3, [pc, #312]	; (2460 <m2m_wifi_connect_sc+0x250>)
    2326:	4798      	blx	r3
    2328:	200d      	movs	r0, #13
    232a:	4b4e      	ldr	r3, [pc, #312]	; (2464 <m2m_wifi_connect_sc+0x254>)
    232c:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    232e:	200c      	movs	r0, #12
    2330:	4240      	negs	r0, r0
					goto ERR1;
    2332:	e7bc      	b.n	22ae <m2m_wifi_connect_sc+0x9e>
		M2M_ERR("SSID LEN INVALID\n");
    2334:	4a4f      	ldr	r2, [pc, #316]	; (2474 <m2m_wifi_connect_sc+0x264>)
    2336:	4946      	ldr	r1, [pc, #280]	; (2450 <m2m_wifi_connect_sc+0x240>)
    2338:	4846      	ldr	r0, [pc, #280]	; (2454 <m2m_wifi_connect_sc+0x244>)
    233a:	4b47      	ldr	r3, [pc, #284]	; (2458 <m2m_wifi_connect_sc+0x248>)
    233c:	4798      	blx	r3
    233e:	484e      	ldr	r0, [pc, #312]	; (2478 <m2m_wifi_connect_sc+0x268>)
    2340:	4b47      	ldr	r3, [pc, #284]	; (2460 <m2m_wifi_connect_sc+0x250>)
    2342:	4798      	blx	r3
    2344:	200d      	movs	r0, #13
    2346:	4b47      	ldr	r3, [pc, #284]	; (2464 <m2m_wifi_connect_sc+0x254>)
    2348:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    234a:	200c      	movs	r0, #12
    234c:	4240      	negs	r0, r0
		goto ERR1;
    234e:	e7ae      	b.n	22ae <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("CH INVALID\n");
    2350:	228d      	movs	r2, #141	; 0x8d
    2352:	0092      	lsls	r2, r2, #2
    2354:	493e      	ldr	r1, [pc, #248]	; (2450 <m2m_wifi_connect_sc+0x240>)
    2356:	483f      	ldr	r0, [pc, #252]	; (2454 <m2m_wifi_connect_sc+0x244>)
    2358:	4b3f      	ldr	r3, [pc, #252]	; (2458 <m2m_wifi_connect_sc+0x248>)
    235a:	4798      	blx	r3
    235c:	4847      	ldr	r0, [pc, #284]	; (247c <m2m_wifi_connect_sc+0x26c>)
    235e:	4b40      	ldr	r3, [pc, #256]	; (2460 <m2m_wifi_connect_sc+0x250>)
    2360:	4798      	blx	r3
    2362:	200d      	movs	r0, #13
    2364:	4b3f      	ldr	r3, [pc, #252]	; (2464 <m2m_wifi_connect_sc+0x254>)
    2366:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2368:	200c      	movs	r0, #12
    236a:	4240      	negs	r0, r0
			goto ERR1;
    236c:	e79f      	b.n	22ae <m2m_wifi_connect_sc+0x9e>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    236e:	783b      	ldrb	r3, [r7, #0]
    2370:	3b01      	subs	r3, #1
    2372:	b2db      	uxtb	r3, r3
    2374:	aa07      	add	r2, sp, #28
    2376:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    2378:	2b03      	cmp	r3, #3
    237a:	d817      	bhi.n	23ac <m2m_wifi_connect_sc+0x19c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    237c:	787a      	ldrb	r2, [r7, #1]
    237e:	1e51      	subs	r1, r2, #1
    2380:	ab07      	add	r3, sp, #28
    2382:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    2384:	2310      	movs	r3, #16
    2386:	0011      	movs	r1, r2
    2388:	4399      	bics	r1, r3
    238a:	290b      	cmp	r1, #11
    238c:	d01d      	beq.n	23ca <m2m_wifi_connect_sc+0x1ba>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    238e:	4a3c      	ldr	r2, [pc, #240]	; (2480 <m2m_wifi_connect_sc+0x270>)
    2390:	492f      	ldr	r1, [pc, #188]	; (2450 <m2m_wifi_connect_sc+0x240>)
    2392:	4830      	ldr	r0, [pc, #192]	; (2454 <m2m_wifi_connect_sc+0x244>)
    2394:	4c30      	ldr	r4, [pc, #192]	; (2458 <m2m_wifi_connect_sc+0x248>)
    2396:	47a0      	blx	r4
    2398:	ab07      	add	r3, sp, #28
    239a:	7859      	ldrb	r1, [r3, #1]
    239c:	4839      	ldr	r0, [pc, #228]	; (2484 <m2m_wifi_connect_sc+0x274>)
    239e:	47a0      	blx	r4
    23a0:	200d      	movs	r0, #13
    23a2:	4b30      	ldr	r3, [pc, #192]	; (2464 <m2m_wifi_connect_sc+0x254>)
    23a4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    23a6:	200c      	movs	r0, #12
    23a8:	4240      	negs	r0, r0
			goto ERR1;
    23aa:	e780      	b.n	22ae <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    23ac:	4a36      	ldr	r2, [pc, #216]	; (2488 <m2m_wifi_connect_sc+0x278>)
    23ae:	4928      	ldr	r1, [pc, #160]	; (2450 <m2m_wifi_connect_sc+0x240>)
    23b0:	4828      	ldr	r0, [pc, #160]	; (2454 <m2m_wifi_connect_sc+0x244>)
    23b2:	4c29      	ldr	r4, [pc, #164]	; (2458 <m2m_wifi_connect_sc+0x248>)
    23b4:	47a0      	blx	r4
    23b6:	ab07      	add	r3, sp, #28
    23b8:	7819      	ldrb	r1, [r3, #0]
    23ba:	4834      	ldr	r0, [pc, #208]	; (248c <m2m_wifi_connect_sc+0x27c>)
    23bc:	47a0      	blx	r4
    23be:	200d      	movs	r0, #13
    23c0:	4b28      	ldr	r3, [pc, #160]	; (2464 <m2m_wifi_connect_sc+0x254>)
    23c2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    23c4:	200c      	movs	r0, #12
    23c6:	4240      	negs	r0, r0
			goto ERR1;
    23c8:	e771      	b.n	22ae <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    23ca:	1cb9      	adds	r1, r7, #2
    23cc:	2016      	movs	r0, #22
    23ce:	ab02      	add	r3, sp, #8
    23d0:	469c      	mov	ip, r3
    23d2:	4460      	add	r0, ip
    23d4:	4b1b      	ldr	r3, [pc, #108]	; (2444 <m2m_wifi_connect_sc+0x234>)
    23d6:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    23d8:	787b      	ldrb	r3, [r7, #1]
    23da:	aa07      	add	r2, sp, #28
    23dc:	4694      	mov	ip, r2
    23de:	4463      	add	r3, ip
    23e0:	2200      	movs	r2, #0
    23e2:	709a      	strb	r2, [r3, #2]
    23e4:	e759      	b.n	229a <m2m_wifi_connect_sc+0x8a>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    23e6:	0038      	movs	r0, r7
    23e8:	4b1f      	ldr	r3, [pc, #124]	; (2468 <m2m_wifi_connect_sc+0x258>)
    23ea:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    23ec:	1e43      	subs	r3, r0, #1
    23ee:	b29b      	uxth	r3, r3
    23f0:	2b3f      	cmp	r3, #63	; 0x3f
    23f2:	d805      	bhi.n	2400 <m2m_wifi_connect_sc+0x1f0>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    23f4:	1c42      	adds	r2, r0, #1
    23f6:	0039      	movs	r1, r7
    23f8:	a807      	add	r0, sp, #28
    23fa:	4b12      	ldr	r3, [pc, #72]	; (2444 <m2m_wifi_connect_sc+0x234>)
    23fc:	4798      	blx	r3
    23fe:	e74c      	b.n	229a <m2m_wifi_connect_sc+0x8a>
			M2M_ERR("Incorrect PSK key length\n");
    2400:	4a23      	ldr	r2, [pc, #140]	; (2490 <m2m_wifi_connect_sc+0x280>)
    2402:	4913      	ldr	r1, [pc, #76]	; (2450 <m2m_wifi_connect_sc+0x240>)
    2404:	4813      	ldr	r0, [pc, #76]	; (2454 <m2m_wifi_connect_sc+0x244>)
    2406:	4b14      	ldr	r3, [pc, #80]	; (2458 <m2m_wifi_connect_sc+0x248>)
    2408:	4798      	blx	r3
    240a:	4822      	ldr	r0, [pc, #136]	; (2494 <m2m_wifi_connect_sc+0x284>)
    240c:	4b14      	ldr	r3, [pc, #80]	; (2460 <m2m_wifi_connect_sc+0x250>)
    240e:	4798      	blx	r3
    2410:	200d      	movs	r0, #13
    2412:	4b14      	ldr	r3, [pc, #80]	; (2464 <m2m_wifi_connect_sc+0x254>)
    2414:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2416:	200c      	movs	r0, #12
    2418:	4240      	negs	r0, r0
			goto ERR1;
    241a:	e748      	b.n	22ae <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    241c:	223e      	movs	r2, #62	; 0x3e
    241e:	0039      	movs	r1, r7
    2420:	a807      	add	r0, sp, #28
    2422:	4b08      	ldr	r3, [pc, #32]	; (2444 <m2m_wifi_connect_sc+0x234>)
    2424:	4798      	blx	r3
    2426:	e738      	b.n	229a <m2m_wifi_connect_sc+0x8a>
		M2M_ERR("undefined sec type\n");
    2428:	4a1b      	ldr	r2, [pc, #108]	; (2498 <m2m_wifi_connect_sc+0x288>)
    242a:	4909      	ldr	r1, [pc, #36]	; (2450 <m2m_wifi_connect_sc+0x240>)
    242c:	4809      	ldr	r0, [pc, #36]	; (2454 <m2m_wifi_connect_sc+0x244>)
    242e:	4b0a      	ldr	r3, [pc, #40]	; (2458 <m2m_wifi_connect_sc+0x248>)
    2430:	4798      	blx	r3
    2432:	481a      	ldr	r0, [pc, #104]	; (249c <m2m_wifi_connect_sc+0x28c>)
    2434:	4b0a      	ldr	r3, [pc, #40]	; (2460 <m2m_wifi_connect_sc+0x250>)
    2436:	4798      	blx	r3
    2438:	200d      	movs	r0, #13
    243a:	4b0a      	ldr	r3, [pc, #40]	; (2464 <m2m_wifi_connect_sc+0x254>)
    243c:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    243e:	200c      	movs	r0, #12
    2440:	4240      	negs	r0, r0
		goto ERR1;
    2442:	e734      	b.n	22ae <m2m_wifi_connect_sc+0x9e>
    2444:	00001549 	.word	0x00001549
    2448:	00001671 	.word	0x00001671
    244c:	00000215 	.word	0x00000215
    2450:	0000b208 	.word	0x0000b208
    2454:	0000ae84 	.word	0x0000ae84
    2458:	00009995 	.word	0x00009995
    245c:	0000b250 	.word	0x0000b250
    2460:	00009ab1 	.word	0x00009ab1
    2464:	000099c9 	.word	0x000099c9
    2468:	0000156d 	.word	0x0000156d
    246c:	00000221 	.word	0x00000221
    2470:	0000b264 	.word	0x0000b264
    2474:	0000022b 	.word	0x0000022b
    2478:	0000b270 	.word	0x0000b270
    247c:	0000b284 	.word	0x0000b284
    2480:	00000252 	.word	0x00000252
    2484:	0000b2ac 	.word	0x0000b2ac
    2488:	0000024b 	.word	0x0000024b
    248c:	0000b290 	.word	0x0000b290
    2490:	00000261 	.word	0x00000261
    2494:	0000b2c8 	.word	0x0000b2c8
    2498:	00000271 	.word	0x00000271
    249c:	0000b2e4 	.word	0x0000b2e4

000024a0 <m2m_wifi_connect>:
{
    24a0:	b530      	push	{r4, r5, lr}
    24a2:	b083      	sub	sp, #12
    24a4:	ac06      	add	r4, sp, #24
    24a6:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    24a8:	2500      	movs	r5, #0
    24aa:	9501      	str	r5, [sp, #4]
    24ac:	9400      	str	r4, [sp, #0]
    24ae:	4c02      	ldr	r4, [pc, #8]	; (24b8 <m2m_wifi_connect+0x18>)
    24b0:	47a0      	blx	r4
}
    24b2:	b003      	add	sp, #12
    24b4:	bd30      	pop	{r4, r5, pc}
    24b6:	46c0      	nop			; (mov r8, r8)
    24b8:	00002211 	.word	0x00002211

000024bc <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    24bc:	2000      	movs	r0, #0
    24be:	4770      	bx	lr

000024c0 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    24c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    24c2:	b083      	sub	sp, #12
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    24c4:	2580      	movs	r5, #128	; 0x80
    24c6:	006d      	lsls	r5, r5, #1
    24c8:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    24ca:	24a5      	movs	r4, #165	; 0xa5
    24cc:	0164      	lsls	r4, r4, #5
    24ce:	4f08      	ldr	r7, [pc, #32]	; (24f0 <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    24d0:	4e08      	ldr	r6, [pc, #32]	; (24f4 <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    24d2:	0029      	movs	r1, r5
    24d4:	0020      	movs	r0, r4
    24d6:	47b8      	blx	r7
			uint32 reg = 0;
    24d8:	2300      	movs	r3, #0
    24da:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    24dc:	a901      	add	r1, sp, #4
    24de:	0020      	movs	r0, r4
    24e0:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    24e2:	2800      	cmp	r0, #0
    24e4:	d1f5      	bne.n	24d2 <chip_apply_conf+0x12>
				if(reg == val32)
    24e6:	9b01      	ldr	r3, [sp, #4]
    24e8:	429d      	cmp	r5, r3
    24ea:	d1f2      	bne.n	24d2 <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    24ec:	b003      	add	sp, #12
    24ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24f0:	000029b1 	.word	0x000029b1
    24f4:	000029a5 	.word	0x000029a5

000024f8 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    24f8:	b500      	push	{lr}
    24fa:	b083      	sub	sp, #12
	uint32 reg = 0;
    24fc:	2300      	movs	r3, #0
    24fe:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    2500:	a901      	add	r1, sp, #4
    2502:	4811      	ldr	r0, [pc, #68]	; (2548 <enable_interrupts+0x50>)
    2504:	4b11      	ldr	r3, [pc, #68]	; (254c <enable_interrupts+0x54>)
    2506:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    2508:	2800      	cmp	r0, #0
    250a:	d001      	beq.n	2510 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    250c:	b003      	add	sp, #12
    250e:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    2510:	2180      	movs	r1, #128	; 0x80
    2512:	0049      	lsls	r1, r1, #1
    2514:	9b01      	ldr	r3, [sp, #4]
    2516:	4319      	orrs	r1, r3
    2518:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    251a:	480b      	ldr	r0, [pc, #44]	; (2548 <enable_interrupts+0x50>)
    251c:	4b0c      	ldr	r3, [pc, #48]	; (2550 <enable_interrupts+0x58>)
    251e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    2520:	2800      	cmp	r0, #0
    2522:	d1f3      	bne.n	250c <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    2524:	a901      	add	r1, sp, #4
    2526:	20d0      	movs	r0, #208	; 0xd0
    2528:	0140      	lsls	r0, r0, #5
    252a:	4b08      	ldr	r3, [pc, #32]	; (254c <enable_interrupts+0x54>)
    252c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    252e:	2800      	cmp	r0, #0
    2530:	d1ec      	bne.n	250c <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    2532:	2180      	movs	r1, #128	; 0x80
    2534:	0249      	lsls	r1, r1, #9
    2536:	9b01      	ldr	r3, [sp, #4]
    2538:	4319      	orrs	r1, r3
    253a:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    253c:	20d0      	movs	r0, #208	; 0xd0
    253e:	0140      	lsls	r0, r0, #5
    2540:	4b03      	ldr	r3, [pc, #12]	; (2550 <enable_interrupts+0x58>)
    2542:	4798      	blx	r3
    2544:	e7e2      	b.n	250c <enable_interrupts+0x14>
    2546:	46c0      	nop			; (mov r8, r8)
    2548:	00001408 	.word	0x00001408
    254c:	000029a5 	.word	0x000029a5
    2550:	000029b1 	.word	0x000029b1

00002554 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    2554:	b510      	push	{r4, lr}
    2556:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    2558:	4b28      	ldr	r3, [pc, #160]	; (25fc <nmi_get_chipid+0xa8>)
    255a:	681c      	ldr	r4, [r3, #0]
    255c:	2c00      	cmp	r4, #0
    255e:	d004      	beq.n	256a <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    2560:	4b26      	ldr	r3, [pc, #152]	; (25fc <nmi_get_chipid+0xa8>)
    2562:	681c      	ldr	r4, [r3, #0]
}
    2564:	0020      	movs	r0, r4
    2566:	b002      	add	sp, #8
    2568:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    256a:	0019      	movs	r1, r3
    256c:	2080      	movs	r0, #128	; 0x80
    256e:	0140      	lsls	r0, r0, #5
    2570:	4b23      	ldr	r3, [pc, #140]	; (2600 <nmi_get_chipid+0xac>)
    2572:	4798      	blx	r3
    2574:	2800      	cmp	r0, #0
    2576:	d003      	beq.n	2580 <nmi_get_chipid+0x2c>
			chipid = 0;
    2578:	2200      	movs	r2, #0
    257a:	4b20      	ldr	r3, [pc, #128]	; (25fc <nmi_get_chipid+0xa8>)
    257c:	601a      	str	r2, [r3, #0]
			return 0;
    257e:	e7f1      	b.n	2564 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    2580:	a901      	add	r1, sp, #4
    2582:	4820      	ldr	r0, [pc, #128]	; (2604 <nmi_get_chipid+0xb0>)
    2584:	4b1e      	ldr	r3, [pc, #120]	; (2600 <nmi_get_chipid+0xac>)
    2586:	4798      	blx	r3
    2588:	2800      	cmp	r0, #0
    258a:	d003      	beq.n	2594 <nmi_get_chipid+0x40>
			chipid = 0;
    258c:	2200      	movs	r2, #0
    258e:	4b1b      	ldr	r3, [pc, #108]	; (25fc <nmi_get_chipid+0xa8>)
    2590:	601a      	str	r2, [r3, #0]
			return 0;
    2592:	e7e7      	b.n	2564 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    2594:	4b19      	ldr	r3, [pc, #100]	; (25fc <nmi_get_chipid+0xa8>)
    2596:	681b      	ldr	r3, [r3, #0]
    2598:	4a1b      	ldr	r2, [pc, #108]	; (2608 <nmi_get_chipid+0xb4>)
    259a:	4293      	cmp	r3, r2
    259c:	d00e      	beq.n	25bc <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    259e:	4a1b      	ldr	r2, [pc, #108]	; (260c <nmi_get_chipid+0xb8>)
    25a0:	4293      	cmp	r3, r2
    25a2:	d012      	beq.n	25ca <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    25a4:	4a1a      	ldr	r2, [pc, #104]	; (2610 <nmi_get_chipid+0xbc>)
    25a6:	4293      	cmp	r3, r2
    25a8:	d01c      	beq.n	25e4 <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    25aa:	4914      	ldr	r1, [pc, #80]	; (25fc <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    25ac:	4a19      	ldr	r2, [pc, #100]	; (2614 <nmi_get_chipid+0xc0>)
    25ae:	680b      	ldr	r3, [r1, #0]
    25b0:	401a      	ands	r2, r3
		chipid |= 0x050000;
    25b2:	23a0      	movs	r3, #160	; 0xa0
    25b4:	02db      	lsls	r3, r3, #11
    25b6:	4313      	orrs	r3, r2
    25b8:	600b      	str	r3, [r1, #0]
    25ba:	e7d1      	b.n	2560 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    25bc:	9b01      	ldr	r3, [sp, #4]
    25be:	2b01      	cmp	r3, #1
    25c0:	d0f3      	beq.n	25aa <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    25c2:	4a15      	ldr	r2, [pc, #84]	; (2618 <nmi_get_chipid+0xc4>)
    25c4:	4b0d      	ldr	r3, [pc, #52]	; (25fc <nmi_get_chipid+0xa8>)
    25c6:	601a      	str	r2, [r3, #0]
    25c8:	e7ef      	b.n	25aa <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    25ca:	9b01      	ldr	r3, [sp, #4]
    25cc:	2b03      	cmp	r3, #3
    25ce:	d0ec      	beq.n	25aa <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    25d0:	2b04      	cmp	r3, #4
    25d2:	d003      	beq.n	25dc <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    25d4:	4a11      	ldr	r2, [pc, #68]	; (261c <nmi_get_chipid+0xc8>)
    25d6:	4b09      	ldr	r3, [pc, #36]	; (25fc <nmi_get_chipid+0xa8>)
    25d8:	601a      	str	r2, [r3, #0]
    25da:	e7e6      	b.n	25aa <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    25dc:	4a10      	ldr	r2, [pc, #64]	; (2620 <nmi_get_chipid+0xcc>)
    25de:	4b07      	ldr	r3, [pc, #28]	; (25fc <nmi_get_chipid+0xa8>)
    25e0:	601a      	str	r2, [r3, #0]
    25e2:	e7e2      	b.n	25aa <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    25e4:	4905      	ldr	r1, [pc, #20]	; (25fc <nmi_get_chipid+0xa8>)
    25e6:	20ec      	movs	r0, #236	; 0xec
    25e8:	0380      	lsls	r0, r0, #14
    25ea:	4b05      	ldr	r3, [pc, #20]	; (2600 <nmi_get_chipid+0xac>)
    25ec:	4798      	blx	r3
    25ee:	2800      	cmp	r0, #0
    25f0:	d0db      	beq.n	25aa <nmi_get_chipid+0x56>
			chipid = 0;
    25f2:	2200      	movs	r2, #0
    25f4:	4b01      	ldr	r3, [pc, #4]	; (25fc <nmi_get_chipid+0xa8>)
    25f6:	601a      	str	r2, [r3, #0]
			return 0;
    25f8:	e7b4      	b.n	2564 <nmi_get_chipid+0x10>
    25fa:	46c0      	nop			; (mov r8, r8)
    25fc:	200000e0 	.word	0x200000e0
    2600:	000029a5 	.word	0x000029a5
    2604:	000013f4 	.word	0x000013f4
    2608:	001002a0 	.word	0x001002a0
    260c:	001002b0 	.word	0x001002b0
    2610:	001000f0 	.word	0x001000f0
    2614:	fff0ffff 	.word	0xfff0ffff
    2618:	001002a1 	.word	0x001002a1
    261c:	001002b2 	.word	0x001002b2
    2620:	001002b1 	.word	0x001002b1

00002624 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    2624:	b530      	push	{r4, r5, lr}
    2626:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    2628:	4c16      	ldr	r4, [pc, #88]	; (2684 <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    262a:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    262c:	a901      	add	r1, sp, #4
    262e:	2010      	movs	r0, #16
    2630:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    2632:	2800      	cmp	r0, #0
    2634:	d11c      	bne.n	2670 <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    2636:	9b01      	ldr	r3, [sp, #4]
    2638:	422b      	tst	r3, r5
    263a:	d1f7      	bne.n	262c <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    263c:	a901      	add	r1, sp, #4
    263e:	3001      	adds	r0, #1
    2640:	4b10      	ldr	r3, [pc, #64]	; (2684 <chip_sleep+0x60>)
    2642:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    2644:	2800      	cmp	r0, #0
    2646:	d113      	bne.n	2670 <chip_sleep+0x4c>
	if(reg & NBIT1)
    2648:	9901      	ldr	r1, [sp, #4]
    264a:	078b      	lsls	r3, r1, #30
    264c:	d507      	bpl.n	265e <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    264e:	2302      	movs	r3, #2
    2650:	4399      	bics	r1, r3
    2652:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    2654:	3001      	adds	r0, #1
    2656:	4b0c      	ldr	r3, [pc, #48]	; (2688 <chip_sleep+0x64>)
    2658:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    265a:	2800      	cmp	r0, #0
    265c:	d108      	bne.n	2670 <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    265e:	a901      	add	r1, sp, #4
    2660:	200b      	movs	r0, #11
    2662:	4b08      	ldr	r3, [pc, #32]	; (2684 <chip_sleep+0x60>)
    2664:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    2666:	2800      	cmp	r0, #0
    2668:	d102      	bne.n	2670 <chip_sleep+0x4c>
	if(reg & NBIT0)
    266a:	9901      	ldr	r1, [sp, #4]
    266c:	07cb      	lsls	r3, r1, #31
    266e:	d401      	bmi.n	2674 <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    2670:	b003      	add	sp, #12
    2672:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    2674:	2301      	movs	r3, #1
    2676:	4399      	bics	r1, r3
    2678:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    267a:	300b      	adds	r0, #11
    267c:	4b02      	ldr	r3, [pc, #8]	; (2688 <chip_sleep+0x64>)
    267e:	4798      	blx	r3
    2680:	e7f6      	b.n	2670 <chip_sleep+0x4c>
    2682:	46c0      	nop			; (mov r8, r8)
    2684:	000029a5 	.word	0x000029a5
    2688:	000029b1 	.word	0x000029b1

0000268c <chip_wake>:
sint8 chip_wake(void)
{
    268c:	b5f0      	push	{r4, r5, r6, r7, lr}
    268e:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    2690:	2300      	movs	r3, #0
    2692:	9301      	str	r3, [sp, #4]
    2694:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    2696:	a901      	add	r1, sp, #4
    2698:	200b      	movs	r0, #11
    269a:	4b28      	ldr	r3, [pc, #160]	; (273c <chip_wake+0xb0>)
    269c:	4798      	blx	r3
    269e:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    26a0:	d130      	bne.n	2704 <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    26a2:	9901      	ldr	r1, [sp, #4]
    26a4:	07cb      	lsls	r3, r1, #31
    26a6:	d406      	bmi.n	26b6 <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    26a8:	2301      	movs	r3, #1
    26aa:	4319      	orrs	r1, r3
    26ac:	200b      	movs	r0, #11
    26ae:	4b24      	ldr	r3, [pc, #144]	; (2740 <chip_wake+0xb4>)
    26b0:	4798      	blx	r3
    26b2:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    26b4:	d126      	bne.n	2704 <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    26b6:	a901      	add	r1, sp, #4
    26b8:	2001      	movs	r0, #1
    26ba:	4b20      	ldr	r3, [pc, #128]	; (273c <chip_wake+0xb0>)
    26bc:	4798      	blx	r3
    26be:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    26c0:	d120      	bne.n	2704 <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    26c2:	9901      	ldr	r1, [sp, #4]
    26c4:	078b      	lsls	r3, r1, #30
    26c6:	d520      	bpl.n	270a <chip_wake+0x7e>
{
    26c8:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    26ca:	4f1c      	ldr	r7, [pc, #112]	; (273c <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    26cc:	4e1d      	ldr	r6, [pc, #116]	; (2744 <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    26ce:	4669      	mov	r1, sp
    26d0:	200f      	movs	r0, #15
    26d2:	47b8      	blx	r7
    26d4:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    26d6:	d120      	bne.n	271a <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    26d8:	9b00      	ldr	r3, [sp, #0]
    26da:	075b      	lsls	r3, r3, #29
    26dc:	d42b      	bmi.n	2736 <chip_wake+0xaa>
		nm_bsp_sleep(2);
    26de:	2002      	movs	r0, #2
    26e0:	47b0      	blx	r6
    26e2:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    26e4:	2d00      	cmp	r5, #0
    26e6:	d1f2      	bne.n	26ce <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    26e8:	22af      	movs	r2, #175	; 0xaf
    26ea:	0052      	lsls	r2, r2, #1
    26ec:	4916      	ldr	r1, [pc, #88]	; (2748 <chip_wake+0xbc>)
    26ee:	4817      	ldr	r0, [pc, #92]	; (274c <chip_wake+0xc0>)
    26f0:	4b17      	ldr	r3, [pc, #92]	; (2750 <chip_wake+0xc4>)
    26f2:	4798      	blx	r3
    26f4:	4817      	ldr	r0, [pc, #92]	; (2754 <chip_wake+0xc8>)
    26f6:	4b18      	ldr	r3, [pc, #96]	; (2758 <chip_wake+0xcc>)
    26f8:	4798      	blx	r3
    26fa:	200d      	movs	r0, #13
    26fc:	4b17      	ldr	r3, [pc, #92]	; (275c <chip_wake+0xd0>)
    26fe:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    2700:	2404      	movs	r4, #4
    2702:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    2704:	0020      	movs	r0, r4
    2706:	b003      	add	sp, #12
    2708:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    270a:	2302      	movs	r3, #2
    270c:	4319      	orrs	r1, r3
    270e:	2001      	movs	r0, #1
    2710:	4b0b      	ldr	r3, [pc, #44]	; (2740 <chip_wake+0xb4>)
    2712:	4798      	blx	r3
    2714:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    2716:	d0d7      	beq.n	26c8 <chip_wake+0x3c>
    2718:	e7f4      	b.n	2704 <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    271a:	22aa      	movs	r2, #170	; 0xaa
    271c:	0052      	lsls	r2, r2, #1
    271e:	490a      	ldr	r1, [pc, #40]	; (2748 <chip_wake+0xbc>)
    2720:	480a      	ldr	r0, [pc, #40]	; (274c <chip_wake+0xc0>)
    2722:	4d0b      	ldr	r5, [pc, #44]	; (2750 <chip_wake+0xc4>)
    2724:	47a8      	blx	r5
    2726:	9a00      	ldr	r2, [sp, #0]
    2728:	0021      	movs	r1, r4
    272a:	480d      	ldr	r0, [pc, #52]	; (2760 <chip_wake+0xd4>)
    272c:	47a8      	blx	r5
    272e:	200d      	movs	r0, #13
    2730:	4b0a      	ldr	r3, [pc, #40]	; (275c <chip_wake+0xd0>)
    2732:	4798      	blx	r3
			goto _WAKE_EXIT;
    2734:	e7e6      	b.n	2704 <chip_wake+0x78>
	nm_bus_reset();
    2736:	4b0b      	ldr	r3, [pc, #44]	; (2764 <chip_wake+0xd8>)
    2738:	4798      	blx	r3
    273a:	e7e3      	b.n	2704 <chip_wake+0x78>
    273c:	000029a5 	.word	0x000029a5
    2740:	000029b1 	.word	0x000029b1
    2744:	00001159 	.word	0x00001159
    2748:	0000b3c4 	.word	0x0000b3c4
    274c:	0000ae84 	.word	0x0000ae84
    2750:	00009995 	.word	0x00009995
    2754:	0000b40c 	.word	0x0000b40c
    2758:	00009ab1 	.word	0x00009ab1
    275c:	000099c9 	.word	0x000099c9
    2760:	0000b3f4 	.word	0x0000b3f4
    2764:	0000298d 	.word	0x0000298d

00002768 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    2768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    276a:	0007      	movs	r7, r0
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    276c:	4d2d      	ldr	r5, [pc, #180]	; (2824 <wait_for_bootrom+0xbc>)
    276e:	4c2e      	ldr	r4, [pc, #184]	; (2828 <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    2770:	4e2e      	ldr	r6, [pc, #184]	; (282c <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    2772:	0028      	movs	r0, r5
    2774:	47a0      	blx	r4
		if (reg & 0x80000000) {
    2776:	2800      	cmp	r0, #0
    2778:	db02      	blt.n	2780 <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    277a:	2001      	movs	r0, #1
    277c:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    277e:	e7f8      	b.n	2772 <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    2780:	482b      	ldr	r0, [pc, #172]	; (2830 <wait_for_bootrom+0xc8>)
    2782:	4b29      	ldr	r3, [pc, #164]	; (2828 <wait_for_bootrom+0xc0>)
    2784:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    2786:	07c3      	lsls	r3, r0, #31
    2788:	d409      	bmi.n	279e <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    278a:	4e28      	ldr	r6, [pc, #160]	; (282c <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
    278c:	4c29      	ldr	r4, [pc, #164]	; (2834 <wait_for_bootrom+0xcc>)
    278e:	4d26      	ldr	r5, [pc, #152]	; (2828 <wait_for_bootrom+0xc0>)
			nm_bsp_sleep(1);
    2790:	2001      	movs	r0, #1
    2792:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    2794:	0020      	movs	r0, r4
    2796:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    2798:	4b27      	ldr	r3, [pc, #156]	; (2838 <wait_for_bootrom+0xd0>)
    279a:	4298      	cmp	r0, r3
    279c:	d1f8      	bne.n	2790 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    279e:	2f02      	cmp	r7, #2
    27a0:	d021      	beq.n	27e6 <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    27a2:	2f03      	cmp	r7, #3
    27a4:	d029      	beq.n	27fa <wait_for_bootrom+0x92>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    27a6:	2f04      	cmp	r7, #4
    27a8:	d030      	beq.n	280c <wait_for_bootrom+0xa4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    27aa:	4924      	ldr	r1, [pc, #144]	; (283c <wait_for_bootrom+0xd4>)
    27ac:	4824      	ldr	r0, [pc, #144]	; (2840 <wait_for_bootrom+0xd8>)
    27ae:	4b25      	ldr	r3, [pc, #148]	; (2844 <wait_for_bootrom+0xdc>)
    27b0:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    27b2:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    27b4:	4b24      	ldr	r3, [pc, #144]	; (2848 <wait_for_bootrom+0xe0>)
    27b6:	4798      	blx	r3
    27b8:	0500      	lsls	r0, r0, #20
    27ba:	0d00      	lsrs	r0, r0, #20
    27bc:	4b23      	ldr	r3, [pc, #140]	; (284c <wait_for_bootrom+0xe4>)
    27be:	4298      	cmp	r0, r3
    27c0:	d82a      	bhi.n	2818 <wait_for_bootrom+0xb0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    27c2:	0020      	movs	r0, r4
    27c4:	4b22      	ldr	r3, [pc, #136]	; (2850 <wait_for_bootrom+0xe8>)
    27c6:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    27c8:	4822      	ldr	r0, [pc, #136]	; (2854 <wait_for_bootrom+0xec>)
    27ca:	4c23      	ldr	r4, [pc, #140]	; (2858 <wait_for_bootrom+0xf0>)
    27cc:	47a0      	blx	r4
    27ce:	491b      	ldr	r1, [pc, #108]	; (283c <wait_for_bootrom+0xd4>)
    27d0:	4822      	ldr	r0, [pc, #136]	; (285c <wait_for_bootrom+0xf4>)
    27d2:	47a0      	blx	r4
    27d4:	200d      	movs	r0, #13
    27d6:	4b22      	ldr	r3, [pc, #136]	; (2860 <wait_for_bootrom+0xf8>)
    27d8:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    27da:	4922      	ldr	r1, [pc, #136]	; (2864 <wait_for_bootrom+0xfc>)
    27dc:	4815      	ldr	r0, [pc, #84]	; (2834 <wait_for_bootrom+0xcc>)
    27de:	4b19      	ldr	r3, [pc, #100]	; (2844 <wait_for_bootrom+0xdc>)
    27e0:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    27e2:	2000      	movs	r0, #0
    27e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    27e6:	4920      	ldr	r1, [pc, #128]	; (2868 <wait_for_bootrom+0x100>)
    27e8:	4820      	ldr	r0, [pc, #128]	; (286c <wait_for_bootrom+0x104>)
    27ea:	4c16      	ldr	r4, [pc, #88]	; (2844 <wait_for_bootrom+0xdc>)
    27ec:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    27ee:	2180      	movs	r1, #128	; 0x80
    27f0:	0349      	lsls	r1, r1, #13
    27f2:	4813      	ldr	r0, [pc, #76]	; (2840 <wait_for_bootrom+0xd8>)
    27f4:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    27f6:	2400      	movs	r4, #0
    27f8:	e7dc      	b.n	27b4 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    27fa:	491b      	ldr	r1, [pc, #108]	; (2868 <wait_for_bootrom+0x100>)
    27fc:	481b      	ldr	r0, [pc, #108]	; (286c <wait_for_bootrom+0x104>)
    27fe:	4c11      	ldr	r4, [pc, #68]	; (2844 <wait_for_bootrom+0xdc>)
    2800:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    2802:	2100      	movs	r1, #0
    2804:	480e      	ldr	r0, [pc, #56]	; (2840 <wait_for_bootrom+0xd8>)
    2806:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    2808:	2400      	movs	r4, #0
    280a:	e7d3      	b.n	27b4 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    280c:	490b      	ldr	r1, [pc, #44]	; (283c <wait_for_bootrom+0xd4>)
    280e:	480c      	ldr	r0, [pc, #48]	; (2840 <wait_for_bootrom+0xd8>)
    2810:	4b0c      	ldr	r3, [pc, #48]	; (2844 <wait_for_bootrom+0xdc>)
    2812:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    2814:	2480      	movs	r4, #128	; 0x80
    2816:	e7cd      	b.n	27b4 <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    2818:	2002      	movs	r0, #2
    281a:	4320      	orrs	r0, r4
    281c:	4b0c      	ldr	r3, [pc, #48]	; (2850 <wait_for_bootrom+0xe8>)
    281e:	4798      	blx	r3
    2820:	e7d2      	b.n	27c8 <wait_for_bootrom+0x60>
    2822:	46c0      	nop			; (mov r8, r8)
    2824:	00001014 	.word	0x00001014
    2828:	00002999 	.word	0x00002999
    282c:	00001159 	.word	0x00001159
    2830:	000207bc 	.word	0x000207bc
    2834:	000c000c 	.word	0x000c000c
    2838:	10add09e 	.word	0x10add09e
    283c:	13521352 	.word	0x13521352
    2840:	0000108c 	.word	0x0000108c
    2844:	000029b1 	.word	0x000029b1
    2848:	00002555 	.word	0x00002555
    284c:	0000039f 	.word	0x0000039f
    2850:	000024c1 	.word	0x000024c1
    2854:	0000b1b4 	.word	0x0000b1b4
    2858:	00009995 	.word	0x00009995
    285c:	0000b428 	.word	0x0000b428
    2860:	000099c9 	.word	0x000099c9
    2864:	ef522f61 	.word	0xef522f61
    2868:	3c1cd57d 	.word	0x3c1cd57d
    286c:	000207ac 	.word	0x000207ac

00002870 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    2870:	b570      	push	{r4, r5, r6, lr}
    2872:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    2874:	4b15      	ldr	r3, [pc, #84]	; (28cc <wait_for_firmware_start+0x5c>)
    2876:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    2878:	4b15      	ldr	r3, [pc, #84]	; (28d0 <wait_for_firmware_start+0x60>)
    287a:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    287c:	3802      	subs	r0, #2
    287e:	2801      	cmp	r0, #1
    2880:	d911      	bls.n	28a6 <wait_for_firmware_start+0x36>
{
    2882:	2401      	movs	r4, #1
    2884:	4264      	negs	r4, r4
    2886:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    2888:	4e12      	ldr	r6, [pc, #72]	; (28d4 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    288a:	4d13      	ldr	r5, [pc, #76]	; (28d8 <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    288c:	9b00      	ldr	r3, [sp, #0]
    288e:	4298      	cmp	r0, r3
    2890:	d00e      	beq.n	28b0 <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    2892:	2002      	movs	r0, #2
    2894:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    2896:	9801      	ldr	r0, [sp, #4]
    2898:	47a8      	blx	r5
    289a:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    289c:	2c00      	cmp	r4, #0
    289e:	d1f5      	bne.n	288c <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    28a0:	2005      	movs	r0, #5
    28a2:	4240      	negs	r0, r0
    28a4:	e009      	b.n	28ba <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    28a6:	4b0d      	ldr	r3, [pc, #52]	; (28dc <wait_for_firmware_start+0x6c>)
    28a8:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    28aa:	4b0d      	ldr	r3, [pc, #52]	; (28e0 <wait_for_firmware_start+0x70>)
    28ac:	9300      	str	r3, [sp, #0]
    28ae:	e7e8      	b.n	2882 <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    28b0:	9a00      	ldr	r2, [sp, #0]
    28b2:	4b07      	ldr	r3, [pc, #28]	; (28d0 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    28b4:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    28b6:	429a      	cmp	r2, r3
    28b8:	d001      	beq.n	28be <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    28ba:	b002      	add	sp, #8
    28bc:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    28be:	2100      	movs	r1, #0
    28c0:	4802      	ldr	r0, [pc, #8]	; (28cc <wait_for_firmware_start+0x5c>)
    28c2:	4b08      	ldr	r3, [pc, #32]	; (28e4 <wait_for_firmware_start+0x74>)
    28c4:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    28c6:	2000      	movs	r0, #0
    28c8:	e7f7      	b.n	28ba <wait_for_firmware_start+0x4a>
    28ca:	46c0      	nop			; (mov r8, r8)
    28cc:	0000108c 	.word	0x0000108c
    28d0:	02532636 	.word	0x02532636
    28d4:	00001159 	.word	0x00001159
    28d8:	00002999 	.word	0x00002999
    28dc:	000207ac 	.word	0x000207ac
    28e0:	d75dc1c3 	.word	0xd75dc1c3
    28e4:	000029b1 	.word	0x000029b1

000028e8 <chip_deinit>:

sint8 chip_deinit(void)
{
    28e8:	b510      	push	{r4, lr}
    28ea:	b082      	sub	sp, #8
	uint32 reg = 0;
    28ec:	2300      	movs	r3, #0
    28ee:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    28f0:	a901      	add	r1, sp, #4
    28f2:	20a0      	movs	r0, #160	; 0xa0
    28f4:	0140      	lsls	r0, r0, #5
    28f6:	4b14      	ldr	r3, [pc, #80]	; (2948 <chip_deinit+0x60>)
    28f8:	4798      	blx	r3
    28fa:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    28fc:	d115      	bne.n	292a <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    28fe:	4913      	ldr	r1, [pc, #76]	; (294c <chip_deinit+0x64>)
    2900:	9b01      	ldr	r3, [sp, #4]
    2902:	4019      	ands	r1, r3
    2904:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    2906:	20a0      	movs	r0, #160	; 0xa0
    2908:	0140      	lsls	r0, r0, #5
    290a:	4b11      	ldr	r3, [pc, #68]	; (2950 <chip_deinit+0x68>)
    290c:	4798      	blx	r3
    290e:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    2910:	d016      	beq.n	2940 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    2912:	4a10      	ldr	r2, [pc, #64]	; (2954 <chip_deinit+0x6c>)
    2914:	4910      	ldr	r1, [pc, #64]	; (2958 <chip_deinit+0x70>)
    2916:	4811      	ldr	r0, [pc, #68]	; (295c <chip_deinit+0x74>)
    2918:	4b11      	ldr	r3, [pc, #68]	; (2960 <chip_deinit+0x78>)
    291a:	4798      	blx	r3
    291c:	4811      	ldr	r0, [pc, #68]	; (2964 <chip_deinit+0x7c>)
    291e:	4b12      	ldr	r3, [pc, #72]	; (2968 <chip_deinit+0x80>)
    2920:	4798      	blx	r3
    2922:	200d      	movs	r0, #13
    2924:	4b11      	ldr	r3, [pc, #68]	; (296c <chip_deinit+0x84>)
    2926:	4798      	blx	r3
		goto ERR1;
    2928:	e00a      	b.n	2940 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    292a:	4a11      	ldr	r2, [pc, #68]	; (2970 <chip_deinit+0x88>)
    292c:	490a      	ldr	r1, [pc, #40]	; (2958 <chip_deinit+0x70>)
    292e:	480b      	ldr	r0, [pc, #44]	; (295c <chip_deinit+0x74>)
    2930:	4b0b      	ldr	r3, [pc, #44]	; (2960 <chip_deinit+0x78>)
    2932:	4798      	blx	r3
    2934:	480b      	ldr	r0, [pc, #44]	; (2964 <chip_deinit+0x7c>)
    2936:	4b0c      	ldr	r3, [pc, #48]	; (2968 <chip_deinit+0x80>)
    2938:	4798      	blx	r3
    293a:	200d      	movs	r0, #13
    293c:	4b0b      	ldr	r3, [pc, #44]	; (296c <chip_deinit+0x84>)
    293e:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    2940:	0020      	movs	r0, r4
    2942:	b002      	add	sp, #8
    2944:	bd10      	pop	{r4, pc}
    2946:	46c0      	nop			; (mov r8, r8)
    2948:	000029a5 	.word	0x000029a5
    294c:	fffffbff 	.word	0xfffffbff
    2950:	000029b1 	.word	0x000029b1
    2954:	0000020b 	.word	0x0000020b
    2958:	0000b3d0 	.word	0x0000b3d0
    295c:	0000ae84 	.word	0x0000ae84
    2960:	00009995 	.word	0x00009995
    2964:	0000b3dc 	.word	0x0000b3dc
    2968:	00009ab1 	.word	0x00009ab1
    296c:	000099c9 	.word	0x000099c9
    2970:	00000205 	.word	0x00000205

00002974 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    2974:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    2976:	4b01      	ldr	r3, [pc, #4]	; (297c <nm_bus_iface_init+0x8>)
    2978:	4798      	blx	r3
	return ret;
}
    297a:	bd10      	pop	{r4, pc}
    297c:	0000128d 	.word	0x0000128d

00002980 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    2980:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    2982:	4b01      	ldr	r3, [pc, #4]	; (2988 <nm_bus_iface_deinit+0x8>)
    2984:	4798      	blx	r3

	return ret;
}
    2986:	bd10      	pop	{r4, pc}
    2988:	000014dd 	.word	0x000014dd

0000298c <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    298c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    298e:	4b01      	ldr	r3, [pc, #4]	; (2994 <nm_bus_reset+0x8>)
    2990:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    2992:	bd10      	pop	{r4, pc}
    2994:	0000333d 	.word	0x0000333d

00002998 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    2998:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    299a:	4b01      	ldr	r3, [pc, #4]	; (29a0 <nm_read_reg+0x8>)
    299c:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    299e:	bd10      	pop	{r4, pc}
    29a0:	00003375 	.word	0x00003375

000029a4 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    29a4:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    29a6:	4b01      	ldr	r3, [pc, #4]	; (29ac <nm_read_reg_with_ret+0x8>)
    29a8:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    29aa:	bd10      	pop	{r4, pc}
    29ac:	00003389 	.word	0x00003389

000029b0 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    29b0:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    29b2:	4b01      	ldr	r3, [pc, #4]	; (29b8 <nm_write_reg+0x8>)
    29b4:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    29b6:	bd10      	pop	{r4, pc}
    29b8:	000033a1 	.word	0x000033a1

000029bc <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    29bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    29be:	46d6      	mov	lr, sl
    29c0:	464f      	mov	r7, r9
    29c2:	4646      	mov	r6, r8
    29c4:	b5c0      	push	{r6, r7, lr}
    29c6:	b082      	sub	sp, #8
    29c8:	4680      	mov	r8, r0
    29ca:	4689      	mov	r9, r1
    29cc:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    29ce:	4b13      	ldr	r3, [pc, #76]	; (2a1c <nm_read_block+0x60>)
    29d0:	881f      	ldrh	r7, [r3, #0]
    29d2:	3f08      	subs	r7, #8
    29d4:	b2bb      	uxth	r3, r7
    29d6:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    29d8:	001e      	movs	r6, r3
    29da:	0004      	movs	r4, r0
    29dc:	429a      	cmp	r2, r3
    29de:	d91a      	bls.n	2a16 <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    29e0:	4b0f      	ldr	r3, [pc, #60]	; (2a20 <nm_read_block+0x64>)
    29e2:	469a      	mov	sl, r3
    29e4:	1a37      	subs	r7, r6, r0
    29e6:	4643      	mov	r3, r8
    29e8:	1ae1      	subs	r1, r4, r3
    29ea:	4449      	add	r1, r9
    29ec:	9a01      	ldr	r2, [sp, #4]
    29ee:	0020      	movs	r0, r4
    29f0:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    29f2:	2800      	cmp	r0, #0
    29f4:	d109      	bne.n	2a0a <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    29f6:	1bad      	subs	r5, r5, r6
    29f8:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    29fa:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    29fc:	42b5      	cmp	r5, r6
    29fe:	d8f2      	bhi.n	29e6 <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2a00:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    2a02:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2a04:	0020      	movs	r0, r4
    2a06:	4b06      	ldr	r3, [pc, #24]	; (2a20 <nm_read_block+0x64>)
    2a08:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    2a0a:	b002      	add	sp, #8
    2a0c:	bc1c      	pop	{r2, r3, r4}
    2a0e:	4690      	mov	r8, r2
    2a10:	4699      	mov	r9, r3
    2a12:	46a2      	mov	sl, r4
    2a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    2a16:	2100      	movs	r1, #0
    2a18:	e7f2      	b.n	2a00 <nm_read_block+0x44>
    2a1a:	46c0      	nop			; (mov r8, r8)
    2a1c:	20000008 	.word	0x20000008
    2a20:	000034e5 	.word	0x000034e5

00002a24 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    2a24:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a26:	46d6      	mov	lr, sl
    2a28:	464f      	mov	r7, r9
    2a2a:	4646      	mov	r6, r8
    2a2c:	b5c0      	push	{r6, r7, lr}
    2a2e:	b082      	sub	sp, #8
    2a30:	4680      	mov	r8, r0
    2a32:	4689      	mov	r9, r1
    2a34:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    2a36:	4b13      	ldr	r3, [pc, #76]	; (2a84 <nm_write_block+0x60>)
    2a38:	881f      	ldrh	r7, [r3, #0]
    2a3a:	3f08      	subs	r7, #8
    2a3c:	b2bb      	uxth	r3, r7
    2a3e:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2a40:	001e      	movs	r6, r3
    2a42:	0004      	movs	r4, r0
    2a44:	429a      	cmp	r2, r3
    2a46:	d91a      	bls.n	2a7e <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2a48:	4b0f      	ldr	r3, [pc, #60]	; (2a88 <nm_write_block+0x64>)
    2a4a:	469a      	mov	sl, r3
    2a4c:	1a37      	subs	r7, r6, r0
    2a4e:	4643      	mov	r3, r8
    2a50:	1ae1      	subs	r1, r4, r3
    2a52:	4449      	add	r1, r9
    2a54:	9a01      	ldr	r2, [sp, #4]
    2a56:	0020      	movs	r0, r4
    2a58:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    2a5a:	2800      	cmp	r0, #0
    2a5c:	d109      	bne.n	2a72 <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    2a5e:	1bad      	subs	r5, r5, r6
    2a60:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    2a62:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    2a64:	42b5      	cmp	r5, r6
    2a66:	d8f2      	bhi.n	2a4e <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2a68:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    2a6a:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2a6c:	0020      	movs	r0, r4
    2a6e:	4b06      	ldr	r3, [pc, #24]	; (2a88 <nm_write_block+0x64>)
    2a70:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    2a72:	b002      	add	sp, #8
    2a74:	bc1c      	pop	{r2, r3, r4}
    2a76:	4690      	mov	r8, r2
    2a78:	4699      	mov	r9, r3
    2a7a:	46a2      	mov	sl, r4
    2a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    2a7e:	2100      	movs	r1, #0
    2a80:	e7f2      	b.n	2a68 <nm_write_block+0x44>
    2a82:	46c0      	nop			; (mov r8, r8)
    2a84:	20000008 	.word	0x20000008
    2a88:	00003641 	.word	0x00003641

00002a8c <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    2a8c:	b570      	push	{r4, r5, r6, lr}
    2a8e:	b084      	sub	sp, #16
    2a90:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    2a92:	2300      	movs	r3, #0
    2a94:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    2a96:	2208      	movs	r2, #8
    2a98:	2100      	movs	r1, #0
    2a9a:	a801      	add	r0, sp, #4
    2a9c:	4b2d      	ldr	r3, [pc, #180]	; (2b54 <nm_get_firmware_full_info+0xc8>)
    2a9e:	4798      	blx	r3
	if (pstrRev != NULL)
    2aa0:	2c00      	cmp	r4, #0
    2aa2:	d044      	beq.n	2b2e <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    2aa4:	2228      	movs	r2, #40	; 0x28
    2aa6:	2100      	movs	r1, #0
    2aa8:	0020      	movs	r0, r4
    2aaa:	4b2b      	ldr	r3, [pc, #172]	; (2b58 <nm_get_firmware_full_info+0xcc>)
    2aac:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    2aae:	a903      	add	r1, sp, #12
    2ab0:	482a      	ldr	r0, [pc, #168]	; (2b5c <nm_get_firmware_full_info+0xd0>)
    2ab2:	4b2b      	ldr	r3, [pc, #172]	; (2b60 <nm_get_firmware_full_info+0xd4>)
    2ab4:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    2ab6:	2800      	cmp	r0, #0
    2ab8:	d13a      	bne.n	2b30 <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    2aba:	9b03      	ldr	r3, [sp, #12]
    2abc:	2b00      	cmp	r3, #0
    2abe:	d039      	beq.n	2b34 <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    2ac0:	20c0      	movs	r0, #192	; 0xc0
    2ac2:	0280      	lsls	r0, r0, #10
    2ac4:	4318      	orrs	r0, r3
    2ac6:	2208      	movs	r2, #8
    2ac8:	a901      	add	r1, sp, #4
    2aca:	4b26      	ldr	r3, [pc, #152]	; (2b64 <nm_get_firmware_full_info+0xd8>)
    2acc:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    2ace:	2800      	cmp	r0, #0
    2ad0:	d12e      	bne.n	2b30 <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    2ad2:	9b02      	ldr	r3, [sp, #8]
    2ad4:	0418      	lsls	r0, r3, #16
    2ad6:	0c00      	lsrs	r0, r0, #16
    2ad8:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    2ada:	d02e      	beq.n	2b3a <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    2adc:	23c0      	movs	r3, #192	; 0xc0
    2ade:	029b      	lsls	r3, r3, #10
    2ae0:	4318      	orrs	r0, r3
    2ae2:	2228      	movs	r2, #40	; 0x28
    2ae4:	0021      	movs	r1, r4
    2ae6:	4b1f      	ldr	r3, [pc, #124]	; (2b64 <nm_get_firmware_full_info+0xd8>)
    2ae8:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    2aea:	2800      	cmp	r0, #0
    2aec:	d120      	bne.n	2b30 <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    2aee:	7921      	ldrb	r1, [r4, #4]
    2af0:	0209      	lsls	r1, r1, #8
    2af2:	79a2      	ldrb	r2, [r4, #6]
    2af4:	230f      	movs	r3, #15
    2af6:	401a      	ands	r2, r3
    2af8:	430a      	orrs	r2, r1
    2afa:	7961      	ldrb	r1, [r4, #5]
    2afc:	0109      	lsls	r1, r1, #4
    2afe:	25ff      	movs	r5, #255	; 0xff
    2b00:	4029      	ands	r1, r5
    2b02:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    2b04:	79e1      	ldrb	r1, [r4, #7]
    2b06:	0209      	lsls	r1, r1, #8
    2b08:	7a66      	ldrb	r6, [r4, #9]
    2b0a:	4033      	ands	r3, r6
    2b0c:	430b      	orrs	r3, r1
    2b0e:	7a21      	ldrb	r1, [r4, #8]
    2b10:	0109      	lsls	r1, r1, #4
    2b12:	400d      	ands	r5, r1
    2b14:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    2b16:	2a00      	cmp	r2, #0
    2b18:	d012      	beq.n	2b40 <nm_get_firmware_full_info+0xb4>
    2b1a:	2b00      	cmp	r3, #0
    2b1c:	d013      	beq.n	2b46 <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    2b1e:	4912      	ldr	r1, [pc, #72]	; (2b68 <nm_get_firmware_full_info+0xdc>)
    2b20:	428b      	cmp	r3, r1
    2b22:	d813      	bhi.n	2b4c <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    2b24:	4b11      	ldr	r3, [pc, #68]	; (2b6c <nm_get_firmware_full_info+0xe0>)
    2b26:	429a      	cmp	r2, r3
    2b28:	d802      	bhi.n	2b30 <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    2b2a:	380d      	subs	r0, #13
    2b2c:	e000      	b.n	2b30 <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    2b2e:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    2b30:	b004      	add	sp, #16
    2b32:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    2b34:	200c      	movs	r0, #12
    2b36:	4240      	negs	r0, r0
    2b38:	e7fa      	b.n	2b30 <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    2b3a:	200c      	movs	r0, #12
    2b3c:	4240      	negs	r0, r0
    2b3e:	e7f7      	b.n	2b30 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    2b40:	200c      	movs	r0, #12
    2b42:	4240      	negs	r0, r0
    2b44:	e7f4      	b.n	2b30 <nm_get_firmware_full_info+0xa4>
    2b46:	200c      	movs	r0, #12
    2b48:	4240      	negs	r0, r0
    2b4a:	e7f1      	b.n	2b30 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    2b4c:	200d      	movs	r0, #13
    2b4e:	4240      	negs	r0, r0
    2b50:	e7ee      	b.n	2b30 <nm_get_firmware_full_info+0xa4>
    2b52:	46c0      	nop			; (mov r8, r8)
    2b54:	00009833 	.word	0x00009833
    2b58:	0000155d 	.word	0x0000155d
    2b5c:	000c0008 	.word	0x000c0008
    2b60:	000029a5 	.word	0x000029a5
    2b64:	000029bd 	.word	0x000029bd
    2b68:	00001352 	.word	0x00001352
    2b6c:	00001351 	.word	0x00001351

00002b70 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    2b70:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    2b72:	2800      	cmp	r0, #0
    2b74:	d037      	beq.n	2be6 <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
    2b76:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    2b78:	1e6b      	subs	r3, r5, #1
    2b7a:	2b03      	cmp	r3, #3
    2b7c:	d900      	bls.n	2b80 <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    2b7e:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    2b80:	2000      	movs	r0, #0
    2b82:	4b20      	ldr	r3, [pc, #128]	; (2c04 <nm_drv_init+0x94>)
    2b84:	4798      	blx	r3
    2b86:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2b88:	d12f      	bne.n	2bea <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    2b8a:	481f      	ldr	r0, [pc, #124]	; (2c08 <nm_drv_init+0x98>)
    2b8c:	4c1f      	ldr	r4, [pc, #124]	; (2c0c <nm_drv_init+0x9c>)
    2b8e:	47a0      	blx	r4
    2b90:	4b1f      	ldr	r3, [pc, #124]	; (2c10 <nm_drv_init+0xa0>)
    2b92:	4798      	blx	r3
    2b94:	0001      	movs	r1, r0
    2b96:	481f      	ldr	r0, [pc, #124]	; (2c14 <nm_drv_init+0xa4>)
    2b98:	47a0      	blx	r4
    2b9a:	200d      	movs	r0, #13
    2b9c:	4b1e      	ldr	r3, [pc, #120]	; (2c18 <nm_drv_init+0xa8>)
    2b9e:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    2ba0:	4b1e      	ldr	r3, [pc, #120]	; (2c1c <nm_drv_init+0xac>)
    2ba2:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    2ba4:	0028      	movs	r0, r5
    2ba6:	4b1e      	ldr	r3, [pc, #120]	; (2c20 <nm_drv_init+0xb0>)
    2ba8:	4798      	blx	r3
    2baa:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2bac:	d117      	bne.n	2bde <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    2bae:	0028      	movs	r0, r5
    2bb0:	4b1c      	ldr	r3, [pc, #112]	; (2c24 <nm_drv_init+0xb4>)
    2bb2:	4798      	blx	r3
    2bb4:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2bb6:	d112      	bne.n	2bde <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    2bb8:	3d02      	subs	r5, #2
    2bba:	2d01      	cmp	r5, #1
    2bbc:	d911      	bls.n	2be2 <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    2bbe:	4b1a      	ldr	r3, [pc, #104]	; (2c28 <nm_drv_init+0xb8>)
    2bc0:	4798      	blx	r3
    2bc2:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2bc4:	d00d      	beq.n	2be2 <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
    2bc6:	2256      	movs	r2, #86	; 0x56
    2bc8:	32ff      	adds	r2, #255	; 0xff
    2bca:	4918      	ldr	r1, [pc, #96]	; (2c2c <nm_drv_init+0xbc>)
    2bcc:	4818      	ldr	r0, [pc, #96]	; (2c30 <nm_drv_init+0xc0>)
    2bce:	4b0f      	ldr	r3, [pc, #60]	; (2c0c <nm_drv_init+0x9c>)
    2bd0:	4798      	blx	r3
    2bd2:	4818      	ldr	r0, [pc, #96]	; (2c34 <nm_drv_init+0xc4>)
    2bd4:	4b18      	ldr	r3, [pc, #96]	; (2c38 <nm_drv_init+0xc8>)
    2bd6:	4798      	blx	r3
    2bd8:	200d      	movs	r0, #13
    2bda:	4b0f      	ldr	r3, [pc, #60]	; (2c18 <nm_drv_init+0xa8>)
    2bdc:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    2bde:	4b17      	ldr	r3, [pc, #92]	; (2c3c <nm_drv_init+0xcc>)
    2be0:	4798      	blx	r3
ERR1:
	return ret;
}
    2be2:	0020      	movs	r0, r4
    2be4:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    2be6:	2501      	movs	r5, #1
    2be8:	e7ca      	b.n	2b80 <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    2bea:	2228      	movs	r2, #40	; 0x28
    2bec:	32ff      	adds	r2, #255	; 0xff
    2bee:	490f      	ldr	r1, [pc, #60]	; (2c2c <nm_drv_init+0xbc>)
    2bf0:	480f      	ldr	r0, [pc, #60]	; (2c30 <nm_drv_init+0xc0>)
    2bf2:	4b06      	ldr	r3, [pc, #24]	; (2c0c <nm_drv_init+0x9c>)
    2bf4:	4798      	blx	r3
    2bf6:	4812      	ldr	r0, [pc, #72]	; (2c40 <nm_drv_init+0xd0>)
    2bf8:	4b0f      	ldr	r3, [pc, #60]	; (2c38 <nm_drv_init+0xc8>)
    2bfa:	4798      	blx	r3
    2bfc:	200d      	movs	r0, #13
    2bfe:	4b06      	ldr	r3, [pc, #24]	; (2c18 <nm_drv_init+0xa8>)
    2c00:	4798      	blx	r3
		goto ERR1;
    2c02:	e7ee      	b.n	2be2 <nm_drv_init+0x72>
    2c04:	00002975 	.word	0x00002975
    2c08:	0000b1b4 	.word	0x0000b1b4
    2c0c:	00009995 	.word	0x00009995
    2c10:	00002555 	.word	0x00002555
    2c14:	0000b4f8 	.word	0x0000b4f8
    2c18:	000099c9 	.word	0x000099c9
    2c1c:	000033b9 	.word	0x000033b9
    2c20:	00002769 	.word	0x00002769
    2c24:	00002871 	.word	0x00002871
    2c28:	000024f9 	.word	0x000024f9
    2c2c:	0000b440 	.word	0x0000b440
    2c30:	0000ae84 	.word	0x0000ae84
    2c34:	0000b4bc 	.word	0x0000b4bc
    2c38:	00009ab1 	.word	0x00009ab1
    2c3c:	00002981 	.word	0x00002981
    2c40:	0000b4dc 	.word	0x0000b4dc

00002c44 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    2c44:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    2c46:	4b1c      	ldr	r3, [pc, #112]	; (2cb8 <nm_drv_deinit+0x74>)
    2c48:	4798      	blx	r3
    2c4a:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2c4c:	d10b      	bne.n	2c66 <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    2c4e:	2000      	movs	r0, #0
    2c50:	4b1a      	ldr	r3, [pc, #104]	; (2cbc <nm_drv_deinit+0x78>)
    2c52:	4798      	blx	r3
    2c54:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2c56:	d114      	bne.n	2c82 <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    2c58:	4b19      	ldr	r3, [pc, #100]	; (2cc0 <nm_drv_deinit+0x7c>)
    2c5a:	4798      	blx	r3
    2c5c:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2c5e:	d11d      	bne.n	2c9c <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    2c60:	4b18      	ldr	r3, [pc, #96]	; (2cc4 <nm_drv_deinit+0x80>)
    2c62:	4798      	blx	r3
    2c64:	e00b      	b.n	2c7e <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    2c66:	22b6      	movs	r2, #182	; 0xb6
    2c68:	0052      	lsls	r2, r2, #1
    2c6a:	4917      	ldr	r1, [pc, #92]	; (2cc8 <nm_drv_deinit+0x84>)
    2c6c:	4817      	ldr	r0, [pc, #92]	; (2ccc <nm_drv_deinit+0x88>)
    2c6e:	4b18      	ldr	r3, [pc, #96]	; (2cd0 <nm_drv_deinit+0x8c>)
    2c70:	4798      	blx	r3
    2c72:	4818      	ldr	r0, [pc, #96]	; (2cd4 <nm_drv_deinit+0x90>)
    2c74:	4b18      	ldr	r3, [pc, #96]	; (2cd8 <nm_drv_deinit+0x94>)
    2c76:	4798      	blx	r3
    2c78:	200d      	movs	r0, #13
    2c7a:	4b18      	ldr	r3, [pc, #96]	; (2cdc <nm_drv_deinit+0x98>)
    2c7c:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    2c7e:	0020      	movs	r0, r4
    2c80:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    2c82:	2274      	movs	r2, #116	; 0x74
    2c84:	32ff      	adds	r2, #255	; 0xff
    2c86:	4910      	ldr	r1, [pc, #64]	; (2cc8 <nm_drv_deinit+0x84>)
    2c88:	4810      	ldr	r0, [pc, #64]	; (2ccc <nm_drv_deinit+0x88>)
    2c8a:	4b11      	ldr	r3, [pc, #68]	; (2cd0 <nm_drv_deinit+0x8c>)
    2c8c:	4798      	blx	r3
    2c8e:	4814      	ldr	r0, [pc, #80]	; (2ce0 <nm_drv_deinit+0x9c>)
    2c90:	4b11      	ldr	r3, [pc, #68]	; (2cd8 <nm_drv_deinit+0x94>)
    2c92:	4798      	blx	r3
    2c94:	200d      	movs	r0, #13
    2c96:	4b11      	ldr	r3, [pc, #68]	; (2cdc <nm_drv_deinit+0x98>)
    2c98:	4798      	blx	r3
		goto ERR1;
    2c9a:	e7f0      	b.n	2c7e <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    2c9c:	227a      	movs	r2, #122	; 0x7a
    2c9e:	32ff      	adds	r2, #255	; 0xff
    2ca0:	4909      	ldr	r1, [pc, #36]	; (2cc8 <nm_drv_deinit+0x84>)
    2ca2:	480a      	ldr	r0, [pc, #40]	; (2ccc <nm_drv_deinit+0x88>)
    2ca4:	4b0a      	ldr	r3, [pc, #40]	; (2cd0 <nm_drv_deinit+0x8c>)
    2ca6:	4798      	blx	r3
    2ca8:	480e      	ldr	r0, [pc, #56]	; (2ce4 <nm_drv_deinit+0xa0>)
    2caa:	4b0b      	ldr	r3, [pc, #44]	; (2cd8 <nm_drv_deinit+0x94>)
    2cac:	4798      	blx	r3
    2cae:	200d      	movs	r0, #13
    2cb0:	4b0a      	ldr	r3, [pc, #40]	; (2cdc <nm_drv_deinit+0x98>)
    2cb2:	4798      	blx	r3
		goto ERR1;
    2cb4:	e7e3      	b.n	2c7e <nm_drv_deinit+0x3a>
    2cb6:	46c0      	nop			; (mov r8, r8)
    2cb8:	000028e9 	.word	0x000028e9
    2cbc:	000041d9 	.word	0x000041d9
    2cc0:	00002981 	.word	0x00002981
    2cc4:	00003365 	.word	0x00003365
    2cc8:	0000b44c 	.word	0x0000b44c
    2ccc:	0000ae84 	.word	0x0000ae84
    2cd0:	00009995 	.word	0x00009995
    2cd4:	0000b45c 	.word	0x0000b45c
    2cd8:	00009ab1 	.word	0x00009ab1
    2cdc:	000099c9 	.word	0x000099c9
    2ce0:	0000b47c 	.word	0x0000b47c
    2ce4:	0000b4a0 	.word	0x0000b4a0

00002ce8 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    2ce8:	b500      	push	{lr}
    2cea:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    2cec:	ab01      	add	r3, sp, #4
    2cee:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    2cf0:	2200      	movs	r2, #0
    2cf2:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    2cf4:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    2cf6:	0019      	movs	r1, r3
    2cf8:	2003      	movs	r0, #3
    2cfa:	4b02      	ldr	r3, [pc, #8]	; (2d04 <nmi_spi_write+0x1c>)
    2cfc:	4798      	blx	r3
}
    2cfe:	b005      	add	sp, #20
    2d00:	bd00      	pop	{pc}
    2d02:	46c0      	nop			; (mov r8, r8)
    2d04:	00001391 	.word	0x00001391

00002d08 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    2d08:	b570      	push	{r4, r5, r6, lr}
    2d0a:	b084      	sub	sp, #16
    2d0c:	ac08      	add	r4, sp, #32
    2d0e:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    2d10:	ac01      	add	r4, sp, #4
    2d12:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    2d14:	303f      	adds	r0, #63	; 0x3f
    2d16:	b2c4      	uxtb	r4, r0
    2d18:	2c0e      	cmp	r4, #14
    2d1a:	d900      	bls.n	2d1e <spi_cmd+0x16>
    2d1c:	e084      	b.n	2e28 <spi_cmd+0x120>
    2d1e:	00a0      	lsls	r0, r4, #2
    2d20:	4c4f      	ldr	r4, [pc, #316]	; (2e60 <spi_cmd+0x158>)
    2d22:	5820      	ldr	r0, [r4, r0]
    2d24:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    2d26:	ab01      	add	r3, sp, #4
    2d28:	0c0a      	lsrs	r2, r1, #16
    2d2a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    2d2c:	0a0a      	lsrs	r2, r1, #8
    2d2e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    2d30:	70d9      	strb	r1, [r3, #3]
		len = 5;
    2d32:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    2d34:	4b4b      	ldr	r3, [pc, #300]	; (2e64 <spi_cmd+0x15c>)
    2d36:	781b      	ldrb	r3, [r3, #0]
    2d38:	2b00      	cmp	r3, #0
    2d3a:	d077      	beq.n	2e2c <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    2d3c:	3901      	subs	r1, #1
    2d3e:	b2c9      	uxtb	r1, r1
    2d40:	e083      	b.n	2e4a <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
    2d42:	0a0b      	lsrs	r3, r1, #8
    2d44:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    2d46:	2d00      	cmp	r5, #0
    2d48:	d107      	bne.n	2d5a <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    2d4a:	aa01      	add	r2, sp, #4
    2d4c:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    2d4e:	ab01      	add	r3, sp, #4
    2d50:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    2d52:	2200      	movs	r2, #0
    2d54:	70da      	strb	r2, [r3, #3]
		len = 5;
    2d56:	2105      	movs	r1, #5
		break;
    2d58:	e7ec      	b.n	2d34 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    2d5a:	2280      	movs	r2, #128	; 0x80
    2d5c:	4252      	negs	r2, r2
    2d5e:	4313      	orrs	r3, r2
    2d60:	aa01      	add	r2, sp, #4
    2d62:	7053      	strb	r3, [r2, #1]
    2d64:	e7f3      	b.n	2d4e <spi_cmd+0x46>
		bc[1] = 0x00;
    2d66:	ab01      	add	r3, sp, #4
    2d68:	2200      	movs	r2, #0
    2d6a:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    2d6c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    2d6e:	70da      	strb	r2, [r3, #3]
		len = 5;
    2d70:	2105      	movs	r1, #5
		break;
    2d72:	e7df      	b.n	2d34 <spi_cmd+0x2c>
		bc[1] = 0x00;
    2d74:	ab01      	add	r3, sp, #4
    2d76:	2200      	movs	r2, #0
    2d78:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    2d7a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    2d7c:	70da      	strb	r2, [r3, #3]
		len = 5;
    2d7e:	2105      	movs	r1, #5
		break;
    2d80:	e7d8      	b.n	2d34 <spi_cmd+0x2c>
		bc[1] = 0xff;
    2d82:	ab01      	add	r3, sp, #4
    2d84:	22ff      	movs	r2, #255	; 0xff
    2d86:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    2d88:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    2d8a:	70da      	strb	r2, [r3, #3]
		len = 5;
    2d8c:	2105      	movs	r1, #5
		break;
    2d8e:	e7d1      	b.n	2d34 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    2d90:	aa01      	add	r2, sp, #4
    2d92:	0c08      	lsrs	r0, r1, #16
    2d94:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    2d96:	0a08      	lsrs	r0, r1, #8
    2d98:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    2d9a:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    2d9c:	0a19      	lsrs	r1, r3, #8
    2d9e:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    2da0:	7153      	strb	r3, [r2, #5]
		len = 7;
    2da2:	2107      	movs	r1, #7
		break;
    2da4:	e7c6      	b.n	2d34 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    2da6:	aa01      	add	r2, sp, #4
    2da8:	0c08      	lsrs	r0, r1, #16
    2daa:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    2dac:	0a08      	lsrs	r0, r1, #8
    2dae:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    2db0:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    2db2:	0c19      	lsrs	r1, r3, #16
    2db4:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    2db6:	0a19      	lsrs	r1, r3, #8
    2db8:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    2dba:	7193      	strb	r3, [r2, #6]
		len = 8;
    2dbc:	2108      	movs	r1, #8
		break;
    2dbe:	e7b9      	b.n	2d34 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    2dc0:	0a0b      	lsrs	r3, r1, #8
    2dc2:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    2dc4:	2d00      	cmp	r5, #0
    2dc6:	d10c      	bne.n	2de2 <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    2dc8:	a801      	add	r0, sp, #4
    2dca:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    2dcc:	ab01      	add	r3, sp, #4
    2dce:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    2dd0:	0e11      	lsrs	r1, r2, #24
    2dd2:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    2dd4:	0c11      	lsrs	r1, r2, #16
    2dd6:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    2dd8:	0a11      	lsrs	r1, r2, #8
    2dda:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    2ddc:	719a      	strb	r2, [r3, #6]
		len = 8;
    2dde:	2108      	movs	r1, #8
		break;
    2de0:	e7a8      	b.n	2d34 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    2de2:	2080      	movs	r0, #128	; 0x80
    2de4:	4240      	negs	r0, r0
    2de6:	4303      	orrs	r3, r0
    2de8:	a801      	add	r0, sp, #4
    2dea:	7043      	strb	r3, [r0, #1]
    2dec:	e7ee      	b.n	2dcc <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    2dee:	ab01      	add	r3, sp, #4
    2df0:	0c08      	lsrs	r0, r1, #16
    2df2:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    2df4:	0a08      	lsrs	r0, r1, #8
    2df6:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    2df8:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    2dfa:	0e11      	lsrs	r1, r2, #24
    2dfc:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    2dfe:	0c11      	lsrs	r1, r2, #16
    2e00:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    2e02:	0a11      	lsrs	r1, r2, #8
    2e04:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    2e06:	71da      	strb	r2, [r3, #7]
		len = 9;
    2e08:	2109      	movs	r1, #9
		break;
    2e0a:	e793      	b.n	2d34 <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    2e0c:	2228      	movs	r2, #40	; 0x28
    2e0e:	32ff      	adds	r2, #255	; 0xff
    2e10:	4915      	ldr	r1, [pc, #84]	; (2e68 <spi_cmd+0x160>)
    2e12:	4816      	ldr	r0, [pc, #88]	; (2e6c <spi_cmd+0x164>)
    2e14:	4b16      	ldr	r3, [pc, #88]	; (2e70 <spi_cmd+0x168>)
    2e16:	4798      	blx	r3
    2e18:	4816      	ldr	r0, [pc, #88]	; (2e74 <spi_cmd+0x16c>)
    2e1a:	4b17      	ldr	r3, [pc, #92]	; (2e78 <spi_cmd+0x170>)
    2e1c:	4798      	blx	r3
    2e1e:	200d      	movs	r0, #13
    2e20:	4b16      	ldr	r3, [pc, #88]	; (2e7c <spi_cmd+0x174>)
    2e22:	4798      	blx	r3
			result = N_FAIL;
    2e24:	2300      	movs	r3, #0
    2e26:	e017      	b.n	2e58 <spi_cmd+0x150>
	switch (cmd) {
    2e28:	2300      	movs	r3, #0
    2e2a:	e015      	b.n	2e58 <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    2e2c:	1e4e      	subs	r6, r1, #1
    2e2e:	aa01      	add	r2, sp, #4
    2e30:	1995      	adds	r5, r2, r6
    2e32:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    2e34:	4c12      	ldr	r4, [pc, #72]	; (2e80 <spi_cmd+0x178>)
    2e36:	005b      	lsls	r3, r3, #1
    2e38:	7810      	ldrb	r0, [r2, #0]
    2e3a:	4043      	eors	r3, r0
    2e3c:	5ce3      	ldrb	r3, [r4, r3]
    2e3e:	3201      	adds	r2, #1
	while (len--)
    2e40:	42aa      	cmp	r2, r5
    2e42:	d1f8      	bne.n	2e36 <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    2e44:	005b      	lsls	r3, r3, #1
    2e46:	aa01      	add	r2, sp, #4
    2e48:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    2e4a:	b289      	uxth	r1, r1
    2e4c:	a801      	add	r0, sp, #4
    2e4e:	4b0d      	ldr	r3, [pc, #52]	; (2e84 <spi_cmd+0x17c>)
    2e50:	4798      	blx	r3
    2e52:	2301      	movs	r3, #1
    2e54:	2800      	cmp	r0, #0
    2e56:	d1d9      	bne.n	2e0c <spi_cmd+0x104>
		}
	}

	return result;
}
    2e58:	0018      	movs	r0, r3
    2e5a:	b004      	add	sp, #16
    2e5c:	bd70      	pop	{r4, r5, r6, pc}
    2e5e:	46c0      	nop			; (mov r8, r8)
    2e60:	0000b508 	.word	0x0000b508
    2e64:	200000e4 	.word	0x200000e4
    2e68:	0000b548 	.word	0x0000b548
    2e6c:	0000ae84 	.word	0x0000ae84
    2e70:	00009995 	.word	0x00009995
    2e74:	0000b9d8 	.word	0x0000b9d8
    2e78:	00009ab1 	.word	0x00009ab1
    2e7c:	000099c9 	.word	0x000099c9
    2e80:	0000b5d4 	.word	0x0000b5d4
    2e84:	00002ce9 	.word	0x00002ce9

00002e88 <nmi_spi_read>:
{
    2e88:	b500      	push	{lr}
    2e8a:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    2e8c:	ab01      	add	r3, sp, #4
    2e8e:	2200      	movs	r2, #0
    2e90:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    2e92:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    2e94:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    2e96:	0019      	movs	r1, r3
    2e98:	2003      	movs	r0, #3
    2e9a:	4b02      	ldr	r3, [pc, #8]	; (2ea4 <nmi_spi_read+0x1c>)
    2e9c:	4798      	blx	r3
}
    2e9e:	b005      	add	sp, #20
    2ea0:	bd00      	pop	{pc}
    2ea2:	46c0      	nop			; (mov r8, r8)
    2ea4:	00001391 	.word	0x00001391

00002ea8 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    2ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2eaa:	46c6      	mov	lr, r8
    2eac:	b500      	push	{lr}
    2eae:	b082      	sub	sp, #8
    2eb0:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    2eb2:	28cf      	cmp	r0, #207	; 0xcf
    2eb4:	d02b      	beq.n	2f0e <spi_cmd_rsp+0x66>
    2eb6:	0003      	movs	r3, r0
    2eb8:	333b      	adds	r3, #59	; 0x3b
    2eba:	b2db      	uxtb	r3, r3
    2ebc:	2b01      	cmp	r3, #1
    2ebe:	d926      	bls.n	2f0e <spi_cmd_rsp+0x66>
{
    2ec0:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2ec2:	466b      	mov	r3, sp
    2ec4:	1dde      	adds	r6, r3, #7
    2ec6:	4b26      	ldr	r3, [pc, #152]	; (2f60 <spi_cmd_rsp+0xb8>)
    2ec8:	4698      	mov	r8, r3
    2eca:	2101      	movs	r1, #1
    2ecc:	0030      	movs	r0, r6
    2ece:	47c0      	blx	r8
    2ed0:	1e05      	subs	r5, r0, #0
    2ed2:	d125      	bne.n	2f20 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    2ed4:	7833      	ldrb	r3, [r6, #0]
    2ed6:	42bb      	cmp	r3, r7
    2ed8:	d030      	beq.n	2f3c <spi_cmd_rsp+0x94>
    2eda:	3c01      	subs	r4, #1
    2edc:	b2e4      	uxtb	r4, r4
    2ede:	2c00      	cmp	r4, #0
    2ee0:	d1f3      	bne.n	2eca <spi_cmd_rsp+0x22>
    2ee2:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2ee4:	466b      	mov	r3, sp
    2ee6:	1dde      	adds	r6, r3, #7
    2ee8:	4f1d      	ldr	r7, [pc, #116]	; (2f60 <spi_cmd_rsp+0xb8>)
    2eea:	2101      	movs	r1, #1
    2eec:	0030      	movs	r0, r6
    2eee:	47b8      	blx	r7
    2ef0:	2800      	cmp	r0, #0
    2ef2:	d125      	bne.n	2f40 <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    2ef4:	7833      	ldrb	r3, [r6, #0]
    2ef6:	2b00      	cmp	r3, #0
    2ef8:	d02f      	beq.n	2f5a <spi_cmd_rsp+0xb2>
    2efa:	3c01      	subs	r4, #1
    2efc:	b2e4      	uxtb	r4, r4
    2efe:	2c00      	cmp	r4, #0
    2f00:	d1f3      	bne.n	2eea <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    2f02:	2501      	movs	r5, #1

_fail_:

	return result;
}
    2f04:	0028      	movs	r0, r5
    2f06:	b002      	add	sp, #8
    2f08:	bc04      	pop	{r2}
    2f0a:	4690      	mov	r8, r2
    2f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2f0e:	2101      	movs	r1, #1
    2f10:	466b      	mov	r3, sp
    2f12:	1dd8      	adds	r0, r3, #7
    2f14:	4b12      	ldr	r3, [pc, #72]	; (2f60 <spi_cmd_rsp+0xb8>)
    2f16:	4798      	blx	r3
			result = N_FAIL;
    2f18:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2f1a:	2800      	cmp	r0, #0
    2f1c:	d0d0      	beq.n	2ec0 <spi_cmd_rsp+0x18>
    2f1e:	e7f1      	b.n	2f04 <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    2f20:	22b1      	movs	r2, #177	; 0xb1
    2f22:	0052      	lsls	r2, r2, #1
    2f24:	490f      	ldr	r1, [pc, #60]	; (2f64 <spi_cmd_rsp+0xbc>)
    2f26:	4810      	ldr	r0, [pc, #64]	; (2f68 <spi_cmd_rsp+0xc0>)
    2f28:	4b10      	ldr	r3, [pc, #64]	; (2f6c <spi_cmd_rsp+0xc4>)
    2f2a:	4798      	blx	r3
    2f2c:	4810      	ldr	r0, [pc, #64]	; (2f70 <spi_cmd_rsp+0xc8>)
    2f2e:	4b11      	ldr	r3, [pc, #68]	; (2f74 <spi_cmd_rsp+0xcc>)
    2f30:	4798      	blx	r3
    2f32:	200d      	movs	r0, #13
    2f34:	4b10      	ldr	r3, [pc, #64]	; (2f78 <spi_cmd_rsp+0xd0>)
    2f36:	4798      	blx	r3
			result = N_FAIL;
    2f38:	2500      	movs	r5, #0
			goto _fail_;
    2f3a:	e7e3      	b.n	2f04 <spi_cmd_rsp+0x5c>
    2f3c:	240b      	movs	r4, #11
    2f3e:	e7d1      	b.n	2ee4 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    2f40:	22b8      	movs	r2, #184	; 0xb8
    2f42:	0052      	lsls	r2, r2, #1
    2f44:	4907      	ldr	r1, [pc, #28]	; (2f64 <spi_cmd_rsp+0xbc>)
    2f46:	4808      	ldr	r0, [pc, #32]	; (2f68 <spi_cmd_rsp+0xc0>)
    2f48:	4b08      	ldr	r3, [pc, #32]	; (2f6c <spi_cmd_rsp+0xc4>)
    2f4a:	4798      	blx	r3
    2f4c:	4808      	ldr	r0, [pc, #32]	; (2f70 <spi_cmd_rsp+0xc8>)
    2f4e:	4b09      	ldr	r3, [pc, #36]	; (2f74 <spi_cmd_rsp+0xcc>)
    2f50:	4798      	blx	r3
    2f52:	200d      	movs	r0, #13
    2f54:	4b08      	ldr	r3, [pc, #32]	; (2f78 <spi_cmd_rsp+0xd0>)
    2f56:	4798      	blx	r3
			goto _fail_;
    2f58:	e7d4      	b.n	2f04 <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    2f5a:	2501      	movs	r5, #1
    2f5c:	e7d2      	b.n	2f04 <spi_cmd_rsp+0x5c>
    2f5e:	46c0      	nop			; (mov r8, r8)
    2f60:	00002e89 	.word	0x00002e89
    2f64:	0000b560 	.word	0x0000b560
    2f68:	0000ae84 	.word	0x0000ae84
    2f6c:	00009995 	.word	0x00009995
    2f70:	0000ba04 	.word	0x0000ba04
    2f74:	00009ab1 	.word	0x00009ab1
    2f78:	000099c9 	.word	0x000099c9

00002f7c <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    2f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f7e:	46de      	mov	lr, fp
    2f80:	4657      	mov	r7, sl
    2f82:	464e      	mov	r6, r9
    2f84:	4645      	mov	r5, r8
    2f86:	b5e0      	push	{r5, r6, r7, lr}
    2f88:	b087      	sub	sp, #28
    2f8a:	9001      	str	r0, [sp, #4]
    2f8c:	4689      	mov	r9, r1
    2f8e:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    2f90:	2300      	movs	r3, #0
    2f92:	469a      	mov	sl, r3
    2f94:	2380      	movs	r3, #128	; 0x80
    2f96:	019b      	lsls	r3, r3, #6
    2f98:	469b      	mov	fp, r3
    2f9a:	466a      	mov	r2, sp
    2f9c:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2f9e:	4b3b      	ldr	r3, [pc, #236]	; (308c <spi_data_read+0x110>)
    2fa0:	4698      	mov	r8, r3
    2fa2:	e02e      	b.n	3002 <spi_data_read+0x86>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    2fa4:	4a3a      	ldr	r2, [pc, #232]	; (3090 <spi_data_read+0x114>)
    2fa6:	493b      	ldr	r1, [pc, #236]	; (3094 <spi_data_read+0x118>)
    2fa8:	483b      	ldr	r0, [pc, #236]	; (3098 <spi_data_read+0x11c>)
    2faa:	4b3c      	ldr	r3, [pc, #240]	; (309c <spi_data_read+0x120>)
    2fac:	4798      	blx	r3
    2fae:	483c      	ldr	r0, [pc, #240]	; (30a0 <spi_data_read+0x124>)
    2fb0:	4b3c      	ldr	r3, [pc, #240]	; (30a4 <spi_data_read+0x128>)
    2fb2:	4798      	blx	r3
    2fb4:	200d      	movs	r0, #13
    2fb6:	4b3c      	ldr	r3, [pc, #240]	; (30a8 <spi_data_read+0x12c>)
    2fb8:	4798      	blx	r3
    2fba:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    2fbc:	0028      	movs	r0, r5
    2fbe:	b007      	add	sp, #28
    2fc0:	bc3c      	pop	{r2, r3, r4, r5}
    2fc2:	4690      	mov	r8, r2
    2fc4:	4699      	mov	r9, r3
    2fc6:	46a2      	mov	sl, r4
    2fc8:	46ab      	mov	fp, r5
    2fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    2fcc:	2c00      	cmp	r4, #0
    2fce:	dd2e      	ble.n	302e <spi_data_read+0xb2>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    2fd0:	9b01      	ldr	r3, [sp, #4]
    2fd2:	4453      	add	r3, sl
    2fd4:	0018      	movs	r0, r3
    2fd6:	0039      	movs	r1, r7
    2fd8:	4b2c      	ldr	r3, [pc, #176]	; (308c <spi_data_read+0x110>)
    2fda:	4798      	blx	r3
    2fdc:	1e04      	subs	r4, r0, #0
    2fde:	d133      	bne.n	3048 <spi_data_read+0xcc>
		if(!clockless)
    2fe0:	9b02      	ldr	r3, [sp, #8]
    2fe2:	2b00      	cmp	r3, #0
    2fe4:	d103      	bne.n	2fee <spi_data_read+0x72>
			if (!gu8Crc_off) {
    2fe6:	4b31      	ldr	r3, [pc, #196]	; (30ac <spi_data_read+0x130>)
    2fe8:	781b      	ldrb	r3, [r3, #0]
    2fea:	2b00      	cmp	r3, #0
    2fec:	d039      	beq.n	3062 <spi_data_read+0xe6>
		ix += nbytes;
    2fee:	4653      	mov	r3, sl
    2ff0:	18fb      	adds	r3, r7, r3
    2ff2:	b21b      	sxth	r3, r3
    2ff4:	469a      	mov	sl, r3
		sz -= nbytes;
    2ff6:	464b      	mov	r3, r9
    2ff8:	1bdf      	subs	r7, r3, r7
    2ffa:	b2bb      	uxth	r3, r7
    2ffc:	4699      	mov	r9, r3
	} while (sz);
    2ffe:	2b00      	cmp	r3, #0
    3000:	d042      	beq.n	3088 <spi_data_read+0x10c>
    3002:	464f      	mov	r7, r9
    3004:	45d9      	cmp	r9, fp
    3006:	d901      	bls.n	300c <spi_data_read+0x90>
    3008:	466b      	mov	r3, sp
    300a:	89df      	ldrh	r7, [r3, #14]
    300c:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    300e:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3010:	ab04      	add	r3, sp, #16
    3012:	1cde      	adds	r6, r3, #3
    3014:	2101      	movs	r1, #1
    3016:	0030      	movs	r0, r6
    3018:	47c0      	blx	r8
    301a:	1e05      	subs	r5, r0, #0
    301c:	d1c2      	bne.n	2fa4 <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    301e:	7833      	ldrb	r3, [r6, #0]
    3020:	091b      	lsrs	r3, r3, #4
    3022:	2b0f      	cmp	r3, #15
    3024:	d0d2      	beq.n	2fcc <spi_data_read+0x50>
    3026:	3c01      	subs	r4, #1
    3028:	b224      	sxth	r4, r4
		} while (retry--);
    302a:	1c63      	adds	r3, r4, #1
    302c:	d1f2      	bne.n	3014 <spi_data_read+0x98>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    302e:	4a20      	ldr	r2, [pc, #128]	; (30b0 <spi_data_read+0x134>)
    3030:	4918      	ldr	r1, [pc, #96]	; (3094 <spi_data_read+0x118>)
    3032:	4819      	ldr	r0, [pc, #100]	; (3098 <spi_data_read+0x11c>)
    3034:	4c19      	ldr	r4, [pc, #100]	; (309c <spi_data_read+0x120>)
    3036:	47a0      	blx	r4
    3038:	ab04      	add	r3, sp, #16
    303a:	78d9      	ldrb	r1, [r3, #3]
    303c:	481d      	ldr	r0, [pc, #116]	; (30b4 <spi_data_read+0x138>)
    303e:	47a0      	blx	r4
    3040:	200d      	movs	r0, #13
    3042:	4b19      	ldr	r3, [pc, #100]	; (30a8 <spi_data_read+0x12c>)
    3044:	4798      	blx	r3
			break;
    3046:	e7b9      	b.n	2fbc <spi_data_read+0x40>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    3048:	22c5      	movs	r2, #197	; 0xc5
    304a:	0092      	lsls	r2, r2, #2
    304c:	4911      	ldr	r1, [pc, #68]	; (3094 <spi_data_read+0x118>)
    304e:	4812      	ldr	r0, [pc, #72]	; (3098 <spi_data_read+0x11c>)
    3050:	4b12      	ldr	r3, [pc, #72]	; (309c <spi_data_read+0x120>)
    3052:	4798      	blx	r3
    3054:	4818      	ldr	r0, [pc, #96]	; (30b8 <spi_data_read+0x13c>)
    3056:	4b13      	ldr	r3, [pc, #76]	; (30a4 <spi_data_read+0x128>)
    3058:	4798      	blx	r3
    305a:	200d      	movs	r0, #13
    305c:	4b12      	ldr	r3, [pc, #72]	; (30a8 <spi_data_read+0x12c>)
    305e:	4798      	blx	r3
			break;
    3060:	e7ac      	b.n	2fbc <spi_data_read+0x40>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    3062:	2102      	movs	r1, #2
    3064:	a805      	add	r0, sp, #20
    3066:	4b09      	ldr	r3, [pc, #36]	; (308c <spi_data_read+0x110>)
    3068:	4798      	blx	r3
    306a:	2800      	cmp	r0, #0
    306c:	d0bf      	beq.n	2fee <spi_data_read+0x72>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    306e:	4a13      	ldr	r2, [pc, #76]	; (30bc <spi_data_read+0x140>)
    3070:	4908      	ldr	r1, [pc, #32]	; (3094 <spi_data_read+0x118>)
    3072:	4809      	ldr	r0, [pc, #36]	; (3098 <spi_data_read+0x11c>)
    3074:	4b09      	ldr	r3, [pc, #36]	; (309c <spi_data_read+0x120>)
    3076:	4798      	blx	r3
    3078:	4811      	ldr	r0, [pc, #68]	; (30c0 <spi_data_read+0x144>)
    307a:	4b0a      	ldr	r3, [pc, #40]	; (30a4 <spi_data_read+0x128>)
    307c:	4798      	blx	r3
    307e:	200d      	movs	r0, #13
    3080:	4b09      	ldr	r3, [pc, #36]	; (30a8 <spi_data_read+0x12c>)
    3082:	4798      	blx	r3
					result = N_FAIL;
    3084:	0025      	movs	r5, r4
					break;
    3086:	e799      	b.n	2fbc <spi_data_read+0x40>
    3088:	2501      	movs	r5, #1
    308a:	e797      	b.n	2fbc <spi_data_read+0x40>
    308c:	00002e89 	.word	0x00002e89
    3090:	000002ff 	.word	0x000002ff
    3094:	0000b56c 	.word	0x0000b56c
    3098:	0000ae84 	.word	0x0000ae84
    309c:	00009995 	.word	0x00009995
    30a0:	0000ba38 	.word	0x0000ba38
    30a4:	00009ab1 	.word	0x00009ab1
    30a8:	000099c9 	.word	0x000099c9
    30ac:	200000e4 	.word	0x200000e4
    30b0:	0000030b 	.word	0x0000030b
    30b4:	0000ba6c 	.word	0x0000ba6c
    30b8:	0000ba9c 	.word	0x0000ba9c
    30bc:	0000031f 	.word	0x0000031f
    30c0:	0000bacc 	.word	0x0000bacc

000030c4 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    30c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    30c6:	46d6      	mov	lr, sl
    30c8:	464f      	mov	r7, r9
    30ca:	4646      	mov	r6, r8
    30cc:	b5c0      	push	{r6, r7, lr}
    30ce:	b086      	sub	sp, #24
    30d0:	9003      	str	r0, [sp, #12]
    30d2:	9104      	str	r1, [sp, #16]
    30d4:	2830      	cmp	r0, #48	; 0x30
    30d6:	d80f      	bhi.n	30f8 <spi_write_reg+0x34>
    30d8:	4b30      	ldr	r3, [pc, #192]	; (319c <spi_write_reg+0xd8>)
    30da:	781f      	ldrb	r7, [r3, #0]
    30dc:	b2fb      	uxtb	r3, r7
    30de:	9305      	str	r3, [sp, #20]
    30e0:	2300      	movs	r3, #0
    30e2:	2230      	movs	r2, #48	; 0x30
    30e4:	9903      	ldr	r1, [sp, #12]
    30e6:	428a      	cmp	r2, r1
    30e8:	415b      	adcs	r3, r3
    30ea:	b2db      	uxtb	r3, r3
    30ec:	469a      	mov	sl, r3
    30ee:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    30f0:	4b2b      	ldr	r3, [pc, #172]	; (31a0 <spi_write_reg+0xdc>)
    30f2:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    30f4:	46d1      	mov	r9, sl
    30f6:	e033      	b.n	3160 <spi_write_reg+0x9c>
    30f8:	4b2a      	ldr	r3, [pc, #168]	; (31a4 <spi_write_reg+0xe0>)
    30fa:	781f      	ldrb	r7, [r3, #0]
    30fc:	e7ee      	b.n	30dc <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    30fe:	9805      	ldr	r0, [sp, #20]
    3100:	4b29      	ldr	r3, [pc, #164]	; (31a8 <spi_write_reg+0xe4>)
    3102:	4798      	blx	r3
    3104:	0004      	movs	r4, r0
	if (result != N_OK) {
    3106:	2801      	cmp	r0, #1
    3108:	d041      	beq.n	318e <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    310a:	22e7      	movs	r2, #231	; 0xe7
    310c:	0092      	lsls	r2, r2, #2
    310e:	4927      	ldr	r1, [pc, #156]	; (31ac <spi_write_reg+0xe8>)
    3110:	4827      	ldr	r0, [pc, #156]	; (31b0 <spi_write_reg+0xec>)
    3112:	4e28      	ldr	r6, [pc, #160]	; (31b4 <spi_write_reg+0xf0>)
    3114:	47b0      	blx	r6
    3116:	9903      	ldr	r1, [sp, #12]
    3118:	4827      	ldr	r0, [pc, #156]	; (31b8 <spi_write_reg+0xf4>)
    311a:	47b0      	blx	r6
    311c:	200d      	movs	r0, #13
    311e:	4b27      	ldr	r3, [pc, #156]	; (31bc <spi_write_reg+0xf8>)
    3120:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    3122:	2001      	movs	r0, #1
    3124:	4e26      	ldr	r6, [pc, #152]	; (31c0 <spi_write_reg+0xfc>)
    3126:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3128:	2300      	movs	r3, #0
    312a:	9300      	str	r3, [sp, #0]
    312c:	2200      	movs	r2, #0
    312e:	2100      	movs	r1, #0
    3130:	20cf      	movs	r0, #207	; 0xcf
    3132:	4f1b      	ldr	r7, [pc, #108]	; (31a0 <spi_write_reg+0xdc>)
    3134:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    3136:	20cf      	movs	r0, #207	; 0xcf
    3138:	4b1b      	ldr	r3, [pc, #108]	; (31a8 <spi_write_reg+0xe4>)
    313a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    313c:	4a21      	ldr	r2, [pc, #132]	; (31c4 <spi_write_reg+0x100>)
    313e:	491b      	ldr	r1, [pc, #108]	; (31ac <spi_write_reg+0xe8>)
    3140:	481b      	ldr	r0, [pc, #108]	; (31b0 <spi_write_reg+0xec>)
    3142:	4f1c      	ldr	r7, [pc, #112]	; (31b4 <spi_write_reg+0xf0>)
    3144:	47b8      	blx	r7
    3146:	9b04      	ldr	r3, [sp, #16]
    3148:	9a03      	ldr	r2, [sp, #12]
    314a:	0029      	movs	r1, r5
    314c:	481e      	ldr	r0, [pc, #120]	; (31c8 <spi_write_reg+0x104>)
    314e:	47b8      	blx	r7
    3150:	200d      	movs	r0, #13
    3152:	4b1a      	ldr	r3, [pc, #104]	; (31bc <spi_write_reg+0xf8>)
    3154:	4798      	blx	r3
		nm_bsp_sleep(1);
    3156:	2001      	movs	r0, #1
    3158:	47b0      	blx	r6
    315a:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    315c:	2d00      	cmp	r5, #0
    315e:	d016      	beq.n	318e <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    3160:	464b      	mov	r3, r9
    3162:	9300      	str	r3, [sp, #0]
    3164:	2304      	movs	r3, #4
    3166:	9a04      	ldr	r2, [sp, #16]
    3168:	9f03      	ldr	r7, [sp, #12]
    316a:	0039      	movs	r1, r7
    316c:	9805      	ldr	r0, [sp, #20]
    316e:	47c0      	blx	r8
    3170:	0004      	movs	r4, r0
	if (result != N_OK) {
    3172:	2801      	cmp	r0, #1
    3174:	d0c3      	beq.n	30fe <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    3176:	4a15      	ldr	r2, [pc, #84]	; (31cc <spi_write_reg+0x108>)
    3178:	490c      	ldr	r1, [pc, #48]	; (31ac <spi_write_reg+0xe8>)
    317a:	480d      	ldr	r0, [pc, #52]	; (31b0 <spi_write_reg+0xec>)
    317c:	4e0d      	ldr	r6, [pc, #52]	; (31b4 <spi_write_reg+0xf0>)
    317e:	47b0      	blx	r6
    3180:	0039      	movs	r1, r7
    3182:	4813      	ldr	r0, [pc, #76]	; (31d0 <spi_write_reg+0x10c>)
    3184:	47b0      	blx	r6
    3186:	200d      	movs	r0, #13
    3188:	4b0c      	ldr	r3, [pc, #48]	; (31bc <spi_write_reg+0xf8>)
    318a:	4798      	blx	r3
		goto _FAIL_;
    318c:	e7c9      	b.n	3122 <spi_write_reg+0x5e>
	}

	return result;
}
    318e:	0020      	movs	r0, r4
    3190:	b006      	add	sp, #24
    3192:	bc1c      	pop	{r2, r3, r4}
    3194:	4690      	mov	r8, r2
    3196:	4699      	mov	r9, r3
    3198:	46a2      	mov	sl, r4
    319a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    319c:	0000b544 	.word	0x0000b544
    31a0:	00002d09 	.word	0x00002d09
    31a4:	0000b545 	.word	0x0000b545
    31a8:	00002ea9 	.word	0x00002ea9
    31ac:	0000b58c 	.word	0x0000b58c
    31b0:	0000ae84 	.word	0x0000ae84
    31b4:	00009995 	.word	0x00009995
    31b8:	0000bbc4 	.word	0x0000bbc4
    31bc:	000099c9 	.word	0x000099c9
    31c0:	00001159 	.word	0x00001159
    31c4:	000003af 	.word	0x000003af
    31c8:	0000bbfc 	.word	0x0000bbfc
    31cc:	00000396 	.word	0x00000396
    31d0:	0000bb98 	.word	0x0000bb98

000031d4 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    31d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    31d6:	46de      	mov	lr, fp
    31d8:	4657      	mov	r7, sl
    31da:	464e      	mov	r6, r9
    31dc:	4645      	mov	r5, r8
    31de:	b5e0      	push	{r5, r6, r7, lr}
    31e0:	b087      	sub	sp, #28
    31e2:	9002      	str	r0, [sp, #8]
    31e4:	468b      	mov	fp, r1
    31e6:	28ff      	cmp	r0, #255	; 0xff
    31e8:	d80f      	bhi.n	320a <spi_read_reg+0x36>
    31ea:	4b41      	ldr	r3, [pc, #260]	; (32f0 <spi_read_reg+0x11c>)
    31ec:	781f      	ldrb	r7, [r3, #0]
    31ee:	b2fb      	uxtb	r3, r7
    31f0:	9303      	str	r3, [sp, #12]
    31f2:	2300      	movs	r3, #0
    31f4:	22ff      	movs	r2, #255	; 0xff
    31f6:	9902      	ldr	r1, [sp, #8]
    31f8:	428a      	cmp	r2, r1
    31fa:	415b      	adcs	r3, r3
    31fc:	b2db      	uxtb	r3, r3
    31fe:	469a      	mov	sl, r3
    3200:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    3202:	4b3c      	ldr	r3, [pc, #240]	; (32f4 <spi_read_reg+0x120>)
    3204:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    3206:	46d1      	mov	r9, sl
    3208:	e031      	b.n	326e <spi_read_reg+0x9a>
    320a:	4b3b      	ldr	r3, [pc, #236]	; (32f8 <spi_read_reg+0x124>)
    320c:	781f      	ldrb	r7, [r3, #0]
    320e:	e7ee      	b.n	31ee <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    3210:	9803      	ldr	r0, [sp, #12]
    3212:	4b3a      	ldr	r3, [pc, #232]	; (32fc <spi_read_reg+0x128>)
    3214:	4798      	blx	r3
    3216:	0004      	movs	r4, r0
	if (result != N_OK) {
    3218:	2801      	cmp	r0, #1
    321a:	d03f      	beq.n	329c <spi_read_reg+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    321c:	4a38      	ldr	r2, [pc, #224]	; (3300 <spi_read_reg+0x12c>)
    321e:	4939      	ldr	r1, [pc, #228]	; (3304 <spi_read_reg+0x130>)
    3220:	4839      	ldr	r0, [pc, #228]	; (3308 <spi_read_reg+0x134>)
    3222:	4e3a      	ldr	r6, [pc, #232]	; (330c <spi_read_reg+0x138>)
    3224:	47b0      	blx	r6
    3226:	9902      	ldr	r1, [sp, #8]
    3228:	4839      	ldr	r0, [pc, #228]	; (3310 <spi_read_reg+0x13c>)
    322a:	47b0      	blx	r6
    322c:	200d      	movs	r0, #13
    322e:	4b39      	ldr	r3, [pc, #228]	; (3314 <spi_read_reg+0x140>)
    3230:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    3232:	2001      	movs	r0, #1
    3234:	4e38      	ldr	r6, [pc, #224]	; (3318 <spi_read_reg+0x144>)
    3236:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3238:	2300      	movs	r3, #0
    323a:	9300      	str	r3, [sp, #0]
    323c:	2200      	movs	r2, #0
    323e:	2100      	movs	r1, #0
    3240:	20cf      	movs	r0, #207	; 0xcf
    3242:	4f2c      	ldr	r7, [pc, #176]	; (32f4 <spi_read_reg+0x120>)
    3244:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    3246:	20cf      	movs	r0, #207	; 0xcf
    3248:	4b2c      	ldr	r3, [pc, #176]	; (32fc <spi_read_reg+0x128>)
    324a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    324c:	4a33      	ldr	r2, [pc, #204]	; (331c <spi_read_reg+0x148>)
    324e:	492d      	ldr	r1, [pc, #180]	; (3304 <spi_read_reg+0x130>)
    3250:	482d      	ldr	r0, [pc, #180]	; (3308 <spi_read_reg+0x134>)
    3252:	4f2e      	ldr	r7, [pc, #184]	; (330c <spi_read_reg+0x138>)
    3254:	47b8      	blx	r7
    3256:	9a02      	ldr	r2, [sp, #8]
    3258:	0029      	movs	r1, r5
    325a:	4831      	ldr	r0, [pc, #196]	; (3320 <spi_read_reg+0x14c>)
    325c:	47b8      	blx	r7
    325e:	200d      	movs	r0, #13
    3260:	4b2c      	ldr	r3, [pc, #176]	; (3314 <spi_read_reg+0x140>)
    3262:	4798      	blx	r3
		nm_bsp_sleep(1);
    3264:	2001      	movs	r0, #1
    3266:	47b0      	blx	r6
    3268:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    326a:	2d00      	cmp	r5, #0
    326c:	d037      	beq.n	32de <spi_read_reg+0x10a>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    326e:	464b      	mov	r3, r9
    3270:	9300      	str	r3, [sp, #0]
    3272:	2304      	movs	r3, #4
    3274:	2200      	movs	r2, #0
    3276:	9f02      	ldr	r7, [sp, #8]
    3278:	0039      	movs	r1, r7
    327a:	9803      	ldr	r0, [sp, #12]
    327c:	47c0      	blx	r8
    327e:	0004      	movs	r4, r0
	if (result != N_OK) {
    3280:	2801      	cmp	r0, #1
    3282:	d0c5      	beq.n	3210 <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    3284:	4a27      	ldr	r2, [pc, #156]	; (3324 <spi_read_reg+0x150>)
    3286:	491f      	ldr	r1, [pc, #124]	; (3304 <spi_read_reg+0x130>)
    3288:	481f      	ldr	r0, [pc, #124]	; (3308 <spi_read_reg+0x134>)
    328a:	4e20      	ldr	r6, [pc, #128]	; (330c <spi_read_reg+0x138>)
    328c:	47b0      	blx	r6
    328e:	0039      	movs	r1, r7
    3290:	4825      	ldr	r0, [pc, #148]	; (3328 <spi_read_reg+0x154>)
    3292:	47b0      	blx	r6
    3294:	200d      	movs	r0, #13
    3296:	4b1f      	ldr	r3, [pc, #124]	; (3314 <spi_read_reg+0x140>)
    3298:	4798      	blx	r3
		goto _FAIL_;
    329a:	e7ca      	b.n	3232 <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
    329c:	464a      	mov	r2, r9
    329e:	2104      	movs	r1, #4
    32a0:	a805      	add	r0, sp, #20
    32a2:	4b22      	ldr	r3, [pc, #136]	; (332c <spi_read_reg+0x158>)
    32a4:	4798      	blx	r3
    32a6:	0004      	movs	r4, r0
	if (result != N_OK) {
    32a8:	2801      	cmp	r0, #1
    32aa:	d00b      	beq.n	32c4 <spi_read_reg+0xf0>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    32ac:	4a20      	ldr	r2, [pc, #128]	; (3330 <spi_read_reg+0x15c>)
    32ae:	4915      	ldr	r1, [pc, #84]	; (3304 <spi_read_reg+0x130>)
    32b0:	4815      	ldr	r0, [pc, #84]	; (3308 <spi_read_reg+0x134>)
    32b2:	4b16      	ldr	r3, [pc, #88]	; (330c <spi_read_reg+0x138>)
    32b4:	4798      	blx	r3
    32b6:	481f      	ldr	r0, [pc, #124]	; (3334 <spi_read_reg+0x160>)
    32b8:	4b1f      	ldr	r3, [pc, #124]	; (3338 <spi_read_reg+0x164>)
    32ba:	4798      	blx	r3
    32bc:	200d      	movs	r0, #13
    32be:	4b15      	ldr	r3, [pc, #84]	; (3314 <spi_read_reg+0x140>)
    32c0:	4798      	blx	r3
		goto _FAIL_;
    32c2:	e7b6      	b.n	3232 <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
    32c4:	aa05      	add	r2, sp, #20
    32c6:	7853      	ldrb	r3, [r2, #1]
    32c8:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    32ca:	7891      	ldrb	r1, [r2, #2]
    32cc:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    32ce:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    32d0:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    32d2:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    32d4:	78d2      	ldrb	r2, [r2, #3]
    32d6:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    32d8:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    32da:	465a      	mov	r2, fp
    32dc:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    32de:	0020      	movs	r0, r4
    32e0:	b007      	add	sp, #28
    32e2:	bc3c      	pop	{r2, r3, r4, r5}
    32e4:	4690      	mov	r8, r2
    32e6:	4699      	mov	r9, r3
    32e8:	46a2      	mov	sl, r4
    32ea:	46ab      	mov	fp, r5
    32ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32ee:	46c0      	nop			; (mov r8, r8)
    32f0:	0000b546 	.word	0x0000b546
    32f4:	00002d09 	.word	0x00002d09
    32f8:	0000b547 	.word	0x0000b547
    32fc:	00002ea9 	.word	0x00002ea9
    3300:	0000041d 	.word	0x0000041d
    3304:	0000b5ac 	.word	0x0000b5ac
    3308:	0000ae84 	.word	0x0000ae84
    330c:	00009995 	.word	0x00009995
    3310:	0000bb2c 	.word	0x0000bb2c
    3314:	000099c9 	.word	0x000099c9
    3318:	00001159 	.word	0x00001159
    331c:	0000043c 	.word	0x0000043c
    3320:	0000bb80 	.word	0x0000bb80
    3324:	00000417 	.word	0x00000417
    3328:	0000bb00 	.word	0x0000bb00
    332c:	00002f7d 	.word	0x00002f7d
    3330:	00000424 	.word	0x00000424
    3334:	0000bb60 	.word	0x0000bb60
    3338:	00009ab1 	.word	0x00009ab1

0000333c <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    333c:	b510      	push	{r4, lr}
    333e:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3340:	2300      	movs	r3, #0
    3342:	9300      	str	r3, [sp, #0]
    3344:	2200      	movs	r2, #0
    3346:	2100      	movs	r1, #0
    3348:	20cf      	movs	r0, #207	; 0xcf
    334a:	4c04      	ldr	r4, [pc, #16]	; (335c <nm_spi_reset+0x20>)
    334c:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    334e:	20cf      	movs	r0, #207	; 0xcf
    3350:	4b03      	ldr	r3, [pc, #12]	; (3360 <nm_spi_reset+0x24>)
    3352:	4798      	blx	r3
	return M2M_SUCCESS;
}
    3354:	2000      	movs	r0, #0
    3356:	b002      	add	sp, #8
    3358:	bd10      	pop	{r4, pc}
    335a:	46c0      	nop			; (mov r8, r8)
    335c:	00002d09 	.word	0x00002d09
    3360:	00002ea9 	.word	0x00002ea9

00003364 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    3364:	2200      	movs	r2, #0
    3366:	4b02      	ldr	r3, [pc, #8]	; (3370 <nm_spi_deinit+0xc>)
    3368:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    336a:	2000      	movs	r0, #0
    336c:	4770      	bx	lr
    336e:	46c0      	nop			; (mov r8, r8)
    3370:	200000e4 	.word	0x200000e4

00003374 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    3374:	b500      	push	{lr}
    3376:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    3378:	a901      	add	r1, sp, #4
    337a:	4b02      	ldr	r3, [pc, #8]	; (3384 <nm_spi_read_reg+0x10>)
    337c:	4798      	blx	r3

	return u32Val;
}
    337e:	9801      	ldr	r0, [sp, #4]
    3380:	b003      	add	sp, #12
    3382:	bd00      	pop	{pc}
    3384:	000031d5 	.word	0x000031d5

00003388 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    3388:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    338a:	4b04      	ldr	r3, [pc, #16]	; (339c <nm_spi_read_reg_with_ret+0x14>)
    338c:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    338e:	2300      	movs	r3, #0
    3390:	2801      	cmp	r0, #1
    3392:	d101      	bne.n	3398 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    3394:	0018      	movs	r0, r3
    3396:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    3398:	3b06      	subs	r3, #6
    339a:	e7fb      	b.n	3394 <nm_spi_read_reg_with_ret+0xc>
    339c:	000031d5 	.word	0x000031d5

000033a0 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    33a0:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    33a2:	4b04      	ldr	r3, [pc, #16]	; (33b4 <nm_spi_write_reg+0x14>)
    33a4:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    33a6:	2300      	movs	r3, #0
    33a8:	2801      	cmp	r0, #1
    33aa:	d101      	bne.n	33b0 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    33ac:	0018      	movs	r0, r3
    33ae:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    33b0:	3b06      	subs	r3, #6
    33b2:	e7fb      	b.n	33ac <nm_spi_write_reg+0xc>
    33b4:	000030c5 	.word	0x000030c5

000033b8 <nm_spi_init>:
{
    33b8:	b510      	push	{r4, lr}
    33ba:	b082      	sub	sp, #8
	uint32 reg = 0;
    33bc:	2300      	movs	r3, #0
    33be:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    33c0:	4a35      	ldr	r2, [pc, #212]	; (3498 <nm_spi_init+0xe0>)
    33c2:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    33c4:	4669      	mov	r1, sp
    33c6:	4835      	ldr	r0, [pc, #212]	; (349c <nm_spi_init+0xe4>)
    33c8:	4b35      	ldr	r3, [pc, #212]	; (34a0 <nm_spi_init+0xe8>)
    33ca:	4798      	blx	r3
    33cc:	2800      	cmp	r0, #0
    33ce:	d028      	beq.n	3422 <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    33d0:	4b31      	ldr	r3, [pc, #196]	; (3498 <nm_spi_init+0xe0>)
    33d2:	781b      	ldrb	r3, [r3, #0]
    33d4:	2b00      	cmp	r3, #0
    33d6:	d10d      	bne.n	33f4 <nm_spi_init+0x3c>
		reg &= ~0x70;
    33d8:	337c      	adds	r3, #124	; 0x7c
    33da:	9900      	ldr	r1, [sp, #0]
    33dc:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    33de:	3b2c      	subs	r3, #44	; 0x2c
    33e0:	4319      	orrs	r1, r3
    33e2:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    33e4:	482d      	ldr	r0, [pc, #180]	; (349c <nm_spi_init+0xe4>)
    33e6:	4b2f      	ldr	r3, [pc, #188]	; (34a4 <nm_spi_init+0xec>)
    33e8:	4798      	blx	r3
    33ea:	1e04      	subs	r4, r0, #0
    33ec:	d039      	beq.n	3462 <nm_spi_init+0xaa>
		gu8Crc_off = 1;
    33ee:	2201      	movs	r2, #1
    33f0:	4b29      	ldr	r3, [pc, #164]	; (3498 <nm_spi_init+0xe0>)
    33f2:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    33f4:	a901      	add	r1, sp, #4
    33f6:	2080      	movs	r0, #128	; 0x80
    33f8:	0140      	lsls	r0, r0, #5
    33fa:	4b29      	ldr	r3, [pc, #164]	; (34a0 <nm_spi_init+0xe8>)
    33fc:	4798      	blx	r3
    33fe:	2800      	cmp	r0, #0
    3400:	d03b      	beq.n	347a <nm_spi_init+0xc2>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    3402:	4c26      	ldr	r4, [pc, #152]	; (349c <nm_spi_init+0xe4>)
    3404:	0020      	movs	r0, r4
    3406:	4b28      	ldr	r3, [pc, #160]	; (34a8 <nm_spi_init+0xf0>)
    3408:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    340a:	2370      	movs	r3, #112	; 0x70
    340c:	0001      	movs	r1, r0
    340e:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    3410:	2050      	movs	r0, #80	; 0x50
    3412:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    3414:	0020      	movs	r0, r4
    3416:	4b25      	ldr	r3, [pc, #148]	; (34ac <nm_spi_init+0xf4>)
    3418:	4798      	blx	r3
	return M2M_SUCCESS;
    341a:	2400      	movs	r4, #0
}
    341c:	0020      	movs	r0, r4
    341e:	b002      	add	sp, #8
    3420:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    3422:	2201      	movs	r2, #1
    3424:	4b1c      	ldr	r3, [pc, #112]	; (3498 <nm_spi_init+0xe0>)
    3426:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    3428:	4a21      	ldr	r2, [pc, #132]	; (34b0 <nm_spi_init+0xf8>)
    342a:	4922      	ldr	r1, [pc, #136]	; (34b4 <nm_spi_init+0xfc>)
    342c:	4822      	ldr	r0, [pc, #136]	; (34b8 <nm_spi_init+0x100>)
    342e:	4b23      	ldr	r3, [pc, #140]	; (34bc <nm_spi_init+0x104>)
    3430:	4798      	blx	r3
    3432:	4823      	ldr	r0, [pc, #140]	; (34c0 <nm_spi_init+0x108>)
    3434:	4b23      	ldr	r3, [pc, #140]	; (34c4 <nm_spi_init+0x10c>)
    3436:	4798      	blx	r3
    3438:	200d      	movs	r0, #13
    343a:	4b23      	ldr	r3, [pc, #140]	; (34c8 <nm_spi_init+0x110>)
    343c:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    343e:	4669      	mov	r1, sp
    3440:	4816      	ldr	r0, [pc, #88]	; (349c <nm_spi_init+0xe4>)
    3442:	4b17      	ldr	r3, [pc, #92]	; (34a0 <nm_spi_init+0xe8>)
    3444:	4798      	blx	r3
    3446:	1e04      	subs	r4, r0, #0
    3448:	d1c2      	bne.n	33d0 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    344a:	4a20      	ldr	r2, [pc, #128]	; (34cc <nm_spi_init+0x114>)
    344c:	4919      	ldr	r1, [pc, #100]	; (34b4 <nm_spi_init+0xfc>)
    344e:	481a      	ldr	r0, [pc, #104]	; (34b8 <nm_spi_init+0x100>)
    3450:	4b1a      	ldr	r3, [pc, #104]	; (34bc <nm_spi_init+0x104>)
    3452:	4798      	blx	r3
    3454:	481e      	ldr	r0, [pc, #120]	; (34d0 <nm_spi_init+0x118>)
    3456:	4b1b      	ldr	r3, [pc, #108]	; (34c4 <nm_spi_init+0x10c>)
    3458:	4798      	blx	r3
    345a:	200d      	movs	r0, #13
    345c:	4b1a      	ldr	r3, [pc, #104]	; (34c8 <nm_spi_init+0x110>)
    345e:	4798      	blx	r3
			return 0;
    3460:	e7dc      	b.n	341c <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    3462:	4a1c      	ldr	r2, [pc, #112]	; (34d4 <nm_spi_init+0x11c>)
    3464:	4913      	ldr	r1, [pc, #76]	; (34b4 <nm_spi_init+0xfc>)
    3466:	4814      	ldr	r0, [pc, #80]	; (34b8 <nm_spi_init+0x100>)
    3468:	4b14      	ldr	r3, [pc, #80]	; (34bc <nm_spi_init+0x104>)
    346a:	4798      	blx	r3
    346c:	481a      	ldr	r0, [pc, #104]	; (34d8 <nm_spi_init+0x120>)
    346e:	4b15      	ldr	r3, [pc, #84]	; (34c4 <nm_spi_init+0x10c>)
    3470:	4798      	blx	r3
    3472:	200d      	movs	r0, #13
    3474:	4b14      	ldr	r3, [pc, #80]	; (34c8 <nm_spi_init+0x110>)
    3476:	4798      	blx	r3
			return 0;
    3478:	e7d0      	b.n	341c <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    347a:	4a18      	ldr	r2, [pc, #96]	; (34dc <nm_spi_init+0x124>)
    347c:	490d      	ldr	r1, [pc, #52]	; (34b4 <nm_spi_init+0xfc>)
    347e:	480e      	ldr	r0, [pc, #56]	; (34b8 <nm_spi_init+0x100>)
    3480:	4b0e      	ldr	r3, [pc, #56]	; (34bc <nm_spi_init+0x104>)
    3482:	4798      	blx	r3
    3484:	4816      	ldr	r0, [pc, #88]	; (34e0 <nm_spi_init+0x128>)
    3486:	4b0f      	ldr	r3, [pc, #60]	; (34c4 <nm_spi_init+0x10c>)
    3488:	4798      	blx	r3
    348a:	200d      	movs	r0, #13
    348c:	4b0e      	ldr	r3, [pc, #56]	; (34c8 <nm_spi_init+0x110>)
    348e:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    3490:	2406      	movs	r4, #6
    3492:	4264      	negs	r4, r4
    3494:	e7c2      	b.n	341c <nm_spi_init+0x64>
    3496:	46c0      	nop			; (mov r8, r8)
    3498:	200000e4 	.word	0x200000e4
    349c:	0000e824 	.word	0x0000e824
    34a0:	000031d5 	.word	0x000031d5
    34a4:	000030c5 	.word	0x000030c5
    34a8:	00003375 	.word	0x00003375
    34ac:	000033a1 	.word	0x000033a1
    34b0:	000004c7 	.word	0x000004c7
    34b4:	0000b5c8 	.word	0x0000b5c8
    34b8:	0000ae84 	.word	0x0000ae84
    34bc:	00009995 	.word	0x00009995
    34c0:	0000b6d4 	.word	0x0000b6d4
    34c4:	00009ab1 	.word	0x00009ab1
    34c8:	000099c9 	.word	0x000099c9
    34cc:	000004ca 	.word	0x000004ca
    34d0:	0000b724 	.word	0x0000b724
    34d4:	000004d4 	.word	0x000004d4
    34d8:	0000b750 	.word	0x0000b750
    34dc:	000004de 	.word	0x000004de
    34e0:	0000b784 	.word	0x0000b784

000034e4 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    34e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    34e6:	46de      	mov	lr, fp
    34e8:	4657      	mov	r7, sl
    34ea:	464e      	mov	r6, r9
    34ec:	4645      	mov	r5, r8
    34ee:	b5e0      	push	{r5, r6, r7, lr}
    34f0:	b087      	sub	sp, #28
    34f2:	9002      	str	r0, [sp, #8]
    34f4:	9103      	str	r1, [sp, #12]
    34f6:	0016      	movs	r6, r2
    34f8:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    34fa:	2300      	movs	r3, #0
    34fc:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    34fe:	2400      	movs	r4, #0
    3500:	4b3e      	ldr	r3, [pc, #248]	; (35fc <nm_spi_read_block+0x118>)
    3502:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    3504:	46a9      	mov	r9, r5
    3506:	e037      	b.n	3578 <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    3508:	2301      	movs	r3, #1
    350a:	469b      	mov	fp, r3
		size = 2;
    350c:	3601      	adds	r6, #1
    350e:	e035      	b.n	357c <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    3510:	20c8      	movs	r0, #200	; 0xc8
    3512:	4b3b      	ldr	r3, [pc, #236]	; (3600 <nm_spi_read_block+0x11c>)
    3514:	4798      	blx	r3
	if (result != N_OK) {
    3516:	2801      	cmp	r0, #1
    3518:	d045      	beq.n	35a6 <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    351a:	4a3a      	ldr	r2, [pc, #232]	; (3604 <nm_spi_read_block+0x120>)
    351c:	493a      	ldr	r1, [pc, #232]	; (3608 <nm_spi_read_block+0x124>)
    351e:	483b      	ldr	r0, [pc, #236]	; (360c <nm_spi_read_block+0x128>)
    3520:	4f3b      	ldr	r7, [pc, #236]	; (3610 <nm_spi_read_block+0x12c>)
    3522:	47b8      	blx	r7
    3524:	9902      	ldr	r1, [sp, #8]
    3526:	483b      	ldr	r0, [pc, #236]	; (3614 <nm_spi_read_block+0x130>)
    3528:	47b8      	blx	r7
    352a:	200d      	movs	r0, #13
    352c:	4b3a      	ldr	r3, [pc, #232]	; (3618 <nm_spi_read_block+0x134>)
    352e:	4798      	blx	r3
		nm_bsp_sleep(1);
    3530:	2001      	movs	r0, #1
    3532:	4f3a      	ldr	r7, [pc, #232]	; (361c <nm_spi_read_block+0x138>)
    3534:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3536:	9400      	str	r4, [sp, #0]
    3538:	0023      	movs	r3, r4
    353a:	0022      	movs	r2, r4
    353c:	0021      	movs	r1, r4
    353e:	20cf      	movs	r0, #207	; 0xcf
    3540:	4d2e      	ldr	r5, [pc, #184]	; (35fc <nm_spi_read_block+0x118>)
    3542:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    3544:	20cf      	movs	r0, #207	; 0xcf
    3546:	4b2e      	ldr	r3, [pc, #184]	; (3600 <nm_spi_read_block+0x11c>)
    3548:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    354a:	4a35      	ldr	r2, [pc, #212]	; (3620 <nm_spi_read_block+0x13c>)
    354c:	492e      	ldr	r1, [pc, #184]	; (3608 <nm_spi_read_block+0x124>)
    354e:	482f      	ldr	r0, [pc, #188]	; (360c <nm_spi_read_block+0x128>)
    3550:	4b2f      	ldr	r3, [pc, #188]	; (3610 <nm_spi_read_block+0x12c>)
    3552:	469a      	mov	sl, r3
    3554:	4798      	blx	r3
    3556:	0033      	movs	r3, r6
    3558:	9a02      	ldr	r2, [sp, #8]
    355a:	4649      	mov	r1, r9
    355c:	4831      	ldr	r0, [pc, #196]	; (3624 <nm_spi_read_block+0x140>)
    355e:	47d0      	blx	sl
    3560:	200d      	movs	r0, #13
    3562:	4b2d      	ldr	r3, [pc, #180]	; (3618 <nm_spi_read_block+0x134>)
    3564:	4798      	blx	r3
		nm_bsp_sleep(1);
    3566:	2001      	movs	r0, #1
    3568:	47b8      	blx	r7
    356a:	2301      	movs	r3, #1
    356c:	425b      	negs	r3, r3
    356e:	469c      	mov	ip, r3
    3570:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    3572:	464b      	mov	r3, r9
    3574:	2b00      	cmp	r3, #0
    3576:	d038      	beq.n	35ea <nm_spi_read_block+0x106>
	if (size == 1)
    3578:	2e01      	cmp	r6, #1
    357a:	d0c5      	beq.n	3508 <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    357c:	9400      	str	r4, [sp, #0]
    357e:	0033      	movs	r3, r6
    3580:	0022      	movs	r2, r4
    3582:	9d02      	ldr	r5, [sp, #8]
    3584:	0029      	movs	r1, r5
    3586:	20c8      	movs	r0, #200	; 0xc8
    3588:	47c0      	blx	r8
	if (result != N_OK) {
    358a:	2801      	cmp	r0, #1
    358c:	d0c0      	beq.n	3510 <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    358e:	4a26      	ldr	r2, [pc, #152]	; (3628 <nm_spi_read_block+0x144>)
    3590:	491d      	ldr	r1, [pc, #116]	; (3608 <nm_spi_read_block+0x124>)
    3592:	481e      	ldr	r0, [pc, #120]	; (360c <nm_spi_read_block+0x128>)
    3594:	4f1e      	ldr	r7, [pc, #120]	; (3610 <nm_spi_read_block+0x12c>)
    3596:	47b8      	blx	r7
    3598:	0029      	movs	r1, r5
    359a:	4824      	ldr	r0, [pc, #144]	; (362c <nm_spi_read_block+0x148>)
    359c:	47b8      	blx	r7
    359e:	200d      	movs	r0, #13
    35a0:	4b1d      	ldr	r3, [pc, #116]	; (3618 <nm_spi_read_block+0x134>)
    35a2:	4798      	blx	r3
    35a4:	e7c4      	b.n	3530 <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    35a6:	465b      	mov	r3, fp
    35a8:	2b00      	cmp	r3, #0
    35aa:	d016      	beq.n	35da <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    35ac:	af05      	add	r7, sp, #20
    35ae:	0022      	movs	r2, r4
    35b0:	0031      	movs	r1, r6
    35b2:	0038      	movs	r0, r7
    35b4:	4b1e      	ldr	r3, [pc, #120]	; (3630 <nm_spi_read_block+0x14c>)
    35b6:	4798      	blx	r3
		buf[0] = tmp[0];
    35b8:	783b      	ldrb	r3, [r7, #0]
    35ba:	9a03      	ldr	r2, [sp, #12]
    35bc:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    35be:	2801      	cmp	r0, #1
    35c0:	d011      	beq.n	35e6 <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    35c2:	4a1c      	ldr	r2, [pc, #112]	; (3634 <nm_spi_read_block+0x150>)
    35c4:	4910      	ldr	r1, [pc, #64]	; (3608 <nm_spi_read_block+0x124>)
    35c6:	4811      	ldr	r0, [pc, #68]	; (360c <nm_spi_read_block+0x128>)
    35c8:	4b11      	ldr	r3, [pc, #68]	; (3610 <nm_spi_read_block+0x12c>)
    35ca:	4798      	blx	r3
    35cc:	481a      	ldr	r0, [pc, #104]	; (3638 <nm_spi_read_block+0x154>)
    35ce:	4b1b      	ldr	r3, [pc, #108]	; (363c <nm_spi_read_block+0x158>)
    35d0:	4798      	blx	r3
    35d2:	200d      	movs	r0, #13
    35d4:	4b10      	ldr	r3, [pc, #64]	; (3618 <nm_spi_read_block+0x134>)
    35d6:	4798      	blx	r3
    35d8:	e7aa      	b.n	3530 <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    35da:	0022      	movs	r2, r4
    35dc:	0031      	movs	r1, r6
    35de:	9803      	ldr	r0, [sp, #12]
    35e0:	4b13      	ldr	r3, [pc, #76]	; (3630 <nm_spi_read_block+0x14c>)
    35e2:	4798      	blx	r3
    35e4:	e7eb      	b.n	35be <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    35e6:	2000      	movs	r0, #0
    35e8:	e001      	b.n	35ee <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    35ea:	2006      	movs	r0, #6
    35ec:	4240      	negs	r0, r0

	return s8Ret;
}
    35ee:	b007      	add	sp, #28
    35f0:	bc3c      	pop	{r2, r3, r4, r5}
    35f2:	4690      	mov	r8, r2
    35f4:	4699      	mov	r9, r3
    35f6:	46a2      	mov	sl, r4
    35f8:	46ab      	mov	fp, r5
    35fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35fc:	00002d09 	.word	0x00002d09
    3600:	00002ea9 	.word	0x00002ea9
    3604:	00000463 	.word	0x00000463
    3608:	0000b5bc 	.word	0x0000b5bc
    360c:	0000ae84 	.word	0x0000ae84
    3610:	00009995 	.word	0x00009995
    3614:	0000b7d8 	.word	0x0000b7d8
    3618:	000099c9 	.word	0x000099c9
    361c:	00001159 	.word	0x00001159
    3620:	00000484 	.word	0x00000484
    3624:	0000b838 	.word	0x0000b838
    3628:	0000045d 	.word	0x0000045d
    362c:	0000b7a8 	.word	0x0000b7a8
    3630:	00002f7d 	.word	0x00002f7d
    3634:	00000473 	.word	0x00000473
    3638:	0000b810 	.word	0x0000b810
    363c:	00009ab1 	.word	0x00009ab1

00003640 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    3640:	b5f0      	push	{r4, r5, r6, r7, lr}
    3642:	46de      	mov	lr, fp
    3644:	4647      	mov	r7, r8
    3646:	b580      	push	{r7, lr}
    3648:	b089      	sub	sp, #36	; 0x24
    364a:	9004      	str	r0, [sp, #16]
    364c:	468b      	mov	fp, r1
    364e:	9203      	str	r2, [sp, #12]
    3650:	260a      	movs	r6, #10
    3652:	2780      	movs	r7, #128	; 0x80
    3654:	01bf      	lsls	r7, r7, #6
    3656:	466b      	mov	r3, sp
    3658:	82df      	strh	r7, [r3, #22]
    365a:	0035      	movs	r5, r6
    365c:	e02d      	b.n	36ba <nm_spi_write_block+0x7a>
		size = 2;
    365e:	3301      	adds	r3, #1
    3660:	9303      	str	r3, [sp, #12]
    3662:	e02d      	b.n	36c0 <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    3664:	4a83      	ldr	r2, [pc, #524]	; (3874 <nm_spi_write_block+0x234>)
    3666:	4984      	ldr	r1, [pc, #528]	; (3878 <nm_spi_write_block+0x238>)
    3668:	4884      	ldr	r0, [pc, #528]	; (387c <nm_spi_write_block+0x23c>)
    366a:	4c85      	ldr	r4, [pc, #532]	; (3880 <nm_spi_write_block+0x240>)
    366c:	47a0      	blx	r4
    366e:	0031      	movs	r1, r6
    3670:	4884      	ldr	r0, [pc, #528]	; (3884 <nm_spi_write_block+0x244>)
    3672:	47a0      	blx	r4
    3674:	200d      	movs	r0, #13
    3676:	4b84      	ldr	r3, [pc, #528]	; (3888 <nm_spi_write_block+0x248>)
    3678:	4798      	blx	r3
		nm_bsp_sleep(1);
    367a:	2001      	movs	r0, #1
    367c:	4c83      	ldr	r4, [pc, #524]	; (388c <nm_spi_write_block+0x24c>)
    367e:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3680:	2300      	movs	r3, #0
    3682:	9300      	str	r3, [sp, #0]
    3684:	2200      	movs	r2, #0
    3686:	2100      	movs	r1, #0
    3688:	20cf      	movs	r0, #207	; 0xcf
    368a:	4e81      	ldr	r6, [pc, #516]	; (3890 <nm_spi_write_block+0x250>)
    368c:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    368e:	20cf      	movs	r0, #207	; 0xcf
    3690:	4b80      	ldr	r3, [pc, #512]	; (3894 <nm_spi_write_block+0x254>)
    3692:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    3694:	4a80      	ldr	r2, [pc, #512]	; (3898 <nm_spi_write_block+0x258>)
    3696:	4978      	ldr	r1, [pc, #480]	; (3878 <nm_spi_write_block+0x238>)
    3698:	4878      	ldr	r0, [pc, #480]	; (387c <nm_spi_write_block+0x23c>)
    369a:	4e79      	ldr	r6, [pc, #484]	; (3880 <nm_spi_write_block+0x240>)
    369c:	47b0      	blx	r6
    369e:	9b03      	ldr	r3, [sp, #12]
    36a0:	9a04      	ldr	r2, [sp, #16]
    36a2:	0029      	movs	r1, r5
    36a4:	487d      	ldr	r0, [pc, #500]	; (389c <nm_spi_write_block+0x25c>)
    36a6:	47b0      	blx	r6
    36a8:	200d      	movs	r0, #13
    36aa:	4b77      	ldr	r3, [pc, #476]	; (3888 <nm_spi_write_block+0x248>)
    36ac:	4798      	blx	r3
		nm_bsp_sleep(1);
    36ae:	2001      	movs	r0, #1
    36b0:	47a0      	blx	r4
    36b2:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    36b4:	2d00      	cmp	r5, #0
    36b6:	d100      	bne.n	36ba <nm_spi_write_block+0x7a>
    36b8:	e0d5      	b.n	3866 <nm_spi_write_block+0x226>
	if (size == 1)
    36ba:	9b03      	ldr	r3, [sp, #12]
    36bc:	2b01      	cmp	r3, #1
    36be:	d0ce      	beq.n	365e <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    36c0:	2300      	movs	r3, #0
    36c2:	9300      	str	r3, [sp, #0]
    36c4:	9b03      	ldr	r3, [sp, #12]
    36c6:	2200      	movs	r2, #0
    36c8:	9e04      	ldr	r6, [sp, #16]
    36ca:	0031      	movs	r1, r6
    36cc:	20c7      	movs	r0, #199	; 0xc7
    36ce:	4c70      	ldr	r4, [pc, #448]	; (3890 <nm_spi_write_block+0x250>)
    36d0:	47a0      	blx	r4
	if (result != N_OK) {
    36d2:	2801      	cmp	r0, #1
    36d4:	d1c6      	bne.n	3664 <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    36d6:	20c7      	movs	r0, #199	; 0xc7
    36d8:	4b6e      	ldr	r3, [pc, #440]	; (3894 <nm_spi_write_block+0x254>)
    36da:	4798      	blx	r3
	if (result != N_OK) {
    36dc:	2801      	cmp	r0, #1
    36de:	d00c      	beq.n	36fa <nm_spi_write_block+0xba>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    36e0:	22f4      	movs	r2, #244	; 0xf4
    36e2:	0092      	lsls	r2, r2, #2
    36e4:	4964      	ldr	r1, [pc, #400]	; (3878 <nm_spi_write_block+0x238>)
    36e6:	4865      	ldr	r0, [pc, #404]	; (387c <nm_spi_write_block+0x23c>)
    36e8:	4c65      	ldr	r4, [pc, #404]	; (3880 <nm_spi_write_block+0x240>)
    36ea:	47a0      	blx	r4
    36ec:	9904      	ldr	r1, [sp, #16]
    36ee:	486c      	ldr	r0, [pc, #432]	; (38a0 <nm_spi_write_block+0x260>)
    36f0:	47a0      	blx	r4
    36f2:	200d      	movs	r0, #13
    36f4:	4b64      	ldr	r3, [pc, #400]	; (3888 <nm_spi_write_block+0x248>)
    36f6:	4798      	blx	r3
    36f8:	e7bf      	b.n	367a <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    36fa:	2200      	movs	r2, #0
    36fc:	ab07      	add	r3, sp, #28
    36fe:	801a      	strh	r2, [r3, #0]
    3700:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    3702:	2600      	movs	r6, #0
				order = 0x1;
    3704:	46a8      	mov	r8, r5
    3706:	0035      	movs	r5, r6
    3708:	0026      	movs	r6, r4
    370a:	e021      	b.n	3750 <nm_spi_write_block+0x110>
				order = 0x2;
    370c:	2300      	movs	r3, #0
    370e:	42b7      	cmp	r7, r6
    3710:	415b      	adcs	r3, r3
    3712:	3302      	adds	r3, #2
		cmd |= order;
    3714:	200b      	movs	r0, #11
    3716:	aa04      	add	r2, sp, #16
    3718:	4694      	mov	ip, r2
    371a:	4460      	add	r0, ip
    371c:	2210      	movs	r2, #16
    371e:	4252      	negs	r2, r2
    3720:	4313      	orrs	r3, r2
    3722:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    3724:	2101      	movs	r1, #1
    3726:	4b5f      	ldr	r3, [pc, #380]	; (38a4 <nm_spi_write_block+0x264>)
    3728:	4798      	blx	r3
    372a:	2800      	cmp	r0, #0
    372c:	d11d      	bne.n	376a <nm_spi_write_block+0x12a>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    372e:	465b      	mov	r3, fp
    3730:	1958      	adds	r0, r3, r5
    3732:	0021      	movs	r1, r4
    3734:	4b5b      	ldr	r3, [pc, #364]	; (38a4 <nm_spi_write_block+0x264>)
    3736:	4798      	blx	r3
    3738:	2800      	cmp	r0, #0
    373a:	d130      	bne.n	379e <nm_spi_write_block+0x15e>
		if (!gu8Crc_off) {
    373c:	4b5a      	ldr	r3, [pc, #360]	; (38a8 <nm_spi_write_block+0x268>)
    373e:	781b      	ldrb	r3, [r3, #0]
    3740:	2b00      	cmp	r3, #0
    3742:	d039      	beq.n	37b8 <nm_spi_write_block+0x178>
		ix += nbytes;
    3744:	1965      	adds	r5, r4, r5
    3746:	b22d      	sxth	r5, r5
		sz -= nbytes;
    3748:	1b36      	subs	r6, r6, r4
    374a:	b2b6      	uxth	r6, r6
	} while (sz);
    374c:	2e00      	cmp	r6, #0
    374e:	d053      	beq.n	37f8 <nm_spi_write_block+0x1b8>
    3750:	1c34      	adds	r4, r6, #0
    3752:	42be      	cmp	r6, r7
    3754:	d901      	bls.n	375a <nm_spi_write_block+0x11a>
    3756:	466b      	mov	r3, sp
    3758:	8adc      	ldrh	r4, [r3, #22]
    375a:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    375c:	2d00      	cmp	r5, #0
    375e:	d1d5      	bne.n	370c <nm_spi_write_block+0xcc>
				order = 0x3;
    3760:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    3762:	42be      	cmp	r6, r7
    3764:	d9d6      	bls.n	3714 <nm_spi_write_block+0xd4>
				order = 0x1;
    3766:	3b02      	subs	r3, #2
    3768:	e7d4      	b.n	3714 <nm_spi_write_block+0xd4>
    376a:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    376c:	22d4      	movs	r2, #212	; 0xd4
    376e:	0092      	lsls	r2, r2, #2
    3770:	494e      	ldr	r1, [pc, #312]	; (38ac <nm_spi_write_block+0x26c>)
    3772:	4842      	ldr	r0, [pc, #264]	; (387c <nm_spi_write_block+0x23c>)
    3774:	4b42      	ldr	r3, [pc, #264]	; (3880 <nm_spi_write_block+0x240>)
    3776:	4798      	blx	r3
    3778:	484d      	ldr	r0, [pc, #308]	; (38b0 <nm_spi_write_block+0x270>)
    377a:	4b4e      	ldr	r3, [pc, #312]	; (38b4 <nm_spi_write_block+0x274>)
    377c:	4798      	blx	r3
    377e:	200d      	movs	r0, #13
    3780:	4b41      	ldr	r3, [pc, #260]	; (3888 <nm_spi_write_block+0x248>)
    3782:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    3784:	22f8      	movs	r2, #248	; 0xf8
    3786:	0092      	lsls	r2, r2, #2
    3788:	493b      	ldr	r1, [pc, #236]	; (3878 <nm_spi_write_block+0x238>)
    378a:	483c      	ldr	r0, [pc, #240]	; (387c <nm_spi_write_block+0x23c>)
    378c:	4b3c      	ldr	r3, [pc, #240]	; (3880 <nm_spi_write_block+0x240>)
    378e:	4798      	blx	r3
    3790:	4849      	ldr	r0, [pc, #292]	; (38b8 <nm_spi_write_block+0x278>)
    3792:	4b48      	ldr	r3, [pc, #288]	; (38b4 <nm_spi_write_block+0x274>)
    3794:	4798      	blx	r3
    3796:	200d      	movs	r0, #13
    3798:	4b3b      	ldr	r3, [pc, #236]	; (3888 <nm_spi_write_block+0x248>)
    379a:	4798      	blx	r3
    379c:	e76d      	b.n	367a <nm_spi_write_block+0x3a>
    379e:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    37a0:	4a46      	ldr	r2, [pc, #280]	; (38bc <nm_spi_write_block+0x27c>)
    37a2:	4942      	ldr	r1, [pc, #264]	; (38ac <nm_spi_write_block+0x26c>)
    37a4:	4835      	ldr	r0, [pc, #212]	; (387c <nm_spi_write_block+0x23c>)
    37a6:	4b36      	ldr	r3, [pc, #216]	; (3880 <nm_spi_write_block+0x240>)
    37a8:	4798      	blx	r3
    37aa:	4845      	ldr	r0, [pc, #276]	; (38c0 <nm_spi_write_block+0x280>)
    37ac:	4b41      	ldr	r3, [pc, #260]	; (38b4 <nm_spi_write_block+0x274>)
    37ae:	4798      	blx	r3
    37b0:	200d      	movs	r0, #13
    37b2:	4b35      	ldr	r3, [pc, #212]	; (3888 <nm_spi_write_block+0x248>)
    37b4:	4798      	blx	r3
    37b6:	e7e5      	b.n	3784 <nm_spi_write_block+0x144>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    37b8:	2102      	movs	r1, #2
    37ba:	a807      	add	r0, sp, #28
    37bc:	4b39      	ldr	r3, [pc, #228]	; (38a4 <nm_spi_write_block+0x264>)
    37be:	4798      	blx	r3
    37c0:	2800      	cmp	r0, #0
    37c2:	d0bf      	beq.n	3744 <nm_spi_write_block+0x104>
    37c4:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    37c6:	4a3f      	ldr	r2, [pc, #252]	; (38c4 <nm_spi_write_block+0x284>)
    37c8:	4938      	ldr	r1, [pc, #224]	; (38ac <nm_spi_write_block+0x26c>)
    37ca:	482c      	ldr	r0, [pc, #176]	; (387c <nm_spi_write_block+0x23c>)
    37cc:	4b2c      	ldr	r3, [pc, #176]	; (3880 <nm_spi_write_block+0x240>)
    37ce:	4798      	blx	r3
    37d0:	483d      	ldr	r0, [pc, #244]	; (38c8 <nm_spi_write_block+0x288>)
    37d2:	4b38      	ldr	r3, [pc, #224]	; (38b4 <nm_spi_write_block+0x274>)
    37d4:	4798      	blx	r3
    37d6:	200d      	movs	r0, #13
    37d8:	4b2b      	ldr	r3, [pc, #172]	; (3888 <nm_spi_write_block+0x248>)
    37da:	4798      	blx	r3
    37dc:	e7d2      	b.n	3784 <nm_spi_write_block+0x144>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    37de:	223c      	movs	r2, #60	; 0x3c
    37e0:	32ff      	adds	r2, #255	; 0xff
    37e2:	493a      	ldr	r1, [pc, #232]	; (38cc <nm_spi_write_block+0x28c>)
    37e4:	4825      	ldr	r0, [pc, #148]	; (387c <nm_spi_write_block+0x23c>)
    37e6:	4b26      	ldr	r3, [pc, #152]	; (3880 <nm_spi_write_block+0x240>)
    37e8:	4798      	blx	r3
    37ea:	4839      	ldr	r0, [pc, #228]	; (38d0 <nm_spi_write_block+0x290>)
    37ec:	4b31      	ldr	r3, [pc, #196]	; (38b4 <nm_spi_write_block+0x274>)
    37ee:	4798      	blx	r3
    37f0:	200d      	movs	r0, #13
    37f2:	4b25      	ldr	r3, [pc, #148]	; (3888 <nm_spi_write_block+0x248>)
    37f4:	4798      	blx	r3
    37f6:	e027      	b.n	3848 <nm_spi_write_block+0x208>
    37f8:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    37fa:	4b2b      	ldr	r3, [pc, #172]	; (38a8 <nm_spi_write_block+0x268>)
    37fc:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    37fe:	1e63      	subs	r3, r4, #1
    3800:	419c      	sbcs	r4, r3
    3802:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    3804:	b2a1      	uxth	r1, r4
    3806:	a807      	add	r0, sp, #28
    3808:	4b32      	ldr	r3, [pc, #200]	; (38d4 <nm_spi_write_block+0x294>)
    380a:	4798      	blx	r3
    380c:	2800      	cmp	r0, #0
    380e:	d1e6      	bne.n	37de <nm_spi_write_block+0x19e>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    3810:	ab08      	add	r3, sp, #32
    3812:	191b      	adds	r3, r3, r4
    3814:	3b05      	subs	r3, #5
    3816:	781b      	ldrb	r3, [r3, #0]
    3818:	2b00      	cmp	r3, #0
    381a:	d106      	bne.n	382a <nm_spi_write_block+0x1ea>
    381c:	ab08      	add	r3, sp, #32
    381e:	469c      	mov	ip, r3
    3820:	4464      	add	r4, ip
    3822:	3c06      	subs	r4, #6
    3824:	7823      	ldrb	r3, [r4, #0]
    3826:	2bc3      	cmp	r3, #195	; 0xc3
    3828:	d01b      	beq.n	3862 <nm_spi_write_block+0x222>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    382a:	22a1      	movs	r2, #161	; 0xa1
    382c:	0052      	lsls	r2, r2, #1
    382e:	4927      	ldr	r1, [pc, #156]	; (38cc <nm_spi_write_block+0x28c>)
    3830:	4812      	ldr	r0, [pc, #72]	; (387c <nm_spi_write_block+0x23c>)
    3832:	4c13      	ldr	r4, [pc, #76]	; (3880 <nm_spi_write_block+0x240>)
    3834:	47a0      	blx	r4
    3836:	a907      	add	r1, sp, #28
    3838:	788b      	ldrb	r3, [r1, #2]
    383a:	784a      	ldrb	r2, [r1, #1]
    383c:	7809      	ldrb	r1, [r1, #0]
    383e:	4826      	ldr	r0, [pc, #152]	; (38d8 <nm_spi_write_block+0x298>)
    3840:	47a0      	blx	r4
    3842:	200d      	movs	r0, #13
    3844:	4b10      	ldr	r3, [pc, #64]	; (3888 <nm_spi_write_block+0x248>)
    3846:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    3848:	22fa      	movs	r2, #250	; 0xfa
    384a:	0092      	lsls	r2, r2, #2
    384c:	490a      	ldr	r1, [pc, #40]	; (3878 <nm_spi_write_block+0x238>)
    384e:	480b      	ldr	r0, [pc, #44]	; (387c <nm_spi_write_block+0x23c>)
    3850:	4b0b      	ldr	r3, [pc, #44]	; (3880 <nm_spi_write_block+0x240>)
    3852:	4798      	blx	r3
    3854:	4818      	ldr	r0, [pc, #96]	; (38b8 <nm_spi_write_block+0x278>)
    3856:	4b17      	ldr	r3, [pc, #92]	; (38b4 <nm_spi_write_block+0x274>)
    3858:	4798      	blx	r3
    385a:	200d      	movs	r0, #13
    385c:	4b0a      	ldr	r3, [pc, #40]	; (3888 <nm_spi_write_block+0x248>)
    385e:	4798      	blx	r3
    3860:	e70b      	b.n	367a <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    3862:	2000      	movs	r0, #0
    3864:	e001      	b.n	386a <nm_spi_write_block+0x22a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    3866:	2006      	movs	r0, #6
    3868:	4240      	negs	r0, r0

	return s8Ret;
}
    386a:	b009      	add	sp, #36	; 0x24
    386c:	bc0c      	pop	{r2, r3}
    386e:	4690      	mov	r8, r2
    3870:	469b      	mov	fp, r3
    3872:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3874:	000003ca 	.word	0x000003ca
    3878:	0000b59c 	.word	0x0000b59c
    387c:	0000ae84 	.word	0x0000ae84
    3880:	00009995 	.word	0x00009995
    3884:	0000b854 	.word	0x0000b854
    3888:	000099c9 	.word	0x000099c9
    388c:	00001159 	.word	0x00001159
    3890:	00002d09 	.word	0x00002d09
    3894:	00002ea9 	.word	0x00002ea9
    3898:	000003f2 	.word	0x000003f2
    389c:	0000b838 	.word	0x0000b838
    38a0:	0000b884 	.word	0x0000b884
    38a4:	00002ce9 	.word	0x00002ce9
    38a8:	200000e4 	.word	0x200000e4
    38ac:	0000b57c 	.word	0x0000b57c
    38b0:	0000b8bc 	.word	0x0000b8bc
    38b4:	00009ab1 	.word	0x00009ab1
    38b8:	0000b9b0 	.word	0x0000b9b0
    38bc:	00000359 	.word	0x00000359
    38c0:	0000b8f4 	.word	0x0000b8f4
    38c4:	00000363 	.word	0x00000363
    38c8:	0000b928 	.word	0x0000b928
    38cc:	0000b550 	.word	0x0000b550
    38d0:	0000b960 	.word	0x0000b960
    38d4:	00002e89 	.word	0x00002e89
    38d8:	0000b980 	.word	0x0000b980

000038dc <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    38dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    38de:	46de      	mov	lr, fp
    38e0:	4657      	mov	r7, sl
    38e2:	464e      	mov	r6, r9
    38e4:	4645      	mov	r5, r8
    38e6:	b5e0      	push	{r5, r6, r7, lr}
    38e8:	b085      	sub	sp, #20
    38ea:	9001      	str	r0, [sp, #4]
    38ec:	000e      	movs	r6, r1
    38ee:	9202      	str	r2, [sp, #8]
    38f0:	001d      	movs	r5, r3
    38f2:	ab0e      	add	r3, sp, #56	; 0x38
    38f4:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    38f6:	2c00      	cmp	r4, #0
    38f8:	d064      	beq.n	39c4 <Socket_ReadSocketData+0xe8>
    38fa:	0103      	lsls	r3, r0, #4
    38fc:	4935      	ldr	r1, [pc, #212]	; (39d4 <Socket_ReadSocketData+0xf8>)
    38fe:	585b      	ldr	r3, [r3, r1]
    3900:	2b00      	cmp	r3, #0
    3902:	d05f      	beq.n	39c4 <Socket_ReadSocketData+0xe8>
    3904:	0101      	lsls	r1, r0, #4
    3906:	4b33      	ldr	r3, [pc, #204]	; (39d4 <Socket_ReadSocketData+0xf8>)
    3908:	185b      	adds	r3, r3, r1
    390a:	889b      	ldrh	r3, [r3, #4]
    390c:	b29b      	uxth	r3, r3
    390e:	2b00      	cmp	r3, #0
    3910:	d058      	beq.n	39c4 <Socket_ReadSocketData+0xe8>
    3912:	4b30      	ldr	r3, [pc, #192]	; (39d4 <Socket_ReadSocketData+0xf8>)
    3914:	185b      	adds	r3, r3, r1
    3916:	7a9b      	ldrb	r3, [r3, #10]
    3918:	2b01      	cmp	r3, #1
    391a:	d153      	bne.n	39c4 <Socket_ReadSocketData+0xe8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    391c:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    391e:	4b2d      	ldr	r3, [pc, #180]	; (39d4 <Socket_ReadSocketData+0xf8>)
    3920:	469b      	mov	fp, r3
    3922:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    3924:	465b      	mov	r3, fp
    3926:	220a      	movs	r2, #10
    3928:	4690      	mov	r8, r2
    392a:	44d8      	add	r8, fp
    392c:	468a      	mov	sl, r1
    392e:	9500      	str	r5, [sp, #0]
    3930:	9303      	str	r3, [sp, #12]
    3932:	e015      	b.n	3960 <Socket_ReadSocketData+0x84>
    3934:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    3936:	2301      	movs	r3, #1
    3938:	e01c      	b.n	3974 <Socket_ReadSocketData+0x98>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    393a:	3301      	adds	r3, #1
    393c:	2200      	movs	r2, #0
    393e:	2100      	movs	r1, #0
    3940:	2000      	movs	r0, #0
    3942:	4c25      	ldr	r4, [pc, #148]	; (39d8 <Socket_ReadSocketData+0xfc>)
    3944:	47a0      	blx	r4
    3946:	e03d      	b.n	39c4 <Socket_ReadSocketData+0xe8>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    3948:	4824      	ldr	r0, [pc, #144]	; (39dc <Socket_ReadSocketData+0x100>)
    394a:	4d25      	ldr	r5, [pc, #148]	; (39e0 <Socket_ReadSocketData+0x104>)
    394c:	47a8      	blx	r5
    394e:	0021      	movs	r1, r4
    3950:	4824      	ldr	r0, [pc, #144]	; (39e4 <Socket_ReadSocketData+0x108>)
    3952:	47a8      	blx	r5
    3954:	200d      	movs	r0, #13
    3956:	4b24      	ldr	r3, [pc, #144]	; (39e8 <Socket_ReadSocketData+0x10c>)
    3958:	4798      	blx	r3
				break;
    395a:	e033      	b.n	39c4 <Socket_ReadSocketData+0xe8>
			}
		}while(u16ReadCount != 0);
    395c:	2c00      	cmp	r4, #0
    395e:	d031      	beq.n	39c4 <Socket_ReadSocketData+0xe8>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    3960:	465b      	mov	r3, fp
    3962:	889b      	ldrh	r3, [r3, #4]
    3964:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    3966:	b21b      	sxth	r3, r3
    3968:	2b00      	cmp	r3, #0
    396a:	dde3      	ble.n	3934 <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    396c:	9b03      	ldr	r3, [sp, #12]
    396e:	889d      	ldrh	r5, [r3, #4]
    3970:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    3972:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    3974:	4a17      	ldr	r2, [pc, #92]	; (39d4 <Socket_ReadSocketData+0xf8>)
    3976:	4651      	mov	r1, sl
    3978:	5889      	ldr	r1, [r1, r2]
    397a:	002a      	movs	r2, r5
    397c:	9800      	ldr	r0, [sp, #0]
    397e:	4f16      	ldr	r7, [pc, #88]	; (39d8 <Socket_ReadSocketData+0xfc>)
    3980:	47b8      	blx	r7
    3982:	2800      	cmp	r0, #0
    3984:	d1e0      	bne.n	3948 <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    3986:	4b13      	ldr	r3, [pc, #76]	; (39d4 <Socket_ReadSocketData+0xf8>)
    3988:	4652      	mov	r2, sl
    398a:	58d3      	ldr	r3, [r2, r3]
    398c:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    398e:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    3990:	88f3      	ldrh	r3, [r6, #6]
    3992:	1b5b      	subs	r3, r3, r5
    3994:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    3996:	4b15      	ldr	r3, [pc, #84]	; (39ec <Socket_ReadSocketData+0x110>)
    3998:	681b      	ldr	r3, [r3, #0]
    399a:	2b00      	cmp	r3, #0
    399c:	d005      	beq.n	39aa <Socket_ReadSocketData+0xce>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    399e:	4b13      	ldr	r3, [pc, #76]	; (39ec <Socket_ReadSocketData+0x110>)
    39a0:	681b      	ldr	r3, [r3, #0]
    39a2:	0032      	movs	r2, r6
    39a4:	9902      	ldr	r1, [sp, #8]
    39a6:	9801      	ldr	r0, [sp, #4]
    39a8:	4798      	blx	r3
				u16ReadCount -= u16Read;
    39aa:	1b64      	subs	r4, r4, r5
    39ac:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    39ae:	9b00      	ldr	r3, [sp, #0]
    39b0:	469c      	mov	ip, r3
    39b2:	44ac      	add	ip, r5
    39b4:	4663      	mov	r3, ip
    39b6:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    39b8:	4643      	mov	r3, r8
    39ba:	781b      	ldrb	r3, [r3, #0]
    39bc:	2b00      	cmp	r3, #0
    39be:	d1cd      	bne.n	395c <Socket_ReadSocketData+0x80>
    39c0:	2c00      	cmp	r4, #0
    39c2:	d1ba      	bne.n	393a <Socket_ReadSocketData+0x5e>
	}
}
    39c4:	b005      	add	sp, #20
    39c6:	bc3c      	pop	{r2, r3, r4, r5}
    39c8:	4690      	mov	r8, r2
    39ca:	4699      	mov	r9, r3
    39cc:	46a2      	mov	sl, r4
    39ce:	46ab      	mov	fp, r5
    39d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39d2:	46c0      	nop			; (mov r8, r8)
    39d4:	200002ec 	.word	0x200002ec
    39d8:	00001c7d 	.word	0x00001c7d
    39dc:	0000b1b4 	.word	0x0000b1b4
    39e0:	00009995 	.word	0x00009995
    39e4:	0000bc18 	.word	0x0000bc18
    39e8:	000099c9 	.word	0x000099c9
    39ec:	2000039c 	.word	0x2000039c

000039f0 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    39f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    39f2:	46d6      	mov	lr, sl
    39f4:	464f      	mov	r7, r9
    39f6:	4646      	mov	r6, r8
    39f8:	b5c0      	push	{r6, r7, lr}
    39fa:	b09a      	sub	sp, #104	; 0x68
    39fc:	000d      	movs	r5, r1
    39fe:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    3a00:	2841      	cmp	r0, #65	; 0x41
    3a02:	d039      	beq.n	3a78 <m2m_ip_cb+0x88>
    3a04:	2854      	cmp	r0, #84	; 0x54
    3a06:	d037      	beq.n	3a78 <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    3a08:	2842      	cmp	r0, #66	; 0x42
    3a0a:	d053      	beq.n	3ab4 <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    3a0c:	2843      	cmp	r0, #67	; 0x43
    3a0e:	d06a      	beq.n	3ae6 <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    3a10:	2844      	cmp	r0, #68	; 0x44
    3a12:	d100      	bne.n	3a16 <m2m_ip_cb+0x26>
    3a14:	e0af      	b.n	3b76 <m2m_ip_cb+0x186>
    3a16:	284b      	cmp	r0, #75	; 0x4b
    3a18:	d100      	bne.n	3a1c <m2m_ip_cb+0x2c>
    3a1a:	e0ac      	b.n	3b76 <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    3a1c:	284a      	cmp	r0, #74	; 0x4a
    3a1e:	d100      	bne.n	3a22 <m2m_ip_cb+0x32>
    3a20:	e0cf      	b.n	3bc2 <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    3a22:	2846      	cmp	r0, #70	; 0x46
    3a24:	d100      	bne.n	3a28 <m2m_ip_cb+0x38>
    3a26:	e0e5      	b.n	3bf4 <m2m_ip_cb+0x204>
    3a28:	2848      	cmp	r0, #72	; 0x48
    3a2a:	d100      	bne.n	3a2e <m2m_ip_cb+0x3e>
    3a2c:	e10e      	b.n	3c4c <m2m_ip_cb+0x25c>
    3a2e:	284d      	cmp	r0, #77	; 0x4d
    3a30:	d100      	bne.n	3a34 <m2m_ip_cb+0x44>
    3a32:	e0dc      	b.n	3bee <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    3a34:	2845      	cmp	r0, #69	; 0x45
    3a36:	d100      	bne.n	3a3a <m2m_ip_cb+0x4a>
    3a38:	e12c      	b.n	3c94 <m2m_ip_cb+0x2a4>
    3a3a:	2847      	cmp	r0, #71	; 0x47
    3a3c:	d100      	bne.n	3a40 <m2m_ip_cb+0x50>
    3a3e:	e14d      	b.n	3cdc <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    3a40:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    3a42:	284c      	cmp	r0, #76	; 0x4c
    3a44:	d100      	bne.n	3a48 <m2m_ip_cb+0x58>
    3a46:	e126      	b.n	3c96 <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    3a48:	2852      	cmp	r0, #82	; 0x52
    3a4a:	d12d      	bne.n	3aa8 <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    3a4c:	2301      	movs	r3, #1
    3a4e:	2214      	movs	r2, #20
    3a50:	a909      	add	r1, sp, #36	; 0x24
    3a52:	0020      	movs	r0, r4
    3a54:	4ca2      	ldr	r4, [pc, #648]	; (3ce0 <m2m_ip_cb+0x2f0>)
    3a56:	47a0      	blx	r4
    3a58:	2800      	cmp	r0, #0
    3a5a:	d125      	bne.n	3aa8 <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    3a5c:	4ba1      	ldr	r3, [pc, #644]	; (3ce4 <m2m_ip_cb+0x2f4>)
    3a5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3a60:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    3a62:	681b      	ldr	r3, [r3, #0]
    3a64:	2b00      	cmp	r3, #0
    3a66:	d01f      	beq.n	3aa8 <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    3a68:	4b9e      	ldr	r3, [pc, #632]	; (3ce4 <m2m_ip_cb+0x2f4>)
    3a6a:	681c      	ldr	r4, [r3, #0]
    3a6c:	ab09      	add	r3, sp, #36	; 0x24
    3a6e:	7c1a      	ldrb	r2, [r3, #16]
    3a70:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3a72:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a74:	47a0      	blx	r4
			}
		}
	}
}
    3a76:	e017      	b.n	3aa8 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    3a78:	2300      	movs	r3, #0
    3a7a:	2204      	movs	r2, #4
    3a7c:	a909      	add	r1, sp, #36	; 0x24
    3a7e:	0020      	movs	r0, r4
    3a80:	4c97      	ldr	r4, [pc, #604]	; (3ce0 <m2m_ip_cb+0x2f0>)
    3a82:	47a0      	blx	r4
    3a84:	2800      	cmp	r0, #0
    3a86:	d10f      	bne.n	3aa8 <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    3a88:	ab09      	add	r3, sp, #36	; 0x24
    3a8a:	785a      	ldrb	r2, [r3, #1]
    3a8c:	ab05      	add	r3, sp, #20
    3a8e:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    3a90:	4b95      	ldr	r3, [pc, #596]	; (3ce8 <m2m_ip_cb+0x2f8>)
    3a92:	681b      	ldr	r3, [r3, #0]
    3a94:	2b00      	cmp	r3, #0
    3a96:	d007      	beq.n	3aa8 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    3a98:	4b93      	ldr	r3, [pc, #588]	; (3ce8 <m2m_ip_cb+0x2f8>)
    3a9a:	681b      	ldr	r3, [r3, #0]
    3a9c:	aa09      	add	r2, sp, #36	; 0x24
    3a9e:	2000      	movs	r0, #0
    3aa0:	5610      	ldrsb	r0, [r2, r0]
    3aa2:	aa05      	add	r2, sp, #20
    3aa4:	2101      	movs	r1, #1
    3aa6:	4798      	blx	r3
}
    3aa8:	b01a      	add	sp, #104	; 0x68
    3aaa:	bc1c      	pop	{r2, r3, r4}
    3aac:	4690      	mov	r8, r2
    3aae:	4699      	mov	r9, r3
    3ab0:	46a2      	mov	sl, r4
    3ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    3ab4:	2300      	movs	r3, #0
    3ab6:	2204      	movs	r2, #4
    3ab8:	a909      	add	r1, sp, #36	; 0x24
    3aba:	0020      	movs	r0, r4
    3abc:	4c88      	ldr	r4, [pc, #544]	; (3ce0 <m2m_ip_cb+0x2f0>)
    3abe:	47a0      	blx	r4
    3ac0:	2800      	cmp	r0, #0
    3ac2:	d1f1      	bne.n	3aa8 <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    3ac4:	ab09      	add	r3, sp, #36	; 0x24
    3ac6:	785a      	ldrb	r2, [r3, #1]
    3ac8:	ab05      	add	r3, sp, #20
    3aca:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    3acc:	4b86      	ldr	r3, [pc, #536]	; (3ce8 <m2m_ip_cb+0x2f8>)
    3ace:	681b      	ldr	r3, [r3, #0]
    3ad0:	2b00      	cmp	r3, #0
    3ad2:	d0e9      	beq.n	3aa8 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    3ad4:	4b84      	ldr	r3, [pc, #528]	; (3ce8 <m2m_ip_cb+0x2f8>)
    3ad6:	681b      	ldr	r3, [r3, #0]
    3ad8:	aa09      	add	r2, sp, #36	; 0x24
    3ada:	2000      	movs	r0, #0
    3adc:	5610      	ldrsb	r0, [r2, r0]
    3ade:	aa05      	add	r2, sp, #20
    3ae0:	2102      	movs	r1, #2
    3ae2:	4798      	blx	r3
    3ae4:	e7e0      	b.n	3aa8 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    3ae6:	2300      	movs	r3, #0
    3ae8:	220c      	movs	r2, #12
    3aea:	a905      	add	r1, sp, #20
    3aec:	0020      	movs	r0, r4
    3aee:	4c7c      	ldr	r4, [pc, #496]	; (3ce0 <m2m_ip_cb+0x2f0>)
    3af0:	47a0      	blx	r4
    3af2:	2800      	cmp	r0, #0
    3af4:	d1d8      	bne.n	3aa8 <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    3af6:	ab05      	add	r3, sp, #20
    3af8:	2209      	movs	r2, #9
    3afa:	569a      	ldrsb	r2, [r3, r2]
    3afc:	2a00      	cmp	r2, #0
    3afe:	db24      	blt.n	3b4a <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    3b00:	0018      	movs	r0, r3
    3b02:	2108      	movs	r1, #8
    3b04:	5659      	ldrsb	r1, [r3, r1]
    3b06:	4b79      	ldr	r3, [pc, #484]	; (3cec <m2m_ip_cb+0x2fc>)
    3b08:	0109      	lsls	r1, r1, #4
    3b0a:	1859      	adds	r1, r3, r1
    3b0c:	7ac9      	ldrb	r1, [r1, #11]
    3b0e:	b2c9      	uxtb	r1, r1
    3b10:	0114      	lsls	r4, r2, #4
    3b12:	191b      	adds	r3, r3, r4
    3b14:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    3b16:	2101      	movs	r1, #1
    3b18:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    3b1a:	8941      	ldrh	r1, [r0, #10]
    3b1c:	3908      	subs	r1, #8
    3b1e:	b289      	uxth	r1, r1
    3b20:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    3b22:	4973      	ldr	r1, [pc, #460]	; (3cf0 <m2m_ip_cb+0x300>)
    3b24:	880b      	ldrh	r3, [r1, #0]
    3b26:	3301      	adds	r3, #1
    3b28:	b29b      	uxth	r3, r3
    3b2a:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    3b2c:	880b      	ldrh	r3, [r1, #0]
    3b2e:	b29b      	uxth	r3, r3
    3b30:	2b00      	cmp	r3, #0
    3b32:	d103      	bne.n	3b3c <m2m_ip_cb+0x14c>
					++gu16SessionID;
    3b34:	880b      	ldrh	r3, [r1, #0]
    3b36:	3301      	adds	r3, #1
    3b38:	b29b      	uxth	r3, r3
    3b3a:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    3b3c:	4b6c      	ldr	r3, [pc, #432]	; (3cf0 <m2m_ip_cb+0x300>)
    3b3e:	8819      	ldrh	r1, [r3, #0]
    3b40:	b289      	uxth	r1, r1
    3b42:	0110      	lsls	r0, r2, #4
    3b44:	4b69      	ldr	r3, [pc, #420]	; (3cec <m2m_ip_cb+0x2fc>)
    3b46:	181b      	adds	r3, r3, r0
    3b48:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    3b4a:	ab09      	add	r3, sp, #36	; 0x24
    3b4c:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    3b4e:	2202      	movs	r2, #2
    3b50:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    3b52:	aa05      	add	r2, sp, #20
    3b54:	8851      	ldrh	r1, [r2, #2]
    3b56:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    3b58:	9a06      	ldr	r2, [sp, #24]
    3b5a:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    3b5c:	4b62      	ldr	r3, [pc, #392]	; (3ce8 <m2m_ip_cb+0x2f8>)
    3b5e:	681b      	ldr	r3, [r3, #0]
    3b60:	2b00      	cmp	r3, #0
    3b62:	d0a1      	beq.n	3aa8 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    3b64:	4b60      	ldr	r3, [pc, #384]	; (3ce8 <m2m_ip_cb+0x2f8>)
    3b66:	681b      	ldr	r3, [r3, #0]
    3b68:	aa05      	add	r2, sp, #20
    3b6a:	2008      	movs	r0, #8
    3b6c:	5610      	ldrsb	r0, [r2, r0]
    3b6e:	aa09      	add	r2, sp, #36	; 0x24
    3b70:	2104      	movs	r1, #4
    3b72:	4798      	blx	r3
    3b74:	e798      	b.n	3aa8 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    3b76:	2300      	movs	r3, #0
    3b78:	2204      	movs	r2, #4
    3b7a:	a909      	add	r1, sp, #36	; 0x24
    3b7c:	0020      	movs	r0, r4
    3b7e:	4c58      	ldr	r4, [pc, #352]	; (3ce0 <m2m_ip_cb+0x2f0>)
    3b80:	47a0      	blx	r4
    3b82:	2800      	cmp	r0, #0
    3b84:	d000      	beq.n	3b88 <m2m_ip_cb+0x198>
    3b86:	e78f      	b.n	3aa8 <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    3b88:	ab09      	add	r3, sp, #36	; 0x24
    3b8a:	2000      	movs	r0, #0
    3b8c:	5618      	ldrsb	r0, [r3, r0]
    3b8e:	aa05      	add	r2, sp, #20
    3b90:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    3b92:	785b      	ldrb	r3, [r3, #1]
    3b94:	b25b      	sxtb	r3, r3
    3b96:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    3b98:	2b00      	cmp	r3, #0
    3b9a:	d107      	bne.n	3bac <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    3b9c:	ab09      	add	r3, sp, #36	; 0x24
    3b9e:	885b      	ldrh	r3, [r3, #2]
    3ba0:	3b08      	subs	r3, #8
    3ba2:	b29b      	uxth	r3, r3
    3ba4:	0101      	lsls	r1, r0, #4
    3ba6:	4a51      	ldr	r2, [pc, #324]	; (3cec <m2m_ip_cb+0x2fc>)
    3ba8:	1852      	adds	r2, r2, r1
    3baa:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    3bac:	4b4e      	ldr	r3, [pc, #312]	; (3ce8 <m2m_ip_cb+0x2f8>)
    3bae:	681b      	ldr	r3, [r3, #0]
    3bb0:	2b00      	cmp	r3, #0
    3bb2:	d100      	bne.n	3bb6 <m2m_ip_cb+0x1c6>
    3bb4:	e778      	b.n	3aa8 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    3bb6:	4b4c      	ldr	r3, [pc, #304]	; (3ce8 <m2m_ip_cb+0x2f8>)
    3bb8:	681b      	ldr	r3, [r3, #0]
    3bba:	aa05      	add	r2, sp, #20
    3bbc:	2105      	movs	r1, #5
    3bbe:	4798      	blx	r3
	{
    3bc0:	e772      	b.n	3aa8 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    3bc2:	2300      	movs	r3, #0
    3bc4:	2244      	movs	r2, #68	; 0x44
    3bc6:	a909      	add	r1, sp, #36	; 0x24
    3bc8:	0020      	movs	r0, r4
    3bca:	4c45      	ldr	r4, [pc, #276]	; (3ce0 <m2m_ip_cb+0x2f0>)
    3bcc:	47a0      	blx	r4
    3bce:	2800      	cmp	r0, #0
    3bd0:	d000      	beq.n	3bd4 <m2m_ip_cb+0x1e4>
    3bd2:	e769      	b.n	3aa8 <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    3bd4:	4b47      	ldr	r3, [pc, #284]	; (3cf4 <m2m_ip_cb+0x304>)
    3bd6:	681b      	ldr	r3, [r3, #0]
    3bd8:	2b00      	cmp	r3, #0
    3bda:	d100      	bne.n	3bde <m2m_ip_cb+0x1ee>
    3bdc:	e764      	b.n	3aa8 <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    3bde:	4b45      	ldr	r3, [pc, #276]	; (3cf4 <m2m_ip_cb+0x304>)
    3be0:	681b      	ldr	r3, [r3, #0]
    3be2:	9a19      	ldr	r2, [sp, #100]	; 0x64
    3be4:	9203      	str	r2, [sp, #12]
    3be6:	0011      	movs	r1, r2
    3be8:	a809      	add	r0, sp, #36	; 0x24
    3bea:	4798      	blx	r3
    3bec:	e75c      	b.n	3aa8 <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    3bee:	2306      	movs	r3, #6
    3bf0:	469a      	mov	sl, r3
    3bf2:	e001      	b.n	3bf8 <m2m_ip_cb+0x208>
    3bf4:	2306      	movs	r3, #6
    3bf6:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    3bf8:	2300      	movs	r3, #0
    3bfa:	2210      	movs	r2, #16
    3bfc:	a905      	add	r1, sp, #20
    3bfe:	0020      	movs	r0, r4
    3c00:	4f37      	ldr	r7, [pc, #220]	; (3ce0 <m2m_ip_cb+0x2f0>)
    3c02:	47b8      	blx	r7
    3c04:	2800      	cmp	r0, #0
    3c06:	d000      	beq.n	3c0a <m2m_ip_cb+0x21a>
    3c08:	e74e      	b.n	3aa8 <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    3c0a:	aa05      	add	r2, sp, #20
    3c0c:	200c      	movs	r0, #12
    3c0e:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    3c10:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    3c12:	0107      	lsls	r7, r0, #4
    3c14:	4935      	ldr	r1, [pc, #212]	; (3cec <m2m_ip_cb+0x2fc>)
    3c16:	19c9      	adds	r1, r1, r7
    3c18:	2700      	movs	r7, #0
    3c1a:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    3c1c:	2608      	movs	r6, #8
    3c1e:	5f97      	ldrsh	r7, [r2, r6]
    3c20:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    3c22:	8957      	ldrh	r7, [r2, #10]
    3c24:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    3c26:	af09      	add	r7, sp, #36	; 0x24
    3c28:	8856      	ldrh	r6, [r2, #2]
    3c2a:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    3c2c:	9a06      	ldr	r2, [sp, #24]
    3c2e:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    3c30:	88ca      	ldrh	r2, [r1, #6]
    3c32:	b292      	uxth	r2, r2
    3c34:	4293      	cmp	r3, r2
    3c36:	d00c      	beq.n	3c52 <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    3c38:	2d10      	cmp	r5, #16
    3c3a:	d800      	bhi.n	3c3e <m2m_ip_cb+0x24e>
    3c3c:	e734      	b.n	3aa8 <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    3c3e:	2301      	movs	r3, #1
    3c40:	2200      	movs	r2, #0
    3c42:	2100      	movs	r1, #0
    3c44:	2000      	movs	r0, #0
    3c46:	4c26      	ldr	r4, [pc, #152]	; (3ce0 <m2m_ip_cb+0x2f0>)
    3c48:	47a0      	blx	r4
	{
    3c4a:	e72d      	b.n	3aa8 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    3c4c:	2309      	movs	r3, #9
    3c4e:	469a      	mov	sl, r3
    3c50:	e7d2      	b.n	3bf8 <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    3c52:	4643      	mov	r3, r8
    3c54:	2b00      	cmp	r3, #0
    3c56:	dd01      	ble.n	3c5c <m2m_ip_cb+0x26c>
    3c58:	45a8      	cmp	r8, r5
    3c5a:	db0f      	blt.n	3c7c <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    3c5c:	ab09      	add	r3, sp, #36	; 0x24
    3c5e:	4642      	mov	r2, r8
    3c60:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    3c62:	2300      	movs	r3, #0
    3c64:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    3c66:	4b20      	ldr	r3, [pc, #128]	; (3ce8 <m2m_ip_cb+0x2f8>)
    3c68:	681b      	ldr	r3, [r3, #0]
    3c6a:	2b00      	cmp	r3, #0
    3c6c:	d100      	bne.n	3c70 <m2m_ip_cb+0x280>
    3c6e:	e71b      	b.n	3aa8 <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    3c70:	4b1d      	ldr	r3, [pc, #116]	; (3ce8 <m2m_ip_cb+0x2f8>)
    3c72:	681b      	ldr	r3, [r3, #0]
    3c74:	aa09      	add	r2, sp, #36	; 0x24
    3c76:	4651      	mov	r1, sl
    3c78:	4798      	blx	r3
    3c7a:	e715      	b.n	3aa8 <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    3c7c:	0023      	movs	r3, r4
    3c7e:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    3c80:	4642      	mov	r2, r8
    3c82:	4669      	mov	r1, sp
    3c84:	818a      	strh	r2, [r1, #12]
    3c86:	898a      	ldrh	r2, [r1, #12]
    3c88:	9200      	str	r2, [sp, #0]
    3c8a:	4652      	mov	r2, sl
    3c8c:	0039      	movs	r1, r7
    3c8e:	4c1a      	ldr	r4, [pc, #104]	; (3cf8 <m2m_ip_cb+0x308>)
    3c90:	47a0      	blx	r4
    3c92:	e709      	b.n	3aa8 <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    3c94:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    3c96:	2300      	movs	r3, #0
    3c98:	2208      	movs	r2, #8
    3c9a:	a909      	add	r1, sp, #36	; 0x24
    3c9c:	0020      	movs	r0, r4
    3c9e:	4c10      	ldr	r4, [pc, #64]	; (3ce0 <m2m_ip_cb+0x2f0>)
    3ca0:	47a0      	blx	r4
    3ca2:	2800      	cmp	r0, #0
    3ca4:	d000      	beq.n	3ca8 <m2m_ip_cb+0x2b8>
    3ca6:	e6ff      	b.n	3aa8 <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    3ca8:	ab09      	add	r3, sp, #36	; 0x24
    3caa:	2000      	movs	r0, #0
    3cac:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    3cae:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    3cb0:	8859      	ldrh	r1, [r3, #2]
    3cb2:	ab05      	add	r3, sp, #20
    3cb4:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    3cb6:	0101      	lsls	r1, r0, #4
    3cb8:	4b0c      	ldr	r3, [pc, #48]	; (3cec <m2m_ip_cb+0x2fc>)
    3cba:	185b      	adds	r3, r3, r1
    3cbc:	88db      	ldrh	r3, [r3, #6]
    3cbe:	b29b      	uxth	r3, r3
    3cc0:	429a      	cmp	r2, r3
    3cc2:	d000      	beq.n	3cc6 <m2m_ip_cb+0x2d6>
    3cc4:	e6f0      	b.n	3aa8 <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    3cc6:	4b08      	ldr	r3, [pc, #32]	; (3ce8 <m2m_ip_cb+0x2f8>)
    3cc8:	681b      	ldr	r3, [r3, #0]
    3cca:	2b00      	cmp	r3, #0
    3ccc:	d100      	bne.n	3cd0 <m2m_ip_cb+0x2e0>
    3cce:	e6eb      	b.n	3aa8 <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    3cd0:	4b05      	ldr	r3, [pc, #20]	; (3ce8 <m2m_ip_cb+0x2f8>)
    3cd2:	681b      	ldr	r3, [r3, #0]
    3cd4:	aa05      	add	r2, sp, #20
    3cd6:	0029      	movs	r1, r5
    3cd8:	4798      	blx	r3
	{
    3cda:	e6e5      	b.n	3aa8 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    3cdc:	2508      	movs	r5, #8
    3cde:	e7da      	b.n	3c96 <m2m_ip_cb+0x2a6>
    3ce0:	00001c7d 	.word	0x00001c7d
    3ce4:	200003a0 	.word	0x200003a0
    3ce8:	2000039c 	.word	0x2000039c
    3cec:	200002ec 	.word	0x200002ec
    3cf0:	200000e6 	.word	0x200000e6
    3cf4:	200003a4 	.word	0x200003a4
    3cf8:	000038dd 	.word	0x000038dd

00003cfc <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    3cfc:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    3cfe:	4b0a      	ldr	r3, [pc, #40]	; (3d28 <socketInit+0x2c>)
    3d00:	781b      	ldrb	r3, [r3, #0]
    3d02:	2b00      	cmp	r3, #0
    3d04:	d000      	beq.n	3d08 <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    3d06:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    3d08:	22b0      	movs	r2, #176	; 0xb0
    3d0a:	2100      	movs	r1, #0
    3d0c:	4807      	ldr	r0, [pc, #28]	; (3d2c <socketInit+0x30>)
    3d0e:	4b08      	ldr	r3, [pc, #32]	; (3d30 <socketInit+0x34>)
    3d10:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    3d12:	4908      	ldr	r1, [pc, #32]	; (3d34 <socketInit+0x38>)
    3d14:	2002      	movs	r0, #2
    3d16:	4b08      	ldr	r3, [pc, #32]	; (3d38 <socketInit+0x3c>)
    3d18:	4798      	blx	r3
		gbSocketInit	= 1;
    3d1a:	2201      	movs	r2, #1
    3d1c:	4b02      	ldr	r3, [pc, #8]	; (3d28 <socketInit+0x2c>)
    3d1e:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    3d20:	2200      	movs	r2, #0
    3d22:	4b06      	ldr	r3, [pc, #24]	; (3d3c <socketInit+0x40>)
    3d24:	801a      	strh	r2, [r3, #0]
}
    3d26:	e7ee      	b.n	3d06 <socketInit+0xa>
    3d28:	200000e5 	.word	0x200000e5
    3d2c:	200002ec 	.word	0x200002ec
    3d30:	0000155d 	.word	0x0000155d
    3d34:	000039f1 	.word	0x000039f1
    3d38:	00001d69 	.word	0x00001d69
    3d3c:	200000e6 	.word	0x200000e6

00003d40 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    3d40:	4b02      	ldr	r3, [pc, #8]	; (3d4c <registerSocketCallback+0xc>)
    3d42:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    3d44:	4b02      	ldr	r3, [pc, #8]	; (3d50 <registerSocketCallback+0x10>)
    3d46:	6019      	str	r1, [r3, #0]
}
    3d48:	4770      	bx	lr
    3d4a:	46c0      	nop			; (mov r8, r8)
    3d4c:	2000039c 	.word	0x2000039c
    3d50:	200003a4 	.word	0x200003a4

00003d54 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    3d54:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d56:	46d6      	mov	lr, sl
    3d58:	4647      	mov	r7, r8
    3d5a:	b580      	push	{r7, lr}
    3d5c:	b089      	sub	sp, #36	; 0x24
    3d5e:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    3d60:	2802      	cmp	r0, #2
    3d62:	d000      	beq.n	3d66 <socket+0x12>
    3d64:	e09c      	b.n	3ea0 <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    3d66:	2901      	cmp	r1, #1
    3d68:	d00a      	beq.n	3d80 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    3d6a:	2902      	cmp	r1, #2
    3d6c:	d100      	bne.n	3d70 <socket+0x1c>
    3d6e:	e070      	b.n	3e52 <socket+0xfe>
	SOCKET					sock = -1;
    3d70:	2501      	movs	r5, #1
    3d72:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    3d74:	0028      	movs	r0, r5
    3d76:	b009      	add	sp, #36	; 0x24
    3d78:	bc0c      	pop	{r2, r3}
    3d7a:	4690      	mov	r8, r2
    3d7c:	469a      	mov	sl, r3
    3d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    3d80:	4c49      	ldr	r4, [pc, #292]	; (3ea8 <socket+0x154>)
    3d82:	7827      	ldrb	r7, [r4, #0]
    3d84:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    3d86:	7826      	ldrb	r6, [r4, #0]
    3d88:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    3d8a:	7820      	ldrb	r0, [r4, #0]
    3d8c:	3001      	adds	r0, #1
    3d8e:	3106      	adds	r1, #6
    3d90:	4b46      	ldr	r3, [pc, #280]	; (3eac <socket+0x158>)
    3d92:	4798      	blx	r3
    3d94:	b2c9      	uxtb	r1, r1
    3d96:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    3d98:	0132      	lsls	r2, r6, #4
    3d9a:	4b45      	ldr	r3, [pc, #276]	; (3eb0 <socket+0x15c>)
    3d9c:	189b      	adds	r3, r3, r2
    3d9e:	7a9b      	ldrb	r3, [r3, #10]
    3da0:	2506      	movs	r5, #6
    3da2:	2b00      	cmp	r3, #0
    3da4:	d018      	beq.n	3dd8 <socket+0x84>
				u8SockID	= u8NextTcpSock;
    3da6:	4e40      	ldr	r6, [pc, #256]	; (3ea8 <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    3da8:	4b40      	ldr	r3, [pc, #256]	; (3eac <socket+0x158>)
    3daa:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    3dac:	4b40      	ldr	r3, [pc, #256]	; (3eb0 <socket+0x15c>)
    3dae:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    3db0:	7837      	ldrb	r7, [r6, #0]
    3db2:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    3db4:	7834      	ldrb	r4, [r6, #0]
    3db6:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    3db8:	7830      	ldrb	r0, [r6, #0]
    3dba:	3001      	adds	r0, #1
    3dbc:	2107      	movs	r1, #7
    3dbe:	47d0      	blx	sl
    3dc0:	b2c9      	uxtb	r1, r1
    3dc2:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    3dc4:	0123      	lsls	r3, r4, #4
    3dc6:	4443      	add	r3, r8
    3dc8:	7a9b      	ldrb	r3, [r3, #10]
    3dca:	2b00      	cmp	r3, #0
    3dcc:	d007      	beq.n	3dde <socket+0x8a>
    3dce:	3d01      	subs	r5, #1
    3dd0:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    3dd2:	2d00      	cmp	r5, #0
    3dd4:	d1ec      	bne.n	3db0 <socket+0x5c>
    3dd6:	e7cb      	b.n	3d70 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    3dd8:	4b35      	ldr	r3, [pc, #212]	; (3eb0 <socket+0x15c>)
    3dda:	18d4      	adds	r4, r2, r3
    3ddc:	e002      	b.n	3de4 <socket+0x90>
    3dde:	0124      	lsls	r4, r4, #4
    3de0:	4b33      	ldr	r3, [pc, #204]	; (3eb0 <socket+0x15c>)
    3de2:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    3de4:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    3de6:	2d00      	cmp	r5, #0
    3de8:	dbc4      	blt.n	3d74 <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    3dea:	2210      	movs	r2, #16
    3dec:	2100      	movs	r1, #0
    3dee:	0020      	movs	r0, r4
    3df0:	4b30      	ldr	r3, [pc, #192]	; (3eb4 <socket+0x160>)
    3df2:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    3df4:	2301      	movs	r3, #1
    3df6:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    3df8:	4a2f      	ldr	r2, [pc, #188]	; (3eb8 <socket+0x164>)
    3dfa:	8813      	ldrh	r3, [r2, #0]
    3dfc:	3301      	adds	r3, #1
    3dfe:	b29b      	uxth	r3, r3
    3e00:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    3e02:	8813      	ldrh	r3, [r2, #0]
    3e04:	b29b      	uxth	r3, r3
    3e06:	2b00      	cmp	r3, #0
    3e08:	d103      	bne.n	3e12 <socket+0xbe>
				++gu16SessionID;
    3e0a:	8813      	ldrh	r3, [r2, #0]
    3e0c:	3301      	adds	r3, #1
    3e0e:	b29b      	uxth	r3, r3
    3e10:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    3e12:	4e29      	ldr	r6, [pc, #164]	; (3eb8 <socket+0x164>)
    3e14:	8833      	ldrh	r3, [r6, #0]
    3e16:	b29b      	uxth	r3, r3
    3e18:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    3e1a:	4828      	ldr	r0, [pc, #160]	; (3ebc <socket+0x168>)
    3e1c:	4f28      	ldr	r7, [pc, #160]	; (3ec0 <socket+0x16c>)
    3e1e:	47b8      	blx	r7
    3e20:	8832      	ldrh	r2, [r6, #0]
    3e22:	b292      	uxth	r2, r2
    3e24:	0029      	movs	r1, r5
    3e26:	4827      	ldr	r0, [pc, #156]	; (3ec4 <socket+0x170>)
    3e28:	47b8      	blx	r7
    3e2a:	200d      	movs	r0, #13
    3e2c:	4b26      	ldr	r3, [pc, #152]	; (3ec8 <socket+0x174>)
    3e2e:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    3e30:	9b05      	ldr	r3, [sp, #20]
    3e32:	07db      	lsls	r3, r3, #31
    3e34:	d59e      	bpl.n	3d74 <socket+0x20>
				strSSLCreate.sslSock = sock;
    3e36:	aa07      	add	r2, sp, #28
    3e38:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    3e3a:	2321      	movs	r3, #33	; 0x21
    3e3c:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    3e3e:	2300      	movs	r3, #0
    3e40:	9302      	str	r3, [sp, #8]
    3e42:	9301      	str	r3, [sp, #4]
    3e44:	9300      	str	r3, [sp, #0]
    3e46:	3304      	adds	r3, #4
    3e48:	2150      	movs	r1, #80	; 0x50
    3e4a:	2002      	movs	r0, #2
    3e4c:	4c1f      	ldr	r4, [pc, #124]	; (3ecc <socket+0x178>)
    3e4e:	47a0      	blx	r4
    3e50:	e790      	b.n	3d74 <socket+0x20>
				u8SockID		= u8NextUdpSock;
    3e52:	4b1f      	ldr	r3, [pc, #124]	; (3ed0 <socket+0x17c>)
    3e54:	781d      	ldrb	r5, [r3, #0]
    3e56:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    3e58:	781c      	ldrb	r4, [r3, #0]
    3e5a:	0124      	lsls	r4, r4, #4
    3e5c:	4a1d      	ldr	r2, [pc, #116]	; (3ed4 <socket+0x180>)
    3e5e:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    3e60:	7819      	ldrb	r1, [r3, #0]
    3e62:	3101      	adds	r1, #1
    3e64:	2203      	movs	r2, #3
    3e66:	400a      	ands	r2, r1
    3e68:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    3e6a:	7aa3      	ldrb	r3, [r4, #10]
    3e6c:	2b00      	cmp	r3, #0
    3e6e:	d014      	beq.n	3e9a <socket+0x146>
    3e70:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    3e72:	4917      	ldr	r1, [pc, #92]	; (3ed0 <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    3e74:	4f17      	ldr	r7, [pc, #92]	; (3ed4 <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    3e76:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    3e78:	780d      	ldrb	r5, [r1, #0]
    3e7a:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    3e7c:	780c      	ldrb	r4, [r1, #0]
    3e7e:	0124      	lsls	r4, r4, #4
    3e80:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    3e82:	780b      	ldrb	r3, [r1, #0]
    3e84:	3301      	adds	r3, #1
    3e86:	4003      	ands	r3, r0
    3e88:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    3e8a:	7aa3      	ldrb	r3, [r4, #10]
    3e8c:	2b00      	cmp	r3, #0
    3e8e:	d004      	beq.n	3e9a <socket+0x146>
    3e90:	3a01      	subs	r2, #1
    3e92:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    3e94:	2a00      	cmp	r2, #0
    3e96:	d1ef      	bne.n	3e78 <socket+0x124>
    3e98:	e76a      	b.n	3d70 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    3e9a:	3507      	adds	r5, #7
    3e9c:	b26d      	sxtb	r5, r5
					break;
    3e9e:	e7a2      	b.n	3de6 <socket+0x92>
	SOCKET					sock = -1;
    3ea0:	2501      	movs	r5, #1
    3ea2:	426d      	negs	r5, r5
    3ea4:	e766      	b.n	3d74 <socket+0x20>
    3ea6:	46c0      	nop			; (mov r8, r8)
    3ea8:	200000e8 	.word	0x200000e8
    3eac:	00007e79 	.word	0x00007e79
    3eb0:	200002ec 	.word	0x200002ec
    3eb4:	0000155d 	.word	0x0000155d
    3eb8:	200000e6 	.word	0x200000e6
    3ebc:	0000b1b4 	.word	0x0000b1b4
    3ec0:	00009995 	.word	0x00009995
    3ec4:	0000bc44 	.word	0x0000bc44
    3ec8:	000099c9 	.word	0x000099c9
    3ecc:	00001671 	.word	0x00001671
    3ed0:	200000e9 	.word	0x200000e9
    3ed4:	2000035c 	.word	0x2000035c

00003ed8 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    3ed8:	b570      	push	{r4, r5, r6, lr}
    3eda:	b088      	sub	sp, #32
    3edc:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    3ede:	db30      	blt.n	3f42 <connect+0x6a>
    3ee0:	2900      	cmp	r1, #0
    3ee2:	d031      	beq.n	3f48 <connect+0x70>
    3ee4:	0100      	lsls	r0, r0, #4
    3ee6:	4b1d      	ldr	r3, [pc, #116]	; (3f5c <connect+0x84>)
    3ee8:	181b      	adds	r3, r3, r0
    3eea:	7a9b      	ldrb	r3, [r3, #10]
    3eec:	2b01      	cmp	r3, #1
    3eee:	d12e      	bne.n	3f4e <connect+0x76>
    3ef0:	2a00      	cmp	r2, #0
    3ef2:	d02f      	beq.n	3f54 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    3ef4:	4b19      	ldr	r3, [pc, #100]	; (3f5c <connect+0x84>)
    3ef6:	181b      	adds	r3, r3, r0
    3ef8:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    3efa:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    3efc:	07db      	lsls	r3, r3, #31
    3efe:	d505      	bpl.n	3f0c <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    3f00:	4b16      	ldr	r3, [pc, #88]	; (3f5c <connect+0x84>)
    3f02:	181b      	adds	r3, r3, r0
    3f04:	7ada      	ldrb	r2, [r3, #11]
    3f06:	ab05      	add	r3, sp, #20
    3f08:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    3f0a:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
    3f0c:	ad05      	add	r5, sp, #20
    3f0e:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    3f10:	2208      	movs	r2, #8
    3f12:	0028      	movs	r0, r5
    3f14:	4b12      	ldr	r3, [pc, #72]	; (3f60 <connect+0x88>)
    3f16:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    3f18:	0124      	lsls	r4, r4, #4
    3f1a:	4b10      	ldr	r3, [pc, #64]	; (3f5c <connect+0x84>)
    3f1c:	191c      	adds	r4, r3, r4
    3f1e:	88e3      	ldrh	r3, [r4, #6]
    3f20:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    3f22:	2300      	movs	r3, #0
    3f24:	9302      	str	r3, [sp, #8]
    3f26:	9301      	str	r3, [sp, #4]
    3f28:	9300      	str	r3, [sp, #0]
    3f2a:	330c      	adds	r3, #12
    3f2c:	002a      	movs	r2, r5
    3f2e:	0031      	movs	r1, r6
    3f30:	2002      	movs	r0, #2
    3f32:	4c0c      	ldr	r4, [pc, #48]	; (3f64 <connect+0x8c>)
    3f34:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    3f36:	2800      	cmp	r0, #0
    3f38:	d001      	beq.n	3f3e <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    3f3a:	2009      	movs	r0, #9
    3f3c:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    3f3e:	b008      	add	sp, #32
    3f40:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    3f42:	2006      	movs	r0, #6
    3f44:	4240      	negs	r0, r0
    3f46:	e7fa      	b.n	3f3e <connect+0x66>
    3f48:	2006      	movs	r0, #6
    3f4a:	4240      	negs	r0, r0
    3f4c:	e7f7      	b.n	3f3e <connect+0x66>
    3f4e:	2006      	movs	r0, #6
    3f50:	4240      	negs	r0, r0
    3f52:	e7f4      	b.n	3f3e <connect+0x66>
    3f54:	2006      	movs	r0, #6
    3f56:	4240      	negs	r0, r0
    3f58:	e7f1      	b.n	3f3e <connect+0x66>
    3f5a:	46c0      	nop			; (mov r8, r8)
    3f5c:	200002ec 	.word	0x200002ec
    3f60:	00001549 	.word	0x00001549
    3f64:	00001671 	.word	0x00001671

00003f68 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    3f68:	b530      	push	{r4, r5, lr}
    3f6a:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    3f6c:	2800      	cmp	r0, #0
    3f6e:	db36      	blt.n	3fde <send+0x76>
    3f70:	2900      	cmp	r1, #0
    3f72:	d037      	beq.n	3fe4 <send+0x7c>
    3f74:	23af      	movs	r3, #175	; 0xaf
    3f76:	00db      	lsls	r3, r3, #3
    3f78:	429a      	cmp	r2, r3
    3f7a:	d836      	bhi.n	3fea <send+0x82>
    3f7c:	0104      	lsls	r4, r0, #4
    3f7e:	4b1e      	ldr	r3, [pc, #120]	; (3ff8 <send+0x90>)
    3f80:	191b      	adds	r3, r3, r4
    3f82:	7a9b      	ldrb	r3, [r3, #10]
    3f84:	2b01      	cmp	r3, #1
    3f86:	d133      	bne.n	3ff0 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    3f88:	ab04      	add	r3, sp, #16
    3f8a:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    3f8c:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    3f8e:	0025      	movs	r5, r4
    3f90:	4c19      	ldr	r4, [pc, #100]	; (3ff8 <send+0x90>)
    3f92:	1964      	adds	r4, r4, r5
    3f94:	88e4      	ldrh	r4, [r4, #6]
    3f96:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    3f98:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    3f9a:	2806      	cmp	r0, #6
    3f9c:	dd00      	ble.n	3fa0 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    3f9e:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3fa0:	0104      	lsls	r4, r0, #4
    3fa2:	4b15      	ldr	r3, [pc, #84]	; (3ff8 <send+0x90>)
    3fa4:	191b      	adds	r3, r3, r4
    3fa6:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    3fa8:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3faa:	07e4      	lsls	r4, r4, #31
    3fac:	d505      	bpl.n	3fba <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    3fae:	0100      	lsls	r0, r0, #4
    3fb0:	4b11      	ldr	r3, [pc, #68]	; (3ff8 <send+0x90>)
    3fb2:	1818      	adds	r0, r3, r0
    3fb4:	8905      	ldrh	r5, [r0, #8]
    3fb6:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    3fb8:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    3fba:	2080      	movs	r0, #128	; 0x80
    3fbc:	4318      	orrs	r0, r3
    3fbe:	9502      	str	r5, [sp, #8]
    3fc0:	9201      	str	r2, [sp, #4]
    3fc2:	9100      	str	r1, [sp, #0]
    3fc4:	2310      	movs	r3, #16
    3fc6:	aa04      	add	r2, sp, #16
    3fc8:	0001      	movs	r1, r0
    3fca:	2002      	movs	r0, #2
    3fcc:	4c0b      	ldr	r4, [pc, #44]	; (3ffc <send+0x94>)
    3fce:	47a0      	blx	r4
    3fd0:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    3fd2:	2800      	cmp	r0, #0
    3fd4:	d000      	beq.n	3fd8 <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    3fd6:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    3fd8:	0018      	movs	r0, r3
    3fda:	b009      	add	sp, #36	; 0x24
    3fdc:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    3fde:	2306      	movs	r3, #6
    3fe0:	425b      	negs	r3, r3
    3fe2:	e7f9      	b.n	3fd8 <send+0x70>
    3fe4:	2306      	movs	r3, #6
    3fe6:	425b      	negs	r3, r3
    3fe8:	e7f6      	b.n	3fd8 <send+0x70>
    3fea:	2306      	movs	r3, #6
    3fec:	425b      	negs	r3, r3
    3fee:	e7f3      	b.n	3fd8 <send+0x70>
    3ff0:	2306      	movs	r3, #6
    3ff2:	425b      	negs	r3, r3
    3ff4:	e7f0      	b.n	3fd8 <send+0x70>
    3ff6:	46c0      	nop			; (mov r8, r8)
    3ff8:	200002ec 	.word	0x200002ec
    3ffc:	00001671 	.word	0x00001671

00004000 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    4000:	b530      	push	{r4, r5, lr}
    4002:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    4004:	2800      	cmp	r0, #0
    4006:	db34      	blt.n	4072 <recv+0x72>
    4008:	2900      	cmp	r1, #0
    400a:	d035      	beq.n	4078 <recv+0x78>
    400c:	2a00      	cmp	r2, #0
    400e:	d036      	beq.n	407e <recv+0x7e>
    4010:	0105      	lsls	r5, r0, #4
    4012:	4c1e      	ldr	r4, [pc, #120]	; (408c <recv+0x8c>)
    4014:	1964      	adds	r4, r4, r5
    4016:	7aa4      	ldrb	r4, [r4, #10]
    4018:	2c01      	cmp	r4, #1
    401a:	d133      	bne.n	4084 <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    401c:	4c1b      	ldr	r4, [pc, #108]	; (408c <recv+0x8c>)
    401e:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    4020:	1964      	adds	r4, r4, r5
    4022:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    4024:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    4026:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    4028:	2900      	cmp	r1, #0
    402a:	d11d      	bne.n	4068 <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    402c:	2101      	movs	r1, #1
    402e:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    4030:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    4032:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    4034:	07d2      	lsls	r2, r2, #31
    4036:	d500      	bpl.n	403a <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    4038:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    403a:	2b00      	cmp	r3, #0
    403c:	d117      	bne.n	406e <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    403e:	3b01      	subs	r3, #1
    4040:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    4042:	aa04      	add	r2, sp, #16
    4044:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    4046:	0100      	lsls	r0, r0, #4
    4048:	4b10      	ldr	r3, [pc, #64]	; (408c <recv+0x8c>)
    404a:	1818      	adds	r0, r3, r0
    404c:	88c3      	ldrh	r3, [r0, #6]
    404e:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    4050:	2300      	movs	r3, #0
    4052:	9302      	str	r3, [sp, #8]
    4054:	9301      	str	r3, [sp, #4]
    4056:	9300      	str	r3, [sp, #0]
    4058:	3308      	adds	r3, #8
    405a:	2002      	movs	r0, #2
    405c:	4c0c      	ldr	r4, [pc, #48]	; (4090 <recv+0x90>)
    405e:	47a0      	blx	r4
    4060:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    4062:	2800      	cmp	r0, #0
    4064:	d000      	beq.n	4068 <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    4066:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    4068:	0010      	movs	r0, r2
    406a:	b007      	add	sp, #28
    406c:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    406e:	9304      	str	r3, [sp, #16]
    4070:	e7e7      	b.n	4042 <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    4072:	2206      	movs	r2, #6
    4074:	4252      	negs	r2, r2
    4076:	e7f7      	b.n	4068 <recv+0x68>
    4078:	2206      	movs	r2, #6
    407a:	4252      	negs	r2, r2
    407c:	e7f4      	b.n	4068 <recv+0x68>
    407e:	2206      	movs	r2, #6
    4080:	4252      	negs	r2, r2
    4082:	e7f1      	b.n	4068 <recv+0x68>
    4084:	2206      	movs	r2, #6
    4086:	4252      	negs	r2, r2
    4088:	e7ee      	b.n	4068 <recv+0x68>
    408a:	46c0      	nop			; (mov r8, r8)
    408c:	200002ec 	.word	0x200002ec
    4090:	00001671 	.word	0x00001671

00004094 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    4094:	b530      	push	{r4, r5, lr}
    4096:	b087      	sub	sp, #28
    4098:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    409a:	481e      	ldr	r0, [pc, #120]	; (4114 <close+0x80>)
    409c:	4d1e      	ldr	r5, [pc, #120]	; (4118 <close+0x84>)
    409e:	47a8      	blx	r5
    40a0:	0021      	movs	r1, r4
    40a2:	481e      	ldr	r0, [pc, #120]	; (411c <close+0x88>)
    40a4:	47a8      	blx	r5
    40a6:	200d      	movs	r0, #13
    40a8:	4b1d      	ldr	r3, [pc, #116]	; (4120 <close+0x8c>)
    40aa:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    40ac:	2c00      	cmp	r4, #0
    40ae:	db2a      	blt.n	4106 <close+0x72>
    40b0:	0122      	lsls	r2, r4, #4
    40b2:	4b1c      	ldr	r3, [pc, #112]	; (4124 <close+0x90>)
    40b4:	189b      	adds	r3, r3, r2
    40b6:	7a9b      	ldrb	r3, [r3, #10]
    40b8:	2b01      	cmp	r3, #1
    40ba:	d127      	bne.n	410c <close+0x78>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    40bc:	a905      	add	r1, sp, #20
    40be:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    40c0:	4b18      	ldr	r3, [pc, #96]	; (4124 <close+0x90>)
    40c2:	189b      	adds	r3, r3, r2
    40c4:	88da      	ldrh	r2, [r3, #6]
    40c6:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    40c8:	2200      	movs	r2, #0
    40ca:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    40cc:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    40ce:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    40d0:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    40d2:	07db      	lsls	r3, r3, #31
    40d4:	d500      	bpl.n	40d8 <close+0x44>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    40d6:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    40d8:	2300      	movs	r3, #0
    40da:	9302      	str	r3, [sp, #8]
    40dc:	9301      	str	r3, [sp, #4]
    40de:	9300      	str	r3, [sp, #0]
    40e0:	3304      	adds	r3, #4
    40e2:	aa05      	add	r2, sp, #20
    40e4:	2002      	movs	r0, #2
    40e6:	4d10      	ldr	r5, [pc, #64]	; (4128 <close+0x94>)
    40e8:	47a8      	blx	r5
    40ea:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    40ec:	d001      	beq.n	40f2 <close+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    40ee:	2509      	movs	r5, #9
    40f0:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    40f2:	0124      	lsls	r4, r4, #4
    40f4:	480b      	ldr	r0, [pc, #44]	; (4124 <close+0x90>)
    40f6:	1820      	adds	r0, r4, r0
    40f8:	2210      	movs	r2, #16
    40fa:	2100      	movs	r1, #0
    40fc:	4b0b      	ldr	r3, [pc, #44]	; (412c <close+0x98>)
    40fe:	4798      	blx	r3
	}
	return s8Ret;
}
    4100:	0028      	movs	r0, r5
    4102:	b007      	add	sp, #28
    4104:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    4106:	2506      	movs	r5, #6
    4108:	426d      	negs	r5, r5
    410a:	e7f9      	b.n	4100 <close+0x6c>
    410c:	2506      	movs	r5, #6
    410e:	426d      	negs	r5, r5
    4110:	e7f6      	b.n	4100 <close+0x6c>
    4112:	46c0      	nop			; (mov r8, r8)
    4114:	0000b1b4 	.word	0x0000b1b4
    4118:	00009995 	.word	0x00009995
    411c:	0000bc2c 	.word	0x0000bc2c
    4120:	000099c9 	.word	0x000099c9
    4124:	200002ec 	.word	0x200002ec
    4128:	00001671 	.word	0x00001671
    412c:	0000155d 	.word	0x0000155d

00004130 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    4130:	b570      	push	{r4, r5, r6, lr}
    4132:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
    4134:	2300      	movs	r3, #0
    4136:	9301      	str	r3, [sp, #4]
    4138:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
    413a:	2100      	movs	r1, #0
    413c:	7802      	ldrb	r2, [r0, #0]
    413e:	1c44      	adds	r4, r0, #1
    4140:	3005      	adds	r0, #5
    4142:	000b      	movs	r3, r1
    4144:	e009      	b.n	415a <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
    4146:	009d      	lsls	r5, r3, #2
    4148:	195b      	adds	r3, r3, r5
    414a:	005b      	lsls	r3, r3, #1
    414c:	189b      	adds	r3, r3, r2
    414e:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
    4150:	0022      	movs	r2, r4
    4152:	3401      	adds	r4, #1
			if(j > 4)
    4154:	42a0      	cmp	r0, r4
    4156:	d00a      	beq.n	416e <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
    4158:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
    415a:	2a2e      	cmp	r2, #46	; 0x2e
    415c:	d00a      	beq.n	4174 <nmi_inet_addr+0x44>
    415e:	2a00      	cmp	r2, #0
    4160:	d00c      	beq.n	417c <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
    4162:	3a30      	subs	r2, #48	; 0x30
    4164:	b2d2      	uxtb	r2, r2
    4166:	2a09      	cmp	r2, #9
    4168:	d9ed      	bls.n	4146 <nmi_inet_addr+0x16>
				return 0;
    416a:	2000      	movs	r0, #0
    416c:	e000      	b.n	4170 <nmi_inet_addr+0x40>
				return 0;
    416e:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
    4170:	b002      	add	sp, #8
    4172:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
    4174:	466a      	mov	r2, sp
    4176:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    4178:	0020      	movs	r0, r4
    417a:	e002      	b.n	4182 <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
    417c:	466a      	mov	r2, sp
    417e:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    4180:	0020      	movs	r0, r4
    4182:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
    4184:	2e04      	cmp	r6, #4
    4186:	d1d9      	bne.n	413c <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    4188:	2204      	movs	r2, #4
    418a:	4669      	mov	r1, sp
    418c:	a801      	add	r0, sp, #4
    418e:	4b02      	ldr	r3, [pc, #8]	; (4198 <nmi_inet_addr+0x68>)
    4190:	4798      	blx	r3
	return u32IP;
    4192:	9801      	ldr	r0, [sp, #4]
    4194:	e7ec      	b.n	4170 <nmi_inet_addr+0x40>
    4196:	46c0      	nop			; (mov r8, r8)
    4198:	00001549 	.word	0x00001549

0000419c <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    419c:	b510      	push	{r4, lr}
    419e:	b084      	sub	sp, #16
    41a0:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    41a2:	4b0b      	ldr	r3, [pc, #44]	; (41d0 <gethostbyname+0x34>)
    41a4:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    41a6:	b2c3      	uxtb	r3, r0
    41a8:	2b40      	cmp	r3, #64	; 0x40
    41aa:	d80d      	bhi.n	41c8 <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    41ac:	23ff      	movs	r3, #255	; 0xff
    41ae:	4003      	ands	r3, r0
    41b0:	3301      	adds	r3, #1
    41b2:	2200      	movs	r2, #0
    41b4:	9202      	str	r2, [sp, #8]
    41b6:	9201      	str	r2, [sp, #4]
    41b8:	9200      	str	r2, [sp, #0]
    41ba:	0022      	movs	r2, r4
    41bc:	214a      	movs	r1, #74	; 0x4a
    41be:	2002      	movs	r0, #2
    41c0:	4c04      	ldr	r4, [pc, #16]	; (41d4 <gethostbyname+0x38>)
    41c2:	47a0      	blx	r4
	}
	return s8Err;
}
    41c4:	b004      	add	sp, #16
    41c6:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    41c8:	2006      	movs	r0, #6
    41ca:	4240      	negs	r0, r0
    41cc:	e7fa      	b.n	41c4 <gethostbyname+0x28>
    41ce:	46c0      	nop			; (mov r8, r8)
    41d0:	0000156d 	.word	0x0000156d
    41d4:	00001671 	.word	0x00001671

000041d8 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    41d8:	b570      	push	{r4, r5, r6, lr}
    41da:	b082      	sub	sp, #8
    41dc:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    41de:	4b2a      	ldr	r3, [pc, #168]	; (4288 <spi_flash_enable+0xb0>)
    41e0:	4798      	blx	r3
    41e2:	0500      	lsls	r0, r0, #20
    41e4:	0d00      	lsrs	r0, r0, #20
    41e6:	4b29      	ldr	r3, [pc, #164]	; (428c <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    41e8:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    41ea:	4298      	cmp	r0, r3
    41ec:	d802      	bhi.n	41f4 <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    41ee:	0028      	movs	r0, r5
    41f0:	b002      	add	sp, #8
    41f2:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    41f4:	a901      	add	r1, sp, #4
    41f6:	4826      	ldr	r0, [pc, #152]	; (4290 <spi_flash_enable+0xb8>)
    41f8:	4b26      	ldr	r3, [pc, #152]	; (4294 <spi_flash_enable+0xbc>)
    41fa:	4798      	blx	r3
    41fc:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    41fe:	d1f6      	bne.n	41ee <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    4200:	4b25      	ldr	r3, [pc, #148]	; (4298 <spi_flash_enable+0xc0>)
    4202:	9a01      	ldr	r2, [sp, #4]
    4204:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    4206:	4925      	ldr	r1, [pc, #148]	; (429c <spi_flash_enable+0xc4>)
    4208:	4319      	orrs	r1, r3
    420a:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    420c:	4820      	ldr	r0, [pc, #128]	; (4290 <spi_flash_enable+0xb8>)
    420e:	4b24      	ldr	r3, [pc, #144]	; (42a0 <spi_flash_enable+0xc8>)
    4210:	4798      	blx	r3
		if(enable) {
    4212:	2c00      	cmp	r4, #0
    4214:	d020      	beq.n	4258 <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    4216:	2100      	movs	r1, #0
    4218:	4822      	ldr	r0, [pc, #136]	; (42a4 <spi_flash_enable+0xcc>)
    421a:	4c21      	ldr	r4, [pc, #132]	; (42a0 <spi_flash_enable+0xc8>)
    421c:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    421e:	21ab      	movs	r1, #171	; 0xab
    4220:	4821      	ldr	r0, [pc, #132]	; (42a8 <spi_flash_enable+0xd0>)
    4222:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    4224:	2101      	movs	r1, #1
    4226:	4821      	ldr	r0, [pc, #132]	; (42ac <spi_flash_enable+0xd4>)
    4228:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    422a:	2100      	movs	r1, #0
    422c:	4820      	ldr	r0, [pc, #128]	; (42b0 <spi_flash_enable+0xd8>)
    422e:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    4230:	2181      	movs	r1, #129	; 0x81
    4232:	4820      	ldr	r0, [pc, #128]	; (42b4 <spi_flash_enable+0xdc>)
    4234:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    4236:	4e20      	ldr	r6, [pc, #128]	; (42b8 <spi_flash_enable+0xe0>)
    4238:	4c20      	ldr	r4, [pc, #128]	; (42bc <spi_flash_enable+0xe4>)
    423a:	0030      	movs	r0, r6
    423c:	47a0      	blx	r4
    423e:	2801      	cmp	r0, #1
    4240:	d1fb      	bne.n	423a <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    4242:	4b15      	ldr	r3, [pc, #84]	; (4298 <spi_flash_enable+0xc0>)
    4244:	9a01      	ldr	r2, [sp, #4]
    4246:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    4248:	2180      	movs	r1, #128	; 0x80
    424a:	0249      	lsls	r1, r1, #9
    424c:	4319      	orrs	r1, r3
    424e:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    4250:	480f      	ldr	r0, [pc, #60]	; (4290 <spi_flash_enable+0xb8>)
    4252:	4b13      	ldr	r3, [pc, #76]	; (42a0 <spi_flash_enable+0xc8>)
    4254:	4798      	blx	r3
    4256:	e7ca      	b.n	41ee <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    4258:	2100      	movs	r1, #0
    425a:	4812      	ldr	r0, [pc, #72]	; (42a4 <spi_flash_enable+0xcc>)
    425c:	4c10      	ldr	r4, [pc, #64]	; (42a0 <spi_flash_enable+0xc8>)
    425e:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    4260:	21b9      	movs	r1, #185	; 0xb9
    4262:	4811      	ldr	r0, [pc, #68]	; (42a8 <spi_flash_enable+0xd0>)
    4264:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    4266:	2101      	movs	r1, #1
    4268:	4810      	ldr	r0, [pc, #64]	; (42ac <spi_flash_enable+0xd4>)
    426a:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    426c:	2100      	movs	r1, #0
    426e:	4810      	ldr	r0, [pc, #64]	; (42b0 <spi_flash_enable+0xd8>)
    4270:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    4272:	2181      	movs	r1, #129	; 0x81
    4274:	480f      	ldr	r0, [pc, #60]	; (42b4 <spi_flash_enable+0xdc>)
    4276:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    4278:	4e0f      	ldr	r6, [pc, #60]	; (42b8 <spi_flash_enable+0xe0>)
    427a:	4c10      	ldr	r4, [pc, #64]	; (42bc <spi_flash_enable+0xe4>)
    427c:	0030      	movs	r0, r6
    427e:	47a0      	blx	r4
    4280:	2801      	cmp	r0, #1
    4282:	d1fb      	bne.n	427c <spi_flash_enable+0xa4>
    4284:	e7dd      	b.n	4242 <spi_flash_enable+0x6a>
    4286:	46c0      	nop			; (mov r8, r8)
    4288:	00002555 	.word	0x00002555
    428c:	0000039f 	.word	0x0000039f
    4290:	00001410 	.word	0x00001410
    4294:	000029a5 	.word	0x000029a5
    4298:	f8888fff 	.word	0xf8888fff
    429c:	01111000 	.word	0x01111000
    42a0:	000029b1 	.word	0x000029b1
    42a4:	00010208 	.word	0x00010208
    42a8:	0001020c 	.word	0x0001020c
    42ac:	00010214 	.word	0x00010214
    42b0:	0001021c 	.word	0x0001021c
    42b4:	00010204 	.word	0x00010204
    42b8:	00010218 	.word	0x00010218
    42bc:	00002999 	.word	0x00002999

000042c0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    42c0:	4b0c      	ldr	r3, [pc, #48]	; (42f4 <cpu_irq_enter_critical+0x34>)
    42c2:	681b      	ldr	r3, [r3, #0]
    42c4:	2b00      	cmp	r3, #0
    42c6:	d106      	bne.n	42d6 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    42c8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    42cc:	2b00      	cmp	r3, #0
    42ce:	d007      	beq.n	42e0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    42d0:	2200      	movs	r2, #0
    42d2:	4b09      	ldr	r3, [pc, #36]	; (42f8 <cpu_irq_enter_critical+0x38>)
    42d4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    42d6:	4a07      	ldr	r2, [pc, #28]	; (42f4 <cpu_irq_enter_critical+0x34>)
    42d8:	6813      	ldr	r3, [r2, #0]
    42da:	3301      	adds	r3, #1
    42dc:	6013      	str	r3, [r2, #0]
}
    42de:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    42e0:	b672      	cpsid	i
    42e2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    42e6:	2200      	movs	r2, #0
    42e8:	4b04      	ldr	r3, [pc, #16]	; (42fc <cpu_irq_enter_critical+0x3c>)
    42ea:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    42ec:	3201      	adds	r2, #1
    42ee:	4b02      	ldr	r3, [pc, #8]	; (42f8 <cpu_irq_enter_critical+0x38>)
    42f0:	701a      	strb	r2, [r3, #0]
    42f2:	e7f0      	b.n	42d6 <cpu_irq_enter_critical+0x16>
    42f4:	200000ec 	.word	0x200000ec
    42f8:	200000f0 	.word	0x200000f0
    42fc:	2000000a 	.word	0x2000000a

00004300 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4300:	4b08      	ldr	r3, [pc, #32]	; (4324 <cpu_irq_leave_critical+0x24>)
    4302:	681a      	ldr	r2, [r3, #0]
    4304:	3a01      	subs	r2, #1
    4306:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    4308:	681b      	ldr	r3, [r3, #0]
    430a:	2b00      	cmp	r3, #0
    430c:	d109      	bne.n	4322 <cpu_irq_leave_critical+0x22>
    430e:	4b06      	ldr	r3, [pc, #24]	; (4328 <cpu_irq_leave_critical+0x28>)
    4310:	781b      	ldrb	r3, [r3, #0]
    4312:	2b00      	cmp	r3, #0
    4314:	d005      	beq.n	4322 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    4316:	2201      	movs	r2, #1
    4318:	4b04      	ldr	r3, [pc, #16]	; (432c <cpu_irq_leave_critical+0x2c>)
    431a:	701a      	strb	r2, [r3, #0]
    431c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4320:	b662      	cpsie	i
	}
}
    4322:	4770      	bx	lr
    4324:	200000ec 	.word	0x200000ec
    4328:	200000f0 	.word	0x200000f0
    432c:	2000000a 	.word	0x2000000a

00004330 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    4330:	b5f0      	push	{r4, r5, r6, r7, lr}
    4332:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    4334:	ac01      	add	r4, sp, #4
    4336:	2501      	movs	r5, #1
    4338:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    433a:	2700      	movs	r7, #0
    433c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    433e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    4340:	0021      	movs	r1, r4
    4342:	203e      	movs	r0, #62	; 0x3e
    4344:	4e06      	ldr	r6, [pc, #24]	; (4360 <system_board_init+0x30>)
    4346:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    4348:	2280      	movs	r2, #128	; 0x80
    434a:	05d2      	lsls	r2, r2, #23
    434c:	4b05      	ldr	r3, [pc, #20]	; (4364 <system_board_init+0x34>)
    434e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    4350:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    4352:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    4354:	0021      	movs	r1, r4
    4356:	200f      	movs	r0, #15
    4358:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    435a:	b003      	add	sp, #12
    435c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    435e:	46c0      	nop			; (mov r8, r8)
    4360:	00004539 	.word	0x00004539
    4364:	41004480 	.word	0x41004480

00004368 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4368:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    436a:	2a00      	cmp	r2, #0
    436c:	d001      	beq.n	4372 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    436e:	0018      	movs	r0, r3
    4370:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    4372:	008b      	lsls	r3, r1, #2
    4374:	4a06      	ldr	r2, [pc, #24]	; (4390 <extint_register_callback+0x28>)
    4376:	589b      	ldr	r3, [r3, r2]
    4378:	2b00      	cmp	r3, #0
    437a:	d003      	beq.n	4384 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    437c:	4283      	cmp	r3, r0
    437e:	d005      	beq.n	438c <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    4380:	231d      	movs	r3, #29
    4382:	e7f4      	b.n	436e <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    4384:	0089      	lsls	r1, r1, #2
    4386:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    4388:	2300      	movs	r3, #0
    438a:	e7f0      	b.n	436e <extint_register_callback+0x6>
		return STATUS_OK;
    438c:	2300      	movs	r3, #0
    438e:	e7ee      	b.n	436e <extint_register_callback+0x6>
    4390:	200003ac 	.word	0x200003ac

00004394 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4394:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    4396:	2900      	cmp	r1, #0
    4398:	d001      	beq.n	439e <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    439a:	0018      	movs	r0, r3
    439c:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    439e:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    43a0:	281f      	cmp	r0, #31
    43a2:	d800      	bhi.n	43a6 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    43a4:	4a02      	ldr	r2, [pc, #8]	; (43b0 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    43a6:	2301      	movs	r3, #1
    43a8:	4083      	lsls	r3, r0
    43aa:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    43ac:	2300      	movs	r3, #0
    43ae:	e7f4      	b.n	439a <extint_chan_enable_callback+0x6>
    43b0:	40001800 	.word	0x40001800

000043b4 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    43b4:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    43b6:	2900      	cmp	r1, #0
    43b8:	d001      	beq.n	43be <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    43ba:	0018      	movs	r0, r3
    43bc:	4770      	bx	lr
		return NULL;
    43be:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    43c0:	281f      	cmp	r0, #31
    43c2:	d800      	bhi.n	43c6 <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    43c4:	4a02      	ldr	r2, [pc, #8]	; (43d0 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    43c6:	2301      	movs	r3, #1
    43c8:	4083      	lsls	r3, r0
    43ca:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    43cc:	2300      	movs	r3, #0
    43ce:	e7f4      	b.n	43ba <extint_chan_disable_callback+0x6>
    43d0:	40001800 	.word	0x40001800

000043d4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    43d4:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    43d6:	2200      	movs	r2, #0
    43d8:	4b10      	ldr	r3, [pc, #64]	; (441c <EIC_Handler+0x48>)
    43da:	701a      	strb	r2, [r3, #0]
    43dc:	2300      	movs	r3, #0
    43de:	4910      	ldr	r1, [pc, #64]	; (4420 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    43e0:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    43e2:	4e10      	ldr	r6, [pc, #64]	; (4424 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    43e4:	4c0d      	ldr	r4, [pc, #52]	; (441c <EIC_Handler+0x48>)
    43e6:	e00a      	b.n	43fe <EIC_Handler+0x2a>
		return eics[eic_index];
    43e8:	490d      	ldr	r1, [pc, #52]	; (4420 <EIC_Handler+0x4c>)
    43ea:	e008      	b.n	43fe <EIC_Handler+0x2a>
    43ec:	7823      	ldrb	r3, [r4, #0]
    43ee:	3301      	adds	r3, #1
    43f0:	b2db      	uxtb	r3, r3
    43f2:	7023      	strb	r3, [r4, #0]
    43f4:	2b0f      	cmp	r3, #15
    43f6:	d810      	bhi.n	441a <EIC_Handler+0x46>
		return NULL;
    43f8:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    43fa:	2b1f      	cmp	r3, #31
    43fc:	d9f4      	bls.n	43e8 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    43fe:	0028      	movs	r0, r5
    4400:	4018      	ands	r0, r3
    4402:	2201      	movs	r2, #1
    4404:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    4406:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    4408:	4210      	tst	r0, r2
    440a:	d0ef      	beq.n	43ec <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    440c:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    440e:	009b      	lsls	r3, r3, #2
    4410:	599b      	ldr	r3, [r3, r6]
    4412:	2b00      	cmp	r3, #0
    4414:	d0ea      	beq.n	43ec <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    4416:	4798      	blx	r3
    4418:	e7e8      	b.n	43ec <EIC_Handler+0x18>
			}
		}
	}
}
    441a:	bd70      	pop	{r4, r5, r6, pc}
    441c:	200003a8 	.word	0x200003a8
    4420:	40001800 	.word	0x40001800
    4424:	200003ac 	.word	0x200003ac

00004428 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    4428:	4a04      	ldr	r2, [pc, #16]	; (443c <_extint_enable+0x14>)
    442a:	7813      	ldrb	r3, [r2, #0]
    442c:	2102      	movs	r1, #2
    442e:	430b      	orrs	r3, r1
    4430:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    4432:	7853      	ldrb	r3, [r2, #1]
    4434:	b25b      	sxtb	r3, r3
    4436:	2b00      	cmp	r3, #0
    4438:	dbfb      	blt.n	4432 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    443a:	4770      	bx	lr
    443c:	40001800 	.word	0x40001800

00004440 <_system_extint_init>:
{
    4440:	b500      	push	{lr}
    4442:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    4444:	4a12      	ldr	r2, [pc, #72]	; (4490 <_system_extint_init+0x50>)
    4446:	6993      	ldr	r3, [r2, #24]
    4448:	2140      	movs	r1, #64	; 0x40
    444a:	430b      	orrs	r3, r1
    444c:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    444e:	a901      	add	r1, sp, #4
    4450:	2300      	movs	r3, #0
    4452:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    4454:	2005      	movs	r0, #5
    4456:	4b0f      	ldr	r3, [pc, #60]	; (4494 <_system_extint_init+0x54>)
    4458:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    445a:	2005      	movs	r0, #5
    445c:	4b0e      	ldr	r3, [pc, #56]	; (4498 <_system_extint_init+0x58>)
    445e:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    4460:	4a0e      	ldr	r2, [pc, #56]	; (449c <_system_extint_init+0x5c>)
    4462:	7813      	ldrb	r3, [r2, #0]
    4464:	2101      	movs	r1, #1
    4466:	430b      	orrs	r3, r1
    4468:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    446a:	7853      	ldrb	r3, [r2, #1]
    446c:	b25b      	sxtb	r3, r3
    446e:	2b00      	cmp	r3, #0
    4470:	dbfb      	blt.n	446a <_system_extint_init+0x2a>
    4472:	4b0b      	ldr	r3, [pc, #44]	; (44a0 <_system_extint_init+0x60>)
    4474:	0019      	movs	r1, r3
    4476:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    4478:	2200      	movs	r2, #0
    447a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    447c:	4299      	cmp	r1, r3
    447e:	d1fc      	bne.n	447a <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4480:	2210      	movs	r2, #16
    4482:	4b08      	ldr	r3, [pc, #32]	; (44a4 <_system_extint_init+0x64>)
    4484:	601a      	str	r2, [r3, #0]
	_extint_enable();
    4486:	4b08      	ldr	r3, [pc, #32]	; (44a8 <_system_extint_init+0x68>)
    4488:	4798      	blx	r3
}
    448a:	b003      	add	sp, #12
    448c:	bd00      	pop	{pc}
    448e:	46c0      	nop			; (mov r8, r8)
    4490:	40000400 	.word	0x40000400
    4494:	00005a0d 	.word	0x00005a0d
    4498:	00005981 	.word	0x00005981
    449c:	40001800 	.word	0x40001800
    44a0:	200003ac 	.word	0x200003ac
    44a4:	e000e100 	.word	0xe000e100
    44a8:	00004429 	.word	0x00004429

000044ac <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    44ac:	2300      	movs	r3, #0
    44ae:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    44b0:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    44b2:	2201      	movs	r2, #1
    44b4:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    44b6:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    44b8:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    44ba:	3302      	adds	r3, #2
    44bc:	72c3      	strb	r3, [r0, #11]
}
    44be:	4770      	bx	lr

000044c0 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    44c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    44c2:	b083      	sub	sp, #12
    44c4:	0005      	movs	r5, r0
    44c6:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    44c8:	a901      	add	r1, sp, #4
    44ca:	2300      	movs	r3, #0
    44cc:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    44ce:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    44d0:	7923      	ldrb	r3, [r4, #4]
    44d2:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    44d4:	7a23      	ldrb	r3, [r4, #8]
    44d6:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    44d8:	7820      	ldrb	r0, [r4, #0]
    44da:	4b15      	ldr	r3, [pc, #84]	; (4530 <extint_chan_set_config+0x70>)
    44dc:	4798      	blx	r3
		return NULL;
    44de:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    44e0:	2d1f      	cmp	r5, #31
    44e2:	d800      	bhi.n	44e6 <extint_chan_set_config+0x26>
		return eics[eic_index];
    44e4:	4813      	ldr	r0, [pc, #76]	; (4534 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    44e6:	2207      	movs	r2, #7
    44e8:	402a      	ands	r2, r5
    44ea:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    44ec:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    44ee:	7aa3      	ldrb	r3, [r4, #10]
    44f0:	2b00      	cmp	r3, #0
    44f2:	d001      	beq.n	44f8 <extint_chan_set_config+0x38>
    44f4:	2308      	movs	r3, #8
    44f6:	431f      	orrs	r7, r3
    44f8:	08eb      	lsrs	r3, r5, #3
    44fa:	009b      	lsls	r3, r3, #2
    44fc:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    44fe:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4500:	260f      	movs	r6, #15
    4502:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    4504:	43b1      	bics	r1, r6
			(new_config << config_pos);
    4506:	4097      	lsls	r7, r2
    4508:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    450a:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    450c:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    450e:	7a63      	ldrb	r3, [r4, #9]
    4510:	2b00      	cmp	r3, #0
    4512:	d106      	bne.n	4522 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    4514:	6943      	ldr	r3, [r0, #20]
    4516:	2201      	movs	r2, #1
    4518:	40aa      	lsls	r2, r5
    451a:	4393      	bics	r3, r2
    451c:	6143      	str	r3, [r0, #20]
	}
}
    451e:	b003      	add	sp, #12
    4520:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    4522:	6942      	ldr	r2, [r0, #20]
    4524:	2301      	movs	r3, #1
    4526:	40ab      	lsls	r3, r5
    4528:	4313      	orrs	r3, r2
    452a:	6143      	str	r3, [r0, #20]
    452c:	e7f7      	b.n	451e <extint_chan_set_config+0x5e>
    452e:	46c0      	nop			; (mov r8, r8)
    4530:	00005b05 	.word	0x00005b05
    4534:	40001800 	.word	0x40001800

00004538 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    4538:	b500      	push	{lr}
    453a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    453c:	ab01      	add	r3, sp, #4
    453e:	2280      	movs	r2, #128	; 0x80
    4540:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    4542:	780a      	ldrb	r2, [r1, #0]
    4544:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    4546:	784a      	ldrb	r2, [r1, #1]
    4548:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    454a:	788a      	ldrb	r2, [r1, #2]
    454c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    454e:	0019      	movs	r1, r3
    4550:	4b01      	ldr	r3, [pc, #4]	; (4558 <port_pin_set_config+0x20>)
    4552:	4798      	blx	r3
}
    4554:	b003      	add	sp, #12
    4556:	bd00      	pop	{pc}
    4558:	00005b05 	.word	0x00005b05

0000455c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    455c:	b5f0      	push	{r4, r5, r6, r7, lr}
    455e:	46de      	mov	lr, fp
    4560:	4657      	mov	r7, sl
    4562:	464e      	mov	r6, r9
    4564:	4645      	mov	r5, r8
    4566:	b5e0      	push	{r5, r6, r7, lr}
    4568:	b087      	sub	sp, #28
    456a:	4680      	mov	r8, r0
    456c:	9104      	str	r1, [sp, #16]
    456e:	0016      	movs	r6, r2
    4570:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    4572:	2200      	movs	r2, #0
    4574:	2300      	movs	r3, #0
    4576:	2100      	movs	r1, #0
    4578:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    457a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    457c:	2001      	movs	r0, #1
    457e:	0021      	movs	r1, r4
    4580:	9600      	str	r6, [sp, #0]
    4582:	9701      	str	r7, [sp, #4]
    4584:	465c      	mov	r4, fp
    4586:	9403      	str	r4, [sp, #12]
    4588:	4644      	mov	r4, r8
    458a:	9405      	str	r4, [sp, #20]
    458c:	e013      	b.n	45b6 <long_division+0x5a>
    458e:	2420      	movs	r4, #32
    4590:	1a64      	subs	r4, r4, r1
    4592:	0005      	movs	r5, r0
    4594:	40e5      	lsrs	r5, r4
    4596:	46a8      	mov	r8, r5
    4598:	e014      	b.n	45c4 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    459a:	9c00      	ldr	r4, [sp, #0]
    459c:	9d01      	ldr	r5, [sp, #4]
    459e:	1b12      	subs	r2, r2, r4
    45a0:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    45a2:	465c      	mov	r4, fp
    45a4:	464d      	mov	r5, r9
    45a6:	432c      	orrs	r4, r5
    45a8:	46a3      	mov	fp, r4
    45aa:	9c03      	ldr	r4, [sp, #12]
    45ac:	4645      	mov	r5, r8
    45ae:	432c      	orrs	r4, r5
    45b0:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    45b2:	3901      	subs	r1, #1
    45b4:	d325      	bcc.n	4602 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    45b6:	2420      	movs	r4, #32
    45b8:	4264      	negs	r4, r4
    45ba:	190c      	adds	r4, r1, r4
    45bc:	d4e7      	bmi.n	458e <long_division+0x32>
    45be:	0005      	movs	r5, r0
    45c0:	40a5      	lsls	r5, r4
    45c2:	46a8      	mov	r8, r5
    45c4:	0004      	movs	r4, r0
    45c6:	408c      	lsls	r4, r1
    45c8:	46a1      	mov	r9, r4
		r = r << 1;
    45ca:	1892      	adds	r2, r2, r2
    45cc:	415b      	adcs	r3, r3
    45ce:	0014      	movs	r4, r2
    45d0:	001d      	movs	r5, r3
		if (n & bit_shift) {
    45d2:	9e05      	ldr	r6, [sp, #20]
    45d4:	464f      	mov	r7, r9
    45d6:	403e      	ands	r6, r7
    45d8:	46b4      	mov	ip, r6
    45da:	9e04      	ldr	r6, [sp, #16]
    45dc:	4647      	mov	r7, r8
    45de:	403e      	ands	r6, r7
    45e0:	46b2      	mov	sl, r6
    45e2:	4666      	mov	r6, ip
    45e4:	4657      	mov	r7, sl
    45e6:	433e      	orrs	r6, r7
    45e8:	d003      	beq.n	45f2 <long_division+0x96>
			r |= 0x01;
    45ea:	0006      	movs	r6, r0
    45ec:	4326      	orrs	r6, r4
    45ee:	0032      	movs	r2, r6
    45f0:	002b      	movs	r3, r5
		if (r >= d) {
    45f2:	9c00      	ldr	r4, [sp, #0]
    45f4:	9d01      	ldr	r5, [sp, #4]
    45f6:	429d      	cmp	r5, r3
    45f8:	d8db      	bhi.n	45b2 <long_division+0x56>
    45fa:	d1ce      	bne.n	459a <long_division+0x3e>
    45fc:	4294      	cmp	r4, r2
    45fe:	d8d8      	bhi.n	45b2 <long_division+0x56>
    4600:	e7cb      	b.n	459a <long_division+0x3e>
    4602:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    4604:	4658      	mov	r0, fp
    4606:	0019      	movs	r1, r3
    4608:	b007      	add	sp, #28
    460a:	bc3c      	pop	{r2, r3, r4, r5}
    460c:	4690      	mov	r8, r2
    460e:	4699      	mov	r9, r3
    4610:	46a2      	mov	sl, r4
    4612:	46ab      	mov	fp, r5
    4614:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004616 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    4616:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    4618:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    461a:	2340      	movs	r3, #64	; 0x40
    461c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    461e:	4281      	cmp	r1, r0
    4620:	d202      	bcs.n	4628 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    4622:	0018      	movs	r0, r3
    4624:	bd10      	pop	{r4, pc}
		baud_calculated++;
    4626:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    4628:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    462a:	1c63      	adds	r3, r4, #1
    462c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    462e:	4288      	cmp	r0, r1
    4630:	d9f9      	bls.n	4626 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4632:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    4634:	2cff      	cmp	r4, #255	; 0xff
    4636:	d8f4      	bhi.n	4622 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    4638:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    463a:	2300      	movs	r3, #0
    463c:	e7f1      	b.n	4622 <_sercom_get_sync_baud_val+0xc>
	...

00004640 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    4640:	b5f0      	push	{r4, r5, r6, r7, lr}
    4642:	b083      	sub	sp, #12
    4644:	000f      	movs	r7, r1
    4646:	0016      	movs	r6, r2
    4648:	aa08      	add	r2, sp, #32
    464a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    464c:	0004      	movs	r4, r0
    464e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4650:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    4652:	42bc      	cmp	r4, r7
    4654:	d902      	bls.n	465c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    4656:	0010      	movs	r0, r2
    4658:	b003      	add	sp, #12
    465a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    465c:	2b00      	cmp	r3, #0
    465e:	d114      	bne.n	468a <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    4660:	0002      	movs	r2, r0
    4662:	0008      	movs	r0, r1
    4664:	2100      	movs	r1, #0
    4666:	4c19      	ldr	r4, [pc, #100]	; (46cc <_sercom_get_async_baud_val+0x8c>)
    4668:	47a0      	blx	r4
    466a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    466c:	003a      	movs	r2, r7
    466e:	2300      	movs	r3, #0
    4670:	2000      	movs	r0, #0
    4672:	4c17      	ldr	r4, [pc, #92]	; (46d0 <_sercom_get_async_baud_val+0x90>)
    4674:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    4676:	2200      	movs	r2, #0
    4678:	2301      	movs	r3, #1
    467a:	1a12      	subs	r2, r2, r0
    467c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    467e:	0c12      	lsrs	r2, r2, #16
    4680:	041b      	lsls	r3, r3, #16
    4682:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    4684:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    4686:	2200      	movs	r2, #0
    4688:	e7e5      	b.n	4656 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    468a:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    468c:	2b01      	cmp	r3, #1
    468e:	d1f9      	bne.n	4684 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    4690:	000a      	movs	r2, r1
    4692:	2300      	movs	r3, #0
    4694:	2100      	movs	r1, #0
    4696:	4c0d      	ldr	r4, [pc, #52]	; (46cc <_sercom_get_async_baud_val+0x8c>)
    4698:	47a0      	blx	r4
    469a:	0002      	movs	r2, r0
    469c:	000b      	movs	r3, r1
    469e:	9200      	str	r2, [sp, #0]
    46a0:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    46a2:	0038      	movs	r0, r7
    46a4:	2100      	movs	r1, #0
    46a6:	4c0a      	ldr	r4, [pc, #40]	; (46d0 <_sercom_get_async_baud_val+0x90>)
    46a8:	47a0      	blx	r4
    46aa:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    46ac:	2380      	movs	r3, #128	; 0x80
    46ae:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    46b0:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    46b2:	4298      	cmp	r0, r3
    46b4:	d8cf      	bhi.n	4656 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    46b6:	0f79      	lsrs	r1, r7, #29
    46b8:	00f8      	lsls	r0, r7, #3
    46ba:	9a00      	ldr	r2, [sp, #0]
    46bc:	9b01      	ldr	r3, [sp, #4]
    46be:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    46c0:	00ea      	lsls	r2, r5, #3
    46c2:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    46c4:	b2d2      	uxtb	r2, r2
    46c6:	0352      	lsls	r2, r2, #13
    46c8:	432a      	orrs	r2, r5
    46ca:	e7db      	b.n	4684 <_sercom_get_async_baud_val+0x44>
    46cc:	00007e85 	.word	0x00007e85
    46d0:	0000455d 	.word	0x0000455d

000046d4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    46d4:	b510      	push	{r4, lr}
    46d6:	b082      	sub	sp, #8
    46d8:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    46da:	4b0e      	ldr	r3, [pc, #56]	; (4714 <sercom_set_gclk_generator+0x40>)
    46dc:	781b      	ldrb	r3, [r3, #0]
    46de:	2b00      	cmp	r3, #0
    46e0:	d007      	beq.n	46f2 <sercom_set_gclk_generator+0x1e>
    46e2:	2900      	cmp	r1, #0
    46e4:	d105      	bne.n	46f2 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    46e6:	4b0b      	ldr	r3, [pc, #44]	; (4714 <sercom_set_gclk_generator+0x40>)
    46e8:	785b      	ldrb	r3, [r3, #1]
    46ea:	4283      	cmp	r3, r0
    46ec:	d010      	beq.n	4710 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    46ee:	201d      	movs	r0, #29
    46f0:	e00c      	b.n	470c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    46f2:	a901      	add	r1, sp, #4
    46f4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    46f6:	2013      	movs	r0, #19
    46f8:	4b07      	ldr	r3, [pc, #28]	; (4718 <sercom_set_gclk_generator+0x44>)
    46fa:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    46fc:	2013      	movs	r0, #19
    46fe:	4b07      	ldr	r3, [pc, #28]	; (471c <sercom_set_gclk_generator+0x48>)
    4700:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    4702:	4b04      	ldr	r3, [pc, #16]	; (4714 <sercom_set_gclk_generator+0x40>)
    4704:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    4706:	2201      	movs	r2, #1
    4708:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    470a:	2000      	movs	r0, #0
}
    470c:	b002      	add	sp, #8
    470e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    4710:	2000      	movs	r0, #0
    4712:	e7fb      	b.n	470c <sercom_set_gclk_generator+0x38>
    4714:	200000f4 	.word	0x200000f4
    4718:	00005a0d 	.word	0x00005a0d
    471c:	00005981 	.word	0x00005981

00004720 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    4720:	4b40      	ldr	r3, [pc, #256]	; (4824 <_sercom_get_default_pad+0x104>)
    4722:	4298      	cmp	r0, r3
    4724:	d031      	beq.n	478a <_sercom_get_default_pad+0x6a>
    4726:	d90a      	bls.n	473e <_sercom_get_default_pad+0x1e>
    4728:	4b3f      	ldr	r3, [pc, #252]	; (4828 <_sercom_get_default_pad+0x108>)
    472a:	4298      	cmp	r0, r3
    472c:	d04d      	beq.n	47ca <_sercom_get_default_pad+0xaa>
    472e:	4b3f      	ldr	r3, [pc, #252]	; (482c <_sercom_get_default_pad+0x10c>)
    4730:	4298      	cmp	r0, r3
    4732:	d05a      	beq.n	47ea <_sercom_get_default_pad+0xca>
    4734:	4b3e      	ldr	r3, [pc, #248]	; (4830 <_sercom_get_default_pad+0x110>)
    4736:	4298      	cmp	r0, r3
    4738:	d037      	beq.n	47aa <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    473a:	2000      	movs	r0, #0
}
    473c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    473e:	4b3d      	ldr	r3, [pc, #244]	; (4834 <_sercom_get_default_pad+0x114>)
    4740:	4298      	cmp	r0, r3
    4742:	d00c      	beq.n	475e <_sercom_get_default_pad+0x3e>
    4744:	4b3c      	ldr	r3, [pc, #240]	; (4838 <_sercom_get_default_pad+0x118>)
    4746:	4298      	cmp	r0, r3
    4748:	d1f7      	bne.n	473a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    474a:	2901      	cmp	r1, #1
    474c:	d017      	beq.n	477e <_sercom_get_default_pad+0x5e>
    474e:	2900      	cmp	r1, #0
    4750:	d05d      	beq.n	480e <_sercom_get_default_pad+0xee>
    4752:	2902      	cmp	r1, #2
    4754:	d015      	beq.n	4782 <_sercom_get_default_pad+0x62>
    4756:	2903      	cmp	r1, #3
    4758:	d015      	beq.n	4786 <_sercom_get_default_pad+0x66>
	return 0;
    475a:	2000      	movs	r0, #0
    475c:	e7ee      	b.n	473c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    475e:	2901      	cmp	r1, #1
    4760:	d007      	beq.n	4772 <_sercom_get_default_pad+0x52>
    4762:	2900      	cmp	r1, #0
    4764:	d051      	beq.n	480a <_sercom_get_default_pad+0xea>
    4766:	2902      	cmp	r1, #2
    4768:	d005      	beq.n	4776 <_sercom_get_default_pad+0x56>
    476a:	2903      	cmp	r1, #3
    476c:	d005      	beq.n	477a <_sercom_get_default_pad+0x5a>
	return 0;
    476e:	2000      	movs	r0, #0
    4770:	e7e4      	b.n	473c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4772:	4832      	ldr	r0, [pc, #200]	; (483c <_sercom_get_default_pad+0x11c>)
    4774:	e7e2      	b.n	473c <_sercom_get_default_pad+0x1c>
    4776:	4832      	ldr	r0, [pc, #200]	; (4840 <_sercom_get_default_pad+0x120>)
    4778:	e7e0      	b.n	473c <_sercom_get_default_pad+0x1c>
    477a:	4832      	ldr	r0, [pc, #200]	; (4844 <_sercom_get_default_pad+0x124>)
    477c:	e7de      	b.n	473c <_sercom_get_default_pad+0x1c>
    477e:	4832      	ldr	r0, [pc, #200]	; (4848 <_sercom_get_default_pad+0x128>)
    4780:	e7dc      	b.n	473c <_sercom_get_default_pad+0x1c>
    4782:	4832      	ldr	r0, [pc, #200]	; (484c <_sercom_get_default_pad+0x12c>)
    4784:	e7da      	b.n	473c <_sercom_get_default_pad+0x1c>
    4786:	4832      	ldr	r0, [pc, #200]	; (4850 <_sercom_get_default_pad+0x130>)
    4788:	e7d8      	b.n	473c <_sercom_get_default_pad+0x1c>
    478a:	2901      	cmp	r1, #1
    478c:	d007      	beq.n	479e <_sercom_get_default_pad+0x7e>
    478e:	2900      	cmp	r1, #0
    4790:	d03f      	beq.n	4812 <_sercom_get_default_pad+0xf2>
    4792:	2902      	cmp	r1, #2
    4794:	d005      	beq.n	47a2 <_sercom_get_default_pad+0x82>
    4796:	2903      	cmp	r1, #3
    4798:	d005      	beq.n	47a6 <_sercom_get_default_pad+0x86>
	return 0;
    479a:	2000      	movs	r0, #0
    479c:	e7ce      	b.n	473c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    479e:	482d      	ldr	r0, [pc, #180]	; (4854 <_sercom_get_default_pad+0x134>)
    47a0:	e7cc      	b.n	473c <_sercom_get_default_pad+0x1c>
    47a2:	482d      	ldr	r0, [pc, #180]	; (4858 <_sercom_get_default_pad+0x138>)
    47a4:	e7ca      	b.n	473c <_sercom_get_default_pad+0x1c>
    47a6:	482d      	ldr	r0, [pc, #180]	; (485c <_sercom_get_default_pad+0x13c>)
    47a8:	e7c8      	b.n	473c <_sercom_get_default_pad+0x1c>
    47aa:	2901      	cmp	r1, #1
    47ac:	d007      	beq.n	47be <_sercom_get_default_pad+0x9e>
    47ae:	2900      	cmp	r1, #0
    47b0:	d031      	beq.n	4816 <_sercom_get_default_pad+0xf6>
    47b2:	2902      	cmp	r1, #2
    47b4:	d005      	beq.n	47c2 <_sercom_get_default_pad+0xa2>
    47b6:	2903      	cmp	r1, #3
    47b8:	d005      	beq.n	47c6 <_sercom_get_default_pad+0xa6>
	return 0;
    47ba:	2000      	movs	r0, #0
    47bc:	e7be      	b.n	473c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    47be:	4828      	ldr	r0, [pc, #160]	; (4860 <_sercom_get_default_pad+0x140>)
    47c0:	e7bc      	b.n	473c <_sercom_get_default_pad+0x1c>
    47c2:	4828      	ldr	r0, [pc, #160]	; (4864 <_sercom_get_default_pad+0x144>)
    47c4:	e7ba      	b.n	473c <_sercom_get_default_pad+0x1c>
    47c6:	4828      	ldr	r0, [pc, #160]	; (4868 <_sercom_get_default_pad+0x148>)
    47c8:	e7b8      	b.n	473c <_sercom_get_default_pad+0x1c>
    47ca:	2901      	cmp	r1, #1
    47cc:	d007      	beq.n	47de <_sercom_get_default_pad+0xbe>
    47ce:	2900      	cmp	r1, #0
    47d0:	d023      	beq.n	481a <_sercom_get_default_pad+0xfa>
    47d2:	2902      	cmp	r1, #2
    47d4:	d005      	beq.n	47e2 <_sercom_get_default_pad+0xc2>
    47d6:	2903      	cmp	r1, #3
    47d8:	d005      	beq.n	47e6 <_sercom_get_default_pad+0xc6>
	return 0;
    47da:	2000      	movs	r0, #0
    47dc:	e7ae      	b.n	473c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    47de:	4823      	ldr	r0, [pc, #140]	; (486c <_sercom_get_default_pad+0x14c>)
    47e0:	e7ac      	b.n	473c <_sercom_get_default_pad+0x1c>
    47e2:	4823      	ldr	r0, [pc, #140]	; (4870 <_sercom_get_default_pad+0x150>)
    47e4:	e7aa      	b.n	473c <_sercom_get_default_pad+0x1c>
    47e6:	4823      	ldr	r0, [pc, #140]	; (4874 <_sercom_get_default_pad+0x154>)
    47e8:	e7a8      	b.n	473c <_sercom_get_default_pad+0x1c>
    47ea:	2901      	cmp	r1, #1
    47ec:	d007      	beq.n	47fe <_sercom_get_default_pad+0xde>
    47ee:	2900      	cmp	r1, #0
    47f0:	d015      	beq.n	481e <_sercom_get_default_pad+0xfe>
    47f2:	2902      	cmp	r1, #2
    47f4:	d005      	beq.n	4802 <_sercom_get_default_pad+0xe2>
    47f6:	2903      	cmp	r1, #3
    47f8:	d005      	beq.n	4806 <_sercom_get_default_pad+0xe6>
	return 0;
    47fa:	2000      	movs	r0, #0
    47fc:	e79e      	b.n	473c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    47fe:	481e      	ldr	r0, [pc, #120]	; (4878 <_sercom_get_default_pad+0x158>)
    4800:	e79c      	b.n	473c <_sercom_get_default_pad+0x1c>
    4802:	481e      	ldr	r0, [pc, #120]	; (487c <_sercom_get_default_pad+0x15c>)
    4804:	e79a      	b.n	473c <_sercom_get_default_pad+0x1c>
    4806:	481e      	ldr	r0, [pc, #120]	; (4880 <_sercom_get_default_pad+0x160>)
    4808:	e798      	b.n	473c <_sercom_get_default_pad+0x1c>
    480a:	481e      	ldr	r0, [pc, #120]	; (4884 <_sercom_get_default_pad+0x164>)
    480c:	e796      	b.n	473c <_sercom_get_default_pad+0x1c>
    480e:	2003      	movs	r0, #3
    4810:	e794      	b.n	473c <_sercom_get_default_pad+0x1c>
    4812:	481d      	ldr	r0, [pc, #116]	; (4888 <_sercom_get_default_pad+0x168>)
    4814:	e792      	b.n	473c <_sercom_get_default_pad+0x1c>
    4816:	481d      	ldr	r0, [pc, #116]	; (488c <_sercom_get_default_pad+0x16c>)
    4818:	e790      	b.n	473c <_sercom_get_default_pad+0x1c>
    481a:	481d      	ldr	r0, [pc, #116]	; (4890 <_sercom_get_default_pad+0x170>)
    481c:	e78e      	b.n	473c <_sercom_get_default_pad+0x1c>
    481e:	481d      	ldr	r0, [pc, #116]	; (4894 <_sercom_get_default_pad+0x174>)
    4820:	e78c      	b.n	473c <_sercom_get_default_pad+0x1c>
    4822:	46c0      	nop			; (mov r8, r8)
    4824:	42001000 	.word	0x42001000
    4828:	42001800 	.word	0x42001800
    482c:	42001c00 	.word	0x42001c00
    4830:	42001400 	.word	0x42001400
    4834:	42000800 	.word	0x42000800
    4838:	42000c00 	.word	0x42000c00
    483c:	00050003 	.word	0x00050003
    4840:	00060003 	.word	0x00060003
    4844:	00070003 	.word	0x00070003
    4848:	00010003 	.word	0x00010003
    484c:	001e0003 	.word	0x001e0003
    4850:	001f0003 	.word	0x001f0003
    4854:	00090003 	.word	0x00090003
    4858:	000a0003 	.word	0x000a0003
    485c:	000b0003 	.word	0x000b0003
    4860:	00110003 	.word	0x00110003
    4864:	00120003 	.word	0x00120003
    4868:	00130003 	.word	0x00130003
    486c:	000d0003 	.word	0x000d0003
    4870:	000e0003 	.word	0x000e0003
    4874:	000f0003 	.word	0x000f0003
    4878:	00170003 	.word	0x00170003
    487c:	00180003 	.word	0x00180003
    4880:	00190003 	.word	0x00190003
    4884:	00040003 	.word	0x00040003
    4888:	00080003 	.word	0x00080003
    488c:	00100003 	.word	0x00100003
    4890:	000c0003 	.word	0x000c0003
    4894:	00160003 	.word	0x00160003

00004898 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    4898:	b530      	push	{r4, r5, lr}
    489a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    489c:	4b0b      	ldr	r3, [pc, #44]	; (48cc <_sercom_get_sercom_inst_index+0x34>)
    489e:	466a      	mov	r2, sp
    48a0:	cb32      	ldmia	r3!, {r1, r4, r5}
    48a2:	c232      	stmia	r2!, {r1, r4, r5}
    48a4:	cb32      	ldmia	r3!, {r1, r4, r5}
    48a6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    48a8:	9b00      	ldr	r3, [sp, #0]
    48aa:	4283      	cmp	r3, r0
    48ac:	d00b      	beq.n	48c6 <_sercom_get_sercom_inst_index+0x2e>
    48ae:	2301      	movs	r3, #1
    48b0:	009a      	lsls	r2, r3, #2
    48b2:	4669      	mov	r1, sp
    48b4:	5852      	ldr	r2, [r2, r1]
    48b6:	4282      	cmp	r2, r0
    48b8:	d006      	beq.n	48c8 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    48ba:	3301      	adds	r3, #1
    48bc:	2b06      	cmp	r3, #6
    48be:	d1f7      	bne.n	48b0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    48c0:	2000      	movs	r0, #0
}
    48c2:	b007      	add	sp, #28
    48c4:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    48c6:	2300      	movs	r3, #0
			return i;
    48c8:	b2d8      	uxtb	r0, r3
    48ca:	e7fa      	b.n	48c2 <_sercom_get_sercom_inst_index+0x2a>
    48cc:	0000bc60 	.word	0x0000bc60

000048d0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    48d0:	4770      	bx	lr
	...

000048d4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    48d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    48d6:	4b0a      	ldr	r3, [pc, #40]	; (4900 <_sercom_set_handler+0x2c>)
    48d8:	781b      	ldrb	r3, [r3, #0]
    48da:	2b00      	cmp	r3, #0
    48dc:	d10c      	bne.n	48f8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    48de:	4f09      	ldr	r7, [pc, #36]	; (4904 <_sercom_set_handler+0x30>)
    48e0:	4e09      	ldr	r6, [pc, #36]	; (4908 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    48e2:	4d0a      	ldr	r5, [pc, #40]	; (490c <_sercom_set_handler+0x38>)
    48e4:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    48e6:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    48e8:	195a      	adds	r2, r3, r5
    48ea:	6014      	str	r4, [r2, #0]
    48ec:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    48ee:	2b18      	cmp	r3, #24
    48f0:	d1f9      	bne.n	48e6 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    48f2:	2201      	movs	r2, #1
    48f4:	4b02      	ldr	r3, [pc, #8]	; (4900 <_sercom_set_handler+0x2c>)
    48f6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    48f8:	0080      	lsls	r0, r0, #2
    48fa:	4b02      	ldr	r3, [pc, #8]	; (4904 <_sercom_set_handler+0x30>)
    48fc:	50c1      	str	r1, [r0, r3]
}
    48fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4900:	200000f6 	.word	0x200000f6
    4904:	200000f8 	.word	0x200000f8
    4908:	000048d1 	.word	0x000048d1
    490c:	200003ec 	.word	0x200003ec

00004910 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    4910:	b500      	push	{lr}
    4912:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    4914:	2309      	movs	r3, #9
    4916:	466a      	mov	r2, sp
    4918:	7013      	strb	r3, [r2, #0]
    491a:	3301      	adds	r3, #1
    491c:	7053      	strb	r3, [r2, #1]
    491e:	3301      	adds	r3, #1
    4920:	7093      	strb	r3, [r2, #2]
    4922:	3301      	adds	r3, #1
    4924:	70d3      	strb	r3, [r2, #3]
    4926:	3301      	adds	r3, #1
    4928:	7113      	strb	r3, [r2, #4]
    492a:	3301      	adds	r3, #1
    492c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    492e:	4b03      	ldr	r3, [pc, #12]	; (493c <_sercom_get_interrupt_vector+0x2c>)
    4930:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    4932:	466b      	mov	r3, sp
    4934:	5618      	ldrsb	r0, [r3, r0]
}
    4936:	b003      	add	sp, #12
    4938:	bd00      	pop	{pc}
    493a:	46c0      	nop			; (mov r8, r8)
    493c:	00004899 	.word	0x00004899

00004940 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    4940:	b510      	push	{r4, lr}
    4942:	4b02      	ldr	r3, [pc, #8]	; (494c <SERCOM0_Handler+0xc>)
    4944:	681b      	ldr	r3, [r3, #0]
    4946:	2000      	movs	r0, #0
    4948:	4798      	blx	r3
    494a:	bd10      	pop	{r4, pc}
    494c:	200000f8 	.word	0x200000f8

00004950 <SERCOM1_Handler>:
    4950:	b510      	push	{r4, lr}
    4952:	4b02      	ldr	r3, [pc, #8]	; (495c <SERCOM1_Handler+0xc>)
    4954:	685b      	ldr	r3, [r3, #4]
    4956:	2001      	movs	r0, #1
    4958:	4798      	blx	r3
    495a:	bd10      	pop	{r4, pc}
    495c:	200000f8 	.word	0x200000f8

00004960 <SERCOM2_Handler>:
    4960:	b510      	push	{r4, lr}
    4962:	4b02      	ldr	r3, [pc, #8]	; (496c <SERCOM2_Handler+0xc>)
    4964:	689b      	ldr	r3, [r3, #8]
    4966:	2002      	movs	r0, #2
    4968:	4798      	blx	r3
    496a:	bd10      	pop	{r4, pc}
    496c:	200000f8 	.word	0x200000f8

00004970 <SERCOM3_Handler>:
    4970:	b510      	push	{r4, lr}
    4972:	4b02      	ldr	r3, [pc, #8]	; (497c <SERCOM3_Handler+0xc>)
    4974:	68db      	ldr	r3, [r3, #12]
    4976:	2003      	movs	r0, #3
    4978:	4798      	blx	r3
    497a:	bd10      	pop	{r4, pc}
    497c:	200000f8 	.word	0x200000f8

00004980 <SERCOM4_Handler>:
    4980:	b510      	push	{r4, lr}
    4982:	4b02      	ldr	r3, [pc, #8]	; (498c <SERCOM4_Handler+0xc>)
    4984:	691b      	ldr	r3, [r3, #16]
    4986:	2004      	movs	r0, #4
    4988:	4798      	blx	r3
    498a:	bd10      	pop	{r4, pc}
    498c:	200000f8 	.word	0x200000f8

00004990 <SERCOM5_Handler>:
    4990:	b510      	push	{r4, lr}
    4992:	4b02      	ldr	r3, [pc, #8]	; (499c <SERCOM5_Handler+0xc>)
    4994:	695b      	ldr	r3, [r3, #20]
    4996:	2005      	movs	r0, #5
    4998:	4798      	blx	r3
    499a:	bd10      	pop	{r4, pc}
    499c:	200000f8 	.word	0x200000f8

000049a0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    49a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    49a2:	b08b      	sub	sp, #44	; 0x2c
    49a4:	0005      	movs	r5, r0
    49a6:	000c      	movs	r4, r1
    49a8:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    49aa:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    49ac:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    49ae:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    49b0:	079b      	lsls	r3, r3, #30
    49b2:	d501      	bpl.n	49b8 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    49b4:	b00b      	add	sp, #44	; 0x2c
    49b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    49b8:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    49ba:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    49bc:	07db      	lsls	r3, r3, #31
    49be:	d4f9      	bmi.n	49b4 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    49c0:	0008      	movs	r0, r1
    49c2:	4b60      	ldr	r3, [pc, #384]	; (4b44 <spi_init+0x1a4>)
    49c4:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    49c6:	4a60      	ldr	r2, [pc, #384]	; (4b48 <spi_init+0x1a8>)
    49c8:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    49ca:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    49cc:	2301      	movs	r3, #1
    49ce:	40bb      	lsls	r3, r7
    49d0:	430b      	orrs	r3, r1
    49d2:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    49d4:	a909      	add	r1, sp, #36	; 0x24
    49d6:	2724      	movs	r7, #36	; 0x24
    49d8:	5df3      	ldrb	r3, [r6, r7]
    49da:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    49dc:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    49de:	b2c3      	uxtb	r3, r0
    49e0:	9301      	str	r3, [sp, #4]
    49e2:	0018      	movs	r0, r3
    49e4:	4b59      	ldr	r3, [pc, #356]	; (4b4c <spi_init+0x1ac>)
    49e6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    49e8:	9801      	ldr	r0, [sp, #4]
    49ea:	4b59      	ldr	r3, [pc, #356]	; (4b50 <spi_init+0x1b0>)
    49ec:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    49ee:	5df0      	ldrb	r0, [r6, r7]
    49f0:	2100      	movs	r1, #0
    49f2:	4b58      	ldr	r3, [pc, #352]	; (4b54 <spi_init+0x1b4>)
    49f4:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    49f6:	7833      	ldrb	r3, [r6, #0]
    49f8:	2b01      	cmp	r3, #1
    49fa:	d038      	beq.n	4a6e <spi_init+0xce>
    49fc:	002b      	movs	r3, r5
    49fe:	330c      	adds	r3, #12
    4a00:	0029      	movs	r1, r5
    4a02:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    4a04:	2200      	movs	r2, #0
    4a06:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    4a08:	428b      	cmp	r3, r1
    4a0a:	d1fc      	bne.n	4a06 <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    4a0c:	2300      	movs	r3, #0
    4a0e:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    4a10:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    4a12:	2400      	movs	r4, #0
    4a14:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    4a16:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    4a18:	3336      	adds	r3, #54	; 0x36
    4a1a:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    4a1c:	3301      	adds	r3, #1
    4a1e:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    4a20:	3301      	adds	r3, #1
    4a22:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    4a24:	3b35      	subs	r3, #53	; 0x35
    4a26:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    4a28:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    4a2a:	6828      	ldr	r0, [r5, #0]
    4a2c:	4b45      	ldr	r3, [pc, #276]	; (4b44 <spi_init+0x1a4>)
    4a2e:	4798      	blx	r3
    4a30:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    4a32:	4949      	ldr	r1, [pc, #292]	; (4b58 <spi_init+0x1b8>)
    4a34:	4b49      	ldr	r3, [pc, #292]	; (4b5c <spi_init+0x1bc>)
    4a36:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4a38:	00bf      	lsls	r7, r7, #2
    4a3a:	4b49      	ldr	r3, [pc, #292]	; (4b60 <spi_init+0x1c0>)
    4a3c:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4a3e:	682f      	ldr	r7, [r5, #0]
    4a40:	ab04      	add	r3, sp, #16
    4a42:	2280      	movs	r2, #128	; 0x80
    4a44:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4a46:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4a48:	3a7f      	subs	r2, #127	; 0x7f
    4a4a:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4a4c:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    4a4e:	7833      	ldrb	r3, [r6, #0]
    4a50:	2b00      	cmp	r3, #0
    4a52:	d102      	bne.n	4a5a <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4a54:	2200      	movs	r2, #0
    4a56:	ab04      	add	r3, sp, #16
    4a58:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    4a5a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    4a5c:	9305      	str	r3, [sp, #20]
    4a5e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    4a60:	9306      	str	r3, [sp, #24]
    4a62:	6b33      	ldr	r3, [r6, #48]	; 0x30
    4a64:	9307      	str	r3, [sp, #28]
    4a66:	6b73      	ldr	r3, [r6, #52]	; 0x34
    4a68:	9308      	str	r3, [sp, #32]
    4a6a:	2400      	movs	r4, #0
    4a6c:	e00b      	b.n	4a86 <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    4a6e:	6823      	ldr	r3, [r4, #0]
    4a70:	220c      	movs	r2, #12
    4a72:	4313      	orrs	r3, r2
    4a74:	6023      	str	r3, [r4, #0]
    4a76:	e7c1      	b.n	49fc <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4a78:	0038      	movs	r0, r7
    4a7a:	4b3a      	ldr	r3, [pc, #232]	; (4b64 <spi_init+0x1c4>)
    4a7c:	4798      	blx	r3
    4a7e:	e00a      	b.n	4a96 <spi_init+0xf6>
    4a80:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    4a82:	2c04      	cmp	r4, #4
    4a84:	d010      	beq.n	4aa8 <spi_init+0x108>
    4a86:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4a88:	00a3      	lsls	r3, r4, #2
    4a8a:	aa02      	add	r2, sp, #8
    4a8c:	200c      	movs	r0, #12
    4a8e:	1812      	adds	r2, r2, r0
    4a90:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    4a92:	2800      	cmp	r0, #0
    4a94:	d0f0      	beq.n	4a78 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    4a96:	1c43      	adds	r3, r0, #1
    4a98:	d0f2      	beq.n	4a80 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4a9a:	a904      	add	r1, sp, #16
    4a9c:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4a9e:	0c00      	lsrs	r0, r0, #16
    4aa0:	b2c0      	uxtb	r0, r0
    4aa2:	4b31      	ldr	r3, [pc, #196]	; (4b68 <spi_init+0x1c8>)
    4aa4:	4798      	blx	r3
    4aa6:	e7eb      	b.n	4a80 <spi_init+0xe0>
	module->mode             = config->mode;
    4aa8:	7833      	ldrb	r3, [r6, #0]
    4aaa:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    4aac:	7c33      	ldrb	r3, [r6, #16]
    4aae:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    4ab0:	7cb3      	ldrb	r3, [r6, #18]
    4ab2:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    4ab4:	7d33      	ldrb	r3, [r6, #20]
    4ab6:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    4ab8:	2200      	movs	r2, #0
    4aba:	ab02      	add	r3, sp, #8
    4abc:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    4abe:	7833      	ldrb	r3, [r6, #0]
    4ac0:	2b01      	cmp	r3, #1
    4ac2:	d028      	beq.n	4b16 <spi_init+0x176>
	ctrla |= config->transfer_mode;
    4ac4:	6873      	ldr	r3, [r6, #4]
    4ac6:	68b2      	ldr	r2, [r6, #8]
    4ac8:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    4aca:	68f2      	ldr	r2, [r6, #12]
    4acc:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    4ace:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    4ad0:	7c72      	ldrb	r2, [r6, #17]
    4ad2:	2a00      	cmp	r2, #0
    4ad4:	d103      	bne.n	4ade <spi_init+0x13e>
    4ad6:	4a25      	ldr	r2, [pc, #148]	; (4b6c <spi_init+0x1cc>)
    4ad8:	7892      	ldrb	r2, [r2, #2]
    4ada:	0792      	lsls	r2, r2, #30
    4adc:	d501      	bpl.n	4ae2 <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    4ade:	2280      	movs	r2, #128	; 0x80
    4ae0:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    4ae2:	7cb2      	ldrb	r2, [r6, #18]
    4ae4:	2a00      	cmp	r2, #0
    4ae6:	d002      	beq.n	4aee <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    4ae8:	2280      	movs	r2, #128	; 0x80
    4aea:	0292      	lsls	r2, r2, #10
    4aec:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    4aee:	7cf2      	ldrb	r2, [r6, #19]
    4af0:	2a00      	cmp	r2, #0
    4af2:	d002      	beq.n	4afa <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    4af4:	2280      	movs	r2, #128	; 0x80
    4af6:	0092      	lsls	r2, r2, #2
    4af8:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    4afa:	7d32      	ldrb	r2, [r6, #20]
    4afc:	2a00      	cmp	r2, #0
    4afe:	d002      	beq.n	4b06 <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    4b00:	2280      	movs	r2, #128	; 0x80
    4b02:	0192      	lsls	r2, r2, #6
    4b04:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    4b06:	683a      	ldr	r2, [r7, #0]
    4b08:	4313      	orrs	r3, r2
    4b0a:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    4b0c:	687b      	ldr	r3, [r7, #4]
    4b0e:	430b      	orrs	r3, r1
    4b10:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    4b12:	2000      	movs	r0, #0
    4b14:	e74e      	b.n	49b4 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4b16:	6828      	ldr	r0, [r5, #0]
    4b18:	4b0a      	ldr	r3, [pc, #40]	; (4b44 <spi_init+0x1a4>)
    4b1a:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4b1c:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    4b1e:	b2c0      	uxtb	r0, r0
    4b20:	4b13      	ldr	r3, [pc, #76]	; (4b70 <spi_init+0x1d0>)
    4b22:	4798      	blx	r3
    4b24:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    4b26:	ab02      	add	r3, sp, #8
    4b28:	1d9a      	adds	r2, r3, #6
    4b2a:	69b0      	ldr	r0, [r6, #24]
    4b2c:	4b11      	ldr	r3, [pc, #68]	; (4b74 <spi_init+0x1d4>)
    4b2e:	4798      	blx	r3
    4b30:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    4b32:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    4b34:	2b00      	cmp	r3, #0
    4b36:	d000      	beq.n	4b3a <spi_init+0x19a>
    4b38:	e73c      	b.n	49b4 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    4b3a:	ab02      	add	r3, sp, #8
    4b3c:	3306      	adds	r3, #6
    4b3e:	781b      	ldrb	r3, [r3, #0]
    4b40:	733b      	strb	r3, [r7, #12]
    4b42:	e7bf      	b.n	4ac4 <spi_init+0x124>
    4b44:	00004899 	.word	0x00004899
    4b48:	40000400 	.word	0x40000400
    4b4c:	00005a0d 	.word	0x00005a0d
    4b50:	00005981 	.word	0x00005981
    4b54:	000046d5 	.word	0x000046d5
    4b58:	00004c6d 	.word	0x00004c6d
    4b5c:	000048d5 	.word	0x000048d5
    4b60:	200003ec 	.word	0x200003ec
    4b64:	00004721 	.word	0x00004721
    4b68:	00005b05 	.word	0x00005b05
    4b6c:	41002000 	.word	0x41002000
    4b70:	00005a29 	.word	0x00005a29
    4b74:	00004617 	.word	0x00004617

00004b78 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    4b78:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    4b7a:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    4b7c:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    4b7e:	2c01      	cmp	r4, #1
    4b80:	d001      	beq.n	4b86 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    4b82:	0018      	movs	r0, r3
    4b84:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    4b86:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    4b88:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    4b8a:	2c00      	cmp	r4, #0
    4b8c:	d1f9      	bne.n	4b82 <spi_select_slave+0xa>
		if (select) {
    4b8e:	2a00      	cmp	r2, #0
    4b90:	d058      	beq.n	4c44 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    4b92:	784b      	ldrb	r3, [r1, #1]
    4b94:	2b00      	cmp	r3, #0
    4b96:	d044      	beq.n	4c22 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4b98:	6803      	ldr	r3, [r0, #0]
    4b9a:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    4b9c:	07db      	lsls	r3, r3, #31
    4b9e:	d410      	bmi.n	4bc2 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    4ba0:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    4ba2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    4ba4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4ba6:	2900      	cmp	r1, #0
    4ba8:	d104      	bne.n	4bb4 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    4baa:	0953      	lsrs	r3, r2, #5
    4bac:	01db      	lsls	r3, r3, #7
    4bae:	492e      	ldr	r1, [pc, #184]	; (4c68 <spi_select_slave+0xf0>)
    4bb0:	468c      	mov	ip, r1
    4bb2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4bb4:	211f      	movs	r1, #31
    4bb6:	4011      	ands	r1, r2
    4bb8:	2201      	movs	r2, #1
    4bba:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    4bbc:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    4bbe:	2305      	movs	r3, #5
    4bc0:	e7df      	b.n	4b82 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    4bc2:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    4bc4:	09d4      	lsrs	r4, r2, #7
		return NULL;
    4bc6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4bc8:	2c00      	cmp	r4, #0
    4bca:	d104      	bne.n	4bd6 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    4bcc:	0953      	lsrs	r3, r2, #5
    4bce:	01db      	lsls	r3, r3, #7
    4bd0:	4c25      	ldr	r4, [pc, #148]	; (4c68 <spi_select_slave+0xf0>)
    4bd2:	46a4      	mov	ip, r4
    4bd4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4bd6:	241f      	movs	r4, #31
    4bd8:	4014      	ands	r4, r2
    4bda:	2201      	movs	r2, #1
    4bdc:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    4bde:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4be0:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4be2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4be4:	07d2      	lsls	r2, r2, #31
    4be6:	d501      	bpl.n	4bec <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4be8:	788a      	ldrb	r2, [r1, #2]
    4bea:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    4bec:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    4bee:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    4bf0:	2a00      	cmp	r2, #0
    4bf2:	d1c6      	bne.n	4b82 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    4bf4:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    4bf6:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4bf8:	7e13      	ldrb	r3, [r2, #24]
    4bfa:	420b      	tst	r3, r1
    4bfc:	d0fc      	beq.n	4bf8 <spi_select_slave+0x80>
    4bfe:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    4c00:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    4c02:	0749      	lsls	r1, r1, #29
    4c04:	d5bd      	bpl.n	4b82 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4c06:	8b53      	ldrh	r3, [r2, #26]
    4c08:	075b      	lsls	r3, r3, #29
    4c0a:	d501      	bpl.n	4c10 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4c0c:	2304      	movs	r3, #4
    4c0e:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4c10:	7983      	ldrb	r3, [r0, #6]
    4c12:	2b01      	cmp	r3, #1
    4c14:	d002      	beq.n	4c1c <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4c16:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4c18:	2300      	movs	r3, #0
    4c1a:	e7b2      	b.n	4b82 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4c1c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4c1e:	2300      	movs	r3, #0
    4c20:	e7af      	b.n	4b82 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    4c22:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    4c24:	09d1      	lsrs	r1, r2, #7
		return NULL;
    4c26:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4c28:	2900      	cmp	r1, #0
    4c2a:	d104      	bne.n	4c36 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    4c2c:	0953      	lsrs	r3, r2, #5
    4c2e:	01db      	lsls	r3, r3, #7
    4c30:	490d      	ldr	r1, [pc, #52]	; (4c68 <spi_select_slave+0xf0>)
    4c32:	468c      	mov	ip, r1
    4c34:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4c36:	211f      	movs	r1, #31
    4c38:	4011      	ands	r1, r2
    4c3a:	2201      	movs	r2, #1
    4c3c:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    4c3e:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    4c40:	2300      	movs	r3, #0
    4c42:	e79e      	b.n	4b82 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    4c44:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    4c46:	09d1      	lsrs	r1, r2, #7
		return NULL;
    4c48:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4c4a:	2900      	cmp	r1, #0
    4c4c:	d104      	bne.n	4c58 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    4c4e:	0953      	lsrs	r3, r2, #5
    4c50:	01db      	lsls	r3, r3, #7
    4c52:	4905      	ldr	r1, [pc, #20]	; (4c68 <spi_select_slave+0xf0>)
    4c54:	468c      	mov	ip, r1
    4c56:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4c58:	211f      	movs	r1, #31
    4c5a:	4011      	ands	r1, r2
    4c5c:	2201      	movs	r2, #1
    4c5e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    4c60:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    4c62:	2300      	movs	r3, #0
    4c64:	e78d      	b.n	4b82 <spi_select_slave+0xa>
    4c66:	46c0      	nop			; (mov r8, r8)
    4c68:	41004400 	.word	0x41004400

00004c6c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    4c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    4c6e:	0080      	lsls	r0, r0, #2
    4c70:	4b70      	ldr	r3, [pc, #448]	; (4e34 <_spi_interrupt_handler+0x1c8>)
    4c72:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4c74:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    4c76:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    4c78:	5ce7      	ldrb	r7, [r4, r3]
    4c7a:	2236      	movs	r2, #54	; 0x36
    4c7c:	5ca2      	ldrb	r2, [r4, r2]
    4c7e:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    4c80:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    4c82:	7db5      	ldrb	r5, [r6, #22]
    4c84:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    4c86:	07eb      	lsls	r3, r5, #31
    4c88:	d502      	bpl.n	4c90 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4c8a:	7963      	ldrb	r3, [r4, #5]
    4c8c:	2b01      	cmp	r3, #1
    4c8e:	d01e      	beq.n	4cce <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    4c90:	076b      	lsls	r3, r5, #29
    4c92:	d511      	bpl.n	4cb8 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4c94:	8b73      	ldrh	r3, [r6, #26]
    4c96:	075b      	lsls	r3, r3, #29
    4c98:	d55a      	bpl.n	4d50 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    4c9a:	7a63      	ldrb	r3, [r4, #9]
    4c9c:	2b01      	cmp	r3, #1
    4c9e:	d008      	beq.n	4cb2 <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    4ca0:	221e      	movs	r2, #30
    4ca2:	2338      	movs	r3, #56	; 0x38
    4ca4:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    4ca6:	3b35      	subs	r3, #53	; 0x35
    4ca8:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    4caa:	3302      	adds	r3, #2
    4cac:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    4cae:	073b      	lsls	r3, r7, #28
    4cb0:	d44a      	bmi.n	4d48 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    4cb2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4cb4:	2304      	movs	r3, #4
    4cb6:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    4cb8:	07ab      	lsls	r3, r5, #30
    4cba:	d503      	bpl.n	4cc4 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4cbc:	7963      	ldrb	r3, [r4, #5]
    4cbe:	2b01      	cmp	r3, #1
    4cc0:	d100      	bne.n	4cc4 <_spi_interrupt_handler+0x58>
    4cc2:	e097      	b.n	4df4 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    4cc4:	b26d      	sxtb	r5, r5
    4cc6:	2d00      	cmp	r5, #0
    4cc8:	da00      	bge.n	4ccc <_spi_interrupt_handler+0x60>
    4cca:	e0a9      	b.n	4e20 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    4ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    4cce:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    4cd0:	2b00      	cmp	r3, #0
    4cd2:	d022      	beq.n	4d1a <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    4cd4:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    4cd6:	2b00      	cmp	r3, #0
    4cd8:	d0da      	beq.n	4c90 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4cda:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    4cdc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4cde:	7813      	ldrb	r3, [r2, #0]
    4ce0:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    4ce2:	1c50      	adds	r0, r2, #1
    4ce4:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4ce6:	79a0      	ldrb	r0, [r4, #6]
    4ce8:	2801      	cmp	r0, #1
    4cea:	d027      	beq.n	4d3c <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    4cec:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    4cee:	05db      	lsls	r3, r3, #23
    4cf0:	0ddb      	lsrs	r3, r3, #23
    4cf2:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    4cf4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    4cf6:	3b01      	subs	r3, #1
    4cf8:	b29b      	uxth	r3, r3
    4cfa:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    4cfc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    4cfe:	b29b      	uxth	r3, r3
    4d00:	2b00      	cmp	r3, #0
    4d02:	d1c5      	bne.n	4c90 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4d04:	3301      	adds	r3, #1
    4d06:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    4d08:	7a63      	ldrb	r3, [r4, #9]
    4d0a:	2b01      	cmp	r3, #1
    4d0c:	d1c0      	bne.n	4c90 <_spi_interrupt_handler+0x24>
    4d0e:	79e3      	ldrb	r3, [r4, #7]
    4d10:	2b00      	cmp	r3, #0
    4d12:	d1bd      	bne.n	4c90 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4d14:	3302      	adds	r3, #2
    4d16:	75b3      	strb	r3, [r6, #22]
    4d18:	e7ba      	b.n	4c90 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    4d1a:	4b47      	ldr	r3, [pc, #284]	; (4e38 <_spi_interrupt_handler+0x1cc>)
    4d1c:	881b      	ldrh	r3, [r3, #0]
    4d1e:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    4d20:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4d22:	3b01      	subs	r3, #1
    4d24:	b29b      	uxth	r3, r3
    4d26:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    4d28:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4d2a:	b29b      	uxth	r3, r3
    4d2c:	2b00      	cmp	r3, #0
    4d2e:	d101      	bne.n	4d34 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4d30:	3301      	adds	r3, #1
    4d32:	7533      	strb	r3, [r6, #20]
		if (0
    4d34:	7963      	ldrb	r3, [r4, #5]
    4d36:	2b01      	cmp	r3, #1
    4d38:	d0cc      	beq.n	4cd4 <_spi_interrupt_handler+0x68>
    4d3a:	e7a9      	b.n	4c90 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    4d3c:	7850      	ldrb	r0, [r2, #1]
    4d3e:	0200      	lsls	r0, r0, #8
    4d40:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    4d42:	3202      	adds	r2, #2
    4d44:	62e2      	str	r2, [r4, #44]	; 0x2c
    4d46:	e7d2      	b.n	4cee <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    4d48:	0020      	movs	r0, r4
    4d4a:	69a3      	ldr	r3, [r4, #24]
    4d4c:	4798      	blx	r3
    4d4e:	e7b0      	b.n	4cb2 <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    4d50:	7a63      	ldrb	r3, [r4, #9]
    4d52:	2b01      	cmp	r3, #1
    4d54:	d028      	beq.n	4da8 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4d56:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    4d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4d5a:	05db      	lsls	r3, r3, #23
    4d5c:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    4d5e:	b2da      	uxtb	r2, r3
    4d60:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    4d62:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    4d64:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4d66:	1c51      	adds	r1, r2, #1
    4d68:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4d6a:	79a1      	ldrb	r1, [r4, #6]
    4d6c:	2901      	cmp	r1, #1
    4d6e:	d034      	beq.n	4dda <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    4d70:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    4d72:	3b01      	subs	r3, #1
    4d74:	b29b      	uxth	r3, r3
    4d76:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    4d78:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    4d7a:	b29b      	uxth	r3, r3
    4d7c:	2b00      	cmp	r3, #0
    4d7e:	d000      	beq.n	4d82 <_spi_interrupt_handler+0x116>
    4d80:	e79a      	b.n	4cb8 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    4d82:	2200      	movs	r2, #0
    4d84:	3338      	adds	r3, #56	; 0x38
    4d86:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4d88:	3b34      	subs	r3, #52	; 0x34
    4d8a:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    4d8c:	7a63      	ldrb	r3, [r4, #9]
    4d8e:	2b02      	cmp	r3, #2
    4d90:	d029      	beq.n	4de6 <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    4d92:	7a63      	ldrb	r3, [r4, #9]
    4d94:	2b00      	cmp	r3, #0
    4d96:	d000      	beq.n	4d9a <_spi_interrupt_handler+0x12e>
    4d98:	e78e      	b.n	4cb8 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    4d9a:	07bb      	lsls	r3, r7, #30
    4d9c:	d400      	bmi.n	4da0 <_spi_interrupt_handler+0x134>
    4d9e:	e78b      	b.n	4cb8 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    4da0:	0020      	movs	r0, r4
    4da2:	6923      	ldr	r3, [r4, #16]
    4da4:	4798      	blx	r3
    4da6:	e787      	b.n	4cb8 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4da8:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    4daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    4dac:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4dae:	3b01      	subs	r3, #1
    4db0:	b29b      	uxth	r3, r3
    4db2:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    4db4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4db6:	b29b      	uxth	r3, r3
    4db8:	2b00      	cmp	r3, #0
    4dba:	d000      	beq.n	4dbe <_spi_interrupt_handler+0x152>
    4dbc:	e77c      	b.n	4cb8 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4dbe:	3304      	adds	r3, #4
    4dc0:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    4dc2:	2200      	movs	r2, #0
    4dc4:	3334      	adds	r3, #52	; 0x34
    4dc6:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    4dc8:	3b35      	subs	r3, #53	; 0x35
    4dca:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    4dcc:	07fb      	lsls	r3, r7, #31
    4dce:	d400      	bmi.n	4dd2 <_spi_interrupt_handler+0x166>
    4dd0:	e772      	b.n	4cb8 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    4dd2:	0020      	movs	r0, r4
    4dd4:	68e3      	ldr	r3, [r4, #12]
    4dd6:	4798      	blx	r3
    4dd8:	e76e      	b.n	4cb8 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    4dda:	0a1b      	lsrs	r3, r3, #8
    4ddc:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    4dde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4de0:	3301      	adds	r3, #1
    4de2:	62a3      	str	r3, [r4, #40]	; 0x28
    4de4:	e7c4      	b.n	4d70 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    4de6:	077b      	lsls	r3, r7, #29
    4de8:	d400      	bmi.n	4dec <_spi_interrupt_handler+0x180>
    4dea:	e765      	b.n	4cb8 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    4dec:	0020      	movs	r0, r4
    4dee:	6963      	ldr	r3, [r4, #20]
    4df0:	4798      	blx	r3
    4df2:	e761      	b.n	4cb8 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4df4:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    4df6:	2b01      	cmp	r3, #1
    4df8:	d000      	beq.n	4dfc <_spi_interrupt_handler+0x190>
    4dfa:	e763      	b.n	4cc4 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4dfc:	79e3      	ldrb	r3, [r4, #7]
    4dfe:	2b00      	cmp	r3, #0
    4e00:	d000      	beq.n	4e04 <_spi_interrupt_handler+0x198>
    4e02:	e75f      	b.n	4cc4 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4e04:	3302      	adds	r3, #2
    4e06:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    4e08:	3301      	adds	r3, #1
    4e0a:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    4e0c:	2200      	movs	r2, #0
    4e0e:	3335      	adds	r3, #53	; 0x35
    4e10:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    4e12:	07fb      	lsls	r3, r7, #31
    4e14:	d400      	bmi.n	4e18 <_spi_interrupt_handler+0x1ac>
    4e16:	e755      	b.n	4cc4 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    4e18:	0020      	movs	r0, r4
    4e1a:	68e3      	ldr	r3, [r4, #12]
    4e1c:	4798      	blx	r3
    4e1e:	e751      	b.n	4cc4 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4e20:	2380      	movs	r3, #128	; 0x80
    4e22:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4e24:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    4e26:	067b      	lsls	r3, r7, #25
    4e28:	d400      	bmi.n	4e2c <_spi_interrupt_handler+0x1c0>
    4e2a:	e74f      	b.n	4ccc <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    4e2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4e2e:	0020      	movs	r0, r4
    4e30:	4798      	blx	r3
}
    4e32:	e74b      	b.n	4ccc <_spi_interrupt_handler+0x60>
    4e34:	200003ec 	.word	0x200003ec
    4e38:	20000404 	.word	0x20000404

00004e3c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    4e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e3e:	46de      	mov	lr, fp
    4e40:	4657      	mov	r7, sl
    4e42:	464e      	mov	r6, r9
    4e44:	4645      	mov	r5, r8
    4e46:	b5e0      	push	{r5, r6, r7, lr}
    4e48:	b091      	sub	sp, #68	; 0x44
    4e4a:	0005      	movs	r5, r0
    4e4c:	000c      	movs	r4, r1
    4e4e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    4e50:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4e52:	0008      	movs	r0, r1
    4e54:	4bbc      	ldr	r3, [pc, #752]	; (5148 <usart_init+0x30c>)
    4e56:	4798      	blx	r3
    4e58:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    4e5a:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    4e5c:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    4e5e:	07db      	lsls	r3, r3, #31
    4e60:	d506      	bpl.n	4e70 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    4e62:	b011      	add	sp, #68	; 0x44
    4e64:	bc3c      	pop	{r2, r3, r4, r5}
    4e66:	4690      	mov	r8, r2
    4e68:	4699      	mov	r9, r3
    4e6a:	46a2      	mov	sl, r4
    4e6c:	46ab      	mov	fp, r5
    4e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    4e70:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    4e72:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    4e74:	079b      	lsls	r3, r3, #30
    4e76:	d4f4      	bmi.n	4e62 <usart_init+0x26>
    4e78:	49b4      	ldr	r1, [pc, #720]	; (514c <usart_init+0x310>)
    4e7a:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    4e7c:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4e7e:	2301      	movs	r3, #1
    4e80:	40bb      	lsls	r3, r7
    4e82:	4303      	orrs	r3, r0
    4e84:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    4e86:	a90f      	add	r1, sp, #60	; 0x3c
    4e88:	272d      	movs	r7, #45	; 0x2d
    4e8a:	5df3      	ldrb	r3, [r6, r7]
    4e8c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4e8e:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4e90:	b2d3      	uxtb	r3, r2
    4e92:	9302      	str	r3, [sp, #8]
    4e94:	0018      	movs	r0, r3
    4e96:	4bae      	ldr	r3, [pc, #696]	; (5150 <usart_init+0x314>)
    4e98:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4e9a:	9802      	ldr	r0, [sp, #8]
    4e9c:	4bad      	ldr	r3, [pc, #692]	; (5154 <usart_init+0x318>)
    4e9e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4ea0:	5df0      	ldrb	r0, [r6, r7]
    4ea2:	2100      	movs	r1, #0
    4ea4:	4bac      	ldr	r3, [pc, #688]	; (5158 <usart_init+0x31c>)
    4ea6:	4798      	blx	r3
	module->character_size = config->character_size;
    4ea8:	7af3      	ldrb	r3, [r6, #11]
    4eaa:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    4eac:	2324      	movs	r3, #36	; 0x24
    4eae:	5cf3      	ldrb	r3, [r6, r3]
    4eb0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    4eb2:	2325      	movs	r3, #37	; 0x25
    4eb4:	5cf3      	ldrb	r3, [r6, r3]
    4eb6:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    4eb8:	7ef3      	ldrb	r3, [r6, #27]
    4eba:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    4ebc:	7f33      	ldrb	r3, [r6, #28]
    4ebe:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4ec0:	682b      	ldr	r3, [r5, #0]
    4ec2:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4ec4:	0018      	movs	r0, r3
    4ec6:	4ba0      	ldr	r3, [pc, #640]	; (5148 <usart_init+0x30c>)
    4ec8:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4eca:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    4ecc:	2200      	movs	r2, #0
    4ece:	230e      	movs	r3, #14
    4ed0:	a906      	add	r1, sp, #24
    4ed2:	468c      	mov	ip, r1
    4ed4:	4463      	add	r3, ip
    4ed6:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    4ed8:	8a32      	ldrh	r2, [r6, #16]
    4eda:	9202      	str	r2, [sp, #8]
    4edc:	2380      	movs	r3, #128	; 0x80
    4ede:	01db      	lsls	r3, r3, #7
    4ee0:	429a      	cmp	r2, r3
    4ee2:	d100      	bne.n	4ee6 <usart_init+0xaa>
    4ee4:	e09e      	b.n	5024 <usart_init+0x1e8>
    4ee6:	d90f      	bls.n	4f08 <usart_init+0xcc>
    4ee8:	23c0      	movs	r3, #192	; 0xc0
    4eea:	01db      	lsls	r3, r3, #7
    4eec:	9a02      	ldr	r2, [sp, #8]
    4eee:	429a      	cmp	r2, r3
    4ef0:	d100      	bne.n	4ef4 <usart_init+0xb8>
    4ef2:	e092      	b.n	501a <usart_init+0x1de>
    4ef4:	2380      	movs	r3, #128	; 0x80
    4ef6:	021b      	lsls	r3, r3, #8
    4ef8:	429a      	cmp	r2, r3
    4efa:	d000      	beq.n	4efe <usart_init+0xc2>
    4efc:	e11f      	b.n	513e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    4efe:	2303      	movs	r3, #3
    4f00:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4f02:	2300      	movs	r3, #0
    4f04:	9307      	str	r3, [sp, #28]
    4f06:	e008      	b.n	4f1a <usart_init+0xde>
	switch (config->sample_rate) {
    4f08:	2380      	movs	r3, #128	; 0x80
    4f0a:	019b      	lsls	r3, r3, #6
    4f0c:	429a      	cmp	r2, r3
    4f0e:	d000      	beq.n	4f12 <usart_init+0xd6>
    4f10:	e115      	b.n	513e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4f12:	2310      	movs	r3, #16
    4f14:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4f16:	3b0f      	subs	r3, #15
    4f18:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    4f1a:	6833      	ldr	r3, [r6, #0]
    4f1c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    4f1e:	68f3      	ldr	r3, [r6, #12]
    4f20:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    4f22:	6973      	ldr	r3, [r6, #20]
    4f24:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4f26:	7e33      	ldrb	r3, [r6, #24]
    4f28:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4f2a:	2326      	movs	r3, #38	; 0x26
    4f2c:	5cf3      	ldrb	r3, [r6, r3]
    4f2e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    4f30:	6873      	ldr	r3, [r6, #4]
    4f32:	4699      	mov	r9, r3
	switch (transfer_mode)
    4f34:	2b00      	cmp	r3, #0
    4f36:	d100      	bne.n	4f3a <usart_init+0xfe>
    4f38:	e0a0      	b.n	507c <usart_init+0x240>
    4f3a:	2380      	movs	r3, #128	; 0x80
    4f3c:	055b      	lsls	r3, r3, #21
    4f3e:	4599      	cmp	r9, r3
    4f40:	d100      	bne.n	4f44 <usart_init+0x108>
    4f42:	e084      	b.n	504e <usart_init+0x212>
	if(config->encoding_format_enable) {
    4f44:	7e73      	ldrb	r3, [r6, #25]
    4f46:	2b00      	cmp	r3, #0
    4f48:	d002      	beq.n	4f50 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    4f4a:	7eb3      	ldrb	r3, [r6, #26]
    4f4c:	4642      	mov	r2, r8
    4f4e:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4f50:	682a      	ldr	r2, [r5, #0]
    4f52:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4f54:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    4f56:	2b00      	cmp	r3, #0
    4f58:	d1fc      	bne.n	4f54 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    4f5a:	330e      	adds	r3, #14
    4f5c:	aa06      	add	r2, sp, #24
    4f5e:	4694      	mov	ip, r2
    4f60:	4463      	add	r3, ip
    4f62:	881b      	ldrh	r3, [r3, #0]
    4f64:	4642      	mov	r2, r8
    4f66:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    4f68:	9b05      	ldr	r3, [sp, #20]
    4f6a:	9a03      	ldr	r2, [sp, #12]
    4f6c:	4313      	orrs	r3, r2
    4f6e:	9a04      	ldr	r2, [sp, #16]
    4f70:	4313      	orrs	r3, r2
    4f72:	464a      	mov	r2, r9
    4f74:	4313      	orrs	r3, r2
    4f76:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4f78:	465b      	mov	r3, fp
    4f7a:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    4f7c:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4f7e:	4653      	mov	r3, sl
    4f80:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    4f82:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    4f84:	2327      	movs	r3, #39	; 0x27
    4f86:	5cf3      	ldrb	r3, [r6, r3]
    4f88:	2b00      	cmp	r3, #0
    4f8a:	d101      	bne.n	4f90 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    4f8c:	3304      	adds	r3, #4
    4f8e:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4f90:	7e73      	ldrb	r3, [r6, #25]
    4f92:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4f94:	7f32      	ldrb	r2, [r6, #28]
    4f96:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4f98:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    4f9a:	7f72      	ldrb	r2, [r6, #29]
    4f9c:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4f9e:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4fa0:	2224      	movs	r2, #36	; 0x24
    4fa2:	5cb2      	ldrb	r2, [r6, r2]
    4fa4:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    4fa6:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    4fa8:	2225      	movs	r2, #37	; 0x25
    4faa:	5cb2      	ldrb	r2, [r6, r2]
    4fac:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4fae:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    4fb0:	7ab1      	ldrb	r1, [r6, #10]
    4fb2:	7af2      	ldrb	r2, [r6, #11]
    4fb4:	4311      	orrs	r1, r2
    4fb6:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    4fb8:	8933      	ldrh	r3, [r6, #8]
    4fba:	2bff      	cmp	r3, #255	; 0xff
    4fbc:	d100      	bne.n	4fc0 <usart_init+0x184>
    4fbe:	e081      	b.n	50c4 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    4fc0:	2280      	movs	r2, #128	; 0x80
    4fc2:	0452      	lsls	r2, r2, #17
    4fc4:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    4fc6:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    4fc8:	232c      	movs	r3, #44	; 0x2c
    4fca:	5cf3      	ldrb	r3, [r6, r3]
    4fcc:	2b00      	cmp	r3, #0
    4fce:	d103      	bne.n	4fd8 <usart_init+0x19c>
    4fd0:	4b62      	ldr	r3, [pc, #392]	; (515c <usart_init+0x320>)
    4fd2:	789b      	ldrb	r3, [r3, #2]
    4fd4:	079b      	lsls	r3, r3, #30
    4fd6:	d501      	bpl.n	4fdc <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    4fd8:	2380      	movs	r3, #128	; 0x80
    4fda:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    4fdc:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    4fde:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4fe0:	2b00      	cmp	r3, #0
    4fe2:	d1fc      	bne.n	4fde <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    4fe4:	4643      	mov	r3, r8
    4fe6:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4fe8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    4fea:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4fec:	2b00      	cmp	r3, #0
    4fee:	d1fc      	bne.n	4fea <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    4ff0:	4643      	mov	r3, r8
    4ff2:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4ff4:	ab0e      	add	r3, sp, #56	; 0x38
    4ff6:	2280      	movs	r2, #128	; 0x80
    4ff8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4ffa:	2200      	movs	r2, #0
    4ffc:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    4ffe:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    5000:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    5002:	6b33      	ldr	r3, [r6, #48]	; 0x30
    5004:	930a      	str	r3, [sp, #40]	; 0x28
    5006:	6b73      	ldr	r3, [r6, #52]	; 0x34
    5008:	930b      	str	r3, [sp, #44]	; 0x2c
    500a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    500c:	930c      	str	r3, [sp, #48]	; 0x30
    500e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    5010:	9302      	str	r3, [sp, #8]
    5012:	930d      	str	r3, [sp, #52]	; 0x34
    5014:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5016:	ae0a      	add	r6, sp, #40	; 0x28
    5018:	e063      	b.n	50e2 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    501a:	2308      	movs	r3, #8
    501c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    501e:	3b07      	subs	r3, #7
    5020:	9307      	str	r3, [sp, #28]
    5022:	e77a      	b.n	4f1a <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    5024:	6833      	ldr	r3, [r6, #0]
    5026:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    5028:	68f3      	ldr	r3, [r6, #12]
    502a:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    502c:	6973      	ldr	r3, [r6, #20]
    502e:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5030:	7e33      	ldrb	r3, [r6, #24]
    5032:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5034:	2326      	movs	r3, #38	; 0x26
    5036:	5cf3      	ldrb	r3, [r6, r3]
    5038:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    503a:	6873      	ldr	r3, [r6, #4]
    503c:	4699      	mov	r9, r3
	switch (transfer_mode)
    503e:	2b00      	cmp	r3, #0
    5040:	d018      	beq.n	5074 <usart_init+0x238>
    5042:	2380      	movs	r3, #128	; 0x80
    5044:	055b      	lsls	r3, r3, #21
    5046:	4599      	cmp	r9, r3
    5048:	d001      	beq.n	504e <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    504a:	2000      	movs	r0, #0
    504c:	e025      	b.n	509a <usart_init+0x25e>
			if (!config->use_external_clock) {
    504e:	2327      	movs	r3, #39	; 0x27
    5050:	5cf3      	ldrb	r3, [r6, r3]
    5052:	2b00      	cmp	r3, #0
    5054:	d000      	beq.n	5058 <usart_init+0x21c>
    5056:	e775      	b.n	4f44 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    5058:	6a33      	ldr	r3, [r6, #32]
    505a:	001f      	movs	r7, r3
    505c:	b2c0      	uxtb	r0, r0
    505e:	4b40      	ldr	r3, [pc, #256]	; (5160 <usart_init+0x324>)
    5060:	4798      	blx	r3
    5062:	0001      	movs	r1, r0
    5064:	220e      	movs	r2, #14
    5066:	ab06      	add	r3, sp, #24
    5068:	469c      	mov	ip, r3
    506a:	4462      	add	r2, ip
    506c:	0038      	movs	r0, r7
    506e:	4b3d      	ldr	r3, [pc, #244]	; (5164 <usart_init+0x328>)
    5070:	4798      	blx	r3
    5072:	e012      	b.n	509a <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5074:	2308      	movs	r3, #8
    5076:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5078:	2300      	movs	r3, #0
    507a:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    507c:	2327      	movs	r3, #39	; 0x27
    507e:	5cf3      	ldrb	r3, [r6, r3]
    5080:	2b00      	cmp	r3, #0
    5082:	d00e      	beq.n	50a2 <usart_init+0x266>
				status_code =
    5084:	9b06      	ldr	r3, [sp, #24]
    5086:	9300      	str	r3, [sp, #0]
    5088:	9b07      	ldr	r3, [sp, #28]
    508a:	220e      	movs	r2, #14
    508c:	a906      	add	r1, sp, #24
    508e:	468c      	mov	ip, r1
    5090:	4462      	add	r2, ip
    5092:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    5094:	6a30      	ldr	r0, [r6, #32]
    5096:	4f34      	ldr	r7, [pc, #208]	; (5168 <usart_init+0x32c>)
    5098:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    509a:	2800      	cmp	r0, #0
    509c:	d000      	beq.n	50a0 <usart_init+0x264>
    509e:	e6e0      	b.n	4e62 <usart_init+0x26>
    50a0:	e750      	b.n	4f44 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    50a2:	6a33      	ldr	r3, [r6, #32]
    50a4:	001f      	movs	r7, r3
    50a6:	b2c0      	uxtb	r0, r0
    50a8:	4b2d      	ldr	r3, [pc, #180]	; (5160 <usart_init+0x324>)
    50aa:	4798      	blx	r3
    50ac:	0001      	movs	r1, r0
				status_code =
    50ae:	9b06      	ldr	r3, [sp, #24]
    50b0:	9300      	str	r3, [sp, #0]
    50b2:	9b07      	ldr	r3, [sp, #28]
    50b4:	220e      	movs	r2, #14
    50b6:	a806      	add	r0, sp, #24
    50b8:	4684      	mov	ip, r0
    50ba:	4462      	add	r2, ip
    50bc:	0038      	movs	r0, r7
    50be:	4f2a      	ldr	r7, [pc, #168]	; (5168 <usart_init+0x32c>)
    50c0:	47b8      	blx	r7
    50c2:	e7ea      	b.n	509a <usart_init+0x25e>
		if(config->lin_slave_enable) {
    50c4:	7ef3      	ldrb	r3, [r6, #27]
    50c6:	2b00      	cmp	r3, #0
    50c8:	d100      	bne.n	50cc <usart_init+0x290>
    50ca:	e77d      	b.n	4fc8 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    50cc:	2380      	movs	r3, #128	; 0x80
    50ce:	04db      	lsls	r3, r3, #19
    50d0:	431f      	orrs	r7, r3
    50d2:	e779      	b.n	4fc8 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    50d4:	0020      	movs	r0, r4
    50d6:	4b25      	ldr	r3, [pc, #148]	; (516c <usart_init+0x330>)
    50d8:	4798      	blx	r3
    50da:	e007      	b.n	50ec <usart_init+0x2b0>
    50dc:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    50de:	2f04      	cmp	r7, #4
    50e0:	d00d      	beq.n	50fe <usart_init+0x2c2>
    50e2:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    50e4:	00bb      	lsls	r3, r7, #2
    50e6:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    50e8:	2800      	cmp	r0, #0
    50ea:	d0f3      	beq.n	50d4 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    50ec:	1c43      	adds	r3, r0, #1
    50ee:	d0f5      	beq.n	50dc <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    50f0:	a90e      	add	r1, sp, #56	; 0x38
    50f2:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    50f4:	0c00      	lsrs	r0, r0, #16
    50f6:	b2c0      	uxtb	r0, r0
    50f8:	4b1d      	ldr	r3, [pc, #116]	; (5170 <usart_init+0x334>)
    50fa:	4798      	blx	r3
    50fc:	e7ee      	b.n	50dc <usart_init+0x2a0>
		module->callback[i]            = NULL;
    50fe:	2300      	movs	r3, #0
    5100:	60eb      	str	r3, [r5, #12]
    5102:	612b      	str	r3, [r5, #16]
    5104:	616b      	str	r3, [r5, #20]
    5106:	61ab      	str	r3, [r5, #24]
    5108:	61eb      	str	r3, [r5, #28]
    510a:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    510c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    510e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    5110:	2200      	movs	r2, #0
    5112:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    5114:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    5116:	3330      	adds	r3, #48	; 0x30
    5118:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    511a:	3301      	adds	r3, #1
    511c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    511e:	3301      	adds	r3, #1
    5120:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    5122:	3301      	adds	r3, #1
    5124:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    5126:	6828      	ldr	r0, [r5, #0]
    5128:	4b07      	ldr	r3, [pc, #28]	; (5148 <usart_init+0x30c>)
    512a:	4798      	blx	r3
    512c:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    512e:	4911      	ldr	r1, [pc, #68]	; (5174 <usart_init+0x338>)
    5130:	4b11      	ldr	r3, [pc, #68]	; (5178 <usart_init+0x33c>)
    5132:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    5134:	00a4      	lsls	r4, r4, #2
    5136:	4b11      	ldr	r3, [pc, #68]	; (517c <usart_init+0x340>)
    5138:	50e5      	str	r5, [r4, r3]
	return status_code;
    513a:	2000      	movs	r0, #0
    513c:	e691      	b.n	4e62 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    513e:	2310      	movs	r3, #16
    5140:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5142:	2300      	movs	r3, #0
    5144:	9307      	str	r3, [sp, #28]
    5146:	e6e8      	b.n	4f1a <usart_init+0xde>
    5148:	00004899 	.word	0x00004899
    514c:	40000400 	.word	0x40000400
    5150:	00005a0d 	.word	0x00005a0d
    5154:	00005981 	.word	0x00005981
    5158:	000046d5 	.word	0x000046d5
    515c:	41002000 	.word	0x41002000
    5160:	00005a29 	.word	0x00005a29
    5164:	00004617 	.word	0x00004617
    5168:	00004641 	.word	0x00004641
    516c:	00004721 	.word	0x00004721
    5170:	00005b05 	.word	0x00005b05
    5174:	00005235 	.word	0x00005235
    5178:	000048d5 	.word	0x000048d5
    517c:	200003ec 	.word	0x200003ec

00005180 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    5180:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    5182:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    5184:	2a00      	cmp	r2, #0
    5186:	d101      	bne.n	518c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    5188:	0018      	movs	r0, r3
    518a:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    518c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    518e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    5190:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    5192:	2a00      	cmp	r2, #0
    5194:	d1f8      	bne.n	5188 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    5196:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    5198:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    519a:	2a00      	cmp	r2, #0
    519c:	d1fc      	bne.n	5198 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    519e:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    51a0:	2102      	movs	r1, #2
    51a2:	7e1a      	ldrb	r2, [r3, #24]
    51a4:	420a      	tst	r2, r1
    51a6:	d0fc      	beq.n	51a2 <usart_write_wait+0x22>
	return STATUS_OK;
    51a8:	2300      	movs	r3, #0
    51aa:	e7ed      	b.n	5188 <usart_write_wait+0x8>

000051ac <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    51ac:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    51ae:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    51b0:	2a00      	cmp	r2, #0
    51b2:	d101      	bne.n	51b8 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    51b4:	0018      	movs	r0, r3
    51b6:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    51b8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    51ba:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    51bc:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    51be:	2a00      	cmp	r2, #0
    51c0:	d1f8      	bne.n	51b4 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    51c2:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    51c4:	7e10      	ldrb	r0, [r2, #24]
    51c6:	0740      	lsls	r0, r0, #29
    51c8:	d5f4      	bpl.n	51b4 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    51ca:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    51cc:	2b00      	cmp	r3, #0
    51ce:	d1fc      	bne.n	51ca <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    51d0:	8b53      	ldrh	r3, [r2, #26]
    51d2:	b2db      	uxtb	r3, r3
	if (error_code) {
    51d4:	0698      	lsls	r0, r3, #26
    51d6:	d01d      	beq.n	5214 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    51d8:	0798      	lsls	r0, r3, #30
    51da:	d503      	bpl.n	51e4 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    51dc:	2302      	movs	r3, #2
    51de:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    51e0:	3318      	adds	r3, #24
    51e2:	e7e7      	b.n	51b4 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    51e4:	0758      	lsls	r0, r3, #29
    51e6:	d503      	bpl.n	51f0 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    51e8:	2304      	movs	r3, #4
    51ea:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    51ec:	331a      	adds	r3, #26
    51ee:	e7e1      	b.n	51b4 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    51f0:	07d8      	lsls	r0, r3, #31
    51f2:	d503      	bpl.n	51fc <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    51f4:	2301      	movs	r3, #1
    51f6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    51f8:	3312      	adds	r3, #18
    51fa:	e7db      	b.n	51b4 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    51fc:	06d8      	lsls	r0, r3, #27
    51fe:	d503      	bpl.n	5208 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    5200:	2310      	movs	r3, #16
    5202:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    5204:	3332      	adds	r3, #50	; 0x32
    5206:	e7d5      	b.n	51b4 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    5208:	069b      	lsls	r3, r3, #26
    520a:	d503      	bpl.n	5214 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    520c:	2320      	movs	r3, #32
    520e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    5210:	3321      	adds	r3, #33	; 0x21
    5212:	e7cf      	b.n	51b4 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    5214:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    5216:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    5218:	2300      	movs	r3, #0
    521a:	e7cb      	b.n	51b4 <usart_read_wait+0x8>

0000521c <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    521c:	1c93      	adds	r3, r2, #2
    521e:	009b      	lsls	r3, r3, #2
    5220:	18c3      	adds	r3, r0, r3
    5222:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    5224:	2130      	movs	r1, #48	; 0x30
    5226:	2301      	movs	r3, #1
    5228:	4093      	lsls	r3, r2
    522a:	001a      	movs	r2, r3
    522c:	5c43      	ldrb	r3, [r0, r1]
    522e:	4313      	orrs	r3, r2
    5230:	5443      	strb	r3, [r0, r1]
}
    5232:	4770      	bx	lr

00005234 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    5234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    5236:	0080      	lsls	r0, r0, #2
    5238:	4b62      	ldr	r3, [pc, #392]	; (53c4 <_usart_interrupt_handler+0x190>)
    523a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    523c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    523e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    5240:	2b00      	cmp	r3, #0
    5242:	d1fc      	bne.n	523e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    5244:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    5246:	7da6      	ldrb	r6, [r4, #22]
    5248:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    524a:	2330      	movs	r3, #48	; 0x30
    524c:	5ceb      	ldrb	r3, [r5, r3]
    524e:	2231      	movs	r2, #49	; 0x31
    5250:	5caf      	ldrb	r7, [r5, r2]
    5252:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    5254:	07f3      	lsls	r3, r6, #31
    5256:	d522      	bpl.n	529e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    5258:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    525a:	b29b      	uxth	r3, r3
    525c:	2b00      	cmp	r3, #0
    525e:	d01c      	beq.n	529a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    5260:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5262:	7813      	ldrb	r3, [r2, #0]
    5264:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    5266:	1c51      	adds	r1, r2, #1
    5268:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    526a:	7969      	ldrb	r1, [r5, #5]
    526c:	2901      	cmp	r1, #1
    526e:	d00e      	beq.n	528e <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    5270:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    5272:	05db      	lsls	r3, r3, #23
    5274:	0ddb      	lsrs	r3, r3, #23
    5276:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    5278:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    527a:	3b01      	subs	r3, #1
    527c:	b29b      	uxth	r3, r3
    527e:	85eb      	strh	r3, [r5, #46]	; 0x2e
    5280:	2b00      	cmp	r3, #0
    5282:	d10c      	bne.n	529e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5284:	3301      	adds	r3, #1
    5286:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    5288:	3301      	adds	r3, #1
    528a:	75a3      	strb	r3, [r4, #22]
    528c:	e007      	b.n	529e <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    528e:	7851      	ldrb	r1, [r2, #1]
    5290:	0209      	lsls	r1, r1, #8
    5292:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    5294:	3202      	adds	r2, #2
    5296:	62aa      	str	r2, [r5, #40]	; 0x28
    5298:	e7eb      	b.n	5272 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    529a:	2301      	movs	r3, #1
    529c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    529e:	07b3      	lsls	r3, r6, #30
    52a0:	d506      	bpl.n	52b0 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    52a2:	2302      	movs	r3, #2
    52a4:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    52a6:	2200      	movs	r2, #0
    52a8:	3331      	adds	r3, #49	; 0x31
    52aa:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    52ac:	07fb      	lsls	r3, r7, #31
    52ae:	d41a      	bmi.n	52e6 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    52b0:	0773      	lsls	r3, r6, #29
    52b2:	d565      	bpl.n	5380 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    52b4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    52b6:	b29b      	uxth	r3, r3
    52b8:	2b00      	cmp	r3, #0
    52ba:	d05f      	beq.n	537c <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    52bc:	8b63      	ldrh	r3, [r4, #26]
    52be:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    52c0:	071a      	lsls	r2, r3, #28
    52c2:	d414      	bmi.n	52ee <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    52c4:	223f      	movs	r2, #63	; 0x3f
    52c6:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    52c8:	2b00      	cmp	r3, #0
    52ca:	d034      	beq.n	5336 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    52cc:	079a      	lsls	r2, r3, #30
    52ce:	d511      	bpl.n	52f4 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    52d0:	221a      	movs	r2, #26
    52d2:	2332      	movs	r3, #50	; 0x32
    52d4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    52d6:	3b30      	subs	r3, #48	; 0x30
    52d8:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    52da:	077b      	lsls	r3, r7, #29
    52dc:	d550      	bpl.n	5380 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    52de:	0028      	movs	r0, r5
    52e0:	696b      	ldr	r3, [r5, #20]
    52e2:	4798      	blx	r3
    52e4:	e04c      	b.n	5380 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    52e6:	0028      	movs	r0, r5
    52e8:	68eb      	ldr	r3, [r5, #12]
    52ea:	4798      	blx	r3
    52ec:	e7e0      	b.n	52b0 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    52ee:	2237      	movs	r2, #55	; 0x37
    52f0:	4013      	ands	r3, r2
    52f2:	e7e9      	b.n	52c8 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    52f4:	075a      	lsls	r2, r3, #29
    52f6:	d505      	bpl.n	5304 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    52f8:	221e      	movs	r2, #30
    52fa:	2332      	movs	r3, #50	; 0x32
    52fc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    52fe:	3b2e      	subs	r3, #46	; 0x2e
    5300:	8363      	strh	r3, [r4, #26]
    5302:	e7ea      	b.n	52da <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    5304:	07da      	lsls	r2, r3, #31
    5306:	d505      	bpl.n	5314 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    5308:	2213      	movs	r2, #19
    530a:	2332      	movs	r3, #50	; 0x32
    530c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    530e:	3b31      	subs	r3, #49	; 0x31
    5310:	8363      	strh	r3, [r4, #26]
    5312:	e7e2      	b.n	52da <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    5314:	06da      	lsls	r2, r3, #27
    5316:	d505      	bpl.n	5324 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    5318:	2242      	movs	r2, #66	; 0x42
    531a:	2332      	movs	r3, #50	; 0x32
    531c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    531e:	3b22      	subs	r3, #34	; 0x22
    5320:	8363      	strh	r3, [r4, #26]
    5322:	e7da      	b.n	52da <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    5324:	2220      	movs	r2, #32
    5326:	421a      	tst	r2, r3
    5328:	d0d7      	beq.n	52da <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    532a:	3221      	adds	r2, #33	; 0x21
    532c:	2332      	movs	r3, #50	; 0x32
    532e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    5330:	3b12      	subs	r3, #18
    5332:	8363      	strh	r3, [r4, #26]
    5334:	e7d1      	b.n	52da <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    5336:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    5338:	05db      	lsls	r3, r3, #23
    533a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    533c:	b2da      	uxtb	r2, r3
    533e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    5340:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    5342:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    5344:	1c51      	adds	r1, r2, #1
    5346:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5348:	7969      	ldrb	r1, [r5, #5]
    534a:	2901      	cmp	r1, #1
    534c:	d010      	beq.n	5370 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    534e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    5350:	3b01      	subs	r3, #1
    5352:	b29b      	uxth	r3, r3
    5354:	85ab      	strh	r3, [r5, #44]	; 0x2c
    5356:	2b00      	cmp	r3, #0
    5358:	d112      	bne.n	5380 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    535a:	3304      	adds	r3, #4
    535c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    535e:	2200      	movs	r2, #0
    5360:	332e      	adds	r3, #46	; 0x2e
    5362:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    5364:	07bb      	lsls	r3, r7, #30
    5366:	d50b      	bpl.n	5380 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    5368:	0028      	movs	r0, r5
    536a:	692b      	ldr	r3, [r5, #16]
    536c:	4798      	blx	r3
    536e:	e007      	b.n	5380 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    5370:	0a1b      	lsrs	r3, r3, #8
    5372:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    5374:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    5376:	3301      	adds	r3, #1
    5378:	626b      	str	r3, [r5, #36]	; 0x24
    537a:	e7e8      	b.n	534e <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    537c:	2304      	movs	r3, #4
    537e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    5380:	06f3      	lsls	r3, r6, #27
    5382:	d504      	bpl.n	538e <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    5384:	2310      	movs	r3, #16
    5386:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    5388:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    538a:	06fb      	lsls	r3, r7, #27
    538c:	d40e      	bmi.n	53ac <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    538e:	06b3      	lsls	r3, r6, #26
    5390:	d504      	bpl.n	539c <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    5392:	2320      	movs	r3, #32
    5394:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    5396:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    5398:	073b      	lsls	r3, r7, #28
    539a:	d40b      	bmi.n	53b4 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    539c:	0733      	lsls	r3, r6, #28
    539e:	d504      	bpl.n	53aa <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    53a0:	2308      	movs	r3, #8
    53a2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    53a4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    53a6:	06bb      	lsls	r3, r7, #26
    53a8:	d408      	bmi.n	53bc <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    53aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    53ac:	0028      	movs	r0, r5
    53ae:	69eb      	ldr	r3, [r5, #28]
    53b0:	4798      	blx	r3
    53b2:	e7ec      	b.n	538e <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    53b4:	0028      	movs	r0, r5
    53b6:	69ab      	ldr	r3, [r5, #24]
    53b8:	4798      	blx	r3
    53ba:	e7ef      	b.n	539c <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    53bc:	6a2b      	ldr	r3, [r5, #32]
    53be:	0028      	movs	r0, r5
    53c0:	4798      	blx	r3
}
    53c2:	e7f2      	b.n	53aa <_usart_interrupt_handler+0x176>
    53c4:	200003ec 	.word	0x200003ec

000053c8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    53c8:	b510      	push	{r4, lr}
	switch (clock_source) {
    53ca:	2808      	cmp	r0, #8
    53cc:	d803      	bhi.n	53d6 <system_clock_source_get_hz+0xe>
    53ce:	0080      	lsls	r0, r0, #2
    53d0:	4b1b      	ldr	r3, [pc, #108]	; (5440 <system_clock_source_get_hz+0x78>)
    53d2:	581b      	ldr	r3, [r3, r0]
    53d4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    53d6:	2000      	movs	r0, #0
    53d8:	e030      	b.n	543c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    53da:	4b1a      	ldr	r3, [pc, #104]	; (5444 <system_clock_source_get_hz+0x7c>)
    53dc:	6918      	ldr	r0, [r3, #16]
    53de:	e02d      	b.n	543c <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    53e0:	4b19      	ldr	r3, [pc, #100]	; (5448 <system_clock_source_get_hz+0x80>)
    53e2:	6a1b      	ldr	r3, [r3, #32]
    53e4:	059b      	lsls	r3, r3, #22
    53e6:	0f9b      	lsrs	r3, r3, #30
    53e8:	4818      	ldr	r0, [pc, #96]	; (544c <system_clock_source_get_hz+0x84>)
    53ea:	40d8      	lsrs	r0, r3
    53ec:	e026      	b.n	543c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    53ee:	4b15      	ldr	r3, [pc, #84]	; (5444 <system_clock_source_get_hz+0x7c>)
    53f0:	6958      	ldr	r0, [r3, #20]
    53f2:	e023      	b.n	543c <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    53f4:	4b13      	ldr	r3, [pc, #76]	; (5444 <system_clock_source_get_hz+0x7c>)
    53f6:	681b      	ldr	r3, [r3, #0]
			return 0;
    53f8:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    53fa:	079b      	lsls	r3, r3, #30
    53fc:	d51e      	bpl.n	543c <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    53fe:	4912      	ldr	r1, [pc, #72]	; (5448 <system_clock_source_get_hz+0x80>)
    5400:	2210      	movs	r2, #16
    5402:	68cb      	ldr	r3, [r1, #12]
    5404:	421a      	tst	r2, r3
    5406:	d0fc      	beq.n	5402 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    5408:	4b0e      	ldr	r3, [pc, #56]	; (5444 <system_clock_source_get_hz+0x7c>)
    540a:	681b      	ldr	r3, [r3, #0]
    540c:	075b      	lsls	r3, r3, #29
    540e:	d401      	bmi.n	5414 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    5410:	480f      	ldr	r0, [pc, #60]	; (5450 <system_clock_source_get_hz+0x88>)
    5412:	e013      	b.n	543c <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5414:	2000      	movs	r0, #0
    5416:	4b0f      	ldr	r3, [pc, #60]	; (5454 <system_clock_source_get_hz+0x8c>)
    5418:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    541a:	4b0a      	ldr	r3, [pc, #40]	; (5444 <system_clock_source_get_hz+0x7c>)
    541c:	689b      	ldr	r3, [r3, #8]
    541e:	041b      	lsls	r3, r3, #16
    5420:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5422:	4358      	muls	r0, r3
    5424:	e00a      	b.n	543c <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    5426:	2350      	movs	r3, #80	; 0x50
    5428:	4a07      	ldr	r2, [pc, #28]	; (5448 <system_clock_source_get_hz+0x80>)
    542a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    542c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    542e:	075b      	lsls	r3, r3, #29
    5430:	d504      	bpl.n	543c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    5432:	4b04      	ldr	r3, [pc, #16]	; (5444 <system_clock_source_get_hz+0x7c>)
    5434:	68d8      	ldr	r0, [r3, #12]
    5436:	e001      	b.n	543c <system_clock_source_get_hz+0x74>
		return 32768UL;
    5438:	2080      	movs	r0, #128	; 0x80
    543a:	0200      	lsls	r0, r0, #8
	}
}
    543c:	bd10      	pop	{r4, pc}
    543e:	46c0      	nop			; (mov r8, r8)
    5440:	0000bc78 	.word	0x0000bc78
    5444:	20000110 	.word	0x20000110
    5448:	40000800 	.word	0x40000800
    544c:	007a1200 	.word	0x007a1200
    5450:	02dc6c00 	.word	0x02dc6c00
    5454:	00005a29 	.word	0x00005a29

00005458 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    5458:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    545a:	490c      	ldr	r1, [pc, #48]	; (548c <system_clock_source_osc8m_set_config+0x34>)
    545c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    545e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    5460:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    5462:	7840      	ldrb	r0, [r0, #1]
    5464:	2201      	movs	r2, #1
    5466:	4010      	ands	r0, r2
    5468:	0180      	lsls	r0, r0, #6
    546a:	2640      	movs	r6, #64	; 0x40
    546c:	43b3      	bics	r3, r6
    546e:	4303      	orrs	r3, r0
    5470:	402a      	ands	r2, r5
    5472:	01d2      	lsls	r2, r2, #7
    5474:	2080      	movs	r0, #128	; 0x80
    5476:	4383      	bics	r3, r0
    5478:	4313      	orrs	r3, r2
    547a:	2203      	movs	r2, #3
    547c:	4022      	ands	r2, r4
    547e:	0212      	lsls	r2, r2, #8
    5480:	4803      	ldr	r0, [pc, #12]	; (5490 <system_clock_source_osc8m_set_config+0x38>)
    5482:	4003      	ands	r3, r0
    5484:	4313      	orrs	r3, r2
    5486:	620b      	str	r3, [r1, #32]
}
    5488:	bd70      	pop	{r4, r5, r6, pc}
    548a:	46c0      	nop			; (mov r8, r8)
    548c:	40000800 	.word	0x40000800
    5490:	fffffcff 	.word	0xfffffcff

00005494 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    5494:	b5f0      	push	{r4, r5, r6, r7, lr}
    5496:	46de      	mov	lr, fp
    5498:	4657      	mov	r7, sl
    549a:	464e      	mov	r6, r9
    549c:	4645      	mov	r5, r8
    549e:	b5e0      	push	{r5, r6, r7, lr}
    54a0:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    54a2:	4b26      	ldr	r3, [pc, #152]	; (553c <system_clock_source_xosc32k_set_config+0xa8>)
    54a4:	469b      	mov	fp, r3
    54a6:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    54a8:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    54aa:	7800      	ldrb	r0, [r0, #0]
    54ac:	4242      	negs	r2, r0
    54ae:	4142      	adcs	r2, r0
    54b0:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    54b2:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    54b4:	78ca      	ldrb	r2, [r1, #3]
    54b6:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    54b8:	790a      	ldrb	r2, [r1, #4]
    54ba:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    54bc:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    54be:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    54c0:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    54c2:	688a      	ldr	r2, [r1, #8]
    54c4:	491e      	ldr	r1, [pc, #120]	; (5540 <system_clock_source_xosc32k_set_config+0xac>)
    54c6:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    54c8:	2101      	movs	r1, #1
    54ca:	464a      	mov	r2, r9
    54cc:	0092      	lsls	r2, r2, #2
    54ce:	4691      	mov	r9, r2
    54d0:	2204      	movs	r2, #4
    54d2:	4393      	bics	r3, r2
    54d4:	464a      	mov	r2, r9
    54d6:	4313      	orrs	r3, r2
    54d8:	4642      	mov	r2, r8
    54da:	400a      	ands	r2, r1
    54dc:	00d2      	lsls	r2, r2, #3
    54de:	4690      	mov	r8, r2
    54e0:	2208      	movs	r2, #8
    54e2:	4393      	bics	r3, r2
    54e4:	4642      	mov	r2, r8
    54e6:	4313      	orrs	r3, r2
    54e8:	4662      	mov	r2, ip
    54ea:	400a      	ands	r2, r1
    54ec:	0112      	lsls	r2, r2, #4
    54ee:	4694      	mov	ip, r2
    54f0:	2210      	movs	r2, #16
    54f2:	4393      	bics	r3, r2
    54f4:	4662      	mov	r2, ip
    54f6:	4313      	orrs	r3, r2
    54f8:	4008      	ands	r0, r1
    54fa:	0140      	lsls	r0, r0, #5
    54fc:	2220      	movs	r2, #32
    54fe:	4393      	bics	r3, r2
    5500:	4303      	orrs	r3, r0
    5502:	400f      	ands	r7, r1
    5504:	01bf      	lsls	r7, r7, #6
    5506:	2040      	movs	r0, #64	; 0x40
    5508:	4383      	bics	r3, r0
    550a:	433b      	orrs	r3, r7
    550c:	400e      	ands	r6, r1
    550e:	01f6      	lsls	r6, r6, #7
    5510:	3040      	adds	r0, #64	; 0x40
    5512:	4383      	bics	r3, r0
    5514:	4333      	orrs	r3, r6
    5516:	3879      	subs	r0, #121	; 0x79
    5518:	4005      	ands	r5, r0
    551a:	022d      	lsls	r5, r5, #8
    551c:	4809      	ldr	r0, [pc, #36]	; (5544 <system_clock_source_xosc32k_set_config+0xb0>)
    551e:	4003      	ands	r3, r0
    5520:	432b      	orrs	r3, r5
    5522:	4021      	ands	r1, r4
    5524:	0309      	lsls	r1, r1, #12
    5526:	4808      	ldr	r0, [pc, #32]	; (5548 <system_clock_source_xosc32k_set_config+0xb4>)
    5528:	4003      	ands	r3, r0
    552a:	430b      	orrs	r3, r1
    552c:	465a      	mov	r2, fp
    552e:	8293      	strh	r3, [r2, #20]
}
    5530:	bc3c      	pop	{r2, r3, r4, r5}
    5532:	4690      	mov	r8, r2
    5534:	4699      	mov	r9, r3
    5536:	46a2      	mov	sl, r4
    5538:	46ab      	mov	fp, r5
    553a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    553c:	40000800 	.word	0x40000800
    5540:	20000110 	.word	0x20000110
    5544:	fffff8ff 	.word	0xfffff8ff
    5548:	ffffefff 	.word	0xffffefff

0000554c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    554c:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    554e:	7a03      	ldrb	r3, [r0, #8]
    5550:	069b      	lsls	r3, r3, #26
    5552:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    5554:	8942      	ldrh	r2, [r0, #10]
    5556:	0592      	lsls	r2, r2, #22
    5558:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    555a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    555c:	4918      	ldr	r1, [pc, #96]	; (55c0 <system_clock_source_dfll_set_config+0x74>)
    555e:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    5560:	7983      	ldrb	r3, [r0, #6]
    5562:	79c2      	ldrb	r2, [r0, #7]
    5564:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    5566:	8842      	ldrh	r2, [r0, #2]
    5568:	8884      	ldrh	r4, [r0, #4]
    556a:	4322      	orrs	r2, r4
    556c:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    556e:	7842      	ldrb	r2, [r0, #1]
    5570:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    5572:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    5574:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    5576:	7803      	ldrb	r3, [r0, #0]
    5578:	2b04      	cmp	r3, #4
    557a:	d011      	beq.n	55a0 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    557c:	2b20      	cmp	r3, #32
    557e:	d10e      	bne.n	559e <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5580:	7b03      	ldrb	r3, [r0, #12]
    5582:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    5584:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5586:	4313      	orrs	r3, r2
    5588:	89c2      	ldrh	r2, [r0, #14]
    558a:	0412      	lsls	r2, r2, #16
    558c:	490d      	ldr	r1, [pc, #52]	; (55c4 <system_clock_source_dfll_set_config+0x78>)
    558e:	400a      	ands	r2, r1
    5590:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    5592:	4a0b      	ldr	r2, [pc, #44]	; (55c0 <system_clock_source_dfll_set_config+0x74>)
    5594:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    5596:	6811      	ldr	r1, [r2, #0]
    5598:	4b0b      	ldr	r3, [pc, #44]	; (55c8 <system_clock_source_dfll_set_config+0x7c>)
    559a:	430b      	orrs	r3, r1
    559c:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    559e:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    55a0:	7b03      	ldrb	r3, [r0, #12]
    55a2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    55a4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    55a6:	4313      	orrs	r3, r2
    55a8:	89c2      	ldrh	r2, [r0, #14]
    55aa:	0412      	lsls	r2, r2, #16
    55ac:	4905      	ldr	r1, [pc, #20]	; (55c4 <system_clock_source_dfll_set_config+0x78>)
    55ae:	400a      	ands	r2, r1
    55b0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    55b2:	4a03      	ldr	r2, [pc, #12]	; (55c0 <system_clock_source_dfll_set_config+0x74>)
    55b4:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    55b6:	6813      	ldr	r3, [r2, #0]
    55b8:	2104      	movs	r1, #4
    55ba:	430b      	orrs	r3, r1
    55bc:	6013      	str	r3, [r2, #0]
    55be:	e7ee      	b.n	559e <system_clock_source_dfll_set_config+0x52>
    55c0:	20000110 	.word	0x20000110
    55c4:	03ff0000 	.word	0x03ff0000
    55c8:	00000424 	.word	0x00000424

000055cc <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    55cc:	2808      	cmp	r0, #8
    55ce:	d803      	bhi.n	55d8 <system_clock_source_enable+0xc>
    55d0:	0080      	lsls	r0, r0, #2
    55d2:	4b25      	ldr	r3, [pc, #148]	; (5668 <system_clock_source_enable+0x9c>)
    55d4:	581b      	ldr	r3, [r3, r0]
    55d6:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    55d8:	2017      	movs	r0, #23
    55da:	e044      	b.n	5666 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    55dc:	4a23      	ldr	r2, [pc, #140]	; (566c <system_clock_source_enable+0xa0>)
    55de:	6a13      	ldr	r3, [r2, #32]
    55e0:	2102      	movs	r1, #2
    55e2:	430b      	orrs	r3, r1
    55e4:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    55e6:	2000      	movs	r0, #0
    55e8:	e03d      	b.n	5666 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    55ea:	4a20      	ldr	r2, [pc, #128]	; (566c <system_clock_source_enable+0xa0>)
    55ec:	6993      	ldr	r3, [r2, #24]
    55ee:	2102      	movs	r1, #2
    55f0:	430b      	orrs	r3, r1
    55f2:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    55f4:	2000      	movs	r0, #0
		break;
    55f6:	e036      	b.n	5666 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    55f8:	4a1c      	ldr	r2, [pc, #112]	; (566c <system_clock_source_enable+0xa0>)
    55fa:	8a13      	ldrh	r3, [r2, #16]
    55fc:	2102      	movs	r1, #2
    55fe:	430b      	orrs	r3, r1
    5600:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    5602:	2000      	movs	r0, #0
		break;
    5604:	e02f      	b.n	5666 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    5606:	4a19      	ldr	r2, [pc, #100]	; (566c <system_clock_source_enable+0xa0>)
    5608:	8a93      	ldrh	r3, [r2, #20]
    560a:	2102      	movs	r1, #2
    560c:	430b      	orrs	r3, r1
    560e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    5610:	2000      	movs	r0, #0
		break;
    5612:	e028      	b.n	5666 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    5614:	4916      	ldr	r1, [pc, #88]	; (5670 <system_clock_source_enable+0xa4>)
    5616:	680b      	ldr	r3, [r1, #0]
    5618:	2202      	movs	r2, #2
    561a:	4313      	orrs	r3, r2
    561c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    561e:	4b13      	ldr	r3, [pc, #76]	; (566c <system_clock_source_enable+0xa0>)
    5620:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5622:	0019      	movs	r1, r3
    5624:	320e      	adds	r2, #14
    5626:	68cb      	ldr	r3, [r1, #12]
    5628:	421a      	tst	r2, r3
    562a:	d0fc      	beq.n	5626 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    562c:	4a10      	ldr	r2, [pc, #64]	; (5670 <system_clock_source_enable+0xa4>)
    562e:	6891      	ldr	r1, [r2, #8]
    5630:	4b0e      	ldr	r3, [pc, #56]	; (566c <system_clock_source_enable+0xa0>)
    5632:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    5634:	6852      	ldr	r2, [r2, #4]
    5636:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    5638:	2200      	movs	r2, #0
    563a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    563c:	0019      	movs	r1, r3
    563e:	3210      	adds	r2, #16
    5640:	68cb      	ldr	r3, [r1, #12]
    5642:	421a      	tst	r2, r3
    5644:	d0fc      	beq.n	5640 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    5646:	4b0a      	ldr	r3, [pc, #40]	; (5670 <system_clock_source_enable+0xa4>)
    5648:	681b      	ldr	r3, [r3, #0]
    564a:	b29b      	uxth	r3, r3
    564c:	4a07      	ldr	r2, [pc, #28]	; (566c <system_clock_source_enable+0xa0>)
    564e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    5650:	2000      	movs	r0, #0
    5652:	e008      	b.n	5666 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    5654:	4905      	ldr	r1, [pc, #20]	; (566c <system_clock_source_enable+0xa0>)
    5656:	2244      	movs	r2, #68	; 0x44
    5658:	5c8b      	ldrb	r3, [r1, r2]
    565a:	2002      	movs	r0, #2
    565c:	4303      	orrs	r3, r0
    565e:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    5660:	2000      	movs	r0, #0
		break;
    5662:	e000      	b.n	5666 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    5664:	2000      	movs	r0, #0
}
    5666:	4770      	bx	lr
    5668:	0000bc9c 	.word	0x0000bc9c
    566c:	40000800 	.word	0x40000800
    5670:	20000110 	.word	0x20000110

00005674 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    5674:	b5f0      	push	{r4, r5, r6, r7, lr}
    5676:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    5678:	22c2      	movs	r2, #194	; 0xc2
    567a:	00d2      	lsls	r2, r2, #3
    567c:	4b47      	ldr	r3, [pc, #284]	; (579c <system_clock_init+0x128>)
    567e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    5680:	4a47      	ldr	r2, [pc, #284]	; (57a0 <system_clock_init+0x12c>)
    5682:	6853      	ldr	r3, [r2, #4]
    5684:	211e      	movs	r1, #30
    5686:	438b      	bics	r3, r1
    5688:	391a      	subs	r1, #26
    568a:	430b      	orrs	r3, r1
    568c:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    568e:	2202      	movs	r2, #2
    5690:	ab01      	add	r3, sp, #4
    5692:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    5694:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    5696:	4d43      	ldr	r5, [pc, #268]	; (57a4 <system_clock_init+0x130>)
    5698:	b2e0      	uxtb	r0, r4
    569a:	a901      	add	r1, sp, #4
    569c:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    569e:	3401      	adds	r4, #1
    56a0:	2c25      	cmp	r4, #37	; 0x25
    56a2:	d1f9      	bne.n	5698 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    56a4:	a80a      	add	r0, sp, #40	; 0x28
    56a6:	2300      	movs	r3, #0
    56a8:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    56aa:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    56ac:	2280      	movs	r2, #128	; 0x80
    56ae:	0212      	lsls	r2, r2, #8
    56b0:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    56b2:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    56b4:	2201      	movs	r2, #1
    56b6:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    56b8:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    56ba:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    56bc:	3202      	adds	r2, #2
    56be:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    56c0:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    56c2:	4b39      	ldr	r3, [pc, #228]	; (57a8 <system_clock_init+0x134>)
    56c4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    56c6:	2005      	movs	r0, #5
    56c8:	4b38      	ldr	r3, [pc, #224]	; (57ac <system_clock_init+0x138>)
    56ca:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    56cc:	4933      	ldr	r1, [pc, #204]	; (579c <system_clock_init+0x128>)
    56ce:	2202      	movs	r2, #2
    56d0:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    56d2:	421a      	tst	r2, r3
    56d4:	d0fc      	beq.n	56d0 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    56d6:	4a31      	ldr	r2, [pc, #196]	; (579c <system_clock_init+0x128>)
    56d8:	8a93      	ldrh	r3, [r2, #20]
    56da:	2180      	movs	r1, #128	; 0x80
    56dc:	430b      	orrs	r3, r1
    56de:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    56e0:	ab05      	add	r3, sp, #20
    56e2:	2100      	movs	r1, #0
    56e4:	2200      	movs	r2, #0
    56e6:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    56e8:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    56ea:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    56ec:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    56ee:	313f      	adds	r1, #63	; 0x3f
    56f0:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    56f2:	393b      	subs	r1, #59	; 0x3b
    56f4:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    56f6:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    56f8:	4b2d      	ldr	r3, [pc, #180]	; (57b0 <system_clock_init+0x13c>)
    56fa:	681b      	ldr	r3, [r3, #0]
    56fc:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    56fe:	2b3f      	cmp	r3, #63	; 0x3f
    5700:	d04a      	beq.n	5798 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    5702:	a805      	add	r0, sp, #20
    5704:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    5706:	4b2b      	ldr	r3, [pc, #172]	; (57b4 <system_clock_init+0x140>)
    5708:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    570a:	2307      	movs	r3, #7
    570c:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    570e:	3338      	adds	r3, #56	; 0x38
    5710:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    5712:	4b29      	ldr	r3, [pc, #164]	; (57b8 <system_clock_init+0x144>)
    5714:	4798      	blx	r3
	config->run_in_standby  = false;
    5716:	a804      	add	r0, sp, #16
    5718:	2500      	movs	r5, #0
    571a:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    571c:	2601      	movs	r6, #1
    571e:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    5720:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    5722:	4b26      	ldr	r3, [pc, #152]	; (57bc <system_clock_init+0x148>)
    5724:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    5726:	2006      	movs	r0, #6
    5728:	4f20      	ldr	r7, [pc, #128]	; (57ac <system_clock_init+0x138>)
    572a:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    572c:	4b24      	ldr	r3, [pc, #144]	; (57c0 <system_clock_init+0x14c>)
    572e:	4798      	blx	r3
	config->division_factor    = 1;
    5730:	ac01      	add	r4, sp, #4
    5732:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    5734:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    5736:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    5738:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    573a:	2305      	movs	r3, #5
    573c:	7023      	strb	r3, [r4, #0]
    573e:	0021      	movs	r1, r4
    5740:	2001      	movs	r0, #1
    5742:	4b20      	ldr	r3, [pc, #128]	; (57c4 <system_clock_init+0x150>)
    5744:	4798      	blx	r3
    5746:	2001      	movs	r0, #1
    5748:	4b1f      	ldr	r3, [pc, #124]	; (57c8 <system_clock_init+0x154>)
    574a:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    574c:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    574e:	0021      	movs	r1, r4
    5750:	2000      	movs	r0, #0
    5752:	4b14      	ldr	r3, [pc, #80]	; (57a4 <system_clock_init+0x130>)
    5754:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    5756:	2000      	movs	r0, #0
    5758:	4b1c      	ldr	r3, [pc, #112]	; (57cc <system_clock_init+0x158>)
    575a:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    575c:	2007      	movs	r0, #7
    575e:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    5760:	490e      	ldr	r1, [pc, #56]	; (579c <system_clock_init+0x128>)
    5762:	22d0      	movs	r2, #208	; 0xd0
    5764:	68cb      	ldr	r3, [r1, #12]
    5766:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    5768:	2bd0      	cmp	r3, #208	; 0xd0
    576a:	d1fb      	bne.n	5764 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    576c:	4a18      	ldr	r2, [pc, #96]	; (57d0 <system_clock_init+0x15c>)
    576e:	2300      	movs	r3, #0
    5770:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    5772:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    5774:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    5776:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    5778:	a901      	add	r1, sp, #4
    577a:	2201      	movs	r2, #1
    577c:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    577e:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    5780:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    5782:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    5784:	3307      	adds	r3, #7
    5786:	700b      	strb	r3, [r1, #0]
    5788:	2000      	movs	r0, #0
    578a:	4b0e      	ldr	r3, [pc, #56]	; (57c4 <system_clock_init+0x150>)
    578c:	4798      	blx	r3
    578e:	2000      	movs	r0, #0
    5790:	4b0d      	ldr	r3, [pc, #52]	; (57c8 <system_clock_init+0x154>)
    5792:	4798      	blx	r3
#endif
}
    5794:	b00f      	add	sp, #60	; 0x3c
    5796:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    5798:	3b20      	subs	r3, #32
    579a:	e7b2      	b.n	5702 <system_clock_init+0x8e>
    579c:	40000800 	.word	0x40000800
    57a0:	41004000 	.word	0x41004000
    57a4:	00005a0d 	.word	0x00005a0d
    57a8:	00005495 	.word	0x00005495
    57ac:	000055cd 	.word	0x000055cd
    57b0:	00806024 	.word	0x00806024
    57b4:	000005b9 	.word	0x000005b9
    57b8:	0000554d 	.word	0x0000554d
    57bc:	00005459 	.word	0x00005459
    57c0:	000057d5 	.word	0x000057d5
    57c4:	000057f9 	.word	0x000057f9
    57c8:	000058b1 	.word	0x000058b1
    57cc:	00005981 	.word	0x00005981
    57d0:	40000400 	.word	0x40000400

000057d4 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    57d4:	4a06      	ldr	r2, [pc, #24]	; (57f0 <system_gclk_init+0x1c>)
    57d6:	6993      	ldr	r3, [r2, #24]
    57d8:	2108      	movs	r1, #8
    57da:	430b      	orrs	r3, r1
    57dc:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    57de:	2201      	movs	r2, #1
    57e0:	4b04      	ldr	r3, [pc, #16]	; (57f4 <system_gclk_init+0x20>)
    57e2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    57e4:	0019      	movs	r1, r3
    57e6:	780b      	ldrb	r3, [r1, #0]
    57e8:	4213      	tst	r3, r2
    57ea:	d1fc      	bne.n	57e6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    57ec:	4770      	bx	lr
    57ee:	46c0      	nop			; (mov r8, r8)
    57f0:	40000400 	.word	0x40000400
    57f4:	40000c00 	.word	0x40000c00

000057f8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    57f8:	b570      	push	{r4, r5, r6, lr}
    57fa:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    57fc:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    57fe:	780d      	ldrb	r5, [r1, #0]
    5800:	022d      	lsls	r5, r5, #8
    5802:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    5804:	784b      	ldrb	r3, [r1, #1]
    5806:	2b00      	cmp	r3, #0
    5808:	d002      	beq.n	5810 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    580a:	2380      	movs	r3, #128	; 0x80
    580c:	02db      	lsls	r3, r3, #11
    580e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    5810:	7a4b      	ldrb	r3, [r1, #9]
    5812:	2b00      	cmp	r3, #0
    5814:	d002      	beq.n	581c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    5816:	2380      	movs	r3, #128	; 0x80
    5818:	031b      	lsls	r3, r3, #12
    581a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    581c:	6848      	ldr	r0, [r1, #4]
    581e:	2801      	cmp	r0, #1
    5820:	d910      	bls.n	5844 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    5822:	1e43      	subs	r3, r0, #1
    5824:	4218      	tst	r0, r3
    5826:	d134      	bne.n	5892 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    5828:	2802      	cmp	r0, #2
    582a:	d930      	bls.n	588e <system_gclk_gen_set_config+0x96>
    582c:	2302      	movs	r3, #2
    582e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    5830:	3201      	adds	r2, #1
						mask <<= 1) {
    5832:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    5834:	4298      	cmp	r0, r3
    5836:	d8fb      	bhi.n	5830 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    5838:	0212      	lsls	r2, r2, #8
    583a:	4332      	orrs	r2, r6
    583c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    583e:	2380      	movs	r3, #128	; 0x80
    5840:	035b      	lsls	r3, r3, #13
    5842:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    5844:	7a0b      	ldrb	r3, [r1, #8]
    5846:	2b00      	cmp	r3, #0
    5848:	d002      	beq.n	5850 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    584a:	2380      	movs	r3, #128	; 0x80
    584c:	039b      	lsls	r3, r3, #14
    584e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5850:	4a13      	ldr	r2, [pc, #76]	; (58a0 <system_gclk_gen_set_config+0xa8>)
    5852:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    5854:	b25b      	sxtb	r3, r3
    5856:	2b00      	cmp	r3, #0
    5858:	dbfb      	blt.n	5852 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    585a:	4b12      	ldr	r3, [pc, #72]	; (58a4 <system_gclk_gen_set_config+0xac>)
    585c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    585e:	4b12      	ldr	r3, [pc, #72]	; (58a8 <system_gclk_gen_set_config+0xb0>)
    5860:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5862:	4a0f      	ldr	r2, [pc, #60]	; (58a0 <system_gclk_gen_set_config+0xa8>)
    5864:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    5866:	b25b      	sxtb	r3, r3
    5868:	2b00      	cmp	r3, #0
    586a:	dbfb      	blt.n	5864 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    586c:	4b0c      	ldr	r3, [pc, #48]	; (58a0 <system_gclk_gen_set_config+0xa8>)
    586e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5870:	001a      	movs	r2, r3
    5872:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    5874:	b25b      	sxtb	r3, r3
    5876:	2b00      	cmp	r3, #0
    5878:	dbfb      	blt.n	5872 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    587a:	4a09      	ldr	r2, [pc, #36]	; (58a0 <system_gclk_gen_set_config+0xa8>)
    587c:	6853      	ldr	r3, [r2, #4]
    587e:	2180      	movs	r1, #128	; 0x80
    5880:	0249      	lsls	r1, r1, #9
    5882:	400b      	ands	r3, r1
    5884:	431d      	orrs	r5, r3
    5886:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    5888:	4b08      	ldr	r3, [pc, #32]	; (58ac <system_gclk_gen_set_config+0xb4>)
    588a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    588c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    588e:	2200      	movs	r2, #0
    5890:	e7d2      	b.n	5838 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    5892:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    5894:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    5896:	2380      	movs	r3, #128	; 0x80
    5898:	029b      	lsls	r3, r3, #10
    589a:	431d      	orrs	r5, r3
    589c:	e7d2      	b.n	5844 <system_gclk_gen_set_config+0x4c>
    589e:	46c0      	nop			; (mov r8, r8)
    58a0:	40000c00 	.word	0x40000c00
    58a4:	000042c1 	.word	0x000042c1
    58a8:	40000c08 	.word	0x40000c08
    58ac:	00004301 	.word	0x00004301

000058b0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    58b0:	b510      	push	{r4, lr}
    58b2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    58b4:	4a0b      	ldr	r2, [pc, #44]	; (58e4 <system_gclk_gen_enable+0x34>)
    58b6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    58b8:	b25b      	sxtb	r3, r3
    58ba:	2b00      	cmp	r3, #0
    58bc:	dbfb      	blt.n	58b6 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    58be:	4b0a      	ldr	r3, [pc, #40]	; (58e8 <system_gclk_gen_enable+0x38>)
    58c0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    58c2:	4b0a      	ldr	r3, [pc, #40]	; (58ec <system_gclk_gen_enable+0x3c>)
    58c4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    58c6:	4a07      	ldr	r2, [pc, #28]	; (58e4 <system_gclk_gen_enable+0x34>)
    58c8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    58ca:	b25b      	sxtb	r3, r3
    58cc:	2b00      	cmp	r3, #0
    58ce:	dbfb      	blt.n	58c8 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    58d0:	4a04      	ldr	r2, [pc, #16]	; (58e4 <system_gclk_gen_enable+0x34>)
    58d2:	6851      	ldr	r1, [r2, #4]
    58d4:	2380      	movs	r3, #128	; 0x80
    58d6:	025b      	lsls	r3, r3, #9
    58d8:	430b      	orrs	r3, r1
    58da:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    58dc:	4b04      	ldr	r3, [pc, #16]	; (58f0 <system_gclk_gen_enable+0x40>)
    58de:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    58e0:	bd10      	pop	{r4, pc}
    58e2:	46c0      	nop			; (mov r8, r8)
    58e4:	40000c00 	.word	0x40000c00
    58e8:	000042c1 	.word	0x000042c1
    58ec:	40000c04 	.word	0x40000c04
    58f0:	00004301 	.word	0x00004301

000058f4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    58f4:	b570      	push	{r4, r5, r6, lr}
    58f6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    58f8:	4a1a      	ldr	r2, [pc, #104]	; (5964 <system_gclk_gen_get_hz+0x70>)
    58fa:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    58fc:	b25b      	sxtb	r3, r3
    58fe:	2b00      	cmp	r3, #0
    5900:	dbfb      	blt.n	58fa <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    5902:	4b19      	ldr	r3, [pc, #100]	; (5968 <system_gclk_gen_get_hz+0x74>)
    5904:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5906:	4b19      	ldr	r3, [pc, #100]	; (596c <system_gclk_gen_get_hz+0x78>)
    5908:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    590a:	4a16      	ldr	r2, [pc, #88]	; (5964 <system_gclk_gen_get_hz+0x70>)
    590c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    590e:	b25b      	sxtb	r3, r3
    5910:	2b00      	cmp	r3, #0
    5912:	dbfb      	blt.n	590c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    5914:	4e13      	ldr	r6, [pc, #76]	; (5964 <system_gclk_gen_get_hz+0x70>)
    5916:	6870      	ldr	r0, [r6, #4]
    5918:	04c0      	lsls	r0, r0, #19
    591a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    591c:	4b14      	ldr	r3, [pc, #80]	; (5970 <system_gclk_gen_get_hz+0x7c>)
    591e:	4798      	blx	r3
    5920:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5922:	4b12      	ldr	r3, [pc, #72]	; (596c <system_gclk_gen_get_hz+0x78>)
    5924:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    5926:	6876      	ldr	r6, [r6, #4]
    5928:	02f6      	lsls	r6, r6, #11
    592a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    592c:	4b11      	ldr	r3, [pc, #68]	; (5974 <system_gclk_gen_get_hz+0x80>)
    592e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5930:	4a0c      	ldr	r2, [pc, #48]	; (5964 <system_gclk_gen_get_hz+0x70>)
    5932:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5934:	b25b      	sxtb	r3, r3
    5936:	2b00      	cmp	r3, #0
    5938:	dbfb      	blt.n	5932 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    593a:	4b0a      	ldr	r3, [pc, #40]	; (5964 <system_gclk_gen_get_hz+0x70>)
    593c:	689c      	ldr	r4, [r3, #8]
    593e:	0224      	lsls	r4, r4, #8
    5940:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    5942:	4b0d      	ldr	r3, [pc, #52]	; (5978 <system_gclk_gen_get_hz+0x84>)
    5944:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    5946:	2e00      	cmp	r6, #0
    5948:	d107      	bne.n	595a <system_gclk_gen_get_hz+0x66>
    594a:	2c01      	cmp	r4, #1
    594c:	d907      	bls.n	595e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    594e:	0021      	movs	r1, r4
    5950:	0028      	movs	r0, r5
    5952:	4b0a      	ldr	r3, [pc, #40]	; (597c <system_gclk_gen_get_hz+0x88>)
    5954:	4798      	blx	r3
    5956:	0005      	movs	r5, r0
    5958:	e001      	b.n	595e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    595a:	3401      	adds	r4, #1
    595c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    595e:	0028      	movs	r0, r5
    5960:	bd70      	pop	{r4, r5, r6, pc}
    5962:	46c0      	nop			; (mov r8, r8)
    5964:	40000c00 	.word	0x40000c00
    5968:	000042c1 	.word	0x000042c1
    596c:	40000c04 	.word	0x40000c04
    5970:	000053c9 	.word	0x000053c9
    5974:	40000c08 	.word	0x40000c08
    5978:	00004301 	.word	0x00004301
    597c:	00007b99 	.word	0x00007b99

00005980 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    5980:	b510      	push	{r4, lr}
    5982:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    5984:	4b06      	ldr	r3, [pc, #24]	; (59a0 <system_gclk_chan_enable+0x20>)
    5986:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5988:	4b06      	ldr	r3, [pc, #24]	; (59a4 <system_gclk_chan_enable+0x24>)
    598a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    598c:	4a06      	ldr	r2, [pc, #24]	; (59a8 <system_gclk_chan_enable+0x28>)
    598e:	8853      	ldrh	r3, [r2, #2]
    5990:	2180      	movs	r1, #128	; 0x80
    5992:	01c9      	lsls	r1, r1, #7
    5994:	430b      	orrs	r3, r1
    5996:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    5998:	4b04      	ldr	r3, [pc, #16]	; (59ac <system_gclk_chan_enable+0x2c>)
    599a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    599c:	bd10      	pop	{r4, pc}
    599e:	46c0      	nop			; (mov r8, r8)
    59a0:	000042c1 	.word	0x000042c1
    59a4:	40000c02 	.word	0x40000c02
    59a8:	40000c00 	.word	0x40000c00
    59ac:	00004301 	.word	0x00004301

000059b0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    59b0:	b510      	push	{r4, lr}
    59b2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    59b4:	4b0f      	ldr	r3, [pc, #60]	; (59f4 <system_gclk_chan_disable+0x44>)
    59b6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    59b8:	4b0f      	ldr	r3, [pc, #60]	; (59f8 <system_gclk_chan_disable+0x48>)
    59ba:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    59bc:	4a0f      	ldr	r2, [pc, #60]	; (59fc <system_gclk_chan_disable+0x4c>)
    59be:	8853      	ldrh	r3, [r2, #2]
    59c0:	051b      	lsls	r3, r3, #20
    59c2:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    59c4:	8853      	ldrh	r3, [r2, #2]
    59c6:	490e      	ldr	r1, [pc, #56]	; (5a00 <system_gclk_chan_disable+0x50>)
    59c8:	400b      	ands	r3, r1
    59ca:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    59cc:	8853      	ldrh	r3, [r2, #2]
    59ce:	490d      	ldr	r1, [pc, #52]	; (5a04 <system_gclk_chan_disable+0x54>)
    59d0:	400b      	ands	r3, r1
    59d2:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    59d4:	0011      	movs	r1, r2
    59d6:	2280      	movs	r2, #128	; 0x80
    59d8:	01d2      	lsls	r2, r2, #7
    59da:	884b      	ldrh	r3, [r1, #2]
    59dc:	4213      	tst	r3, r2
    59de:	d1fc      	bne.n	59da <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    59e0:	4906      	ldr	r1, [pc, #24]	; (59fc <system_gclk_chan_disable+0x4c>)
    59e2:	884a      	ldrh	r2, [r1, #2]
    59e4:	0203      	lsls	r3, r0, #8
    59e6:	4806      	ldr	r0, [pc, #24]	; (5a00 <system_gclk_chan_disable+0x50>)
    59e8:	4002      	ands	r2, r0
    59ea:	4313      	orrs	r3, r2
    59ec:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    59ee:	4b06      	ldr	r3, [pc, #24]	; (5a08 <system_gclk_chan_disable+0x58>)
    59f0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    59f2:	bd10      	pop	{r4, pc}
    59f4:	000042c1 	.word	0x000042c1
    59f8:	40000c02 	.word	0x40000c02
    59fc:	40000c00 	.word	0x40000c00
    5a00:	fffff0ff 	.word	0xfffff0ff
    5a04:	ffffbfff 	.word	0xffffbfff
    5a08:	00004301 	.word	0x00004301

00005a0c <system_gclk_chan_set_config>:
{
    5a0c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    5a0e:	780c      	ldrb	r4, [r1, #0]
    5a10:	0224      	lsls	r4, r4, #8
    5a12:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    5a14:	4b02      	ldr	r3, [pc, #8]	; (5a20 <system_gclk_chan_set_config+0x14>)
    5a16:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    5a18:	b2a4      	uxth	r4, r4
    5a1a:	4b02      	ldr	r3, [pc, #8]	; (5a24 <system_gclk_chan_set_config+0x18>)
    5a1c:	805c      	strh	r4, [r3, #2]
}
    5a1e:	bd10      	pop	{r4, pc}
    5a20:	000059b1 	.word	0x000059b1
    5a24:	40000c00 	.word	0x40000c00

00005a28 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    5a28:	b510      	push	{r4, lr}
    5a2a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    5a2c:	4b06      	ldr	r3, [pc, #24]	; (5a48 <system_gclk_chan_get_hz+0x20>)
    5a2e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5a30:	4b06      	ldr	r3, [pc, #24]	; (5a4c <system_gclk_chan_get_hz+0x24>)
    5a32:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    5a34:	4b06      	ldr	r3, [pc, #24]	; (5a50 <system_gclk_chan_get_hz+0x28>)
    5a36:	885c      	ldrh	r4, [r3, #2]
    5a38:	0524      	lsls	r4, r4, #20
    5a3a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    5a3c:	4b05      	ldr	r3, [pc, #20]	; (5a54 <system_gclk_chan_get_hz+0x2c>)
    5a3e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    5a40:	0020      	movs	r0, r4
    5a42:	4b05      	ldr	r3, [pc, #20]	; (5a58 <system_gclk_chan_get_hz+0x30>)
    5a44:	4798      	blx	r3
}
    5a46:	bd10      	pop	{r4, pc}
    5a48:	000042c1 	.word	0x000042c1
    5a4c:	40000c02 	.word	0x40000c02
    5a50:	40000c00 	.word	0x40000c00
    5a54:	00004301 	.word	0x00004301
    5a58:	000058f5 	.word	0x000058f5

00005a5c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    5a5c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    5a5e:	78d3      	ldrb	r3, [r2, #3]
    5a60:	2b00      	cmp	r3, #0
    5a62:	d135      	bne.n	5ad0 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    5a64:	7813      	ldrb	r3, [r2, #0]
    5a66:	2b80      	cmp	r3, #128	; 0x80
    5a68:	d029      	beq.n	5abe <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    5a6a:	061b      	lsls	r3, r3, #24
    5a6c:	2480      	movs	r4, #128	; 0x80
    5a6e:	0264      	lsls	r4, r4, #9
    5a70:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    5a72:	7854      	ldrb	r4, [r2, #1]
    5a74:	2502      	movs	r5, #2
    5a76:	43ac      	bics	r4, r5
    5a78:	d106      	bne.n	5a88 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    5a7a:	7894      	ldrb	r4, [r2, #2]
    5a7c:	2c00      	cmp	r4, #0
    5a7e:	d120      	bne.n	5ac2 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    5a80:	2480      	movs	r4, #128	; 0x80
    5a82:	02a4      	lsls	r4, r4, #10
    5a84:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    5a86:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5a88:	7854      	ldrb	r4, [r2, #1]
    5a8a:	3c01      	subs	r4, #1
    5a8c:	2c01      	cmp	r4, #1
    5a8e:	d91c      	bls.n	5aca <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    5a90:	040d      	lsls	r5, r1, #16
    5a92:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    5a94:	24a0      	movs	r4, #160	; 0xa0
    5a96:	05e4      	lsls	r4, r4, #23
    5a98:	432c      	orrs	r4, r5
    5a9a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5a9c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    5a9e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    5aa0:	24d0      	movs	r4, #208	; 0xd0
    5aa2:	0624      	lsls	r4, r4, #24
    5aa4:	432c      	orrs	r4, r5
    5aa6:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5aa8:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    5aaa:	78d4      	ldrb	r4, [r2, #3]
    5aac:	2c00      	cmp	r4, #0
    5aae:	d122      	bne.n	5af6 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    5ab0:	035b      	lsls	r3, r3, #13
    5ab2:	d51c      	bpl.n	5aee <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    5ab4:	7893      	ldrb	r3, [r2, #2]
    5ab6:	2b01      	cmp	r3, #1
    5ab8:	d01e      	beq.n	5af8 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    5aba:	6141      	str	r1, [r0, #20]
    5abc:	e017      	b.n	5aee <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    5abe:	2300      	movs	r3, #0
    5ac0:	e7d7      	b.n	5a72 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    5ac2:	24c0      	movs	r4, #192	; 0xc0
    5ac4:	02e4      	lsls	r4, r4, #11
    5ac6:	4323      	orrs	r3, r4
    5ac8:	e7dd      	b.n	5a86 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    5aca:	4c0d      	ldr	r4, [pc, #52]	; (5b00 <_system_pinmux_config+0xa4>)
    5acc:	4023      	ands	r3, r4
    5ace:	e7df      	b.n	5a90 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    5ad0:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    5ad2:	040c      	lsls	r4, r1, #16
    5ad4:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    5ad6:	23a0      	movs	r3, #160	; 0xa0
    5ad8:	05db      	lsls	r3, r3, #23
    5ada:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5adc:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    5ade:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    5ae0:	23d0      	movs	r3, #208	; 0xd0
    5ae2:	061b      	lsls	r3, r3, #24
    5ae4:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5ae6:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    5ae8:	78d3      	ldrb	r3, [r2, #3]
    5aea:	2b00      	cmp	r3, #0
    5aec:	d103      	bne.n	5af6 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5aee:	7853      	ldrb	r3, [r2, #1]
    5af0:	3b01      	subs	r3, #1
    5af2:	2b01      	cmp	r3, #1
    5af4:	d902      	bls.n	5afc <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    5af6:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    5af8:	6181      	str	r1, [r0, #24]
    5afa:	e7f8      	b.n	5aee <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    5afc:	6081      	str	r1, [r0, #8]
}
    5afe:	e7fa      	b.n	5af6 <_system_pinmux_config+0x9a>
    5b00:	fffbffff 	.word	0xfffbffff

00005b04 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    5b04:	b510      	push	{r4, lr}
    5b06:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    5b08:	09c1      	lsrs	r1, r0, #7
		return NULL;
    5b0a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5b0c:	2900      	cmp	r1, #0
    5b0e:	d104      	bne.n	5b1a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    5b10:	0943      	lsrs	r3, r0, #5
    5b12:	01db      	lsls	r3, r3, #7
    5b14:	4905      	ldr	r1, [pc, #20]	; (5b2c <system_pinmux_pin_set_config+0x28>)
    5b16:	468c      	mov	ip, r1
    5b18:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    5b1a:	241f      	movs	r4, #31
    5b1c:	4020      	ands	r0, r4
    5b1e:	2101      	movs	r1, #1
    5b20:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    5b22:	0018      	movs	r0, r3
    5b24:	4b02      	ldr	r3, [pc, #8]	; (5b30 <system_pinmux_pin_set_config+0x2c>)
    5b26:	4798      	blx	r3
}
    5b28:	bd10      	pop	{r4, pc}
    5b2a:	46c0      	nop			; (mov r8, r8)
    5b2c:	41004400 	.word	0x41004400
    5b30:	00005a5d 	.word	0x00005a5d

00005b34 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    5b34:	4770      	bx	lr
	...

00005b38 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    5b38:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    5b3a:	4b05      	ldr	r3, [pc, #20]	; (5b50 <system_init+0x18>)
    5b3c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    5b3e:	4b05      	ldr	r3, [pc, #20]	; (5b54 <system_init+0x1c>)
    5b40:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    5b42:	4b05      	ldr	r3, [pc, #20]	; (5b58 <system_init+0x20>)
    5b44:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    5b46:	4b05      	ldr	r3, [pc, #20]	; (5b5c <system_init+0x24>)
    5b48:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    5b4a:	4b05      	ldr	r3, [pc, #20]	; (5b60 <system_init+0x28>)
    5b4c:	4798      	blx	r3
}
    5b4e:	bd10      	pop	{r4, pc}
    5b50:	00005675 	.word	0x00005675
    5b54:	00004331 	.word	0x00004331
    5b58:	00005b35 	.word	0x00005b35
    5b5c:	00004441 	.word	0x00004441
    5b60:	00005b35 	.word	0x00005b35

00005b64 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    5b64:	4b09      	ldr	r3, [pc, #36]	; (5b8c <_tcc_get_inst_index+0x28>)
    5b66:	4298      	cmp	r0, r3
    5b68:	d00c      	beq.n	5b84 <_tcc_get_inst_index+0x20>
    5b6a:	4b09      	ldr	r3, [pc, #36]	; (5b90 <_tcc_get_inst_index+0x2c>)
    5b6c:	4298      	cmp	r0, r3
    5b6e:	d007      	beq.n	5b80 <_tcc_get_inst_index+0x1c>
    5b70:	4a08      	ldr	r2, [pc, #32]	; (5b94 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    5b72:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
    5b74:	4290      	cmp	r0, r2
    5b76:	d001      	beq.n	5b7c <_tcc_get_inst_index+0x18>
}
    5b78:	0018      	movs	r0, r3
    5b7a:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    5b7c:	3302      	adds	r3, #2
    5b7e:	e002      	b.n	5b86 <_tcc_get_inst_index+0x22>
    5b80:	2301      	movs	r3, #1
    5b82:	e000      	b.n	5b86 <_tcc_get_inst_index+0x22>
    5b84:	2300      	movs	r3, #0
			return i;
    5b86:	b2db      	uxtb	r3, r3
    5b88:	e7f6      	b.n	5b78 <_tcc_get_inst_index+0x14>
    5b8a:	46c0      	nop			; (mov r8, r8)
    5b8c:	42002000 	.word	0x42002000
    5b90:	42002400 	.word	0x42002400
    5b94:	42002800 	.word	0x42002800

00005b98 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    5b98:	b510      	push	{r4, lr}
    5b9a:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    5b9c:	0008      	movs	r0, r1
    5b9e:	4b4f      	ldr	r3, [pc, #316]	; (5cdc <tcc_get_config_defaults+0x144>)
    5ba0:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
    5ba2:	2300      	movs	r3, #0
    5ba4:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    5ba6:	0080      	lsls	r0, r0, #2
    5ba8:	4a4d      	ldr	r2, [pc, #308]	; (5ce0 <tcc_get_config_defaults+0x148>)
    5baa:	5882      	ldr	r2, [r0, r2]
    5bac:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    5bae:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    5bb0:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    5bb2:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    5bb4:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    5bb6:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    5bb8:	61e3      	str	r3, [r4, #28]
    5bba:	6223      	str	r3, [r4, #32]
    5bbc:	6263      	str	r3, [r4, #36]	; 0x24
    5bbe:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    5bc0:	7523      	strb	r3, [r4, #20]
    5bc2:	7563      	strb	r3, [r4, #21]
    5bc4:	75a3      	strb	r3, [r4, #22]
    5bc6:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    5bc8:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    5bca:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    5bcc:	7423      	strb	r3, [r4, #16]
    5bce:	7463      	strb	r3, [r4, #17]
    5bd0:	74a3      	strb	r3, [r4, #18]
    5bd2:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    5bd4:	222c      	movs	r2, #44	; 0x2c
    5bd6:	54a3      	strb	r3, [r4, r2]
    5bd8:	3201      	adds	r2, #1
    5bda:	54a3      	strb	r3, [r4, r2]
    5bdc:	3201      	adds	r2, #1
    5bde:	54a3      	strb	r3, [r4, r2]
    5be0:	3201      	adds	r2, #1
    5be2:	54a3      	strb	r3, [r4, r2]
    5be4:	3201      	adds	r2, #1
    5be6:	54a3      	strb	r3, [r4, r2]
    5be8:	3201      	adds	r2, #1
    5bea:	54a3      	strb	r3, [r4, r2]
    5bec:	3201      	adds	r2, #1
    5bee:	54a3      	strb	r3, [r4, r2]
    5bf0:	3201      	adds	r2, #1
    5bf2:	54a3      	strb	r3, [r4, r2]
    5bf4:	3201      	adds	r2, #1
    5bf6:	54a3      	strb	r3, [r4, r2]
    5bf8:	3201      	adds	r2, #1
    5bfa:	54a3      	strb	r3, [r4, r2]
    5bfc:	3201      	adds	r2, #1
    5bfe:	54a3      	strb	r3, [r4, r2]
    5c00:	3201      	adds	r2, #1
    5c02:	54a3      	strb	r3, [r4, r2]
    5c04:	3201      	adds	r2, #1
    5c06:	54a3      	strb	r3, [r4, r2]
    5c08:	3201      	adds	r2, #1
    5c0a:	54a3      	strb	r3, [r4, r2]
    5c0c:	3201      	adds	r2, #1
    5c0e:	54a3      	strb	r3, [r4, r2]
    5c10:	3201      	adds	r2, #1
    5c12:	54a3      	strb	r3, [r4, r2]
    5c14:	3201      	adds	r2, #1
    5c16:	54a3      	strb	r3, [r4, r2]
    5c18:	3201      	adds	r2, #1
    5c1a:	54a3      	strb	r3, [r4, r2]
    5c1c:	3201      	adds	r2, #1
    5c1e:	54a3      	strb	r3, [r4, r2]
    5c20:	3201      	adds	r2, #1
    5c22:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    5c24:	3201      	adds	r2, #1
    5c26:	54a3      	strb	r3, [r4, r2]
    5c28:	3201      	adds	r2, #1
    5c2a:	54a3      	strb	r3, [r4, r2]
    5c2c:	3201      	adds	r2, #1
    5c2e:	54a3      	strb	r3, [r4, r2]
    5c30:	3201      	adds	r2, #1
    5c32:	54a3      	strb	r3, [r4, r2]
    5c34:	3201      	adds	r2, #1
    5c36:	54a3      	strb	r3, [r4, r2]
    5c38:	3201      	adds	r2, #1
    5c3a:	54a3      	strb	r3, [r4, r2]
    5c3c:	3201      	adds	r2, #1
    5c3e:	54a3      	strb	r3, [r4, r2]
    5c40:	3201      	adds	r2, #1
    5c42:	54a3      	strb	r3, [r4, r2]
    5c44:	3201      	adds	r2, #1
    5c46:	54a3      	strb	r3, [r4, r2]
    5c48:	3201      	adds	r2, #1
    5c4a:	54a3      	strb	r3, [r4, r2]
    5c4c:	3201      	adds	r2, #1
    5c4e:	54a3      	strb	r3, [r4, r2]
    5c50:	3201      	adds	r2, #1
    5c52:	54a3      	strb	r3, [r4, r2]
    5c54:	3201      	adds	r2, #1
    5c56:	54a3      	strb	r3, [r4, r2]
    5c58:	3201      	adds	r2, #1
    5c5a:	54a3      	strb	r3, [r4, r2]
    5c5c:	3201      	adds	r2, #1
    5c5e:	54a3      	strb	r3, [r4, r2]
    5c60:	3201      	adds	r2, #1
    5c62:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    5c64:	3201      	adds	r2, #1
    5c66:	54a3      	strb	r3, [r4, r2]
    5c68:	3201      	adds	r2, #1
    5c6a:	54a3      	strb	r3, [r4, r2]
    5c6c:	3201      	adds	r2, #1
    5c6e:	54a3      	strb	r3, [r4, r2]
    5c70:	3201      	adds	r2, #1
    5c72:	54a3      	strb	r3, [r4, r2]
    5c74:	3201      	adds	r2, #1
    5c76:	54a3      	strb	r3, [r4, r2]
    5c78:	3201      	adds	r2, #1
    5c7a:	54a3      	strb	r3, [r4, r2]
    5c7c:	3201      	adds	r2, #1
    5c7e:	54a3      	strb	r3, [r4, r2]
    5c80:	3201      	adds	r2, #1
    5c82:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    5c84:	3241      	adds	r2, #65	; 0x41
    5c86:	54a3      	strb	r3, [r4, r2]
    5c88:	65a3      	str	r3, [r4, #88]	; 0x58
    5c8a:	67a3      	str	r3, [r4, #120]	; 0x78
    5c8c:	3201      	adds	r2, #1
    5c8e:	54a3      	strb	r3, [r4, r2]
    5c90:	65e3      	str	r3, [r4, #92]	; 0x5c
    5c92:	67e3      	str	r3, [r4, #124]	; 0x7c
    5c94:	3201      	adds	r2, #1
    5c96:	54a3      	strb	r3, [r4, r2]
    5c98:	6623      	str	r3, [r4, #96]	; 0x60
    5c9a:	3a1a      	subs	r2, #26
    5c9c:	50a3      	str	r3, [r4, r2]
    5c9e:	321b      	adds	r2, #27
    5ca0:	54a3      	strb	r3, [r4, r2]
    5ca2:	6663      	str	r3, [r4, #100]	; 0x64
    5ca4:	3a17      	subs	r2, #23
    5ca6:	50a3      	str	r3, [r4, r2]
    5ca8:	3218      	adds	r2, #24
    5caa:	54a3      	strb	r3, [r4, r2]
    5cac:	66a3      	str	r3, [r4, #104]	; 0x68
    5cae:	3a14      	subs	r2, #20
    5cb0:	50a3      	str	r3, [r4, r2]
    5cb2:	3215      	adds	r2, #21
    5cb4:	54a3      	strb	r3, [r4, r2]
    5cb6:	66e3      	str	r3, [r4, #108]	; 0x6c
    5cb8:	3a11      	subs	r2, #17
    5cba:	50a3      	str	r3, [r4, r2]
    5cbc:	3212      	adds	r2, #18
    5cbe:	54a3      	strb	r3, [r4, r2]
    5cc0:	6723      	str	r3, [r4, #112]	; 0x70
    5cc2:	3a0e      	subs	r2, #14
    5cc4:	50a3      	str	r3, [r4, r2]
    5cc6:	320f      	adds	r2, #15
    5cc8:	54a3      	strb	r3, [r4, r2]
    5cca:	6763      	str	r3, [r4, #116]	; 0x74
    5ccc:	3a0b      	subs	r2, #11
    5cce:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    5cd0:	2101      	movs	r1, #1
    5cd2:	320c      	adds	r2, #12
    5cd4:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    5cd6:	3201      	adds	r2, #1
    5cd8:	54a3      	strb	r3, [r4, r2]
}
    5cda:	bd10      	pop	{r4, pc}
    5cdc:	00005b65 	.word	0x00005b65
    5ce0:	0000bcd4 	.word	0x0000bcd4

00005ce4 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    5ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ce6:	46de      	mov	lr, fp
    5ce8:	4657      	mov	r7, sl
    5cea:	464e      	mov	r6, r9
    5cec:	4645      	mov	r5, r8
    5cee:	b5e0      	push	{r5, r6, r7, lr}
    5cf0:	b091      	sub	sp, #68	; 0x44
    5cf2:	9001      	str	r0, [sp, #4]
    5cf4:	000c      	movs	r4, r1
    5cf6:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    5cf8:	0008      	movs	r0, r1
    5cfa:	4bc3      	ldr	r3, [pc, #780]	; (6008 <tcc_init+0x324>)
    5cfc:	4798      	blx	r3
    5cfe:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    5d00:	0001      	movs	r1, r0
			PM->APBCMASK.reg |= mask;
    5d02:	48c2      	ldr	r0, [pc, #776]	; (600c <tcc_init+0x328>)
    5d04:	6a02      	ldr	r2, [r0, #32]
    5d06:	009e      	lsls	r6, r3, #2
    5d08:	4fc1      	ldr	r7, [pc, #772]	; (6010 <tcc_init+0x32c>)
    5d0a:	59f7      	ldr	r7, [r6, r7]
    5d0c:	433a      	orrs	r2, r7
    5d0e:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    5d10:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    5d12:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    5d14:	0792      	lsls	r2, r2, #30
    5d16:	d506      	bpl.n	5d26 <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    5d18:	b011      	add	sp, #68	; 0x44
    5d1a:	bc3c      	pop	{r2, r3, r4, r5}
    5d1c:	4690      	mov	r8, r2
    5d1e:	4699      	mov	r9, r3
    5d20:	46a2      	mov	sl, r4
    5d22:	46ab      	mov	fp, r5
    5d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    5d26:	6822      	ldr	r2, [r4, #0]
    5d28:	2701      	movs	r7, #1
    5d2a:	4017      	ands	r7, r2
    5d2c:	d1f4      	bne.n	5d18 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
    5d2e:	48b9      	ldr	r0, [pc, #740]	; (6014 <tcc_init+0x330>)
    5d30:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
    5d32:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
    5d34:	682e      	ldr	r6, [r5, #0]
    5d36:	42b2      	cmp	r2, r6
    5d38:	d3ee      	bcc.n	5d18 <tcc_init+0x34>
		|| (config->counter.period > count_max)
    5d3a:	686e      	ldr	r6, [r5, #4]
    5d3c:	42b2      	cmp	r2, r6
    5d3e:	d3eb      	bcc.n	5d18 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
    5d40:	69e8      	ldr	r0, [r5, #28]
    5d42:	4282      	cmp	r2, r0
    5d44:	d200      	bcs.n	5d48 <tcc_init+0x64>
    5d46:	e1b9      	b.n	60bc <tcc_init+0x3d8>
    5d48:	6a28      	ldr	r0, [r5, #32]
    5d4a:	4282      	cmp	r2, r0
    5d4c:	d200      	bcs.n	5d50 <tcc_init+0x6c>
    5d4e:	e1b7      	b.n	60c0 <tcc_init+0x3dc>
    5d50:	6a68      	ldr	r0, [r5, #36]	; 0x24
    5d52:	4282      	cmp	r2, r0
    5d54:	d200      	bcs.n	5d58 <tcc_init+0x74>
    5d56:	e1b5      	b.n	60c4 <tcc_init+0x3e0>
    5d58:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    5d5a:	4282      	cmp	r2, r0
    5d5c:	d200      	bcs.n	5d60 <tcc_init+0x7c>
    5d5e:	e1b3      	b.n	60c8 <tcc_init+0x3e4>
    5d60:	2298      	movs	r2, #152	; 0x98
    5d62:	4694      	mov	ip, r2
    5d64:	44ac      	add	ip, r5
    5d66:	4662      	mov	r2, ip
    5d68:	9208      	str	r2, [sp, #32]
    5d6a:	2000      	movs	r0, #0
    5d6c:	e003      	b.n	5d76 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    5d6e:	3001      	adds	r0, #1
    5d70:	3201      	adds	r2, #1
    5d72:	2808      	cmp	r0, #8
    5d74:	d008      	beq.n	5d88 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
    5d76:	7816      	ldrb	r6, [r2, #0]
    5d78:	2e00      	cmp	r6, #0
    5d7a:	d0f8      	beq.n	5d6e <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
    5d7c:	4ea6      	ldr	r6, [pc, #664]	; (6018 <tcc_init+0x334>)
    5d7e:	5c76      	ldrb	r6, [r6, r1]
    5d80:	4286      	cmp	r6, r0
    5d82:	dcf4      	bgt.n	5d6e <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
    5d84:	2017      	movs	r0, #23
    5d86:	e7c7      	b.n	5d18 <tcc_init+0x34>
    5d88:	2200      	movs	r2, #0
    5d8a:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    5d8c:	2080      	movs	r0, #128	; 0x80
    5d8e:	0440      	lsls	r0, r0, #17
    5d90:	4684      	mov	ip, r0
    5d92:	e002      	b.n	5d9a <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    5d94:	3201      	adds	r2, #1
    5d96:	2a04      	cmp	r2, #4
    5d98:	d00e      	beq.n	5db8 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
    5d9a:	18a8      	adds	r0, r5, r2
    5d9c:	7c00      	ldrb	r0, [r0, #16]
    5d9e:	2801      	cmp	r0, #1
    5da0:	d1f8      	bne.n	5d94 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
    5da2:	489e      	ldr	r0, [pc, #632]	; (601c <tcc_init+0x338>)
    5da4:	5c40      	ldrb	r0, [r0, r1]
    5da6:	4290      	cmp	r0, r2
    5da8:	da00      	bge.n	5dac <tcc_init+0xc8>
    5daa:	e18f      	b.n	60cc <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    5dac:	4660      	mov	r0, ip
    5dae:	4090      	lsls	r0, r2
    5db0:	9e02      	ldr	r6, [sp, #8]
    5db2:	4306      	orrs	r6, r0
    5db4:	9602      	str	r6, [sp, #8]
    5db6:	e7ed      	b.n	5d94 <tcc_init+0xb0>
	if (config->run_in_standby) {
    5db8:	329d      	adds	r2, #157	; 0x9d
    5dba:	5caa      	ldrb	r2, [r5, r2]
    5dbc:	2a00      	cmp	r2, #0
    5dbe:	d004      	beq.n	5dca <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    5dc0:	2280      	movs	r2, #128	; 0x80
    5dc2:	0112      	lsls	r2, r2, #4
    5dc4:	9902      	ldr	r1, [sp, #8]
    5dc6:	4311      	orrs	r1, r2
    5dc8:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    5dca:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    5dcc:	1e51      	subs	r1, r2, #1
    5dce:	418a      	sbcs	r2, r1
    5dd0:	0092      	lsls	r2, r2, #2
    5dd2:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    5dd4:	7a6a      	ldrb	r2, [r5, #9]
    5dd6:	2a01      	cmp	r2, #1
    5dd8:	d022      	beq.n	5e20 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
    5dda:	4a90      	ldr	r2, [pc, #576]	; (601c <tcc_init+0x338>)
    5ddc:	5cd2      	ldrb	r2, [r2, r3]
    5dde:	0011      	movs	r1, r2
    5de0:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
    5de2:	2235      	movs	r2, #53	; 0x35
    5de4:	5caa      	ldrb	r2, [r5, r2]
    5de6:	428a      	cmp	r2, r1
    5de8:	d300      	bcc.n	5dec <tcc_init+0x108>
    5dea:	e179      	b.n	60e0 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    5dec:	212c      	movs	r1, #44	; 0x2c
    5dee:	5c69      	ldrb	r1, [r5, r1]
    5df0:	290f      	cmp	r1, #15
    5df2:	d900      	bls.n	5df6 <tcc_init+0x112>
    5df4:	e174      	b.n	60e0 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    5df6:	7b28      	ldrb	r0, [r5, #12]
    5df8:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    5dfa:	7ae8      	ldrb	r0, [r5, #11]
    5dfc:	900b      	str	r0, [sp, #44]	; 0x2c
    5dfe:	202d      	movs	r0, #45	; 0x2d
    5e00:	4682      	mov	sl, r0
    5e02:	44aa      	add	sl, r5
    5e04:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    5e06:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
    5e08:	ae0e      	add	r6, sp, #56	; 0x38
    5e0a:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    5e0c:	26c0      	movs	r6, #192	; 0xc0
    5e0e:	0136      	lsls	r6, r6, #4
    5e10:	46b1      	mov	r9, r6
    5e12:	4684      	mov	ip, r0
    5e14:	46a0      	mov	r8, r4
    5e16:	0028      	movs	r0, r5
    5e18:	4655      	mov	r5, sl
    5e1a:	9309      	str	r3, [sp, #36]	; 0x24
    5e1c:	4682      	mov	sl, r0
    5e1e:	e035      	b.n	5e8c <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
    5e20:	9906      	ldr	r1, [sp, #24]
    5e22:	4311      	orrs	r1, r2
    5e24:	9106      	str	r1, [sp, #24]
    5e26:	e7d8      	b.n	5dda <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    5e28:	0292      	lsls	r2, r2, #10
    5e2a:	464f      	mov	r7, r9
    5e2c:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    5e2e:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
    5e30:	7919      	ldrb	r1, [r3, #4]
    5e32:	468b      	mov	fp, r1
    5e34:	2103      	movs	r1, #3
    5e36:	465f      	mov	r7, fp
    5e38:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    5e3a:	430a      	orrs	r2, r1
    5e3c:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
    5e3e:	795a      	ldrb	r2, [r3, #5]
    5e40:	0152      	lsls	r2, r2, #5
    5e42:	2160      	movs	r1, #96	; 0x60
    5e44:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    5e46:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
    5e48:	7999      	ldrb	r1, [r3, #6]
    5e4a:	0209      	lsls	r1, r1, #8
    5e4c:	26c0      	movs	r6, #192	; 0xc0
    5e4e:	00b6      	lsls	r6, r6, #2
    5e50:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    5e52:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    5e54:	79da      	ldrb	r2, [r3, #7]
    5e56:	0312      	lsls	r2, r2, #12
    5e58:	21e0      	movs	r1, #224	; 0xe0
    5e5a:	01c9      	lsls	r1, r1, #7
    5e5c:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    5e5e:	4316      	orrs	r6, r2
    5e60:	4334      	orrs	r4, r6
    5e62:	9a03      	ldr	r2, [sp, #12]
    5e64:	4314      	orrs	r4, r2
    5e66:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
    5e68:	4662      	mov	r2, ip
    5e6a:	9907      	ldr	r1, [sp, #28]
    5e6c:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    5e6e:	2a04      	cmp	r2, #4
    5e70:	d02a      	beq.n	5ec8 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
    5e72:	7c9a      	ldrb	r2, [r3, #18]
    5e74:	9905      	ldr	r1, [sp, #20]
    5e76:	4291      	cmp	r1, r2
    5e78:	d800      	bhi.n	5e7c <tcc_init+0x198>
    5e7a:	e131      	b.n	60e0 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    5e7c:	7a59      	ldrb	r1, [r3, #9]
    5e7e:	350a      	adds	r5, #10
    5e80:	2304      	movs	r3, #4
    5e82:	469b      	mov	fp, r3
    5e84:	44dc      	add	ip, fp
    5e86:	290f      	cmp	r1, #15
    5e88:	d900      	bls.n	5e8c <tcc_init+0x1a8>
    5e8a:	e129      	b.n	60e0 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    5e8c:	0609      	lsls	r1, r1, #24
    5e8e:	23f0      	movs	r3, #240	; 0xf0
    5e90:	051b      	lsls	r3, r3, #20
    5e92:	4019      	ands	r1, r3
    5e94:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    5e96:	782e      	ldrb	r6, [r5, #0]
    5e98:	0436      	lsls	r6, r6, #16
    5e9a:	20ff      	movs	r0, #255	; 0xff
    5e9c:	0400      	lsls	r0, r0, #16
    5e9e:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    5ea0:	7868      	ldrb	r0, [r5, #1]
    5ea2:	2480      	movs	r4, #128	; 0x80
    5ea4:	2800      	cmp	r0, #0
    5ea6:	d100      	bne.n	5eaa <tcc_init+0x1c6>
    5ea8:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    5eaa:	7898      	ldrb	r0, [r3, #2]
    5eac:	2708      	movs	r7, #8
    5eae:	9703      	str	r7, [sp, #12]
    5eb0:	2800      	cmp	r0, #0
    5eb2:	d101      	bne.n	5eb8 <tcc_init+0x1d4>
    5eb4:	9804      	ldr	r0, [sp, #16]
    5eb6:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    5eb8:	78d8      	ldrb	r0, [r3, #3]
    5eba:	4683      	mov	fp, r0
    5ebc:	2010      	movs	r0, #16
    5ebe:	465f      	mov	r7, fp
    5ec0:	2f00      	cmp	r7, #0
    5ec2:	d1b1      	bne.n	5e28 <tcc_init+0x144>
    5ec4:	9804      	ldr	r0, [sp, #16]
    5ec6:	e7af      	b.n	5e28 <tcc_init+0x144>
    5ec8:	4644      	mov	r4, r8
    5eca:	4655      	mov	r5, sl
    5ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
    5ece:	4a52      	ldr	r2, [pc, #328]	; (6018 <tcc_init+0x334>)
    5ed0:	5cd2      	ldrb	r2, [r2, r3]
    5ed2:	4691      	mov	r9, r2
    5ed4:	4651      	mov	r1, sl
    5ed6:	3150      	adds	r1, #80	; 0x50
    5ed8:	4650      	mov	r0, sl
    5eda:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
    5edc:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    5ede:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    5ee0:	2601      	movs	r6, #1
    5ee2:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    5ee4:	2602      	movs	r6, #2
    5ee6:	36ff      	adds	r6, #255	; 0xff
    5ee8:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    5eea:	2680      	movs	r6, #128	; 0x80
    5eec:	0276      	lsls	r6, r6, #9
    5eee:	46b0      	mov	r8, r6
    5ef0:	46a4      	mov	ip, r4
    5ef2:	001c      	movs	r4, r3
    5ef4:	464b      	mov	r3, r9
    5ef6:	e00f      	b.n	5f18 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
    5ef8:	7806      	ldrb	r6, [r0, #0]
    5efa:	2e00      	cmp	r6, #0
    5efc:	d007      	beq.n	5f0e <tcc_init+0x22a>
			if (i >= ow_num) {
    5efe:	4293      	cmp	r3, r2
    5f00:	d800      	bhi.n	5f04 <tcc_init+0x220>
    5f02:	e0e7      	b.n	60d4 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    5f04:	2e02      	cmp	r6, #2
    5f06:	d014      	beq.n	5f32 <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    5f08:	4656      	mov	r6, sl
    5f0a:	4096      	lsls	r6, r2
    5f0c:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    5f0e:	3201      	adds	r2, #1
    5f10:	3101      	adds	r1, #1
    5f12:	3002      	adds	r0, #2
    5f14:	2a08      	cmp	r2, #8
    5f16:	d010      	beq.n	5f3a <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
    5f18:	780e      	ldrb	r6, [r1, #0]
    5f1a:	2e00      	cmp	r6, #0
    5f1c:	d0ec      	beq.n	5ef8 <tcc_init+0x214>
			if (i >= ow_num) {
    5f1e:	4293      	cmp	r3, r2
    5f20:	d800      	bhi.n	5f24 <tcc_init+0x240>
    5f22:	e0d5      	b.n	60d0 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    5f24:	4646      	mov	r6, r8
    5f26:	4096      	lsls	r6, r2
    5f28:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
    5f2a:	7806      	ldrb	r6, [r0, #0]
    5f2c:	2e00      	cmp	r6, #0
    5f2e:	d1e9      	bne.n	5f04 <tcc_init+0x220>
    5f30:	e7ed      	b.n	5f0e <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    5f32:	465e      	mov	r6, fp
    5f34:	4096      	lsls	r6, r2
    5f36:	4337      	orrs	r7, r6
    5f38:	e7e9      	b.n	5f0e <tcc_init+0x22a>
    5f3a:	4699      	mov	r9, r3
    5f3c:	0023      	movs	r3, r4
    5f3e:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    5f40:	7e6a      	ldrb	r2, [r5, #25]
    5f42:	0112      	lsls	r2, r2, #4
    5f44:	2130      	movs	r1, #48	; 0x30
    5f46:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    5f48:	7e28      	ldrb	r0, [r5, #24]
    5f4a:	2207      	movs	r2, #7
    5f4c:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    5f4e:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    5f50:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    5f52:	2080      	movs	r0, #128	; 0x80
    5f54:	0240      	lsls	r0, r0, #9
    5f56:	000e      	movs	r6, r1
    5f58:	e002      	b.n	5f60 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    5f5a:	3201      	adds	r2, #1
    5f5c:	2a04      	cmp	r2, #4
    5f5e:	d00b      	beq.n	5f78 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
    5f60:	18a9      	adds	r1, r5, r2
    5f62:	7d09      	ldrb	r1, [r1, #20]
    5f64:	2900      	cmp	r1, #0
    5f66:	d0f8      	beq.n	5f5a <tcc_init+0x276>
			if (n >= cc_num) {
    5f68:	9905      	ldr	r1, [sp, #20]
    5f6a:	4291      	cmp	r1, r2
    5f6c:	dc00      	bgt.n	5f70 <tcc_init+0x28c>
    5f6e:	e0b3      	b.n	60d8 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
    5f70:	0001      	movs	r1, r0
    5f72:	4091      	lsls	r1, r2
    5f74:	430e      	orrs	r6, r1
    5f76:	e7f0      	b.n	5f5a <tcc_init+0x276>
    5f78:	46b2      	mov	sl, r6
    5f7a:	9801      	ldr	r0, [sp, #4]
    5f7c:	0002      	movs	r2, r0
    5f7e:	3204      	adds	r2, #4
    5f80:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    5f82:	2100      	movs	r1, #0
    5f84:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    5f86:	4282      	cmp	r2, r0
    5f88:	d1fc      	bne.n	5f84 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
    5f8a:	2200      	movs	r2, #0
    5f8c:	9801      	ldr	r0, [sp, #4]
    5f8e:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    5f90:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    5f92:	0099      	lsls	r1, r3, #2
    5f94:	4a22      	ldr	r2, [pc, #136]	; (6020 <tcc_init+0x33c>)
    5f96:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
    5f98:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    5f9a:	22a0      	movs	r2, #160	; 0xa0
    5f9c:	5ca9      	ldrb	r1, [r5, r2]
    5f9e:	3a64      	subs	r2, #100	; 0x64
    5fa0:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
    5fa2:	a90d      	add	r1, sp, #52	; 0x34
    5fa4:	7aaa      	ldrb	r2, [r5, #10]
    5fa6:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    5fa8:	4a1e      	ldr	r2, [pc, #120]	; (6024 <tcc_init+0x340>)
    5faa:	5cd6      	ldrb	r6, [r2, r3]
    5fac:	0030      	movs	r0, r6
    5fae:	4b1e      	ldr	r3, [pc, #120]	; (6028 <tcc_init+0x344>)
    5fb0:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    5fb2:	0030      	movs	r0, r6
    5fb4:	4b1d      	ldr	r3, [pc, #116]	; (602c <tcc_init+0x348>)
    5fb6:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    5fb8:	464b      	mov	r3, r9
    5fba:	2b00      	cmp	r3, #0
    5fbc:	dd3c      	ble.n	6038 <tcc_init+0x354>
    5fbe:	002e      	movs	r6, r5
    5fc0:	3658      	adds	r6, #88	; 0x58
    5fc2:	3398      	adds	r3, #152	; 0x98
    5fc4:	4698      	mov	r8, r3
    5fc6:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5fc8:	2301      	movs	r3, #1
    5fca:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
    5fcc:	46ab      	mov	fp, r5
    5fce:	4645      	mov	r5, r8
    5fd0:	46a0      	mov	r8, r4
    5fd2:	9c08      	ldr	r4, [sp, #32]
    5fd4:	e003      	b.n	5fde <tcc_init+0x2fa>
    5fd6:	3401      	adds	r4, #1
    5fd8:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    5fda:	42ac      	cmp	r4, r5
    5fdc:	d02a      	beq.n	6034 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
    5fde:	7823      	ldrb	r3, [r4, #0]
    5fe0:	2b00      	cmp	r3, #0
    5fe2:	d0f8      	beq.n	5fd6 <tcc_init+0x2f2>
    5fe4:	ab0c      	add	r3, sp, #48	; 0x30
    5fe6:	464a      	mov	r2, r9
    5fe8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    5fea:	2300      	movs	r3, #0
    5fec:	aa0c      	add	r2, sp, #48	; 0x30
    5fee:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    5ff0:	0013      	movs	r3, r2
    5ff2:	2220      	movs	r2, #32
    5ff4:	18b2      	adds	r2, r6, r2
    5ff6:	7812      	ldrb	r2, [r2, #0]
    5ff8:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    5ffa:	464a      	mov	r2, r9
    5ffc:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    5ffe:	7830      	ldrb	r0, [r6, #0]
    6000:	0019      	movs	r1, r3
    6002:	4b0b      	ldr	r3, [pc, #44]	; (6030 <tcc_init+0x34c>)
    6004:	4798      	blx	r3
    6006:	e7e6      	b.n	5fd6 <tcc_init+0x2f2>
    6008:	00005b65 	.word	0x00005b65
    600c:	40000400 	.word	0x40000400
    6010:	0000bcc0 	.word	0x0000bcc0
    6014:	0000bcd4 	.word	0x0000bcd4
    6018:	0000bce0 	.word	0x0000bce0
    601c:	0000bccc 	.word	0x0000bccc
    6020:	20000408 	.word	0x20000408
    6024:	0000bcd0 	.word	0x0000bcd0
    6028:	00005a0d 	.word	0x00005a0d
    602c:	00005981 	.word	0x00005981
    6030:	00005b05 	.word	0x00005b05
    6034:	4644      	mov	r4, r8
    6036:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    6038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    603a:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    603c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    603e:	0212      	lsls	r2, r2, #8
    6040:	4313      	orrs	r3, r2
    6042:	9a02      	ldr	r2, [sp, #8]
    6044:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    6046:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    6048:	2204      	movs	r2, #4
    604a:	68a3      	ldr	r3, [r4, #8]
    604c:	421a      	tst	r2, r3
    604e:	d1fc      	bne.n	604a <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
    6050:	23ff      	movs	r3, #255	; 0xff
    6052:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    6054:	2204      	movs	r2, #4
    6056:	68a3      	ldr	r3, [r4, #8]
    6058:	421a      	tst	r2, r3
    605a:	d1fc      	bne.n	6056 <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
    605c:	466b      	mov	r3, sp
    605e:	7e1b      	ldrb	r3, [r3, #24]
    6060:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    6062:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6064:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    6066:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6068:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    606a:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    606c:	4a1d      	ldr	r2, [pc, #116]	; (60e4 <tcc_init+0x400>)
    606e:	68a3      	ldr	r3, [r4, #8]
    6070:	4213      	tst	r3, r2
    6072:	d1fc      	bne.n	606e <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
    6074:	4653      	mov	r3, sl
    6076:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    6078:	2210      	movs	r2, #16
    607a:	68a3      	ldr	r3, [r4, #8]
    607c:	421a      	tst	r2, r3
    607e:	d1fc      	bne.n	607a <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
    6080:	682b      	ldr	r3, [r5, #0]
    6082:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    6084:	4a18      	ldr	r2, [pc, #96]	; (60e8 <tcc_init+0x404>)
    6086:	68a3      	ldr	r3, [r4, #8]
    6088:	4213      	tst	r3, r2
    608a:	d1fc      	bne.n	6086 <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
    608c:	686b      	ldr	r3, [r5, #4]
    608e:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    6090:	9805      	ldr	r0, [sp, #20]
    6092:	2800      	cmp	r0, #0
    6094:	dd22      	ble.n	60dc <tcc_init+0x3f8>
    6096:	351c      	adds	r5, #28
    6098:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    609a:	4e14      	ldr	r6, [pc, #80]	; (60ec <tcc_init+0x408>)
    609c:	0032      	movs	r2, r6
    609e:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    60a0:	68a3      	ldr	r3, [r4, #8]
    60a2:	421a      	tst	r2, r3
    60a4:	d1fc      	bne.n	60a0 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
    60a6:	cd04      	ldmia	r5!, {r2}
    60a8:	000b      	movs	r3, r1
    60aa:	3310      	adds	r3, #16
    60ac:	009b      	lsls	r3, r3, #2
    60ae:	18e3      	adds	r3, r4, r3
    60b0:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    60b2:	3101      	adds	r1, #1
    60b4:	4288      	cmp	r0, r1
    60b6:	dcf1      	bgt.n	609c <tcc_init+0x3b8>
	return STATUS_OK;
    60b8:	2000      	movs	r0, #0
    60ba:	e62d      	b.n	5d18 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
    60bc:	2017      	movs	r0, #23
    60be:	e62b      	b.n	5d18 <tcc_init+0x34>
    60c0:	2017      	movs	r0, #23
    60c2:	e629      	b.n	5d18 <tcc_init+0x34>
    60c4:	2017      	movs	r0, #23
    60c6:	e627      	b.n	5d18 <tcc_init+0x34>
    60c8:	2017      	movs	r0, #23
    60ca:	e625      	b.n	5d18 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    60cc:	2017      	movs	r0, #23
    60ce:	e623      	b.n	5d18 <tcc_init+0x34>
			if (i >= ow_num) {
    60d0:	2017      	movs	r0, #23
    60d2:	e621      	b.n	5d18 <tcc_init+0x34>
			if (i >= ow_num) {
    60d4:	2017      	movs	r0, #23
    60d6:	e61f      	b.n	5d18 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    60d8:	2017      	movs	r0, #23
    60da:	e61d      	b.n	5d18 <tcc_init+0x34>
	return STATUS_OK;
    60dc:	2000      	movs	r0, #0
    60de:	e61b      	b.n	5d18 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    60e0:	2017      	movs	r0, #23
    60e2:	e619      	b.n	5d18 <tcc_init+0x34>
    60e4:	00020040 	.word	0x00020040
    60e8:	00040080 	.word	0x00040080
    60ec:	00080100 	.word	0x00080100

000060f0 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    60f0:	0092      	lsls	r2, r2, #2
    60f2:	1883      	adds	r3, r0, r2
    60f4:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    60f6:	4b03      	ldr	r3, [pc, #12]	; (6104 <tcc_register_callback+0x14>)
    60f8:	58d3      	ldr	r3, [r2, r3]
    60fa:	6b42      	ldr	r2, [r0, #52]	; 0x34
    60fc:	4313      	orrs	r3, r2
    60fe:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
    6100:	2000      	movs	r0, #0
    6102:	4770      	bx	lr
    6104:	0000bce4 	.word	0x0000bce4

00006108 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    6108:	b570      	push	{r4, r5, r6, lr}
    610a:	0004      	movs	r4, r0
    610c:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    610e:	6800      	ldr	r0, [r0, #0]
    6110:	4b09      	ldr	r3, [pc, #36]	; (6138 <tcc_enable_callback+0x30>)
    6112:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    6114:	4b09      	ldr	r3, [pc, #36]	; (613c <tcc_enable_callback+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6116:	5c1b      	ldrb	r3, [r3, r0]
    6118:	221f      	movs	r2, #31
    611a:	401a      	ands	r2, r3
    611c:	2301      	movs	r3, #1
    611e:	4093      	lsls	r3, r2
    6120:	4a07      	ldr	r2, [pc, #28]	; (6140 <tcc_enable_callback+0x38>)
    6122:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    6124:	00ad      	lsls	r5, r5, #2
    6126:	4b07      	ldr	r3, [pc, #28]	; (6144 <tcc_enable_callback+0x3c>)
    6128:	58ea      	ldr	r2, [r5, r3]
    612a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    612c:	4313      	orrs	r3, r2
    612e:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    6130:	6823      	ldr	r3, [r4, #0]
    6132:	629a      	str	r2, [r3, #40]	; 0x28
}
    6134:	bd70      	pop	{r4, r5, r6, pc}
    6136:	46c0      	nop			; (mov r8, r8)
    6138:	00005b65 	.word	0x00005b65
    613c:	0000bd14 	.word	0x0000bd14
    6140:	e000e100 	.word	0xe000e100
    6144:	0000bce4 	.word	0x0000bce4

00006148 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    6148:	b5f0      	push	{r4, r5, r6, r7, lr}
    614a:	46c6      	mov	lr, r8
    614c:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    614e:	0080      	lsls	r0, r0, #2
    6150:	4b0e      	ldr	r3, [pc, #56]	; (618c <_tcc_interrupt_handler+0x44>)
    6152:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    6154:	683b      	ldr	r3, [r7, #0]
    6156:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    6158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    615a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    615c:	4013      	ands	r3, r2
    615e:	401e      	ands	r6, r3
    6160:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    6162:	4b0b      	ldr	r3, [pc, #44]	; (6190 <_tcc_interrupt_handler+0x48>)
    6164:	4698      	mov	r8, r3
    6166:	e002      	b.n	616e <_tcc_interrupt_handler+0x26>
    6168:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    616a:	2c30      	cmp	r4, #48	; 0x30
    616c:	d00a      	beq.n	6184 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    616e:	4643      	mov	r3, r8
    6170:	58e5      	ldr	r5, [r4, r3]
    6172:	4235      	tst	r5, r6
    6174:	d0f8      	beq.n	6168 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    6176:	193b      	adds	r3, r7, r4
    6178:	685b      	ldr	r3, [r3, #4]
    617a:	0038      	movs	r0, r7
    617c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    617e:	683b      	ldr	r3, [r7, #0]
    6180:	62dd      	str	r5, [r3, #44]	; 0x2c
    6182:	e7f1      	b.n	6168 <_tcc_interrupt_handler+0x20>
		}
	}
}
    6184:	bc04      	pop	{r2}
    6186:	4690      	mov	r8, r2
    6188:	bdf0      	pop	{r4, r5, r6, r7, pc}
    618a:	46c0      	nop			; (mov r8, r8)
    618c:	20000408 	.word	0x20000408
    6190:	0000bce4 	.word	0x0000bce4

00006194 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    6194:	b510      	push	{r4, lr}
    6196:	2000      	movs	r0, #0
    6198:	4b01      	ldr	r3, [pc, #4]	; (61a0 <TCC0_Handler+0xc>)
    619a:	4798      	blx	r3
    619c:	bd10      	pop	{r4, pc}
    619e:	46c0      	nop			; (mov r8, r8)
    61a0:	00006149 	.word	0x00006149

000061a4 <TCC1_Handler>:
    61a4:	b510      	push	{r4, lr}
    61a6:	2001      	movs	r0, #1
    61a8:	4b01      	ldr	r3, [pc, #4]	; (61b0 <TCC1_Handler+0xc>)
    61aa:	4798      	blx	r3
    61ac:	bd10      	pop	{r4, pc}
    61ae:	46c0      	nop			; (mov r8, r8)
    61b0:	00006149 	.word	0x00006149

000061b4 <TCC2_Handler>:
    61b4:	b510      	push	{r4, lr}
    61b6:	2002      	movs	r0, #2
    61b8:	4b01      	ldr	r3, [pc, #4]	; (61c0 <TCC2_Handler+0xc>)
    61ba:	4798      	blx	r3
    61bc:	bd10      	pop	{r4, pc}
    61be:	46c0      	nop			; (mov r8, r8)
    61c0:	00006149 	.word	0x00006149

000061c4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    61c4:	e7fe      	b.n	61c4 <Dummy_Handler>
	...

000061c8 <Reset_Handler>:
{
    61c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    61ca:	4a2a      	ldr	r2, [pc, #168]	; (6274 <Reset_Handler+0xac>)
    61cc:	4b2a      	ldr	r3, [pc, #168]	; (6278 <Reset_Handler+0xb0>)
    61ce:	429a      	cmp	r2, r3
    61d0:	d011      	beq.n	61f6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    61d2:	001a      	movs	r2, r3
    61d4:	4b29      	ldr	r3, [pc, #164]	; (627c <Reset_Handler+0xb4>)
    61d6:	429a      	cmp	r2, r3
    61d8:	d20d      	bcs.n	61f6 <Reset_Handler+0x2e>
    61da:	4a29      	ldr	r2, [pc, #164]	; (6280 <Reset_Handler+0xb8>)
    61dc:	3303      	adds	r3, #3
    61de:	1a9b      	subs	r3, r3, r2
    61e0:	089b      	lsrs	r3, r3, #2
    61e2:	3301      	adds	r3, #1
    61e4:	009b      	lsls	r3, r3, #2
    61e6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    61e8:	4823      	ldr	r0, [pc, #140]	; (6278 <Reset_Handler+0xb0>)
    61ea:	4922      	ldr	r1, [pc, #136]	; (6274 <Reset_Handler+0xac>)
    61ec:	588c      	ldr	r4, [r1, r2]
    61ee:	5084      	str	r4, [r0, r2]
    61f0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    61f2:	429a      	cmp	r2, r3
    61f4:	d1fa      	bne.n	61ec <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    61f6:	4a23      	ldr	r2, [pc, #140]	; (6284 <Reset_Handler+0xbc>)
    61f8:	4b23      	ldr	r3, [pc, #140]	; (6288 <Reset_Handler+0xc0>)
    61fa:	429a      	cmp	r2, r3
    61fc:	d20a      	bcs.n	6214 <Reset_Handler+0x4c>
    61fe:	43d3      	mvns	r3, r2
    6200:	4921      	ldr	r1, [pc, #132]	; (6288 <Reset_Handler+0xc0>)
    6202:	185b      	adds	r3, r3, r1
    6204:	2103      	movs	r1, #3
    6206:	438b      	bics	r3, r1
    6208:	3304      	adds	r3, #4
    620a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    620c:	2100      	movs	r1, #0
    620e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    6210:	4293      	cmp	r3, r2
    6212:	d1fc      	bne.n	620e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6214:	4a1d      	ldr	r2, [pc, #116]	; (628c <Reset_Handler+0xc4>)
    6216:	21ff      	movs	r1, #255	; 0xff
    6218:	4b1d      	ldr	r3, [pc, #116]	; (6290 <Reset_Handler+0xc8>)
    621a:	438b      	bics	r3, r1
    621c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    621e:	39fd      	subs	r1, #253	; 0xfd
    6220:	2390      	movs	r3, #144	; 0x90
    6222:	005b      	lsls	r3, r3, #1
    6224:	4a1b      	ldr	r2, [pc, #108]	; (6294 <Reset_Handler+0xcc>)
    6226:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    6228:	4a1b      	ldr	r2, [pc, #108]	; (6298 <Reset_Handler+0xd0>)
    622a:	78d3      	ldrb	r3, [r2, #3]
    622c:	2503      	movs	r5, #3
    622e:	43ab      	bics	r3, r5
    6230:	2402      	movs	r4, #2
    6232:	4323      	orrs	r3, r4
    6234:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    6236:	78d3      	ldrb	r3, [r2, #3]
    6238:	270c      	movs	r7, #12
    623a:	43bb      	bics	r3, r7
    623c:	2608      	movs	r6, #8
    623e:	4333      	orrs	r3, r6
    6240:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    6242:	4b16      	ldr	r3, [pc, #88]	; (629c <Reset_Handler+0xd4>)
    6244:	7b98      	ldrb	r0, [r3, #14]
    6246:	2230      	movs	r2, #48	; 0x30
    6248:	4390      	bics	r0, r2
    624a:	2220      	movs	r2, #32
    624c:	4310      	orrs	r0, r2
    624e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    6250:	7b99      	ldrb	r1, [r3, #14]
    6252:	43b9      	bics	r1, r7
    6254:	4331      	orrs	r1, r6
    6256:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    6258:	7b9a      	ldrb	r2, [r3, #14]
    625a:	43aa      	bics	r2, r5
    625c:	4322      	orrs	r2, r4
    625e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    6260:	4a0f      	ldr	r2, [pc, #60]	; (62a0 <Reset_Handler+0xd8>)
    6262:	6853      	ldr	r3, [r2, #4]
    6264:	2180      	movs	r1, #128	; 0x80
    6266:	430b      	orrs	r3, r1
    6268:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    626a:	4b0e      	ldr	r3, [pc, #56]	; (62a4 <Reset_Handler+0xdc>)
    626c:	4798      	blx	r3
        main();
    626e:	4b0e      	ldr	r3, [pc, #56]	; (62a8 <Reset_Handler+0xe0>)
    6270:	4798      	blx	r3
    6272:	e7fe      	b.n	6272 <Reset_Handler+0xaa>
    6274:	0000c20c 	.word	0x0000c20c
    6278:	20000000 	.word	0x20000000
    627c:	200000b0 	.word	0x200000b0
    6280:	20000004 	.word	0x20000004
    6284:	200000b0 	.word	0x200000b0
    6288:	200004e0 	.word	0x200004e0
    628c:	e000ed00 	.word	0xe000ed00
    6290:	00000000 	.word	0x00000000
    6294:	41007000 	.word	0x41007000
    6298:	41005000 	.word	0x41005000
    629c:	41004800 	.word	0x41004800
    62a0:	41004000 	.word	0x41004000
    62a4:	000097a1 	.word	0x000097a1
    62a8:	0000691d 	.word	0x0000691d

000062ac <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    62ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    62ae:	46c6      	mov	lr, r8
    62b0:	b500      	push	{lr}
    62b2:	000c      	movs	r4, r1
    62b4:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    62b6:	2800      	cmp	r0, #0
    62b8:	d10f      	bne.n	62da <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    62ba:	2a00      	cmp	r2, #0
    62bc:	dd11      	ble.n	62e2 <_read+0x36>
    62be:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    62c0:	4e09      	ldr	r6, [pc, #36]	; (62e8 <_read+0x3c>)
    62c2:	4d0a      	ldr	r5, [pc, #40]	; (62ec <_read+0x40>)
    62c4:	6830      	ldr	r0, [r6, #0]
    62c6:	0021      	movs	r1, r4
    62c8:	682b      	ldr	r3, [r5, #0]
    62ca:	4798      	blx	r3
		ptr++;
    62cc:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    62ce:	42bc      	cmp	r4, r7
    62d0:	d1f8      	bne.n	62c4 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    62d2:	4640      	mov	r0, r8
    62d4:	bc04      	pop	{r2}
    62d6:	4690      	mov	r8, r2
    62d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    62da:	2301      	movs	r3, #1
    62dc:	425b      	negs	r3, r3
    62de:	4698      	mov	r8, r3
    62e0:	e7f7      	b.n	62d2 <_read+0x26>
	for (; len > 0; --len) {
    62e2:	4680      	mov	r8, r0
    62e4:	e7f5      	b.n	62d2 <_read+0x26>
    62e6:	46c0      	nop			; (mov r8, r8)
    62e8:	2000041c 	.word	0x2000041c
    62ec:	20000414 	.word	0x20000414

000062f0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    62f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    62f2:	46c6      	mov	lr, r8
    62f4:	b500      	push	{lr}
    62f6:	000e      	movs	r6, r1
    62f8:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    62fa:	3801      	subs	r0, #1
    62fc:	2802      	cmp	r0, #2
    62fe:	d810      	bhi.n	6322 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    6300:	2a00      	cmp	r2, #0
    6302:	d011      	beq.n	6328 <_write+0x38>
    6304:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    6306:	4b0c      	ldr	r3, [pc, #48]	; (6338 <_write+0x48>)
    6308:	4698      	mov	r8, r3
    630a:	4f0c      	ldr	r7, [pc, #48]	; (633c <_write+0x4c>)
    630c:	4643      	mov	r3, r8
    630e:	6818      	ldr	r0, [r3, #0]
    6310:	5d31      	ldrb	r1, [r6, r4]
    6312:	683b      	ldr	r3, [r7, #0]
    6314:	4798      	blx	r3
    6316:	2800      	cmp	r0, #0
    6318:	db08      	blt.n	632c <_write+0x3c>
			return -1;
		}
		++nChars;
    631a:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    631c:	42a5      	cmp	r5, r4
    631e:	d1f5      	bne.n	630c <_write+0x1c>
    6320:	e006      	b.n	6330 <_write+0x40>
		return -1;
    6322:	2401      	movs	r4, #1
    6324:	4264      	negs	r4, r4
    6326:	e003      	b.n	6330 <_write+0x40>
	for (; len != 0; --len) {
    6328:	0014      	movs	r4, r2
    632a:	e001      	b.n	6330 <_write+0x40>
			return -1;
    632c:	2401      	movs	r4, #1
    632e:	4264      	negs	r4, r4
	}
	return nChars;
}
    6330:	0020      	movs	r0, r4
    6332:	bc04      	pop	{r2}
    6334:	4690      	mov	r8, r2
    6336:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6338:	2000041c 	.word	0x2000041c
    633c:	20000418 	.word	0x20000418

00006340 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    6340:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    6342:	4a06      	ldr	r2, [pc, #24]	; (635c <_sbrk+0x1c>)
    6344:	6812      	ldr	r2, [r2, #0]
    6346:	2a00      	cmp	r2, #0
    6348:	d004      	beq.n	6354 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    634a:	4a04      	ldr	r2, [pc, #16]	; (635c <_sbrk+0x1c>)
    634c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    634e:	18c3      	adds	r3, r0, r3
    6350:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    6352:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    6354:	4902      	ldr	r1, [pc, #8]	; (6360 <_sbrk+0x20>)
    6356:	4a01      	ldr	r2, [pc, #4]	; (635c <_sbrk+0x1c>)
    6358:	6011      	str	r1, [r2, #0]
    635a:	e7f6      	b.n	634a <_sbrk+0xa>
    635c:	20000128 	.word	0x20000128
    6360:	200024e0 	.word	0x200024e0

00006364 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    6364:	2001      	movs	r0, #1
    6366:	4240      	negs	r0, r0
    6368:	4770      	bx	lr

0000636a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    636a:	2380      	movs	r3, #128	; 0x80
    636c:	019b      	lsls	r3, r3, #6
    636e:	604b      	str	r3, [r1, #4]

	return 0;
}
    6370:	2000      	movs	r0, #0
    6372:	4770      	bx	lr

00006374 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    6374:	2001      	movs	r0, #1
    6376:	4770      	bx	lr

00006378 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    6378:	2000      	movs	r0, #0
    637a:	4770      	bx	lr

0000637c <configure_i2c_master>:

/* used to init I2C software module. */
struct i2c_master_module i2c_master_instance;

void configure_i2c_master(void)
{
    637c:	b530      	push	{r4, r5, lr}
    637e:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    6380:	aa01      	add	r2, sp, #4
    6382:	2364      	movs	r3, #100	; 0x64
    6384:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    6386:	4b20      	ldr	r3, [pc, #128]	; (6408 <configure_i2c_master+0x8c>)
    6388:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    638a:	2300      	movs	r3, #0
    638c:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    638e:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    6390:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    6392:	2180      	movs	r1, #128	; 0x80
    6394:	0389      	lsls	r1, r1, #14
    6396:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    6398:	2101      	movs	r1, #1
    639a:	4249      	negs	r1, r1
    639c:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    639e:	61d3      	str	r3, [r2, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    63a0:	6213      	str	r3, [r2, #32]
	config->scl_low_timeout  = false;
    63a2:	3125      	adds	r1, #37	; 0x25
    63a4:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    63a6:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    63a8:	3108      	adds	r1, #8
    63aa:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    63ac:	3101      	adds	r1, #1
    63ae:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    63b0:	3101      	adds	r1, #1
    63b2:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    63b4:	33d7      	adds	r3, #215	; 0xd7
    63b6:	8613      	strh	r3, [r2, #48]	; 0x30
    /* initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);

    /* change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 10000;
    63b8:	4b14      	ldr	r3, [pc, #80]	; (640c <configure_i2c_master+0x90>)
    63ba:	82d3      	strh	r3, [r2, #22]

    /* initialize and enable device with config. */
    i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master);
    63bc:	4c14      	ldr	r4, [pc, #80]	; (6410 <configure_i2c_master+0x94>)
    63be:	4915      	ldr	r1, [pc, #84]	; (6414 <configure_i2c_master+0x98>)
    63c0:	0020      	movs	r0, r4
    63c2:	4b15      	ldr	r3, [pc, #84]	; (6418 <configure_i2c_master+0x9c>)
    63c4:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    63c6:	6824      	ldr	r4, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    63c8:	2207      	movs	r2, #7
    63ca:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    63cc:	421a      	tst	r2, r3
    63ce:	d1fc      	bne.n	63ca <configure_i2c_master+0x4e>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    63d0:	6823      	ldr	r3, [r4, #0]
    63d2:	2202      	movs	r2, #2
    63d4:	4313      	orrs	r3, r2
    63d6:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    63d8:	4d0d      	ldr	r5, [pc, #52]	; (6410 <configure_i2c_master+0x94>)
    63da:	6828      	ldr	r0, [r5, #0]
    63dc:	4b0f      	ldr	r3, [pc, #60]	; (641c <configure_i2c_master+0xa0>)
    63de:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    63e0:	231f      	movs	r3, #31
    63e2:	4018      	ands	r0, r3
    63e4:	3b1e      	subs	r3, #30
    63e6:	4083      	lsls	r3, r0
    63e8:	4a0d      	ldr	r2, [pc, #52]	; (6420 <configure_i2c_master+0xa4>)
    63ea:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    63ec:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    63ee:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    63f0:	2110      	movs	r1, #16
    63f2:	8b62      	ldrh	r2, [r4, #26]
    63f4:	420a      	tst	r2, r1
    63f6:	d104      	bne.n	6402 <configure_i2c_master+0x86>
		timeout_counter++;
    63f8:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    63fa:	4283      	cmp	r3, r0
    63fc:	d3f9      	bcc.n	63f2 <configure_i2c_master+0x76>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    63fe:	2310      	movs	r3, #16
    6400:	8363      	strh	r3, [r4, #26]
    i2c_master_enable(&i2c_master_instance);
}
    6402:	b00f      	add	sp, #60	; 0x3c
    6404:	bd30      	pop	{r4, r5, pc}
    6406:	46c0      	nop			; (mov r8, r8)
    6408:	00000d48 	.word	0x00000d48
    640c:	00002710 	.word	0x00002710
    6410:	20000454 	.word	0x20000454
    6414:	42001000 	.word	0x42001000
    6418:	00000601 	.word	0x00000601
    641c:	00004911 	.word	0x00004911
    6420:	e000e100 	.word	0xe000e100

00006424 <shtc1_i2c_init>:




void shtc1_i2c_init()
{
    6424:	b510      	push	{r4, lr}
    //delay_init();
    //configure_port_pins();
    //configure_usart();
    configure_i2c_master();
    6426:	4b01      	ldr	r3, [pc, #4]	; (642c <shtc1_i2c_init+0x8>)
    6428:	4798      	blx	r3
}
    642a:	bd10      	pop	{r4, pc}
    642c:	0000637d 	.word	0x0000637d

00006430 <stream_writer_init>:
#include <string.h>
#include <asf.h>

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
    6430:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
    6432:	6101      	str	r1, [r0, #16]
	writer->written = 0;
    6434:	2200      	movs	r2, #0
    6436:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
    6438:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
    643a:	9b00      	ldr	r3, [sp, #0]
    643c:	60c3      	str	r3, [r0, #12]
}
    643e:	4770      	bx	lr

00006440 <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
    6440:	b510      	push	{r4, lr}
    6442:	0004      	movs	r4, r0
	if(writer->written > 0) {
    6444:	6842      	ldr	r2, [r0, #4]
    6446:	2a00      	cmp	r2, #0
    6448:	d100      	bne.n	644c <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
    644a:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    644c:	6901      	ldr	r1, [r0, #16]
    644e:	68c0      	ldr	r0, [r0, #12]
    6450:	68a3      	ldr	r3, [r4, #8]
    6452:	4798      	blx	r3
		writer->written = 0;
    6454:	2300      	movs	r3, #0
    6456:	6063      	str	r3, [r4, #4]
}
    6458:	e7f7      	b.n	644a <stream_writer_send_remain+0xa>
	...

0000645c <stream_writer_send_8>:
{
    645c:	b570      	push	{r4, r5, r6, lr}
    645e:	0004      	movs	r4, r0
    6460:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
    6462:	6803      	ldr	r3, [r0, #0]
    6464:	6842      	ldr	r2, [r0, #4]
    6466:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
    6468:	2b00      	cmp	r3, #0
    646a:	dd05      	ble.n	6478 <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
    646c:	6922      	ldr	r2, [r4, #16]
    646e:	6863      	ldr	r3, [r4, #4]
    6470:	1c59      	adds	r1, r3, #1
    6472:	6061      	str	r1, [r4, #4]
    6474:	54d5      	strb	r5, [r2, r3]
}
    6476:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
    6478:	4b01      	ldr	r3, [pc, #4]	; (6480 <stream_writer_send_8+0x24>)
    647a:	4798      	blx	r3
    647c:	e7f6      	b.n	646c <stream_writer_send_8+0x10>
    647e:	46c0      	nop			; (mov r8, r8)
    6480:	00006441 	.word	0x00006441

00006484 <stream_writer_send_16BE>:
{
    6484:	b570      	push	{r4, r5, r6, lr}
    6486:	0006      	movs	r6, r0
    6488:	000c      	movs	r4, r1
	stream_writer_send_8(writer, (value >> 8) & 0xFF);
    648a:	1209      	asrs	r1, r1, #8
    648c:	4d02      	ldr	r5, [pc, #8]	; (6498 <stream_writer_send_16BE+0x14>)
    648e:	47a8      	blx	r5
	stream_writer_send_8(writer, value & 0xFF);
    6490:	b261      	sxtb	r1, r4
    6492:	0030      	movs	r0, r6
    6494:	47a8      	blx	r5
}
    6496:	bd70      	pop	{r4, r5, r6, pc}
    6498:	0000645d 	.word	0x0000645d

0000649c <stream_writer_send_buffer>:
{
    649c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    649e:	0006      	movs	r6, r0
    64a0:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
    64a2:	2a00      	cmp	r2, #0
    64a4:	d008      	beq.n	64b8 <stream_writer_send_buffer+0x1c>
    64a6:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
    64a8:	4f04      	ldr	r7, [pc, #16]	; (64bc <stream_writer_send_buffer+0x20>)
    64aa:	2100      	movs	r1, #0
    64ac:	5661      	ldrsb	r1, [r4, r1]
    64ae:	0030      	movs	r0, r6
    64b0:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
    64b2:	3401      	adds	r4, #1
    64b4:	42a5      	cmp	r5, r4
    64b6:	d1f8      	bne.n	64aa <stream_writer_send_buffer+0xe>
}
    64b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    64ba:	46c0      	nop			; (mov r8, r8)
    64bc:	0000645d 	.word	0x0000645d

000064c0 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
    64c0:	4a02      	ldr	r2, [pc, #8]	; (64cc <sw_timer_tcc_callback+0xc>)
    64c2:	6813      	ldr	r3, [r2, #0]
    64c4:	3301      	adds	r3, #1
    64c6:	6013      	str	r3, [r2, #0]
}
    64c8:	4770      	bx	lr
    64ca:	46c0      	nop			; (mov r8, r8)
    64cc:	2000012c 	.word	0x2000012c

000064d0 <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
    64d0:	2364      	movs	r3, #100	; 0x64
    64d2:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
    64d4:	2300      	movs	r3, #0
    64d6:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
    64d8:	7043      	strb	r3, [r0, #1]
}
    64da:	4770      	bx	lr

000064dc <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    64dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    64de:	46c6      	mov	lr, r8
    64e0:	b500      	push	{lr}
    64e2:	b0ac      	sub	sp, #176	; 0xb0
    64e4:	000d      	movs	r5, r1
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    64e6:	466e      	mov	r6, sp
    64e8:	4b1d      	ldr	r3, [pc, #116]	; (6560 <sw_timer_init+0x84>)
    64ea:	466a      	mov	r2, sp
    64ec:	cb92      	ldmia	r3!, {r1, r4, r7}
    64ee:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    64f0:	886b      	ldrh	r3, [r5, #2]
    64f2:	6543      	str	r3, [r0, #84]	; 0x54

	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    64f4:	3014      	adds	r0, #20
    64f6:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    64f8:	782b      	ldrb	r3, [r5, #0]
    64fa:	009b      	lsls	r3, r3, #2
    64fc:	5999      	ldr	r1, [r3, r6]
    64fe:	0017      	movs	r7, r2
    6500:	0010      	movs	r0, r2
    6502:	4b18      	ldr	r3, [pc, #96]	; (6564 <sw_timer_init+0x88>)
    6504:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    6506:	2000      	movs	r0, #0
    6508:	4b17      	ldr	r3, [pc, #92]	; (6568 <sw_timer_init+0x8c>)
    650a:	4798      	blx	r3
    650c:	4b17      	ldr	r3, [pc, #92]	; (656c <sw_timer_init+0x90>)
    650e:	7a1b      	ldrb	r3, [r3, #8]
    6510:	b2db      	uxtb	r3, r3
    6512:	40d8      	lsrs	r0, r3
    6514:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    6516:	8869      	ldrh	r1, [r5, #2]
    6518:	20fa      	movs	r0, #250	; 0xfa
    651a:	0200      	lsls	r0, r0, #8
    651c:	4b14      	ldr	r3, [pc, #80]	; (6570 <sw_timer_init+0x94>)
    651e:	4798      	blx	r3
    6520:	0001      	movs	r1, r0
    6522:	4640      	mov	r0, r8
    6524:	4b13      	ldr	r3, [pc, #76]	; (6574 <sw_timer_init+0x98>)
    6526:	4798      	blx	r3
    6528:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    652a:	2305      	movs	r3, #5
    652c:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    652e:	782b      	ldrb	r3, [r5, #0]
    6530:	009b      	lsls	r3, r3, #2
    6532:	5999      	ldr	r1, [r3, r6]
    6534:	003a      	movs	r2, r7
    6536:	0020      	movs	r0, r4
    6538:	4b0f      	ldr	r3, [pc, #60]	; (6578 <sw_timer_init+0x9c>)
    653a:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    653c:	786a      	ldrb	r2, [r5, #1]
    653e:	3208      	adds	r2, #8
    6540:	b2d2      	uxtb	r2, r2
    6542:	490e      	ldr	r1, [pc, #56]	; (657c <sw_timer_init+0xa0>)
    6544:	0020      	movs	r0, r4
    6546:	4b0e      	ldr	r3, [pc, #56]	; (6580 <sw_timer_init+0xa4>)
    6548:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    654a:	7869      	ldrb	r1, [r5, #1]
    654c:	3108      	adds	r1, #8
    654e:	b2c9      	uxtb	r1, r1
    6550:	0020      	movs	r0, r4
    6552:	4b0c      	ldr	r3, [pc, #48]	; (6584 <sw_timer_init+0xa8>)
    6554:	4798      	blx	r3
}
    6556:	b02c      	add	sp, #176	; 0xb0
    6558:	bc04      	pop	{r2}
    655a:	4690      	mov	r8, r2
    655c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    655e:	46c0      	nop			; (mov r8, r8)
    6560:	0000bd18 	.word	0x0000bd18
    6564:	00005b99 	.word	0x00005b99
    6568:	000058f5 	.word	0x000058f5
    656c:	40000400 	.word	0x40000400
    6570:	00007cad 	.word	0x00007cad
    6574:	00007b99 	.word	0x00007b99
    6578:	00005ce5 	.word	0x00005ce5
    657c:	000064c1 	.word	0x000064c1
    6580:	000060f1 	.word	0x000060f1
    6584:	00006109 	.word	0x00006109

00006588 <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    6588:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    658a:	2102      	movs	r1, #2
    658c:	6893      	ldr	r3, [r2, #8]
    658e:	4219      	tst	r1, r3
    6590:	d1fc      	bne.n	658c <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    6592:	6813      	ldr	r3, [r2, #0]
    6594:	2102      	movs	r1, #2
    6596:	430b      	orrs	r3, r1
    6598:	6013      	str	r3, [r2, #0]
	Assert(module_inst);

	tcc_module = &module_inst->tcc_inst;

	tcc_enable(tcc_module);
}
    659a:	4770      	bx	lr

0000659c <sw_timer_register_callback>:
	tcc_disable(tcc_module);
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
	sw_timer_callback_t callback, void *context, uint32_t period)
{
    659c:	b570      	push	{r4, r5, r6, lr}
    659e:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
    65a0:	7805      	ldrb	r5, [r0, #0]
    65a2:	07e8      	lsls	r0, r5, #31
    65a4:	d502      	bpl.n	65ac <sw_timer_register_callback+0x10>
			handler->used = 1;
			return index;
		}
	}

	return -1;
    65a6:	2001      	movs	r0, #1
    65a8:	4240      	negs	r0, r0
}
    65aa:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
    65ac:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
    65ae:	0029      	movs	r1, r5
    65b0:	2002      	movs	r0, #2
    65b2:	4381      	bics	r1, r0
    65b4:	7021      	strb	r1, [r4, #0]
			handler->context = context;
    65b6:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
    65b8:	6d61      	ldr	r1, [r4, #84]	; 0x54
    65ba:	0018      	movs	r0, r3
    65bc:	4b04      	ldr	r3, [pc, #16]	; (65d0 <sw_timer_register_callback+0x34>)
    65be:	4798      	blx	r3
    65c0:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
    65c2:	7823      	ldrb	r3, [r4, #0]
    65c4:	2201      	movs	r2, #1
    65c6:	4313      	orrs	r3, r2
    65c8:	7023      	strb	r3, [r4, #0]
			return index;
    65ca:	2000      	movs	r0, #0
    65cc:	e7ed      	b.n	65aa <sw_timer_register_callback+0xe>
    65ce:	46c0      	nop			; (mov r8, r8)
    65d0:	00007b99 	.word	0x00007b99

000065d4 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    65d4:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
    65d6:	008b      	lsls	r3, r1, #2
    65d8:	185d      	adds	r5, r3, r1
    65da:	00ad      	lsls	r5, r5, #2
    65dc:	5c29      	ldrb	r1, [r5, r0]
    65de:	2602      	movs	r6, #2
    65e0:	4331      	orrs	r1, r6
    65e2:	5429      	strb	r1, [r5, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    65e4:	1944      	adds	r4, r0, r5
    65e6:	6d41      	ldr	r1, [r0, #84]	; 0x54
    65e8:	0010      	movs	r0, r2
    65ea:	4b03      	ldr	r3, [pc, #12]	; (65f8 <sw_timer_enable_callback+0x24>)
    65ec:	4798      	blx	r3
    65ee:	4b03      	ldr	r3, [pc, #12]	; (65fc <sw_timer_enable_callback+0x28>)
    65f0:	681b      	ldr	r3, [r3, #0]
    65f2:	18c0      	adds	r0, r0, r3
    65f4:	6120      	str	r0, [r4, #16]
}
    65f6:	bd70      	pop	{r4, r5, r6, pc}
    65f8:	00007b99 	.word	0x00007b99
    65fc:	2000012c 	.word	0x2000012c

00006600 <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
    6600:	008b      	lsls	r3, r1, #2
    6602:	1859      	adds	r1, r3, r1
    6604:	0089      	lsls	r1, r1, #2
    6606:	5c0b      	ldrb	r3, [r1, r0]
    6608:	2202      	movs	r2, #2
    660a:	4393      	bics	r3, r2
    660c:	540b      	strb	r3, [r1, r0]
}
    660e:	4770      	bx	lr

00006610 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    6610:	b570      	push	{r4, r5, r6, lr}
    6612:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    6614:	7803      	ldrb	r3, [r0, #0]
    6616:	07db      	lsls	r3, r3, #31
    6618:	d507      	bpl.n	662a <sw_timer_task+0x1a>
    661a:	7803      	ldrb	r3, [r0, #0]
    661c:	079b      	lsls	r3, r3, #30
    661e:	d504      	bpl.n	662a <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    6620:	4b11      	ldr	r3, [pc, #68]	; (6668 <sw_timer_task+0x58>)
    6622:	681b      	ldr	r3, [r3, #0]
    6624:	6902      	ldr	r2, [r0, #16]
    6626:	1ad3      	subs	r3, r2, r3
    6628:	d400      	bmi.n	662c <sw_timer_task+0x1c>
				handler->busy = 0;
			}
		}
	}

}
    662a:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    662c:	7803      	ldrb	r3, [r0, #0]
    662e:	075b      	lsls	r3, r3, #29
    6630:	d4fb      	bmi.n	662a <sw_timer_task+0x1a>
				handler->busy = 1;
    6632:	7803      	ldrb	r3, [r0, #0]
    6634:	2204      	movs	r2, #4
    6636:	4313      	orrs	r3, r2
    6638:	7003      	strb	r3, [r0, #0]
				handler->callback(module_inst, index, handler->context, handler->period);
    663a:	68c3      	ldr	r3, [r0, #12]
    663c:	6882      	ldr	r2, [r0, #8]
    663e:	2100      	movs	r1, #0
    6640:	6845      	ldr	r5, [r0, #4]
    6642:	47a8      	blx	r5
				if (handler->period > 0) {
    6644:	68e3      	ldr	r3, [r4, #12]
    6646:	2b00      	cmp	r3, #0
    6648:	d008      	beq.n	665c <sw_timer_task+0x4c>
					handler->expire_time = sw_timer_tick + handler->period;
    664a:	4a07      	ldr	r2, [pc, #28]	; (6668 <sw_timer_task+0x58>)
    664c:	6812      	ldr	r2, [r2, #0]
    664e:	18d3      	adds	r3, r2, r3
    6650:	6123      	str	r3, [r4, #16]
				handler->busy = 0;
    6652:	7823      	ldrb	r3, [r4, #0]
    6654:	2204      	movs	r2, #4
    6656:	4393      	bics	r3, r2
    6658:	7023      	strb	r3, [r4, #0]
}
    665a:	e7e6      	b.n	662a <sw_timer_task+0x1a>
					handler->callback_enable = 0;
    665c:	7823      	ldrb	r3, [r4, #0]
    665e:	2202      	movs	r2, #2
    6660:	4393      	bics	r3, r2
    6662:	7023      	strb	r3, [r4, #0]
    6664:	e7f5      	b.n	6652 <sw_timer_task+0x42>
    6666:	46c0      	nop			; (mov r8, r8)
    6668:	2000012c 	.word	0x2000012c

0000666c <uart_callback>:
 * \param[in] module USART module structure.
 */
static void uart_callback(const struct usart_module *const module)
{
	/* If input string is bigger than buffer size limit, ignore the excess part. */
	if (uart_buffer_written < MAIN_CHAT_BUFFER_SIZE) {
    666c:	4b03      	ldr	r3, [pc, #12]	; (667c <uart_callback+0x10>)
    666e:	681b      	ldr	r3, [r3, #0]
    6670:	2b3f      	cmp	r3, #63	; 0x3f
    6672:	dc02      	bgt.n	667a <uart_callback+0xe>
		uart_buffer[uart_buffer_written++] = uart_ch_buffer & 0xFF;
    6674:	3301      	adds	r3, #1
    6676:	4a01      	ldr	r2, [pc, #4]	; (667c <uart_callback+0x10>)
    6678:	6013      	str	r3, [r2, #0]
	}
}
    667a:	4770      	bx	lr
    667c:	20000258 	.word	0x20000258

00006680 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
    6680:	b510      	push	{r4, lr}
	mqtt_socket_resolve_handler(doamin_name, server_ip);
    6682:	4b01      	ldr	r3, [pc, #4]	; (6688 <socket_resolve_handler+0x8>)
    6684:	4798      	blx	r3
}
    6686:	bd10      	pop	{r4, pc}
    6688:	00006ee5 	.word	0x00006ee5

0000668c <socket_event_handler>:
{
    668c:	b510      	push	{r4, lr}
	mqtt_socket_event_handler(sock, msg_type, msg_data);
    668e:	4b01      	ldr	r3, [pc, #4]	; (6694 <socket_event_handler+0x8>)
    6690:	4798      	blx	r3
}
    6692:	bd10      	pop	{r4, pc}
    6694:	00007a85 	.word	0x00007a85

00006698 <wifi_callback>:
{
    6698:	b510      	push	{r4, lr}
    669a:	b082      	sub	sp, #8
	switch (msg_type) {
    669c:	282c      	cmp	r0, #44	; 0x2c
    669e:	d003      	beq.n	66a8 <wifi_callback+0x10>
    66a0:	2832      	cmp	r0, #50	; 0x32
    66a2:	d01c      	beq.n	66de <wifi_callback+0x46>
}
    66a4:	b002      	add	sp, #8
    66a6:	bd10      	pop	{r4, pc}
		if (msg_wifi_state->u8CurrState == M2M_WIFI_CONNECTED) {
    66a8:	780b      	ldrb	r3, [r1, #0]
    66aa:	2b01      	cmp	r3, #1
    66ac:	d011      	beq.n	66d2 <wifi_callback+0x3a>
		} else if (msg_wifi_state->u8CurrState == M2M_WIFI_DISCONNECTED) {
    66ae:	2b00      	cmp	r3, #0
    66b0:	d1f8      	bne.n	66a4 <wifi_callback+0xc>
			printf("Wi-Fi disconnected\r\n");
    66b2:	4812      	ldr	r0, [pc, #72]	; (66fc <wifi_callback+0x64>)
    66b4:	4b12      	ldr	r3, [pc, #72]	; (6700 <wifi_callback+0x68>)
    66b6:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    66b8:	23ff      	movs	r3, #255	; 0xff
    66ba:	9300      	str	r3, [sp, #0]
    66bc:	4b11      	ldr	r3, [pc, #68]	; (6704 <wifi_callback+0x6c>)
    66be:	2202      	movs	r2, #2
    66c0:	210e      	movs	r1, #14
    66c2:	4811      	ldr	r0, [pc, #68]	; (6708 <wifi_callback+0x70>)
    66c4:	4c11      	ldr	r4, [pc, #68]	; (670c <wifi_callback+0x74>)
    66c6:	47a0      	blx	r4
			mqtt_disconnect(&mqtt_inst, 1);
    66c8:	2101      	movs	r1, #1
    66ca:	4811      	ldr	r0, [pc, #68]	; (6710 <wifi_callback+0x78>)
    66cc:	4b11      	ldr	r3, [pc, #68]	; (6714 <wifi_callback+0x7c>)
    66ce:	4798      	blx	r3
    66d0:	e7e8      	b.n	66a4 <wifi_callback+0xc>
			printf("Wi-Fi connected\r\n");
    66d2:	4811      	ldr	r0, [pc, #68]	; (6718 <wifi_callback+0x80>)
    66d4:	4b0a      	ldr	r3, [pc, #40]	; (6700 <wifi_callback+0x68>)
    66d6:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    66d8:	4b10      	ldr	r3, [pc, #64]	; (671c <wifi_callback+0x84>)
    66da:	4798      	blx	r3
    66dc:	e7e2      	b.n	66a4 <wifi_callback+0xc>
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    66de:	788b      	ldrb	r3, [r1, #2]
    66e0:	784a      	ldrb	r2, [r1, #1]
    66e2:	7808      	ldrb	r0, [r1, #0]
    66e4:	78c9      	ldrb	r1, [r1, #3]
    66e6:	9100      	str	r1, [sp, #0]
    66e8:	0001      	movs	r1, r0
    66ea:	480d      	ldr	r0, [pc, #52]	; (6720 <wifi_callback+0x88>)
    66ec:	4c0d      	ldr	r4, [pc, #52]	; (6724 <wifi_callback+0x8c>)
    66ee:	47a0      	blx	r4
		mqtt_connect(&mqtt_inst, main_mqtt_broker);
    66f0:	490d      	ldr	r1, [pc, #52]	; (6728 <wifi_callback+0x90>)
    66f2:	4807      	ldr	r0, [pc, #28]	; (6710 <wifi_callback+0x78>)
    66f4:	4b0d      	ldr	r3, [pc, #52]	; (672c <wifi_callback+0x94>)
    66f6:	4798      	blx	r3
}
    66f8:	e7d4      	b.n	66a4 <wifi_callback+0xc>
    66fa:	46c0      	nop			; (mov r8, r8)
    66fc:	0000c080 	.word	0x0000c080
    6700:	00009ab1 	.word	0x00009ab1
    6704:	0000c094 	.word	0x0000c094
    6708:	0000c0a0 	.word	0x0000c0a0
    670c:	000024a1 	.word	0x000024a1
    6710:	200001e4 	.word	0x200001e4
    6714:	00007745 	.word	0x00007745
    6718:	0000c06c 	.word	0x0000c06c
    671c:	000024bd 	.word	0x000024bd
    6720:	0000c0b0 	.word	0x0000c0b0
    6724:	00009995 	.word	0x00009995
    6728:	0000bf68 	.word	0x0000bf68
    672c:	00006f39 	.word	0x00006f39

00006730 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    6730:	b570      	push	{r4, r5, r6, lr}
    6732:	b082      	sub	sp, #8
    6734:	0005      	movs	r5, r0
    6736:	000e      	movs	r6, r1
	uint16_t temp = 0;
    6738:	2200      	movs	r2, #0
    673a:	466b      	mov	r3, sp
    673c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    673e:	4c06      	ldr	r4, [pc, #24]	; (6758 <usart_serial_getchar+0x28>)
    6740:	466b      	mov	r3, sp
    6742:	1d99      	adds	r1, r3, #6
    6744:	0028      	movs	r0, r5
    6746:	47a0      	blx	r4
    6748:	2800      	cmp	r0, #0
    674a:	d1f9      	bne.n	6740 <usart_serial_getchar+0x10>

	*c = temp;
    674c:	466b      	mov	r3, sp
    674e:	3306      	adds	r3, #6
    6750:	881b      	ldrh	r3, [r3, #0]
    6752:	7033      	strb	r3, [r6, #0]
}
    6754:	b002      	add	sp, #8
    6756:	bd70      	pop	{r4, r5, r6, pc}
    6758:	000051ad 	.word	0x000051ad

0000675c <usart_serial_putchar>:
{
    675c:	b570      	push	{r4, r5, r6, lr}
    675e:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    6760:	b28c      	uxth	r4, r1
    6762:	4e03      	ldr	r6, [pc, #12]	; (6770 <usart_serial_putchar+0x14>)
    6764:	0021      	movs	r1, r4
    6766:	0028      	movs	r0, r5
    6768:	47b0      	blx	r6
    676a:	2800      	cmp	r0, #0
    676c:	d1fa      	bne.n	6764 <usart_serial_putchar+0x8>
}
    676e:	bd70      	pop	{r4, r5, r6, pc}
    6770:	00005181 	.word	0x00005181

00006774 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
    6774:	b5f0      	push	{r4, r5, r6, r7, lr}
    6776:	b087      	sub	sp, #28
    6778:	0005      	movs	r5, r0
    677a:	0014      	movs	r4, r2
	switch (type) {
    677c:	2901      	cmp	r1, #1
    677e:	d04b      	beq.n	6818 <mqtt_callback+0xa4>
    6780:	dd2d      	ble.n	67de <mqtt_callback+0x6a>
    6782:	2905      	cmp	r1, #5
    6784:	d061      	beq.n	684a <mqtt_callback+0xd6>
    6786:	2906      	cmp	r1, #6
    6788:	d168      	bne.n	685c <mqtt_callback+0xe8>

		break;

	case MQTT_CALLBACK_RECV_PUBLISH:
		/* You received publish message which you had subscribed. */
		if (data->recv_publish.topic != NULL && data->recv_publish.msg != NULL) {
    678a:	6810      	ldr	r0, [r2, #0]
    678c:	2800      	cmp	r0, #0
    678e:	d065      	beq.n	685c <mqtt_callback+0xe8>
    6790:	6893      	ldr	r3, [r2, #8]
    6792:	2b00      	cmp	r3, #0
    6794:	d062      	beq.n	685c <mqtt_callback+0xe8>
			if (!strncmp(data->recv_publish.topic, MAIN_CHAT_TOPIC, strlen(MAIN_CHAT_TOPIC))) {
    6796:	220a      	movs	r2, #10
    6798:	4931      	ldr	r1, [pc, #196]	; (6860 <mqtt_callback+0xec>)
    679a:	4b32      	ldr	r3, [pc, #200]	; (6864 <mqtt_callback+0xf0>)
    679c:	4798      	blx	r3
    679e:	1e05      	subs	r5, r0, #0
    67a0:	d15c      	bne.n	685c <mqtt_callback+0xe8>
				/* Print user name and message */
				for (int i = strlen(MAIN_CHAT_TOPIC); i < data->recv_publish.topic_size; i++) {
    67a2:	6863      	ldr	r3, [r4, #4]
    67a4:	2b0a      	cmp	r3, #10
    67a6:	dd08      	ble.n	67ba <mqtt_callback+0x46>
    67a8:	260a      	movs	r6, #10
				//for (int i = 0; i < data->recv_publish.topic_size; i++) {
					printf("%c", data->recv_publish.topic[i]);
    67aa:	4f2f      	ldr	r7, [pc, #188]	; (6868 <mqtt_callback+0xf4>)
    67ac:	6823      	ldr	r3, [r4, #0]
    67ae:	5d98      	ldrb	r0, [r3, r6]
    67b0:	47b8      	blx	r7
				for (int i = strlen(MAIN_CHAT_TOPIC); i < data->recv_publish.topic_size; i++) {
    67b2:	3601      	adds	r6, #1
    67b4:	6863      	ldr	r3, [r4, #4]
    67b6:	42b3      	cmp	r3, r6
    67b8:	dcf8      	bgt.n	67ac <mqtt_callback+0x38>
				}
				printf(" >> ");
    67ba:	482c      	ldr	r0, [pc, #176]	; (686c <mqtt_callback+0xf8>)
    67bc:	4b2c      	ldr	r3, [pc, #176]	; (6870 <mqtt_callback+0xfc>)
    67be:	4798      	blx	r3
				for (int i = 0; i < data->recv_publish.msg_size; i++) {
    67c0:	68e3      	ldr	r3, [r4, #12]
    67c2:	2b00      	cmp	r3, #0
    67c4:	dd07      	ble.n	67d6 <mqtt_callback+0x62>
					printf("%c", data->recv_publish.msg[i]);
    67c6:	4e28      	ldr	r6, [pc, #160]	; (6868 <mqtt_callback+0xf4>)
    67c8:	68a3      	ldr	r3, [r4, #8]
    67ca:	5d58      	ldrb	r0, [r3, r5]
    67cc:	47b0      	blx	r6
				for (int i = 0; i < data->recv_publish.msg_size; i++) {
    67ce:	3501      	adds	r5, #1
    67d0:	68e3      	ldr	r3, [r4, #12]
    67d2:	42ab      	cmp	r3, r5
    67d4:	dcf8      	bgt.n	67c8 <mqtt_callback+0x54>
				}
				printf("\r\n");
    67d6:	4827      	ldr	r0, [pc, #156]	; (6874 <mqtt_callback+0x100>)
    67d8:	4b27      	ldr	r3, [pc, #156]	; (6878 <mqtt_callback+0x104>)
    67da:	4798      	blx	r3
    67dc:	e03e      	b.n	685c <mqtt_callback+0xe8>
	switch (type) {
    67de:	2900      	cmp	r1, #0
    67e0:	d13c      	bne.n	685c <mqtt_callback+0xe8>
		if (data->sock_connected.result >= 0) {
    67e2:	6813      	ldr	r3, [r2, #0]
    67e4:	2b00      	cmp	r3, #0
    67e6:	db0d      	blt.n	6804 <mqtt_callback+0x90>
			mqtt_connect_broker(module_inst, 1, NULL, NULL, mqtt_user, NULL, NULL, 0, 0, 0);// (clean session, user_id, user_password, clientID, will_topic, will_msg, QoS)
    67e8:	2300      	movs	r3, #0
    67ea:	9305      	str	r3, [sp, #20]
    67ec:	9304      	str	r3, [sp, #16]
    67ee:	9303      	str	r3, [sp, #12]
    67f0:	9302      	str	r3, [sp, #8]
    67f2:	9301      	str	r3, [sp, #4]
    67f4:	4b21      	ldr	r3, [pc, #132]	; (687c <mqtt_callback+0x108>)
    67f6:	9300      	str	r3, [sp, #0]
    67f8:	2300      	movs	r3, #0
    67fa:	2200      	movs	r2, #0
    67fc:	2101      	movs	r1, #1
    67fe:	4c20      	ldr	r4, [pc, #128]	; (6880 <mqtt_callback+0x10c>)
    6800:	47a0      	blx	r4
    6802:	e02b      	b.n	685c <mqtt_callback+0xe8>
			printf("Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
    6804:	4c1f      	ldr	r4, [pc, #124]	; (6884 <mqtt_callback+0x110>)
    6806:	0021      	movs	r1, r4
    6808:	481f      	ldr	r0, [pc, #124]	; (6888 <mqtt_callback+0x114>)
    680a:	4b19      	ldr	r3, [pc, #100]	; (6870 <mqtt_callback+0xfc>)
    680c:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
    680e:	0021      	movs	r1, r4
    6810:	0028      	movs	r0, r5
    6812:	4b1e      	ldr	r3, [pc, #120]	; (688c <mqtt_callback+0x118>)
    6814:	4798      	blx	r3
    6816:	e021      	b.n	685c <mqtt_callback+0xe8>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
    6818:	7811      	ldrb	r1, [r2, #0]
    681a:	2900      	cmp	r1, #0
    681c:	d111      	bne.n	6842 <mqtt_callback+0xce>
			mqtt_subscribe(module_inst, MAIN_CHAT_TOPIC "#", 0);
    681e:	2200      	movs	r2, #0
    6820:	491b      	ldr	r1, [pc, #108]	; (6890 <mqtt_callback+0x11c>)
    6822:	4b1c      	ldr	r3, [pc, #112]	; (6894 <mqtt_callback+0x120>)
    6824:	4798      	blx	r3
			printf("Subscribed to the topic: %s\r\n", MAIN_CHAT_TOPIC);
    6826:	490e      	ldr	r1, [pc, #56]	; (6860 <mqtt_callback+0xec>)
    6828:	481b      	ldr	r0, [pc, #108]	; (6898 <mqtt_callback+0x124>)
    682a:	4b11      	ldr	r3, [pc, #68]	; (6870 <mqtt_callback+0xfc>)
    682c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    682e:	491b      	ldr	r1, [pc, #108]	; (689c <mqtt_callback+0x128>)
    6830:	2231      	movs	r2, #49	; 0x31
    6832:	5c8b      	ldrb	r3, [r1, r2]
    6834:	2002      	movs	r0, #2
    6836:	4303      	orrs	r3, r0
    6838:	548b      	strb	r3, [r1, r2]
			printf("Preparation of the chat has been completed.\r\n");
    683a:	4819      	ldr	r0, [pc, #100]	; (68a0 <mqtt_callback+0x12c>)
    683c:	4b0e      	ldr	r3, [pc, #56]	; (6878 <mqtt_callback+0x104>)
    683e:	4798      	blx	r3
    6840:	e00c      	b.n	685c <mqtt_callback+0xe8>
			printf("MQTT broker decline your access! error code %d\r\n", data->connected.result);
    6842:	4818      	ldr	r0, [pc, #96]	; (68a4 <mqtt_callback+0x130>)
    6844:	4b0a      	ldr	r3, [pc, #40]	; (6870 <mqtt_callback+0xfc>)
    6846:	4798      	blx	r3
    6848:	e008      	b.n	685c <mqtt_callback+0xe8>

		break;

	case MQTT_CALLBACK_DISCONNECTED:
		/* Stop timer and USART callback. */
		printf("MQTT disconnected\r\n");
    684a:	4817      	ldr	r0, [pc, #92]	; (68a8 <mqtt_callback+0x134>)
    684c:	4b0a      	ldr	r3, [pc, #40]	; (6878 <mqtt_callback+0x104>)
    684e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
    6850:	4912      	ldr	r1, [pc, #72]	; (689c <mqtt_callback+0x128>)
    6852:	2231      	movs	r2, #49	; 0x31
    6854:	5c8b      	ldrb	r3, [r1, r2]
    6856:	2002      	movs	r0, #2
    6858:	4383      	bics	r3, r0
    685a:	548b      	strb	r3, [r1, r2]
		usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
		break;
	}
}
    685c:	b007      	add	sp, #28
    685e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6860:	0000bfbc 	.word	0x0000bfbc
    6864:	00009ccb 	.word	0x00009ccb
    6868:	000099c9 	.word	0x000099c9
    686c:	0000c04c 	.word	0x0000c04c
    6870:	00009995 	.word	0x00009995
    6874:	0000c054 	.word	0x0000c054
    6878:	00009ab1 	.word	0x00009ab1
    687c:	2000000c 	.word	0x2000000c
    6880:	0000704d 	.word	0x0000704d
    6884:	0000bf68 	.word	0x0000bf68
    6888:	0000bf78 	.word	0x0000bf78
    688c:	00006f39 	.word	0x00006f39
    6890:	0000bfb0 	.word	0x0000bfb0
    6894:	000074a5 	.word	0x000074a5
    6898:	0000bfc8 	.word	0x0000bfc8
    689c:	20000130 	.word	0x20000130
    68a0:	0000bfe8 	.word	0x0000bfe8
    68a4:	0000c018 	.word	0x0000c018
    68a8:	0000c058 	.word	0x0000c058

000068ac <configure_adc>:
{
    68ac:	b510      	push	{r4, lr}
    68ae:	b08c      	sub	sp, #48	; 0x30
	adc_get_config_defaults(&config_adc);
    68b0:	4668      	mov	r0, sp
    68b2:	4b16      	ldr	r3, [pc, #88]	; (690c <configure_adc+0x60>)
    68b4:	4798      	blx	r3
	config_adc.gain_factor		= ADC_GAIN_FACTOR_DIV2;
    68b6:	23f0      	movs	r3, #240	; 0xf0
    68b8:	051b      	lsls	r3, r3, #20
    68ba:	9302      	str	r3, [sp, #8]
	config_adc.clock_prescaler	= ADC_CLOCK_PRESCALER_DIV32;
    68bc:	23c0      	movs	r3, #192	; 0xc0
    68be:	009b      	lsls	r3, r3, #2
    68c0:	466a      	mov	r2, sp
    68c2:	8053      	strh	r3, [r2, #2]
	config_adc.reference		= ADC_REFERENCE_INTVCC1;
    68c4:	2302      	movs	r3, #2
    68c6:	7053      	strb	r3, [r2, #1]
	config_adc.positive_input	= ADC_POSITIVE_INPUT_PIN0; //AIN0 which is PA02 in Xplained pro board
    68c8:	2300      	movs	r3, #0
    68ca:	7313      	strb	r3, [r2, #12]
	config_adc.resolution		= ADC_RESOLUTION_12BIT;
    68cc:	7113      	strb	r3, [r2, #4]
	config_adc.freerunning		= true;
    68ce:	2201      	movs	r2, #1
    68d0:	4669      	mov	r1, sp
    68d2:	750a      	strb	r2, [r1, #20]
	config_adc.left_adjust		= false;
    68d4:	466a      	mov	r2, sp
    68d6:	748b      	strb	r3, [r1, #18]
	adc_init(&adc_instance, ADC, &config_adc);
    68d8:	4c0d      	ldr	r4, [pc, #52]	; (6910 <configure_adc+0x64>)
    68da:	490e      	ldr	r1, [pc, #56]	; (6914 <configure_adc+0x68>)
    68dc:	0020      	movs	r0, r4
    68de:	4b0e      	ldr	r3, [pc, #56]	; (6918 <configure_adc+0x6c>)
    68e0:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    68e2:	6822      	ldr	r2, [r4, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    68e4:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    68e6:	b25b      	sxtb	r3, r3
    68e8:	2b00      	cmp	r3, #0
    68ea:	dbfb      	blt.n	68e4 <configure_adc+0x38>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    68ec:	230f      	movs	r3, #15
    68ee:	7593      	strb	r3, [r2, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    68f0:	7613      	strb	r3, [r2, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    68f2:	7813      	ldrb	r3, [r2, #0]
    68f4:	2102      	movs	r1, #2
    68f6:	430b      	orrs	r3, r1
    68f8:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    68fa:	4b05      	ldr	r3, [pc, #20]	; (6910 <configure_adc+0x64>)
    68fc:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    68fe:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    6900:	b25b      	sxtb	r3, r3
    6902:	2b00      	cmp	r3, #0
    6904:	dbfb      	blt.n	68fe <configure_adc+0x52>
}
    6906:	b00c      	add	sp, #48	; 0x30
    6908:	bd10      	pop	{r4, pc}
    690a:	46c0      	nop			; (mov r8, r8)
    690c:	000001bd 	.word	0x000001bd
    6910:	200004d4 	.word	0x200004d4
    6914:	42004000 	.word	0x42004000
    6918:	00000205 	.word	0x00000205

0000691c <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
    691c:	b5f0      	push	{r4, r5, r6, r7, lr}
    691e:	46c6      	mov	lr, r8
    6920:	b500      	push	{lr}
    6922:	b0bc      	sub	sp, #240	; 0xf0
	char topicAMS[strlen(MAIN_CHAT_TOPIC) + MAIN_CHAT_USER_NAME_SIZE + 1];
	
	//char msgBuff[32];
	
	/* Initialize the board. */
	system_init();
    6924:	4bc1      	ldr	r3, [pc, #772]	; (6c2c <main+0x310>)
    6926:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    6928:	aa1f      	add	r2, sp, #124	; 0x7c
    692a:	2380      	movs	r3, #128	; 0x80
    692c:	05db      	lsls	r3, r3, #23
    692e:	931f      	str	r3, [sp, #124]	; 0x7c
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    6930:	2300      	movs	r3, #0
    6932:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    6934:	21ff      	movs	r1, #255	; 0xff
    6936:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    6938:	2100      	movs	r1, #0
    693a:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    693c:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    693e:	2501      	movs	r5, #1
    6940:	2024      	movs	r0, #36	; 0x24
    6942:	5415      	strb	r5, [r2, r0]
	config->transmitter_enable = true;
    6944:	3001      	adds	r0, #1
    6946:	5415      	strb	r5, [r2, r0]
	config->clock_polarity_inverted = false;
    6948:	3001      	adds	r0, #1
    694a:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
    694c:	3001      	adds	r0, #1
    694e:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
    6950:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    6952:	3005      	adds	r0, #5
    6954:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
    6956:	3001      	adds	r0, #1
    6958:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    695a:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    695c:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    695e:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    6960:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    6962:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    6964:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
    6966:	2313      	movs	r3, #19
    6968:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    696a:	7751      	strb	r1, [r2, #29]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    696c:	2380      	movs	r3, #128	; 0x80
    696e:	035b      	lsls	r3, r3, #13
    6970:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    6972:	4baf      	ldr	r3, [pc, #700]	; (6c30 <main+0x314>)
    6974:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    6976:	4baf      	ldr	r3, [pc, #700]	; (6c34 <main+0x318>)
    6978:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    697a:	2301      	movs	r3, #1
    697c:	425b      	negs	r3, r3
    697e:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    6980:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    6982:	23e1      	movs	r3, #225	; 0xe1
    6984:	025b      	lsls	r3, r3, #9
    6986:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    6988:	4cab      	ldr	r4, [pc, #684]	; (6c38 <main+0x31c>)
    698a:	4bac      	ldr	r3, [pc, #688]	; (6c3c <main+0x320>)
    698c:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    698e:	49ac      	ldr	r1, [pc, #688]	; (6c40 <main+0x324>)
    6990:	4bac      	ldr	r3, [pc, #688]	; (6c44 <main+0x328>)
    6992:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    6994:	49ac      	ldr	r1, [pc, #688]	; (6c48 <main+0x32c>)
    6996:	4bad      	ldr	r3, [pc, #692]	; (6c4c <main+0x330>)
    6998:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    699a:	49ad      	ldr	r1, [pc, #692]	; (6c50 <main+0x334>)
    699c:	0020      	movs	r0, r4
    699e:	4bad      	ldr	r3, [pc, #692]	; (6c54 <main+0x338>)
    69a0:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    69a2:	4fad      	ldr	r7, [pc, #692]	; (6c58 <main+0x33c>)
    69a4:	683b      	ldr	r3, [r7, #0]
    69a6:	6898      	ldr	r0, [r3, #8]
    69a8:	2100      	movs	r1, #0
    69aa:	4eac      	ldr	r6, [pc, #688]	; (6c5c <main+0x340>)
    69ac:	47b0      	blx	r6
	setbuf(stdin, NULL);
    69ae:	683b      	ldr	r3, [r7, #0]
    69b0:	6858      	ldr	r0, [r3, #4]
    69b2:	2100      	movs	r1, #0
    69b4:	47b0      	blx	r6
	usart_register_callback(&cdc_uart_module, (usart_callback_t)uart_callback, USART_CALLBACK_BUFFER_RECEIVED);
    69b6:	2201      	movs	r2, #1
    69b8:	49a9      	ldr	r1, [pc, #676]	; (6c60 <main+0x344>)
    69ba:	0020      	movs	r0, r4
    69bc:	4ba9      	ldr	r3, [pc, #676]	; (6c64 <main+0x348>)
    69be:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    69c0:	6826      	ldr	r6, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    69c2:	0030      	movs	r0, r6
    69c4:	4ba8      	ldr	r3, [pc, #672]	; (6c68 <main+0x34c>)
    69c6:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    69c8:	231f      	movs	r3, #31
    69ca:	4018      	ands	r0, r3
    69cc:	4085      	lsls	r5, r0
    69ce:	4ba7      	ldr	r3, [pc, #668]	; (6c6c <main+0x350>)
    69d0:	601d      	str	r5, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    69d2:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    69d4:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    69d6:	2a00      	cmp	r2, #0
    69d8:	d1fc      	bne.n	69d4 <main+0xb8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    69da:	6833      	ldr	r3, [r6, #0]
    69dc:	3202      	adds	r2, #2
    69de:	4313      	orrs	r3, r2
    69e0:	6033      	str	r3, [r6, #0]
	/* Initialize the UART console. */
	configure_console();
	
	
	/* Output example information */
	printf(STRING_HEADER);
    69e2:	48a3      	ldr	r0, [pc, #652]	; (6c70 <main+0x354>)
    69e4:	4ba3      	ldr	r3, [pc, #652]	; (6c74 <main+0x358>)
    69e6:	4798      	blx	r3
	sw_timer_get_config_defaults(&swt_conf);
    69e8:	a81f      	add	r0, sp, #124	; 0x7c
    69ea:	4ba3      	ldr	r3, [pc, #652]	; (6c78 <main+0x35c>)
    69ec:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
    69ee:	4ca3      	ldr	r4, [pc, #652]	; (6c7c <main+0x360>)
    69f0:	a91f      	add	r1, sp, #124	; 0x7c
    69f2:	0020      	movs	r0, r4
    69f4:	4ba2      	ldr	r3, [pc, #648]	; (6c80 <main+0x364>)
    69f6:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    69f8:	0020      	movs	r0, r4
    69fa:	4ba2      	ldr	r3, [pc, #648]	; (6c84 <main+0x368>)
    69fc:	4798      	blx	r3
	/* Initialize the Timer. */
	configure_timer();

	
	/* Initialize the BSP. */
	nm_bsp_init();
    69fe:	4ba2      	ldr	r3, [pc, #648]	; (6c88 <main+0x36c>)
    6a00:	4798      	blx	r3
	
	
	/* Initialize the ADC on a specific channel */
	configure_adc();
    6a02:	4ba2      	ldr	r3, [pc, #648]	; (6c8c <main+0x370>)
    6a04:	4798      	blx	r3
	
	
	/* Setup user name first */
	//printf("Enter the user name (Max %d characters)\r\n", MAIN_CHAT_USER_NAME_SIZE);
	//scanf("%64s", mqtt_user);
	printf("User : %s\r\n", mqtt_user); // Add new line after printing mqtt_user
    6a06:	49a2      	ldr	r1, [pc, #648]	; (6c90 <main+0x374>)
    6a08:	48a2      	ldr	r0, [pc, #648]	; (6c94 <main+0x378>)
    6a0a:	4ba3      	ldr	r3, [pc, #652]	; (6c98 <main+0x37c>)
    6a0c:	4798      	blx	r3
	sprintf(topicSensor, "%s%s", MAIN_CHAT_TOPIC, "sensor"); //concatenate & save 'MAIN_CHAT_TOPIC' data to the 'topic' char array
    6a0e:	4ea3      	ldr	r6, [pc, #652]	; (6c9c <main+0x380>)
    6a10:	4da3      	ldr	r5, [pc, #652]	; (6ca0 <main+0x384>)
    6a12:	4ba4      	ldr	r3, [pc, #656]	; (6ca4 <main+0x388>)
    6a14:	0032      	movs	r2, r6
    6a16:	0029      	movs	r1, r5
    6a18:	a80c      	add	r0, sp, #48	; 0x30
    6a1a:	4ca3      	ldr	r4, [pc, #652]	; (6ca8 <main+0x38c>)
    6a1c:	47a0      	blx	r4
	sprintf(topicAMS, "%s%s", MAIN_CHAT_TOPIC,"ams"); //concatenate & save 'MAIN_CHAT_TOPIC' data to the 'topic' char array
    6a1e:	4ba3      	ldr	r3, [pc, #652]	; (6cac <main+0x390>)
    6a20:	0032      	movs	r2, r6
    6a22:	0029      	movs	r1, r5
    6a24:	a81f      	add	r0, sp, #124	; 0x7c
    6a26:	47a0      	blx	r4
	

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    6a28:	2218      	movs	r2, #24
    6a2a:	2100      	movs	r1, #0
    6a2c:	a836      	add	r0, sp, #216	; 0xd8
    6a2e:	4ba0      	ldr	r3, [pc, #640]	; (6cb0 <main+0x394>)
    6a30:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_callback; /* Set Wi-Fi event callback. */
    6a32:	4ba0      	ldr	r3, [pc, #640]	; (6cb4 <main+0x398>)
    6a34:	9336      	str	r3, [sp, #216]	; 0xd8
	ret = m2m_wifi_init(&param);
    6a36:	a836      	add	r0, sp, #216	; 0xd8
    6a38:	4b9f      	ldr	r3, [pc, #636]	; (6cb8 <main+0x39c>)
    6a3a:	4798      	blx	r3
    6a3c:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) {
    6a3e:	d003      	beq.n	6a48 <main+0x12c>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
    6a40:	489e      	ldr	r0, [pc, #632]	; (6cbc <main+0x3a0>)
    6a42:	4b95      	ldr	r3, [pc, #596]	; (6c98 <main+0x37c>)
    6a44:	4798      	blx	r3
    6a46:	e7fe      	b.n	6a46 <main+0x12a>
		while (1) { /* Loop forever. */
		}
	}

	/* Initialize socket interface. */
	socketInit();
    6a48:	4b9d      	ldr	r3, [pc, #628]	; (6cc0 <main+0x3a4>)
    6a4a:	4798      	blx	r3
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
    6a4c:	499d      	ldr	r1, [pc, #628]	; (6cc4 <main+0x3a8>)
    6a4e:	489e      	ldr	r0, [pc, #632]	; (6cc8 <main+0x3ac>)
    6a50:	4b9e      	ldr	r3, [pc, #632]	; (6ccc <main+0x3b0>)
    6a52:	4798      	blx	r3

	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    6a54:	23ff      	movs	r3, #255	; 0xff
    6a56:	9300      	str	r3, [sp, #0]
    6a58:	4b9d      	ldr	r3, [pc, #628]	; (6cd0 <main+0x3b4>)
    6a5a:	2202      	movs	r2, #2
    6a5c:	210e      	movs	r1, #14
    6a5e:	489d      	ldr	r0, [pc, #628]	; (6cd4 <main+0x3b8>)
    6a60:	4c9d      	ldr	r4, [pc, #628]	; (6cd8 <main+0x3bc>)
    6a62:	47a0      	blx	r4
	mqtt_get_config_defaults(&mqtt_conf);
    6a64:	a804      	add	r0, sp, #16
    6a66:	4b9d      	ldr	r3, [pc, #628]	; (6cdc <main+0x3c0>)
    6a68:	4798      	blx	r3
	mqtt_conf.timer_inst = &swt_module_inst;
    6a6a:	4b84      	ldr	r3, [pc, #528]	; (6c7c <main+0x360>)
    6a6c:	9305      	str	r3, [sp, #20]
	mqtt_conf.recv_buffer = mqtt_buffer;
    6a6e:	4b9c      	ldr	r3, [pc, #624]	; (6ce0 <main+0x3c4>)
    6a70:	9307      	str	r3, [sp, #28]
	mqtt_conf.recv_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    6a72:	2380      	movs	r3, #128	; 0x80
    6a74:	9308      	str	r3, [sp, #32]
	result = mqtt_init(&mqtt_inst, &mqtt_conf);
    6a76:	a904      	add	r1, sp, #16
    6a78:	489a      	ldr	r0, [pc, #616]	; (6ce4 <main+0x3c8>)
    6a7a:	4b9b      	ldr	r3, [pc, #620]	; (6ce8 <main+0x3cc>)
    6a7c:	4798      	blx	r3
    6a7e:	1e01      	subs	r1, r0, #0
	if (result < 0) {
    6a80:	da03      	bge.n	6a8a <main+0x16e>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
    6a82:	489a      	ldr	r0, [pc, #616]	; (6cec <main+0x3d0>)
    6a84:	4b84      	ldr	r3, [pc, #528]	; (6c98 <main+0x37c>)
    6a86:	4798      	blx	r3
    6a88:	e7fe      	b.n	6a88 <main+0x16c>
	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
    6a8a:	4999      	ldr	r1, [pc, #612]	; (6cf0 <main+0x3d4>)
    6a8c:	4895      	ldr	r0, [pc, #596]	; (6ce4 <main+0x3c8>)
    6a8e:	4b99      	ldr	r3, [pc, #612]	; (6cf4 <main+0x3d8>)
    6a90:	4798      	blx	r3
    6a92:	1e01      	subs	r1, r0, #0
	if (result < 0) {
    6a94:	da03      	bge.n	6a9e <main+0x182>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
    6a96:	4898      	ldr	r0, [pc, #608]	; (6cf8 <main+0x3dc>)
    6a98:	4b7f      	ldr	r3, [pc, #508]	; (6c98 <main+0x37c>)
    6a9a:	4798      	blx	r3
    6a9c:	e7fe      	b.n	6a9c <main+0x180>
    enum status_code shtc1_connected;
    enum status_code shtc1_read_status;
	enum status_code ams_read_status;
	
	/* Initialize the I2C console. */
	shtc1_i2c_init();
    6a9e:	4b97      	ldr	r3, [pc, #604]	; (6cfc <main+0x3e0>)
    6aa0:	4798      	blx	r3

    delay_s(2);
    6aa2:	20fa      	movs	r0, #250	; 0xfa
    6aa4:	00c0      	lsls	r0, r0, #3
    6aa6:	4b96      	ldr	r3, [pc, #600]	; (6d00 <main+0x3e4>)
    6aa8:	4798      	blx	r3

    printf("\r\nstarting...\r\n");
    6aaa:	4896      	ldr	r0, [pc, #600]	; (6d04 <main+0x3e8>)
    6aac:	4b71      	ldr	r3, [pc, #452]	; (6c74 <main+0x358>)
    6aae:	4798      	blx	r3

    /* test if sensor is connected */
    shtc1_connected = shtc1_probe(&i2c_master_instance);
    6ab0:	4895      	ldr	r0, [pc, #596]	; (6d08 <main+0x3ec>)
    6ab2:	4b96      	ldr	r3, [pc, #600]	; (6d0c <main+0x3f0>)
    6ab4:	4798      	blx	r3
    printf("sensor is %s\r\n",
    6ab6:	2800      	cmp	r0, #0
    6ab8:	d125      	bne.n	6b06 <main+0x1ea>
    6aba:	4995      	ldr	r1, [pc, #596]	; (6d10 <main+0x3f4>)
    6abc:	4895      	ldr	r0, [pc, #596]	; (6d14 <main+0x3f8>)
    6abe:	4b76      	ldr	r3, [pc, #472]	; (6c98 <main+0x37c>)
    6ac0:	4798      	blx	r3
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    6ac2:	2000      	movs	r0, #0
    6ac4:	4b94      	ldr	r3, [pc, #592]	; (6d18 <main+0x3fc>)
    6ac6:	4798      	blx	r3
    6ac8:	4b94      	ldr	r3, [pc, #592]	; (6d1c <main+0x400>)
    6aca:	7a1b      	ldrb	r3, [r3, #8]
    6acc:	b2db      	uxtb	r3, r3
    6ace:	40d8      	lsrs	r0, r3
            shtc1_connected ? "present" : "not present");


	/* Enable SysTick interrupt for non busy wait delay. */
	if (SysTick_Config(system_cpu_clock_get_hz() / 1000))
    6ad0:	21fa      	movs	r1, #250	; 0xfa
    6ad2:	0089      	lsls	r1, r1, #2
    6ad4:	4b92      	ldr	r3, [pc, #584]	; (6d20 <main+0x404>)
    6ad6:	4798      	blx	r3
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
    6ad8:	3801      	subs	r0, #1
    6ada:	4b92      	ldr	r3, [pc, #584]	; (6d24 <main+0x408>)
    6adc:	4298      	cmp	r0, r3
    6ade:	d900      	bls.n	6ae2 <main+0x1c6>
    6ae0:	e09e      	b.n	6c20 <main+0x304>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
    6ae2:	4a91      	ldr	r2, [pc, #580]	; (6d28 <main+0x40c>)
    6ae4:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    6ae6:	4891      	ldr	r0, [pc, #580]	; (6d2c <main+0x410>)
    6ae8:	6a03      	ldr	r3, [r0, #32]
    6aea:	021b      	lsls	r3, r3, #8
    6aec:	0a1b      	lsrs	r3, r3, #8
    6aee:	21c0      	movs	r1, #192	; 0xc0
    6af0:	0609      	lsls	r1, r1, #24
    6af2:	430b      	orrs	r3, r1
    6af4:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    6af6:	2300      	movs	r3, #0
    6af8:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    6afa:	3307      	adds	r3, #7
    6afc:	6013      	str	r3, [r2, #0]



	while (1) {
		
		m2m_wifi_handle_events(NULL);
    6afe:	4d8c      	ldr	r5, [pc, #560]	; (6d30 <main+0x414>)
	if (int_flags & ADC_INTFLAG_WINMON) {
    6b00:	2404      	movs	r4, #4
		status_flags |= ADC_STATUS_WINDOW;
    6b02:	2602      	movs	r6, #2
    6b04:	e04a      	b.n	6b9c <main+0x280>
    printf("sensor is %s\r\n",
    6b06:	498b      	ldr	r1, [pc, #556]	; (6d34 <main+0x418>)
    6b08:	e7d8      	b.n	6abc <main+0x1a0>

			}
			else
			{
				
				printf("Bro I can't measure the Temp & Humidity. Are you sure you plugged the sensor in?\n");
    6b0a:	488b      	ldr	r0, [pc, #556]	; (6d38 <main+0x41c>)
    6b0c:	4b59      	ldr	r3, [pc, #356]	; (6c74 <main+0x358>)
    6b0e:	4798      	blx	r3
    6b10:	e058      	b.n	6bc4 <main+0x2a8>
				//printf("CO2 = (%d) ppm\r\n",co2);
				
			}
			else
			{
				printf("Bro I can't measure the VOC & CO2. Are you sure you plugged the iAQ-Core in?\n");
    6b12:	488a      	ldr	r0, [pc, #552]	; (6d3c <main+0x420>)
    6b14:	4b57      	ldr	r3, [pc, #348]	; (6c74 <main+0x358>)
    6b16:	4798      	blx	r3
    6b18:	e06e      	b.n	6bf8 <main+0x2dc>
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    6b1a:	4210      	tst	r0, r2
    6b1c:	d10a      	bne.n	6b34 <main+0x218>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    6b1e:	7e0b      	ldrb	r3, [r1, #24]
    6b20:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    6b22:	0002      	movs	r2, r0
    6b24:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    6b26:	421c      	tst	r4, r3
    6b28:	d000      	beq.n	6b2c <main+0x210>
		status_flags |= ADC_STATUS_WINDOW;
    6b2a:	4332      	orrs	r2, r6
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    6b2c:	421e      	tst	r6, r3
    6b2e:	d0f4      	beq.n	6b1a <main+0x1fe>
		status_flags |= ADC_STATUS_OVERRUN;
    6b30:	4322      	orrs	r2, r4
    6b32:	e7f2      	b.n	6b1a <main+0x1fe>
    6b34:	7e4b      	ldrb	r3, [r1, #25]
	}

	Adc *const adc_module = module_inst->hw;

#if (SAMD) || (SAMHA1) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    6b36:	b25b      	sxtb	r3, r3
    6b38:	2b00      	cmp	r3, #0
    6b3a:	dbfb      	blt.n	6b34 <main+0x218>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    6b3c:	8b4b      	ldrh	r3, [r1, #26]
    6b3e:	b29b      	uxth	r3, r3
    6b40:	4698      	mov	r8, r3
	adc_module->INTFLAG.reg = int_flags;
    6b42:	2301      	movs	r3, #1
    6b44:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    6b46:	7e0a      	ldrb	r2, [r1, #24]
    6b48:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    6b4a:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    6b4c:	4214      	tst	r4, r2
    6b4e:	d000      	beq.n	6b52 <main+0x236>
		status_flags |= ADC_STATUS_WINDOW;
    6b50:	4333      	orrs	r3, r6
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    6b52:	4216      	tst	r6, r2
    6b54:	d000      	beq.n	6b58 <main+0x23c>
		status_flags |= ADC_STATUS_OVERRUN;
    6b56:	4323      	orrs	r3, r4

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    6b58:	421c      	tst	r4, r3
    6b5a:	d000      	beq.n	6b5e <main+0x242>
	adc_module->INTFLAG.reg = int_flags;
    6b5c:	760e      	strb	r6, [r1, #24]
	sprintf(telemetry_buffer1, "{\"TEMP\":%d,\"HUM\":%d,\"GAS\":%d}", temp/1000, hum/1000, gas);
    6b5e:	4f78      	ldr	r7, [pc, #480]	; (6d40 <main+0x424>)
    6b60:	21fa      	movs	r1, #250	; 0xfa
    6b62:	0089      	lsls	r1, r1, #2
    6b64:	9834      	ldr	r0, [sp, #208]	; 0xd0
    6b66:	47b8      	blx	r7
    6b68:	9003      	str	r0, [sp, #12]
    6b6a:	21fa      	movs	r1, #250	; 0xfa
    6b6c:	0089      	lsls	r1, r1, #2
    6b6e:	9835      	ldr	r0, [sp, #212]	; 0xd4
    6b70:	47b8      	blx	r7
    6b72:	0002      	movs	r2, r0
			//adc read
			delay_ms(500);
			gas = getADC_Value();
			
			
			sendData(topicSensor, temp, rh, gas);
    6b74:	4641      	mov	r1, r8
    6b76:	b20b      	sxth	r3, r1
    6b78:	9300      	str	r3, [sp, #0]
	sprintf(telemetry_buffer1, "{\"TEMP\":%d,\"HUM\":%d,\"GAS\":%d}", temp/1000, hum/1000, gas);
    6b7a:	9b03      	ldr	r3, [sp, #12]
    6b7c:	4971      	ldr	r1, [pc, #452]	; (6d44 <main+0x428>)
    6b7e:	a804      	add	r0, sp, #16
    6b80:	4f49      	ldr	r7, [pc, #292]	; (6ca8 <main+0x38c>)
    6b82:	47b8      	blx	r7
	mqtt_publish(&mqtt_inst, topicSensor, telemetry_buffer1, sizeof(telemetry_buffer1), 0, 0); //Maximum message length should be shorter than 128 bytes
    6b84:	2300      	movs	r3, #0
    6b86:	9301      	str	r3, [sp, #4]
    6b88:	9300      	str	r3, [sp, #0]
    6b8a:	3320      	adds	r3, #32
    6b8c:	aa04      	add	r2, sp, #16
    6b8e:	a90c      	add	r1, sp, #48	; 0x30
    6b90:	4854      	ldr	r0, [pc, #336]	; (6ce4 <main+0x3c8>)
    6b92:	4f6d      	ldr	r7, [pc, #436]	; (6d48 <main+0x42c>)
    6b94:	47b8      	blx	r7
			
			//printSystemTime();
			tick_counter_reset_timer(TICK_COUNTER_INTERVAL);
    6b96:	486d      	ldr	r0, [pc, #436]	; (6d4c <main+0x430>)
    6b98:	4b6d      	ldr	r3, [pc, #436]	; (6d50 <main+0x434>)
    6b9a:	4798      	blx	r3
		sw_timer_task(&swt_module_inst);
    6b9c:	4f6d      	ldr	r7, [pc, #436]	; (6d54 <main+0x438>)
		m2m_wifi_handle_events(NULL);
    6b9e:	2000      	movs	r0, #0
    6ba0:	47a8      	blx	r5
		sw_timer_task(&swt_module_inst);
    6ba2:	4836      	ldr	r0, [pc, #216]	; (6c7c <main+0x360>)
    6ba4:	47b8      	blx	r7
		if( tick_counter_check_timer())
    6ba6:	4b6c      	ldr	r3, [pc, #432]	; (6d58 <main+0x43c>)
    6ba8:	4798      	blx	r3
    6baa:	2800      	cmp	r0, #0
    6bac:	d0f7      	beq.n	6b9e <main+0x282>
			shtc1_read_status = shtc1_read_lpm_sync(&i2c_master_instance, &temp, &rh); //read into the temp and rh variables
    6bae:	aa34      	add	r2, sp, #208	; 0xd0
    6bb0:	a935      	add	r1, sp, #212	; 0xd4
    6bb2:	4855      	ldr	r0, [pc, #340]	; (6d08 <main+0x3ec>)
    6bb4:	4b69      	ldr	r3, [pc, #420]	; (6d5c <main+0x440>)
    6bb6:	4798      	blx	r3
    6bb8:	0007      	movs	r7, r0
			delay_ms(100);
    6bba:	2064      	movs	r0, #100	; 0x64
    6bbc:	4b50      	ldr	r3, [pc, #320]	; (6d00 <main+0x3e4>)
    6bbe:	4798      	blx	r3
			if (shtc1_read_status == STATUS_OK)
    6bc0:	2f00      	cmp	r7, #0
    6bc2:	d1a2      	bne.n	6b0a <main+0x1ee>
			ams_read_status = ams_sensor_read(&i2c_master_instance, &voc, &co2); //read into the address of the variable voc and co2
    6bc4:	aa32      	add	r2, sp, #200	; 0xc8
    6bc6:	a933      	add	r1, sp, #204	; 0xcc
    6bc8:	484f      	ldr	r0, [pc, #316]	; (6d08 <main+0x3ec>)
    6bca:	4b65      	ldr	r3, [pc, #404]	; (6d60 <main+0x444>)
    6bcc:	4798      	blx	r3
    6bce:	0007      	movs	r7, r0
			delay_ms(100);
    6bd0:	2064      	movs	r0, #100	; 0x64
    6bd2:	4b4b      	ldr	r3, [pc, #300]	; (6d00 <main+0x3e4>)
    6bd4:	4798      	blx	r3
			if (ams_read_status==STATUS_OK)
    6bd6:	2f00      	cmp	r7, #0
    6bd8:	d19b      	bne.n	6b12 <main+0x1f6>
	sprintf(telemetry_buffer2, "{\"VOC\":%d,\"CO2\":%d}", voc, co2);
    6bda:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    6bdc:	9a33      	ldr	r2, [sp, #204]	; 0xcc
    6bde:	4961      	ldr	r1, [pc, #388]	; (6d64 <main+0x448>)
    6be0:	a804      	add	r0, sp, #16
    6be2:	4f31      	ldr	r7, [pc, #196]	; (6ca8 <main+0x38c>)
    6be4:	47b8      	blx	r7
	mqtt_publish(&mqtt_inst, topicAMS, telemetry_buffer2, sizeof(telemetry_buffer2), 0, 0); //Maximum message length should be shorter than 128 bytes
    6be6:	2300      	movs	r3, #0
    6be8:	9301      	str	r3, [sp, #4]
    6bea:	9300      	str	r3, [sp, #0]
    6bec:	3316      	adds	r3, #22
    6bee:	aa04      	add	r2, sp, #16
    6bf0:	a91f      	add	r1, sp, #124	; 0x7c
    6bf2:	483c      	ldr	r0, [pc, #240]	; (6ce4 <main+0x3c8>)
    6bf4:	4f54      	ldr	r7, [pc, #336]	; (6d48 <main+0x42c>)
    6bf6:	47b8      	blx	r7
			delay_ms(500);
    6bf8:	20fa      	movs	r0, #250	; 0xfa
    6bfa:	0040      	lsls	r0, r0, #1
    6bfc:	4b40      	ldr	r3, [pc, #256]	; (6d00 <main+0x3e4>)
    6bfe:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    6c00:	4b59      	ldr	r3, [pc, #356]	; (6d68 <main+0x44c>)
    6c02:	6819      	ldr	r1, [r3, #0]
    6c04:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    6c06:	b25b      	sxtb	r3, r3
    6c08:	2b00      	cmp	r3, #0
    6c0a:	dbfb      	blt.n	6c04 <main+0x2e8>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    6c0c:	7b0b      	ldrb	r3, [r1, #12]
    6c0e:	2202      	movs	r2, #2
    6c10:	4313      	orrs	r3, r2
    6c12:	730b      	strb	r3, [r1, #12]
    6c14:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    6c16:	b25b      	sxtb	r3, r3
    6c18:	2b00      	cmp	r3, #0
    6c1a:	dbfb      	blt.n	6c14 <main+0x2f8>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    6c1c:	2001      	movs	r0, #1
    6c1e:	e77e      	b.n	6b1e <main+0x202>
		printf("%s\r\n","SysTick configuration error");
    6c20:	4952      	ldr	r1, [pc, #328]	; (6d6c <main+0x450>)
    6c22:	4853      	ldr	r0, [pc, #332]	; (6d70 <main+0x454>)
    6c24:	4b1c      	ldr	r3, [pc, #112]	; (6c98 <main+0x37c>)
    6c26:	4798      	blx	r3
    6c28:	e7fe      	b.n	6c28 <main+0x30c>
    6c2a:	46c0      	nop			; (mov r8, r8)
    6c2c:	00005b39 	.word	0x00005b39
    6c30:	00160002 	.word	0x00160002
    6c34:	00170002 	.word	0x00170002
    6c38:	20000130 	.word	0x20000130
    6c3c:	2000041c 	.word	0x2000041c
    6c40:	0000675d 	.word	0x0000675d
    6c44:	20000418 	.word	0x20000418
    6c48:	00006731 	.word	0x00006731
    6c4c:	20000414 	.word	0x20000414
    6c50:	42001400 	.word	0x42001400
    6c54:	00004e3d 	.word	0x00004e3d
    6c58:	2000004c 	.word	0x2000004c
    6c5c:	00009ae9 	.word	0x00009ae9
    6c60:	0000666d 	.word	0x0000666d
    6c64:	0000521d 	.word	0x0000521d
    6c68:	00004911 	.word	0x00004911
    6c6c:	e000e100 	.word	0xe000e100
    6c70:	0000bd30 	.word	0x0000bd30
    6c74:	00009ab1 	.word	0x00009ab1
    6c78:	000064d1 	.word	0x000064d1
    6c7c:	2000047c 	.word	0x2000047c
    6c80:	000064dd 	.word	0x000064dd
    6c84:	00006589 	.word	0x00006589
    6c88:	00001199 	.word	0x00001199
    6c8c:	000068ad 	.word	0x000068ad
    6c90:	2000000c 	.word	0x2000000c
    6c94:	0000bd9c 	.word	0x0000bd9c
    6c98:	00009995 	.word	0x00009995
    6c9c:	0000bfbc 	.word	0x0000bfbc
    6ca0:	0000bdb0 	.word	0x0000bdb0
    6ca4:	0000bda8 	.word	0x0000bda8
    6ca8:	00009c55 	.word	0x00009c55
    6cac:	0000bdb8 	.word	0x0000bdb8
    6cb0:	00009833 	.word	0x00009833
    6cb4:	00006699 	.word	0x00006699
    6cb8:	000020d1 	.word	0x000020d1
    6cbc:	0000bdbc 	.word	0x0000bdbc
    6cc0:	00003cfd 	.word	0x00003cfd
    6cc4:	00006681 	.word	0x00006681
    6cc8:	0000668d 	.word	0x0000668d
    6ccc:	00003d41 	.word	0x00003d41
    6cd0:	0000c094 	.word	0x0000c094
    6cd4:	0000c0a0 	.word	0x0000c0a0
    6cd8:	000024a1 	.word	0x000024a1
    6cdc:	00006e25 	.word	0x00006e25
    6ce0:	20000164 	.word	0x20000164
    6ce4:	200001e4 	.word	0x200001e4
    6ce8:	00006e49 	.word	0x00006e49
    6cec:	0000bde4 	.word	0x0000bde4
    6cf0:	00006775 	.word	0x00006775
    6cf4:	00006ed5 	.word	0x00006ed5
    6cf8:	0000be18 	.word	0x0000be18
    6cfc:	00006425 	.word	0x00006425
    6d00:	00001119 	.word	0x00001119
    6d04:	0000be4c 	.word	0x0000be4c
    6d08:	20000454 	.word	0x20000454
    6d0c:	00001061 	.word	0x00001061
    6d10:	0000bd24 	.word	0x0000bd24
    6d14:	0000be5c 	.word	0x0000be5c
    6d18:	000058f5 	.word	0x000058f5
    6d1c:	40000400 	.word	0x40000400
    6d20:	00007b99 	.word	0x00007b99
    6d24:	00ffffff 	.word	0x00ffffff
    6d28:	e000e010 	.word	0xe000e010
    6d2c:	e000ed00 	.word	0xe000ed00
    6d30:	00002205 	.word	0x00002205
    6d34:	0000bd28 	.word	0x0000bd28
    6d38:	0000be6c 	.word	0x0000be6c
    6d3c:	0000bed4 	.word	0x0000bed4
    6d40:	00007cad 	.word	0x00007cad
    6d44:	0000bf48 	.word	0x0000bf48
    6d48:	000072fd 	.word	0x000072fd
    6d4c:	00001388 	.word	0x00001388
    6d50:	0000012d 	.word	0x0000012d
    6d54:	00006611 	.word	0x00006611
    6d58:	00000115 	.word	0x00000115
    6d5c:	00001049 	.word	0x00001049
    6d60:	00000151 	.word	0x00000151
    6d64:	0000bec0 	.word	0x0000bec0
    6d68:	200004d4 	.word	0x200004d4
    6d6c:	0000bf24 	.word	0x0000bf24
    6d70:	0000bf40 	.word	0x0000bf40

00006d74 <_hwerr_to_stderr>:
    6d74:	1c03      	adds	r3, r0, #0
    6d76:	300e      	adds	r0, #14
    6d78:	b500      	push	{lr}
    6d7a:	280e      	cmp	r0, #14
    6d7c:	d819      	bhi.n	6db2 <_hwerr_to_stderr+0x3e>
    6d7e:	f000 ff01 	bl	7b84 <__gnu_thumb1_case_uqi>
    6d82:	1416      	.short	0x1416
    6d84:	1b181012 	.word	0x1b181012
    6d88:	180c0e18 	.word	0x180c0e18
    6d8c:	1d0a0e0e 	.word	0x1d0a0e0e
    6d90:	08          	.byte	0x08
    6d91:	00          	.byte	0x00
    6d92:	2000      	movs	r0, #0
    6d94:	e014      	b.n	6dc0 <_hwerr_to_stderr+0x4c>
    6d96:	2070      	movs	r0, #112	; 0x70
    6d98:	e011      	b.n	6dbe <_hwerr_to_stderr+0x4a>
    6d9a:	2016      	movs	r0, #22
    6d9c:	e00f      	b.n	6dbe <_hwerr_to_stderr+0x4a>
    6d9e:	200c      	movs	r0, #12
    6da0:	e00d      	b.n	6dbe <_hwerr_to_stderr+0x4a>
    6da2:	2079      	movs	r0, #121	; 0x79
    6da4:	e00b      	b.n	6dbe <_hwerr_to_stderr+0x4a>
    6da6:	2068      	movs	r0, #104	; 0x68
    6da8:	e009      	b.n	6dbe <_hwerr_to_stderr+0x4a>
    6daa:	200b      	movs	r0, #11
    6dac:	e007      	b.n	6dbe <_hwerr_to_stderr+0x4a>
    6dae:	2010      	movs	r0, #16
    6db0:	e005      	b.n	6dbe <_hwerr_to_stderr+0x4a>
    6db2:	2000      	movs	r0, #0
    6db4:	4283      	cmp	r3, r0
    6db6:	da03      	bge.n	6dc0 <_hwerr_to_stderr+0x4c>
    6db8:	2005      	movs	r0, #5
    6dba:	e000      	b.n	6dbe <_hwerr_to_stderr+0x4a>
    6dbc:	2002      	movs	r0, #2
    6dbe:	4240      	negs	r0, r0
    6dc0:	bd00      	pop	{pc}
	...

00006dc4 <_mqtt_send_wait>:
    6dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6dc6:	1c04      	adds	r4, r0, #0
    6dc8:	3443      	adds	r4, #67	; 0x43
    6dca:	7823      	ldrb	r3, [r4, #0]
    6dcc:	1c05      	adds	r5, r0, #0
    6dce:	07d8      	lsls	r0, r3, #31
    6dd0:	d51c      	bpl.n	6e0c <_mqtt_send_wait+0x48>
    6dd2:	2604      	movs	r6, #4
    6dd4:	4333      	orrs	r3, r6
    6dd6:	7023      	strb	r3, [r4, #0]
    6dd8:	2002      	movs	r0, #2
    6dda:	5628      	ldrsb	r0, [r5, r0]
    6ddc:	b292      	uxth	r2, r2
    6dde:	2300      	movs	r3, #0
    6de0:	4f0c      	ldr	r7, [pc, #48]	; (6e14 <_mqtt_send_wait+0x50>)
    6de2:	47b8      	blx	r7
    6de4:	2800      	cmp	r0, #0
    6de6:	da05      	bge.n	6df4 <_mqtt_send_wait+0x30>
    6de8:	7823      	ldrb	r3, [r4, #0]
    6dea:	43b3      	bics	r3, r6
    6dec:	7023      	strb	r3, [r4, #0]
    6dee:	4b0a      	ldr	r3, [pc, #40]	; (6e18 <_mqtt_send_wait+0x54>)
    6df0:	4798      	blx	r3
    6df2:	e00d      	b.n	6e10 <_mqtt_send_wait+0x4c>
    6df4:	7822      	ldrb	r2, [r4, #0]
    6df6:	2314      	movs	r3, #20
    6df8:	4013      	ands	r3, r2
    6dfa:	2000      	movs	r0, #0
    6dfc:	2b04      	cmp	r3, #4
    6dfe:	d107      	bne.n	6e10 <_mqtt_send_wait+0x4c>
    6e00:	4b06      	ldr	r3, [pc, #24]	; (6e1c <_mqtt_send_wait+0x58>)
    6e02:	4798      	blx	r3
    6e04:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    6e06:	4b06      	ldr	r3, [pc, #24]	; (6e20 <_mqtt_send_wait+0x5c>)
    6e08:	4798      	blx	r3
    6e0a:	e7f3      	b.n	6df4 <_mqtt_send_wait+0x30>
    6e0c:	2001      	movs	r0, #1
    6e0e:	4240      	negs	r0, r0
    6e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e12:	46c0      	nop			; (mov r8, r8)
    6e14:	00003f69 	.word	0x00003f69
    6e18:	00006d75 	.word	0x00006d75
    6e1c:	00002205 	.word	0x00002205
    6e20:	00006611 	.word	0x00006611

00006e24 <mqtt_get_config_defaults>:
    6e24:	4b07      	ldr	r3, [pc, #28]	; (6e44 <mqtt_get_config_defaults+0x20>)
    6e26:	2240      	movs	r2, #64	; 0x40
    6e28:	8003      	strh	r3, [r0, #0]
    6e2a:	2396      	movs	r3, #150	; 0x96
    6e2c:	009b      	lsls	r3, r3, #2
    6e2e:	8103      	strh	r3, [r0, #8]
    6e30:	6102      	str	r2, [r0, #16]
    6e32:	2300      	movs	r3, #0
    6e34:	2220      	movs	r2, #32
    6e36:	7083      	strb	r3, [r0, #2]
    6e38:	6043      	str	r3, [r0, #4]
    6e3a:	60c3      	str	r3, [r0, #12]
    6e3c:	6142      	str	r2, [r0, #20]
    6e3e:	7603      	strb	r3, [r0, #24]
    6e40:	4770      	bx	lr
    6e42:	46c0      	nop			; (mov r8, r8)
    6e44:	0000075b 	.word	0x0000075b

00006e48 <mqtt_init>:
    6e48:	b538      	push	{r3, r4, r5, lr}
    6e4a:	1c04      	adds	r4, r0, #0
    6e4c:	1c0d      	adds	r5, r1, #0
    6e4e:	2800      	cmp	r0, #0
    6e50:	d030      	beq.n	6eb4 <mqtt_init+0x6c>
    6e52:	2900      	cmp	r1, #0
    6e54:	d02e      	beq.n	6eb4 <mqtt_init+0x6c>
    6e56:	690b      	ldr	r3, [r1, #16]
    6e58:	2b00      	cmp	r3, #0
    6e5a:	d02b      	beq.n	6eb4 <mqtt_init+0x6c>
    6e5c:	684b      	ldr	r3, [r1, #4]
    6e5e:	2b00      	cmp	r3, #0
    6e60:	d028      	beq.n	6eb4 <mqtt_init+0x6c>
    6e62:	2100      	movs	r1, #0
    6e64:	2274      	movs	r2, #116	; 0x74
    6e66:	4b16      	ldr	r3, [pc, #88]	; (6ec0 <mqtt_init+0x78>)
    6e68:	4798      	blx	r3
    6e6a:	1c20      	adds	r0, r4, #0
    6e6c:	4b15      	ldr	r3, [pc, #84]	; (6ec4 <mqtt_init+0x7c>)
    6e6e:	3058      	adds	r0, #88	; 0x58
    6e70:	1c29      	adds	r1, r5, #0
    6e72:	221c      	movs	r2, #28
    6e74:	4798      	blx	r3
    6e76:	6e63      	ldr	r3, [r4, #100]	; 0x64
    6e78:	2b00      	cmp	r3, #0
    6e7a:	d10b      	bne.n	6e94 <mqtt_init+0x4c>
    6e7c:	6928      	ldr	r0, [r5, #16]
    6e7e:	4b12      	ldr	r3, [pc, #72]	; (6ec8 <mqtt_init+0x80>)
    6e80:	4798      	blx	r3
    6e82:	6660      	str	r0, [r4, #100]	; 0x64
    6e84:	2800      	cmp	r0, #0
    6e86:	d017      	beq.n	6eb8 <mqtt_init+0x70>
    6e88:	1c23      	adds	r3, r4, #0
    6e8a:	3343      	adds	r3, #67	; 0x43
    6e8c:	781a      	ldrb	r2, [r3, #0]
    6e8e:	2120      	movs	r1, #32
    6e90:	430a      	orrs	r2, r1
    6e92:	701a      	strb	r2, [r3, #0]
    6e94:	892a      	ldrh	r2, [r5, #8]
    6e96:	23fa      	movs	r3, #250	; 0xfa
    6e98:	005b      	lsls	r3, r3, #1
    6e9a:	4353      	muls	r3, r2
    6e9c:	6868      	ldr	r0, [r5, #4]
    6e9e:	490b      	ldr	r1, [pc, #44]	; (6ecc <mqtt_init+0x84>)
    6ea0:	1c22      	adds	r2, r4, #0
    6ea2:	4d0b      	ldr	r5, [pc, #44]	; (6ed0 <mqtt_init+0x88>)
    6ea4:	47a8      	blx	r5
    6ea6:	1c03      	adds	r3, r0, #0
    6ea8:	6520      	str	r0, [r4, #80]	; 0x50
    6eaa:	2000      	movs	r0, #0
    6eac:	4283      	cmp	r3, r0
    6eae:	da05      	bge.n	6ebc <mqtt_init+0x74>
    6eb0:	201c      	movs	r0, #28
    6eb2:	e002      	b.n	6eba <mqtt_init+0x72>
    6eb4:	2016      	movs	r0, #22
    6eb6:	e000      	b.n	6eba <mqtt_init+0x72>
    6eb8:	200c      	movs	r0, #12
    6eba:	4240      	negs	r0, r0
    6ebc:	bd38      	pop	{r3, r4, r5, pc}
    6ebe:	46c0      	nop			; (mov r8, r8)
    6ec0:	00009833 	.word	0x00009833
    6ec4:	000097fd 	.word	0x000097fd
    6ec8:	000097e9 	.word	0x000097e9
    6ecc:	00007651 	.word	0x00007651
    6ed0:	0000659d 	.word	0x0000659d

00006ed4 <mqtt_register_callback>:
    6ed4:	2800      	cmp	r0, #0
    6ed6:	d002      	beq.n	6ede <mqtt_register_callback+0xa>
    6ed8:	6541      	str	r1, [r0, #84]	; 0x54
    6eda:	2000      	movs	r0, #0
    6edc:	e001      	b.n	6ee2 <mqtt_register_callback+0xe>
    6ede:	2016      	movs	r0, #22
    6ee0:	4240      	negs	r0, r0
    6ee2:	4770      	bx	lr

00006ee4 <mqtt_socket_resolve_handler>:
    6ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
    6ee6:	1c06      	adds	r6, r0, #0
    6ee8:	b085      	sub	sp, #20
    6eea:	1c0f      	adds	r7, r1, #0
    6eec:	2400      	movs	r4, #0
    6eee:	4b0f      	ldr	r3, [pc, #60]	; (6f2c <mqtt_socket_resolve_handler+0x48>)
    6ef0:	58e5      	ldr	r5, [r4, r3]
    6ef2:	2d00      	cmp	r5, #0
    6ef4:	d015      	beq.n	6f22 <mqtt_socket_resolve_handler+0x3e>
    6ef6:	1ce9      	adds	r1, r5, #3
    6ef8:	1c30      	adds	r0, r6, #0
    6efa:	4b0d      	ldr	r3, [pc, #52]	; (6f30 <mqtt_socket_resolve_handler+0x4c>)
    6efc:	4798      	blx	r3
    6efe:	2800      	cmp	r0, #0
    6f00:	d10f      	bne.n	6f22 <mqtt_socket_resolve_handler+0x3e>
    6f02:	466a      	mov	r2, sp
    6f04:	2302      	movs	r3, #2
    6f06:	8013      	strh	r3, [r2, #0]
    6f08:	1c2b      	adds	r3, r5, #0
    6f0a:	3358      	adds	r3, #88	; 0x58
    6f0c:	881b      	ldrh	r3, [r3, #0]
    6f0e:	9701      	str	r7, [sp, #4]
    6f10:	ba5b      	rev16	r3, r3
    6f12:	8053      	strh	r3, [r2, #2]
    6f14:	2002      	movs	r0, #2
    6f16:	5628      	ldrsb	r0, [r5, r0]
    6f18:	4669      	mov	r1, sp
    6f1a:	2210      	movs	r2, #16
    6f1c:	4b05      	ldr	r3, [pc, #20]	; (6f34 <mqtt_socket_resolve_handler+0x50>)
    6f1e:	4798      	blx	r3
    6f20:	e002      	b.n	6f28 <mqtt_socket_resolve_handler+0x44>
    6f22:	3404      	adds	r4, #4
    6f24:	2c1c      	cmp	r4, #28
    6f26:	d1e2      	bne.n	6eee <mqtt_socket_resolve_handler+0xa>
    6f28:	b005      	add	sp, #20
    6f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6f2c:	2000025c 	.word	0x2000025c
    6f30:	00009c99 	.word	0x00009c99
    6f34:	00003ed9 	.word	0x00003ed9

00006f38 <mqtt_connect>:
    6f38:	b5f0      	push	{r4, r5, r6, r7, lr}
    6f3a:	1c04      	adds	r4, r0, #0
    6f3c:	b089      	sub	sp, #36	; 0x24
    6f3e:	1c0d      	adds	r5, r1, #0
    6f40:	2800      	cmp	r0, #0
    6f42:	d051      	beq.n	6fe8 <mqtt_connect+0xb0>
    6f44:	2900      	cmp	r1, #0
    6f46:	d04f      	beq.n	6fe8 <mqtt_connect+0xb0>
    6f48:	1c08      	adds	r0, r1, #0
    6f4a:	4b39      	ldr	r3, [pc, #228]	; (7030 <mqtt_connect+0xf8>)
    6f4c:	4798      	blx	r3
    6f4e:	2840      	cmp	r0, #64	; 0x40
    6f50:	d84c      	bhi.n	6fec <mqtt_connect+0xb4>
    6f52:	1c21      	adds	r1, r4, #0
    6f54:	3143      	adds	r1, #67	; 0x43
    6f56:	780b      	ldrb	r3, [r1, #0]
    6f58:	9101      	str	r1, [sp, #4]
    6f5a:	07db      	lsls	r3, r3, #31
    6f5c:	0fd9      	lsrs	r1, r3, #31
    6f5e:	466a      	mov	r2, sp
    6f60:	b2ce      	uxtb	r6, r1
    6f62:	1ce0      	adds	r0, r4, #3
    6f64:	7211      	strb	r1, [r2, #8]
    6f66:	2e00      	cmp	r6, #0
    6f68:	d142      	bne.n	6ff0 <mqtt_connect+0xb8>
    6f6a:	2701      	movs	r7, #1
    6f6c:	1c29      	adds	r1, r5, #0
    6f6e:	4b31      	ldr	r3, [pc, #196]	; (7034 <mqtt_connect+0xfc>)
    6f70:	8027      	strh	r7, [r4, #0]
    6f72:	4798      	blx	r3
    6f74:	9a01      	ldr	r2, [sp, #4]
    6f76:	2002      	movs	r0, #2
    6f78:	7813      	ldrb	r3, [r2, #0]
    6f7a:	9901      	ldr	r1, [sp, #4]
    6f7c:	43bb      	bics	r3, r7
    6f7e:	4383      	bics	r3, r0
    6f80:	22e3      	movs	r2, #227	; 0xe3
    6f82:	4013      	ands	r3, r2
    6f84:	466a      	mov	r2, sp
    6f86:	700b      	strb	r3, [r1, #0]
    6f88:	7a12      	ldrb	r2, [r2, #8]
    6f8a:	1c23      	adds	r3, r4, #0
    6f8c:	3348      	adds	r3, #72	; 0x48
    6f8e:	6466      	str	r6, [r4, #68]	; 0x44
    6f90:	701a      	strb	r2, [r3, #0]
    6f92:	7c9a      	ldrb	r2, [r3, #18]
    6f94:	805e      	strh	r6, [r3, #2]
    6f96:	1e53      	subs	r3, r2, #1
    6f98:	419a      	sbcs	r2, r3
    6f9a:	b2d2      	uxtb	r2, r2
    6f9c:	1c39      	adds	r1, r7, #0
    6f9e:	4b26      	ldr	r3, [pc, #152]	; (7038 <mqtt_connect+0x100>)
    6fa0:	4798      	blx	r3
    6fa2:	70a0      	strb	r0, [r4, #2]
    6fa4:	2800      	cmp	r0, #0
    6fa6:	db25      	blt.n	6ff4 <mqtt_connect+0xbc>
    6fa8:	4b24      	ldr	r3, [pc, #144]	; (703c <mqtt_connect+0x104>)
    6faa:	0080      	lsls	r0, r0, #2
    6fac:	50c4      	str	r4, [r0, r3]
    6fae:	1c2b      	adds	r3, r5, #0
    6fb0:	781f      	ldrb	r7, [r3, #0]
    6fb2:	2f00      	cmp	r7, #0
    6fb4:	d026      	beq.n	7004 <mqtt_connect+0xcc>
    6fb6:	2220      	movs	r2, #32
    6fb8:	1c39      	adds	r1, r7, #0
    6fba:	4391      	bics	r1, r2
    6fbc:	1c0a      	adds	r2, r1, #0
    6fbe:	3a41      	subs	r2, #65	; 0x41
    6fc0:	b2d2      	uxtb	r2, r2
    6fc2:	3301      	adds	r3, #1
    6fc4:	2a05      	cmp	r2, #5
    6fc6:	d90d      	bls.n	6fe4 <mqtt_connect+0xac>
    6fc8:	2f3a      	cmp	r7, #58	; 0x3a
    6fca:	d00b      	beq.n	6fe4 <mqtt_connect+0xac>
    6fcc:	2f2f      	cmp	r7, #47	; 0x2f
    6fce:	d009      	beq.n	6fe4 <mqtt_connect+0xac>
    6fd0:	2f2e      	cmp	r7, #46	; 0x2e
    6fd2:	d102      	bne.n	6fda <mqtt_connect+0xa2>
    6fd4:	2e00      	cmp	r6, #0
    6fd6:	d0eb      	beq.n	6fb0 <mqtt_connect+0x78>
    6fd8:	e00f      	b.n	6ffa <mqtt_connect+0xc2>
    6fda:	2230      	movs	r2, #48	; 0x30
    6fdc:	4017      	ands	r7, r2
    6fde:	4297      	cmp	r7, r2
    6fe0:	d0e6      	beq.n	6fb0 <mqtt_connect+0x78>
    6fe2:	e00a      	b.n	6ffa <mqtt_connect+0xc2>
    6fe4:	2601      	movs	r6, #1
    6fe6:	e7e3      	b.n	6fb0 <mqtt_connect+0x78>
    6fe8:	2016      	movs	r0, #22
    6fea:	e004      	b.n	6ff6 <mqtt_connect+0xbe>
    6fec:	205b      	movs	r0, #91	; 0x5b
    6fee:	e002      	b.n	6ff6 <mqtt_connect+0xbe>
    6ff0:	2078      	movs	r0, #120	; 0x78
    6ff2:	e000      	b.n	6ff6 <mqtt_connect+0xbe>
    6ff4:	201c      	movs	r0, #28
    6ff6:	4240      	negs	r0, r0
    6ff8:	e017      	b.n	702a <mqtt_connect+0xf2>
    6ffa:	1c28      	adds	r0, r5, #0
    6ffc:	4b10      	ldr	r3, [pc, #64]	; (7040 <mqtt_connect+0x108>)
    6ffe:	4798      	blx	r3
    7000:	2000      	movs	r0, #0
    7002:	e012      	b.n	702a <mqtt_connect+0xf2>
    7004:	466a      	mov	r2, sp
    7006:	2302      	movs	r3, #2
    7008:	8213      	strh	r3, [r2, #16]
    700a:	1c23      	adds	r3, r4, #0
    700c:	3358      	adds	r3, #88	; 0x58
    700e:	881b      	ldrh	r3, [r3, #0]
    7010:	1c28      	adds	r0, r5, #0
    7012:	ba5b      	rev16	r3, r3
    7014:	8253      	strh	r3, [r2, #18]
    7016:	4b0b      	ldr	r3, [pc, #44]	; (7044 <mqtt_connect+0x10c>)
    7018:	4798      	blx	r3
    701a:	9005      	str	r0, [sp, #20]
    701c:	2002      	movs	r0, #2
    701e:	5620      	ldrsb	r0, [r4, r0]
    7020:	a904      	add	r1, sp, #16
    7022:	2210      	movs	r2, #16
    7024:	4b08      	ldr	r3, [pc, #32]	; (7048 <mqtt_connect+0x110>)
    7026:	4798      	blx	r3
    7028:	1c38      	adds	r0, r7, #0
    702a:	b009      	add	sp, #36	; 0x24
    702c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    702e:	46c0      	nop			; (mov r8, r8)
    7030:	00009cbd 	.word	0x00009cbd
    7034:	00009cad 	.word	0x00009cad
    7038:	00003d55 	.word	0x00003d55
    703c:	2000025c 	.word	0x2000025c
    7040:	0000419d 	.word	0x0000419d
    7044:	00004131 	.word	0x00004131
    7048:	00003ed9 	.word	0x00003ed9

0000704c <mqtt_connect_broker>:
    704c:	b5f0      	push	{r4, r5, r6, r7, lr}
    704e:	b095      	sub	sp, #84	; 0x54
    7050:	af02      	add	r7, sp, #8
    7052:	617b      	str	r3, [r7, #20]
    7054:	1c3b      	adds	r3, r7, #0
    7056:	3370      	adds	r3, #112	; 0x70
    7058:	781b      	ldrb	r3, [r3, #0]
    705a:	1c05      	adds	r5, r0, #0
    705c:	60fb      	str	r3, [r7, #12]
    705e:	1c3b      	adds	r3, r7, #0
    7060:	3374      	adds	r3, #116	; 0x74
    7062:	781b      	ldrb	r3, [r3, #0]
    7064:	6139      	str	r1, [r7, #16]
    7066:	61fa      	str	r2, [r7, #28]
    7068:	60bb      	str	r3, [r7, #8]
    706a:	2800      	cmp	r0, #0
    706c:	d101      	bne.n	7072 <mqtt_connect_broker+0x26>
    706e:	2016      	movs	r0, #22
    7070:	e129      	b.n	72c6 <mqtt_connect_broker+0x27a>
    7072:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    7074:	4668      	mov	r0, sp
    7076:	3307      	adds	r3, #7
    7078:	08db      	lsrs	r3, r3, #3
    707a:	00db      	lsls	r3, r3, #3
    707c:	1ac0      	subs	r0, r0, r3
    707e:	4685      	mov	sp, r0
    7080:	ac02      	add	r4, sp, #8
    7082:	607c      	str	r4, [r7, #4]
    7084:	6e3c      	ldr	r4, [r7, #96]	; 0x60
    7086:	2c00      	cmp	r4, #0
    7088:	d0f1      	beq.n	706e <mqtt_connect_broker+0x22>
    708a:	1c2b      	adds	r3, r5, #0
    708c:	3343      	adds	r3, #67	; 0x43
    708e:	781b      	ldrb	r3, [r3, #0]
    7090:	07d8      	lsls	r0, r3, #31
    7092:	d400      	bmi.n	7096 <mqtt_connect_broker+0x4a>
    7094:	e112      	b.n	72bc <mqtt_connect_broker+0x270>
    7096:	079a      	lsls	r2, r3, #30
    7098:	d500      	bpl.n	709c <mqtt_connect_broker+0x50>
    709a:	e111      	b.n	72c0 <mqtt_connect_broker+0x274>
    709c:	071c      	lsls	r4, r3, #28
    709e:	d40b      	bmi.n	70b8 <mqtt_connect_broker+0x6c>
    70a0:	4e8b      	ldr	r6, [pc, #556]	; (72d0 <mqtt_connect_broker+0x284>)
    70a2:	6e38      	ldr	r0, [r7, #96]	; 0x60
    70a4:	47b0      	blx	r6
    70a6:	1c03      	adds	r3, r0, #0
    70a8:	61b8      	str	r0, [r7, #24]
    70aa:	69f8      	ldr	r0, [r7, #28]
    70ac:	330e      	adds	r3, #14
    70ae:	1c34      	adds	r4, r6, #0
    70b0:	2800      	cmp	r0, #0
    70b2:	d113      	bne.n	70dc <mqtt_connect_broker+0x90>
    70b4:	1c1e      	adds	r6, r3, #0
    70b6:	e01d      	b.n	70f4 <mqtt_connect_broker+0xa8>
    70b8:	1c2b      	adds	r3, r5, #0
    70ba:	3370      	adds	r3, #112	; 0x70
    70bc:	781b      	ldrb	r3, [r3, #0]
    70be:	2b00      	cmp	r3, #0
    70c0:	d000      	beq.n	70c4 <mqtt_connect_broker+0x78>
    70c2:	e0ff      	b.n	72c4 <mqtt_connect_broker+0x278>
    70c4:	1c2b      	adds	r3, r5, #0
    70c6:	3343      	adds	r3, #67	; 0x43
    70c8:	781b      	ldrb	r3, [r3, #0]
    70ca:	071a      	lsls	r2, r3, #28
    70cc:	d5e8      	bpl.n	70a0 <mqtt_connect_broker+0x54>
    70ce:	4b81      	ldr	r3, [pc, #516]	; (72d4 <mqtt_connect_broker+0x288>)
    70d0:	2000      	movs	r0, #0
    70d2:	4798      	blx	r3
    70d4:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    70d6:	4b80      	ldr	r3, [pc, #512]	; (72d8 <mqtt_connect_broker+0x28c>)
    70d8:	4798      	blx	r3
    70da:	e7f3      	b.n	70c4 <mqtt_connect_broker+0x78>
    70dc:	69f8      	ldr	r0, [r7, #28]
    70de:	47b0      	blx	r6
    70e0:	69be      	ldr	r6, [r7, #24]
    70e2:	697b      	ldr	r3, [r7, #20]
    70e4:	3610      	adds	r6, #16
    70e6:	1836      	adds	r6, r6, r0
    70e8:	2b00      	cmp	r3, #0
    70ea:	d003      	beq.n	70f4 <mqtt_connect_broker+0xa8>
    70ec:	1c18      	adds	r0, r3, #0
    70ee:	47a0      	blx	r4
    70f0:	3602      	adds	r6, #2
    70f2:	1836      	adds	r6, r6, r0
    70f4:	6e78      	ldr	r0, [r7, #100]	; 0x64
    70f6:	2800      	cmp	r0, #0
    70f8:	d007      	beq.n	710a <mqtt_connect_broker+0xbe>
    70fa:	47a0      	blx	r4
    70fc:	3602      	adds	r6, #2
    70fe:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    7100:	1830      	adds	r0, r6, r0
    7102:	1906      	adds	r6, r0, r4
    7104:	2c00      	cmp	r4, #0
    7106:	d100      	bne.n	710a <mqtt_connect_broker+0xbe>
    7108:	1c06      	adds	r6, r0, #0
    710a:	69fc      	ldr	r4, [r7, #28]
    710c:	2c00      	cmp	r4, #0
    710e:	d006      	beq.n	711e <mqtt_connect_broker+0xd2>
    7110:	24c0      	movs	r4, #192	; 0xc0
    7112:	61bc      	str	r4, [r7, #24]
    7114:	697c      	ldr	r4, [r7, #20]
    7116:	2c00      	cmp	r4, #0
    7118:	d103      	bne.n	7122 <mqtt_connect_broker+0xd6>
    711a:	2480      	movs	r4, #128	; 0x80
    711c:	e000      	b.n	7120 <mqtt_connect_broker+0xd4>
    711e:	69fc      	ldr	r4, [r7, #28]
    7120:	61bc      	str	r4, [r7, #24]
    7122:	6e7c      	ldr	r4, [r7, #100]	; 0x64
    7124:	2c00      	cmp	r4, #0
    7126:	d00f      	beq.n	7148 <mqtt_connect_broker+0xfc>
    7128:	68bc      	ldr	r4, [r7, #8]
    712a:	2c00      	cmp	r4, #0
    712c:	d003      	beq.n	7136 <mqtt_connect_broker+0xea>
    712e:	69bc      	ldr	r4, [r7, #24]
    7130:	2320      	movs	r3, #32
    7132:	431c      	orrs	r4, r3
    7134:	61bc      	str	r4, [r7, #24]
    7136:	68fc      	ldr	r4, [r7, #12]
    7138:	2303      	movs	r3, #3
    713a:	4023      	ands	r3, r4
    713c:	00db      	lsls	r3, r3, #3
    713e:	69bc      	ldr	r4, [r7, #24]
    7140:	2204      	movs	r2, #4
    7142:	4313      	orrs	r3, r2
    7144:	431c      	orrs	r4, r3
    7146:	61bc      	str	r4, [r7, #24]
    7148:	693c      	ldr	r4, [r7, #16]
    714a:	2c00      	cmp	r4, #0
    714c:	d003      	beq.n	7156 <mqtt_connect_broker+0x10a>
    714e:	69bc      	ldr	r4, [r7, #24]
    7150:	2302      	movs	r3, #2
    7152:	431c      	orrs	r4, r3
    7154:	61bc      	str	r4, [r7, #24]
    7156:	1c2b      	adds	r3, r5, #0
    7158:	3343      	adds	r3, #67	; 0x43
    715a:	781a      	ldrb	r2, [r3, #0]
    715c:	2108      	movs	r1, #8
    715e:	430a      	orrs	r2, r1
    7160:	701a      	strb	r2, [r3, #0]
    7162:	1c38      	adds	r0, r7, #0
    7164:	9500      	str	r5, [sp, #0]
    7166:	3020      	adds	r0, #32
    7168:	6879      	ldr	r1, [r7, #4]
    716a:	4b5c      	ldr	r3, [pc, #368]	; (72dc <mqtt_connect_broker+0x290>)
    716c:	6eea      	ldr	r2, [r5, #108]	; 0x6c
    716e:	4c5c      	ldr	r4, [pc, #368]	; (72e0 <mqtt_connect_broker+0x294>)
    7170:	47a0      	blx	r4
    7172:	1c38      	adds	r0, r7, #0
    7174:	3020      	adds	r0, #32
    7176:	2110      	movs	r1, #16
    7178:	4b5a      	ldr	r3, [pc, #360]	; (72e4 <mqtt_connect_broker+0x298>)
    717a:	4798      	blx	r3
    717c:	2e80      	cmp	r6, #128	; 0x80
    717e:	dd09      	ble.n	7194 <mqtt_connect_broker+0x148>
    7180:	2180      	movs	r1, #128	; 0x80
    7182:	4249      	negs	r1, r1
    7184:	4331      	orrs	r1, r6
    7186:	1c38      	adds	r0, r7, #0
    7188:	b249      	sxtb	r1, r1
    718a:	3020      	adds	r0, #32
    718c:	4c55      	ldr	r4, [pc, #340]	; (72e4 <mqtt_connect_broker+0x298>)
    718e:	47a0      	blx	r4
    7190:	11f6      	asrs	r6, r6, #7
    7192:	e7f3      	b.n	717c <mqtt_connect_broker+0x130>
    7194:	4b54      	ldr	r3, [pc, #336]	; (72e8 <mqtt_connect_broker+0x29c>)
    7196:	401e      	ands	r6, r3
    7198:	d504      	bpl.n	71a4 <mqtt_connect_broker+0x158>
    719a:	2380      	movs	r3, #128	; 0x80
    719c:	3e01      	subs	r6, #1
    719e:	425b      	negs	r3, r3
    71a0:	431e      	orrs	r6, r3
    71a2:	3601      	adds	r6, #1
    71a4:	1c38      	adds	r0, r7, #0
    71a6:	b271      	sxtb	r1, r6
    71a8:	3020      	adds	r0, #32
    71aa:	4c4e      	ldr	r4, [pc, #312]	; (72e4 <mqtt_connect_broker+0x298>)
    71ac:	47a0      	blx	r4
    71ae:	1c38      	adds	r0, r7, #0
    71b0:	4c4e      	ldr	r4, [pc, #312]	; (72ec <mqtt_connect_broker+0x2a0>)
    71b2:	3020      	adds	r0, #32
    71b4:	2106      	movs	r1, #6
    71b6:	47a0      	blx	r4
    71b8:	1c38      	adds	r0, r7, #0
    71ba:	4b4d      	ldr	r3, [pc, #308]	; (72f0 <mqtt_connect_broker+0x2a4>)
    71bc:	3020      	adds	r0, #32
    71be:	494d      	ldr	r1, [pc, #308]	; (72f4 <mqtt_connect_broker+0x2a8>)
    71c0:	2206      	movs	r2, #6
    71c2:	4798      	blx	r3
    71c4:	1c38      	adds	r0, r7, #0
    71c6:	3020      	adds	r0, #32
    71c8:	2103      	movs	r1, #3
    71ca:	4a46      	ldr	r2, [pc, #280]	; (72e4 <mqtt_connect_broker+0x298>)
    71cc:	4790      	blx	r2
    71ce:	69bb      	ldr	r3, [r7, #24]
    71d0:	1c38      	adds	r0, r7, #0
    71d2:	4a44      	ldr	r2, [pc, #272]	; (72e4 <mqtt_connect_broker+0x298>)
    71d4:	b259      	sxtb	r1, r3
    71d6:	3020      	adds	r0, #32
    71d8:	4790      	blx	r2
    71da:	1c2b      	adds	r3, r5, #0
    71dc:	3360      	adds	r3, #96	; 0x60
    71de:	2000      	movs	r0, #0
    71e0:	5e19      	ldrsh	r1, [r3, r0]
    71e2:	1c38      	adds	r0, r7, #0
    71e4:	3020      	adds	r0, #32
    71e6:	47a0      	blx	r4
    71e8:	4e39      	ldr	r6, [pc, #228]	; (72d0 <mqtt_connect_broker+0x284>)
    71ea:	6e38      	ldr	r0, [r7, #96]	; 0x60
    71ec:	47b0      	blx	r6
    71ee:	b201      	sxth	r1, r0
    71f0:	1c38      	adds	r0, r7, #0
    71f2:	3020      	adds	r0, #32
    71f4:	47a0      	blx	r4
    71f6:	6e38      	ldr	r0, [r7, #96]	; 0x60
    71f8:	47b0      	blx	r6
    71fa:	1c02      	adds	r2, r0, #0
    71fc:	1c38      	adds	r0, r7, #0
    71fe:	3020      	adds	r0, #32
    7200:	6e39      	ldr	r1, [r7, #96]	; 0x60
    7202:	4b3b      	ldr	r3, [pc, #236]	; (72f0 <mqtt_connect_broker+0x2a4>)
    7204:	4798      	blx	r3
    7206:	6e78      	ldr	r0, [r7, #100]	; 0x64
    7208:	2800      	cmp	r0, #0
    720a:	d015      	beq.n	7238 <mqtt_connect_broker+0x1ec>
    720c:	47b0      	blx	r6
    720e:	b201      	sxth	r1, r0
    7210:	1c38      	adds	r0, r7, #0
    7212:	3020      	adds	r0, #32
    7214:	47a0      	blx	r4
    7216:	6e78      	ldr	r0, [r7, #100]	; 0x64
    7218:	47b0      	blx	r6
    721a:	1c02      	adds	r2, r0, #0
    721c:	1c38      	adds	r0, r7, #0
    721e:	4c34      	ldr	r4, [pc, #208]	; (72f0 <mqtt_connect_broker+0x2a4>)
    7220:	3020      	adds	r0, #32
    7222:	6e79      	ldr	r1, [r7, #100]	; 0x64
    7224:	47a0      	blx	r4
    7226:	6ebc      	ldr	r4, [r7, #104]	; 0x68
    7228:	2c00      	cmp	r4, #0
    722a:	d005      	beq.n	7238 <mqtt_connect_broker+0x1ec>
    722c:	1c38      	adds	r0, r7, #0
    722e:	1c21      	adds	r1, r4, #0
    7230:	3020      	adds	r0, #32
    7232:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    7234:	4c2e      	ldr	r4, [pc, #184]	; (72f0 <mqtt_connect_broker+0x2a4>)
    7236:	47a0      	blx	r4
    7238:	69fc      	ldr	r4, [r7, #28]
    723a:	2c00      	cmp	r4, #0
    723c:	d01f      	beq.n	727e <mqtt_connect_broker+0x232>
    723e:	4e24      	ldr	r6, [pc, #144]	; (72d0 <mqtt_connect_broker+0x284>)
    7240:	1c20      	adds	r0, r4, #0
    7242:	47b0      	blx	r6
    7244:	b201      	sxth	r1, r0
    7246:	1c38      	adds	r0, r7, #0
    7248:	3020      	adds	r0, #32
    724a:	4c28      	ldr	r4, [pc, #160]	; (72ec <mqtt_connect_broker+0x2a0>)
    724c:	47a0      	blx	r4
    724e:	69f8      	ldr	r0, [r7, #28]
    7250:	47b0      	blx	r6
    7252:	1c02      	adds	r2, r0, #0
    7254:	1c38      	adds	r0, r7, #0
    7256:	3020      	adds	r0, #32
    7258:	69f9      	ldr	r1, [r7, #28]
    725a:	4c25      	ldr	r4, [pc, #148]	; (72f0 <mqtt_connect_broker+0x2a4>)
    725c:	47a0      	blx	r4
    725e:	6978      	ldr	r0, [r7, #20]
    7260:	2800      	cmp	r0, #0
    7262:	d00c      	beq.n	727e <mqtt_connect_broker+0x232>
    7264:	47b0      	blx	r6
    7266:	b201      	sxth	r1, r0
    7268:	1c38      	adds	r0, r7, #0
    726a:	4a20      	ldr	r2, [pc, #128]	; (72ec <mqtt_connect_broker+0x2a0>)
    726c:	3020      	adds	r0, #32
    726e:	4790      	blx	r2
    7270:	6978      	ldr	r0, [r7, #20]
    7272:	47b0      	blx	r6
    7274:	1c02      	adds	r2, r0, #0
    7276:	1c38      	adds	r0, r7, #0
    7278:	3020      	adds	r0, #32
    727a:	6979      	ldr	r1, [r7, #20]
    727c:	47a0      	blx	r4
    727e:	1c38      	adds	r0, r7, #0
    7280:	1c2c      	adds	r4, r5, #0
    7282:	3020      	adds	r0, #32
    7284:	4b1c      	ldr	r3, [pc, #112]	; (72f8 <mqtt_connect_broker+0x2ac>)
    7286:	3443      	adds	r4, #67	; 0x43
    7288:	4798      	blx	r3
    728a:	7821      	ldrb	r1, [r4, #0]
    728c:	0789      	lsls	r1, r1, #30
    728e:	0fc9      	lsrs	r1, r1, #31
    7290:	2901      	cmp	r1, #1
    7292:	d10b      	bne.n	72ac <mqtt_connect_broker+0x260>
    7294:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    7296:	2a00      	cmp	r2, #0
    7298:	d108      	bne.n	72ac <mqtt_connect_broker+0x260>
    729a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    729c:	2b00      	cmp	r3, #0
    729e:	d005      	beq.n	72ac <mqtt_connect_broker+0x260>
    72a0:	2034      	movs	r0, #52	; 0x34
    72a2:	55c2      	strb	r2, [r0, r7]
    72a4:	1c3a      	adds	r2, r7, #0
    72a6:	1c28      	adds	r0, r5, #0
    72a8:	3234      	adds	r2, #52	; 0x34
    72aa:	4798      	blx	r3
    72ac:	7823      	ldrb	r3, [r4, #0]
    72ae:	2202      	movs	r2, #2
    72b0:	4313      	orrs	r3, r2
    72b2:	2208      	movs	r2, #8
    72b4:	4393      	bics	r3, r2
    72b6:	7023      	strb	r3, [r4, #0]
    72b8:	2000      	movs	r0, #0
    72ba:	e005      	b.n	72c8 <mqtt_connect_broker+0x27c>
    72bc:	2080      	movs	r0, #128	; 0x80
    72be:	e002      	b.n	72c6 <mqtt_connect_broker+0x27a>
    72c0:	2078      	movs	r0, #120	; 0x78
    72c2:	e000      	b.n	72c6 <mqtt_connect_broker+0x27a>
    72c4:	200b      	movs	r0, #11
    72c6:	4240      	negs	r0, r0
    72c8:	46bd      	mov	sp, r7
    72ca:	b013      	add	sp, #76	; 0x4c
    72cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    72ce:	46c0      	nop			; (mov r8, r8)
    72d0:	00009cbd 	.word	0x00009cbd
    72d4:	00002205 	.word	0x00002205
    72d8:	00006611 	.word	0x00006611
    72dc:	00006dc5 	.word	0x00006dc5
    72e0:	00006431 	.word	0x00006431
    72e4:	0000645d 	.word	0x0000645d
    72e8:	8000007f 	.word	0x8000007f
    72ec:	00006485 	.word	0x00006485
    72f0:	0000649d 	.word	0x0000649d
    72f4:	0000c0cc 	.word	0x0000c0cc
    72f8:	00006441 	.word	0x00006441

000072fc <mqtt_publish>:
    72fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    72fe:	b093      	sub	sp, #76	; 0x4c
    7300:	af02      	add	r7, sp, #8
    7302:	60fb      	str	r3, [r7, #12]
    7304:	1c3b      	adds	r3, r7, #0
    7306:	3358      	adds	r3, #88	; 0x58
    7308:	781b      	ldrb	r3, [r3, #0]
    730a:	1c04      	adds	r4, r0, #0
    730c:	613b      	str	r3, [r7, #16]
    730e:	1c3b      	adds	r3, r7, #0
    7310:	335c      	adds	r3, #92	; 0x5c
    7312:	781b      	ldrb	r3, [r3, #0]
    7314:	6179      	str	r1, [r7, #20]
    7316:	60ba      	str	r2, [r7, #8]
    7318:	607b      	str	r3, [r7, #4]
    731a:	2800      	cmp	r0, #0
    731c:	d101      	bne.n	7322 <mqtt_publish+0x26>
    731e:	2516      	movs	r5, #22
    7320:	e0a7      	b.n	7472 <mqtt_publish+0x176>
    7322:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    7324:	466a      	mov	r2, sp
    7326:	3307      	adds	r3, #7
    7328:	08db      	lsrs	r3, r3, #3
    732a:	00db      	lsls	r3, r3, #3
    732c:	1ad2      	subs	r2, r2, r3
    732e:	697b      	ldr	r3, [r7, #20]
    7330:	4695      	mov	sp, r2
    7332:	ae02      	add	r6, sp, #8
    7334:	2b00      	cmp	r3, #0
    7336:	d0f2      	beq.n	731e <mqtt_publish+0x22>
    7338:	693a      	ldr	r2, [r7, #16]
    733a:	2a02      	cmp	r2, #2
    733c:	d8ef      	bhi.n	731e <mqtt_publish+0x22>
    733e:	1c05      	adds	r5, r0, #0
    7340:	3543      	adds	r5, #67	; 0x43
    7342:	782b      	ldrb	r3, [r5, #0]
    7344:	079a      	lsls	r2, r3, #30
    7346:	d400      	bmi.n	734a <mqtt_publish+0x4e>
    7348:	e090      	b.n	746c <mqtt_publish+0x170>
    734a:	071a      	lsls	r2, r3, #28
    734c:	d40a      	bmi.n	7364 <mqtt_publish+0x68>
    734e:	4b4b      	ldr	r3, [pc, #300]	; (747c <mqtt_publish+0x180>)
    7350:	6978      	ldr	r0, [r7, #20]
    7352:	4798      	blx	r3
    7354:	68fd      	ldr	r5, [r7, #12]
    7356:	693b      	ldr	r3, [r7, #16]
    7358:	3502      	adds	r5, #2
    735a:	182d      	adds	r5, r5, r0
    735c:	2b00      	cmp	r3, #0
    735e:	d011      	beq.n	7384 <mqtt_publish+0x88>
    7360:	3502      	adds	r5, #2
    7362:	e00f      	b.n	7384 <mqtt_publish+0x88>
    7364:	1c03      	adds	r3, r0, #0
    7366:	3370      	adds	r3, #112	; 0x70
    7368:	781b      	ldrb	r3, [r3, #0]
    736a:	2b00      	cmp	r3, #0
    736c:	d000      	beq.n	7370 <mqtt_publish+0x74>
    736e:	e07f      	b.n	7470 <mqtt_publish+0x174>
    7370:	782b      	ldrb	r3, [r5, #0]
    7372:	071a      	lsls	r2, r3, #28
    7374:	d5eb      	bpl.n	734e <mqtt_publish+0x52>
    7376:	4b42      	ldr	r3, [pc, #264]	; (7480 <mqtt_publish+0x184>)
    7378:	2000      	movs	r0, #0
    737a:	4798      	blx	r3
    737c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    737e:	4b41      	ldr	r3, [pc, #260]	; (7484 <mqtt_publish+0x188>)
    7380:	4798      	blx	r3
    7382:	e7f5      	b.n	7370 <mqtt_publish+0x74>
    7384:	1c23      	adds	r3, r4, #0
    7386:	3343      	adds	r3, #67	; 0x43
    7388:	781a      	ldrb	r2, [r3, #0]
    738a:	2108      	movs	r1, #8
    738c:	430a      	orrs	r2, r1
    738e:	701a      	strb	r2, [r3, #0]
    7390:	1c38      	adds	r0, r7, #0
    7392:	9400      	str	r4, [sp, #0]
    7394:	1c31      	adds	r1, r6, #0
    7396:	302c      	adds	r0, #44	; 0x2c
    7398:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    739a:	4b3b      	ldr	r3, [pc, #236]	; (7488 <mqtt_publish+0x18c>)
    739c:	4e3b      	ldr	r6, [pc, #236]	; (748c <mqtt_publish+0x190>)
    739e:	47b0      	blx	r6
    73a0:	687b      	ldr	r3, [r7, #4]
    73a2:	2101      	movs	r1, #1
    73a4:	4019      	ands	r1, r3
    73a6:	2330      	movs	r3, #48	; 0x30
    73a8:	4319      	orrs	r1, r3
    73aa:	693b      	ldr	r3, [r7, #16]
    73ac:	1c38      	adds	r0, r7, #0
    73ae:	005a      	lsls	r2, r3, #1
    73b0:	2306      	movs	r3, #6
    73b2:	4013      	ands	r3, r2
    73b4:	4319      	orrs	r1, r3
    73b6:	302c      	adds	r0, #44	; 0x2c
    73b8:	4b35      	ldr	r3, [pc, #212]	; (7490 <mqtt_publish+0x194>)
    73ba:	4798      	blx	r3
    73bc:	4b34      	ldr	r3, [pc, #208]	; (7490 <mqtt_publish+0x194>)
    73be:	2d80      	cmp	r5, #128	; 0x80
    73c0:	dd08      	ble.n	73d4 <mqtt_publish+0xd8>
    73c2:	2180      	movs	r1, #128	; 0x80
    73c4:	4249      	negs	r1, r1
    73c6:	4329      	orrs	r1, r5
    73c8:	1c38      	adds	r0, r7, #0
    73ca:	b249      	sxtb	r1, r1
    73cc:	302c      	adds	r0, #44	; 0x2c
    73ce:	4798      	blx	r3
    73d0:	11ed      	asrs	r5, r5, #7
    73d2:	e7f3      	b.n	73bc <mqtt_publish+0xc0>
    73d4:	4a2f      	ldr	r2, [pc, #188]	; (7494 <mqtt_publish+0x198>)
    73d6:	4015      	ands	r5, r2
    73d8:	d504      	bpl.n	73e4 <mqtt_publish+0xe8>
    73da:	2280      	movs	r2, #128	; 0x80
    73dc:	3d01      	subs	r5, #1
    73de:	4252      	negs	r2, r2
    73e0:	4315      	orrs	r5, r2
    73e2:	3501      	adds	r5, #1
    73e4:	1c38      	adds	r0, r7, #0
    73e6:	b269      	sxtb	r1, r5
    73e8:	302c      	adds	r0, #44	; 0x2c
    73ea:	4798      	blx	r3
    73ec:	4e23      	ldr	r6, [pc, #140]	; (747c <mqtt_publish+0x180>)
    73ee:	6978      	ldr	r0, [r7, #20]
    73f0:	47b0      	blx	r6
    73f2:	b201      	sxth	r1, r0
    73f4:	1c38      	adds	r0, r7, #0
    73f6:	302c      	adds	r0, #44	; 0x2c
    73f8:	4d27      	ldr	r5, [pc, #156]	; (7498 <mqtt_publish+0x19c>)
    73fa:	47a8      	blx	r5
    73fc:	6978      	ldr	r0, [r7, #20]
    73fe:	47b0      	blx	r6
    7400:	1c02      	adds	r2, r0, #0
    7402:	1c38      	adds	r0, r7, #0
    7404:	302c      	adds	r0, #44	; 0x2c
    7406:	6979      	ldr	r1, [r7, #20]
    7408:	4e24      	ldr	r6, [pc, #144]	; (749c <mqtt_publish+0x1a0>)
    740a:	47b0      	blx	r6
    740c:	693a      	ldr	r2, [r7, #16]
    740e:	2a00      	cmp	r2, #0
    7410:	d006      	beq.n	7420 <mqtt_publish+0x124>
    7412:	8821      	ldrh	r1, [r4, #0]
    7414:	1c38      	adds	r0, r7, #0
    7416:	1c4b      	adds	r3, r1, #1
    7418:	8023      	strh	r3, [r4, #0]
    741a:	b209      	sxth	r1, r1
    741c:	302c      	adds	r0, #44	; 0x2c
    741e:	47a8      	blx	r5
    7420:	8823      	ldrh	r3, [r4, #0]
    7422:	2b00      	cmp	r3, #0
    7424:	d101      	bne.n	742a <mqtt_publish+0x12e>
    7426:	2301      	movs	r3, #1
    7428:	8023      	strh	r3, [r4, #0]
    742a:	68bb      	ldr	r3, [r7, #8]
    742c:	2b00      	cmp	r3, #0
    742e:	d006      	beq.n	743e <mqtt_publish+0x142>
    7430:	68fa      	ldr	r2, [r7, #12]
    7432:	2a00      	cmp	r2, #0
    7434:	d003      	beq.n	743e <mqtt_publish+0x142>
    7436:	1c38      	adds	r0, r7, #0
    7438:	302c      	adds	r0, #44	; 0x2c
    743a:	1c19      	adds	r1, r3, #0
    743c:	47b0      	blx	r6
    743e:	1c38      	adds	r0, r7, #0
    7440:	4b17      	ldr	r3, [pc, #92]	; (74a0 <mqtt_publish+0x1a4>)
    7442:	302c      	adds	r0, #44	; 0x2c
    7444:	4798      	blx	r3
    7446:	1c23      	adds	r3, r4, #0
    7448:	3343      	adds	r3, #67	; 0x43
    744a:	781a      	ldrb	r2, [r3, #0]
    744c:	2108      	movs	r1, #8
    744e:	438a      	bics	r2, r1
    7450:	701a      	strb	r2, [r3, #0]
    7452:	693b      	ldr	r3, [r7, #16]
    7454:	2500      	movs	r5, #0
    7456:	42ab      	cmp	r3, r5
    7458:	d10c      	bne.n	7474 <mqtt_publish+0x178>
    745a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    745c:	42ab      	cmp	r3, r5
    745e:	d009      	beq.n	7474 <mqtt_publish+0x178>
    7460:	1c3a      	adds	r2, r7, #0
    7462:	1c20      	adds	r0, r4, #0
    7464:	2102      	movs	r1, #2
    7466:	3218      	adds	r2, #24
    7468:	4798      	blx	r3
    746a:	e003      	b.n	7474 <mqtt_publish+0x178>
    746c:	2580      	movs	r5, #128	; 0x80
    746e:	e000      	b.n	7472 <mqtt_publish+0x176>
    7470:	250b      	movs	r5, #11
    7472:	426d      	negs	r5, r5
    7474:	1c28      	adds	r0, r5, #0
    7476:	46bd      	mov	sp, r7
    7478:	b011      	add	sp, #68	; 0x44
    747a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    747c:	00009cbd 	.word	0x00009cbd
    7480:	00002205 	.word	0x00002205
    7484:	00006611 	.word	0x00006611
    7488:	00006dc5 	.word	0x00006dc5
    748c:	00006431 	.word	0x00006431
    7490:	0000645d 	.word	0x0000645d
    7494:	8000007f 	.word	0x8000007f
    7498:	00006485 	.word	0x00006485
    749c:	0000649d 	.word	0x0000649d
    74a0:	00006441 	.word	0x00006441

000074a4 <mqtt_subscribe>:
    74a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    74a6:	b08d      	sub	sp, #52	; 0x34
    74a8:	af02      	add	r7, sp, #8
    74aa:	1c04      	adds	r4, r0, #0
    74ac:	60b9      	str	r1, [r7, #8]
    74ae:	607a      	str	r2, [r7, #4]
    74b0:	d101      	bne.n	74b6 <mqtt_subscribe+0x12>
    74b2:	2016      	movs	r0, #22
    74b4:	e086      	b.n	75c4 <mqtt_subscribe+0x120>
    74b6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    74b8:	466a      	mov	r2, sp
    74ba:	3307      	adds	r3, #7
    74bc:	08db      	lsrs	r3, r3, #3
    74be:	00db      	lsls	r3, r3, #3
    74c0:	1ad2      	subs	r2, r2, r3
    74c2:	4695      	mov	sp, r2
    74c4:	ad02      	add	r5, sp, #8
    74c6:	603d      	str	r5, [r7, #0]
    74c8:	68bd      	ldr	r5, [r7, #8]
    74ca:	2d00      	cmp	r5, #0
    74cc:	d0f1      	beq.n	74b2 <mqtt_subscribe+0xe>
    74ce:	687d      	ldr	r5, [r7, #4]
    74d0:	2d02      	cmp	r5, #2
    74d2:	d8ee      	bhi.n	74b2 <mqtt_subscribe+0xe>
    74d4:	1c05      	adds	r5, r0, #0
    74d6:	3543      	adds	r5, #67	; 0x43
    74d8:	782b      	ldrb	r3, [r5, #0]
    74da:	079a      	lsls	r2, r3, #30
    74dc:	d56f      	bpl.n	75be <mqtt_subscribe+0x11a>
    74de:	071a      	lsls	r2, r3, #28
    74e0:	d41a      	bmi.n	7518 <mqtt_subscribe+0x74>
    74e2:	68b8      	ldr	r0, [r7, #8]
    74e4:	4d39      	ldr	r5, [pc, #228]	; (75cc <mqtt_subscribe+0x128>)
    74e6:	47a8      	blx	r5
    74e8:	1c25      	adds	r5, r4, #0
    74ea:	3543      	adds	r5, #67	; 0x43
    74ec:	782b      	ldrb	r3, [r5, #0]
    74ee:	2208      	movs	r2, #8
    74f0:	4313      	orrs	r3, r2
    74f2:	702b      	strb	r3, [r5, #0]
    74f4:	60fd      	str	r5, [r7, #12]
    74f6:	1d46      	adds	r6, r0, #5
    74f8:	9400      	str	r4, [sp, #0]
    74fa:	1c38      	adds	r0, r7, #0
    74fc:	3014      	adds	r0, #20
    74fe:	6839      	ldr	r1, [r7, #0]
    7500:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    7502:	4b33      	ldr	r3, [pc, #204]	; (75d0 <mqtt_subscribe+0x12c>)
    7504:	4d33      	ldr	r5, [pc, #204]	; (75d4 <mqtt_subscribe+0x130>)
    7506:	47a8      	blx	r5
    7508:	1c38      	adds	r0, r7, #0
    750a:	217e      	movs	r1, #126	; 0x7e
    750c:	3014      	adds	r0, #20
    750e:	4249      	negs	r1, r1
    7510:	4b31      	ldr	r3, [pc, #196]	; (75d8 <mqtt_subscribe+0x134>)
    7512:	4798      	blx	r3
    7514:	4d2d      	ldr	r5, [pc, #180]	; (75cc <mqtt_subscribe+0x128>)
    7516:	e00e      	b.n	7536 <mqtt_subscribe+0x92>
    7518:	1c03      	adds	r3, r0, #0
    751a:	3370      	adds	r3, #112	; 0x70
    751c:	781b      	ldrb	r3, [r3, #0]
    751e:	2b00      	cmp	r3, #0
    7520:	d14f      	bne.n	75c2 <mqtt_subscribe+0x11e>
    7522:	782b      	ldrb	r3, [r5, #0]
    7524:	071a      	lsls	r2, r3, #28
    7526:	d5dc      	bpl.n	74e2 <mqtt_subscribe+0x3e>
    7528:	4b2c      	ldr	r3, [pc, #176]	; (75dc <mqtt_subscribe+0x138>)
    752a:	2000      	movs	r0, #0
    752c:	4798      	blx	r3
    752e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    7530:	4b2b      	ldr	r3, [pc, #172]	; (75e0 <mqtt_subscribe+0x13c>)
    7532:	4798      	blx	r3
    7534:	e7f5      	b.n	7522 <mqtt_subscribe+0x7e>
    7536:	4b28      	ldr	r3, [pc, #160]	; (75d8 <mqtt_subscribe+0x134>)
    7538:	2e80      	cmp	r6, #128	; 0x80
    753a:	dd08      	ble.n	754e <mqtt_subscribe+0xaa>
    753c:	2180      	movs	r1, #128	; 0x80
    753e:	4249      	negs	r1, r1
    7540:	4331      	orrs	r1, r6
    7542:	1c38      	adds	r0, r7, #0
    7544:	b249      	sxtb	r1, r1
    7546:	3014      	adds	r0, #20
    7548:	4798      	blx	r3
    754a:	11f6      	asrs	r6, r6, #7
    754c:	e7f3      	b.n	7536 <mqtt_subscribe+0x92>
    754e:	4925      	ldr	r1, [pc, #148]	; (75e4 <mqtt_subscribe+0x140>)
    7550:	4031      	ands	r1, r6
    7552:	d504      	bpl.n	755e <mqtt_subscribe+0xba>
    7554:	2280      	movs	r2, #128	; 0x80
    7556:	3901      	subs	r1, #1
    7558:	4252      	negs	r2, r2
    755a:	4311      	orrs	r1, r2
    755c:	3101      	adds	r1, #1
    755e:	1c38      	adds	r0, r7, #0
    7560:	b249      	sxtb	r1, r1
    7562:	3014      	adds	r0, #20
    7564:	4798      	blx	r3
    7566:	8821      	ldrh	r1, [r4, #0]
    7568:	1c38      	adds	r0, r7, #0
    756a:	1c4b      	adds	r3, r1, #1
    756c:	8023      	strh	r3, [r4, #0]
    756e:	b209      	sxth	r1, r1
    7570:	3014      	adds	r0, #20
    7572:	4e1d      	ldr	r6, [pc, #116]	; (75e8 <mqtt_subscribe+0x144>)
    7574:	47b0      	blx	r6
    7576:	8823      	ldrh	r3, [r4, #0]
    7578:	2b00      	cmp	r3, #0
    757a:	d101      	bne.n	7580 <mqtt_subscribe+0xdc>
    757c:	2301      	movs	r3, #1
    757e:	8023      	strh	r3, [r4, #0]
    7580:	68b8      	ldr	r0, [r7, #8]
    7582:	47a8      	blx	r5
    7584:	b201      	sxth	r1, r0
    7586:	1c38      	adds	r0, r7, #0
    7588:	3014      	adds	r0, #20
    758a:	47b0      	blx	r6
    758c:	68b8      	ldr	r0, [r7, #8]
    758e:	47a8      	blx	r5
    7590:	1c02      	adds	r2, r0, #0
    7592:	1c38      	adds	r0, r7, #0
    7594:	3014      	adds	r0, #20
    7596:	68b9      	ldr	r1, [r7, #8]
    7598:	4b14      	ldr	r3, [pc, #80]	; (75ec <mqtt_subscribe+0x148>)
    759a:	4798      	blx	r3
    759c:	687d      	ldr	r5, [r7, #4]
    759e:	1c38      	adds	r0, r7, #0
    75a0:	b269      	sxtb	r1, r5
    75a2:	3014      	adds	r0, #20
    75a4:	4b0c      	ldr	r3, [pc, #48]	; (75d8 <mqtt_subscribe+0x134>)
    75a6:	4798      	blx	r3
    75a8:	1c38      	adds	r0, r7, #0
    75aa:	3014      	adds	r0, #20
    75ac:	4b10      	ldr	r3, [pc, #64]	; (75f0 <mqtt_subscribe+0x14c>)
    75ae:	4798      	blx	r3
    75b0:	68fd      	ldr	r5, [r7, #12]
    75b2:	2208      	movs	r2, #8
    75b4:	782b      	ldrb	r3, [r5, #0]
    75b6:	2000      	movs	r0, #0
    75b8:	4393      	bics	r3, r2
    75ba:	702b      	strb	r3, [r5, #0]
    75bc:	e003      	b.n	75c6 <mqtt_subscribe+0x122>
    75be:	2080      	movs	r0, #128	; 0x80
    75c0:	e000      	b.n	75c4 <mqtt_subscribe+0x120>
    75c2:	200b      	movs	r0, #11
    75c4:	4240      	negs	r0, r0
    75c6:	46bd      	mov	sp, r7
    75c8:	b00b      	add	sp, #44	; 0x2c
    75ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    75cc:	00009cbd 	.word	0x00009cbd
    75d0:	00006dc5 	.word	0x00006dc5
    75d4:	00006431 	.word	0x00006431
    75d8:	0000645d 	.word	0x0000645d
    75dc:	00002205 	.word	0x00002205
    75e0:	00006611 	.word	0x00006611
    75e4:	8000007f 	.word	0x8000007f
    75e8:	00006485 	.word	0x00006485
    75ec:	0000649d 	.word	0x0000649d
    75f0:	00006441 	.word	0x00006441

000075f4 <_mqtt_ping>:
    75f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    75f6:	23c0      	movs	r3, #192	; 0xc0
    75f8:	a901      	add	r1, sp, #4
    75fa:	2500      	movs	r5, #0
    75fc:	700b      	strb	r3, [r1, #0]
    75fe:	704d      	strb	r5, [r1, #1]
    7600:	42a8      	cmp	r0, r5
    7602:	d019      	beq.n	7638 <_mqtt_ping+0x44>
    7604:	1c04      	adds	r4, r0, #0
    7606:	3443      	adds	r4, #67	; 0x43
    7608:	7823      	ldrb	r3, [r4, #0]
    760a:	079a      	lsls	r2, r3, #30
    760c:	d516      	bpl.n	763c <_mqtt_ping+0x48>
    760e:	071a      	lsls	r2, r3, #28
    7610:	d416      	bmi.n	7640 <_mqtt_ping+0x4c>
    7612:	2608      	movs	r6, #8
    7614:	4333      	orrs	r3, r6
    7616:	7023      	strb	r3, [r4, #0]
    7618:	7880      	ldrb	r0, [r0, #2]
    761a:	1c2b      	adds	r3, r5, #0
    761c:	b240      	sxtb	r0, r0
    761e:	2202      	movs	r2, #2
    7620:	4f09      	ldr	r7, [pc, #36]	; (7648 <_mqtt_ping+0x54>)
    7622:	47b8      	blx	r7
    7624:	1c2b      	adds	r3, r5, #0
    7626:	42a8      	cmp	r0, r5
    7628:	da0c      	bge.n	7644 <_mqtt_ping+0x50>
    762a:	7823      	ldrb	r3, [r4, #0]
    762c:	43b3      	bics	r3, r6
    762e:	7023      	strb	r3, [r4, #0]
    7630:	4b06      	ldr	r3, [pc, #24]	; (764c <_mqtt_ping+0x58>)
    7632:	4798      	blx	r3
    7634:	1c03      	adds	r3, r0, #0
    7636:	e005      	b.n	7644 <_mqtt_ping+0x50>
    7638:	2316      	movs	r3, #22
    763a:	e002      	b.n	7642 <_mqtt_ping+0x4e>
    763c:	2380      	movs	r3, #128	; 0x80
    763e:	e000      	b.n	7642 <_mqtt_ping+0x4e>
    7640:	230b      	movs	r3, #11
    7642:	425b      	negs	r3, r3
    7644:	1c18      	adds	r0, r3, #0
    7646:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7648:	00003f69 	.word	0x00003f69
    764c:	00006d75 	.word	0x00006d75

00007650 <mqtt_timer_callback>:
    7650:	b570      	push	{r4, r5, r6, lr}
    7652:	1c05      	adds	r5, r0, #0
    7654:	b086      	sub	sp, #24
    7656:	1c0e      	adds	r6, r1, #0
    7658:	1c14      	adds	r4, r2, #0
    765a:	2800      	cmp	r0, #0
    765c:	d012      	beq.n	7684 <mqtt_timer_callback+0x34>
    765e:	2a00      	cmp	r2, #0
    7660:	d010      	beq.n	7684 <mqtt_timer_callback+0x34>
    7662:	1c10      	adds	r0, r2, #0
    7664:	4b08      	ldr	r3, [pc, #32]	; (7688 <mqtt_timer_callback+0x38>)
    7666:	4798      	blx	r3
    7668:	2800      	cmp	r0, #0
    766a:	da04      	bge.n	7676 <mqtt_timer_callback+0x26>
    766c:	1c28      	adds	r0, r5, #0
    766e:	1c31      	adds	r1, r6, #0
    7670:	2200      	movs	r2, #0
    7672:	4b06      	ldr	r3, [pc, #24]	; (768c <mqtt_timer_callback+0x3c>)
    7674:	e005      	b.n	7682 <mqtt_timer_callback+0x32>
    7676:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7678:	2b00      	cmp	r3, #0
    767a:	d003      	beq.n	7684 <mqtt_timer_callback+0x34>
    767c:	1c20      	adds	r0, r4, #0
    767e:	2107      	movs	r1, #7
    7680:	aa01      	add	r2, sp, #4
    7682:	4798      	blx	r3
    7684:	b006      	add	sp, #24
    7686:	bd70      	pop	{r4, r5, r6, pc}
    7688:	000075f5 	.word	0x000075f5
    768c:	000065d5 	.word	0x000065d5

00007690 <_mqtt_puback>:
    7690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7692:	2302      	movs	r3, #2
    7694:	ac01      	add	r4, sp, #4
    7696:	2700      	movs	r7, #0
    7698:	7063      	strb	r3, [r4, #1]
    769a:	42b8      	cmp	r0, r7
    769c:	d01e      	beq.n	76dc <_mqtt_puback+0x4c>
    769e:	1c05      	adds	r5, r0, #0
    76a0:	3543      	adds	r5, #67	; 0x43
    76a2:	782b      	ldrb	r3, [r5, #0]
    76a4:	079e      	lsls	r6, r3, #30
    76a6:	d51b      	bpl.n	76e0 <_mqtt_puback+0x50>
    76a8:	071e      	lsls	r6, r3, #28
    76aa:	d41b      	bmi.n	76e4 <_mqtt_puback+0x54>
    76ac:	2608      	movs	r6, #8
    76ae:	4333      	orrs	r3, r6
    76b0:	702b      	strb	r3, [r5, #0]
    76b2:	7880      	ldrb	r0, [r0, #2]
    76b4:	7021      	strb	r1, [r4, #0]
    76b6:	0a11      	lsrs	r1, r2, #8
    76b8:	70a1      	strb	r1, [r4, #2]
    76ba:	70e2      	strb	r2, [r4, #3]
    76bc:	1c21      	adds	r1, r4, #0
    76be:	1c3b      	adds	r3, r7, #0
    76c0:	b240      	sxtb	r0, r0
    76c2:	2204      	movs	r2, #4
    76c4:	4c09      	ldr	r4, [pc, #36]	; (76ec <_mqtt_puback+0x5c>)
    76c6:	47a0      	blx	r4
    76c8:	1c3b      	adds	r3, r7, #0
    76ca:	42b8      	cmp	r0, r7
    76cc:	da0c      	bge.n	76e8 <_mqtt_puback+0x58>
    76ce:	782b      	ldrb	r3, [r5, #0]
    76d0:	43b3      	bics	r3, r6
    76d2:	702b      	strb	r3, [r5, #0]
    76d4:	4b06      	ldr	r3, [pc, #24]	; (76f0 <_mqtt_puback+0x60>)
    76d6:	4798      	blx	r3
    76d8:	1c03      	adds	r3, r0, #0
    76da:	e005      	b.n	76e8 <_mqtt_puback+0x58>
    76dc:	2316      	movs	r3, #22
    76de:	e002      	b.n	76e6 <_mqtt_puback+0x56>
    76e0:	2380      	movs	r3, #128	; 0x80
    76e2:	e000      	b.n	76e6 <_mqtt_puback+0x56>
    76e4:	230b      	movs	r3, #11
    76e6:	425b      	negs	r3, r3
    76e8:	1c18      	adds	r0, r3, #0
    76ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    76ec:	00003f69 	.word	0x00003f69
    76f0:	00006d75 	.word	0x00006d75

000076f4 <mqtt_clear_conn>:
    76f4:	b530      	push	{r4, r5, lr}
    76f6:	1c04      	adds	r4, r0, #0
    76f8:	b087      	sub	sp, #28
    76fa:	2800      	cmp	r0, #0
    76fc:	d01c      	beq.n	7738 <mqtt_clear_conn+0x44>
    76fe:	2002      	movs	r0, #2
    7700:	4b0e      	ldr	r3, [pc, #56]	; (773c <mqtt_clear_conn+0x48>)
    7702:	5620      	ldrsb	r0, [r4, r0]
    7704:	4798      	blx	r3
    7706:	1c23      	adds	r3, r4, #0
    7708:	3343      	adds	r3, #67	; 0x43
    770a:	781a      	ldrb	r2, [r3, #0]
    770c:	21fc      	movs	r1, #252	; 0xfc
    770e:	0795      	lsls	r5, r2, #30
    7710:	400a      	ands	r2, r1
    7712:	701a      	strb	r2, [r3, #0]
    7714:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    7716:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    7718:	9301      	str	r3, [sp, #4]
    771a:	2300      	movs	r3, #0
    771c:	64e3      	str	r3, [r4, #76]	; 0x4c
    771e:	6d21      	ldr	r1, [r4, #80]	; 0x50
    7720:	4b07      	ldr	r3, [pc, #28]	; (7740 <mqtt_clear_conn+0x4c>)
    7722:	4798      	blx	r3
    7724:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7726:	0fed      	lsrs	r5, r5, #31
    7728:	2b00      	cmp	r3, #0
    772a:	d005      	beq.n	7738 <mqtt_clear_conn+0x44>
    772c:	2d00      	cmp	r5, #0
    772e:	d003      	beq.n	7738 <mqtt_clear_conn+0x44>
    7730:	1c20      	adds	r0, r4, #0
    7732:	2105      	movs	r1, #5
    7734:	aa01      	add	r2, sp, #4
    7736:	4798      	blx	r3
    7738:	b007      	add	sp, #28
    773a:	bd30      	pop	{r4, r5, pc}
    773c:	00004095 	.word	0x00004095
    7740:	00006601 	.word	0x00006601

00007744 <mqtt_disconnect>:
    7744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7746:	23e0      	movs	r3, #224	; 0xe0
    7748:	ae01      	add	r6, sp, #4
    774a:	2700      	movs	r7, #0
    774c:	1c05      	adds	r5, r0, #0
    774e:	7033      	strb	r3, [r6, #0]
    7750:	7077      	strb	r7, [r6, #1]
    7752:	42b8      	cmp	r0, r7
    7754:	d036      	beq.n	77c4 <mqtt_disconnect+0x80>
    7756:	1c04      	adds	r4, r0, #0
    7758:	3443      	adds	r4, #67	; 0x43
    775a:	7823      	ldrb	r3, [r4, #0]
    775c:	079a      	lsls	r2, r3, #30
    775e:	d533      	bpl.n	77c8 <mqtt_disconnect+0x84>
    7760:	42b9      	cmp	r1, r7
    7762:	d12b      	bne.n	77bc <mqtt_disconnect+0x78>
    7764:	071a      	lsls	r2, r3, #28
    7766:	d414      	bmi.n	7792 <mqtt_disconnect+0x4e>
    7768:	7823      	ldrb	r3, [r4, #0]
    776a:	2210      	movs	r2, #16
    776c:	4313      	orrs	r3, r2
    776e:	2708      	movs	r7, #8
    7770:	433b      	orrs	r3, r7
    7772:	7023      	strb	r3, [r4, #0]
    7774:	2002      	movs	r0, #2
    7776:	5628      	ldrsb	r0, [r5, r0]
    7778:	1c31      	adds	r1, r6, #0
    777a:	2202      	movs	r2, #2
    777c:	2300      	movs	r3, #0
    777e:	4d15      	ldr	r5, [pc, #84]	; (77d4 <mqtt_disconnect+0x90>)
    7780:	47a8      	blx	r5
    7782:	2800      	cmp	r0, #0
    7784:	da14      	bge.n	77b0 <mqtt_disconnect+0x6c>
    7786:	7823      	ldrb	r3, [r4, #0]
    7788:	43bb      	bics	r3, r7
    778a:	7023      	strb	r3, [r4, #0]
    778c:	4b12      	ldr	r3, [pc, #72]	; (77d8 <mqtt_disconnect+0x94>)
    778e:	4798      	blx	r3
    7790:	e01e      	b.n	77d0 <mqtt_disconnect+0x8c>
    7792:	1c03      	adds	r3, r0, #0
    7794:	3370      	adds	r3, #112	; 0x70
    7796:	781b      	ldrb	r3, [r3, #0]
    7798:	2b00      	cmp	r3, #0
    779a:	d117      	bne.n	77cc <mqtt_disconnect+0x88>
    779c:	7823      	ldrb	r3, [r4, #0]
    779e:	071a      	lsls	r2, r3, #28
    77a0:	d5e2      	bpl.n	7768 <mqtt_disconnect+0x24>
    77a2:	4b0e      	ldr	r3, [pc, #56]	; (77dc <mqtt_disconnect+0x98>)
    77a4:	2000      	movs	r0, #0
    77a6:	4798      	blx	r3
    77a8:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    77aa:	4b0d      	ldr	r3, [pc, #52]	; (77e0 <mqtt_disconnect+0x9c>)
    77ac:	4798      	blx	r3
    77ae:	e7f5      	b.n	779c <mqtt_disconnect+0x58>
    77b0:	7823      	ldrb	r3, [r4, #0]
    77b2:	2202      	movs	r2, #2
    77b4:	4393      	bics	r3, r2
    77b6:	7023      	strb	r3, [r4, #0]
    77b8:	2000      	movs	r0, #0
    77ba:	e009      	b.n	77d0 <mqtt_disconnect+0x8c>
    77bc:	4b09      	ldr	r3, [pc, #36]	; (77e4 <mqtt_disconnect+0xa0>)
    77be:	4798      	blx	r3
    77c0:	1c38      	adds	r0, r7, #0
    77c2:	e005      	b.n	77d0 <mqtt_disconnect+0x8c>
    77c4:	2016      	movs	r0, #22
    77c6:	e002      	b.n	77ce <mqtt_disconnect+0x8a>
    77c8:	2080      	movs	r0, #128	; 0x80
    77ca:	e000      	b.n	77ce <mqtt_disconnect+0x8a>
    77cc:	200b      	movs	r0, #11
    77ce:	4240      	negs	r0, r0
    77d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    77d2:	46c0      	nop			; (mov r8, r8)
    77d4:	00003f69 	.word	0x00003f69
    77d8:	00006d75 	.word	0x00006d75
    77dc:	00002205 	.word	0x00002205
    77e0:	00006611 	.word	0x00006611
    77e4:	000076f5 	.word	0x000076f5

000077e8 <_mqtt_recv_handler>:
    77e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    77ea:	1c04      	adds	r4, r0, #0
    77ec:	6e40      	ldr	r0, [r0, #100]	; 0x64
    77ee:	230f      	movs	r3, #15
    77f0:	7802      	ldrb	r2, [r0, #0]
    77f2:	b087      	sub	sp, #28
    77f4:	1c15      	adds	r5, r2, #0
    77f6:	439d      	bics	r5, r3
    77f8:	2d50      	cmp	r5, #80	; 0x50
    77fa:	d100      	bne.n	77fe <_mqtt_recv_handler+0x16>
    77fc:	e098      	b.n	7930 <_mqtt_recv_handler+0x148>
    77fe:	d808      	bhi.n	7812 <_mqtt_recv_handler+0x2a>
    7800:	2d30      	cmp	r5, #48	; 0x30
    7802:	d03f      	beq.n	7884 <_mqtt_recv_handler+0x9c>
    7804:	2d40      	cmp	r5, #64	; 0x40
    7806:	d100      	bne.n	780a <_mqtt_recv_handler+0x22>
    7808:	e0b3      	b.n	7972 <_mqtt_recv_handler+0x18a>
    780a:	2d20      	cmp	r5, #32
    780c:	d000      	beq.n	7810 <_mqtt_recv_handler+0x28>
    780e:	e0c3      	b.n	7998 <_mqtt_recv_handler+0x1b0>
    7810:	e00e      	b.n	7830 <_mqtt_recv_handler+0x48>
    7812:	2d70      	cmp	r5, #112	; 0x70
    7814:	d100      	bne.n	7818 <_mqtt_recv_handler+0x30>
    7816:	e0ac      	b.n	7972 <_mqtt_recv_handler+0x18a>
    7818:	d803      	bhi.n	7822 <_mqtt_recv_handler+0x3a>
    781a:	2d60      	cmp	r5, #96	; 0x60
    781c:	d100      	bne.n	7820 <_mqtt_recv_handler+0x38>
    781e:	e096      	b.n	794e <_mqtt_recv_handler+0x166>
    7820:	e0ba      	b.n	7998 <_mqtt_recv_handler+0x1b0>
    7822:	2d90      	cmp	r5, #144	; 0x90
    7824:	d100      	bne.n	7828 <_mqtt_recv_handler+0x40>
    7826:	e0aa      	b.n	797e <_mqtt_recv_handler+0x196>
    7828:	2db0      	cmp	r5, #176	; 0xb0
    782a:	d100      	bne.n	782e <_mqtt_recv_handler+0x46>
    782c:	e0ad      	b.n	798a <_mqtt_recv_handler+0x1a2>
    782e:	e0b3      	b.n	7998 <_mqtt_recv_handler+0x1b0>
    7830:	aa01      	add	r2, sp, #4
    7832:	2303      	movs	r3, #3
    7834:	2901      	cmp	r1, #1
    7836:	d900      	bls.n	783a <_mqtt_recv_handler+0x52>
    7838:	78c3      	ldrb	r3, [r0, #3]
    783a:	7013      	strb	r3, [r2, #0]
    783c:	7813      	ldrb	r3, [r2, #0]
    783e:	2b00      	cmp	r3, #0
    7840:	d00d      	beq.n	785e <_mqtt_recv_handler+0x76>
    7842:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7844:	2b00      	cmp	r3, #0
    7846:	d002      	beq.n	784e <_mqtt_recv_handler+0x66>
    7848:	1c20      	adds	r0, r4, #0
    784a:	2101      	movs	r1, #1
    784c:	4798      	blx	r3
    784e:	236f      	movs	r3, #111	; 0x6f
    7850:	425b      	negs	r3, r3
    7852:	64e3      	str	r3, [r4, #76]	; 0x4c
    7854:	1c20      	adds	r0, r4, #0
    7856:	2100      	movs	r1, #0
    7858:	4b50      	ldr	r3, [pc, #320]	; (799c <_mqtt_recv_handler+0x1b4>)
    785a:	4798      	blx	r3
    785c:	e09c      	b.n	7998 <_mqtt_recv_handler+0x1b0>
    785e:	1c23      	adds	r3, r4, #0
    7860:	3343      	adds	r3, #67	; 0x43
    7862:	7819      	ldrb	r1, [r3, #0]
    7864:	0789      	lsls	r1, r1, #30
    7866:	0fc9      	lsrs	r1, r1, #31
    7868:	d105      	bne.n	7876 <_mqtt_recv_handler+0x8e>
    786a:	781a      	ldrb	r2, [r3, #0]
    786c:	64e1      	str	r1, [r4, #76]	; 0x4c
    786e:	2102      	movs	r1, #2
    7870:	430a      	orrs	r2, r1
    7872:	701a      	strb	r2, [r3, #0]
    7874:	e090      	b.n	7998 <_mqtt_recv_handler+0x1b0>
    7876:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7878:	2b00      	cmp	r3, #0
    787a:	d100      	bne.n	787e <_mqtt_recv_handler+0x96>
    787c:	e08c      	b.n	7998 <_mqtt_recv_handler+0x1b0>
    787e:	1c20      	adds	r0, r4, #0
    7880:	2101      	movs	r1, #1
    7882:	e088      	b.n	7996 <_mqtt_recv_handler+0x1ae>
    7884:	ad01      	add	r5, sp, #4
    7886:	0713      	lsls	r3, r2, #28
    7888:	7c2a      	ldrb	r2, [r5, #16]
    788a:	0fdb      	lsrs	r3, r3, #31
    788c:	2604      	movs	r6, #4
    788e:	009b      	lsls	r3, r3, #2
    7890:	43b2      	bics	r2, r6
    7892:	431a      	orrs	r2, r3
    7894:	742a      	strb	r2, [r5, #16]
    7896:	7807      	ldrb	r7, [r0, #0]
    7898:	2303      	movs	r3, #3
    789a:	b2d2      	uxtb	r2, r2
    789c:	087f      	lsrs	r7, r7, #1
    789e:	439a      	bics	r2, r3
    78a0:	401f      	ands	r7, r3
    78a2:	1c13      	adds	r3, r2, #0
    78a4:	433b      	orrs	r3, r7
    78a6:	742b      	strb	r3, [r5, #16]
    78a8:	1c43      	adds	r3, r0, #1
    78aa:	7818      	ldrb	r0, [r3, #0]
    78ac:	1c5a      	adds	r2, r3, #1
    78ae:	287f      	cmp	r0, #127	; 0x7f
    78b0:	d901      	bls.n	78b6 <_mqtt_recv_handler+0xce>
    78b2:	1c13      	adds	r3, r2, #0
    78b4:	e7f9      	b.n	78aa <_mqtt_recv_handler+0xc2>
    78b6:	7858      	ldrb	r0, [r3, #1]
    78b8:	789e      	ldrb	r6, [r3, #2]
    78ba:	0200      	lsls	r0, r0, #8
    78bc:	4330      	orrs	r0, r6
    78be:	3303      	adds	r3, #3
    78c0:	2600      	movs	r6, #0
    78c2:	6068      	str	r0, [r5, #4]
    78c4:	9301      	str	r3, [sp, #4]
    78c6:	1818      	adds	r0, r3, r0
    78c8:	42b7      	cmp	r7, r6
    78ca:	d004      	beq.n	78d6 <_mqtt_recv_handler+0xee>
    78cc:	7806      	ldrb	r6, [r0, #0]
    78ce:	7843      	ldrb	r3, [r0, #1]
    78d0:	0236      	lsls	r6, r6, #8
    78d2:	431e      	orrs	r6, r3
    78d4:	3002      	adds	r0, #2
    78d6:	1851      	adds	r1, r2, r1
    78d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    78da:	60a8      	str	r0, [r5, #8]
    78dc:	1a08      	subs	r0, r1, r0
    78de:	60e8      	str	r0, [r5, #12]
    78e0:	2b00      	cmp	r3, #0
    78e2:	d003      	beq.n	78ec <_mqtt_recv_handler+0x104>
    78e4:	1c20      	adds	r0, r4, #0
    78e6:	2106      	movs	r1, #6
    78e8:	1c2a      	adds	r2, r5, #0
    78ea:	4798      	blx	r3
    78ec:	7c2b      	ldrb	r3, [r5, #16]
    78ee:	079b      	lsls	r3, r3, #30
    78f0:	0f9b      	lsrs	r3, r3, #30
    78f2:	2b01      	cmp	r3, #1
    78f4:	d10b      	bne.n	790e <_mqtt_recv_handler+0x126>
    78f6:	b2b6      	uxth	r6, r6
    78f8:	1c20      	adds	r0, r4, #0
    78fa:	2140      	movs	r1, #64	; 0x40
    78fc:	1c32      	adds	r2, r6, #0
    78fe:	4b28      	ldr	r3, [pc, #160]	; (79a0 <_mqtt_recv_handler+0x1b8>)
    7900:	4798      	blx	r3
    7902:	2800      	cmp	r0, #0
    7904:	d048      	beq.n	7998 <_mqtt_recv_handler+0x1b0>
    7906:	1c23      	adds	r3, r4, #0
    7908:	3348      	adds	r3, #72	; 0x48
    790a:	2240      	movs	r2, #64	; 0x40
    790c:	e00c      	b.n	7928 <_mqtt_recv_handler+0x140>
    790e:	2b02      	cmp	r3, #2
    7910:	d142      	bne.n	7998 <_mqtt_recv_handler+0x1b0>
    7912:	b2b6      	uxth	r6, r6
    7914:	1c20      	adds	r0, r4, #0
    7916:	2150      	movs	r1, #80	; 0x50
    7918:	1c32      	adds	r2, r6, #0
    791a:	4b21      	ldr	r3, [pc, #132]	; (79a0 <_mqtt_recv_handler+0x1b8>)
    791c:	4798      	blx	r3
    791e:	2800      	cmp	r0, #0
    7920:	d03a      	beq.n	7998 <_mqtt_recv_handler+0x1b0>
    7922:	1c23      	adds	r3, r4, #0
    7924:	3348      	adds	r3, #72	; 0x48
    7926:	2250      	movs	r2, #80	; 0x50
    7928:	344a      	adds	r4, #74	; 0x4a
    792a:	701a      	strb	r2, [r3, #0]
    792c:	8026      	strh	r6, [r4, #0]
    792e:	e033      	b.n	7998 <_mqtt_recv_handler+0x1b0>
    7930:	7885      	ldrb	r5, [r0, #2]
    7932:	78c3      	ldrb	r3, [r0, #3]
    7934:	022d      	lsls	r5, r5, #8
    7936:	431d      	orrs	r5, r3
    7938:	1c20      	adds	r0, r4, #0
    793a:	2162      	movs	r1, #98	; 0x62
    793c:	1c2a      	adds	r2, r5, #0
    793e:	4b18      	ldr	r3, [pc, #96]	; (79a0 <_mqtt_recv_handler+0x1b8>)
    7940:	4798      	blx	r3
    7942:	2800      	cmp	r0, #0
    7944:	d028      	beq.n	7998 <_mqtt_recv_handler+0x1b0>
    7946:	1c23      	adds	r3, r4, #0
    7948:	3348      	adds	r3, #72	; 0x48
    794a:	2260      	movs	r2, #96	; 0x60
    794c:	e00d      	b.n	796a <_mqtt_recv_handler+0x182>
    794e:	7885      	ldrb	r5, [r0, #2]
    7950:	78c3      	ldrb	r3, [r0, #3]
    7952:	022d      	lsls	r5, r5, #8
    7954:	431d      	orrs	r5, r3
    7956:	1c20      	adds	r0, r4, #0
    7958:	2170      	movs	r1, #112	; 0x70
    795a:	1c2a      	adds	r2, r5, #0
    795c:	4b10      	ldr	r3, [pc, #64]	; (79a0 <_mqtt_recv_handler+0x1b8>)
    795e:	4798      	blx	r3
    7960:	2800      	cmp	r0, #0
    7962:	d019      	beq.n	7998 <_mqtt_recv_handler+0x1b0>
    7964:	1c23      	adds	r3, r4, #0
    7966:	3348      	adds	r3, #72	; 0x48
    7968:	2270      	movs	r2, #112	; 0x70
    796a:	344a      	adds	r4, #74	; 0x4a
    796c:	701a      	strb	r2, [r3, #0]
    796e:	8025      	strh	r5, [r4, #0]
    7970:	e012      	b.n	7998 <_mqtt_recv_handler+0x1b0>
    7972:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7974:	2b00      	cmp	r3, #0
    7976:	d00f      	beq.n	7998 <_mqtt_recv_handler+0x1b0>
    7978:	1c20      	adds	r0, r4, #0
    797a:	2102      	movs	r1, #2
    797c:	e00a      	b.n	7994 <_mqtt_recv_handler+0x1ac>
    797e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7980:	2b00      	cmp	r3, #0
    7982:	d009      	beq.n	7998 <_mqtt_recv_handler+0x1b0>
    7984:	1c20      	adds	r0, r4, #0
    7986:	2103      	movs	r1, #3
    7988:	e004      	b.n	7994 <_mqtt_recv_handler+0x1ac>
    798a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    798c:	2b00      	cmp	r3, #0
    798e:	d003      	beq.n	7998 <_mqtt_recv_handler+0x1b0>
    7990:	1c20      	adds	r0, r4, #0
    7992:	2104      	movs	r1, #4
    7994:	aa01      	add	r2, sp, #4
    7996:	4798      	blx	r3
    7998:	b007      	add	sp, #28
    799a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    799c:	00007745 	.word	0x00007745
    79a0:	00007691 	.word	0x00007691

000079a4 <mqtt_recv_packet>:
    79a4:	b538      	push	{r3, r4, r5, lr}
    79a6:	1e04      	subs	r4, r0, #0
    79a8:	d017      	beq.n	79da <mqtt_recv_packet+0x36>
    79aa:	6c42      	ldr	r2, [r0, #68]	; 0x44
    79ac:	6e83      	ldr	r3, [r0, #104]	; 0x68
    79ae:	429a      	cmp	r2, r3
    79b0:	d906      	bls.n	79c0 <mqtt_recv_packet+0x1c>
    79b2:	238b      	movs	r3, #139	; 0x8b
    79b4:	425b      	negs	r3, r3
    79b6:	64c3      	str	r3, [r0, #76]	; 0x4c
    79b8:	2100      	movs	r1, #0
    79ba:	4b08      	ldr	r3, [pc, #32]	; (79dc <mqtt_recv_packet+0x38>)
    79bc:	4798      	blx	r3
    79be:	e00c      	b.n	79da <mqtt_recv_packet+0x36>
    79c0:	6c62      	ldr	r2, [r4, #68]	; 0x44
    79c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
    79c4:	2002      	movs	r0, #2
    79c6:	1899      	adds	r1, r3, r2
    79c8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    79ca:	5620      	ldrsb	r0, [r4, r0]
    79cc:	1a9a      	subs	r2, r3, r2
    79ce:	b292      	uxth	r2, r2
    79d0:	2300      	movs	r3, #0
    79d2:	4d03      	ldr	r5, [pc, #12]	; (79e0 <mqtt_recv_packet+0x3c>)
    79d4:	47a8      	blx	r5
    79d6:	2800      	cmp	r0, #0
    79d8:	d1f2      	bne.n	79c0 <mqtt_recv_packet+0x1c>
    79da:	bd38      	pop	{r3, r4, r5, pc}
    79dc:	00007745 	.word	0x00007745
    79e0:	00004001 	.word	0x00004001

000079e4 <mqtt_recved_packet>:
    79e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    79e6:	1e04      	subs	r4, r0, #0
    79e8:	d042      	beq.n	7a70 <mqtt_recved_packet+0x8c>
    79ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
    79ec:	6e67      	ldr	r7, [r4, #100]	; 0x64
    79ee:	18ca      	adds	r2, r1, r3
    79f0:	2301      	movs	r3, #1
    79f2:	9701      	str	r7, [sp, #4]
    79f4:	6462      	str	r2, [r4, #68]	; 0x44
    79f6:	2600      	movs	r6, #0
    79f8:	1c1d      	adds	r5, r3, #0
    79fa:	42a9      	cmp	r1, r5
    79fc:	dc03      	bgt.n	7a06 <mqtt_recved_packet+0x22>
    79fe:	1c20      	adds	r0, r4, #0
    7a00:	4b1c      	ldr	r3, [pc, #112]	; (7a74 <mqtt_recved_packet+0x90>)
    7a02:	4798      	blx	r3
    7a04:	e034      	b.n	7a70 <mqtt_recved_packet+0x8c>
    7a06:	9f01      	ldr	r7, [sp, #4]
    7a08:	5d78      	ldrb	r0, [r7, r5]
    7a0a:	01df      	lsls	r7, r3, #7
    7a0c:	46bc      	mov	ip, r7
    7a0e:	2d03      	cmp	r5, #3
    7a10:	d101      	bne.n	7a16 <mqtt_recved_packet+0x32>
    7a12:	234d      	movs	r3, #77	; 0x4d
    7a14:	e00e      	b.n	7a34 <mqtt_recved_packet+0x50>
    7a16:	277f      	movs	r7, #127	; 0x7f
    7a18:	4007      	ands	r7, r0
    7a1a:	437b      	muls	r3, r7
    7a1c:	b240      	sxtb	r0, r0
    7a1e:	3501      	adds	r5, #1
    7a20:	18f6      	adds	r6, r6, r3
    7a22:	2800      	cmp	r0, #0
    7a24:	da01      	bge.n	7a2a <mqtt_recved_packet+0x46>
    7a26:	4663      	mov	r3, ip
    7a28:	e7e7      	b.n	79fa <mqtt_recved_packet+0x16>
    7a2a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    7a2c:	19af      	adds	r7, r5, r6
    7a2e:	429f      	cmp	r7, r3
    7a30:	d907      	bls.n	7a42 <mqtt_recved_packet+0x5e>
    7a32:	238b      	movs	r3, #139	; 0x8b
    7a34:	425b      	negs	r3, r3
    7a36:	64e3      	str	r3, [r4, #76]	; 0x4c
    7a38:	1c20      	adds	r0, r4, #0
    7a3a:	2100      	movs	r1, #0
    7a3c:	4b0e      	ldr	r3, [pc, #56]	; (7a78 <mqtt_recved_packet+0x94>)
    7a3e:	4798      	blx	r3
    7a40:	e016      	b.n	7a70 <mqtt_recved_packet+0x8c>
    7a42:	42ba      	cmp	r2, r7
    7a44:	d314      	bcc.n	7a70 <mqtt_recved_packet+0x8c>
    7a46:	4b0d      	ldr	r3, [pc, #52]	; (7a7c <mqtt_recved_packet+0x98>)
    7a48:	1c20      	adds	r0, r4, #0
    7a4a:	1c31      	adds	r1, r6, #0
    7a4c:	4798      	blx	r3
    7a4e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    7a50:	42bb      	cmp	r3, r7
    7a52:	d102      	bne.n	7a5a <mqtt_recved_packet+0x76>
    7a54:	2300      	movs	r3, #0
    7a56:	6463      	str	r3, [r4, #68]	; 0x44
    7a58:	e00a      	b.n	7a70 <mqtt_recved_packet+0x8c>
    7a5a:	1b9e      	subs	r6, r3, r6
    7a5c:	9b01      	ldr	r3, [sp, #4]
    7a5e:	1b75      	subs	r5, r6, r5
    7a60:	19d9      	adds	r1, r3, r7
    7a62:	1c18      	adds	r0, r3, #0
    7a64:	1c2a      	adds	r2, r5, #0
    7a66:	4b06      	ldr	r3, [pc, #24]	; (7a80 <mqtt_recved_packet+0x9c>)
    7a68:	4798      	blx	r3
    7a6a:	6465      	str	r5, [r4, #68]	; 0x44
    7a6c:	2100      	movs	r1, #0
    7a6e:	e7bc      	b.n	79ea <mqtt_recved_packet+0x6>
    7a70:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    7a72:	46c0      	nop			; (mov r8, r8)
    7a74:	000079a5 	.word	0x000079a5
    7a78:	00007745 	.word	0x00007745
    7a7c:	000077e9 	.word	0x000077e9
    7a80:	0000980f 	.word	0x0000980f

00007a84 <mqtt_socket_event_handler>:
    7a84:	b570      	push	{r4, r5, r6, lr}
    7a86:	4d37      	ldr	r5, [pc, #220]	; (7b64 <mqtt_socket_event_handler+0xe0>)
    7a88:	0086      	lsls	r6, r0, #2
    7a8a:	5974      	ldr	r4, [r6, r5]
    7a8c:	b086      	sub	sp, #24
    7a8e:	2c00      	cmp	r4, #0
    7a90:	d066      	beq.n	7b60 <mqtt_socket_event_handler+0xdc>
    7a92:	2906      	cmp	r1, #6
    7a94:	d02b      	beq.n	7aee <mqtt_socket_event_handler+0x6a>
    7a96:	2907      	cmp	r1, #7
    7a98:	d039      	beq.n	7b0e <mqtt_socket_event_handler+0x8a>
    7a9a:	2905      	cmp	r1, #5
    7a9c:	d160      	bne.n	7b60 <mqtt_socket_event_handler+0xdc>
    7a9e:	2001      	movs	r0, #1
    7aa0:	5610      	ldrsb	r0, [r2, r0]
    7aa2:	4b31      	ldr	r3, [pc, #196]	; (7b68 <mqtt_socket_event_handler+0xe4>)
    7aa4:	4798      	blx	r3
    7aa6:	9001      	str	r0, [sp, #4]
    7aa8:	2800      	cmp	r0, #0
    7aaa:	da06      	bge.n	7aba <mqtt_socket_event_handler+0x36>
    7aac:	2002      	movs	r0, #2
    7aae:	4b2f      	ldr	r3, [pc, #188]	; (7b6c <mqtt_socket_event_handler+0xe8>)
    7ab0:	5620      	ldrsb	r0, [r4, r0]
    7ab2:	4798      	blx	r3
    7ab4:	2300      	movs	r3, #0
    7ab6:	5173      	str	r3, [r6, r5]
    7ab8:	e011      	b.n	7ade <mqtt_socket_event_handler+0x5a>
    7aba:	1c23      	adds	r3, r4, #0
    7abc:	3343      	adds	r3, #67	; 0x43
    7abe:	781a      	ldrb	r2, [r3, #0]
    7ac0:	2101      	movs	r1, #1
    7ac2:	430a      	orrs	r2, r1
    7ac4:	701a      	strb	r2, [r3, #0]
    7ac6:	331d      	adds	r3, #29
    7ac8:	881b      	ldrh	r3, [r3, #0]
    7aca:	2b00      	cmp	r3, #0
    7acc:	d004      	beq.n	7ad8 <mqtt_socket_event_handler+0x54>
    7ace:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    7ad0:	6d21      	ldr	r1, [r4, #80]	; 0x50
    7ad2:	2200      	movs	r2, #0
    7ad4:	4b26      	ldr	r3, [pc, #152]	; (7b70 <mqtt_socket_event_handler+0xec>)
    7ad6:	4798      	blx	r3
    7ad8:	1c20      	adds	r0, r4, #0
    7ada:	4b26      	ldr	r3, [pc, #152]	; (7b74 <mqtt_socket_event_handler+0xf0>)
    7adc:	4798      	blx	r3
    7ade:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7ae0:	2b00      	cmp	r3, #0
    7ae2:	d03d      	beq.n	7b60 <mqtt_socket_event_handler+0xdc>
    7ae4:	1c20      	adds	r0, r4, #0
    7ae6:	2100      	movs	r1, #0
    7ae8:	aa01      	add	r2, sp, #4
    7aea:	4798      	blx	r3
    7aec:	e038      	b.n	7b60 <mqtt_socket_event_handler+0xdc>
    7aee:	2304      	movs	r3, #4
    7af0:	5ed1      	ldrsh	r1, [r2, r3]
    7af2:	2900      	cmp	r1, #0
    7af4:	dd03      	ble.n	7afe <mqtt_socket_event_handler+0x7a>
    7af6:	1c20      	adds	r0, r4, #0
    7af8:	4b1f      	ldr	r3, [pc, #124]	; (7b78 <mqtt_socket_event_handler+0xf4>)
    7afa:	4798      	blx	r3
    7afc:	e003      	b.n	7b06 <mqtt_socket_event_handler+0x82>
    7afe:	1c0b      	adds	r3, r1, #0
    7b00:	1c08      	adds	r0, r1, #0
    7b02:	330d      	adds	r3, #13
    7b04:	d11a      	bne.n	7b3c <mqtt_socket_event_handler+0xb8>
    7b06:	4b1b      	ldr	r3, [pc, #108]	; (7b74 <mqtt_socket_event_handler+0xf0>)
    7b08:	1c20      	adds	r0, r4, #0
    7b0a:	4798      	blx	r3
    7b0c:	e028      	b.n	7b60 <mqtt_socket_event_handler+0xdc>
    7b0e:	1c23      	adds	r3, r4, #0
    7b10:	3343      	adds	r3, #67	; 0x43
    7b12:	8810      	ldrh	r0, [r2, #0]
    7b14:	781a      	ldrb	r2, [r3, #0]
    7b16:	0751      	lsls	r1, r2, #29
    7b18:	d402      	bmi.n	7b20 <mqtt_socket_event_handler+0x9c>
    7b1a:	2108      	movs	r1, #8
    7b1c:	438a      	bics	r2, r1
    7b1e:	701a      	strb	r2, [r3, #0]
    7b20:	781a      	ldrb	r2, [r3, #0]
    7b22:	2104      	movs	r1, #4
    7b24:	438a      	bics	r2, r1
    7b26:	701a      	strb	r2, [r3, #0]
    7b28:	06d3      	lsls	r3, r2, #27
    7b2a:	0fde      	lsrs	r6, r3, #31
    7b2c:	b200      	sxth	r0, r0
    7b2e:	2b00      	cmp	r3, #0
    7b30:	db02      	blt.n	7b38 <mqtt_socket_event_handler+0xb4>
    7b32:	2800      	cmp	r0, #0
    7b34:	da08      	bge.n	7b48 <mqtt_socket_event_handler+0xc4>
    7b36:	e001      	b.n	7b3c <mqtt_socket_event_handler+0xb8>
    7b38:	2800      	cmp	r0, #0
    7b3a:	da02      	bge.n	7b42 <mqtt_socket_event_handler+0xbe>
    7b3c:	4b0a      	ldr	r3, [pc, #40]	; (7b68 <mqtt_socket_event_handler+0xe4>)
    7b3e:	4798      	blx	r3
    7b40:	64e0      	str	r0, [r4, #76]	; 0x4c
    7b42:	1c20      	adds	r0, r4, #0
    7b44:	4b0d      	ldr	r3, [pc, #52]	; (7b7c <mqtt_socket_event_handler+0xf8>)
    7b46:	e7e0      	b.n	7b0a <mqtt_socket_event_handler+0x86>
    7b48:	1c25      	adds	r5, r4, #0
    7b4a:	3548      	adds	r5, #72	; 0x48
    7b4c:	7829      	ldrb	r1, [r5, #0]
    7b4e:	2900      	cmp	r1, #0
    7b50:	d006      	beq.n	7b60 <mqtt_socket_event_handler+0xdc>
    7b52:	1c23      	adds	r3, r4, #0
    7b54:	334a      	adds	r3, #74	; 0x4a
    7b56:	881a      	ldrh	r2, [r3, #0]
    7b58:	1c20      	adds	r0, r4, #0
    7b5a:	4b09      	ldr	r3, [pc, #36]	; (7b80 <mqtt_socket_event_handler+0xfc>)
    7b5c:	4798      	blx	r3
    7b5e:	702e      	strb	r6, [r5, #0]
    7b60:	b006      	add	sp, #24
    7b62:	bd70      	pop	{r4, r5, r6, pc}
    7b64:	2000025c 	.word	0x2000025c
    7b68:	00006d75 	.word	0x00006d75
    7b6c:	00004095 	.word	0x00004095
    7b70:	000065d5 	.word	0x000065d5
    7b74:	000079a5 	.word	0x000079a5
    7b78:	000079e5 	.word	0x000079e5
    7b7c:	000076f5 	.word	0x000076f5
    7b80:	00007691 	.word	0x00007691

00007b84 <__gnu_thumb1_case_uqi>:
    7b84:	b402      	push	{r1}
    7b86:	4671      	mov	r1, lr
    7b88:	0849      	lsrs	r1, r1, #1
    7b8a:	0049      	lsls	r1, r1, #1
    7b8c:	5c09      	ldrb	r1, [r1, r0]
    7b8e:	0049      	lsls	r1, r1, #1
    7b90:	448e      	add	lr, r1
    7b92:	bc02      	pop	{r1}
    7b94:	4770      	bx	lr
    7b96:	46c0      	nop			; (mov r8, r8)

00007b98 <__udivsi3>:
    7b98:	2200      	movs	r2, #0
    7b9a:	0843      	lsrs	r3, r0, #1
    7b9c:	428b      	cmp	r3, r1
    7b9e:	d374      	bcc.n	7c8a <__udivsi3+0xf2>
    7ba0:	0903      	lsrs	r3, r0, #4
    7ba2:	428b      	cmp	r3, r1
    7ba4:	d35f      	bcc.n	7c66 <__udivsi3+0xce>
    7ba6:	0a03      	lsrs	r3, r0, #8
    7ba8:	428b      	cmp	r3, r1
    7baa:	d344      	bcc.n	7c36 <__udivsi3+0x9e>
    7bac:	0b03      	lsrs	r3, r0, #12
    7bae:	428b      	cmp	r3, r1
    7bb0:	d328      	bcc.n	7c04 <__udivsi3+0x6c>
    7bb2:	0c03      	lsrs	r3, r0, #16
    7bb4:	428b      	cmp	r3, r1
    7bb6:	d30d      	bcc.n	7bd4 <__udivsi3+0x3c>
    7bb8:	22ff      	movs	r2, #255	; 0xff
    7bba:	0209      	lsls	r1, r1, #8
    7bbc:	ba12      	rev	r2, r2
    7bbe:	0c03      	lsrs	r3, r0, #16
    7bc0:	428b      	cmp	r3, r1
    7bc2:	d302      	bcc.n	7bca <__udivsi3+0x32>
    7bc4:	1212      	asrs	r2, r2, #8
    7bc6:	0209      	lsls	r1, r1, #8
    7bc8:	d065      	beq.n	7c96 <__udivsi3+0xfe>
    7bca:	0b03      	lsrs	r3, r0, #12
    7bcc:	428b      	cmp	r3, r1
    7bce:	d319      	bcc.n	7c04 <__udivsi3+0x6c>
    7bd0:	e000      	b.n	7bd4 <__udivsi3+0x3c>
    7bd2:	0a09      	lsrs	r1, r1, #8
    7bd4:	0bc3      	lsrs	r3, r0, #15
    7bd6:	428b      	cmp	r3, r1
    7bd8:	d301      	bcc.n	7bde <__udivsi3+0x46>
    7bda:	03cb      	lsls	r3, r1, #15
    7bdc:	1ac0      	subs	r0, r0, r3
    7bde:	4152      	adcs	r2, r2
    7be0:	0b83      	lsrs	r3, r0, #14
    7be2:	428b      	cmp	r3, r1
    7be4:	d301      	bcc.n	7bea <__udivsi3+0x52>
    7be6:	038b      	lsls	r3, r1, #14
    7be8:	1ac0      	subs	r0, r0, r3
    7bea:	4152      	adcs	r2, r2
    7bec:	0b43      	lsrs	r3, r0, #13
    7bee:	428b      	cmp	r3, r1
    7bf0:	d301      	bcc.n	7bf6 <__udivsi3+0x5e>
    7bf2:	034b      	lsls	r3, r1, #13
    7bf4:	1ac0      	subs	r0, r0, r3
    7bf6:	4152      	adcs	r2, r2
    7bf8:	0b03      	lsrs	r3, r0, #12
    7bfa:	428b      	cmp	r3, r1
    7bfc:	d301      	bcc.n	7c02 <__udivsi3+0x6a>
    7bfe:	030b      	lsls	r3, r1, #12
    7c00:	1ac0      	subs	r0, r0, r3
    7c02:	4152      	adcs	r2, r2
    7c04:	0ac3      	lsrs	r3, r0, #11
    7c06:	428b      	cmp	r3, r1
    7c08:	d301      	bcc.n	7c0e <__udivsi3+0x76>
    7c0a:	02cb      	lsls	r3, r1, #11
    7c0c:	1ac0      	subs	r0, r0, r3
    7c0e:	4152      	adcs	r2, r2
    7c10:	0a83      	lsrs	r3, r0, #10
    7c12:	428b      	cmp	r3, r1
    7c14:	d301      	bcc.n	7c1a <__udivsi3+0x82>
    7c16:	028b      	lsls	r3, r1, #10
    7c18:	1ac0      	subs	r0, r0, r3
    7c1a:	4152      	adcs	r2, r2
    7c1c:	0a43      	lsrs	r3, r0, #9
    7c1e:	428b      	cmp	r3, r1
    7c20:	d301      	bcc.n	7c26 <__udivsi3+0x8e>
    7c22:	024b      	lsls	r3, r1, #9
    7c24:	1ac0      	subs	r0, r0, r3
    7c26:	4152      	adcs	r2, r2
    7c28:	0a03      	lsrs	r3, r0, #8
    7c2a:	428b      	cmp	r3, r1
    7c2c:	d301      	bcc.n	7c32 <__udivsi3+0x9a>
    7c2e:	020b      	lsls	r3, r1, #8
    7c30:	1ac0      	subs	r0, r0, r3
    7c32:	4152      	adcs	r2, r2
    7c34:	d2cd      	bcs.n	7bd2 <__udivsi3+0x3a>
    7c36:	09c3      	lsrs	r3, r0, #7
    7c38:	428b      	cmp	r3, r1
    7c3a:	d301      	bcc.n	7c40 <__udivsi3+0xa8>
    7c3c:	01cb      	lsls	r3, r1, #7
    7c3e:	1ac0      	subs	r0, r0, r3
    7c40:	4152      	adcs	r2, r2
    7c42:	0983      	lsrs	r3, r0, #6
    7c44:	428b      	cmp	r3, r1
    7c46:	d301      	bcc.n	7c4c <__udivsi3+0xb4>
    7c48:	018b      	lsls	r3, r1, #6
    7c4a:	1ac0      	subs	r0, r0, r3
    7c4c:	4152      	adcs	r2, r2
    7c4e:	0943      	lsrs	r3, r0, #5
    7c50:	428b      	cmp	r3, r1
    7c52:	d301      	bcc.n	7c58 <__udivsi3+0xc0>
    7c54:	014b      	lsls	r3, r1, #5
    7c56:	1ac0      	subs	r0, r0, r3
    7c58:	4152      	adcs	r2, r2
    7c5a:	0903      	lsrs	r3, r0, #4
    7c5c:	428b      	cmp	r3, r1
    7c5e:	d301      	bcc.n	7c64 <__udivsi3+0xcc>
    7c60:	010b      	lsls	r3, r1, #4
    7c62:	1ac0      	subs	r0, r0, r3
    7c64:	4152      	adcs	r2, r2
    7c66:	08c3      	lsrs	r3, r0, #3
    7c68:	428b      	cmp	r3, r1
    7c6a:	d301      	bcc.n	7c70 <__udivsi3+0xd8>
    7c6c:	00cb      	lsls	r3, r1, #3
    7c6e:	1ac0      	subs	r0, r0, r3
    7c70:	4152      	adcs	r2, r2
    7c72:	0883      	lsrs	r3, r0, #2
    7c74:	428b      	cmp	r3, r1
    7c76:	d301      	bcc.n	7c7c <__udivsi3+0xe4>
    7c78:	008b      	lsls	r3, r1, #2
    7c7a:	1ac0      	subs	r0, r0, r3
    7c7c:	4152      	adcs	r2, r2
    7c7e:	0843      	lsrs	r3, r0, #1
    7c80:	428b      	cmp	r3, r1
    7c82:	d301      	bcc.n	7c88 <__udivsi3+0xf0>
    7c84:	004b      	lsls	r3, r1, #1
    7c86:	1ac0      	subs	r0, r0, r3
    7c88:	4152      	adcs	r2, r2
    7c8a:	1a41      	subs	r1, r0, r1
    7c8c:	d200      	bcs.n	7c90 <__udivsi3+0xf8>
    7c8e:	4601      	mov	r1, r0
    7c90:	4152      	adcs	r2, r2
    7c92:	4610      	mov	r0, r2
    7c94:	4770      	bx	lr
    7c96:	e7ff      	b.n	7c98 <__udivsi3+0x100>
    7c98:	b501      	push	{r0, lr}
    7c9a:	2000      	movs	r0, #0
    7c9c:	f000 f8f0 	bl	7e80 <__aeabi_idiv0>
    7ca0:	bd02      	pop	{r1, pc}
    7ca2:	46c0      	nop			; (mov r8, r8)

00007ca4 <__aeabi_uidivmod>:
    7ca4:	2900      	cmp	r1, #0
    7ca6:	d0f7      	beq.n	7c98 <__udivsi3+0x100>
    7ca8:	e776      	b.n	7b98 <__udivsi3>
    7caa:	4770      	bx	lr

00007cac <__divsi3>:
    7cac:	4603      	mov	r3, r0
    7cae:	430b      	orrs	r3, r1
    7cb0:	d47f      	bmi.n	7db2 <__divsi3+0x106>
    7cb2:	2200      	movs	r2, #0
    7cb4:	0843      	lsrs	r3, r0, #1
    7cb6:	428b      	cmp	r3, r1
    7cb8:	d374      	bcc.n	7da4 <__divsi3+0xf8>
    7cba:	0903      	lsrs	r3, r0, #4
    7cbc:	428b      	cmp	r3, r1
    7cbe:	d35f      	bcc.n	7d80 <__divsi3+0xd4>
    7cc0:	0a03      	lsrs	r3, r0, #8
    7cc2:	428b      	cmp	r3, r1
    7cc4:	d344      	bcc.n	7d50 <__divsi3+0xa4>
    7cc6:	0b03      	lsrs	r3, r0, #12
    7cc8:	428b      	cmp	r3, r1
    7cca:	d328      	bcc.n	7d1e <__divsi3+0x72>
    7ccc:	0c03      	lsrs	r3, r0, #16
    7cce:	428b      	cmp	r3, r1
    7cd0:	d30d      	bcc.n	7cee <__divsi3+0x42>
    7cd2:	22ff      	movs	r2, #255	; 0xff
    7cd4:	0209      	lsls	r1, r1, #8
    7cd6:	ba12      	rev	r2, r2
    7cd8:	0c03      	lsrs	r3, r0, #16
    7cda:	428b      	cmp	r3, r1
    7cdc:	d302      	bcc.n	7ce4 <__divsi3+0x38>
    7cde:	1212      	asrs	r2, r2, #8
    7ce0:	0209      	lsls	r1, r1, #8
    7ce2:	d065      	beq.n	7db0 <__divsi3+0x104>
    7ce4:	0b03      	lsrs	r3, r0, #12
    7ce6:	428b      	cmp	r3, r1
    7ce8:	d319      	bcc.n	7d1e <__divsi3+0x72>
    7cea:	e000      	b.n	7cee <__divsi3+0x42>
    7cec:	0a09      	lsrs	r1, r1, #8
    7cee:	0bc3      	lsrs	r3, r0, #15
    7cf0:	428b      	cmp	r3, r1
    7cf2:	d301      	bcc.n	7cf8 <__divsi3+0x4c>
    7cf4:	03cb      	lsls	r3, r1, #15
    7cf6:	1ac0      	subs	r0, r0, r3
    7cf8:	4152      	adcs	r2, r2
    7cfa:	0b83      	lsrs	r3, r0, #14
    7cfc:	428b      	cmp	r3, r1
    7cfe:	d301      	bcc.n	7d04 <__divsi3+0x58>
    7d00:	038b      	lsls	r3, r1, #14
    7d02:	1ac0      	subs	r0, r0, r3
    7d04:	4152      	adcs	r2, r2
    7d06:	0b43      	lsrs	r3, r0, #13
    7d08:	428b      	cmp	r3, r1
    7d0a:	d301      	bcc.n	7d10 <__divsi3+0x64>
    7d0c:	034b      	lsls	r3, r1, #13
    7d0e:	1ac0      	subs	r0, r0, r3
    7d10:	4152      	adcs	r2, r2
    7d12:	0b03      	lsrs	r3, r0, #12
    7d14:	428b      	cmp	r3, r1
    7d16:	d301      	bcc.n	7d1c <__divsi3+0x70>
    7d18:	030b      	lsls	r3, r1, #12
    7d1a:	1ac0      	subs	r0, r0, r3
    7d1c:	4152      	adcs	r2, r2
    7d1e:	0ac3      	lsrs	r3, r0, #11
    7d20:	428b      	cmp	r3, r1
    7d22:	d301      	bcc.n	7d28 <__divsi3+0x7c>
    7d24:	02cb      	lsls	r3, r1, #11
    7d26:	1ac0      	subs	r0, r0, r3
    7d28:	4152      	adcs	r2, r2
    7d2a:	0a83      	lsrs	r3, r0, #10
    7d2c:	428b      	cmp	r3, r1
    7d2e:	d301      	bcc.n	7d34 <__divsi3+0x88>
    7d30:	028b      	lsls	r3, r1, #10
    7d32:	1ac0      	subs	r0, r0, r3
    7d34:	4152      	adcs	r2, r2
    7d36:	0a43      	lsrs	r3, r0, #9
    7d38:	428b      	cmp	r3, r1
    7d3a:	d301      	bcc.n	7d40 <__divsi3+0x94>
    7d3c:	024b      	lsls	r3, r1, #9
    7d3e:	1ac0      	subs	r0, r0, r3
    7d40:	4152      	adcs	r2, r2
    7d42:	0a03      	lsrs	r3, r0, #8
    7d44:	428b      	cmp	r3, r1
    7d46:	d301      	bcc.n	7d4c <__divsi3+0xa0>
    7d48:	020b      	lsls	r3, r1, #8
    7d4a:	1ac0      	subs	r0, r0, r3
    7d4c:	4152      	adcs	r2, r2
    7d4e:	d2cd      	bcs.n	7cec <__divsi3+0x40>
    7d50:	09c3      	lsrs	r3, r0, #7
    7d52:	428b      	cmp	r3, r1
    7d54:	d301      	bcc.n	7d5a <__divsi3+0xae>
    7d56:	01cb      	lsls	r3, r1, #7
    7d58:	1ac0      	subs	r0, r0, r3
    7d5a:	4152      	adcs	r2, r2
    7d5c:	0983      	lsrs	r3, r0, #6
    7d5e:	428b      	cmp	r3, r1
    7d60:	d301      	bcc.n	7d66 <__divsi3+0xba>
    7d62:	018b      	lsls	r3, r1, #6
    7d64:	1ac0      	subs	r0, r0, r3
    7d66:	4152      	adcs	r2, r2
    7d68:	0943      	lsrs	r3, r0, #5
    7d6a:	428b      	cmp	r3, r1
    7d6c:	d301      	bcc.n	7d72 <__divsi3+0xc6>
    7d6e:	014b      	lsls	r3, r1, #5
    7d70:	1ac0      	subs	r0, r0, r3
    7d72:	4152      	adcs	r2, r2
    7d74:	0903      	lsrs	r3, r0, #4
    7d76:	428b      	cmp	r3, r1
    7d78:	d301      	bcc.n	7d7e <__divsi3+0xd2>
    7d7a:	010b      	lsls	r3, r1, #4
    7d7c:	1ac0      	subs	r0, r0, r3
    7d7e:	4152      	adcs	r2, r2
    7d80:	08c3      	lsrs	r3, r0, #3
    7d82:	428b      	cmp	r3, r1
    7d84:	d301      	bcc.n	7d8a <__divsi3+0xde>
    7d86:	00cb      	lsls	r3, r1, #3
    7d88:	1ac0      	subs	r0, r0, r3
    7d8a:	4152      	adcs	r2, r2
    7d8c:	0883      	lsrs	r3, r0, #2
    7d8e:	428b      	cmp	r3, r1
    7d90:	d301      	bcc.n	7d96 <__divsi3+0xea>
    7d92:	008b      	lsls	r3, r1, #2
    7d94:	1ac0      	subs	r0, r0, r3
    7d96:	4152      	adcs	r2, r2
    7d98:	0843      	lsrs	r3, r0, #1
    7d9a:	428b      	cmp	r3, r1
    7d9c:	d301      	bcc.n	7da2 <__divsi3+0xf6>
    7d9e:	004b      	lsls	r3, r1, #1
    7da0:	1ac0      	subs	r0, r0, r3
    7da2:	4152      	adcs	r2, r2
    7da4:	1a41      	subs	r1, r0, r1
    7da6:	d200      	bcs.n	7daa <__divsi3+0xfe>
    7da8:	4601      	mov	r1, r0
    7daa:	4152      	adcs	r2, r2
    7dac:	4610      	mov	r0, r2
    7dae:	4770      	bx	lr
    7db0:	e05d      	b.n	7e6e <__divsi3+0x1c2>
    7db2:	0fca      	lsrs	r2, r1, #31
    7db4:	d000      	beq.n	7db8 <__divsi3+0x10c>
    7db6:	4249      	negs	r1, r1
    7db8:	1003      	asrs	r3, r0, #32
    7dba:	d300      	bcc.n	7dbe <__divsi3+0x112>
    7dbc:	4240      	negs	r0, r0
    7dbe:	4053      	eors	r3, r2
    7dc0:	2200      	movs	r2, #0
    7dc2:	469c      	mov	ip, r3
    7dc4:	0903      	lsrs	r3, r0, #4
    7dc6:	428b      	cmp	r3, r1
    7dc8:	d32d      	bcc.n	7e26 <__divsi3+0x17a>
    7dca:	0a03      	lsrs	r3, r0, #8
    7dcc:	428b      	cmp	r3, r1
    7dce:	d312      	bcc.n	7df6 <__divsi3+0x14a>
    7dd0:	22fc      	movs	r2, #252	; 0xfc
    7dd2:	0189      	lsls	r1, r1, #6
    7dd4:	ba12      	rev	r2, r2
    7dd6:	0a03      	lsrs	r3, r0, #8
    7dd8:	428b      	cmp	r3, r1
    7dda:	d30c      	bcc.n	7df6 <__divsi3+0x14a>
    7ddc:	0189      	lsls	r1, r1, #6
    7dde:	1192      	asrs	r2, r2, #6
    7de0:	428b      	cmp	r3, r1
    7de2:	d308      	bcc.n	7df6 <__divsi3+0x14a>
    7de4:	0189      	lsls	r1, r1, #6
    7de6:	1192      	asrs	r2, r2, #6
    7de8:	428b      	cmp	r3, r1
    7dea:	d304      	bcc.n	7df6 <__divsi3+0x14a>
    7dec:	0189      	lsls	r1, r1, #6
    7dee:	d03a      	beq.n	7e66 <__divsi3+0x1ba>
    7df0:	1192      	asrs	r2, r2, #6
    7df2:	e000      	b.n	7df6 <__divsi3+0x14a>
    7df4:	0989      	lsrs	r1, r1, #6
    7df6:	09c3      	lsrs	r3, r0, #7
    7df8:	428b      	cmp	r3, r1
    7dfa:	d301      	bcc.n	7e00 <__divsi3+0x154>
    7dfc:	01cb      	lsls	r3, r1, #7
    7dfe:	1ac0      	subs	r0, r0, r3
    7e00:	4152      	adcs	r2, r2
    7e02:	0983      	lsrs	r3, r0, #6
    7e04:	428b      	cmp	r3, r1
    7e06:	d301      	bcc.n	7e0c <__divsi3+0x160>
    7e08:	018b      	lsls	r3, r1, #6
    7e0a:	1ac0      	subs	r0, r0, r3
    7e0c:	4152      	adcs	r2, r2
    7e0e:	0943      	lsrs	r3, r0, #5
    7e10:	428b      	cmp	r3, r1
    7e12:	d301      	bcc.n	7e18 <__divsi3+0x16c>
    7e14:	014b      	lsls	r3, r1, #5
    7e16:	1ac0      	subs	r0, r0, r3
    7e18:	4152      	adcs	r2, r2
    7e1a:	0903      	lsrs	r3, r0, #4
    7e1c:	428b      	cmp	r3, r1
    7e1e:	d301      	bcc.n	7e24 <__divsi3+0x178>
    7e20:	010b      	lsls	r3, r1, #4
    7e22:	1ac0      	subs	r0, r0, r3
    7e24:	4152      	adcs	r2, r2
    7e26:	08c3      	lsrs	r3, r0, #3
    7e28:	428b      	cmp	r3, r1
    7e2a:	d301      	bcc.n	7e30 <__divsi3+0x184>
    7e2c:	00cb      	lsls	r3, r1, #3
    7e2e:	1ac0      	subs	r0, r0, r3
    7e30:	4152      	adcs	r2, r2
    7e32:	0883      	lsrs	r3, r0, #2
    7e34:	428b      	cmp	r3, r1
    7e36:	d301      	bcc.n	7e3c <__divsi3+0x190>
    7e38:	008b      	lsls	r3, r1, #2
    7e3a:	1ac0      	subs	r0, r0, r3
    7e3c:	4152      	adcs	r2, r2
    7e3e:	d2d9      	bcs.n	7df4 <__divsi3+0x148>
    7e40:	0843      	lsrs	r3, r0, #1
    7e42:	428b      	cmp	r3, r1
    7e44:	d301      	bcc.n	7e4a <__divsi3+0x19e>
    7e46:	004b      	lsls	r3, r1, #1
    7e48:	1ac0      	subs	r0, r0, r3
    7e4a:	4152      	adcs	r2, r2
    7e4c:	1a41      	subs	r1, r0, r1
    7e4e:	d200      	bcs.n	7e52 <__divsi3+0x1a6>
    7e50:	4601      	mov	r1, r0
    7e52:	4663      	mov	r3, ip
    7e54:	4152      	adcs	r2, r2
    7e56:	105b      	asrs	r3, r3, #1
    7e58:	4610      	mov	r0, r2
    7e5a:	d301      	bcc.n	7e60 <__divsi3+0x1b4>
    7e5c:	4240      	negs	r0, r0
    7e5e:	2b00      	cmp	r3, #0
    7e60:	d500      	bpl.n	7e64 <__divsi3+0x1b8>
    7e62:	4249      	negs	r1, r1
    7e64:	4770      	bx	lr
    7e66:	4663      	mov	r3, ip
    7e68:	105b      	asrs	r3, r3, #1
    7e6a:	d300      	bcc.n	7e6e <__divsi3+0x1c2>
    7e6c:	4240      	negs	r0, r0
    7e6e:	b501      	push	{r0, lr}
    7e70:	2000      	movs	r0, #0
    7e72:	f000 f805 	bl	7e80 <__aeabi_idiv0>
    7e76:	bd02      	pop	{r1, pc}

00007e78 <__aeabi_idivmod>:
    7e78:	2900      	cmp	r1, #0
    7e7a:	d0f8      	beq.n	7e6e <__divsi3+0x1c2>
    7e7c:	e716      	b.n	7cac <__divsi3>
    7e7e:	4770      	bx	lr

00007e80 <__aeabi_idiv0>:
    7e80:	4770      	bx	lr
    7e82:	46c0      	nop			; (mov r8, r8)

00007e84 <__aeabi_lmul>:
    7e84:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e86:	46ce      	mov	lr, r9
    7e88:	4647      	mov	r7, r8
    7e8a:	0415      	lsls	r5, r2, #16
    7e8c:	0c2d      	lsrs	r5, r5, #16
    7e8e:	002e      	movs	r6, r5
    7e90:	b580      	push	{r7, lr}
    7e92:	0407      	lsls	r7, r0, #16
    7e94:	0c14      	lsrs	r4, r2, #16
    7e96:	0c3f      	lsrs	r7, r7, #16
    7e98:	4699      	mov	r9, r3
    7e9a:	0c03      	lsrs	r3, r0, #16
    7e9c:	437e      	muls	r6, r7
    7e9e:	435d      	muls	r5, r3
    7ea0:	4367      	muls	r7, r4
    7ea2:	4363      	muls	r3, r4
    7ea4:	197f      	adds	r7, r7, r5
    7ea6:	0c34      	lsrs	r4, r6, #16
    7ea8:	19e4      	adds	r4, r4, r7
    7eaa:	469c      	mov	ip, r3
    7eac:	42a5      	cmp	r5, r4
    7eae:	d903      	bls.n	7eb8 <__aeabi_lmul+0x34>
    7eb0:	2380      	movs	r3, #128	; 0x80
    7eb2:	025b      	lsls	r3, r3, #9
    7eb4:	4698      	mov	r8, r3
    7eb6:	44c4      	add	ip, r8
    7eb8:	464b      	mov	r3, r9
    7eba:	4351      	muls	r1, r2
    7ebc:	4343      	muls	r3, r0
    7ebe:	0436      	lsls	r6, r6, #16
    7ec0:	0c36      	lsrs	r6, r6, #16
    7ec2:	0c25      	lsrs	r5, r4, #16
    7ec4:	0424      	lsls	r4, r4, #16
    7ec6:	4465      	add	r5, ip
    7ec8:	19a4      	adds	r4, r4, r6
    7eca:	1859      	adds	r1, r3, r1
    7ecc:	1949      	adds	r1, r1, r5
    7ece:	0020      	movs	r0, r4
    7ed0:	bc0c      	pop	{r2, r3}
    7ed2:	4690      	mov	r8, r2
    7ed4:	4699      	mov	r9, r3
    7ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007ed8 <__aeabi_dadd>:
    7ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7eda:	4645      	mov	r5, r8
    7edc:	46de      	mov	lr, fp
    7ede:	4657      	mov	r7, sl
    7ee0:	464e      	mov	r6, r9
    7ee2:	030c      	lsls	r4, r1, #12
    7ee4:	b5e0      	push	{r5, r6, r7, lr}
    7ee6:	004e      	lsls	r6, r1, #1
    7ee8:	0fc9      	lsrs	r1, r1, #31
    7eea:	4688      	mov	r8, r1
    7eec:	000d      	movs	r5, r1
    7eee:	0a61      	lsrs	r1, r4, #9
    7ef0:	0f44      	lsrs	r4, r0, #29
    7ef2:	430c      	orrs	r4, r1
    7ef4:	00c7      	lsls	r7, r0, #3
    7ef6:	0319      	lsls	r1, r3, #12
    7ef8:	0058      	lsls	r0, r3, #1
    7efa:	0fdb      	lsrs	r3, r3, #31
    7efc:	469b      	mov	fp, r3
    7efe:	0a4b      	lsrs	r3, r1, #9
    7f00:	0f51      	lsrs	r1, r2, #29
    7f02:	430b      	orrs	r3, r1
    7f04:	0d76      	lsrs	r6, r6, #21
    7f06:	0d40      	lsrs	r0, r0, #21
    7f08:	0019      	movs	r1, r3
    7f0a:	00d2      	lsls	r2, r2, #3
    7f0c:	45d8      	cmp	r8, fp
    7f0e:	d100      	bne.n	7f12 <__aeabi_dadd+0x3a>
    7f10:	e0ae      	b.n	8070 <__aeabi_dadd+0x198>
    7f12:	1a35      	subs	r5, r6, r0
    7f14:	2d00      	cmp	r5, #0
    7f16:	dc00      	bgt.n	7f1a <__aeabi_dadd+0x42>
    7f18:	e0f6      	b.n	8108 <__aeabi_dadd+0x230>
    7f1a:	2800      	cmp	r0, #0
    7f1c:	d10f      	bne.n	7f3e <__aeabi_dadd+0x66>
    7f1e:	4313      	orrs	r3, r2
    7f20:	d100      	bne.n	7f24 <__aeabi_dadd+0x4c>
    7f22:	e0db      	b.n	80dc <__aeabi_dadd+0x204>
    7f24:	1e6b      	subs	r3, r5, #1
    7f26:	2b00      	cmp	r3, #0
    7f28:	d000      	beq.n	7f2c <__aeabi_dadd+0x54>
    7f2a:	e137      	b.n	819c <__aeabi_dadd+0x2c4>
    7f2c:	1aba      	subs	r2, r7, r2
    7f2e:	4297      	cmp	r7, r2
    7f30:	41bf      	sbcs	r7, r7
    7f32:	1a64      	subs	r4, r4, r1
    7f34:	427f      	negs	r7, r7
    7f36:	1be4      	subs	r4, r4, r7
    7f38:	2601      	movs	r6, #1
    7f3a:	0017      	movs	r7, r2
    7f3c:	e024      	b.n	7f88 <__aeabi_dadd+0xb0>
    7f3e:	4bc6      	ldr	r3, [pc, #792]	; (8258 <__aeabi_dadd+0x380>)
    7f40:	429e      	cmp	r6, r3
    7f42:	d04d      	beq.n	7fe0 <__aeabi_dadd+0x108>
    7f44:	2380      	movs	r3, #128	; 0x80
    7f46:	041b      	lsls	r3, r3, #16
    7f48:	4319      	orrs	r1, r3
    7f4a:	2d38      	cmp	r5, #56	; 0x38
    7f4c:	dd00      	ble.n	7f50 <__aeabi_dadd+0x78>
    7f4e:	e107      	b.n	8160 <__aeabi_dadd+0x288>
    7f50:	2d1f      	cmp	r5, #31
    7f52:	dd00      	ble.n	7f56 <__aeabi_dadd+0x7e>
    7f54:	e138      	b.n	81c8 <__aeabi_dadd+0x2f0>
    7f56:	2020      	movs	r0, #32
    7f58:	1b43      	subs	r3, r0, r5
    7f5a:	469a      	mov	sl, r3
    7f5c:	000b      	movs	r3, r1
    7f5e:	4650      	mov	r0, sl
    7f60:	4083      	lsls	r3, r0
    7f62:	4699      	mov	r9, r3
    7f64:	0013      	movs	r3, r2
    7f66:	4648      	mov	r0, r9
    7f68:	40eb      	lsrs	r3, r5
    7f6a:	4318      	orrs	r0, r3
    7f6c:	0003      	movs	r3, r0
    7f6e:	4650      	mov	r0, sl
    7f70:	4082      	lsls	r2, r0
    7f72:	1e50      	subs	r0, r2, #1
    7f74:	4182      	sbcs	r2, r0
    7f76:	40e9      	lsrs	r1, r5
    7f78:	431a      	orrs	r2, r3
    7f7a:	1aba      	subs	r2, r7, r2
    7f7c:	1a61      	subs	r1, r4, r1
    7f7e:	4297      	cmp	r7, r2
    7f80:	41a4      	sbcs	r4, r4
    7f82:	0017      	movs	r7, r2
    7f84:	4264      	negs	r4, r4
    7f86:	1b0c      	subs	r4, r1, r4
    7f88:	0223      	lsls	r3, r4, #8
    7f8a:	d562      	bpl.n	8052 <__aeabi_dadd+0x17a>
    7f8c:	0264      	lsls	r4, r4, #9
    7f8e:	0a65      	lsrs	r5, r4, #9
    7f90:	2d00      	cmp	r5, #0
    7f92:	d100      	bne.n	7f96 <__aeabi_dadd+0xbe>
    7f94:	e0df      	b.n	8156 <__aeabi_dadd+0x27e>
    7f96:	0028      	movs	r0, r5
    7f98:	f001 fbe4 	bl	9764 <__clzsi2>
    7f9c:	0003      	movs	r3, r0
    7f9e:	3b08      	subs	r3, #8
    7fa0:	2b1f      	cmp	r3, #31
    7fa2:	dd00      	ble.n	7fa6 <__aeabi_dadd+0xce>
    7fa4:	e0d2      	b.n	814c <__aeabi_dadd+0x274>
    7fa6:	2220      	movs	r2, #32
    7fa8:	003c      	movs	r4, r7
    7faa:	1ad2      	subs	r2, r2, r3
    7fac:	409d      	lsls	r5, r3
    7fae:	40d4      	lsrs	r4, r2
    7fb0:	409f      	lsls	r7, r3
    7fb2:	4325      	orrs	r5, r4
    7fb4:	429e      	cmp	r6, r3
    7fb6:	dd00      	ble.n	7fba <__aeabi_dadd+0xe2>
    7fb8:	e0c4      	b.n	8144 <__aeabi_dadd+0x26c>
    7fba:	1b9e      	subs	r6, r3, r6
    7fbc:	1c73      	adds	r3, r6, #1
    7fbe:	2b1f      	cmp	r3, #31
    7fc0:	dd00      	ble.n	7fc4 <__aeabi_dadd+0xec>
    7fc2:	e0f1      	b.n	81a8 <__aeabi_dadd+0x2d0>
    7fc4:	2220      	movs	r2, #32
    7fc6:	0038      	movs	r0, r7
    7fc8:	0029      	movs	r1, r5
    7fca:	1ad2      	subs	r2, r2, r3
    7fcc:	40d8      	lsrs	r0, r3
    7fce:	4091      	lsls	r1, r2
    7fd0:	4097      	lsls	r7, r2
    7fd2:	002c      	movs	r4, r5
    7fd4:	4301      	orrs	r1, r0
    7fd6:	1e78      	subs	r0, r7, #1
    7fd8:	4187      	sbcs	r7, r0
    7fda:	40dc      	lsrs	r4, r3
    7fdc:	2600      	movs	r6, #0
    7fde:	430f      	orrs	r7, r1
    7fe0:	077b      	lsls	r3, r7, #29
    7fe2:	d009      	beq.n	7ff8 <__aeabi_dadd+0x120>
    7fe4:	230f      	movs	r3, #15
    7fe6:	403b      	ands	r3, r7
    7fe8:	2b04      	cmp	r3, #4
    7fea:	d005      	beq.n	7ff8 <__aeabi_dadd+0x120>
    7fec:	1d3b      	adds	r3, r7, #4
    7fee:	42bb      	cmp	r3, r7
    7ff0:	41bf      	sbcs	r7, r7
    7ff2:	427f      	negs	r7, r7
    7ff4:	19e4      	adds	r4, r4, r7
    7ff6:	001f      	movs	r7, r3
    7ff8:	0223      	lsls	r3, r4, #8
    7ffa:	d52c      	bpl.n	8056 <__aeabi_dadd+0x17e>
    7ffc:	4b96      	ldr	r3, [pc, #600]	; (8258 <__aeabi_dadd+0x380>)
    7ffe:	3601      	adds	r6, #1
    8000:	429e      	cmp	r6, r3
    8002:	d100      	bne.n	8006 <__aeabi_dadd+0x12e>
    8004:	e09a      	b.n	813c <__aeabi_dadd+0x264>
    8006:	4645      	mov	r5, r8
    8008:	4b94      	ldr	r3, [pc, #592]	; (825c <__aeabi_dadd+0x384>)
    800a:	08ff      	lsrs	r7, r7, #3
    800c:	401c      	ands	r4, r3
    800e:	0760      	lsls	r0, r4, #29
    8010:	0576      	lsls	r6, r6, #21
    8012:	0264      	lsls	r4, r4, #9
    8014:	4307      	orrs	r7, r0
    8016:	0b24      	lsrs	r4, r4, #12
    8018:	0d76      	lsrs	r6, r6, #21
    801a:	2100      	movs	r1, #0
    801c:	0324      	lsls	r4, r4, #12
    801e:	0b23      	lsrs	r3, r4, #12
    8020:	0d0c      	lsrs	r4, r1, #20
    8022:	4a8f      	ldr	r2, [pc, #572]	; (8260 <__aeabi_dadd+0x388>)
    8024:	0524      	lsls	r4, r4, #20
    8026:	431c      	orrs	r4, r3
    8028:	4014      	ands	r4, r2
    802a:	0533      	lsls	r3, r6, #20
    802c:	4323      	orrs	r3, r4
    802e:	005b      	lsls	r3, r3, #1
    8030:	07ed      	lsls	r5, r5, #31
    8032:	085b      	lsrs	r3, r3, #1
    8034:	432b      	orrs	r3, r5
    8036:	0038      	movs	r0, r7
    8038:	0019      	movs	r1, r3
    803a:	bc3c      	pop	{r2, r3, r4, r5}
    803c:	4690      	mov	r8, r2
    803e:	4699      	mov	r9, r3
    8040:	46a2      	mov	sl, r4
    8042:	46ab      	mov	fp, r5
    8044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8046:	4664      	mov	r4, ip
    8048:	4304      	orrs	r4, r0
    804a:	d100      	bne.n	804e <__aeabi_dadd+0x176>
    804c:	e211      	b.n	8472 <__aeabi_dadd+0x59a>
    804e:	0004      	movs	r4, r0
    8050:	4667      	mov	r7, ip
    8052:	077b      	lsls	r3, r7, #29
    8054:	d1c6      	bne.n	7fe4 <__aeabi_dadd+0x10c>
    8056:	4645      	mov	r5, r8
    8058:	0760      	lsls	r0, r4, #29
    805a:	08ff      	lsrs	r7, r7, #3
    805c:	4307      	orrs	r7, r0
    805e:	08e4      	lsrs	r4, r4, #3
    8060:	4b7d      	ldr	r3, [pc, #500]	; (8258 <__aeabi_dadd+0x380>)
    8062:	429e      	cmp	r6, r3
    8064:	d030      	beq.n	80c8 <__aeabi_dadd+0x1f0>
    8066:	0324      	lsls	r4, r4, #12
    8068:	0576      	lsls	r6, r6, #21
    806a:	0b24      	lsrs	r4, r4, #12
    806c:	0d76      	lsrs	r6, r6, #21
    806e:	e7d4      	b.n	801a <__aeabi_dadd+0x142>
    8070:	1a33      	subs	r3, r6, r0
    8072:	469a      	mov	sl, r3
    8074:	2b00      	cmp	r3, #0
    8076:	dd78      	ble.n	816a <__aeabi_dadd+0x292>
    8078:	2800      	cmp	r0, #0
    807a:	d031      	beq.n	80e0 <__aeabi_dadd+0x208>
    807c:	4876      	ldr	r0, [pc, #472]	; (8258 <__aeabi_dadd+0x380>)
    807e:	4286      	cmp	r6, r0
    8080:	d0ae      	beq.n	7fe0 <__aeabi_dadd+0x108>
    8082:	2080      	movs	r0, #128	; 0x80
    8084:	0400      	lsls	r0, r0, #16
    8086:	4301      	orrs	r1, r0
    8088:	4653      	mov	r3, sl
    808a:	2b38      	cmp	r3, #56	; 0x38
    808c:	dc00      	bgt.n	8090 <__aeabi_dadd+0x1b8>
    808e:	e0e9      	b.n	8264 <__aeabi_dadd+0x38c>
    8090:	430a      	orrs	r2, r1
    8092:	1e51      	subs	r1, r2, #1
    8094:	418a      	sbcs	r2, r1
    8096:	2100      	movs	r1, #0
    8098:	19d2      	adds	r2, r2, r7
    809a:	42ba      	cmp	r2, r7
    809c:	41bf      	sbcs	r7, r7
    809e:	1909      	adds	r1, r1, r4
    80a0:	427c      	negs	r4, r7
    80a2:	0017      	movs	r7, r2
    80a4:	190c      	adds	r4, r1, r4
    80a6:	0223      	lsls	r3, r4, #8
    80a8:	d5d3      	bpl.n	8052 <__aeabi_dadd+0x17a>
    80aa:	4b6b      	ldr	r3, [pc, #428]	; (8258 <__aeabi_dadd+0x380>)
    80ac:	3601      	adds	r6, #1
    80ae:	429e      	cmp	r6, r3
    80b0:	d100      	bne.n	80b4 <__aeabi_dadd+0x1dc>
    80b2:	e13a      	b.n	832a <__aeabi_dadd+0x452>
    80b4:	2001      	movs	r0, #1
    80b6:	4b69      	ldr	r3, [pc, #420]	; (825c <__aeabi_dadd+0x384>)
    80b8:	401c      	ands	r4, r3
    80ba:	087b      	lsrs	r3, r7, #1
    80bc:	4007      	ands	r7, r0
    80be:	431f      	orrs	r7, r3
    80c0:	07e0      	lsls	r0, r4, #31
    80c2:	4307      	orrs	r7, r0
    80c4:	0864      	lsrs	r4, r4, #1
    80c6:	e78b      	b.n	7fe0 <__aeabi_dadd+0x108>
    80c8:	0023      	movs	r3, r4
    80ca:	433b      	orrs	r3, r7
    80cc:	d100      	bne.n	80d0 <__aeabi_dadd+0x1f8>
    80ce:	e1cb      	b.n	8468 <__aeabi_dadd+0x590>
    80d0:	2280      	movs	r2, #128	; 0x80
    80d2:	0312      	lsls	r2, r2, #12
    80d4:	4314      	orrs	r4, r2
    80d6:	0324      	lsls	r4, r4, #12
    80d8:	0b24      	lsrs	r4, r4, #12
    80da:	e79e      	b.n	801a <__aeabi_dadd+0x142>
    80dc:	002e      	movs	r6, r5
    80de:	e77f      	b.n	7fe0 <__aeabi_dadd+0x108>
    80e0:	0008      	movs	r0, r1
    80e2:	4310      	orrs	r0, r2
    80e4:	d100      	bne.n	80e8 <__aeabi_dadd+0x210>
    80e6:	e0b4      	b.n	8252 <__aeabi_dadd+0x37a>
    80e8:	1e58      	subs	r0, r3, #1
    80ea:	2800      	cmp	r0, #0
    80ec:	d000      	beq.n	80f0 <__aeabi_dadd+0x218>
    80ee:	e0de      	b.n	82ae <__aeabi_dadd+0x3d6>
    80f0:	18ba      	adds	r2, r7, r2
    80f2:	42ba      	cmp	r2, r7
    80f4:	419b      	sbcs	r3, r3
    80f6:	1864      	adds	r4, r4, r1
    80f8:	425b      	negs	r3, r3
    80fa:	18e4      	adds	r4, r4, r3
    80fc:	0017      	movs	r7, r2
    80fe:	2601      	movs	r6, #1
    8100:	0223      	lsls	r3, r4, #8
    8102:	d5a6      	bpl.n	8052 <__aeabi_dadd+0x17a>
    8104:	2602      	movs	r6, #2
    8106:	e7d5      	b.n	80b4 <__aeabi_dadd+0x1dc>
    8108:	2d00      	cmp	r5, #0
    810a:	d16e      	bne.n	81ea <__aeabi_dadd+0x312>
    810c:	1c70      	adds	r0, r6, #1
    810e:	0540      	lsls	r0, r0, #21
    8110:	0d40      	lsrs	r0, r0, #21
    8112:	2801      	cmp	r0, #1
    8114:	dc00      	bgt.n	8118 <__aeabi_dadd+0x240>
    8116:	e0f9      	b.n	830c <__aeabi_dadd+0x434>
    8118:	1ab8      	subs	r0, r7, r2
    811a:	4684      	mov	ip, r0
    811c:	4287      	cmp	r7, r0
    811e:	4180      	sbcs	r0, r0
    8120:	1ae5      	subs	r5, r4, r3
    8122:	4240      	negs	r0, r0
    8124:	1a2d      	subs	r5, r5, r0
    8126:	0228      	lsls	r0, r5, #8
    8128:	d400      	bmi.n	812c <__aeabi_dadd+0x254>
    812a:	e089      	b.n	8240 <__aeabi_dadd+0x368>
    812c:	1bd7      	subs	r7, r2, r7
    812e:	42ba      	cmp	r2, r7
    8130:	4192      	sbcs	r2, r2
    8132:	1b1c      	subs	r4, r3, r4
    8134:	4252      	negs	r2, r2
    8136:	1aa5      	subs	r5, r4, r2
    8138:	46d8      	mov	r8, fp
    813a:	e729      	b.n	7f90 <__aeabi_dadd+0xb8>
    813c:	4645      	mov	r5, r8
    813e:	2400      	movs	r4, #0
    8140:	2700      	movs	r7, #0
    8142:	e76a      	b.n	801a <__aeabi_dadd+0x142>
    8144:	4c45      	ldr	r4, [pc, #276]	; (825c <__aeabi_dadd+0x384>)
    8146:	1af6      	subs	r6, r6, r3
    8148:	402c      	ands	r4, r5
    814a:	e749      	b.n	7fe0 <__aeabi_dadd+0x108>
    814c:	003d      	movs	r5, r7
    814e:	3828      	subs	r0, #40	; 0x28
    8150:	4085      	lsls	r5, r0
    8152:	2700      	movs	r7, #0
    8154:	e72e      	b.n	7fb4 <__aeabi_dadd+0xdc>
    8156:	0038      	movs	r0, r7
    8158:	f001 fb04 	bl	9764 <__clzsi2>
    815c:	3020      	adds	r0, #32
    815e:	e71d      	b.n	7f9c <__aeabi_dadd+0xc4>
    8160:	430a      	orrs	r2, r1
    8162:	1e51      	subs	r1, r2, #1
    8164:	418a      	sbcs	r2, r1
    8166:	2100      	movs	r1, #0
    8168:	e707      	b.n	7f7a <__aeabi_dadd+0xa2>
    816a:	2b00      	cmp	r3, #0
    816c:	d000      	beq.n	8170 <__aeabi_dadd+0x298>
    816e:	e0f3      	b.n	8358 <__aeabi_dadd+0x480>
    8170:	1c70      	adds	r0, r6, #1
    8172:	0543      	lsls	r3, r0, #21
    8174:	0d5b      	lsrs	r3, r3, #21
    8176:	2b01      	cmp	r3, #1
    8178:	dc00      	bgt.n	817c <__aeabi_dadd+0x2a4>
    817a:	e0ad      	b.n	82d8 <__aeabi_dadd+0x400>
    817c:	4b36      	ldr	r3, [pc, #216]	; (8258 <__aeabi_dadd+0x380>)
    817e:	4298      	cmp	r0, r3
    8180:	d100      	bne.n	8184 <__aeabi_dadd+0x2ac>
    8182:	e0d1      	b.n	8328 <__aeabi_dadd+0x450>
    8184:	18ba      	adds	r2, r7, r2
    8186:	42ba      	cmp	r2, r7
    8188:	41bf      	sbcs	r7, r7
    818a:	1864      	adds	r4, r4, r1
    818c:	427f      	negs	r7, r7
    818e:	19e4      	adds	r4, r4, r7
    8190:	07e7      	lsls	r7, r4, #31
    8192:	0852      	lsrs	r2, r2, #1
    8194:	4317      	orrs	r7, r2
    8196:	0864      	lsrs	r4, r4, #1
    8198:	0006      	movs	r6, r0
    819a:	e721      	b.n	7fe0 <__aeabi_dadd+0x108>
    819c:	482e      	ldr	r0, [pc, #184]	; (8258 <__aeabi_dadd+0x380>)
    819e:	4285      	cmp	r5, r0
    81a0:	d100      	bne.n	81a4 <__aeabi_dadd+0x2cc>
    81a2:	e093      	b.n	82cc <__aeabi_dadd+0x3f4>
    81a4:	001d      	movs	r5, r3
    81a6:	e6d0      	b.n	7f4a <__aeabi_dadd+0x72>
    81a8:	0029      	movs	r1, r5
    81aa:	3e1f      	subs	r6, #31
    81ac:	40f1      	lsrs	r1, r6
    81ae:	2b20      	cmp	r3, #32
    81b0:	d100      	bne.n	81b4 <__aeabi_dadd+0x2dc>
    81b2:	e08d      	b.n	82d0 <__aeabi_dadd+0x3f8>
    81b4:	2240      	movs	r2, #64	; 0x40
    81b6:	1ad3      	subs	r3, r2, r3
    81b8:	409d      	lsls	r5, r3
    81ba:	432f      	orrs	r7, r5
    81bc:	1e7d      	subs	r5, r7, #1
    81be:	41af      	sbcs	r7, r5
    81c0:	2400      	movs	r4, #0
    81c2:	430f      	orrs	r7, r1
    81c4:	2600      	movs	r6, #0
    81c6:	e744      	b.n	8052 <__aeabi_dadd+0x17a>
    81c8:	002b      	movs	r3, r5
    81ca:	0008      	movs	r0, r1
    81cc:	3b20      	subs	r3, #32
    81ce:	40d8      	lsrs	r0, r3
    81d0:	0003      	movs	r3, r0
    81d2:	2d20      	cmp	r5, #32
    81d4:	d100      	bne.n	81d8 <__aeabi_dadd+0x300>
    81d6:	e07d      	b.n	82d4 <__aeabi_dadd+0x3fc>
    81d8:	2040      	movs	r0, #64	; 0x40
    81da:	1b45      	subs	r5, r0, r5
    81dc:	40a9      	lsls	r1, r5
    81de:	430a      	orrs	r2, r1
    81e0:	1e51      	subs	r1, r2, #1
    81e2:	418a      	sbcs	r2, r1
    81e4:	2100      	movs	r1, #0
    81e6:	431a      	orrs	r2, r3
    81e8:	e6c7      	b.n	7f7a <__aeabi_dadd+0xa2>
    81ea:	2e00      	cmp	r6, #0
    81ec:	d050      	beq.n	8290 <__aeabi_dadd+0x3b8>
    81ee:	4e1a      	ldr	r6, [pc, #104]	; (8258 <__aeabi_dadd+0x380>)
    81f0:	42b0      	cmp	r0, r6
    81f2:	d057      	beq.n	82a4 <__aeabi_dadd+0x3cc>
    81f4:	2680      	movs	r6, #128	; 0x80
    81f6:	426b      	negs	r3, r5
    81f8:	4699      	mov	r9, r3
    81fa:	0436      	lsls	r6, r6, #16
    81fc:	4334      	orrs	r4, r6
    81fe:	464b      	mov	r3, r9
    8200:	2b38      	cmp	r3, #56	; 0x38
    8202:	dd00      	ble.n	8206 <__aeabi_dadd+0x32e>
    8204:	e0d6      	b.n	83b4 <__aeabi_dadd+0x4dc>
    8206:	2b1f      	cmp	r3, #31
    8208:	dd00      	ble.n	820c <__aeabi_dadd+0x334>
    820a:	e135      	b.n	8478 <__aeabi_dadd+0x5a0>
    820c:	2620      	movs	r6, #32
    820e:	1af5      	subs	r5, r6, r3
    8210:	0026      	movs	r6, r4
    8212:	40ae      	lsls	r6, r5
    8214:	46b2      	mov	sl, r6
    8216:	003e      	movs	r6, r7
    8218:	40de      	lsrs	r6, r3
    821a:	46ac      	mov	ip, r5
    821c:	0035      	movs	r5, r6
    821e:	4656      	mov	r6, sl
    8220:	432e      	orrs	r6, r5
    8222:	4665      	mov	r5, ip
    8224:	40af      	lsls	r7, r5
    8226:	1e7d      	subs	r5, r7, #1
    8228:	41af      	sbcs	r7, r5
    822a:	40dc      	lsrs	r4, r3
    822c:	4337      	orrs	r7, r6
    822e:	1bd7      	subs	r7, r2, r7
    8230:	42ba      	cmp	r2, r7
    8232:	4192      	sbcs	r2, r2
    8234:	1b0c      	subs	r4, r1, r4
    8236:	4252      	negs	r2, r2
    8238:	1aa4      	subs	r4, r4, r2
    823a:	0006      	movs	r6, r0
    823c:	46d8      	mov	r8, fp
    823e:	e6a3      	b.n	7f88 <__aeabi_dadd+0xb0>
    8240:	4664      	mov	r4, ip
    8242:	4667      	mov	r7, ip
    8244:	432c      	orrs	r4, r5
    8246:	d000      	beq.n	824a <__aeabi_dadd+0x372>
    8248:	e6a2      	b.n	7f90 <__aeabi_dadd+0xb8>
    824a:	2500      	movs	r5, #0
    824c:	2600      	movs	r6, #0
    824e:	2700      	movs	r7, #0
    8250:	e706      	b.n	8060 <__aeabi_dadd+0x188>
    8252:	001e      	movs	r6, r3
    8254:	e6c4      	b.n	7fe0 <__aeabi_dadd+0x108>
    8256:	46c0      	nop			; (mov r8, r8)
    8258:	000007ff 	.word	0x000007ff
    825c:	ff7fffff 	.word	0xff7fffff
    8260:	800fffff 	.word	0x800fffff
    8264:	2b1f      	cmp	r3, #31
    8266:	dc63      	bgt.n	8330 <__aeabi_dadd+0x458>
    8268:	2020      	movs	r0, #32
    826a:	1ac3      	subs	r3, r0, r3
    826c:	0008      	movs	r0, r1
    826e:	4098      	lsls	r0, r3
    8270:	469c      	mov	ip, r3
    8272:	4683      	mov	fp, r0
    8274:	4653      	mov	r3, sl
    8276:	0010      	movs	r0, r2
    8278:	40d8      	lsrs	r0, r3
    827a:	0003      	movs	r3, r0
    827c:	4658      	mov	r0, fp
    827e:	4318      	orrs	r0, r3
    8280:	4663      	mov	r3, ip
    8282:	409a      	lsls	r2, r3
    8284:	1e53      	subs	r3, r2, #1
    8286:	419a      	sbcs	r2, r3
    8288:	4653      	mov	r3, sl
    828a:	4302      	orrs	r2, r0
    828c:	40d9      	lsrs	r1, r3
    828e:	e703      	b.n	8098 <__aeabi_dadd+0x1c0>
    8290:	0026      	movs	r6, r4
    8292:	433e      	orrs	r6, r7
    8294:	d006      	beq.n	82a4 <__aeabi_dadd+0x3cc>
    8296:	43eb      	mvns	r3, r5
    8298:	4699      	mov	r9, r3
    829a:	2b00      	cmp	r3, #0
    829c:	d0c7      	beq.n	822e <__aeabi_dadd+0x356>
    829e:	4e94      	ldr	r6, [pc, #592]	; (84f0 <__aeabi_dadd+0x618>)
    82a0:	42b0      	cmp	r0, r6
    82a2:	d1ac      	bne.n	81fe <__aeabi_dadd+0x326>
    82a4:	000c      	movs	r4, r1
    82a6:	0017      	movs	r7, r2
    82a8:	0006      	movs	r6, r0
    82aa:	46d8      	mov	r8, fp
    82ac:	e698      	b.n	7fe0 <__aeabi_dadd+0x108>
    82ae:	4b90      	ldr	r3, [pc, #576]	; (84f0 <__aeabi_dadd+0x618>)
    82b0:	459a      	cmp	sl, r3
    82b2:	d00b      	beq.n	82cc <__aeabi_dadd+0x3f4>
    82b4:	4682      	mov	sl, r0
    82b6:	e6e7      	b.n	8088 <__aeabi_dadd+0x1b0>
    82b8:	2800      	cmp	r0, #0
    82ba:	d000      	beq.n	82be <__aeabi_dadd+0x3e6>
    82bc:	e09e      	b.n	83fc <__aeabi_dadd+0x524>
    82be:	0018      	movs	r0, r3
    82c0:	4310      	orrs	r0, r2
    82c2:	d100      	bne.n	82c6 <__aeabi_dadd+0x3ee>
    82c4:	e0e9      	b.n	849a <__aeabi_dadd+0x5c2>
    82c6:	001c      	movs	r4, r3
    82c8:	0017      	movs	r7, r2
    82ca:	46d8      	mov	r8, fp
    82cc:	4e88      	ldr	r6, [pc, #544]	; (84f0 <__aeabi_dadd+0x618>)
    82ce:	e687      	b.n	7fe0 <__aeabi_dadd+0x108>
    82d0:	2500      	movs	r5, #0
    82d2:	e772      	b.n	81ba <__aeabi_dadd+0x2e2>
    82d4:	2100      	movs	r1, #0
    82d6:	e782      	b.n	81de <__aeabi_dadd+0x306>
    82d8:	0023      	movs	r3, r4
    82da:	433b      	orrs	r3, r7
    82dc:	2e00      	cmp	r6, #0
    82de:	d000      	beq.n	82e2 <__aeabi_dadd+0x40a>
    82e0:	e0ab      	b.n	843a <__aeabi_dadd+0x562>
    82e2:	2b00      	cmp	r3, #0
    82e4:	d100      	bne.n	82e8 <__aeabi_dadd+0x410>
    82e6:	e0e7      	b.n	84b8 <__aeabi_dadd+0x5e0>
    82e8:	000b      	movs	r3, r1
    82ea:	4313      	orrs	r3, r2
    82ec:	d100      	bne.n	82f0 <__aeabi_dadd+0x418>
    82ee:	e677      	b.n	7fe0 <__aeabi_dadd+0x108>
    82f0:	18ba      	adds	r2, r7, r2
    82f2:	42ba      	cmp	r2, r7
    82f4:	41bf      	sbcs	r7, r7
    82f6:	1864      	adds	r4, r4, r1
    82f8:	427f      	negs	r7, r7
    82fa:	19e4      	adds	r4, r4, r7
    82fc:	0223      	lsls	r3, r4, #8
    82fe:	d400      	bmi.n	8302 <__aeabi_dadd+0x42a>
    8300:	e0f2      	b.n	84e8 <__aeabi_dadd+0x610>
    8302:	4b7c      	ldr	r3, [pc, #496]	; (84f4 <__aeabi_dadd+0x61c>)
    8304:	0017      	movs	r7, r2
    8306:	401c      	ands	r4, r3
    8308:	0006      	movs	r6, r0
    830a:	e669      	b.n	7fe0 <__aeabi_dadd+0x108>
    830c:	0020      	movs	r0, r4
    830e:	4338      	orrs	r0, r7
    8310:	2e00      	cmp	r6, #0
    8312:	d1d1      	bne.n	82b8 <__aeabi_dadd+0x3e0>
    8314:	2800      	cmp	r0, #0
    8316:	d15b      	bne.n	83d0 <__aeabi_dadd+0x4f8>
    8318:	001c      	movs	r4, r3
    831a:	4314      	orrs	r4, r2
    831c:	d100      	bne.n	8320 <__aeabi_dadd+0x448>
    831e:	e0a8      	b.n	8472 <__aeabi_dadd+0x59a>
    8320:	001c      	movs	r4, r3
    8322:	0017      	movs	r7, r2
    8324:	46d8      	mov	r8, fp
    8326:	e65b      	b.n	7fe0 <__aeabi_dadd+0x108>
    8328:	0006      	movs	r6, r0
    832a:	2400      	movs	r4, #0
    832c:	2700      	movs	r7, #0
    832e:	e697      	b.n	8060 <__aeabi_dadd+0x188>
    8330:	4650      	mov	r0, sl
    8332:	000b      	movs	r3, r1
    8334:	3820      	subs	r0, #32
    8336:	40c3      	lsrs	r3, r0
    8338:	4699      	mov	r9, r3
    833a:	4653      	mov	r3, sl
    833c:	2b20      	cmp	r3, #32
    833e:	d100      	bne.n	8342 <__aeabi_dadd+0x46a>
    8340:	e095      	b.n	846e <__aeabi_dadd+0x596>
    8342:	2340      	movs	r3, #64	; 0x40
    8344:	4650      	mov	r0, sl
    8346:	1a1b      	subs	r3, r3, r0
    8348:	4099      	lsls	r1, r3
    834a:	430a      	orrs	r2, r1
    834c:	1e51      	subs	r1, r2, #1
    834e:	418a      	sbcs	r2, r1
    8350:	464b      	mov	r3, r9
    8352:	2100      	movs	r1, #0
    8354:	431a      	orrs	r2, r3
    8356:	e69f      	b.n	8098 <__aeabi_dadd+0x1c0>
    8358:	2e00      	cmp	r6, #0
    835a:	d130      	bne.n	83be <__aeabi_dadd+0x4e6>
    835c:	0026      	movs	r6, r4
    835e:	433e      	orrs	r6, r7
    8360:	d067      	beq.n	8432 <__aeabi_dadd+0x55a>
    8362:	43db      	mvns	r3, r3
    8364:	469a      	mov	sl, r3
    8366:	2b00      	cmp	r3, #0
    8368:	d01c      	beq.n	83a4 <__aeabi_dadd+0x4cc>
    836a:	4e61      	ldr	r6, [pc, #388]	; (84f0 <__aeabi_dadd+0x618>)
    836c:	42b0      	cmp	r0, r6
    836e:	d060      	beq.n	8432 <__aeabi_dadd+0x55a>
    8370:	4653      	mov	r3, sl
    8372:	2b38      	cmp	r3, #56	; 0x38
    8374:	dd00      	ble.n	8378 <__aeabi_dadd+0x4a0>
    8376:	e096      	b.n	84a6 <__aeabi_dadd+0x5ce>
    8378:	2b1f      	cmp	r3, #31
    837a:	dd00      	ble.n	837e <__aeabi_dadd+0x4a6>
    837c:	e09f      	b.n	84be <__aeabi_dadd+0x5e6>
    837e:	2620      	movs	r6, #32
    8380:	1af3      	subs	r3, r6, r3
    8382:	0026      	movs	r6, r4
    8384:	409e      	lsls	r6, r3
    8386:	469c      	mov	ip, r3
    8388:	46b3      	mov	fp, r6
    838a:	4653      	mov	r3, sl
    838c:	003e      	movs	r6, r7
    838e:	40de      	lsrs	r6, r3
    8390:	0033      	movs	r3, r6
    8392:	465e      	mov	r6, fp
    8394:	431e      	orrs	r6, r3
    8396:	4663      	mov	r3, ip
    8398:	409f      	lsls	r7, r3
    839a:	1e7b      	subs	r3, r7, #1
    839c:	419f      	sbcs	r7, r3
    839e:	4653      	mov	r3, sl
    83a0:	40dc      	lsrs	r4, r3
    83a2:	4337      	orrs	r7, r6
    83a4:	18bf      	adds	r7, r7, r2
    83a6:	4297      	cmp	r7, r2
    83a8:	4192      	sbcs	r2, r2
    83aa:	1864      	adds	r4, r4, r1
    83ac:	4252      	negs	r2, r2
    83ae:	18a4      	adds	r4, r4, r2
    83b0:	0006      	movs	r6, r0
    83b2:	e678      	b.n	80a6 <__aeabi_dadd+0x1ce>
    83b4:	4327      	orrs	r7, r4
    83b6:	1e7c      	subs	r4, r7, #1
    83b8:	41a7      	sbcs	r7, r4
    83ba:	2400      	movs	r4, #0
    83bc:	e737      	b.n	822e <__aeabi_dadd+0x356>
    83be:	4e4c      	ldr	r6, [pc, #304]	; (84f0 <__aeabi_dadd+0x618>)
    83c0:	42b0      	cmp	r0, r6
    83c2:	d036      	beq.n	8432 <__aeabi_dadd+0x55a>
    83c4:	2680      	movs	r6, #128	; 0x80
    83c6:	425b      	negs	r3, r3
    83c8:	0436      	lsls	r6, r6, #16
    83ca:	469a      	mov	sl, r3
    83cc:	4334      	orrs	r4, r6
    83ce:	e7cf      	b.n	8370 <__aeabi_dadd+0x498>
    83d0:	0018      	movs	r0, r3
    83d2:	4310      	orrs	r0, r2
    83d4:	d100      	bne.n	83d8 <__aeabi_dadd+0x500>
    83d6:	e603      	b.n	7fe0 <__aeabi_dadd+0x108>
    83d8:	1ab8      	subs	r0, r7, r2
    83da:	4684      	mov	ip, r0
    83dc:	4567      	cmp	r7, ip
    83de:	41ad      	sbcs	r5, r5
    83e0:	1ae0      	subs	r0, r4, r3
    83e2:	426d      	negs	r5, r5
    83e4:	1b40      	subs	r0, r0, r5
    83e6:	0205      	lsls	r5, r0, #8
    83e8:	d400      	bmi.n	83ec <__aeabi_dadd+0x514>
    83ea:	e62c      	b.n	8046 <__aeabi_dadd+0x16e>
    83ec:	1bd7      	subs	r7, r2, r7
    83ee:	42ba      	cmp	r2, r7
    83f0:	4192      	sbcs	r2, r2
    83f2:	1b1c      	subs	r4, r3, r4
    83f4:	4252      	negs	r2, r2
    83f6:	1aa4      	subs	r4, r4, r2
    83f8:	46d8      	mov	r8, fp
    83fa:	e5f1      	b.n	7fe0 <__aeabi_dadd+0x108>
    83fc:	0018      	movs	r0, r3
    83fe:	4310      	orrs	r0, r2
    8400:	d100      	bne.n	8404 <__aeabi_dadd+0x52c>
    8402:	e763      	b.n	82cc <__aeabi_dadd+0x3f4>
    8404:	08f8      	lsrs	r0, r7, #3
    8406:	0767      	lsls	r7, r4, #29
    8408:	4307      	orrs	r7, r0
    840a:	2080      	movs	r0, #128	; 0x80
    840c:	08e4      	lsrs	r4, r4, #3
    840e:	0300      	lsls	r0, r0, #12
    8410:	4204      	tst	r4, r0
    8412:	d008      	beq.n	8426 <__aeabi_dadd+0x54e>
    8414:	08dd      	lsrs	r5, r3, #3
    8416:	4205      	tst	r5, r0
    8418:	d105      	bne.n	8426 <__aeabi_dadd+0x54e>
    841a:	08d2      	lsrs	r2, r2, #3
    841c:	0759      	lsls	r1, r3, #29
    841e:	4311      	orrs	r1, r2
    8420:	000f      	movs	r7, r1
    8422:	002c      	movs	r4, r5
    8424:	46d8      	mov	r8, fp
    8426:	0f7b      	lsrs	r3, r7, #29
    8428:	00e4      	lsls	r4, r4, #3
    842a:	431c      	orrs	r4, r3
    842c:	00ff      	lsls	r7, r7, #3
    842e:	4e30      	ldr	r6, [pc, #192]	; (84f0 <__aeabi_dadd+0x618>)
    8430:	e5d6      	b.n	7fe0 <__aeabi_dadd+0x108>
    8432:	000c      	movs	r4, r1
    8434:	0017      	movs	r7, r2
    8436:	0006      	movs	r6, r0
    8438:	e5d2      	b.n	7fe0 <__aeabi_dadd+0x108>
    843a:	2b00      	cmp	r3, #0
    843c:	d038      	beq.n	84b0 <__aeabi_dadd+0x5d8>
    843e:	000b      	movs	r3, r1
    8440:	4313      	orrs	r3, r2
    8442:	d100      	bne.n	8446 <__aeabi_dadd+0x56e>
    8444:	e742      	b.n	82cc <__aeabi_dadd+0x3f4>
    8446:	08f8      	lsrs	r0, r7, #3
    8448:	0767      	lsls	r7, r4, #29
    844a:	4307      	orrs	r7, r0
    844c:	2080      	movs	r0, #128	; 0x80
    844e:	08e4      	lsrs	r4, r4, #3
    8450:	0300      	lsls	r0, r0, #12
    8452:	4204      	tst	r4, r0
    8454:	d0e7      	beq.n	8426 <__aeabi_dadd+0x54e>
    8456:	08cb      	lsrs	r3, r1, #3
    8458:	4203      	tst	r3, r0
    845a:	d1e4      	bne.n	8426 <__aeabi_dadd+0x54e>
    845c:	08d2      	lsrs	r2, r2, #3
    845e:	0749      	lsls	r1, r1, #29
    8460:	4311      	orrs	r1, r2
    8462:	000f      	movs	r7, r1
    8464:	001c      	movs	r4, r3
    8466:	e7de      	b.n	8426 <__aeabi_dadd+0x54e>
    8468:	2700      	movs	r7, #0
    846a:	2400      	movs	r4, #0
    846c:	e5d5      	b.n	801a <__aeabi_dadd+0x142>
    846e:	2100      	movs	r1, #0
    8470:	e76b      	b.n	834a <__aeabi_dadd+0x472>
    8472:	2500      	movs	r5, #0
    8474:	2700      	movs	r7, #0
    8476:	e5f3      	b.n	8060 <__aeabi_dadd+0x188>
    8478:	464e      	mov	r6, r9
    847a:	0025      	movs	r5, r4
    847c:	3e20      	subs	r6, #32
    847e:	40f5      	lsrs	r5, r6
    8480:	464b      	mov	r3, r9
    8482:	002e      	movs	r6, r5
    8484:	2b20      	cmp	r3, #32
    8486:	d02d      	beq.n	84e4 <__aeabi_dadd+0x60c>
    8488:	2540      	movs	r5, #64	; 0x40
    848a:	1aed      	subs	r5, r5, r3
    848c:	40ac      	lsls	r4, r5
    848e:	4327      	orrs	r7, r4
    8490:	1e7c      	subs	r4, r7, #1
    8492:	41a7      	sbcs	r7, r4
    8494:	2400      	movs	r4, #0
    8496:	4337      	orrs	r7, r6
    8498:	e6c9      	b.n	822e <__aeabi_dadd+0x356>
    849a:	2480      	movs	r4, #128	; 0x80
    849c:	2500      	movs	r5, #0
    849e:	0324      	lsls	r4, r4, #12
    84a0:	4e13      	ldr	r6, [pc, #76]	; (84f0 <__aeabi_dadd+0x618>)
    84a2:	2700      	movs	r7, #0
    84a4:	e5dc      	b.n	8060 <__aeabi_dadd+0x188>
    84a6:	4327      	orrs	r7, r4
    84a8:	1e7c      	subs	r4, r7, #1
    84aa:	41a7      	sbcs	r7, r4
    84ac:	2400      	movs	r4, #0
    84ae:	e779      	b.n	83a4 <__aeabi_dadd+0x4cc>
    84b0:	000c      	movs	r4, r1
    84b2:	0017      	movs	r7, r2
    84b4:	4e0e      	ldr	r6, [pc, #56]	; (84f0 <__aeabi_dadd+0x618>)
    84b6:	e593      	b.n	7fe0 <__aeabi_dadd+0x108>
    84b8:	000c      	movs	r4, r1
    84ba:	0017      	movs	r7, r2
    84bc:	e590      	b.n	7fe0 <__aeabi_dadd+0x108>
    84be:	4656      	mov	r6, sl
    84c0:	0023      	movs	r3, r4
    84c2:	3e20      	subs	r6, #32
    84c4:	40f3      	lsrs	r3, r6
    84c6:	4699      	mov	r9, r3
    84c8:	4653      	mov	r3, sl
    84ca:	2b20      	cmp	r3, #32
    84cc:	d00e      	beq.n	84ec <__aeabi_dadd+0x614>
    84ce:	2340      	movs	r3, #64	; 0x40
    84d0:	4656      	mov	r6, sl
    84d2:	1b9b      	subs	r3, r3, r6
    84d4:	409c      	lsls	r4, r3
    84d6:	4327      	orrs	r7, r4
    84d8:	1e7c      	subs	r4, r7, #1
    84da:	41a7      	sbcs	r7, r4
    84dc:	464b      	mov	r3, r9
    84de:	2400      	movs	r4, #0
    84e0:	431f      	orrs	r7, r3
    84e2:	e75f      	b.n	83a4 <__aeabi_dadd+0x4cc>
    84e4:	2400      	movs	r4, #0
    84e6:	e7d2      	b.n	848e <__aeabi_dadd+0x5b6>
    84e8:	0017      	movs	r7, r2
    84ea:	e5b2      	b.n	8052 <__aeabi_dadd+0x17a>
    84ec:	2400      	movs	r4, #0
    84ee:	e7f2      	b.n	84d6 <__aeabi_dadd+0x5fe>
    84f0:	000007ff 	.word	0x000007ff
    84f4:	ff7fffff 	.word	0xff7fffff

000084f8 <__aeabi_ddiv>:
    84f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    84fa:	4657      	mov	r7, sl
    84fc:	4645      	mov	r5, r8
    84fe:	46de      	mov	lr, fp
    8500:	464e      	mov	r6, r9
    8502:	b5e0      	push	{r5, r6, r7, lr}
    8504:	004c      	lsls	r4, r1, #1
    8506:	030e      	lsls	r6, r1, #12
    8508:	b087      	sub	sp, #28
    850a:	4683      	mov	fp, r0
    850c:	4692      	mov	sl, r2
    850e:	001d      	movs	r5, r3
    8510:	4680      	mov	r8, r0
    8512:	0b36      	lsrs	r6, r6, #12
    8514:	0d64      	lsrs	r4, r4, #21
    8516:	0fcf      	lsrs	r7, r1, #31
    8518:	2c00      	cmp	r4, #0
    851a:	d04f      	beq.n	85bc <__aeabi_ddiv+0xc4>
    851c:	4b6f      	ldr	r3, [pc, #444]	; (86dc <__aeabi_ddiv+0x1e4>)
    851e:	429c      	cmp	r4, r3
    8520:	d035      	beq.n	858e <__aeabi_ddiv+0x96>
    8522:	2380      	movs	r3, #128	; 0x80
    8524:	0f42      	lsrs	r2, r0, #29
    8526:	041b      	lsls	r3, r3, #16
    8528:	00f6      	lsls	r6, r6, #3
    852a:	4313      	orrs	r3, r2
    852c:	4333      	orrs	r3, r6
    852e:	4699      	mov	r9, r3
    8530:	00c3      	lsls	r3, r0, #3
    8532:	4698      	mov	r8, r3
    8534:	4b6a      	ldr	r3, [pc, #424]	; (86e0 <__aeabi_ddiv+0x1e8>)
    8536:	2600      	movs	r6, #0
    8538:	469c      	mov	ip, r3
    853a:	2300      	movs	r3, #0
    853c:	4464      	add	r4, ip
    853e:	9303      	str	r3, [sp, #12]
    8540:	032b      	lsls	r3, r5, #12
    8542:	0b1b      	lsrs	r3, r3, #12
    8544:	469b      	mov	fp, r3
    8546:	006b      	lsls	r3, r5, #1
    8548:	0fed      	lsrs	r5, r5, #31
    854a:	4650      	mov	r0, sl
    854c:	0d5b      	lsrs	r3, r3, #21
    854e:	9501      	str	r5, [sp, #4]
    8550:	d05e      	beq.n	8610 <__aeabi_ddiv+0x118>
    8552:	4a62      	ldr	r2, [pc, #392]	; (86dc <__aeabi_ddiv+0x1e4>)
    8554:	4293      	cmp	r3, r2
    8556:	d053      	beq.n	8600 <__aeabi_ddiv+0x108>
    8558:	465a      	mov	r2, fp
    855a:	00d1      	lsls	r1, r2, #3
    855c:	2280      	movs	r2, #128	; 0x80
    855e:	0f40      	lsrs	r0, r0, #29
    8560:	0412      	lsls	r2, r2, #16
    8562:	4302      	orrs	r2, r0
    8564:	430a      	orrs	r2, r1
    8566:	4693      	mov	fp, r2
    8568:	4652      	mov	r2, sl
    856a:	00d1      	lsls	r1, r2, #3
    856c:	4a5c      	ldr	r2, [pc, #368]	; (86e0 <__aeabi_ddiv+0x1e8>)
    856e:	4694      	mov	ip, r2
    8570:	2200      	movs	r2, #0
    8572:	4463      	add	r3, ip
    8574:	0038      	movs	r0, r7
    8576:	4068      	eors	r0, r5
    8578:	4684      	mov	ip, r0
    857a:	9002      	str	r0, [sp, #8]
    857c:	1ae4      	subs	r4, r4, r3
    857e:	4316      	orrs	r6, r2
    8580:	2e0f      	cmp	r6, #15
    8582:	d900      	bls.n	8586 <__aeabi_ddiv+0x8e>
    8584:	e0b4      	b.n	86f0 <__aeabi_ddiv+0x1f8>
    8586:	4b57      	ldr	r3, [pc, #348]	; (86e4 <__aeabi_ddiv+0x1ec>)
    8588:	00b6      	lsls	r6, r6, #2
    858a:	599b      	ldr	r3, [r3, r6]
    858c:	469f      	mov	pc, r3
    858e:	0003      	movs	r3, r0
    8590:	4333      	orrs	r3, r6
    8592:	4699      	mov	r9, r3
    8594:	d16c      	bne.n	8670 <__aeabi_ddiv+0x178>
    8596:	2300      	movs	r3, #0
    8598:	4698      	mov	r8, r3
    859a:	3302      	adds	r3, #2
    859c:	2608      	movs	r6, #8
    859e:	9303      	str	r3, [sp, #12]
    85a0:	e7ce      	b.n	8540 <__aeabi_ddiv+0x48>
    85a2:	46cb      	mov	fp, r9
    85a4:	4641      	mov	r1, r8
    85a6:	9a03      	ldr	r2, [sp, #12]
    85a8:	9701      	str	r7, [sp, #4]
    85aa:	2a02      	cmp	r2, #2
    85ac:	d165      	bne.n	867a <__aeabi_ddiv+0x182>
    85ae:	9b01      	ldr	r3, [sp, #4]
    85b0:	4c4a      	ldr	r4, [pc, #296]	; (86dc <__aeabi_ddiv+0x1e4>)
    85b2:	469c      	mov	ip, r3
    85b4:	2300      	movs	r3, #0
    85b6:	2200      	movs	r2, #0
    85b8:	4698      	mov	r8, r3
    85ba:	e06b      	b.n	8694 <__aeabi_ddiv+0x19c>
    85bc:	0003      	movs	r3, r0
    85be:	4333      	orrs	r3, r6
    85c0:	4699      	mov	r9, r3
    85c2:	d04e      	beq.n	8662 <__aeabi_ddiv+0x16a>
    85c4:	2e00      	cmp	r6, #0
    85c6:	d100      	bne.n	85ca <__aeabi_ddiv+0xd2>
    85c8:	e1bc      	b.n	8944 <__aeabi_ddiv+0x44c>
    85ca:	0030      	movs	r0, r6
    85cc:	f001 f8ca 	bl	9764 <__clzsi2>
    85d0:	0003      	movs	r3, r0
    85d2:	3b0b      	subs	r3, #11
    85d4:	2b1c      	cmp	r3, #28
    85d6:	dd00      	ble.n	85da <__aeabi_ddiv+0xe2>
    85d8:	e1ac      	b.n	8934 <__aeabi_ddiv+0x43c>
    85da:	221d      	movs	r2, #29
    85dc:	1ad3      	subs	r3, r2, r3
    85de:	465a      	mov	r2, fp
    85e0:	0001      	movs	r1, r0
    85e2:	40da      	lsrs	r2, r3
    85e4:	3908      	subs	r1, #8
    85e6:	408e      	lsls	r6, r1
    85e8:	0013      	movs	r3, r2
    85ea:	4333      	orrs	r3, r6
    85ec:	4699      	mov	r9, r3
    85ee:	465b      	mov	r3, fp
    85f0:	408b      	lsls	r3, r1
    85f2:	4698      	mov	r8, r3
    85f4:	2300      	movs	r3, #0
    85f6:	4c3c      	ldr	r4, [pc, #240]	; (86e8 <__aeabi_ddiv+0x1f0>)
    85f8:	2600      	movs	r6, #0
    85fa:	1a24      	subs	r4, r4, r0
    85fc:	9303      	str	r3, [sp, #12]
    85fe:	e79f      	b.n	8540 <__aeabi_ddiv+0x48>
    8600:	4651      	mov	r1, sl
    8602:	465a      	mov	r2, fp
    8604:	4311      	orrs	r1, r2
    8606:	d129      	bne.n	865c <__aeabi_ddiv+0x164>
    8608:	2200      	movs	r2, #0
    860a:	4693      	mov	fp, r2
    860c:	3202      	adds	r2, #2
    860e:	e7b1      	b.n	8574 <__aeabi_ddiv+0x7c>
    8610:	4659      	mov	r1, fp
    8612:	4301      	orrs	r1, r0
    8614:	d01e      	beq.n	8654 <__aeabi_ddiv+0x15c>
    8616:	465b      	mov	r3, fp
    8618:	2b00      	cmp	r3, #0
    861a:	d100      	bne.n	861e <__aeabi_ddiv+0x126>
    861c:	e19e      	b.n	895c <__aeabi_ddiv+0x464>
    861e:	4658      	mov	r0, fp
    8620:	f001 f8a0 	bl	9764 <__clzsi2>
    8624:	0003      	movs	r3, r0
    8626:	3b0b      	subs	r3, #11
    8628:	2b1c      	cmp	r3, #28
    862a:	dd00      	ble.n	862e <__aeabi_ddiv+0x136>
    862c:	e18f      	b.n	894e <__aeabi_ddiv+0x456>
    862e:	0002      	movs	r2, r0
    8630:	4659      	mov	r1, fp
    8632:	3a08      	subs	r2, #8
    8634:	4091      	lsls	r1, r2
    8636:	468b      	mov	fp, r1
    8638:	211d      	movs	r1, #29
    863a:	1acb      	subs	r3, r1, r3
    863c:	4651      	mov	r1, sl
    863e:	40d9      	lsrs	r1, r3
    8640:	000b      	movs	r3, r1
    8642:	4659      	mov	r1, fp
    8644:	430b      	orrs	r3, r1
    8646:	4651      	mov	r1, sl
    8648:	469b      	mov	fp, r3
    864a:	4091      	lsls	r1, r2
    864c:	4b26      	ldr	r3, [pc, #152]	; (86e8 <__aeabi_ddiv+0x1f0>)
    864e:	2200      	movs	r2, #0
    8650:	1a1b      	subs	r3, r3, r0
    8652:	e78f      	b.n	8574 <__aeabi_ddiv+0x7c>
    8654:	2300      	movs	r3, #0
    8656:	2201      	movs	r2, #1
    8658:	469b      	mov	fp, r3
    865a:	e78b      	b.n	8574 <__aeabi_ddiv+0x7c>
    865c:	4651      	mov	r1, sl
    865e:	2203      	movs	r2, #3
    8660:	e788      	b.n	8574 <__aeabi_ddiv+0x7c>
    8662:	2300      	movs	r3, #0
    8664:	4698      	mov	r8, r3
    8666:	3301      	adds	r3, #1
    8668:	2604      	movs	r6, #4
    866a:	2400      	movs	r4, #0
    866c:	9303      	str	r3, [sp, #12]
    866e:	e767      	b.n	8540 <__aeabi_ddiv+0x48>
    8670:	2303      	movs	r3, #3
    8672:	46b1      	mov	r9, r6
    8674:	9303      	str	r3, [sp, #12]
    8676:	260c      	movs	r6, #12
    8678:	e762      	b.n	8540 <__aeabi_ddiv+0x48>
    867a:	2a03      	cmp	r2, #3
    867c:	d100      	bne.n	8680 <__aeabi_ddiv+0x188>
    867e:	e25c      	b.n	8b3a <__aeabi_ddiv+0x642>
    8680:	9b01      	ldr	r3, [sp, #4]
    8682:	2a01      	cmp	r2, #1
    8684:	d000      	beq.n	8688 <__aeabi_ddiv+0x190>
    8686:	e1e4      	b.n	8a52 <__aeabi_ddiv+0x55a>
    8688:	4013      	ands	r3, r2
    868a:	469c      	mov	ip, r3
    868c:	2300      	movs	r3, #0
    868e:	2400      	movs	r4, #0
    8690:	2200      	movs	r2, #0
    8692:	4698      	mov	r8, r3
    8694:	2100      	movs	r1, #0
    8696:	0312      	lsls	r2, r2, #12
    8698:	0b13      	lsrs	r3, r2, #12
    869a:	0d0a      	lsrs	r2, r1, #20
    869c:	0512      	lsls	r2, r2, #20
    869e:	431a      	orrs	r2, r3
    86a0:	0523      	lsls	r3, r4, #20
    86a2:	4c12      	ldr	r4, [pc, #72]	; (86ec <__aeabi_ddiv+0x1f4>)
    86a4:	4640      	mov	r0, r8
    86a6:	4022      	ands	r2, r4
    86a8:	4313      	orrs	r3, r2
    86aa:	4662      	mov	r2, ip
    86ac:	005b      	lsls	r3, r3, #1
    86ae:	07d2      	lsls	r2, r2, #31
    86b0:	085b      	lsrs	r3, r3, #1
    86b2:	4313      	orrs	r3, r2
    86b4:	0019      	movs	r1, r3
    86b6:	b007      	add	sp, #28
    86b8:	bc3c      	pop	{r2, r3, r4, r5}
    86ba:	4690      	mov	r8, r2
    86bc:	4699      	mov	r9, r3
    86be:	46a2      	mov	sl, r4
    86c0:	46ab      	mov	fp, r5
    86c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    86c4:	2300      	movs	r3, #0
    86c6:	2280      	movs	r2, #128	; 0x80
    86c8:	469c      	mov	ip, r3
    86ca:	0312      	lsls	r2, r2, #12
    86cc:	4698      	mov	r8, r3
    86ce:	4c03      	ldr	r4, [pc, #12]	; (86dc <__aeabi_ddiv+0x1e4>)
    86d0:	e7e0      	b.n	8694 <__aeabi_ddiv+0x19c>
    86d2:	2300      	movs	r3, #0
    86d4:	4c01      	ldr	r4, [pc, #4]	; (86dc <__aeabi_ddiv+0x1e4>)
    86d6:	2200      	movs	r2, #0
    86d8:	4698      	mov	r8, r3
    86da:	e7db      	b.n	8694 <__aeabi_ddiv+0x19c>
    86dc:	000007ff 	.word	0x000007ff
    86e0:	fffffc01 	.word	0xfffffc01
    86e4:	0000c0d4 	.word	0x0000c0d4
    86e8:	fffffc0d 	.word	0xfffffc0d
    86ec:	800fffff 	.word	0x800fffff
    86f0:	45d9      	cmp	r9, fp
    86f2:	d900      	bls.n	86f6 <__aeabi_ddiv+0x1fe>
    86f4:	e139      	b.n	896a <__aeabi_ddiv+0x472>
    86f6:	d100      	bne.n	86fa <__aeabi_ddiv+0x202>
    86f8:	e134      	b.n	8964 <__aeabi_ddiv+0x46c>
    86fa:	2300      	movs	r3, #0
    86fc:	4646      	mov	r6, r8
    86fe:	464d      	mov	r5, r9
    8700:	469a      	mov	sl, r3
    8702:	3c01      	subs	r4, #1
    8704:	465b      	mov	r3, fp
    8706:	0e0a      	lsrs	r2, r1, #24
    8708:	021b      	lsls	r3, r3, #8
    870a:	431a      	orrs	r2, r3
    870c:	020b      	lsls	r3, r1, #8
    870e:	0c17      	lsrs	r7, r2, #16
    8710:	9303      	str	r3, [sp, #12]
    8712:	0413      	lsls	r3, r2, #16
    8714:	0c1b      	lsrs	r3, r3, #16
    8716:	0039      	movs	r1, r7
    8718:	0028      	movs	r0, r5
    871a:	4690      	mov	r8, r2
    871c:	9301      	str	r3, [sp, #4]
    871e:	f7ff fa3b 	bl	7b98 <__udivsi3>
    8722:	0002      	movs	r2, r0
    8724:	9b01      	ldr	r3, [sp, #4]
    8726:	4683      	mov	fp, r0
    8728:	435a      	muls	r2, r3
    872a:	0028      	movs	r0, r5
    872c:	0039      	movs	r1, r7
    872e:	4691      	mov	r9, r2
    8730:	f7ff fab8 	bl	7ca4 <__aeabi_uidivmod>
    8734:	0c35      	lsrs	r5, r6, #16
    8736:	0409      	lsls	r1, r1, #16
    8738:	430d      	orrs	r5, r1
    873a:	45a9      	cmp	r9, r5
    873c:	d90d      	bls.n	875a <__aeabi_ddiv+0x262>
    873e:	465b      	mov	r3, fp
    8740:	4445      	add	r5, r8
    8742:	3b01      	subs	r3, #1
    8744:	45a8      	cmp	r8, r5
    8746:	d900      	bls.n	874a <__aeabi_ddiv+0x252>
    8748:	e13a      	b.n	89c0 <__aeabi_ddiv+0x4c8>
    874a:	45a9      	cmp	r9, r5
    874c:	d800      	bhi.n	8750 <__aeabi_ddiv+0x258>
    874e:	e137      	b.n	89c0 <__aeabi_ddiv+0x4c8>
    8750:	2302      	movs	r3, #2
    8752:	425b      	negs	r3, r3
    8754:	469c      	mov	ip, r3
    8756:	4445      	add	r5, r8
    8758:	44e3      	add	fp, ip
    875a:	464b      	mov	r3, r9
    875c:	1aeb      	subs	r3, r5, r3
    875e:	0039      	movs	r1, r7
    8760:	0018      	movs	r0, r3
    8762:	9304      	str	r3, [sp, #16]
    8764:	f7ff fa18 	bl	7b98 <__udivsi3>
    8768:	9b01      	ldr	r3, [sp, #4]
    876a:	0005      	movs	r5, r0
    876c:	4343      	muls	r3, r0
    876e:	0039      	movs	r1, r7
    8770:	9804      	ldr	r0, [sp, #16]
    8772:	4699      	mov	r9, r3
    8774:	f7ff fa96 	bl	7ca4 <__aeabi_uidivmod>
    8778:	0433      	lsls	r3, r6, #16
    877a:	0409      	lsls	r1, r1, #16
    877c:	0c1b      	lsrs	r3, r3, #16
    877e:	430b      	orrs	r3, r1
    8780:	4599      	cmp	r9, r3
    8782:	d909      	bls.n	8798 <__aeabi_ddiv+0x2a0>
    8784:	4443      	add	r3, r8
    8786:	1e6a      	subs	r2, r5, #1
    8788:	4598      	cmp	r8, r3
    878a:	d900      	bls.n	878e <__aeabi_ddiv+0x296>
    878c:	e11a      	b.n	89c4 <__aeabi_ddiv+0x4cc>
    878e:	4599      	cmp	r9, r3
    8790:	d800      	bhi.n	8794 <__aeabi_ddiv+0x29c>
    8792:	e117      	b.n	89c4 <__aeabi_ddiv+0x4cc>
    8794:	3d02      	subs	r5, #2
    8796:	4443      	add	r3, r8
    8798:	464a      	mov	r2, r9
    879a:	1a9b      	subs	r3, r3, r2
    879c:	465a      	mov	r2, fp
    879e:	0412      	lsls	r2, r2, #16
    87a0:	432a      	orrs	r2, r5
    87a2:	9903      	ldr	r1, [sp, #12]
    87a4:	4693      	mov	fp, r2
    87a6:	0c10      	lsrs	r0, r2, #16
    87a8:	0c0a      	lsrs	r2, r1, #16
    87aa:	4691      	mov	r9, r2
    87ac:	0409      	lsls	r1, r1, #16
    87ae:	465a      	mov	r2, fp
    87b0:	0c09      	lsrs	r1, r1, #16
    87b2:	464e      	mov	r6, r9
    87b4:	000d      	movs	r5, r1
    87b6:	0412      	lsls	r2, r2, #16
    87b8:	0c12      	lsrs	r2, r2, #16
    87ba:	4345      	muls	r5, r0
    87bc:	9105      	str	r1, [sp, #20]
    87be:	4351      	muls	r1, r2
    87c0:	4372      	muls	r2, r6
    87c2:	4370      	muls	r0, r6
    87c4:	1952      	adds	r2, r2, r5
    87c6:	0c0e      	lsrs	r6, r1, #16
    87c8:	18b2      	adds	r2, r6, r2
    87ca:	4295      	cmp	r5, r2
    87cc:	d903      	bls.n	87d6 <__aeabi_ddiv+0x2de>
    87ce:	2580      	movs	r5, #128	; 0x80
    87d0:	026d      	lsls	r5, r5, #9
    87d2:	46ac      	mov	ip, r5
    87d4:	4460      	add	r0, ip
    87d6:	0c15      	lsrs	r5, r2, #16
    87d8:	0409      	lsls	r1, r1, #16
    87da:	0412      	lsls	r2, r2, #16
    87dc:	0c09      	lsrs	r1, r1, #16
    87de:	1828      	adds	r0, r5, r0
    87e0:	1852      	adds	r2, r2, r1
    87e2:	4283      	cmp	r3, r0
    87e4:	d200      	bcs.n	87e8 <__aeabi_ddiv+0x2f0>
    87e6:	e0ce      	b.n	8986 <__aeabi_ddiv+0x48e>
    87e8:	d100      	bne.n	87ec <__aeabi_ddiv+0x2f4>
    87ea:	e0c8      	b.n	897e <__aeabi_ddiv+0x486>
    87ec:	1a1d      	subs	r5, r3, r0
    87ee:	4653      	mov	r3, sl
    87f0:	1a9e      	subs	r6, r3, r2
    87f2:	45b2      	cmp	sl, r6
    87f4:	4192      	sbcs	r2, r2
    87f6:	4252      	negs	r2, r2
    87f8:	1aab      	subs	r3, r5, r2
    87fa:	469a      	mov	sl, r3
    87fc:	4598      	cmp	r8, r3
    87fe:	d100      	bne.n	8802 <__aeabi_ddiv+0x30a>
    8800:	e117      	b.n	8a32 <__aeabi_ddiv+0x53a>
    8802:	0039      	movs	r1, r7
    8804:	0018      	movs	r0, r3
    8806:	f7ff f9c7 	bl	7b98 <__udivsi3>
    880a:	9b01      	ldr	r3, [sp, #4]
    880c:	0005      	movs	r5, r0
    880e:	4343      	muls	r3, r0
    8810:	0039      	movs	r1, r7
    8812:	4650      	mov	r0, sl
    8814:	9304      	str	r3, [sp, #16]
    8816:	f7ff fa45 	bl	7ca4 <__aeabi_uidivmod>
    881a:	9804      	ldr	r0, [sp, #16]
    881c:	040b      	lsls	r3, r1, #16
    881e:	0c31      	lsrs	r1, r6, #16
    8820:	4319      	orrs	r1, r3
    8822:	4288      	cmp	r0, r1
    8824:	d909      	bls.n	883a <__aeabi_ddiv+0x342>
    8826:	4441      	add	r1, r8
    8828:	1e6b      	subs	r3, r5, #1
    882a:	4588      	cmp	r8, r1
    882c:	d900      	bls.n	8830 <__aeabi_ddiv+0x338>
    882e:	e107      	b.n	8a40 <__aeabi_ddiv+0x548>
    8830:	4288      	cmp	r0, r1
    8832:	d800      	bhi.n	8836 <__aeabi_ddiv+0x33e>
    8834:	e104      	b.n	8a40 <__aeabi_ddiv+0x548>
    8836:	3d02      	subs	r5, #2
    8838:	4441      	add	r1, r8
    883a:	9b04      	ldr	r3, [sp, #16]
    883c:	1acb      	subs	r3, r1, r3
    883e:	0018      	movs	r0, r3
    8840:	0039      	movs	r1, r7
    8842:	9304      	str	r3, [sp, #16]
    8844:	f7ff f9a8 	bl	7b98 <__udivsi3>
    8848:	9b01      	ldr	r3, [sp, #4]
    884a:	4682      	mov	sl, r0
    884c:	4343      	muls	r3, r0
    884e:	0039      	movs	r1, r7
    8850:	9804      	ldr	r0, [sp, #16]
    8852:	9301      	str	r3, [sp, #4]
    8854:	f7ff fa26 	bl	7ca4 <__aeabi_uidivmod>
    8858:	9801      	ldr	r0, [sp, #4]
    885a:	040b      	lsls	r3, r1, #16
    885c:	0431      	lsls	r1, r6, #16
    885e:	0c09      	lsrs	r1, r1, #16
    8860:	4319      	orrs	r1, r3
    8862:	4288      	cmp	r0, r1
    8864:	d90d      	bls.n	8882 <__aeabi_ddiv+0x38a>
    8866:	4653      	mov	r3, sl
    8868:	4441      	add	r1, r8
    886a:	3b01      	subs	r3, #1
    886c:	4588      	cmp	r8, r1
    886e:	d900      	bls.n	8872 <__aeabi_ddiv+0x37a>
    8870:	e0e8      	b.n	8a44 <__aeabi_ddiv+0x54c>
    8872:	4288      	cmp	r0, r1
    8874:	d800      	bhi.n	8878 <__aeabi_ddiv+0x380>
    8876:	e0e5      	b.n	8a44 <__aeabi_ddiv+0x54c>
    8878:	2302      	movs	r3, #2
    887a:	425b      	negs	r3, r3
    887c:	469c      	mov	ip, r3
    887e:	4441      	add	r1, r8
    8880:	44e2      	add	sl, ip
    8882:	9b01      	ldr	r3, [sp, #4]
    8884:	042d      	lsls	r5, r5, #16
    8886:	1ace      	subs	r6, r1, r3
    8888:	4651      	mov	r1, sl
    888a:	4329      	orrs	r1, r5
    888c:	9d05      	ldr	r5, [sp, #20]
    888e:	464f      	mov	r7, r9
    8890:	002a      	movs	r2, r5
    8892:	040b      	lsls	r3, r1, #16
    8894:	0c08      	lsrs	r0, r1, #16
    8896:	0c1b      	lsrs	r3, r3, #16
    8898:	435a      	muls	r2, r3
    889a:	4345      	muls	r5, r0
    889c:	437b      	muls	r3, r7
    889e:	4378      	muls	r0, r7
    88a0:	195b      	adds	r3, r3, r5
    88a2:	0c17      	lsrs	r7, r2, #16
    88a4:	18fb      	adds	r3, r7, r3
    88a6:	429d      	cmp	r5, r3
    88a8:	d903      	bls.n	88b2 <__aeabi_ddiv+0x3ba>
    88aa:	2580      	movs	r5, #128	; 0x80
    88ac:	026d      	lsls	r5, r5, #9
    88ae:	46ac      	mov	ip, r5
    88b0:	4460      	add	r0, ip
    88b2:	0c1d      	lsrs	r5, r3, #16
    88b4:	0412      	lsls	r2, r2, #16
    88b6:	041b      	lsls	r3, r3, #16
    88b8:	0c12      	lsrs	r2, r2, #16
    88ba:	1828      	adds	r0, r5, r0
    88bc:	189b      	adds	r3, r3, r2
    88be:	4286      	cmp	r6, r0
    88c0:	d200      	bcs.n	88c4 <__aeabi_ddiv+0x3cc>
    88c2:	e093      	b.n	89ec <__aeabi_ddiv+0x4f4>
    88c4:	d100      	bne.n	88c8 <__aeabi_ddiv+0x3d0>
    88c6:	e08e      	b.n	89e6 <__aeabi_ddiv+0x4ee>
    88c8:	2301      	movs	r3, #1
    88ca:	4319      	orrs	r1, r3
    88cc:	4ba0      	ldr	r3, [pc, #640]	; (8b50 <__aeabi_ddiv+0x658>)
    88ce:	18e3      	adds	r3, r4, r3
    88d0:	2b00      	cmp	r3, #0
    88d2:	dc00      	bgt.n	88d6 <__aeabi_ddiv+0x3de>
    88d4:	e099      	b.n	8a0a <__aeabi_ddiv+0x512>
    88d6:	074a      	lsls	r2, r1, #29
    88d8:	d000      	beq.n	88dc <__aeabi_ddiv+0x3e4>
    88da:	e09e      	b.n	8a1a <__aeabi_ddiv+0x522>
    88dc:	465a      	mov	r2, fp
    88de:	01d2      	lsls	r2, r2, #7
    88e0:	d506      	bpl.n	88f0 <__aeabi_ddiv+0x3f8>
    88e2:	465a      	mov	r2, fp
    88e4:	4b9b      	ldr	r3, [pc, #620]	; (8b54 <__aeabi_ddiv+0x65c>)
    88e6:	401a      	ands	r2, r3
    88e8:	2380      	movs	r3, #128	; 0x80
    88ea:	4693      	mov	fp, r2
    88ec:	00db      	lsls	r3, r3, #3
    88ee:	18e3      	adds	r3, r4, r3
    88f0:	4a99      	ldr	r2, [pc, #612]	; (8b58 <__aeabi_ddiv+0x660>)
    88f2:	4293      	cmp	r3, r2
    88f4:	dd68      	ble.n	89c8 <__aeabi_ddiv+0x4d0>
    88f6:	2301      	movs	r3, #1
    88f8:	9a02      	ldr	r2, [sp, #8]
    88fa:	4c98      	ldr	r4, [pc, #608]	; (8b5c <__aeabi_ddiv+0x664>)
    88fc:	401a      	ands	r2, r3
    88fe:	2300      	movs	r3, #0
    8900:	4694      	mov	ip, r2
    8902:	4698      	mov	r8, r3
    8904:	2200      	movs	r2, #0
    8906:	e6c5      	b.n	8694 <__aeabi_ddiv+0x19c>
    8908:	2280      	movs	r2, #128	; 0x80
    890a:	464b      	mov	r3, r9
    890c:	0312      	lsls	r2, r2, #12
    890e:	4213      	tst	r3, r2
    8910:	d00a      	beq.n	8928 <__aeabi_ddiv+0x430>
    8912:	465b      	mov	r3, fp
    8914:	4213      	tst	r3, r2
    8916:	d106      	bne.n	8926 <__aeabi_ddiv+0x42e>
    8918:	431a      	orrs	r2, r3
    891a:	0312      	lsls	r2, r2, #12
    891c:	0b12      	lsrs	r2, r2, #12
    891e:	46ac      	mov	ip, r5
    8920:	4688      	mov	r8, r1
    8922:	4c8e      	ldr	r4, [pc, #568]	; (8b5c <__aeabi_ddiv+0x664>)
    8924:	e6b6      	b.n	8694 <__aeabi_ddiv+0x19c>
    8926:	464b      	mov	r3, r9
    8928:	431a      	orrs	r2, r3
    892a:	0312      	lsls	r2, r2, #12
    892c:	0b12      	lsrs	r2, r2, #12
    892e:	46bc      	mov	ip, r7
    8930:	4c8a      	ldr	r4, [pc, #552]	; (8b5c <__aeabi_ddiv+0x664>)
    8932:	e6af      	b.n	8694 <__aeabi_ddiv+0x19c>
    8934:	0003      	movs	r3, r0
    8936:	465a      	mov	r2, fp
    8938:	3b28      	subs	r3, #40	; 0x28
    893a:	409a      	lsls	r2, r3
    893c:	2300      	movs	r3, #0
    893e:	4691      	mov	r9, r2
    8940:	4698      	mov	r8, r3
    8942:	e657      	b.n	85f4 <__aeabi_ddiv+0xfc>
    8944:	4658      	mov	r0, fp
    8946:	f000 ff0d 	bl	9764 <__clzsi2>
    894a:	3020      	adds	r0, #32
    894c:	e640      	b.n	85d0 <__aeabi_ddiv+0xd8>
    894e:	0003      	movs	r3, r0
    8950:	4652      	mov	r2, sl
    8952:	3b28      	subs	r3, #40	; 0x28
    8954:	409a      	lsls	r2, r3
    8956:	2100      	movs	r1, #0
    8958:	4693      	mov	fp, r2
    895a:	e677      	b.n	864c <__aeabi_ddiv+0x154>
    895c:	f000 ff02 	bl	9764 <__clzsi2>
    8960:	3020      	adds	r0, #32
    8962:	e65f      	b.n	8624 <__aeabi_ddiv+0x12c>
    8964:	4588      	cmp	r8, r1
    8966:	d200      	bcs.n	896a <__aeabi_ddiv+0x472>
    8968:	e6c7      	b.n	86fa <__aeabi_ddiv+0x202>
    896a:	464b      	mov	r3, r9
    896c:	07de      	lsls	r6, r3, #31
    896e:	085d      	lsrs	r5, r3, #1
    8970:	4643      	mov	r3, r8
    8972:	085b      	lsrs	r3, r3, #1
    8974:	431e      	orrs	r6, r3
    8976:	4643      	mov	r3, r8
    8978:	07db      	lsls	r3, r3, #31
    897a:	469a      	mov	sl, r3
    897c:	e6c2      	b.n	8704 <__aeabi_ddiv+0x20c>
    897e:	2500      	movs	r5, #0
    8980:	4592      	cmp	sl, r2
    8982:	d300      	bcc.n	8986 <__aeabi_ddiv+0x48e>
    8984:	e733      	b.n	87ee <__aeabi_ddiv+0x2f6>
    8986:	9e03      	ldr	r6, [sp, #12]
    8988:	4659      	mov	r1, fp
    898a:	46b4      	mov	ip, r6
    898c:	44e2      	add	sl, ip
    898e:	45b2      	cmp	sl, r6
    8990:	41ad      	sbcs	r5, r5
    8992:	426d      	negs	r5, r5
    8994:	4445      	add	r5, r8
    8996:	18eb      	adds	r3, r5, r3
    8998:	3901      	subs	r1, #1
    899a:	4598      	cmp	r8, r3
    899c:	d207      	bcs.n	89ae <__aeabi_ddiv+0x4b6>
    899e:	4298      	cmp	r0, r3
    89a0:	d900      	bls.n	89a4 <__aeabi_ddiv+0x4ac>
    89a2:	e07f      	b.n	8aa4 <__aeabi_ddiv+0x5ac>
    89a4:	d100      	bne.n	89a8 <__aeabi_ddiv+0x4b0>
    89a6:	e0bc      	b.n	8b22 <__aeabi_ddiv+0x62a>
    89a8:	1a1d      	subs	r5, r3, r0
    89aa:	468b      	mov	fp, r1
    89ac:	e71f      	b.n	87ee <__aeabi_ddiv+0x2f6>
    89ae:	4598      	cmp	r8, r3
    89b0:	d1fa      	bne.n	89a8 <__aeabi_ddiv+0x4b0>
    89b2:	9d03      	ldr	r5, [sp, #12]
    89b4:	4555      	cmp	r5, sl
    89b6:	d9f2      	bls.n	899e <__aeabi_ddiv+0x4a6>
    89b8:	4643      	mov	r3, r8
    89ba:	468b      	mov	fp, r1
    89bc:	1a1d      	subs	r5, r3, r0
    89be:	e716      	b.n	87ee <__aeabi_ddiv+0x2f6>
    89c0:	469b      	mov	fp, r3
    89c2:	e6ca      	b.n	875a <__aeabi_ddiv+0x262>
    89c4:	0015      	movs	r5, r2
    89c6:	e6e7      	b.n	8798 <__aeabi_ddiv+0x2a0>
    89c8:	465a      	mov	r2, fp
    89ca:	08c9      	lsrs	r1, r1, #3
    89cc:	0752      	lsls	r2, r2, #29
    89ce:	430a      	orrs	r2, r1
    89d0:	055b      	lsls	r3, r3, #21
    89d2:	4690      	mov	r8, r2
    89d4:	0d5c      	lsrs	r4, r3, #21
    89d6:	465a      	mov	r2, fp
    89d8:	2301      	movs	r3, #1
    89da:	9902      	ldr	r1, [sp, #8]
    89dc:	0252      	lsls	r2, r2, #9
    89de:	4019      	ands	r1, r3
    89e0:	0b12      	lsrs	r2, r2, #12
    89e2:	468c      	mov	ip, r1
    89e4:	e656      	b.n	8694 <__aeabi_ddiv+0x19c>
    89e6:	2b00      	cmp	r3, #0
    89e8:	d100      	bne.n	89ec <__aeabi_ddiv+0x4f4>
    89ea:	e76f      	b.n	88cc <__aeabi_ddiv+0x3d4>
    89ec:	4446      	add	r6, r8
    89ee:	1e4a      	subs	r2, r1, #1
    89f0:	45b0      	cmp	r8, r6
    89f2:	d929      	bls.n	8a48 <__aeabi_ddiv+0x550>
    89f4:	0011      	movs	r1, r2
    89f6:	4286      	cmp	r6, r0
    89f8:	d000      	beq.n	89fc <__aeabi_ddiv+0x504>
    89fa:	e765      	b.n	88c8 <__aeabi_ddiv+0x3d0>
    89fc:	9a03      	ldr	r2, [sp, #12]
    89fe:	4293      	cmp	r3, r2
    8a00:	d000      	beq.n	8a04 <__aeabi_ddiv+0x50c>
    8a02:	e761      	b.n	88c8 <__aeabi_ddiv+0x3d0>
    8a04:	e762      	b.n	88cc <__aeabi_ddiv+0x3d4>
    8a06:	2101      	movs	r1, #1
    8a08:	4249      	negs	r1, r1
    8a0a:	2001      	movs	r0, #1
    8a0c:	1ac2      	subs	r2, r0, r3
    8a0e:	2a38      	cmp	r2, #56	; 0x38
    8a10:	dd21      	ble.n	8a56 <__aeabi_ddiv+0x55e>
    8a12:	9b02      	ldr	r3, [sp, #8]
    8a14:	4003      	ands	r3, r0
    8a16:	469c      	mov	ip, r3
    8a18:	e638      	b.n	868c <__aeabi_ddiv+0x194>
    8a1a:	220f      	movs	r2, #15
    8a1c:	400a      	ands	r2, r1
    8a1e:	2a04      	cmp	r2, #4
    8a20:	d100      	bne.n	8a24 <__aeabi_ddiv+0x52c>
    8a22:	e75b      	b.n	88dc <__aeabi_ddiv+0x3e4>
    8a24:	000a      	movs	r2, r1
    8a26:	1d11      	adds	r1, r2, #4
    8a28:	4291      	cmp	r1, r2
    8a2a:	4192      	sbcs	r2, r2
    8a2c:	4252      	negs	r2, r2
    8a2e:	4493      	add	fp, r2
    8a30:	e754      	b.n	88dc <__aeabi_ddiv+0x3e4>
    8a32:	4b47      	ldr	r3, [pc, #284]	; (8b50 <__aeabi_ddiv+0x658>)
    8a34:	18e3      	adds	r3, r4, r3
    8a36:	2b00      	cmp	r3, #0
    8a38:	dde5      	ble.n	8a06 <__aeabi_ddiv+0x50e>
    8a3a:	2201      	movs	r2, #1
    8a3c:	4252      	negs	r2, r2
    8a3e:	e7f2      	b.n	8a26 <__aeabi_ddiv+0x52e>
    8a40:	001d      	movs	r5, r3
    8a42:	e6fa      	b.n	883a <__aeabi_ddiv+0x342>
    8a44:	469a      	mov	sl, r3
    8a46:	e71c      	b.n	8882 <__aeabi_ddiv+0x38a>
    8a48:	42b0      	cmp	r0, r6
    8a4a:	d839      	bhi.n	8ac0 <__aeabi_ddiv+0x5c8>
    8a4c:	d06e      	beq.n	8b2c <__aeabi_ddiv+0x634>
    8a4e:	0011      	movs	r1, r2
    8a50:	e73a      	b.n	88c8 <__aeabi_ddiv+0x3d0>
    8a52:	9302      	str	r3, [sp, #8]
    8a54:	e73a      	b.n	88cc <__aeabi_ddiv+0x3d4>
    8a56:	2a1f      	cmp	r2, #31
    8a58:	dc3c      	bgt.n	8ad4 <__aeabi_ddiv+0x5dc>
    8a5a:	2320      	movs	r3, #32
    8a5c:	1a9b      	subs	r3, r3, r2
    8a5e:	000c      	movs	r4, r1
    8a60:	4658      	mov	r0, fp
    8a62:	4099      	lsls	r1, r3
    8a64:	4098      	lsls	r0, r3
    8a66:	1e4b      	subs	r3, r1, #1
    8a68:	4199      	sbcs	r1, r3
    8a6a:	465b      	mov	r3, fp
    8a6c:	40d4      	lsrs	r4, r2
    8a6e:	40d3      	lsrs	r3, r2
    8a70:	4320      	orrs	r0, r4
    8a72:	4308      	orrs	r0, r1
    8a74:	001a      	movs	r2, r3
    8a76:	0743      	lsls	r3, r0, #29
    8a78:	d009      	beq.n	8a8e <__aeabi_ddiv+0x596>
    8a7a:	230f      	movs	r3, #15
    8a7c:	4003      	ands	r3, r0
    8a7e:	2b04      	cmp	r3, #4
    8a80:	d005      	beq.n	8a8e <__aeabi_ddiv+0x596>
    8a82:	0001      	movs	r1, r0
    8a84:	1d08      	adds	r0, r1, #4
    8a86:	4288      	cmp	r0, r1
    8a88:	419b      	sbcs	r3, r3
    8a8a:	425b      	negs	r3, r3
    8a8c:	18d2      	adds	r2, r2, r3
    8a8e:	0213      	lsls	r3, r2, #8
    8a90:	d53a      	bpl.n	8b08 <__aeabi_ddiv+0x610>
    8a92:	2301      	movs	r3, #1
    8a94:	9a02      	ldr	r2, [sp, #8]
    8a96:	2401      	movs	r4, #1
    8a98:	401a      	ands	r2, r3
    8a9a:	2300      	movs	r3, #0
    8a9c:	4694      	mov	ip, r2
    8a9e:	4698      	mov	r8, r3
    8aa0:	2200      	movs	r2, #0
    8aa2:	e5f7      	b.n	8694 <__aeabi_ddiv+0x19c>
    8aa4:	2102      	movs	r1, #2
    8aa6:	4249      	negs	r1, r1
    8aa8:	468c      	mov	ip, r1
    8aaa:	9d03      	ldr	r5, [sp, #12]
    8aac:	44e3      	add	fp, ip
    8aae:	46ac      	mov	ip, r5
    8ab0:	44e2      	add	sl, ip
    8ab2:	45aa      	cmp	sl, r5
    8ab4:	41ad      	sbcs	r5, r5
    8ab6:	426d      	negs	r5, r5
    8ab8:	4445      	add	r5, r8
    8aba:	18ed      	adds	r5, r5, r3
    8abc:	1a2d      	subs	r5, r5, r0
    8abe:	e696      	b.n	87ee <__aeabi_ddiv+0x2f6>
    8ac0:	1e8a      	subs	r2, r1, #2
    8ac2:	9903      	ldr	r1, [sp, #12]
    8ac4:	004d      	lsls	r5, r1, #1
    8ac6:	428d      	cmp	r5, r1
    8ac8:	4189      	sbcs	r1, r1
    8aca:	4249      	negs	r1, r1
    8acc:	4441      	add	r1, r8
    8ace:	1876      	adds	r6, r6, r1
    8ad0:	9503      	str	r5, [sp, #12]
    8ad2:	e78f      	b.n	89f4 <__aeabi_ddiv+0x4fc>
    8ad4:	201f      	movs	r0, #31
    8ad6:	4240      	negs	r0, r0
    8ad8:	1ac3      	subs	r3, r0, r3
    8ada:	4658      	mov	r0, fp
    8adc:	40d8      	lsrs	r0, r3
    8ade:	0003      	movs	r3, r0
    8ae0:	2a20      	cmp	r2, #32
    8ae2:	d028      	beq.n	8b36 <__aeabi_ddiv+0x63e>
    8ae4:	2040      	movs	r0, #64	; 0x40
    8ae6:	465d      	mov	r5, fp
    8ae8:	1a82      	subs	r2, r0, r2
    8aea:	4095      	lsls	r5, r2
    8aec:	4329      	orrs	r1, r5
    8aee:	1e4a      	subs	r2, r1, #1
    8af0:	4191      	sbcs	r1, r2
    8af2:	4319      	orrs	r1, r3
    8af4:	2307      	movs	r3, #7
    8af6:	2200      	movs	r2, #0
    8af8:	400b      	ands	r3, r1
    8afa:	d009      	beq.n	8b10 <__aeabi_ddiv+0x618>
    8afc:	230f      	movs	r3, #15
    8afe:	2200      	movs	r2, #0
    8b00:	400b      	ands	r3, r1
    8b02:	0008      	movs	r0, r1
    8b04:	2b04      	cmp	r3, #4
    8b06:	d1bd      	bne.n	8a84 <__aeabi_ddiv+0x58c>
    8b08:	0001      	movs	r1, r0
    8b0a:	0753      	lsls	r3, r2, #29
    8b0c:	0252      	lsls	r2, r2, #9
    8b0e:	0b12      	lsrs	r2, r2, #12
    8b10:	08c9      	lsrs	r1, r1, #3
    8b12:	4319      	orrs	r1, r3
    8b14:	2301      	movs	r3, #1
    8b16:	4688      	mov	r8, r1
    8b18:	9902      	ldr	r1, [sp, #8]
    8b1a:	2400      	movs	r4, #0
    8b1c:	4019      	ands	r1, r3
    8b1e:	468c      	mov	ip, r1
    8b20:	e5b8      	b.n	8694 <__aeabi_ddiv+0x19c>
    8b22:	4552      	cmp	r2, sl
    8b24:	d8be      	bhi.n	8aa4 <__aeabi_ddiv+0x5ac>
    8b26:	468b      	mov	fp, r1
    8b28:	2500      	movs	r5, #0
    8b2a:	e660      	b.n	87ee <__aeabi_ddiv+0x2f6>
    8b2c:	9d03      	ldr	r5, [sp, #12]
    8b2e:	429d      	cmp	r5, r3
    8b30:	d3c6      	bcc.n	8ac0 <__aeabi_ddiv+0x5c8>
    8b32:	0011      	movs	r1, r2
    8b34:	e762      	b.n	89fc <__aeabi_ddiv+0x504>
    8b36:	2500      	movs	r5, #0
    8b38:	e7d8      	b.n	8aec <__aeabi_ddiv+0x5f4>
    8b3a:	2280      	movs	r2, #128	; 0x80
    8b3c:	465b      	mov	r3, fp
    8b3e:	0312      	lsls	r2, r2, #12
    8b40:	431a      	orrs	r2, r3
    8b42:	9b01      	ldr	r3, [sp, #4]
    8b44:	0312      	lsls	r2, r2, #12
    8b46:	0b12      	lsrs	r2, r2, #12
    8b48:	469c      	mov	ip, r3
    8b4a:	4688      	mov	r8, r1
    8b4c:	4c03      	ldr	r4, [pc, #12]	; (8b5c <__aeabi_ddiv+0x664>)
    8b4e:	e5a1      	b.n	8694 <__aeabi_ddiv+0x19c>
    8b50:	000003ff 	.word	0x000003ff
    8b54:	feffffff 	.word	0xfeffffff
    8b58:	000007fe 	.word	0x000007fe
    8b5c:	000007ff 	.word	0x000007ff

00008b60 <__aeabi_dmul>:
    8b60:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b62:	4657      	mov	r7, sl
    8b64:	4645      	mov	r5, r8
    8b66:	46de      	mov	lr, fp
    8b68:	464e      	mov	r6, r9
    8b6a:	b5e0      	push	{r5, r6, r7, lr}
    8b6c:	030c      	lsls	r4, r1, #12
    8b6e:	4698      	mov	r8, r3
    8b70:	004e      	lsls	r6, r1, #1
    8b72:	0b23      	lsrs	r3, r4, #12
    8b74:	b087      	sub	sp, #28
    8b76:	0007      	movs	r7, r0
    8b78:	4692      	mov	sl, r2
    8b7a:	469b      	mov	fp, r3
    8b7c:	0d76      	lsrs	r6, r6, #21
    8b7e:	0fcd      	lsrs	r5, r1, #31
    8b80:	2e00      	cmp	r6, #0
    8b82:	d06b      	beq.n	8c5c <__aeabi_dmul+0xfc>
    8b84:	4b6d      	ldr	r3, [pc, #436]	; (8d3c <__aeabi_dmul+0x1dc>)
    8b86:	429e      	cmp	r6, r3
    8b88:	d035      	beq.n	8bf6 <__aeabi_dmul+0x96>
    8b8a:	2480      	movs	r4, #128	; 0x80
    8b8c:	465b      	mov	r3, fp
    8b8e:	0f42      	lsrs	r2, r0, #29
    8b90:	0424      	lsls	r4, r4, #16
    8b92:	00db      	lsls	r3, r3, #3
    8b94:	4314      	orrs	r4, r2
    8b96:	431c      	orrs	r4, r3
    8b98:	00c3      	lsls	r3, r0, #3
    8b9a:	4699      	mov	r9, r3
    8b9c:	4b68      	ldr	r3, [pc, #416]	; (8d40 <__aeabi_dmul+0x1e0>)
    8b9e:	46a3      	mov	fp, r4
    8ba0:	469c      	mov	ip, r3
    8ba2:	2300      	movs	r3, #0
    8ba4:	2700      	movs	r7, #0
    8ba6:	4466      	add	r6, ip
    8ba8:	9302      	str	r3, [sp, #8]
    8baa:	4643      	mov	r3, r8
    8bac:	031c      	lsls	r4, r3, #12
    8bae:	005a      	lsls	r2, r3, #1
    8bb0:	0fdb      	lsrs	r3, r3, #31
    8bb2:	4650      	mov	r0, sl
    8bb4:	0b24      	lsrs	r4, r4, #12
    8bb6:	0d52      	lsrs	r2, r2, #21
    8bb8:	4698      	mov	r8, r3
    8bba:	d100      	bne.n	8bbe <__aeabi_dmul+0x5e>
    8bbc:	e076      	b.n	8cac <__aeabi_dmul+0x14c>
    8bbe:	4b5f      	ldr	r3, [pc, #380]	; (8d3c <__aeabi_dmul+0x1dc>)
    8bc0:	429a      	cmp	r2, r3
    8bc2:	d06d      	beq.n	8ca0 <__aeabi_dmul+0x140>
    8bc4:	2380      	movs	r3, #128	; 0x80
    8bc6:	0f41      	lsrs	r1, r0, #29
    8bc8:	041b      	lsls	r3, r3, #16
    8bca:	430b      	orrs	r3, r1
    8bcc:	495c      	ldr	r1, [pc, #368]	; (8d40 <__aeabi_dmul+0x1e0>)
    8bce:	00e4      	lsls	r4, r4, #3
    8bd0:	468c      	mov	ip, r1
    8bd2:	431c      	orrs	r4, r3
    8bd4:	00c3      	lsls	r3, r0, #3
    8bd6:	2000      	movs	r0, #0
    8bd8:	4462      	add	r2, ip
    8bda:	4641      	mov	r1, r8
    8bdc:	18b6      	adds	r6, r6, r2
    8bde:	4069      	eors	r1, r5
    8be0:	1c72      	adds	r2, r6, #1
    8be2:	9101      	str	r1, [sp, #4]
    8be4:	4694      	mov	ip, r2
    8be6:	4307      	orrs	r7, r0
    8be8:	2f0f      	cmp	r7, #15
    8bea:	d900      	bls.n	8bee <__aeabi_dmul+0x8e>
    8bec:	e0b0      	b.n	8d50 <__aeabi_dmul+0x1f0>
    8bee:	4a55      	ldr	r2, [pc, #340]	; (8d44 <__aeabi_dmul+0x1e4>)
    8bf0:	00bf      	lsls	r7, r7, #2
    8bf2:	59d2      	ldr	r2, [r2, r7]
    8bf4:	4697      	mov	pc, r2
    8bf6:	465b      	mov	r3, fp
    8bf8:	4303      	orrs	r3, r0
    8bfa:	4699      	mov	r9, r3
    8bfc:	d000      	beq.n	8c00 <__aeabi_dmul+0xa0>
    8bfe:	e087      	b.n	8d10 <__aeabi_dmul+0x1b0>
    8c00:	2300      	movs	r3, #0
    8c02:	469b      	mov	fp, r3
    8c04:	3302      	adds	r3, #2
    8c06:	2708      	movs	r7, #8
    8c08:	9302      	str	r3, [sp, #8]
    8c0a:	e7ce      	b.n	8baa <__aeabi_dmul+0x4a>
    8c0c:	4642      	mov	r2, r8
    8c0e:	9201      	str	r2, [sp, #4]
    8c10:	2802      	cmp	r0, #2
    8c12:	d067      	beq.n	8ce4 <__aeabi_dmul+0x184>
    8c14:	2803      	cmp	r0, #3
    8c16:	d100      	bne.n	8c1a <__aeabi_dmul+0xba>
    8c18:	e20e      	b.n	9038 <__aeabi_dmul+0x4d8>
    8c1a:	2801      	cmp	r0, #1
    8c1c:	d000      	beq.n	8c20 <__aeabi_dmul+0xc0>
    8c1e:	e162      	b.n	8ee6 <__aeabi_dmul+0x386>
    8c20:	2300      	movs	r3, #0
    8c22:	2400      	movs	r4, #0
    8c24:	2200      	movs	r2, #0
    8c26:	4699      	mov	r9, r3
    8c28:	9901      	ldr	r1, [sp, #4]
    8c2a:	4001      	ands	r1, r0
    8c2c:	b2cd      	uxtb	r5, r1
    8c2e:	2100      	movs	r1, #0
    8c30:	0312      	lsls	r2, r2, #12
    8c32:	0d0b      	lsrs	r3, r1, #20
    8c34:	0b12      	lsrs	r2, r2, #12
    8c36:	051b      	lsls	r3, r3, #20
    8c38:	4313      	orrs	r3, r2
    8c3a:	4a43      	ldr	r2, [pc, #268]	; (8d48 <__aeabi_dmul+0x1e8>)
    8c3c:	0524      	lsls	r4, r4, #20
    8c3e:	4013      	ands	r3, r2
    8c40:	431c      	orrs	r4, r3
    8c42:	0064      	lsls	r4, r4, #1
    8c44:	07ed      	lsls	r5, r5, #31
    8c46:	0864      	lsrs	r4, r4, #1
    8c48:	432c      	orrs	r4, r5
    8c4a:	4648      	mov	r0, r9
    8c4c:	0021      	movs	r1, r4
    8c4e:	b007      	add	sp, #28
    8c50:	bc3c      	pop	{r2, r3, r4, r5}
    8c52:	4690      	mov	r8, r2
    8c54:	4699      	mov	r9, r3
    8c56:	46a2      	mov	sl, r4
    8c58:	46ab      	mov	fp, r5
    8c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8c5c:	4303      	orrs	r3, r0
    8c5e:	4699      	mov	r9, r3
    8c60:	d04f      	beq.n	8d02 <__aeabi_dmul+0x1a2>
    8c62:	465b      	mov	r3, fp
    8c64:	2b00      	cmp	r3, #0
    8c66:	d100      	bne.n	8c6a <__aeabi_dmul+0x10a>
    8c68:	e189      	b.n	8f7e <__aeabi_dmul+0x41e>
    8c6a:	4658      	mov	r0, fp
    8c6c:	f000 fd7a 	bl	9764 <__clzsi2>
    8c70:	0003      	movs	r3, r0
    8c72:	3b0b      	subs	r3, #11
    8c74:	2b1c      	cmp	r3, #28
    8c76:	dd00      	ble.n	8c7a <__aeabi_dmul+0x11a>
    8c78:	e17a      	b.n	8f70 <__aeabi_dmul+0x410>
    8c7a:	221d      	movs	r2, #29
    8c7c:	1ad3      	subs	r3, r2, r3
    8c7e:	003a      	movs	r2, r7
    8c80:	0001      	movs	r1, r0
    8c82:	465c      	mov	r4, fp
    8c84:	40da      	lsrs	r2, r3
    8c86:	3908      	subs	r1, #8
    8c88:	408c      	lsls	r4, r1
    8c8a:	0013      	movs	r3, r2
    8c8c:	408f      	lsls	r7, r1
    8c8e:	4323      	orrs	r3, r4
    8c90:	469b      	mov	fp, r3
    8c92:	46b9      	mov	r9, r7
    8c94:	2300      	movs	r3, #0
    8c96:	4e2d      	ldr	r6, [pc, #180]	; (8d4c <__aeabi_dmul+0x1ec>)
    8c98:	2700      	movs	r7, #0
    8c9a:	1a36      	subs	r6, r6, r0
    8c9c:	9302      	str	r3, [sp, #8]
    8c9e:	e784      	b.n	8baa <__aeabi_dmul+0x4a>
    8ca0:	4653      	mov	r3, sl
    8ca2:	4323      	orrs	r3, r4
    8ca4:	d12a      	bne.n	8cfc <__aeabi_dmul+0x19c>
    8ca6:	2400      	movs	r4, #0
    8ca8:	2002      	movs	r0, #2
    8caa:	e796      	b.n	8bda <__aeabi_dmul+0x7a>
    8cac:	4653      	mov	r3, sl
    8cae:	4323      	orrs	r3, r4
    8cb0:	d020      	beq.n	8cf4 <__aeabi_dmul+0x194>
    8cb2:	2c00      	cmp	r4, #0
    8cb4:	d100      	bne.n	8cb8 <__aeabi_dmul+0x158>
    8cb6:	e157      	b.n	8f68 <__aeabi_dmul+0x408>
    8cb8:	0020      	movs	r0, r4
    8cba:	f000 fd53 	bl	9764 <__clzsi2>
    8cbe:	0003      	movs	r3, r0
    8cc0:	3b0b      	subs	r3, #11
    8cc2:	2b1c      	cmp	r3, #28
    8cc4:	dd00      	ble.n	8cc8 <__aeabi_dmul+0x168>
    8cc6:	e149      	b.n	8f5c <__aeabi_dmul+0x3fc>
    8cc8:	211d      	movs	r1, #29
    8cca:	1acb      	subs	r3, r1, r3
    8ccc:	4651      	mov	r1, sl
    8cce:	0002      	movs	r2, r0
    8cd0:	40d9      	lsrs	r1, r3
    8cd2:	4653      	mov	r3, sl
    8cd4:	3a08      	subs	r2, #8
    8cd6:	4094      	lsls	r4, r2
    8cd8:	4093      	lsls	r3, r2
    8cda:	430c      	orrs	r4, r1
    8cdc:	4a1b      	ldr	r2, [pc, #108]	; (8d4c <__aeabi_dmul+0x1ec>)
    8cde:	1a12      	subs	r2, r2, r0
    8ce0:	2000      	movs	r0, #0
    8ce2:	e77a      	b.n	8bda <__aeabi_dmul+0x7a>
    8ce4:	2501      	movs	r5, #1
    8ce6:	9b01      	ldr	r3, [sp, #4]
    8ce8:	4c14      	ldr	r4, [pc, #80]	; (8d3c <__aeabi_dmul+0x1dc>)
    8cea:	401d      	ands	r5, r3
    8cec:	2300      	movs	r3, #0
    8cee:	2200      	movs	r2, #0
    8cf0:	4699      	mov	r9, r3
    8cf2:	e79c      	b.n	8c2e <__aeabi_dmul+0xce>
    8cf4:	2400      	movs	r4, #0
    8cf6:	2200      	movs	r2, #0
    8cf8:	2001      	movs	r0, #1
    8cfa:	e76e      	b.n	8bda <__aeabi_dmul+0x7a>
    8cfc:	4653      	mov	r3, sl
    8cfe:	2003      	movs	r0, #3
    8d00:	e76b      	b.n	8bda <__aeabi_dmul+0x7a>
    8d02:	2300      	movs	r3, #0
    8d04:	469b      	mov	fp, r3
    8d06:	3301      	adds	r3, #1
    8d08:	2704      	movs	r7, #4
    8d0a:	2600      	movs	r6, #0
    8d0c:	9302      	str	r3, [sp, #8]
    8d0e:	e74c      	b.n	8baa <__aeabi_dmul+0x4a>
    8d10:	2303      	movs	r3, #3
    8d12:	4681      	mov	r9, r0
    8d14:	270c      	movs	r7, #12
    8d16:	9302      	str	r3, [sp, #8]
    8d18:	e747      	b.n	8baa <__aeabi_dmul+0x4a>
    8d1a:	2280      	movs	r2, #128	; 0x80
    8d1c:	2300      	movs	r3, #0
    8d1e:	2500      	movs	r5, #0
    8d20:	0312      	lsls	r2, r2, #12
    8d22:	4699      	mov	r9, r3
    8d24:	4c05      	ldr	r4, [pc, #20]	; (8d3c <__aeabi_dmul+0x1dc>)
    8d26:	e782      	b.n	8c2e <__aeabi_dmul+0xce>
    8d28:	465c      	mov	r4, fp
    8d2a:	464b      	mov	r3, r9
    8d2c:	9802      	ldr	r0, [sp, #8]
    8d2e:	e76f      	b.n	8c10 <__aeabi_dmul+0xb0>
    8d30:	465c      	mov	r4, fp
    8d32:	464b      	mov	r3, r9
    8d34:	9501      	str	r5, [sp, #4]
    8d36:	9802      	ldr	r0, [sp, #8]
    8d38:	e76a      	b.n	8c10 <__aeabi_dmul+0xb0>
    8d3a:	46c0      	nop			; (mov r8, r8)
    8d3c:	000007ff 	.word	0x000007ff
    8d40:	fffffc01 	.word	0xfffffc01
    8d44:	0000c114 	.word	0x0000c114
    8d48:	800fffff 	.word	0x800fffff
    8d4c:	fffffc0d 	.word	0xfffffc0d
    8d50:	464a      	mov	r2, r9
    8d52:	4649      	mov	r1, r9
    8d54:	0c17      	lsrs	r7, r2, #16
    8d56:	0c1a      	lsrs	r2, r3, #16
    8d58:	041b      	lsls	r3, r3, #16
    8d5a:	0c1b      	lsrs	r3, r3, #16
    8d5c:	0408      	lsls	r0, r1, #16
    8d5e:	0019      	movs	r1, r3
    8d60:	0c00      	lsrs	r0, r0, #16
    8d62:	4341      	muls	r1, r0
    8d64:	0015      	movs	r5, r2
    8d66:	4688      	mov	r8, r1
    8d68:	0019      	movs	r1, r3
    8d6a:	437d      	muls	r5, r7
    8d6c:	4379      	muls	r1, r7
    8d6e:	9503      	str	r5, [sp, #12]
    8d70:	4689      	mov	r9, r1
    8d72:	0029      	movs	r1, r5
    8d74:	0015      	movs	r5, r2
    8d76:	4345      	muls	r5, r0
    8d78:	444d      	add	r5, r9
    8d7a:	9502      	str	r5, [sp, #8]
    8d7c:	4645      	mov	r5, r8
    8d7e:	0c2d      	lsrs	r5, r5, #16
    8d80:	46aa      	mov	sl, r5
    8d82:	9d02      	ldr	r5, [sp, #8]
    8d84:	4455      	add	r5, sl
    8d86:	45a9      	cmp	r9, r5
    8d88:	d906      	bls.n	8d98 <__aeabi_dmul+0x238>
    8d8a:	468a      	mov	sl, r1
    8d8c:	2180      	movs	r1, #128	; 0x80
    8d8e:	0249      	lsls	r1, r1, #9
    8d90:	4689      	mov	r9, r1
    8d92:	44ca      	add	sl, r9
    8d94:	4651      	mov	r1, sl
    8d96:	9103      	str	r1, [sp, #12]
    8d98:	0c29      	lsrs	r1, r5, #16
    8d9a:	9104      	str	r1, [sp, #16]
    8d9c:	4641      	mov	r1, r8
    8d9e:	0409      	lsls	r1, r1, #16
    8da0:	042d      	lsls	r5, r5, #16
    8da2:	0c09      	lsrs	r1, r1, #16
    8da4:	4688      	mov	r8, r1
    8da6:	0029      	movs	r1, r5
    8da8:	0c25      	lsrs	r5, r4, #16
    8daa:	0424      	lsls	r4, r4, #16
    8dac:	4441      	add	r1, r8
    8dae:	0c24      	lsrs	r4, r4, #16
    8db0:	9105      	str	r1, [sp, #20]
    8db2:	0021      	movs	r1, r4
    8db4:	4341      	muls	r1, r0
    8db6:	4688      	mov	r8, r1
    8db8:	0021      	movs	r1, r4
    8dba:	4379      	muls	r1, r7
    8dbc:	468a      	mov	sl, r1
    8dbe:	4368      	muls	r0, r5
    8dc0:	4641      	mov	r1, r8
    8dc2:	4450      	add	r0, sl
    8dc4:	4681      	mov	r9, r0
    8dc6:	0c08      	lsrs	r0, r1, #16
    8dc8:	4448      	add	r0, r9
    8dca:	436f      	muls	r7, r5
    8dcc:	4582      	cmp	sl, r0
    8dce:	d903      	bls.n	8dd8 <__aeabi_dmul+0x278>
    8dd0:	2180      	movs	r1, #128	; 0x80
    8dd2:	0249      	lsls	r1, r1, #9
    8dd4:	4689      	mov	r9, r1
    8dd6:	444f      	add	r7, r9
    8dd8:	0c01      	lsrs	r1, r0, #16
    8dda:	4689      	mov	r9, r1
    8ddc:	0039      	movs	r1, r7
    8dde:	4449      	add	r1, r9
    8de0:	9102      	str	r1, [sp, #8]
    8de2:	4641      	mov	r1, r8
    8de4:	040f      	lsls	r7, r1, #16
    8de6:	9904      	ldr	r1, [sp, #16]
    8de8:	0c3f      	lsrs	r7, r7, #16
    8dea:	4688      	mov	r8, r1
    8dec:	0400      	lsls	r0, r0, #16
    8dee:	19c0      	adds	r0, r0, r7
    8df0:	4480      	add	r8, r0
    8df2:	4641      	mov	r1, r8
    8df4:	9104      	str	r1, [sp, #16]
    8df6:	4659      	mov	r1, fp
    8df8:	0c0f      	lsrs	r7, r1, #16
    8dfa:	0409      	lsls	r1, r1, #16
    8dfc:	0c09      	lsrs	r1, r1, #16
    8dfe:	4688      	mov	r8, r1
    8e00:	4359      	muls	r1, r3
    8e02:	468a      	mov	sl, r1
    8e04:	0039      	movs	r1, r7
    8e06:	4351      	muls	r1, r2
    8e08:	4689      	mov	r9, r1
    8e0a:	4641      	mov	r1, r8
    8e0c:	434a      	muls	r2, r1
    8e0e:	4651      	mov	r1, sl
    8e10:	0c09      	lsrs	r1, r1, #16
    8e12:	468b      	mov	fp, r1
    8e14:	437b      	muls	r3, r7
    8e16:	18d2      	adds	r2, r2, r3
    8e18:	445a      	add	r2, fp
    8e1a:	4293      	cmp	r3, r2
    8e1c:	d903      	bls.n	8e26 <__aeabi_dmul+0x2c6>
    8e1e:	2380      	movs	r3, #128	; 0x80
    8e20:	025b      	lsls	r3, r3, #9
    8e22:	469b      	mov	fp, r3
    8e24:	44d9      	add	r9, fp
    8e26:	4651      	mov	r1, sl
    8e28:	0409      	lsls	r1, r1, #16
    8e2a:	0c09      	lsrs	r1, r1, #16
    8e2c:	468a      	mov	sl, r1
    8e2e:	4641      	mov	r1, r8
    8e30:	4361      	muls	r1, r4
    8e32:	437c      	muls	r4, r7
    8e34:	0c13      	lsrs	r3, r2, #16
    8e36:	0412      	lsls	r2, r2, #16
    8e38:	444b      	add	r3, r9
    8e3a:	4452      	add	r2, sl
    8e3c:	46a1      	mov	r9, r4
    8e3e:	468a      	mov	sl, r1
    8e40:	003c      	movs	r4, r7
    8e42:	4641      	mov	r1, r8
    8e44:	436c      	muls	r4, r5
    8e46:	434d      	muls	r5, r1
    8e48:	4651      	mov	r1, sl
    8e4a:	444d      	add	r5, r9
    8e4c:	0c0f      	lsrs	r7, r1, #16
    8e4e:	197d      	adds	r5, r7, r5
    8e50:	45a9      	cmp	r9, r5
    8e52:	d903      	bls.n	8e5c <__aeabi_dmul+0x2fc>
    8e54:	2180      	movs	r1, #128	; 0x80
    8e56:	0249      	lsls	r1, r1, #9
    8e58:	4688      	mov	r8, r1
    8e5a:	4444      	add	r4, r8
    8e5c:	9f04      	ldr	r7, [sp, #16]
    8e5e:	9903      	ldr	r1, [sp, #12]
    8e60:	46b8      	mov	r8, r7
    8e62:	4441      	add	r1, r8
    8e64:	468b      	mov	fp, r1
    8e66:	4583      	cmp	fp, r0
    8e68:	4180      	sbcs	r0, r0
    8e6a:	4241      	negs	r1, r0
    8e6c:	4688      	mov	r8, r1
    8e6e:	4651      	mov	r1, sl
    8e70:	0408      	lsls	r0, r1, #16
    8e72:	042f      	lsls	r7, r5, #16
    8e74:	0c00      	lsrs	r0, r0, #16
    8e76:	183f      	adds	r7, r7, r0
    8e78:	4658      	mov	r0, fp
    8e7a:	9902      	ldr	r1, [sp, #8]
    8e7c:	1810      	adds	r0, r2, r0
    8e7e:	4689      	mov	r9, r1
    8e80:	4290      	cmp	r0, r2
    8e82:	4192      	sbcs	r2, r2
    8e84:	444f      	add	r7, r9
    8e86:	46ba      	mov	sl, r7
    8e88:	4252      	negs	r2, r2
    8e8a:	4699      	mov	r9, r3
    8e8c:	4693      	mov	fp, r2
    8e8e:	44c2      	add	sl, r8
    8e90:	44d1      	add	r9, sl
    8e92:	44cb      	add	fp, r9
    8e94:	428f      	cmp	r7, r1
    8e96:	41bf      	sbcs	r7, r7
    8e98:	45c2      	cmp	sl, r8
    8e9a:	4189      	sbcs	r1, r1
    8e9c:	4599      	cmp	r9, r3
    8e9e:	419b      	sbcs	r3, r3
    8ea0:	4593      	cmp	fp, r2
    8ea2:	4192      	sbcs	r2, r2
    8ea4:	427f      	negs	r7, r7
    8ea6:	4249      	negs	r1, r1
    8ea8:	0c2d      	lsrs	r5, r5, #16
    8eaa:	4252      	negs	r2, r2
    8eac:	430f      	orrs	r7, r1
    8eae:	425b      	negs	r3, r3
    8eb0:	4313      	orrs	r3, r2
    8eb2:	197f      	adds	r7, r7, r5
    8eb4:	18ff      	adds	r7, r7, r3
    8eb6:	465b      	mov	r3, fp
    8eb8:	193c      	adds	r4, r7, r4
    8eba:	0ddb      	lsrs	r3, r3, #23
    8ebc:	9a05      	ldr	r2, [sp, #20]
    8ebe:	0264      	lsls	r4, r4, #9
    8ec0:	431c      	orrs	r4, r3
    8ec2:	0243      	lsls	r3, r0, #9
    8ec4:	4313      	orrs	r3, r2
    8ec6:	1e5d      	subs	r5, r3, #1
    8ec8:	41ab      	sbcs	r3, r5
    8eca:	465a      	mov	r2, fp
    8ecc:	0dc0      	lsrs	r0, r0, #23
    8ece:	4303      	orrs	r3, r0
    8ed0:	0252      	lsls	r2, r2, #9
    8ed2:	4313      	orrs	r3, r2
    8ed4:	01e2      	lsls	r2, r4, #7
    8ed6:	d556      	bpl.n	8f86 <__aeabi_dmul+0x426>
    8ed8:	2001      	movs	r0, #1
    8eda:	085a      	lsrs	r2, r3, #1
    8edc:	4003      	ands	r3, r0
    8ede:	4313      	orrs	r3, r2
    8ee0:	07e2      	lsls	r2, r4, #31
    8ee2:	4313      	orrs	r3, r2
    8ee4:	0864      	lsrs	r4, r4, #1
    8ee6:	485a      	ldr	r0, [pc, #360]	; (9050 <__aeabi_dmul+0x4f0>)
    8ee8:	4460      	add	r0, ip
    8eea:	2800      	cmp	r0, #0
    8eec:	dd4d      	ble.n	8f8a <__aeabi_dmul+0x42a>
    8eee:	075a      	lsls	r2, r3, #29
    8ef0:	d009      	beq.n	8f06 <__aeabi_dmul+0x3a6>
    8ef2:	220f      	movs	r2, #15
    8ef4:	401a      	ands	r2, r3
    8ef6:	2a04      	cmp	r2, #4
    8ef8:	d005      	beq.n	8f06 <__aeabi_dmul+0x3a6>
    8efa:	1d1a      	adds	r2, r3, #4
    8efc:	429a      	cmp	r2, r3
    8efe:	419b      	sbcs	r3, r3
    8f00:	425b      	negs	r3, r3
    8f02:	18e4      	adds	r4, r4, r3
    8f04:	0013      	movs	r3, r2
    8f06:	01e2      	lsls	r2, r4, #7
    8f08:	d504      	bpl.n	8f14 <__aeabi_dmul+0x3b4>
    8f0a:	2080      	movs	r0, #128	; 0x80
    8f0c:	4a51      	ldr	r2, [pc, #324]	; (9054 <__aeabi_dmul+0x4f4>)
    8f0e:	00c0      	lsls	r0, r0, #3
    8f10:	4014      	ands	r4, r2
    8f12:	4460      	add	r0, ip
    8f14:	4a50      	ldr	r2, [pc, #320]	; (9058 <__aeabi_dmul+0x4f8>)
    8f16:	4290      	cmp	r0, r2
    8f18:	dd00      	ble.n	8f1c <__aeabi_dmul+0x3bc>
    8f1a:	e6e3      	b.n	8ce4 <__aeabi_dmul+0x184>
    8f1c:	2501      	movs	r5, #1
    8f1e:	08db      	lsrs	r3, r3, #3
    8f20:	0762      	lsls	r2, r4, #29
    8f22:	431a      	orrs	r2, r3
    8f24:	0264      	lsls	r4, r4, #9
    8f26:	9b01      	ldr	r3, [sp, #4]
    8f28:	4691      	mov	r9, r2
    8f2a:	0b22      	lsrs	r2, r4, #12
    8f2c:	0544      	lsls	r4, r0, #21
    8f2e:	0d64      	lsrs	r4, r4, #21
    8f30:	401d      	ands	r5, r3
    8f32:	e67c      	b.n	8c2e <__aeabi_dmul+0xce>
    8f34:	2280      	movs	r2, #128	; 0x80
    8f36:	4659      	mov	r1, fp
    8f38:	0312      	lsls	r2, r2, #12
    8f3a:	4211      	tst	r1, r2
    8f3c:	d008      	beq.n	8f50 <__aeabi_dmul+0x3f0>
    8f3e:	4214      	tst	r4, r2
    8f40:	d106      	bne.n	8f50 <__aeabi_dmul+0x3f0>
    8f42:	4322      	orrs	r2, r4
    8f44:	0312      	lsls	r2, r2, #12
    8f46:	0b12      	lsrs	r2, r2, #12
    8f48:	4645      	mov	r5, r8
    8f4a:	4699      	mov	r9, r3
    8f4c:	4c43      	ldr	r4, [pc, #268]	; (905c <__aeabi_dmul+0x4fc>)
    8f4e:	e66e      	b.n	8c2e <__aeabi_dmul+0xce>
    8f50:	465b      	mov	r3, fp
    8f52:	431a      	orrs	r2, r3
    8f54:	0312      	lsls	r2, r2, #12
    8f56:	0b12      	lsrs	r2, r2, #12
    8f58:	4c40      	ldr	r4, [pc, #256]	; (905c <__aeabi_dmul+0x4fc>)
    8f5a:	e668      	b.n	8c2e <__aeabi_dmul+0xce>
    8f5c:	0003      	movs	r3, r0
    8f5e:	4654      	mov	r4, sl
    8f60:	3b28      	subs	r3, #40	; 0x28
    8f62:	409c      	lsls	r4, r3
    8f64:	2300      	movs	r3, #0
    8f66:	e6b9      	b.n	8cdc <__aeabi_dmul+0x17c>
    8f68:	f000 fbfc 	bl	9764 <__clzsi2>
    8f6c:	3020      	adds	r0, #32
    8f6e:	e6a6      	b.n	8cbe <__aeabi_dmul+0x15e>
    8f70:	0003      	movs	r3, r0
    8f72:	3b28      	subs	r3, #40	; 0x28
    8f74:	409f      	lsls	r7, r3
    8f76:	2300      	movs	r3, #0
    8f78:	46bb      	mov	fp, r7
    8f7a:	4699      	mov	r9, r3
    8f7c:	e68a      	b.n	8c94 <__aeabi_dmul+0x134>
    8f7e:	f000 fbf1 	bl	9764 <__clzsi2>
    8f82:	3020      	adds	r0, #32
    8f84:	e674      	b.n	8c70 <__aeabi_dmul+0x110>
    8f86:	46b4      	mov	ip, r6
    8f88:	e7ad      	b.n	8ee6 <__aeabi_dmul+0x386>
    8f8a:	2501      	movs	r5, #1
    8f8c:	1a2a      	subs	r2, r5, r0
    8f8e:	2a38      	cmp	r2, #56	; 0x38
    8f90:	dd06      	ble.n	8fa0 <__aeabi_dmul+0x440>
    8f92:	9b01      	ldr	r3, [sp, #4]
    8f94:	2400      	movs	r4, #0
    8f96:	401d      	ands	r5, r3
    8f98:	2300      	movs	r3, #0
    8f9a:	2200      	movs	r2, #0
    8f9c:	4699      	mov	r9, r3
    8f9e:	e646      	b.n	8c2e <__aeabi_dmul+0xce>
    8fa0:	2a1f      	cmp	r2, #31
    8fa2:	dc21      	bgt.n	8fe8 <__aeabi_dmul+0x488>
    8fa4:	2520      	movs	r5, #32
    8fa6:	0020      	movs	r0, r4
    8fa8:	1aad      	subs	r5, r5, r2
    8faa:	001e      	movs	r6, r3
    8fac:	40ab      	lsls	r3, r5
    8fae:	40a8      	lsls	r0, r5
    8fb0:	40d6      	lsrs	r6, r2
    8fb2:	1e5d      	subs	r5, r3, #1
    8fb4:	41ab      	sbcs	r3, r5
    8fb6:	4330      	orrs	r0, r6
    8fb8:	4318      	orrs	r0, r3
    8fba:	40d4      	lsrs	r4, r2
    8fbc:	0743      	lsls	r3, r0, #29
    8fbe:	d009      	beq.n	8fd4 <__aeabi_dmul+0x474>
    8fc0:	230f      	movs	r3, #15
    8fc2:	4003      	ands	r3, r0
    8fc4:	2b04      	cmp	r3, #4
    8fc6:	d005      	beq.n	8fd4 <__aeabi_dmul+0x474>
    8fc8:	0003      	movs	r3, r0
    8fca:	1d18      	adds	r0, r3, #4
    8fcc:	4298      	cmp	r0, r3
    8fce:	419b      	sbcs	r3, r3
    8fd0:	425b      	negs	r3, r3
    8fd2:	18e4      	adds	r4, r4, r3
    8fd4:	0223      	lsls	r3, r4, #8
    8fd6:	d521      	bpl.n	901c <__aeabi_dmul+0x4bc>
    8fd8:	2501      	movs	r5, #1
    8fda:	9b01      	ldr	r3, [sp, #4]
    8fdc:	2401      	movs	r4, #1
    8fde:	401d      	ands	r5, r3
    8fe0:	2300      	movs	r3, #0
    8fe2:	2200      	movs	r2, #0
    8fe4:	4699      	mov	r9, r3
    8fe6:	e622      	b.n	8c2e <__aeabi_dmul+0xce>
    8fe8:	251f      	movs	r5, #31
    8fea:	0021      	movs	r1, r4
    8fec:	426d      	negs	r5, r5
    8fee:	1a28      	subs	r0, r5, r0
    8ff0:	40c1      	lsrs	r1, r0
    8ff2:	0008      	movs	r0, r1
    8ff4:	2a20      	cmp	r2, #32
    8ff6:	d01d      	beq.n	9034 <__aeabi_dmul+0x4d4>
    8ff8:	355f      	adds	r5, #95	; 0x5f
    8ffa:	1aaa      	subs	r2, r5, r2
    8ffc:	4094      	lsls	r4, r2
    8ffe:	4323      	orrs	r3, r4
    9000:	1e5c      	subs	r4, r3, #1
    9002:	41a3      	sbcs	r3, r4
    9004:	2507      	movs	r5, #7
    9006:	4303      	orrs	r3, r0
    9008:	401d      	ands	r5, r3
    900a:	2200      	movs	r2, #0
    900c:	2d00      	cmp	r5, #0
    900e:	d009      	beq.n	9024 <__aeabi_dmul+0x4c4>
    9010:	220f      	movs	r2, #15
    9012:	2400      	movs	r4, #0
    9014:	401a      	ands	r2, r3
    9016:	0018      	movs	r0, r3
    9018:	2a04      	cmp	r2, #4
    901a:	d1d6      	bne.n	8fca <__aeabi_dmul+0x46a>
    901c:	0003      	movs	r3, r0
    901e:	0765      	lsls	r5, r4, #29
    9020:	0264      	lsls	r4, r4, #9
    9022:	0b22      	lsrs	r2, r4, #12
    9024:	08db      	lsrs	r3, r3, #3
    9026:	432b      	orrs	r3, r5
    9028:	2501      	movs	r5, #1
    902a:	4699      	mov	r9, r3
    902c:	9b01      	ldr	r3, [sp, #4]
    902e:	2400      	movs	r4, #0
    9030:	401d      	ands	r5, r3
    9032:	e5fc      	b.n	8c2e <__aeabi_dmul+0xce>
    9034:	2400      	movs	r4, #0
    9036:	e7e2      	b.n	8ffe <__aeabi_dmul+0x49e>
    9038:	2280      	movs	r2, #128	; 0x80
    903a:	2501      	movs	r5, #1
    903c:	0312      	lsls	r2, r2, #12
    903e:	4322      	orrs	r2, r4
    9040:	9901      	ldr	r1, [sp, #4]
    9042:	0312      	lsls	r2, r2, #12
    9044:	0b12      	lsrs	r2, r2, #12
    9046:	400d      	ands	r5, r1
    9048:	4699      	mov	r9, r3
    904a:	4c04      	ldr	r4, [pc, #16]	; (905c <__aeabi_dmul+0x4fc>)
    904c:	e5ef      	b.n	8c2e <__aeabi_dmul+0xce>
    904e:	46c0      	nop			; (mov r8, r8)
    9050:	000003ff 	.word	0x000003ff
    9054:	feffffff 	.word	0xfeffffff
    9058:	000007fe 	.word	0x000007fe
    905c:	000007ff 	.word	0x000007ff

00009060 <__aeabi_dsub>:
    9060:	b5f0      	push	{r4, r5, r6, r7, lr}
    9062:	4646      	mov	r6, r8
    9064:	46d6      	mov	lr, sl
    9066:	464f      	mov	r7, r9
    9068:	030c      	lsls	r4, r1, #12
    906a:	b5c0      	push	{r6, r7, lr}
    906c:	0fcd      	lsrs	r5, r1, #31
    906e:	004e      	lsls	r6, r1, #1
    9070:	0a61      	lsrs	r1, r4, #9
    9072:	0f44      	lsrs	r4, r0, #29
    9074:	430c      	orrs	r4, r1
    9076:	00c1      	lsls	r1, r0, #3
    9078:	0058      	lsls	r0, r3, #1
    907a:	0d40      	lsrs	r0, r0, #21
    907c:	4684      	mov	ip, r0
    907e:	468a      	mov	sl, r1
    9080:	000f      	movs	r7, r1
    9082:	0319      	lsls	r1, r3, #12
    9084:	0f50      	lsrs	r0, r2, #29
    9086:	0a49      	lsrs	r1, r1, #9
    9088:	4301      	orrs	r1, r0
    908a:	48c6      	ldr	r0, [pc, #792]	; (93a4 <__aeabi_dsub+0x344>)
    908c:	0d76      	lsrs	r6, r6, #21
    908e:	46a8      	mov	r8, r5
    9090:	0fdb      	lsrs	r3, r3, #31
    9092:	00d2      	lsls	r2, r2, #3
    9094:	4584      	cmp	ip, r0
    9096:	d100      	bne.n	909a <__aeabi_dsub+0x3a>
    9098:	e0d8      	b.n	924c <__aeabi_dsub+0x1ec>
    909a:	2001      	movs	r0, #1
    909c:	4043      	eors	r3, r0
    909e:	42ab      	cmp	r3, r5
    90a0:	d100      	bne.n	90a4 <__aeabi_dsub+0x44>
    90a2:	e0a6      	b.n	91f2 <__aeabi_dsub+0x192>
    90a4:	4660      	mov	r0, ip
    90a6:	1a35      	subs	r5, r6, r0
    90a8:	2d00      	cmp	r5, #0
    90aa:	dc00      	bgt.n	90ae <__aeabi_dsub+0x4e>
    90ac:	e105      	b.n	92ba <__aeabi_dsub+0x25a>
    90ae:	2800      	cmp	r0, #0
    90b0:	d110      	bne.n	90d4 <__aeabi_dsub+0x74>
    90b2:	000b      	movs	r3, r1
    90b4:	4313      	orrs	r3, r2
    90b6:	d100      	bne.n	90ba <__aeabi_dsub+0x5a>
    90b8:	e0d7      	b.n	926a <__aeabi_dsub+0x20a>
    90ba:	1e6b      	subs	r3, r5, #1
    90bc:	2b00      	cmp	r3, #0
    90be:	d000      	beq.n	90c2 <__aeabi_dsub+0x62>
    90c0:	e14b      	b.n	935a <__aeabi_dsub+0x2fa>
    90c2:	4653      	mov	r3, sl
    90c4:	1a9f      	subs	r7, r3, r2
    90c6:	45ba      	cmp	sl, r7
    90c8:	4180      	sbcs	r0, r0
    90ca:	1a64      	subs	r4, r4, r1
    90cc:	4240      	negs	r0, r0
    90ce:	1a24      	subs	r4, r4, r0
    90d0:	2601      	movs	r6, #1
    90d2:	e01e      	b.n	9112 <__aeabi_dsub+0xb2>
    90d4:	4bb3      	ldr	r3, [pc, #716]	; (93a4 <__aeabi_dsub+0x344>)
    90d6:	429e      	cmp	r6, r3
    90d8:	d048      	beq.n	916c <__aeabi_dsub+0x10c>
    90da:	2380      	movs	r3, #128	; 0x80
    90dc:	041b      	lsls	r3, r3, #16
    90de:	4319      	orrs	r1, r3
    90e0:	2d38      	cmp	r5, #56	; 0x38
    90e2:	dd00      	ble.n	90e6 <__aeabi_dsub+0x86>
    90e4:	e119      	b.n	931a <__aeabi_dsub+0x2ba>
    90e6:	2d1f      	cmp	r5, #31
    90e8:	dd00      	ble.n	90ec <__aeabi_dsub+0x8c>
    90ea:	e14c      	b.n	9386 <__aeabi_dsub+0x326>
    90ec:	2320      	movs	r3, #32
    90ee:	000f      	movs	r7, r1
    90f0:	1b5b      	subs	r3, r3, r5
    90f2:	0010      	movs	r0, r2
    90f4:	409a      	lsls	r2, r3
    90f6:	409f      	lsls	r7, r3
    90f8:	40e8      	lsrs	r0, r5
    90fa:	1e53      	subs	r3, r2, #1
    90fc:	419a      	sbcs	r2, r3
    90fe:	40e9      	lsrs	r1, r5
    9100:	4307      	orrs	r7, r0
    9102:	4317      	orrs	r7, r2
    9104:	4653      	mov	r3, sl
    9106:	1bdf      	subs	r7, r3, r7
    9108:	1a61      	subs	r1, r4, r1
    910a:	45ba      	cmp	sl, r7
    910c:	41a4      	sbcs	r4, r4
    910e:	4264      	negs	r4, r4
    9110:	1b0c      	subs	r4, r1, r4
    9112:	0223      	lsls	r3, r4, #8
    9114:	d400      	bmi.n	9118 <__aeabi_dsub+0xb8>
    9116:	e0c5      	b.n	92a4 <__aeabi_dsub+0x244>
    9118:	0264      	lsls	r4, r4, #9
    911a:	0a65      	lsrs	r5, r4, #9
    911c:	2d00      	cmp	r5, #0
    911e:	d100      	bne.n	9122 <__aeabi_dsub+0xc2>
    9120:	e0f6      	b.n	9310 <__aeabi_dsub+0x2b0>
    9122:	0028      	movs	r0, r5
    9124:	f000 fb1e 	bl	9764 <__clzsi2>
    9128:	0003      	movs	r3, r0
    912a:	3b08      	subs	r3, #8
    912c:	2b1f      	cmp	r3, #31
    912e:	dd00      	ble.n	9132 <__aeabi_dsub+0xd2>
    9130:	e0e9      	b.n	9306 <__aeabi_dsub+0x2a6>
    9132:	2220      	movs	r2, #32
    9134:	003c      	movs	r4, r7
    9136:	1ad2      	subs	r2, r2, r3
    9138:	409d      	lsls	r5, r3
    913a:	40d4      	lsrs	r4, r2
    913c:	409f      	lsls	r7, r3
    913e:	4325      	orrs	r5, r4
    9140:	429e      	cmp	r6, r3
    9142:	dd00      	ble.n	9146 <__aeabi_dsub+0xe6>
    9144:	e0db      	b.n	92fe <__aeabi_dsub+0x29e>
    9146:	1b9e      	subs	r6, r3, r6
    9148:	1c73      	adds	r3, r6, #1
    914a:	2b1f      	cmp	r3, #31
    914c:	dd00      	ble.n	9150 <__aeabi_dsub+0xf0>
    914e:	e10a      	b.n	9366 <__aeabi_dsub+0x306>
    9150:	2220      	movs	r2, #32
    9152:	0038      	movs	r0, r7
    9154:	1ad2      	subs	r2, r2, r3
    9156:	0029      	movs	r1, r5
    9158:	4097      	lsls	r7, r2
    915a:	002c      	movs	r4, r5
    915c:	4091      	lsls	r1, r2
    915e:	40d8      	lsrs	r0, r3
    9160:	1e7a      	subs	r2, r7, #1
    9162:	4197      	sbcs	r7, r2
    9164:	40dc      	lsrs	r4, r3
    9166:	2600      	movs	r6, #0
    9168:	4301      	orrs	r1, r0
    916a:	430f      	orrs	r7, r1
    916c:	077b      	lsls	r3, r7, #29
    916e:	d009      	beq.n	9184 <__aeabi_dsub+0x124>
    9170:	230f      	movs	r3, #15
    9172:	403b      	ands	r3, r7
    9174:	2b04      	cmp	r3, #4
    9176:	d005      	beq.n	9184 <__aeabi_dsub+0x124>
    9178:	1d3b      	adds	r3, r7, #4
    917a:	42bb      	cmp	r3, r7
    917c:	41bf      	sbcs	r7, r7
    917e:	427f      	negs	r7, r7
    9180:	19e4      	adds	r4, r4, r7
    9182:	001f      	movs	r7, r3
    9184:	0223      	lsls	r3, r4, #8
    9186:	d525      	bpl.n	91d4 <__aeabi_dsub+0x174>
    9188:	4b86      	ldr	r3, [pc, #536]	; (93a4 <__aeabi_dsub+0x344>)
    918a:	3601      	adds	r6, #1
    918c:	429e      	cmp	r6, r3
    918e:	d100      	bne.n	9192 <__aeabi_dsub+0x132>
    9190:	e0af      	b.n	92f2 <__aeabi_dsub+0x292>
    9192:	4b85      	ldr	r3, [pc, #532]	; (93a8 <__aeabi_dsub+0x348>)
    9194:	2501      	movs	r5, #1
    9196:	401c      	ands	r4, r3
    9198:	4643      	mov	r3, r8
    919a:	0762      	lsls	r2, r4, #29
    919c:	08ff      	lsrs	r7, r7, #3
    919e:	0264      	lsls	r4, r4, #9
    91a0:	0576      	lsls	r6, r6, #21
    91a2:	4317      	orrs	r7, r2
    91a4:	0b24      	lsrs	r4, r4, #12
    91a6:	0d76      	lsrs	r6, r6, #21
    91a8:	401d      	ands	r5, r3
    91aa:	2100      	movs	r1, #0
    91ac:	0324      	lsls	r4, r4, #12
    91ae:	0b23      	lsrs	r3, r4, #12
    91b0:	0d0c      	lsrs	r4, r1, #20
    91b2:	4a7e      	ldr	r2, [pc, #504]	; (93ac <__aeabi_dsub+0x34c>)
    91b4:	0524      	lsls	r4, r4, #20
    91b6:	431c      	orrs	r4, r3
    91b8:	4014      	ands	r4, r2
    91ba:	0533      	lsls	r3, r6, #20
    91bc:	4323      	orrs	r3, r4
    91be:	005b      	lsls	r3, r3, #1
    91c0:	07ed      	lsls	r5, r5, #31
    91c2:	085b      	lsrs	r3, r3, #1
    91c4:	432b      	orrs	r3, r5
    91c6:	0038      	movs	r0, r7
    91c8:	0019      	movs	r1, r3
    91ca:	bc1c      	pop	{r2, r3, r4}
    91cc:	4690      	mov	r8, r2
    91ce:	4699      	mov	r9, r3
    91d0:	46a2      	mov	sl, r4
    91d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    91d4:	2501      	movs	r5, #1
    91d6:	4643      	mov	r3, r8
    91d8:	0762      	lsls	r2, r4, #29
    91da:	08ff      	lsrs	r7, r7, #3
    91dc:	4317      	orrs	r7, r2
    91de:	08e4      	lsrs	r4, r4, #3
    91e0:	401d      	ands	r5, r3
    91e2:	4b70      	ldr	r3, [pc, #448]	; (93a4 <__aeabi_dsub+0x344>)
    91e4:	429e      	cmp	r6, r3
    91e6:	d036      	beq.n	9256 <__aeabi_dsub+0x1f6>
    91e8:	0324      	lsls	r4, r4, #12
    91ea:	0576      	lsls	r6, r6, #21
    91ec:	0b24      	lsrs	r4, r4, #12
    91ee:	0d76      	lsrs	r6, r6, #21
    91f0:	e7db      	b.n	91aa <__aeabi_dsub+0x14a>
    91f2:	4663      	mov	r3, ip
    91f4:	1af3      	subs	r3, r6, r3
    91f6:	2b00      	cmp	r3, #0
    91f8:	dc00      	bgt.n	91fc <__aeabi_dsub+0x19c>
    91fa:	e094      	b.n	9326 <__aeabi_dsub+0x2c6>
    91fc:	4660      	mov	r0, ip
    91fe:	2800      	cmp	r0, #0
    9200:	d035      	beq.n	926e <__aeabi_dsub+0x20e>
    9202:	4868      	ldr	r0, [pc, #416]	; (93a4 <__aeabi_dsub+0x344>)
    9204:	4286      	cmp	r6, r0
    9206:	d0b1      	beq.n	916c <__aeabi_dsub+0x10c>
    9208:	2780      	movs	r7, #128	; 0x80
    920a:	043f      	lsls	r7, r7, #16
    920c:	4339      	orrs	r1, r7
    920e:	2b38      	cmp	r3, #56	; 0x38
    9210:	dc00      	bgt.n	9214 <__aeabi_dsub+0x1b4>
    9212:	e0fd      	b.n	9410 <__aeabi_dsub+0x3b0>
    9214:	430a      	orrs	r2, r1
    9216:	0017      	movs	r7, r2
    9218:	2100      	movs	r1, #0
    921a:	1e7a      	subs	r2, r7, #1
    921c:	4197      	sbcs	r7, r2
    921e:	4457      	add	r7, sl
    9220:	4557      	cmp	r7, sl
    9222:	4180      	sbcs	r0, r0
    9224:	1909      	adds	r1, r1, r4
    9226:	4244      	negs	r4, r0
    9228:	190c      	adds	r4, r1, r4
    922a:	0223      	lsls	r3, r4, #8
    922c:	d53a      	bpl.n	92a4 <__aeabi_dsub+0x244>
    922e:	4b5d      	ldr	r3, [pc, #372]	; (93a4 <__aeabi_dsub+0x344>)
    9230:	3601      	adds	r6, #1
    9232:	429e      	cmp	r6, r3
    9234:	d100      	bne.n	9238 <__aeabi_dsub+0x1d8>
    9236:	e14b      	b.n	94d0 <__aeabi_dsub+0x470>
    9238:	2201      	movs	r2, #1
    923a:	4b5b      	ldr	r3, [pc, #364]	; (93a8 <__aeabi_dsub+0x348>)
    923c:	401c      	ands	r4, r3
    923e:	087b      	lsrs	r3, r7, #1
    9240:	4017      	ands	r7, r2
    9242:	431f      	orrs	r7, r3
    9244:	07e2      	lsls	r2, r4, #31
    9246:	4317      	orrs	r7, r2
    9248:	0864      	lsrs	r4, r4, #1
    924a:	e78f      	b.n	916c <__aeabi_dsub+0x10c>
    924c:	0008      	movs	r0, r1
    924e:	4310      	orrs	r0, r2
    9250:	d000      	beq.n	9254 <__aeabi_dsub+0x1f4>
    9252:	e724      	b.n	909e <__aeabi_dsub+0x3e>
    9254:	e721      	b.n	909a <__aeabi_dsub+0x3a>
    9256:	0023      	movs	r3, r4
    9258:	433b      	orrs	r3, r7
    925a:	d100      	bne.n	925e <__aeabi_dsub+0x1fe>
    925c:	e1b9      	b.n	95d2 <__aeabi_dsub+0x572>
    925e:	2280      	movs	r2, #128	; 0x80
    9260:	0312      	lsls	r2, r2, #12
    9262:	4314      	orrs	r4, r2
    9264:	0324      	lsls	r4, r4, #12
    9266:	0b24      	lsrs	r4, r4, #12
    9268:	e79f      	b.n	91aa <__aeabi_dsub+0x14a>
    926a:	002e      	movs	r6, r5
    926c:	e77e      	b.n	916c <__aeabi_dsub+0x10c>
    926e:	0008      	movs	r0, r1
    9270:	4310      	orrs	r0, r2
    9272:	d100      	bne.n	9276 <__aeabi_dsub+0x216>
    9274:	e0ca      	b.n	940c <__aeabi_dsub+0x3ac>
    9276:	1e58      	subs	r0, r3, #1
    9278:	4684      	mov	ip, r0
    927a:	2800      	cmp	r0, #0
    927c:	d000      	beq.n	9280 <__aeabi_dsub+0x220>
    927e:	e0e7      	b.n	9450 <__aeabi_dsub+0x3f0>
    9280:	4452      	add	r2, sl
    9282:	4552      	cmp	r2, sl
    9284:	4180      	sbcs	r0, r0
    9286:	1864      	adds	r4, r4, r1
    9288:	4240      	negs	r0, r0
    928a:	1824      	adds	r4, r4, r0
    928c:	0017      	movs	r7, r2
    928e:	2601      	movs	r6, #1
    9290:	0223      	lsls	r3, r4, #8
    9292:	d507      	bpl.n	92a4 <__aeabi_dsub+0x244>
    9294:	2602      	movs	r6, #2
    9296:	e7cf      	b.n	9238 <__aeabi_dsub+0x1d8>
    9298:	4664      	mov	r4, ip
    929a:	432c      	orrs	r4, r5
    929c:	d100      	bne.n	92a0 <__aeabi_dsub+0x240>
    929e:	e1b3      	b.n	9608 <__aeabi_dsub+0x5a8>
    92a0:	002c      	movs	r4, r5
    92a2:	4667      	mov	r7, ip
    92a4:	077b      	lsls	r3, r7, #29
    92a6:	d000      	beq.n	92aa <__aeabi_dsub+0x24a>
    92a8:	e762      	b.n	9170 <__aeabi_dsub+0x110>
    92aa:	0763      	lsls	r3, r4, #29
    92ac:	08ff      	lsrs	r7, r7, #3
    92ae:	431f      	orrs	r7, r3
    92b0:	2501      	movs	r5, #1
    92b2:	4643      	mov	r3, r8
    92b4:	08e4      	lsrs	r4, r4, #3
    92b6:	401d      	ands	r5, r3
    92b8:	e793      	b.n	91e2 <__aeabi_dsub+0x182>
    92ba:	2d00      	cmp	r5, #0
    92bc:	d178      	bne.n	93b0 <__aeabi_dsub+0x350>
    92be:	1c75      	adds	r5, r6, #1
    92c0:	056d      	lsls	r5, r5, #21
    92c2:	0d6d      	lsrs	r5, r5, #21
    92c4:	2d01      	cmp	r5, #1
    92c6:	dc00      	bgt.n	92ca <__aeabi_dsub+0x26a>
    92c8:	e0f2      	b.n	94b0 <__aeabi_dsub+0x450>
    92ca:	4650      	mov	r0, sl
    92cc:	1a80      	subs	r0, r0, r2
    92ce:	4582      	cmp	sl, r0
    92d0:	41bf      	sbcs	r7, r7
    92d2:	1a65      	subs	r5, r4, r1
    92d4:	427f      	negs	r7, r7
    92d6:	1bed      	subs	r5, r5, r7
    92d8:	4684      	mov	ip, r0
    92da:	0228      	lsls	r0, r5, #8
    92dc:	d400      	bmi.n	92e0 <__aeabi_dsub+0x280>
    92de:	e08c      	b.n	93fa <__aeabi_dsub+0x39a>
    92e0:	4650      	mov	r0, sl
    92e2:	1a17      	subs	r7, r2, r0
    92e4:	42ba      	cmp	r2, r7
    92e6:	4192      	sbcs	r2, r2
    92e8:	1b0c      	subs	r4, r1, r4
    92ea:	4255      	negs	r5, r2
    92ec:	1b65      	subs	r5, r4, r5
    92ee:	4698      	mov	r8, r3
    92f0:	e714      	b.n	911c <__aeabi_dsub+0xbc>
    92f2:	2501      	movs	r5, #1
    92f4:	4643      	mov	r3, r8
    92f6:	2400      	movs	r4, #0
    92f8:	401d      	ands	r5, r3
    92fa:	2700      	movs	r7, #0
    92fc:	e755      	b.n	91aa <__aeabi_dsub+0x14a>
    92fe:	4c2a      	ldr	r4, [pc, #168]	; (93a8 <__aeabi_dsub+0x348>)
    9300:	1af6      	subs	r6, r6, r3
    9302:	402c      	ands	r4, r5
    9304:	e732      	b.n	916c <__aeabi_dsub+0x10c>
    9306:	003d      	movs	r5, r7
    9308:	3828      	subs	r0, #40	; 0x28
    930a:	4085      	lsls	r5, r0
    930c:	2700      	movs	r7, #0
    930e:	e717      	b.n	9140 <__aeabi_dsub+0xe0>
    9310:	0038      	movs	r0, r7
    9312:	f000 fa27 	bl	9764 <__clzsi2>
    9316:	3020      	adds	r0, #32
    9318:	e706      	b.n	9128 <__aeabi_dsub+0xc8>
    931a:	430a      	orrs	r2, r1
    931c:	0017      	movs	r7, r2
    931e:	2100      	movs	r1, #0
    9320:	1e7a      	subs	r2, r7, #1
    9322:	4197      	sbcs	r7, r2
    9324:	e6ee      	b.n	9104 <__aeabi_dsub+0xa4>
    9326:	2b00      	cmp	r3, #0
    9328:	d000      	beq.n	932c <__aeabi_dsub+0x2cc>
    932a:	e0e5      	b.n	94f8 <__aeabi_dsub+0x498>
    932c:	1c73      	adds	r3, r6, #1
    932e:	469c      	mov	ip, r3
    9330:	055b      	lsls	r3, r3, #21
    9332:	0d5b      	lsrs	r3, r3, #21
    9334:	2b01      	cmp	r3, #1
    9336:	dc00      	bgt.n	933a <__aeabi_dsub+0x2da>
    9338:	e09f      	b.n	947a <__aeabi_dsub+0x41a>
    933a:	4b1a      	ldr	r3, [pc, #104]	; (93a4 <__aeabi_dsub+0x344>)
    933c:	459c      	cmp	ip, r3
    933e:	d100      	bne.n	9342 <__aeabi_dsub+0x2e2>
    9340:	e0c5      	b.n	94ce <__aeabi_dsub+0x46e>
    9342:	4452      	add	r2, sl
    9344:	4552      	cmp	r2, sl
    9346:	4180      	sbcs	r0, r0
    9348:	1864      	adds	r4, r4, r1
    934a:	4240      	negs	r0, r0
    934c:	1824      	adds	r4, r4, r0
    934e:	07e7      	lsls	r7, r4, #31
    9350:	0852      	lsrs	r2, r2, #1
    9352:	4317      	orrs	r7, r2
    9354:	0864      	lsrs	r4, r4, #1
    9356:	4666      	mov	r6, ip
    9358:	e708      	b.n	916c <__aeabi_dsub+0x10c>
    935a:	4812      	ldr	r0, [pc, #72]	; (93a4 <__aeabi_dsub+0x344>)
    935c:	4285      	cmp	r5, r0
    935e:	d100      	bne.n	9362 <__aeabi_dsub+0x302>
    9360:	e085      	b.n	946e <__aeabi_dsub+0x40e>
    9362:	001d      	movs	r5, r3
    9364:	e6bc      	b.n	90e0 <__aeabi_dsub+0x80>
    9366:	0029      	movs	r1, r5
    9368:	3e1f      	subs	r6, #31
    936a:	40f1      	lsrs	r1, r6
    936c:	2b20      	cmp	r3, #32
    936e:	d100      	bne.n	9372 <__aeabi_dsub+0x312>
    9370:	e07f      	b.n	9472 <__aeabi_dsub+0x412>
    9372:	2240      	movs	r2, #64	; 0x40
    9374:	1ad3      	subs	r3, r2, r3
    9376:	409d      	lsls	r5, r3
    9378:	432f      	orrs	r7, r5
    937a:	1e7d      	subs	r5, r7, #1
    937c:	41af      	sbcs	r7, r5
    937e:	2400      	movs	r4, #0
    9380:	430f      	orrs	r7, r1
    9382:	2600      	movs	r6, #0
    9384:	e78e      	b.n	92a4 <__aeabi_dsub+0x244>
    9386:	002b      	movs	r3, r5
    9388:	000f      	movs	r7, r1
    938a:	3b20      	subs	r3, #32
    938c:	40df      	lsrs	r7, r3
    938e:	2d20      	cmp	r5, #32
    9390:	d071      	beq.n	9476 <__aeabi_dsub+0x416>
    9392:	2340      	movs	r3, #64	; 0x40
    9394:	1b5d      	subs	r5, r3, r5
    9396:	40a9      	lsls	r1, r5
    9398:	430a      	orrs	r2, r1
    939a:	1e51      	subs	r1, r2, #1
    939c:	418a      	sbcs	r2, r1
    939e:	2100      	movs	r1, #0
    93a0:	4317      	orrs	r7, r2
    93a2:	e6af      	b.n	9104 <__aeabi_dsub+0xa4>
    93a4:	000007ff 	.word	0x000007ff
    93a8:	ff7fffff 	.word	0xff7fffff
    93ac:	800fffff 	.word	0x800fffff
    93b0:	2e00      	cmp	r6, #0
    93b2:	d03e      	beq.n	9432 <__aeabi_dsub+0x3d2>
    93b4:	4eb3      	ldr	r6, [pc, #716]	; (9684 <__aeabi_dsub+0x624>)
    93b6:	45b4      	cmp	ip, r6
    93b8:	d045      	beq.n	9446 <__aeabi_dsub+0x3e6>
    93ba:	2680      	movs	r6, #128	; 0x80
    93bc:	0436      	lsls	r6, r6, #16
    93be:	426d      	negs	r5, r5
    93c0:	4334      	orrs	r4, r6
    93c2:	2d38      	cmp	r5, #56	; 0x38
    93c4:	dd00      	ble.n	93c8 <__aeabi_dsub+0x368>
    93c6:	e0a8      	b.n	951a <__aeabi_dsub+0x4ba>
    93c8:	2d1f      	cmp	r5, #31
    93ca:	dd00      	ble.n	93ce <__aeabi_dsub+0x36e>
    93cc:	e11f      	b.n	960e <__aeabi_dsub+0x5ae>
    93ce:	2620      	movs	r6, #32
    93d0:	0027      	movs	r7, r4
    93d2:	4650      	mov	r0, sl
    93d4:	1b76      	subs	r6, r6, r5
    93d6:	40b7      	lsls	r7, r6
    93d8:	40e8      	lsrs	r0, r5
    93da:	4307      	orrs	r7, r0
    93dc:	4650      	mov	r0, sl
    93de:	40b0      	lsls	r0, r6
    93e0:	1e46      	subs	r6, r0, #1
    93e2:	41b0      	sbcs	r0, r6
    93e4:	40ec      	lsrs	r4, r5
    93e6:	4338      	orrs	r0, r7
    93e8:	1a17      	subs	r7, r2, r0
    93ea:	42ba      	cmp	r2, r7
    93ec:	4192      	sbcs	r2, r2
    93ee:	1b0c      	subs	r4, r1, r4
    93f0:	4252      	negs	r2, r2
    93f2:	1aa4      	subs	r4, r4, r2
    93f4:	4666      	mov	r6, ip
    93f6:	4698      	mov	r8, r3
    93f8:	e68b      	b.n	9112 <__aeabi_dsub+0xb2>
    93fa:	4664      	mov	r4, ip
    93fc:	4667      	mov	r7, ip
    93fe:	432c      	orrs	r4, r5
    9400:	d000      	beq.n	9404 <__aeabi_dsub+0x3a4>
    9402:	e68b      	b.n	911c <__aeabi_dsub+0xbc>
    9404:	2500      	movs	r5, #0
    9406:	2600      	movs	r6, #0
    9408:	2700      	movs	r7, #0
    940a:	e6ea      	b.n	91e2 <__aeabi_dsub+0x182>
    940c:	001e      	movs	r6, r3
    940e:	e6ad      	b.n	916c <__aeabi_dsub+0x10c>
    9410:	2b1f      	cmp	r3, #31
    9412:	dc60      	bgt.n	94d6 <__aeabi_dsub+0x476>
    9414:	2720      	movs	r7, #32
    9416:	1af8      	subs	r0, r7, r3
    9418:	000f      	movs	r7, r1
    941a:	4684      	mov	ip, r0
    941c:	4087      	lsls	r7, r0
    941e:	0010      	movs	r0, r2
    9420:	40d8      	lsrs	r0, r3
    9422:	4307      	orrs	r7, r0
    9424:	4660      	mov	r0, ip
    9426:	4082      	lsls	r2, r0
    9428:	1e50      	subs	r0, r2, #1
    942a:	4182      	sbcs	r2, r0
    942c:	40d9      	lsrs	r1, r3
    942e:	4317      	orrs	r7, r2
    9430:	e6f5      	b.n	921e <__aeabi_dsub+0x1be>
    9432:	0026      	movs	r6, r4
    9434:	4650      	mov	r0, sl
    9436:	4306      	orrs	r6, r0
    9438:	d005      	beq.n	9446 <__aeabi_dsub+0x3e6>
    943a:	43ed      	mvns	r5, r5
    943c:	2d00      	cmp	r5, #0
    943e:	d0d3      	beq.n	93e8 <__aeabi_dsub+0x388>
    9440:	4e90      	ldr	r6, [pc, #576]	; (9684 <__aeabi_dsub+0x624>)
    9442:	45b4      	cmp	ip, r6
    9444:	d1bd      	bne.n	93c2 <__aeabi_dsub+0x362>
    9446:	000c      	movs	r4, r1
    9448:	0017      	movs	r7, r2
    944a:	4666      	mov	r6, ip
    944c:	4698      	mov	r8, r3
    944e:	e68d      	b.n	916c <__aeabi_dsub+0x10c>
    9450:	488c      	ldr	r0, [pc, #560]	; (9684 <__aeabi_dsub+0x624>)
    9452:	4283      	cmp	r3, r0
    9454:	d00b      	beq.n	946e <__aeabi_dsub+0x40e>
    9456:	4663      	mov	r3, ip
    9458:	e6d9      	b.n	920e <__aeabi_dsub+0x1ae>
    945a:	2d00      	cmp	r5, #0
    945c:	d000      	beq.n	9460 <__aeabi_dsub+0x400>
    945e:	e096      	b.n	958e <__aeabi_dsub+0x52e>
    9460:	0008      	movs	r0, r1
    9462:	4310      	orrs	r0, r2
    9464:	d100      	bne.n	9468 <__aeabi_dsub+0x408>
    9466:	e0e2      	b.n	962e <__aeabi_dsub+0x5ce>
    9468:	000c      	movs	r4, r1
    946a:	0017      	movs	r7, r2
    946c:	4698      	mov	r8, r3
    946e:	4e85      	ldr	r6, [pc, #532]	; (9684 <__aeabi_dsub+0x624>)
    9470:	e67c      	b.n	916c <__aeabi_dsub+0x10c>
    9472:	2500      	movs	r5, #0
    9474:	e780      	b.n	9378 <__aeabi_dsub+0x318>
    9476:	2100      	movs	r1, #0
    9478:	e78e      	b.n	9398 <__aeabi_dsub+0x338>
    947a:	0023      	movs	r3, r4
    947c:	4650      	mov	r0, sl
    947e:	4303      	orrs	r3, r0
    9480:	2e00      	cmp	r6, #0
    9482:	d000      	beq.n	9486 <__aeabi_dsub+0x426>
    9484:	e0a8      	b.n	95d8 <__aeabi_dsub+0x578>
    9486:	2b00      	cmp	r3, #0
    9488:	d100      	bne.n	948c <__aeabi_dsub+0x42c>
    948a:	e0de      	b.n	964a <__aeabi_dsub+0x5ea>
    948c:	000b      	movs	r3, r1
    948e:	4313      	orrs	r3, r2
    9490:	d100      	bne.n	9494 <__aeabi_dsub+0x434>
    9492:	e66b      	b.n	916c <__aeabi_dsub+0x10c>
    9494:	4452      	add	r2, sl
    9496:	4552      	cmp	r2, sl
    9498:	4180      	sbcs	r0, r0
    949a:	1864      	adds	r4, r4, r1
    949c:	4240      	negs	r0, r0
    949e:	1824      	adds	r4, r4, r0
    94a0:	0017      	movs	r7, r2
    94a2:	0223      	lsls	r3, r4, #8
    94a4:	d400      	bmi.n	94a8 <__aeabi_dsub+0x448>
    94a6:	e6fd      	b.n	92a4 <__aeabi_dsub+0x244>
    94a8:	4b77      	ldr	r3, [pc, #476]	; (9688 <__aeabi_dsub+0x628>)
    94aa:	4666      	mov	r6, ip
    94ac:	401c      	ands	r4, r3
    94ae:	e65d      	b.n	916c <__aeabi_dsub+0x10c>
    94b0:	0025      	movs	r5, r4
    94b2:	4650      	mov	r0, sl
    94b4:	4305      	orrs	r5, r0
    94b6:	2e00      	cmp	r6, #0
    94b8:	d1cf      	bne.n	945a <__aeabi_dsub+0x3fa>
    94ba:	2d00      	cmp	r5, #0
    94bc:	d14f      	bne.n	955e <__aeabi_dsub+0x4fe>
    94be:	000c      	movs	r4, r1
    94c0:	4314      	orrs	r4, r2
    94c2:	d100      	bne.n	94c6 <__aeabi_dsub+0x466>
    94c4:	e0a0      	b.n	9608 <__aeabi_dsub+0x5a8>
    94c6:	000c      	movs	r4, r1
    94c8:	0017      	movs	r7, r2
    94ca:	4698      	mov	r8, r3
    94cc:	e64e      	b.n	916c <__aeabi_dsub+0x10c>
    94ce:	4666      	mov	r6, ip
    94d0:	2400      	movs	r4, #0
    94d2:	2700      	movs	r7, #0
    94d4:	e685      	b.n	91e2 <__aeabi_dsub+0x182>
    94d6:	001f      	movs	r7, r3
    94d8:	0008      	movs	r0, r1
    94da:	3f20      	subs	r7, #32
    94dc:	40f8      	lsrs	r0, r7
    94de:	0007      	movs	r7, r0
    94e0:	2b20      	cmp	r3, #32
    94e2:	d100      	bne.n	94e6 <__aeabi_dsub+0x486>
    94e4:	e08e      	b.n	9604 <__aeabi_dsub+0x5a4>
    94e6:	2040      	movs	r0, #64	; 0x40
    94e8:	1ac3      	subs	r3, r0, r3
    94ea:	4099      	lsls	r1, r3
    94ec:	430a      	orrs	r2, r1
    94ee:	1e51      	subs	r1, r2, #1
    94f0:	418a      	sbcs	r2, r1
    94f2:	2100      	movs	r1, #0
    94f4:	4317      	orrs	r7, r2
    94f6:	e692      	b.n	921e <__aeabi_dsub+0x1be>
    94f8:	2e00      	cmp	r6, #0
    94fa:	d114      	bne.n	9526 <__aeabi_dsub+0x4c6>
    94fc:	0026      	movs	r6, r4
    94fe:	4650      	mov	r0, sl
    9500:	4306      	orrs	r6, r0
    9502:	d062      	beq.n	95ca <__aeabi_dsub+0x56a>
    9504:	43db      	mvns	r3, r3
    9506:	2b00      	cmp	r3, #0
    9508:	d15c      	bne.n	95c4 <__aeabi_dsub+0x564>
    950a:	1887      	adds	r7, r0, r2
    950c:	4297      	cmp	r7, r2
    950e:	4192      	sbcs	r2, r2
    9510:	1864      	adds	r4, r4, r1
    9512:	4252      	negs	r2, r2
    9514:	18a4      	adds	r4, r4, r2
    9516:	4666      	mov	r6, ip
    9518:	e687      	b.n	922a <__aeabi_dsub+0x1ca>
    951a:	4650      	mov	r0, sl
    951c:	4320      	orrs	r0, r4
    951e:	1e44      	subs	r4, r0, #1
    9520:	41a0      	sbcs	r0, r4
    9522:	2400      	movs	r4, #0
    9524:	e760      	b.n	93e8 <__aeabi_dsub+0x388>
    9526:	4e57      	ldr	r6, [pc, #348]	; (9684 <__aeabi_dsub+0x624>)
    9528:	45b4      	cmp	ip, r6
    952a:	d04e      	beq.n	95ca <__aeabi_dsub+0x56a>
    952c:	2680      	movs	r6, #128	; 0x80
    952e:	0436      	lsls	r6, r6, #16
    9530:	425b      	negs	r3, r3
    9532:	4334      	orrs	r4, r6
    9534:	2b38      	cmp	r3, #56	; 0x38
    9536:	dd00      	ble.n	953a <__aeabi_dsub+0x4da>
    9538:	e07f      	b.n	963a <__aeabi_dsub+0x5da>
    953a:	2b1f      	cmp	r3, #31
    953c:	dd00      	ble.n	9540 <__aeabi_dsub+0x4e0>
    953e:	e08b      	b.n	9658 <__aeabi_dsub+0x5f8>
    9540:	2620      	movs	r6, #32
    9542:	0027      	movs	r7, r4
    9544:	4650      	mov	r0, sl
    9546:	1af6      	subs	r6, r6, r3
    9548:	40b7      	lsls	r7, r6
    954a:	40d8      	lsrs	r0, r3
    954c:	4307      	orrs	r7, r0
    954e:	4650      	mov	r0, sl
    9550:	40b0      	lsls	r0, r6
    9552:	1e46      	subs	r6, r0, #1
    9554:	41b0      	sbcs	r0, r6
    9556:	4307      	orrs	r7, r0
    9558:	40dc      	lsrs	r4, r3
    955a:	18bf      	adds	r7, r7, r2
    955c:	e7d6      	b.n	950c <__aeabi_dsub+0x4ac>
    955e:	000d      	movs	r5, r1
    9560:	4315      	orrs	r5, r2
    9562:	d100      	bne.n	9566 <__aeabi_dsub+0x506>
    9564:	e602      	b.n	916c <__aeabi_dsub+0x10c>
    9566:	4650      	mov	r0, sl
    9568:	1a80      	subs	r0, r0, r2
    956a:	4582      	cmp	sl, r0
    956c:	41bf      	sbcs	r7, r7
    956e:	1a65      	subs	r5, r4, r1
    9570:	427f      	negs	r7, r7
    9572:	1bed      	subs	r5, r5, r7
    9574:	4684      	mov	ip, r0
    9576:	0228      	lsls	r0, r5, #8
    9578:	d400      	bmi.n	957c <__aeabi_dsub+0x51c>
    957a:	e68d      	b.n	9298 <__aeabi_dsub+0x238>
    957c:	4650      	mov	r0, sl
    957e:	1a17      	subs	r7, r2, r0
    9580:	42ba      	cmp	r2, r7
    9582:	4192      	sbcs	r2, r2
    9584:	1b0c      	subs	r4, r1, r4
    9586:	4252      	negs	r2, r2
    9588:	1aa4      	subs	r4, r4, r2
    958a:	4698      	mov	r8, r3
    958c:	e5ee      	b.n	916c <__aeabi_dsub+0x10c>
    958e:	000d      	movs	r5, r1
    9590:	4315      	orrs	r5, r2
    9592:	d100      	bne.n	9596 <__aeabi_dsub+0x536>
    9594:	e76b      	b.n	946e <__aeabi_dsub+0x40e>
    9596:	4650      	mov	r0, sl
    9598:	0767      	lsls	r7, r4, #29
    959a:	08c0      	lsrs	r0, r0, #3
    959c:	4307      	orrs	r7, r0
    959e:	2080      	movs	r0, #128	; 0x80
    95a0:	08e4      	lsrs	r4, r4, #3
    95a2:	0300      	lsls	r0, r0, #12
    95a4:	4204      	tst	r4, r0
    95a6:	d007      	beq.n	95b8 <__aeabi_dsub+0x558>
    95a8:	08cd      	lsrs	r5, r1, #3
    95aa:	4205      	tst	r5, r0
    95ac:	d104      	bne.n	95b8 <__aeabi_dsub+0x558>
    95ae:	002c      	movs	r4, r5
    95b0:	4698      	mov	r8, r3
    95b2:	08d7      	lsrs	r7, r2, #3
    95b4:	0749      	lsls	r1, r1, #29
    95b6:	430f      	orrs	r7, r1
    95b8:	0f7b      	lsrs	r3, r7, #29
    95ba:	00e4      	lsls	r4, r4, #3
    95bc:	431c      	orrs	r4, r3
    95be:	00ff      	lsls	r7, r7, #3
    95c0:	4e30      	ldr	r6, [pc, #192]	; (9684 <__aeabi_dsub+0x624>)
    95c2:	e5d3      	b.n	916c <__aeabi_dsub+0x10c>
    95c4:	4e2f      	ldr	r6, [pc, #188]	; (9684 <__aeabi_dsub+0x624>)
    95c6:	45b4      	cmp	ip, r6
    95c8:	d1b4      	bne.n	9534 <__aeabi_dsub+0x4d4>
    95ca:	000c      	movs	r4, r1
    95cc:	0017      	movs	r7, r2
    95ce:	4666      	mov	r6, ip
    95d0:	e5cc      	b.n	916c <__aeabi_dsub+0x10c>
    95d2:	2700      	movs	r7, #0
    95d4:	2400      	movs	r4, #0
    95d6:	e5e8      	b.n	91aa <__aeabi_dsub+0x14a>
    95d8:	2b00      	cmp	r3, #0
    95da:	d039      	beq.n	9650 <__aeabi_dsub+0x5f0>
    95dc:	000b      	movs	r3, r1
    95de:	4313      	orrs	r3, r2
    95e0:	d100      	bne.n	95e4 <__aeabi_dsub+0x584>
    95e2:	e744      	b.n	946e <__aeabi_dsub+0x40e>
    95e4:	08c0      	lsrs	r0, r0, #3
    95e6:	0767      	lsls	r7, r4, #29
    95e8:	4307      	orrs	r7, r0
    95ea:	2080      	movs	r0, #128	; 0x80
    95ec:	08e4      	lsrs	r4, r4, #3
    95ee:	0300      	lsls	r0, r0, #12
    95f0:	4204      	tst	r4, r0
    95f2:	d0e1      	beq.n	95b8 <__aeabi_dsub+0x558>
    95f4:	08cb      	lsrs	r3, r1, #3
    95f6:	4203      	tst	r3, r0
    95f8:	d1de      	bne.n	95b8 <__aeabi_dsub+0x558>
    95fa:	08d7      	lsrs	r7, r2, #3
    95fc:	0749      	lsls	r1, r1, #29
    95fe:	430f      	orrs	r7, r1
    9600:	001c      	movs	r4, r3
    9602:	e7d9      	b.n	95b8 <__aeabi_dsub+0x558>
    9604:	2100      	movs	r1, #0
    9606:	e771      	b.n	94ec <__aeabi_dsub+0x48c>
    9608:	2500      	movs	r5, #0
    960a:	2700      	movs	r7, #0
    960c:	e5e9      	b.n	91e2 <__aeabi_dsub+0x182>
    960e:	002e      	movs	r6, r5
    9610:	0027      	movs	r7, r4
    9612:	3e20      	subs	r6, #32
    9614:	40f7      	lsrs	r7, r6
    9616:	2d20      	cmp	r5, #32
    9618:	d02f      	beq.n	967a <__aeabi_dsub+0x61a>
    961a:	2640      	movs	r6, #64	; 0x40
    961c:	1b75      	subs	r5, r6, r5
    961e:	40ac      	lsls	r4, r5
    9620:	4650      	mov	r0, sl
    9622:	4320      	orrs	r0, r4
    9624:	1e44      	subs	r4, r0, #1
    9626:	41a0      	sbcs	r0, r4
    9628:	2400      	movs	r4, #0
    962a:	4338      	orrs	r0, r7
    962c:	e6dc      	b.n	93e8 <__aeabi_dsub+0x388>
    962e:	2480      	movs	r4, #128	; 0x80
    9630:	2500      	movs	r5, #0
    9632:	0324      	lsls	r4, r4, #12
    9634:	4e13      	ldr	r6, [pc, #76]	; (9684 <__aeabi_dsub+0x624>)
    9636:	2700      	movs	r7, #0
    9638:	e5d3      	b.n	91e2 <__aeabi_dsub+0x182>
    963a:	4650      	mov	r0, sl
    963c:	4320      	orrs	r0, r4
    963e:	0007      	movs	r7, r0
    9640:	1e78      	subs	r0, r7, #1
    9642:	4187      	sbcs	r7, r0
    9644:	2400      	movs	r4, #0
    9646:	18bf      	adds	r7, r7, r2
    9648:	e760      	b.n	950c <__aeabi_dsub+0x4ac>
    964a:	000c      	movs	r4, r1
    964c:	0017      	movs	r7, r2
    964e:	e58d      	b.n	916c <__aeabi_dsub+0x10c>
    9650:	000c      	movs	r4, r1
    9652:	0017      	movs	r7, r2
    9654:	4e0b      	ldr	r6, [pc, #44]	; (9684 <__aeabi_dsub+0x624>)
    9656:	e589      	b.n	916c <__aeabi_dsub+0x10c>
    9658:	001e      	movs	r6, r3
    965a:	0027      	movs	r7, r4
    965c:	3e20      	subs	r6, #32
    965e:	40f7      	lsrs	r7, r6
    9660:	2b20      	cmp	r3, #32
    9662:	d00c      	beq.n	967e <__aeabi_dsub+0x61e>
    9664:	2640      	movs	r6, #64	; 0x40
    9666:	1af3      	subs	r3, r6, r3
    9668:	409c      	lsls	r4, r3
    966a:	4650      	mov	r0, sl
    966c:	4320      	orrs	r0, r4
    966e:	1e44      	subs	r4, r0, #1
    9670:	41a0      	sbcs	r0, r4
    9672:	4307      	orrs	r7, r0
    9674:	2400      	movs	r4, #0
    9676:	18bf      	adds	r7, r7, r2
    9678:	e748      	b.n	950c <__aeabi_dsub+0x4ac>
    967a:	2400      	movs	r4, #0
    967c:	e7d0      	b.n	9620 <__aeabi_dsub+0x5c0>
    967e:	2400      	movs	r4, #0
    9680:	e7f3      	b.n	966a <__aeabi_dsub+0x60a>
    9682:	46c0      	nop			; (mov r8, r8)
    9684:	000007ff 	.word	0x000007ff
    9688:	ff7fffff 	.word	0xff7fffff

0000968c <__aeabi_d2iz>:
    968c:	b530      	push	{r4, r5, lr}
    968e:	4d13      	ldr	r5, [pc, #76]	; (96dc <__aeabi_d2iz+0x50>)
    9690:	030a      	lsls	r2, r1, #12
    9692:	004b      	lsls	r3, r1, #1
    9694:	0b12      	lsrs	r2, r2, #12
    9696:	0d5b      	lsrs	r3, r3, #21
    9698:	0fc9      	lsrs	r1, r1, #31
    969a:	2400      	movs	r4, #0
    969c:	42ab      	cmp	r3, r5
    969e:	dd10      	ble.n	96c2 <__aeabi_d2iz+0x36>
    96a0:	4c0f      	ldr	r4, [pc, #60]	; (96e0 <__aeabi_d2iz+0x54>)
    96a2:	42a3      	cmp	r3, r4
    96a4:	dc0f      	bgt.n	96c6 <__aeabi_d2iz+0x3a>
    96a6:	2480      	movs	r4, #128	; 0x80
    96a8:	4d0e      	ldr	r5, [pc, #56]	; (96e4 <__aeabi_d2iz+0x58>)
    96aa:	0364      	lsls	r4, r4, #13
    96ac:	4322      	orrs	r2, r4
    96ae:	1aed      	subs	r5, r5, r3
    96b0:	2d1f      	cmp	r5, #31
    96b2:	dd0b      	ble.n	96cc <__aeabi_d2iz+0x40>
    96b4:	480c      	ldr	r0, [pc, #48]	; (96e8 <__aeabi_d2iz+0x5c>)
    96b6:	1ac3      	subs	r3, r0, r3
    96b8:	40da      	lsrs	r2, r3
    96ba:	4254      	negs	r4, r2
    96bc:	2900      	cmp	r1, #0
    96be:	d100      	bne.n	96c2 <__aeabi_d2iz+0x36>
    96c0:	0014      	movs	r4, r2
    96c2:	0020      	movs	r0, r4
    96c4:	bd30      	pop	{r4, r5, pc}
    96c6:	4b09      	ldr	r3, [pc, #36]	; (96ec <__aeabi_d2iz+0x60>)
    96c8:	18cc      	adds	r4, r1, r3
    96ca:	e7fa      	b.n	96c2 <__aeabi_d2iz+0x36>
    96cc:	4c08      	ldr	r4, [pc, #32]	; (96f0 <__aeabi_d2iz+0x64>)
    96ce:	40e8      	lsrs	r0, r5
    96d0:	46a4      	mov	ip, r4
    96d2:	4463      	add	r3, ip
    96d4:	409a      	lsls	r2, r3
    96d6:	4302      	orrs	r2, r0
    96d8:	e7ef      	b.n	96ba <__aeabi_d2iz+0x2e>
    96da:	46c0      	nop			; (mov r8, r8)
    96dc:	000003fe 	.word	0x000003fe
    96e0:	0000041d 	.word	0x0000041d
    96e4:	00000433 	.word	0x00000433
    96e8:	00000413 	.word	0x00000413
    96ec:	7fffffff 	.word	0x7fffffff
    96f0:	fffffbed 	.word	0xfffffbed

000096f4 <__aeabi_ui2d>:
    96f4:	b510      	push	{r4, lr}
    96f6:	1e04      	subs	r4, r0, #0
    96f8:	d028      	beq.n	974c <__aeabi_ui2d+0x58>
    96fa:	f000 f833 	bl	9764 <__clzsi2>
    96fe:	4b15      	ldr	r3, [pc, #84]	; (9754 <__aeabi_ui2d+0x60>)
    9700:	4a15      	ldr	r2, [pc, #84]	; (9758 <__aeabi_ui2d+0x64>)
    9702:	1a1b      	subs	r3, r3, r0
    9704:	1ad2      	subs	r2, r2, r3
    9706:	2a1f      	cmp	r2, #31
    9708:	dd15      	ble.n	9736 <__aeabi_ui2d+0x42>
    970a:	4a14      	ldr	r2, [pc, #80]	; (975c <__aeabi_ui2d+0x68>)
    970c:	1ad2      	subs	r2, r2, r3
    970e:	4094      	lsls	r4, r2
    9710:	2200      	movs	r2, #0
    9712:	0324      	lsls	r4, r4, #12
    9714:	055b      	lsls	r3, r3, #21
    9716:	0b24      	lsrs	r4, r4, #12
    9718:	0d5b      	lsrs	r3, r3, #21
    971a:	2100      	movs	r1, #0
    971c:	0010      	movs	r0, r2
    971e:	0324      	lsls	r4, r4, #12
    9720:	0d0a      	lsrs	r2, r1, #20
    9722:	0b24      	lsrs	r4, r4, #12
    9724:	0512      	lsls	r2, r2, #20
    9726:	4322      	orrs	r2, r4
    9728:	4c0d      	ldr	r4, [pc, #52]	; (9760 <__aeabi_ui2d+0x6c>)
    972a:	051b      	lsls	r3, r3, #20
    972c:	4022      	ands	r2, r4
    972e:	4313      	orrs	r3, r2
    9730:	005b      	lsls	r3, r3, #1
    9732:	0859      	lsrs	r1, r3, #1
    9734:	bd10      	pop	{r4, pc}
    9736:	0021      	movs	r1, r4
    9738:	4091      	lsls	r1, r2
    973a:	000a      	movs	r2, r1
    973c:	210b      	movs	r1, #11
    973e:	1a08      	subs	r0, r1, r0
    9740:	40c4      	lsrs	r4, r0
    9742:	055b      	lsls	r3, r3, #21
    9744:	0324      	lsls	r4, r4, #12
    9746:	0b24      	lsrs	r4, r4, #12
    9748:	0d5b      	lsrs	r3, r3, #21
    974a:	e7e6      	b.n	971a <__aeabi_ui2d+0x26>
    974c:	2300      	movs	r3, #0
    974e:	2400      	movs	r4, #0
    9750:	2200      	movs	r2, #0
    9752:	e7e2      	b.n	971a <__aeabi_ui2d+0x26>
    9754:	0000041e 	.word	0x0000041e
    9758:	00000433 	.word	0x00000433
    975c:	00000413 	.word	0x00000413
    9760:	800fffff 	.word	0x800fffff

00009764 <__clzsi2>:
    9764:	211c      	movs	r1, #28
    9766:	2301      	movs	r3, #1
    9768:	041b      	lsls	r3, r3, #16
    976a:	4298      	cmp	r0, r3
    976c:	d301      	bcc.n	9772 <__clzsi2+0xe>
    976e:	0c00      	lsrs	r0, r0, #16
    9770:	3910      	subs	r1, #16
    9772:	0a1b      	lsrs	r3, r3, #8
    9774:	4298      	cmp	r0, r3
    9776:	d301      	bcc.n	977c <__clzsi2+0x18>
    9778:	0a00      	lsrs	r0, r0, #8
    977a:	3908      	subs	r1, #8
    977c:	091b      	lsrs	r3, r3, #4
    977e:	4298      	cmp	r0, r3
    9780:	d301      	bcc.n	9786 <__clzsi2+0x22>
    9782:	0900      	lsrs	r0, r0, #4
    9784:	3904      	subs	r1, #4
    9786:	a202      	add	r2, pc, #8	; (adr r2, 9790 <__clzsi2+0x2c>)
    9788:	5c10      	ldrb	r0, [r2, r0]
    978a:	1840      	adds	r0, r0, r1
    978c:	4770      	bx	lr
    978e:	46c0      	nop			; (mov r8, r8)
    9790:	02020304 	.word	0x02020304
    9794:	01010101 	.word	0x01010101
	...

000097a0 <__libc_init_array>:
    97a0:	b570      	push	{r4, r5, r6, lr}
    97a2:	2600      	movs	r6, #0
    97a4:	4d0c      	ldr	r5, [pc, #48]	; (97d8 <__libc_init_array+0x38>)
    97a6:	4c0d      	ldr	r4, [pc, #52]	; (97dc <__libc_init_array+0x3c>)
    97a8:	1b64      	subs	r4, r4, r5
    97aa:	10a4      	asrs	r4, r4, #2
    97ac:	42a6      	cmp	r6, r4
    97ae:	d109      	bne.n	97c4 <__libc_init_array+0x24>
    97b0:	2600      	movs	r6, #0
    97b2:	f002 fd1b 	bl	c1ec <_init>
    97b6:	4d0a      	ldr	r5, [pc, #40]	; (97e0 <__libc_init_array+0x40>)
    97b8:	4c0a      	ldr	r4, [pc, #40]	; (97e4 <__libc_init_array+0x44>)
    97ba:	1b64      	subs	r4, r4, r5
    97bc:	10a4      	asrs	r4, r4, #2
    97be:	42a6      	cmp	r6, r4
    97c0:	d105      	bne.n	97ce <__libc_init_array+0x2e>
    97c2:	bd70      	pop	{r4, r5, r6, pc}
    97c4:	00b3      	lsls	r3, r6, #2
    97c6:	58eb      	ldr	r3, [r5, r3]
    97c8:	4798      	blx	r3
    97ca:	3601      	adds	r6, #1
    97cc:	e7ee      	b.n	97ac <__libc_init_array+0xc>
    97ce:	00b3      	lsls	r3, r6, #2
    97d0:	58eb      	ldr	r3, [r5, r3]
    97d2:	4798      	blx	r3
    97d4:	3601      	adds	r6, #1
    97d6:	e7f2      	b.n	97be <__libc_init_array+0x1e>
    97d8:	0000c1f8 	.word	0x0000c1f8
    97dc:	0000c1f8 	.word	0x0000c1f8
    97e0:	0000c1f8 	.word	0x0000c1f8
    97e4:	0000c1fc 	.word	0x0000c1fc

000097e8 <malloc>:
    97e8:	b510      	push	{r4, lr}
    97ea:	4b03      	ldr	r3, [pc, #12]	; (97f8 <malloc+0x10>)
    97ec:	0001      	movs	r1, r0
    97ee:	6818      	ldr	r0, [r3, #0]
    97f0:	f000 f872 	bl	98d8 <_malloc_r>
    97f4:	bd10      	pop	{r4, pc}
    97f6:	46c0      	nop			; (mov r8, r8)
    97f8:	2000004c 	.word	0x2000004c

000097fc <memcpy>:
    97fc:	2300      	movs	r3, #0
    97fe:	b510      	push	{r4, lr}
    9800:	429a      	cmp	r2, r3
    9802:	d100      	bne.n	9806 <memcpy+0xa>
    9804:	bd10      	pop	{r4, pc}
    9806:	5ccc      	ldrb	r4, [r1, r3]
    9808:	54c4      	strb	r4, [r0, r3]
    980a:	3301      	adds	r3, #1
    980c:	e7f8      	b.n	9800 <memcpy+0x4>

0000980e <memmove>:
    980e:	b510      	push	{r4, lr}
    9810:	4288      	cmp	r0, r1
    9812:	d902      	bls.n	981a <memmove+0xc>
    9814:	188b      	adds	r3, r1, r2
    9816:	4298      	cmp	r0, r3
    9818:	d308      	bcc.n	982c <memmove+0x1e>
    981a:	2300      	movs	r3, #0
    981c:	429a      	cmp	r2, r3
    981e:	d007      	beq.n	9830 <memmove+0x22>
    9820:	5ccc      	ldrb	r4, [r1, r3]
    9822:	54c4      	strb	r4, [r0, r3]
    9824:	3301      	adds	r3, #1
    9826:	e7f9      	b.n	981c <memmove+0xe>
    9828:	5c8b      	ldrb	r3, [r1, r2]
    982a:	5483      	strb	r3, [r0, r2]
    982c:	3a01      	subs	r2, #1
    982e:	d2fb      	bcs.n	9828 <memmove+0x1a>
    9830:	bd10      	pop	{r4, pc}

00009832 <memset>:
    9832:	0003      	movs	r3, r0
    9834:	1882      	adds	r2, r0, r2
    9836:	4293      	cmp	r3, r2
    9838:	d100      	bne.n	983c <memset+0xa>
    983a:	4770      	bx	lr
    983c:	7019      	strb	r1, [r3, #0]
    983e:	3301      	adds	r3, #1
    9840:	e7f9      	b.n	9836 <memset+0x4>
	...

00009844 <_free_r>:
    9844:	b570      	push	{r4, r5, r6, lr}
    9846:	0005      	movs	r5, r0
    9848:	2900      	cmp	r1, #0
    984a:	d010      	beq.n	986e <_free_r+0x2a>
    984c:	1f0c      	subs	r4, r1, #4
    984e:	6823      	ldr	r3, [r4, #0]
    9850:	2b00      	cmp	r3, #0
    9852:	da00      	bge.n	9856 <_free_r+0x12>
    9854:	18e4      	adds	r4, r4, r3
    9856:	0028      	movs	r0, r5
    9858:	f000 fd08 	bl	a26c <__malloc_lock>
    985c:	4a1d      	ldr	r2, [pc, #116]	; (98d4 <_free_r+0x90>)
    985e:	6813      	ldr	r3, [r2, #0]
    9860:	2b00      	cmp	r3, #0
    9862:	d105      	bne.n	9870 <_free_r+0x2c>
    9864:	6063      	str	r3, [r4, #4]
    9866:	6014      	str	r4, [r2, #0]
    9868:	0028      	movs	r0, r5
    986a:	f000 fd00 	bl	a26e <__malloc_unlock>
    986e:	bd70      	pop	{r4, r5, r6, pc}
    9870:	42a3      	cmp	r3, r4
    9872:	d909      	bls.n	9888 <_free_r+0x44>
    9874:	6821      	ldr	r1, [r4, #0]
    9876:	1860      	adds	r0, r4, r1
    9878:	4283      	cmp	r3, r0
    987a:	d1f3      	bne.n	9864 <_free_r+0x20>
    987c:	6818      	ldr	r0, [r3, #0]
    987e:	685b      	ldr	r3, [r3, #4]
    9880:	1841      	adds	r1, r0, r1
    9882:	6021      	str	r1, [r4, #0]
    9884:	e7ee      	b.n	9864 <_free_r+0x20>
    9886:	0013      	movs	r3, r2
    9888:	685a      	ldr	r2, [r3, #4]
    988a:	2a00      	cmp	r2, #0
    988c:	d001      	beq.n	9892 <_free_r+0x4e>
    988e:	42a2      	cmp	r2, r4
    9890:	d9f9      	bls.n	9886 <_free_r+0x42>
    9892:	6819      	ldr	r1, [r3, #0]
    9894:	1858      	adds	r0, r3, r1
    9896:	42a0      	cmp	r0, r4
    9898:	d10b      	bne.n	98b2 <_free_r+0x6e>
    989a:	6820      	ldr	r0, [r4, #0]
    989c:	1809      	adds	r1, r1, r0
    989e:	1858      	adds	r0, r3, r1
    98a0:	6019      	str	r1, [r3, #0]
    98a2:	4282      	cmp	r2, r0
    98a4:	d1e0      	bne.n	9868 <_free_r+0x24>
    98a6:	6810      	ldr	r0, [r2, #0]
    98a8:	6852      	ldr	r2, [r2, #4]
    98aa:	1841      	adds	r1, r0, r1
    98ac:	6019      	str	r1, [r3, #0]
    98ae:	605a      	str	r2, [r3, #4]
    98b0:	e7da      	b.n	9868 <_free_r+0x24>
    98b2:	42a0      	cmp	r0, r4
    98b4:	d902      	bls.n	98bc <_free_r+0x78>
    98b6:	230c      	movs	r3, #12
    98b8:	602b      	str	r3, [r5, #0]
    98ba:	e7d5      	b.n	9868 <_free_r+0x24>
    98bc:	6821      	ldr	r1, [r4, #0]
    98be:	1860      	adds	r0, r4, r1
    98c0:	4282      	cmp	r2, r0
    98c2:	d103      	bne.n	98cc <_free_r+0x88>
    98c4:	6810      	ldr	r0, [r2, #0]
    98c6:	6852      	ldr	r2, [r2, #4]
    98c8:	1841      	adds	r1, r0, r1
    98ca:	6021      	str	r1, [r4, #0]
    98cc:	6062      	str	r2, [r4, #4]
    98ce:	605c      	str	r4, [r3, #4]
    98d0:	e7ca      	b.n	9868 <_free_r+0x24>
    98d2:	46c0      	nop			; (mov r8, r8)
    98d4:	20000278 	.word	0x20000278

000098d8 <_malloc_r>:
    98d8:	2303      	movs	r3, #3
    98da:	b570      	push	{r4, r5, r6, lr}
    98dc:	1ccd      	adds	r5, r1, #3
    98de:	439d      	bics	r5, r3
    98e0:	3508      	adds	r5, #8
    98e2:	0006      	movs	r6, r0
    98e4:	2d0c      	cmp	r5, #12
    98e6:	d21e      	bcs.n	9926 <_malloc_r+0x4e>
    98e8:	250c      	movs	r5, #12
    98ea:	42a9      	cmp	r1, r5
    98ec:	d81d      	bhi.n	992a <_malloc_r+0x52>
    98ee:	0030      	movs	r0, r6
    98f0:	f000 fcbc 	bl	a26c <__malloc_lock>
    98f4:	4a25      	ldr	r2, [pc, #148]	; (998c <_malloc_r+0xb4>)
    98f6:	6814      	ldr	r4, [r2, #0]
    98f8:	0021      	movs	r1, r4
    98fa:	2900      	cmp	r1, #0
    98fc:	d119      	bne.n	9932 <_malloc_r+0x5a>
    98fe:	4c24      	ldr	r4, [pc, #144]	; (9990 <_malloc_r+0xb8>)
    9900:	6823      	ldr	r3, [r4, #0]
    9902:	2b00      	cmp	r3, #0
    9904:	d103      	bne.n	990e <_malloc_r+0x36>
    9906:	0030      	movs	r0, r6
    9908:	f000 f8dc 	bl	9ac4 <_sbrk_r>
    990c:	6020      	str	r0, [r4, #0]
    990e:	0029      	movs	r1, r5
    9910:	0030      	movs	r0, r6
    9912:	f000 f8d7 	bl	9ac4 <_sbrk_r>
    9916:	1c43      	adds	r3, r0, #1
    9918:	d12c      	bne.n	9974 <_malloc_r+0x9c>
    991a:	230c      	movs	r3, #12
    991c:	0030      	movs	r0, r6
    991e:	6033      	str	r3, [r6, #0]
    9920:	f000 fca5 	bl	a26e <__malloc_unlock>
    9924:	e003      	b.n	992e <_malloc_r+0x56>
    9926:	2d00      	cmp	r5, #0
    9928:	dadf      	bge.n	98ea <_malloc_r+0x12>
    992a:	230c      	movs	r3, #12
    992c:	6033      	str	r3, [r6, #0]
    992e:	2000      	movs	r0, #0
    9930:	bd70      	pop	{r4, r5, r6, pc}
    9932:	680b      	ldr	r3, [r1, #0]
    9934:	1b5b      	subs	r3, r3, r5
    9936:	d41a      	bmi.n	996e <_malloc_r+0x96>
    9938:	2b0b      	cmp	r3, #11
    993a:	d903      	bls.n	9944 <_malloc_r+0x6c>
    993c:	600b      	str	r3, [r1, #0]
    993e:	18cc      	adds	r4, r1, r3
    9940:	6025      	str	r5, [r4, #0]
    9942:	e003      	b.n	994c <_malloc_r+0x74>
    9944:	428c      	cmp	r4, r1
    9946:	d10e      	bne.n	9966 <_malloc_r+0x8e>
    9948:	6863      	ldr	r3, [r4, #4]
    994a:	6013      	str	r3, [r2, #0]
    994c:	0030      	movs	r0, r6
    994e:	f000 fc8e 	bl	a26e <__malloc_unlock>
    9952:	0020      	movs	r0, r4
    9954:	2207      	movs	r2, #7
    9956:	300b      	adds	r0, #11
    9958:	1d23      	adds	r3, r4, #4
    995a:	4390      	bics	r0, r2
    995c:	1ac3      	subs	r3, r0, r3
    995e:	d0e7      	beq.n	9930 <_malloc_r+0x58>
    9960:	425a      	negs	r2, r3
    9962:	50e2      	str	r2, [r4, r3]
    9964:	e7e4      	b.n	9930 <_malloc_r+0x58>
    9966:	684b      	ldr	r3, [r1, #4]
    9968:	6063      	str	r3, [r4, #4]
    996a:	000c      	movs	r4, r1
    996c:	e7ee      	b.n	994c <_malloc_r+0x74>
    996e:	000c      	movs	r4, r1
    9970:	6849      	ldr	r1, [r1, #4]
    9972:	e7c2      	b.n	98fa <_malloc_r+0x22>
    9974:	2303      	movs	r3, #3
    9976:	1cc4      	adds	r4, r0, #3
    9978:	439c      	bics	r4, r3
    997a:	42a0      	cmp	r0, r4
    997c:	d0e0      	beq.n	9940 <_malloc_r+0x68>
    997e:	1a21      	subs	r1, r4, r0
    9980:	0030      	movs	r0, r6
    9982:	f000 f89f 	bl	9ac4 <_sbrk_r>
    9986:	1c43      	adds	r3, r0, #1
    9988:	d1da      	bne.n	9940 <_malloc_r+0x68>
    998a:	e7c6      	b.n	991a <_malloc_r+0x42>
    998c:	20000278 	.word	0x20000278
    9990:	2000027c 	.word	0x2000027c

00009994 <iprintf>:
    9994:	b40f      	push	{r0, r1, r2, r3}
    9996:	4b0b      	ldr	r3, [pc, #44]	; (99c4 <iprintf+0x30>)
    9998:	b513      	push	{r0, r1, r4, lr}
    999a:	681c      	ldr	r4, [r3, #0]
    999c:	2c00      	cmp	r4, #0
    999e:	d005      	beq.n	99ac <iprintf+0x18>
    99a0:	69a3      	ldr	r3, [r4, #24]
    99a2:	2b00      	cmp	r3, #0
    99a4:	d102      	bne.n	99ac <iprintf+0x18>
    99a6:	0020      	movs	r0, r4
    99a8:	f000 fb64 	bl	a074 <__sinit>
    99ac:	ab05      	add	r3, sp, #20
    99ae:	9a04      	ldr	r2, [sp, #16]
    99b0:	68a1      	ldr	r1, [r4, #8]
    99b2:	0020      	movs	r0, r4
    99b4:	9301      	str	r3, [sp, #4]
    99b6:	f000 fde9 	bl	a58c <_vfiprintf_r>
    99ba:	bc16      	pop	{r1, r2, r4}
    99bc:	bc08      	pop	{r3}
    99be:	b004      	add	sp, #16
    99c0:	4718      	bx	r3
    99c2:	46c0      	nop			; (mov r8, r8)
    99c4:	2000004c 	.word	0x2000004c

000099c8 <putchar>:
    99c8:	4b08      	ldr	r3, [pc, #32]	; (99ec <putchar+0x24>)
    99ca:	b570      	push	{r4, r5, r6, lr}
    99cc:	681c      	ldr	r4, [r3, #0]
    99ce:	0005      	movs	r5, r0
    99d0:	2c00      	cmp	r4, #0
    99d2:	d005      	beq.n	99e0 <putchar+0x18>
    99d4:	69a3      	ldr	r3, [r4, #24]
    99d6:	2b00      	cmp	r3, #0
    99d8:	d102      	bne.n	99e0 <putchar+0x18>
    99da:	0020      	movs	r0, r4
    99dc:	f000 fb4a 	bl	a074 <__sinit>
    99e0:	0029      	movs	r1, r5
    99e2:	68a2      	ldr	r2, [r4, #8]
    99e4:	0020      	movs	r0, r4
    99e6:	f001 f875 	bl	aad4 <_putc_r>
    99ea:	bd70      	pop	{r4, r5, r6, pc}
    99ec:	2000004c 	.word	0x2000004c

000099f0 <_puts_r>:
    99f0:	b570      	push	{r4, r5, r6, lr}
    99f2:	0005      	movs	r5, r0
    99f4:	000e      	movs	r6, r1
    99f6:	2800      	cmp	r0, #0
    99f8:	d004      	beq.n	9a04 <_puts_r+0x14>
    99fa:	6983      	ldr	r3, [r0, #24]
    99fc:	2b00      	cmp	r3, #0
    99fe:	d101      	bne.n	9a04 <_puts_r+0x14>
    9a00:	f000 fb38 	bl	a074 <__sinit>
    9a04:	69ab      	ldr	r3, [r5, #24]
    9a06:	68ac      	ldr	r4, [r5, #8]
    9a08:	2b00      	cmp	r3, #0
    9a0a:	d102      	bne.n	9a12 <_puts_r+0x22>
    9a0c:	0028      	movs	r0, r5
    9a0e:	f000 fb31 	bl	a074 <__sinit>
    9a12:	4b24      	ldr	r3, [pc, #144]	; (9aa4 <_puts_r+0xb4>)
    9a14:	429c      	cmp	r4, r3
    9a16:	d10f      	bne.n	9a38 <_puts_r+0x48>
    9a18:	686c      	ldr	r4, [r5, #4]
    9a1a:	89a3      	ldrh	r3, [r4, #12]
    9a1c:	071b      	lsls	r3, r3, #28
    9a1e:	d502      	bpl.n	9a26 <_puts_r+0x36>
    9a20:	6923      	ldr	r3, [r4, #16]
    9a22:	2b00      	cmp	r3, #0
    9a24:	d120      	bne.n	9a68 <_puts_r+0x78>
    9a26:	0021      	movs	r1, r4
    9a28:	0028      	movs	r0, r5
    9a2a:	f000 f9b5 	bl	9d98 <__swsetup_r>
    9a2e:	2800      	cmp	r0, #0
    9a30:	d01a      	beq.n	9a68 <_puts_r+0x78>
    9a32:	2001      	movs	r0, #1
    9a34:	4240      	negs	r0, r0
    9a36:	bd70      	pop	{r4, r5, r6, pc}
    9a38:	4b1b      	ldr	r3, [pc, #108]	; (9aa8 <_puts_r+0xb8>)
    9a3a:	429c      	cmp	r4, r3
    9a3c:	d101      	bne.n	9a42 <_puts_r+0x52>
    9a3e:	68ac      	ldr	r4, [r5, #8]
    9a40:	e7eb      	b.n	9a1a <_puts_r+0x2a>
    9a42:	4b1a      	ldr	r3, [pc, #104]	; (9aac <_puts_r+0xbc>)
    9a44:	429c      	cmp	r4, r3
    9a46:	d1e8      	bne.n	9a1a <_puts_r+0x2a>
    9a48:	68ec      	ldr	r4, [r5, #12]
    9a4a:	e7e6      	b.n	9a1a <_puts_r+0x2a>
    9a4c:	3b01      	subs	r3, #1
    9a4e:	3601      	adds	r6, #1
    9a50:	60a3      	str	r3, [r4, #8]
    9a52:	2b00      	cmp	r3, #0
    9a54:	da04      	bge.n	9a60 <_puts_r+0x70>
    9a56:	69a2      	ldr	r2, [r4, #24]
    9a58:	4293      	cmp	r3, r2
    9a5a:	db16      	blt.n	9a8a <_puts_r+0x9a>
    9a5c:	290a      	cmp	r1, #10
    9a5e:	d014      	beq.n	9a8a <_puts_r+0x9a>
    9a60:	6823      	ldr	r3, [r4, #0]
    9a62:	1c5a      	adds	r2, r3, #1
    9a64:	6022      	str	r2, [r4, #0]
    9a66:	7019      	strb	r1, [r3, #0]
    9a68:	7831      	ldrb	r1, [r6, #0]
    9a6a:	68a3      	ldr	r3, [r4, #8]
    9a6c:	2900      	cmp	r1, #0
    9a6e:	d1ed      	bne.n	9a4c <_puts_r+0x5c>
    9a70:	3b01      	subs	r3, #1
    9a72:	60a3      	str	r3, [r4, #8]
    9a74:	2b00      	cmp	r3, #0
    9a76:	da0f      	bge.n	9a98 <_puts_r+0xa8>
    9a78:	0022      	movs	r2, r4
    9a7a:	310a      	adds	r1, #10
    9a7c:	0028      	movs	r0, r5
    9a7e:	f000 f935 	bl	9cec <__swbuf_r>
    9a82:	1c43      	adds	r3, r0, #1
    9a84:	d0d5      	beq.n	9a32 <_puts_r+0x42>
    9a86:	200a      	movs	r0, #10
    9a88:	e7d5      	b.n	9a36 <_puts_r+0x46>
    9a8a:	0022      	movs	r2, r4
    9a8c:	0028      	movs	r0, r5
    9a8e:	f000 f92d 	bl	9cec <__swbuf_r>
    9a92:	1c43      	adds	r3, r0, #1
    9a94:	d1e8      	bne.n	9a68 <_puts_r+0x78>
    9a96:	e7cc      	b.n	9a32 <_puts_r+0x42>
    9a98:	200a      	movs	r0, #10
    9a9a:	6823      	ldr	r3, [r4, #0]
    9a9c:	1c5a      	adds	r2, r3, #1
    9a9e:	6022      	str	r2, [r4, #0]
    9aa0:	7018      	strb	r0, [r3, #0]
    9aa2:	e7c8      	b.n	9a36 <_puts_r+0x46>
    9aa4:	0000c178 	.word	0x0000c178
    9aa8:	0000c198 	.word	0x0000c198
    9aac:	0000c158 	.word	0x0000c158

00009ab0 <puts>:
    9ab0:	b510      	push	{r4, lr}
    9ab2:	4b03      	ldr	r3, [pc, #12]	; (9ac0 <puts+0x10>)
    9ab4:	0001      	movs	r1, r0
    9ab6:	6818      	ldr	r0, [r3, #0]
    9ab8:	f7ff ff9a 	bl	99f0 <_puts_r>
    9abc:	bd10      	pop	{r4, pc}
    9abe:	46c0      	nop			; (mov r8, r8)
    9ac0:	2000004c 	.word	0x2000004c

00009ac4 <_sbrk_r>:
    9ac4:	2300      	movs	r3, #0
    9ac6:	b570      	push	{r4, r5, r6, lr}
    9ac8:	4c06      	ldr	r4, [pc, #24]	; (9ae4 <_sbrk_r+0x20>)
    9aca:	0005      	movs	r5, r0
    9acc:	0008      	movs	r0, r1
    9ace:	6023      	str	r3, [r4, #0]
    9ad0:	f7fc fc36 	bl	6340 <_sbrk>
    9ad4:	1c43      	adds	r3, r0, #1
    9ad6:	d103      	bne.n	9ae0 <_sbrk_r+0x1c>
    9ad8:	6823      	ldr	r3, [r4, #0]
    9ada:	2b00      	cmp	r3, #0
    9adc:	d000      	beq.n	9ae0 <_sbrk_r+0x1c>
    9ade:	602b      	str	r3, [r5, #0]
    9ae0:	bd70      	pop	{r4, r5, r6, pc}
    9ae2:	46c0      	nop			; (mov r8, r8)
    9ae4:	200004dc 	.word	0x200004dc

00009ae8 <setbuf>:
    9ae8:	424a      	negs	r2, r1
    9aea:	414a      	adcs	r2, r1
    9aec:	2380      	movs	r3, #128	; 0x80
    9aee:	b510      	push	{r4, lr}
    9af0:	0052      	lsls	r2, r2, #1
    9af2:	00db      	lsls	r3, r3, #3
    9af4:	f000 f802 	bl	9afc <setvbuf>
    9af8:	bd10      	pop	{r4, pc}
	...

00009afc <setvbuf>:
    9afc:	b5f0      	push	{r4, r5, r6, r7, lr}
    9afe:	001d      	movs	r5, r3
    9b00:	4b4f      	ldr	r3, [pc, #316]	; (9c40 <setvbuf+0x144>)
    9b02:	b085      	sub	sp, #20
    9b04:	681e      	ldr	r6, [r3, #0]
    9b06:	0004      	movs	r4, r0
    9b08:	000f      	movs	r7, r1
    9b0a:	9200      	str	r2, [sp, #0]
    9b0c:	2e00      	cmp	r6, #0
    9b0e:	d005      	beq.n	9b1c <setvbuf+0x20>
    9b10:	69b3      	ldr	r3, [r6, #24]
    9b12:	2b00      	cmp	r3, #0
    9b14:	d102      	bne.n	9b1c <setvbuf+0x20>
    9b16:	0030      	movs	r0, r6
    9b18:	f000 faac 	bl	a074 <__sinit>
    9b1c:	4b49      	ldr	r3, [pc, #292]	; (9c44 <setvbuf+0x148>)
    9b1e:	429c      	cmp	r4, r3
    9b20:	d150      	bne.n	9bc4 <setvbuf+0xc8>
    9b22:	6874      	ldr	r4, [r6, #4]
    9b24:	9b00      	ldr	r3, [sp, #0]
    9b26:	2b02      	cmp	r3, #2
    9b28:	d005      	beq.n	9b36 <setvbuf+0x3a>
    9b2a:	2b01      	cmp	r3, #1
    9b2c:	d900      	bls.n	9b30 <setvbuf+0x34>
    9b2e:	e084      	b.n	9c3a <setvbuf+0x13e>
    9b30:	2d00      	cmp	r5, #0
    9b32:	da00      	bge.n	9b36 <setvbuf+0x3a>
    9b34:	e081      	b.n	9c3a <setvbuf+0x13e>
    9b36:	0021      	movs	r1, r4
    9b38:	0030      	movs	r0, r6
    9b3a:	f000 fa2d 	bl	9f98 <_fflush_r>
    9b3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9b40:	2900      	cmp	r1, #0
    9b42:	d008      	beq.n	9b56 <setvbuf+0x5a>
    9b44:	0023      	movs	r3, r4
    9b46:	3344      	adds	r3, #68	; 0x44
    9b48:	4299      	cmp	r1, r3
    9b4a:	d002      	beq.n	9b52 <setvbuf+0x56>
    9b4c:	0030      	movs	r0, r6
    9b4e:	f7ff fe79 	bl	9844 <_free_r>
    9b52:	2300      	movs	r3, #0
    9b54:	6363      	str	r3, [r4, #52]	; 0x34
    9b56:	2300      	movs	r3, #0
    9b58:	61a3      	str	r3, [r4, #24]
    9b5a:	6063      	str	r3, [r4, #4]
    9b5c:	89a3      	ldrh	r3, [r4, #12]
    9b5e:	061b      	lsls	r3, r3, #24
    9b60:	d503      	bpl.n	9b6a <setvbuf+0x6e>
    9b62:	6921      	ldr	r1, [r4, #16]
    9b64:	0030      	movs	r0, r6
    9b66:	f7ff fe6d 	bl	9844 <_free_r>
    9b6a:	89a3      	ldrh	r3, [r4, #12]
    9b6c:	4a36      	ldr	r2, [pc, #216]	; (9c48 <setvbuf+0x14c>)
    9b6e:	4013      	ands	r3, r2
    9b70:	81a3      	strh	r3, [r4, #12]
    9b72:	9b00      	ldr	r3, [sp, #0]
    9b74:	2b02      	cmp	r3, #2
    9b76:	d05a      	beq.n	9c2e <setvbuf+0x132>
    9b78:	ab03      	add	r3, sp, #12
    9b7a:	aa02      	add	r2, sp, #8
    9b7c:	0021      	movs	r1, r4
    9b7e:	0030      	movs	r0, r6
    9b80:	f000 fb0e 	bl	a1a0 <__swhatbuf_r>
    9b84:	89a3      	ldrh	r3, [r4, #12]
    9b86:	4318      	orrs	r0, r3
    9b88:	81a0      	strh	r0, [r4, #12]
    9b8a:	2d00      	cmp	r5, #0
    9b8c:	d124      	bne.n	9bd8 <setvbuf+0xdc>
    9b8e:	9d02      	ldr	r5, [sp, #8]
    9b90:	0028      	movs	r0, r5
    9b92:	f7ff fe29 	bl	97e8 <malloc>
    9b96:	9501      	str	r5, [sp, #4]
    9b98:	1e07      	subs	r7, r0, #0
    9b9a:	d142      	bne.n	9c22 <setvbuf+0x126>
    9b9c:	9b02      	ldr	r3, [sp, #8]
    9b9e:	9301      	str	r3, [sp, #4]
    9ba0:	42ab      	cmp	r3, r5
    9ba2:	d139      	bne.n	9c18 <setvbuf+0x11c>
    9ba4:	2001      	movs	r0, #1
    9ba6:	4240      	negs	r0, r0
    9ba8:	2302      	movs	r3, #2
    9baa:	89a2      	ldrh	r2, [r4, #12]
    9bac:	4313      	orrs	r3, r2
    9bae:	81a3      	strh	r3, [r4, #12]
    9bb0:	2300      	movs	r3, #0
    9bb2:	60a3      	str	r3, [r4, #8]
    9bb4:	0023      	movs	r3, r4
    9bb6:	3347      	adds	r3, #71	; 0x47
    9bb8:	6023      	str	r3, [r4, #0]
    9bba:	6123      	str	r3, [r4, #16]
    9bbc:	2301      	movs	r3, #1
    9bbe:	6163      	str	r3, [r4, #20]
    9bc0:	b005      	add	sp, #20
    9bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9bc4:	4b21      	ldr	r3, [pc, #132]	; (9c4c <setvbuf+0x150>)
    9bc6:	429c      	cmp	r4, r3
    9bc8:	d101      	bne.n	9bce <setvbuf+0xd2>
    9bca:	68b4      	ldr	r4, [r6, #8]
    9bcc:	e7aa      	b.n	9b24 <setvbuf+0x28>
    9bce:	4b20      	ldr	r3, [pc, #128]	; (9c50 <setvbuf+0x154>)
    9bd0:	429c      	cmp	r4, r3
    9bd2:	d1a7      	bne.n	9b24 <setvbuf+0x28>
    9bd4:	68f4      	ldr	r4, [r6, #12]
    9bd6:	e7a5      	b.n	9b24 <setvbuf+0x28>
    9bd8:	2f00      	cmp	r7, #0
    9bda:	d0d9      	beq.n	9b90 <setvbuf+0x94>
    9bdc:	69b3      	ldr	r3, [r6, #24]
    9bde:	2b00      	cmp	r3, #0
    9be0:	d102      	bne.n	9be8 <setvbuf+0xec>
    9be2:	0030      	movs	r0, r6
    9be4:	f000 fa46 	bl	a074 <__sinit>
    9be8:	9b00      	ldr	r3, [sp, #0]
    9bea:	2b01      	cmp	r3, #1
    9bec:	d103      	bne.n	9bf6 <setvbuf+0xfa>
    9bee:	89a3      	ldrh	r3, [r4, #12]
    9bf0:	9a00      	ldr	r2, [sp, #0]
    9bf2:	431a      	orrs	r2, r3
    9bf4:	81a2      	strh	r2, [r4, #12]
    9bf6:	2008      	movs	r0, #8
    9bf8:	89a3      	ldrh	r3, [r4, #12]
    9bfa:	6027      	str	r7, [r4, #0]
    9bfc:	6127      	str	r7, [r4, #16]
    9bfe:	6165      	str	r5, [r4, #20]
    9c00:	4018      	ands	r0, r3
    9c02:	d018      	beq.n	9c36 <setvbuf+0x13a>
    9c04:	2001      	movs	r0, #1
    9c06:	4018      	ands	r0, r3
    9c08:	2300      	movs	r3, #0
    9c0a:	4298      	cmp	r0, r3
    9c0c:	d011      	beq.n	9c32 <setvbuf+0x136>
    9c0e:	426d      	negs	r5, r5
    9c10:	60a3      	str	r3, [r4, #8]
    9c12:	61a5      	str	r5, [r4, #24]
    9c14:	0018      	movs	r0, r3
    9c16:	e7d3      	b.n	9bc0 <setvbuf+0xc4>
    9c18:	9801      	ldr	r0, [sp, #4]
    9c1a:	f7ff fde5 	bl	97e8 <malloc>
    9c1e:	1e07      	subs	r7, r0, #0
    9c20:	d0c0      	beq.n	9ba4 <setvbuf+0xa8>
    9c22:	2380      	movs	r3, #128	; 0x80
    9c24:	89a2      	ldrh	r2, [r4, #12]
    9c26:	9d01      	ldr	r5, [sp, #4]
    9c28:	4313      	orrs	r3, r2
    9c2a:	81a3      	strh	r3, [r4, #12]
    9c2c:	e7d6      	b.n	9bdc <setvbuf+0xe0>
    9c2e:	2000      	movs	r0, #0
    9c30:	e7ba      	b.n	9ba8 <setvbuf+0xac>
    9c32:	60a5      	str	r5, [r4, #8]
    9c34:	e7c4      	b.n	9bc0 <setvbuf+0xc4>
    9c36:	60a0      	str	r0, [r4, #8]
    9c38:	e7c2      	b.n	9bc0 <setvbuf+0xc4>
    9c3a:	2001      	movs	r0, #1
    9c3c:	4240      	negs	r0, r0
    9c3e:	e7bf      	b.n	9bc0 <setvbuf+0xc4>
    9c40:	2000004c 	.word	0x2000004c
    9c44:	0000c178 	.word	0x0000c178
    9c48:	fffff35c 	.word	0xfffff35c
    9c4c:	0000c198 	.word	0x0000c198
    9c50:	0000c158 	.word	0x0000c158

00009c54 <siprintf>:
    9c54:	b40e      	push	{r1, r2, r3}
    9c56:	b510      	push	{r4, lr}
    9c58:	b09d      	sub	sp, #116	; 0x74
    9c5a:	a902      	add	r1, sp, #8
    9c5c:	9002      	str	r0, [sp, #8]
    9c5e:	6108      	str	r0, [r1, #16]
    9c60:	480b      	ldr	r0, [pc, #44]	; (9c90 <siprintf+0x3c>)
    9c62:	2482      	movs	r4, #130	; 0x82
    9c64:	6088      	str	r0, [r1, #8]
    9c66:	6148      	str	r0, [r1, #20]
    9c68:	2001      	movs	r0, #1
    9c6a:	4240      	negs	r0, r0
    9c6c:	ab1f      	add	r3, sp, #124	; 0x7c
    9c6e:	81c8      	strh	r0, [r1, #14]
    9c70:	4808      	ldr	r0, [pc, #32]	; (9c94 <siprintf+0x40>)
    9c72:	cb04      	ldmia	r3!, {r2}
    9c74:	00a4      	lsls	r4, r4, #2
    9c76:	6800      	ldr	r0, [r0, #0]
    9c78:	9301      	str	r3, [sp, #4]
    9c7a:	818c      	strh	r4, [r1, #12]
    9c7c:	f000 fb5a 	bl	a334 <_svfiprintf_r>
    9c80:	2300      	movs	r3, #0
    9c82:	9a02      	ldr	r2, [sp, #8]
    9c84:	7013      	strb	r3, [r2, #0]
    9c86:	b01d      	add	sp, #116	; 0x74
    9c88:	bc10      	pop	{r4}
    9c8a:	bc08      	pop	{r3}
    9c8c:	b003      	add	sp, #12
    9c8e:	4718      	bx	r3
    9c90:	7fffffff 	.word	0x7fffffff
    9c94:	2000004c 	.word	0x2000004c

00009c98 <strcmp>:
    9c98:	7802      	ldrb	r2, [r0, #0]
    9c9a:	780b      	ldrb	r3, [r1, #0]
    9c9c:	2a00      	cmp	r2, #0
    9c9e:	d003      	beq.n	9ca8 <strcmp+0x10>
    9ca0:	3001      	adds	r0, #1
    9ca2:	3101      	adds	r1, #1
    9ca4:	429a      	cmp	r2, r3
    9ca6:	d0f7      	beq.n	9c98 <strcmp>
    9ca8:	1ad0      	subs	r0, r2, r3
    9caa:	4770      	bx	lr

00009cac <strcpy>:
    9cac:	1c03      	adds	r3, r0, #0
    9cae:	780a      	ldrb	r2, [r1, #0]
    9cb0:	3101      	adds	r1, #1
    9cb2:	701a      	strb	r2, [r3, #0]
    9cb4:	3301      	adds	r3, #1
    9cb6:	2a00      	cmp	r2, #0
    9cb8:	d1f9      	bne.n	9cae <strcpy+0x2>
    9cba:	4770      	bx	lr

00009cbc <strlen>:
    9cbc:	2300      	movs	r3, #0
    9cbe:	5cc2      	ldrb	r2, [r0, r3]
    9cc0:	3301      	adds	r3, #1
    9cc2:	2a00      	cmp	r2, #0
    9cc4:	d1fb      	bne.n	9cbe <strlen+0x2>
    9cc6:	1e58      	subs	r0, r3, #1
    9cc8:	4770      	bx	lr

00009cca <strncmp>:
    9cca:	2300      	movs	r3, #0
    9ccc:	b530      	push	{r4, r5, lr}
    9cce:	429a      	cmp	r2, r3
    9cd0:	d00a      	beq.n	9ce8 <strncmp+0x1e>
    9cd2:	3a01      	subs	r2, #1
    9cd4:	5cc4      	ldrb	r4, [r0, r3]
    9cd6:	5ccd      	ldrb	r5, [r1, r3]
    9cd8:	42ac      	cmp	r4, r5
    9cda:	d104      	bne.n	9ce6 <strncmp+0x1c>
    9cdc:	429a      	cmp	r2, r3
    9cde:	d002      	beq.n	9ce6 <strncmp+0x1c>
    9ce0:	3301      	adds	r3, #1
    9ce2:	2c00      	cmp	r4, #0
    9ce4:	d1f6      	bne.n	9cd4 <strncmp+0xa>
    9ce6:	1b63      	subs	r3, r4, r5
    9ce8:	0018      	movs	r0, r3
    9cea:	bd30      	pop	{r4, r5, pc}

00009cec <__swbuf_r>:
    9cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9cee:	0005      	movs	r5, r0
    9cf0:	000e      	movs	r6, r1
    9cf2:	0014      	movs	r4, r2
    9cf4:	2800      	cmp	r0, #0
    9cf6:	d004      	beq.n	9d02 <__swbuf_r+0x16>
    9cf8:	6983      	ldr	r3, [r0, #24]
    9cfa:	2b00      	cmp	r3, #0
    9cfc:	d101      	bne.n	9d02 <__swbuf_r+0x16>
    9cfe:	f000 f9b9 	bl	a074 <__sinit>
    9d02:	4b22      	ldr	r3, [pc, #136]	; (9d8c <__swbuf_r+0xa0>)
    9d04:	429c      	cmp	r4, r3
    9d06:	d12d      	bne.n	9d64 <__swbuf_r+0x78>
    9d08:	686c      	ldr	r4, [r5, #4]
    9d0a:	69a3      	ldr	r3, [r4, #24]
    9d0c:	60a3      	str	r3, [r4, #8]
    9d0e:	89a3      	ldrh	r3, [r4, #12]
    9d10:	071b      	lsls	r3, r3, #28
    9d12:	d531      	bpl.n	9d78 <__swbuf_r+0x8c>
    9d14:	6923      	ldr	r3, [r4, #16]
    9d16:	2b00      	cmp	r3, #0
    9d18:	d02e      	beq.n	9d78 <__swbuf_r+0x8c>
    9d1a:	6823      	ldr	r3, [r4, #0]
    9d1c:	6922      	ldr	r2, [r4, #16]
    9d1e:	b2f7      	uxtb	r7, r6
    9d20:	1a98      	subs	r0, r3, r2
    9d22:	6963      	ldr	r3, [r4, #20]
    9d24:	b2f6      	uxtb	r6, r6
    9d26:	4298      	cmp	r0, r3
    9d28:	db05      	blt.n	9d36 <__swbuf_r+0x4a>
    9d2a:	0021      	movs	r1, r4
    9d2c:	0028      	movs	r0, r5
    9d2e:	f000 f933 	bl	9f98 <_fflush_r>
    9d32:	2800      	cmp	r0, #0
    9d34:	d126      	bne.n	9d84 <__swbuf_r+0x98>
    9d36:	68a3      	ldr	r3, [r4, #8]
    9d38:	3001      	adds	r0, #1
    9d3a:	3b01      	subs	r3, #1
    9d3c:	60a3      	str	r3, [r4, #8]
    9d3e:	6823      	ldr	r3, [r4, #0]
    9d40:	1c5a      	adds	r2, r3, #1
    9d42:	6022      	str	r2, [r4, #0]
    9d44:	701f      	strb	r7, [r3, #0]
    9d46:	6963      	ldr	r3, [r4, #20]
    9d48:	4298      	cmp	r0, r3
    9d4a:	d004      	beq.n	9d56 <__swbuf_r+0x6a>
    9d4c:	89a3      	ldrh	r3, [r4, #12]
    9d4e:	07db      	lsls	r3, r3, #31
    9d50:	d51a      	bpl.n	9d88 <__swbuf_r+0x9c>
    9d52:	2e0a      	cmp	r6, #10
    9d54:	d118      	bne.n	9d88 <__swbuf_r+0x9c>
    9d56:	0021      	movs	r1, r4
    9d58:	0028      	movs	r0, r5
    9d5a:	f000 f91d 	bl	9f98 <_fflush_r>
    9d5e:	2800      	cmp	r0, #0
    9d60:	d012      	beq.n	9d88 <__swbuf_r+0x9c>
    9d62:	e00f      	b.n	9d84 <__swbuf_r+0x98>
    9d64:	4b0a      	ldr	r3, [pc, #40]	; (9d90 <__swbuf_r+0xa4>)
    9d66:	429c      	cmp	r4, r3
    9d68:	d101      	bne.n	9d6e <__swbuf_r+0x82>
    9d6a:	68ac      	ldr	r4, [r5, #8]
    9d6c:	e7cd      	b.n	9d0a <__swbuf_r+0x1e>
    9d6e:	4b09      	ldr	r3, [pc, #36]	; (9d94 <__swbuf_r+0xa8>)
    9d70:	429c      	cmp	r4, r3
    9d72:	d1ca      	bne.n	9d0a <__swbuf_r+0x1e>
    9d74:	68ec      	ldr	r4, [r5, #12]
    9d76:	e7c8      	b.n	9d0a <__swbuf_r+0x1e>
    9d78:	0021      	movs	r1, r4
    9d7a:	0028      	movs	r0, r5
    9d7c:	f000 f80c 	bl	9d98 <__swsetup_r>
    9d80:	2800      	cmp	r0, #0
    9d82:	d0ca      	beq.n	9d1a <__swbuf_r+0x2e>
    9d84:	2601      	movs	r6, #1
    9d86:	4276      	negs	r6, r6
    9d88:	0030      	movs	r0, r6
    9d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9d8c:	0000c178 	.word	0x0000c178
    9d90:	0000c198 	.word	0x0000c198
    9d94:	0000c158 	.word	0x0000c158

00009d98 <__swsetup_r>:
    9d98:	4b36      	ldr	r3, [pc, #216]	; (9e74 <__swsetup_r+0xdc>)
    9d9a:	b570      	push	{r4, r5, r6, lr}
    9d9c:	681d      	ldr	r5, [r3, #0]
    9d9e:	0006      	movs	r6, r0
    9da0:	000c      	movs	r4, r1
    9da2:	2d00      	cmp	r5, #0
    9da4:	d005      	beq.n	9db2 <__swsetup_r+0x1a>
    9da6:	69ab      	ldr	r3, [r5, #24]
    9da8:	2b00      	cmp	r3, #0
    9daa:	d102      	bne.n	9db2 <__swsetup_r+0x1a>
    9dac:	0028      	movs	r0, r5
    9dae:	f000 f961 	bl	a074 <__sinit>
    9db2:	4b31      	ldr	r3, [pc, #196]	; (9e78 <__swsetup_r+0xe0>)
    9db4:	429c      	cmp	r4, r3
    9db6:	d10f      	bne.n	9dd8 <__swsetup_r+0x40>
    9db8:	686c      	ldr	r4, [r5, #4]
    9dba:	230c      	movs	r3, #12
    9dbc:	5ee2      	ldrsh	r2, [r4, r3]
    9dbe:	b293      	uxth	r3, r2
    9dc0:	0719      	lsls	r1, r3, #28
    9dc2:	d42d      	bmi.n	9e20 <__swsetup_r+0x88>
    9dc4:	06d9      	lsls	r1, r3, #27
    9dc6:	d411      	bmi.n	9dec <__swsetup_r+0x54>
    9dc8:	2309      	movs	r3, #9
    9dca:	2001      	movs	r0, #1
    9dcc:	6033      	str	r3, [r6, #0]
    9dce:	3337      	adds	r3, #55	; 0x37
    9dd0:	4313      	orrs	r3, r2
    9dd2:	81a3      	strh	r3, [r4, #12]
    9dd4:	4240      	negs	r0, r0
    9dd6:	bd70      	pop	{r4, r5, r6, pc}
    9dd8:	4b28      	ldr	r3, [pc, #160]	; (9e7c <__swsetup_r+0xe4>)
    9dda:	429c      	cmp	r4, r3
    9ddc:	d101      	bne.n	9de2 <__swsetup_r+0x4a>
    9dde:	68ac      	ldr	r4, [r5, #8]
    9de0:	e7eb      	b.n	9dba <__swsetup_r+0x22>
    9de2:	4b27      	ldr	r3, [pc, #156]	; (9e80 <__swsetup_r+0xe8>)
    9de4:	429c      	cmp	r4, r3
    9de6:	d1e8      	bne.n	9dba <__swsetup_r+0x22>
    9de8:	68ec      	ldr	r4, [r5, #12]
    9dea:	e7e6      	b.n	9dba <__swsetup_r+0x22>
    9dec:	075b      	lsls	r3, r3, #29
    9dee:	d513      	bpl.n	9e18 <__swsetup_r+0x80>
    9df0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9df2:	2900      	cmp	r1, #0
    9df4:	d008      	beq.n	9e08 <__swsetup_r+0x70>
    9df6:	0023      	movs	r3, r4
    9df8:	3344      	adds	r3, #68	; 0x44
    9dfa:	4299      	cmp	r1, r3
    9dfc:	d002      	beq.n	9e04 <__swsetup_r+0x6c>
    9dfe:	0030      	movs	r0, r6
    9e00:	f7ff fd20 	bl	9844 <_free_r>
    9e04:	2300      	movs	r3, #0
    9e06:	6363      	str	r3, [r4, #52]	; 0x34
    9e08:	2224      	movs	r2, #36	; 0x24
    9e0a:	89a3      	ldrh	r3, [r4, #12]
    9e0c:	4393      	bics	r3, r2
    9e0e:	81a3      	strh	r3, [r4, #12]
    9e10:	2300      	movs	r3, #0
    9e12:	6063      	str	r3, [r4, #4]
    9e14:	6923      	ldr	r3, [r4, #16]
    9e16:	6023      	str	r3, [r4, #0]
    9e18:	2308      	movs	r3, #8
    9e1a:	89a2      	ldrh	r2, [r4, #12]
    9e1c:	4313      	orrs	r3, r2
    9e1e:	81a3      	strh	r3, [r4, #12]
    9e20:	6923      	ldr	r3, [r4, #16]
    9e22:	2b00      	cmp	r3, #0
    9e24:	d10b      	bne.n	9e3e <__swsetup_r+0xa6>
    9e26:	21a0      	movs	r1, #160	; 0xa0
    9e28:	2280      	movs	r2, #128	; 0x80
    9e2a:	89a3      	ldrh	r3, [r4, #12]
    9e2c:	0089      	lsls	r1, r1, #2
    9e2e:	0092      	lsls	r2, r2, #2
    9e30:	400b      	ands	r3, r1
    9e32:	4293      	cmp	r3, r2
    9e34:	d003      	beq.n	9e3e <__swsetup_r+0xa6>
    9e36:	0021      	movs	r1, r4
    9e38:	0030      	movs	r0, r6
    9e3a:	f000 f9d9 	bl	a1f0 <__smakebuf_r>
    9e3e:	2301      	movs	r3, #1
    9e40:	89a2      	ldrh	r2, [r4, #12]
    9e42:	4013      	ands	r3, r2
    9e44:	d011      	beq.n	9e6a <__swsetup_r+0xd2>
    9e46:	2300      	movs	r3, #0
    9e48:	60a3      	str	r3, [r4, #8]
    9e4a:	6963      	ldr	r3, [r4, #20]
    9e4c:	425b      	negs	r3, r3
    9e4e:	61a3      	str	r3, [r4, #24]
    9e50:	2000      	movs	r0, #0
    9e52:	6923      	ldr	r3, [r4, #16]
    9e54:	4283      	cmp	r3, r0
    9e56:	d1be      	bne.n	9dd6 <__swsetup_r+0x3e>
    9e58:	230c      	movs	r3, #12
    9e5a:	5ee2      	ldrsh	r2, [r4, r3]
    9e5c:	0613      	lsls	r3, r2, #24
    9e5e:	d5ba      	bpl.n	9dd6 <__swsetup_r+0x3e>
    9e60:	2340      	movs	r3, #64	; 0x40
    9e62:	4313      	orrs	r3, r2
    9e64:	81a3      	strh	r3, [r4, #12]
    9e66:	3801      	subs	r0, #1
    9e68:	e7b5      	b.n	9dd6 <__swsetup_r+0x3e>
    9e6a:	0792      	lsls	r2, r2, #30
    9e6c:	d400      	bmi.n	9e70 <__swsetup_r+0xd8>
    9e6e:	6963      	ldr	r3, [r4, #20]
    9e70:	60a3      	str	r3, [r4, #8]
    9e72:	e7ed      	b.n	9e50 <__swsetup_r+0xb8>
    9e74:	2000004c 	.word	0x2000004c
    9e78:	0000c178 	.word	0x0000c178
    9e7c:	0000c198 	.word	0x0000c198
    9e80:	0000c158 	.word	0x0000c158

00009e84 <__sflush_r>:
    9e84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9e86:	898a      	ldrh	r2, [r1, #12]
    9e88:	0005      	movs	r5, r0
    9e8a:	000c      	movs	r4, r1
    9e8c:	0713      	lsls	r3, r2, #28
    9e8e:	d460      	bmi.n	9f52 <__sflush_r+0xce>
    9e90:	684b      	ldr	r3, [r1, #4]
    9e92:	2b00      	cmp	r3, #0
    9e94:	dc04      	bgt.n	9ea0 <__sflush_r+0x1c>
    9e96:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    9e98:	2b00      	cmp	r3, #0
    9e9a:	dc01      	bgt.n	9ea0 <__sflush_r+0x1c>
    9e9c:	2000      	movs	r0, #0
    9e9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9ea0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    9ea2:	2f00      	cmp	r7, #0
    9ea4:	d0fa      	beq.n	9e9c <__sflush_r+0x18>
    9ea6:	2300      	movs	r3, #0
    9ea8:	682e      	ldr	r6, [r5, #0]
    9eaa:	602b      	str	r3, [r5, #0]
    9eac:	2380      	movs	r3, #128	; 0x80
    9eae:	015b      	lsls	r3, r3, #5
    9eb0:	401a      	ands	r2, r3
    9eb2:	d034      	beq.n	9f1e <__sflush_r+0x9a>
    9eb4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    9eb6:	89a3      	ldrh	r3, [r4, #12]
    9eb8:	075b      	lsls	r3, r3, #29
    9eba:	d506      	bpl.n	9eca <__sflush_r+0x46>
    9ebc:	6863      	ldr	r3, [r4, #4]
    9ebe:	1ac0      	subs	r0, r0, r3
    9ec0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9ec2:	2b00      	cmp	r3, #0
    9ec4:	d001      	beq.n	9eca <__sflush_r+0x46>
    9ec6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    9ec8:	1ac0      	subs	r0, r0, r3
    9eca:	0002      	movs	r2, r0
    9ecc:	6a21      	ldr	r1, [r4, #32]
    9ece:	2300      	movs	r3, #0
    9ed0:	0028      	movs	r0, r5
    9ed2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    9ed4:	47b8      	blx	r7
    9ed6:	89a1      	ldrh	r1, [r4, #12]
    9ed8:	1c43      	adds	r3, r0, #1
    9eda:	d106      	bne.n	9eea <__sflush_r+0x66>
    9edc:	682b      	ldr	r3, [r5, #0]
    9ede:	2b1d      	cmp	r3, #29
    9ee0:	d831      	bhi.n	9f46 <__sflush_r+0xc2>
    9ee2:	4a2c      	ldr	r2, [pc, #176]	; (9f94 <__sflush_r+0x110>)
    9ee4:	40da      	lsrs	r2, r3
    9ee6:	07d3      	lsls	r3, r2, #31
    9ee8:	d52d      	bpl.n	9f46 <__sflush_r+0xc2>
    9eea:	2300      	movs	r3, #0
    9eec:	6063      	str	r3, [r4, #4]
    9eee:	6923      	ldr	r3, [r4, #16]
    9ef0:	6023      	str	r3, [r4, #0]
    9ef2:	04cb      	lsls	r3, r1, #19
    9ef4:	d505      	bpl.n	9f02 <__sflush_r+0x7e>
    9ef6:	1c43      	adds	r3, r0, #1
    9ef8:	d102      	bne.n	9f00 <__sflush_r+0x7c>
    9efa:	682b      	ldr	r3, [r5, #0]
    9efc:	2b00      	cmp	r3, #0
    9efe:	d100      	bne.n	9f02 <__sflush_r+0x7e>
    9f00:	6560      	str	r0, [r4, #84]	; 0x54
    9f02:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9f04:	602e      	str	r6, [r5, #0]
    9f06:	2900      	cmp	r1, #0
    9f08:	d0c8      	beq.n	9e9c <__sflush_r+0x18>
    9f0a:	0023      	movs	r3, r4
    9f0c:	3344      	adds	r3, #68	; 0x44
    9f0e:	4299      	cmp	r1, r3
    9f10:	d002      	beq.n	9f18 <__sflush_r+0x94>
    9f12:	0028      	movs	r0, r5
    9f14:	f7ff fc96 	bl	9844 <_free_r>
    9f18:	2000      	movs	r0, #0
    9f1a:	6360      	str	r0, [r4, #52]	; 0x34
    9f1c:	e7bf      	b.n	9e9e <__sflush_r+0x1a>
    9f1e:	2301      	movs	r3, #1
    9f20:	6a21      	ldr	r1, [r4, #32]
    9f22:	0028      	movs	r0, r5
    9f24:	47b8      	blx	r7
    9f26:	1c43      	adds	r3, r0, #1
    9f28:	d1c5      	bne.n	9eb6 <__sflush_r+0x32>
    9f2a:	682b      	ldr	r3, [r5, #0]
    9f2c:	2b00      	cmp	r3, #0
    9f2e:	d0c2      	beq.n	9eb6 <__sflush_r+0x32>
    9f30:	2b1d      	cmp	r3, #29
    9f32:	d001      	beq.n	9f38 <__sflush_r+0xb4>
    9f34:	2b16      	cmp	r3, #22
    9f36:	d101      	bne.n	9f3c <__sflush_r+0xb8>
    9f38:	602e      	str	r6, [r5, #0]
    9f3a:	e7af      	b.n	9e9c <__sflush_r+0x18>
    9f3c:	2340      	movs	r3, #64	; 0x40
    9f3e:	89a2      	ldrh	r2, [r4, #12]
    9f40:	4313      	orrs	r3, r2
    9f42:	81a3      	strh	r3, [r4, #12]
    9f44:	e7ab      	b.n	9e9e <__sflush_r+0x1a>
    9f46:	2340      	movs	r3, #64	; 0x40
    9f48:	430b      	orrs	r3, r1
    9f4a:	2001      	movs	r0, #1
    9f4c:	81a3      	strh	r3, [r4, #12]
    9f4e:	4240      	negs	r0, r0
    9f50:	e7a5      	b.n	9e9e <__sflush_r+0x1a>
    9f52:	690f      	ldr	r7, [r1, #16]
    9f54:	2f00      	cmp	r7, #0
    9f56:	d0a1      	beq.n	9e9c <__sflush_r+0x18>
    9f58:	680b      	ldr	r3, [r1, #0]
    9f5a:	600f      	str	r7, [r1, #0]
    9f5c:	1bdb      	subs	r3, r3, r7
    9f5e:	9301      	str	r3, [sp, #4]
    9f60:	2300      	movs	r3, #0
    9f62:	0792      	lsls	r2, r2, #30
    9f64:	d100      	bne.n	9f68 <__sflush_r+0xe4>
    9f66:	694b      	ldr	r3, [r1, #20]
    9f68:	60a3      	str	r3, [r4, #8]
    9f6a:	9b01      	ldr	r3, [sp, #4]
    9f6c:	2b00      	cmp	r3, #0
    9f6e:	dc00      	bgt.n	9f72 <__sflush_r+0xee>
    9f70:	e794      	b.n	9e9c <__sflush_r+0x18>
    9f72:	9b01      	ldr	r3, [sp, #4]
    9f74:	003a      	movs	r2, r7
    9f76:	6a21      	ldr	r1, [r4, #32]
    9f78:	0028      	movs	r0, r5
    9f7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    9f7c:	47b0      	blx	r6
    9f7e:	2800      	cmp	r0, #0
    9f80:	dc03      	bgt.n	9f8a <__sflush_r+0x106>
    9f82:	2340      	movs	r3, #64	; 0x40
    9f84:	89a2      	ldrh	r2, [r4, #12]
    9f86:	4313      	orrs	r3, r2
    9f88:	e7df      	b.n	9f4a <__sflush_r+0xc6>
    9f8a:	9b01      	ldr	r3, [sp, #4]
    9f8c:	183f      	adds	r7, r7, r0
    9f8e:	1a1b      	subs	r3, r3, r0
    9f90:	9301      	str	r3, [sp, #4]
    9f92:	e7ea      	b.n	9f6a <__sflush_r+0xe6>
    9f94:	20400001 	.word	0x20400001

00009f98 <_fflush_r>:
    9f98:	690b      	ldr	r3, [r1, #16]
    9f9a:	b570      	push	{r4, r5, r6, lr}
    9f9c:	0005      	movs	r5, r0
    9f9e:	000c      	movs	r4, r1
    9fa0:	2b00      	cmp	r3, #0
    9fa2:	d101      	bne.n	9fa8 <_fflush_r+0x10>
    9fa4:	2000      	movs	r0, #0
    9fa6:	bd70      	pop	{r4, r5, r6, pc}
    9fa8:	2800      	cmp	r0, #0
    9faa:	d004      	beq.n	9fb6 <_fflush_r+0x1e>
    9fac:	6983      	ldr	r3, [r0, #24]
    9fae:	2b00      	cmp	r3, #0
    9fb0:	d101      	bne.n	9fb6 <_fflush_r+0x1e>
    9fb2:	f000 f85f 	bl	a074 <__sinit>
    9fb6:	4b0b      	ldr	r3, [pc, #44]	; (9fe4 <_fflush_r+0x4c>)
    9fb8:	429c      	cmp	r4, r3
    9fba:	d109      	bne.n	9fd0 <_fflush_r+0x38>
    9fbc:	686c      	ldr	r4, [r5, #4]
    9fbe:	220c      	movs	r2, #12
    9fc0:	5ea3      	ldrsh	r3, [r4, r2]
    9fc2:	2b00      	cmp	r3, #0
    9fc4:	d0ee      	beq.n	9fa4 <_fflush_r+0xc>
    9fc6:	0021      	movs	r1, r4
    9fc8:	0028      	movs	r0, r5
    9fca:	f7ff ff5b 	bl	9e84 <__sflush_r>
    9fce:	e7ea      	b.n	9fa6 <_fflush_r+0xe>
    9fd0:	4b05      	ldr	r3, [pc, #20]	; (9fe8 <_fflush_r+0x50>)
    9fd2:	429c      	cmp	r4, r3
    9fd4:	d101      	bne.n	9fda <_fflush_r+0x42>
    9fd6:	68ac      	ldr	r4, [r5, #8]
    9fd8:	e7f1      	b.n	9fbe <_fflush_r+0x26>
    9fda:	4b04      	ldr	r3, [pc, #16]	; (9fec <_fflush_r+0x54>)
    9fdc:	429c      	cmp	r4, r3
    9fde:	d1ee      	bne.n	9fbe <_fflush_r+0x26>
    9fe0:	68ec      	ldr	r4, [r5, #12]
    9fe2:	e7ec      	b.n	9fbe <_fflush_r+0x26>
    9fe4:	0000c178 	.word	0x0000c178
    9fe8:	0000c198 	.word	0x0000c198
    9fec:	0000c158 	.word	0x0000c158

00009ff0 <_cleanup_r>:
    9ff0:	b510      	push	{r4, lr}
    9ff2:	4902      	ldr	r1, [pc, #8]	; (9ffc <_cleanup_r+0xc>)
    9ff4:	f000 f8b2 	bl	a15c <_fwalk_reent>
    9ff8:	bd10      	pop	{r4, pc}
    9ffa:	46c0      	nop			; (mov r8, r8)
    9ffc:	00009f99 	.word	0x00009f99

0000a000 <std.isra.0>:
    a000:	2300      	movs	r3, #0
    a002:	b510      	push	{r4, lr}
    a004:	0004      	movs	r4, r0
    a006:	6003      	str	r3, [r0, #0]
    a008:	6043      	str	r3, [r0, #4]
    a00a:	6083      	str	r3, [r0, #8]
    a00c:	8181      	strh	r1, [r0, #12]
    a00e:	6643      	str	r3, [r0, #100]	; 0x64
    a010:	81c2      	strh	r2, [r0, #14]
    a012:	6103      	str	r3, [r0, #16]
    a014:	6143      	str	r3, [r0, #20]
    a016:	6183      	str	r3, [r0, #24]
    a018:	0019      	movs	r1, r3
    a01a:	2208      	movs	r2, #8
    a01c:	305c      	adds	r0, #92	; 0x5c
    a01e:	f7ff fc08 	bl	9832 <memset>
    a022:	4b05      	ldr	r3, [pc, #20]	; (a038 <std.isra.0+0x38>)
    a024:	6224      	str	r4, [r4, #32]
    a026:	6263      	str	r3, [r4, #36]	; 0x24
    a028:	4b04      	ldr	r3, [pc, #16]	; (a03c <std.isra.0+0x3c>)
    a02a:	62a3      	str	r3, [r4, #40]	; 0x28
    a02c:	4b04      	ldr	r3, [pc, #16]	; (a040 <std.isra.0+0x40>)
    a02e:	62e3      	str	r3, [r4, #44]	; 0x2c
    a030:	4b04      	ldr	r3, [pc, #16]	; (a044 <std.isra.0+0x44>)
    a032:	6323      	str	r3, [r4, #48]	; 0x30
    a034:	bd10      	pop	{r4, pc}
    a036:	46c0      	nop			; (mov r8, r8)
    a038:	0000ab41 	.word	0x0000ab41
    a03c:	0000ab69 	.word	0x0000ab69
    a040:	0000aba1 	.word	0x0000aba1
    a044:	0000abcd 	.word	0x0000abcd

0000a048 <__sfmoreglue>:
    a048:	b570      	push	{r4, r5, r6, lr}
    a04a:	2568      	movs	r5, #104	; 0x68
    a04c:	1e4a      	subs	r2, r1, #1
    a04e:	4355      	muls	r5, r2
    a050:	000e      	movs	r6, r1
    a052:	0029      	movs	r1, r5
    a054:	3174      	adds	r1, #116	; 0x74
    a056:	f7ff fc3f 	bl	98d8 <_malloc_r>
    a05a:	1e04      	subs	r4, r0, #0
    a05c:	d008      	beq.n	a070 <__sfmoreglue+0x28>
    a05e:	2100      	movs	r1, #0
    a060:	002a      	movs	r2, r5
    a062:	6001      	str	r1, [r0, #0]
    a064:	6046      	str	r6, [r0, #4]
    a066:	300c      	adds	r0, #12
    a068:	60a0      	str	r0, [r4, #8]
    a06a:	3268      	adds	r2, #104	; 0x68
    a06c:	f7ff fbe1 	bl	9832 <memset>
    a070:	0020      	movs	r0, r4
    a072:	bd70      	pop	{r4, r5, r6, pc}

0000a074 <__sinit>:
    a074:	6983      	ldr	r3, [r0, #24]
    a076:	b513      	push	{r0, r1, r4, lr}
    a078:	0004      	movs	r4, r0
    a07a:	2b00      	cmp	r3, #0
    a07c:	d128      	bne.n	a0d0 <__sinit+0x5c>
    a07e:	6483      	str	r3, [r0, #72]	; 0x48
    a080:	64c3      	str	r3, [r0, #76]	; 0x4c
    a082:	6503      	str	r3, [r0, #80]	; 0x50
    a084:	4b13      	ldr	r3, [pc, #76]	; (a0d4 <__sinit+0x60>)
    a086:	4a14      	ldr	r2, [pc, #80]	; (a0d8 <__sinit+0x64>)
    a088:	681b      	ldr	r3, [r3, #0]
    a08a:	6282      	str	r2, [r0, #40]	; 0x28
    a08c:	9301      	str	r3, [sp, #4]
    a08e:	4298      	cmp	r0, r3
    a090:	d101      	bne.n	a096 <__sinit+0x22>
    a092:	2301      	movs	r3, #1
    a094:	6183      	str	r3, [r0, #24]
    a096:	0020      	movs	r0, r4
    a098:	f000 f820 	bl	a0dc <__sfp>
    a09c:	6060      	str	r0, [r4, #4]
    a09e:	0020      	movs	r0, r4
    a0a0:	f000 f81c 	bl	a0dc <__sfp>
    a0a4:	60a0      	str	r0, [r4, #8]
    a0a6:	0020      	movs	r0, r4
    a0a8:	f000 f818 	bl	a0dc <__sfp>
    a0ac:	2200      	movs	r2, #0
    a0ae:	60e0      	str	r0, [r4, #12]
    a0b0:	2104      	movs	r1, #4
    a0b2:	6860      	ldr	r0, [r4, #4]
    a0b4:	f7ff ffa4 	bl	a000 <std.isra.0>
    a0b8:	2201      	movs	r2, #1
    a0ba:	2109      	movs	r1, #9
    a0bc:	68a0      	ldr	r0, [r4, #8]
    a0be:	f7ff ff9f 	bl	a000 <std.isra.0>
    a0c2:	2202      	movs	r2, #2
    a0c4:	2112      	movs	r1, #18
    a0c6:	68e0      	ldr	r0, [r4, #12]
    a0c8:	f7ff ff9a 	bl	a000 <std.isra.0>
    a0cc:	2301      	movs	r3, #1
    a0ce:	61a3      	str	r3, [r4, #24]
    a0d0:	bd13      	pop	{r0, r1, r4, pc}
    a0d2:	46c0      	nop			; (mov r8, r8)
    a0d4:	0000c154 	.word	0x0000c154
    a0d8:	00009ff1 	.word	0x00009ff1

0000a0dc <__sfp>:
    a0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a0de:	4b1e      	ldr	r3, [pc, #120]	; (a158 <__sfp+0x7c>)
    a0e0:	0007      	movs	r7, r0
    a0e2:	681e      	ldr	r6, [r3, #0]
    a0e4:	69b3      	ldr	r3, [r6, #24]
    a0e6:	2b00      	cmp	r3, #0
    a0e8:	d102      	bne.n	a0f0 <__sfp+0x14>
    a0ea:	0030      	movs	r0, r6
    a0ec:	f7ff ffc2 	bl	a074 <__sinit>
    a0f0:	3648      	adds	r6, #72	; 0x48
    a0f2:	68b4      	ldr	r4, [r6, #8]
    a0f4:	6873      	ldr	r3, [r6, #4]
    a0f6:	3b01      	subs	r3, #1
    a0f8:	d504      	bpl.n	a104 <__sfp+0x28>
    a0fa:	6833      	ldr	r3, [r6, #0]
    a0fc:	2b00      	cmp	r3, #0
    a0fe:	d007      	beq.n	a110 <__sfp+0x34>
    a100:	6836      	ldr	r6, [r6, #0]
    a102:	e7f6      	b.n	a0f2 <__sfp+0x16>
    a104:	220c      	movs	r2, #12
    a106:	5ea5      	ldrsh	r5, [r4, r2]
    a108:	2d00      	cmp	r5, #0
    a10a:	d00d      	beq.n	a128 <__sfp+0x4c>
    a10c:	3468      	adds	r4, #104	; 0x68
    a10e:	e7f2      	b.n	a0f6 <__sfp+0x1a>
    a110:	2104      	movs	r1, #4
    a112:	0038      	movs	r0, r7
    a114:	f7ff ff98 	bl	a048 <__sfmoreglue>
    a118:	6030      	str	r0, [r6, #0]
    a11a:	2800      	cmp	r0, #0
    a11c:	d1f0      	bne.n	a100 <__sfp+0x24>
    a11e:	230c      	movs	r3, #12
    a120:	0004      	movs	r4, r0
    a122:	603b      	str	r3, [r7, #0]
    a124:	0020      	movs	r0, r4
    a126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a128:	2301      	movs	r3, #1
    a12a:	0020      	movs	r0, r4
    a12c:	425b      	negs	r3, r3
    a12e:	81e3      	strh	r3, [r4, #14]
    a130:	3302      	adds	r3, #2
    a132:	81a3      	strh	r3, [r4, #12]
    a134:	6665      	str	r5, [r4, #100]	; 0x64
    a136:	6025      	str	r5, [r4, #0]
    a138:	60a5      	str	r5, [r4, #8]
    a13a:	6065      	str	r5, [r4, #4]
    a13c:	6125      	str	r5, [r4, #16]
    a13e:	6165      	str	r5, [r4, #20]
    a140:	61a5      	str	r5, [r4, #24]
    a142:	2208      	movs	r2, #8
    a144:	0029      	movs	r1, r5
    a146:	305c      	adds	r0, #92	; 0x5c
    a148:	f7ff fb73 	bl	9832 <memset>
    a14c:	6365      	str	r5, [r4, #52]	; 0x34
    a14e:	63a5      	str	r5, [r4, #56]	; 0x38
    a150:	64a5      	str	r5, [r4, #72]	; 0x48
    a152:	64e5      	str	r5, [r4, #76]	; 0x4c
    a154:	e7e6      	b.n	a124 <__sfp+0x48>
    a156:	46c0      	nop			; (mov r8, r8)
    a158:	0000c154 	.word	0x0000c154

0000a15c <_fwalk_reent>:
    a15c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a15e:	0004      	movs	r4, r0
    a160:	0007      	movs	r7, r0
    a162:	2600      	movs	r6, #0
    a164:	9101      	str	r1, [sp, #4]
    a166:	3448      	adds	r4, #72	; 0x48
    a168:	2c00      	cmp	r4, #0
    a16a:	d101      	bne.n	a170 <_fwalk_reent+0x14>
    a16c:	0030      	movs	r0, r6
    a16e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    a170:	6863      	ldr	r3, [r4, #4]
    a172:	68a5      	ldr	r5, [r4, #8]
    a174:	9300      	str	r3, [sp, #0]
    a176:	9b00      	ldr	r3, [sp, #0]
    a178:	3b01      	subs	r3, #1
    a17a:	9300      	str	r3, [sp, #0]
    a17c:	d501      	bpl.n	a182 <_fwalk_reent+0x26>
    a17e:	6824      	ldr	r4, [r4, #0]
    a180:	e7f2      	b.n	a168 <_fwalk_reent+0xc>
    a182:	89ab      	ldrh	r3, [r5, #12]
    a184:	2b01      	cmp	r3, #1
    a186:	d908      	bls.n	a19a <_fwalk_reent+0x3e>
    a188:	220e      	movs	r2, #14
    a18a:	5eab      	ldrsh	r3, [r5, r2]
    a18c:	3301      	adds	r3, #1
    a18e:	d004      	beq.n	a19a <_fwalk_reent+0x3e>
    a190:	0029      	movs	r1, r5
    a192:	0038      	movs	r0, r7
    a194:	9b01      	ldr	r3, [sp, #4]
    a196:	4798      	blx	r3
    a198:	4306      	orrs	r6, r0
    a19a:	3568      	adds	r5, #104	; 0x68
    a19c:	e7eb      	b.n	a176 <_fwalk_reent+0x1a>
	...

0000a1a0 <__swhatbuf_r>:
    a1a0:	b570      	push	{r4, r5, r6, lr}
    a1a2:	000e      	movs	r6, r1
    a1a4:	001d      	movs	r5, r3
    a1a6:	230e      	movs	r3, #14
    a1a8:	5ec9      	ldrsh	r1, [r1, r3]
    a1aa:	b090      	sub	sp, #64	; 0x40
    a1ac:	0014      	movs	r4, r2
    a1ae:	2900      	cmp	r1, #0
    a1b0:	da07      	bge.n	a1c2 <__swhatbuf_r+0x22>
    a1b2:	2300      	movs	r3, #0
    a1b4:	602b      	str	r3, [r5, #0]
    a1b6:	89b3      	ldrh	r3, [r6, #12]
    a1b8:	061b      	lsls	r3, r3, #24
    a1ba:	d411      	bmi.n	a1e0 <__swhatbuf_r+0x40>
    a1bc:	2380      	movs	r3, #128	; 0x80
    a1be:	00db      	lsls	r3, r3, #3
    a1c0:	e00f      	b.n	a1e2 <__swhatbuf_r+0x42>
    a1c2:	aa01      	add	r2, sp, #4
    a1c4:	f000 fd2e 	bl	ac24 <_fstat_r>
    a1c8:	2800      	cmp	r0, #0
    a1ca:	dbf2      	blt.n	a1b2 <__swhatbuf_r+0x12>
    a1cc:	22f0      	movs	r2, #240	; 0xf0
    a1ce:	9b02      	ldr	r3, [sp, #8]
    a1d0:	0212      	lsls	r2, r2, #8
    a1d2:	4013      	ands	r3, r2
    a1d4:	4a05      	ldr	r2, [pc, #20]	; (a1ec <__swhatbuf_r+0x4c>)
    a1d6:	189b      	adds	r3, r3, r2
    a1d8:	425a      	negs	r2, r3
    a1da:	4153      	adcs	r3, r2
    a1dc:	602b      	str	r3, [r5, #0]
    a1de:	e7ed      	b.n	a1bc <__swhatbuf_r+0x1c>
    a1e0:	2340      	movs	r3, #64	; 0x40
    a1e2:	2000      	movs	r0, #0
    a1e4:	6023      	str	r3, [r4, #0]
    a1e6:	b010      	add	sp, #64	; 0x40
    a1e8:	bd70      	pop	{r4, r5, r6, pc}
    a1ea:	46c0      	nop			; (mov r8, r8)
    a1ec:	ffffe000 	.word	0xffffe000

0000a1f0 <__smakebuf_r>:
    a1f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a1f2:	2602      	movs	r6, #2
    a1f4:	898b      	ldrh	r3, [r1, #12]
    a1f6:	0005      	movs	r5, r0
    a1f8:	000c      	movs	r4, r1
    a1fa:	4233      	tst	r3, r6
    a1fc:	d006      	beq.n	a20c <__smakebuf_r+0x1c>
    a1fe:	0023      	movs	r3, r4
    a200:	3347      	adds	r3, #71	; 0x47
    a202:	6023      	str	r3, [r4, #0]
    a204:	6123      	str	r3, [r4, #16]
    a206:	2301      	movs	r3, #1
    a208:	6163      	str	r3, [r4, #20]
    a20a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    a20c:	ab01      	add	r3, sp, #4
    a20e:	466a      	mov	r2, sp
    a210:	f7ff ffc6 	bl	a1a0 <__swhatbuf_r>
    a214:	9900      	ldr	r1, [sp, #0]
    a216:	0007      	movs	r7, r0
    a218:	0028      	movs	r0, r5
    a21a:	f7ff fb5d 	bl	98d8 <_malloc_r>
    a21e:	2800      	cmp	r0, #0
    a220:	d106      	bne.n	a230 <__smakebuf_r+0x40>
    a222:	220c      	movs	r2, #12
    a224:	5ea3      	ldrsh	r3, [r4, r2]
    a226:	059a      	lsls	r2, r3, #22
    a228:	d4ef      	bmi.n	a20a <__smakebuf_r+0x1a>
    a22a:	431e      	orrs	r6, r3
    a22c:	81a6      	strh	r6, [r4, #12]
    a22e:	e7e6      	b.n	a1fe <__smakebuf_r+0xe>
    a230:	4b0d      	ldr	r3, [pc, #52]	; (a268 <__smakebuf_r+0x78>)
    a232:	62ab      	str	r3, [r5, #40]	; 0x28
    a234:	2380      	movs	r3, #128	; 0x80
    a236:	89a2      	ldrh	r2, [r4, #12]
    a238:	6020      	str	r0, [r4, #0]
    a23a:	4313      	orrs	r3, r2
    a23c:	81a3      	strh	r3, [r4, #12]
    a23e:	9b00      	ldr	r3, [sp, #0]
    a240:	6120      	str	r0, [r4, #16]
    a242:	6163      	str	r3, [r4, #20]
    a244:	9b01      	ldr	r3, [sp, #4]
    a246:	2b00      	cmp	r3, #0
    a248:	d00a      	beq.n	a260 <__smakebuf_r+0x70>
    a24a:	230e      	movs	r3, #14
    a24c:	5ee1      	ldrsh	r1, [r4, r3]
    a24e:	0028      	movs	r0, r5
    a250:	f000 fcfa 	bl	ac48 <_isatty_r>
    a254:	2800      	cmp	r0, #0
    a256:	d003      	beq.n	a260 <__smakebuf_r+0x70>
    a258:	2301      	movs	r3, #1
    a25a:	89a2      	ldrh	r2, [r4, #12]
    a25c:	4313      	orrs	r3, r2
    a25e:	81a3      	strh	r3, [r4, #12]
    a260:	89a0      	ldrh	r0, [r4, #12]
    a262:	4338      	orrs	r0, r7
    a264:	81a0      	strh	r0, [r4, #12]
    a266:	e7d0      	b.n	a20a <__smakebuf_r+0x1a>
    a268:	00009ff1 	.word	0x00009ff1

0000a26c <__malloc_lock>:
    a26c:	4770      	bx	lr

0000a26e <__malloc_unlock>:
    a26e:	4770      	bx	lr

0000a270 <__ssputs_r>:
    a270:	b5f0      	push	{r4, r5, r6, r7, lr}
    a272:	688e      	ldr	r6, [r1, #8]
    a274:	b085      	sub	sp, #20
    a276:	0007      	movs	r7, r0
    a278:	000c      	movs	r4, r1
    a27a:	9203      	str	r2, [sp, #12]
    a27c:	9301      	str	r3, [sp, #4]
    a27e:	429e      	cmp	r6, r3
    a280:	d839      	bhi.n	a2f6 <__ssputs_r+0x86>
    a282:	2390      	movs	r3, #144	; 0x90
    a284:	898a      	ldrh	r2, [r1, #12]
    a286:	00db      	lsls	r3, r3, #3
    a288:	421a      	tst	r2, r3
    a28a:	d034      	beq.n	a2f6 <__ssputs_r+0x86>
    a28c:	2503      	movs	r5, #3
    a28e:	6909      	ldr	r1, [r1, #16]
    a290:	6823      	ldr	r3, [r4, #0]
    a292:	1a5b      	subs	r3, r3, r1
    a294:	9302      	str	r3, [sp, #8]
    a296:	6963      	ldr	r3, [r4, #20]
    a298:	9802      	ldr	r0, [sp, #8]
    a29a:	435d      	muls	r5, r3
    a29c:	0feb      	lsrs	r3, r5, #31
    a29e:	195d      	adds	r5, r3, r5
    a2a0:	9b01      	ldr	r3, [sp, #4]
    a2a2:	106d      	asrs	r5, r5, #1
    a2a4:	3301      	adds	r3, #1
    a2a6:	181b      	adds	r3, r3, r0
    a2a8:	42ab      	cmp	r3, r5
    a2aa:	d900      	bls.n	a2ae <__ssputs_r+0x3e>
    a2ac:	001d      	movs	r5, r3
    a2ae:	0553      	lsls	r3, r2, #21
    a2b0:	d532      	bpl.n	a318 <__ssputs_r+0xa8>
    a2b2:	0029      	movs	r1, r5
    a2b4:	0038      	movs	r0, r7
    a2b6:	f7ff fb0f 	bl	98d8 <_malloc_r>
    a2ba:	1e06      	subs	r6, r0, #0
    a2bc:	d109      	bne.n	a2d2 <__ssputs_r+0x62>
    a2be:	230c      	movs	r3, #12
    a2c0:	603b      	str	r3, [r7, #0]
    a2c2:	2340      	movs	r3, #64	; 0x40
    a2c4:	2001      	movs	r0, #1
    a2c6:	89a2      	ldrh	r2, [r4, #12]
    a2c8:	4240      	negs	r0, r0
    a2ca:	4313      	orrs	r3, r2
    a2cc:	81a3      	strh	r3, [r4, #12]
    a2ce:	b005      	add	sp, #20
    a2d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a2d2:	9a02      	ldr	r2, [sp, #8]
    a2d4:	6921      	ldr	r1, [r4, #16]
    a2d6:	f7ff fa91 	bl	97fc <memcpy>
    a2da:	89a3      	ldrh	r3, [r4, #12]
    a2dc:	4a14      	ldr	r2, [pc, #80]	; (a330 <__ssputs_r+0xc0>)
    a2de:	401a      	ands	r2, r3
    a2e0:	2380      	movs	r3, #128	; 0x80
    a2e2:	4313      	orrs	r3, r2
    a2e4:	81a3      	strh	r3, [r4, #12]
    a2e6:	9b02      	ldr	r3, [sp, #8]
    a2e8:	6126      	str	r6, [r4, #16]
    a2ea:	18f6      	adds	r6, r6, r3
    a2ec:	6026      	str	r6, [r4, #0]
    a2ee:	6165      	str	r5, [r4, #20]
    a2f0:	9e01      	ldr	r6, [sp, #4]
    a2f2:	1aed      	subs	r5, r5, r3
    a2f4:	60a5      	str	r5, [r4, #8]
    a2f6:	9b01      	ldr	r3, [sp, #4]
    a2f8:	42b3      	cmp	r3, r6
    a2fa:	d200      	bcs.n	a2fe <__ssputs_r+0x8e>
    a2fc:	001e      	movs	r6, r3
    a2fe:	0032      	movs	r2, r6
    a300:	9903      	ldr	r1, [sp, #12]
    a302:	6820      	ldr	r0, [r4, #0]
    a304:	f7ff fa83 	bl	980e <memmove>
    a308:	68a3      	ldr	r3, [r4, #8]
    a30a:	2000      	movs	r0, #0
    a30c:	1b9b      	subs	r3, r3, r6
    a30e:	60a3      	str	r3, [r4, #8]
    a310:	6823      	ldr	r3, [r4, #0]
    a312:	199e      	adds	r6, r3, r6
    a314:	6026      	str	r6, [r4, #0]
    a316:	e7da      	b.n	a2ce <__ssputs_r+0x5e>
    a318:	002a      	movs	r2, r5
    a31a:	0038      	movs	r0, r7
    a31c:	f000 fcc5 	bl	acaa <_realloc_r>
    a320:	1e06      	subs	r6, r0, #0
    a322:	d1e0      	bne.n	a2e6 <__ssputs_r+0x76>
    a324:	6921      	ldr	r1, [r4, #16]
    a326:	0038      	movs	r0, r7
    a328:	f7ff fa8c 	bl	9844 <_free_r>
    a32c:	e7c7      	b.n	a2be <__ssputs_r+0x4e>
    a32e:	46c0      	nop			; (mov r8, r8)
    a330:	fffffb7f 	.word	0xfffffb7f

0000a334 <_svfiprintf_r>:
    a334:	b5f0      	push	{r4, r5, r6, r7, lr}
    a336:	b09f      	sub	sp, #124	; 0x7c
    a338:	9002      	str	r0, [sp, #8]
    a33a:	9305      	str	r3, [sp, #20]
    a33c:	898b      	ldrh	r3, [r1, #12]
    a33e:	000f      	movs	r7, r1
    a340:	0016      	movs	r6, r2
    a342:	061b      	lsls	r3, r3, #24
    a344:	d511      	bpl.n	a36a <_svfiprintf_r+0x36>
    a346:	690b      	ldr	r3, [r1, #16]
    a348:	2b00      	cmp	r3, #0
    a34a:	d10e      	bne.n	a36a <_svfiprintf_r+0x36>
    a34c:	2140      	movs	r1, #64	; 0x40
    a34e:	f7ff fac3 	bl	98d8 <_malloc_r>
    a352:	6038      	str	r0, [r7, #0]
    a354:	6138      	str	r0, [r7, #16]
    a356:	2800      	cmp	r0, #0
    a358:	d105      	bne.n	a366 <_svfiprintf_r+0x32>
    a35a:	230c      	movs	r3, #12
    a35c:	9a02      	ldr	r2, [sp, #8]
    a35e:	3801      	subs	r0, #1
    a360:	6013      	str	r3, [r2, #0]
    a362:	b01f      	add	sp, #124	; 0x7c
    a364:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a366:	2340      	movs	r3, #64	; 0x40
    a368:	617b      	str	r3, [r7, #20]
    a36a:	2300      	movs	r3, #0
    a36c:	ad06      	add	r5, sp, #24
    a36e:	616b      	str	r3, [r5, #20]
    a370:	3320      	adds	r3, #32
    a372:	766b      	strb	r3, [r5, #25]
    a374:	3310      	adds	r3, #16
    a376:	76ab      	strb	r3, [r5, #26]
    a378:	0034      	movs	r4, r6
    a37a:	7823      	ldrb	r3, [r4, #0]
    a37c:	2b00      	cmp	r3, #0
    a37e:	d147      	bne.n	a410 <_svfiprintf_r+0xdc>
    a380:	1ba3      	subs	r3, r4, r6
    a382:	9304      	str	r3, [sp, #16]
    a384:	d00d      	beq.n	a3a2 <_svfiprintf_r+0x6e>
    a386:	1ba3      	subs	r3, r4, r6
    a388:	0032      	movs	r2, r6
    a38a:	0039      	movs	r1, r7
    a38c:	9802      	ldr	r0, [sp, #8]
    a38e:	f7ff ff6f 	bl	a270 <__ssputs_r>
    a392:	1c43      	adds	r3, r0, #1
    a394:	d100      	bne.n	a398 <_svfiprintf_r+0x64>
    a396:	e0b5      	b.n	a504 <_svfiprintf_r+0x1d0>
    a398:	696a      	ldr	r2, [r5, #20]
    a39a:	9b04      	ldr	r3, [sp, #16]
    a39c:	4694      	mov	ip, r2
    a39e:	4463      	add	r3, ip
    a3a0:	616b      	str	r3, [r5, #20]
    a3a2:	7823      	ldrb	r3, [r4, #0]
    a3a4:	2b00      	cmp	r3, #0
    a3a6:	d100      	bne.n	a3aa <_svfiprintf_r+0x76>
    a3a8:	e0ac      	b.n	a504 <_svfiprintf_r+0x1d0>
    a3aa:	2201      	movs	r2, #1
    a3ac:	2300      	movs	r3, #0
    a3ae:	4252      	negs	r2, r2
    a3b0:	606a      	str	r2, [r5, #4]
    a3b2:	a902      	add	r1, sp, #8
    a3b4:	3254      	adds	r2, #84	; 0x54
    a3b6:	1852      	adds	r2, r2, r1
    a3b8:	3401      	adds	r4, #1
    a3ba:	602b      	str	r3, [r5, #0]
    a3bc:	60eb      	str	r3, [r5, #12]
    a3be:	60ab      	str	r3, [r5, #8]
    a3c0:	7013      	strb	r3, [r2, #0]
    a3c2:	65ab      	str	r3, [r5, #88]	; 0x58
    a3c4:	4e58      	ldr	r6, [pc, #352]	; (a528 <_svfiprintf_r+0x1f4>)
    a3c6:	2205      	movs	r2, #5
    a3c8:	7821      	ldrb	r1, [r4, #0]
    a3ca:	0030      	movs	r0, r6
    a3cc:	f000 fc62 	bl	ac94 <memchr>
    a3d0:	1c62      	adds	r2, r4, #1
    a3d2:	2800      	cmp	r0, #0
    a3d4:	d120      	bne.n	a418 <_svfiprintf_r+0xe4>
    a3d6:	6829      	ldr	r1, [r5, #0]
    a3d8:	06cb      	lsls	r3, r1, #27
    a3da:	d504      	bpl.n	a3e6 <_svfiprintf_r+0xb2>
    a3dc:	2353      	movs	r3, #83	; 0x53
    a3de:	ae02      	add	r6, sp, #8
    a3e0:	3020      	adds	r0, #32
    a3e2:	199b      	adds	r3, r3, r6
    a3e4:	7018      	strb	r0, [r3, #0]
    a3e6:	070b      	lsls	r3, r1, #28
    a3e8:	d504      	bpl.n	a3f4 <_svfiprintf_r+0xc0>
    a3ea:	2353      	movs	r3, #83	; 0x53
    a3ec:	202b      	movs	r0, #43	; 0x2b
    a3ee:	ae02      	add	r6, sp, #8
    a3f0:	199b      	adds	r3, r3, r6
    a3f2:	7018      	strb	r0, [r3, #0]
    a3f4:	7823      	ldrb	r3, [r4, #0]
    a3f6:	2b2a      	cmp	r3, #42	; 0x2a
    a3f8:	d016      	beq.n	a428 <_svfiprintf_r+0xf4>
    a3fa:	2000      	movs	r0, #0
    a3fc:	210a      	movs	r1, #10
    a3fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a400:	7822      	ldrb	r2, [r4, #0]
    a402:	3a30      	subs	r2, #48	; 0x30
    a404:	2a09      	cmp	r2, #9
    a406:	d955      	bls.n	a4b4 <_svfiprintf_r+0x180>
    a408:	2800      	cmp	r0, #0
    a40a:	d015      	beq.n	a438 <_svfiprintf_r+0x104>
    a40c:	9309      	str	r3, [sp, #36]	; 0x24
    a40e:	e013      	b.n	a438 <_svfiprintf_r+0x104>
    a410:	2b25      	cmp	r3, #37	; 0x25
    a412:	d0b5      	beq.n	a380 <_svfiprintf_r+0x4c>
    a414:	3401      	adds	r4, #1
    a416:	e7b0      	b.n	a37a <_svfiprintf_r+0x46>
    a418:	2301      	movs	r3, #1
    a41a:	1b80      	subs	r0, r0, r6
    a41c:	4083      	lsls	r3, r0
    a41e:	6829      	ldr	r1, [r5, #0]
    a420:	0014      	movs	r4, r2
    a422:	430b      	orrs	r3, r1
    a424:	602b      	str	r3, [r5, #0]
    a426:	e7cd      	b.n	a3c4 <_svfiprintf_r+0x90>
    a428:	9b05      	ldr	r3, [sp, #20]
    a42a:	1d18      	adds	r0, r3, #4
    a42c:	681b      	ldr	r3, [r3, #0]
    a42e:	9005      	str	r0, [sp, #20]
    a430:	2b00      	cmp	r3, #0
    a432:	db39      	blt.n	a4a8 <_svfiprintf_r+0x174>
    a434:	9309      	str	r3, [sp, #36]	; 0x24
    a436:	0014      	movs	r4, r2
    a438:	7823      	ldrb	r3, [r4, #0]
    a43a:	2b2e      	cmp	r3, #46	; 0x2e
    a43c:	d10b      	bne.n	a456 <_svfiprintf_r+0x122>
    a43e:	7863      	ldrb	r3, [r4, #1]
    a440:	1c62      	adds	r2, r4, #1
    a442:	2b2a      	cmp	r3, #42	; 0x2a
    a444:	d13e      	bne.n	a4c4 <_svfiprintf_r+0x190>
    a446:	9b05      	ldr	r3, [sp, #20]
    a448:	3402      	adds	r4, #2
    a44a:	1d1a      	adds	r2, r3, #4
    a44c:	681b      	ldr	r3, [r3, #0]
    a44e:	9205      	str	r2, [sp, #20]
    a450:	2b00      	cmp	r3, #0
    a452:	db34      	blt.n	a4be <_svfiprintf_r+0x18a>
    a454:	9307      	str	r3, [sp, #28]
    a456:	4e35      	ldr	r6, [pc, #212]	; (a52c <_svfiprintf_r+0x1f8>)
    a458:	7821      	ldrb	r1, [r4, #0]
    a45a:	2203      	movs	r2, #3
    a45c:	0030      	movs	r0, r6
    a45e:	f000 fc19 	bl	ac94 <memchr>
    a462:	2800      	cmp	r0, #0
    a464:	d006      	beq.n	a474 <_svfiprintf_r+0x140>
    a466:	2340      	movs	r3, #64	; 0x40
    a468:	1b80      	subs	r0, r0, r6
    a46a:	4083      	lsls	r3, r0
    a46c:	682a      	ldr	r2, [r5, #0]
    a46e:	3401      	adds	r4, #1
    a470:	4313      	orrs	r3, r2
    a472:	602b      	str	r3, [r5, #0]
    a474:	7821      	ldrb	r1, [r4, #0]
    a476:	2206      	movs	r2, #6
    a478:	482d      	ldr	r0, [pc, #180]	; (a530 <_svfiprintf_r+0x1fc>)
    a47a:	1c66      	adds	r6, r4, #1
    a47c:	7629      	strb	r1, [r5, #24]
    a47e:	f000 fc09 	bl	ac94 <memchr>
    a482:	2800      	cmp	r0, #0
    a484:	d046      	beq.n	a514 <_svfiprintf_r+0x1e0>
    a486:	4b2b      	ldr	r3, [pc, #172]	; (a534 <_svfiprintf_r+0x200>)
    a488:	2b00      	cmp	r3, #0
    a48a:	d12f      	bne.n	a4ec <_svfiprintf_r+0x1b8>
    a48c:	6829      	ldr	r1, [r5, #0]
    a48e:	9b05      	ldr	r3, [sp, #20]
    a490:	2207      	movs	r2, #7
    a492:	05c9      	lsls	r1, r1, #23
    a494:	d528      	bpl.n	a4e8 <_svfiprintf_r+0x1b4>
    a496:	189b      	adds	r3, r3, r2
    a498:	4393      	bics	r3, r2
    a49a:	3308      	adds	r3, #8
    a49c:	9305      	str	r3, [sp, #20]
    a49e:	696b      	ldr	r3, [r5, #20]
    a4a0:	9a03      	ldr	r2, [sp, #12]
    a4a2:	189b      	adds	r3, r3, r2
    a4a4:	616b      	str	r3, [r5, #20]
    a4a6:	e767      	b.n	a378 <_svfiprintf_r+0x44>
    a4a8:	425b      	negs	r3, r3
    a4aa:	60eb      	str	r3, [r5, #12]
    a4ac:	2302      	movs	r3, #2
    a4ae:	430b      	orrs	r3, r1
    a4b0:	602b      	str	r3, [r5, #0]
    a4b2:	e7c0      	b.n	a436 <_svfiprintf_r+0x102>
    a4b4:	434b      	muls	r3, r1
    a4b6:	3401      	adds	r4, #1
    a4b8:	189b      	adds	r3, r3, r2
    a4ba:	2001      	movs	r0, #1
    a4bc:	e7a0      	b.n	a400 <_svfiprintf_r+0xcc>
    a4be:	2301      	movs	r3, #1
    a4c0:	425b      	negs	r3, r3
    a4c2:	e7c7      	b.n	a454 <_svfiprintf_r+0x120>
    a4c4:	2300      	movs	r3, #0
    a4c6:	0014      	movs	r4, r2
    a4c8:	200a      	movs	r0, #10
    a4ca:	001a      	movs	r2, r3
    a4cc:	606b      	str	r3, [r5, #4]
    a4ce:	7821      	ldrb	r1, [r4, #0]
    a4d0:	3930      	subs	r1, #48	; 0x30
    a4d2:	2909      	cmp	r1, #9
    a4d4:	d903      	bls.n	a4de <_svfiprintf_r+0x1aa>
    a4d6:	2b00      	cmp	r3, #0
    a4d8:	d0bd      	beq.n	a456 <_svfiprintf_r+0x122>
    a4da:	9207      	str	r2, [sp, #28]
    a4dc:	e7bb      	b.n	a456 <_svfiprintf_r+0x122>
    a4de:	4342      	muls	r2, r0
    a4e0:	3401      	adds	r4, #1
    a4e2:	1852      	adds	r2, r2, r1
    a4e4:	2301      	movs	r3, #1
    a4e6:	e7f2      	b.n	a4ce <_svfiprintf_r+0x19a>
    a4e8:	3307      	adds	r3, #7
    a4ea:	e7d5      	b.n	a498 <_svfiprintf_r+0x164>
    a4ec:	ab05      	add	r3, sp, #20
    a4ee:	9300      	str	r3, [sp, #0]
    a4f0:	003a      	movs	r2, r7
    a4f2:	4b11      	ldr	r3, [pc, #68]	; (a538 <_svfiprintf_r+0x204>)
    a4f4:	0029      	movs	r1, r5
    a4f6:	9802      	ldr	r0, [sp, #8]
    a4f8:	e000      	b.n	a4fc <_svfiprintf_r+0x1c8>
    a4fa:	bf00      	nop
    a4fc:	9003      	str	r0, [sp, #12]
    a4fe:	9b03      	ldr	r3, [sp, #12]
    a500:	3301      	adds	r3, #1
    a502:	d1cc      	bne.n	a49e <_svfiprintf_r+0x16a>
    a504:	89bb      	ldrh	r3, [r7, #12]
    a506:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a508:	065b      	lsls	r3, r3, #25
    a50a:	d400      	bmi.n	a50e <_svfiprintf_r+0x1da>
    a50c:	e729      	b.n	a362 <_svfiprintf_r+0x2e>
    a50e:	2001      	movs	r0, #1
    a510:	4240      	negs	r0, r0
    a512:	e726      	b.n	a362 <_svfiprintf_r+0x2e>
    a514:	ab05      	add	r3, sp, #20
    a516:	9300      	str	r3, [sp, #0]
    a518:	003a      	movs	r2, r7
    a51a:	4b07      	ldr	r3, [pc, #28]	; (a538 <_svfiprintf_r+0x204>)
    a51c:	0029      	movs	r1, r5
    a51e:	9802      	ldr	r0, [sp, #8]
    a520:	f000 f9be 	bl	a8a0 <_printf_i>
    a524:	e7ea      	b.n	a4fc <_svfiprintf_r+0x1c8>
    a526:	46c0      	nop			; (mov r8, r8)
    a528:	0000c1b8 	.word	0x0000c1b8
    a52c:	0000c1be 	.word	0x0000c1be
    a530:	0000c1c2 	.word	0x0000c1c2
    a534:	00000000 	.word	0x00000000
    a538:	0000a271 	.word	0x0000a271

0000a53c <__sfputc_r>:
    a53c:	6893      	ldr	r3, [r2, #8]
    a53e:	b510      	push	{r4, lr}
    a540:	3b01      	subs	r3, #1
    a542:	6093      	str	r3, [r2, #8]
    a544:	2b00      	cmp	r3, #0
    a546:	da05      	bge.n	a554 <__sfputc_r+0x18>
    a548:	6994      	ldr	r4, [r2, #24]
    a54a:	42a3      	cmp	r3, r4
    a54c:	db08      	blt.n	a560 <__sfputc_r+0x24>
    a54e:	b2cb      	uxtb	r3, r1
    a550:	2b0a      	cmp	r3, #10
    a552:	d005      	beq.n	a560 <__sfputc_r+0x24>
    a554:	6813      	ldr	r3, [r2, #0]
    a556:	1c58      	adds	r0, r3, #1
    a558:	6010      	str	r0, [r2, #0]
    a55a:	7019      	strb	r1, [r3, #0]
    a55c:	b2c8      	uxtb	r0, r1
    a55e:	bd10      	pop	{r4, pc}
    a560:	f7ff fbc4 	bl	9cec <__swbuf_r>
    a564:	e7fb      	b.n	a55e <__sfputc_r+0x22>

0000a566 <__sfputs_r>:
    a566:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a568:	0006      	movs	r6, r0
    a56a:	000f      	movs	r7, r1
    a56c:	0014      	movs	r4, r2
    a56e:	18d5      	adds	r5, r2, r3
    a570:	42ac      	cmp	r4, r5
    a572:	d101      	bne.n	a578 <__sfputs_r+0x12>
    a574:	2000      	movs	r0, #0
    a576:	e007      	b.n	a588 <__sfputs_r+0x22>
    a578:	7821      	ldrb	r1, [r4, #0]
    a57a:	003a      	movs	r2, r7
    a57c:	0030      	movs	r0, r6
    a57e:	f7ff ffdd 	bl	a53c <__sfputc_r>
    a582:	3401      	adds	r4, #1
    a584:	1c43      	adds	r3, r0, #1
    a586:	d1f3      	bne.n	a570 <__sfputs_r+0xa>
    a588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000a58c <_vfiprintf_r>:
    a58c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a58e:	b09f      	sub	sp, #124	; 0x7c
    a590:	0006      	movs	r6, r0
    a592:	000f      	movs	r7, r1
    a594:	0014      	movs	r4, r2
    a596:	9305      	str	r3, [sp, #20]
    a598:	2800      	cmp	r0, #0
    a59a:	d004      	beq.n	a5a6 <_vfiprintf_r+0x1a>
    a59c:	6983      	ldr	r3, [r0, #24]
    a59e:	2b00      	cmp	r3, #0
    a5a0:	d101      	bne.n	a5a6 <_vfiprintf_r+0x1a>
    a5a2:	f7ff fd67 	bl	a074 <__sinit>
    a5a6:	4b7f      	ldr	r3, [pc, #508]	; (a7a4 <_vfiprintf_r+0x218>)
    a5a8:	429f      	cmp	r7, r3
    a5aa:	d15c      	bne.n	a666 <_vfiprintf_r+0xda>
    a5ac:	6877      	ldr	r7, [r6, #4]
    a5ae:	89bb      	ldrh	r3, [r7, #12]
    a5b0:	071b      	lsls	r3, r3, #28
    a5b2:	d562      	bpl.n	a67a <_vfiprintf_r+0xee>
    a5b4:	693b      	ldr	r3, [r7, #16]
    a5b6:	2b00      	cmp	r3, #0
    a5b8:	d05f      	beq.n	a67a <_vfiprintf_r+0xee>
    a5ba:	2300      	movs	r3, #0
    a5bc:	ad06      	add	r5, sp, #24
    a5be:	616b      	str	r3, [r5, #20]
    a5c0:	3320      	adds	r3, #32
    a5c2:	766b      	strb	r3, [r5, #25]
    a5c4:	3310      	adds	r3, #16
    a5c6:	76ab      	strb	r3, [r5, #26]
    a5c8:	9402      	str	r4, [sp, #8]
    a5ca:	9c02      	ldr	r4, [sp, #8]
    a5cc:	7823      	ldrb	r3, [r4, #0]
    a5ce:	2b00      	cmp	r3, #0
    a5d0:	d15d      	bne.n	a68e <_vfiprintf_r+0x102>
    a5d2:	9b02      	ldr	r3, [sp, #8]
    a5d4:	1ae3      	subs	r3, r4, r3
    a5d6:	9304      	str	r3, [sp, #16]
    a5d8:	d00d      	beq.n	a5f6 <_vfiprintf_r+0x6a>
    a5da:	9b04      	ldr	r3, [sp, #16]
    a5dc:	9a02      	ldr	r2, [sp, #8]
    a5de:	0039      	movs	r1, r7
    a5e0:	0030      	movs	r0, r6
    a5e2:	f7ff ffc0 	bl	a566 <__sfputs_r>
    a5e6:	1c43      	adds	r3, r0, #1
    a5e8:	d100      	bne.n	a5ec <_vfiprintf_r+0x60>
    a5ea:	e0cc      	b.n	a786 <_vfiprintf_r+0x1fa>
    a5ec:	696a      	ldr	r2, [r5, #20]
    a5ee:	9b04      	ldr	r3, [sp, #16]
    a5f0:	4694      	mov	ip, r2
    a5f2:	4463      	add	r3, ip
    a5f4:	616b      	str	r3, [r5, #20]
    a5f6:	7823      	ldrb	r3, [r4, #0]
    a5f8:	2b00      	cmp	r3, #0
    a5fa:	d100      	bne.n	a5fe <_vfiprintf_r+0x72>
    a5fc:	e0c3      	b.n	a786 <_vfiprintf_r+0x1fa>
    a5fe:	2201      	movs	r2, #1
    a600:	2300      	movs	r3, #0
    a602:	4252      	negs	r2, r2
    a604:	606a      	str	r2, [r5, #4]
    a606:	a902      	add	r1, sp, #8
    a608:	3254      	adds	r2, #84	; 0x54
    a60a:	1852      	adds	r2, r2, r1
    a60c:	3401      	adds	r4, #1
    a60e:	602b      	str	r3, [r5, #0]
    a610:	60eb      	str	r3, [r5, #12]
    a612:	60ab      	str	r3, [r5, #8]
    a614:	7013      	strb	r3, [r2, #0]
    a616:	65ab      	str	r3, [r5, #88]	; 0x58
    a618:	7821      	ldrb	r1, [r4, #0]
    a61a:	2205      	movs	r2, #5
    a61c:	4862      	ldr	r0, [pc, #392]	; (a7a8 <_vfiprintf_r+0x21c>)
    a61e:	f000 fb39 	bl	ac94 <memchr>
    a622:	1c63      	adds	r3, r4, #1
    a624:	469c      	mov	ip, r3
    a626:	2800      	cmp	r0, #0
    a628:	d135      	bne.n	a696 <_vfiprintf_r+0x10a>
    a62a:	6829      	ldr	r1, [r5, #0]
    a62c:	06cb      	lsls	r3, r1, #27
    a62e:	d504      	bpl.n	a63a <_vfiprintf_r+0xae>
    a630:	2353      	movs	r3, #83	; 0x53
    a632:	aa02      	add	r2, sp, #8
    a634:	3020      	adds	r0, #32
    a636:	189b      	adds	r3, r3, r2
    a638:	7018      	strb	r0, [r3, #0]
    a63a:	070b      	lsls	r3, r1, #28
    a63c:	d504      	bpl.n	a648 <_vfiprintf_r+0xbc>
    a63e:	2353      	movs	r3, #83	; 0x53
    a640:	202b      	movs	r0, #43	; 0x2b
    a642:	aa02      	add	r2, sp, #8
    a644:	189b      	adds	r3, r3, r2
    a646:	7018      	strb	r0, [r3, #0]
    a648:	7823      	ldrb	r3, [r4, #0]
    a64a:	2b2a      	cmp	r3, #42	; 0x2a
    a64c:	d02c      	beq.n	a6a8 <_vfiprintf_r+0x11c>
    a64e:	2000      	movs	r0, #0
    a650:	210a      	movs	r1, #10
    a652:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a654:	7822      	ldrb	r2, [r4, #0]
    a656:	3a30      	subs	r2, #48	; 0x30
    a658:	2a09      	cmp	r2, #9
    a65a:	d800      	bhi.n	a65e <_vfiprintf_r+0xd2>
    a65c:	e06b      	b.n	a736 <_vfiprintf_r+0x1aa>
    a65e:	2800      	cmp	r0, #0
    a660:	d02a      	beq.n	a6b8 <_vfiprintf_r+0x12c>
    a662:	9309      	str	r3, [sp, #36]	; 0x24
    a664:	e028      	b.n	a6b8 <_vfiprintf_r+0x12c>
    a666:	4b51      	ldr	r3, [pc, #324]	; (a7ac <_vfiprintf_r+0x220>)
    a668:	429f      	cmp	r7, r3
    a66a:	d101      	bne.n	a670 <_vfiprintf_r+0xe4>
    a66c:	68b7      	ldr	r7, [r6, #8]
    a66e:	e79e      	b.n	a5ae <_vfiprintf_r+0x22>
    a670:	4b4f      	ldr	r3, [pc, #316]	; (a7b0 <_vfiprintf_r+0x224>)
    a672:	429f      	cmp	r7, r3
    a674:	d19b      	bne.n	a5ae <_vfiprintf_r+0x22>
    a676:	68f7      	ldr	r7, [r6, #12]
    a678:	e799      	b.n	a5ae <_vfiprintf_r+0x22>
    a67a:	0039      	movs	r1, r7
    a67c:	0030      	movs	r0, r6
    a67e:	f7ff fb8b 	bl	9d98 <__swsetup_r>
    a682:	2800      	cmp	r0, #0
    a684:	d099      	beq.n	a5ba <_vfiprintf_r+0x2e>
    a686:	2001      	movs	r0, #1
    a688:	4240      	negs	r0, r0
    a68a:	b01f      	add	sp, #124	; 0x7c
    a68c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a68e:	2b25      	cmp	r3, #37	; 0x25
    a690:	d09f      	beq.n	a5d2 <_vfiprintf_r+0x46>
    a692:	3401      	adds	r4, #1
    a694:	e79a      	b.n	a5cc <_vfiprintf_r+0x40>
    a696:	4b44      	ldr	r3, [pc, #272]	; (a7a8 <_vfiprintf_r+0x21c>)
    a698:	6829      	ldr	r1, [r5, #0]
    a69a:	1ac0      	subs	r0, r0, r3
    a69c:	2301      	movs	r3, #1
    a69e:	4083      	lsls	r3, r0
    a6a0:	430b      	orrs	r3, r1
    a6a2:	602b      	str	r3, [r5, #0]
    a6a4:	4664      	mov	r4, ip
    a6a6:	e7b7      	b.n	a618 <_vfiprintf_r+0x8c>
    a6a8:	9b05      	ldr	r3, [sp, #20]
    a6aa:	1d18      	adds	r0, r3, #4
    a6ac:	681b      	ldr	r3, [r3, #0]
    a6ae:	9005      	str	r0, [sp, #20]
    a6b0:	2b00      	cmp	r3, #0
    a6b2:	db3a      	blt.n	a72a <_vfiprintf_r+0x19e>
    a6b4:	9309      	str	r3, [sp, #36]	; 0x24
    a6b6:	4664      	mov	r4, ip
    a6b8:	7823      	ldrb	r3, [r4, #0]
    a6ba:	2b2e      	cmp	r3, #46	; 0x2e
    a6bc:	d10b      	bne.n	a6d6 <_vfiprintf_r+0x14a>
    a6be:	7863      	ldrb	r3, [r4, #1]
    a6c0:	1c62      	adds	r2, r4, #1
    a6c2:	2b2a      	cmp	r3, #42	; 0x2a
    a6c4:	d13f      	bne.n	a746 <_vfiprintf_r+0x1ba>
    a6c6:	9b05      	ldr	r3, [sp, #20]
    a6c8:	3402      	adds	r4, #2
    a6ca:	1d1a      	adds	r2, r3, #4
    a6cc:	681b      	ldr	r3, [r3, #0]
    a6ce:	9205      	str	r2, [sp, #20]
    a6d0:	2b00      	cmp	r3, #0
    a6d2:	db35      	blt.n	a740 <_vfiprintf_r+0x1b4>
    a6d4:	9307      	str	r3, [sp, #28]
    a6d6:	7821      	ldrb	r1, [r4, #0]
    a6d8:	2203      	movs	r2, #3
    a6da:	4836      	ldr	r0, [pc, #216]	; (a7b4 <_vfiprintf_r+0x228>)
    a6dc:	f000 fada 	bl	ac94 <memchr>
    a6e0:	2800      	cmp	r0, #0
    a6e2:	d007      	beq.n	a6f4 <_vfiprintf_r+0x168>
    a6e4:	4b33      	ldr	r3, [pc, #204]	; (a7b4 <_vfiprintf_r+0x228>)
    a6e6:	682a      	ldr	r2, [r5, #0]
    a6e8:	1ac0      	subs	r0, r0, r3
    a6ea:	2340      	movs	r3, #64	; 0x40
    a6ec:	4083      	lsls	r3, r0
    a6ee:	4313      	orrs	r3, r2
    a6f0:	602b      	str	r3, [r5, #0]
    a6f2:	3401      	adds	r4, #1
    a6f4:	7821      	ldrb	r1, [r4, #0]
    a6f6:	1c63      	adds	r3, r4, #1
    a6f8:	2206      	movs	r2, #6
    a6fa:	482f      	ldr	r0, [pc, #188]	; (a7b8 <_vfiprintf_r+0x22c>)
    a6fc:	9302      	str	r3, [sp, #8]
    a6fe:	7629      	strb	r1, [r5, #24]
    a700:	f000 fac8 	bl	ac94 <memchr>
    a704:	2800      	cmp	r0, #0
    a706:	d044      	beq.n	a792 <_vfiprintf_r+0x206>
    a708:	4b2c      	ldr	r3, [pc, #176]	; (a7bc <_vfiprintf_r+0x230>)
    a70a:	2b00      	cmp	r3, #0
    a70c:	d12f      	bne.n	a76e <_vfiprintf_r+0x1e2>
    a70e:	6829      	ldr	r1, [r5, #0]
    a710:	9b05      	ldr	r3, [sp, #20]
    a712:	2207      	movs	r2, #7
    a714:	05c9      	lsls	r1, r1, #23
    a716:	d528      	bpl.n	a76a <_vfiprintf_r+0x1de>
    a718:	189b      	adds	r3, r3, r2
    a71a:	4393      	bics	r3, r2
    a71c:	3308      	adds	r3, #8
    a71e:	9305      	str	r3, [sp, #20]
    a720:	696b      	ldr	r3, [r5, #20]
    a722:	9a03      	ldr	r2, [sp, #12]
    a724:	189b      	adds	r3, r3, r2
    a726:	616b      	str	r3, [r5, #20]
    a728:	e74f      	b.n	a5ca <_vfiprintf_r+0x3e>
    a72a:	425b      	negs	r3, r3
    a72c:	60eb      	str	r3, [r5, #12]
    a72e:	2302      	movs	r3, #2
    a730:	430b      	orrs	r3, r1
    a732:	602b      	str	r3, [r5, #0]
    a734:	e7bf      	b.n	a6b6 <_vfiprintf_r+0x12a>
    a736:	434b      	muls	r3, r1
    a738:	3401      	adds	r4, #1
    a73a:	189b      	adds	r3, r3, r2
    a73c:	2001      	movs	r0, #1
    a73e:	e789      	b.n	a654 <_vfiprintf_r+0xc8>
    a740:	2301      	movs	r3, #1
    a742:	425b      	negs	r3, r3
    a744:	e7c6      	b.n	a6d4 <_vfiprintf_r+0x148>
    a746:	2300      	movs	r3, #0
    a748:	0014      	movs	r4, r2
    a74a:	200a      	movs	r0, #10
    a74c:	001a      	movs	r2, r3
    a74e:	606b      	str	r3, [r5, #4]
    a750:	7821      	ldrb	r1, [r4, #0]
    a752:	3930      	subs	r1, #48	; 0x30
    a754:	2909      	cmp	r1, #9
    a756:	d903      	bls.n	a760 <_vfiprintf_r+0x1d4>
    a758:	2b00      	cmp	r3, #0
    a75a:	d0bc      	beq.n	a6d6 <_vfiprintf_r+0x14a>
    a75c:	9207      	str	r2, [sp, #28]
    a75e:	e7ba      	b.n	a6d6 <_vfiprintf_r+0x14a>
    a760:	4342      	muls	r2, r0
    a762:	3401      	adds	r4, #1
    a764:	1852      	adds	r2, r2, r1
    a766:	2301      	movs	r3, #1
    a768:	e7f2      	b.n	a750 <_vfiprintf_r+0x1c4>
    a76a:	3307      	adds	r3, #7
    a76c:	e7d5      	b.n	a71a <_vfiprintf_r+0x18e>
    a76e:	ab05      	add	r3, sp, #20
    a770:	9300      	str	r3, [sp, #0]
    a772:	003a      	movs	r2, r7
    a774:	4b12      	ldr	r3, [pc, #72]	; (a7c0 <_vfiprintf_r+0x234>)
    a776:	0029      	movs	r1, r5
    a778:	0030      	movs	r0, r6
    a77a:	e000      	b.n	a77e <_vfiprintf_r+0x1f2>
    a77c:	bf00      	nop
    a77e:	9003      	str	r0, [sp, #12]
    a780:	9b03      	ldr	r3, [sp, #12]
    a782:	3301      	adds	r3, #1
    a784:	d1cc      	bne.n	a720 <_vfiprintf_r+0x194>
    a786:	89bb      	ldrh	r3, [r7, #12]
    a788:	065b      	lsls	r3, r3, #25
    a78a:	d500      	bpl.n	a78e <_vfiprintf_r+0x202>
    a78c:	e77b      	b.n	a686 <_vfiprintf_r+0xfa>
    a78e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a790:	e77b      	b.n	a68a <_vfiprintf_r+0xfe>
    a792:	ab05      	add	r3, sp, #20
    a794:	9300      	str	r3, [sp, #0]
    a796:	003a      	movs	r2, r7
    a798:	4b09      	ldr	r3, [pc, #36]	; (a7c0 <_vfiprintf_r+0x234>)
    a79a:	0029      	movs	r1, r5
    a79c:	0030      	movs	r0, r6
    a79e:	f000 f87f 	bl	a8a0 <_printf_i>
    a7a2:	e7ec      	b.n	a77e <_vfiprintf_r+0x1f2>
    a7a4:	0000c178 	.word	0x0000c178
    a7a8:	0000c1b8 	.word	0x0000c1b8
    a7ac:	0000c198 	.word	0x0000c198
    a7b0:	0000c158 	.word	0x0000c158
    a7b4:	0000c1be 	.word	0x0000c1be
    a7b8:	0000c1c2 	.word	0x0000c1c2
    a7bc:	00000000 	.word	0x00000000
    a7c0:	0000a567 	.word	0x0000a567

0000a7c4 <_printf_common>:
    a7c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a7c6:	0015      	movs	r5, r2
    a7c8:	9301      	str	r3, [sp, #4]
    a7ca:	688a      	ldr	r2, [r1, #8]
    a7cc:	690b      	ldr	r3, [r1, #16]
    a7ce:	9000      	str	r0, [sp, #0]
    a7d0:	000c      	movs	r4, r1
    a7d2:	4293      	cmp	r3, r2
    a7d4:	da00      	bge.n	a7d8 <_printf_common+0x14>
    a7d6:	0013      	movs	r3, r2
    a7d8:	0022      	movs	r2, r4
    a7da:	602b      	str	r3, [r5, #0]
    a7dc:	3243      	adds	r2, #67	; 0x43
    a7de:	7812      	ldrb	r2, [r2, #0]
    a7e0:	2a00      	cmp	r2, #0
    a7e2:	d001      	beq.n	a7e8 <_printf_common+0x24>
    a7e4:	3301      	adds	r3, #1
    a7e6:	602b      	str	r3, [r5, #0]
    a7e8:	6823      	ldr	r3, [r4, #0]
    a7ea:	069b      	lsls	r3, r3, #26
    a7ec:	d502      	bpl.n	a7f4 <_printf_common+0x30>
    a7ee:	682b      	ldr	r3, [r5, #0]
    a7f0:	3302      	adds	r3, #2
    a7f2:	602b      	str	r3, [r5, #0]
    a7f4:	2706      	movs	r7, #6
    a7f6:	6823      	ldr	r3, [r4, #0]
    a7f8:	401f      	ands	r7, r3
    a7fa:	d027      	beq.n	a84c <_printf_common+0x88>
    a7fc:	0023      	movs	r3, r4
    a7fe:	3343      	adds	r3, #67	; 0x43
    a800:	781b      	ldrb	r3, [r3, #0]
    a802:	1e5a      	subs	r2, r3, #1
    a804:	4193      	sbcs	r3, r2
    a806:	6822      	ldr	r2, [r4, #0]
    a808:	0692      	lsls	r2, r2, #26
    a80a:	d430      	bmi.n	a86e <_printf_common+0xaa>
    a80c:	0022      	movs	r2, r4
    a80e:	9901      	ldr	r1, [sp, #4]
    a810:	3243      	adds	r2, #67	; 0x43
    a812:	9800      	ldr	r0, [sp, #0]
    a814:	9e08      	ldr	r6, [sp, #32]
    a816:	47b0      	blx	r6
    a818:	1c43      	adds	r3, r0, #1
    a81a:	d025      	beq.n	a868 <_printf_common+0xa4>
    a81c:	2306      	movs	r3, #6
    a81e:	6820      	ldr	r0, [r4, #0]
    a820:	682a      	ldr	r2, [r5, #0]
    a822:	68e1      	ldr	r1, [r4, #12]
    a824:	4003      	ands	r3, r0
    a826:	2500      	movs	r5, #0
    a828:	2b04      	cmp	r3, #4
    a82a:	d103      	bne.n	a834 <_printf_common+0x70>
    a82c:	1a8d      	subs	r5, r1, r2
    a82e:	43eb      	mvns	r3, r5
    a830:	17db      	asrs	r3, r3, #31
    a832:	401d      	ands	r5, r3
    a834:	68a3      	ldr	r3, [r4, #8]
    a836:	6922      	ldr	r2, [r4, #16]
    a838:	4293      	cmp	r3, r2
    a83a:	dd01      	ble.n	a840 <_printf_common+0x7c>
    a83c:	1a9b      	subs	r3, r3, r2
    a83e:	18ed      	adds	r5, r5, r3
    a840:	2700      	movs	r7, #0
    a842:	42bd      	cmp	r5, r7
    a844:	d120      	bne.n	a888 <_printf_common+0xc4>
    a846:	2000      	movs	r0, #0
    a848:	e010      	b.n	a86c <_printf_common+0xa8>
    a84a:	3701      	adds	r7, #1
    a84c:	68e3      	ldr	r3, [r4, #12]
    a84e:	682a      	ldr	r2, [r5, #0]
    a850:	1a9b      	subs	r3, r3, r2
    a852:	429f      	cmp	r7, r3
    a854:	dad2      	bge.n	a7fc <_printf_common+0x38>
    a856:	0022      	movs	r2, r4
    a858:	2301      	movs	r3, #1
    a85a:	3219      	adds	r2, #25
    a85c:	9901      	ldr	r1, [sp, #4]
    a85e:	9800      	ldr	r0, [sp, #0]
    a860:	9e08      	ldr	r6, [sp, #32]
    a862:	47b0      	blx	r6
    a864:	1c43      	adds	r3, r0, #1
    a866:	d1f0      	bne.n	a84a <_printf_common+0x86>
    a868:	2001      	movs	r0, #1
    a86a:	4240      	negs	r0, r0
    a86c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    a86e:	2030      	movs	r0, #48	; 0x30
    a870:	18e1      	adds	r1, r4, r3
    a872:	3143      	adds	r1, #67	; 0x43
    a874:	7008      	strb	r0, [r1, #0]
    a876:	0021      	movs	r1, r4
    a878:	1c5a      	adds	r2, r3, #1
    a87a:	3145      	adds	r1, #69	; 0x45
    a87c:	7809      	ldrb	r1, [r1, #0]
    a87e:	18a2      	adds	r2, r4, r2
    a880:	3243      	adds	r2, #67	; 0x43
    a882:	3302      	adds	r3, #2
    a884:	7011      	strb	r1, [r2, #0]
    a886:	e7c1      	b.n	a80c <_printf_common+0x48>
    a888:	0022      	movs	r2, r4
    a88a:	2301      	movs	r3, #1
    a88c:	321a      	adds	r2, #26
    a88e:	9901      	ldr	r1, [sp, #4]
    a890:	9800      	ldr	r0, [sp, #0]
    a892:	9e08      	ldr	r6, [sp, #32]
    a894:	47b0      	blx	r6
    a896:	1c43      	adds	r3, r0, #1
    a898:	d0e6      	beq.n	a868 <_printf_common+0xa4>
    a89a:	3701      	adds	r7, #1
    a89c:	e7d1      	b.n	a842 <_printf_common+0x7e>
	...

0000a8a0 <_printf_i>:
    a8a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a8a2:	b08b      	sub	sp, #44	; 0x2c
    a8a4:	9206      	str	r2, [sp, #24]
    a8a6:	000a      	movs	r2, r1
    a8a8:	3243      	adds	r2, #67	; 0x43
    a8aa:	9307      	str	r3, [sp, #28]
    a8ac:	9005      	str	r0, [sp, #20]
    a8ae:	9204      	str	r2, [sp, #16]
    a8b0:	7e0a      	ldrb	r2, [r1, #24]
    a8b2:	000c      	movs	r4, r1
    a8b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a8b6:	2a6e      	cmp	r2, #110	; 0x6e
    a8b8:	d100      	bne.n	a8bc <_printf_i+0x1c>
    a8ba:	e08f      	b.n	a9dc <_printf_i+0x13c>
    a8bc:	d817      	bhi.n	a8ee <_printf_i+0x4e>
    a8be:	2a63      	cmp	r2, #99	; 0x63
    a8c0:	d02c      	beq.n	a91c <_printf_i+0x7c>
    a8c2:	d808      	bhi.n	a8d6 <_printf_i+0x36>
    a8c4:	2a00      	cmp	r2, #0
    a8c6:	d100      	bne.n	a8ca <_printf_i+0x2a>
    a8c8:	e099      	b.n	a9fe <_printf_i+0x15e>
    a8ca:	2a58      	cmp	r2, #88	; 0x58
    a8cc:	d054      	beq.n	a978 <_printf_i+0xd8>
    a8ce:	0026      	movs	r6, r4
    a8d0:	3642      	adds	r6, #66	; 0x42
    a8d2:	7032      	strb	r2, [r6, #0]
    a8d4:	e029      	b.n	a92a <_printf_i+0x8a>
    a8d6:	2a64      	cmp	r2, #100	; 0x64
    a8d8:	d001      	beq.n	a8de <_printf_i+0x3e>
    a8da:	2a69      	cmp	r2, #105	; 0x69
    a8dc:	d1f7      	bne.n	a8ce <_printf_i+0x2e>
    a8de:	6821      	ldr	r1, [r4, #0]
    a8e0:	681a      	ldr	r2, [r3, #0]
    a8e2:	0608      	lsls	r0, r1, #24
    a8e4:	d523      	bpl.n	a92e <_printf_i+0x8e>
    a8e6:	1d11      	adds	r1, r2, #4
    a8e8:	6019      	str	r1, [r3, #0]
    a8ea:	6815      	ldr	r5, [r2, #0]
    a8ec:	e025      	b.n	a93a <_printf_i+0x9a>
    a8ee:	2a73      	cmp	r2, #115	; 0x73
    a8f0:	d100      	bne.n	a8f4 <_printf_i+0x54>
    a8f2:	e088      	b.n	aa06 <_printf_i+0x166>
    a8f4:	d808      	bhi.n	a908 <_printf_i+0x68>
    a8f6:	2a6f      	cmp	r2, #111	; 0x6f
    a8f8:	d029      	beq.n	a94e <_printf_i+0xae>
    a8fa:	2a70      	cmp	r2, #112	; 0x70
    a8fc:	d1e7      	bne.n	a8ce <_printf_i+0x2e>
    a8fe:	2220      	movs	r2, #32
    a900:	6809      	ldr	r1, [r1, #0]
    a902:	430a      	orrs	r2, r1
    a904:	6022      	str	r2, [r4, #0]
    a906:	e003      	b.n	a910 <_printf_i+0x70>
    a908:	2a75      	cmp	r2, #117	; 0x75
    a90a:	d020      	beq.n	a94e <_printf_i+0xae>
    a90c:	2a78      	cmp	r2, #120	; 0x78
    a90e:	d1de      	bne.n	a8ce <_printf_i+0x2e>
    a910:	0022      	movs	r2, r4
    a912:	2178      	movs	r1, #120	; 0x78
    a914:	3245      	adds	r2, #69	; 0x45
    a916:	7011      	strb	r1, [r2, #0]
    a918:	4a6c      	ldr	r2, [pc, #432]	; (aacc <_printf_i+0x22c>)
    a91a:	e030      	b.n	a97e <_printf_i+0xde>
    a91c:	000e      	movs	r6, r1
    a91e:	681a      	ldr	r2, [r3, #0]
    a920:	3642      	adds	r6, #66	; 0x42
    a922:	1d11      	adds	r1, r2, #4
    a924:	6019      	str	r1, [r3, #0]
    a926:	6813      	ldr	r3, [r2, #0]
    a928:	7033      	strb	r3, [r6, #0]
    a92a:	2301      	movs	r3, #1
    a92c:	e079      	b.n	aa22 <_printf_i+0x182>
    a92e:	0649      	lsls	r1, r1, #25
    a930:	d5d9      	bpl.n	a8e6 <_printf_i+0x46>
    a932:	1d11      	adds	r1, r2, #4
    a934:	6019      	str	r1, [r3, #0]
    a936:	2300      	movs	r3, #0
    a938:	5ed5      	ldrsh	r5, [r2, r3]
    a93a:	2d00      	cmp	r5, #0
    a93c:	da03      	bge.n	a946 <_printf_i+0xa6>
    a93e:	232d      	movs	r3, #45	; 0x2d
    a940:	9a04      	ldr	r2, [sp, #16]
    a942:	426d      	negs	r5, r5
    a944:	7013      	strb	r3, [r2, #0]
    a946:	4b62      	ldr	r3, [pc, #392]	; (aad0 <_printf_i+0x230>)
    a948:	270a      	movs	r7, #10
    a94a:	9303      	str	r3, [sp, #12]
    a94c:	e02f      	b.n	a9ae <_printf_i+0x10e>
    a94e:	6820      	ldr	r0, [r4, #0]
    a950:	6819      	ldr	r1, [r3, #0]
    a952:	0605      	lsls	r5, r0, #24
    a954:	d503      	bpl.n	a95e <_printf_i+0xbe>
    a956:	1d08      	adds	r0, r1, #4
    a958:	6018      	str	r0, [r3, #0]
    a95a:	680d      	ldr	r5, [r1, #0]
    a95c:	e005      	b.n	a96a <_printf_i+0xca>
    a95e:	0640      	lsls	r0, r0, #25
    a960:	d5f9      	bpl.n	a956 <_printf_i+0xb6>
    a962:	680d      	ldr	r5, [r1, #0]
    a964:	1d08      	adds	r0, r1, #4
    a966:	6018      	str	r0, [r3, #0]
    a968:	b2ad      	uxth	r5, r5
    a96a:	4b59      	ldr	r3, [pc, #356]	; (aad0 <_printf_i+0x230>)
    a96c:	2708      	movs	r7, #8
    a96e:	9303      	str	r3, [sp, #12]
    a970:	2a6f      	cmp	r2, #111	; 0x6f
    a972:	d018      	beq.n	a9a6 <_printf_i+0x106>
    a974:	270a      	movs	r7, #10
    a976:	e016      	b.n	a9a6 <_printf_i+0x106>
    a978:	3145      	adds	r1, #69	; 0x45
    a97a:	700a      	strb	r2, [r1, #0]
    a97c:	4a54      	ldr	r2, [pc, #336]	; (aad0 <_printf_i+0x230>)
    a97e:	9203      	str	r2, [sp, #12]
    a980:	681a      	ldr	r2, [r3, #0]
    a982:	6821      	ldr	r1, [r4, #0]
    a984:	1d10      	adds	r0, r2, #4
    a986:	6018      	str	r0, [r3, #0]
    a988:	6815      	ldr	r5, [r2, #0]
    a98a:	0608      	lsls	r0, r1, #24
    a98c:	d522      	bpl.n	a9d4 <_printf_i+0x134>
    a98e:	07cb      	lsls	r3, r1, #31
    a990:	d502      	bpl.n	a998 <_printf_i+0xf8>
    a992:	2320      	movs	r3, #32
    a994:	4319      	orrs	r1, r3
    a996:	6021      	str	r1, [r4, #0]
    a998:	2710      	movs	r7, #16
    a99a:	2d00      	cmp	r5, #0
    a99c:	d103      	bne.n	a9a6 <_printf_i+0x106>
    a99e:	2320      	movs	r3, #32
    a9a0:	6822      	ldr	r2, [r4, #0]
    a9a2:	439a      	bics	r2, r3
    a9a4:	6022      	str	r2, [r4, #0]
    a9a6:	0023      	movs	r3, r4
    a9a8:	2200      	movs	r2, #0
    a9aa:	3343      	adds	r3, #67	; 0x43
    a9ac:	701a      	strb	r2, [r3, #0]
    a9ae:	6863      	ldr	r3, [r4, #4]
    a9b0:	60a3      	str	r3, [r4, #8]
    a9b2:	2b00      	cmp	r3, #0
    a9b4:	db5c      	blt.n	aa70 <_printf_i+0x1d0>
    a9b6:	2204      	movs	r2, #4
    a9b8:	6821      	ldr	r1, [r4, #0]
    a9ba:	4391      	bics	r1, r2
    a9bc:	6021      	str	r1, [r4, #0]
    a9be:	2d00      	cmp	r5, #0
    a9c0:	d158      	bne.n	aa74 <_printf_i+0x1d4>
    a9c2:	9e04      	ldr	r6, [sp, #16]
    a9c4:	2b00      	cmp	r3, #0
    a9c6:	d064      	beq.n	aa92 <_printf_i+0x1f2>
    a9c8:	0026      	movs	r6, r4
    a9ca:	9b03      	ldr	r3, [sp, #12]
    a9cc:	3642      	adds	r6, #66	; 0x42
    a9ce:	781b      	ldrb	r3, [r3, #0]
    a9d0:	7033      	strb	r3, [r6, #0]
    a9d2:	e05e      	b.n	aa92 <_printf_i+0x1f2>
    a9d4:	0648      	lsls	r0, r1, #25
    a9d6:	d5da      	bpl.n	a98e <_printf_i+0xee>
    a9d8:	b2ad      	uxth	r5, r5
    a9da:	e7d8      	b.n	a98e <_printf_i+0xee>
    a9dc:	6809      	ldr	r1, [r1, #0]
    a9de:	681a      	ldr	r2, [r3, #0]
    a9e0:	0608      	lsls	r0, r1, #24
    a9e2:	d505      	bpl.n	a9f0 <_printf_i+0x150>
    a9e4:	1d11      	adds	r1, r2, #4
    a9e6:	6019      	str	r1, [r3, #0]
    a9e8:	6813      	ldr	r3, [r2, #0]
    a9ea:	6962      	ldr	r2, [r4, #20]
    a9ec:	601a      	str	r2, [r3, #0]
    a9ee:	e006      	b.n	a9fe <_printf_i+0x15e>
    a9f0:	0649      	lsls	r1, r1, #25
    a9f2:	d5f7      	bpl.n	a9e4 <_printf_i+0x144>
    a9f4:	1d11      	adds	r1, r2, #4
    a9f6:	6019      	str	r1, [r3, #0]
    a9f8:	6813      	ldr	r3, [r2, #0]
    a9fa:	8aa2      	ldrh	r2, [r4, #20]
    a9fc:	801a      	strh	r2, [r3, #0]
    a9fe:	2300      	movs	r3, #0
    aa00:	9e04      	ldr	r6, [sp, #16]
    aa02:	6123      	str	r3, [r4, #16]
    aa04:	e054      	b.n	aab0 <_printf_i+0x210>
    aa06:	681a      	ldr	r2, [r3, #0]
    aa08:	1d11      	adds	r1, r2, #4
    aa0a:	6019      	str	r1, [r3, #0]
    aa0c:	6816      	ldr	r6, [r2, #0]
    aa0e:	2100      	movs	r1, #0
    aa10:	6862      	ldr	r2, [r4, #4]
    aa12:	0030      	movs	r0, r6
    aa14:	f000 f93e 	bl	ac94 <memchr>
    aa18:	2800      	cmp	r0, #0
    aa1a:	d001      	beq.n	aa20 <_printf_i+0x180>
    aa1c:	1b80      	subs	r0, r0, r6
    aa1e:	6060      	str	r0, [r4, #4]
    aa20:	6863      	ldr	r3, [r4, #4]
    aa22:	6123      	str	r3, [r4, #16]
    aa24:	2300      	movs	r3, #0
    aa26:	9a04      	ldr	r2, [sp, #16]
    aa28:	7013      	strb	r3, [r2, #0]
    aa2a:	e041      	b.n	aab0 <_printf_i+0x210>
    aa2c:	6923      	ldr	r3, [r4, #16]
    aa2e:	0032      	movs	r2, r6
    aa30:	9906      	ldr	r1, [sp, #24]
    aa32:	9805      	ldr	r0, [sp, #20]
    aa34:	9d07      	ldr	r5, [sp, #28]
    aa36:	47a8      	blx	r5
    aa38:	1c43      	adds	r3, r0, #1
    aa3a:	d043      	beq.n	aac4 <_printf_i+0x224>
    aa3c:	6823      	ldr	r3, [r4, #0]
    aa3e:	2500      	movs	r5, #0
    aa40:	079b      	lsls	r3, r3, #30
    aa42:	d40f      	bmi.n	aa64 <_printf_i+0x1c4>
    aa44:	9b09      	ldr	r3, [sp, #36]	; 0x24
    aa46:	68e0      	ldr	r0, [r4, #12]
    aa48:	4298      	cmp	r0, r3
    aa4a:	da3d      	bge.n	aac8 <_printf_i+0x228>
    aa4c:	0018      	movs	r0, r3
    aa4e:	e03b      	b.n	aac8 <_printf_i+0x228>
    aa50:	0022      	movs	r2, r4
    aa52:	2301      	movs	r3, #1
    aa54:	3219      	adds	r2, #25
    aa56:	9906      	ldr	r1, [sp, #24]
    aa58:	9805      	ldr	r0, [sp, #20]
    aa5a:	9e07      	ldr	r6, [sp, #28]
    aa5c:	47b0      	blx	r6
    aa5e:	1c43      	adds	r3, r0, #1
    aa60:	d030      	beq.n	aac4 <_printf_i+0x224>
    aa62:	3501      	adds	r5, #1
    aa64:	68e3      	ldr	r3, [r4, #12]
    aa66:	9a09      	ldr	r2, [sp, #36]	; 0x24
    aa68:	1a9b      	subs	r3, r3, r2
    aa6a:	429d      	cmp	r5, r3
    aa6c:	dbf0      	blt.n	aa50 <_printf_i+0x1b0>
    aa6e:	e7e9      	b.n	aa44 <_printf_i+0x1a4>
    aa70:	2d00      	cmp	r5, #0
    aa72:	d0a9      	beq.n	a9c8 <_printf_i+0x128>
    aa74:	9e04      	ldr	r6, [sp, #16]
    aa76:	0028      	movs	r0, r5
    aa78:	0039      	movs	r1, r7
    aa7a:	f7fd f913 	bl	7ca4 <__aeabi_uidivmod>
    aa7e:	9b03      	ldr	r3, [sp, #12]
    aa80:	3e01      	subs	r6, #1
    aa82:	5c5b      	ldrb	r3, [r3, r1]
    aa84:	0028      	movs	r0, r5
    aa86:	7033      	strb	r3, [r6, #0]
    aa88:	0039      	movs	r1, r7
    aa8a:	f7fd f885 	bl	7b98 <__udivsi3>
    aa8e:	1e05      	subs	r5, r0, #0
    aa90:	d1f1      	bne.n	aa76 <_printf_i+0x1d6>
    aa92:	2f08      	cmp	r7, #8
    aa94:	d109      	bne.n	aaaa <_printf_i+0x20a>
    aa96:	6823      	ldr	r3, [r4, #0]
    aa98:	07db      	lsls	r3, r3, #31
    aa9a:	d506      	bpl.n	aaaa <_printf_i+0x20a>
    aa9c:	6863      	ldr	r3, [r4, #4]
    aa9e:	6922      	ldr	r2, [r4, #16]
    aaa0:	4293      	cmp	r3, r2
    aaa2:	dc02      	bgt.n	aaaa <_printf_i+0x20a>
    aaa4:	2330      	movs	r3, #48	; 0x30
    aaa6:	3e01      	subs	r6, #1
    aaa8:	7033      	strb	r3, [r6, #0]
    aaaa:	9b04      	ldr	r3, [sp, #16]
    aaac:	1b9b      	subs	r3, r3, r6
    aaae:	6123      	str	r3, [r4, #16]
    aab0:	9b07      	ldr	r3, [sp, #28]
    aab2:	aa09      	add	r2, sp, #36	; 0x24
    aab4:	9300      	str	r3, [sp, #0]
    aab6:	0021      	movs	r1, r4
    aab8:	9b06      	ldr	r3, [sp, #24]
    aaba:	9805      	ldr	r0, [sp, #20]
    aabc:	f7ff fe82 	bl	a7c4 <_printf_common>
    aac0:	1c43      	adds	r3, r0, #1
    aac2:	d1b3      	bne.n	aa2c <_printf_i+0x18c>
    aac4:	2001      	movs	r0, #1
    aac6:	4240      	negs	r0, r0
    aac8:	b00b      	add	sp, #44	; 0x2c
    aaca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aacc:	0000c1da 	.word	0x0000c1da
    aad0:	0000c1c9 	.word	0x0000c1c9

0000aad4 <_putc_r>:
    aad4:	b570      	push	{r4, r5, r6, lr}
    aad6:	0006      	movs	r6, r0
    aad8:	000d      	movs	r5, r1
    aada:	0014      	movs	r4, r2
    aadc:	2800      	cmp	r0, #0
    aade:	d004      	beq.n	aaea <_putc_r+0x16>
    aae0:	6983      	ldr	r3, [r0, #24]
    aae2:	2b00      	cmp	r3, #0
    aae4:	d101      	bne.n	aaea <_putc_r+0x16>
    aae6:	f7ff fac5 	bl	a074 <__sinit>
    aaea:	4b12      	ldr	r3, [pc, #72]	; (ab34 <_putc_r+0x60>)
    aaec:	429c      	cmp	r4, r3
    aaee:	d111      	bne.n	ab14 <_putc_r+0x40>
    aaf0:	6874      	ldr	r4, [r6, #4]
    aaf2:	68a3      	ldr	r3, [r4, #8]
    aaf4:	3b01      	subs	r3, #1
    aaf6:	60a3      	str	r3, [r4, #8]
    aaf8:	2b00      	cmp	r3, #0
    aafa:	da05      	bge.n	ab08 <_putc_r+0x34>
    aafc:	69a2      	ldr	r2, [r4, #24]
    aafe:	4293      	cmp	r3, r2
    ab00:	db12      	blt.n	ab28 <_putc_r+0x54>
    ab02:	b2eb      	uxtb	r3, r5
    ab04:	2b0a      	cmp	r3, #10
    ab06:	d00f      	beq.n	ab28 <_putc_r+0x54>
    ab08:	6823      	ldr	r3, [r4, #0]
    ab0a:	b2e8      	uxtb	r0, r5
    ab0c:	1c5a      	adds	r2, r3, #1
    ab0e:	6022      	str	r2, [r4, #0]
    ab10:	701d      	strb	r5, [r3, #0]
    ab12:	bd70      	pop	{r4, r5, r6, pc}
    ab14:	4b08      	ldr	r3, [pc, #32]	; (ab38 <_putc_r+0x64>)
    ab16:	429c      	cmp	r4, r3
    ab18:	d101      	bne.n	ab1e <_putc_r+0x4a>
    ab1a:	68b4      	ldr	r4, [r6, #8]
    ab1c:	e7e9      	b.n	aaf2 <_putc_r+0x1e>
    ab1e:	4b07      	ldr	r3, [pc, #28]	; (ab3c <_putc_r+0x68>)
    ab20:	429c      	cmp	r4, r3
    ab22:	d1e6      	bne.n	aaf2 <_putc_r+0x1e>
    ab24:	68f4      	ldr	r4, [r6, #12]
    ab26:	e7e4      	b.n	aaf2 <_putc_r+0x1e>
    ab28:	0022      	movs	r2, r4
    ab2a:	0029      	movs	r1, r5
    ab2c:	0030      	movs	r0, r6
    ab2e:	f7ff f8dd 	bl	9cec <__swbuf_r>
    ab32:	e7ee      	b.n	ab12 <_putc_r+0x3e>
    ab34:	0000c178 	.word	0x0000c178
    ab38:	0000c198 	.word	0x0000c198
    ab3c:	0000c158 	.word	0x0000c158

0000ab40 <__sread>:
    ab40:	b570      	push	{r4, r5, r6, lr}
    ab42:	000c      	movs	r4, r1
    ab44:	250e      	movs	r5, #14
    ab46:	5f49      	ldrsh	r1, [r1, r5]
    ab48:	f000 f8d6 	bl	acf8 <_read_r>
    ab4c:	2800      	cmp	r0, #0
    ab4e:	db03      	blt.n	ab58 <__sread+0x18>
    ab50:	6d63      	ldr	r3, [r4, #84]	; 0x54
    ab52:	181b      	adds	r3, r3, r0
    ab54:	6563      	str	r3, [r4, #84]	; 0x54
    ab56:	bd70      	pop	{r4, r5, r6, pc}
    ab58:	89a3      	ldrh	r3, [r4, #12]
    ab5a:	4a02      	ldr	r2, [pc, #8]	; (ab64 <__sread+0x24>)
    ab5c:	4013      	ands	r3, r2
    ab5e:	81a3      	strh	r3, [r4, #12]
    ab60:	e7f9      	b.n	ab56 <__sread+0x16>
    ab62:	46c0      	nop			; (mov r8, r8)
    ab64:	ffffefff 	.word	0xffffefff

0000ab68 <__swrite>:
    ab68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ab6a:	001f      	movs	r7, r3
    ab6c:	898b      	ldrh	r3, [r1, #12]
    ab6e:	0005      	movs	r5, r0
    ab70:	000c      	movs	r4, r1
    ab72:	0016      	movs	r6, r2
    ab74:	05db      	lsls	r3, r3, #23
    ab76:	d505      	bpl.n	ab84 <__swrite+0x1c>
    ab78:	230e      	movs	r3, #14
    ab7a:	5ec9      	ldrsh	r1, [r1, r3]
    ab7c:	2200      	movs	r2, #0
    ab7e:	2302      	movs	r3, #2
    ab80:	f000 f874 	bl	ac6c <_lseek_r>
    ab84:	89a3      	ldrh	r3, [r4, #12]
    ab86:	4a05      	ldr	r2, [pc, #20]	; (ab9c <__swrite+0x34>)
    ab88:	0028      	movs	r0, r5
    ab8a:	4013      	ands	r3, r2
    ab8c:	81a3      	strh	r3, [r4, #12]
    ab8e:	0032      	movs	r2, r6
    ab90:	230e      	movs	r3, #14
    ab92:	5ee1      	ldrsh	r1, [r4, r3]
    ab94:	003b      	movs	r3, r7
    ab96:	f000 f81f 	bl	abd8 <_write_r>
    ab9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ab9c:	ffffefff 	.word	0xffffefff

0000aba0 <__sseek>:
    aba0:	b570      	push	{r4, r5, r6, lr}
    aba2:	000c      	movs	r4, r1
    aba4:	250e      	movs	r5, #14
    aba6:	5f49      	ldrsh	r1, [r1, r5]
    aba8:	f000 f860 	bl	ac6c <_lseek_r>
    abac:	89a3      	ldrh	r3, [r4, #12]
    abae:	1c42      	adds	r2, r0, #1
    abb0:	d103      	bne.n	abba <__sseek+0x1a>
    abb2:	4a05      	ldr	r2, [pc, #20]	; (abc8 <__sseek+0x28>)
    abb4:	4013      	ands	r3, r2
    abb6:	81a3      	strh	r3, [r4, #12]
    abb8:	bd70      	pop	{r4, r5, r6, pc}
    abba:	2280      	movs	r2, #128	; 0x80
    abbc:	0152      	lsls	r2, r2, #5
    abbe:	4313      	orrs	r3, r2
    abc0:	81a3      	strh	r3, [r4, #12]
    abc2:	6560      	str	r0, [r4, #84]	; 0x54
    abc4:	e7f8      	b.n	abb8 <__sseek+0x18>
    abc6:	46c0      	nop			; (mov r8, r8)
    abc8:	ffffefff 	.word	0xffffefff

0000abcc <__sclose>:
    abcc:	b510      	push	{r4, lr}
    abce:	230e      	movs	r3, #14
    abd0:	5ec9      	ldrsh	r1, [r1, r3]
    abd2:	f000 f815 	bl	ac00 <_close_r>
    abd6:	bd10      	pop	{r4, pc}

0000abd8 <_write_r>:
    abd8:	b570      	push	{r4, r5, r6, lr}
    abda:	0005      	movs	r5, r0
    abdc:	0008      	movs	r0, r1
    abde:	0011      	movs	r1, r2
    abe0:	2200      	movs	r2, #0
    abe2:	4c06      	ldr	r4, [pc, #24]	; (abfc <_write_r+0x24>)
    abe4:	6022      	str	r2, [r4, #0]
    abe6:	001a      	movs	r2, r3
    abe8:	f7fb fb82 	bl	62f0 <_write>
    abec:	1c43      	adds	r3, r0, #1
    abee:	d103      	bne.n	abf8 <_write_r+0x20>
    abf0:	6823      	ldr	r3, [r4, #0]
    abf2:	2b00      	cmp	r3, #0
    abf4:	d000      	beq.n	abf8 <_write_r+0x20>
    abf6:	602b      	str	r3, [r5, #0]
    abf8:	bd70      	pop	{r4, r5, r6, pc}
    abfa:	46c0      	nop			; (mov r8, r8)
    abfc:	200004dc 	.word	0x200004dc

0000ac00 <_close_r>:
    ac00:	2300      	movs	r3, #0
    ac02:	b570      	push	{r4, r5, r6, lr}
    ac04:	4c06      	ldr	r4, [pc, #24]	; (ac20 <_close_r+0x20>)
    ac06:	0005      	movs	r5, r0
    ac08:	0008      	movs	r0, r1
    ac0a:	6023      	str	r3, [r4, #0]
    ac0c:	f7fb fbaa 	bl	6364 <_close>
    ac10:	1c43      	adds	r3, r0, #1
    ac12:	d103      	bne.n	ac1c <_close_r+0x1c>
    ac14:	6823      	ldr	r3, [r4, #0]
    ac16:	2b00      	cmp	r3, #0
    ac18:	d000      	beq.n	ac1c <_close_r+0x1c>
    ac1a:	602b      	str	r3, [r5, #0]
    ac1c:	bd70      	pop	{r4, r5, r6, pc}
    ac1e:	46c0      	nop			; (mov r8, r8)
    ac20:	200004dc 	.word	0x200004dc

0000ac24 <_fstat_r>:
    ac24:	2300      	movs	r3, #0
    ac26:	b570      	push	{r4, r5, r6, lr}
    ac28:	4c06      	ldr	r4, [pc, #24]	; (ac44 <_fstat_r+0x20>)
    ac2a:	0005      	movs	r5, r0
    ac2c:	0008      	movs	r0, r1
    ac2e:	0011      	movs	r1, r2
    ac30:	6023      	str	r3, [r4, #0]
    ac32:	f7fb fb9a 	bl	636a <_fstat>
    ac36:	1c43      	adds	r3, r0, #1
    ac38:	d103      	bne.n	ac42 <_fstat_r+0x1e>
    ac3a:	6823      	ldr	r3, [r4, #0]
    ac3c:	2b00      	cmp	r3, #0
    ac3e:	d000      	beq.n	ac42 <_fstat_r+0x1e>
    ac40:	602b      	str	r3, [r5, #0]
    ac42:	bd70      	pop	{r4, r5, r6, pc}
    ac44:	200004dc 	.word	0x200004dc

0000ac48 <_isatty_r>:
    ac48:	2300      	movs	r3, #0
    ac4a:	b570      	push	{r4, r5, r6, lr}
    ac4c:	4c06      	ldr	r4, [pc, #24]	; (ac68 <_isatty_r+0x20>)
    ac4e:	0005      	movs	r5, r0
    ac50:	0008      	movs	r0, r1
    ac52:	6023      	str	r3, [r4, #0]
    ac54:	f7fb fb8e 	bl	6374 <_isatty>
    ac58:	1c43      	adds	r3, r0, #1
    ac5a:	d103      	bne.n	ac64 <_isatty_r+0x1c>
    ac5c:	6823      	ldr	r3, [r4, #0]
    ac5e:	2b00      	cmp	r3, #0
    ac60:	d000      	beq.n	ac64 <_isatty_r+0x1c>
    ac62:	602b      	str	r3, [r5, #0]
    ac64:	bd70      	pop	{r4, r5, r6, pc}
    ac66:	46c0      	nop			; (mov r8, r8)
    ac68:	200004dc 	.word	0x200004dc

0000ac6c <_lseek_r>:
    ac6c:	b570      	push	{r4, r5, r6, lr}
    ac6e:	0005      	movs	r5, r0
    ac70:	0008      	movs	r0, r1
    ac72:	0011      	movs	r1, r2
    ac74:	2200      	movs	r2, #0
    ac76:	4c06      	ldr	r4, [pc, #24]	; (ac90 <_lseek_r+0x24>)
    ac78:	6022      	str	r2, [r4, #0]
    ac7a:	001a      	movs	r2, r3
    ac7c:	f7fb fb7c 	bl	6378 <_lseek>
    ac80:	1c43      	adds	r3, r0, #1
    ac82:	d103      	bne.n	ac8c <_lseek_r+0x20>
    ac84:	6823      	ldr	r3, [r4, #0]
    ac86:	2b00      	cmp	r3, #0
    ac88:	d000      	beq.n	ac8c <_lseek_r+0x20>
    ac8a:	602b      	str	r3, [r5, #0]
    ac8c:	bd70      	pop	{r4, r5, r6, pc}
    ac8e:	46c0      	nop			; (mov r8, r8)
    ac90:	200004dc 	.word	0x200004dc

0000ac94 <memchr>:
    ac94:	b2c9      	uxtb	r1, r1
    ac96:	1882      	adds	r2, r0, r2
    ac98:	4290      	cmp	r0, r2
    ac9a:	d101      	bne.n	aca0 <memchr+0xc>
    ac9c:	2000      	movs	r0, #0
    ac9e:	4770      	bx	lr
    aca0:	7803      	ldrb	r3, [r0, #0]
    aca2:	428b      	cmp	r3, r1
    aca4:	d0fb      	beq.n	ac9e <memchr+0xa>
    aca6:	3001      	adds	r0, #1
    aca8:	e7f6      	b.n	ac98 <memchr+0x4>

0000acaa <_realloc_r>:
    acaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    acac:	0007      	movs	r7, r0
    acae:	000d      	movs	r5, r1
    acb0:	0016      	movs	r6, r2
    acb2:	2900      	cmp	r1, #0
    acb4:	d105      	bne.n	acc2 <_realloc_r+0x18>
    acb6:	0011      	movs	r1, r2
    acb8:	f7fe fe0e 	bl	98d8 <_malloc_r>
    acbc:	0004      	movs	r4, r0
    acbe:	0020      	movs	r0, r4
    acc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    acc2:	2a00      	cmp	r2, #0
    acc4:	d103      	bne.n	acce <_realloc_r+0x24>
    acc6:	f7fe fdbd 	bl	9844 <_free_r>
    acca:	0034      	movs	r4, r6
    accc:	e7f7      	b.n	acbe <_realloc_r+0x14>
    acce:	f000 f827 	bl	ad20 <_malloc_usable_size_r>
    acd2:	002c      	movs	r4, r5
    acd4:	4286      	cmp	r6, r0
    acd6:	d9f2      	bls.n	acbe <_realloc_r+0x14>
    acd8:	0031      	movs	r1, r6
    acda:	0038      	movs	r0, r7
    acdc:	f7fe fdfc 	bl	98d8 <_malloc_r>
    ace0:	1e04      	subs	r4, r0, #0
    ace2:	d0ec      	beq.n	acbe <_realloc_r+0x14>
    ace4:	0029      	movs	r1, r5
    ace6:	0032      	movs	r2, r6
    ace8:	f7fe fd88 	bl	97fc <memcpy>
    acec:	0029      	movs	r1, r5
    acee:	0038      	movs	r0, r7
    acf0:	f7fe fda8 	bl	9844 <_free_r>
    acf4:	e7e3      	b.n	acbe <_realloc_r+0x14>
	...

0000acf8 <_read_r>:
    acf8:	b570      	push	{r4, r5, r6, lr}
    acfa:	0005      	movs	r5, r0
    acfc:	0008      	movs	r0, r1
    acfe:	0011      	movs	r1, r2
    ad00:	2200      	movs	r2, #0
    ad02:	4c06      	ldr	r4, [pc, #24]	; (ad1c <_read_r+0x24>)
    ad04:	6022      	str	r2, [r4, #0]
    ad06:	001a      	movs	r2, r3
    ad08:	f7fb fad0 	bl	62ac <_read>
    ad0c:	1c43      	adds	r3, r0, #1
    ad0e:	d103      	bne.n	ad18 <_read_r+0x20>
    ad10:	6823      	ldr	r3, [r4, #0]
    ad12:	2b00      	cmp	r3, #0
    ad14:	d000      	beq.n	ad18 <_read_r+0x20>
    ad16:	602b      	str	r3, [r5, #0]
    ad18:	bd70      	pop	{r4, r5, r6, pc}
    ad1a:	46c0      	nop			; (mov r8, r8)
    ad1c:	200004dc 	.word	0x200004dc

0000ad20 <_malloc_usable_size_r>:
    ad20:	1f0b      	subs	r3, r1, #4
    ad22:	681b      	ldr	r3, [r3, #0]
    ad24:	1f18      	subs	r0, r3, #4
    ad26:	2b00      	cmp	r3, #0
    ad28:	da01      	bge.n	ad2e <_malloc_usable_size_r+0xe>
    ad2a:	580b      	ldr	r3, [r1, r0]
    ad2c:	18c0      	adds	r0, r0, r3
    ad2e:	4770      	bx	lr
    ad30:	61746164 	.word	0x61746164
    ad34:	205d325b 	.word	0x205d325b
    ad38:	74617473 	.word	0x74617473
    ad3c:	3d207375 	.word	0x3d207375
    ad40:	25783020 	.word	0x25783020
    ad44:	00000a78 	.word	0x00000a78
    ad48:	000003a2 	.word	0x000003a2
    ad4c:	000005e8 	.word	0x000005e8
    ad50:	000005e8 	.word	0x000005e8
    ad54:	000005e8 	.word	0x000005e8
    ad58:	000005e8 	.word	0x000005e8
    ad5c:	000005e8 	.word	0x000005e8
    ad60:	000005e8 	.word	0x000005e8
    ad64:	000005e8 	.word	0x000005e8
    ad68:	000005e8 	.word	0x000005e8
    ad6c:	000005e8 	.word	0x000005e8
    ad70:	000005e8 	.word	0x000005e8
    ad74:	000005e8 	.word	0x000005e8
    ad78:	000005e8 	.word	0x000005e8
    ad7c:	000005e8 	.word	0x000005e8
    ad80:	000005e8 	.word	0x000005e8
    ad84:	000005e8 	.word	0x000005e8
    ad88:	0000038a 	.word	0x0000038a
    ad8c:	000005e8 	.word	0x000005e8
    ad90:	000005e8 	.word	0x000005e8
    ad94:	000005e8 	.word	0x000005e8
    ad98:	000005e8 	.word	0x000005e8
    ad9c:	000005e8 	.word	0x000005e8
    ada0:	000005e8 	.word	0x000005e8
    ada4:	000005e8 	.word	0x000005e8
    ada8:	000005e8 	.word	0x000005e8
    adac:	000005e8 	.word	0x000005e8
    adb0:	000005e8 	.word	0x000005e8
    adb4:	000005e8 	.word	0x000005e8
    adb8:	000005e8 	.word	0x000005e8
    adbc:	000005e8 	.word	0x000005e8
    adc0:	000005e8 	.word	0x000005e8
    adc4:	000005e8 	.word	0x000005e8
    adc8:	0000039a 	.word	0x0000039a
    adcc:	000005e8 	.word	0x000005e8
    add0:	000005e8 	.word	0x000005e8
    add4:	000005e8 	.word	0x000005e8
    add8:	000005e8 	.word	0x000005e8
    addc:	000005e8 	.word	0x000005e8
    ade0:	000005e8 	.word	0x000005e8
    ade4:	000005e8 	.word	0x000005e8
    ade8:	000005e8 	.word	0x000005e8
    adec:	000005e8 	.word	0x000005e8
    adf0:	000005e8 	.word	0x000005e8
    adf4:	000005e8 	.word	0x000005e8
    adf8:	000005e8 	.word	0x000005e8
    adfc:	000005e8 	.word	0x000005e8
    ae00:	000005e8 	.word	0x000005e8
    ae04:	000005e8 	.word	0x000005e8
    ae08:	00000392 	.word	0x00000392
    ae0c:	000003aa 	.word	0x000003aa
    ae10:	00000372 	.word	0x00000372
    ae14:	00000382 	.word	0x00000382
    ae18:	0000037a 	.word	0x0000037a
    ae1c:	00000002 	.word	0x00000002
    ae20:	00000003 	.word	0x00000003
    ae24:	00000028 	.word	0x00000028
    ae28:	00000029 	.word	0x00000029
    ae2c:	00000004 	.word	0x00000004
    ae30:	00000005 	.word	0x00000005
    ae34:	00000006 	.word	0x00000006
    ae38:	00000007 	.word	0x00000007
    ae3c:	00000020 	.word	0x00000020
    ae40:	00000021 	.word	0x00000021
    ae44:	00000022 	.word	0x00000022
    ae48:	00000023 	.word	0x00000023
    ae4c:	00000024 	.word	0x00000024
    ae50:	00000025 	.word	0x00000025
    ae54:	00000026 	.word	0x00000026
    ae58:	00000027 	.word	0x00000027
    ae5c:	00000008 	.word	0x00000008
    ae60:	00000009 	.word	0x00000009
    ae64:	0000000a 	.word	0x0000000a
    ae68:	0000000b 	.word	0x0000000b

0000ae6c <CMD_MEASURE_LPM_CS>:
    ae6c:	00005864                                dX..

0000ae70 <CMD_READ_ID_REG>:
    ae70:	0000c8ef                                ....

0000ae74 <__FUNCTION__.14481>:
    ae74:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
    ae84:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    ae94:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
    aea4:	6320746c 0000646d 00001db0 00001d80     lt cmd..........
    aeb4:	00001d78 00001d90 00001d88 00001da8     x...............
    aec4:	00001d98 00001da0                       ........

0000aecc <__FUNCTION__.13064>:
    aecc:	5f666968 646e6573 00000000              hif_send....

0000aed8 <__FUNCTION__.13074>:
    aed8:	5f666968 00727369                       hif_isr.

0000aee0 <__FUNCTION__.13080>:
    aee0:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0000aef0 <__FUNCTION__.13092>:
    aef0:	5f666968 65636572 00657669              hif_receive.

0000aefc <__FUNCTION__.13108>:
    aefc:	5f666968 69676572 72657473 0062635f     hif_register_cb.
    af0c:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
    af1c:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
    af2c:	006c6961 66696828 64612029 73657264     ail.(hif) addres
    af3c:	75622073 61662073 00006c69 66696828     s bus fail..(hif
    af4c:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
    af5c:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
    af6c:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
    af7c:	25203d20 3e583230 0000000a 49464957      = %02X>....WIFI
    af8c:	6c616320 6361626c 7369206b 746f6e20      callback is not
    af9c:	67657220 65747369 00646572 6b6f6353      registered.Scok
    afac:	63207465 626c6c61 206b6361 6e207369     et callback is n
    afbc:	7220746f 73696765 65726574 00000064     ot registered...
    afcc:	2061744f 6c6c6163 6b636162 20736920     Ota callback is 
    afdc:	20746f6e 69676572 72657473 00006465     not registered..
    afec:	70797243 63206f74 626c6c61 206b6361     Crypto callback 
    affc:	6e207369 7220746f 73696765 65726574     is not registere
    b00c:	00000064 6d676953 61632061 61626c6c     d...Sigma callba
    b01c:	69206b63 6f6e2073 65722074 74736967     ck is not regist
    b02c:	64657265 00000000 66696828 6e692029     ered....(hif) in
    b03c:	696c6176 72672064 2070756f 00004449     valid group ID..
    b04c:	66696828 6f682029 61207473 64207070     (hif) host app d
    b05c:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
    b06c:	253c2065 253c3e75 000a3e58 66696828     e <%u><%X>..(hif
    b07c:	72572029 20676e6f 657a6953 00000000     ) Wrong Size....
    b08c:	66696828 61462029 2065736c 65746e69     (hif) False inte
    b09c:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
    b0ac:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
    b0bc:	7265746e 74707572 67657220 00000000     nterrupt reg....
    b0cc:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
    b0dc:	656c646e 746e6920 75727265 25207470     ndle interrupt %
    b0ec:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
    b0fc:	66696820 6365725f 65766965 6e49203a      hif_receive: In
    b10c:	696c6176 72612064 656d7567 0000746e     valid argument..
    b11c:	20505041 75716552 65747365 69532064     APP Requested Si
    b12c:	6920657a 616c2073 72656772 61687420     ze is larger tha
    b13c:	6874206e 65722065 65766963 75622064     n the recived bu
    b14c:	72656666 7a697320 253c2065 253c3e75     ffer size <%u><%
    b15c:	0a3e756c 00000000 20505041 75716552     lu>.....APP Requ
    b16c:	65747365 64412064 73657264 65622073     ested Address be
    b17c:	646e6f79 65687420 63657220 64657669     yond the recived
    b18c:	66756220 20726566 72646461 20737365      buffer address 
    b19c:	20646e61 676e656c 00006874 20705247     and length..GRp 
    b1ac:	6425203f 0000000a 50504128 4e492829     ? %d....(APP)(IN
    b1bc:	00294f46 776f6c53 20676e69 6e776f64     FO).Slowing down
    b1cc:	002e2e2e 46494828 69614629 6f74206c     ....(HIF)Fail to
    b1dc:	6b617720 74207075 63206568 00706968      wakup the chip.

0000b1ec <__FUNCTION__.13043>:
    b1ec:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0000b1f8 <__FUNCTION__.13072>:
    b1f8:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0000b208 <__FUNCTION__.13100>:
    b208:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
    b218:	0063735f 666e6f43 7463696c 49206465     _sc.Conflicted I
    b228:	20222050 252e7525 75252e75 2075252e     P " %u.%u.%u.%u 
    b238:	000a2022 20514552 20746f4e 69666564     " ..REQ Not defi
    b248:	2064656e 000a6425 2079654b 6e207369     ned %d..Key is n
    b258:	7620746f 64696c61 00000000 61766e49     ot valid....Inva
    b268:	2064696c 0079654b 44495353 4e454c20     lid Key.SSID LEN
    b278:	564e4920 44494c41 00000000 49204843      INVALID....CH I
    b288:	4c41564e 00004449 61766e49 2064696c     NVALID..Invalid 
    b298:	20706557 2079656b 65646e69 64252078     Wep key index %d
    b2a8:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
    b2b8:	2079656b 676e656c 25206874 00000a64     key length %d...
    b2c8:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
    b2d8:	656c2079 6874676e 00000000 65646e75     y length....unde
    b2e8:	656e6966 65732064 79742063 00006570     fined sec type..
    b2f8:	6d726946 65726177 72657620 3a202020     Firmware ver   :
    b308:	2e752520 252e7525 76532075 7665726e      %u.%u.%u Svnrev
    b318:	0a752520 00000000 6d726946 65726177      %u.....Firmware
    b328:	69754220 2520646c 69542073 2520656d      Build %s Time %
    b338:	00000a73 6d726946 65726177 6e694d20     s...Firmware Min
    b348:	69726420 20726576 20726576 7525203a      driver ver : %u
    b358:	2e75252e 000a7525 76697244 76207265     .%u.%u..Driver v
    b368:	203a7265 252e7525 75252e75 0000000a     er: %u.%u.%u....
    b378:	303a3431 32353a34 00000000 20626546     14:04:52....Feb 
    b388:	32203032 00383130 76697244 62207265     20 2018.Driver b
    b398:	746c6975 20746120 25097325 00000a73     uilt at %s.%s...
    b3a8:	6d73694d 68637461 72694620 7277616d     Mismatch Firmawr
    b3b8:	65562065 6f697372 0000006e              e Version...

0000b3c4 <__FUNCTION__.12906>:
    b3c4:	70696863 6b61775f 00000065              chip_wake...

0000b3d0 <__FUNCTION__.12955>:
    b3d0:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
    b3e0:	74206465 6564206f 696e692d 6c616974     ed to de-initial
    b3f0:	00657a69 20737542 6f727265 35282072     ize.Bus error (5
    b400:	64252e29 786c2520 0000000a 6c696146     ).%d %lx....Fail
    b410:	74206465 6177206f 2070756b 20656874     ed to wakup the 
    b420:	70696863 00000000 76697244 65567265     chip....DriverVe
    b430:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..

0000b440 <__FUNCTION__.12953>:
    b440:	645f6d6e 695f7672 0074696e              nm_drv_init.

0000b44c <__FUNCTION__.12960>:
    b44c:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
    b45c:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
    b46c:	6965645f 2074696e 6c696166 00000000     _deinit fail....
    b47c:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
    b48c:	73616c66 69642068 6c626173 61662065     flash disable fa
    b49c:	00006c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
    b4ac:	6c696166 696e6920 75622074 00000073     fail init bus...
    b4bc:	6c696166 74206465 6e65206f 656c6261     failed to enable
    b4cc:	746e6920 75727265 2e737470 0000002e      interrupts.....
    b4dc:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
    b4ec:	6e69206c 62207469 00007375 70696843     l init bus..Chip
    b4fc:	20444920 0a786c25 00000000 00002d90      ID %lx......-..
    b50c:	00002d90 00002dc0 00002d42 00002d66     .-...-..B-..f-..
    b51c:	00002d74 00002da6 00002da6 00002dee     t-...-...-...-..
    b52c:	00002d26 00002e28 00002e28 00002e28     &-..(...(...(...
    b53c:	00002e28 00002d82 cac4c9c3              (....-......

0000b548 <__FUNCTION__.12259>:
    b548:	5f697073 00646d63                       spi_cmd.

0000b550 <__FUNCTION__.12266>:
    b550:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

0000b560 <__FUNCTION__.12275>:
    b560:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0000b56c <__FUNCTION__.12291>:
    b56c:	5f697073 61746164 6165725f 00000064     spi_data_read...

0000b57c <__FUNCTION__.12306>:
    b57c:	5f697073 61746164 6972775f 00006574     spi_data_write..

0000b58c <__FUNCTION__.12318>:
    b58c:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0000b59c <__FUNCTION__.12329>:
    b59c:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0000b5ac <__FUNCTION__.12341>:
    b5ac:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0000b5bc <__FUNCTION__.12354>:
    b5bc:	735f6d6e 725f6970 00646165              nm_spi_read.

0000b5c8 <__FUNCTION__.12375>:
    b5c8:	735f6d6e 695f6970 0074696e              nm_spi_init.

0000b5d4 <crc7_syndrome_table>:
    b5d4:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
    b5e4:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
    b5f4:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
    b604:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
    b614:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
    b624:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
    b634:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
    b644:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
    b654:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
    b664:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
    b674:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
    b684:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
    b694:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
    b6a4:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
    b6b4:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
    b6c4:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
    b6d4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    b6e4:	6e692064 6e726574 72206c61 20646165     d internal read 
    b6f4:	746f7270 6c6f636f 74697720 52432068     protocol with CR
    b704:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
    b714:	20687469 20435243 2e66666f 00002e2e     ith CRC off.....
    b724:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    b734:	6e692064 6e726574 72206c61 20646165     d internal read 
    b744:	746f7270 6c6f636f 002e2e2e 696d6e5b     protocol....[nmi
    b754:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
    b764:	6e726574 77206c61 65746972 6f727020     ternal write pro
    b774:	6f636f74 6572206c 2e2e2e67 00000000     tocol reg.......
    b784:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
    b794:	20646d63 64616572 69686320 64692070     cmd read chip id
    b7a4:	002e2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    b7b4:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
    b7c4:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
    b7d4:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    b7e4:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
    b7f4:	202c6573 64616572 6f6c6220 28206b63     se, read block (
    b804:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
    b814:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    b824:	206b636f 61746164 61657220 2e2e2e64     ock data read...
    b834:	00000000 65736552 6e612074 65722064     ....Reset and re
    b844:	20797274 25206425 2520786c 00000a64     try %d %lx %d...
    b854:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    b864:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
    b874:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
    b884:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
    b894:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
    b8a4:	69727720 62206574 6b636f6c 30252820      write block (%0
    b8b4:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
    b8c4:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    b8d4:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
    b8e4:	20737562 6f727265 2e2e2e72 00000000     bus error.......
    b8f4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    b904:	61642064 62206174 6b636f6c 69727720     d data block wri
    b914:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
    b924:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    b934:	656c6961 61642064 62206174 6b636f6c     ailed data block
    b944:	63726320 69727720 202c6574 20737562      crc write, bus 
    b954:	6f727265 2e2e2e72 00000000 696d6e5b     error.......[nmi
    b964:	69707320 46203a5d 656c6961 75622064      spi]: Failed bu
    b974:	72652073 2e726f72 00002e2e 696d6e5b     s error.....[nmi
    b984:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    b994:	72206174 6f707365 2065736e 64616572     ta response read
    b9a4:	7825202c 20782520 000a7825 696d6e5b     , %x %x %x..[nmi
    b9b4:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    b9c4:	206b636f 61746164 69727720 2e2e6574     ock data write..
    b9d4:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    b9e4:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
    b9f4:	73756220 72726520 2e2e726f 0000002e      bus error......
    ba04:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    ba14:	6d632064 65722064 6e6f7073 72206573     d cmd response r
    ba24:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
    ba34:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    ba44:	656c6961 61642064 72206174 6f707365     ailed data respo
    ba54:	2065736e 64616572 7562202c 72652073     nse read, bus er
    ba64:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
    ba74:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
    ba84:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
    ba94:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
    baa4:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    bab4:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
    bac4:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
    bad4:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    bae4:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
    baf4:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
    bb04:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    bb14:	72202c64 20646165 20676572 38302528     d, read reg (%08
    bb24:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
    bb34:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
    bb44:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
    bb54:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    bb64:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    bb74:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
    bb84:	6e612074 65722064 20797274 25206425     t and retry %d %
    bb94:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
    bba4:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
    bbb4:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
    bbc4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    bbd4:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
    bbe4:	74697277 65722065 25282067 29783830     write reg (%08x)
    bbf4:	0a2e2e2e 00000000 65736552 6e612074     ........Reset an
    bc04:	65722064 20797274 25206425 2520786c     d retry %d %lx %
    bc14:	000a786c 52524528 75432952 6e657272     lx..(ERRR)Curren
    bc24:	253c2074 000a3e64 6b636f53 206f7420     t <%d>..Sock to 
    bc34:	656c6564 3c206574 0a3e6425 00000000     delete <%d>.....
    bc44:	6b636f53 25207465 65732064 6f697373     Socket %d sessio
    bc54:	4449206e 25203d20 000a0d64 42000800     n ID = %d......B
    bc64:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    bc74:	42001c00 000053da 000053d6 000053d6     ...B.S...S...S..
    bc84:	00005438 00005438 000053ee 000053e0     8T..8T...S...S..
    bc94:	000053f4 00005426 000055f8 000055d8     .S..&T...U...U..
    bca4:	000055d8 00005664 000055ea 00005606     .U..dV...U...V..
    bcb4:	000055dc 00005614 00005654              .U...V..TV..

0000bcc0 <_tcc_apbcmasks>:
    bcc0:	00000100 00000200 00000400              ............

0000bccc <_tcc_cc_nums>:
    bccc:	00020204                                ....

0000bcd0 <_tcc_gclk_ids>:
    bcd0:	001b1a1a                                ....

0000bcd4 <_tcc_maxs>:
    bcd4:	00ffffff 00ffffff 0000ffff              ............

0000bce0 <_tcc_ow_nums>:
    bce0:	00020408                                ....

0000bce4 <_tcc_intflag>:
    bce4:	00000001 00000002 00000004 00000008     ................
    bcf4:	00001000 00002000 00004000 00008000     ..... ...@......
    bd04:	00010000 00020000 00040000 00080000     ................

0000bd14 <tcc_interrupt_vectors.12442>:
    bd14:	0011100f 42002000 42002400 42002800     ..... .B.$.B.(.B
    bd24:	20746f6e 73657270 00746e65 57202d2d     not present.-- W
    bd34:	31434e49 20303035 462d6957 514d2069     INC1500 Wi-Fi MQ
    bd44:	63205454 20746168 6d617865 20656c70     TT chat example 
    bd54:	0a0d2d2d 53202d2d 32444d41 50585f31     --..-- SAMD21_XP
    bd64:	4e49414c 505f4445 2d204f52 2d0a0d2d     LAINED_PRO --..-
    bd74:	6f43202d 6c69706d 203a6465 20727041     - Compiled: Apr 
    bd84:	32203320 20383130 353a3031 32313a34      3 2018 10:54:12
    bd94:	0d2d2d20 00000000 72657355 25203a20      --.....User : %
    bda4:	000a0d73 736e6573 0000726f 73257325     s...sensor..%s%s
    bdb4:	00000000 00736d61 6e69616d 326d203a     ....ams.main: m2
    bdc4:	69775f6d 695f6966 2074696e 6c6c6163     m_wifi_init call
    bdd4:	72726520 2821726f 0d296425 0000000a      error!(%d).....
    bde4:	5454514d 696e6920 6c616974 74617a69     MQTT initializat
    bdf4:	206e6f69 6c696166 202e6465 6f727245     ion failed. Erro
    be04:	6f632072 69206564 25282073 0a0d2964     r code is (%d)..
    be14:	00000000 5454514d 67657220 65747369     ....MQTT registe
    be24:	61632072 61626c6c 66206b63 656c6961     r callback faile
    be34:	45202e64 726f7272 646f6320 73692065     d. Error code is
    be44:	64252820 000a0d29 74730a0d 69747261      (%d).....starti
    be54:	2e2e676e 00000d2e 736e6573 6920726f     ng......sensor i
    be64:	73252073 00000a0d 206f7242 61632049     s %s....Bro I ca
    be74:	2074276e 7361656d 20657275 20656874     n't measure the 
    be84:	706d6554 48202620 64696d75 2e797469     Temp & Humidity.
    be94:	65724120 756f7920 72757320 6f792065      Are you sure yo
    bea4:	6c702075 65676775 68742064 65732065     u plugged the se
    beb4:	726f736e 3f6e6920 00000000 4f56227b     nsor in?....{"VO
    bec4:	253a2243 43222c64 3a22324f 007d6425     C":%d,"CO2":%d}.
    bed4:	206f7242 61632049 2074276e 7361656d     Bro I can't meas
    bee4:	20657275 20656874 20434f56 4f432026     ure the VOC & CO
    bef4:	41202e32 79206572 7320756f 20657275     2. Are you sure 
    bf04:	20756f79 67756c70 20646567 20656874     you plugged the 
    bf14:	2d514169 65726f43 3f6e6920 00000000     iAQ-Core in?....
    bf24:	54737953 206b6369 666e6f63 72756769     SysTick configur
    bf34:	6f697461 7265206e 00726f72 0a0d7325     ation error.%s..
    bf44:	00000000 4554227b 3a22504d 222c6425     ....{"TEMP":%d,"
    bf54:	224d5548 2c64253a 53414722 64253a22     HUM":%d,"GAS":%d
    bf64:	0000007d                                }...

0000bf68 <main_mqtt_broker>:
    bf68:	2e6d326d 696c6365 2e657370 0067726f     m2m.eclipse.org.
    bf78:	6e6e6f43 20746365 6c696166 206f7420     Connect fail to 
    bf88:	76726573 25287265 20212973 72746572     server(%s)! retr
    bf98:	74692079 74756120 74616d6f 6c616369     y it automatical
    bfa8:	0d2e796c 0000000a 786f6264 7461642f     ly......dbox/dat
    bfb8:	00232f61 786f6264 7461642f 00002f61     a/#.dbox/data/..
    bfc8:	73627553 62697263 74206465 6874206f     Subscribed to th
    bfd8:	6f742065 3a636970 0d732520 0000000a     e topic: %s.....
    bfe8:	70657250 74617261 206e6f69 7420666f     Preparation of t
    bff8:	63206568 20746168 20736168 6e656562     he chat has been
    c008:	6d6f6320 74656c70 0d2e6465 00000000      completed......
    c018:	5454514d 6f726220 2072656b 6c636564     MQTT broker decl
    c028:	20656e69 72756f79 63636120 21737365     ine your access!
    c038:	72726520 6320726f 2065646f 0a0d6425      error code %d..
    c048:	00000000 203e3e20 00000000 0000000d     .... >> ........
    c058:	5454514d 73696420 6e6e6f63 65746365     MQTT disconnecte
    c068:	00000d64 462d6957 6f632069 63656e6e     d...Wi-Fi connec
    c078:	0d646574 00000000 462d6957 69642069     ted.....Wi-Fi di
    c088:	6e6f6373 7463656e 000d6465 70707573     sconnected..supp
    c098:	3174726f 00003332 61746144 74666f53     ort123..DataSoft
    c0a8:	4669575f 00000069 462d6957 50492069     _WiFi...Wi-Fi IP
    c0b8:	20736920 252e7525 75252e75 0d75252e      is %u.%u.%u.%u.
    c0c8:	0000000a 7349514d 00007064 000086f0     ....MQIsdp......
    c0d8:	000086d2 0000868c 000085aa 0000868c     ................
    c0e8:	000086c4 0000868c 000085aa 000086d2     ................
    c0f8:	000086d2 000086c4 000085aa 000085a2     ................
    c108:	000085a2 000085a2 00008908 00008d50     ............P...
    c118:	00008c10 00008c10 00008c0c 00008d28     ............(...
    c128:	00008d28 00008d1a 00008c0c 00008d28     (...........(...
    c138:	00008d1a 00008d28 00008c0c 00008d30     ....(.......0...
    c148:	00008d30 00008d30 00008f34              0...0...4...

0000c154 <_global_impure_ptr>:
    c154:	20000050                                P.. 

0000c158 <__sf_fake_stderr>:
	...

0000c178 <__sf_fake_stdin>:
	...

0000c198 <__sf_fake_stdout>:
	...
    c1b8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    c1c8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    c1d8:	31300046 35343332 39383736 64636261     F.0123456789abcd
    c1e8:	00006665                                ef..

0000c1ec <_init>:
    c1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c1ee:	46c0      	nop			; (mov r8, r8)
    c1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c1f2:	bc08      	pop	{r3}
    c1f4:	469e      	mov	lr, r3
    c1f6:	4770      	bx	lr

0000c1f8 <__init_array_start>:
    c1f8:	000000dd 	.word	0x000000dd

0000c1fc <_fini>:
    c1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c1fe:	46c0      	nop			; (mov r8, r8)
    c200:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c202:	bc08      	pop	{r3}
    c204:	469e      	mov	lr, r3
    c206:	4770      	bx	lr

0000c208 <__fini_array_start>:
    c208:	000000b5 	.word	0x000000b5
